import{S as KQt,i as ZQt,s as eWt,e as a,k as l,w as F,t as o,M as oWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as rWt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ftt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function tWt($){let g,v,p,m,_,d,h,Co,Li,Pf,lt,yi,xi,rL,Bf,Oe,We,$i,Pn,tL,Bn,In,aL,ki,Nn,nL,Si,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),Li=a("code"),Pf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),rL=o(")."),Bf=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Pn=o("NewModel"),tL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),aL=o(`, make sure its
`),ki=a("code"),Nn=o("config_class"),nL=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Le=s(g);v=r(Le,"If your "),p=n(Le,"CODE",{});var NS=s(p);m=r(NS,"NewModelConfig"),NS.forEach(t),_=r(Le," is a subclass of "),d=n(Le,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Co=r(Le,`, make sure its
`),Li=n(Le,"CODE",{});var qS=s(Li);Pf=r(qS,"model_type"),qS.forEach(t),lt=r(Le," attribute is set to the same key you use when registering the config (here "),yi=n(Le,"CODE",{});var jS=s(yi);xi=r(jS,'"new-model"'),jS.forEach(t),rL=r(Le,")."),Le.forEach(t),Bf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),$i=n(wo,"CODE",{});var Ra=s($i);Pn=r(Ra,"NewModel"),Ra.forEach(t),tL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var DS=s(Bn);In=r(DS,"PreTrainedModel"),DS.forEach(t),aL=r(wo,`, make sure its
`),ki=n(wo,"CODE",{});var Nf=s(ki);Nn=r(Nf,"config_class"),Nf.forEach(t),nL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Si=n(wo,"CODE",{});var GS=s(Si);If=r(GS,"NewModelConfig"),GS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel")},m(He,Le){b(He,g,Le),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,Li),e(Li,Pf),e(g,lt),e(g,yi),e(yi,xi),e(g,rL),b(He,Bf,Le),b(He,Oe,Le),e(Oe,We),e(Oe,$i),e($i,Pn),e(Oe,tL),e(Oe,Bn),e(Bn,In),e(Oe,aL),e(Oe,ki),e(ki,Nn),e(Oe,nL),e(Oe,Si),e(Si,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bf),He&&t(Oe)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_,d,h,Co,Li,Pf,lt,yi,xi,rL,Bf,Oe,We,$i,Pn,tL,Bn,In,aL,ki,Nn,nL,Si,If,Sa,He,Le,NS,Ri,qS,jS,wo,Ra,DS,Nf,GS,FHe,nXe,Pi,qf,yae,sL,THe,xae,MHe,sXe,qn,EHe,$ae,CHe,wHe,kae,AHe,LHe,lXe,lL,iXe,OS,yHe,dXe,jf,cXe,Bi,Df,Sae,iL,xHe,Rae,$He,fXe,Ao,dL,kHe,cL,SHe,VS,RHe,PHe,BHe,fL,IHe,Pae,NHe,qHe,jHe,Lr,mL,DHe,Bae,GHe,OHe,Ii,VHe,Iae,XHe,zHe,Nae,QHe,WHe,HHe,A,Gf,qae,UHe,JHe,XS,YHe,KHe,ZHe,Of,jae,eUe,oUe,zS,rUe,tUe,aUe,Vf,Dae,nUe,sUe,QS,lUe,iUe,dUe,Xf,Gae,cUe,fUe,WS,mUe,gUe,hUe,zf,Oae,pUe,_Ue,HS,uUe,bUe,vUe,Qf,Vae,FUe,TUe,US,MUe,EUe,CUe,Wf,Xae,wUe,AUe,JS,LUe,yUe,xUe,Hf,zae,$Ue,kUe,YS,SUe,RUe,PUe,Uf,Qae,BUe,IUe,KS,NUe,qUe,jUe,Jf,Wae,DUe,GUe,ZS,OUe,VUe,XUe,Yf,Hae,zUe,QUe,eR,WUe,HUe,UUe,Kf,Uae,JUe,YUe,oR,KUe,ZUe,eJe,Zf,Jae,oJe,rJe,rR,tJe,aJe,nJe,em,Yae,sJe,lJe,tR,iJe,dJe,cJe,om,Kae,fJe,mJe,aR,gJe,hJe,pJe,rm,Zae,_Je,uJe,nR,bJe,vJe,FJe,tm,ene,TJe,MJe,sR,EJe,CJe,wJe,am,one,AJe,LJe,lR,yJe,xJe,$Je,nm,rne,kJe,SJe,iR,RJe,PJe,BJe,sm,tne,IJe,NJe,dR,qJe,jJe,DJe,lm,ane,GJe,OJe,cR,VJe,XJe,zJe,im,nne,QJe,WJe,fR,HJe,UJe,JJe,dm,sne,YJe,KJe,mR,ZJe,eYe,oYe,cm,lne,rYe,tYe,gR,aYe,nYe,sYe,fm,ine,lYe,iYe,hR,dYe,cYe,fYe,mm,dne,mYe,gYe,pR,hYe,pYe,_Ye,gm,cne,uYe,bYe,_R,vYe,FYe,TYe,hm,fne,MYe,EYe,uR,CYe,wYe,AYe,pm,mne,LYe,yYe,bR,xYe,$Ye,kYe,_m,gne,SYe,RYe,vR,PYe,BYe,IYe,um,hne,NYe,qYe,FR,jYe,DYe,GYe,bm,pne,OYe,VYe,TR,XYe,zYe,QYe,vm,_ne,WYe,HYe,MR,UYe,JYe,YYe,Fm,une,KYe,ZYe,ER,eKe,oKe,rKe,Tm,bne,tKe,aKe,CR,nKe,sKe,lKe,Mm,vne,iKe,dKe,wR,cKe,fKe,mKe,Em,Fne,gKe,hKe,AR,pKe,_Ke,uKe,Cm,Tne,bKe,vKe,LR,FKe,TKe,MKe,wm,Mne,EKe,CKe,yR,wKe,AKe,LKe,Am,Ene,yKe,xKe,xR,$Ke,kKe,SKe,Lm,Cne,RKe,PKe,$R,BKe,IKe,NKe,ym,wne,qKe,jKe,kR,DKe,GKe,OKe,xm,Ane,VKe,XKe,SR,zKe,QKe,WKe,$m,Lne,HKe,UKe,RR,JKe,YKe,KKe,km,yne,ZKe,eZe,PR,oZe,rZe,tZe,Sm,xne,aZe,nZe,BR,sZe,lZe,iZe,Rm,$ne,dZe,cZe,IR,fZe,mZe,gZe,Pm,kne,hZe,pZe,NR,_Ze,uZe,bZe,Bm,Sne,vZe,FZe,qR,TZe,MZe,EZe,Im,Rne,CZe,wZe,jR,AZe,LZe,yZe,Nm,Pne,xZe,$Ze,DR,kZe,SZe,RZe,qm,Bne,PZe,BZe,GR,IZe,NZe,qZe,jm,Ine,jZe,DZe,OR,GZe,OZe,VZe,Dm,Nne,XZe,zZe,VR,QZe,WZe,HZe,Gm,qne,UZe,JZe,XR,YZe,KZe,ZZe,Om,jne,eeo,oeo,zR,reo,teo,aeo,Vm,Dne,neo,seo,QR,leo,ieo,deo,Xm,Gne,ceo,feo,WR,meo,geo,heo,zm,One,peo,_eo,HR,ueo,beo,veo,Qm,Vne,Feo,Teo,UR,Meo,Eeo,Ceo,Wm,Xne,weo,Aeo,JR,Leo,yeo,xeo,Hm,zne,$eo,keo,YR,Seo,Reo,Peo,Um,Qne,Beo,Ieo,KR,Neo,qeo,jeo,Jm,Wne,Deo,Geo,ZR,Oeo,Veo,Xeo,Ym,Hne,zeo,Qeo,eP,Weo,Heo,Ueo,Km,Une,Jeo,Yeo,oP,Keo,Zeo,eoo,Zm,Jne,ooo,roo,rP,too,aoo,noo,eg,Yne,soo,loo,tP,ioo,doo,coo,og,Kne,foo,moo,aP,goo,hoo,poo,rg,Zne,_oo,uoo,nP,boo,voo,Foo,tg,ese,Too,Moo,sP,Eoo,Coo,woo,ag,ose,Aoo,Loo,lP,yoo,xoo,$oo,ng,rse,koo,Soo,iP,Roo,Poo,Boo,sg,tse,Ioo,Noo,dP,qoo,joo,Doo,lg,ase,Goo,Ooo,cP,Voo,Xoo,zoo,ig,nse,Qoo,Woo,fP,Hoo,Uoo,Joo,dg,sse,Yoo,Koo,mP,Zoo,ero,oro,cg,lse,rro,tro,gP,aro,nro,sro,fg,ise,lro,iro,hP,dro,cro,fro,mg,dse,mro,gro,pP,hro,pro,_ro,gg,cse,uro,bro,_P,vro,Fro,Tro,hg,fse,Mro,Ero,uP,Cro,wro,Aro,pg,mse,Lro,yro,bP,xro,$ro,kro,_g,gse,Sro,Rro,vP,Pro,Bro,Iro,ug,hse,Nro,qro,FP,jro,Dro,Gro,bg,pse,Oro,Vro,TP,Xro,zro,Qro,vg,_se,Wro,Hro,MP,Uro,Jro,Yro,Fg,use,Kro,Zro,EP,eto,oto,rto,Tg,bse,tto,ato,CP,nto,sto,lto,Mg,vse,ito,dto,wP,cto,fto,mto,Eg,Fse,gto,hto,AP,pto,_to,uto,Cg,Tse,bto,vto,LP,Fto,Tto,Mto,wg,Mse,Eto,Cto,yP,wto,Ato,Lto,Ag,Ese,yto,xto,xP,$to,kto,Sto,Lg,Cse,Rto,Pto,$P,Bto,Ito,Nto,yg,wse,qto,jto,kP,Dto,Gto,Oto,xg,Ase,Vto,Xto,SP,zto,Qto,Wto,$g,Lse,Hto,Uto,RP,Jto,Yto,Kto,kg,yse,Zto,eao,PP,oao,rao,tao,Sg,xse,aao,nao,BP,sao,lao,iao,Rg,$se,dao,cao,IP,fao,mao,gao,Pg,kse,hao,pao,NP,_ao,uao,bao,Bg,Sse,vao,Fao,qP,Tao,Mao,Eao,Ig,Rse,Cao,wao,jP,Aao,Lao,yao,Ng,Pse,xao,$ao,DP,kao,Sao,Rao,qg,Bse,Pao,Bao,GP,Iao,Nao,qao,jg,Ise,jao,Dao,OP,Gao,Oao,Vao,Dg,Nse,Xao,zao,VP,Qao,Wao,Hao,Gg,qse,Uao,Jao,XP,Yao,Kao,Zao,Og,jse,eno,ono,zP,rno,tno,ano,Vg,Dse,nno,sno,QP,lno,ino,dno,Xg,Gse,cno,fno,WP,mno,gno,hno,zg,Ose,pno,_no,HP,uno,bno,vno,Qg,Vse,Fno,Tno,UP,Mno,Eno,Cno,Wg,Xse,wno,Ano,JP,Lno,yno,xno,Hg,zse,$no,kno,YP,Sno,Rno,Pno,Ug,Qse,Bno,Ino,KP,Nno,qno,jno,Jg,Wse,Dno,Gno,ZP,Ono,Vno,Xno,Yg,zno,Kg,gL,Qno,Hse,Wno,mXe,Ni,Zg,Use,hL,Hno,Jse,Uno,gXe,Lo,pL,Jno,_L,Yno,eB,Kno,Zno,eso,uL,oso,Yse,rso,tso,aso,yr,bL,nso,Kse,sso,lso,Pa,iso,Zse,dso,cso,ele,fso,mso,ole,gso,hso,pso,k,jn,rle,_so,uso,oB,bso,vso,rB,Fso,Tso,Mso,Dn,tle,Eso,Cso,tB,wso,Aso,aB,Lso,yso,xso,Gn,ale,$so,kso,nB,Sso,Rso,sB,Pso,Bso,Iso,eh,nle,Nso,qso,lB,jso,Dso,Gso,On,sle,Oso,Vso,iB,Xso,zso,dB,Qso,Wso,Hso,oh,lle,Uso,Jso,cB,Yso,Kso,Zso,rh,ile,elo,olo,fB,rlo,tlo,alo,th,dle,nlo,slo,mB,llo,ilo,dlo,Vn,cle,clo,flo,gB,mlo,glo,hB,hlo,plo,_lo,Xn,fle,ulo,blo,pB,vlo,Flo,_B,Tlo,Mlo,Elo,zn,mle,Clo,wlo,uB,Alo,Llo,bB,ylo,xlo,$lo,ah,gle,klo,Slo,vB,Rlo,Plo,Blo,nh,hle,Ilo,Nlo,FB,qlo,jlo,Dlo,sh,ple,Glo,Olo,TB,Vlo,Xlo,zlo,Qn,_le,Qlo,Wlo,MB,Hlo,Ulo,EB,Jlo,Ylo,Klo,lh,ule,Zlo,eio,CB,oio,rio,tio,Wn,ble,aio,nio,wB,sio,lio,AB,iio,dio,cio,Hn,vle,fio,mio,LB,gio,hio,yB,pio,_io,uio,Un,Fle,bio,vio,xB,Fio,Tio,$B,Mio,Eio,Cio,Jn,Tle,wio,Aio,kB,Lio,yio,SB,xio,$io,kio,ih,Mle,Sio,Rio,RB,Pio,Bio,Iio,Yn,Ele,Nio,qio,PB,jio,Dio,BB,Gio,Oio,Vio,Kn,Cle,Xio,zio,IB,Qio,Wio,NB,Hio,Uio,Jio,Zn,wle,Yio,Kio,qB,Zio,edo,jB,odo,rdo,tdo,es,Ale,ado,ndo,DB,sdo,ldo,GB,ido,ddo,cdo,os,Lle,fdo,mdo,OB,gdo,hdo,VB,pdo,_do,udo,rs,yle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,dh,xle,wdo,Ado,QB,Ldo,ydo,xdo,ts,$le,$do,kdo,WB,Sdo,Rdo,HB,Pdo,Bdo,Ido,ch,kle,Ndo,qdo,UB,jdo,Ddo,Gdo,as,Sle,Odo,Vdo,JB,Xdo,zdo,YB,Qdo,Wdo,Hdo,ns,Rle,Udo,Jdo,KB,Ydo,Kdo,ZB,Zdo,eco,oco,ss,Ple,rco,tco,eI,aco,nco,oI,sco,lco,ico,fh,Ble,dco,cco,rI,fco,mco,gco,ls,Ile,hco,pco,tI,_co,uco,aI,bco,vco,Fco,is,Nle,Tco,Mco,nI,Eco,Cco,sI,wco,Aco,Lco,ds,qle,yco,xco,lI,$co,kco,iI,Sco,Rco,Pco,mh,jle,Bco,Ico,dI,Nco,qco,jco,cs,Dle,Dco,Gco,cI,Oco,Vco,fI,Xco,zco,Qco,fs,Gle,Wco,Hco,mI,Uco,Jco,gI,Yco,Kco,Zco,ms,Ole,efo,ofo,hI,rfo,tfo,pI,afo,nfo,sfo,gs,Vle,lfo,ifo,_I,dfo,cfo,uI,ffo,mfo,gfo,hs,Xle,hfo,pfo,bI,_fo,ufo,vI,bfo,vfo,Ffo,ps,zle,Tfo,Mfo,FI,Efo,Cfo,TI,wfo,Afo,Lfo,_s,Qle,yfo,xfo,MI,$fo,kfo,EI,Sfo,Rfo,Pfo,us,Wle,Bfo,Ifo,CI,Nfo,qfo,wI,jfo,Dfo,Gfo,gh,Hle,Ofo,Vfo,AI,Xfo,zfo,Qfo,bs,Ule,Wfo,Hfo,LI,Ufo,Jfo,yI,Yfo,Kfo,Zfo,hh,Jle,emo,omo,xI,rmo,tmo,amo,ph,Yle,nmo,smo,$I,lmo,imo,dmo,vs,Kle,cmo,fmo,kI,mmo,gmo,SI,hmo,pmo,_mo,Fs,Zle,umo,bmo,RI,vmo,Fmo,PI,Tmo,Mmo,Emo,Ts,eie,Cmo,wmo,BI,Amo,Lmo,II,ymo,xmo,$mo,_h,oie,kmo,Smo,NI,Rmo,Pmo,Bmo,Ms,rie,Imo,Nmo,qI,qmo,jmo,jI,Dmo,Gmo,Omo,Es,tie,Vmo,Xmo,DI,zmo,Qmo,GI,Wmo,Hmo,Umo,Cs,aie,Jmo,Ymo,OI,Kmo,Zmo,VI,ego,ogo,rgo,ws,nie,tgo,ago,XI,ngo,sgo,zI,lgo,igo,dgo,As,sie,cgo,fgo,QI,mgo,ggo,WI,hgo,pgo,_go,Ls,lie,ugo,bgo,HI,vgo,Fgo,UI,Tgo,Mgo,Ego,ys,iie,Cgo,wgo,JI,Ago,Lgo,YI,ygo,xgo,$go,uh,die,kgo,Sgo,KI,Rgo,Pgo,Bgo,xs,cie,Igo,Ngo,ZI,qgo,jgo,eN,Dgo,Ggo,Ogo,bh,fie,Vgo,Xgo,oN,zgo,Qgo,Wgo,vh,mie,Hgo,Ugo,rN,Jgo,Ygo,Kgo,Fh,gie,Zgo,eho,tN,oho,rho,tho,Th,hie,aho,nho,aN,sho,lho,iho,$s,pie,dho,cho,nN,fho,mho,sN,gho,hho,pho,Mh,_ie,_ho,uho,lN,bho,vho,Fho,ks,uie,Tho,Mho,iN,Eho,Cho,dN,who,Aho,Lho,Ss,bie,yho,xho,cN,$ho,kho,fN,Sho,Rho,Pho,Rs,vie,Bho,Iho,mN,Nho,qho,gN,jho,Dho,Gho,Ps,Fie,Oho,Vho,hN,Xho,zho,pN,Qho,Who,Hho,Bs,Tie,Uho,Jho,_N,Yho,Kho,uN,Zho,epo,opo,Is,Mie,rpo,tpo,bN,apo,npo,vN,spo,lpo,ipo,Eh,Eie,dpo,cpo,FN,fpo,mpo,gpo,Ch,Cie,hpo,ppo,TN,_po,upo,bpo,Ns,wie,vpo,Fpo,MN,Tpo,Mpo,EN,Epo,Cpo,wpo,qs,Aie,Apo,Lpo,CN,ypo,xpo,wN,$po,kpo,Spo,js,Lie,Rpo,Ppo,AN,Bpo,Ipo,LN,Npo,qpo,jpo,wh,yie,Dpo,Gpo,yN,Opo,Vpo,Xpo,Ah,xie,zpo,Qpo,xN,Wpo,Hpo,Upo,Lh,$ie,Jpo,Ypo,$N,Kpo,Zpo,e_o,Ds,kie,o_o,r_o,kN,t_o,a_o,SN,n_o,s_o,l_o,Gs,Sie,i_o,d_o,RN,c_o,f_o,PN,m_o,g_o,h_o,yh,Rie,p_o,__o,BN,u_o,b_o,v_o,xh,Pie,F_o,T_o,IN,M_o,E_o,C_o,$h,Bie,w_o,A_o,NN,L_o,y_o,x_o,Os,Iie,$_o,k_o,qN,S_o,R_o,jN,P_o,B_o,I_o,kh,Nie,N_o,q_o,DN,j_o,D_o,G_o,Sh,qie,O_o,V_o,GN,X_o,z_o,Q_o,Vs,jie,W_o,H_o,ON,U_o,J_o,VN,Y_o,K_o,Z_o,Xs,Die,euo,ouo,XN,ruo,tuo,zN,auo,nuo,suo,zs,Gie,luo,iuo,QN,duo,cuo,WN,fuo,muo,guo,Qs,Oie,huo,puo,HN,_uo,uuo,UN,buo,vuo,Fuo,Rh,Tuo,Ph,vL,Muo,Vie,Euo,hXe,qi,Bh,Xie,FL,Cuo,zie,wuo,pXe,yo,TL,Auo,ML,Luo,JN,yuo,xuo,$uo,EL,kuo,Qie,Suo,Ruo,Puo,Ue,CL,Buo,Wie,Iuo,Nuo,Ba,quo,Hie,juo,Duo,Uie,Guo,Ouo,Jie,Vuo,Xuo,zuo,Y,Ih,Yie,Quo,Wuo,YN,Huo,Uuo,Juo,Nh,Kie,Yuo,Kuo,KN,Zuo,e2o,o2o,qh,Zie,r2o,t2o,ZN,a2o,n2o,s2o,jh,ede,l2o,i2o,eq,d2o,c2o,f2o,Dh,ode,m2o,g2o,oq,h2o,p2o,_2o,Gh,rde,u2o,b2o,rq,v2o,F2o,T2o,Oh,tde,M2o,E2o,tq,C2o,w2o,A2o,Vh,ade,L2o,y2o,aq,x2o,$2o,k2o,Xh,nde,S2o,R2o,nq,P2o,B2o,I2o,zh,sde,N2o,q2o,sq,j2o,D2o,G2o,Qh,lde,O2o,V2o,lq,X2o,z2o,Q2o,Wh,ide,W2o,H2o,iq,U2o,J2o,Y2o,Hh,dde,K2o,Z2o,dq,e1o,o1o,r1o,Uh,cde,t1o,a1o,cq,n1o,s1o,l1o,Jh,fde,i1o,d1o,fq,c1o,f1o,m1o,Yh,mde,g1o,h1o,mq,p1o,_1o,u1o,Kh,gde,b1o,v1o,gq,F1o,T1o,M1o,Zh,hde,E1o,C1o,hq,w1o,A1o,L1o,ep,pde,y1o,x1o,pq,$1o,k1o,S1o,op,_de,R1o,P1o,_q,B1o,I1o,N1o,rp,ude,q1o,j1o,uq,D1o,G1o,O1o,tp,bde,V1o,X1o,bq,z1o,Q1o,W1o,ap,vde,H1o,U1o,vq,J1o,Y1o,K1o,np,Fde,Z1o,ebo,Fq,obo,rbo,tbo,sp,Tde,abo,nbo,Tq,sbo,lbo,ibo,lp,Mde,dbo,cbo,Mq,fbo,mbo,gbo,ip,Ede,hbo,pbo,Eq,_bo,ubo,bbo,dp,Cde,vbo,Fbo,Cq,Tbo,Mbo,Ebo,cp,wde,Cbo,wbo,wq,Abo,Lbo,ybo,fp,Ade,xbo,$bo,Aq,kbo,Sbo,Rbo,mp,Lde,Pbo,Bbo,Lq,Ibo,Nbo,qbo,gp,yde,jbo,Dbo,yq,Gbo,Obo,Vbo,hp,xde,Xbo,zbo,xq,Qbo,Wbo,Hbo,pp,$de,Ubo,Jbo,$q,Ybo,Kbo,Zbo,_p,evo,up,ovo,bp,wL,rvo,kde,tvo,_Xe,ji,vp,Sde,AL,avo,Rde,nvo,uXe,xo,LL,svo,yL,lvo,kq,ivo,dvo,cvo,xL,fvo,Pde,mvo,gvo,hvo,Je,$L,pvo,Bde,_vo,uvo,Di,bvo,Ide,vvo,Fvo,Nde,Tvo,Mvo,Evo,he,Fp,qde,Cvo,wvo,Sq,Avo,Lvo,yvo,Tp,jde,xvo,$vo,Dde,kvo,Svo,Rvo,Mp,Gde,Pvo,Bvo,Rq,Ivo,Nvo,qvo,Ep,Ode,jvo,Dvo,Pq,Gvo,Ovo,Vvo,Cp,Vde,Xvo,zvo,Bq,Qvo,Wvo,Hvo,wp,Xde,Uvo,Jvo,Iq,Yvo,Kvo,Zvo,Ap,zde,e0o,o0o,Nq,r0o,t0o,a0o,Lp,Qde,n0o,s0o,qq,l0o,i0o,d0o,yp,Wde,c0o,f0o,jq,m0o,g0o,h0o,xp,Hde,p0o,_0o,Dq,u0o,b0o,v0o,$p,Ude,F0o,T0o,Gq,M0o,E0o,C0o,kp,Jde,w0o,A0o,Oq,L0o,y0o,x0o,Sp,Yde,$0o,k0o,Vq,S0o,R0o,P0o,Rp,Kde,B0o,I0o,Xq,N0o,q0o,j0o,Pp,Zde,D0o,G0o,zq,O0o,V0o,X0o,Bp,ece,z0o,Q0o,Qq,W0o,H0o,U0o,Ip,oce,J0o,Y0o,Wq,K0o,Z0o,eFo,Np,rce,oFo,rFo,Hq,tFo,aFo,nFo,qp,sFo,jp,lFo,Dp,kL,iFo,tce,dFo,bXe,Gi,Gp,ace,SL,cFo,nce,fFo,vXe,$o,RL,mFo,Oi,gFo,Uq,hFo,pFo,Jq,_Fo,uFo,bFo,PL,vFo,sce,FFo,TFo,MFo,it,BL,EFo,lce,CFo,wFo,Vi,AFo,ice,LFo,yFo,Yq,xFo,$Fo,kFo,Op,SFo,Ye,IL,RFo,dce,PFo,BFo,Ia,IFo,cce,NFo,qFo,fce,jFo,DFo,mce,GFo,OFo,VFo,y,Vp,gce,XFo,zFo,Kq,QFo,WFo,HFo,Xp,hce,UFo,JFo,Zq,YFo,KFo,ZFo,zp,pce,eTo,oTo,ej,rTo,tTo,aTo,Qp,_ce,nTo,sTo,oj,lTo,iTo,dTo,Wp,uce,cTo,fTo,rj,mTo,gTo,hTo,Hp,bce,pTo,_To,tj,uTo,bTo,vTo,Up,vce,FTo,TTo,aj,MTo,ETo,CTo,Jp,Fce,wTo,ATo,nj,LTo,yTo,xTo,Yp,Tce,$To,kTo,sj,STo,RTo,PTo,Kp,Mce,BTo,ITo,lj,NTo,qTo,jTo,Zp,Ece,DTo,GTo,ij,OTo,VTo,XTo,e_,Cce,zTo,QTo,dj,WTo,HTo,UTo,o_,wce,JTo,YTo,cj,KTo,ZTo,e8o,r_,Ace,o8o,r8o,fj,t8o,a8o,n8o,t_,Lce,s8o,l8o,mj,i8o,d8o,c8o,a_,yce,f8o,m8o,gj,g8o,h8o,p8o,n_,xce,_8o,u8o,hj,b8o,v8o,F8o,s_,$ce,T8o,M8o,pj,E8o,C8o,w8o,l_,kce,A8o,L8o,_j,y8o,x8o,$8o,i_,Sce,k8o,S8o,uj,R8o,P8o,B8o,d_,Rce,I8o,N8o,bj,q8o,j8o,D8o,c_,Pce,G8o,O8o,vj,V8o,X8o,z8o,f_,Bce,Q8o,W8o,Fj,H8o,U8o,J8o,m_,Ice,Y8o,K8o,Tj,Z8o,eMo,oMo,g_,Nce,rMo,tMo,Mj,aMo,nMo,sMo,h_,qce,lMo,iMo,Ej,dMo,cMo,fMo,p_,jce,mMo,gMo,Cj,hMo,pMo,_Mo,__,Dce,uMo,bMo,wj,vMo,FMo,TMo,u_,Gce,MMo,EMo,Aj,CMo,wMo,AMo,b_,Oce,LMo,yMo,Lj,xMo,$Mo,kMo,v_,Vce,SMo,RMo,yj,PMo,BMo,IMo,F_,Xce,NMo,qMo,xj,jMo,DMo,GMo,T_,zce,OMo,VMo,$j,XMo,zMo,QMo,M_,Qce,WMo,HMo,kj,UMo,JMo,YMo,Ws,Wce,KMo,ZMo,Sj,e4o,o4o,Rj,r4o,t4o,a4o,E_,Hce,n4o,s4o,Pj,l4o,i4o,d4o,C_,Uce,c4o,f4o,Bj,m4o,g4o,h4o,w_,Jce,p4o,_4o,Ij,u4o,b4o,v4o,A_,Yce,F4o,T4o,Nj,M4o,E4o,C4o,L_,Kce,w4o,A4o,qj,L4o,y4o,x4o,y_,Zce,$4o,k4o,jj,S4o,R4o,P4o,x_,efe,B4o,I4o,Dj,N4o,q4o,j4o,$_,ofe,D4o,G4o,Gj,O4o,V4o,X4o,k_,rfe,z4o,Q4o,Oj,W4o,H4o,U4o,S_,tfe,J4o,Y4o,Vj,K4o,Z4o,eEo,R_,afe,oEo,rEo,Xj,tEo,aEo,nEo,P_,nfe,sEo,lEo,zj,iEo,dEo,cEo,B_,sfe,fEo,mEo,Qj,gEo,hEo,pEo,I_,lfe,_Eo,uEo,Wj,bEo,vEo,FEo,N_,ife,TEo,MEo,Hj,EEo,CEo,wEo,q_,dfe,AEo,LEo,Uj,yEo,xEo,$Eo,j_,cfe,kEo,SEo,Jj,REo,PEo,BEo,D_,ffe,IEo,NEo,Yj,qEo,jEo,DEo,G_,mfe,GEo,OEo,Kj,VEo,XEo,zEo,O_,gfe,QEo,WEo,Zj,HEo,UEo,JEo,V_,hfe,YEo,KEo,eD,ZEo,eCo,oCo,X_,pfe,rCo,tCo,oD,aCo,nCo,sCo,z_,_fe,lCo,iCo,rD,dCo,cCo,fCo,Q_,ufe,mCo,gCo,tD,hCo,pCo,_Co,W_,bfe,uCo,bCo,aD,vCo,FCo,TCo,H_,vfe,MCo,ECo,nD,CCo,wCo,ACo,U_,Ffe,LCo,yCo,sD,xCo,$Co,kCo,J_,Tfe,SCo,RCo,lD,PCo,BCo,ICo,Y_,Mfe,NCo,qCo,iD,jCo,DCo,GCo,K_,Efe,OCo,VCo,dD,XCo,zCo,QCo,Z_,Cfe,WCo,HCo,cD,UCo,JCo,YCo,eu,wfe,KCo,ZCo,fD,e3o,o3o,r3o,ou,Afe,t3o,a3o,mD,n3o,s3o,l3o,ru,Lfe,i3o,d3o,gD,c3o,f3o,m3o,tu,yfe,g3o,h3o,hD,p3o,_3o,u3o,au,xfe,b3o,v3o,pD,F3o,T3o,M3o,nu,$fe,E3o,C3o,_D,w3o,A3o,L3o,su,kfe,y3o,x3o,uD,$3o,k3o,S3o,lu,Sfe,R3o,P3o,bD,B3o,I3o,N3o,iu,Rfe,q3o,j3o,vD,D3o,G3o,O3o,du,Pfe,V3o,X3o,FD,z3o,Q3o,W3o,cu,Bfe,H3o,U3o,TD,J3o,Y3o,K3o,fu,Ife,Z3o,e5o,MD,o5o,r5o,t5o,mu,Nfe,a5o,n5o,ED,s5o,l5o,i5o,gu,qfe,d5o,c5o,CD,f5o,m5o,g5o,hu,jfe,h5o,p5o,wD,_5o,u5o,b5o,pu,Dfe,v5o,F5o,AD,T5o,M5o,E5o,_u,Gfe,C5o,w5o,LD,A5o,L5o,y5o,uu,Ofe,x5o,$5o,yD,k5o,S5o,R5o,bu,Vfe,P5o,B5o,xD,I5o,N5o,q5o,vu,Xfe,j5o,D5o,$D,G5o,O5o,V5o,Fu,zfe,X5o,z5o,kD,Q5o,W5o,H5o,Tu,Qfe,U5o,J5o,SD,Y5o,K5o,Z5o,Mu,Wfe,ewo,owo,RD,rwo,two,awo,Eu,Hfe,nwo,swo,PD,lwo,iwo,dwo,Cu,Ufe,cwo,fwo,BD,mwo,gwo,hwo,wu,Jfe,pwo,_wo,ID,uwo,bwo,vwo,Au,Yfe,Fwo,Two,ND,Mwo,Ewo,Cwo,Lu,Kfe,wwo,Awo,qD,Lwo,ywo,xwo,yu,Zfe,$wo,kwo,jD,Swo,Rwo,Pwo,xu,eme,Bwo,Iwo,DD,Nwo,qwo,jwo,$u,ome,Dwo,Gwo,GD,Owo,Vwo,Xwo,ku,rme,zwo,Qwo,OD,Wwo,Hwo,Uwo,Su,tme,Jwo,Ywo,VD,Kwo,Zwo,eAo,Ru,ame,oAo,rAo,XD,tAo,aAo,nAo,Pu,nme,sAo,lAo,zD,iAo,dAo,cAo,Bu,sme,fAo,mAo,QD,gAo,hAo,pAo,Iu,lme,_Ao,uAo,WD,bAo,vAo,FAo,Nu,ime,TAo,MAo,HD,EAo,CAo,wAo,qu,dme,AAo,LAo,UD,yAo,xAo,$Ao,ju,cme,kAo,SAo,JD,RAo,PAo,BAo,Du,fme,IAo,NAo,YD,qAo,jAo,DAo,Gu,mme,GAo,OAo,KD,VAo,XAo,zAo,Ou,gme,QAo,WAo,ZD,HAo,UAo,JAo,Vu,hme,YAo,KAo,eG,ZAo,e6o,o6o,Xu,pme,r6o,t6o,oG,a6o,n6o,s6o,zu,l6o,_me,i6o,d6o,ume,c6o,f6o,Qu,FXe,Xi,Wu,bme,NL,m6o,vme,g6o,TXe,ko,qL,h6o,zi,p6o,rG,_6o,u6o,tG,b6o,v6o,F6o,jL,T6o,Fme,M6o,E6o,C6o,dt,DL,w6o,Tme,A6o,L6o,Qi,y6o,Mme,x6o,$6o,aG,k6o,S6o,R6o,Hu,P6o,Ke,GL,B6o,Eme,I6o,N6o,Na,q6o,Cme,j6o,D6o,wme,G6o,O6o,Ame,V6o,X6o,z6o,G,Uu,Lme,Q6o,W6o,nG,H6o,U6o,J6o,Ju,yme,Y6o,K6o,sG,Z6o,e7o,o7o,Yu,xme,r7o,t7o,lG,a7o,n7o,s7o,Ku,$me,l7o,i7o,iG,d7o,c7o,f7o,Zu,kme,m7o,g7o,dG,h7o,p7o,_7o,e2,Sme,u7o,b7o,cG,v7o,F7o,T7o,o2,Rme,M7o,E7o,fG,C7o,w7o,A7o,r2,Pme,L7o,y7o,mG,x7o,$7o,k7o,t2,Bme,S7o,R7o,gG,P7o,B7o,I7o,a2,Ime,N7o,q7o,hG,j7o,D7o,G7o,n2,Nme,O7o,V7o,pG,X7o,z7o,Q7o,s2,qme,W7o,H7o,_G,U7o,J7o,Y7o,l2,jme,K7o,Z7o,uG,eLo,oLo,rLo,i2,Dme,tLo,aLo,bG,nLo,sLo,lLo,d2,Gme,iLo,dLo,vG,cLo,fLo,mLo,c2,Ome,gLo,hLo,FG,pLo,_Lo,uLo,f2,Vme,bLo,vLo,TG,FLo,TLo,MLo,m2,Xme,ELo,CLo,MG,wLo,ALo,LLo,g2,zme,yLo,xLo,EG,$Lo,kLo,SLo,h2,Qme,RLo,PLo,CG,BLo,ILo,NLo,p2,Wme,qLo,jLo,wG,DLo,GLo,OLo,_2,Hme,VLo,XLo,AG,zLo,QLo,WLo,u2,Ume,HLo,ULo,LG,JLo,YLo,KLo,b2,Jme,ZLo,eyo,yG,oyo,ryo,tyo,v2,Yme,ayo,nyo,xG,syo,lyo,iyo,F2,Kme,dyo,cyo,$G,fyo,myo,gyo,T2,Zme,hyo,pyo,kG,_yo,uyo,byo,M2,ege,vyo,Fyo,SG,Tyo,Myo,Eyo,E2,oge,Cyo,wyo,RG,Ayo,Lyo,yyo,C2,rge,xyo,$yo,PG,kyo,Syo,Ryo,w2,tge,Pyo,Byo,BG,Iyo,Nyo,qyo,A2,age,jyo,Dyo,IG,Gyo,Oyo,Vyo,L2,nge,Xyo,zyo,NG,Qyo,Wyo,Hyo,y2,sge,Uyo,Jyo,qG,Yyo,Kyo,Zyo,x2,lge,e9o,o9o,jG,r9o,t9o,a9o,$2,ige,n9o,s9o,DG,l9o,i9o,d9o,k2,dge,c9o,f9o,GG,m9o,g9o,h9o,S2,cge,p9o,_9o,OG,u9o,b9o,v9o,R2,fge,F9o,T9o,VG,M9o,E9o,C9o,P2,mge,w9o,A9o,XG,L9o,y9o,x9o,B2,gge,$9o,k9o,zG,S9o,R9o,P9o,I2,hge,B9o,I9o,QG,N9o,q9o,j9o,N2,pge,D9o,G9o,WG,O9o,V9o,X9o,q2,_ge,z9o,Q9o,HG,W9o,H9o,U9o,j2,uge,J9o,Y9o,UG,K9o,Z9o,exo,D2,oxo,bge,rxo,txo,vge,axo,nxo,G2,MXe,Wi,O2,Fge,OL,sxo,Tge,lxo,EXe,So,VL,ixo,Hi,dxo,JG,cxo,fxo,YG,mxo,gxo,hxo,XL,pxo,Mge,_xo,uxo,bxo,ct,zL,vxo,Ege,Fxo,Txo,Ui,Mxo,Cge,Exo,Cxo,KG,wxo,Axo,Lxo,V2,yxo,Ze,QL,xxo,wge,$xo,kxo,qa,Sxo,Age,Rxo,Pxo,Lge,Bxo,Ixo,yge,Nxo,qxo,jxo,z,X2,xge,Dxo,Gxo,ZG,Oxo,Vxo,Xxo,z2,$ge,zxo,Qxo,eO,Wxo,Hxo,Uxo,Q2,kge,Jxo,Yxo,oO,Kxo,Zxo,e$o,W2,Sge,o$o,r$o,rO,t$o,a$o,n$o,H2,Rge,s$o,l$o,tO,i$o,d$o,c$o,U2,Pge,f$o,m$o,aO,g$o,h$o,p$o,J2,Bge,_$o,u$o,nO,b$o,v$o,F$o,Y2,Ige,T$o,M$o,sO,E$o,C$o,w$o,K2,Nge,A$o,L$o,lO,y$o,x$o,$$o,Z2,qge,k$o,S$o,iO,R$o,P$o,B$o,e1,jge,I$o,N$o,dO,q$o,j$o,D$o,o1,Dge,G$o,O$o,cO,V$o,X$o,z$o,r1,Gge,Q$o,W$o,fO,H$o,U$o,J$o,t1,Oge,Y$o,K$o,mO,Z$o,eko,oko,a1,Vge,rko,tko,gO,ako,nko,sko,n1,Xge,lko,iko,hO,dko,cko,fko,s1,zge,mko,gko,pO,hko,pko,_ko,l1,Qge,uko,bko,_O,vko,Fko,Tko,i1,Wge,Mko,Eko,uO,Cko,wko,Ako,d1,Hge,Lko,yko,bO,xko,$ko,kko,c1,Uge,Sko,Rko,vO,Pko,Bko,Iko,f1,Jge,Nko,qko,FO,jko,Dko,Gko,m1,Yge,Oko,Vko,TO,Xko,zko,Qko,g1,Kge,Wko,Hko,MO,Uko,Jko,Yko,h1,Zge,Kko,Zko,EO,eSo,oSo,rSo,p1,ehe,tSo,aSo,CO,nSo,sSo,lSo,_1,ohe,iSo,dSo,wO,cSo,fSo,mSo,u1,rhe,gSo,hSo,AO,pSo,_So,uSo,b1,the,bSo,vSo,LO,FSo,TSo,MSo,v1,ahe,ESo,CSo,yO,wSo,ASo,LSo,F1,nhe,ySo,xSo,xO,$So,kSo,SSo,T1,she,RSo,PSo,$O,BSo,ISo,NSo,M1,lhe,qSo,jSo,kO,DSo,GSo,OSo,E1,ihe,VSo,XSo,SO,zSo,QSo,WSo,C1,dhe,HSo,USo,RO,JSo,YSo,KSo,w1,che,ZSo,eRo,PO,oRo,rRo,tRo,A1,fhe,aRo,nRo,BO,sRo,lRo,iRo,L1,mhe,dRo,cRo,IO,fRo,mRo,gRo,y1,ghe,hRo,pRo,NO,_Ro,uRo,bRo,x1,hhe,vRo,FRo,qO,TRo,MRo,ERo,$1,CRo,phe,wRo,ARo,_he,LRo,yRo,k1,CXe,Ji,S1,uhe,WL,xRo,bhe,$Ro,wXe,Ro,HL,kRo,Yi,SRo,jO,RRo,PRo,DO,BRo,IRo,NRo,UL,qRo,vhe,jRo,DRo,GRo,ft,JL,ORo,Fhe,VRo,XRo,Ki,zRo,The,QRo,WRo,GO,HRo,URo,JRo,R1,YRo,eo,YL,KRo,Mhe,ZRo,ePo,ja,oPo,Ehe,rPo,tPo,Che,aPo,nPo,whe,sPo,lPo,iPo,W,P1,Ahe,dPo,cPo,OO,fPo,mPo,gPo,B1,Lhe,hPo,pPo,VO,_Po,uPo,bPo,I1,yhe,vPo,FPo,XO,TPo,MPo,EPo,N1,xhe,CPo,wPo,zO,APo,LPo,yPo,q1,$he,xPo,$Po,QO,kPo,SPo,RPo,j1,khe,PPo,BPo,WO,IPo,NPo,qPo,D1,She,jPo,DPo,HO,GPo,OPo,VPo,G1,Rhe,XPo,zPo,UO,QPo,WPo,HPo,O1,Phe,UPo,JPo,JO,YPo,KPo,ZPo,V1,Bhe,eBo,oBo,YO,rBo,tBo,aBo,X1,Ihe,nBo,sBo,KO,lBo,iBo,dBo,z1,Nhe,cBo,fBo,ZO,mBo,gBo,hBo,Q1,qhe,pBo,_Bo,eV,uBo,bBo,vBo,W1,jhe,FBo,TBo,oV,MBo,EBo,CBo,H1,Dhe,wBo,ABo,rV,LBo,yBo,xBo,U1,Ghe,$Bo,kBo,tV,SBo,RBo,PBo,J1,Ohe,BBo,IBo,aV,NBo,qBo,jBo,Y1,Vhe,DBo,GBo,nV,OBo,VBo,XBo,K1,Xhe,zBo,QBo,sV,WBo,HBo,UBo,Z1,zhe,JBo,YBo,lV,KBo,ZBo,eIo,eb,Qhe,oIo,rIo,iV,tIo,aIo,nIo,ob,Whe,sIo,lIo,dV,iIo,dIo,cIo,rb,Hhe,fIo,mIo,cV,gIo,hIo,pIo,tb,Uhe,_Io,uIo,fV,bIo,vIo,FIo,ab,Jhe,TIo,MIo,mV,EIo,CIo,wIo,nb,Yhe,AIo,LIo,gV,yIo,xIo,$Io,sb,Khe,kIo,SIo,hV,RIo,PIo,BIo,lb,Zhe,IIo,NIo,pV,qIo,jIo,DIo,ib,epe,GIo,OIo,_V,VIo,XIo,zIo,db,ope,QIo,WIo,uV,HIo,UIo,JIo,cb,rpe,YIo,KIo,bV,ZIo,eNo,oNo,fb,tpe,rNo,tNo,vV,aNo,nNo,sNo,mb,ape,lNo,iNo,FV,dNo,cNo,fNo,gb,npe,mNo,gNo,spe,hNo,pNo,_No,hb,lpe,uNo,bNo,TV,vNo,FNo,TNo,pb,ipe,MNo,ENo,MV,CNo,wNo,ANo,_b,dpe,LNo,yNo,EV,xNo,$No,kNo,ub,cpe,SNo,RNo,CV,PNo,BNo,INo,bb,NNo,fpe,qNo,jNo,mpe,DNo,GNo,vb,AXe,Zi,Fb,gpe,KL,ONo,hpe,VNo,LXe,Po,ZL,XNo,ed,zNo,wV,QNo,WNo,AV,HNo,UNo,JNo,ey,YNo,ppe,KNo,ZNo,eqo,mt,oy,oqo,_pe,rqo,tqo,od,aqo,upe,nqo,sqo,LV,lqo,iqo,dqo,Tb,cqo,oo,ry,fqo,bpe,mqo,gqo,Da,hqo,vpe,pqo,_qo,Fpe,uqo,bqo,Tpe,vqo,Fqo,Tqo,pe,Mb,Mpe,Mqo,Eqo,yV,Cqo,wqo,Aqo,Eb,Epe,Lqo,yqo,xV,xqo,$qo,kqo,Cb,Cpe,Sqo,Rqo,$V,Pqo,Bqo,Iqo,wb,wpe,Nqo,qqo,kV,jqo,Dqo,Gqo,Ab,Ape,Oqo,Vqo,SV,Xqo,zqo,Qqo,Lb,Lpe,Wqo,Hqo,RV,Uqo,Jqo,Yqo,yb,ype,Kqo,Zqo,PV,ejo,ojo,rjo,xb,xpe,tjo,ajo,BV,njo,sjo,ljo,$b,$pe,ijo,djo,IV,cjo,fjo,mjo,kb,kpe,gjo,hjo,NV,pjo,_jo,ujo,Sb,Spe,bjo,vjo,qV,Fjo,Tjo,Mjo,Rb,Rpe,Ejo,Cjo,jV,wjo,Ajo,Ljo,Pb,Ppe,yjo,xjo,DV,$jo,kjo,Sjo,Bb,Bpe,Rjo,Pjo,GV,Bjo,Ijo,Njo,Ib,Ipe,qjo,jjo,OV,Djo,Gjo,Ojo,Nb,Npe,Vjo,Xjo,VV,zjo,Qjo,Wjo,qb,qpe,Hjo,Ujo,XV,Jjo,Yjo,Kjo,jb,jpe,Zjo,eDo,zV,oDo,rDo,tDo,Db,aDo,Dpe,nDo,sDo,Gpe,lDo,iDo,Gb,yXe,rd,Ob,Ope,ty,dDo,Vpe,cDo,xXe,Bo,ay,fDo,td,mDo,QV,gDo,hDo,WV,pDo,_Do,uDo,ny,bDo,Xpe,vDo,FDo,TDo,gt,sy,MDo,zpe,EDo,CDo,ad,wDo,Qpe,ADo,LDo,HV,yDo,xDo,$Do,Vb,kDo,ro,ly,SDo,Wpe,RDo,PDo,Ga,BDo,Hpe,IDo,NDo,Upe,qDo,jDo,Jpe,DDo,GDo,ODo,N,Xb,Ype,VDo,XDo,UV,zDo,QDo,WDo,zb,Kpe,HDo,UDo,JV,JDo,YDo,KDo,Qb,Zpe,ZDo,eGo,YV,oGo,rGo,tGo,Wb,e_e,aGo,nGo,KV,sGo,lGo,iGo,Hb,o_e,dGo,cGo,ZV,fGo,mGo,gGo,Ub,r_e,hGo,pGo,eX,_Go,uGo,bGo,Jb,t_e,vGo,FGo,oX,TGo,MGo,EGo,Yb,a_e,CGo,wGo,rX,AGo,LGo,yGo,Kb,n_e,xGo,$Go,tX,kGo,SGo,RGo,Zb,s_e,PGo,BGo,aX,IGo,NGo,qGo,ev,l_e,jGo,DGo,nX,GGo,OGo,VGo,ov,i_e,XGo,zGo,sX,QGo,WGo,HGo,rv,d_e,UGo,JGo,lX,YGo,KGo,ZGo,tv,c_e,eOo,oOo,iX,rOo,tOo,aOo,av,f_e,nOo,sOo,dX,lOo,iOo,dOo,nv,m_e,cOo,fOo,cX,mOo,gOo,hOo,sv,g_e,pOo,_Oo,fX,uOo,bOo,vOo,lv,h_e,FOo,TOo,mX,MOo,EOo,COo,iv,p_e,wOo,AOo,gX,LOo,yOo,xOo,dv,__e,$Oo,kOo,hX,SOo,ROo,POo,cv,u_e,BOo,IOo,pX,NOo,qOo,jOo,fv,b_e,DOo,GOo,_X,OOo,VOo,XOo,mv,v_e,zOo,QOo,uX,WOo,HOo,UOo,gv,F_e,JOo,YOo,bX,KOo,ZOo,eVo,hv,T_e,oVo,rVo,vX,tVo,aVo,nVo,pv,M_e,sVo,lVo,FX,iVo,dVo,cVo,_v,E_e,fVo,mVo,TX,gVo,hVo,pVo,uv,C_e,_Vo,uVo,MX,bVo,vVo,FVo,bv,w_e,TVo,MVo,EX,EVo,CVo,wVo,vv,A_e,AVo,LVo,CX,yVo,xVo,$Vo,Fv,L_e,kVo,SVo,wX,RVo,PVo,BVo,Tv,y_e,IVo,NVo,AX,qVo,jVo,DVo,Mv,x_e,GVo,OVo,LX,VVo,XVo,zVo,Ev,$_e,QVo,WVo,yX,HVo,UVo,JVo,Cv,k_e,YVo,KVo,xX,ZVo,eXo,oXo,wv,S_e,rXo,tXo,$X,aXo,nXo,sXo,Av,R_e,lXo,iXo,kX,dXo,cXo,fXo,Lv,P_e,mXo,gXo,SX,hXo,pXo,_Xo,yv,B_e,uXo,bXo,RX,vXo,FXo,TXo,xv,I_e,MXo,EXo,PX,CXo,wXo,AXo,$v,N_e,LXo,yXo,BX,xXo,$Xo,kXo,kv,q_e,SXo,RXo,IX,PXo,BXo,IXo,Sv,j_e,NXo,qXo,NX,jXo,DXo,GXo,Rv,D_e,OXo,VXo,qX,XXo,zXo,QXo,Pv,G_e,WXo,HXo,jX,UXo,JXo,YXo,Bv,O_e,KXo,ZXo,DX,ezo,ozo,rzo,Iv,V_e,tzo,azo,GX,nzo,szo,lzo,Nv,X_e,izo,dzo,OX,czo,fzo,mzo,qv,z_e,gzo,hzo,VX,pzo,_zo,uzo,jv,Q_e,bzo,vzo,XX,Fzo,Tzo,Mzo,Dv,Ezo,W_e,Czo,wzo,H_e,Azo,Lzo,Gv,$Xe,nd,Ov,U_e,iy,yzo,J_e,xzo,kXe,Io,dy,$zo,sd,kzo,zX,Szo,Rzo,QX,Pzo,Bzo,Izo,cy,Nzo,Y_e,qzo,jzo,Dzo,ht,fy,Gzo,K_e,Ozo,Vzo,ld,Xzo,Z_e,zzo,Qzo,WX,Wzo,Hzo,Uzo,Vv,Jzo,to,my,Yzo,eue,Kzo,Zzo,Oa,eQo,oue,oQo,rQo,rue,tQo,aQo,tue,nQo,sQo,lQo,Z,Xv,aue,iQo,dQo,HX,cQo,fQo,mQo,zv,nue,gQo,hQo,UX,pQo,_Qo,uQo,Qv,sue,bQo,vQo,JX,FQo,TQo,MQo,Wv,lue,EQo,CQo,YX,wQo,AQo,LQo,Hv,iue,yQo,xQo,KX,$Qo,kQo,SQo,Uv,due,RQo,PQo,ZX,BQo,IQo,NQo,Jv,cue,qQo,jQo,ez,DQo,GQo,OQo,Yv,fue,VQo,XQo,oz,zQo,QQo,WQo,Kv,mue,HQo,UQo,rz,JQo,YQo,KQo,Zv,gue,ZQo,eWo,tz,oWo,rWo,tWo,e0,hue,aWo,nWo,az,sWo,lWo,iWo,o0,pue,dWo,cWo,nz,fWo,mWo,gWo,r0,_ue,hWo,pWo,sz,_Wo,uWo,bWo,t0,uue,vWo,FWo,lz,TWo,MWo,EWo,a0,bue,CWo,wWo,iz,AWo,LWo,yWo,n0,vue,xWo,$Wo,dz,kWo,SWo,RWo,s0,Fue,PWo,BWo,cz,IWo,NWo,qWo,l0,Tue,jWo,DWo,fz,GWo,OWo,VWo,i0,Mue,XWo,zWo,mz,QWo,WWo,HWo,d0,Eue,UWo,JWo,gz,YWo,KWo,ZWo,c0,Cue,eHo,oHo,hz,rHo,tHo,aHo,f0,wue,nHo,sHo,pz,lHo,iHo,dHo,m0,Aue,cHo,fHo,_z,mHo,gHo,hHo,g0,Lue,pHo,_Ho,uz,uHo,bHo,vHo,h0,yue,FHo,THo,bz,MHo,EHo,CHo,p0,xue,wHo,AHo,vz,LHo,yHo,xHo,_0,$ue,$Ho,kHo,Fz,SHo,RHo,PHo,u0,kue,BHo,IHo,Tz,NHo,qHo,jHo,b0,Sue,DHo,GHo,Mz,OHo,VHo,XHo,v0,Rue,zHo,QHo,Ez,WHo,HHo,UHo,F0,JHo,Pue,YHo,KHo,Bue,ZHo,eUo,T0,SXe,id,M0,Iue,gy,oUo,Nue,rUo,RXe,No,hy,tUo,dd,aUo,Cz,nUo,sUo,wz,lUo,iUo,dUo,py,cUo,que,fUo,mUo,gUo,pt,_y,hUo,jue,pUo,_Uo,cd,uUo,Due,bUo,vUo,Az,FUo,TUo,MUo,E0,EUo,ao,uy,CUo,Gue,wUo,AUo,Va,LUo,Oue,yUo,xUo,Vue,$Uo,kUo,Xue,SUo,RUo,PUo,qo,C0,zue,BUo,IUo,Lz,NUo,qUo,jUo,w0,Que,DUo,GUo,yz,OUo,VUo,XUo,A0,Wue,zUo,QUo,xz,WUo,HUo,UUo,L0,Hue,JUo,YUo,$z,KUo,ZUo,eJo,y0,Uue,oJo,rJo,kz,tJo,aJo,nJo,x0,Jue,sJo,lJo,Sz,iJo,dJo,cJo,$0,fJo,Yue,mJo,gJo,Kue,hJo,pJo,k0,PXe,fd,S0,Zue,by,_Jo,e2e,uJo,BXe,jo,vy,bJo,md,vJo,Rz,FJo,TJo,Pz,MJo,EJo,CJo,Fy,wJo,o2e,AJo,LJo,yJo,_t,Ty,xJo,r2e,$Jo,kJo,gd,SJo,t2e,RJo,PJo,Bz,BJo,IJo,NJo,R0,qJo,no,My,jJo,a2e,DJo,GJo,Xa,OJo,n2e,VJo,XJo,s2e,zJo,QJo,l2e,WJo,HJo,UJo,U,P0,i2e,JJo,YJo,Iz,KJo,ZJo,eYo,B0,d2e,oYo,rYo,Nz,tYo,aYo,nYo,I0,c2e,sYo,lYo,qz,iYo,dYo,cYo,N0,f2e,fYo,mYo,jz,gYo,hYo,pYo,q0,m2e,_Yo,uYo,Dz,bYo,vYo,FYo,j0,g2e,TYo,MYo,Gz,EYo,CYo,wYo,D0,h2e,AYo,LYo,Oz,yYo,xYo,$Yo,G0,p2e,kYo,SYo,Vz,RYo,PYo,BYo,O0,_2e,IYo,NYo,Xz,qYo,jYo,DYo,V0,u2e,GYo,OYo,zz,VYo,XYo,zYo,X0,b2e,QYo,WYo,Qz,HYo,UYo,JYo,z0,v2e,YYo,KYo,Wz,ZYo,eKo,oKo,Q0,F2e,rKo,tKo,Hz,aKo,nKo,sKo,W0,T2e,lKo,iKo,Uz,dKo,cKo,fKo,H0,M2e,mKo,gKo,Jz,hKo,pKo,_Ko,U0,E2e,uKo,bKo,Yz,vKo,FKo,TKo,J0,C2e,MKo,EKo,Kz,CKo,wKo,AKo,Y0,w2e,LKo,yKo,Zz,xKo,$Ko,kKo,K0,A2e,SKo,RKo,eQ,PKo,BKo,IKo,Z0,L2e,NKo,qKo,oQ,jKo,DKo,GKo,eF,y2e,OKo,VKo,rQ,XKo,zKo,QKo,oF,x2e,WKo,HKo,tQ,UKo,JKo,YKo,rF,$2e,KKo,ZKo,aQ,eZo,oZo,rZo,tF,k2e,tZo,aZo,nQ,nZo,sZo,lZo,aF,S2e,iZo,dZo,sQ,cZo,fZo,mZo,nF,R2e,gZo,hZo,lQ,pZo,_Zo,uZo,sF,P2e,bZo,vZo,iQ,FZo,TZo,MZo,lF,B2e,EZo,CZo,dQ,wZo,AZo,LZo,iF,I2e,yZo,xZo,cQ,$Zo,kZo,SZo,dF,N2e,RZo,PZo,fQ,BZo,IZo,NZo,cF,q2e,qZo,jZo,mQ,DZo,GZo,OZo,fF,j2e,VZo,XZo,gQ,zZo,QZo,WZo,mF,D2e,HZo,UZo,hQ,JZo,YZo,KZo,gF,G2e,ZZo,eer,pQ,oer,rer,ter,hF,O2e,aer,ner,_Q,ser,ler,ier,pF,V2e,der,cer,uQ,fer,mer,ger,_F,her,X2e,per,_er,z2e,uer,ber,uF,IXe,hd,bF,Q2e,Ey,ver,W2e,Fer,NXe,Do,Cy,Ter,pd,Mer,bQ,Eer,Cer,vQ,wer,Aer,Ler,wy,yer,H2e,xer,$er,ker,ut,Ay,Ser,U2e,Rer,Per,_d,Ber,J2e,Ier,Ner,FQ,qer,jer,Der,vF,Ger,so,Ly,Oer,Y2e,Ver,Xer,za,zer,K2e,Qer,Wer,Z2e,Her,Uer,e1e,Jer,Yer,Ker,V,FF,o1e,Zer,eor,TQ,oor,ror,tor,TF,r1e,aor,nor,MQ,sor,lor,ior,MF,t1e,dor,cor,EQ,mor,gor,hor,EF,a1e,por,_or,CQ,uor,bor,vor,CF,n1e,For,Tor,wQ,Mor,Eor,Cor,wF,s1e,wor,Aor,AQ,Lor,yor,xor,AF,l1e,$or,kor,LQ,Sor,Ror,Por,LF,i1e,Bor,Ior,yQ,Nor,qor,jor,yF,d1e,Dor,Gor,xQ,Oor,Vor,Xor,xF,c1e,zor,Qor,$Q,Wor,Hor,Uor,$F,f1e,Jor,Yor,kQ,Kor,Zor,err,kF,m1e,orr,rrr,SQ,trr,arr,nrr,SF,g1e,srr,lrr,RQ,irr,drr,crr,RF,h1e,frr,mrr,PQ,grr,hrr,prr,PF,p1e,_rr,urr,BQ,brr,vrr,Frr,BF,_1e,Trr,Mrr,IQ,Err,Crr,wrr,IF,u1e,Arr,Lrr,NQ,yrr,xrr,$rr,NF,b1e,krr,Srr,qQ,Rrr,Prr,Brr,qF,v1e,Irr,Nrr,jQ,qrr,jrr,Drr,jF,F1e,Grr,Orr,DQ,Vrr,Xrr,zrr,DF,T1e,Qrr,Wrr,GQ,Hrr,Urr,Jrr,GF,M1e,Yrr,Krr,OQ,Zrr,etr,otr,OF,E1e,rtr,ttr,VQ,atr,ntr,str,VF,C1e,ltr,itr,XQ,dtr,ctr,ftr,XF,w1e,mtr,gtr,zQ,htr,ptr,_tr,zF,A1e,utr,btr,QQ,vtr,Ftr,Ttr,QF,L1e,Mtr,Etr,WQ,Ctr,wtr,Atr,WF,y1e,Ltr,ytr,HQ,xtr,$tr,ktr,HF,x1e,Str,Rtr,UQ,Ptr,Btr,Itr,UF,$1e,Ntr,qtr,JQ,jtr,Dtr,Gtr,JF,k1e,Otr,Vtr,YQ,Xtr,ztr,Qtr,YF,S1e,Wtr,Htr,KQ,Utr,Jtr,Ytr,KF,R1e,Ktr,Ztr,ZQ,ear,oar,rar,ZF,P1e,tar,aar,eW,nar,sar,lar,eT,B1e,iar,dar,oW,car,far,mar,oT,I1e,gar,har,rW,par,_ar,uar,rT,N1e,bar,Far,tW,Tar,Mar,Ear,tT,q1e,Car,war,aW,Aar,Lar,yar,aT,j1e,xar,$ar,nW,kar,Sar,Rar,nT,D1e,Par,Bar,sW,Iar,Nar,qar,sT,G1e,jar,Dar,lW,Gar,Oar,Var,lT,O1e,Xar,zar,iW,Qar,War,Har,iT,Uar,V1e,Jar,Yar,X1e,Kar,Zar,dT,qXe,ud,cT,z1e,yy,enr,Q1e,onr,jXe,Go,xy,rnr,bd,tnr,dW,anr,nnr,cW,snr,lnr,inr,$y,dnr,W1e,cnr,fnr,mnr,bt,ky,gnr,H1e,hnr,pnr,vd,_nr,U1e,unr,bnr,fW,vnr,Fnr,Tnr,fT,Mnr,lo,Sy,Enr,J1e,Cnr,wnr,Qa,Anr,Y1e,Lnr,ynr,K1e,xnr,$nr,Z1e,knr,Snr,Rnr,ebe,mT,obe,Pnr,Bnr,mW,Inr,Nnr,qnr,gT,jnr,rbe,Dnr,Gnr,tbe,Onr,Vnr,hT,DXe,Fd,pT,abe,Ry,Xnr,nbe,znr,GXe,Oo,Py,Qnr,Td,Wnr,gW,Hnr,Unr,hW,Jnr,Ynr,Knr,By,Znr,sbe,esr,osr,rsr,vt,Iy,tsr,lbe,asr,nsr,Md,ssr,ibe,lsr,isr,pW,dsr,csr,fsr,_T,msr,io,Ny,gsr,dbe,hsr,psr,Wa,_sr,cbe,usr,bsr,fbe,vsr,Fsr,mbe,Tsr,Msr,Esr,ve,uT,gbe,Csr,wsr,_W,Asr,Lsr,ysr,bT,hbe,xsr,$sr,uW,ksr,Ssr,Rsr,vT,pbe,Psr,Bsr,bW,Isr,Nsr,qsr,FT,_be,jsr,Dsr,vW,Gsr,Osr,Vsr,Hs,ube,Xsr,zsr,FW,Qsr,Wsr,TW,Hsr,Usr,Jsr,TT,bbe,Ysr,Ksr,MW,Zsr,elr,olr,Us,vbe,rlr,tlr,EW,alr,nlr,CW,slr,llr,ilr,MT,Fbe,dlr,clr,wW,flr,mlr,glr,Ft,Tbe,hlr,plr,AW,_lr,ulr,LW,blr,vlr,yW,Flr,Tlr,Mlr,ET,Mbe,Elr,Clr,xW,wlr,Alr,Llr,CT,Ebe,ylr,xlr,$W,$lr,klr,Slr,wT,Cbe,Rlr,Plr,kW,Blr,Ilr,Nlr,AT,wbe,qlr,jlr,SW,Dlr,Glr,Olr,LT,Abe,Vlr,Xlr,RW,zlr,Qlr,Wlr,yT,Lbe,Hlr,Ulr,PW,Jlr,Ylr,Klr,xT,ybe,Zlr,eir,BW,oir,rir,tir,$T,air,xbe,nir,sir,$be,lir,iir,kT,OXe,Ed,ST,kbe,qy,dir,Sbe,cir,VXe,Vo,jy,fir,Cd,mir,IW,gir,hir,NW,pir,_ir,uir,Dy,bir,Rbe,vir,Fir,Tir,Tt,Gy,Mir,Pbe,Eir,Cir,wd,wir,Bbe,Air,Lir,qW,yir,xir,$ir,RT,kir,co,Oy,Sir,Ibe,Rir,Pir,Ha,Bir,Nbe,Iir,Nir,qbe,qir,jir,jbe,Dir,Gir,Oir,Dbe,PT,Gbe,Vir,Xir,jW,zir,Qir,Wir,BT,Hir,Obe,Uir,Jir,Vbe,Yir,Kir,IT,XXe,Ad,NT,Xbe,Vy,Zir,zbe,edr,zXe,Xo,Xy,odr,Ld,rdr,DW,tdr,adr,GW,ndr,sdr,ldr,zy,idr,Qbe,ddr,cdr,fdr,Mt,Qy,mdr,Wbe,gdr,hdr,yd,pdr,Hbe,_dr,udr,OW,bdr,vdr,Fdr,qT,Tdr,fo,Wy,Mdr,Ube,Edr,Cdr,Ua,wdr,Jbe,Adr,Ldr,Ybe,ydr,xdr,Kbe,$dr,kdr,Sdr,Zbe,jT,eve,Rdr,Pdr,VW,Bdr,Idr,Ndr,DT,qdr,ove,jdr,Ddr,rve,Gdr,Odr,GT,QXe,xd,OT,tve,Hy,Vdr,ave,Xdr,WXe,zo,Uy,zdr,$d,Qdr,XW,Wdr,Hdr,zW,Udr,Jdr,Ydr,Jy,Kdr,nve,Zdr,ecr,ocr,Et,Yy,rcr,sve,tcr,acr,kd,ncr,lve,scr,lcr,QW,icr,dcr,ccr,VT,fcr,mo,Ky,mcr,ive,gcr,hcr,Ja,pcr,dve,_cr,ucr,cve,bcr,vcr,fve,Fcr,Tcr,Mcr,Be,XT,mve,Ecr,Ccr,WW,wcr,Acr,Lcr,zT,gve,ycr,xcr,HW,$cr,kcr,Scr,QT,hve,Rcr,Pcr,UW,Bcr,Icr,Ncr,WT,pve,qcr,jcr,JW,Dcr,Gcr,Ocr,HT,_ve,Vcr,Xcr,YW,zcr,Qcr,Wcr,UT,uve,Hcr,Ucr,KW,Jcr,Ycr,Kcr,JT,bve,Zcr,efr,ZW,ofr,rfr,tfr,YT,vve,afr,nfr,eH,sfr,lfr,ifr,KT,Fve,dfr,cfr,oH,ffr,mfr,gfr,ZT,hfr,Tve,pfr,_fr,Mve,ufr,bfr,e8,HXe,Sd,o8,Eve,Zy,vfr,Cve,Ffr,UXe,Qo,e9,Tfr,Rd,Mfr,rH,Efr,Cfr,tH,wfr,Afr,Lfr,o9,yfr,wve,xfr,$fr,kfr,Ct,r9,Sfr,Ave,Rfr,Pfr,Pd,Bfr,Lve,Ifr,Nfr,aH,qfr,jfr,Dfr,r8,Gfr,go,t9,Ofr,yve,Vfr,Xfr,Ya,zfr,xve,Qfr,Wfr,$ve,Hfr,Ufr,kve,Jfr,Yfr,Kfr,rt,t8,Sve,Zfr,emr,nH,omr,rmr,tmr,a8,Rve,amr,nmr,sH,smr,lmr,imr,n8,Pve,dmr,cmr,lH,fmr,mmr,gmr,s8,Bve,hmr,pmr,iH,_mr,umr,bmr,l8,Ive,vmr,Fmr,dH,Tmr,Mmr,Emr,i8,Cmr,Nve,wmr,Amr,qve,Lmr,ymr,d8,JXe,Bd,c8,jve,a9,xmr,Dve,$mr,YXe,Wo,n9,kmr,Id,Smr,cH,Rmr,Pmr,fH,Bmr,Imr,Nmr,s9,qmr,Gve,jmr,Dmr,Gmr,wt,l9,Omr,Ove,Vmr,Xmr,Nd,zmr,Vve,Qmr,Wmr,mH,Hmr,Umr,Jmr,f8,Ymr,ho,i9,Kmr,Xve,Zmr,egr,Ka,ogr,zve,rgr,tgr,Qve,agr,ngr,Wve,sgr,lgr,igr,ye,m8,Hve,dgr,cgr,gH,fgr,mgr,ggr,g8,Uve,hgr,pgr,hH,_gr,ugr,bgr,h8,Jve,vgr,Fgr,pH,Tgr,Mgr,Egr,p8,Yve,Cgr,wgr,_H,Agr,Lgr,ygr,_8,Kve,xgr,$gr,uH,kgr,Sgr,Rgr,u8,Zve,Pgr,Bgr,bH,Igr,Ngr,qgr,b8,e0e,jgr,Dgr,vH,Ggr,Ogr,Vgr,v8,o0e,Xgr,zgr,FH,Qgr,Wgr,Hgr,F8,r0e,Ugr,Jgr,TH,Ygr,Kgr,Zgr,T8,t0e,ehr,ohr,MH,rhr,thr,ahr,M8,nhr,a0e,shr,lhr,n0e,ihr,dhr,E8,KXe,qd,C8,s0e,d9,chr,l0e,fhr,ZXe,Ho,c9,mhr,jd,ghr,EH,hhr,phr,CH,_hr,uhr,bhr,f9,vhr,i0e,Fhr,Thr,Mhr,At,m9,Ehr,d0e,Chr,whr,Dd,Ahr,c0e,Lhr,yhr,wH,xhr,$hr,khr,w8,Shr,po,g9,Rhr,f0e,Phr,Bhr,Za,Ihr,m0e,Nhr,qhr,g0e,jhr,Dhr,h0e,Ghr,Ohr,Vhr,h9,A8,p0e,Xhr,zhr,AH,Qhr,Whr,Hhr,L8,_0e,Uhr,Jhr,LH,Yhr,Khr,Zhr,y8,epr,u0e,opr,rpr,b0e,tpr,apr,x8,eze,Gd,$8,v0e,p9,npr,F0e,spr,oze,Uo,_9,lpr,Od,ipr,yH,dpr,cpr,xH,fpr,mpr,gpr,u9,hpr,T0e,ppr,_pr,upr,Lt,b9,bpr,M0e,vpr,Fpr,Vd,Tpr,E0e,Mpr,Epr,$H,Cpr,wpr,Apr,k8,Lpr,_o,v9,ypr,C0e,xpr,$pr,en,kpr,w0e,Spr,Rpr,A0e,Ppr,Bpr,L0e,Ipr,Npr,qpr,tt,S8,y0e,jpr,Dpr,kH,Gpr,Opr,Vpr,R8,x0e,Xpr,zpr,SH,Qpr,Wpr,Hpr,P8,$0e,Upr,Jpr,RH,Ypr,Kpr,Zpr,B8,k0e,e_r,o_r,PH,r_r,t_r,a_r,I8,S0e,n_r,s_r,BH,l_r,i_r,d_r,N8,c_r,R0e,f_r,m_r,P0e,g_r,h_r,q8,rze,Xd,j8,B0e,F9,p_r,I0e,__r,tze,Jo,T9,u_r,zd,b_r,IH,v_r,F_r,NH,T_r,M_r,E_r,M9,C_r,N0e,w_r,A_r,L_r,yt,E9,y_r,q0e,x_r,$_r,Qd,k_r,j0e,S_r,R_r,qH,P_r,B_r,I_r,D8,N_r,uo,C9,q_r,D0e,j_r,D_r,on,G_r,G0e,O_r,V_r,O0e,X_r,z_r,V0e,Q_r,W_r,H_r,Wd,G8,X0e,U_r,J_r,jH,Y_r,K_r,Z_r,O8,z0e,eur,our,DH,rur,tur,aur,V8,Q0e,nur,sur,GH,lur,iur,dur,X8,cur,W0e,fur,mur,H0e,gur,hur,z8,aze,Hd,Q8,U0e,w9,pur,J0e,_ur,nze,Yo,A9,uur,Ud,bur,OH,vur,Fur,VH,Tur,Mur,Eur,L9,Cur,Y0e,wur,Aur,Lur,xt,y9,yur,K0e,xur,$ur,Jd,kur,Z0e,Sur,Rur,XH,Pur,Bur,Iur,W8,Nur,bo,x9,qur,eFe,jur,Dur,rn,Gur,oFe,Our,Vur,rFe,Xur,zur,tFe,Qur,Wur,Hur,$9,H8,aFe,Uur,Jur,zH,Yur,Kur,Zur,U8,nFe,e2r,o2r,QH,r2r,t2r,a2r,J8,n2r,sFe,s2r,l2r,lFe,i2r,d2r,Y8,sze,Yd,K8,iFe,k9,c2r,dFe,f2r,lze,Ko,S9,m2r,Kd,g2r,WH,h2r,p2r,HH,_2r,u2r,b2r,R9,v2r,cFe,F2r,T2r,M2r,$t,P9,E2r,fFe,C2r,w2r,Zd,A2r,mFe,L2r,y2r,UH,x2r,$2r,k2r,Z8,S2r,vo,B9,R2r,gFe,P2r,B2r,tn,I2r,hFe,N2r,q2r,pFe,j2r,D2r,_Fe,G2r,O2r,V2r,uFe,eM,bFe,X2r,z2r,JH,Q2r,W2r,H2r,oM,U2r,vFe,J2r,Y2r,FFe,K2r,Z2r,rM,ize,ec,tM,TFe,I9,e1r,MFe,o1r,dze,Zo,N9,r1r,oc,t1r,YH,a1r,n1r,KH,s1r,l1r,i1r,q9,d1r,EFe,c1r,f1r,m1r,kt,j9,g1r,CFe,h1r,p1r,rc,_1r,wFe,u1r,b1r,ZH,v1r,F1r,T1r,aM,M1r,Fo,D9,E1r,AFe,C1r,w1r,an,A1r,LFe,L1r,y1r,yFe,x1r,$1r,xFe,k1r,S1r,R1r,at,nM,$Fe,P1r,B1r,eU,I1r,N1r,q1r,sM,kFe,j1r,D1r,oU,G1r,O1r,V1r,lM,SFe,X1r,z1r,rU,Q1r,W1r,H1r,iM,RFe,U1r,J1r,tU,Y1r,K1r,Z1r,dM,PFe,ebr,obr,aU,rbr,tbr,abr,cM,nbr,BFe,sbr,lbr,IFe,ibr,dbr,fM,cze,tc,mM,NFe,G9,cbr,qFe,fbr,fze,er,O9,mbr,ac,gbr,nU,hbr,pbr,sU,_br,ubr,bbr,V9,vbr,jFe,Fbr,Tbr,Mbr,St,X9,Ebr,DFe,Cbr,wbr,nc,Abr,GFe,Lbr,ybr,lU,xbr,$br,kbr,gM,Sbr,To,z9,Rbr,OFe,Pbr,Bbr,nn,Ibr,VFe,Nbr,qbr,XFe,jbr,Dbr,zFe,Gbr,Obr,Vbr,QFe,hM,WFe,Xbr,zbr,iU,Qbr,Wbr,Hbr,pM,Ubr,HFe,Jbr,Ybr,UFe,Kbr,Zbr,_M,mze,sc,uM,JFe,Q9,evr,YFe,ovr,gze,or,W9,rvr,lc,tvr,dU,avr,nvr,cU,svr,lvr,ivr,H9,dvr,KFe,cvr,fvr,mvr,Rt,U9,gvr,ZFe,hvr,pvr,ic,_vr,eTe,uvr,bvr,fU,vvr,Fvr,Tvr,bM,Mvr,xr,J9,Evr,oTe,Cvr,wvr,sn,Avr,rTe,Lvr,yvr,tTe,xvr,$vr,aTe,kvr,Svr,Rvr,q,vM,nTe,Pvr,Bvr,mU,Ivr,Nvr,qvr,FM,sTe,jvr,Dvr,gU,Gvr,Ovr,Vvr,TM,lTe,Xvr,zvr,hU,Qvr,Wvr,Hvr,MM,iTe,Uvr,Jvr,pU,Yvr,Kvr,Zvr,EM,dTe,e0r,o0r,_U,r0r,t0r,a0r,CM,cTe,n0r,s0r,uU,l0r,i0r,d0r,wM,fTe,c0r,f0r,bU,m0r,g0r,h0r,AM,mTe,p0r,_0r,vU,u0r,b0r,v0r,LM,gTe,F0r,T0r,FU,M0r,E0r,C0r,yM,hTe,w0r,A0r,TU,L0r,y0r,x0r,xM,pTe,$0r,k0r,MU,S0r,R0r,P0r,$M,_Te,B0r,I0r,EU,N0r,q0r,j0r,kM,uTe,D0r,G0r,CU,O0r,V0r,X0r,SM,bTe,z0r,Q0r,wU,W0r,H0r,U0r,RM,vTe,J0r,Y0r,AU,K0r,Z0r,eFr,PM,FTe,oFr,rFr,LU,tFr,aFr,nFr,BM,TTe,sFr,lFr,yU,iFr,dFr,cFr,IM,MTe,fFr,mFr,xU,gFr,hFr,pFr,Js,ETe,_Fr,uFr,$U,bFr,vFr,kU,FFr,TFr,MFr,NM,CTe,EFr,CFr,SU,wFr,AFr,LFr,qM,wTe,yFr,xFr,RU,$Fr,kFr,SFr,jM,ATe,RFr,PFr,PU,BFr,IFr,NFr,DM,LTe,qFr,jFr,BU,DFr,GFr,OFr,GM,yTe,VFr,XFr,IU,zFr,QFr,WFr,OM,xTe,HFr,UFr,NU,JFr,YFr,KFr,VM,$Te,ZFr,eTr,qU,oTr,rTr,tTr,XM,kTe,aTr,nTr,jU,sTr,lTr,iTr,zM,STe,dTr,cTr,DU,fTr,mTr,gTr,QM,RTe,hTr,pTr,GU,_Tr,uTr,bTr,WM,PTe,vTr,FTr,OU,TTr,MTr,ETr,HM,BTe,CTr,wTr,VU,ATr,LTr,yTr,UM,ITe,xTr,$Tr,XU,kTr,STr,RTr,JM,NTe,PTr,BTr,zU,ITr,NTr,qTr,YM,qTe,jTr,DTr,QU,GTr,OTr,VTr,KM,jTe,XTr,zTr,WU,QTr,WTr,HTr,ZM,DTe,UTr,JTr,HU,YTr,KTr,ZTr,e4,GTe,e8r,o8r,UU,r8r,t8r,a8r,o4,OTe,n8r,s8r,JU,l8r,i8r,d8r,r4,VTe,c8r,f8r,YU,m8r,g8r,h8r,t4,XTe,p8r,_8r,KU,u8r,b8r,v8r,a4,zTe,F8r,T8r,ZU,M8r,E8r,C8r,n4,QTe,w8r,A8r,eJ,L8r,y8r,x8r,s4,WTe,$8r,k8r,oJ,S8r,R8r,P8r,l4,HTe,B8r,I8r,rJ,N8r,q8r,j8r,i4,UTe,D8r,G8r,tJ,O8r,V8r,X8r,d4,JTe,z8r,Q8r,aJ,W8r,H8r,U8r,c4,YTe,J8r,Y8r,nJ,K8r,Z8r,eMr,f4,KTe,oMr,rMr,sJ,tMr,aMr,nMr,m4,ZTe,sMr,lMr,lJ,iMr,dMr,cMr,g4,e8e,fMr,mMr,iJ,gMr,hMr,pMr,h4,hze,dc,p4,o8e,Y9,_Mr,r8e,uMr,pze,rr,K9,bMr,cc,vMr,dJ,FMr,TMr,cJ,MMr,EMr,CMr,Z9,wMr,t8e,AMr,LMr,yMr,Pt,ex,xMr,a8e,$Mr,kMr,fc,SMr,n8e,RMr,PMr,fJ,BMr,IMr,NMr,_4,qMr,$r,ox,jMr,s8e,DMr,GMr,ln,OMr,l8e,VMr,XMr,i8e,zMr,QMr,d8e,WMr,HMr,UMr,se,u4,c8e,JMr,YMr,mJ,KMr,ZMr,e4r,b4,f8e,o4r,r4r,gJ,t4r,a4r,n4r,v4,m8e,s4r,l4r,hJ,i4r,d4r,c4r,F4,g8e,f4r,m4r,pJ,g4r,h4r,p4r,T4,h8e,_4r,u4r,_J,b4r,v4r,F4r,M4,p8e,T4r,M4r,uJ,E4r,C4r,w4r,E4,_8e,A4r,L4r,bJ,y4r,x4r,$4r,C4,u8e,k4r,S4r,vJ,R4r,P4r,B4r,w4,b8e,I4r,N4r,FJ,q4r,j4r,D4r,A4,v8e,G4r,O4r,TJ,V4r,X4r,z4r,L4,F8e,Q4r,W4r,MJ,H4r,U4r,J4r,y4,T8e,Y4r,K4r,EJ,Z4r,eEr,oEr,x4,M8e,rEr,tEr,CJ,aEr,nEr,sEr,$4,E8e,lEr,iEr,wJ,dEr,cEr,fEr,k4,C8e,mEr,gEr,AJ,hEr,pEr,_Er,S4,w8e,uEr,bEr,LJ,vEr,FEr,TEr,R4,A8e,MEr,EEr,yJ,CEr,wEr,AEr,P4,L8e,LEr,yEr,xJ,xEr,$Er,kEr,B4,y8e,SEr,REr,$J,PEr,BEr,IEr,I4,x8e,NEr,qEr,kJ,jEr,DEr,GEr,N4,$8e,OEr,VEr,SJ,XEr,zEr,QEr,q4,k8e,WEr,HEr,RJ,UEr,JEr,YEr,j4,S8e,KEr,ZEr,PJ,eCr,oCr,rCr,D4,_ze,mc,G4,R8e,rx,tCr,P8e,aCr,uze,tr,tx,nCr,gc,sCr,BJ,lCr,iCr,IJ,dCr,cCr,fCr,ax,mCr,B8e,gCr,hCr,pCr,Bt,nx,_Cr,I8e,uCr,bCr,hc,vCr,N8e,FCr,TCr,NJ,MCr,ECr,CCr,O4,wCr,kr,sx,ACr,q8e,LCr,yCr,dn,xCr,j8e,$Cr,kCr,D8e,SCr,RCr,G8e,PCr,BCr,ICr,Me,V4,O8e,NCr,qCr,qJ,jCr,DCr,GCr,X4,V8e,OCr,VCr,jJ,XCr,zCr,QCr,z4,X8e,WCr,HCr,DJ,UCr,JCr,YCr,Q4,z8e,KCr,ZCr,GJ,e3r,o3r,r3r,W4,Q8e,t3r,a3r,OJ,n3r,s3r,l3r,H4,W8e,i3r,d3r,VJ,c3r,f3r,m3r,U4,H8e,g3r,h3r,XJ,p3r,_3r,u3r,J4,U8e,b3r,v3r,zJ,F3r,T3r,M3r,Y4,J8e,E3r,C3r,QJ,w3r,A3r,L3r,K4,Y8e,y3r,x3r,WJ,$3r,k3r,S3r,Z4,K8e,R3r,P3r,HJ,B3r,I3r,N3r,eE,Z8e,q3r,j3r,UJ,D3r,G3r,O3r,oE,eMe,V3r,X3r,JJ,z3r,Q3r,W3r,rE,bze,pc,tE,oMe,lx,H3r,rMe,U3r,vze,ar,ix,J3r,_c,Y3r,YJ,K3r,Z3r,KJ,e5r,o5r,r5r,dx,t5r,tMe,a5r,n5r,s5r,It,cx,l5r,aMe,i5r,d5r,uc,c5r,nMe,f5r,m5r,ZJ,g5r,h5r,p5r,aE,_5r,Sr,fx,u5r,sMe,b5r,v5r,cn,F5r,lMe,T5r,M5r,iMe,E5r,C5r,dMe,w5r,A5r,L5r,Qe,nE,cMe,y5r,x5r,eY,$5r,k5r,S5r,sE,fMe,R5r,P5r,oY,B5r,I5r,N5r,Ys,mMe,q5r,j5r,rY,D5r,G5r,tY,O5r,V5r,X5r,lE,gMe,z5r,Q5r,aY,W5r,H5r,U5r,iE,hMe,J5r,Y5r,nY,K5r,Z5r,ewr,dE,pMe,owr,rwr,sY,twr,awr,nwr,cE,_Me,swr,lwr,lY,iwr,dwr,cwr,fE,Fze,bc,mE,uMe,mx,fwr,bMe,mwr,Tze,nr,gx,gwr,vc,hwr,iY,pwr,_wr,dY,uwr,bwr,vwr,hx,Fwr,vMe,Twr,Mwr,Ewr,Nt,px,Cwr,FMe,wwr,Awr,Fc,Lwr,TMe,ywr,xwr,cY,$wr,kwr,Swr,gE,Rwr,Rr,_x,Pwr,MMe,Bwr,Iwr,fn,Nwr,EMe,qwr,jwr,CMe,Dwr,Gwr,wMe,Owr,Vwr,Xwr,ie,hE,AMe,zwr,Qwr,fY,Wwr,Hwr,Uwr,pE,LMe,Jwr,Ywr,mY,Kwr,Zwr,eAr,_E,yMe,oAr,rAr,gY,tAr,aAr,nAr,uE,xMe,sAr,lAr,hY,iAr,dAr,cAr,bE,$Me,fAr,mAr,pY,gAr,hAr,pAr,vE,kMe,_Ar,uAr,_Y,bAr,vAr,FAr,FE,SMe,TAr,MAr,uY,EAr,CAr,wAr,TE,RMe,AAr,LAr,bY,yAr,xAr,$Ar,ME,PMe,kAr,SAr,vY,RAr,PAr,BAr,EE,BMe,IAr,NAr,FY,qAr,jAr,DAr,CE,IMe,GAr,OAr,TY,VAr,XAr,zAr,wE,NMe,QAr,WAr,MY,HAr,UAr,JAr,AE,qMe,YAr,KAr,EY,ZAr,e6r,o6r,LE,jMe,r6r,t6r,CY,a6r,n6r,s6r,yE,DMe,l6r,i6r,wY,d6r,c6r,f6r,xE,GMe,m6r,g6r,AY,h6r,p6r,_6r,$E,OMe,u6r,b6r,LY,v6r,F6r,T6r,kE,VMe,M6r,E6r,yY,C6r,w6r,A6r,SE,XMe,L6r,y6r,xY,x6r,$6r,k6r,RE,zMe,S6r,R6r,$Y,P6r,B6r,I6r,PE,Mze,Tc,BE,QMe,ux,N6r,WMe,q6r,Eze,sr,bx,j6r,Mc,D6r,kY,G6r,O6r,SY,V6r,X6r,z6r,vx,Q6r,HMe,W6r,H6r,U6r,qt,Fx,J6r,UMe,Y6r,K6r,Ec,Z6r,JMe,e7r,o7r,RY,r7r,t7r,a7r,IE,n7r,Pr,Tx,s7r,YMe,l7r,i7r,mn,d7r,KMe,c7r,f7r,ZMe,m7r,g7r,e4e,h7r,p7r,_7r,xe,NE,o4e,u7r,b7r,PY,v7r,F7r,T7r,qE,r4e,M7r,E7r,BY,C7r,w7r,A7r,jE,t4e,L7r,y7r,IY,x7r,$7r,k7r,DE,a4e,S7r,R7r,NY,P7r,B7r,I7r,GE,n4e,N7r,q7r,qY,j7r,D7r,G7r,OE,s4e,O7r,V7r,jY,X7r,z7r,Q7r,VE,l4e,W7r,H7r,DY,U7r,J7r,Y7r,XE,i4e,K7r,Z7r,GY,eLr,oLr,rLr,zE,d4e,tLr,aLr,OY,nLr,sLr,lLr,QE,c4e,iLr,dLr,VY,cLr,fLr,mLr,WE,Cze,Cc,HE,f4e,Mx,gLr,m4e,hLr,wze,lr,Ex,pLr,wc,_Lr,XY,uLr,bLr,zY,vLr,FLr,TLr,Cx,MLr,g4e,ELr,CLr,wLr,jt,wx,ALr,h4e,LLr,yLr,Ac,xLr,p4e,$Lr,kLr,QY,SLr,RLr,PLr,UE,BLr,Br,Ax,ILr,_4e,NLr,qLr,gn,jLr,u4e,DLr,GLr,b4e,OLr,VLr,v4e,XLr,zLr,QLr,ae,JE,F4e,WLr,HLr,WY,ULr,JLr,YLr,YE,T4e,KLr,ZLr,HY,eyr,oyr,ryr,KE,M4e,tyr,ayr,UY,nyr,syr,lyr,ZE,E4e,iyr,dyr,JY,cyr,fyr,myr,eC,C4e,gyr,hyr,YY,pyr,_yr,uyr,oC,w4e,byr,vyr,KY,Fyr,Tyr,Myr,rC,A4e,Eyr,Cyr,ZY,wyr,Ayr,Lyr,tC,L4e,yyr,xyr,eK,$yr,kyr,Syr,aC,y4e,Ryr,Pyr,oK,Byr,Iyr,Nyr,nC,x4e,qyr,jyr,rK,Dyr,Gyr,Oyr,sC,$4e,Vyr,Xyr,tK,zyr,Qyr,Wyr,lC,k4e,Hyr,Uyr,aK,Jyr,Yyr,Kyr,iC,S4e,Zyr,e9r,nK,o9r,r9r,t9r,dC,R4e,a9r,n9r,sK,s9r,l9r,i9r,cC,P4e,d9r,c9r,lK,f9r,m9r,g9r,fC,B4e,h9r,p9r,iK,_9r,u9r,b9r,mC,I4e,v9r,F9r,dK,T9r,M9r,E9r,gC,N4e,C9r,w9r,cK,A9r,L9r,y9r,hC,q4e,x9r,$9r,fK,k9r,S9r,R9r,pC,j4e,P9r,B9r,mK,I9r,N9r,q9r,_C,D4e,j9r,D9r,gK,G9r,O9r,V9r,uC,G4e,X9r,z9r,hK,Q9r,W9r,H9r,bC,O4e,U9r,J9r,pK,Y9r,K9r,Z9r,vC,V4e,exr,oxr,_K,rxr,txr,axr,FC,X4e,nxr,sxr,uK,lxr,ixr,dxr,TC,z4e,cxr,fxr,bK,mxr,gxr,hxr,MC,Aze,Lc,EC,Q4e,Lx,pxr,W4e,_xr,Lze,ir,yx,uxr,yc,bxr,vK,vxr,Fxr,FK,Txr,Mxr,Exr,xx,Cxr,H4e,wxr,Axr,Lxr,Dt,$x,yxr,U4e,xxr,$xr,xc,kxr,J4e,Sxr,Rxr,TK,Pxr,Bxr,Ixr,CC,Nxr,Ir,kx,qxr,Y4e,jxr,Dxr,hn,Gxr,K4e,Oxr,Vxr,Z4e,Xxr,zxr,eEe,Qxr,Wxr,Hxr,_e,wC,oEe,Uxr,Jxr,MK,Yxr,Kxr,Zxr,AC,rEe,e$r,o$r,EK,r$r,t$r,a$r,LC,tEe,n$r,s$r,CK,l$r,i$r,d$r,yC,aEe,c$r,f$r,wK,m$r,g$r,h$r,xC,nEe,p$r,_$r,AK,u$r,b$r,v$r,$C,sEe,F$r,T$r,LK,M$r,E$r,C$r,kC,lEe,w$r,A$r,yK,L$r,y$r,x$r,SC,iEe,$$r,k$r,xK,S$r,R$r,P$r,RC,dEe,B$r,I$r,$K,N$r,q$r,j$r,PC,cEe,D$r,G$r,kK,O$r,V$r,X$r,BC,fEe,z$r,Q$r,SK,W$r,H$r,U$r,IC,mEe,J$r,Y$r,RK,K$r,Z$r,ekr,NC,gEe,okr,rkr,PK,tkr,akr,nkr,qC,hEe,skr,lkr,BK,ikr,dkr,ckr,jC,pEe,fkr,mkr,IK,gkr,hkr,pkr,DC,_Ee,_kr,ukr,NK,bkr,vkr,Fkr,GC,uEe,Tkr,Mkr,qK,Ekr,Ckr,wkr,OC,yze,$c,VC,bEe,Sx,Akr,vEe,Lkr,xze,dr,Rx,ykr,kc,xkr,jK,$kr,kkr,DK,Skr,Rkr,Pkr,Px,Bkr,FEe,Ikr,Nkr,qkr,Gt,Bx,jkr,TEe,Dkr,Gkr,Sc,Okr,MEe,Vkr,Xkr,GK,zkr,Qkr,Wkr,XC,Hkr,Nr,Ix,Ukr,EEe,Jkr,Ykr,pn,Kkr,CEe,Zkr,eSr,wEe,oSr,rSr,AEe,tSr,aSr,nSr,Nx,zC,LEe,sSr,lSr,OK,iSr,dSr,cSr,QC,yEe,fSr,mSr,VK,gSr,hSr,pSr,WC,$ze,Rc,HC,xEe,qx,_Sr,$Ee,uSr,kze,cr,jx,bSr,Pc,vSr,XK,FSr,TSr,zK,MSr,ESr,CSr,Dx,wSr,kEe,ASr,LSr,ySr,Ot,Gx,xSr,SEe,$Sr,kSr,Bc,SSr,REe,RSr,PSr,QK,BSr,ISr,NSr,UC,qSr,qr,Ox,jSr,PEe,DSr,GSr,_n,OSr,BEe,VSr,XSr,IEe,zSr,QSr,NEe,WSr,HSr,USr,qEe,JC,jEe,JSr,YSr,WK,KSr,ZSr,eRr,YC,Sze,Ic,KC,DEe,Vx,oRr,GEe,rRr,Rze,fr,Xx,tRr,Nc,aRr,HK,nRr,sRr,UK,lRr,iRr,dRr,zx,cRr,OEe,fRr,mRr,gRr,Vt,Qx,hRr,VEe,pRr,_Rr,qc,uRr,XEe,bRr,vRr,JK,FRr,TRr,MRr,ZC,ERr,jr,Wx,CRr,zEe,wRr,ARr,un,LRr,QEe,yRr,xRr,WEe,$Rr,kRr,HEe,SRr,RRr,PRr,de,e3,UEe,BRr,IRr,YK,NRr,qRr,jRr,o3,JEe,DRr,GRr,KK,ORr,VRr,XRr,r3,YEe,zRr,QRr,ZK,WRr,HRr,URr,t3,KEe,JRr,YRr,eZ,KRr,ZRr,ePr,a3,ZEe,oPr,rPr,oZ,tPr,aPr,nPr,n3,eCe,sPr,lPr,rZ,iPr,dPr,cPr,s3,oCe,fPr,mPr,tZ,gPr,hPr,pPr,l3,rCe,_Pr,uPr,aZ,bPr,vPr,FPr,i3,tCe,TPr,MPr,nZ,EPr,CPr,wPr,d3,aCe,APr,LPr,sZ,yPr,xPr,$Pr,c3,nCe,kPr,SPr,lZ,RPr,PPr,BPr,f3,sCe,IPr,NPr,iZ,qPr,jPr,DPr,m3,lCe,GPr,OPr,dZ,VPr,XPr,zPr,g3,iCe,QPr,WPr,cZ,HPr,UPr,JPr,h3,dCe,YPr,KPr,fZ,ZPr,eBr,oBr,p3,cCe,rBr,tBr,mZ,aBr,nBr,sBr,_3,fCe,lBr,iBr,gZ,dBr,cBr,fBr,u3,mCe,mBr,gBr,hZ,hBr,pBr,_Br,b3,gCe,uBr,bBr,pZ,vBr,FBr,TBr,v3,hCe,MBr,EBr,_Z,CBr,wBr,ABr,F3,Pze,jc,T3,pCe,Hx,LBr,_Ce,yBr,Bze,mr,Ux,xBr,Dc,$Br,uZ,kBr,SBr,bZ,RBr,PBr,BBr,Jx,IBr,uCe,NBr,qBr,jBr,Xt,Yx,DBr,bCe,GBr,OBr,Gc,VBr,vCe,XBr,zBr,vZ,QBr,WBr,HBr,M3,UBr,Dr,Kx,JBr,FCe,YBr,KBr,bn,ZBr,TCe,eIr,oIr,MCe,rIr,tIr,ECe,aIr,nIr,sIr,ce,E3,CCe,lIr,iIr,FZ,dIr,cIr,fIr,C3,wCe,mIr,gIr,TZ,hIr,pIr,_Ir,w3,ACe,uIr,bIr,MZ,vIr,FIr,TIr,A3,LCe,MIr,EIr,EZ,CIr,wIr,AIr,L3,yCe,LIr,yIr,CZ,xIr,$Ir,kIr,y3,xCe,SIr,RIr,wZ,PIr,BIr,IIr,x3,$Ce,NIr,qIr,AZ,jIr,DIr,GIr,$3,kCe,OIr,VIr,LZ,XIr,zIr,QIr,k3,SCe,WIr,HIr,yZ,UIr,JIr,YIr,S3,RCe,KIr,ZIr,xZ,eNr,oNr,rNr,R3,PCe,tNr,aNr,$Z,nNr,sNr,lNr,P3,BCe,iNr,dNr,kZ,cNr,fNr,mNr,B3,ICe,gNr,hNr,SZ,pNr,_Nr,uNr,I3,NCe,bNr,vNr,RZ,FNr,TNr,MNr,N3,qCe,ENr,CNr,PZ,wNr,ANr,LNr,q3,jCe,yNr,xNr,BZ,$Nr,kNr,SNr,j3,DCe,RNr,PNr,IZ,BNr,INr,NNr,D3,GCe,qNr,jNr,NZ,DNr,GNr,ONr,G3,OCe,VNr,XNr,qZ,zNr,QNr,WNr,O3,VCe,HNr,UNr,jZ,JNr,YNr,KNr,V3,Ize,Oc,X3,XCe,Zx,ZNr,zCe,eqr,Nze,gr,e$,oqr,Vc,rqr,DZ,tqr,aqr,GZ,nqr,sqr,lqr,o$,iqr,QCe,dqr,cqr,fqr,zt,r$,mqr,WCe,gqr,hqr,Xc,pqr,HCe,_qr,uqr,OZ,bqr,vqr,Fqr,z3,Tqr,Gr,t$,Mqr,UCe,Eqr,Cqr,vn,wqr,JCe,Aqr,Lqr,YCe,yqr,xqr,KCe,$qr,kqr,Sqr,ZCe,Q3,e3e,Rqr,Pqr,VZ,Bqr,Iqr,Nqr,W3,qze,zc,H3,o3e,a$,qqr,r3e,jqr,jze,hr,n$,Dqr,Qc,Gqr,XZ,Oqr,Vqr,zZ,Xqr,zqr,Qqr,s$,Wqr,t3e,Hqr,Uqr,Jqr,Qt,l$,Yqr,a3e,Kqr,Zqr,Wc,ejr,n3e,ojr,rjr,QZ,tjr,ajr,njr,U3,sjr,Or,i$,ljr,s3e,ijr,djr,Fn,cjr,l3e,fjr,mjr,i3e,gjr,hjr,d3e,pjr,_jr,ujr,c3e,J3,f3e,bjr,vjr,WZ,Fjr,Tjr,Mjr,Y3,Dze,Hc,K3,m3e,d$,Ejr,g3e,Cjr,Gze,pr,c$,wjr,Uc,Ajr,HZ,Ljr,yjr,UZ,xjr,$jr,kjr,f$,Sjr,h3e,Rjr,Pjr,Bjr,Wt,m$,Ijr,p3e,Njr,qjr,Jc,jjr,_3e,Djr,Gjr,JZ,Ojr,Vjr,Xjr,Z3,zjr,Vr,g$,Qjr,u3e,Wjr,Hjr,Tn,Ujr,b3e,Jjr,Yjr,v3e,Kjr,Zjr,F3e,eDr,oDr,rDr,oe,e5,T3e,tDr,aDr,YZ,nDr,sDr,lDr,o5,M3e,iDr,dDr,KZ,cDr,fDr,mDr,r5,E3e,gDr,hDr,ZZ,pDr,_Dr,uDr,t5,C3e,bDr,vDr,eee,FDr,TDr,MDr,a5,w3e,EDr,CDr,oee,wDr,ADr,LDr,n5,A3e,yDr,xDr,ree,$Dr,kDr,SDr,s5,L3e,RDr,PDr,tee,BDr,IDr,NDr,l5,y3e,qDr,jDr,aee,DDr,GDr,ODr,i5,x3e,VDr,XDr,nee,zDr,QDr,WDr,d5,$3e,HDr,UDr,see,JDr,YDr,KDr,c5,k3e,ZDr,eGr,lee,oGr,rGr,tGr,f5,S3e,aGr,nGr,iee,sGr,lGr,iGr,m5,R3e,dGr,cGr,dee,fGr,mGr,gGr,g5,P3e,hGr,pGr,cee,_Gr,uGr,bGr,h5,B3e,vGr,FGr,fee,TGr,MGr,EGr,p5,I3e,CGr,wGr,mee,AGr,LGr,yGr,_5,N3e,xGr,$Gr,gee,kGr,SGr,RGr,u5,q3e,PGr,BGr,hee,IGr,NGr,qGr,b5,j3e,jGr,DGr,pee,GGr,OGr,VGr,v5,D3e,XGr,zGr,_ee,QGr,WGr,HGr,F5,G3e,UGr,JGr,uee,YGr,KGr,ZGr,T5,O3e,eOr,oOr,bee,rOr,tOr,aOr,M5,V3e,nOr,sOr,vee,lOr,iOr,dOr,E5,X3e,cOr,fOr,Fee,mOr,gOr,hOr,C5,z3e,pOr,_Or,Tee,uOr,bOr,vOr,w5,Q3e,FOr,TOr,Mee,MOr,EOr,COr,A5,W3e,wOr,AOr,Eee,LOr,yOr,xOr,L5,H3e,$Or,kOr,Cee,SOr,ROr,POr,y5,Oze,Yc,x5,U3e,h$,BOr,J3e,IOr,Vze,_r,p$,NOr,Kc,qOr,wee,jOr,DOr,Aee,GOr,OOr,VOr,_$,XOr,Y3e,zOr,QOr,WOr,Ht,u$,HOr,K3e,UOr,JOr,Zc,YOr,Z3e,KOr,ZOr,Lee,eVr,oVr,rVr,$5,tVr,Xr,b$,aVr,e5e,nVr,sVr,Mn,lVr,o5e,iVr,dVr,r5e,cVr,fVr,t5e,mVr,gVr,hVr,Ae,k5,a5e,pVr,_Vr,yee,uVr,bVr,vVr,S5,n5e,FVr,TVr,xee,MVr,EVr,CVr,R5,s5e,wVr,AVr,$ee,LVr,yVr,xVr,P5,l5e,$Vr,kVr,kee,SVr,RVr,PVr,B5,i5e,BVr,IVr,See,NVr,qVr,jVr,I5,d5e,DVr,GVr,Ree,OVr,VVr,XVr,N5,c5e,zVr,QVr,Pee,WVr,HVr,UVr,q5,f5e,JVr,YVr,Bee,KVr,ZVr,eXr,j5,m5e,oXr,rXr,Iee,tXr,aXr,nXr,D5,g5e,sXr,lXr,Nee,iXr,dXr,cXr,G5,h5e,fXr,mXr,qee,gXr,hXr,pXr,O5,Xze,ef,V5,p5e,v$,_Xr,_5e,uXr,zze,ur,F$,bXr,of,vXr,jee,FXr,TXr,Dee,MXr,EXr,CXr,T$,wXr,u5e,AXr,LXr,yXr,Ut,M$,xXr,b5e,$Xr,kXr,rf,SXr,v5e,RXr,PXr,Gee,BXr,IXr,NXr,X5,qXr,zr,E$,jXr,F5e,DXr,GXr,En,OXr,T5e,VXr,XXr,M5e,zXr,QXr,E5e,WXr,HXr,UXr,Ee,z5,C5e,JXr,YXr,Oee,KXr,ZXr,ezr,Q5,w5e,ozr,rzr,Vee,tzr,azr,nzr,W5,A5e,szr,lzr,Xee,izr,dzr,czr,H5,L5e,fzr,mzr,zee,gzr,hzr,pzr,U5,y5e,_zr,uzr,Qee,bzr,vzr,Fzr,J5,x5e,Tzr,Mzr,Wee,Ezr,Czr,wzr,Y5,$5e,Azr,Lzr,Hee,yzr,xzr,$zr,K5,k5e,kzr,Szr,Uee,Rzr,Pzr,Bzr,Z5,S5e,Izr,Nzr,Jee,qzr,jzr,Dzr,ew,R5e,Gzr,Ozr,Yee,Vzr,Xzr,zzr,ow,P5e,Qzr,Wzr,Kee,Hzr,Uzr,Jzr,rw,B5e,Yzr,Kzr,Zee,Zzr,eQr,oQr,tw,I5e,rQr,tQr,eoe,aQr,nQr,sQr,aw,Qze,tf,nw,N5e,C$,lQr,q5e,iQr,Wze,br,w$,dQr,af,cQr,ooe,fQr,mQr,roe,gQr,hQr,pQr,A$,_Qr,j5e,uQr,bQr,vQr,Jt,L$,FQr,D5e,TQr,MQr,nf,EQr,G5e,CQr,wQr,toe,AQr,LQr,yQr,sw,xQr,Qr,y$,$Qr,O5e,kQr,SQr,Cn,RQr,V5e,PQr,BQr,X5e,IQr,NQr,z5e,qQr,jQr,DQr,$e,lw,Q5e,GQr,OQr,aoe,VQr,XQr,zQr,iw,W5e,QQr,WQr,noe,HQr,UQr,JQr,dw,H5e,YQr,KQr,soe,ZQr,eWr,oWr,cw,U5e,rWr,tWr,loe,aWr,nWr,sWr,fw,J5e,lWr,iWr,ioe,dWr,cWr,fWr,mw,Y5e,mWr,gWr,doe,hWr,pWr,_Wr,gw,K5e,uWr,bWr,coe,vWr,FWr,TWr,hw,Z5e,MWr,EWr,foe,CWr,wWr,AWr,pw,ewe,LWr,yWr,moe,xWr,$Wr,kWr,_w,owe,SWr,RWr,goe,PWr,BWr,IWr,uw,Hze,sf,bw,rwe,x$,NWr,twe,qWr,Uze,vr,$$,jWr,lf,DWr,hoe,GWr,OWr,poe,VWr,XWr,zWr,k$,QWr,awe,WWr,HWr,UWr,Yt,S$,JWr,nwe,YWr,KWr,df,ZWr,swe,eHr,oHr,_oe,rHr,tHr,aHr,vw,nHr,Wr,R$,sHr,lwe,lHr,iHr,wn,dHr,iwe,cHr,fHr,dwe,mHr,gHr,cwe,hHr,pHr,_Hr,ke,Fw,fwe,uHr,bHr,uoe,vHr,FHr,THr,Tw,mwe,MHr,EHr,boe,CHr,wHr,AHr,Mw,gwe,LHr,yHr,voe,xHr,$Hr,kHr,Ew,hwe,SHr,RHr,Foe,PHr,BHr,IHr,Cw,pwe,NHr,qHr,Toe,jHr,DHr,GHr,ww,_we,OHr,VHr,Moe,XHr,zHr,QHr,Aw,uwe,WHr,HHr,Eoe,UHr,JHr,YHr,Lw,bwe,KHr,ZHr,Coe,eUr,oUr,rUr,yw,vwe,tUr,aUr,woe,nUr,sUr,lUr,xw,Fwe,iUr,dUr,Aoe,cUr,fUr,mUr,$w,Jze,cf,kw,Twe,P$,gUr,Mwe,hUr,Yze,Fr,B$,pUr,ff,_Ur,Loe,uUr,bUr,yoe,vUr,FUr,TUr,I$,MUr,Ewe,EUr,CUr,wUr,Kt,N$,AUr,Cwe,LUr,yUr,mf,xUr,wwe,$Ur,kUr,xoe,SUr,RUr,PUr,Sw,BUr,Hr,q$,IUr,Awe,NUr,qUr,An,jUr,Lwe,DUr,GUr,ywe,OUr,VUr,xwe,XUr,zUr,QUr,Se,Rw,$we,WUr,HUr,$oe,UUr,JUr,YUr,Pw,kwe,KUr,ZUr,koe,eJr,oJr,rJr,Bw,Swe,tJr,aJr,Soe,nJr,sJr,lJr,Iw,Rwe,iJr,dJr,Roe,cJr,fJr,mJr,Nw,Pwe,gJr,hJr,Poe,pJr,_Jr,uJr,qw,Bwe,bJr,vJr,Boe,FJr,TJr,MJr,jw,Iwe,EJr,CJr,Ioe,wJr,AJr,LJr,Dw,Nwe,yJr,xJr,Noe,$Jr,kJr,SJr,Gw,qwe,RJr,PJr,qoe,BJr,IJr,NJr,Ow,jwe,qJr,jJr,joe,DJr,GJr,OJr,Vw,Kze,gf,Xw,Dwe,j$,VJr,Gwe,XJr,Zze,Tr,D$,zJr,hf,QJr,Doe,WJr,HJr,Goe,UJr,JJr,YJr,G$,KJr,Owe,ZJr,eYr,oYr,Zt,O$,rYr,Vwe,tYr,aYr,pf,nYr,Xwe,sYr,lYr,Ooe,iYr,dYr,cYr,zw,fYr,Ur,V$,mYr,zwe,gYr,hYr,Ln,pYr,Qwe,_Yr,uYr,Wwe,bYr,vYr,Hwe,FYr,TYr,MYr,Re,Qw,Uwe,EYr,CYr,Voe,wYr,AYr,LYr,Ww,Jwe,yYr,xYr,Xoe,$Yr,kYr,SYr,Hw,Ywe,RYr,PYr,zoe,BYr,IYr,NYr,Uw,Kwe,qYr,jYr,Qoe,DYr,GYr,OYr,Jw,Zwe,VYr,XYr,Woe,zYr,QYr,WYr,Yw,eAe,HYr,UYr,Hoe,JYr,YYr,KYr,Kw,oAe,ZYr,eKr,Uoe,oKr,rKr,tKr,Zw,rAe,aKr,nKr,Joe,sKr,lKr,iKr,eA,tAe,dKr,cKr,Yoe,fKr,mKr,gKr,oA,aAe,hKr,pKr,Koe,_Kr,uKr,bKr,rA,eQe,_f,tA,nAe,X$,vKr,sAe,FKr,oQe,Mr,z$,TKr,uf,MKr,Zoe,EKr,CKr,ere,wKr,AKr,LKr,Q$,yKr,lAe,xKr,$Kr,kKr,ea,W$,SKr,iAe,RKr,PKr,bf,BKr,dAe,IKr,NKr,ore,qKr,jKr,DKr,aA,GKr,Jr,H$,OKr,cAe,VKr,XKr,yn,zKr,fAe,QKr,WKr,mAe,HKr,UKr,gAe,JKr,YKr,KKr,Ve,nA,hAe,ZKr,eZr,rre,oZr,rZr,tZr,sA,pAe,aZr,nZr,tre,sZr,lZr,iZr,lA,_Ae,dZr,cZr,are,fZr,mZr,gZr,iA,uAe,hZr,pZr,nre,_Zr,uZr,bZr,dA,bAe,vZr,FZr,sre,TZr,MZr,EZr,cA,vAe,CZr,wZr,lre,AZr,LZr,yZr,fA,FAe,xZr,$Zr,ire,kZr,SZr,RZr,mA,TAe,PZr,BZr,dre,IZr,NZr,qZr,gA,rQe,vf,hA,MAe,U$,jZr,EAe,DZr,tQe,Er,J$,GZr,Ff,OZr,cre,VZr,XZr,fre,zZr,QZr,WZr,Y$,HZr,CAe,UZr,JZr,YZr,oa,K$,KZr,wAe,ZZr,eet,Tf,oet,AAe,ret,tet,mre,aet,net,set,pA,iet,Yr,Z$,det,LAe,cet,fet,xn,met,yAe,get,het,xAe,pet,_et,$Ae,uet,bet,vet,Xe,_A,kAe,Fet,Tet,gre,Met,Eet,Cet,uA,SAe,wet,Aet,hre,Let,yet,xet,bA,RAe,$et,ket,pre,Set,Ret,Pet,vA,PAe,Bet,Iet,_re,Net,qet,jet,FA,BAe,Det,Get,ure,Oet,Vet,Xet,TA,IAe,zet,Qet,bre,Wet,Het,Uet,MA,NAe,Jet,Yet,vre,Ket,Zet,eot,EA,qAe,oot,rot,Fre,tot,aot,not,CA,aQe,Mf,wA,jAe,ek,sot,DAe,lot,nQe,Cr,ok,iot,Ef,dot,Tre,cot,fot,Mre,mot,got,hot,rk,pot,GAe,_ot,uot,bot,ra,tk,vot,OAe,Fot,Tot,Cf,Mot,VAe,Eot,Cot,Ere,wot,Aot,Lot,AA,yot,Kr,ak,xot,XAe,$ot,kot,$n,Sot,zAe,Rot,Pot,QAe,Bot,Iot,WAe,Not,qot,jot,HAe,LA,UAe,Dot,Got,Cre,Oot,Vot,Xot,yA,sQe,wf,xA,JAe,nk,zot,YAe,Qot,lQe,wr,sk,Wot,Af,Hot,wre,Uot,Jot,Are,Yot,Kot,Zot,lk,ert,KAe,ort,rrt,trt,ta,ik,art,ZAe,nrt,srt,Lf,lrt,e6e,irt,drt,Lre,crt,frt,mrt,$A,grt,Zr,dk,hrt,o6e,prt,_rt,kn,urt,r6e,brt,vrt,t6e,Frt,Trt,a6e,Mrt,Ert,Crt,ck,kA,n6e,wrt,Art,yre,Lrt,yrt,xrt,SA,s6e,$rt,krt,xre,Srt,Rrt,Prt,RA,iQe,yf,PA,l6e,fk,Brt,i6e,Irt,dQe,Ar,mk,Nrt,xf,qrt,$re,jrt,Drt,kre,Grt,Ort,Vrt,gk,Xrt,d6e,zrt,Qrt,Wrt,aa,hk,Hrt,c6e,Urt,Jrt,$f,Yrt,f6e,Krt,Zrt,Sre,ett,ott,rtt,BA,ttt,et,pk,att,m6e,ntt,stt,Sn,ltt,g6e,itt,dtt,h6e,ctt,ftt,p6e,mtt,gtt,htt,_6e,IA,u6e,ptt,_tt,Rre,utt,btt,vtt,NA,cQe;return d=new te({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),sL=new te({}),lL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new Ftt({props:{warning:!0,$$slots:{default:[tWt]},$$scope:{ctx:$}}}),iL=new te({}),dL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/configuration_auto.py#L610"}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/configuration_auto.py#L633"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/configuration_auto.py#L756"}}),hL=new te({}),pL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/tokenization_auto.py#L403"}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18022/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),vL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/tokenization_auto.py#L616"}}),FL=new te({}),TL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18022/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_p=new Ftt({props:{$$slots:{default:[sWt]},$$scope:{ctx:$}}}),up=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),AL=new te({}),LL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/processing_auto.py#L89"}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/processing_auto.py#L103"}}),qp=new Ftt({props:{$$slots:{default:[iWt]},$$scope:{ctx:$}}}),jp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),kL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/processing_auto.py#L256"}}),SL=new te({}),RL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L782"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Op=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Qu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),NL=new te({}),qL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L789"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),OL=new te({}),VL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L804"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),k1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),WL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L811"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),vb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L818"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Tb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L827"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),iy=new te({}),dy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L872"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L879"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L865"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L836"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),yy=new te({}),xy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L843"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L888"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L927"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L854"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L934"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),Zy=new te({}),e9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L957"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),a9=new te({}),n9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L941"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),d9=new te({}),c9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L948"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),p9=new te({}),_9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L966"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),q8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),F9=new te({}),T9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L973"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),w9=new te({}),A9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L920"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),k9=new te({}),S9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L895"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),I9=new te({}),N9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L902"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),G9=new te({}),O9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_auto.py#L911"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),Q9=new te({}),W9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Y9=new te({}),K9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),rx=new te({}),tx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),lx=new te({}),ix=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),mx=new te({}),gx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),ux=new te({}),bx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Mx=new te({}),Ex=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),Lx=new te({}),yx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Sx=new te({}),Rx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),qx=new te({}),jx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),Vx=new te({}),Xx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),Hx=new te({}),Ux=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),Zx=new te({}),e$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),r$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),a$=new te({}),n$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),d$=new te({}),c$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomModel">FlaxBloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),h$=new te({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomForCausalLM">FlaxBloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),v$=new te({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),C$=new te({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),x$=new te({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L276"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),P$=new te({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L285"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),j$=new te({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),X$=new te({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L301"}}),W$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),U$=new te({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),ek=new te({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L317"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),nk=new te({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L326"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),fk=new te({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/modeling_flax_auto.py#L335"}}),hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18022/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18022/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18022/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),Li=o("Auto Classes"),Pf=l(),lt=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),rL=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Pn=a("a"),tL=o("AutoConfig"),Bn=o(", "),In=a("a"),aL=o("AutoModel"),ki=o(`, and
`),Nn=a("a"),nL=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Le=a("p"),NS=o("will create a model that is an instance of "),Ri=a("a"),qS=o("BertModel"),jS=o("."),wo=l(),Ra=a("p"),DS=o("There is one class of "),Nf=a("code"),GS=o("AutoModel"),FHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nXe=l(),Pi=a("h2"),qf=a("a"),yae=a("span"),F(sL.$$.fragment),THe=l(),xae=a("span"),MHe=o("Extending the Auto Classes"),sXe=l(),qn=a("p"),EHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=a("code"),CHe=o("NewModel"),wHe=o(", make sure you have a "),kae=a("code"),AHe=o("NewModelConfig"),LHe=o(` then you can add those to the auto
classes like this:`),lXe=l(),F(lL.$$.fragment),iXe=l(),OS=a("p"),yHe=o("You will then be able to use the auto classes like you would usually do!"),dXe=l(),F(jf.$$.fragment),cXe=l(),Bi=a("h2"),Df=a("a"),Sae=a("span"),F(iL.$$.fragment),xHe=l(),Rae=a("span"),$He=o("AutoConfig"),fXe=l(),Ao=a("div"),F(dL.$$.fragment),kHe=l(),cL=a("p"),SHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VS=a("a"),RHe=o("from_pretrained()"),PHe=o(" class method."),BHe=l(),fL=a("p"),IHe=o("This class cannot be instantiated directly using "),Pae=a("code"),NHe=o("__init__()"),qHe=o(" (throws an error)."),jHe=l(),Lr=a("div"),F(mL.$$.fragment),DHe=l(),Bae=a("p"),GHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),OHe=l(),Ii=a("p"),VHe=o("The configuration class to instantiate is selected based on the "),Iae=a("code"),XHe=o("model_type"),zHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nae=a("code"),QHe=o("pretrained_model_name_or_path"),WHe=o(":"),HHe=l(),A=a("ul"),Gf=a("li"),qae=a("strong"),UHe=o("albert"),JHe=o(" \u2014 "),XS=a("a"),YHe=o("AlbertConfig"),KHe=o(" (ALBERT model)"),ZHe=l(),Of=a("li"),jae=a("strong"),eUe=o("bart"),oUe=o(" \u2014 "),zS=a("a"),rUe=o("BartConfig"),tUe=o(" (BART model)"),aUe=l(),Vf=a("li"),Dae=a("strong"),nUe=o("beit"),sUe=o(" \u2014 "),QS=a("a"),lUe=o("BeitConfig"),iUe=o(" (BEiT model)"),dUe=l(),Xf=a("li"),Gae=a("strong"),cUe=o("bert"),fUe=o(" \u2014 "),WS=a("a"),mUe=o("BertConfig"),gUe=o(" (BERT model)"),hUe=l(),zf=a("li"),Oae=a("strong"),pUe=o("bert-generation"),_Ue=o(" \u2014 "),HS=a("a"),uUe=o("BertGenerationConfig"),bUe=o(" (Bert Generation model)"),vUe=l(),Qf=a("li"),Vae=a("strong"),FUe=o("big_bird"),TUe=o(" \u2014 "),US=a("a"),MUe=o("BigBirdConfig"),EUe=o(" (BigBird model)"),CUe=l(),Wf=a("li"),Xae=a("strong"),wUe=o("bigbird_pegasus"),AUe=o(" \u2014 "),JS=a("a"),LUe=o("BigBirdPegasusConfig"),yUe=o(" (BigBird-Pegasus model)"),xUe=l(),Hf=a("li"),zae=a("strong"),$Ue=o("blenderbot"),kUe=o(" \u2014 "),YS=a("a"),SUe=o("BlenderbotConfig"),RUe=o(" (Blenderbot model)"),PUe=l(),Uf=a("li"),Qae=a("strong"),BUe=o("blenderbot-small"),IUe=o(" \u2014 "),KS=a("a"),NUe=o("BlenderbotSmallConfig"),qUe=o(" (BlenderbotSmall model)"),jUe=l(),Jf=a("li"),Wae=a("strong"),DUe=o("bloom"),GUe=o(" \u2014 "),ZS=a("a"),OUe=o("BloomConfig"),VUe=o(" (BLOOM model)"),XUe=l(),Yf=a("li"),Hae=a("strong"),zUe=o("camembert"),QUe=o(" \u2014 "),eR=a("a"),WUe=o("CamembertConfig"),HUe=o(" (CamemBERT model)"),UUe=l(),Kf=a("li"),Uae=a("strong"),JUe=o("canine"),YUe=o(" \u2014 "),oR=a("a"),KUe=o("CanineConfig"),ZUe=o(" (CANINE model)"),eJe=l(),Zf=a("li"),Jae=a("strong"),oJe=o("clip"),rJe=o(" \u2014 "),rR=a("a"),tJe=o("CLIPConfig"),aJe=o(" (CLIP model)"),nJe=l(),em=a("li"),Yae=a("strong"),sJe=o("codegen"),lJe=o(" \u2014 "),tR=a("a"),iJe=o("CodeGenConfig"),dJe=o(" (CodeGen model)"),cJe=l(),om=a("li"),Kae=a("strong"),fJe=o("convbert"),mJe=o(" \u2014 "),aR=a("a"),gJe=o("ConvBertConfig"),hJe=o(" (ConvBERT model)"),pJe=l(),rm=a("li"),Zae=a("strong"),_Je=o("convnext"),uJe=o(" \u2014 "),nR=a("a"),bJe=o("ConvNextConfig"),vJe=o(" (ConvNeXT model)"),FJe=l(),tm=a("li"),ene=a("strong"),TJe=o("ctrl"),MJe=o(" \u2014 "),sR=a("a"),EJe=o("CTRLConfig"),CJe=o(" (CTRL model)"),wJe=l(),am=a("li"),one=a("strong"),AJe=o("cvt"),LJe=o(" \u2014 "),lR=a("a"),yJe=o("CvtConfig"),xJe=o(" (CvT model)"),$Je=l(),nm=a("li"),rne=a("strong"),kJe=o("data2vec-audio"),SJe=o(" \u2014 "),iR=a("a"),RJe=o("Data2VecAudioConfig"),PJe=o(" (Data2VecAudio model)"),BJe=l(),sm=a("li"),tne=a("strong"),IJe=o("data2vec-text"),NJe=o(" \u2014 "),dR=a("a"),qJe=o("Data2VecTextConfig"),jJe=o(" (Data2VecText model)"),DJe=l(),lm=a("li"),ane=a("strong"),GJe=o("data2vec-vision"),OJe=o(" \u2014 "),cR=a("a"),VJe=o("Data2VecVisionConfig"),XJe=o(" (Data2VecVision model)"),zJe=l(),im=a("li"),nne=a("strong"),QJe=o("deberta"),WJe=o(" \u2014 "),fR=a("a"),HJe=o("DebertaConfig"),UJe=o(" (DeBERTa model)"),JJe=l(),dm=a("li"),sne=a("strong"),YJe=o("deberta-v2"),KJe=o(" \u2014 "),mR=a("a"),ZJe=o("DebertaV2Config"),eYe=o(" (DeBERTa-v2 model)"),oYe=l(),cm=a("li"),lne=a("strong"),rYe=o("decision_transformer"),tYe=o(" \u2014 "),gR=a("a"),aYe=o("DecisionTransformerConfig"),nYe=o(" (Decision Transformer model)"),sYe=l(),fm=a("li"),ine=a("strong"),lYe=o("deit"),iYe=o(" \u2014 "),hR=a("a"),dYe=o("DeiTConfig"),cYe=o(" (DeiT model)"),fYe=l(),mm=a("li"),dne=a("strong"),mYe=o("detr"),gYe=o(" \u2014 "),pR=a("a"),hYe=o("DetrConfig"),pYe=o(" (DETR model)"),_Ye=l(),gm=a("li"),cne=a("strong"),uYe=o("distilbert"),bYe=o(" \u2014 "),_R=a("a"),vYe=o("DistilBertConfig"),FYe=o(" (DistilBERT model)"),TYe=l(),hm=a("li"),fne=a("strong"),MYe=o("dpr"),EYe=o(" \u2014 "),uR=a("a"),CYe=o("DPRConfig"),wYe=o(" (DPR model)"),AYe=l(),pm=a("li"),mne=a("strong"),LYe=o("dpt"),yYe=o(" \u2014 "),bR=a("a"),xYe=o("DPTConfig"),$Ye=o(" (DPT model)"),kYe=l(),_m=a("li"),gne=a("strong"),SYe=o("electra"),RYe=o(" \u2014 "),vR=a("a"),PYe=o("ElectraConfig"),BYe=o(" (ELECTRA model)"),IYe=l(),um=a("li"),hne=a("strong"),NYe=o("encoder-decoder"),qYe=o(" \u2014 "),FR=a("a"),jYe=o("EncoderDecoderConfig"),DYe=o(" (Encoder decoder model)"),GYe=l(),bm=a("li"),pne=a("strong"),OYe=o("flaubert"),VYe=o(" \u2014 "),TR=a("a"),XYe=o("FlaubertConfig"),zYe=o(" (FlauBERT model)"),QYe=l(),vm=a("li"),_ne=a("strong"),WYe=o("flava"),HYe=o(" \u2014 "),MR=a("a"),UYe=o("FlavaConfig"),JYe=o(" (FLAVA model)"),YYe=l(),Fm=a("li"),une=a("strong"),KYe=o("fnet"),ZYe=o(" \u2014 "),ER=a("a"),eKe=o("FNetConfig"),oKe=o(" (FNet model)"),rKe=l(),Tm=a("li"),bne=a("strong"),tKe=o("fsmt"),aKe=o(" \u2014 "),CR=a("a"),nKe=o("FSMTConfig"),sKe=o(" (FairSeq Machine-Translation model)"),lKe=l(),Mm=a("li"),vne=a("strong"),iKe=o("funnel"),dKe=o(" \u2014 "),wR=a("a"),cKe=o("FunnelConfig"),fKe=o(" (Funnel Transformer model)"),mKe=l(),Em=a("li"),Fne=a("strong"),gKe=o("glpn"),hKe=o(" \u2014 "),AR=a("a"),pKe=o("GLPNConfig"),_Ke=o(" (GLPN model)"),uKe=l(),Cm=a("li"),Tne=a("strong"),bKe=o("gpt2"),vKe=o(" \u2014 "),LR=a("a"),FKe=o("GPT2Config"),TKe=o(" (OpenAI GPT-2 model)"),MKe=l(),wm=a("li"),Mne=a("strong"),EKe=o("gpt_neo"),CKe=o(" \u2014 "),yR=a("a"),wKe=o("GPTNeoConfig"),AKe=o(" (GPT Neo model)"),LKe=l(),Am=a("li"),Ene=a("strong"),yKe=o("gpt_neox"),xKe=o(" \u2014 "),xR=a("a"),$Ke=o("GPTNeoXConfig"),kKe=o(" (GPT NeoX model)"),SKe=l(),Lm=a("li"),Cne=a("strong"),RKe=o("gptj"),PKe=o(" \u2014 "),$R=a("a"),BKe=o("GPTJConfig"),IKe=o(" (GPT-J model)"),NKe=l(),ym=a("li"),wne=a("strong"),qKe=o("groupvit"),jKe=o(" \u2014 "),kR=a("a"),DKe=o("GroupViTConfig"),GKe=o(" (GroupViT model)"),OKe=l(),xm=a("li"),Ane=a("strong"),VKe=o("hubert"),XKe=o(" \u2014 "),SR=a("a"),zKe=o("HubertConfig"),QKe=o(" (Hubert model)"),WKe=l(),$m=a("li"),Lne=a("strong"),HKe=o("ibert"),UKe=o(" \u2014 "),RR=a("a"),JKe=o("IBertConfig"),YKe=o(" (I-BERT model)"),KKe=l(),km=a("li"),yne=a("strong"),ZKe=o("imagegpt"),eZe=o(" \u2014 "),PR=a("a"),oZe=o("ImageGPTConfig"),rZe=o(" (ImageGPT model)"),tZe=l(),Sm=a("li"),xne=a("strong"),aZe=o("layoutlm"),nZe=o(" \u2014 "),BR=a("a"),sZe=o("LayoutLMConfig"),lZe=o(" (LayoutLM model)"),iZe=l(),Rm=a("li"),$ne=a("strong"),dZe=o("layoutlmv2"),cZe=o(" \u2014 "),IR=a("a"),fZe=o("LayoutLMv2Config"),mZe=o(" (LayoutLMv2 model)"),gZe=l(),Pm=a("li"),kne=a("strong"),hZe=o("layoutlmv3"),pZe=o(" \u2014 "),NR=a("a"),_Ze=o("LayoutLMv3Config"),uZe=o(" (LayoutLMv3 model)"),bZe=l(),Bm=a("li"),Sne=a("strong"),vZe=o("led"),FZe=o(" \u2014 "),qR=a("a"),TZe=o("LEDConfig"),MZe=o(" (LED model)"),EZe=l(),Im=a("li"),Rne=a("strong"),CZe=o("levit"),wZe=o(" \u2014 "),jR=a("a"),AZe=o("LevitConfig"),LZe=o(" (LeViT model)"),yZe=l(),Nm=a("li"),Pne=a("strong"),xZe=o("longformer"),$Ze=o(" \u2014 "),DR=a("a"),kZe=o("LongformerConfig"),SZe=o(" (Longformer model)"),RZe=l(),qm=a("li"),Bne=a("strong"),PZe=o("longt5"),BZe=o(" \u2014 "),GR=a("a"),IZe=o("LongT5Config"),NZe=o(" (LongT5 model)"),qZe=l(),jm=a("li"),Ine=a("strong"),jZe=o("luke"),DZe=o(" \u2014 "),OR=a("a"),GZe=o("LukeConfig"),OZe=o(" (LUKE model)"),VZe=l(),Dm=a("li"),Nne=a("strong"),XZe=o("lxmert"),zZe=o(" \u2014 "),VR=a("a"),QZe=o("LxmertConfig"),WZe=o(" (LXMERT model)"),HZe=l(),Gm=a("li"),qne=a("strong"),UZe=o("m2m_100"),JZe=o(" \u2014 "),XR=a("a"),YZe=o("M2M100Config"),KZe=o(" (M2M100 model)"),ZZe=l(),Om=a("li"),jne=a("strong"),eeo=o("marian"),oeo=o(" \u2014 "),zR=a("a"),reo=o("MarianConfig"),teo=o(" (Marian model)"),aeo=l(),Vm=a("li"),Dne=a("strong"),neo=o("maskformer"),seo=o(" \u2014 "),QR=a("a"),leo=o("MaskFormerConfig"),ieo=o(" (MaskFormer model)"),deo=l(),Xm=a("li"),Gne=a("strong"),ceo=o("mbart"),feo=o(" \u2014 "),WR=a("a"),meo=o("MBartConfig"),geo=o(" (mBART model)"),heo=l(),zm=a("li"),One=a("strong"),peo=o("mctct"),_eo=o(" \u2014 "),HR=a("a"),ueo=o("MCTCTConfig"),beo=o(" (M-CTC-T model)"),veo=l(),Qm=a("li"),Vne=a("strong"),Feo=o("megatron-bert"),Teo=o(" \u2014 "),UR=a("a"),Meo=o("MegatronBertConfig"),Eeo=o(" (Megatron-BERT model)"),Ceo=l(),Wm=a("li"),Xne=a("strong"),weo=o("mobilebert"),Aeo=o(" \u2014 "),JR=a("a"),Leo=o("MobileBertConfig"),yeo=o(" (MobileBERT model)"),xeo=l(),Hm=a("li"),zne=a("strong"),$eo=o("mobilevit"),keo=o(" \u2014 "),YR=a("a"),Seo=o("MobileViTConfig"),Reo=o(" (MobileViT model)"),Peo=l(),Um=a("li"),Qne=a("strong"),Beo=o("mpnet"),Ieo=o(" \u2014 "),KR=a("a"),Neo=o("MPNetConfig"),qeo=o(" (MPNet model)"),jeo=l(),Jm=a("li"),Wne=a("strong"),Deo=o("mt5"),Geo=o(" \u2014 "),ZR=a("a"),Oeo=o("MT5Config"),Veo=o(" (MT5 model)"),Xeo=l(),Ym=a("li"),Hne=a("strong"),zeo=o("mvp"),Qeo=o(" \u2014 "),eP=a("a"),Weo=o("MvpConfig"),Heo=o(" (MVP model)"),Ueo=l(),Km=a("li"),Une=a("strong"),Jeo=o("nezha"),Yeo=o(" \u2014 "),oP=a("a"),Keo=o("NezhaConfig"),Zeo=o(" (Nezha model)"),eoo=l(),Zm=a("li"),Jne=a("strong"),ooo=o("nystromformer"),roo=o(" \u2014 "),rP=a("a"),too=o("NystromformerConfig"),aoo=o(" (Nystr\xF6mformer model)"),noo=l(),eg=a("li"),Yne=a("strong"),soo=o("openai-gpt"),loo=o(" \u2014 "),tP=a("a"),ioo=o("OpenAIGPTConfig"),doo=o(" (OpenAI GPT model)"),coo=l(),og=a("li"),Kne=a("strong"),foo=o("opt"),moo=o(" \u2014 "),aP=a("a"),goo=o("OPTConfig"),hoo=o(" (OPT model)"),poo=l(),rg=a("li"),Zne=a("strong"),_oo=o("pegasus"),uoo=o(" \u2014 "),nP=a("a"),boo=o("PegasusConfig"),voo=o(" (Pegasus model)"),Foo=l(),tg=a("li"),ese=a("strong"),Too=o("perceiver"),Moo=o(" \u2014 "),sP=a("a"),Eoo=o("PerceiverConfig"),Coo=o(" (Perceiver model)"),woo=l(),ag=a("li"),ose=a("strong"),Aoo=o("plbart"),Loo=o(" \u2014 "),lP=a("a"),yoo=o("PLBartConfig"),xoo=o(" (PLBart model)"),$oo=l(),ng=a("li"),rse=a("strong"),koo=o("poolformer"),Soo=o(" \u2014 "),iP=a("a"),Roo=o("PoolFormerConfig"),Poo=o(" (PoolFormer model)"),Boo=l(),sg=a("li"),tse=a("strong"),Ioo=o("prophetnet"),Noo=o(" \u2014 "),dP=a("a"),qoo=o("ProphetNetConfig"),joo=o(" (ProphetNet model)"),Doo=l(),lg=a("li"),ase=a("strong"),Goo=o("qdqbert"),Ooo=o(" \u2014 "),cP=a("a"),Voo=o("QDQBertConfig"),Xoo=o(" (QDQBert model)"),zoo=l(),ig=a("li"),nse=a("strong"),Qoo=o("rag"),Woo=o(" \u2014 "),fP=a("a"),Hoo=o("RagConfig"),Uoo=o(" (RAG model)"),Joo=l(),dg=a("li"),sse=a("strong"),Yoo=o("realm"),Koo=o(" \u2014 "),mP=a("a"),Zoo=o("RealmConfig"),ero=o(" (REALM model)"),oro=l(),cg=a("li"),lse=a("strong"),rro=o("reformer"),tro=o(" \u2014 "),gP=a("a"),aro=o("ReformerConfig"),nro=o(" (Reformer model)"),sro=l(),fg=a("li"),ise=a("strong"),lro=o("regnet"),iro=o(" \u2014 "),hP=a("a"),dro=o("RegNetConfig"),cro=o(" (RegNet model)"),fro=l(),mg=a("li"),dse=a("strong"),mro=o("rembert"),gro=o(" \u2014 "),pP=a("a"),hro=o("RemBertConfig"),pro=o(" (RemBERT model)"),_ro=l(),gg=a("li"),cse=a("strong"),uro=o("resnet"),bro=o(" \u2014 "),_P=a("a"),vro=o("ResNetConfig"),Fro=o(" (ResNet model)"),Tro=l(),hg=a("li"),fse=a("strong"),Mro=o("retribert"),Ero=o(" \u2014 "),uP=a("a"),Cro=o("RetriBertConfig"),wro=o(" (RetriBERT model)"),Aro=l(),pg=a("li"),mse=a("strong"),Lro=o("roberta"),yro=o(" \u2014 "),bP=a("a"),xro=o("RobertaConfig"),$ro=o(" (RoBERTa model)"),kro=l(),_g=a("li"),gse=a("strong"),Sro=o("roformer"),Rro=o(" \u2014 "),vP=a("a"),Pro=o("RoFormerConfig"),Bro=o(" (RoFormer model)"),Iro=l(),ug=a("li"),hse=a("strong"),Nro=o("segformer"),qro=o(" \u2014 "),FP=a("a"),jro=o("SegformerConfig"),Dro=o(" (SegFormer model)"),Gro=l(),bg=a("li"),pse=a("strong"),Oro=o("sew"),Vro=o(" \u2014 "),TP=a("a"),Xro=o("SEWConfig"),zro=o(" (SEW model)"),Qro=l(),vg=a("li"),_se=a("strong"),Wro=o("sew-d"),Hro=o(" \u2014 "),MP=a("a"),Uro=o("SEWDConfig"),Jro=o(" (SEW-D model)"),Yro=l(),Fg=a("li"),use=a("strong"),Kro=o("speech-encoder-decoder"),Zro=o(" \u2014 "),EP=a("a"),eto=o("SpeechEncoderDecoderConfig"),oto=o(" (Speech Encoder decoder model)"),rto=l(),Tg=a("li"),bse=a("strong"),tto=o("speech_to_text"),ato=o(" \u2014 "),CP=a("a"),nto=o("Speech2TextConfig"),sto=o(" (Speech2Text model)"),lto=l(),Mg=a("li"),vse=a("strong"),ito=o("speech_to_text_2"),dto=o(" \u2014 "),wP=a("a"),cto=o("Speech2Text2Config"),fto=o(" (Speech2Text2 model)"),mto=l(),Eg=a("li"),Fse=a("strong"),gto=o("splinter"),hto=o(" \u2014 "),AP=a("a"),pto=o("SplinterConfig"),_to=o(" (Splinter model)"),uto=l(),Cg=a("li"),Tse=a("strong"),bto=o("squeezebert"),vto=o(" \u2014 "),LP=a("a"),Fto=o("SqueezeBertConfig"),Tto=o(" (SqueezeBERT model)"),Mto=l(),wg=a("li"),Mse=a("strong"),Eto=o("swin"),Cto=o(" \u2014 "),yP=a("a"),wto=o("SwinConfig"),Ato=o(" (Swin Transformer model)"),Lto=l(),Ag=a("li"),Ese=a("strong"),yto=o("t5"),xto=o(" \u2014 "),xP=a("a"),$to=o("T5Config"),kto=o(" (T5 model)"),Sto=l(),Lg=a("li"),Cse=a("strong"),Rto=o("tapas"),Pto=o(" \u2014 "),$P=a("a"),Bto=o("TapasConfig"),Ito=o(" (TAPAS model)"),Nto=l(),yg=a("li"),wse=a("strong"),qto=o("trajectory_transformer"),jto=o(" \u2014 "),kP=a("a"),Dto=o("TrajectoryTransformerConfig"),Gto=o(" (Trajectory Transformer model)"),Oto=l(),xg=a("li"),Ase=a("strong"),Vto=o("transfo-xl"),Xto=o(" \u2014 "),SP=a("a"),zto=o("TransfoXLConfig"),Qto=o(" (Transformer-XL model)"),Wto=l(),$g=a("li"),Lse=a("strong"),Hto=o("trocr"),Uto=o(" \u2014 "),RP=a("a"),Jto=o("TrOCRConfig"),Yto=o(" (TrOCR model)"),Kto=l(),kg=a("li"),yse=a("strong"),Zto=o("unispeech"),eao=o(" \u2014 "),PP=a("a"),oao=o("UniSpeechConfig"),rao=o(" (UniSpeech model)"),tao=l(),Sg=a("li"),xse=a("strong"),aao=o("unispeech-sat"),nao=o(" \u2014 "),BP=a("a"),sao=o("UniSpeechSatConfig"),lao=o(" (UniSpeechSat model)"),iao=l(),Rg=a("li"),$se=a("strong"),dao=o("van"),cao=o(" \u2014 "),IP=a("a"),fao=o("VanConfig"),mao=o(" (VAN model)"),gao=l(),Pg=a("li"),kse=a("strong"),hao=o("vilt"),pao=o(" \u2014 "),NP=a("a"),_ao=o("ViltConfig"),uao=o(" (ViLT model)"),bao=l(),Bg=a("li"),Sse=a("strong"),vao=o("vision-encoder-decoder"),Fao=o(" \u2014 "),qP=a("a"),Tao=o("VisionEncoderDecoderConfig"),Mao=o(" (Vision Encoder decoder model)"),Eao=l(),Ig=a("li"),Rse=a("strong"),Cao=o("vision-text-dual-encoder"),wao=o(" \u2014 "),jP=a("a"),Aao=o("VisionTextDualEncoderConfig"),Lao=o(" (VisionTextDualEncoder model)"),yao=l(),Ng=a("li"),Pse=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),DP=a("a"),kao=o("VisualBertConfig"),Sao=o(" (VisualBERT model)"),Rao=l(),qg=a("li"),Bse=a("strong"),Pao=o("vit"),Bao=o(" \u2014 "),GP=a("a"),Iao=o("ViTConfig"),Nao=o(" (ViT model)"),qao=l(),jg=a("li"),Ise=a("strong"),jao=o("vit_mae"),Dao=o(" \u2014 "),OP=a("a"),Gao=o("ViTMAEConfig"),Oao=o(" (ViTMAE model)"),Vao=l(),Dg=a("li"),Nse=a("strong"),Xao=o("wav2vec2"),zao=o(" \u2014 "),VP=a("a"),Qao=o("Wav2Vec2Config"),Wao=o(" (Wav2Vec2 model)"),Hao=l(),Gg=a("li"),qse=a("strong"),Uao=o("wav2vec2-conformer"),Jao=o(" \u2014 "),XP=a("a"),Yao=o("Wav2Vec2ConformerConfig"),Kao=o(" (Wav2Vec2-Conformer model)"),Zao=l(),Og=a("li"),jse=a("strong"),eno=o("wavlm"),ono=o(" \u2014 "),zP=a("a"),rno=o("WavLMConfig"),tno=o(" (WavLM model)"),ano=l(),Vg=a("li"),Dse=a("strong"),nno=o("xglm"),sno=o(" \u2014 "),QP=a("a"),lno=o("XGLMConfig"),ino=o(" (XGLM model)"),dno=l(),Xg=a("li"),Gse=a("strong"),cno=o("xlm"),fno=o(" \u2014 "),WP=a("a"),mno=o("XLMConfig"),gno=o(" (XLM model)"),hno=l(),zg=a("li"),Ose=a("strong"),pno=o("xlm-prophetnet"),_no=o(" \u2014 "),HP=a("a"),uno=o("XLMProphetNetConfig"),bno=o(" (XLM-ProphetNet model)"),vno=l(),Qg=a("li"),Vse=a("strong"),Fno=o("xlm-roberta"),Tno=o(" \u2014 "),UP=a("a"),Mno=o("XLMRobertaConfig"),Eno=o(" (XLM-RoBERTa model)"),Cno=l(),Wg=a("li"),Xse=a("strong"),wno=o("xlm-roberta-xl"),Ano=o(" \u2014 "),JP=a("a"),Lno=o("XLMRobertaXLConfig"),yno=o(" (XLM-RoBERTa-XL model)"),xno=l(),Hg=a("li"),zse=a("strong"),$no=o("xlnet"),kno=o(" \u2014 "),YP=a("a"),Sno=o("XLNetConfig"),Rno=o(" (XLNet model)"),Pno=l(),Ug=a("li"),Qse=a("strong"),Bno=o("yolos"),Ino=o(" \u2014 "),KP=a("a"),Nno=o("YolosConfig"),qno=o(" (YOLOS model)"),jno=l(),Jg=a("li"),Wse=a("strong"),Dno=o("yoso"),Gno=o(" \u2014 "),ZP=a("a"),Ono=o("YosoConfig"),Vno=o(" (YOSO model)"),Xno=l(),F(Yg.$$.fragment),zno=l(),Kg=a("div"),F(gL.$$.fragment),Qno=l(),Hse=a("p"),Wno=o("Register a new configuration for this class."),mXe=l(),Ni=a("h2"),Zg=a("a"),Use=a("span"),F(hL.$$.fragment),Hno=l(),Jse=a("span"),Uno=o("AutoTokenizer"),gXe=l(),Lo=a("div"),F(pL.$$.fragment),Jno=l(),_L=a("p"),Yno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),Kno=o("AutoTokenizer.from_pretrained()"),Zno=o(" class method."),eso=l(),uL=a("p"),oso=o("This class cannot be instantiated directly using "),Yse=a("code"),rso=o("__init__()"),tso=o(" (throws an error)."),aso=l(),yr=a("div"),F(bL.$$.fragment),nso=l(),Kse=a("p"),sso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lso=l(),Pa=a("p"),iso=o("The tokenizer class to instantiate is selected based on the "),Zse=a("code"),dso=o("model_type"),cso=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),fso=o("pretrained_model_name_or_path"),mso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),gso=o("pretrained_model_name_or_path"),hso=o(":"),pso=l(),k=a("ul"),jn=a("li"),rle=a("strong"),_so=o("albert"),uso=o(" \u2014 "),oB=a("a"),bso=o("AlbertTokenizer"),vso=o(" or "),rB=a("a"),Fso=o("AlbertTokenizerFast"),Tso=o(" (ALBERT model)"),Mso=l(),Dn=a("li"),tle=a("strong"),Eso=o("bart"),Cso=o(" \u2014 "),tB=a("a"),wso=o("BartTokenizer"),Aso=o(" or "),aB=a("a"),Lso=o("BartTokenizerFast"),yso=o(" (BART model)"),xso=l(),Gn=a("li"),ale=a("strong"),$so=o("barthez"),kso=o(" \u2014 "),nB=a("a"),Sso=o("BarthezTokenizer"),Rso=o(" or "),sB=a("a"),Pso=o("BarthezTokenizerFast"),Bso=o(" (BARThez model)"),Iso=l(),eh=a("li"),nle=a("strong"),Nso=o("bartpho"),qso=o(" \u2014 "),lB=a("a"),jso=o("BartphoTokenizer"),Dso=o(" (BARTpho model)"),Gso=l(),On=a("li"),sle=a("strong"),Oso=o("bert"),Vso=o(" \u2014 "),iB=a("a"),Xso=o("BertTokenizer"),zso=o(" or "),dB=a("a"),Qso=o("BertTokenizerFast"),Wso=o(" (BERT model)"),Hso=l(),oh=a("li"),lle=a("strong"),Uso=o("bert-generation"),Jso=o(" \u2014 "),cB=a("a"),Yso=o("BertGenerationTokenizer"),Kso=o(" (Bert Generation model)"),Zso=l(),rh=a("li"),ile=a("strong"),elo=o("bert-japanese"),olo=o(" \u2014 "),fB=a("a"),rlo=o("BertJapaneseTokenizer"),tlo=o(" (BertJapanese model)"),alo=l(),th=a("li"),dle=a("strong"),nlo=o("bertweet"),slo=o(" \u2014 "),mB=a("a"),llo=o("BertweetTokenizer"),ilo=o(" (BERTweet model)"),dlo=l(),Vn=a("li"),cle=a("strong"),clo=o("big_bird"),flo=o(" \u2014 "),gB=a("a"),mlo=o("BigBirdTokenizer"),glo=o(" or "),hB=a("a"),hlo=o("BigBirdTokenizerFast"),plo=o(" (BigBird model)"),_lo=l(),Xn=a("li"),fle=a("strong"),ulo=o("bigbird_pegasus"),blo=o(" \u2014 "),pB=a("a"),vlo=o("PegasusTokenizer"),Flo=o(" or "),_B=a("a"),Tlo=o("PegasusTokenizerFast"),Mlo=o(" (BigBird-Pegasus model)"),Elo=l(),zn=a("li"),mle=a("strong"),Clo=o("blenderbot"),wlo=o(" \u2014 "),uB=a("a"),Alo=o("BlenderbotTokenizer"),Llo=o(" or "),bB=a("a"),ylo=o("BlenderbotTokenizerFast"),xlo=o(" (Blenderbot model)"),$lo=l(),ah=a("li"),gle=a("strong"),klo=o("blenderbot-small"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("BlenderbotSmallTokenizer"),Plo=o(" (BlenderbotSmall model)"),Blo=l(),nh=a("li"),hle=a("strong"),Ilo=o("bloom"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("BloomTokenizerFast"),jlo=o(" (BLOOM model)"),Dlo=l(),sh=a("li"),ple=a("strong"),Glo=o("byt5"),Olo=o(" \u2014 "),TB=a("a"),Vlo=o("ByT5Tokenizer"),Xlo=o(" (ByT5 model)"),zlo=l(),Qn=a("li"),_le=a("strong"),Qlo=o("camembert"),Wlo=o(" \u2014 "),MB=a("a"),Hlo=o("CamembertTokenizer"),Ulo=o(" or "),EB=a("a"),Jlo=o("CamembertTokenizerFast"),Ylo=o(" (CamemBERT model)"),Klo=l(),lh=a("li"),ule=a("strong"),Zlo=o("canine"),eio=o(" \u2014 "),CB=a("a"),oio=o("CanineTokenizer"),rio=o(" (CANINE model)"),tio=l(),Wn=a("li"),ble=a("strong"),aio=o("clip"),nio=o(" \u2014 "),wB=a("a"),sio=o("CLIPTokenizer"),lio=o(" or "),AB=a("a"),iio=o("CLIPTokenizerFast"),dio=o(" (CLIP model)"),cio=l(),Hn=a("li"),vle=a("strong"),fio=o("codegen"),mio=o(" \u2014 "),LB=a("a"),gio=o("CodeGenTokenizer"),hio=o(" or "),yB=a("a"),pio=o("CodeGenTokenizerFast"),_io=o(" (CodeGen model)"),uio=l(),Un=a("li"),Fle=a("strong"),bio=o("convbert"),vio=o(" \u2014 "),xB=a("a"),Fio=o("ConvBertTokenizer"),Tio=o(" or "),$B=a("a"),Mio=o("ConvBertTokenizerFast"),Eio=o(" (ConvBERT model)"),Cio=l(),Jn=a("li"),Tle=a("strong"),wio=o("cpm"),Aio=o(" \u2014 "),kB=a("a"),Lio=o("CpmTokenizer"),yio=o(" or "),SB=a("a"),xio=o("CpmTokenizerFast"),$io=o(" (CPM model)"),kio=l(),ih=a("li"),Mle=a("strong"),Sio=o("ctrl"),Rio=o(" \u2014 "),RB=a("a"),Pio=o("CTRLTokenizer"),Bio=o(" (CTRL model)"),Iio=l(),Yn=a("li"),Ele=a("strong"),Nio=o("data2vec-text"),qio=o(" \u2014 "),PB=a("a"),jio=o("RobertaTokenizer"),Dio=o(" or "),BB=a("a"),Gio=o("RobertaTokenizerFast"),Oio=o(" (Data2VecText model)"),Vio=l(),Kn=a("li"),Cle=a("strong"),Xio=o("deberta"),zio=o(" \u2014 "),IB=a("a"),Qio=o("DebertaTokenizer"),Wio=o(" or "),NB=a("a"),Hio=o("DebertaTokenizerFast"),Uio=o(" (DeBERTa model)"),Jio=l(),Zn=a("li"),wle=a("strong"),Yio=o("deberta-v2"),Kio=o(" \u2014 "),qB=a("a"),Zio=o("DebertaV2Tokenizer"),edo=o(" or "),jB=a("a"),odo=o("DebertaV2TokenizerFast"),rdo=o(" (DeBERTa-v2 model)"),tdo=l(),es=a("li"),Ale=a("strong"),ado=o("distilbert"),ndo=o(" \u2014 "),DB=a("a"),sdo=o("DistilBertTokenizer"),ldo=o(" or "),GB=a("a"),ido=o("DistilBertTokenizerFast"),ddo=o(" (DistilBERT model)"),cdo=l(),os=a("li"),Lle=a("strong"),fdo=o("dpr"),mdo=o(" \u2014 "),OB=a("a"),gdo=o("DPRQuestionEncoderTokenizer"),hdo=o(" or "),VB=a("a"),pdo=o("DPRQuestionEncoderTokenizerFast"),_do=o(" (DPR model)"),udo=l(),rs=a("li"),yle=a("strong"),bdo=o("electra"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("ElectraTokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("ElectraTokenizerFast"),Edo=o(" (ELECTRA model)"),Cdo=l(),dh=a("li"),xle=a("strong"),wdo=o("flaubert"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("FlaubertTokenizer"),ydo=o(" (FlauBERT model)"),xdo=l(),ts=a("li"),$le=a("strong"),$do=o("fnet"),kdo=o(" \u2014 "),WB=a("a"),Sdo=o("FNetTokenizer"),Rdo=o(" or "),HB=a("a"),Pdo=o("FNetTokenizerFast"),Bdo=o(" (FNet model)"),Ido=l(),ch=a("li"),kle=a("strong"),Ndo=o("fsmt"),qdo=o(" \u2014 "),UB=a("a"),jdo=o("FSMTTokenizer"),Ddo=o(" (FairSeq Machine-Translation model)"),Gdo=l(),as=a("li"),Sle=a("strong"),Odo=o("funnel"),Vdo=o(" \u2014 "),JB=a("a"),Xdo=o("FunnelTokenizer"),zdo=o(" or "),YB=a("a"),Qdo=o("FunnelTokenizerFast"),Wdo=o(" (Funnel Transformer model)"),Hdo=l(),ns=a("li"),Rle=a("strong"),Udo=o("gpt2"),Jdo=o(" \u2014 "),KB=a("a"),Ydo=o("GPT2Tokenizer"),Kdo=o(" or "),ZB=a("a"),Zdo=o("GPT2TokenizerFast"),eco=o(" (OpenAI GPT-2 model)"),oco=l(),ss=a("li"),Ple=a("strong"),rco=o("gpt_neo"),tco=o(" \u2014 "),eI=a("a"),aco=o("GPT2Tokenizer"),nco=o(" or "),oI=a("a"),sco=o("GPT2TokenizerFast"),lco=o(" (GPT Neo model)"),ico=l(),fh=a("li"),Ble=a("strong"),dco=o("gpt_neox"),cco=o(" \u2014 "),rI=a("a"),fco=o("GPTNeoXTokenizerFast"),mco=o(" (GPT NeoX model)"),gco=l(),ls=a("li"),Ile=a("strong"),hco=o("gptj"),pco=o(" \u2014 "),tI=a("a"),_co=o("GPT2Tokenizer"),uco=o(" or "),aI=a("a"),bco=o("GPT2TokenizerFast"),vco=o(" (GPT-J model)"),Fco=l(),is=a("li"),Nle=a("strong"),Tco=o("groupvit"),Mco=o(" \u2014 "),nI=a("a"),Eco=o("CLIPTokenizer"),Cco=o(" or "),sI=a("a"),wco=o("CLIPTokenizerFast"),Aco=o(" (GroupViT model)"),Lco=l(),ds=a("li"),qle=a("strong"),yco=o("herbert"),xco=o(" \u2014 "),lI=a("a"),$co=o("HerbertTokenizer"),kco=o(" or "),iI=a("a"),Sco=o("HerbertTokenizerFast"),Rco=o(" (HerBERT model)"),Pco=l(),mh=a("li"),jle=a("strong"),Bco=o("hubert"),Ico=o(" \u2014 "),dI=a("a"),Nco=o("Wav2Vec2CTCTokenizer"),qco=o(" (Hubert model)"),jco=l(),cs=a("li"),Dle=a("strong"),Dco=o("ibert"),Gco=o(" \u2014 "),cI=a("a"),Oco=o("RobertaTokenizer"),Vco=o(" or "),fI=a("a"),Xco=o("RobertaTokenizerFast"),zco=o(" (I-BERT model)"),Qco=l(),fs=a("li"),Gle=a("strong"),Wco=o("layoutlm"),Hco=o(" \u2014 "),mI=a("a"),Uco=o("LayoutLMTokenizer"),Jco=o(" or "),gI=a("a"),Yco=o("LayoutLMTokenizerFast"),Kco=o(" (LayoutLM model)"),Zco=l(),ms=a("li"),Ole=a("strong"),efo=o("layoutlmv2"),ofo=o(" \u2014 "),hI=a("a"),rfo=o("LayoutLMv2Tokenizer"),tfo=o(" or "),pI=a("a"),afo=o("LayoutLMv2TokenizerFast"),nfo=o(" (LayoutLMv2 model)"),sfo=l(),gs=a("li"),Vle=a("strong"),lfo=o("layoutlmv3"),ifo=o(" \u2014 "),_I=a("a"),dfo=o("LayoutLMv3Tokenizer"),cfo=o(" or "),uI=a("a"),ffo=o("LayoutLMv3TokenizerFast"),mfo=o(" (LayoutLMv3 model)"),gfo=l(),hs=a("li"),Xle=a("strong"),hfo=o("layoutxlm"),pfo=o(" \u2014 "),bI=a("a"),_fo=o("LayoutXLMTokenizer"),ufo=o(" or "),vI=a("a"),bfo=o("LayoutXLMTokenizerFast"),vfo=o(" (LayoutXLM model)"),Ffo=l(),ps=a("li"),zle=a("strong"),Tfo=o("led"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("LEDTokenizer"),Cfo=o(" or "),TI=a("a"),wfo=o("LEDTokenizerFast"),Afo=o(" (LED model)"),Lfo=l(),_s=a("li"),Qle=a("strong"),yfo=o("longformer"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("LongformerTokenizer"),kfo=o(" or "),EI=a("a"),Sfo=o("LongformerTokenizerFast"),Rfo=o(" (Longformer model)"),Pfo=l(),us=a("li"),Wle=a("strong"),Bfo=o("longt5"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("T5Tokenizer"),qfo=o(" or "),wI=a("a"),jfo=o("T5TokenizerFast"),Dfo=o(" (LongT5 model)"),Gfo=l(),gh=a("li"),Hle=a("strong"),Ofo=o("luke"),Vfo=o(" \u2014 "),AI=a("a"),Xfo=o("LukeTokenizer"),zfo=o(" (LUKE model)"),Qfo=l(),bs=a("li"),Ule=a("strong"),Wfo=o("lxmert"),Hfo=o(" \u2014 "),LI=a("a"),Ufo=o("LxmertTokenizer"),Jfo=o(" or "),yI=a("a"),Yfo=o("LxmertTokenizerFast"),Kfo=o(" (LXMERT model)"),Zfo=l(),hh=a("li"),Jle=a("strong"),emo=o("m2m_100"),omo=o(" \u2014 "),xI=a("a"),rmo=o("M2M100Tokenizer"),tmo=o(" (M2M100 model)"),amo=l(),ph=a("li"),Yle=a("strong"),nmo=o("marian"),smo=o(" \u2014 "),$I=a("a"),lmo=o("MarianTokenizer"),imo=o(" (Marian model)"),dmo=l(),vs=a("li"),Kle=a("strong"),cmo=o("mbart"),fmo=o(" \u2014 "),kI=a("a"),mmo=o("MBartTokenizer"),gmo=o(" or "),SI=a("a"),hmo=o("MBartTokenizerFast"),pmo=o(" (mBART model)"),_mo=l(),Fs=a("li"),Zle=a("strong"),umo=o("mbart50"),bmo=o(" \u2014 "),RI=a("a"),vmo=o("MBart50Tokenizer"),Fmo=o(" or "),PI=a("a"),Tmo=o("MBart50TokenizerFast"),Mmo=o(" (mBART-50 model)"),Emo=l(),Ts=a("li"),eie=a("strong"),Cmo=o("megatron-bert"),wmo=o(" \u2014 "),BI=a("a"),Amo=o("BertTokenizer"),Lmo=o(" or "),II=a("a"),ymo=o("BertTokenizerFast"),xmo=o(" (Megatron-BERT model)"),$mo=l(),_h=a("li"),oie=a("strong"),kmo=o("mluke"),Smo=o(" \u2014 "),NI=a("a"),Rmo=o("MLukeTokenizer"),Pmo=o(" (mLUKE model)"),Bmo=l(),Ms=a("li"),rie=a("strong"),Imo=o("mobilebert"),Nmo=o(" \u2014 "),qI=a("a"),qmo=o("MobileBertTokenizer"),jmo=o(" or "),jI=a("a"),Dmo=o("MobileBertTokenizerFast"),Gmo=o(" (MobileBERT model)"),Omo=l(),Es=a("li"),tie=a("strong"),Vmo=o("mpnet"),Xmo=o(" \u2014 "),DI=a("a"),zmo=o("MPNetTokenizer"),Qmo=o(" or "),GI=a("a"),Wmo=o("MPNetTokenizerFast"),Hmo=o(" (MPNet model)"),Umo=l(),Cs=a("li"),aie=a("strong"),Jmo=o("mt5"),Ymo=o(" \u2014 "),OI=a("a"),Kmo=o("MT5Tokenizer"),Zmo=o(" or "),VI=a("a"),ego=o("MT5TokenizerFast"),ogo=o(" (MT5 model)"),rgo=l(),ws=a("li"),nie=a("strong"),tgo=o("mvp"),ago=o(" \u2014 "),XI=a("a"),ngo=o("MvpTokenizer"),sgo=o(" or "),zI=a("a"),lgo=o("MvpTokenizerFast"),igo=o(" (MVP model)"),dgo=l(),As=a("li"),sie=a("strong"),cgo=o("nezha"),fgo=o(" \u2014 "),QI=a("a"),mgo=o("BertTokenizer"),ggo=o(" or "),WI=a("a"),hgo=o("BertTokenizerFast"),pgo=o(" (Nezha model)"),_go=l(),Ls=a("li"),lie=a("strong"),ugo=o("nystromformer"),bgo=o(" \u2014 "),HI=a("a"),vgo=o("AlbertTokenizer"),Fgo=o(" or "),UI=a("a"),Tgo=o("AlbertTokenizerFast"),Mgo=o(" (Nystr\xF6mformer model)"),Ego=l(),ys=a("li"),iie=a("strong"),Cgo=o("openai-gpt"),wgo=o(" \u2014 "),JI=a("a"),Ago=o("OpenAIGPTTokenizer"),Lgo=o(" or "),YI=a("a"),ygo=o("OpenAIGPTTokenizerFast"),xgo=o(" (OpenAI GPT model)"),$go=l(),uh=a("li"),die=a("strong"),kgo=o("opt"),Sgo=o(" \u2014 "),KI=a("a"),Rgo=o("GPT2Tokenizer"),Pgo=o(" (OPT model)"),Bgo=l(),xs=a("li"),cie=a("strong"),Igo=o("pegasus"),Ngo=o(" \u2014 "),ZI=a("a"),qgo=o("PegasusTokenizer"),jgo=o(" or "),eN=a("a"),Dgo=o("PegasusTokenizerFast"),Ggo=o(" (Pegasus model)"),Ogo=l(),bh=a("li"),fie=a("strong"),Vgo=o("perceiver"),Xgo=o(" \u2014 "),oN=a("a"),zgo=o("PerceiverTokenizer"),Qgo=o(" (Perceiver model)"),Wgo=l(),vh=a("li"),mie=a("strong"),Hgo=o("phobert"),Ugo=o(" \u2014 "),rN=a("a"),Jgo=o("PhobertTokenizer"),Ygo=o(" (PhoBERT model)"),Kgo=l(),Fh=a("li"),gie=a("strong"),Zgo=o("plbart"),eho=o(" \u2014 "),tN=a("a"),oho=o("PLBartTokenizer"),rho=o(" (PLBart model)"),tho=l(),Th=a("li"),hie=a("strong"),aho=o("prophetnet"),nho=o(" \u2014 "),aN=a("a"),sho=o("ProphetNetTokenizer"),lho=o(" (ProphetNet model)"),iho=l(),$s=a("li"),pie=a("strong"),dho=o("qdqbert"),cho=o(" \u2014 "),nN=a("a"),fho=o("BertTokenizer"),mho=o(" or "),sN=a("a"),gho=o("BertTokenizerFast"),hho=o(" (QDQBert model)"),pho=l(),Mh=a("li"),_ie=a("strong"),_ho=o("rag"),uho=o(" \u2014 "),lN=a("a"),bho=o("RagTokenizer"),vho=o(" (RAG model)"),Fho=l(),ks=a("li"),uie=a("strong"),Tho=o("realm"),Mho=o(" \u2014 "),iN=a("a"),Eho=o("RealmTokenizer"),Cho=o(" or "),dN=a("a"),who=o("RealmTokenizerFast"),Aho=o(" (REALM model)"),Lho=l(),Ss=a("li"),bie=a("strong"),yho=o("reformer"),xho=o(" \u2014 "),cN=a("a"),$ho=o("ReformerTokenizer"),kho=o(" or "),fN=a("a"),Sho=o("ReformerTokenizerFast"),Rho=o(" (Reformer model)"),Pho=l(),Rs=a("li"),vie=a("strong"),Bho=o("rembert"),Iho=o(" \u2014 "),mN=a("a"),Nho=o("RemBertTokenizer"),qho=o(" or "),gN=a("a"),jho=o("RemBertTokenizerFast"),Dho=o(" (RemBERT model)"),Gho=l(),Ps=a("li"),Fie=a("strong"),Oho=o("retribert"),Vho=o(" \u2014 "),hN=a("a"),Xho=o("RetriBertTokenizer"),zho=o(" or "),pN=a("a"),Qho=o("RetriBertTokenizerFast"),Who=o(" (RetriBERT model)"),Hho=l(),Bs=a("li"),Tie=a("strong"),Uho=o("roberta"),Jho=o(" \u2014 "),_N=a("a"),Yho=o("RobertaTokenizer"),Kho=o(" or "),uN=a("a"),Zho=o("RobertaTokenizerFast"),epo=o(" (RoBERTa model)"),opo=l(),Is=a("li"),Mie=a("strong"),rpo=o("roformer"),tpo=o(" \u2014 "),bN=a("a"),apo=o("RoFormerTokenizer"),npo=o(" or "),vN=a("a"),spo=o("RoFormerTokenizerFast"),lpo=o(" (RoFormer model)"),ipo=l(),Eh=a("li"),Eie=a("strong"),dpo=o("speech_to_text"),cpo=o(" \u2014 "),FN=a("a"),fpo=o("Speech2TextTokenizer"),mpo=o(" (Speech2Text model)"),gpo=l(),Ch=a("li"),Cie=a("strong"),hpo=o("speech_to_text_2"),ppo=o(" \u2014 "),TN=a("a"),_po=o("Speech2Text2Tokenizer"),upo=o(" (Speech2Text2 model)"),bpo=l(),Ns=a("li"),wie=a("strong"),vpo=o("splinter"),Fpo=o(" \u2014 "),MN=a("a"),Tpo=o("SplinterTokenizer"),Mpo=o(" or "),EN=a("a"),Epo=o("SplinterTokenizerFast"),Cpo=o(" (Splinter model)"),wpo=l(),qs=a("li"),Aie=a("strong"),Apo=o("squeezebert"),Lpo=o(" \u2014 "),CN=a("a"),ypo=o("SqueezeBertTokenizer"),xpo=o(" or "),wN=a("a"),$po=o("SqueezeBertTokenizerFast"),kpo=o(" (SqueezeBERT model)"),Spo=l(),js=a("li"),Lie=a("strong"),Rpo=o("t5"),Ppo=o(" \u2014 "),AN=a("a"),Bpo=o("T5Tokenizer"),Ipo=o(" or "),LN=a("a"),Npo=o("T5TokenizerFast"),qpo=o(" (T5 model)"),jpo=l(),wh=a("li"),yie=a("strong"),Dpo=o("tapas"),Gpo=o(" \u2014 "),yN=a("a"),Opo=o("TapasTokenizer"),Vpo=o(" (TAPAS model)"),Xpo=l(),Ah=a("li"),xie=a("strong"),zpo=o("tapex"),Qpo=o(" \u2014 "),xN=a("a"),Wpo=o("TapexTokenizer"),Hpo=o(" (TAPEX model)"),Upo=l(),Lh=a("li"),$ie=a("strong"),Jpo=o("transfo-xl"),Ypo=o(" \u2014 "),$N=a("a"),Kpo=o("TransfoXLTokenizer"),Zpo=o(" (Transformer-XL model)"),e_o=l(),Ds=a("li"),kie=a("strong"),o_o=o("vilt"),r_o=o(" \u2014 "),kN=a("a"),t_o=o("BertTokenizer"),a_o=o(" or "),SN=a("a"),n_o=o("BertTokenizerFast"),s_o=o(" (ViLT model)"),l_o=l(),Gs=a("li"),Sie=a("strong"),i_o=o("visual_bert"),d_o=o(" \u2014 "),RN=a("a"),c_o=o("BertTokenizer"),f_o=o(" or "),PN=a("a"),m_o=o("BertTokenizerFast"),g_o=o(" (VisualBERT model)"),h_o=l(),yh=a("li"),Rie=a("strong"),p_o=o("wav2vec2"),__o=o(" \u2014 "),BN=a("a"),u_o=o("Wav2Vec2CTCTokenizer"),b_o=o(" (Wav2Vec2 model)"),v_o=l(),xh=a("li"),Pie=a("strong"),F_o=o("wav2vec2-conformer"),T_o=o(" \u2014 "),IN=a("a"),M_o=o("Wav2Vec2CTCTokenizer"),E_o=o(" (Wav2Vec2-Conformer model)"),C_o=l(),$h=a("li"),Bie=a("strong"),w_o=o("wav2vec2_phoneme"),A_o=o(" \u2014 "),NN=a("a"),L_o=o("Wav2Vec2PhonemeCTCTokenizer"),y_o=o(" (Wav2Vec2Phoneme model)"),x_o=l(),Os=a("li"),Iie=a("strong"),$_o=o("xglm"),k_o=o(" \u2014 "),qN=a("a"),S_o=o("XGLMTokenizer"),R_o=o(" or "),jN=a("a"),P_o=o("XGLMTokenizerFast"),B_o=o(" (XGLM model)"),I_o=l(),kh=a("li"),Nie=a("strong"),N_o=o("xlm"),q_o=o(" \u2014 "),DN=a("a"),j_o=o("XLMTokenizer"),D_o=o(" (XLM model)"),G_o=l(),Sh=a("li"),qie=a("strong"),O_o=o("xlm-prophetnet"),V_o=o(" \u2014 "),GN=a("a"),X_o=o("XLMProphetNetTokenizer"),z_o=o(" (XLM-ProphetNet model)"),Q_o=l(),Vs=a("li"),jie=a("strong"),W_o=o("xlm-roberta"),H_o=o(" \u2014 "),ON=a("a"),U_o=o("XLMRobertaTokenizer"),J_o=o(" or "),VN=a("a"),Y_o=o("XLMRobertaTokenizerFast"),K_o=o(" (XLM-RoBERTa model)"),Z_o=l(),Xs=a("li"),Die=a("strong"),euo=o("xlm-roberta-xl"),ouo=o(" \u2014 "),XN=a("a"),ruo=o("RobertaTokenizer"),tuo=o(" or "),zN=a("a"),auo=o("RobertaTokenizerFast"),nuo=o(" (XLM-RoBERTa-XL model)"),suo=l(),zs=a("li"),Gie=a("strong"),luo=o("xlnet"),iuo=o(" \u2014 "),QN=a("a"),duo=o("XLNetTokenizer"),cuo=o(" or "),WN=a("a"),fuo=o("XLNetTokenizerFast"),muo=o(" (XLNet model)"),guo=l(),Qs=a("li"),Oie=a("strong"),huo=o("yoso"),puo=o(" \u2014 "),HN=a("a"),_uo=o("AlbertTokenizer"),uuo=o(" or "),UN=a("a"),buo=o("AlbertTokenizerFast"),vuo=o(" (YOSO model)"),Fuo=l(),F(Rh.$$.fragment),Tuo=l(),Ph=a("div"),F(vL.$$.fragment),Muo=l(),Vie=a("p"),Euo=o("Register a new tokenizer in this mapping."),hXe=l(),qi=a("h2"),Bh=a("a"),Xie=a("span"),F(FL.$$.fragment),Cuo=l(),zie=a("span"),wuo=o("AutoFeatureExtractor"),pXe=l(),yo=a("div"),F(TL.$$.fragment),Auo=l(),ML=a("p"),Luo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JN=a("a"),yuo=o("AutoFeatureExtractor.from_pretrained()"),xuo=o(" class method."),$uo=l(),EL=a("p"),kuo=o("This class cannot be instantiated directly using "),Qie=a("code"),Suo=o("__init__()"),Ruo=o(" (throws an error)."),Puo=l(),Ue=a("div"),F(CL.$$.fragment),Buo=l(),Wie=a("p"),Iuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Nuo=l(),Ba=a("p"),quo=o("The feature extractor class to instantiate is selected based on the "),Hie=a("code"),juo=o("model_type"),Duo=o(` property of the config object
(either passed as an argument or loaded from `),Uie=a("code"),Guo=o("pretrained_model_name_or_path"),Ouo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jie=a("code"),Vuo=o("pretrained_model_name_or_path"),Xuo=o(":"),zuo=l(),Y=a("ul"),Ih=a("li"),Yie=a("strong"),Quo=o("beit"),Wuo=o(" \u2014 "),YN=a("a"),Huo=o("BeitFeatureExtractor"),Uuo=o(" (BEiT model)"),Juo=l(),Nh=a("li"),Kie=a("strong"),Yuo=o("clip"),Kuo=o(" \u2014 "),KN=a("a"),Zuo=o("CLIPFeatureExtractor"),e2o=o(" (CLIP model)"),o2o=l(),qh=a("li"),Zie=a("strong"),r2o=o("convnext"),t2o=o(" \u2014 "),ZN=a("a"),a2o=o("ConvNextFeatureExtractor"),n2o=o(" (ConvNeXT model)"),s2o=l(),jh=a("li"),ede=a("strong"),l2o=o("cvt"),i2o=o(" \u2014 "),eq=a("a"),d2o=o("ConvNextFeatureExtractor"),c2o=o(" (CvT model)"),f2o=l(),Dh=a("li"),ode=a("strong"),m2o=o("data2vec-audio"),g2o=o(" \u2014 "),oq=a("a"),h2o=o("Wav2Vec2FeatureExtractor"),p2o=o(" (Data2VecAudio model)"),_2o=l(),Gh=a("li"),rde=a("strong"),u2o=o("data2vec-vision"),b2o=o(" \u2014 "),rq=a("a"),v2o=o("BeitFeatureExtractor"),F2o=o(" (Data2VecVision model)"),T2o=l(),Oh=a("li"),tde=a("strong"),M2o=o("deit"),E2o=o(" \u2014 "),tq=a("a"),C2o=o("DeiTFeatureExtractor"),w2o=o(" (DeiT model)"),A2o=l(),Vh=a("li"),ade=a("strong"),L2o=o("detr"),y2o=o(" \u2014 "),aq=a("a"),x2o=o("DetrFeatureExtractor"),$2o=o(" (DETR model)"),k2o=l(),Xh=a("li"),nde=a("strong"),S2o=o("dpt"),R2o=o(" \u2014 "),nq=a("a"),P2o=o("DPTFeatureExtractor"),B2o=o(" (DPT model)"),I2o=l(),zh=a("li"),sde=a("strong"),N2o=o("flava"),q2o=o(" \u2014 "),sq=a("a"),j2o=o("FlavaFeatureExtractor"),D2o=o(" (FLAVA model)"),G2o=l(),Qh=a("li"),lde=a("strong"),O2o=o("glpn"),V2o=o(" \u2014 "),lq=a("a"),X2o=o("GLPNFeatureExtractor"),z2o=o(" (GLPN model)"),Q2o=l(),Wh=a("li"),ide=a("strong"),W2o=o("groupvit"),H2o=o(" \u2014 "),iq=a("a"),U2o=o("CLIPFeatureExtractor"),J2o=o(" (GroupViT model)"),Y2o=l(),Hh=a("li"),dde=a("strong"),K2o=o("hubert"),Z2o=o(" \u2014 "),dq=a("a"),e1o=o("Wav2Vec2FeatureExtractor"),o1o=o(" (Hubert model)"),r1o=l(),Uh=a("li"),cde=a("strong"),t1o=o("imagegpt"),a1o=o(" \u2014 "),cq=a("a"),n1o=o("ImageGPTFeatureExtractor"),s1o=o(" (ImageGPT model)"),l1o=l(),Jh=a("li"),fde=a("strong"),i1o=o("layoutlmv2"),d1o=o(" \u2014 "),fq=a("a"),c1o=o("LayoutLMv2FeatureExtractor"),f1o=o(" (LayoutLMv2 model)"),m1o=l(),Yh=a("li"),mde=a("strong"),g1o=o("layoutlmv3"),h1o=o(" \u2014 "),mq=a("a"),p1o=o("LayoutLMv3FeatureExtractor"),_1o=o(" (LayoutLMv3 model)"),u1o=l(),Kh=a("li"),gde=a("strong"),b1o=o("levit"),v1o=o(" \u2014 "),gq=a("a"),F1o=o("LevitFeatureExtractor"),T1o=o(" (LeViT model)"),M1o=l(),Zh=a("li"),hde=a("strong"),E1o=o("maskformer"),C1o=o(" \u2014 "),hq=a("a"),w1o=o("MaskFormerFeatureExtractor"),A1o=o(" (MaskFormer model)"),L1o=l(),ep=a("li"),pde=a("strong"),y1o=o("mctct"),x1o=o(" \u2014 "),pq=a("a"),$1o=o("MCTCTFeatureExtractor"),k1o=o(" (M-CTC-T model)"),S1o=l(),op=a("li"),_de=a("strong"),R1o=o("mobilevit"),P1o=o(" \u2014 "),_q=a("a"),B1o=o("MobileViTFeatureExtractor"),I1o=o(" (MobileViT model)"),N1o=l(),rp=a("li"),ude=a("strong"),q1o=o("perceiver"),j1o=o(" \u2014 "),uq=a("a"),D1o=o("PerceiverFeatureExtractor"),G1o=o(" (Perceiver model)"),O1o=l(),tp=a("li"),bde=a("strong"),V1o=o("poolformer"),X1o=o(" \u2014 "),bq=a("a"),z1o=o("PoolFormerFeatureExtractor"),Q1o=o(" (PoolFormer model)"),W1o=l(),ap=a("li"),vde=a("strong"),H1o=o("regnet"),U1o=o(" \u2014 "),vq=a("a"),J1o=o("ConvNextFeatureExtractor"),Y1o=o(" (RegNet model)"),K1o=l(),np=a("li"),Fde=a("strong"),Z1o=o("resnet"),ebo=o(" \u2014 "),Fq=a("a"),obo=o("ConvNextFeatureExtractor"),rbo=o(" (ResNet model)"),tbo=l(),sp=a("li"),Tde=a("strong"),abo=o("segformer"),nbo=o(" \u2014 "),Tq=a("a"),sbo=o("SegformerFeatureExtractor"),lbo=o(" (SegFormer model)"),ibo=l(),lp=a("li"),Mde=a("strong"),dbo=o("speech_to_text"),cbo=o(" \u2014 "),Mq=a("a"),fbo=o("Speech2TextFeatureExtractor"),mbo=o(" (Speech2Text model)"),gbo=l(),ip=a("li"),Ede=a("strong"),hbo=o("swin"),pbo=o(" \u2014 "),Eq=a("a"),_bo=o("ViTFeatureExtractor"),ubo=o(" (Swin Transformer model)"),bbo=l(),dp=a("li"),Cde=a("strong"),vbo=o("van"),Fbo=o(" \u2014 "),Cq=a("a"),Tbo=o("ConvNextFeatureExtractor"),Mbo=o(" (VAN model)"),Ebo=l(),cp=a("li"),wde=a("strong"),Cbo=o("vilt"),wbo=o(" \u2014 "),wq=a("a"),Abo=o("ViltFeatureExtractor"),Lbo=o(" (ViLT model)"),ybo=l(),fp=a("li"),Ade=a("strong"),xbo=o("vit"),$bo=o(" \u2014 "),Aq=a("a"),kbo=o("ViTFeatureExtractor"),Sbo=o(" (ViT model)"),Rbo=l(),mp=a("li"),Lde=a("strong"),Pbo=o("vit_mae"),Bbo=o(" \u2014 "),Lq=a("a"),Ibo=o("ViTFeatureExtractor"),Nbo=o(" (ViTMAE model)"),qbo=l(),gp=a("li"),yde=a("strong"),jbo=o("wav2vec2"),Dbo=o(" \u2014 "),yq=a("a"),Gbo=o("Wav2Vec2FeatureExtractor"),Obo=o(" (Wav2Vec2 model)"),Vbo=l(),hp=a("li"),xde=a("strong"),Xbo=o("wav2vec2-conformer"),zbo=o(" \u2014 "),xq=a("a"),Qbo=o("Wav2Vec2FeatureExtractor"),Wbo=o(" (Wav2Vec2-Conformer model)"),Hbo=l(),pp=a("li"),$de=a("strong"),Ubo=o("yolos"),Jbo=o(" \u2014 "),$q=a("a"),Ybo=o("YolosFeatureExtractor"),Kbo=o(" (YOLOS model)"),Zbo=l(),F(_p.$$.fragment),evo=l(),F(up.$$.fragment),ovo=l(),bp=a("div"),F(wL.$$.fragment),rvo=l(),kde=a("p"),tvo=o("Register a new feature extractor for this class."),_Xe=l(),ji=a("h2"),vp=a("a"),Sde=a("span"),F(AL.$$.fragment),avo=l(),Rde=a("span"),nvo=o("AutoProcessor"),uXe=l(),xo=a("div"),F(LL.$$.fragment),svo=l(),yL=a("p"),lvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kq=a("a"),ivo=o("AutoProcessor.from_pretrained()"),dvo=o(" class method."),cvo=l(),xL=a("p"),fvo=o("This class cannot be instantiated directly using "),Pde=a("code"),mvo=o("__init__()"),gvo=o(" (throws an error)."),hvo=l(),Je=a("div"),F($L.$$.fragment),pvo=l(),Bde=a("p"),_vo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uvo=l(),Di=a("p"),bvo=o("The processor class to instantiate is selected based on the "),Ide=a("code"),vvo=o("model_type"),Fvo=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),Tvo=o("pretrained_model_name_or_path"),Mvo=o(" if possible):"),Evo=l(),he=a("ul"),Fp=a("li"),qde=a("strong"),Cvo=o("clip"),wvo=o(" \u2014 "),Sq=a("a"),Avo=o("CLIPProcessor"),Lvo=o(" (CLIP model)"),yvo=l(),Tp=a("li"),jde=a("strong"),xvo=o("flava"),$vo=o(" \u2014 "),Dde=a("code"),kvo=o("FLAVAProcessor"),Svo=o(" (FLAVA model)"),Rvo=l(),Mp=a("li"),Gde=a("strong"),Pvo=o("groupvit"),Bvo=o(" \u2014 "),Rq=a("a"),Ivo=o("CLIPProcessor"),Nvo=o(" (GroupViT model)"),qvo=l(),Ep=a("li"),Ode=a("strong"),jvo=o("layoutlmv2"),Dvo=o(" \u2014 "),Pq=a("a"),Gvo=o("LayoutLMv2Processor"),Ovo=o(" (LayoutLMv2 model)"),Vvo=l(),Cp=a("li"),Vde=a("strong"),Xvo=o("layoutlmv3"),zvo=o(" \u2014 "),Bq=a("a"),Qvo=o("LayoutLMv3Processor"),Wvo=o(" (LayoutLMv3 model)"),Hvo=l(),wp=a("li"),Xde=a("strong"),Uvo=o("layoutxlm"),Jvo=o(" \u2014 "),Iq=a("a"),Yvo=o("LayoutXLMProcessor"),Kvo=o(" (LayoutXLM model)"),Zvo=l(),Ap=a("li"),zde=a("strong"),e0o=o("sew"),o0o=o(" \u2014 "),Nq=a("a"),r0o=o("Wav2Vec2Processor"),t0o=o(" (SEW model)"),a0o=l(),Lp=a("li"),Qde=a("strong"),n0o=o("sew-d"),s0o=o(" \u2014 "),qq=a("a"),l0o=o("Wav2Vec2Processor"),i0o=o(" (SEW-D model)"),d0o=l(),yp=a("li"),Wde=a("strong"),c0o=o("speech_to_text"),f0o=o(" \u2014 "),jq=a("a"),m0o=o("Speech2TextProcessor"),g0o=o(" (Speech2Text model)"),h0o=l(),xp=a("li"),Hde=a("strong"),p0o=o("speech_to_text_2"),_0o=o(" \u2014 "),Dq=a("a"),u0o=o("Speech2Text2Processor"),b0o=o(" (Speech2Text2 model)"),v0o=l(),$p=a("li"),Ude=a("strong"),F0o=o("trocr"),T0o=o(" \u2014 "),Gq=a("a"),M0o=o("TrOCRProcessor"),E0o=o(" (TrOCR model)"),C0o=l(),kp=a("li"),Jde=a("strong"),w0o=o("unispeech"),A0o=o(" \u2014 "),Oq=a("a"),L0o=o("Wav2Vec2Processor"),y0o=o(" (UniSpeech model)"),x0o=l(),Sp=a("li"),Yde=a("strong"),$0o=o("unispeech-sat"),k0o=o(" \u2014 "),Vq=a("a"),S0o=o("Wav2Vec2Processor"),R0o=o(" (UniSpeechSat model)"),P0o=l(),Rp=a("li"),Kde=a("strong"),B0o=o("vilt"),I0o=o(" \u2014 "),Xq=a("a"),N0o=o("ViltProcessor"),q0o=o(" (ViLT model)"),j0o=l(),Pp=a("li"),Zde=a("strong"),D0o=o("vision-text-dual-encoder"),G0o=o(" \u2014 "),zq=a("a"),O0o=o("VisionTextDualEncoderProcessor"),V0o=o(" (VisionTextDualEncoder model)"),X0o=l(),Bp=a("li"),ece=a("strong"),z0o=o("wav2vec2"),Q0o=o(" \u2014 "),Qq=a("a"),W0o=o("Wav2Vec2Processor"),H0o=o(" (Wav2Vec2 model)"),U0o=l(),Ip=a("li"),oce=a("strong"),J0o=o("wav2vec2-conformer"),Y0o=o(" \u2014 "),Wq=a("a"),K0o=o("Wav2Vec2Processor"),Z0o=o(" (Wav2Vec2-Conformer model)"),eFo=l(),Np=a("li"),rce=a("strong"),oFo=o("wavlm"),rFo=o(" \u2014 "),Hq=a("a"),tFo=o("Wav2Vec2Processor"),aFo=o(" (WavLM model)"),nFo=l(),F(qp.$$.fragment),sFo=l(),F(jp.$$.fragment),lFo=l(),Dp=a("div"),F(kL.$$.fragment),iFo=l(),tce=a("p"),dFo=o("Register a new processor for this class."),bXe=l(),Gi=a("h2"),Gp=a("a"),ace=a("span"),F(SL.$$.fragment),cFo=l(),nce=a("span"),fFo=o("AutoModel"),vXe=l(),$o=a("div"),F(RL.$$.fragment),mFo=l(),Oi=a("p"),gFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uq=a("a"),hFo=o("from_pretrained()"),pFo=o(" class method or the "),Jq=a("a"),_Fo=o("from_config()"),uFo=o(` class
method.`),bFo=l(),PL=a("p"),vFo=o("This class cannot be instantiated directly using "),sce=a("code"),FFo=o("__init__()"),TFo=o(" (throws an error)."),MFo=l(),it=a("div"),F(BL.$$.fragment),EFo=l(),lce=a("p"),CFo=o("Instantiates one of the base model classes of the library from a configuration."),wFo=l(),Vi=a("p"),AFo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),LFo=o("not"),yFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=a("a"),xFo=o("from_pretrained()"),$Fo=o(" to load the model weights."),kFo=l(),F(Op.$$.fragment),SFo=l(),Ye=a("div"),F(IL.$$.fragment),RFo=l(),dce=a("p"),PFo=o("Instantiate one of the base model classes of the library from a pretrained model."),BFo=l(),Ia=a("p"),IFo=o("The model class to instantiate is selected based on the "),cce=a("code"),NFo=o("model_type"),qFo=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),jFo=o("pretrained_model_name_or_path"),DFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),GFo=o("pretrained_model_name_or_path"),OFo=o(":"),VFo=l(),y=a("ul"),Vp=a("li"),gce=a("strong"),XFo=o("albert"),zFo=o(" \u2014 "),Kq=a("a"),QFo=o("AlbertModel"),WFo=o(" (ALBERT model)"),HFo=l(),Xp=a("li"),hce=a("strong"),UFo=o("bart"),JFo=o(" \u2014 "),Zq=a("a"),YFo=o("BartModel"),KFo=o(" (BART model)"),ZFo=l(),zp=a("li"),pce=a("strong"),eTo=o("beit"),oTo=o(" \u2014 "),ej=a("a"),rTo=o("BeitModel"),tTo=o(" (BEiT model)"),aTo=l(),Qp=a("li"),_ce=a("strong"),nTo=o("bert"),sTo=o(" \u2014 "),oj=a("a"),lTo=o("BertModel"),iTo=o(" (BERT model)"),dTo=l(),Wp=a("li"),uce=a("strong"),cTo=o("bert-generation"),fTo=o(" \u2014 "),rj=a("a"),mTo=o("BertGenerationEncoder"),gTo=o(" (Bert Generation model)"),hTo=l(),Hp=a("li"),bce=a("strong"),pTo=o("big_bird"),_To=o(" \u2014 "),tj=a("a"),uTo=o("BigBirdModel"),bTo=o(" (BigBird model)"),vTo=l(),Up=a("li"),vce=a("strong"),FTo=o("bigbird_pegasus"),TTo=o(" \u2014 "),aj=a("a"),MTo=o("BigBirdPegasusModel"),ETo=o(" (BigBird-Pegasus model)"),CTo=l(),Jp=a("li"),Fce=a("strong"),wTo=o("blenderbot"),ATo=o(" \u2014 "),nj=a("a"),LTo=o("BlenderbotModel"),yTo=o(" (Blenderbot model)"),xTo=l(),Yp=a("li"),Tce=a("strong"),$To=o("blenderbot-small"),kTo=o(" \u2014 "),sj=a("a"),STo=o("BlenderbotSmallModel"),RTo=o(" (BlenderbotSmall model)"),PTo=l(),Kp=a("li"),Mce=a("strong"),BTo=o("bloom"),ITo=o(" \u2014 "),lj=a("a"),NTo=o("BloomModel"),qTo=o(" (BLOOM model)"),jTo=l(),Zp=a("li"),Ece=a("strong"),DTo=o("camembert"),GTo=o(" \u2014 "),ij=a("a"),OTo=o("CamembertModel"),VTo=o(" (CamemBERT model)"),XTo=l(),e_=a("li"),Cce=a("strong"),zTo=o("canine"),QTo=o(" \u2014 "),dj=a("a"),WTo=o("CanineModel"),HTo=o(" (CANINE model)"),UTo=l(),o_=a("li"),wce=a("strong"),JTo=o("clip"),YTo=o(" \u2014 "),cj=a("a"),KTo=o("CLIPModel"),ZTo=o(" (CLIP model)"),e8o=l(),r_=a("li"),Ace=a("strong"),o8o=o("codegen"),r8o=o(" \u2014 "),fj=a("a"),t8o=o("CodeGenModel"),a8o=o(" (CodeGen model)"),n8o=l(),t_=a("li"),Lce=a("strong"),s8o=o("convbert"),l8o=o(" \u2014 "),mj=a("a"),i8o=o("ConvBertModel"),d8o=o(" (ConvBERT model)"),c8o=l(),a_=a("li"),yce=a("strong"),f8o=o("convnext"),m8o=o(" \u2014 "),gj=a("a"),g8o=o("ConvNextModel"),h8o=o(" (ConvNeXT model)"),p8o=l(),n_=a("li"),xce=a("strong"),_8o=o("ctrl"),u8o=o(" \u2014 "),hj=a("a"),b8o=o("CTRLModel"),v8o=o(" (CTRL model)"),F8o=l(),s_=a("li"),$ce=a("strong"),T8o=o("cvt"),M8o=o(" \u2014 "),pj=a("a"),E8o=o("CvtModel"),C8o=o(" (CvT model)"),w8o=l(),l_=a("li"),kce=a("strong"),A8o=o("data2vec-audio"),L8o=o(" \u2014 "),_j=a("a"),y8o=o("Data2VecAudioModel"),x8o=o(" (Data2VecAudio model)"),$8o=l(),i_=a("li"),Sce=a("strong"),k8o=o("data2vec-text"),S8o=o(" \u2014 "),uj=a("a"),R8o=o("Data2VecTextModel"),P8o=o(" (Data2VecText model)"),B8o=l(),d_=a("li"),Rce=a("strong"),I8o=o("data2vec-vision"),N8o=o(" \u2014 "),bj=a("a"),q8o=o("Data2VecVisionModel"),j8o=o(" (Data2VecVision model)"),D8o=l(),c_=a("li"),Pce=a("strong"),G8o=o("deberta"),O8o=o(" \u2014 "),vj=a("a"),V8o=o("DebertaModel"),X8o=o(" (DeBERTa model)"),z8o=l(),f_=a("li"),Bce=a("strong"),Q8o=o("deberta-v2"),W8o=o(" \u2014 "),Fj=a("a"),H8o=o("DebertaV2Model"),U8o=o(" (DeBERTa-v2 model)"),J8o=l(),m_=a("li"),Ice=a("strong"),Y8o=o("decision_transformer"),K8o=o(" \u2014 "),Tj=a("a"),Z8o=o("DecisionTransformerModel"),eMo=o(" (Decision Transformer model)"),oMo=l(),g_=a("li"),Nce=a("strong"),rMo=o("deit"),tMo=o(" \u2014 "),Mj=a("a"),aMo=o("DeiTModel"),nMo=o(" (DeiT model)"),sMo=l(),h_=a("li"),qce=a("strong"),lMo=o("detr"),iMo=o(" \u2014 "),Ej=a("a"),dMo=o("DetrModel"),cMo=o(" (DETR model)"),fMo=l(),p_=a("li"),jce=a("strong"),mMo=o("distilbert"),gMo=o(" \u2014 "),Cj=a("a"),hMo=o("DistilBertModel"),pMo=o(" (DistilBERT model)"),_Mo=l(),__=a("li"),Dce=a("strong"),uMo=o("dpr"),bMo=o(" \u2014 "),wj=a("a"),vMo=o("DPRQuestionEncoder"),FMo=o(" (DPR model)"),TMo=l(),u_=a("li"),Gce=a("strong"),MMo=o("dpt"),EMo=o(" \u2014 "),Aj=a("a"),CMo=o("DPTModel"),wMo=o(" (DPT model)"),AMo=l(),b_=a("li"),Oce=a("strong"),LMo=o("electra"),yMo=o(" \u2014 "),Lj=a("a"),xMo=o("ElectraModel"),$Mo=o(" (ELECTRA model)"),kMo=l(),v_=a("li"),Vce=a("strong"),SMo=o("flaubert"),RMo=o(" \u2014 "),yj=a("a"),PMo=o("FlaubertModel"),BMo=o(" (FlauBERT model)"),IMo=l(),F_=a("li"),Xce=a("strong"),NMo=o("flava"),qMo=o(" \u2014 "),xj=a("a"),jMo=o("FlavaModel"),DMo=o(" (FLAVA model)"),GMo=l(),T_=a("li"),zce=a("strong"),OMo=o("fnet"),VMo=o(" \u2014 "),$j=a("a"),XMo=o("FNetModel"),zMo=o(" (FNet model)"),QMo=l(),M_=a("li"),Qce=a("strong"),WMo=o("fsmt"),HMo=o(" \u2014 "),kj=a("a"),UMo=o("FSMTModel"),JMo=o(" (FairSeq Machine-Translation model)"),YMo=l(),Ws=a("li"),Wce=a("strong"),KMo=o("funnel"),ZMo=o(" \u2014 "),Sj=a("a"),e4o=o("FunnelModel"),o4o=o(" or "),Rj=a("a"),r4o=o("FunnelBaseModel"),t4o=o(" (Funnel Transformer model)"),a4o=l(),E_=a("li"),Hce=a("strong"),n4o=o("glpn"),s4o=o(" \u2014 "),Pj=a("a"),l4o=o("GLPNModel"),i4o=o(" (GLPN model)"),d4o=l(),C_=a("li"),Uce=a("strong"),c4o=o("gpt2"),f4o=o(" \u2014 "),Bj=a("a"),m4o=o("GPT2Model"),g4o=o(" (OpenAI GPT-2 model)"),h4o=l(),w_=a("li"),Jce=a("strong"),p4o=o("gpt_neo"),_4o=o(" \u2014 "),Ij=a("a"),u4o=o("GPTNeoModel"),b4o=o(" (GPT Neo model)"),v4o=l(),A_=a("li"),Yce=a("strong"),F4o=o("gpt_neox"),T4o=o(" \u2014 "),Nj=a("a"),M4o=o("GPTNeoXModel"),E4o=o(" (GPT NeoX model)"),C4o=l(),L_=a("li"),Kce=a("strong"),w4o=o("gptj"),A4o=o(" \u2014 "),qj=a("a"),L4o=o("GPTJModel"),y4o=o(" (GPT-J model)"),x4o=l(),y_=a("li"),Zce=a("strong"),$4o=o("groupvit"),k4o=o(" \u2014 "),jj=a("a"),S4o=o("GroupViTModel"),R4o=o(" (GroupViT model)"),P4o=l(),x_=a("li"),efe=a("strong"),B4o=o("hubert"),I4o=o(" \u2014 "),Dj=a("a"),N4o=o("HubertModel"),q4o=o(" (Hubert model)"),j4o=l(),$_=a("li"),ofe=a("strong"),D4o=o("ibert"),G4o=o(" \u2014 "),Gj=a("a"),O4o=o("IBertModel"),V4o=o(" (I-BERT model)"),X4o=l(),k_=a("li"),rfe=a("strong"),z4o=o("imagegpt"),Q4o=o(" \u2014 "),Oj=a("a"),W4o=o("ImageGPTModel"),H4o=o(" (ImageGPT model)"),U4o=l(),S_=a("li"),tfe=a("strong"),J4o=o("layoutlm"),Y4o=o(" \u2014 "),Vj=a("a"),K4o=o("LayoutLMModel"),Z4o=o(" (LayoutLM model)"),eEo=l(),R_=a("li"),afe=a("strong"),oEo=o("layoutlmv2"),rEo=o(" \u2014 "),Xj=a("a"),tEo=o("LayoutLMv2Model"),aEo=o(" (LayoutLMv2 model)"),nEo=l(),P_=a("li"),nfe=a("strong"),sEo=o("layoutlmv3"),lEo=o(" \u2014 "),zj=a("a"),iEo=o("LayoutLMv3Model"),dEo=o(" (LayoutLMv3 model)"),cEo=l(),B_=a("li"),sfe=a("strong"),fEo=o("led"),mEo=o(" \u2014 "),Qj=a("a"),gEo=o("LEDModel"),hEo=o(" (LED model)"),pEo=l(),I_=a("li"),lfe=a("strong"),_Eo=o("levit"),uEo=o(" \u2014 "),Wj=a("a"),bEo=o("LevitModel"),vEo=o(" (LeViT model)"),FEo=l(),N_=a("li"),ife=a("strong"),TEo=o("longformer"),MEo=o(" \u2014 "),Hj=a("a"),EEo=o("LongformerModel"),CEo=o(" (Longformer model)"),wEo=l(),q_=a("li"),dfe=a("strong"),AEo=o("longt5"),LEo=o(" \u2014 "),Uj=a("a"),yEo=o("LongT5Model"),xEo=o(" (LongT5 model)"),$Eo=l(),j_=a("li"),cfe=a("strong"),kEo=o("luke"),SEo=o(" \u2014 "),Jj=a("a"),REo=o("LukeModel"),PEo=o(" (LUKE model)"),BEo=l(),D_=a("li"),ffe=a("strong"),IEo=o("lxmert"),NEo=o(" \u2014 "),Yj=a("a"),qEo=o("LxmertModel"),jEo=o(" (LXMERT model)"),DEo=l(),G_=a("li"),mfe=a("strong"),GEo=o("m2m_100"),OEo=o(" \u2014 "),Kj=a("a"),VEo=o("M2M100Model"),XEo=o(" (M2M100 model)"),zEo=l(),O_=a("li"),gfe=a("strong"),QEo=o("marian"),WEo=o(" \u2014 "),Zj=a("a"),HEo=o("MarianModel"),UEo=o(" (Marian model)"),JEo=l(),V_=a("li"),hfe=a("strong"),YEo=o("maskformer"),KEo=o(" \u2014 "),eD=a("a"),ZEo=o("MaskFormerModel"),eCo=o(" (MaskFormer model)"),oCo=l(),X_=a("li"),pfe=a("strong"),rCo=o("mbart"),tCo=o(" \u2014 "),oD=a("a"),aCo=o("MBartModel"),nCo=o(" (mBART model)"),sCo=l(),z_=a("li"),_fe=a("strong"),lCo=o("mctct"),iCo=o(" \u2014 "),rD=a("a"),dCo=o("MCTCTModel"),cCo=o(" (M-CTC-T model)"),fCo=l(),Q_=a("li"),ufe=a("strong"),mCo=o("megatron-bert"),gCo=o(" \u2014 "),tD=a("a"),hCo=o("MegatronBertModel"),pCo=o(" (Megatron-BERT model)"),_Co=l(),W_=a("li"),bfe=a("strong"),uCo=o("mobilebert"),bCo=o(" \u2014 "),aD=a("a"),vCo=o("MobileBertModel"),FCo=o(" (MobileBERT model)"),TCo=l(),H_=a("li"),vfe=a("strong"),MCo=o("mobilevit"),ECo=o(" \u2014 "),nD=a("a"),CCo=o("MobileViTModel"),wCo=o(" (MobileViT model)"),ACo=l(),U_=a("li"),Ffe=a("strong"),LCo=o("mpnet"),yCo=o(" \u2014 "),sD=a("a"),xCo=o("MPNetModel"),$Co=o(" (MPNet model)"),kCo=l(),J_=a("li"),Tfe=a("strong"),SCo=o("mt5"),RCo=o(" \u2014 "),lD=a("a"),PCo=o("MT5Model"),BCo=o(" (MT5 model)"),ICo=l(),Y_=a("li"),Mfe=a("strong"),NCo=o("mvp"),qCo=o(" \u2014 "),iD=a("a"),jCo=o("MvpModel"),DCo=o(" (MVP model)"),GCo=l(),K_=a("li"),Efe=a("strong"),OCo=o("nezha"),VCo=o(" \u2014 "),dD=a("a"),XCo=o("NezhaModel"),zCo=o(" (Nezha model)"),QCo=l(),Z_=a("li"),Cfe=a("strong"),WCo=o("nystromformer"),HCo=o(" \u2014 "),cD=a("a"),UCo=o("NystromformerModel"),JCo=o(" (Nystr\xF6mformer model)"),YCo=l(),eu=a("li"),wfe=a("strong"),KCo=o("openai-gpt"),ZCo=o(" \u2014 "),fD=a("a"),e3o=o("OpenAIGPTModel"),o3o=o(" (OpenAI GPT model)"),r3o=l(),ou=a("li"),Afe=a("strong"),t3o=o("opt"),a3o=o(" \u2014 "),mD=a("a"),n3o=o("OPTModel"),s3o=o(" (OPT model)"),l3o=l(),ru=a("li"),Lfe=a("strong"),i3o=o("pegasus"),d3o=o(" \u2014 "),gD=a("a"),c3o=o("PegasusModel"),f3o=o(" (Pegasus model)"),m3o=l(),tu=a("li"),yfe=a("strong"),g3o=o("perceiver"),h3o=o(" \u2014 "),hD=a("a"),p3o=o("PerceiverModel"),_3o=o(" (Perceiver model)"),u3o=l(),au=a("li"),xfe=a("strong"),b3o=o("plbart"),v3o=o(" \u2014 "),pD=a("a"),F3o=o("PLBartModel"),T3o=o(" (PLBart model)"),M3o=l(),nu=a("li"),$fe=a("strong"),E3o=o("poolformer"),C3o=o(" \u2014 "),_D=a("a"),w3o=o("PoolFormerModel"),A3o=o(" (PoolFormer model)"),L3o=l(),su=a("li"),kfe=a("strong"),y3o=o("prophetnet"),x3o=o(" \u2014 "),uD=a("a"),$3o=o("ProphetNetModel"),k3o=o(" (ProphetNet model)"),S3o=l(),lu=a("li"),Sfe=a("strong"),R3o=o("qdqbert"),P3o=o(" \u2014 "),bD=a("a"),B3o=o("QDQBertModel"),I3o=o(" (QDQBert model)"),N3o=l(),iu=a("li"),Rfe=a("strong"),q3o=o("reformer"),j3o=o(" \u2014 "),vD=a("a"),D3o=o("ReformerModel"),G3o=o(" (Reformer model)"),O3o=l(),du=a("li"),Pfe=a("strong"),V3o=o("regnet"),X3o=o(" \u2014 "),FD=a("a"),z3o=o("RegNetModel"),Q3o=o(" (RegNet model)"),W3o=l(),cu=a("li"),Bfe=a("strong"),H3o=o("rembert"),U3o=o(" \u2014 "),TD=a("a"),J3o=o("RemBertModel"),Y3o=o(" (RemBERT model)"),K3o=l(),fu=a("li"),Ife=a("strong"),Z3o=o("resnet"),e5o=o(" \u2014 "),MD=a("a"),o5o=o("ResNetModel"),r5o=o(" (ResNet model)"),t5o=l(),mu=a("li"),Nfe=a("strong"),a5o=o("retribert"),n5o=o(" \u2014 "),ED=a("a"),s5o=o("RetriBertModel"),l5o=o(" (RetriBERT model)"),i5o=l(),gu=a("li"),qfe=a("strong"),d5o=o("roberta"),c5o=o(" \u2014 "),CD=a("a"),f5o=o("RobertaModel"),m5o=o(" (RoBERTa model)"),g5o=l(),hu=a("li"),jfe=a("strong"),h5o=o("roformer"),p5o=o(" \u2014 "),wD=a("a"),_5o=o("RoFormerModel"),u5o=o(" (RoFormer model)"),b5o=l(),pu=a("li"),Dfe=a("strong"),v5o=o("segformer"),F5o=o(" \u2014 "),AD=a("a"),T5o=o("SegformerModel"),M5o=o(" (SegFormer model)"),E5o=l(),_u=a("li"),Gfe=a("strong"),C5o=o("sew"),w5o=o(" \u2014 "),LD=a("a"),A5o=o("SEWModel"),L5o=o(" (SEW model)"),y5o=l(),uu=a("li"),Ofe=a("strong"),x5o=o("sew-d"),$5o=o(" \u2014 "),yD=a("a"),k5o=o("SEWDModel"),S5o=o(" (SEW-D model)"),R5o=l(),bu=a("li"),Vfe=a("strong"),P5o=o("speech_to_text"),B5o=o(" \u2014 "),xD=a("a"),I5o=o("Speech2TextModel"),N5o=o(" (Speech2Text model)"),q5o=l(),vu=a("li"),Xfe=a("strong"),j5o=o("splinter"),D5o=o(" \u2014 "),$D=a("a"),G5o=o("SplinterModel"),O5o=o(" (Splinter model)"),V5o=l(),Fu=a("li"),zfe=a("strong"),X5o=o("squeezebert"),z5o=o(" \u2014 "),kD=a("a"),Q5o=o("SqueezeBertModel"),W5o=o(" (SqueezeBERT model)"),H5o=l(),Tu=a("li"),Qfe=a("strong"),U5o=o("swin"),J5o=o(" \u2014 "),SD=a("a"),Y5o=o("SwinModel"),K5o=o(" (Swin Transformer model)"),Z5o=l(),Mu=a("li"),Wfe=a("strong"),ewo=o("t5"),owo=o(" \u2014 "),RD=a("a"),rwo=o("T5Model"),two=o(" (T5 model)"),awo=l(),Eu=a("li"),Hfe=a("strong"),nwo=o("tapas"),swo=o(" \u2014 "),PD=a("a"),lwo=o("TapasModel"),iwo=o(" (TAPAS model)"),dwo=l(),Cu=a("li"),Ufe=a("strong"),cwo=o("trajectory_transformer"),fwo=o(" \u2014 "),BD=a("a"),mwo=o("TrajectoryTransformerModel"),gwo=o(" (Trajectory Transformer model)"),hwo=l(),wu=a("li"),Jfe=a("strong"),pwo=o("transfo-xl"),_wo=o(" \u2014 "),ID=a("a"),uwo=o("TransfoXLModel"),bwo=o(" (Transformer-XL model)"),vwo=l(),Au=a("li"),Yfe=a("strong"),Fwo=o("unispeech"),Two=o(" \u2014 "),ND=a("a"),Mwo=o("UniSpeechModel"),Ewo=o(" (UniSpeech model)"),Cwo=l(),Lu=a("li"),Kfe=a("strong"),wwo=o("unispeech-sat"),Awo=o(" \u2014 "),qD=a("a"),Lwo=o("UniSpeechSatModel"),ywo=o(" (UniSpeechSat model)"),xwo=l(),yu=a("li"),Zfe=a("strong"),$wo=o("van"),kwo=o(" \u2014 "),jD=a("a"),Swo=o("VanModel"),Rwo=o(" (VAN model)"),Pwo=l(),xu=a("li"),eme=a("strong"),Bwo=o("vilt"),Iwo=o(" \u2014 "),DD=a("a"),Nwo=o("ViltModel"),qwo=o(" (ViLT model)"),jwo=l(),$u=a("li"),ome=a("strong"),Dwo=o("vision-text-dual-encoder"),Gwo=o(" \u2014 "),GD=a("a"),Owo=o("VisionTextDualEncoderModel"),Vwo=o(" (VisionTextDualEncoder model)"),Xwo=l(),ku=a("li"),rme=a("strong"),zwo=o("visual_bert"),Qwo=o(" \u2014 "),OD=a("a"),Wwo=o("VisualBertModel"),Hwo=o(" (VisualBERT model)"),Uwo=l(),Su=a("li"),tme=a("strong"),Jwo=o("vit"),Ywo=o(" \u2014 "),VD=a("a"),Kwo=o("ViTModel"),Zwo=o(" (ViT model)"),eAo=l(),Ru=a("li"),ame=a("strong"),oAo=o("vit_mae"),rAo=o(" \u2014 "),XD=a("a"),tAo=o("ViTMAEModel"),aAo=o(" (ViTMAE model)"),nAo=l(),Pu=a("li"),nme=a("strong"),sAo=o("wav2vec2"),lAo=o(" \u2014 "),zD=a("a"),iAo=o("Wav2Vec2Model"),dAo=o(" (Wav2Vec2 model)"),cAo=l(),Bu=a("li"),sme=a("strong"),fAo=o("wav2vec2-conformer"),mAo=o(" \u2014 "),QD=a("a"),gAo=o("Wav2Vec2ConformerModel"),hAo=o(" (Wav2Vec2-Conformer model)"),pAo=l(),Iu=a("li"),lme=a("strong"),_Ao=o("wavlm"),uAo=o(" \u2014 "),WD=a("a"),bAo=o("WavLMModel"),vAo=o(" (WavLM model)"),FAo=l(),Nu=a("li"),ime=a("strong"),TAo=o("xglm"),MAo=o(" \u2014 "),HD=a("a"),EAo=o("XGLMModel"),CAo=o(" (XGLM model)"),wAo=l(),qu=a("li"),dme=a("strong"),AAo=o("xlm"),LAo=o(" \u2014 "),UD=a("a"),yAo=o("XLMModel"),xAo=o(" (XLM model)"),$Ao=l(),ju=a("li"),cme=a("strong"),kAo=o("xlm-prophetnet"),SAo=o(" \u2014 "),JD=a("a"),RAo=o("XLMProphetNetModel"),PAo=o(" (XLM-ProphetNet model)"),BAo=l(),Du=a("li"),fme=a("strong"),IAo=o("xlm-roberta"),NAo=o(" \u2014 "),YD=a("a"),qAo=o("XLMRobertaModel"),jAo=o(" (XLM-RoBERTa model)"),DAo=l(),Gu=a("li"),mme=a("strong"),GAo=o("xlm-roberta-xl"),OAo=o(" \u2014 "),KD=a("a"),VAo=o("XLMRobertaXLModel"),XAo=o(" (XLM-RoBERTa-XL model)"),zAo=l(),Ou=a("li"),gme=a("strong"),QAo=o("xlnet"),WAo=o(" \u2014 "),ZD=a("a"),HAo=o("XLNetModel"),UAo=o(" (XLNet model)"),JAo=l(),Vu=a("li"),hme=a("strong"),YAo=o("yolos"),KAo=o(" \u2014 "),eG=a("a"),ZAo=o("YolosModel"),e6o=o(" (YOLOS model)"),o6o=l(),Xu=a("li"),pme=a("strong"),r6o=o("yoso"),t6o=o(" \u2014 "),oG=a("a"),a6o=o("YosoModel"),n6o=o(" (YOSO model)"),s6o=l(),zu=a("p"),l6o=o("The model is set in evaluation mode by default using "),_me=a("code"),i6o=o("model.eval()"),d6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=a("code"),c6o=o("model.train()"),f6o=l(),F(Qu.$$.fragment),FXe=l(),Xi=a("h2"),Wu=a("a"),bme=a("span"),F(NL.$$.fragment),m6o=l(),vme=a("span"),g6o=o("AutoModelForPreTraining"),TXe=l(),ko=a("div"),F(qL.$$.fragment),h6o=l(),zi=a("p"),p6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rG=a("a"),_6o=o("from_pretrained()"),u6o=o(" class method or the "),tG=a("a"),b6o=o("from_config()"),v6o=o(` class
method.`),F6o=l(),jL=a("p"),T6o=o("This class cannot be instantiated directly using "),Fme=a("code"),M6o=o("__init__()"),E6o=o(" (throws an error)."),C6o=l(),dt=a("div"),F(DL.$$.fragment),w6o=l(),Tme=a("p"),A6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L6o=l(),Qi=a("p"),y6o=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),x6o=o("not"),$6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),k6o=o("from_pretrained()"),S6o=o(" to load the model weights."),R6o=l(),F(Hu.$$.fragment),P6o=l(),Ke=a("div"),F(GL.$$.fragment),B6o=l(),Eme=a("p"),I6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N6o=l(),Na=a("p"),q6o=o("The model class to instantiate is selected based on the "),Cme=a("code"),j6o=o("model_type"),D6o=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),G6o=o("pretrained_model_name_or_path"),O6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),V6o=o("pretrained_model_name_or_path"),X6o=o(":"),z6o=l(),G=a("ul"),Uu=a("li"),Lme=a("strong"),Q6o=o("albert"),W6o=o(" \u2014 "),nG=a("a"),H6o=o("AlbertForPreTraining"),U6o=o(" (ALBERT model)"),J6o=l(),Ju=a("li"),yme=a("strong"),Y6o=o("bart"),K6o=o(" \u2014 "),sG=a("a"),Z6o=o("BartForConditionalGeneration"),e7o=o(" (BART model)"),o7o=l(),Yu=a("li"),xme=a("strong"),r7o=o("bert"),t7o=o(" \u2014 "),lG=a("a"),a7o=o("BertForPreTraining"),n7o=o(" (BERT model)"),s7o=l(),Ku=a("li"),$me=a("strong"),l7o=o("big_bird"),i7o=o(" \u2014 "),iG=a("a"),d7o=o("BigBirdForPreTraining"),c7o=o(" (BigBird model)"),f7o=l(),Zu=a("li"),kme=a("strong"),m7o=o("bloom"),g7o=o(" \u2014 "),dG=a("a"),h7o=o("BloomForCausalLM"),p7o=o(" (BLOOM model)"),_7o=l(),e2=a("li"),Sme=a("strong"),u7o=o("camembert"),b7o=o(" \u2014 "),cG=a("a"),v7o=o("CamembertForMaskedLM"),F7o=o(" (CamemBERT model)"),T7o=l(),o2=a("li"),Rme=a("strong"),M7o=o("ctrl"),E7o=o(" \u2014 "),fG=a("a"),C7o=o("CTRLLMHeadModel"),w7o=o(" (CTRL model)"),A7o=l(),r2=a("li"),Pme=a("strong"),L7o=o("data2vec-text"),y7o=o(" \u2014 "),mG=a("a"),x7o=o("Data2VecTextForMaskedLM"),$7o=o(" (Data2VecText model)"),k7o=l(),t2=a("li"),Bme=a("strong"),S7o=o("deberta"),R7o=o(" \u2014 "),gG=a("a"),P7o=o("DebertaForMaskedLM"),B7o=o(" (DeBERTa model)"),I7o=l(),a2=a("li"),Ime=a("strong"),N7o=o("deberta-v2"),q7o=o(" \u2014 "),hG=a("a"),j7o=o("DebertaV2ForMaskedLM"),D7o=o(" (DeBERTa-v2 model)"),G7o=l(),n2=a("li"),Nme=a("strong"),O7o=o("distilbert"),V7o=o(" \u2014 "),pG=a("a"),X7o=o("DistilBertForMaskedLM"),z7o=o(" (DistilBERT model)"),Q7o=l(),s2=a("li"),qme=a("strong"),W7o=o("electra"),H7o=o(" \u2014 "),_G=a("a"),U7o=o("ElectraForPreTraining"),J7o=o(" (ELECTRA model)"),Y7o=l(),l2=a("li"),jme=a("strong"),K7o=o("flaubert"),Z7o=o(" \u2014 "),uG=a("a"),eLo=o("FlaubertWithLMHeadModel"),oLo=o(" (FlauBERT model)"),rLo=l(),i2=a("li"),Dme=a("strong"),tLo=o("flava"),aLo=o(" \u2014 "),bG=a("a"),nLo=o("FlavaForPreTraining"),sLo=o(" (FLAVA model)"),lLo=l(),d2=a("li"),Gme=a("strong"),iLo=o("fnet"),dLo=o(" \u2014 "),vG=a("a"),cLo=o("FNetForPreTraining"),fLo=o(" (FNet model)"),mLo=l(),c2=a("li"),Ome=a("strong"),gLo=o("fsmt"),hLo=o(" \u2014 "),FG=a("a"),pLo=o("FSMTForConditionalGeneration"),_Lo=o(" (FairSeq Machine-Translation model)"),uLo=l(),f2=a("li"),Vme=a("strong"),bLo=o("funnel"),vLo=o(" \u2014 "),TG=a("a"),FLo=o("FunnelForPreTraining"),TLo=o(" (Funnel Transformer model)"),MLo=l(),m2=a("li"),Xme=a("strong"),ELo=o("gpt2"),CLo=o(" \u2014 "),MG=a("a"),wLo=o("GPT2LMHeadModel"),ALo=o(" (OpenAI GPT-2 model)"),LLo=l(),g2=a("li"),zme=a("strong"),yLo=o("ibert"),xLo=o(" \u2014 "),EG=a("a"),$Lo=o("IBertForMaskedLM"),kLo=o(" (I-BERT model)"),SLo=l(),h2=a("li"),Qme=a("strong"),RLo=o("layoutlm"),PLo=o(" \u2014 "),CG=a("a"),BLo=o("LayoutLMForMaskedLM"),ILo=o(" (LayoutLM model)"),NLo=l(),p2=a("li"),Wme=a("strong"),qLo=o("longformer"),jLo=o(" \u2014 "),wG=a("a"),DLo=o("LongformerForMaskedLM"),GLo=o(" (Longformer model)"),OLo=l(),_2=a("li"),Hme=a("strong"),VLo=o("lxmert"),XLo=o(" \u2014 "),AG=a("a"),zLo=o("LxmertForPreTraining"),QLo=o(" (LXMERT model)"),WLo=l(),u2=a("li"),Ume=a("strong"),HLo=o("megatron-bert"),ULo=o(" \u2014 "),LG=a("a"),JLo=o("MegatronBertForPreTraining"),YLo=o(" (Megatron-BERT model)"),KLo=l(),b2=a("li"),Jme=a("strong"),ZLo=o("mobilebert"),eyo=o(" \u2014 "),yG=a("a"),oyo=o("MobileBertForPreTraining"),ryo=o(" (MobileBERT model)"),tyo=l(),v2=a("li"),Yme=a("strong"),ayo=o("mpnet"),nyo=o(" \u2014 "),xG=a("a"),syo=o("MPNetForMaskedLM"),lyo=o(" (MPNet model)"),iyo=l(),F2=a("li"),Kme=a("strong"),dyo=o("mvp"),cyo=o(" \u2014 "),$G=a("a"),fyo=o("MvpForConditionalGeneration"),myo=o(" (MVP model)"),gyo=l(),T2=a("li"),Zme=a("strong"),hyo=o("nezha"),pyo=o(" \u2014 "),kG=a("a"),_yo=o("NezhaForPreTraining"),uyo=o(" (Nezha model)"),byo=l(),M2=a("li"),ege=a("strong"),vyo=o("openai-gpt"),Fyo=o(" \u2014 "),SG=a("a"),Tyo=o("OpenAIGPTLMHeadModel"),Myo=o(" (OpenAI GPT model)"),Eyo=l(),E2=a("li"),oge=a("strong"),Cyo=o("retribert"),wyo=o(" \u2014 "),RG=a("a"),Ayo=o("RetriBertModel"),Lyo=o(" (RetriBERT model)"),yyo=l(),C2=a("li"),rge=a("strong"),xyo=o("roberta"),$yo=o(" \u2014 "),PG=a("a"),kyo=o("RobertaForMaskedLM"),Syo=o(" (RoBERTa model)"),Ryo=l(),w2=a("li"),tge=a("strong"),Pyo=o("splinter"),Byo=o(" \u2014 "),BG=a("a"),Iyo=o("SplinterForPreTraining"),Nyo=o(" (Splinter model)"),qyo=l(),A2=a("li"),age=a("strong"),jyo=o("squeezebert"),Dyo=o(" \u2014 "),IG=a("a"),Gyo=o("SqueezeBertForMaskedLM"),Oyo=o(" (SqueezeBERT model)"),Vyo=l(),L2=a("li"),nge=a("strong"),Xyo=o("t5"),zyo=o(" \u2014 "),NG=a("a"),Qyo=o("T5ForConditionalGeneration"),Wyo=o(" (T5 model)"),Hyo=l(),y2=a("li"),sge=a("strong"),Uyo=o("tapas"),Jyo=o(" \u2014 "),qG=a("a"),Yyo=o("TapasForMaskedLM"),Kyo=o(" (TAPAS model)"),Zyo=l(),x2=a("li"),lge=a("strong"),e9o=o("transfo-xl"),o9o=o(" \u2014 "),jG=a("a"),r9o=o("TransfoXLLMHeadModel"),t9o=o(" (Transformer-XL model)"),a9o=l(),$2=a("li"),ige=a("strong"),n9o=o("unispeech"),s9o=o(" \u2014 "),DG=a("a"),l9o=o("UniSpeechForPreTraining"),i9o=o(" (UniSpeech model)"),d9o=l(),k2=a("li"),dge=a("strong"),c9o=o("unispeech-sat"),f9o=o(" \u2014 "),GG=a("a"),m9o=o("UniSpeechSatForPreTraining"),g9o=o(" (UniSpeechSat model)"),h9o=l(),S2=a("li"),cge=a("strong"),p9o=o("visual_bert"),_9o=o(" \u2014 "),OG=a("a"),u9o=o("VisualBertForPreTraining"),b9o=o(" (VisualBERT model)"),v9o=l(),R2=a("li"),fge=a("strong"),F9o=o("vit_mae"),T9o=o(" \u2014 "),VG=a("a"),M9o=o("ViTMAEForPreTraining"),E9o=o(" (ViTMAE model)"),C9o=l(),P2=a("li"),mge=a("strong"),w9o=o("wav2vec2"),A9o=o(" \u2014 "),XG=a("a"),L9o=o("Wav2Vec2ForPreTraining"),y9o=o(" (Wav2Vec2 model)"),x9o=l(),B2=a("li"),gge=a("strong"),$9o=o("wav2vec2-conformer"),k9o=o(" \u2014 "),zG=a("a"),S9o=o("Wav2Vec2ConformerForPreTraining"),R9o=o(" (Wav2Vec2-Conformer model)"),P9o=l(),I2=a("li"),hge=a("strong"),B9o=o("xlm"),I9o=o(" \u2014 "),QG=a("a"),N9o=o("XLMWithLMHeadModel"),q9o=o(" (XLM model)"),j9o=l(),N2=a("li"),pge=a("strong"),D9o=o("xlm-roberta"),G9o=o(" \u2014 "),WG=a("a"),O9o=o("XLMRobertaForMaskedLM"),V9o=o(" (XLM-RoBERTa model)"),X9o=l(),q2=a("li"),_ge=a("strong"),z9o=o("xlm-roberta-xl"),Q9o=o(" \u2014 "),HG=a("a"),W9o=o("XLMRobertaXLForMaskedLM"),H9o=o(" (XLM-RoBERTa-XL model)"),U9o=l(),j2=a("li"),uge=a("strong"),J9o=o("xlnet"),Y9o=o(" \u2014 "),UG=a("a"),K9o=o("XLNetLMHeadModel"),Z9o=o(" (XLNet model)"),exo=l(),D2=a("p"),oxo=o("The model is set in evaluation mode by default using "),bge=a("code"),rxo=o("model.eval()"),txo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=a("code"),axo=o("model.train()"),nxo=l(),F(G2.$$.fragment),MXe=l(),Wi=a("h2"),O2=a("a"),Fge=a("span"),F(OL.$$.fragment),sxo=l(),Tge=a("span"),lxo=o("AutoModelForCausalLM"),EXe=l(),So=a("div"),F(VL.$$.fragment),ixo=l(),Hi=a("p"),dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JG=a("a"),cxo=o("from_pretrained()"),fxo=o(" class method or the "),YG=a("a"),mxo=o("from_config()"),gxo=o(` class
method.`),hxo=l(),XL=a("p"),pxo=o("This class cannot be instantiated directly using "),Mge=a("code"),_xo=o("__init__()"),uxo=o(" (throws an error)."),bxo=l(),ct=a("div"),F(zL.$$.fragment),vxo=l(),Ege=a("p"),Fxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Txo=l(),Ui=a("p"),Mxo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),Exo=o("not"),Cxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),wxo=o("from_pretrained()"),Axo=o(" to load the model weights."),Lxo=l(),F(V2.$$.fragment),yxo=l(),Ze=a("div"),F(QL.$$.fragment),xxo=l(),wge=a("p"),$xo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kxo=l(),qa=a("p"),Sxo=o("The model class to instantiate is selected based on the "),Age=a("code"),Rxo=o("model_type"),Pxo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),Bxo=o("pretrained_model_name_or_path"),Ixo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),Nxo=o("pretrained_model_name_or_path"),qxo=o(":"),jxo=l(),z=a("ul"),X2=a("li"),xge=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),ZG=a("a"),Oxo=o("BartForCausalLM"),Vxo=o(" (BART model)"),Xxo=l(),z2=a("li"),$ge=a("strong"),zxo=o("bert"),Qxo=o(" \u2014 "),eO=a("a"),Wxo=o("BertLMHeadModel"),Hxo=o(" (BERT model)"),Uxo=l(),Q2=a("li"),kge=a("strong"),Jxo=o("bert-generation"),Yxo=o(" \u2014 "),oO=a("a"),Kxo=o("BertGenerationDecoder"),Zxo=o(" (Bert Generation model)"),e$o=l(),W2=a("li"),Sge=a("strong"),o$o=o("big_bird"),r$o=o(" \u2014 "),rO=a("a"),t$o=o("BigBirdForCausalLM"),a$o=o(" (BigBird model)"),n$o=l(),H2=a("li"),Rge=a("strong"),s$o=o("bigbird_pegasus"),l$o=o(" \u2014 "),tO=a("a"),i$o=o("BigBirdPegasusForCausalLM"),d$o=o(" (BigBird-Pegasus model)"),c$o=l(),U2=a("li"),Pge=a("strong"),f$o=o("blenderbot"),m$o=o(" \u2014 "),aO=a("a"),g$o=o("BlenderbotForCausalLM"),h$o=o(" (Blenderbot model)"),p$o=l(),J2=a("li"),Bge=a("strong"),_$o=o("blenderbot-small"),u$o=o(" \u2014 "),nO=a("a"),b$o=o("BlenderbotSmallForCausalLM"),v$o=o(" (BlenderbotSmall model)"),F$o=l(),Y2=a("li"),Ige=a("strong"),T$o=o("bloom"),M$o=o(" \u2014 "),sO=a("a"),E$o=o("BloomForCausalLM"),C$o=o(" (BLOOM model)"),w$o=l(),K2=a("li"),Nge=a("strong"),A$o=o("camembert"),L$o=o(" \u2014 "),lO=a("a"),y$o=o("CamembertForCausalLM"),x$o=o(" (CamemBERT model)"),$$o=l(),Z2=a("li"),qge=a("strong"),k$o=o("codegen"),S$o=o(" \u2014 "),iO=a("a"),R$o=o("CodeGenForCausalLM"),P$o=o(" (CodeGen model)"),B$o=l(),e1=a("li"),jge=a("strong"),I$o=o("ctrl"),N$o=o(" \u2014 "),dO=a("a"),q$o=o("CTRLLMHeadModel"),j$o=o(" (CTRL model)"),D$o=l(),o1=a("li"),Dge=a("strong"),G$o=o("data2vec-text"),O$o=o(" \u2014 "),cO=a("a"),V$o=o("Data2VecTextForCausalLM"),X$o=o(" (Data2VecText model)"),z$o=l(),r1=a("li"),Gge=a("strong"),Q$o=o("electra"),W$o=o(" \u2014 "),fO=a("a"),H$o=o("ElectraForCausalLM"),U$o=o(" (ELECTRA model)"),J$o=l(),t1=a("li"),Oge=a("strong"),Y$o=o("gpt2"),K$o=o(" \u2014 "),mO=a("a"),Z$o=o("GPT2LMHeadModel"),eko=o(" (OpenAI GPT-2 model)"),oko=l(),a1=a("li"),Vge=a("strong"),rko=o("gpt_neo"),tko=o(" \u2014 "),gO=a("a"),ako=o("GPTNeoForCausalLM"),nko=o(" (GPT Neo model)"),sko=l(),n1=a("li"),Xge=a("strong"),lko=o("gpt_neox"),iko=o(" \u2014 "),hO=a("a"),dko=o("GPTNeoXForCausalLM"),cko=o(" (GPT NeoX model)"),fko=l(),s1=a("li"),zge=a("strong"),mko=o("gptj"),gko=o(" \u2014 "),pO=a("a"),hko=o("GPTJForCausalLM"),pko=o(" (GPT-J model)"),_ko=l(),l1=a("li"),Qge=a("strong"),uko=o("marian"),bko=o(" \u2014 "),_O=a("a"),vko=o("MarianForCausalLM"),Fko=o(" (Marian model)"),Tko=l(),i1=a("li"),Wge=a("strong"),Mko=o("mbart"),Eko=o(" \u2014 "),uO=a("a"),Cko=o("MBartForCausalLM"),wko=o(" (mBART model)"),Ako=l(),d1=a("li"),Hge=a("strong"),Lko=o("megatron-bert"),yko=o(" \u2014 "),bO=a("a"),xko=o("MegatronBertForCausalLM"),$ko=o(" (Megatron-BERT model)"),kko=l(),c1=a("li"),Uge=a("strong"),Sko=o("mvp"),Rko=o(" \u2014 "),vO=a("a"),Pko=o("MvpForCausalLM"),Bko=o(" (MVP model)"),Iko=l(),f1=a("li"),Jge=a("strong"),Nko=o("openai-gpt"),qko=o(" \u2014 "),FO=a("a"),jko=o("OpenAIGPTLMHeadModel"),Dko=o(" (OpenAI GPT model)"),Gko=l(),m1=a("li"),Yge=a("strong"),Oko=o("opt"),Vko=o(" \u2014 "),TO=a("a"),Xko=o("OPTForCausalLM"),zko=o(" (OPT model)"),Qko=l(),g1=a("li"),Kge=a("strong"),Wko=o("pegasus"),Hko=o(" \u2014 "),MO=a("a"),Uko=o("PegasusForCausalLM"),Jko=o(" (Pegasus model)"),Yko=l(),h1=a("li"),Zge=a("strong"),Kko=o("plbart"),Zko=o(" \u2014 "),EO=a("a"),eSo=o("PLBartForCausalLM"),oSo=o(" (PLBart model)"),rSo=l(),p1=a("li"),ehe=a("strong"),tSo=o("prophetnet"),aSo=o(" \u2014 "),CO=a("a"),nSo=o("ProphetNetForCausalLM"),sSo=o(" (ProphetNet model)"),lSo=l(),_1=a("li"),ohe=a("strong"),iSo=o("qdqbert"),dSo=o(" \u2014 "),wO=a("a"),cSo=o("QDQBertLMHeadModel"),fSo=o(" (QDQBert model)"),mSo=l(),u1=a("li"),rhe=a("strong"),gSo=o("reformer"),hSo=o(" \u2014 "),AO=a("a"),pSo=o("ReformerModelWithLMHead"),_So=o(" (Reformer model)"),uSo=l(),b1=a("li"),the=a("strong"),bSo=o("rembert"),vSo=o(" \u2014 "),LO=a("a"),FSo=o("RemBertForCausalLM"),TSo=o(" (RemBERT model)"),MSo=l(),v1=a("li"),ahe=a("strong"),ESo=o("roberta"),CSo=o(" \u2014 "),yO=a("a"),wSo=o("RobertaForCausalLM"),ASo=o(" (RoBERTa model)"),LSo=l(),F1=a("li"),nhe=a("strong"),ySo=o("roformer"),xSo=o(" \u2014 "),xO=a("a"),$So=o("RoFormerForCausalLM"),kSo=o(" (RoFormer model)"),SSo=l(),T1=a("li"),she=a("strong"),RSo=o("speech_to_text_2"),PSo=o(" \u2014 "),$O=a("a"),BSo=o("Speech2Text2ForCausalLM"),ISo=o(" (Speech2Text2 model)"),NSo=l(),M1=a("li"),lhe=a("strong"),qSo=o("transfo-xl"),jSo=o(" \u2014 "),kO=a("a"),DSo=o("TransfoXLLMHeadModel"),GSo=o(" (Transformer-XL model)"),OSo=l(),E1=a("li"),ihe=a("strong"),VSo=o("trocr"),XSo=o(" \u2014 "),SO=a("a"),zSo=o("TrOCRForCausalLM"),QSo=o(" (TrOCR model)"),WSo=l(),C1=a("li"),dhe=a("strong"),HSo=o("xglm"),USo=o(" \u2014 "),RO=a("a"),JSo=o("XGLMForCausalLM"),YSo=o(" (XGLM model)"),KSo=l(),w1=a("li"),che=a("strong"),ZSo=o("xlm"),eRo=o(" \u2014 "),PO=a("a"),oRo=o("XLMWithLMHeadModel"),rRo=o(" (XLM model)"),tRo=l(),A1=a("li"),fhe=a("strong"),aRo=o("xlm-prophetnet"),nRo=o(" \u2014 "),BO=a("a"),sRo=o("XLMProphetNetForCausalLM"),lRo=o(" (XLM-ProphetNet model)"),iRo=l(),L1=a("li"),mhe=a("strong"),dRo=o("xlm-roberta"),cRo=o(" \u2014 "),IO=a("a"),fRo=o("XLMRobertaForCausalLM"),mRo=o(" (XLM-RoBERTa model)"),gRo=l(),y1=a("li"),ghe=a("strong"),hRo=o("xlm-roberta-xl"),pRo=o(" \u2014 "),NO=a("a"),_Ro=o("XLMRobertaXLForCausalLM"),uRo=o(" (XLM-RoBERTa-XL model)"),bRo=l(),x1=a("li"),hhe=a("strong"),vRo=o("xlnet"),FRo=o(" \u2014 "),qO=a("a"),TRo=o("XLNetLMHeadModel"),MRo=o(" (XLNet model)"),ERo=l(),$1=a("p"),CRo=o("The model is set in evaluation mode by default using "),phe=a("code"),wRo=o("model.eval()"),ARo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),LRo=o("model.train()"),yRo=l(),F(k1.$$.fragment),CXe=l(),Ji=a("h2"),S1=a("a"),uhe=a("span"),F(WL.$$.fragment),xRo=l(),bhe=a("span"),$Ro=o("AutoModelForMaskedLM"),wXe=l(),Ro=a("div"),F(HL.$$.fragment),kRo=l(),Yi=a("p"),SRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jO=a("a"),RRo=o("from_pretrained()"),PRo=o(" class method or the "),DO=a("a"),BRo=o("from_config()"),IRo=o(` class
method.`),NRo=l(),UL=a("p"),qRo=o("This class cannot be instantiated directly using "),vhe=a("code"),jRo=o("__init__()"),DRo=o(" (throws an error)."),GRo=l(),ft=a("div"),F(JL.$$.fragment),ORo=l(),Fhe=a("p"),VRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XRo=l(),Ki=a("p"),zRo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),QRo=o("not"),WRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),HRo=o("from_pretrained()"),URo=o(" to load the model weights."),JRo=l(),F(R1.$$.fragment),YRo=l(),eo=a("div"),F(YL.$$.fragment),KRo=l(),Mhe=a("p"),ZRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ePo=l(),ja=a("p"),oPo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),rPo=o("model_type"),tPo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),aPo=o("pretrained_model_name_or_path"),nPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(":"),iPo=l(),W=a("ul"),P1=a("li"),Ahe=a("strong"),dPo=o("albert"),cPo=o(" \u2014 "),OO=a("a"),fPo=o("AlbertForMaskedLM"),mPo=o(" (ALBERT model)"),gPo=l(),B1=a("li"),Lhe=a("strong"),hPo=o("bart"),pPo=o(" \u2014 "),VO=a("a"),_Po=o("BartForConditionalGeneration"),uPo=o(" (BART model)"),bPo=l(),I1=a("li"),yhe=a("strong"),vPo=o("bert"),FPo=o(" \u2014 "),XO=a("a"),TPo=o("BertForMaskedLM"),MPo=o(" (BERT model)"),EPo=l(),N1=a("li"),xhe=a("strong"),CPo=o("big_bird"),wPo=o(" \u2014 "),zO=a("a"),APo=o("BigBirdForMaskedLM"),LPo=o(" (BigBird model)"),yPo=l(),q1=a("li"),$he=a("strong"),xPo=o("camembert"),$Po=o(" \u2014 "),QO=a("a"),kPo=o("CamembertForMaskedLM"),SPo=o(" (CamemBERT model)"),RPo=l(),j1=a("li"),khe=a("strong"),PPo=o("convbert"),BPo=o(" \u2014 "),WO=a("a"),IPo=o("ConvBertForMaskedLM"),NPo=o(" (ConvBERT model)"),qPo=l(),D1=a("li"),She=a("strong"),jPo=o("data2vec-text"),DPo=o(" \u2014 "),HO=a("a"),GPo=o("Data2VecTextForMaskedLM"),OPo=o(" (Data2VecText model)"),VPo=l(),G1=a("li"),Rhe=a("strong"),XPo=o("deberta"),zPo=o(" \u2014 "),UO=a("a"),QPo=o("DebertaForMaskedLM"),WPo=o(" (DeBERTa model)"),HPo=l(),O1=a("li"),Phe=a("strong"),UPo=o("deberta-v2"),JPo=o(" \u2014 "),JO=a("a"),YPo=o("DebertaV2ForMaskedLM"),KPo=o(" (DeBERTa-v2 model)"),ZPo=l(),V1=a("li"),Bhe=a("strong"),eBo=o("distilbert"),oBo=o(" \u2014 "),YO=a("a"),rBo=o("DistilBertForMaskedLM"),tBo=o(" (DistilBERT model)"),aBo=l(),X1=a("li"),Ihe=a("strong"),nBo=o("electra"),sBo=o(" \u2014 "),KO=a("a"),lBo=o("ElectraForMaskedLM"),iBo=o(" (ELECTRA model)"),dBo=l(),z1=a("li"),Nhe=a("strong"),cBo=o("flaubert"),fBo=o(" \u2014 "),ZO=a("a"),mBo=o("FlaubertWithLMHeadModel"),gBo=o(" (FlauBERT model)"),hBo=l(),Q1=a("li"),qhe=a("strong"),pBo=o("fnet"),_Bo=o(" \u2014 "),eV=a("a"),uBo=o("FNetForMaskedLM"),bBo=o(" (FNet model)"),vBo=l(),W1=a("li"),jhe=a("strong"),FBo=o("funnel"),TBo=o(" \u2014 "),oV=a("a"),MBo=o("FunnelForMaskedLM"),EBo=o(" (Funnel Transformer model)"),CBo=l(),H1=a("li"),Dhe=a("strong"),wBo=o("ibert"),ABo=o(" \u2014 "),rV=a("a"),LBo=o("IBertForMaskedLM"),yBo=o(" (I-BERT model)"),xBo=l(),U1=a("li"),Ghe=a("strong"),$Bo=o("layoutlm"),kBo=o(" \u2014 "),tV=a("a"),SBo=o("LayoutLMForMaskedLM"),RBo=o(" (LayoutLM model)"),PBo=l(),J1=a("li"),Ohe=a("strong"),BBo=o("longformer"),IBo=o(" \u2014 "),aV=a("a"),NBo=o("LongformerForMaskedLM"),qBo=o(" (Longformer model)"),jBo=l(),Y1=a("li"),Vhe=a("strong"),DBo=o("luke"),GBo=o(" \u2014 "),nV=a("a"),OBo=o("LukeForMaskedLM"),VBo=o(" (LUKE model)"),XBo=l(),K1=a("li"),Xhe=a("strong"),zBo=o("mbart"),QBo=o(" \u2014 "),sV=a("a"),WBo=o("MBartForConditionalGeneration"),HBo=o(" (mBART model)"),UBo=l(),Z1=a("li"),zhe=a("strong"),JBo=o("megatron-bert"),YBo=o(" \u2014 "),lV=a("a"),KBo=o("MegatronBertForMaskedLM"),ZBo=o(" (Megatron-BERT model)"),eIo=l(),eb=a("li"),Qhe=a("strong"),oIo=o("mobilebert"),rIo=o(" \u2014 "),iV=a("a"),tIo=o("MobileBertForMaskedLM"),aIo=o(" (MobileBERT model)"),nIo=l(),ob=a("li"),Whe=a("strong"),sIo=o("mpnet"),lIo=o(" \u2014 "),dV=a("a"),iIo=o("MPNetForMaskedLM"),dIo=o(" (MPNet model)"),cIo=l(),rb=a("li"),Hhe=a("strong"),fIo=o("mvp"),mIo=o(" \u2014 "),cV=a("a"),gIo=o("MvpForConditionalGeneration"),hIo=o(" (MVP model)"),pIo=l(),tb=a("li"),Uhe=a("strong"),_Io=o("nezha"),uIo=o(" \u2014 "),fV=a("a"),bIo=o("NezhaForMaskedLM"),vIo=o(" (Nezha model)"),FIo=l(),ab=a("li"),Jhe=a("strong"),TIo=o("nystromformer"),MIo=o(" \u2014 "),mV=a("a"),EIo=o("NystromformerForMaskedLM"),CIo=o(" (Nystr\xF6mformer model)"),wIo=l(),nb=a("li"),Yhe=a("strong"),AIo=o("perceiver"),LIo=o(" \u2014 "),gV=a("a"),yIo=o("PerceiverForMaskedLM"),xIo=o(" (Perceiver model)"),$Io=l(),sb=a("li"),Khe=a("strong"),kIo=o("qdqbert"),SIo=o(" \u2014 "),hV=a("a"),RIo=o("QDQBertForMaskedLM"),PIo=o(" (QDQBert model)"),BIo=l(),lb=a("li"),Zhe=a("strong"),IIo=o("reformer"),NIo=o(" \u2014 "),pV=a("a"),qIo=o("ReformerForMaskedLM"),jIo=o(" (Reformer model)"),DIo=l(),ib=a("li"),epe=a("strong"),GIo=o("rembert"),OIo=o(" \u2014 "),_V=a("a"),VIo=o("RemBertForMaskedLM"),XIo=o(" (RemBERT model)"),zIo=l(),db=a("li"),ope=a("strong"),QIo=o("roberta"),WIo=o(" \u2014 "),uV=a("a"),HIo=o("RobertaForMaskedLM"),UIo=o(" (RoBERTa model)"),JIo=l(),cb=a("li"),rpe=a("strong"),YIo=o("roformer"),KIo=o(" \u2014 "),bV=a("a"),ZIo=o("RoFormerForMaskedLM"),eNo=o(" (RoFormer model)"),oNo=l(),fb=a("li"),tpe=a("strong"),rNo=o("squeezebert"),tNo=o(" \u2014 "),vV=a("a"),aNo=o("SqueezeBertForMaskedLM"),nNo=o(" (SqueezeBERT model)"),sNo=l(),mb=a("li"),ape=a("strong"),lNo=o("tapas"),iNo=o(" \u2014 "),FV=a("a"),dNo=o("TapasForMaskedLM"),cNo=o(" (TAPAS model)"),fNo=l(),gb=a("li"),npe=a("strong"),mNo=o("wav2vec2"),gNo=o(" \u2014 "),spe=a("code"),hNo=o("Wav2Vec2ForMaskedLM"),pNo=o(" (Wav2Vec2 model)"),_No=l(),hb=a("li"),lpe=a("strong"),uNo=o("xlm"),bNo=o(" \u2014 "),TV=a("a"),vNo=o("XLMWithLMHeadModel"),FNo=o(" (XLM model)"),TNo=l(),pb=a("li"),ipe=a("strong"),MNo=o("xlm-roberta"),ENo=o(" \u2014 "),MV=a("a"),CNo=o("XLMRobertaForMaskedLM"),wNo=o(" (XLM-RoBERTa model)"),ANo=l(),_b=a("li"),dpe=a("strong"),LNo=o("xlm-roberta-xl"),yNo=o(" \u2014 "),EV=a("a"),xNo=o("XLMRobertaXLForMaskedLM"),$No=o(" (XLM-RoBERTa-XL model)"),kNo=l(),ub=a("li"),cpe=a("strong"),SNo=o("yoso"),RNo=o(" \u2014 "),CV=a("a"),PNo=o("YosoForMaskedLM"),BNo=o(" (YOSO model)"),INo=l(),bb=a("p"),NNo=o("The model is set in evaluation mode by default using "),fpe=a("code"),qNo=o("model.eval()"),jNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),DNo=o("model.train()"),GNo=l(),F(vb.$$.fragment),AXe=l(),Zi=a("h2"),Fb=a("a"),gpe=a("span"),F(KL.$$.fragment),ONo=l(),hpe=a("span"),VNo=o("AutoModelForSeq2SeqLM"),LXe=l(),Po=a("div"),F(ZL.$$.fragment),XNo=l(),ed=a("p"),zNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wV=a("a"),QNo=o("from_pretrained()"),WNo=o(" class method or the "),AV=a("a"),HNo=o("from_config()"),UNo=o(` class
method.`),JNo=l(),ey=a("p"),YNo=o("This class cannot be instantiated directly using "),ppe=a("code"),KNo=o("__init__()"),ZNo=o(" (throws an error)."),eqo=l(),mt=a("div"),F(oy.$$.fragment),oqo=l(),_pe=a("p"),rqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tqo=l(),od=a("p"),aqo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),nqo=o("not"),sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),lqo=o("from_pretrained()"),iqo=o(" to load the model weights."),dqo=l(),F(Tb.$$.fragment),cqo=l(),oo=a("div"),F(ry.$$.fragment),fqo=l(),bpe=a("p"),mqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gqo=l(),Da=a("p"),hqo=o("The model class to instantiate is selected based on the "),vpe=a("code"),pqo=o("model_type"),_qo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),uqo=o("pretrained_model_name_or_path"),bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),vqo=o("pretrained_model_name_or_path"),Fqo=o(":"),Tqo=l(),pe=a("ul"),Mb=a("li"),Mpe=a("strong"),Mqo=o("bart"),Eqo=o(" \u2014 "),yV=a("a"),Cqo=o("BartForConditionalGeneration"),wqo=o(" (BART model)"),Aqo=l(),Eb=a("li"),Epe=a("strong"),Lqo=o("bigbird_pegasus"),yqo=o(" \u2014 "),xV=a("a"),xqo=o("BigBirdPegasusForConditionalGeneration"),$qo=o(" (BigBird-Pegasus model)"),kqo=l(),Cb=a("li"),Cpe=a("strong"),Sqo=o("blenderbot"),Rqo=o(" \u2014 "),$V=a("a"),Pqo=o("BlenderbotForConditionalGeneration"),Bqo=o(" (Blenderbot model)"),Iqo=l(),wb=a("li"),wpe=a("strong"),Nqo=o("blenderbot-small"),qqo=o(" \u2014 "),kV=a("a"),jqo=o("BlenderbotSmallForConditionalGeneration"),Dqo=o(" (BlenderbotSmall model)"),Gqo=l(),Ab=a("li"),Ape=a("strong"),Oqo=o("encoder-decoder"),Vqo=o(" \u2014 "),SV=a("a"),Xqo=o("EncoderDecoderModel"),zqo=o(" (Encoder decoder model)"),Qqo=l(),Lb=a("li"),Lpe=a("strong"),Wqo=o("fsmt"),Hqo=o(" \u2014 "),RV=a("a"),Uqo=o("FSMTForConditionalGeneration"),Jqo=o(" (FairSeq Machine-Translation model)"),Yqo=l(),yb=a("li"),ype=a("strong"),Kqo=o("led"),Zqo=o(" \u2014 "),PV=a("a"),ejo=o("LEDForConditionalGeneration"),ojo=o(" (LED model)"),rjo=l(),xb=a("li"),xpe=a("strong"),tjo=o("longt5"),ajo=o(" \u2014 "),BV=a("a"),njo=o("LongT5ForConditionalGeneration"),sjo=o(" (LongT5 model)"),ljo=l(),$b=a("li"),$pe=a("strong"),ijo=o("m2m_100"),djo=o(" \u2014 "),IV=a("a"),cjo=o("M2M100ForConditionalGeneration"),fjo=o(" (M2M100 model)"),mjo=l(),kb=a("li"),kpe=a("strong"),gjo=o("marian"),hjo=o(" \u2014 "),NV=a("a"),pjo=o("MarianMTModel"),_jo=o(" (Marian model)"),ujo=l(),Sb=a("li"),Spe=a("strong"),bjo=o("mbart"),vjo=o(" \u2014 "),qV=a("a"),Fjo=o("MBartForConditionalGeneration"),Tjo=o(" (mBART model)"),Mjo=l(),Rb=a("li"),Rpe=a("strong"),Ejo=o("mt5"),Cjo=o(" \u2014 "),jV=a("a"),wjo=o("MT5ForConditionalGeneration"),Ajo=o(" (MT5 model)"),Ljo=l(),Pb=a("li"),Ppe=a("strong"),yjo=o("mvp"),xjo=o(" \u2014 "),DV=a("a"),$jo=o("MvpForConditionalGeneration"),kjo=o(" (MVP model)"),Sjo=l(),Bb=a("li"),Bpe=a("strong"),Rjo=o("pegasus"),Pjo=o(" \u2014 "),GV=a("a"),Bjo=o("PegasusForConditionalGeneration"),Ijo=o(" (Pegasus model)"),Njo=l(),Ib=a("li"),Ipe=a("strong"),qjo=o("plbart"),jjo=o(" \u2014 "),OV=a("a"),Djo=o("PLBartForConditionalGeneration"),Gjo=o(" (PLBart model)"),Ojo=l(),Nb=a("li"),Npe=a("strong"),Vjo=o("prophetnet"),Xjo=o(" \u2014 "),VV=a("a"),zjo=o("ProphetNetForConditionalGeneration"),Qjo=o(" (ProphetNet model)"),Wjo=l(),qb=a("li"),qpe=a("strong"),Hjo=o("t5"),Ujo=o(" \u2014 "),XV=a("a"),Jjo=o("T5ForConditionalGeneration"),Yjo=o(" (T5 model)"),Kjo=l(),jb=a("li"),jpe=a("strong"),Zjo=o("xlm-prophetnet"),eDo=o(" \u2014 "),zV=a("a"),oDo=o("XLMProphetNetForConditionalGeneration"),rDo=o(" (XLM-ProphetNet model)"),tDo=l(),Db=a("p"),aDo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),lDo=o("model.train()"),iDo=l(),F(Gb.$$.fragment),yXe=l(),rd=a("h2"),Ob=a("a"),Ope=a("span"),F(ty.$$.fragment),dDo=l(),Vpe=a("span"),cDo=o("AutoModelForSequenceClassification"),xXe=l(),Bo=a("div"),F(ay.$$.fragment),fDo=l(),td=a("p"),mDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QV=a("a"),gDo=o("from_pretrained()"),hDo=o(" class method or the "),WV=a("a"),pDo=o("from_config()"),_Do=o(` class
method.`),uDo=l(),ny=a("p"),bDo=o("This class cannot be instantiated directly using "),Xpe=a("code"),vDo=o("__init__()"),FDo=o(" (throws an error)."),TDo=l(),gt=a("div"),F(sy.$$.fragment),MDo=l(),zpe=a("p"),EDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CDo=l(),ad=a("p"),wDo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),ADo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),yDo=o("from_pretrained()"),xDo=o(" to load the model weights."),$Do=l(),F(Vb.$$.fragment),kDo=l(),ro=a("div"),F(ly.$$.fragment),SDo=l(),Wpe=a("p"),RDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PDo=l(),Ga=a("p"),BDo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),IDo=o("model_type"),NDo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),qDo=o("pretrained_model_name_or_path"),jDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),DDo=o("pretrained_model_name_or_path"),GDo=o(":"),ODo=l(),N=a("ul"),Xb=a("li"),Ype=a("strong"),VDo=o("albert"),XDo=o(" \u2014 "),UV=a("a"),zDo=o("AlbertForSequenceClassification"),QDo=o(" (ALBERT model)"),WDo=l(),zb=a("li"),Kpe=a("strong"),HDo=o("bart"),UDo=o(" \u2014 "),JV=a("a"),JDo=o("BartForSequenceClassification"),YDo=o(" (BART model)"),KDo=l(),Qb=a("li"),Zpe=a("strong"),ZDo=o("bert"),eGo=o(" \u2014 "),YV=a("a"),oGo=o("BertForSequenceClassification"),rGo=o(" (BERT model)"),tGo=l(),Wb=a("li"),e_e=a("strong"),aGo=o("big_bird"),nGo=o(" \u2014 "),KV=a("a"),sGo=o("BigBirdForSequenceClassification"),lGo=o(" (BigBird model)"),iGo=l(),Hb=a("li"),o_e=a("strong"),dGo=o("bigbird_pegasus"),cGo=o(" \u2014 "),ZV=a("a"),fGo=o("BigBirdPegasusForSequenceClassification"),mGo=o(" (BigBird-Pegasus model)"),gGo=l(),Ub=a("li"),r_e=a("strong"),hGo=o("bloom"),pGo=o(" \u2014 "),eX=a("a"),_Go=o("BloomForSequenceClassification"),uGo=o(" (BLOOM model)"),bGo=l(),Jb=a("li"),t_e=a("strong"),vGo=o("camembert"),FGo=o(" \u2014 "),oX=a("a"),TGo=o("CamembertForSequenceClassification"),MGo=o(" (CamemBERT model)"),EGo=l(),Yb=a("li"),a_e=a("strong"),CGo=o("canine"),wGo=o(" \u2014 "),rX=a("a"),AGo=o("CanineForSequenceClassification"),LGo=o(" (CANINE model)"),yGo=l(),Kb=a("li"),n_e=a("strong"),xGo=o("convbert"),$Go=o(" \u2014 "),tX=a("a"),kGo=o("ConvBertForSequenceClassification"),SGo=o(" (ConvBERT model)"),RGo=l(),Zb=a("li"),s_e=a("strong"),PGo=o("ctrl"),BGo=o(" \u2014 "),aX=a("a"),IGo=o("CTRLForSequenceClassification"),NGo=o(" (CTRL model)"),qGo=l(),ev=a("li"),l_e=a("strong"),jGo=o("data2vec-text"),DGo=o(" \u2014 "),nX=a("a"),GGo=o("Data2VecTextForSequenceClassification"),OGo=o(" (Data2VecText model)"),VGo=l(),ov=a("li"),i_e=a("strong"),XGo=o("deberta"),zGo=o(" \u2014 "),sX=a("a"),QGo=o("DebertaForSequenceClassification"),WGo=o(" (DeBERTa model)"),HGo=l(),rv=a("li"),d_e=a("strong"),UGo=o("deberta-v2"),JGo=o(" \u2014 "),lX=a("a"),YGo=o("DebertaV2ForSequenceClassification"),KGo=o(" (DeBERTa-v2 model)"),ZGo=l(),tv=a("li"),c_e=a("strong"),eOo=o("distilbert"),oOo=o(" \u2014 "),iX=a("a"),rOo=o("DistilBertForSequenceClassification"),tOo=o(" (DistilBERT model)"),aOo=l(),av=a("li"),f_e=a("strong"),nOo=o("electra"),sOo=o(" \u2014 "),dX=a("a"),lOo=o("ElectraForSequenceClassification"),iOo=o(" (ELECTRA model)"),dOo=l(),nv=a("li"),m_e=a("strong"),cOo=o("flaubert"),fOo=o(" \u2014 "),cX=a("a"),mOo=o("FlaubertForSequenceClassification"),gOo=o(" (FlauBERT model)"),hOo=l(),sv=a("li"),g_e=a("strong"),pOo=o("fnet"),_Oo=o(" \u2014 "),fX=a("a"),uOo=o("FNetForSequenceClassification"),bOo=o(" (FNet model)"),vOo=l(),lv=a("li"),h_e=a("strong"),FOo=o("funnel"),TOo=o(" \u2014 "),mX=a("a"),MOo=o("FunnelForSequenceClassification"),EOo=o(" (Funnel Transformer model)"),COo=l(),iv=a("li"),p_e=a("strong"),wOo=o("gpt2"),AOo=o(" \u2014 "),gX=a("a"),LOo=o("GPT2ForSequenceClassification"),yOo=o(" (OpenAI GPT-2 model)"),xOo=l(),dv=a("li"),__e=a("strong"),$Oo=o("gpt_neo"),kOo=o(" \u2014 "),hX=a("a"),SOo=o("GPTNeoForSequenceClassification"),ROo=o(" (GPT Neo model)"),POo=l(),cv=a("li"),u_e=a("strong"),BOo=o("gptj"),IOo=o(" \u2014 "),pX=a("a"),NOo=o("GPTJForSequenceClassification"),qOo=o(" (GPT-J model)"),jOo=l(),fv=a("li"),b_e=a("strong"),DOo=o("ibert"),GOo=o(" \u2014 "),_X=a("a"),OOo=o("IBertForSequenceClassification"),VOo=o(" (I-BERT model)"),XOo=l(),mv=a("li"),v_e=a("strong"),zOo=o("layoutlm"),QOo=o(" \u2014 "),uX=a("a"),WOo=o("LayoutLMForSequenceClassification"),HOo=o(" (LayoutLM model)"),UOo=l(),gv=a("li"),F_e=a("strong"),JOo=o("layoutlmv2"),YOo=o(" \u2014 "),bX=a("a"),KOo=o("LayoutLMv2ForSequenceClassification"),ZOo=o(" (LayoutLMv2 model)"),eVo=l(),hv=a("li"),T_e=a("strong"),oVo=o("layoutlmv3"),rVo=o(" \u2014 "),vX=a("a"),tVo=o("LayoutLMv3ForSequenceClassification"),aVo=o(" (LayoutLMv3 model)"),nVo=l(),pv=a("li"),M_e=a("strong"),sVo=o("led"),lVo=o(" \u2014 "),FX=a("a"),iVo=o("LEDForSequenceClassification"),dVo=o(" (LED model)"),cVo=l(),_v=a("li"),E_e=a("strong"),fVo=o("longformer"),mVo=o(" \u2014 "),TX=a("a"),gVo=o("LongformerForSequenceClassification"),hVo=o(" (Longformer model)"),pVo=l(),uv=a("li"),C_e=a("strong"),_Vo=o("mbart"),uVo=o(" \u2014 "),MX=a("a"),bVo=o("MBartForSequenceClassification"),vVo=o(" (mBART model)"),FVo=l(),bv=a("li"),w_e=a("strong"),TVo=o("megatron-bert"),MVo=o(" \u2014 "),EX=a("a"),EVo=o("MegatronBertForSequenceClassification"),CVo=o(" (Megatron-BERT model)"),wVo=l(),vv=a("li"),A_e=a("strong"),AVo=o("mobilebert"),LVo=o(" \u2014 "),CX=a("a"),yVo=o("MobileBertForSequenceClassification"),xVo=o(" (MobileBERT model)"),$Vo=l(),Fv=a("li"),L_e=a("strong"),kVo=o("mpnet"),SVo=o(" \u2014 "),wX=a("a"),RVo=o("MPNetForSequenceClassification"),PVo=o(" (MPNet model)"),BVo=l(),Tv=a("li"),y_e=a("strong"),IVo=o("mvp"),NVo=o(" \u2014 "),AX=a("a"),qVo=o("MvpForSequenceClassification"),jVo=o(" (MVP model)"),DVo=l(),Mv=a("li"),x_e=a("strong"),GVo=o("nezha"),OVo=o(" \u2014 "),LX=a("a"),VVo=o("NezhaForSequenceClassification"),XVo=o(" (Nezha model)"),zVo=l(),Ev=a("li"),$_e=a("strong"),QVo=o("nystromformer"),WVo=o(" \u2014 "),yX=a("a"),HVo=o("NystromformerForSequenceClassification"),UVo=o(" (Nystr\xF6mformer model)"),JVo=l(),Cv=a("li"),k_e=a("strong"),YVo=o("openai-gpt"),KVo=o(" \u2014 "),xX=a("a"),ZVo=o("OpenAIGPTForSequenceClassification"),eXo=o(" (OpenAI GPT model)"),oXo=l(),wv=a("li"),S_e=a("strong"),rXo=o("perceiver"),tXo=o(" \u2014 "),$X=a("a"),aXo=o("PerceiverForSequenceClassification"),nXo=o(" (Perceiver model)"),sXo=l(),Av=a("li"),R_e=a("strong"),lXo=o("plbart"),iXo=o(" \u2014 "),kX=a("a"),dXo=o("PLBartForSequenceClassification"),cXo=o(" (PLBart model)"),fXo=l(),Lv=a("li"),P_e=a("strong"),mXo=o("qdqbert"),gXo=o(" \u2014 "),SX=a("a"),hXo=o("QDQBertForSequenceClassification"),pXo=o(" (QDQBert model)"),_Xo=l(),yv=a("li"),B_e=a("strong"),uXo=o("reformer"),bXo=o(" \u2014 "),RX=a("a"),vXo=o("ReformerForSequenceClassification"),FXo=o(" (Reformer model)"),TXo=l(),xv=a("li"),I_e=a("strong"),MXo=o("rembert"),EXo=o(" \u2014 "),PX=a("a"),CXo=o("RemBertForSequenceClassification"),wXo=o(" (RemBERT model)"),AXo=l(),$v=a("li"),N_e=a("strong"),LXo=o("roberta"),yXo=o(" \u2014 "),BX=a("a"),xXo=o("RobertaForSequenceClassification"),$Xo=o(" (RoBERTa model)"),kXo=l(),kv=a("li"),q_e=a("strong"),SXo=o("roformer"),RXo=o(" \u2014 "),IX=a("a"),PXo=o("RoFormerForSequenceClassification"),BXo=o(" (RoFormer model)"),IXo=l(),Sv=a("li"),j_e=a("strong"),NXo=o("squeezebert"),qXo=o(" \u2014 "),NX=a("a"),jXo=o("SqueezeBertForSequenceClassification"),DXo=o(" (SqueezeBERT model)"),GXo=l(),Rv=a("li"),D_e=a("strong"),OXo=o("tapas"),VXo=o(" \u2014 "),qX=a("a"),XXo=o("TapasForSequenceClassification"),zXo=o(" (TAPAS model)"),QXo=l(),Pv=a("li"),G_e=a("strong"),WXo=o("transfo-xl"),HXo=o(" \u2014 "),jX=a("a"),UXo=o("TransfoXLForSequenceClassification"),JXo=o(" (Transformer-XL model)"),YXo=l(),Bv=a("li"),O_e=a("strong"),KXo=o("xlm"),ZXo=o(" \u2014 "),DX=a("a"),ezo=o("XLMForSequenceClassification"),ozo=o(" (XLM model)"),rzo=l(),Iv=a("li"),V_e=a("strong"),tzo=o("xlm-roberta"),azo=o(" \u2014 "),GX=a("a"),nzo=o("XLMRobertaForSequenceClassification"),szo=o(" (XLM-RoBERTa model)"),lzo=l(),Nv=a("li"),X_e=a("strong"),izo=o("xlm-roberta-xl"),dzo=o(" \u2014 "),OX=a("a"),czo=o("XLMRobertaXLForSequenceClassification"),fzo=o(" (XLM-RoBERTa-XL model)"),mzo=l(),qv=a("li"),z_e=a("strong"),gzo=o("xlnet"),hzo=o(" \u2014 "),VX=a("a"),pzo=o("XLNetForSequenceClassification"),_zo=o(" (XLNet model)"),uzo=l(),jv=a("li"),Q_e=a("strong"),bzo=o("yoso"),vzo=o(" \u2014 "),XX=a("a"),Fzo=o("YosoForSequenceClassification"),Tzo=o(" (YOSO model)"),Mzo=l(),Dv=a("p"),Ezo=o("The model is set in evaluation mode by default using "),W_e=a("code"),Czo=o("model.eval()"),wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),Azo=o("model.train()"),Lzo=l(),F(Gv.$$.fragment),$Xe=l(),nd=a("h2"),Ov=a("a"),U_e=a("span"),F(iy.$$.fragment),yzo=l(),J_e=a("span"),xzo=o("AutoModelForMultipleChoice"),kXe=l(),Io=a("div"),F(dy.$$.fragment),$zo=l(),sd=a("p"),kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=a("a"),Szo=o("from_pretrained()"),Rzo=o(" class method or the "),QX=a("a"),Pzo=o("from_config()"),Bzo=o(` class
method.`),Izo=l(),cy=a("p"),Nzo=o("This class cannot be instantiated directly using "),Y_e=a("code"),qzo=o("__init__()"),jzo=o(" (throws an error)."),Dzo=l(),ht=a("div"),F(fy.$$.fragment),Gzo=l(),K_e=a("p"),Ozo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vzo=l(),ld=a("p"),Xzo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),zzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" to load the model weights."),Uzo=l(),F(Vv.$$.fragment),Jzo=l(),to=a("div"),F(my.$$.fragment),Yzo=l(),eue=a("p"),Kzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zzo=l(),Oa=a("p"),eQo=o("The model class to instantiate is selected based on the "),oue=a("code"),oQo=o("model_type"),rQo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(":"),lQo=l(),Z=a("ul"),Xv=a("li"),aue=a("strong"),iQo=o("albert"),dQo=o(" \u2014 "),HX=a("a"),cQo=o("AlbertForMultipleChoice"),fQo=o(" (ALBERT model)"),mQo=l(),zv=a("li"),nue=a("strong"),gQo=o("bert"),hQo=o(" \u2014 "),UX=a("a"),pQo=o("BertForMultipleChoice"),_Qo=o(" (BERT model)"),uQo=l(),Qv=a("li"),sue=a("strong"),bQo=o("big_bird"),vQo=o(" \u2014 "),JX=a("a"),FQo=o("BigBirdForMultipleChoice"),TQo=o(" (BigBird model)"),MQo=l(),Wv=a("li"),lue=a("strong"),EQo=o("camembert"),CQo=o(" \u2014 "),YX=a("a"),wQo=o("CamembertForMultipleChoice"),AQo=o(" (CamemBERT model)"),LQo=l(),Hv=a("li"),iue=a("strong"),yQo=o("canine"),xQo=o(" \u2014 "),KX=a("a"),$Qo=o("CanineForMultipleChoice"),kQo=o(" (CANINE model)"),SQo=l(),Uv=a("li"),due=a("strong"),RQo=o("convbert"),PQo=o(" \u2014 "),ZX=a("a"),BQo=o("ConvBertForMultipleChoice"),IQo=o(" (ConvBERT model)"),NQo=l(),Jv=a("li"),cue=a("strong"),qQo=o("data2vec-text"),jQo=o(" \u2014 "),ez=a("a"),DQo=o("Data2VecTextForMultipleChoice"),GQo=o(" (Data2VecText model)"),OQo=l(),Yv=a("li"),fue=a("strong"),VQo=o("deberta-v2"),XQo=o(" \u2014 "),oz=a("a"),zQo=o("DebertaV2ForMultipleChoice"),QQo=o(" (DeBERTa-v2 model)"),WQo=l(),Kv=a("li"),mue=a("strong"),HQo=o("distilbert"),UQo=o(" \u2014 "),rz=a("a"),JQo=o("DistilBertForMultipleChoice"),YQo=o(" (DistilBERT model)"),KQo=l(),Zv=a("li"),gue=a("strong"),ZQo=o("electra"),eWo=o(" \u2014 "),tz=a("a"),oWo=o("ElectraForMultipleChoice"),rWo=o(" (ELECTRA model)"),tWo=l(),e0=a("li"),hue=a("strong"),aWo=o("flaubert"),nWo=o(" \u2014 "),az=a("a"),sWo=o("FlaubertForMultipleChoice"),lWo=o(" (FlauBERT model)"),iWo=l(),o0=a("li"),pue=a("strong"),dWo=o("fnet"),cWo=o(" \u2014 "),nz=a("a"),fWo=o("FNetForMultipleChoice"),mWo=o(" (FNet model)"),gWo=l(),r0=a("li"),_ue=a("strong"),hWo=o("funnel"),pWo=o(" \u2014 "),sz=a("a"),_Wo=o("FunnelForMultipleChoice"),uWo=o(" (Funnel Transformer model)"),bWo=l(),t0=a("li"),uue=a("strong"),vWo=o("ibert"),FWo=o(" \u2014 "),lz=a("a"),TWo=o("IBertForMultipleChoice"),MWo=o(" (I-BERT model)"),EWo=l(),a0=a("li"),bue=a("strong"),CWo=o("longformer"),wWo=o(" \u2014 "),iz=a("a"),AWo=o("LongformerForMultipleChoice"),LWo=o(" (Longformer model)"),yWo=l(),n0=a("li"),vue=a("strong"),xWo=o("megatron-bert"),$Wo=o(" \u2014 "),dz=a("a"),kWo=o("MegatronBertForMultipleChoice"),SWo=o(" (Megatron-BERT model)"),RWo=l(),s0=a("li"),Fue=a("strong"),PWo=o("mobilebert"),BWo=o(" \u2014 "),cz=a("a"),IWo=o("MobileBertForMultipleChoice"),NWo=o(" (MobileBERT model)"),qWo=l(),l0=a("li"),Tue=a("strong"),jWo=o("mpnet"),DWo=o(" \u2014 "),fz=a("a"),GWo=o("MPNetForMultipleChoice"),OWo=o(" (MPNet model)"),VWo=l(),i0=a("li"),Mue=a("strong"),XWo=o("nezha"),zWo=o(" \u2014 "),mz=a("a"),QWo=o("NezhaForMultipleChoice"),WWo=o(" (Nezha model)"),HWo=l(),d0=a("li"),Eue=a("strong"),UWo=o("nystromformer"),JWo=o(" \u2014 "),gz=a("a"),YWo=o("NystromformerForMultipleChoice"),KWo=o(" (Nystr\xF6mformer model)"),ZWo=l(),c0=a("li"),Cue=a("strong"),eHo=o("qdqbert"),oHo=o(" \u2014 "),hz=a("a"),rHo=o("QDQBertForMultipleChoice"),tHo=o(" (QDQBert model)"),aHo=l(),f0=a("li"),wue=a("strong"),nHo=o("rembert"),sHo=o(" \u2014 "),pz=a("a"),lHo=o("RemBertForMultipleChoice"),iHo=o(" (RemBERT model)"),dHo=l(),m0=a("li"),Aue=a("strong"),cHo=o("roberta"),fHo=o(" \u2014 "),_z=a("a"),mHo=o("RobertaForMultipleChoice"),gHo=o(" (RoBERTa model)"),hHo=l(),g0=a("li"),Lue=a("strong"),pHo=o("roformer"),_Ho=o(" \u2014 "),uz=a("a"),uHo=o("RoFormerForMultipleChoice"),bHo=o(" (RoFormer model)"),vHo=l(),h0=a("li"),yue=a("strong"),FHo=o("squeezebert"),THo=o(" \u2014 "),bz=a("a"),MHo=o("SqueezeBertForMultipleChoice"),EHo=o(" (SqueezeBERT model)"),CHo=l(),p0=a("li"),xue=a("strong"),wHo=o("xlm"),AHo=o(" \u2014 "),vz=a("a"),LHo=o("XLMForMultipleChoice"),yHo=o(" (XLM model)"),xHo=l(),_0=a("li"),$ue=a("strong"),$Ho=o("xlm-roberta"),kHo=o(" \u2014 "),Fz=a("a"),SHo=o("XLMRobertaForMultipleChoice"),RHo=o(" (XLM-RoBERTa model)"),PHo=l(),u0=a("li"),kue=a("strong"),BHo=o("xlm-roberta-xl"),IHo=o(" \u2014 "),Tz=a("a"),NHo=o("XLMRobertaXLForMultipleChoice"),qHo=o(" (XLM-RoBERTa-XL model)"),jHo=l(),b0=a("li"),Sue=a("strong"),DHo=o("xlnet"),GHo=o(" \u2014 "),Mz=a("a"),OHo=o("XLNetForMultipleChoice"),VHo=o(" (XLNet model)"),XHo=l(),v0=a("li"),Rue=a("strong"),zHo=o("yoso"),QHo=o(" \u2014 "),Ez=a("a"),WHo=o("YosoForMultipleChoice"),HHo=o(" (YOSO model)"),UHo=l(),F0=a("p"),JHo=o("The model is set in evaluation mode by default using "),Pue=a("code"),YHo=o("model.eval()"),KHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),ZHo=o("model.train()"),eUo=l(),F(T0.$$.fragment),SXe=l(),id=a("h2"),M0=a("a"),Iue=a("span"),F(gy.$$.fragment),oUo=l(),Nue=a("span"),rUo=o("AutoModelForNextSentencePrediction"),RXe=l(),No=a("div"),F(hy.$$.fragment),tUo=l(),dd=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=a("a"),nUo=o("from_pretrained()"),sUo=o(" class method or the "),wz=a("a"),lUo=o("from_config()"),iUo=o(` class
method.`),dUo=l(),py=a("p"),cUo=o("This class cannot be instantiated directly using "),que=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),pt=a("div"),F(_y.$$.fragment),hUo=l(),jue=a("p"),pUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Uo=l(),cd=a("p"),uUo=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),bUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),FUo=o("from_pretrained()"),TUo=o(" to load the model weights."),MUo=l(),F(E0.$$.fragment),EUo=l(),ao=a("div"),F(uy.$$.fragment),CUo=l(),Gue=a("p"),wUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AUo=l(),Va=a("p"),LUo=o("The model class to instantiate is selected based on the "),Oue=a("code"),yUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),$Uo=o("pretrained_model_name_or_path"),kUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),SUo=o("pretrained_model_name_or_path"),RUo=o(":"),PUo=l(),qo=a("ul"),C0=a("li"),zue=a("strong"),BUo=o("bert"),IUo=o(" \u2014 "),Lz=a("a"),NUo=o("BertForNextSentencePrediction"),qUo=o(" (BERT model)"),jUo=l(),w0=a("li"),Que=a("strong"),DUo=o("fnet"),GUo=o(" \u2014 "),yz=a("a"),OUo=o("FNetForNextSentencePrediction"),VUo=o(" (FNet model)"),XUo=l(),A0=a("li"),Wue=a("strong"),zUo=o("megatron-bert"),QUo=o(" \u2014 "),xz=a("a"),WUo=o("MegatronBertForNextSentencePrediction"),HUo=o(" (Megatron-BERT model)"),UUo=l(),L0=a("li"),Hue=a("strong"),JUo=o("mobilebert"),YUo=o(" \u2014 "),$z=a("a"),KUo=o("MobileBertForNextSentencePrediction"),ZUo=o(" (MobileBERT model)"),eJo=l(),y0=a("li"),Uue=a("strong"),oJo=o("nezha"),rJo=o(" \u2014 "),kz=a("a"),tJo=o("NezhaForNextSentencePrediction"),aJo=o(" (Nezha model)"),nJo=l(),x0=a("li"),Jue=a("strong"),sJo=o("qdqbert"),lJo=o(" \u2014 "),Sz=a("a"),iJo=o("QDQBertForNextSentencePrediction"),dJo=o(" (QDQBert model)"),cJo=l(),$0=a("p"),fJo=o("The model is set in evaluation mode by default using "),Yue=a("code"),mJo=o("model.eval()"),gJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=a("code"),hJo=o("model.train()"),pJo=l(),F(k0.$$.fragment),PXe=l(),fd=a("h2"),S0=a("a"),Zue=a("span"),F(by.$$.fragment),_Jo=l(),e2e=a("span"),uJo=o("AutoModelForTokenClassification"),BXe=l(),jo=a("div"),F(vy.$$.fragment),bJo=l(),md=a("p"),vJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=a("a"),FJo=o("from_pretrained()"),TJo=o(" class method or the "),Pz=a("a"),MJo=o("from_config()"),EJo=o(` class
method.`),CJo=l(),Fy=a("p"),wJo=o("This class cannot be instantiated directly using "),o2e=a("code"),AJo=o("__init__()"),LJo=o(" (throws an error)."),yJo=l(),_t=a("div"),F(Ty.$$.fragment),xJo=l(),r2e=a("p"),$Jo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kJo=l(),gd=a("p"),SJo=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),RJo=o("not"),PJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),BJo=o("from_pretrained()"),IJo=o(" to load the model weights."),NJo=l(),F(R0.$$.fragment),qJo=l(),no=a("div"),F(My.$$.fragment),jJo=l(),a2e=a("p"),DJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GJo=l(),Xa=a("p"),OJo=o("The model class to instantiate is selected based on the "),n2e=a("code"),VJo=o("model_type"),XJo=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),zJo=o("pretrained_model_name_or_path"),QJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),WJo=o("pretrained_model_name_or_path"),HJo=o(":"),UJo=l(),U=a("ul"),P0=a("li"),i2e=a("strong"),JJo=o("albert"),YJo=o(" \u2014 "),Iz=a("a"),KJo=o("AlbertForTokenClassification"),ZJo=o(" (ALBERT model)"),eYo=l(),B0=a("li"),d2e=a("strong"),oYo=o("bert"),rYo=o(" \u2014 "),Nz=a("a"),tYo=o("BertForTokenClassification"),aYo=o(" (BERT model)"),nYo=l(),I0=a("li"),c2e=a("strong"),sYo=o("big_bird"),lYo=o(" \u2014 "),qz=a("a"),iYo=o("BigBirdForTokenClassification"),dYo=o(" (BigBird model)"),cYo=l(),N0=a("li"),f2e=a("strong"),fYo=o("bloom"),mYo=o(" \u2014 "),jz=a("a"),gYo=o("BloomForTokenClassification"),hYo=o(" (BLOOM model)"),pYo=l(),q0=a("li"),m2e=a("strong"),_Yo=o("camembert"),uYo=o(" \u2014 "),Dz=a("a"),bYo=o("CamembertForTokenClassification"),vYo=o(" (CamemBERT model)"),FYo=l(),j0=a("li"),g2e=a("strong"),TYo=o("canine"),MYo=o(" \u2014 "),Gz=a("a"),EYo=o("CanineForTokenClassification"),CYo=o(" (CANINE model)"),wYo=l(),D0=a("li"),h2e=a("strong"),AYo=o("convbert"),LYo=o(" \u2014 "),Oz=a("a"),yYo=o("ConvBertForTokenClassification"),xYo=o(" (ConvBERT model)"),$Yo=l(),G0=a("li"),p2e=a("strong"),kYo=o("data2vec-text"),SYo=o(" \u2014 "),Vz=a("a"),RYo=o("Data2VecTextForTokenClassification"),PYo=o(" (Data2VecText model)"),BYo=l(),O0=a("li"),_2e=a("strong"),IYo=o("deberta"),NYo=o(" \u2014 "),Xz=a("a"),qYo=o("DebertaForTokenClassification"),jYo=o(" (DeBERTa model)"),DYo=l(),V0=a("li"),u2e=a("strong"),GYo=o("deberta-v2"),OYo=o(" \u2014 "),zz=a("a"),VYo=o("DebertaV2ForTokenClassification"),XYo=o(" (DeBERTa-v2 model)"),zYo=l(),X0=a("li"),b2e=a("strong"),QYo=o("distilbert"),WYo=o(" \u2014 "),Qz=a("a"),HYo=o("DistilBertForTokenClassification"),UYo=o(" (DistilBERT model)"),JYo=l(),z0=a("li"),v2e=a("strong"),YYo=o("electra"),KYo=o(" \u2014 "),Wz=a("a"),ZYo=o("ElectraForTokenClassification"),eKo=o(" (ELECTRA model)"),oKo=l(),Q0=a("li"),F2e=a("strong"),rKo=o("flaubert"),tKo=o(" \u2014 "),Hz=a("a"),aKo=o("FlaubertForTokenClassification"),nKo=o(" (FlauBERT model)"),sKo=l(),W0=a("li"),T2e=a("strong"),lKo=o("fnet"),iKo=o(" \u2014 "),Uz=a("a"),dKo=o("FNetForTokenClassification"),cKo=o(" (FNet model)"),fKo=l(),H0=a("li"),M2e=a("strong"),mKo=o("funnel"),gKo=o(" \u2014 "),Jz=a("a"),hKo=o("FunnelForTokenClassification"),pKo=o(" (Funnel Transformer model)"),_Ko=l(),U0=a("li"),E2e=a("strong"),uKo=o("gpt2"),bKo=o(" \u2014 "),Yz=a("a"),vKo=o("GPT2ForTokenClassification"),FKo=o(" (OpenAI GPT-2 model)"),TKo=l(),J0=a("li"),C2e=a("strong"),MKo=o("ibert"),EKo=o(" \u2014 "),Kz=a("a"),CKo=o("IBertForTokenClassification"),wKo=o(" (I-BERT model)"),AKo=l(),Y0=a("li"),w2e=a("strong"),LKo=o("layoutlm"),yKo=o(" \u2014 "),Zz=a("a"),xKo=o("LayoutLMForTokenClassification"),$Ko=o(" (LayoutLM model)"),kKo=l(),K0=a("li"),A2e=a("strong"),SKo=o("layoutlmv2"),RKo=o(" \u2014 "),eQ=a("a"),PKo=o("LayoutLMv2ForTokenClassification"),BKo=o(" (LayoutLMv2 model)"),IKo=l(),Z0=a("li"),L2e=a("strong"),NKo=o("layoutlmv3"),qKo=o(" \u2014 "),oQ=a("a"),jKo=o("LayoutLMv3ForTokenClassification"),DKo=o(" (LayoutLMv3 model)"),GKo=l(),eF=a("li"),y2e=a("strong"),OKo=o("longformer"),VKo=o(" \u2014 "),rQ=a("a"),XKo=o("LongformerForTokenClassification"),zKo=o(" (Longformer model)"),QKo=l(),oF=a("li"),x2e=a("strong"),WKo=o("megatron-bert"),HKo=o(" \u2014 "),tQ=a("a"),UKo=o("MegatronBertForTokenClassification"),JKo=o(" (Megatron-BERT model)"),YKo=l(),rF=a("li"),$2e=a("strong"),KKo=o("mobilebert"),ZKo=o(" \u2014 "),aQ=a("a"),eZo=o("MobileBertForTokenClassification"),oZo=o(" (MobileBERT model)"),rZo=l(),tF=a("li"),k2e=a("strong"),tZo=o("mpnet"),aZo=o(" \u2014 "),nQ=a("a"),nZo=o("MPNetForTokenClassification"),sZo=o(" (MPNet model)"),lZo=l(),aF=a("li"),S2e=a("strong"),iZo=o("nezha"),dZo=o(" \u2014 "),sQ=a("a"),cZo=o("NezhaForTokenClassification"),fZo=o(" (Nezha model)"),mZo=l(),nF=a("li"),R2e=a("strong"),gZo=o("nystromformer"),hZo=o(" \u2014 "),lQ=a("a"),pZo=o("NystromformerForTokenClassification"),_Zo=o(" (Nystr\xF6mformer model)"),uZo=l(),sF=a("li"),P2e=a("strong"),bZo=o("qdqbert"),vZo=o(" \u2014 "),iQ=a("a"),FZo=o("QDQBertForTokenClassification"),TZo=o(" (QDQBert model)"),MZo=l(),lF=a("li"),B2e=a("strong"),EZo=o("rembert"),CZo=o(" \u2014 "),dQ=a("a"),wZo=o("RemBertForTokenClassification"),AZo=o(" (RemBERT model)"),LZo=l(),iF=a("li"),I2e=a("strong"),yZo=o("roberta"),xZo=o(" \u2014 "),cQ=a("a"),$Zo=o("RobertaForTokenClassification"),kZo=o(" (RoBERTa model)"),SZo=l(),dF=a("li"),N2e=a("strong"),RZo=o("roformer"),PZo=o(" \u2014 "),fQ=a("a"),BZo=o("RoFormerForTokenClassification"),IZo=o(" (RoFormer model)"),NZo=l(),cF=a("li"),q2e=a("strong"),qZo=o("squeezebert"),jZo=o(" \u2014 "),mQ=a("a"),DZo=o("SqueezeBertForTokenClassification"),GZo=o(" (SqueezeBERT model)"),OZo=l(),fF=a("li"),j2e=a("strong"),VZo=o("xlm"),XZo=o(" \u2014 "),gQ=a("a"),zZo=o("XLMForTokenClassification"),QZo=o(" (XLM model)"),WZo=l(),mF=a("li"),D2e=a("strong"),HZo=o("xlm-roberta"),UZo=o(" \u2014 "),hQ=a("a"),JZo=o("XLMRobertaForTokenClassification"),YZo=o(" (XLM-RoBERTa model)"),KZo=l(),gF=a("li"),G2e=a("strong"),ZZo=o("xlm-roberta-xl"),eer=o(" \u2014 "),pQ=a("a"),oer=o("XLMRobertaXLForTokenClassification"),rer=o(" (XLM-RoBERTa-XL model)"),ter=l(),hF=a("li"),O2e=a("strong"),aer=o("xlnet"),ner=o(" \u2014 "),_Q=a("a"),ser=o("XLNetForTokenClassification"),ler=o(" (XLNet model)"),ier=l(),pF=a("li"),V2e=a("strong"),der=o("yoso"),cer=o(" \u2014 "),uQ=a("a"),fer=o("YosoForTokenClassification"),mer=o(" (YOSO model)"),ger=l(),_F=a("p"),her=o("The model is set in evaluation mode by default using "),X2e=a("code"),per=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=a("code"),uer=o("model.train()"),ber=l(),F(uF.$$.fragment),IXe=l(),hd=a("h2"),bF=a("a"),Q2e=a("span"),F(Ey.$$.fragment),ver=l(),W2e=a("span"),Fer=o("AutoModelForQuestionAnswering"),NXe=l(),Do=a("div"),F(Cy.$$.fragment),Ter=l(),pd=a("p"),Mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=a("a"),Eer=o("from_pretrained()"),Cer=o(" class method or the "),vQ=a("a"),wer=o("from_config()"),Aer=o(` class
method.`),Ler=l(),wy=a("p"),yer=o("This class cannot be instantiated directly using "),H2e=a("code"),xer=o("__init__()"),$er=o(" (throws an error)."),ker=l(),ut=a("div"),F(Ay.$$.fragment),Ser=l(),U2e=a("p"),Rer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Per=l(),_d=a("p"),Ber=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),Ier=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),qer=o("from_pretrained()"),jer=o(" to load the model weights."),Der=l(),F(vF.$$.fragment),Ger=l(),so=a("div"),F(Ly.$$.fragment),Oer=l(),Y2e=a("p"),Ver=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xer=l(),za=a("p"),zer=o("The model class to instantiate is selected based on the "),K2e=a("code"),Qer=o("model_type"),Wer=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(":"),Ker=l(),V=a("ul"),FF=a("li"),o1e=a("strong"),Zer=o("albert"),eor=o(" \u2014 "),TQ=a("a"),oor=o("AlbertForQuestionAnswering"),ror=o(" (ALBERT model)"),tor=l(),TF=a("li"),r1e=a("strong"),aor=o("bart"),nor=o(" \u2014 "),MQ=a("a"),sor=o("BartForQuestionAnswering"),lor=o(" (BART model)"),ior=l(),MF=a("li"),t1e=a("strong"),dor=o("bert"),cor=o(" \u2014 "),EQ=a("a"),mor=o("BertForQuestionAnswering"),gor=o(" (BERT model)"),hor=l(),EF=a("li"),a1e=a("strong"),por=o("big_bird"),_or=o(" \u2014 "),CQ=a("a"),uor=o("BigBirdForQuestionAnswering"),bor=o(" (BigBird model)"),vor=l(),CF=a("li"),n1e=a("strong"),For=o("bigbird_pegasus"),Tor=o(" \u2014 "),wQ=a("a"),Mor=o("BigBirdPegasusForQuestionAnswering"),Eor=o(" (BigBird-Pegasus model)"),Cor=l(),wF=a("li"),s1e=a("strong"),wor=o("camembert"),Aor=o(" \u2014 "),AQ=a("a"),Lor=o("CamembertForQuestionAnswering"),yor=o(" (CamemBERT model)"),xor=l(),AF=a("li"),l1e=a("strong"),$or=o("canine"),kor=o(" \u2014 "),LQ=a("a"),Sor=o("CanineForQuestionAnswering"),Ror=o(" (CANINE model)"),Por=l(),LF=a("li"),i1e=a("strong"),Bor=o("convbert"),Ior=o(" \u2014 "),yQ=a("a"),Nor=o("ConvBertForQuestionAnswering"),qor=o(" (ConvBERT model)"),jor=l(),yF=a("li"),d1e=a("strong"),Dor=o("data2vec-text"),Gor=o(" \u2014 "),xQ=a("a"),Oor=o("Data2VecTextForQuestionAnswering"),Vor=o(" (Data2VecText model)"),Xor=l(),xF=a("li"),c1e=a("strong"),zor=o("deberta"),Qor=o(" \u2014 "),$Q=a("a"),Wor=o("DebertaForQuestionAnswering"),Hor=o(" (DeBERTa model)"),Uor=l(),$F=a("li"),f1e=a("strong"),Jor=o("deberta-v2"),Yor=o(" \u2014 "),kQ=a("a"),Kor=o("DebertaV2ForQuestionAnswering"),Zor=o(" (DeBERTa-v2 model)"),err=l(),kF=a("li"),m1e=a("strong"),orr=o("distilbert"),rrr=o(" \u2014 "),SQ=a("a"),trr=o("DistilBertForQuestionAnswering"),arr=o(" (DistilBERT model)"),nrr=l(),SF=a("li"),g1e=a("strong"),srr=o("electra"),lrr=o(" \u2014 "),RQ=a("a"),irr=o("ElectraForQuestionAnswering"),drr=o(" (ELECTRA model)"),crr=l(),RF=a("li"),h1e=a("strong"),frr=o("flaubert"),mrr=o(" \u2014 "),PQ=a("a"),grr=o("FlaubertForQuestionAnsweringSimple"),hrr=o(" (FlauBERT model)"),prr=l(),PF=a("li"),p1e=a("strong"),_rr=o("fnet"),urr=o(" \u2014 "),BQ=a("a"),brr=o("FNetForQuestionAnswering"),vrr=o(" (FNet model)"),Frr=l(),BF=a("li"),_1e=a("strong"),Trr=o("funnel"),Mrr=o(" \u2014 "),IQ=a("a"),Err=o("FunnelForQuestionAnswering"),Crr=o(" (Funnel Transformer model)"),wrr=l(),IF=a("li"),u1e=a("strong"),Arr=o("gptj"),Lrr=o(" \u2014 "),NQ=a("a"),yrr=o("GPTJForQuestionAnswering"),xrr=o(" (GPT-J model)"),$rr=l(),NF=a("li"),b1e=a("strong"),krr=o("ibert"),Srr=o(" \u2014 "),qQ=a("a"),Rrr=o("IBertForQuestionAnswering"),Prr=o(" (I-BERT model)"),Brr=l(),qF=a("li"),v1e=a("strong"),Irr=o("layoutlmv2"),Nrr=o(" \u2014 "),jQ=a("a"),qrr=o("LayoutLMv2ForQuestionAnswering"),jrr=o(" (LayoutLMv2 model)"),Drr=l(),jF=a("li"),F1e=a("strong"),Grr=o("layoutlmv3"),Orr=o(" \u2014 "),DQ=a("a"),Vrr=o("LayoutLMv3ForQuestionAnswering"),Xrr=o(" (LayoutLMv3 model)"),zrr=l(),DF=a("li"),T1e=a("strong"),Qrr=o("led"),Wrr=o(" \u2014 "),GQ=a("a"),Hrr=o("LEDForQuestionAnswering"),Urr=o(" (LED model)"),Jrr=l(),GF=a("li"),M1e=a("strong"),Yrr=o("longformer"),Krr=o(" \u2014 "),OQ=a("a"),Zrr=o("LongformerForQuestionAnswering"),etr=o(" (Longformer model)"),otr=l(),OF=a("li"),E1e=a("strong"),rtr=o("lxmert"),ttr=o(" \u2014 "),VQ=a("a"),atr=o("LxmertForQuestionAnswering"),ntr=o(" (LXMERT model)"),str=l(),VF=a("li"),C1e=a("strong"),ltr=o("mbart"),itr=o(" \u2014 "),XQ=a("a"),dtr=o("MBartForQuestionAnswering"),ctr=o(" (mBART model)"),ftr=l(),XF=a("li"),w1e=a("strong"),mtr=o("megatron-bert"),gtr=o(" \u2014 "),zQ=a("a"),htr=o("MegatronBertForQuestionAnswering"),ptr=o(" (Megatron-BERT model)"),_tr=l(),zF=a("li"),A1e=a("strong"),utr=o("mobilebert"),btr=o(" \u2014 "),QQ=a("a"),vtr=o("MobileBertForQuestionAnswering"),Ftr=o(" (MobileBERT model)"),Ttr=l(),QF=a("li"),L1e=a("strong"),Mtr=o("mpnet"),Etr=o(" \u2014 "),WQ=a("a"),Ctr=o("MPNetForQuestionAnswering"),wtr=o(" (MPNet model)"),Atr=l(),WF=a("li"),y1e=a("strong"),Ltr=o("mvp"),ytr=o(" \u2014 "),HQ=a("a"),xtr=o("MvpForQuestionAnswering"),$tr=o(" (MVP model)"),ktr=l(),HF=a("li"),x1e=a("strong"),Str=o("nezha"),Rtr=o(" \u2014 "),UQ=a("a"),Ptr=o("NezhaForQuestionAnswering"),Btr=o(" (Nezha model)"),Itr=l(),UF=a("li"),$1e=a("strong"),Ntr=o("nystromformer"),qtr=o(" \u2014 "),JQ=a("a"),jtr=o("NystromformerForQuestionAnswering"),Dtr=o(" (Nystr\xF6mformer model)"),Gtr=l(),JF=a("li"),k1e=a("strong"),Otr=o("qdqbert"),Vtr=o(" \u2014 "),YQ=a("a"),Xtr=o("QDQBertForQuestionAnswering"),ztr=o(" (QDQBert model)"),Qtr=l(),YF=a("li"),S1e=a("strong"),Wtr=o("reformer"),Htr=o(" \u2014 "),KQ=a("a"),Utr=o("ReformerForQuestionAnswering"),Jtr=o(" (Reformer model)"),Ytr=l(),KF=a("li"),R1e=a("strong"),Ktr=o("rembert"),Ztr=o(" \u2014 "),ZQ=a("a"),ear=o("RemBertForQuestionAnswering"),oar=o(" (RemBERT model)"),rar=l(),ZF=a("li"),P1e=a("strong"),tar=o("roberta"),aar=o(" \u2014 "),eW=a("a"),nar=o("RobertaForQuestionAnswering"),sar=o(" (RoBERTa model)"),lar=l(),eT=a("li"),B1e=a("strong"),iar=o("roformer"),dar=o(" \u2014 "),oW=a("a"),car=o("RoFormerForQuestionAnswering"),far=o(" (RoFormer model)"),mar=l(),oT=a("li"),I1e=a("strong"),gar=o("splinter"),har=o(" \u2014 "),rW=a("a"),par=o("SplinterForQuestionAnswering"),_ar=o(" (Splinter model)"),uar=l(),rT=a("li"),N1e=a("strong"),bar=o("squeezebert"),Far=o(" \u2014 "),tW=a("a"),Tar=o("SqueezeBertForQuestionAnswering"),Mar=o(" (SqueezeBERT model)"),Ear=l(),tT=a("li"),q1e=a("strong"),Car=o("xlm"),war=o(" \u2014 "),aW=a("a"),Aar=o("XLMForQuestionAnsweringSimple"),Lar=o(" (XLM model)"),yar=l(),aT=a("li"),j1e=a("strong"),xar=o("xlm-roberta"),$ar=o(" \u2014 "),nW=a("a"),kar=o("XLMRobertaForQuestionAnswering"),Sar=o(" (XLM-RoBERTa model)"),Rar=l(),nT=a("li"),D1e=a("strong"),Par=o("xlm-roberta-xl"),Bar=o(" \u2014 "),sW=a("a"),Iar=o("XLMRobertaXLForQuestionAnswering"),Nar=o(" (XLM-RoBERTa-XL model)"),qar=l(),sT=a("li"),G1e=a("strong"),jar=o("xlnet"),Dar=o(" \u2014 "),lW=a("a"),Gar=o("XLNetForQuestionAnsweringSimple"),Oar=o(" (XLNet model)"),Var=l(),lT=a("li"),O1e=a("strong"),Xar=o("yoso"),zar=o(" \u2014 "),iW=a("a"),Qar=o("YosoForQuestionAnswering"),War=o(" (YOSO model)"),Har=l(),iT=a("p"),Uar=o("The model is set in evaluation mode by default using "),V1e=a("code"),Jar=o("model.eval()"),Yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=a("code"),Kar=o("model.train()"),Zar=l(),F(dT.$$.fragment),qXe=l(),ud=a("h2"),cT=a("a"),z1e=a("span"),F(yy.$$.fragment),enr=l(),Q1e=a("span"),onr=o("AutoModelForTableQuestionAnswering"),jXe=l(),Go=a("div"),F(xy.$$.fragment),rnr=l(),bd=a("p"),tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=a("a"),anr=o("from_pretrained()"),nnr=o(" class method or the "),cW=a("a"),snr=o("from_config()"),lnr=o(` class
method.`),inr=l(),$y=a("p"),dnr=o("This class cannot be instantiated directly using "),W1e=a("code"),cnr=o("__init__()"),fnr=o(" (throws an error)."),mnr=l(),bt=a("div"),F(ky.$$.fragment),gnr=l(),H1e=a("p"),hnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pnr=l(),vd=a("p"),_nr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),unr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),vnr=o("from_pretrained()"),Fnr=o(" to load the model weights."),Tnr=l(),F(fT.$$.fragment),Mnr=l(),lo=a("div"),F(Sy.$$.fragment),Enr=l(),J1e=a("p"),Cnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wnr=l(),Qa=a("p"),Anr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),Lnr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),xnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(":"),Rnr=l(),ebe=a("ul"),mT=a("li"),obe=a("strong"),Pnr=o("tapas"),Bnr=o(" \u2014 "),mW=a("a"),Inr=o("TapasForQuestionAnswering"),Nnr=o(" (TAPAS model)"),qnr=l(),gT=a("p"),jnr=o("The model is set in evaluation mode by default using "),rbe=a("code"),Dnr=o("model.eval()"),Gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),Onr=o("model.train()"),Vnr=l(),F(hT.$$.fragment),DXe=l(),Fd=a("h2"),pT=a("a"),abe=a("span"),F(Ry.$$.fragment),Xnr=l(),nbe=a("span"),znr=o("AutoModelForImageClassification"),GXe=l(),Oo=a("div"),F(Py.$$.fragment),Qnr=l(),Td=a("p"),Wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=a("a"),Hnr=o("from_pretrained()"),Unr=o(" class method or the "),hW=a("a"),Jnr=o("from_config()"),Ynr=o(` class
method.`),Knr=l(),By=a("p"),Znr=o("This class cannot be instantiated directly using "),sbe=a("code"),esr=o("__init__()"),osr=o(" (throws an error)."),rsr=l(),vt=a("div"),F(Iy.$$.fragment),tsr=l(),lbe=a("p"),asr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nsr=l(),Md=a("p"),ssr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),lsr=o("not"),isr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),dsr=o("from_pretrained()"),csr=o(" to load the model weights."),fsr=l(),F(_T.$$.fragment),msr=l(),io=a("div"),F(Ny.$$.fragment),gsr=l(),dbe=a("p"),hsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),psr=l(),Wa=a("p"),_sr=o("The model class to instantiate is selected based on the "),cbe=a("code"),usr=o("model_type"),bsr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),vsr=o("pretrained_model_name_or_path"),Fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(":"),Esr=l(),ve=a("ul"),uT=a("li"),gbe=a("strong"),Csr=o("beit"),wsr=o(" \u2014 "),_W=a("a"),Asr=o("BeitForImageClassification"),Lsr=o(" (BEiT model)"),ysr=l(),bT=a("li"),hbe=a("strong"),xsr=o("convnext"),$sr=o(" \u2014 "),uW=a("a"),ksr=o("ConvNextForImageClassification"),Ssr=o(" (ConvNeXT model)"),Rsr=l(),vT=a("li"),pbe=a("strong"),Psr=o("cvt"),Bsr=o(" \u2014 "),bW=a("a"),Isr=o("CvtForImageClassification"),Nsr=o(" (CvT model)"),qsr=l(),FT=a("li"),_be=a("strong"),jsr=o("data2vec-vision"),Dsr=o(" \u2014 "),vW=a("a"),Gsr=o("Data2VecVisionForImageClassification"),Osr=o(" (Data2VecVision model)"),Vsr=l(),Hs=a("li"),ube=a("strong"),Xsr=o("deit"),zsr=o(" \u2014 "),FW=a("a"),Qsr=o("DeiTForImageClassification"),Wsr=o(" or "),TW=a("a"),Hsr=o("DeiTForImageClassificationWithTeacher"),Usr=o(" (DeiT model)"),Jsr=l(),TT=a("li"),bbe=a("strong"),Ysr=o("imagegpt"),Ksr=o(" \u2014 "),MW=a("a"),Zsr=o("ImageGPTForImageClassification"),elr=o(" (ImageGPT model)"),olr=l(),Us=a("li"),vbe=a("strong"),rlr=o("levit"),tlr=o(" \u2014 "),EW=a("a"),alr=o("LevitForImageClassification"),nlr=o(" or "),CW=a("a"),slr=o("LevitForImageClassificationWithTeacher"),llr=o(" (LeViT model)"),ilr=l(),MT=a("li"),Fbe=a("strong"),dlr=o("mobilevit"),clr=o(" \u2014 "),wW=a("a"),flr=o("MobileViTForImageClassification"),mlr=o(" (MobileViT model)"),glr=l(),Ft=a("li"),Tbe=a("strong"),hlr=o("perceiver"),plr=o(" \u2014 "),AW=a("a"),_lr=o("PerceiverForImageClassificationLearned"),ulr=o(" or "),LW=a("a"),blr=o("PerceiverForImageClassificationFourier"),vlr=o(" or "),yW=a("a"),Flr=o("PerceiverForImageClassificationConvProcessing"),Tlr=o(" (Perceiver model)"),Mlr=l(),ET=a("li"),Mbe=a("strong"),Elr=o("poolformer"),Clr=o(" \u2014 "),xW=a("a"),wlr=o("PoolFormerForImageClassification"),Alr=o(" (PoolFormer model)"),Llr=l(),CT=a("li"),Ebe=a("strong"),ylr=o("regnet"),xlr=o(" \u2014 "),$W=a("a"),$lr=o("RegNetForImageClassification"),klr=o(" (RegNet model)"),Slr=l(),wT=a("li"),Cbe=a("strong"),Rlr=o("resnet"),Plr=o(" \u2014 "),kW=a("a"),Blr=o("ResNetForImageClassification"),Ilr=o(" (ResNet model)"),Nlr=l(),AT=a("li"),wbe=a("strong"),qlr=o("segformer"),jlr=o(" \u2014 "),SW=a("a"),Dlr=o("SegformerForImageClassification"),Glr=o(" (SegFormer model)"),Olr=l(),LT=a("li"),Abe=a("strong"),Vlr=o("swin"),Xlr=o(" \u2014 "),RW=a("a"),zlr=o("SwinForImageClassification"),Qlr=o(" (Swin Transformer model)"),Wlr=l(),yT=a("li"),Lbe=a("strong"),Hlr=o("van"),Ulr=o(" \u2014 "),PW=a("a"),Jlr=o("VanForImageClassification"),Ylr=o(" (VAN model)"),Klr=l(),xT=a("li"),ybe=a("strong"),Zlr=o("vit"),eir=o(" \u2014 "),BW=a("a"),oir=o("ViTForImageClassification"),rir=o(" (ViT model)"),tir=l(),$T=a("p"),air=o("The model is set in evaluation mode by default using "),xbe=a("code"),nir=o("model.eval()"),sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),lir=o("model.train()"),iir=l(),F(kT.$$.fragment),OXe=l(),Ed=a("h2"),ST=a("a"),kbe=a("span"),F(qy.$$.fragment),dir=l(),Sbe=a("span"),cir=o("AutoModelForVision2Seq"),VXe=l(),Vo=a("div"),F(jy.$$.fragment),fir=l(),Cd=a("p"),mir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=a("a"),gir=o("from_pretrained()"),hir=o(" class method or the "),NW=a("a"),pir=o("from_config()"),_ir=o(` class
method.`),uir=l(),Dy=a("p"),bir=o("This class cannot be instantiated directly using "),Rbe=a("code"),vir=o("__init__()"),Fir=o(" (throws an error)."),Tir=l(),Tt=a("div"),F(Gy.$$.fragment),Mir=l(),Pbe=a("p"),Eir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cir=l(),wd=a("p"),wir=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Air=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),yir=o("from_pretrained()"),xir=o(" to load the model weights."),$ir=l(),F(RT.$$.fragment),kir=l(),co=a("div"),F(Oy.$$.fragment),Sir=l(),Ibe=a("p"),Rir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pir=l(),Ha=a("p"),Bir=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Iir=o("model_type"),Nir=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),qir=o("pretrained_model_name_or_path"),jir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Dir=o("pretrained_model_name_or_path"),Gir=o(":"),Oir=l(),Dbe=a("ul"),PT=a("li"),Gbe=a("strong"),Vir=o("vision-encoder-decoder"),Xir=o(" \u2014 "),jW=a("a"),zir=o("VisionEncoderDecoderModel"),Qir=o(" (Vision Encoder decoder model)"),Wir=l(),BT=a("p"),Hir=o("The model is set in evaluation mode by default using "),Obe=a("code"),Uir=o("model.eval()"),Jir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=a("code"),Yir=o("model.train()"),Kir=l(),F(IT.$$.fragment),XXe=l(),Ad=a("h2"),NT=a("a"),Xbe=a("span"),F(Vy.$$.fragment),Zir=l(),zbe=a("span"),edr=o("AutoModelForVisualQuestionAnswering"),zXe=l(),Xo=a("div"),F(Xy.$$.fragment),odr=l(),Ld=a("p"),rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=a("a"),tdr=o("from_pretrained()"),adr=o(" class method or the "),GW=a("a"),ndr=o("from_config()"),sdr=o(` class
method.`),ldr=l(),zy=a("p"),idr=o("This class cannot be instantiated directly using "),Qbe=a("code"),ddr=o("__init__()"),cdr=o(" (throws an error)."),fdr=l(),Mt=a("div"),F(Qy.$$.fragment),mdr=l(),Wbe=a("p"),gdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),hdr=l(),yd=a("p"),pdr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),_dr=o("not"),udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),bdr=o("from_pretrained()"),vdr=o(" to load the model weights."),Fdr=l(),F(qT.$$.fragment),Tdr=l(),fo=a("div"),F(Wy.$$.fragment),Mdr=l(),Ube=a("p"),Edr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Cdr=l(),Ua=a("p"),wdr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Adr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),ydr=o("pretrained_model_name_or_path"),xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),$dr=o("pretrained_model_name_or_path"),kdr=o(":"),Sdr=l(),Zbe=a("ul"),jT=a("li"),eve=a("strong"),Rdr=o("vilt"),Pdr=o(" \u2014 "),VW=a("a"),Bdr=o("ViltForQuestionAnswering"),Idr=o(" (ViLT model)"),Ndr=l(),DT=a("p"),qdr=o("The model is set in evaluation mode by default using "),ove=a("code"),jdr=o("model.eval()"),Ddr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=a("code"),Gdr=o("model.train()"),Odr=l(),F(GT.$$.fragment),QXe=l(),xd=a("h2"),OT=a("a"),tve=a("span"),F(Hy.$$.fragment),Vdr=l(),ave=a("span"),Xdr=o("AutoModelForAudioClassification"),WXe=l(),zo=a("div"),F(Uy.$$.fragment),zdr=l(),$d=a("p"),Qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=a("a"),Wdr=o("from_pretrained()"),Hdr=o(" class method or the "),zW=a("a"),Udr=o("from_config()"),Jdr=o(` class
method.`),Ydr=l(),Jy=a("p"),Kdr=o("This class cannot be instantiated directly using "),nve=a("code"),Zdr=o("__init__()"),ecr=o(" (throws an error)."),ocr=l(),Et=a("div"),F(Yy.$$.fragment),rcr=l(),sve=a("p"),tcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),acr=l(),kd=a("p"),ncr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),scr=o("not"),lcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),icr=o("from_pretrained()"),dcr=o(" to load the model weights."),ccr=l(),F(VT.$$.fragment),fcr=l(),mo=a("div"),F(Ky.$$.fragment),mcr=l(),ive=a("p"),gcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hcr=l(),Ja=a("p"),pcr=o("The model class to instantiate is selected based on the "),dve=a("code"),_cr=o("model_type"),ucr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(":"),Mcr=l(),Be=a("ul"),XT=a("li"),mve=a("strong"),Ecr=o("data2vec-audio"),Ccr=o(" \u2014 "),WW=a("a"),wcr=o("Data2VecAudioForSequenceClassification"),Acr=o(" (Data2VecAudio model)"),Lcr=l(),zT=a("li"),gve=a("strong"),ycr=o("hubert"),xcr=o(" \u2014 "),HW=a("a"),$cr=o("HubertForSequenceClassification"),kcr=o(" (Hubert model)"),Scr=l(),QT=a("li"),hve=a("strong"),Rcr=o("sew"),Pcr=o(" \u2014 "),UW=a("a"),Bcr=o("SEWForSequenceClassification"),Icr=o(" (SEW model)"),Ncr=l(),WT=a("li"),pve=a("strong"),qcr=o("sew-d"),jcr=o(" \u2014 "),JW=a("a"),Dcr=o("SEWDForSequenceClassification"),Gcr=o(" (SEW-D model)"),Ocr=l(),HT=a("li"),_ve=a("strong"),Vcr=o("unispeech"),Xcr=o(" \u2014 "),YW=a("a"),zcr=o("UniSpeechForSequenceClassification"),Qcr=o(" (UniSpeech model)"),Wcr=l(),UT=a("li"),uve=a("strong"),Hcr=o("unispeech-sat"),Ucr=o(" \u2014 "),KW=a("a"),Jcr=o("UniSpeechSatForSequenceClassification"),Ycr=o(" (UniSpeechSat model)"),Kcr=l(),JT=a("li"),bve=a("strong"),Zcr=o("wav2vec2"),efr=o(" \u2014 "),ZW=a("a"),ofr=o("Wav2Vec2ForSequenceClassification"),rfr=o(" (Wav2Vec2 model)"),tfr=l(),YT=a("li"),vve=a("strong"),afr=o("wav2vec2-conformer"),nfr=o(" \u2014 "),eH=a("a"),sfr=o("Wav2Vec2ConformerForSequenceClassification"),lfr=o(" (Wav2Vec2-Conformer model)"),ifr=l(),KT=a("li"),Fve=a("strong"),dfr=o("wavlm"),cfr=o(" \u2014 "),oH=a("a"),ffr=o("WavLMForSequenceClassification"),mfr=o(" (WavLM model)"),gfr=l(),ZT=a("p"),hfr=o("The model is set in evaluation mode by default using "),Tve=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=a("code"),ufr=o("model.train()"),bfr=l(),F(e8.$$.fragment),HXe=l(),Sd=a("h2"),o8=a("a"),Eve=a("span"),F(Zy.$$.fragment),vfr=l(),Cve=a("span"),Ffr=o("AutoModelForAudioFrameClassification"),UXe=l(),Qo=a("div"),F(e9.$$.fragment),Tfr=l(),Rd=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),tH=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),Lfr=l(),o9=a("p"),yfr=o("This class cannot be instantiated directly using "),wve=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Ct=a("div"),F(r9.$$.fragment),Sfr=l(),Ave=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pfr=l(),Pd=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),Ifr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),qfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(r8.$$.fragment),Gfr=l(),go=a("div"),F(t9.$$.fragment),Ofr=l(),yve=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Xfr=l(),Ya=a("p"),zfr=o("The model class to instantiate is selected based on the "),xve=a("code"),Qfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),rt=a("ul"),t8=a("li"),Sve=a("strong"),Zfr=o("data2vec-audio"),emr=o(" \u2014 "),nH=a("a"),omr=o("Data2VecAudioForAudioFrameClassification"),rmr=o(" (Data2VecAudio model)"),tmr=l(),a8=a("li"),Rve=a("strong"),amr=o("unispeech-sat"),nmr=o(" \u2014 "),sH=a("a"),smr=o("UniSpeechSatForAudioFrameClassification"),lmr=o(" (UniSpeechSat model)"),imr=l(),n8=a("li"),Pve=a("strong"),dmr=o("wav2vec2"),cmr=o(" \u2014 "),lH=a("a"),fmr=o("Wav2Vec2ForAudioFrameClassification"),mmr=o(" (Wav2Vec2 model)"),gmr=l(),s8=a("li"),Bve=a("strong"),hmr=o("wav2vec2-conformer"),pmr=o(" \u2014 "),iH=a("a"),_mr=o("Wav2Vec2ConformerForAudioFrameClassification"),umr=o(" (Wav2Vec2-Conformer model)"),bmr=l(),l8=a("li"),Ive=a("strong"),vmr=o("wavlm"),Fmr=o(" \u2014 "),dH=a("a"),Tmr=o("WavLMForAudioFrameClassification"),Mmr=o(" (WavLM model)"),Emr=l(),i8=a("p"),Cmr=o("The model is set in evaluation mode by default using "),Nve=a("code"),wmr=o("model.eval()"),Amr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=a("code"),Lmr=o("model.train()"),ymr=l(),F(d8.$$.fragment),JXe=l(),Bd=a("h2"),c8=a("a"),jve=a("span"),F(a9.$$.fragment),xmr=l(),Dve=a("span"),$mr=o("AutoModelForCTC"),YXe=l(),Wo=a("div"),F(n9.$$.fragment),kmr=l(),Id=a("p"),Smr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=a("a"),Rmr=o("from_pretrained()"),Pmr=o(" class method or the "),fH=a("a"),Bmr=o("from_config()"),Imr=o(` class
method.`),Nmr=l(),s9=a("p"),qmr=o("This class cannot be instantiated directly using "),Gve=a("code"),jmr=o("__init__()"),Dmr=o(" (throws an error)."),Gmr=l(),wt=a("div"),F(l9.$$.fragment),Omr=l(),Ove=a("p"),Vmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Xmr=l(),Nd=a("p"),zmr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),Qmr=o("not"),Wmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Hmr=o("from_pretrained()"),Umr=o(" to load the model weights."),Jmr=l(),F(f8.$$.fragment),Ymr=l(),ho=a("div"),F(i9.$$.fragment),Kmr=l(),Xve=a("p"),Zmr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),egr=l(),Ka=a("p"),ogr=o("The model class to instantiate is selected based on the "),zve=a("code"),rgr=o("model_type"),tgr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(":"),igr=l(),ye=a("ul"),m8=a("li"),Hve=a("strong"),dgr=o("data2vec-audio"),cgr=o(" \u2014 "),gH=a("a"),fgr=o("Data2VecAudioForCTC"),mgr=o(" (Data2VecAudio model)"),ggr=l(),g8=a("li"),Uve=a("strong"),hgr=o("hubert"),pgr=o(" \u2014 "),hH=a("a"),_gr=o("HubertForCTC"),ugr=o(" (Hubert model)"),bgr=l(),h8=a("li"),Jve=a("strong"),vgr=o("mctct"),Fgr=o(" \u2014 "),pH=a("a"),Tgr=o("MCTCTForCTC"),Mgr=o(" (M-CTC-T model)"),Egr=l(),p8=a("li"),Yve=a("strong"),Cgr=o("sew"),wgr=o(" \u2014 "),_H=a("a"),Agr=o("SEWForCTC"),Lgr=o(" (SEW model)"),ygr=l(),_8=a("li"),Kve=a("strong"),xgr=o("sew-d"),$gr=o(" \u2014 "),uH=a("a"),kgr=o("SEWDForCTC"),Sgr=o(" (SEW-D model)"),Rgr=l(),u8=a("li"),Zve=a("strong"),Pgr=o("unispeech"),Bgr=o(" \u2014 "),bH=a("a"),Igr=o("UniSpeechForCTC"),Ngr=o(" (UniSpeech model)"),qgr=l(),b8=a("li"),e0e=a("strong"),jgr=o("unispeech-sat"),Dgr=o(" \u2014 "),vH=a("a"),Ggr=o("UniSpeechSatForCTC"),Ogr=o(" (UniSpeechSat model)"),Vgr=l(),v8=a("li"),o0e=a("strong"),Xgr=o("wav2vec2"),zgr=o(" \u2014 "),FH=a("a"),Qgr=o("Wav2Vec2ForCTC"),Wgr=o(" (Wav2Vec2 model)"),Hgr=l(),F8=a("li"),r0e=a("strong"),Ugr=o("wav2vec2-conformer"),Jgr=o(" \u2014 "),TH=a("a"),Ygr=o("Wav2Vec2ConformerForCTC"),Kgr=o(" (Wav2Vec2-Conformer model)"),Zgr=l(),T8=a("li"),t0e=a("strong"),ehr=o("wavlm"),ohr=o(" \u2014 "),MH=a("a"),rhr=o("WavLMForCTC"),thr=o(" (WavLM model)"),ahr=l(),M8=a("p"),nhr=o("The model is set in evaluation mode by default using "),a0e=a("code"),shr=o("model.eval()"),lhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n0e=a("code"),ihr=o("model.train()"),dhr=l(),F(E8.$$.fragment),KXe=l(),qd=a("h2"),C8=a("a"),s0e=a("span"),F(d9.$$.fragment),chr=l(),l0e=a("span"),fhr=o("AutoModelForSpeechSeq2Seq"),ZXe=l(),Ho=a("div"),F(c9.$$.fragment),mhr=l(),jd=a("p"),ghr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=a("a"),hhr=o("from_pretrained()"),phr=o(" class method or the "),CH=a("a"),_hr=o("from_config()"),uhr=o(` class
method.`),bhr=l(),f9=a("p"),vhr=o("This class cannot be instantiated directly using "),i0e=a("code"),Fhr=o("__init__()"),Thr=o(" (throws an error)."),Mhr=l(),At=a("div"),F(m9.$$.fragment),Ehr=l(),d0e=a("p"),Chr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),whr=l(),Dd=a("p"),Ahr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),Lhr=o("not"),yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),xhr=o("from_pretrained()"),$hr=o(" to load the model weights."),khr=l(),F(w8.$$.fragment),Shr=l(),po=a("div"),F(g9.$$.fragment),Rhr=l(),f0e=a("p"),Phr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bhr=l(),Za=a("p"),Ihr=o("The model class to instantiate is selected based on the "),m0e=a("code"),Nhr=o("model_type"),qhr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(":"),Vhr=l(),h9=a("ul"),A8=a("li"),p0e=a("strong"),Xhr=o("speech-encoder-decoder"),zhr=o(" \u2014 "),AH=a("a"),Qhr=o("SpeechEncoderDecoderModel"),Whr=o(" (Speech Encoder decoder model)"),Hhr=l(),L8=a("li"),_0e=a("strong"),Uhr=o("speech_to_text"),Jhr=o(" \u2014 "),LH=a("a"),Yhr=o("Speech2TextForConditionalGeneration"),Khr=o(" (Speech2Text model)"),Zhr=l(),y8=a("p"),epr=o("The model is set in evaluation mode by default using "),u0e=a("code"),opr=o("model.eval()"),rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=a("code"),tpr=o("model.train()"),apr=l(),F(x8.$$.fragment),eze=l(),Gd=a("h2"),$8=a("a"),v0e=a("span"),F(p9.$$.fragment),npr=l(),F0e=a("span"),spr=o("AutoModelForAudioXVector"),oze=l(),Uo=a("div"),F(_9.$$.fragment),lpr=l(),Od=a("p"),ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=a("a"),dpr=o("from_pretrained()"),cpr=o(" class method or the "),xH=a("a"),fpr=o("from_config()"),mpr=o(` class
method.`),gpr=l(),u9=a("p"),hpr=o("This class cannot be instantiated directly using "),T0e=a("code"),ppr=o("__init__()"),_pr=o(" (throws an error)."),upr=l(),Lt=a("div"),F(b9.$$.fragment),bpr=l(),M0e=a("p"),vpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fpr=l(),Vd=a("p"),Tpr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),Mpr=o("not"),Epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Cpr=o("from_pretrained()"),wpr=o(" to load the model weights."),Apr=l(),F(k8.$$.fragment),Lpr=l(),_o=a("div"),F(v9.$$.fragment),ypr=l(),C0e=a("p"),xpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$pr=l(),en=a("p"),kpr=o("The model class to instantiate is selected based on the "),w0e=a("code"),Spr=o("model_type"),Rpr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),Ppr=o("pretrained_model_name_or_path"),Bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),Ipr=o("pretrained_model_name_or_path"),Npr=o(":"),qpr=l(),tt=a("ul"),S8=a("li"),y0e=a("strong"),jpr=o("data2vec-audio"),Dpr=o(" \u2014 "),kH=a("a"),Gpr=o("Data2VecAudioForXVector"),Opr=o(" (Data2VecAudio model)"),Vpr=l(),R8=a("li"),x0e=a("strong"),Xpr=o("unispeech-sat"),zpr=o(" \u2014 "),SH=a("a"),Qpr=o("UniSpeechSatForXVector"),Wpr=o(" (UniSpeechSat model)"),Hpr=l(),P8=a("li"),$0e=a("strong"),Upr=o("wav2vec2"),Jpr=o(" \u2014 "),RH=a("a"),Ypr=o("Wav2Vec2ForXVector"),Kpr=o(" (Wav2Vec2 model)"),Zpr=l(),B8=a("li"),k0e=a("strong"),e_r=o("wav2vec2-conformer"),o_r=o(" \u2014 "),PH=a("a"),r_r=o("Wav2Vec2ConformerForXVector"),t_r=o(" (Wav2Vec2-Conformer model)"),a_r=l(),I8=a("li"),S0e=a("strong"),n_r=o("wavlm"),s_r=o(" \u2014 "),BH=a("a"),l_r=o("WavLMForXVector"),i_r=o(" (WavLM model)"),d_r=l(),N8=a("p"),c_r=o("The model is set in evaluation mode by default using "),R0e=a("code"),f_r=o("model.eval()"),m_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P0e=a("code"),g_r=o("model.train()"),h_r=l(),F(q8.$$.fragment),rze=l(),Xd=a("h2"),j8=a("a"),B0e=a("span"),F(F9.$$.fragment),p_r=l(),I0e=a("span"),__r=o("AutoModelForMaskedImageModeling"),tze=l(),Jo=a("div"),F(T9.$$.fragment),u_r=l(),zd=a("p"),b_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=a("a"),v_r=o("from_pretrained()"),F_r=o(" class method or the "),NH=a("a"),T_r=o("from_config()"),M_r=o(` class
method.`),E_r=l(),M9=a("p"),C_r=o("This class cannot be instantiated directly using "),N0e=a("code"),w_r=o("__init__()"),A_r=o(" (throws an error)."),L_r=l(),yt=a("div"),F(E9.$$.fragment),y_r=l(),q0e=a("p"),x_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$_r=l(),Qd=a("p"),k_r=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),S_r=o("not"),R_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),P_r=o("from_pretrained()"),B_r=o(" to load the model weights."),I_r=l(),F(D8.$$.fragment),N_r=l(),uo=a("div"),F(C9.$$.fragment),q_r=l(),D0e=a("p"),j_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),D_r=l(),on=a("p"),G_r=o("The model class to instantiate is selected based on the "),G0e=a("code"),O_r=o("model_type"),V_r=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),Q_r=o("pretrained_model_name_or_path"),W_r=o(":"),H_r=l(),Wd=a("ul"),G8=a("li"),X0e=a("strong"),U_r=o("deit"),J_r=o(" \u2014 "),jH=a("a"),Y_r=o("DeiTForMaskedImageModeling"),K_r=o(" (DeiT model)"),Z_r=l(),O8=a("li"),z0e=a("strong"),eur=o("swin"),our=o(" \u2014 "),DH=a("a"),rur=o("SwinForMaskedImageModeling"),tur=o(" (Swin Transformer model)"),aur=l(),V8=a("li"),Q0e=a("strong"),nur=o("vit"),sur=o(" \u2014 "),GH=a("a"),lur=o("ViTForMaskedImageModeling"),iur=o(" (ViT model)"),dur=l(),X8=a("p"),cur=o("The model is set in evaluation mode by default using "),W0e=a("code"),fur=o("model.eval()"),mur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H0e=a("code"),gur=o("model.train()"),hur=l(),F(z8.$$.fragment),aze=l(),Hd=a("h2"),Q8=a("a"),U0e=a("span"),F(w9.$$.fragment),pur=l(),J0e=a("span"),_ur=o("AutoModelForObjectDetection"),nze=l(),Yo=a("div"),F(A9.$$.fragment),uur=l(),Ud=a("p"),bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=a("a"),vur=o("from_pretrained()"),Fur=o(" class method or the "),VH=a("a"),Tur=o("from_config()"),Mur=o(` class
method.`),Eur=l(),L9=a("p"),Cur=o("This class cannot be instantiated directly using "),Y0e=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),xt=a("div"),F(y9.$$.fragment),yur=l(),K0e=a("p"),xur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$ur=l(),Jd=a("p"),kur=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),Sur=o("not"),Rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Pur=o("from_pretrained()"),Bur=o(" to load the model weights."),Iur=l(),F(W8.$$.fragment),Nur=l(),bo=a("div"),F(x9.$$.fragment),qur=l(),eFe=a("p"),jur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Dur=l(),rn=a("p"),Gur=o("The model class to instantiate is selected based on the "),oFe=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(":"),Hur=l(),$9=a("ul"),H8=a("li"),aFe=a("strong"),Uur=o("detr"),Jur=o(" \u2014 "),zH=a("a"),Yur=o("DetrForObjectDetection"),Kur=o(" (DETR model)"),Zur=l(),U8=a("li"),nFe=a("strong"),e2r=o("yolos"),o2r=o(" \u2014 "),QH=a("a"),r2r=o("YolosForObjectDetection"),t2r=o(" (YOLOS model)"),a2r=l(),J8=a("p"),n2r=o("The model is set in evaluation mode by default using "),sFe=a("code"),s2r=o("model.eval()"),l2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=a("code"),i2r=o("model.train()"),d2r=l(),F(Y8.$$.fragment),sze=l(),Yd=a("h2"),K8=a("a"),iFe=a("span"),F(k9.$$.fragment),c2r=l(),dFe=a("span"),f2r=o("AutoModelForImageSegmentation"),lze=l(),Ko=a("div"),F(S9.$$.fragment),m2r=l(),Kd=a("p"),g2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WH=a("a"),h2r=o("from_pretrained()"),p2r=o(" class method or the "),HH=a("a"),_2r=o("from_config()"),u2r=o(` class
method.`),b2r=l(),R9=a("p"),v2r=o("This class cannot be instantiated directly using "),cFe=a("code"),F2r=o("__init__()"),T2r=o(" (throws an error)."),M2r=l(),$t=a("div"),F(P9.$$.fragment),E2r=l(),fFe=a("p"),C2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),w2r=l(),Zd=a("p"),A2r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),L2r=o("not"),y2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),x2r=o("from_pretrained()"),$2r=o(" to load the model weights."),k2r=l(),F(Z8.$$.fragment),S2r=l(),vo=a("div"),F(B9.$$.fragment),R2r=l(),gFe=a("p"),P2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),B2r=l(),tn=a("p"),I2r=o("The model class to instantiate is selected based on the "),hFe=a("code"),N2r=o("model_type"),q2r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(":"),V2r=l(),uFe=a("ul"),eM=a("li"),bFe=a("strong"),X2r=o("detr"),z2r=o(" \u2014 "),JH=a("a"),Q2r=o("DetrForSegmentation"),W2r=o(" (DETR model)"),H2r=l(),oM=a("p"),U2r=o("The model is set in evaluation mode by default using "),vFe=a("code"),J2r=o("model.eval()"),Y2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=a("code"),K2r=o("model.train()"),Z2r=l(),F(rM.$$.fragment),ize=l(),ec=a("h2"),tM=a("a"),TFe=a("span"),F(I9.$$.fragment),e1r=l(),MFe=a("span"),o1r=o("AutoModelForSemanticSegmentation"),dze=l(),Zo=a("div"),F(N9.$$.fragment),r1r=l(),oc=a("p"),t1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YH=a("a"),a1r=o("from_pretrained()"),n1r=o(" class method or the "),KH=a("a"),s1r=o("from_config()"),l1r=o(` class
method.`),i1r=l(),q9=a("p"),d1r=o("This class cannot be instantiated directly using "),EFe=a("code"),c1r=o("__init__()"),f1r=o(" (throws an error)."),m1r=l(),kt=a("div"),F(j9.$$.fragment),g1r=l(),CFe=a("p"),h1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),p1r=l(),rc=a("p"),_1r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),u1r=o("not"),b1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),v1r=o("from_pretrained()"),F1r=o(" to load the model weights."),T1r=l(),F(aM.$$.fragment),M1r=l(),Fo=a("div"),F(D9.$$.fragment),E1r=l(),AFe=a("p"),C1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),w1r=l(),an=a("p"),A1r=o("The model class to instantiate is selected based on the "),LFe=a("code"),L1r=o("model_type"),y1r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),x1r=o("pretrained_model_name_or_path"),$1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(":"),R1r=l(),at=a("ul"),nM=a("li"),$Fe=a("strong"),P1r=o("beit"),B1r=o(" \u2014 "),eU=a("a"),I1r=o("BeitForSemanticSegmentation"),N1r=o(" (BEiT model)"),q1r=l(),sM=a("li"),kFe=a("strong"),j1r=o("data2vec-vision"),D1r=o(" \u2014 "),oU=a("a"),G1r=o("Data2VecVisionForSemanticSegmentation"),O1r=o(" (Data2VecVision model)"),V1r=l(),lM=a("li"),SFe=a("strong"),X1r=o("dpt"),z1r=o(" \u2014 "),rU=a("a"),Q1r=o("DPTForSemanticSegmentation"),W1r=o(" (DPT model)"),H1r=l(),iM=a("li"),RFe=a("strong"),U1r=o("mobilevit"),J1r=o(" \u2014 "),tU=a("a"),Y1r=o("MobileViTForSemanticSegmentation"),K1r=o(" (MobileViT model)"),Z1r=l(),dM=a("li"),PFe=a("strong"),ebr=o("segformer"),obr=o(" \u2014 "),aU=a("a"),rbr=o("SegformerForSemanticSegmentation"),tbr=o(" (SegFormer model)"),abr=l(),cM=a("p"),nbr=o("The model is set in evaluation mode by default using "),BFe=a("code"),sbr=o("model.eval()"),lbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),ibr=o("model.train()"),dbr=l(),F(fM.$$.fragment),cze=l(),tc=a("h2"),mM=a("a"),NFe=a("span"),F(G9.$$.fragment),cbr=l(),qFe=a("span"),fbr=o("AutoModelForInstanceSegmentation"),fze=l(),er=a("div"),F(O9.$$.fragment),mbr=l(),ac=a("p"),gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nU=a("a"),hbr=o("from_pretrained()"),pbr=o(" class method or the "),sU=a("a"),_br=o("from_config()"),ubr=o(` class
method.`),bbr=l(),V9=a("p"),vbr=o("This class cannot be instantiated directly using "),jFe=a("code"),Fbr=o("__init__()"),Tbr=o(" (throws an error)."),Mbr=l(),St=a("div"),F(X9.$$.fragment),Ebr=l(),DFe=a("p"),Cbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),wbr=l(),nc=a("p"),Abr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),Lbr=o("not"),ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),xbr=o("from_pretrained()"),$br=o(" to load the model weights."),kbr=l(),F(gM.$$.fragment),Sbr=l(),To=a("div"),F(z9.$$.fragment),Rbr=l(),OFe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Bbr=l(),nn=a("p"),Ibr=o("The model class to instantiate is selected based on the "),VFe=a("code"),Nbr=o("model_type"),qbr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(":"),Vbr=l(),QFe=a("ul"),hM=a("li"),WFe=a("strong"),Xbr=o("maskformer"),zbr=o(" \u2014 "),iU=a("a"),Qbr=o("MaskFormerForInstanceSegmentation"),Wbr=o(" (MaskFormer model)"),Hbr=l(),pM=a("p"),Ubr=o("The model is set in evaluation mode by default using "),HFe=a("code"),Jbr=o("model.eval()"),Ybr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=a("code"),Kbr=o("model.train()"),Zbr=l(),F(_M.$$.fragment),mze=l(),sc=a("h2"),uM=a("a"),JFe=a("span"),F(Q9.$$.fragment),evr=l(),YFe=a("span"),ovr=o("TFAutoModel"),gze=l(),or=a("div"),F(W9.$$.fragment),rvr=l(),lc=a("p"),tvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=a("a"),avr=o("from_pretrained()"),nvr=o(" class method or the "),cU=a("a"),svr=o("from_config()"),lvr=o(` class
method.`),ivr=l(),H9=a("p"),dvr=o("This class cannot be instantiated directly using "),KFe=a("code"),cvr=o("__init__()"),fvr=o(" (throws an error)."),mvr=l(),Rt=a("div"),F(U9.$$.fragment),gvr=l(),ZFe=a("p"),hvr=o("Instantiates one of the base model classes of the library from a configuration."),pvr=l(),ic=a("p"),_vr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),uvr=o("not"),bvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),vvr=o("from_pretrained()"),Fvr=o(" to load the model weights."),Tvr=l(),F(bM.$$.fragment),Mvr=l(),xr=a("div"),F(J9.$$.fragment),Evr=l(),oTe=a("p"),Cvr=o("Instantiate one of the base model classes of the library from a pretrained model."),wvr=l(),sn=a("p"),Avr=o("The model class to instantiate is selected based on the "),rTe=a("code"),Lvr=o("model_type"),yvr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),xvr=o("pretrained_model_name_or_path"),$vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),kvr=o("pretrained_model_name_or_path"),Svr=o(":"),Rvr=l(),q=a("ul"),vM=a("li"),nTe=a("strong"),Pvr=o("albert"),Bvr=o(" \u2014 "),mU=a("a"),Ivr=o("TFAlbertModel"),Nvr=o(" (ALBERT model)"),qvr=l(),FM=a("li"),sTe=a("strong"),jvr=o("bart"),Dvr=o(" \u2014 "),gU=a("a"),Gvr=o("TFBartModel"),Ovr=o(" (BART model)"),Vvr=l(),TM=a("li"),lTe=a("strong"),Xvr=o("bert"),zvr=o(" \u2014 "),hU=a("a"),Qvr=o("TFBertModel"),Wvr=o(" (BERT model)"),Hvr=l(),MM=a("li"),iTe=a("strong"),Uvr=o("blenderbot"),Jvr=o(" \u2014 "),pU=a("a"),Yvr=o("TFBlenderbotModel"),Kvr=o(" (Blenderbot model)"),Zvr=l(),EM=a("li"),dTe=a("strong"),e0r=o("blenderbot-small"),o0r=o(" \u2014 "),_U=a("a"),r0r=o("TFBlenderbotSmallModel"),t0r=o(" (BlenderbotSmall model)"),a0r=l(),CM=a("li"),cTe=a("strong"),n0r=o("camembert"),s0r=o(" \u2014 "),uU=a("a"),l0r=o("TFCamembertModel"),i0r=o(" (CamemBERT model)"),d0r=l(),wM=a("li"),fTe=a("strong"),c0r=o("clip"),f0r=o(" \u2014 "),bU=a("a"),m0r=o("TFCLIPModel"),g0r=o(" (CLIP model)"),h0r=l(),AM=a("li"),mTe=a("strong"),p0r=o("convbert"),_0r=o(" \u2014 "),vU=a("a"),u0r=o("TFConvBertModel"),b0r=o(" (ConvBERT model)"),v0r=l(),LM=a("li"),gTe=a("strong"),F0r=o("convnext"),T0r=o(" \u2014 "),FU=a("a"),M0r=o("TFConvNextModel"),E0r=o(" (ConvNeXT model)"),C0r=l(),yM=a("li"),hTe=a("strong"),w0r=o("ctrl"),A0r=o(" \u2014 "),TU=a("a"),L0r=o("TFCTRLModel"),y0r=o(" (CTRL model)"),x0r=l(),xM=a("li"),pTe=a("strong"),$0r=o("data2vec-vision"),k0r=o(" \u2014 "),MU=a("a"),S0r=o("TFData2VecVisionModel"),R0r=o(" (Data2VecVision model)"),P0r=l(),$M=a("li"),_Te=a("strong"),B0r=o("deberta"),I0r=o(" \u2014 "),EU=a("a"),N0r=o("TFDebertaModel"),q0r=o(" (DeBERTa model)"),j0r=l(),kM=a("li"),uTe=a("strong"),D0r=o("deberta-v2"),G0r=o(" \u2014 "),CU=a("a"),O0r=o("TFDebertaV2Model"),V0r=o(" (DeBERTa-v2 model)"),X0r=l(),SM=a("li"),bTe=a("strong"),z0r=o("deit"),Q0r=o(" \u2014 "),wU=a("a"),W0r=o("TFDeiTModel"),H0r=o(" (DeiT model)"),U0r=l(),RM=a("li"),vTe=a("strong"),J0r=o("distilbert"),Y0r=o(" \u2014 "),AU=a("a"),K0r=o("TFDistilBertModel"),Z0r=o(" (DistilBERT model)"),eFr=l(),PM=a("li"),FTe=a("strong"),oFr=o("dpr"),rFr=o(" \u2014 "),LU=a("a"),tFr=o("TFDPRQuestionEncoder"),aFr=o(" (DPR model)"),nFr=l(),BM=a("li"),TTe=a("strong"),sFr=o("electra"),lFr=o(" \u2014 "),yU=a("a"),iFr=o("TFElectraModel"),dFr=o(" (ELECTRA model)"),cFr=l(),IM=a("li"),MTe=a("strong"),fFr=o("flaubert"),mFr=o(" \u2014 "),xU=a("a"),gFr=o("TFFlaubertModel"),hFr=o(" (FlauBERT model)"),pFr=l(),Js=a("li"),ETe=a("strong"),_Fr=o("funnel"),uFr=o(" \u2014 "),$U=a("a"),bFr=o("TFFunnelModel"),vFr=o(" or "),kU=a("a"),FFr=o("TFFunnelBaseModel"),TFr=o(" (Funnel Transformer model)"),MFr=l(),NM=a("li"),CTe=a("strong"),EFr=o("gpt2"),CFr=o(" \u2014 "),SU=a("a"),wFr=o("TFGPT2Model"),AFr=o(" (OpenAI GPT-2 model)"),LFr=l(),qM=a("li"),wTe=a("strong"),yFr=o("gptj"),xFr=o(" \u2014 "),RU=a("a"),$Fr=o("TFGPTJModel"),kFr=o(" (GPT-J model)"),SFr=l(),jM=a("li"),ATe=a("strong"),RFr=o("hubert"),PFr=o(" \u2014 "),PU=a("a"),BFr=o("TFHubertModel"),IFr=o(" (Hubert model)"),NFr=l(),DM=a("li"),LTe=a("strong"),qFr=o("layoutlm"),jFr=o(" \u2014 "),BU=a("a"),DFr=o("TFLayoutLMModel"),GFr=o(" (LayoutLM model)"),OFr=l(),GM=a("li"),yTe=a("strong"),VFr=o("led"),XFr=o(" \u2014 "),IU=a("a"),zFr=o("TFLEDModel"),QFr=o(" (LED model)"),WFr=l(),OM=a("li"),xTe=a("strong"),HFr=o("longformer"),UFr=o(" \u2014 "),NU=a("a"),JFr=o("TFLongformerModel"),YFr=o(" (Longformer model)"),KFr=l(),VM=a("li"),$Te=a("strong"),ZFr=o("lxmert"),eTr=o(" \u2014 "),qU=a("a"),oTr=o("TFLxmertModel"),rTr=o(" (LXMERT model)"),tTr=l(),XM=a("li"),kTe=a("strong"),aTr=o("marian"),nTr=o(" \u2014 "),jU=a("a"),sTr=o("TFMarianModel"),lTr=o(" (Marian model)"),iTr=l(),zM=a("li"),STe=a("strong"),dTr=o("mbart"),cTr=o(" \u2014 "),DU=a("a"),fTr=o("TFMBartModel"),mTr=o(" (mBART model)"),gTr=l(),QM=a("li"),RTe=a("strong"),hTr=o("mobilebert"),pTr=o(" \u2014 "),GU=a("a"),_Tr=o("TFMobileBertModel"),uTr=o(" (MobileBERT model)"),bTr=l(),WM=a("li"),PTe=a("strong"),vTr=o("mpnet"),FTr=o(" \u2014 "),OU=a("a"),TTr=o("TFMPNetModel"),MTr=o(" (MPNet model)"),ETr=l(),HM=a("li"),BTe=a("strong"),CTr=o("mt5"),wTr=o(" \u2014 "),VU=a("a"),ATr=o("TFMT5Model"),LTr=o(" (MT5 model)"),yTr=l(),UM=a("li"),ITe=a("strong"),xTr=o("openai-gpt"),$Tr=o(" \u2014 "),XU=a("a"),kTr=o("TFOpenAIGPTModel"),STr=o(" (OpenAI GPT model)"),RTr=l(),JM=a("li"),NTe=a("strong"),PTr=o("opt"),BTr=o(" \u2014 "),zU=a("a"),ITr=o("TFOPTModel"),NTr=o(" (OPT model)"),qTr=l(),YM=a("li"),qTe=a("strong"),jTr=o("pegasus"),DTr=o(" \u2014 "),QU=a("a"),GTr=o("TFPegasusModel"),OTr=o(" (Pegasus model)"),VTr=l(),KM=a("li"),jTe=a("strong"),XTr=o("regnet"),zTr=o(" \u2014 "),WU=a("a"),QTr=o("TFRegNetModel"),WTr=o(" (RegNet model)"),HTr=l(),ZM=a("li"),DTe=a("strong"),UTr=o("rembert"),JTr=o(" \u2014 "),HU=a("a"),YTr=o("TFRemBertModel"),KTr=o(" (RemBERT model)"),ZTr=l(),e4=a("li"),GTe=a("strong"),e8r=o("resnet"),o8r=o(" \u2014 "),UU=a("a"),r8r=o("TFResNetModel"),t8r=o(" (ResNet model)"),a8r=l(),o4=a("li"),OTe=a("strong"),n8r=o("roberta"),s8r=o(" \u2014 "),JU=a("a"),l8r=o("TFRobertaModel"),i8r=o(" (RoBERTa model)"),d8r=l(),r4=a("li"),VTe=a("strong"),c8r=o("roformer"),f8r=o(" \u2014 "),YU=a("a"),m8r=o("TFRoFormerModel"),g8r=o(" (RoFormer model)"),h8r=l(),t4=a("li"),XTe=a("strong"),p8r=o("speech_to_text"),_8r=o(" \u2014 "),KU=a("a"),u8r=o("TFSpeech2TextModel"),b8r=o(" (Speech2Text model)"),v8r=l(),a4=a("li"),zTe=a("strong"),F8r=o("swin"),T8r=o(" \u2014 "),ZU=a("a"),M8r=o("TFSwinModel"),E8r=o(" (Swin Transformer model)"),C8r=l(),n4=a("li"),QTe=a("strong"),w8r=o("t5"),A8r=o(" \u2014 "),eJ=a("a"),L8r=o("TFT5Model"),y8r=o(" (T5 model)"),x8r=l(),s4=a("li"),WTe=a("strong"),$8r=o("tapas"),k8r=o(" \u2014 "),oJ=a("a"),S8r=o("TFTapasModel"),R8r=o(" (TAPAS model)"),P8r=l(),l4=a("li"),HTe=a("strong"),B8r=o("transfo-xl"),I8r=o(" \u2014 "),rJ=a("a"),N8r=o("TFTransfoXLModel"),q8r=o(" (Transformer-XL model)"),j8r=l(),i4=a("li"),UTe=a("strong"),D8r=o("vit"),G8r=o(" \u2014 "),tJ=a("a"),O8r=o("TFViTModel"),V8r=o(" (ViT model)"),X8r=l(),d4=a("li"),JTe=a("strong"),z8r=o("vit_mae"),Q8r=o(" \u2014 "),aJ=a("a"),W8r=o("TFViTMAEModel"),H8r=o(" (ViTMAE model)"),U8r=l(),c4=a("li"),YTe=a("strong"),J8r=o("wav2vec2"),Y8r=o(" \u2014 "),nJ=a("a"),K8r=o("TFWav2Vec2Model"),Z8r=o(" (Wav2Vec2 model)"),eMr=l(),f4=a("li"),KTe=a("strong"),oMr=o("xlm"),rMr=o(" \u2014 "),sJ=a("a"),tMr=o("TFXLMModel"),aMr=o(" (XLM model)"),nMr=l(),m4=a("li"),ZTe=a("strong"),sMr=o("xlm-roberta"),lMr=o(" \u2014 "),lJ=a("a"),iMr=o("TFXLMRobertaModel"),dMr=o(" (XLM-RoBERTa model)"),cMr=l(),g4=a("li"),e8e=a("strong"),fMr=o("xlnet"),mMr=o(" \u2014 "),iJ=a("a"),gMr=o("TFXLNetModel"),hMr=o(" (XLNet model)"),pMr=l(),F(h4.$$.fragment),hze=l(),dc=a("h2"),p4=a("a"),o8e=a("span"),F(Y9.$$.fragment),_Mr=l(),r8e=a("span"),uMr=o("TFAutoModelForPreTraining"),pze=l(),rr=a("div"),F(K9.$$.fragment),bMr=l(),cc=a("p"),vMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dJ=a("a"),FMr=o("from_pretrained()"),TMr=o(" class method or the "),cJ=a("a"),MMr=o("from_config()"),EMr=o(` class
method.`),CMr=l(),Z9=a("p"),wMr=o("This class cannot be instantiated directly using "),t8e=a("code"),AMr=o("__init__()"),LMr=o(" (throws an error)."),yMr=l(),Pt=a("div"),F(ex.$$.fragment),xMr=l(),a8e=a("p"),$Mr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kMr=l(),fc=a("p"),SMr=o(`Note:
Loading a model from its configuration file does `),n8e=a("strong"),RMr=o("not"),PMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),BMr=o("from_pretrained()"),IMr=o(" to load the model weights."),NMr=l(),F(_4.$$.fragment),qMr=l(),$r=a("div"),F(ox.$$.fragment),jMr=l(),s8e=a("p"),DMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GMr=l(),ln=a("p"),OMr=o("The model class to instantiate is selected based on the "),l8e=a("code"),VMr=o("model_type"),XMr=o(` property of the config object (either
passed as an argument or loaded from `),i8e=a("code"),zMr=o("pretrained_model_name_or_path"),QMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=a("code"),WMr=o("pretrained_model_name_or_path"),HMr=o(":"),UMr=l(),se=a("ul"),u4=a("li"),c8e=a("strong"),JMr=o("albert"),YMr=o(" \u2014 "),mJ=a("a"),KMr=o("TFAlbertForPreTraining"),ZMr=o(" (ALBERT model)"),e4r=l(),b4=a("li"),f8e=a("strong"),o4r=o("bart"),r4r=o(" \u2014 "),gJ=a("a"),t4r=o("TFBartForConditionalGeneration"),a4r=o(" (BART model)"),n4r=l(),v4=a("li"),m8e=a("strong"),s4r=o("bert"),l4r=o(" \u2014 "),hJ=a("a"),i4r=o("TFBertForPreTraining"),d4r=o(" (BERT model)"),c4r=l(),F4=a("li"),g8e=a("strong"),f4r=o("camembert"),m4r=o(" \u2014 "),pJ=a("a"),g4r=o("TFCamembertForMaskedLM"),h4r=o(" (CamemBERT model)"),p4r=l(),T4=a("li"),h8e=a("strong"),_4r=o("ctrl"),u4r=o(" \u2014 "),_J=a("a"),b4r=o("TFCTRLLMHeadModel"),v4r=o(" (CTRL model)"),F4r=l(),M4=a("li"),p8e=a("strong"),T4r=o("distilbert"),M4r=o(" \u2014 "),uJ=a("a"),E4r=o("TFDistilBertForMaskedLM"),C4r=o(" (DistilBERT model)"),w4r=l(),E4=a("li"),_8e=a("strong"),A4r=o("electra"),L4r=o(" \u2014 "),bJ=a("a"),y4r=o("TFElectraForPreTraining"),x4r=o(" (ELECTRA model)"),$4r=l(),C4=a("li"),u8e=a("strong"),k4r=o("flaubert"),S4r=o(" \u2014 "),vJ=a("a"),R4r=o("TFFlaubertWithLMHeadModel"),P4r=o(" (FlauBERT model)"),B4r=l(),w4=a("li"),b8e=a("strong"),I4r=o("funnel"),N4r=o(" \u2014 "),FJ=a("a"),q4r=o("TFFunnelForPreTraining"),j4r=o(" (Funnel Transformer model)"),D4r=l(),A4=a("li"),v8e=a("strong"),G4r=o("gpt2"),O4r=o(" \u2014 "),TJ=a("a"),V4r=o("TFGPT2LMHeadModel"),X4r=o(" (OpenAI GPT-2 model)"),z4r=l(),L4=a("li"),F8e=a("strong"),Q4r=o("layoutlm"),W4r=o(" \u2014 "),MJ=a("a"),H4r=o("TFLayoutLMForMaskedLM"),U4r=o(" (LayoutLM model)"),J4r=l(),y4=a("li"),T8e=a("strong"),Y4r=o("lxmert"),K4r=o(" \u2014 "),EJ=a("a"),Z4r=o("TFLxmertForPreTraining"),eEr=o(" (LXMERT model)"),oEr=l(),x4=a("li"),M8e=a("strong"),rEr=o("mobilebert"),tEr=o(" \u2014 "),CJ=a("a"),aEr=o("TFMobileBertForPreTraining"),nEr=o(" (MobileBERT model)"),sEr=l(),$4=a("li"),E8e=a("strong"),lEr=o("mpnet"),iEr=o(" \u2014 "),wJ=a("a"),dEr=o("TFMPNetForMaskedLM"),cEr=o(" (MPNet model)"),fEr=l(),k4=a("li"),C8e=a("strong"),mEr=o("openai-gpt"),gEr=o(" \u2014 "),AJ=a("a"),hEr=o("TFOpenAIGPTLMHeadModel"),pEr=o(" (OpenAI GPT model)"),_Er=l(),S4=a("li"),w8e=a("strong"),uEr=o("roberta"),bEr=o(" \u2014 "),LJ=a("a"),vEr=o("TFRobertaForMaskedLM"),FEr=o(" (RoBERTa model)"),TEr=l(),R4=a("li"),A8e=a("strong"),MEr=o("t5"),EEr=o(" \u2014 "),yJ=a("a"),CEr=o("TFT5ForConditionalGeneration"),wEr=o(" (T5 model)"),AEr=l(),P4=a("li"),L8e=a("strong"),LEr=o("tapas"),yEr=o(" \u2014 "),xJ=a("a"),xEr=o("TFTapasForMaskedLM"),$Er=o(" (TAPAS model)"),kEr=l(),B4=a("li"),y8e=a("strong"),SEr=o("transfo-xl"),REr=o(" \u2014 "),$J=a("a"),PEr=o("TFTransfoXLLMHeadModel"),BEr=o(" (Transformer-XL model)"),IEr=l(),I4=a("li"),x8e=a("strong"),NEr=o("vit_mae"),qEr=o(" \u2014 "),kJ=a("a"),jEr=o("TFViTMAEForPreTraining"),DEr=o(" (ViTMAE model)"),GEr=l(),N4=a("li"),$8e=a("strong"),OEr=o("xlm"),VEr=o(" \u2014 "),SJ=a("a"),XEr=o("TFXLMWithLMHeadModel"),zEr=o(" (XLM model)"),QEr=l(),q4=a("li"),k8e=a("strong"),WEr=o("xlm-roberta"),HEr=o(" \u2014 "),RJ=a("a"),UEr=o("TFXLMRobertaForMaskedLM"),JEr=o(" (XLM-RoBERTa model)"),YEr=l(),j4=a("li"),S8e=a("strong"),KEr=o("xlnet"),ZEr=o(" \u2014 "),PJ=a("a"),eCr=o("TFXLNetLMHeadModel"),oCr=o(" (XLNet model)"),rCr=l(),F(D4.$$.fragment),_ze=l(),mc=a("h2"),G4=a("a"),R8e=a("span"),F(rx.$$.fragment),tCr=l(),P8e=a("span"),aCr=o("TFAutoModelForCausalLM"),uze=l(),tr=a("div"),F(tx.$$.fragment),nCr=l(),gc=a("p"),sCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=a("a"),lCr=o("from_pretrained()"),iCr=o(" class method or the "),IJ=a("a"),dCr=o("from_config()"),cCr=o(` class
method.`),fCr=l(),ax=a("p"),mCr=o("This class cannot be instantiated directly using "),B8e=a("code"),gCr=o("__init__()"),hCr=o(" (throws an error)."),pCr=l(),Bt=a("div"),F(nx.$$.fragment),_Cr=l(),I8e=a("p"),uCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bCr=l(),hc=a("p"),vCr=o(`Note:
Loading a model from its configuration file does `),N8e=a("strong"),FCr=o("not"),TCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),MCr=o("from_pretrained()"),ECr=o(" to load the model weights."),CCr=l(),F(O4.$$.fragment),wCr=l(),kr=a("div"),F(sx.$$.fragment),ACr=l(),q8e=a("p"),LCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yCr=l(),dn=a("p"),xCr=o("The model class to instantiate is selected based on the "),j8e=a("code"),$Cr=o("model_type"),kCr=o(` property of the config object (either
passed as an argument or loaded from `),D8e=a("code"),SCr=o("pretrained_model_name_or_path"),RCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=a("code"),PCr=o("pretrained_model_name_or_path"),BCr=o(":"),ICr=l(),Me=a("ul"),V4=a("li"),O8e=a("strong"),NCr=o("bert"),qCr=o(" \u2014 "),qJ=a("a"),jCr=o("TFBertLMHeadModel"),DCr=o(" (BERT model)"),GCr=l(),X4=a("li"),V8e=a("strong"),OCr=o("camembert"),VCr=o(" \u2014 "),jJ=a("a"),XCr=o("TFCamembertForCausalLM"),zCr=o(" (CamemBERT model)"),QCr=l(),z4=a("li"),X8e=a("strong"),WCr=o("ctrl"),HCr=o(" \u2014 "),DJ=a("a"),UCr=o("TFCTRLLMHeadModel"),JCr=o(" (CTRL model)"),YCr=l(),Q4=a("li"),z8e=a("strong"),KCr=o("gpt2"),ZCr=o(" \u2014 "),GJ=a("a"),e3r=o("TFGPT2LMHeadModel"),o3r=o(" (OpenAI GPT-2 model)"),r3r=l(),W4=a("li"),Q8e=a("strong"),t3r=o("gptj"),a3r=o(" \u2014 "),OJ=a("a"),n3r=o("TFGPTJForCausalLM"),s3r=o(" (GPT-J model)"),l3r=l(),H4=a("li"),W8e=a("strong"),i3r=o("openai-gpt"),d3r=o(" \u2014 "),VJ=a("a"),c3r=o("TFOpenAIGPTLMHeadModel"),f3r=o(" (OpenAI GPT model)"),m3r=l(),U4=a("li"),H8e=a("strong"),g3r=o("opt"),h3r=o(" \u2014 "),XJ=a("a"),p3r=o("TFOPTForCausalLM"),_3r=o(" (OPT model)"),u3r=l(),J4=a("li"),U8e=a("strong"),b3r=o("rembert"),v3r=o(" \u2014 "),zJ=a("a"),F3r=o("TFRemBertForCausalLM"),T3r=o(" (RemBERT model)"),M3r=l(),Y4=a("li"),J8e=a("strong"),E3r=o("roberta"),C3r=o(" \u2014 "),QJ=a("a"),w3r=o("TFRobertaForCausalLM"),A3r=o(" (RoBERTa model)"),L3r=l(),K4=a("li"),Y8e=a("strong"),y3r=o("roformer"),x3r=o(" \u2014 "),WJ=a("a"),$3r=o("TFRoFormerForCausalLM"),k3r=o(" (RoFormer model)"),S3r=l(),Z4=a("li"),K8e=a("strong"),R3r=o("transfo-xl"),P3r=o(" \u2014 "),HJ=a("a"),B3r=o("TFTransfoXLLMHeadModel"),I3r=o(" (Transformer-XL model)"),N3r=l(),eE=a("li"),Z8e=a("strong"),q3r=o("xlm"),j3r=o(" \u2014 "),UJ=a("a"),D3r=o("TFXLMWithLMHeadModel"),G3r=o(" (XLM model)"),O3r=l(),oE=a("li"),eMe=a("strong"),V3r=o("xlnet"),X3r=o(" \u2014 "),JJ=a("a"),z3r=o("TFXLNetLMHeadModel"),Q3r=o(" (XLNet model)"),W3r=l(),F(rE.$$.fragment),bze=l(),pc=a("h2"),tE=a("a"),oMe=a("span"),F(lx.$$.fragment),H3r=l(),rMe=a("span"),U3r=o("TFAutoModelForImageClassification"),vze=l(),ar=a("div"),F(ix.$$.fragment),J3r=l(),_c=a("p"),Y3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YJ=a("a"),K3r=o("from_pretrained()"),Z3r=o(" class method or the "),KJ=a("a"),e5r=o("from_config()"),o5r=o(` class
method.`),r5r=l(),dx=a("p"),t5r=o("This class cannot be instantiated directly using "),tMe=a("code"),a5r=o("__init__()"),n5r=o(" (throws an error)."),s5r=l(),It=a("div"),F(cx.$$.fragment),l5r=l(),aMe=a("p"),i5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d5r=l(),uc=a("p"),c5r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),f5r=o("not"),m5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),g5r=o("from_pretrained()"),h5r=o(" to load the model weights."),p5r=l(),F(aE.$$.fragment),_5r=l(),Sr=a("div"),F(fx.$$.fragment),u5r=l(),sMe=a("p"),b5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v5r=l(),cn=a("p"),F5r=o("The model class to instantiate is selected based on the "),lMe=a("code"),T5r=o("model_type"),M5r=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),E5r=o("pretrained_model_name_or_path"),C5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),w5r=o("pretrained_model_name_or_path"),A5r=o(":"),L5r=l(),Qe=a("ul"),nE=a("li"),cMe=a("strong"),y5r=o("convnext"),x5r=o(" \u2014 "),eY=a("a"),$5r=o("TFConvNextForImageClassification"),k5r=o(" (ConvNeXT model)"),S5r=l(),sE=a("li"),fMe=a("strong"),R5r=o("data2vec-vision"),P5r=o(" \u2014 "),oY=a("a"),B5r=o("TFData2VecVisionForImageClassification"),I5r=o(" (Data2VecVision model)"),N5r=l(),Ys=a("li"),mMe=a("strong"),q5r=o("deit"),j5r=o(" \u2014 "),rY=a("a"),D5r=o("TFDeiTForImageClassification"),G5r=o(" or "),tY=a("a"),O5r=o("TFDeiTForImageClassificationWithTeacher"),V5r=o(" (DeiT model)"),X5r=l(),lE=a("li"),gMe=a("strong"),z5r=o("regnet"),Q5r=o(" \u2014 "),aY=a("a"),W5r=o("TFRegNetForImageClassification"),H5r=o(" (RegNet model)"),U5r=l(),iE=a("li"),hMe=a("strong"),J5r=o("resnet"),Y5r=o(" \u2014 "),nY=a("a"),K5r=o("TFResNetForImageClassification"),Z5r=o(" (ResNet model)"),ewr=l(),dE=a("li"),pMe=a("strong"),owr=o("swin"),rwr=o(" \u2014 "),sY=a("a"),twr=o("TFSwinForImageClassification"),awr=o(" (Swin Transformer model)"),nwr=l(),cE=a("li"),_Me=a("strong"),swr=o("vit"),lwr=o(" \u2014 "),lY=a("a"),iwr=o("TFViTForImageClassification"),dwr=o(" (ViT model)"),cwr=l(),F(fE.$$.fragment),Fze=l(),bc=a("h2"),mE=a("a"),uMe=a("span"),F(mx.$$.fragment),fwr=l(),bMe=a("span"),mwr=o("TFAutoModelForMaskedLM"),Tze=l(),nr=a("div"),F(gx.$$.fragment),gwr=l(),vc=a("p"),hwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=a("a"),pwr=o("from_pretrained()"),_wr=o(" class method or the "),dY=a("a"),uwr=o("from_config()"),bwr=o(` class
method.`),vwr=l(),hx=a("p"),Fwr=o("This class cannot be instantiated directly using "),vMe=a("code"),Twr=o("__init__()"),Mwr=o(" (throws an error)."),Ewr=l(),Nt=a("div"),F(px.$$.fragment),Cwr=l(),FMe=a("p"),wwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Awr=l(),Fc=a("p"),Lwr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),ywr=o("not"),xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),$wr=o("from_pretrained()"),kwr=o(" to load the model weights."),Swr=l(),F(gE.$$.fragment),Rwr=l(),Rr=a("div"),F(_x.$$.fragment),Pwr=l(),MMe=a("p"),Bwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Iwr=l(),fn=a("p"),Nwr=o("The model class to instantiate is selected based on the "),EMe=a("code"),qwr=o("model_type"),jwr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),Dwr=o("pretrained_model_name_or_path"),Gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),Owr=o("pretrained_model_name_or_path"),Vwr=o(":"),Xwr=l(),ie=a("ul"),hE=a("li"),AMe=a("strong"),zwr=o("albert"),Qwr=o(" \u2014 "),fY=a("a"),Wwr=o("TFAlbertForMaskedLM"),Hwr=o(" (ALBERT model)"),Uwr=l(),pE=a("li"),LMe=a("strong"),Jwr=o("bert"),Ywr=o(" \u2014 "),mY=a("a"),Kwr=o("TFBertForMaskedLM"),Zwr=o(" (BERT model)"),eAr=l(),_E=a("li"),yMe=a("strong"),oAr=o("camembert"),rAr=o(" \u2014 "),gY=a("a"),tAr=o("TFCamembertForMaskedLM"),aAr=o(" (CamemBERT model)"),nAr=l(),uE=a("li"),xMe=a("strong"),sAr=o("convbert"),lAr=o(" \u2014 "),hY=a("a"),iAr=o("TFConvBertForMaskedLM"),dAr=o(" (ConvBERT model)"),cAr=l(),bE=a("li"),$Me=a("strong"),fAr=o("deberta"),mAr=o(" \u2014 "),pY=a("a"),gAr=o("TFDebertaForMaskedLM"),hAr=o(" (DeBERTa model)"),pAr=l(),vE=a("li"),kMe=a("strong"),_Ar=o("deberta-v2"),uAr=o(" \u2014 "),_Y=a("a"),bAr=o("TFDebertaV2ForMaskedLM"),vAr=o(" (DeBERTa-v2 model)"),FAr=l(),FE=a("li"),SMe=a("strong"),TAr=o("distilbert"),MAr=o(" \u2014 "),uY=a("a"),EAr=o("TFDistilBertForMaskedLM"),CAr=o(" (DistilBERT model)"),wAr=l(),TE=a("li"),RMe=a("strong"),AAr=o("electra"),LAr=o(" \u2014 "),bY=a("a"),yAr=o("TFElectraForMaskedLM"),xAr=o(" (ELECTRA model)"),$Ar=l(),ME=a("li"),PMe=a("strong"),kAr=o("flaubert"),SAr=o(" \u2014 "),vY=a("a"),RAr=o("TFFlaubertWithLMHeadModel"),PAr=o(" (FlauBERT model)"),BAr=l(),EE=a("li"),BMe=a("strong"),IAr=o("funnel"),NAr=o(" \u2014 "),FY=a("a"),qAr=o("TFFunnelForMaskedLM"),jAr=o(" (Funnel Transformer model)"),DAr=l(),CE=a("li"),IMe=a("strong"),GAr=o("layoutlm"),OAr=o(" \u2014 "),TY=a("a"),VAr=o("TFLayoutLMForMaskedLM"),XAr=o(" (LayoutLM model)"),zAr=l(),wE=a("li"),NMe=a("strong"),QAr=o("longformer"),WAr=o(" \u2014 "),MY=a("a"),HAr=o("TFLongformerForMaskedLM"),UAr=o(" (Longformer model)"),JAr=l(),AE=a("li"),qMe=a("strong"),YAr=o("mobilebert"),KAr=o(" \u2014 "),EY=a("a"),ZAr=o("TFMobileBertForMaskedLM"),e6r=o(" (MobileBERT model)"),o6r=l(),LE=a("li"),jMe=a("strong"),r6r=o("mpnet"),t6r=o(" \u2014 "),CY=a("a"),a6r=o("TFMPNetForMaskedLM"),n6r=o(" (MPNet model)"),s6r=l(),yE=a("li"),DMe=a("strong"),l6r=o("rembert"),i6r=o(" \u2014 "),wY=a("a"),d6r=o("TFRemBertForMaskedLM"),c6r=o(" (RemBERT model)"),f6r=l(),xE=a("li"),GMe=a("strong"),m6r=o("roberta"),g6r=o(" \u2014 "),AY=a("a"),h6r=o("TFRobertaForMaskedLM"),p6r=o(" (RoBERTa model)"),_6r=l(),$E=a("li"),OMe=a("strong"),u6r=o("roformer"),b6r=o(" \u2014 "),LY=a("a"),v6r=o("TFRoFormerForMaskedLM"),F6r=o(" (RoFormer model)"),T6r=l(),kE=a("li"),VMe=a("strong"),M6r=o("tapas"),E6r=o(" \u2014 "),yY=a("a"),C6r=o("TFTapasForMaskedLM"),w6r=o(" (TAPAS model)"),A6r=l(),SE=a("li"),XMe=a("strong"),L6r=o("xlm"),y6r=o(" \u2014 "),xY=a("a"),x6r=o("TFXLMWithLMHeadModel"),$6r=o(" (XLM model)"),k6r=l(),RE=a("li"),zMe=a("strong"),S6r=o("xlm-roberta"),R6r=o(" \u2014 "),$Y=a("a"),P6r=o("TFXLMRobertaForMaskedLM"),B6r=o(" (XLM-RoBERTa model)"),I6r=l(),F(PE.$$.fragment),Mze=l(),Tc=a("h2"),BE=a("a"),QMe=a("span"),F(ux.$$.fragment),N6r=l(),WMe=a("span"),q6r=o("TFAutoModelForSeq2SeqLM"),Eze=l(),sr=a("div"),F(bx.$$.fragment),j6r=l(),Mc=a("p"),D6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=a("a"),G6r=o("from_pretrained()"),O6r=o(" class method or the "),SY=a("a"),V6r=o("from_config()"),X6r=o(` class
method.`),z6r=l(),vx=a("p"),Q6r=o("This class cannot be instantiated directly using "),HMe=a("code"),W6r=o("__init__()"),H6r=o(" (throws an error)."),U6r=l(),qt=a("div"),F(Fx.$$.fragment),J6r=l(),UMe=a("p"),Y6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K6r=l(),Ec=a("p"),Z6r=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),e7r=o("not"),o7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),r7r=o("from_pretrained()"),t7r=o(" to load the model weights."),a7r=l(),F(IE.$$.fragment),n7r=l(),Pr=a("div"),F(Tx.$$.fragment),s7r=l(),YMe=a("p"),l7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),i7r=l(),mn=a("p"),d7r=o("The model class to instantiate is selected based on the "),KMe=a("code"),c7r=o("model_type"),f7r=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),h7r=o("pretrained_model_name_or_path"),p7r=o(":"),_7r=l(),xe=a("ul"),NE=a("li"),o4e=a("strong"),u7r=o("bart"),b7r=o(" \u2014 "),PY=a("a"),v7r=o("TFBartForConditionalGeneration"),F7r=o(" (BART model)"),T7r=l(),qE=a("li"),r4e=a("strong"),M7r=o("blenderbot"),E7r=o(" \u2014 "),BY=a("a"),C7r=o("TFBlenderbotForConditionalGeneration"),w7r=o(" (Blenderbot model)"),A7r=l(),jE=a("li"),t4e=a("strong"),L7r=o("blenderbot-small"),y7r=o(" \u2014 "),IY=a("a"),x7r=o("TFBlenderbotSmallForConditionalGeneration"),$7r=o(" (BlenderbotSmall model)"),k7r=l(),DE=a("li"),a4e=a("strong"),S7r=o("encoder-decoder"),R7r=o(" \u2014 "),NY=a("a"),P7r=o("TFEncoderDecoderModel"),B7r=o(" (Encoder decoder model)"),I7r=l(),GE=a("li"),n4e=a("strong"),N7r=o("led"),q7r=o(" \u2014 "),qY=a("a"),j7r=o("TFLEDForConditionalGeneration"),D7r=o(" (LED model)"),G7r=l(),OE=a("li"),s4e=a("strong"),O7r=o("marian"),V7r=o(" \u2014 "),jY=a("a"),X7r=o("TFMarianMTModel"),z7r=o(" (Marian model)"),Q7r=l(),VE=a("li"),l4e=a("strong"),W7r=o("mbart"),H7r=o(" \u2014 "),DY=a("a"),U7r=o("TFMBartForConditionalGeneration"),J7r=o(" (mBART model)"),Y7r=l(),XE=a("li"),i4e=a("strong"),K7r=o("mt5"),Z7r=o(" \u2014 "),GY=a("a"),eLr=o("TFMT5ForConditionalGeneration"),oLr=o(" (MT5 model)"),rLr=l(),zE=a("li"),d4e=a("strong"),tLr=o("pegasus"),aLr=o(" \u2014 "),OY=a("a"),nLr=o("TFPegasusForConditionalGeneration"),sLr=o(" (Pegasus model)"),lLr=l(),QE=a("li"),c4e=a("strong"),iLr=o("t5"),dLr=o(" \u2014 "),VY=a("a"),cLr=o("TFT5ForConditionalGeneration"),fLr=o(" (T5 model)"),mLr=l(),F(WE.$$.fragment),Cze=l(),Cc=a("h2"),HE=a("a"),f4e=a("span"),F(Mx.$$.fragment),gLr=l(),m4e=a("span"),hLr=o("TFAutoModelForSequenceClassification"),wze=l(),lr=a("div"),F(Ex.$$.fragment),pLr=l(),wc=a("p"),_Lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XY=a("a"),uLr=o("from_pretrained()"),bLr=o(" class method or the "),zY=a("a"),vLr=o("from_config()"),FLr=o(` class
method.`),TLr=l(),Cx=a("p"),MLr=o("This class cannot be instantiated directly using "),g4e=a("code"),ELr=o("__init__()"),CLr=o(" (throws an error)."),wLr=l(),jt=a("div"),F(wx.$$.fragment),ALr=l(),h4e=a("p"),LLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yLr=l(),Ac=a("p"),xLr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),$Lr=o("not"),kLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),SLr=o("from_pretrained()"),RLr=o(" to load the model weights."),PLr=l(),F(UE.$$.fragment),BLr=l(),Br=a("div"),F(Ax.$$.fragment),ILr=l(),_4e=a("p"),NLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qLr=l(),gn=a("p"),jLr=o("The model class to instantiate is selected based on the "),u4e=a("code"),DLr=o("model_type"),GLr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),OLr=o("pretrained_model_name_or_path"),VLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),XLr=o("pretrained_model_name_or_path"),zLr=o(":"),QLr=l(),ae=a("ul"),JE=a("li"),F4e=a("strong"),WLr=o("albert"),HLr=o(" \u2014 "),WY=a("a"),ULr=o("TFAlbertForSequenceClassification"),JLr=o(" (ALBERT model)"),YLr=l(),YE=a("li"),T4e=a("strong"),KLr=o("bert"),ZLr=o(" \u2014 "),HY=a("a"),eyr=o("TFBertForSequenceClassification"),oyr=o(" (BERT model)"),ryr=l(),KE=a("li"),M4e=a("strong"),tyr=o("camembert"),ayr=o(" \u2014 "),UY=a("a"),nyr=o("TFCamembertForSequenceClassification"),syr=o(" (CamemBERT model)"),lyr=l(),ZE=a("li"),E4e=a("strong"),iyr=o("convbert"),dyr=o(" \u2014 "),JY=a("a"),cyr=o("TFConvBertForSequenceClassification"),fyr=o(" (ConvBERT model)"),myr=l(),eC=a("li"),C4e=a("strong"),gyr=o("ctrl"),hyr=o(" \u2014 "),YY=a("a"),pyr=o("TFCTRLForSequenceClassification"),_yr=o(" (CTRL model)"),uyr=l(),oC=a("li"),w4e=a("strong"),byr=o("deberta"),vyr=o(" \u2014 "),KY=a("a"),Fyr=o("TFDebertaForSequenceClassification"),Tyr=o(" (DeBERTa model)"),Myr=l(),rC=a("li"),A4e=a("strong"),Eyr=o("deberta-v2"),Cyr=o(" \u2014 "),ZY=a("a"),wyr=o("TFDebertaV2ForSequenceClassification"),Ayr=o(" (DeBERTa-v2 model)"),Lyr=l(),tC=a("li"),L4e=a("strong"),yyr=o("distilbert"),xyr=o(" \u2014 "),eK=a("a"),$yr=o("TFDistilBertForSequenceClassification"),kyr=o(" (DistilBERT model)"),Syr=l(),aC=a("li"),y4e=a("strong"),Ryr=o("electra"),Pyr=o(" \u2014 "),oK=a("a"),Byr=o("TFElectraForSequenceClassification"),Iyr=o(" (ELECTRA model)"),Nyr=l(),nC=a("li"),x4e=a("strong"),qyr=o("flaubert"),jyr=o(" \u2014 "),rK=a("a"),Dyr=o("TFFlaubertForSequenceClassification"),Gyr=o(" (FlauBERT model)"),Oyr=l(),sC=a("li"),$4e=a("strong"),Vyr=o("funnel"),Xyr=o(" \u2014 "),tK=a("a"),zyr=o("TFFunnelForSequenceClassification"),Qyr=o(" (Funnel Transformer model)"),Wyr=l(),lC=a("li"),k4e=a("strong"),Hyr=o("gpt2"),Uyr=o(" \u2014 "),aK=a("a"),Jyr=o("TFGPT2ForSequenceClassification"),Yyr=o(" (OpenAI GPT-2 model)"),Kyr=l(),iC=a("li"),S4e=a("strong"),Zyr=o("gptj"),e9r=o(" \u2014 "),nK=a("a"),o9r=o("TFGPTJForSequenceClassification"),r9r=o(" (GPT-J model)"),t9r=l(),dC=a("li"),R4e=a("strong"),a9r=o("layoutlm"),n9r=o(" \u2014 "),sK=a("a"),s9r=o("TFLayoutLMForSequenceClassification"),l9r=o(" (LayoutLM model)"),i9r=l(),cC=a("li"),P4e=a("strong"),d9r=o("longformer"),c9r=o(" \u2014 "),lK=a("a"),f9r=o("TFLongformerForSequenceClassification"),m9r=o(" (Longformer model)"),g9r=l(),fC=a("li"),B4e=a("strong"),h9r=o("mobilebert"),p9r=o(" \u2014 "),iK=a("a"),_9r=o("TFMobileBertForSequenceClassification"),u9r=o(" (MobileBERT model)"),b9r=l(),mC=a("li"),I4e=a("strong"),v9r=o("mpnet"),F9r=o(" \u2014 "),dK=a("a"),T9r=o("TFMPNetForSequenceClassification"),M9r=o(" (MPNet model)"),E9r=l(),gC=a("li"),N4e=a("strong"),C9r=o("openai-gpt"),w9r=o(" \u2014 "),cK=a("a"),A9r=o("TFOpenAIGPTForSequenceClassification"),L9r=o(" (OpenAI GPT model)"),y9r=l(),hC=a("li"),q4e=a("strong"),x9r=o("rembert"),$9r=o(" \u2014 "),fK=a("a"),k9r=o("TFRemBertForSequenceClassification"),S9r=o(" (RemBERT model)"),R9r=l(),pC=a("li"),j4e=a("strong"),P9r=o("roberta"),B9r=o(" \u2014 "),mK=a("a"),I9r=o("TFRobertaForSequenceClassification"),N9r=o(" (RoBERTa model)"),q9r=l(),_C=a("li"),D4e=a("strong"),j9r=o("roformer"),D9r=o(" \u2014 "),gK=a("a"),G9r=o("TFRoFormerForSequenceClassification"),O9r=o(" (RoFormer model)"),V9r=l(),uC=a("li"),G4e=a("strong"),X9r=o("tapas"),z9r=o(" \u2014 "),hK=a("a"),Q9r=o("TFTapasForSequenceClassification"),W9r=o(" (TAPAS model)"),H9r=l(),bC=a("li"),O4e=a("strong"),U9r=o("transfo-xl"),J9r=o(" \u2014 "),pK=a("a"),Y9r=o("TFTransfoXLForSequenceClassification"),K9r=o(" (Transformer-XL model)"),Z9r=l(),vC=a("li"),V4e=a("strong"),exr=o("xlm"),oxr=o(" \u2014 "),_K=a("a"),rxr=o("TFXLMForSequenceClassification"),txr=o(" (XLM model)"),axr=l(),FC=a("li"),X4e=a("strong"),nxr=o("xlm-roberta"),sxr=o(" \u2014 "),uK=a("a"),lxr=o("TFXLMRobertaForSequenceClassification"),ixr=o(" (XLM-RoBERTa model)"),dxr=l(),TC=a("li"),z4e=a("strong"),cxr=o("xlnet"),fxr=o(" \u2014 "),bK=a("a"),mxr=o("TFXLNetForSequenceClassification"),gxr=o(" (XLNet model)"),hxr=l(),F(MC.$$.fragment),Aze=l(),Lc=a("h2"),EC=a("a"),Q4e=a("span"),F(Lx.$$.fragment),pxr=l(),W4e=a("span"),_xr=o("TFAutoModelForMultipleChoice"),Lze=l(),ir=a("div"),F(yx.$$.fragment),uxr=l(),yc=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vK=a("a"),vxr=o("from_pretrained()"),Fxr=o(" class method or the "),FK=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),xx=a("p"),Cxr=o("This class cannot be instantiated directly using "),H4e=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),Lxr=l(),Dt=a("div"),F($x.$$.fragment),yxr=l(),U4e=a("p"),xxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$xr=l(),xc=a("p"),kxr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),Sxr=o("not"),Rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),Pxr=o("from_pretrained()"),Bxr=o(" to load the model weights."),Ixr=l(),F(CC.$$.fragment),Nxr=l(),Ir=a("div"),F(kx.$$.fragment),qxr=l(),Y4e=a("p"),jxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dxr=l(),hn=a("p"),Gxr=o("The model class to instantiate is selected based on the "),K4e=a("code"),Oxr=o("model_type"),Vxr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(":"),Hxr=l(),_e=a("ul"),wC=a("li"),oEe=a("strong"),Uxr=o("albert"),Jxr=o(" \u2014 "),MK=a("a"),Yxr=o("TFAlbertForMultipleChoice"),Kxr=o(" (ALBERT model)"),Zxr=l(),AC=a("li"),rEe=a("strong"),e$r=o("bert"),o$r=o(" \u2014 "),EK=a("a"),r$r=o("TFBertForMultipleChoice"),t$r=o(" (BERT model)"),a$r=l(),LC=a("li"),tEe=a("strong"),n$r=o("camembert"),s$r=o(" \u2014 "),CK=a("a"),l$r=o("TFCamembertForMultipleChoice"),i$r=o(" (CamemBERT model)"),d$r=l(),yC=a("li"),aEe=a("strong"),c$r=o("convbert"),f$r=o(" \u2014 "),wK=a("a"),m$r=o("TFConvBertForMultipleChoice"),g$r=o(" (ConvBERT model)"),h$r=l(),xC=a("li"),nEe=a("strong"),p$r=o("distilbert"),_$r=o(" \u2014 "),AK=a("a"),u$r=o("TFDistilBertForMultipleChoice"),b$r=o(" (DistilBERT model)"),v$r=l(),$C=a("li"),sEe=a("strong"),F$r=o("electra"),T$r=o(" \u2014 "),LK=a("a"),M$r=o("TFElectraForMultipleChoice"),E$r=o(" (ELECTRA model)"),C$r=l(),kC=a("li"),lEe=a("strong"),w$r=o("flaubert"),A$r=o(" \u2014 "),yK=a("a"),L$r=o("TFFlaubertForMultipleChoice"),y$r=o(" (FlauBERT model)"),x$r=l(),SC=a("li"),iEe=a("strong"),$$r=o("funnel"),k$r=o(" \u2014 "),xK=a("a"),S$r=o("TFFunnelForMultipleChoice"),R$r=o(" (Funnel Transformer model)"),P$r=l(),RC=a("li"),dEe=a("strong"),B$r=o("longformer"),I$r=o(" \u2014 "),$K=a("a"),N$r=o("TFLongformerForMultipleChoice"),q$r=o(" (Longformer model)"),j$r=l(),PC=a("li"),cEe=a("strong"),D$r=o("mobilebert"),G$r=o(" \u2014 "),kK=a("a"),O$r=o("TFMobileBertForMultipleChoice"),V$r=o(" (MobileBERT model)"),X$r=l(),BC=a("li"),fEe=a("strong"),z$r=o("mpnet"),Q$r=o(" \u2014 "),SK=a("a"),W$r=o("TFMPNetForMultipleChoice"),H$r=o(" (MPNet model)"),U$r=l(),IC=a("li"),mEe=a("strong"),J$r=o("rembert"),Y$r=o(" \u2014 "),RK=a("a"),K$r=o("TFRemBertForMultipleChoice"),Z$r=o(" (RemBERT model)"),ekr=l(),NC=a("li"),gEe=a("strong"),okr=o("roberta"),rkr=o(" \u2014 "),PK=a("a"),tkr=o("TFRobertaForMultipleChoice"),akr=o(" (RoBERTa model)"),nkr=l(),qC=a("li"),hEe=a("strong"),skr=o("roformer"),lkr=o(" \u2014 "),BK=a("a"),ikr=o("TFRoFormerForMultipleChoice"),dkr=o(" (RoFormer model)"),ckr=l(),jC=a("li"),pEe=a("strong"),fkr=o("xlm"),mkr=o(" \u2014 "),IK=a("a"),gkr=o("TFXLMForMultipleChoice"),hkr=o(" (XLM model)"),pkr=l(),DC=a("li"),_Ee=a("strong"),_kr=o("xlm-roberta"),ukr=o(" \u2014 "),NK=a("a"),bkr=o("TFXLMRobertaForMultipleChoice"),vkr=o(" (XLM-RoBERTa model)"),Fkr=l(),GC=a("li"),uEe=a("strong"),Tkr=o("xlnet"),Mkr=o(" \u2014 "),qK=a("a"),Ekr=o("TFXLNetForMultipleChoice"),Ckr=o(" (XLNet model)"),wkr=l(),F(OC.$$.fragment),yze=l(),$c=a("h2"),VC=a("a"),bEe=a("span"),F(Sx.$$.fragment),Akr=l(),vEe=a("span"),Lkr=o("TFAutoModelForNextSentencePrediction"),xze=l(),dr=a("div"),F(Rx.$$.fragment),ykr=l(),kc=a("p"),xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=a("a"),$kr=o("from_pretrained()"),kkr=o(" class method or the "),DK=a("a"),Skr=o("from_config()"),Rkr=o(` class
method.`),Pkr=l(),Px=a("p"),Bkr=o("This class cannot be instantiated directly using "),FEe=a("code"),Ikr=o("__init__()"),Nkr=o(" (throws an error)."),qkr=l(),Gt=a("div"),F(Bx.$$.fragment),jkr=l(),TEe=a("p"),Dkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gkr=l(),Sc=a("p"),Okr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),Vkr=o("not"),Xkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),zkr=o("from_pretrained()"),Qkr=o(" to load the model weights."),Wkr=l(),F(XC.$$.fragment),Hkr=l(),Nr=a("div"),F(Ix.$$.fragment),Ukr=l(),EEe=a("p"),Jkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ykr=l(),pn=a("p"),Kkr=o("The model class to instantiate is selected based on the "),CEe=a("code"),Zkr=o("model_type"),eSr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(":"),nSr=l(),Nx=a("ul"),zC=a("li"),LEe=a("strong"),sSr=o("bert"),lSr=o(" \u2014 "),OK=a("a"),iSr=o("TFBertForNextSentencePrediction"),dSr=o(" (BERT model)"),cSr=l(),QC=a("li"),yEe=a("strong"),fSr=o("mobilebert"),mSr=o(" \u2014 "),VK=a("a"),gSr=o("TFMobileBertForNextSentencePrediction"),hSr=o(" (MobileBERT model)"),pSr=l(),F(WC.$$.fragment),$ze=l(),Rc=a("h2"),HC=a("a"),xEe=a("span"),F(qx.$$.fragment),_Sr=l(),$Ee=a("span"),uSr=o("TFAutoModelForTableQuestionAnswering"),kze=l(),cr=a("div"),F(jx.$$.fragment),bSr=l(),Pc=a("p"),vSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XK=a("a"),FSr=o("from_pretrained()"),TSr=o(" class method or the "),zK=a("a"),MSr=o("from_config()"),ESr=o(` class
method.`),CSr=l(),Dx=a("p"),wSr=o("This class cannot be instantiated directly using "),kEe=a("code"),ASr=o("__init__()"),LSr=o(" (throws an error)."),ySr=l(),Ot=a("div"),F(Gx.$$.fragment),xSr=l(),SEe=a("p"),$Sr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kSr=l(),Bc=a("p"),SSr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),RSr=o("not"),PSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),BSr=o("from_pretrained()"),ISr=o(" to load the model weights."),NSr=l(),F(UC.$$.fragment),qSr=l(),qr=a("div"),F(Ox.$$.fragment),jSr=l(),PEe=a("p"),DSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GSr=l(),_n=a("p"),OSr=o("The model class to instantiate is selected based on the "),BEe=a("code"),VSr=o("model_type"),XSr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),zSr=o("pretrained_model_name_or_path"),QSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=a("code"),WSr=o("pretrained_model_name_or_path"),HSr=o(":"),USr=l(),qEe=a("ul"),JC=a("li"),jEe=a("strong"),JSr=o("tapas"),YSr=o(" \u2014 "),WK=a("a"),KSr=o("TFTapasForQuestionAnswering"),ZSr=o(" (TAPAS model)"),eRr=l(),F(YC.$$.fragment),Sze=l(),Ic=a("h2"),KC=a("a"),DEe=a("span"),F(Vx.$$.fragment),oRr=l(),GEe=a("span"),rRr=o("TFAutoModelForTokenClassification"),Rze=l(),fr=a("div"),F(Xx.$$.fragment),tRr=l(),Nc=a("p"),aRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HK=a("a"),nRr=o("from_pretrained()"),sRr=o(" class method or the "),UK=a("a"),lRr=o("from_config()"),iRr=o(` class
method.`),dRr=l(),zx=a("p"),cRr=o("This class cannot be instantiated directly using "),OEe=a("code"),fRr=o("__init__()"),mRr=o(" (throws an error)."),gRr=l(),Vt=a("div"),F(Qx.$$.fragment),hRr=l(),VEe=a("p"),pRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Rr=l(),qc=a("p"),uRr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),bRr=o("not"),vRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),FRr=o("from_pretrained()"),TRr=o(" to load the model weights."),MRr=l(),F(ZC.$$.fragment),ERr=l(),jr=a("div"),F(Wx.$$.fragment),CRr=l(),zEe=a("p"),wRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ARr=l(),un=a("p"),LRr=o("The model class to instantiate is selected based on the "),QEe=a("code"),yRr=o("model_type"),xRr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),$Rr=o("pretrained_model_name_or_path"),kRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(":"),PRr=l(),de=a("ul"),e3=a("li"),UEe=a("strong"),BRr=o("albert"),IRr=o(" \u2014 "),YK=a("a"),NRr=o("TFAlbertForTokenClassification"),qRr=o(" (ALBERT model)"),jRr=l(),o3=a("li"),JEe=a("strong"),DRr=o("bert"),GRr=o(" \u2014 "),KK=a("a"),ORr=o("TFBertForTokenClassification"),VRr=o(" (BERT model)"),XRr=l(),r3=a("li"),YEe=a("strong"),zRr=o("camembert"),QRr=o(" \u2014 "),ZK=a("a"),WRr=o("TFCamembertForTokenClassification"),HRr=o(" (CamemBERT model)"),URr=l(),t3=a("li"),KEe=a("strong"),JRr=o("convbert"),YRr=o(" \u2014 "),eZ=a("a"),KRr=o("TFConvBertForTokenClassification"),ZRr=o(" (ConvBERT model)"),ePr=l(),a3=a("li"),ZEe=a("strong"),oPr=o("deberta"),rPr=o(" \u2014 "),oZ=a("a"),tPr=o("TFDebertaForTokenClassification"),aPr=o(" (DeBERTa model)"),nPr=l(),n3=a("li"),eCe=a("strong"),sPr=o("deberta-v2"),lPr=o(" \u2014 "),rZ=a("a"),iPr=o("TFDebertaV2ForTokenClassification"),dPr=o(" (DeBERTa-v2 model)"),cPr=l(),s3=a("li"),oCe=a("strong"),fPr=o("distilbert"),mPr=o(" \u2014 "),tZ=a("a"),gPr=o("TFDistilBertForTokenClassification"),hPr=o(" (DistilBERT model)"),pPr=l(),l3=a("li"),rCe=a("strong"),_Pr=o("electra"),uPr=o(" \u2014 "),aZ=a("a"),bPr=o("TFElectraForTokenClassification"),vPr=o(" (ELECTRA model)"),FPr=l(),i3=a("li"),tCe=a("strong"),TPr=o("flaubert"),MPr=o(" \u2014 "),nZ=a("a"),EPr=o("TFFlaubertForTokenClassification"),CPr=o(" (FlauBERT model)"),wPr=l(),d3=a("li"),aCe=a("strong"),APr=o("funnel"),LPr=o(" \u2014 "),sZ=a("a"),yPr=o("TFFunnelForTokenClassification"),xPr=o(" (Funnel Transformer model)"),$Pr=l(),c3=a("li"),nCe=a("strong"),kPr=o("layoutlm"),SPr=o(" \u2014 "),lZ=a("a"),RPr=o("TFLayoutLMForTokenClassification"),PPr=o(" (LayoutLM model)"),BPr=l(),f3=a("li"),sCe=a("strong"),IPr=o("longformer"),NPr=o(" \u2014 "),iZ=a("a"),qPr=o("TFLongformerForTokenClassification"),jPr=o(" (Longformer model)"),DPr=l(),m3=a("li"),lCe=a("strong"),GPr=o("mobilebert"),OPr=o(" \u2014 "),dZ=a("a"),VPr=o("TFMobileBertForTokenClassification"),XPr=o(" (MobileBERT model)"),zPr=l(),g3=a("li"),iCe=a("strong"),QPr=o("mpnet"),WPr=o(" \u2014 "),cZ=a("a"),HPr=o("TFMPNetForTokenClassification"),UPr=o(" (MPNet model)"),JPr=l(),h3=a("li"),dCe=a("strong"),YPr=o("rembert"),KPr=o(" \u2014 "),fZ=a("a"),ZPr=o("TFRemBertForTokenClassification"),eBr=o(" (RemBERT model)"),oBr=l(),p3=a("li"),cCe=a("strong"),rBr=o("roberta"),tBr=o(" \u2014 "),mZ=a("a"),aBr=o("TFRobertaForTokenClassification"),nBr=o(" (RoBERTa model)"),sBr=l(),_3=a("li"),fCe=a("strong"),lBr=o("roformer"),iBr=o(" \u2014 "),gZ=a("a"),dBr=o("TFRoFormerForTokenClassification"),cBr=o(" (RoFormer model)"),fBr=l(),u3=a("li"),mCe=a("strong"),mBr=o("xlm"),gBr=o(" \u2014 "),hZ=a("a"),hBr=o("TFXLMForTokenClassification"),pBr=o(" (XLM model)"),_Br=l(),b3=a("li"),gCe=a("strong"),uBr=o("xlm-roberta"),bBr=o(" \u2014 "),pZ=a("a"),vBr=o("TFXLMRobertaForTokenClassification"),FBr=o(" (XLM-RoBERTa model)"),TBr=l(),v3=a("li"),hCe=a("strong"),MBr=o("xlnet"),EBr=o(" \u2014 "),_Z=a("a"),CBr=o("TFXLNetForTokenClassification"),wBr=o(" (XLNet model)"),ABr=l(),F(F3.$$.fragment),Pze=l(),jc=a("h2"),T3=a("a"),pCe=a("span"),F(Hx.$$.fragment),LBr=l(),_Ce=a("span"),yBr=o("TFAutoModelForQuestionAnswering"),Bze=l(),mr=a("div"),F(Ux.$$.fragment),xBr=l(),Dc=a("p"),$Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=a("a"),kBr=o("from_pretrained()"),SBr=o(" class method or the "),bZ=a("a"),RBr=o("from_config()"),PBr=o(` class
method.`),BBr=l(),Jx=a("p"),IBr=o("This class cannot be instantiated directly using "),uCe=a("code"),NBr=o("__init__()"),qBr=o(" (throws an error)."),jBr=l(),Xt=a("div"),F(Yx.$$.fragment),DBr=l(),bCe=a("p"),GBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OBr=l(),Gc=a("p"),VBr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),XBr=o("not"),zBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),QBr=o("from_pretrained()"),WBr=o(" to load the model weights."),HBr=l(),F(M3.$$.fragment),UBr=l(),Dr=a("div"),F(Kx.$$.fragment),JBr=l(),FCe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KBr=l(),bn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),TCe=a("code"),eIr=o("model_type"),oIr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(":"),sIr=l(),ce=a("ul"),E3=a("li"),CCe=a("strong"),lIr=o("albert"),iIr=o(" \u2014 "),FZ=a("a"),dIr=o("TFAlbertForQuestionAnswering"),cIr=o(" (ALBERT model)"),fIr=l(),C3=a("li"),wCe=a("strong"),mIr=o("bert"),gIr=o(" \u2014 "),TZ=a("a"),hIr=o("TFBertForQuestionAnswering"),pIr=o(" (BERT model)"),_Ir=l(),w3=a("li"),ACe=a("strong"),uIr=o("camembert"),bIr=o(" \u2014 "),MZ=a("a"),vIr=o("TFCamembertForQuestionAnswering"),FIr=o(" (CamemBERT model)"),TIr=l(),A3=a("li"),LCe=a("strong"),MIr=o("convbert"),EIr=o(" \u2014 "),EZ=a("a"),CIr=o("TFConvBertForQuestionAnswering"),wIr=o(" (ConvBERT model)"),AIr=l(),L3=a("li"),yCe=a("strong"),LIr=o("deberta"),yIr=o(" \u2014 "),CZ=a("a"),xIr=o("TFDebertaForQuestionAnswering"),$Ir=o(" (DeBERTa model)"),kIr=l(),y3=a("li"),xCe=a("strong"),SIr=o("deberta-v2"),RIr=o(" \u2014 "),wZ=a("a"),PIr=o("TFDebertaV2ForQuestionAnswering"),BIr=o(" (DeBERTa-v2 model)"),IIr=l(),x3=a("li"),$Ce=a("strong"),NIr=o("distilbert"),qIr=o(" \u2014 "),AZ=a("a"),jIr=o("TFDistilBertForQuestionAnswering"),DIr=o(" (DistilBERT model)"),GIr=l(),$3=a("li"),kCe=a("strong"),OIr=o("electra"),VIr=o(" \u2014 "),LZ=a("a"),XIr=o("TFElectraForQuestionAnswering"),zIr=o(" (ELECTRA model)"),QIr=l(),k3=a("li"),SCe=a("strong"),WIr=o("flaubert"),HIr=o(" \u2014 "),yZ=a("a"),UIr=o("TFFlaubertForQuestionAnsweringSimple"),JIr=o(" (FlauBERT model)"),YIr=l(),S3=a("li"),RCe=a("strong"),KIr=o("funnel"),ZIr=o(" \u2014 "),xZ=a("a"),eNr=o("TFFunnelForQuestionAnswering"),oNr=o(" (Funnel Transformer model)"),rNr=l(),R3=a("li"),PCe=a("strong"),tNr=o("gptj"),aNr=o(" \u2014 "),$Z=a("a"),nNr=o("TFGPTJForQuestionAnswering"),sNr=o(" (GPT-J model)"),lNr=l(),P3=a("li"),BCe=a("strong"),iNr=o("longformer"),dNr=o(" \u2014 "),kZ=a("a"),cNr=o("TFLongformerForQuestionAnswering"),fNr=o(" (Longformer model)"),mNr=l(),B3=a("li"),ICe=a("strong"),gNr=o("mobilebert"),hNr=o(" \u2014 "),SZ=a("a"),pNr=o("TFMobileBertForQuestionAnswering"),_Nr=o(" (MobileBERT model)"),uNr=l(),I3=a("li"),NCe=a("strong"),bNr=o("mpnet"),vNr=o(" \u2014 "),RZ=a("a"),FNr=o("TFMPNetForQuestionAnswering"),TNr=o(" (MPNet model)"),MNr=l(),N3=a("li"),qCe=a("strong"),ENr=o("rembert"),CNr=o(" \u2014 "),PZ=a("a"),wNr=o("TFRemBertForQuestionAnswering"),ANr=o(" (RemBERT model)"),LNr=l(),q3=a("li"),jCe=a("strong"),yNr=o("roberta"),xNr=o(" \u2014 "),BZ=a("a"),$Nr=o("TFRobertaForQuestionAnswering"),kNr=o(" (RoBERTa model)"),SNr=l(),j3=a("li"),DCe=a("strong"),RNr=o("roformer"),PNr=o(" \u2014 "),IZ=a("a"),BNr=o("TFRoFormerForQuestionAnswering"),INr=o(" (RoFormer model)"),NNr=l(),D3=a("li"),GCe=a("strong"),qNr=o("xlm"),jNr=o(" \u2014 "),NZ=a("a"),DNr=o("TFXLMForQuestionAnsweringSimple"),GNr=o(" (XLM model)"),ONr=l(),G3=a("li"),OCe=a("strong"),VNr=o("xlm-roberta"),XNr=o(" \u2014 "),qZ=a("a"),zNr=o("TFXLMRobertaForQuestionAnswering"),QNr=o(" (XLM-RoBERTa model)"),WNr=l(),O3=a("li"),VCe=a("strong"),HNr=o("xlnet"),UNr=o(" \u2014 "),jZ=a("a"),JNr=o("TFXLNetForQuestionAnsweringSimple"),YNr=o(" (XLNet model)"),KNr=l(),F(V3.$$.fragment),Ize=l(),Oc=a("h2"),X3=a("a"),XCe=a("span"),F(Zx.$$.fragment),ZNr=l(),zCe=a("span"),eqr=o("TFAutoModelForVision2Seq"),Nze=l(),gr=a("div"),F(e$.$$.fragment),oqr=l(),Vc=a("p"),rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=a("a"),tqr=o("from_pretrained()"),aqr=o(" class method or the "),GZ=a("a"),nqr=o("from_config()"),sqr=o(` class
method.`),lqr=l(),o$=a("p"),iqr=o("This class cannot be instantiated directly using "),QCe=a("code"),dqr=o("__init__()"),cqr=o(" (throws an error)."),fqr=l(),zt=a("div"),F(r$.$$.fragment),mqr=l(),WCe=a("p"),gqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hqr=l(),Xc=a("p"),pqr=o(`Note:
Loading a model from its configuration file does `),HCe=a("strong"),_qr=o("not"),uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),bqr=o("from_pretrained()"),vqr=o(" to load the model weights."),Fqr=l(),F(z3.$$.fragment),Tqr=l(),Gr=a("div"),F(t$.$$.fragment),Mqr=l(),UCe=a("p"),Eqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Cqr=l(),vn=a("p"),wqr=o("The model class to instantiate is selected based on the "),JCe=a("code"),Aqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),YCe=a("code"),yqr=o("pretrained_model_name_or_path"),xqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=a("code"),$qr=o("pretrained_model_name_or_path"),kqr=o(":"),Sqr=l(),ZCe=a("ul"),Q3=a("li"),e3e=a("strong"),Rqr=o("vision-encoder-decoder"),Pqr=o(" \u2014 "),VZ=a("a"),Bqr=o("TFVisionEncoderDecoderModel"),Iqr=o(" (Vision Encoder decoder model)"),Nqr=l(),F(W3.$$.fragment),qze=l(),zc=a("h2"),H3=a("a"),o3e=a("span"),F(a$.$$.fragment),qqr=l(),r3e=a("span"),jqr=o("TFAutoModelForSpeechSeq2Seq"),jze=l(),hr=a("div"),F(n$.$$.fragment),Dqr=l(),Qc=a("p"),Gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XZ=a("a"),Oqr=o("from_pretrained()"),Vqr=o(" class method or the "),zZ=a("a"),Xqr=o("from_config()"),zqr=o(` class
method.`),Qqr=l(),s$=a("p"),Wqr=o("This class cannot be instantiated directly using "),t3e=a("code"),Hqr=o("__init__()"),Uqr=o(" (throws an error)."),Jqr=l(),Qt=a("div"),F(l$.$$.fragment),Yqr=l(),a3e=a("p"),Kqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zqr=l(),Wc=a("p"),ejr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),ojr=o("not"),rjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),tjr=o("from_pretrained()"),ajr=o(" to load the model weights."),njr=l(),F(U3.$$.fragment),sjr=l(),Or=a("div"),F(i$.$$.fragment),ljr=l(),s3e=a("p"),ijr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),djr=l(),Fn=a("p"),cjr=o("The model class to instantiate is selected based on the "),l3e=a("code"),fjr=o("model_type"),mjr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),gjr=o("pretrained_model_name_or_path"),hjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),pjr=o("pretrained_model_name_or_path"),_jr=o(":"),ujr=l(),c3e=a("ul"),J3=a("li"),f3e=a("strong"),bjr=o("speech_to_text"),vjr=o(" \u2014 "),WZ=a("a"),Fjr=o("TFSpeech2TextForConditionalGeneration"),Tjr=o(" (Speech2Text model)"),Mjr=l(),F(Y3.$$.fragment),Dze=l(),Hc=a("h2"),K3=a("a"),m3e=a("span"),F(d$.$$.fragment),Ejr=l(),g3e=a("span"),Cjr=o("FlaxAutoModel"),Gze=l(),pr=a("div"),F(c$.$$.fragment),wjr=l(),Uc=a("p"),Ajr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HZ=a("a"),Ljr=o("from_pretrained()"),yjr=o(" class method or the "),UZ=a("a"),xjr=o("from_config()"),$jr=o(` class
method.`),kjr=l(),f$=a("p"),Sjr=o("This class cannot be instantiated directly using "),h3e=a("code"),Rjr=o("__init__()"),Pjr=o(" (throws an error)."),Bjr=l(),Wt=a("div"),F(m$.$$.fragment),Ijr=l(),p3e=a("p"),Njr=o("Instantiates one of the base model classes of the library from a configuration."),qjr=l(),Jc=a("p"),jjr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),Djr=o("not"),Gjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Ojr=o("from_pretrained()"),Vjr=o(" to load the model weights."),Xjr=l(),F(Z3.$$.fragment),zjr=l(),Vr=a("div"),F(g$.$$.fragment),Qjr=l(),u3e=a("p"),Wjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Hjr=l(),Tn=a("p"),Ujr=o("The model class to instantiate is selected based on the "),b3e=a("code"),Jjr=o("model_type"),Yjr=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),eDr=o("pretrained_model_name_or_path"),oDr=o(":"),rDr=l(),oe=a("ul"),e5=a("li"),T3e=a("strong"),tDr=o("albert"),aDr=o(" \u2014 "),YZ=a("a"),nDr=o("FlaxAlbertModel"),sDr=o(" (ALBERT model)"),lDr=l(),o5=a("li"),M3e=a("strong"),iDr=o("bart"),dDr=o(" \u2014 "),KZ=a("a"),cDr=o("FlaxBartModel"),fDr=o(" (BART model)"),mDr=l(),r5=a("li"),E3e=a("strong"),gDr=o("beit"),hDr=o(" \u2014 "),ZZ=a("a"),pDr=o("FlaxBeitModel"),_Dr=o(" (BEiT model)"),uDr=l(),t5=a("li"),C3e=a("strong"),bDr=o("bert"),vDr=o(" \u2014 "),eee=a("a"),FDr=o("FlaxBertModel"),TDr=o(" (BERT model)"),MDr=l(),a5=a("li"),w3e=a("strong"),EDr=o("big_bird"),CDr=o(" \u2014 "),oee=a("a"),wDr=o("FlaxBigBirdModel"),ADr=o(" (BigBird model)"),LDr=l(),n5=a("li"),A3e=a("strong"),yDr=o("blenderbot"),xDr=o(" \u2014 "),ree=a("a"),$Dr=o("FlaxBlenderbotModel"),kDr=o(" (Blenderbot model)"),SDr=l(),s5=a("li"),L3e=a("strong"),RDr=o("blenderbot-small"),PDr=o(" \u2014 "),tee=a("a"),BDr=o("FlaxBlenderbotSmallModel"),IDr=o(" (BlenderbotSmall model)"),NDr=l(),l5=a("li"),y3e=a("strong"),qDr=o("bloom"),jDr=o(" \u2014 "),aee=a("a"),DDr=o("FlaxBloomModel"),GDr=o(" (BLOOM model)"),ODr=l(),i5=a("li"),x3e=a("strong"),VDr=o("clip"),XDr=o(" \u2014 "),nee=a("a"),zDr=o("FlaxCLIPModel"),QDr=o(" (CLIP model)"),WDr=l(),d5=a("li"),$3e=a("strong"),HDr=o("distilbert"),UDr=o(" \u2014 "),see=a("a"),JDr=o("FlaxDistilBertModel"),YDr=o(" (DistilBERT model)"),KDr=l(),c5=a("li"),k3e=a("strong"),ZDr=o("electra"),eGr=o(" \u2014 "),lee=a("a"),oGr=o("FlaxElectraModel"),rGr=o(" (ELECTRA model)"),tGr=l(),f5=a("li"),S3e=a("strong"),aGr=o("gpt2"),nGr=o(" \u2014 "),iee=a("a"),sGr=o("FlaxGPT2Model"),lGr=o(" (OpenAI GPT-2 model)"),iGr=l(),m5=a("li"),R3e=a("strong"),dGr=o("gpt_neo"),cGr=o(" \u2014 "),dee=a("a"),fGr=o("FlaxGPTNeoModel"),mGr=o(" (GPT Neo model)"),gGr=l(),g5=a("li"),P3e=a("strong"),hGr=o("gptj"),pGr=o(" \u2014 "),cee=a("a"),_Gr=o("FlaxGPTJModel"),uGr=o(" (GPT-J model)"),bGr=l(),h5=a("li"),B3e=a("strong"),vGr=o("longt5"),FGr=o(" \u2014 "),fee=a("a"),TGr=o("FlaxLongT5Model"),MGr=o(" (LongT5 model)"),EGr=l(),p5=a("li"),I3e=a("strong"),CGr=o("marian"),wGr=o(" \u2014 "),mee=a("a"),AGr=o("FlaxMarianModel"),LGr=o(" (Marian model)"),yGr=l(),_5=a("li"),N3e=a("strong"),xGr=o("mbart"),$Gr=o(" \u2014 "),gee=a("a"),kGr=o("FlaxMBartModel"),SGr=o(" (mBART model)"),RGr=l(),u5=a("li"),q3e=a("strong"),PGr=o("mt5"),BGr=o(" \u2014 "),hee=a("a"),IGr=o("FlaxMT5Model"),NGr=o(" (MT5 model)"),qGr=l(),b5=a("li"),j3e=a("strong"),jGr=o("opt"),DGr=o(" \u2014 "),pee=a("a"),GGr=o("FlaxOPTModel"),OGr=o(" (OPT model)"),VGr=l(),v5=a("li"),D3e=a("strong"),XGr=o("pegasus"),zGr=o(" \u2014 "),_ee=a("a"),QGr=o("FlaxPegasusModel"),WGr=o(" (Pegasus model)"),HGr=l(),F5=a("li"),G3e=a("strong"),UGr=o("roberta"),JGr=o(" \u2014 "),uee=a("a"),YGr=o("FlaxRobertaModel"),KGr=o(" (RoBERTa model)"),ZGr=l(),T5=a("li"),O3e=a("strong"),eOr=o("roformer"),oOr=o(" \u2014 "),bee=a("a"),rOr=o("FlaxRoFormerModel"),tOr=o(" (RoFormer model)"),aOr=l(),M5=a("li"),V3e=a("strong"),nOr=o("t5"),sOr=o(" \u2014 "),vee=a("a"),lOr=o("FlaxT5Model"),iOr=o(" (T5 model)"),dOr=l(),E5=a("li"),X3e=a("strong"),cOr=o("vision-text-dual-encoder"),fOr=o(" \u2014 "),Fee=a("a"),mOr=o("FlaxVisionTextDualEncoderModel"),gOr=o(" (VisionTextDualEncoder model)"),hOr=l(),C5=a("li"),z3e=a("strong"),pOr=o("vit"),_Or=o(" \u2014 "),Tee=a("a"),uOr=o("FlaxViTModel"),bOr=o(" (ViT model)"),vOr=l(),w5=a("li"),Q3e=a("strong"),FOr=o("wav2vec2"),TOr=o(" \u2014 "),Mee=a("a"),MOr=o("FlaxWav2Vec2Model"),EOr=o(" (Wav2Vec2 model)"),COr=l(),A5=a("li"),W3e=a("strong"),wOr=o("xglm"),AOr=o(" \u2014 "),Eee=a("a"),LOr=o("FlaxXGLMModel"),yOr=o(" (XGLM model)"),xOr=l(),L5=a("li"),H3e=a("strong"),$Or=o("xlm-roberta"),kOr=o(" \u2014 "),Cee=a("a"),SOr=o("FlaxXLMRobertaModel"),ROr=o(" (XLM-RoBERTa model)"),POr=l(),F(y5.$$.fragment),Oze=l(),Yc=a("h2"),x5=a("a"),U3e=a("span"),F(h$.$$.fragment),BOr=l(),J3e=a("span"),IOr=o("FlaxAutoModelForCausalLM"),Vze=l(),_r=a("div"),F(p$.$$.fragment),NOr=l(),Kc=a("p"),qOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wee=a("a"),jOr=o("from_pretrained()"),DOr=o(" class method or the "),Aee=a("a"),GOr=o("from_config()"),OOr=o(` class
method.`),VOr=l(),_$=a("p"),XOr=o("This class cannot be instantiated directly using "),Y3e=a("code"),zOr=o("__init__()"),QOr=o(" (throws an error)."),WOr=l(),Ht=a("div"),F(u$.$$.fragment),HOr=l(),K3e=a("p"),UOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JOr=l(),Zc=a("p"),YOr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),KOr=o("not"),ZOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),eVr=o("from_pretrained()"),oVr=o(" to load the model weights."),rVr=l(),F($5.$$.fragment),tVr=l(),Xr=a("div"),F(b$.$$.fragment),aVr=l(),e5e=a("p"),nVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sVr=l(),Mn=a("p"),lVr=o("The model class to instantiate is selected based on the "),o5e=a("code"),iVr=o("model_type"),dVr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),cVr=o("pretrained_model_name_or_path"),fVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(":"),hVr=l(),Ae=a("ul"),k5=a("li"),a5e=a("strong"),pVr=o("bart"),_Vr=o(" \u2014 "),yee=a("a"),uVr=o("FlaxBartForCausalLM"),bVr=o(" (BART model)"),vVr=l(),S5=a("li"),n5e=a("strong"),FVr=o("bert"),TVr=o(" \u2014 "),xee=a("a"),MVr=o("FlaxBertForCausalLM"),EVr=o(" (BERT model)"),CVr=l(),R5=a("li"),s5e=a("strong"),wVr=o("big_bird"),AVr=o(" \u2014 "),$ee=a("a"),LVr=o("FlaxBigBirdForCausalLM"),yVr=o(" (BigBird model)"),xVr=l(),P5=a("li"),l5e=a("strong"),$Vr=o("bloom"),kVr=o(" \u2014 "),kee=a("a"),SVr=o("FlaxBloomForCausalLM"),RVr=o(" (BLOOM model)"),PVr=l(),B5=a("li"),i5e=a("strong"),BVr=o("electra"),IVr=o(" \u2014 "),See=a("a"),NVr=o("FlaxElectraForCausalLM"),qVr=o(" (ELECTRA model)"),jVr=l(),I5=a("li"),d5e=a("strong"),DVr=o("gpt2"),GVr=o(" \u2014 "),Ree=a("a"),OVr=o("FlaxGPT2LMHeadModel"),VVr=o(" (OpenAI GPT-2 model)"),XVr=l(),N5=a("li"),c5e=a("strong"),zVr=o("gpt_neo"),QVr=o(" \u2014 "),Pee=a("a"),WVr=o("FlaxGPTNeoForCausalLM"),HVr=o(" (GPT Neo model)"),UVr=l(),q5=a("li"),f5e=a("strong"),JVr=o("gptj"),YVr=o(" \u2014 "),Bee=a("a"),KVr=o("FlaxGPTJForCausalLM"),ZVr=o(" (GPT-J model)"),eXr=l(),j5=a("li"),m5e=a("strong"),oXr=o("opt"),rXr=o(" \u2014 "),Iee=a("a"),tXr=o("FlaxOPTForCausalLM"),aXr=o(" (OPT model)"),nXr=l(),D5=a("li"),g5e=a("strong"),sXr=o("roberta"),lXr=o(" \u2014 "),Nee=a("a"),iXr=o("FlaxRobertaForCausalLM"),dXr=o(" (RoBERTa model)"),cXr=l(),G5=a("li"),h5e=a("strong"),fXr=o("xglm"),mXr=o(" \u2014 "),qee=a("a"),gXr=o("FlaxXGLMForCausalLM"),hXr=o(" (XGLM model)"),pXr=l(),F(O5.$$.fragment),Xze=l(),ef=a("h2"),V5=a("a"),p5e=a("span"),F(v$.$$.fragment),_Xr=l(),_5e=a("span"),uXr=o("FlaxAutoModelForPreTraining"),zze=l(),ur=a("div"),F(F$.$$.fragment),bXr=l(),of=a("p"),vXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jee=a("a"),FXr=o("from_pretrained()"),TXr=o(" class method or the "),Dee=a("a"),MXr=o("from_config()"),EXr=o(` class
method.`),CXr=l(),T$=a("p"),wXr=o("This class cannot be instantiated directly using "),u5e=a("code"),AXr=o("__init__()"),LXr=o(" (throws an error)."),yXr=l(),Ut=a("div"),F(M$.$$.fragment),xXr=l(),b5e=a("p"),$Xr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kXr=l(),rf=a("p"),SXr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),RXr=o("not"),PXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=a("a"),BXr=o("from_pretrained()"),IXr=o(" to load the model weights."),NXr=l(),F(X5.$$.fragment),qXr=l(),zr=a("div"),F(E$.$$.fragment),jXr=l(),F5e=a("p"),DXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GXr=l(),En=a("p"),OXr=o("The model class to instantiate is selected based on the "),T5e=a("code"),VXr=o("model_type"),XXr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),zXr=o("pretrained_model_name_or_path"),QXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),WXr=o("pretrained_model_name_or_path"),HXr=o(":"),UXr=l(),Ee=a("ul"),z5=a("li"),C5e=a("strong"),JXr=o("albert"),YXr=o(" \u2014 "),Oee=a("a"),KXr=o("FlaxAlbertForPreTraining"),ZXr=o(" (ALBERT model)"),ezr=l(),Q5=a("li"),w5e=a("strong"),ozr=o("bart"),rzr=o(" \u2014 "),Vee=a("a"),tzr=o("FlaxBartForConditionalGeneration"),azr=o(" (BART model)"),nzr=l(),W5=a("li"),A5e=a("strong"),szr=o("bert"),lzr=o(" \u2014 "),Xee=a("a"),izr=o("FlaxBertForPreTraining"),dzr=o(" (BERT model)"),czr=l(),H5=a("li"),L5e=a("strong"),fzr=o("big_bird"),mzr=o(" \u2014 "),zee=a("a"),gzr=o("FlaxBigBirdForPreTraining"),hzr=o(" (BigBird model)"),pzr=l(),U5=a("li"),y5e=a("strong"),_zr=o("electra"),uzr=o(" \u2014 "),Qee=a("a"),bzr=o("FlaxElectraForPreTraining"),vzr=o(" (ELECTRA model)"),Fzr=l(),J5=a("li"),x5e=a("strong"),Tzr=o("longt5"),Mzr=o(" \u2014 "),Wee=a("a"),Ezr=o("FlaxLongT5ForConditionalGeneration"),Czr=o(" (LongT5 model)"),wzr=l(),Y5=a("li"),$5e=a("strong"),Azr=o("mbart"),Lzr=o(" \u2014 "),Hee=a("a"),yzr=o("FlaxMBartForConditionalGeneration"),xzr=o(" (mBART model)"),$zr=l(),K5=a("li"),k5e=a("strong"),kzr=o("mt5"),Szr=o(" \u2014 "),Uee=a("a"),Rzr=o("FlaxMT5ForConditionalGeneration"),Pzr=o(" (MT5 model)"),Bzr=l(),Z5=a("li"),S5e=a("strong"),Izr=o("roberta"),Nzr=o(" \u2014 "),Jee=a("a"),qzr=o("FlaxRobertaForMaskedLM"),jzr=o(" (RoBERTa model)"),Dzr=l(),ew=a("li"),R5e=a("strong"),Gzr=o("roformer"),Ozr=o(" \u2014 "),Yee=a("a"),Vzr=o("FlaxRoFormerForMaskedLM"),Xzr=o(" (RoFormer model)"),zzr=l(),ow=a("li"),P5e=a("strong"),Qzr=o("t5"),Wzr=o(" \u2014 "),Kee=a("a"),Hzr=o("FlaxT5ForConditionalGeneration"),Uzr=o(" (T5 model)"),Jzr=l(),rw=a("li"),B5e=a("strong"),Yzr=o("wav2vec2"),Kzr=o(" \u2014 "),Zee=a("a"),Zzr=o("FlaxWav2Vec2ForPreTraining"),eQr=o(" (Wav2Vec2 model)"),oQr=l(),tw=a("li"),I5e=a("strong"),rQr=o("xlm-roberta"),tQr=o(" \u2014 "),eoe=a("a"),aQr=o("FlaxXLMRobertaForMaskedLM"),nQr=o(" (XLM-RoBERTa model)"),sQr=l(),F(aw.$$.fragment),Qze=l(),tf=a("h2"),nw=a("a"),N5e=a("span"),F(C$.$$.fragment),lQr=l(),q5e=a("span"),iQr=o("FlaxAutoModelForMaskedLM"),Wze=l(),br=a("div"),F(w$.$$.fragment),dQr=l(),af=a("p"),cQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ooe=a("a"),fQr=o("from_pretrained()"),mQr=o(" class method or the "),roe=a("a"),gQr=o("from_config()"),hQr=o(` class
method.`),pQr=l(),A$=a("p"),_Qr=o("This class cannot be instantiated directly using "),j5e=a("code"),uQr=o("__init__()"),bQr=o(" (throws an error)."),vQr=l(),Jt=a("div"),F(L$.$$.fragment),FQr=l(),D5e=a("p"),TQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MQr=l(),nf=a("p"),EQr=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),CQr=o("not"),wQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),AQr=o("from_pretrained()"),LQr=o(" to load the model weights."),yQr=l(),F(sw.$$.fragment),xQr=l(),Qr=a("div"),F(y$.$$.fragment),$Qr=l(),O5e=a("p"),kQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SQr=l(),Cn=a("p"),RQr=o("The model class to instantiate is selected based on the "),V5e=a("code"),PQr=o("model_type"),BQr=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),IQr=o("pretrained_model_name_or_path"),NQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(":"),DQr=l(),$e=a("ul"),lw=a("li"),Q5e=a("strong"),GQr=o("albert"),OQr=o(" \u2014 "),aoe=a("a"),VQr=o("FlaxAlbertForMaskedLM"),XQr=o(" (ALBERT model)"),zQr=l(),iw=a("li"),W5e=a("strong"),QQr=o("bart"),WQr=o(" \u2014 "),noe=a("a"),HQr=o("FlaxBartForConditionalGeneration"),UQr=o(" (BART model)"),JQr=l(),dw=a("li"),H5e=a("strong"),YQr=o("bert"),KQr=o(" \u2014 "),soe=a("a"),ZQr=o("FlaxBertForMaskedLM"),eWr=o(" (BERT model)"),oWr=l(),cw=a("li"),U5e=a("strong"),rWr=o("big_bird"),tWr=o(" \u2014 "),loe=a("a"),aWr=o("FlaxBigBirdForMaskedLM"),nWr=o(" (BigBird model)"),sWr=l(),fw=a("li"),J5e=a("strong"),lWr=o("distilbert"),iWr=o(" \u2014 "),ioe=a("a"),dWr=o("FlaxDistilBertForMaskedLM"),cWr=o(" (DistilBERT model)"),fWr=l(),mw=a("li"),Y5e=a("strong"),mWr=o("electra"),gWr=o(" \u2014 "),doe=a("a"),hWr=o("FlaxElectraForMaskedLM"),pWr=o(" (ELECTRA model)"),_Wr=l(),gw=a("li"),K5e=a("strong"),uWr=o("mbart"),bWr=o(" \u2014 "),coe=a("a"),vWr=o("FlaxMBartForConditionalGeneration"),FWr=o(" (mBART model)"),TWr=l(),hw=a("li"),Z5e=a("strong"),MWr=o("roberta"),EWr=o(" \u2014 "),foe=a("a"),CWr=o("FlaxRobertaForMaskedLM"),wWr=o(" (RoBERTa model)"),AWr=l(),pw=a("li"),ewe=a("strong"),LWr=o("roformer"),yWr=o(" \u2014 "),moe=a("a"),xWr=o("FlaxRoFormerForMaskedLM"),$Wr=o(" (RoFormer model)"),kWr=l(),_w=a("li"),owe=a("strong"),SWr=o("xlm-roberta"),RWr=o(" \u2014 "),goe=a("a"),PWr=o("FlaxXLMRobertaForMaskedLM"),BWr=o(" (XLM-RoBERTa model)"),IWr=l(),F(uw.$$.fragment),Hze=l(),sf=a("h2"),bw=a("a"),rwe=a("span"),F(x$.$$.fragment),NWr=l(),twe=a("span"),qWr=o("FlaxAutoModelForSeq2SeqLM"),Uze=l(),vr=a("div"),F($$.$$.fragment),jWr=l(),lf=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),poe=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),k$=a("p"),QWr=o("This class cannot be instantiated directly using "),awe=a("code"),WWr=o("__init__()"),HWr=o(" (throws an error)."),UWr=l(),Yt=a("div"),F(S$.$$.fragment),JWr=l(),nwe=a("p"),YWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KWr=l(),df=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),swe=a("strong"),eHr=o("not"),oHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),rHr=o("from_pretrained()"),tHr=o(" to load the model weights."),aHr=l(),F(vw.$$.fragment),nHr=l(),Wr=a("div"),F(R$.$$.fragment),sHr=l(),lwe=a("p"),lHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iHr=l(),wn=a("p"),dHr=o("The model class to instantiate is selected based on the "),iwe=a("code"),cHr=o("model_type"),fHr=o(` property of the config object (either
passed as an argument or loaded from `),dwe=a("code"),mHr=o("pretrained_model_name_or_path"),gHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=a("code"),hHr=o("pretrained_model_name_or_path"),pHr=o(":"),_Hr=l(),ke=a("ul"),Fw=a("li"),fwe=a("strong"),uHr=o("bart"),bHr=o(" \u2014 "),uoe=a("a"),vHr=o("FlaxBartForConditionalGeneration"),FHr=o(" (BART model)"),THr=l(),Tw=a("li"),mwe=a("strong"),MHr=o("blenderbot"),EHr=o(" \u2014 "),boe=a("a"),CHr=o("FlaxBlenderbotForConditionalGeneration"),wHr=o(" (Blenderbot model)"),AHr=l(),Mw=a("li"),gwe=a("strong"),LHr=o("blenderbot-small"),yHr=o(" \u2014 "),voe=a("a"),xHr=o("FlaxBlenderbotSmallForConditionalGeneration"),$Hr=o(" (BlenderbotSmall model)"),kHr=l(),Ew=a("li"),hwe=a("strong"),SHr=o("encoder-decoder"),RHr=o(" \u2014 "),Foe=a("a"),PHr=o("FlaxEncoderDecoderModel"),BHr=o(" (Encoder decoder model)"),IHr=l(),Cw=a("li"),pwe=a("strong"),NHr=o("longt5"),qHr=o(" \u2014 "),Toe=a("a"),jHr=o("FlaxLongT5ForConditionalGeneration"),DHr=o(" (LongT5 model)"),GHr=l(),ww=a("li"),_we=a("strong"),OHr=o("marian"),VHr=o(" \u2014 "),Moe=a("a"),XHr=o("FlaxMarianMTModel"),zHr=o(" (Marian model)"),QHr=l(),Aw=a("li"),uwe=a("strong"),WHr=o("mbart"),HHr=o(" \u2014 "),Eoe=a("a"),UHr=o("FlaxMBartForConditionalGeneration"),JHr=o(" (mBART model)"),YHr=l(),Lw=a("li"),bwe=a("strong"),KHr=o("mt5"),ZHr=o(" \u2014 "),Coe=a("a"),eUr=o("FlaxMT5ForConditionalGeneration"),oUr=o(" (MT5 model)"),rUr=l(),yw=a("li"),vwe=a("strong"),tUr=o("pegasus"),aUr=o(" \u2014 "),woe=a("a"),nUr=o("FlaxPegasusForConditionalGeneration"),sUr=o(" (Pegasus model)"),lUr=l(),xw=a("li"),Fwe=a("strong"),iUr=o("t5"),dUr=o(" \u2014 "),Aoe=a("a"),cUr=o("FlaxT5ForConditionalGeneration"),fUr=o(" (T5 model)"),mUr=l(),F($w.$$.fragment),Jze=l(),cf=a("h2"),kw=a("a"),Twe=a("span"),F(P$.$$.fragment),gUr=l(),Mwe=a("span"),hUr=o("FlaxAutoModelForSequenceClassification"),Yze=l(),Fr=a("div"),F(B$.$$.fragment),pUr=l(),ff=a("p"),_Ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=a("a"),uUr=o("from_pretrained()"),bUr=o(" class method or the "),yoe=a("a"),vUr=o("from_config()"),FUr=o(` class
method.`),TUr=l(),I$=a("p"),MUr=o("This class cannot be instantiated directly using "),Ewe=a("code"),EUr=o("__init__()"),CUr=o(" (throws an error)."),wUr=l(),Kt=a("div"),F(N$.$$.fragment),AUr=l(),Cwe=a("p"),LUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yUr=l(),mf=a("p"),xUr=o(`Note:
Loading a model from its configuration file does `),wwe=a("strong"),$Ur=o("not"),kUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),SUr=o("from_pretrained()"),RUr=o(" to load the model weights."),PUr=l(),F(Sw.$$.fragment),BUr=l(),Hr=a("div"),F(q$.$$.fragment),IUr=l(),Awe=a("p"),NUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qUr=l(),An=a("p"),jUr=o("The model class to instantiate is selected based on the "),Lwe=a("code"),DUr=o("model_type"),GUr=o(` property of the config object (either
passed as an argument or loaded from `),ywe=a("code"),OUr=o("pretrained_model_name_or_path"),VUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=a("code"),XUr=o("pretrained_model_name_or_path"),zUr=o(":"),QUr=l(),Se=a("ul"),Rw=a("li"),$we=a("strong"),WUr=o("albert"),HUr=o(" \u2014 "),$oe=a("a"),UUr=o("FlaxAlbertForSequenceClassification"),JUr=o(" (ALBERT model)"),YUr=l(),Pw=a("li"),kwe=a("strong"),KUr=o("bart"),ZUr=o(" \u2014 "),koe=a("a"),eJr=o("FlaxBartForSequenceClassification"),oJr=o(" (BART model)"),rJr=l(),Bw=a("li"),Swe=a("strong"),tJr=o("bert"),aJr=o(" \u2014 "),Soe=a("a"),nJr=o("FlaxBertForSequenceClassification"),sJr=o(" (BERT model)"),lJr=l(),Iw=a("li"),Rwe=a("strong"),iJr=o("big_bird"),dJr=o(" \u2014 "),Roe=a("a"),cJr=o("FlaxBigBirdForSequenceClassification"),fJr=o(" (BigBird model)"),mJr=l(),Nw=a("li"),Pwe=a("strong"),gJr=o("distilbert"),hJr=o(" \u2014 "),Poe=a("a"),pJr=o("FlaxDistilBertForSequenceClassification"),_Jr=o(" (DistilBERT model)"),uJr=l(),qw=a("li"),Bwe=a("strong"),bJr=o("electra"),vJr=o(" \u2014 "),Boe=a("a"),FJr=o("FlaxElectraForSequenceClassification"),TJr=o(" (ELECTRA model)"),MJr=l(),jw=a("li"),Iwe=a("strong"),EJr=o("mbart"),CJr=o(" \u2014 "),Ioe=a("a"),wJr=o("FlaxMBartForSequenceClassification"),AJr=o(" (mBART model)"),LJr=l(),Dw=a("li"),Nwe=a("strong"),yJr=o("roberta"),xJr=o(" \u2014 "),Noe=a("a"),$Jr=o("FlaxRobertaForSequenceClassification"),kJr=o(" (RoBERTa model)"),SJr=l(),Gw=a("li"),qwe=a("strong"),RJr=o("roformer"),PJr=o(" \u2014 "),qoe=a("a"),BJr=o("FlaxRoFormerForSequenceClassification"),IJr=o(" (RoFormer model)"),NJr=l(),Ow=a("li"),jwe=a("strong"),qJr=o("xlm-roberta"),jJr=o(" \u2014 "),joe=a("a"),DJr=o("FlaxXLMRobertaForSequenceClassification"),GJr=o(" (XLM-RoBERTa model)"),OJr=l(),F(Vw.$$.fragment),Kze=l(),gf=a("h2"),Xw=a("a"),Dwe=a("span"),F(j$.$$.fragment),VJr=l(),Gwe=a("span"),XJr=o("FlaxAutoModelForQuestionAnswering"),Zze=l(),Tr=a("div"),F(D$.$$.fragment),zJr=l(),hf=a("p"),QJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Doe=a("a"),WJr=o("from_pretrained()"),HJr=o(" class method or the "),Goe=a("a"),UJr=o("from_config()"),JJr=o(` class
method.`),YJr=l(),G$=a("p"),KJr=o("This class cannot be instantiated directly using "),Owe=a("code"),ZJr=o("__init__()"),eYr=o(" (throws an error)."),oYr=l(),Zt=a("div"),F(O$.$$.fragment),rYr=l(),Vwe=a("p"),tYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aYr=l(),pf=a("p"),nYr=o(`Note:
Loading a model from its configuration file does `),Xwe=a("strong"),sYr=o("not"),lYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),iYr=o("from_pretrained()"),dYr=o(" to load the model weights."),cYr=l(),F(zw.$$.fragment),fYr=l(),Ur=a("div"),F(V$.$$.fragment),mYr=l(),zwe=a("p"),gYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hYr=l(),Ln=a("p"),pYr=o("The model class to instantiate is selected based on the "),Qwe=a("code"),_Yr=o("model_type"),uYr=o(` property of the config object (either
passed as an argument or loaded from `),Wwe=a("code"),bYr=o("pretrained_model_name_or_path"),vYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hwe=a("code"),FYr=o("pretrained_model_name_or_path"),TYr=o(":"),MYr=l(),Re=a("ul"),Qw=a("li"),Uwe=a("strong"),EYr=o("albert"),CYr=o(" \u2014 "),Voe=a("a"),wYr=o("FlaxAlbertForQuestionAnswering"),AYr=o(" (ALBERT model)"),LYr=l(),Ww=a("li"),Jwe=a("strong"),yYr=o("bart"),xYr=o(" \u2014 "),Xoe=a("a"),$Yr=o("FlaxBartForQuestionAnswering"),kYr=o(" (BART model)"),SYr=l(),Hw=a("li"),Ywe=a("strong"),RYr=o("bert"),PYr=o(" \u2014 "),zoe=a("a"),BYr=o("FlaxBertForQuestionAnswering"),IYr=o(" (BERT model)"),NYr=l(),Uw=a("li"),Kwe=a("strong"),qYr=o("big_bird"),jYr=o(" \u2014 "),Qoe=a("a"),DYr=o("FlaxBigBirdForQuestionAnswering"),GYr=o(" (BigBird model)"),OYr=l(),Jw=a("li"),Zwe=a("strong"),VYr=o("distilbert"),XYr=o(" \u2014 "),Woe=a("a"),zYr=o("FlaxDistilBertForQuestionAnswering"),QYr=o(" (DistilBERT model)"),WYr=l(),Yw=a("li"),eAe=a("strong"),HYr=o("electra"),UYr=o(" \u2014 "),Hoe=a("a"),JYr=o("FlaxElectraForQuestionAnswering"),YYr=o(" (ELECTRA model)"),KYr=l(),Kw=a("li"),oAe=a("strong"),ZYr=o("mbart"),eKr=o(" \u2014 "),Uoe=a("a"),oKr=o("FlaxMBartForQuestionAnswering"),rKr=o(" (mBART model)"),tKr=l(),Zw=a("li"),rAe=a("strong"),aKr=o("roberta"),nKr=o(" \u2014 "),Joe=a("a"),sKr=o("FlaxRobertaForQuestionAnswering"),lKr=o(" (RoBERTa model)"),iKr=l(),eA=a("li"),tAe=a("strong"),dKr=o("roformer"),cKr=o(" \u2014 "),Yoe=a("a"),fKr=o("FlaxRoFormerForQuestionAnswering"),mKr=o(" (RoFormer model)"),gKr=l(),oA=a("li"),aAe=a("strong"),hKr=o("xlm-roberta"),pKr=o(" \u2014 "),Koe=a("a"),_Kr=o("FlaxXLMRobertaForQuestionAnswering"),uKr=o(" (XLM-RoBERTa model)"),bKr=l(),F(rA.$$.fragment),eQe=l(),_f=a("h2"),tA=a("a"),nAe=a("span"),F(X$.$$.fragment),vKr=l(),sAe=a("span"),FKr=o("FlaxAutoModelForTokenClassification"),oQe=l(),Mr=a("div"),F(z$.$$.fragment),TKr=l(),uf=a("p"),MKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zoe=a("a"),EKr=o("from_pretrained()"),CKr=o(" class method or the "),ere=a("a"),wKr=o("from_config()"),AKr=o(` class
method.`),LKr=l(),Q$=a("p"),yKr=o("This class cannot be instantiated directly using "),lAe=a("code"),xKr=o("__init__()"),$Kr=o(" (throws an error)."),kKr=l(),ea=a("div"),F(W$.$$.fragment),SKr=l(),iAe=a("p"),RKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PKr=l(),bf=a("p"),BKr=o(`Note:
Loading a model from its configuration file does `),dAe=a("strong"),IKr=o("not"),NKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),qKr=o("from_pretrained()"),jKr=o(" to load the model weights."),DKr=l(),F(aA.$$.fragment),GKr=l(),Jr=a("div"),F(H$.$$.fragment),OKr=l(),cAe=a("p"),VKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XKr=l(),yn=a("p"),zKr=o("The model class to instantiate is selected based on the "),fAe=a("code"),QKr=o("model_type"),WKr=o(` property of the config object (either
passed as an argument or loaded from `),mAe=a("code"),HKr=o("pretrained_model_name_or_path"),UKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=a("code"),JKr=o("pretrained_model_name_or_path"),YKr=o(":"),KKr=l(),Ve=a("ul"),nA=a("li"),hAe=a("strong"),ZKr=o("albert"),eZr=o(" \u2014 "),rre=a("a"),oZr=o("FlaxAlbertForTokenClassification"),rZr=o(" (ALBERT model)"),tZr=l(),sA=a("li"),pAe=a("strong"),aZr=o("bert"),nZr=o(" \u2014 "),tre=a("a"),sZr=o("FlaxBertForTokenClassification"),lZr=o(" (BERT model)"),iZr=l(),lA=a("li"),_Ae=a("strong"),dZr=o("big_bird"),cZr=o(" \u2014 "),are=a("a"),fZr=o("FlaxBigBirdForTokenClassification"),mZr=o(" (BigBird model)"),gZr=l(),iA=a("li"),uAe=a("strong"),hZr=o("distilbert"),pZr=o(" \u2014 "),nre=a("a"),_Zr=o("FlaxDistilBertForTokenClassification"),uZr=o(" (DistilBERT model)"),bZr=l(),dA=a("li"),bAe=a("strong"),vZr=o("electra"),FZr=o(" \u2014 "),sre=a("a"),TZr=o("FlaxElectraForTokenClassification"),MZr=o(" (ELECTRA model)"),EZr=l(),cA=a("li"),vAe=a("strong"),CZr=o("roberta"),wZr=o(" \u2014 "),lre=a("a"),AZr=o("FlaxRobertaForTokenClassification"),LZr=o(" (RoBERTa model)"),yZr=l(),fA=a("li"),FAe=a("strong"),xZr=o("roformer"),$Zr=o(" \u2014 "),ire=a("a"),kZr=o("FlaxRoFormerForTokenClassification"),SZr=o(" (RoFormer model)"),RZr=l(),mA=a("li"),TAe=a("strong"),PZr=o("xlm-roberta"),BZr=o(" \u2014 "),dre=a("a"),IZr=o("FlaxXLMRobertaForTokenClassification"),NZr=o(" (XLM-RoBERTa model)"),qZr=l(),F(gA.$$.fragment),rQe=l(),vf=a("h2"),hA=a("a"),MAe=a("span"),F(U$.$$.fragment),jZr=l(),EAe=a("span"),DZr=o("FlaxAutoModelForMultipleChoice"),tQe=l(),Er=a("div"),F(J$.$$.fragment),GZr=l(),Ff=a("p"),OZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cre=a("a"),VZr=o("from_pretrained()"),XZr=o(" class method or the "),fre=a("a"),zZr=o("from_config()"),QZr=o(` class
method.`),WZr=l(),Y$=a("p"),HZr=o("This class cannot be instantiated directly using "),CAe=a("code"),UZr=o("__init__()"),JZr=o(" (throws an error)."),YZr=l(),oa=a("div"),F(K$.$$.fragment),KZr=l(),wAe=a("p"),ZZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eet=l(),Tf=a("p"),oet=o(`Note:
Loading a model from its configuration file does `),AAe=a("strong"),ret=o("not"),tet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),aet=o("from_pretrained()"),net=o(" to load the model weights."),set=l(),F(pA.$$.fragment),iet=l(),Yr=a("div"),F(Z$.$$.fragment),det=l(),LAe=a("p"),cet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fet=l(),xn=a("p"),met=o("The model class to instantiate is selected based on the "),yAe=a("code"),get=o("model_type"),het=o(` property of the config object (either
passed as an argument or loaded from `),xAe=a("code"),pet=o("pretrained_model_name_or_path"),_et=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ae=a("code"),uet=o("pretrained_model_name_or_path"),bet=o(":"),vet=l(),Xe=a("ul"),_A=a("li"),kAe=a("strong"),Fet=o("albert"),Tet=o(" \u2014 "),gre=a("a"),Met=o("FlaxAlbertForMultipleChoice"),Eet=o(" (ALBERT model)"),Cet=l(),uA=a("li"),SAe=a("strong"),wet=o("bert"),Aet=o(" \u2014 "),hre=a("a"),Let=o("FlaxBertForMultipleChoice"),yet=o(" (BERT model)"),xet=l(),bA=a("li"),RAe=a("strong"),$et=o("big_bird"),ket=o(" \u2014 "),pre=a("a"),Set=o("FlaxBigBirdForMultipleChoice"),Ret=o(" (BigBird model)"),Pet=l(),vA=a("li"),PAe=a("strong"),Bet=o("distilbert"),Iet=o(" \u2014 "),_re=a("a"),Net=o("FlaxDistilBertForMultipleChoice"),qet=o(" (DistilBERT model)"),jet=l(),FA=a("li"),BAe=a("strong"),Det=o("electra"),Get=o(" \u2014 "),ure=a("a"),Oet=o("FlaxElectraForMultipleChoice"),Vet=o(" (ELECTRA model)"),Xet=l(),TA=a("li"),IAe=a("strong"),zet=o("roberta"),Qet=o(" \u2014 "),bre=a("a"),Wet=o("FlaxRobertaForMultipleChoice"),Het=o(" (RoBERTa model)"),Uet=l(),MA=a("li"),NAe=a("strong"),Jet=o("roformer"),Yet=o(" \u2014 "),vre=a("a"),Ket=o("FlaxRoFormerForMultipleChoice"),Zet=o(" (RoFormer model)"),eot=l(),EA=a("li"),qAe=a("strong"),oot=o("xlm-roberta"),rot=o(" \u2014 "),Fre=a("a"),tot=o("FlaxXLMRobertaForMultipleChoice"),aot=o(" (XLM-RoBERTa model)"),not=l(),F(CA.$$.fragment),aQe=l(),Mf=a("h2"),wA=a("a"),jAe=a("span"),F(ek.$$.fragment),sot=l(),DAe=a("span"),lot=o("FlaxAutoModelForNextSentencePrediction"),nQe=l(),Cr=a("div"),F(ok.$$.fragment),iot=l(),Ef=a("p"),dot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tre=a("a"),cot=o("from_pretrained()"),fot=o(" class method or the "),Mre=a("a"),mot=o("from_config()"),got=o(` class
method.`),hot=l(),rk=a("p"),pot=o("This class cannot be instantiated directly using "),GAe=a("code"),_ot=o("__init__()"),uot=o(" (throws an error)."),bot=l(),ra=a("div"),F(tk.$$.fragment),vot=l(),OAe=a("p"),Fot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tot=l(),Cf=a("p"),Mot=o(`Note:
Loading a model from its configuration file does `),VAe=a("strong"),Eot=o("not"),Cot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),wot=o("from_pretrained()"),Aot=o(" to load the model weights."),Lot=l(),F(AA.$$.fragment),yot=l(),Kr=a("div"),F(ak.$$.fragment),xot=l(),XAe=a("p"),$ot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kot=l(),$n=a("p"),Sot=o("The model class to instantiate is selected based on the "),zAe=a("code"),Rot=o("model_type"),Pot=o(` property of the config object (either
passed as an argument or loaded from `),QAe=a("code"),Bot=o("pretrained_model_name_or_path"),Iot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WAe=a("code"),Not=o("pretrained_model_name_or_path"),qot=o(":"),jot=l(),HAe=a("ul"),LA=a("li"),UAe=a("strong"),Dot=o("bert"),Got=o(" \u2014 "),Cre=a("a"),Oot=o("FlaxBertForNextSentencePrediction"),Vot=o(" (BERT model)"),Xot=l(),F(yA.$$.fragment),sQe=l(),wf=a("h2"),xA=a("a"),JAe=a("span"),F(nk.$$.fragment),zot=l(),YAe=a("span"),Qot=o("FlaxAutoModelForImageClassification"),lQe=l(),wr=a("div"),F(sk.$$.fragment),Wot=l(),Af=a("p"),Hot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wre=a("a"),Uot=o("from_pretrained()"),Jot=o(" class method or the "),Are=a("a"),Yot=o("from_config()"),Kot=o(` class
method.`),Zot=l(),lk=a("p"),ert=o("This class cannot be instantiated directly using "),KAe=a("code"),ort=o("__init__()"),rrt=o(" (throws an error)."),trt=l(),ta=a("div"),F(ik.$$.fragment),art=l(),ZAe=a("p"),nrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),srt=l(),Lf=a("p"),lrt=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),irt=o("not"),drt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),crt=o("from_pretrained()"),frt=o(" to load the model weights."),mrt=l(),F($A.$$.fragment),grt=l(),Zr=a("div"),F(dk.$$.fragment),hrt=l(),o6e=a("p"),prt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_rt=l(),kn=a("p"),urt=o("The model class to instantiate is selected based on the "),r6e=a("code"),brt=o("model_type"),vrt=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),Frt=o("pretrained_model_name_or_path"),Trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),Mrt=o("pretrained_model_name_or_path"),Ert=o(":"),Crt=l(),ck=a("ul"),kA=a("li"),n6e=a("strong"),wrt=o("beit"),Art=o(" \u2014 "),yre=a("a"),Lrt=o("FlaxBeitForImageClassification"),yrt=o(" (BEiT model)"),xrt=l(),SA=a("li"),s6e=a("strong"),$rt=o("vit"),krt=o(" \u2014 "),xre=a("a"),Srt=o("FlaxViTForImageClassification"),Rrt=o(" (ViT model)"),Prt=l(),F(RA.$$.fragment),iQe=l(),yf=a("h2"),PA=a("a"),l6e=a("span"),F(fk.$$.fragment),Brt=l(),i6e=a("span"),Irt=o("FlaxAutoModelForVision2Seq"),dQe=l(),Ar=a("div"),F(mk.$$.fragment),Nrt=l(),xf=a("p"),qrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$re=a("a"),jrt=o("from_pretrained()"),Drt=o(" class method or the "),kre=a("a"),Grt=o("from_config()"),Ort=o(` class
method.`),Vrt=l(),gk=a("p"),Xrt=o("This class cannot be instantiated directly using "),d6e=a("code"),zrt=o("__init__()"),Qrt=o(" (throws an error)."),Wrt=l(),aa=a("div"),F(hk.$$.fragment),Hrt=l(),c6e=a("p"),Urt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jrt=l(),$f=a("p"),Yrt=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),Krt=o("not"),Zrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),ett=o("from_pretrained()"),ott=o(" to load the model weights."),rtt=l(),F(BA.$$.fragment),ttt=l(),et=a("div"),F(pk.$$.fragment),att=l(),m6e=a("p"),ntt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),stt=l(),Sn=a("p"),ltt=o("The model class to instantiate is selected based on the "),g6e=a("code"),itt=o("model_type"),dtt=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),ctt=o("pretrained_model_name_or_path"),ftt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),mtt=o("pretrained_model_name_or_path"),gtt=o(":"),htt=l(),_6e=a("ul"),IA=a("li"),u6e=a("strong"),ptt=o("vision-encoder-decoder"),_tt=o(" \u2014 "),Rre=a("a"),utt=o("FlaxVisionEncoderDecoderModel"),btt=o(" (Vision Encoder decoder model)"),vtt=l(),F(NA.$$.fragment),this.h()},l(f){const u=oWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var _k=s(p);m=n(_k,"A",{id:!0,class:!0,href:!0});var b6e=s(m);_=n(b6e,"SPAN",{});var v6e=s(_);T(d.$$.fragment,v6e),v6e.forEach(t),b6e.forEach(t),h=i(_k),Co=n(_k,"SPAN",{});var F6e=s(Co);Li=r(F6e,"Auto Classes"),F6e.forEach(t),_k.forEach(t),Pf=i(f),lt=n(f,"P",{});var uk=s(lt);yi=r(uk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(uk,"CODE",{});var T6e=s(xi);rL=r(T6e,"from_pretrained()"),T6e.forEach(t),Bf=r(uk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);$i=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var M6e=s(Pn);tL=r(M6e,"AutoConfig"),M6e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var E6e=s(In);aL=r(E6e,"AutoModel"),E6e.forEach(t),ki=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var C6e=s(Nn);nL=r(C6e,"AutoTokenizer"),C6e.forEach(t),Si=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Le=n(f,"P",{});var bk=s(Le);NS=r(bk,"will create a model that is an instance of "),Ri=n(bk,"A",{href:!0});var w6e=s(Ri);qS=r(w6e,"BertModel"),w6e.forEach(t),jS=r(bk,"."),bk.forEach(t),wo=i(f),Ra=n(f,"P",{});var vk=s(Ra);DS=r(vk,"There is one class of "),Nf=n(vk,"CODE",{});var A6e=s(Nf);GS=r(A6e,"AutoModel"),A6e.forEach(t),FHe=r(vk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vk.forEach(t),nXe=i(f),Pi=n(f,"H2",{class:!0});var Fk=s(Pi);qf=n(Fk,"A",{id:!0,class:!0,href:!0});var L6e=s(qf);yae=n(L6e,"SPAN",{});var y6e=s(yae);T(sL.$$.fragment,y6e),y6e.forEach(t),L6e.forEach(t),THe=i(Fk),xae=n(Fk,"SPAN",{});var x6e=s(xae);MHe=r(x6e,"Extending the Auto Classes"),x6e.forEach(t),Fk.forEach(t),sXe=i(f),qn=n(f,"P",{});var kf=s(qn);EHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=n(kf,"CODE",{});var $6e=s($ae);CHe=r($6e,"NewModel"),$6e.forEach(t),wHe=r(kf,", make sure you have a "),kae=n(kf,"CODE",{});var k6e=s(kae);AHe=r(k6e,"NewModelConfig"),k6e.forEach(t),LHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),lXe=i(f),T(lL.$$.fragment,f),iXe=i(f),OS=n(f,"P",{});var S6e=s(OS);yHe=r(S6e,"You will then be able to use the auto classes like you would usually do!"),S6e.forEach(t),dXe=i(f),T(jf.$$.fragment,f),cXe=i(f),Bi=n(f,"H2",{class:!0});var Tk=s(Bi);Df=n(Tk,"A",{id:!0,class:!0,href:!0});var R6e=s(Df);Sae=n(R6e,"SPAN",{});var P6e=s(Sae);T(iL.$$.fragment,P6e),P6e.forEach(t),R6e.forEach(t),xHe=i(Tk),Rae=n(Tk,"SPAN",{});var B6e=s(Rae);$He=r(B6e,"AutoConfig"),B6e.forEach(t),Tk.forEach(t),fXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(dL.$$.fragment,nt),kHe=i(nt),cL=n(nt,"P",{});var Mk=s(cL);SHe=r(Mk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VS=n(Mk,"A",{href:!0});var I6e=s(VS);RHe=r(I6e,"from_pretrained()"),I6e.forEach(t),PHe=r(Mk," class method."),Mk.forEach(t),BHe=i(nt),fL=n(nt,"P",{});var Ek=s(fL);IHe=r(Ek,"This class cannot be instantiated directly using "),Pae=n(Ek,"CODE",{});var N6e=s(Pae);NHe=r(N6e,"__init__()"),N6e.forEach(t),qHe=r(Ek," (throws an error)."),Ek.forEach(t),jHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(mL.$$.fragment,st),DHe=i(st),Bae=n(st,"P",{});var q6e=s(Bae);GHe=r(q6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),q6e.forEach(t),OHe=i(st),Ii=n(st,"P",{});var Sf=s(Ii);VHe=r(Sf,"The configuration class to instantiate is selected based on the "),Iae=n(Sf,"CODE",{});var j6e=s(Iae);XHe=r(j6e,"model_type"),j6e.forEach(t),zHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nae=n(Sf,"CODE",{});var D6e=s(Nae);QHe=r(D6e,"pretrained_model_name_or_path"),D6e.forEach(t),WHe=r(Sf,":"),Sf.forEach(t),HHe=i(st),A=n(st,"UL",{});var L=s(A);Gf=n(L,"LI",{});var qA=s(Gf);qae=n(qA,"STRONG",{});var G6e=s(qae);UHe=r(G6e,"albert"),G6e.forEach(t),JHe=r(qA," \u2014 "),XS=n(qA,"A",{href:!0});var O6e=s(XS);YHe=r(O6e,"AlbertConfig"),O6e.forEach(t),KHe=r(qA," (ALBERT model)"),qA.forEach(t),ZHe=i(L),Of=n(L,"LI",{});var jA=s(Of);jae=n(jA,"STRONG",{});var V6e=s(jae);eUe=r(V6e,"bart"),V6e.forEach(t),oUe=r(jA," \u2014 "),zS=n(jA,"A",{href:!0});var X6e=s(zS);rUe=r(X6e,"BartConfig"),X6e.forEach(t),tUe=r(jA," (BART model)"),jA.forEach(t),aUe=i(L),Vf=n(L,"LI",{});var DA=s(Vf);Dae=n(DA,"STRONG",{});var z6e=s(Dae);nUe=r(z6e,"beit"),z6e.forEach(t),sUe=r(DA," \u2014 "),QS=n(DA,"A",{href:!0});var Q6e=s(QS);lUe=r(Q6e,"BeitConfig"),Q6e.forEach(t),iUe=r(DA," (BEiT model)"),DA.forEach(t),dUe=i(L),Xf=n(L,"LI",{});var GA=s(Xf);Gae=n(GA,"STRONG",{});var W6e=s(Gae);cUe=r(W6e,"bert"),W6e.forEach(t),fUe=r(GA," \u2014 "),WS=n(GA,"A",{href:!0});var H6e=s(WS);mUe=r(H6e,"BertConfig"),H6e.forEach(t),gUe=r(GA," (BERT model)"),GA.forEach(t),hUe=i(L),zf=n(L,"LI",{});var OA=s(zf);Oae=n(OA,"STRONG",{});var U6e=s(Oae);pUe=r(U6e,"bert-generation"),U6e.forEach(t),_Ue=r(OA," \u2014 "),HS=n(OA,"A",{href:!0});var J6e=s(HS);uUe=r(J6e,"BertGenerationConfig"),J6e.forEach(t),bUe=r(OA," (Bert Generation model)"),OA.forEach(t),vUe=i(L),Qf=n(L,"LI",{});var VA=s(Qf);Vae=n(VA,"STRONG",{});var Y6e=s(Vae);FUe=r(Y6e,"big_bird"),Y6e.forEach(t),TUe=r(VA," \u2014 "),US=n(VA,"A",{href:!0});var K6e=s(US);MUe=r(K6e,"BigBirdConfig"),K6e.forEach(t),EUe=r(VA," (BigBird model)"),VA.forEach(t),CUe=i(L),Wf=n(L,"LI",{});var XA=s(Wf);Xae=n(XA,"STRONG",{});var Z6e=s(Xae);wUe=r(Z6e,"bigbird_pegasus"),Z6e.forEach(t),AUe=r(XA," \u2014 "),JS=n(XA,"A",{href:!0});var e7e=s(JS);LUe=r(e7e,"BigBirdPegasusConfig"),e7e.forEach(t),yUe=r(XA," (BigBird-Pegasus model)"),XA.forEach(t),xUe=i(L),Hf=n(L,"LI",{});var zA=s(Hf);zae=n(zA,"STRONG",{});var o7e=s(zae);$Ue=r(o7e,"blenderbot"),o7e.forEach(t),kUe=r(zA," \u2014 "),YS=n(zA,"A",{href:!0});var r7e=s(YS);SUe=r(r7e,"BlenderbotConfig"),r7e.forEach(t),RUe=r(zA," (Blenderbot model)"),zA.forEach(t),PUe=i(L),Uf=n(L,"LI",{});var QA=s(Uf);Qae=n(QA,"STRONG",{});var t7e=s(Qae);BUe=r(t7e,"blenderbot-small"),t7e.forEach(t),IUe=r(QA," \u2014 "),KS=n(QA,"A",{href:!0});var a7e=s(KS);NUe=r(a7e,"BlenderbotSmallConfig"),a7e.forEach(t),qUe=r(QA," (BlenderbotSmall model)"),QA.forEach(t),jUe=i(L),Jf=n(L,"LI",{});var WA=s(Jf);Wae=n(WA,"STRONG",{});var n7e=s(Wae);DUe=r(n7e,"bloom"),n7e.forEach(t),GUe=r(WA," \u2014 "),ZS=n(WA,"A",{href:!0});var s7e=s(ZS);OUe=r(s7e,"BloomConfig"),s7e.forEach(t),VUe=r(WA," (BLOOM model)"),WA.forEach(t),XUe=i(L),Yf=n(L,"LI",{});var HA=s(Yf);Hae=n(HA,"STRONG",{});var l7e=s(Hae);zUe=r(l7e,"camembert"),l7e.forEach(t),QUe=r(HA," \u2014 "),eR=n(HA,"A",{href:!0});var i7e=s(eR);WUe=r(i7e,"CamembertConfig"),i7e.forEach(t),HUe=r(HA," (CamemBERT model)"),HA.forEach(t),UUe=i(L),Kf=n(L,"LI",{});var UA=s(Kf);Uae=n(UA,"STRONG",{});var d7e=s(Uae);JUe=r(d7e,"canine"),d7e.forEach(t),YUe=r(UA," \u2014 "),oR=n(UA,"A",{href:!0});var c7e=s(oR);KUe=r(c7e,"CanineConfig"),c7e.forEach(t),ZUe=r(UA," (CANINE model)"),UA.forEach(t),eJe=i(L),Zf=n(L,"LI",{});var JA=s(Zf);Jae=n(JA,"STRONG",{});var f7e=s(Jae);oJe=r(f7e,"clip"),f7e.forEach(t),rJe=r(JA," \u2014 "),rR=n(JA,"A",{href:!0});var m7e=s(rR);tJe=r(m7e,"CLIPConfig"),m7e.forEach(t),aJe=r(JA," (CLIP model)"),JA.forEach(t),nJe=i(L),em=n(L,"LI",{});var YA=s(em);Yae=n(YA,"STRONG",{});var g7e=s(Yae);sJe=r(g7e,"codegen"),g7e.forEach(t),lJe=r(YA," \u2014 "),tR=n(YA,"A",{href:!0});var h7e=s(tR);iJe=r(h7e,"CodeGenConfig"),h7e.forEach(t),dJe=r(YA," (CodeGen model)"),YA.forEach(t),cJe=i(L),om=n(L,"LI",{});var KA=s(om);Kae=n(KA,"STRONG",{});var p7e=s(Kae);fJe=r(p7e,"convbert"),p7e.forEach(t),mJe=r(KA," \u2014 "),aR=n(KA,"A",{href:!0});var _7e=s(aR);gJe=r(_7e,"ConvBertConfig"),_7e.forEach(t),hJe=r(KA," (ConvBERT model)"),KA.forEach(t),pJe=i(L),rm=n(L,"LI",{});var ZA=s(rm);Zae=n(ZA,"STRONG",{});var u7e=s(Zae);_Je=r(u7e,"convnext"),u7e.forEach(t),uJe=r(ZA," \u2014 "),nR=n(ZA,"A",{href:!0});var b7e=s(nR);bJe=r(b7e,"ConvNextConfig"),b7e.forEach(t),vJe=r(ZA," (ConvNeXT model)"),ZA.forEach(t),FJe=i(L),tm=n(L,"LI",{});var e6=s(tm);ene=n(e6,"STRONG",{});var v7e=s(ene);TJe=r(v7e,"ctrl"),v7e.forEach(t),MJe=r(e6," \u2014 "),sR=n(e6,"A",{href:!0});var F7e=s(sR);EJe=r(F7e,"CTRLConfig"),F7e.forEach(t),CJe=r(e6," (CTRL model)"),e6.forEach(t),wJe=i(L),am=n(L,"LI",{});var o6=s(am);one=n(o6,"STRONG",{});var T7e=s(one);AJe=r(T7e,"cvt"),T7e.forEach(t),LJe=r(o6," \u2014 "),lR=n(o6,"A",{href:!0});var M7e=s(lR);yJe=r(M7e,"CvtConfig"),M7e.forEach(t),xJe=r(o6," (CvT model)"),o6.forEach(t),$Je=i(L),nm=n(L,"LI",{});var r6=s(nm);rne=n(r6,"STRONG",{});var E7e=s(rne);kJe=r(E7e,"data2vec-audio"),E7e.forEach(t),SJe=r(r6," \u2014 "),iR=n(r6,"A",{href:!0});var C7e=s(iR);RJe=r(C7e,"Data2VecAudioConfig"),C7e.forEach(t),PJe=r(r6," (Data2VecAudio model)"),r6.forEach(t),BJe=i(L),sm=n(L,"LI",{});var t6=s(sm);tne=n(t6,"STRONG",{});var w7e=s(tne);IJe=r(w7e,"data2vec-text"),w7e.forEach(t),NJe=r(t6," \u2014 "),dR=n(t6,"A",{href:!0});var A7e=s(dR);qJe=r(A7e,"Data2VecTextConfig"),A7e.forEach(t),jJe=r(t6," (Data2VecText model)"),t6.forEach(t),DJe=i(L),lm=n(L,"LI",{});var a6=s(lm);ane=n(a6,"STRONG",{});var L7e=s(ane);GJe=r(L7e,"data2vec-vision"),L7e.forEach(t),OJe=r(a6," \u2014 "),cR=n(a6,"A",{href:!0});var y7e=s(cR);VJe=r(y7e,"Data2VecVisionConfig"),y7e.forEach(t),XJe=r(a6," (Data2VecVision model)"),a6.forEach(t),zJe=i(L),im=n(L,"LI",{});var n6=s(im);nne=n(n6,"STRONG",{});var x7e=s(nne);QJe=r(x7e,"deberta"),x7e.forEach(t),WJe=r(n6," \u2014 "),fR=n(n6,"A",{href:!0});var $7e=s(fR);HJe=r($7e,"DebertaConfig"),$7e.forEach(t),UJe=r(n6," (DeBERTa model)"),n6.forEach(t),JJe=i(L),dm=n(L,"LI",{});var s6=s(dm);sne=n(s6,"STRONG",{});var k7e=s(sne);YJe=r(k7e,"deberta-v2"),k7e.forEach(t),KJe=r(s6," \u2014 "),mR=n(s6,"A",{href:!0});var S7e=s(mR);ZJe=r(S7e,"DebertaV2Config"),S7e.forEach(t),eYe=r(s6," (DeBERTa-v2 model)"),s6.forEach(t),oYe=i(L),cm=n(L,"LI",{});var l6=s(cm);lne=n(l6,"STRONG",{});var Ttt=s(lne);rYe=r(Ttt,"decision_transformer"),Ttt.forEach(t),tYe=r(l6," \u2014 "),gR=n(l6,"A",{href:!0});var Mtt=s(gR);aYe=r(Mtt,"DecisionTransformerConfig"),Mtt.forEach(t),nYe=r(l6," (Decision Transformer model)"),l6.forEach(t),sYe=i(L),fm=n(L,"LI",{});var R7e=s(fm);ine=n(R7e,"STRONG",{});var Ett=s(ine);lYe=r(Ett,"deit"),Ett.forEach(t),iYe=r(R7e," \u2014 "),hR=n(R7e,"A",{href:!0});var Ctt=s(hR);dYe=r(Ctt,"DeiTConfig"),Ctt.forEach(t),cYe=r(R7e," (DeiT model)"),R7e.forEach(t),fYe=i(L),mm=n(L,"LI",{});var P7e=s(mm);dne=n(P7e,"STRONG",{});var wtt=s(dne);mYe=r(wtt,"detr"),wtt.forEach(t),gYe=r(P7e," \u2014 "),pR=n(P7e,"A",{href:!0});var Att=s(pR);hYe=r(Att,"DetrConfig"),Att.forEach(t),pYe=r(P7e," (DETR model)"),P7e.forEach(t),_Ye=i(L),gm=n(L,"LI",{});var B7e=s(gm);cne=n(B7e,"STRONG",{});var Ltt=s(cne);uYe=r(Ltt,"distilbert"),Ltt.forEach(t),bYe=r(B7e," \u2014 "),_R=n(B7e,"A",{href:!0});var ytt=s(_R);vYe=r(ytt,"DistilBertConfig"),ytt.forEach(t),FYe=r(B7e," (DistilBERT model)"),B7e.forEach(t),TYe=i(L),hm=n(L,"LI",{});var I7e=s(hm);fne=n(I7e,"STRONG",{});var xtt=s(fne);MYe=r(xtt,"dpr"),xtt.forEach(t),EYe=r(I7e," \u2014 "),uR=n(I7e,"A",{href:!0});var $tt=s(uR);CYe=r($tt,"DPRConfig"),$tt.forEach(t),wYe=r(I7e," (DPR model)"),I7e.forEach(t),AYe=i(L),pm=n(L,"LI",{});var N7e=s(pm);mne=n(N7e,"STRONG",{});var ktt=s(mne);LYe=r(ktt,"dpt"),ktt.forEach(t),yYe=r(N7e," \u2014 "),bR=n(N7e,"A",{href:!0});var Stt=s(bR);xYe=r(Stt,"DPTConfig"),Stt.forEach(t),$Ye=r(N7e," (DPT model)"),N7e.forEach(t),kYe=i(L),_m=n(L,"LI",{});var q7e=s(_m);gne=n(q7e,"STRONG",{});var Rtt=s(gne);SYe=r(Rtt,"electra"),Rtt.forEach(t),RYe=r(q7e," \u2014 "),vR=n(q7e,"A",{href:!0});var Ptt=s(vR);PYe=r(Ptt,"ElectraConfig"),Ptt.forEach(t),BYe=r(q7e," (ELECTRA model)"),q7e.forEach(t),IYe=i(L),um=n(L,"LI",{});var j7e=s(um);hne=n(j7e,"STRONG",{});var Btt=s(hne);NYe=r(Btt,"encoder-decoder"),Btt.forEach(t),qYe=r(j7e," \u2014 "),FR=n(j7e,"A",{href:!0});var Itt=s(FR);jYe=r(Itt,"EncoderDecoderConfig"),Itt.forEach(t),DYe=r(j7e," (Encoder decoder model)"),j7e.forEach(t),GYe=i(L),bm=n(L,"LI",{});var D7e=s(bm);pne=n(D7e,"STRONG",{});var Ntt=s(pne);OYe=r(Ntt,"flaubert"),Ntt.forEach(t),VYe=r(D7e," \u2014 "),TR=n(D7e,"A",{href:!0});var qtt=s(TR);XYe=r(qtt,"FlaubertConfig"),qtt.forEach(t),zYe=r(D7e," (FlauBERT model)"),D7e.forEach(t),QYe=i(L),vm=n(L,"LI",{});var G7e=s(vm);_ne=n(G7e,"STRONG",{});var jtt=s(_ne);WYe=r(jtt,"flava"),jtt.forEach(t),HYe=r(G7e," \u2014 "),MR=n(G7e,"A",{href:!0});var Dtt=s(MR);UYe=r(Dtt,"FlavaConfig"),Dtt.forEach(t),JYe=r(G7e," (FLAVA model)"),G7e.forEach(t),YYe=i(L),Fm=n(L,"LI",{});var O7e=s(Fm);une=n(O7e,"STRONG",{});var Gtt=s(une);KYe=r(Gtt,"fnet"),Gtt.forEach(t),ZYe=r(O7e," \u2014 "),ER=n(O7e,"A",{href:!0});var Ott=s(ER);eKe=r(Ott,"FNetConfig"),Ott.forEach(t),oKe=r(O7e," (FNet model)"),O7e.forEach(t),rKe=i(L),Tm=n(L,"LI",{});var V7e=s(Tm);bne=n(V7e,"STRONG",{});var Vtt=s(bne);tKe=r(Vtt,"fsmt"),Vtt.forEach(t),aKe=r(V7e," \u2014 "),CR=n(V7e,"A",{href:!0});var Xtt=s(CR);nKe=r(Xtt,"FSMTConfig"),Xtt.forEach(t),sKe=r(V7e," (FairSeq Machine-Translation model)"),V7e.forEach(t),lKe=i(L),Mm=n(L,"LI",{});var X7e=s(Mm);vne=n(X7e,"STRONG",{});var ztt=s(vne);iKe=r(ztt,"funnel"),ztt.forEach(t),dKe=r(X7e," \u2014 "),wR=n(X7e,"A",{href:!0});var Qtt=s(wR);cKe=r(Qtt,"FunnelConfig"),Qtt.forEach(t),fKe=r(X7e," (Funnel Transformer model)"),X7e.forEach(t),mKe=i(L),Em=n(L,"LI",{});var z7e=s(Em);Fne=n(z7e,"STRONG",{});var Wtt=s(Fne);gKe=r(Wtt,"glpn"),Wtt.forEach(t),hKe=r(z7e," \u2014 "),AR=n(z7e,"A",{href:!0});var Htt=s(AR);pKe=r(Htt,"GLPNConfig"),Htt.forEach(t),_Ke=r(z7e," (GLPN model)"),z7e.forEach(t),uKe=i(L),Cm=n(L,"LI",{});var Q7e=s(Cm);Tne=n(Q7e,"STRONG",{});var Utt=s(Tne);bKe=r(Utt,"gpt2"),Utt.forEach(t),vKe=r(Q7e," \u2014 "),LR=n(Q7e,"A",{href:!0});var Jtt=s(LR);FKe=r(Jtt,"GPT2Config"),Jtt.forEach(t),TKe=r(Q7e," (OpenAI GPT-2 model)"),Q7e.forEach(t),MKe=i(L),wm=n(L,"LI",{});var W7e=s(wm);Mne=n(W7e,"STRONG",{});var Ytt=s(Mne);EKe=r(Ytt,"gpt_neo"),Ytt.forEach(t),CKe=r(W7e," \u2014 "),yR=n(W7e,"A",{href:!0});var Ktt=s(yR);wKe=r(Ktt,"GPTNeoConfig"),Ktt.forEach(t),AKe=r(W7e," (GPT Neo model)"),W7e.forEach(t),LKe=i(L),Am=n(L,"LI",{});var H7e=s(Am);Ene=n(H7e,"STRONG",{});var Ztt=s(Ene);yKe=r(Ztt,"gpt_neox"),Ztt.forEach(t),xKe=r(H7e," \u2014 "),xR=n(H7e,"A",{href:!0});var eat=s(xR);$Ke=r(eat,"GPTNeoXConfig"),eat.forEach(t),kKe=r(H7e," (GPT NeoX model)"),H7e.forEach(t),SKe=i(L),Lm=n(L,"LI",{});var U7e=s(Lm);Cne=n(U7e,"STRONG",{});var oat=s(Cne);RKe=r(oat,"gptj"),oat.forEach(t),PKe=r(U7e," \u2014 "),$R=n(U7e,"A",{href:!0});var rat=s($R);BKe=r(rat,"GPTJConfig"),rat.forEach(t),IKe=r(U7e," (GPT-J model)"),U7e.forEach(t),NKe=i(L),ym=n(L,"LI",{});var J7e=s(ym);wne=n(J7e,"STRONG",{});var tat=s(wne);qKe=r(tat,"groupvit"),tat.forEach(t),jKe=r(J7e," \u2014 "),kR=n(J7e,"A",{href:!0});var aat=s(kR);DKe=r(aat,"GroupViTConfig"),aat.forEach(t),GKe=r(J7e," (GroupViT model)"),J7e.forEach(t),OKe=i(L),xm=n(L,"LI",{});var Y7e=s(xm);Ane=n(Y7e,"STRONG",{});var nat=s(Ane);VKe=r(nat,"hubert"),nat.forEach(t),XKe=r(Y7e," \u2014 "),SR=n(Y7e,"A",{href:!0});var sat=s(SR);zKe=r(sat,"HubertConfig"),sat.forEach(t),QKe=r(Y7e," (Hubert model)"),Y7e.forEach(t),WKe=i(L),$m=n(L,"LI",{});var K7e=s($m);Lne=n(K7e,"STRONG",{});var lat=s(Lne);HKe=r(lat,"ibert"),lat.forEach(t),UKe=r(K7e," \u2014 "),RR=n(K7e,"A",{href:!0});var iat=s(RR);JKe=r(iat,"IBertConfig"),iat.forEach(t),YKe=r(K7e," (I-BERT model)"),K7e.forEach(t),KKe=i(L),km=n(L,"LI",{});var Z7e=s(km);yne=n(Z7e,"STRONG",{});var dat=s(yne);ZKe=r(dat,"imagegpt"),dat.forEach(t),eZe=r(Z7e," \u2014 "),PR=n(Z7e,"A",{href:!0});var cat=s(PR);oZe=r(cat,"ImageGPTConfig"),cat.forEach(t),rZe=r(Z7e," (ImageGPT model)"),Z7e.forEach(t),tZe=i(L),Sm=n(L,"LI",{});var eLe=s(Sm);xne=n(eLe,"STRONG",{});var fat=s(xne);aZe=r(fat,"layoutlm"),fat.forEach(t),nZe=r(eLe," \u2014 "),BR=n(eLe,"A",{href:!0});var mat=s(BR);sZe=r(mat,"LayoutLMConfig"),mat.forEach(t),lZe=r(eLe," (LayoutLM model)"),eLe.forEach(t),iZe=i(L),Rm=n(L,"LI",{});var oLe=s(Rm);$ne=n(oLe,"STRONG",{});var gat=s($ne);dZe=r(gat,"layoutlmv2"),gat.forEach(t),cZe=r(oLe," \u2014 "),IR=n(oLe,"A",{href:!0});var hat=s(IR);fZe=r(hat,"LayoutLMv2Config"),hat.forEach(t),mZe=r(oLe," (LayoutLMv2 model)"),oLe.forEach(t),gZe=i(L),Pm=n(L,"LI",{});var rLe=s(Pm);kne=n(rLe,"STRONG",{});var pat=s(kne);hZe=r(pat,"layoutlmv3"),pat.forEach(t),pZe=r(rLe," \u2014 "),NR=n(rLe,"A",{href:!0});var _at=s(NR);_Ze=r(_at,"LayoutLMv3Config"),_at.forEach(t),uZe=r(rLe," (LayoutLMv3 model)"),rLe.forEach(t),bZe=i(L),Bm=n(L,"LI",{});var tLe=s(Bm);Sne=n(tLe,"STRONG",{});var uat=s(Sne);vZe=r(uat,"led"),uat.forEach(t),FZe=r(tLe," \u2014 "),qR=n(tLe,"A",{href:!0});var bat=s(qR);TZe=r(bat,"LEDConfig"),bat.forEach(t),MZe=r(tLe," (LED model)"),tLe.forEach(t),EZe=i(L),Im=n(L,"LI",{});var aLe=s(Im);Rne=n(aLe,"STRONG",{});var vat=s(Rne);CZe=r(vat,"levit"),vat.forEach(t),wZe=r(aLe," \u2014 "),jR=n(aLe,"A",{href:!0});var Fat=s(jR);AZe=r(Fat,"LevitConfig"),Fat.forEach(t),LZe=r(aLe," (LeViT model)"),aLe.forEach(t),yZe=i(L),Nm=n(L,"LI",{});var nLe=s(Nm);Pne=n(nLe,"STRONG",{});var Tat=s(Pne);xZe=r(Tat,"longformer"),Tat.forEach(t),$Ze=r(nLe," \u2014 "),DR=n(nLe,"A",{href:!0});var Mat=s(DR);kZe=r(Mat,"LongformerConfig"),Mat.forEach(t),SZe=r(nLe," (Longformer model)"),nLe.forEach(t),RZe=i(L),qm=n(L,"LI",{});var sLe=s(qm);Bne=n(sLe,"STRONG",{});var Eat=s(Bne);PZe=r(Eat,"longt5"),Eat.forEach(t),BZe=r(sLe," \u2014 "),GR=n(sLe,"A",{href:!0});var Cat=s(GR);IZe=r(Cat,"LongT5Config"),Cat.forEach(t),NZe=r(sLe," (LongT5 model)"),sLe.forEach(t),qZe=i(L),jm=n(L,"LI",{});var lLe=s(jm);Ine=n(lLe,"STRONG",{});var wat=s(Ine);jZe=r(wat,"luke"),wat.forEach(t),DZe=r(lLe," \u2014 "),OR=n(lLe,"A",{href:!0});var Aat=s(OR);GZe=r(Aat,"LukeConfig"),Aat.forEach(t),OZe=r(lLe," (LUKE model)"),lLe.forEach(t),VZe=i(L),Dm=n(L,"LI",{});var iLe=s(Dm);Nne=n(iLe,"STRONG",{});var Lat=s(Nne);XZe=r(Lat,"lxmert"),Lat.forEach(t),zZe=r(iLe," \u2014 "),VR=n(iLe,"A",{href:!0});var yat=s(VR);QZe=r(yat,"LxmertConfig"),yat.forEach(t),WZe=r(iLe," (LXMERT model)"),iLe.forEach(t),HZe=i(L),Gm=n(L,"LI",{});var dLe=s(Gm);qne=n(dLe,"STRONG",{});var xat=s(qne);UZe=r(xat,"m2m_100"),xat.forEach(t),JZe=r(dLe," \u2014 "),XR=n(dLe,"A",{href:!0});var $at=s(XR);YZe=r($at,"M2M100Config"),$at.forEach(t),KZe=r(dLe," (M2M100 model)"),dLe.forEach(t),ZZe=i(L),Om=n(L,"LI",{});var cLe=s(Om);jne=n(cLe,"STRONG",{});var kat=s(jne);eeo=r(kat,"marian"),kat.forEach(t),oeo=r(cLe," \u2014 "),zR=n(cLe,"A",{href:!0});var Sat=s(zR);reo=r(Sat,"MarianConfig"),Sat.forEach(t),teo=r(cLe," (Marian model)"),cLe.forEach(t),aeo=i(L),Vm=n(L,"LI",{});var fLe=s(Vm);Dne=n(fLe,"STRONG",{});var Rat=s(Dne);neo=r(Rat,"maskformer"),Rat.forEach(t),seo=r(fLe," \u2014 "),QR=n(fLe,"A",{href:!0});var Pat=s(QR);leo=r(Pat,"MaskFormerConfig"),Pat.forEach(t),ieo=r(fLe," (MaskFormer model)"),fLe.forEach(t),deo=i(L),Xm=n(L,"LI",{});var mLe=s(Xm);Gne=n(mLe,"STRONG",{});var Bat=s(Gne);ceo=r(Bat,"mbart"),Bat.forEach(t),feo=r(mLe," \u2014 "),WR=n(mLe,"A",{href:!0});var Iat=s(WR);meo=r(Iat,"MBartConfig"),Iat.forEach(t),geo=r(mLe," (mBART model)"),mLe.forEach(t),heo=i(L),zm=n(L,"LI",{});var gLe=s(zm);One=n(gLe,"STRONG",{});var Nat=s(One);peo=r(Nat,"mctct"),Nat.forEach(t),_eo=r(gLe," \u2014 "),HR=n(gLe,"A",{href:!0});var qat=s(HR);ueo=r(qat,"MCTCTConfig"),qat.forEach(t),beo=r(gLe," (M-CTC-T model)"),gLe.forEach(t),veo=i(L),Qm=n(L,"LI",{});var hLe=s(Qm);Vne=n(hLe,"STRONG",{});var jat=s(Vne);Feo=r(jat,"megatron-bert"),jat.forEach(t),Teo=r(hLe," \u2014 "),UR=n(hLe,"A",{href:!0});var Dat=s(UR);Meo=r(Dat,"MegatronBertConfig"),Dat.forEach(t),Eeo=r(hLe," (Megatron-BERT model)"),hLe.forEach(t),Ceo=i(L),Wm=n(L,"LI",{});var pLe=s(Wm);Xne=n(pLe,"STRONG",{});var Gat=s(Xne);weo=r(Gat,"mobilebert"),Gat.forEach(t),Aeo=r(pLe," \u2014 "),JR=n(pLe,"A",{href:!0});var Oat=s(JR);Leo=r(Oat,"MobileBertConfig"),Oat.forEach(t),yeo=r(pLe," (MobileBERT model)"),pLe.forEach(t),xeo=i(L),Hm=n(L,"LI",{});var _Le=s(Hm);zne=n(_Le,"STRONG",{});var Vat=s(zne);$eo=r(Vat,"mobilevit"),Vat.forEach(t),keo=r(_Le," \u2014 "),YR=n(_Le,"A",{href:!0});var Xat=s(YR);Seo=r(Xat,"MobileViTConfig"),Xat.forEach(t),Reo=r(_Le," (MobileViT model)"),_Le.forEach(t),Peo=i(L),Um=n(L,"LI",{});var uLe=s(Um);Qne=n(uLe,"STRONG",{});var zat=s(Qne);Beo=r(zat,"mpnet"),zat.forEach(t),Ieo=r(uLe," \u2014 "),KR=n(uLe,"A",{href:!0});var Qat=s(KR);Neo=r(Qat,"MPNetConfig"),Qat.forEach(t),qeo=r(uLe," (MPNet model)"),uLe.forEach(t),jeo=i(L),Jm=n(L,"LI",{});var bLe=s(Jm);Wne=n(bLe,"STRONG",{});var Wat=s(Wne);Deo=r(Wat,"mt5"),Wat.forEach(t),Geo=r(bLe," \u2014 "),ZR=n(bLe,"A",{href:!0});var Hat=s(ZR);Oeo=r(Hat,"MT5Config"),Hat.forEach(t),Veo=r(bLe," (MT5 model)"),bLe.forEach(t),Xeo=i(L),Ym=n(L,"LI",{});var vLe=s(Ym);Hne=n(vLe,"STRONG",{});var Uat=s(Hne);zeo=r(Uat,"mvp"),Uat.forEach(t),Qeo=r(vLe," \u2014 "),eP=n(vLe,"A",{href:!0});var Jat=s(eP);Weo=r(Jat,"MvpConfig"),Jat.forEach(t),Heo=r(vLe," (MVP model)"),vLe.forEach(t),Ueo=i(L),Km=n(L,"LI",{});var FLe=s(Km);Une=n(FLe,"STRONG",{});var Yat=s(Une);Jeo=r(Yat,"nezha"),Yat.forEach(t),Yeo=r(FLe," \u2014 "),oP=n(FLe,"A",{href:!0});var Kat=s(oP);Keo=r(Kat,"NezhaConfig"),Kat.forEach(t),Zeo=r(FLe," (Nezha model)"),FLe.forEach(t),eoo=i(L),Zm=n(L,"LI",{});var TLe=s(Zm);Jne=n(TLe,"STRONG",{});var Zat=s(Jne);ooo=r(Zat,"nystromformer"),Zat.forEach(t),roo=r(TLe," \u2014 "),rP=n(TLe,"A",{href:!0});var ent=s(rP);too=r(ent,"NystromformerConfig"),ent.forEach(t),aoo=r(TLe," (Nystr\xF6mformer model)"),TLe.forEach(t),noo=i(L),eg=n(L,"LI",{});var MLe=s(eg);Yne=n(MLe,"STRONG",{});var ont=s(Yne);soo=r(ont,"openai-gpt"),ont.forEach(t),loo=r(MLe," \u2014 "),tP=n(MLe,"A",{href:!0});var rnt=s(tP);ioo=r(rnt,"OpenAIGPTConfig"),rnt.forEach(t),doo=r(MLe," (OpenAI GPT model)"),MLe.forEach(t),coo=i(L),og=n(L,"LI",{});var ELe=s(og);Kne=n(ELe,"STRONG",{});var tnt=s(Kne);foo=r(tnt,"opt"),tnt.forEach(t),moo=r(ELe," \u2014 "),aP=n(ELe,"A",{href:!0});var ant=s(aP);goo=r(ant,"OPTConfig"),ant.forEach(t),hoo=r(ELe," (OPT model)"),ELe.forEach(t),poo=i(L),rg=n(L,"LI",{});var CLe=s(rg);Zne=n(CLe,"STRONG",{});var nnt=s(Zne);_oo=r(nnt,"pegasus"),nnt.forEach(t),uoo=r(CLe," \u2014 "),nP=n(CLe,"A",{href:!0});var snt=s(nP);boo=r(snt,"PegasusConfig"),snt.forEach(t),voo=r(CLe," (Pegasus model)"),CLe.forEach(t),Foo=i(L),tg=n(L,"LI",{});var wLe=s(tg);ese=n(wLe,"STRONG",{});var lnt=s(ese);Too=r(lnt,"perceiver"),lnt.forEach(t),Moo=r(wLe," \u2014 "),sP=n(wLe,"A",{href:!0});var int=s(sP);Eoo=r(int,"PerceiverConfig"),int.forEach(t),Coo=r(wLe," (Perceiver model)"),wLe.forEach(t),woo=i(L),ag=n(L,"LI",{});var ALe=s(ag);ose=n(ALe,"STRONG",{});var dnt=s(ose);Aoo=r(dnt,"plbart"),dnt.forEach(t),Loo=r(ALe," \u2014 "),lP=n(ALe,"A",{href:!0});var cnt=s(lP);yoo=r(cnt,"PLBartConfig"),cnt.forEach(t),xoo=r(ALe," (PLBart model)"),ALe.forEach(t),$oo=i(L),ng=n(L,"LI",{});var LLe=s(ng);rse=n(LLe,"STRONG",{});var fnt=s(rse);koo=r(fnt,"poolformer"),fnt.forEach(t),Soo=r(LLe," \u2014 "),iP=n(LLe,"A",{href:!0});var mnt=s(iP);Roo=r(mnt,"PoolFormerConfig"),mnt.forEach(t),Poo=r(LLe," (PoolFormer model)"),LLe.forEach(t),Boo=i(L),sg=n(L,"LI",{});var yLe=s(sg);tse=n(yLe,"STRONG",{});var gnt=s(tse);Ioo=r(gnt,"prophetnet"),gnt.forEach(t),Noo=r(yLe," \u2014 "),dP=n(yLe,"A",{href:!0});var hnt=s(dP);qoo=r(hnt,"ProphetNetConfig"),hnt.forEach(t),joo=r(yLe," (ProphetNet model)"),yLe.forEach(t),Doo=i(L),lg=n(L,"LI",{});var xLe=s(lg);ase=n(xLe,"STRONG",{});var pnt=s(ase);Goo=r(pnt,"qdqbert"),pnt.forEach(t),Ooo=r(xLe," \u2014 "),cP=n(xLe,"A",{href:!0});var _nt=s(cP);Voo=r(_nt,"QDQBertConfig"),_nt.forEach(t),Xoo=r(xLe," (QDQBert model)"),xLe.forEach(t),zoo=i(L),ig=n(L,"LI",{});var $Le=s(ig);nse=n($Le,"STRONG",{});var unt=s(nse);Qoo=r(unt,"rag"),unt.forEach(t),Woo=r($Le," \u2014 "),fP=n($Le,"A",{href:!0});var bnt=s(fP);Hoo=r(bnt,"RagConfig"),bnt.forEach(t),Uoo=r($Le," (RAG model)"),$Le.forEach(t),Joo=i(L),dg=n(L,"LI",{});var kLe=s(dg);sse=n(kLe,"STRONG",{});var vnt=s(sse);Yoo=r(vnt,"realm"),vnt.forEach(t),Koo=r(kLe," \u2014 "),mP=n(kLe,"A",{href:!0});var Fnt=s(mP);Zoo=r(Fnt,"RealmConfig"),Fnt.forEach(t),ero=r(kLe," (REALM model)"),kLe.forEach(t),oro=i(L),cg=n(L,"LI",{});var SLe=s(cg);lse=n(SLe,"STRONG",{});var Tnt=s(lse);rro=r(Tnt,"reformer"),Tnt.forEach(t),tro=r(SLe," \u2014 "),gP=n(SLe,"A",{href:!0});var Mnt=s(gP);aro=r(Mnt,"ReformerConfig"),Mnt.forEach(t),nro=r(SLe," (Reformer model)"),SLe.forEach(t),sro=i(L),fg=n(L,"LI",{});var RLe=s(fg);ise=n(RLe,"STRONG",{});var Ent=s(ise);lro=r(Ent,"regnet"),Ent.forEach(t),iro=r(RLe," \u2014 "),hP=n(RLe,"A",{href:!0});var Cnt=s(hP);dro=r(Cnt,"RegNetConfig"),Cnt.forEach(t),cro=r(RLe," (RegNet model)"),RLe.forEach(t),fro=i(L),mg=n(L,"LI",{});var PLe=s(mg);dse=n(PLe,"STRONG",{});var wnt=s(dse);mro=r(wnt,"rembert"),wnt.forEach(t),gro=r(PLe," \u2014 "),pP=n(PLe,"A",{href:!0});var Ant=s(pP);hro=r(Ant,"RemBertConfig"),Ant.forEach(t),pro=r(PLe," (RemBERT model)"),PLe.forEach(t),_ro=i(L),gg=n(L,"LI",{});var BLe=s(gg);cse=n(BLe,"STRONG",{});var Lnt=s(cse);uro=r(Lnt,"resnet"),Lnt.forEach(t),bro=r(BLe," \u2014 "),_P=n(BLe,"A",{href:!0});var ynt=s(_P);vro=r(ynt,"ResNetConfig"),ynt.forEach(t),Fro=r(BLe," (ResNet model)"),BLe.forEach(t),Tro=i(L),hg=n(L,"LI",{});var ILe=s(hg);fse=n(ILe,"STRONG",{});var xnt=s(fse);Mro=r(xnt,"retribert"),xnt.forEach(t),Ero=r(ILe," \u2014 "),uP=n(ILe,"A",{href:!0});var $nt=s(uP);Cro=r($nt,"RetriBertConfig"),$nt.forEach(t),wro=r(ILe," (RetriBERT model)"),ILe.forEach(t),Aro=i(L),pg=n(L,"LI",{});var NLe=s(pg);mse=n(NLe,"STRONG",{});var knt=s(mse);Lro=r(knt,"roberta"),knt.forEach(t),yro=r(NLe," \u2014 "),bP=n(NLe,"A",{href:!0});var Snt=s(bP);xro=r(Snt,"RobertaConfig"),Snt.forEach(t),$ro=r(NLe," (RoBERTa model)"),NLe.forEach(t),kro=i(L),_g=n(L,"LI",{});var qLe=s(_g);gse=n(qLe,"STRONG",{});var Rnt=s(gse);Sro=r(Rnt,"roformer"),Rnt.forEach(t),Rro=r(qLe," \u2014 "),vP=n(qLe,"A",{href:!0});var Pnt=s(vP);Pro=r(Pnt,"RoFormerConfig"),Pnt.forEach(t),Bro=r(qLe," (RoFormer model)"),qLe.forEach(t),Iro=i(L),ug=n(L,"LI",{});var jLe=s(ug);hse=n(jLe,"STRONG",{});var Bnt=s(hse);Nro=r(Bnt,"segformer"),Bnt.forEach(t),qro=r(jLe," \u2014 "),FP=n(jLe,"A",{href:!0});var Int=s(FP);jro=r(Int,"SegformerConfig"),Int.forEach(t),Dro=r(jLe," (SegFormer model)"),jLe.forEach(t),Gro=i(L),bg=n(L,"LI",{});var DLe=s(bg);pse=n(DLe,"STRONG",{});var Nnt=s(pse);Oro=r(Nnt,"sew"),Nnt.forEach(t),Vro=r(DLe," \u2014 "),TP=n(DLe,"A",{href:!0});var qnt=s(TP);Xro=r(qnt,"SEWConfig"),qnt.forEach(t),zro=r(DLe," (SEW model)"),DLe.forEach(t),Qro=i(L),vg=n(L,"LI",{});var GLe=s(vg);_se=n(GLe,"STRONG",{});var jnt=s(_se);Wro=r(jnt,"sew-d"),jnt.forEach(t),Hro=r(GLe," \u2014 "),MP=n(GLe,"A",{href:!0});var Dnt=s(MP);Uro=r(Dnt,"SEWDConfig"),Dnt.forEach(t),Jro=r(GLe," (SEW-D model)"),GLe.forEach(t),Yro=i(L),Fg=n(L,"LI",{});var OLe=s(Fg);use=n(OLe,"STRONG",{});var Gnt=s(use);Kro=r(Gnt,"speech-encoder-decoder"),Gnt.forEach(t),Zro=r(OLe," \u2014 "),EP=n(OLe,"A",{href:!0});var Ont=s(EP);eto=r(Ont,"SpeechEncoderDecoderConfig"),Ont.forEach(t),oto=r(OLe," (Speech Encoder decoder model)"),OLe.forEach(t),rto=i(L),Tg=n(L,"LI",{});var VLe=s(Tg);bse=n(VLe,"STRONG",{});var Vnt=s(bse);tto=r(Vnt,"speech_to_text"),Vnt.forEach(t),ato=r(VLe," \u2014 "),CP=n(VLe,"A",{href:!0});var Xnt=s(CP);nto=r(Xnt,"Speech2TextConfig"),Xnt.forEach(t),sto=r(VLe," (Speech2Text model)"),VLe.forEach(t),lto=i(L),Mg=n(L,"LI",{});var XLe=s(Mg);vse=n(XLe,"STRONG",{});var znt=s(vse);ito=r(znt,"speech_to_text_2"),znt.forEach(t),dto=r(XLe," \u2014 "),wP=n(XLe,"A",{href:!0});var Qnt=s(wP);cto=r(Qnt,"Speech2Text2Config"),Qnt.forEach(t),fto=r(XLe," (Speech2Text2 model)"),XLe.forEach(t),mto=i(L),Eg=n(L,"LI",{});var zLe=s(Eg);Fse=n(zLe,"STRONG",{});var Wnt=s(Fse);gto=r(Wnt,"splinter"),Wnt.forEach(t),hto=r(zLe," \u2014 "),AP=n(zLe,"A",{href:!0});var Hnt=s(AP);pto=r(Hnt,"SplinterConfig"),Hnt.forEach(t),_to=r(zLe," (Splinter model)"),zLe.forEach(t),uto=i(L),Cg=n(L,"LI",{});var QLe=s(Cg);Tse=n(QLe,"STRONG",{});var Unt=s(Tse);bto=r(Unt,"squeezebert"),Unt.forEach(t),vto=r(QLe," \u2014 "),LP=n(QLe,"A",{href:!0});var Jnt=s(LP);Fto=r(Jnt,"SqueezeBertConfig"),Jnt.forEach(t),Tto=r(QLe," (SqueezeBERT model)"),QLe.forEach(t),Mto=i(L),wg=n(L,"LI",{});var WLe=s(wg);Mse=n(WLe,"STRONG",{});var Ynt=s(Mse);Eto=r(Ynt,"swin"),Ynt.forEach(t),Cto=r(WLe," \u2014 "),yP=n(WLe,"A",{href:!0});var Knt=s(yP);wto=r(Knt,"SwinConfig"),Knt.forEach(t),Ato=r(WLe," (Swin Transformer model)"),WLe.forEach(t),Lto=i(L),Ag=n(L,"LI",{});var HLe=s(Ag);Ese=n(HLe,"STRONG",{});var Znt=s(Ese);yto=r(Znt,"t5"),Znt.forEach(t),xto=r(HLe," \u2014 "),xP=n(HLe,"A",{href:!0});var est=s(xP);$to=r(est,"T5Config"),est.forEach(t),kto=r(HLe," (T5 model)"),HLe.forEach(t),Sto=i(L),Lg=n(L,"LI",{});var ULe=s(Lg);Cse=n(ULe,"STRONG",{});var ost=s(Cse);Rto=r(ost,"tapas"),ost.forEach(t),Pto=r(ULe," \u2014 "),$P=n(ULe,"A",{href:!0});var rst=s($P);Bto=r(rst,"TapasConfig"),rst.forEach(t),Ito=r(ULe," (TAPAS model)"),ULe.forEach(t),Nto=i(L),yg=n(L,"LI",{});var JLe=s(yg);wse=n(JLe,"STRONG",{});var tst=s(wse);qto=r(tst,"trajectory_transformer"),tst.forEach(t),jto=r(JLe," \u2014 "),kP=n(JLe,"A",{href:!0});var ast=s(kP);Dto=r(ast,"TrajectoryTransformerConfig"),ast.forEach(t),Gto=r(JLe," (Trajectory Transformer model)"),JLe.forEach(t),Oto=i(L),xg=n(L,"LI",{});var YLe=s(xg);Ase=n(YLe,"STRONG",{});var nst=s(Ase);Vto=r(nst,"transfo-xl"),nst.forEach(t),Xto=r(YLe," \u2014 "),SP=n(YLe,"A",{href:!0});var sst=s(SP);zto=r(sst,"TransfoXLConfig"),sst.forEach(t),Qto=r(YLe," (Transformer-XL model)"),YLe.forEach(t),Wto=i(L),$g=n(L,"LI",{});var KLe=s($g);Lse=n(KLe,"STRONG",{});var lst=s(Lse);Hto=r(lst,"trocr"),lst.forEach(t),Uto=r(KLe," \u2014 "),RP=n(KLe,"A",{href:!0});var ist=s(RP);Jto=r(ist,"TrOCRConfig"),ist.forEach(t),Yto=r(KLe," (TrOCR model)"),KLe.forEach(t),Kto=i(L),kg=n(L,"LI",{});var ZLe=s(kg);yse=n(ZLe,"STRONG",{});var dst=s(yse);Zto=r(dst,"unispeech"),dst.forEach(t),eao=r(ZLe," \u2014 "),PP=n(ZLe,"A",{href:!0});var cst=s(PP);oao=r(cst,"UniSpeechConfig"),cst.forEach(t),rao=r(ZLe," (UniSpeech model)"),ZLe.forEach(t),tao=i(L),Sg=n(L,"LI",{});var eye=s(Sg);xse=n(eye,"STRONG",{});var fst=s(xse);aao=r(fst,"unispeech-sat"),fst.forEach(t),nao=r(eye," \u2014 "),BP=n(eye,"A",{href:!0});var mst=s(BP);sao=r(mst,"UniSpeechSatConfig"),mst.forEach(t),lao=r(eye," (UniSpeechSat model)"),eye.forEach(t),iao=i(L),Rg=n(L,"LI",{});var oye=s(Rg);$se=n(oye,"STRONG",{});var gst=s($se);dao=r(gst,"van"),gst.forEach(t),cao=r(oye," \u2014 "),IP=n(oye,"A",{href:!0});var hst=s(IP);fao=r(hst,"VanConfig"),hst.forEach(t),mao=r(oye," (VAN model)"),oye.forEach(t),gao=i(L),Pg=n(L,"LI",{});var rye=s(Pg);kse=n(rye,"STRONG",{});var pst=s(kse);hao=r(pst,"vilt"),pst.forEach(t),pao=r(rye," \u2014 "),NP=n(rye,"A",{href:!0});var _st=s(NP);_ao=r(_st,"ViltConfig"),_st.forEach(t),uao=r(rye," (ViLT model)"),rye.forEach(t),bao=i(L),Bg=n(L,"LI",{});var tye=s(Bg);Sse=n(tye,"STRONG",{});var ust=s(Sse);vao=r(ust,"vision-encoder-decoder"),ust.forEach(t),Fao=r(tye," \u2014 "),qP=n(tye,"A",{href:!0});var bst=s(qP);Tao=r(bst,"VisionEncoderDecoderConfig"),bst.forEach(t),Mao=r(tye," (Vision Encoder decoder model)"),tye.forEach(t),Eao=i(L),Ig=n(L,"LI",{});var aye=s(Ig);Rse=n(aye,"STRONG",{});var vst=s(Rse);Cao=r(vst,"vision-text-dual-encoder"),vst.forEach(t),wao=r(aye," \u2014 "),jP=n(aye,"A",{href:!0});var Fst=s(jP);Aao=r(Fst,"VisionTextDualEncoderConfig"),Fst.forEach(t),Lao=r(aye," (VisionTextDualEncoder model)"),aye.forEach(t),yao=i(L),Ng=n(L,"LI",{});var nye=s(Ng);Pse=n(nye,"STRONG",{});var Tst=s(Pse);xao=r(Tst,"visual_bert"),Tst.forEach(t),$ao=r(nye," \u2014 "),DP=n(nye,"A",{href:!0});var Mst=s(DP);kao=r(Mst,"VisualBertConfig"),Mst.forEach(t),Sao=r(nye," (VisualBERT model)"),nye.forEach(t),Rao=i(L),qg=n(L,"LI",{});var sye=s(qg);Bse=n(sye,"STRONG",{});var Est=s(Bse);Pao=r(Est,"vit"),Est.forEach(t),Bao=r(sye," \u2014 "),GP=n(sye,"A",{href:!0});var Cst=s(GP);Iao=r(Cst,"ViTConfig"),Cst.forEach(t),Nao=r(sye," (ViT model)"),sye.forEach(t),qao=i(L),jg=n(L,"LI",{});var lye=s(jg);Ise=n(lye,"STRONG",{});var wst=s(Ise);jao=r(wst,"vit_mae"),wst.forEach(t),Dao=r(lye," \u2014 "),OP=n(lye,"A",{href:!0});var Ast=s(OP);Gao=r(Ast,"ViTMAEConfig"),Ast.forEach(t),Oao=r(lye," (ViTMAE model)"),lye.forEach(t),Vao=i(L),Dg=n(L,"LI",{});var iye=s(Dg);Nse=n(iye,"STRONG",{});var Lst=s(Nse);Xao=r(Lst,"wav2vec2"),Lst.forEach(t),zao=r(iye," \u2014 "),VP=n(iye,"A",{href:!0});var yst=s(VP);Qao=r(yst,"Wav2Vec2Config"),yst.forEach(t),Wao=r(iye," (Wav2Vec2 model)"),iye.forEach(t),Hao=i(L),Gg=n(L,"LI",{});var dye=s(Gg);qse=n(dye,"STRONG",{});var xst=s(qse);Uao=r(xst,"wav2vec2-conformer"),xst.forEach(t),Jao=r(dye," \u2014 "),XP=n(dye,"A",{href:!0});var $st=s(XP);Yao=r($st,"Wav2Vec2ConformerConfig"),$st.forEach(t),Kao=r(dye," (Wav2Vec2-Conformer model)"),dye.forEach(t),Zao=i(L),Og=n(L,"LI",{});var cye=s(Og);jse=n(cye,"STRONG",{});var kst=s(jse);eno=r(kst,"wavlm"),kst.forEach(t),ono=r(cye," \u2014 "),zP=n(cye,"A",{href:!0});var Sst=s(zP);rno=r(Sst,"WavLMConfig"),Sst.forEach(t),tno=r(cye," (WavLM model)"),cye.forEach(t),ano=i(L),Vg=n(L,"LI",{});var fye=s(Vg);Dse=n(fye,"STRONG",{});var Rst=s(Dse);nno=r(Rst,"xglm"),Rst.forEach(t),sno=r(fye," \u2014 "),QP=n(fye,"A",{href:!0});var Pst=s(QP);lno=r(Pst,"XGLMConfig"),Pst.forEach(t),ino=r(fye," (XGLM model)"),fye.forEach(t),dno=i(L),Xg=n(L,"LI",{});var mye=s(Xg);Gse=n(mye,"STRONG",{});var Bst=s(Gse);cno=r(Bst,"xlm"),Bst.forEach(t),fno=r(mye," \u2014 "),WP=n(mye,"A",{href:!0});var Ist=s(WP);mno=r(Ist,"XLMConfig"),Ist.forEach(t),gno=r(mye," (XLM model)"),mye.forEach(t),hno=i(L),zg=n(L,"LI",{});var gye=s(zg);Ose=n(gye,"STRONG",{});var Nst=s(Ose);pno=r(Nst,"xlm-prophetnet"),Nst.forEach(t),_no=r(gye," \u2014 "),HP=n(gye,"A",{href:!0});var qst=s(HP);uno=r(qst,"XLMProphetNetConfig"),qst.forEach(t),bno=r(gye," (XLM-ProphetNet model)"),gye.forEach(t),vno=i(L),Qg=n(L,"LI",{});var hye=s(Qg);Vse=n(hye,"STRONG",{});var jst=s(Vse);Fno=r(jst,"xlm-roberta"),jst.forEach(t),Tno=r(hye," \u2014 "),UP=n(hye,"A",{href:!0});var Dst=s(UP);Mno=r(Dst,"XLMRobertaConfig"),Dst.forEach(t),Eno=r(hye," (XLM-RoBERTa model)"),hye.forEach(t),Cno=i(L),Wg=n(L,"LI",{});var pye=s(Wg);Xse=n(pye,"STRONG",{});var Gst=s(Xse);wno=r(Gst,"xlm-roberta-xl"),Gst.forEach(t),Ano=r(pye," \u2014 "),JP=n(pye,"A",{href:!0});var Ost=s(JP);Lno=r(Ost,"XLMRobertaXLConfig"),Ost.forEach(t),yno=r(pye," (XLM-RoBERTa-XL model)"),pye.forEach(t),xno=i(L),Hg=n(L,"LI",{});var _ye=s(Hg);zse=n(_ye,"STRONG",{});var Vst=s(zse);$no=r(Vst,"xlnet"),Vst.forEach(t),kno=r(_ye," \u2014 "),YP=n(_ye,"A",{href:!0});var Xst=s(YP);Sno=r(Xst,"XLNetConfig"),Xst.forEach(t),Rno=r(_ye," (XLNet model)"),_ye.forEach(t),Pno=i(L),Ug=n(L,"LI",{});var uye=s(Ug);Qse=n(uye,"STRONG",{});var zst=s(Qse);Bno=r(zst,"yolos"),zst.forEach(t),Ino=r(uye," \u2014 "),KP=n(uye,"A",{href:!0});var Qst=s(KP);Nno=r(Qst,"YolosConfig"),Qst.forEach(t),qno=r(uye," (YOLOS model)"),uye.forEach(t),jno=i(L),Jg=n(L,"LI",{});var bye=s(Jg);Wse=n(bye,"STRONG",{});var Wst=s(Wse);Dno=r(Wst,"yoso"),Wst.forEach(t),Gno=r(bye," \u2014 "),ZP=n(bye,"A",{href:!0});var Hst=s(ZP);Ono=r(Hst,"YosoConfig"),Hst.forEach(t),Vno=r(bye," (YOSO model)"),bye.forEach(t),L.forEach(t),Xno=i(st),T(Yg.$$.fragment,st),st.forEach(t),zno=i(nt),Kg=n(nt,"DIV",{class:!0});var fQe=s(Kg);T(gL.$$.fragment,fQe),Qno=i(fQe),Hse=n(fQe,"P",{});var Ust=s(Hse);Wno=r(Ust,"Register a new configuration for this class."),Ust.forEach(t),fQe.forEach(t),nt.forEach(t),mXe=i(f),Ni=n(f,"H2",{class:!0});var mQe=s(Ni);Zg=n(mQe,"A",{id:!0,class:!0,href:!0});var Jst=s(Zg);Use=n(Jst,"SPAN",{});var Yst=s(Use);T(hL.$$.fragment,Yst),Yst.forEach(t),Jst.forEach(t),Hno=i(mQe),Jse=n(mQe,"SPAN",{});var Kst=s(Jse);Uno=r(Kst,"AutoTokenizer"),Kst.forEach(t),mQe.forEach(t),gXe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(pL.$$.fragment,Ks),Jno=i(Ks),_L=n(Ks,"P",{});var gQe=s(_L);Yno=r(gQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=n(gQe,"A",{href:!0});var Zst=s(eB);Kno=r(Zst,"AutoTokenizer.from_pretrained()"),Zst.forEach(t),Zno=r(gQe," class method."),gQe.forEach(t),eso=i(Ks),uL=n(Ks,"P",{});var hQe=s(uL);oso=r(hQe,"This class cannot be instantiated directly using "),Yse=n(hQe,"CODE",{});var elt=s(Yse);rso=r(elt,"__init__()"),elt.forEach(t),tso=r(hQe," (throws an error)."),hQe.forEach(t),aso=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(bL.$$.fragment,Zs),nso=i(Zs),Kse=n(Zs,"P",{});var olt=s(Kse);sso=r(olt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),olt.forEach(t),lso=i(Zs),Pa=n(Zs,"P",{});var i6=s(Pa);iso=r(i6,"The tokenizer class to instantiate is selected based on the "),Zse=n(i6,"CODE",{});var rlt=s(Zse);dso=r(rlt,"model_type"),rlt.forEach(t),cso=r(i6,` property of the config object (either
passed as an argument or loaded from `),ele=n(i6,"CODE",{});var tlt=s(ele);fso=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),mso=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(i6,"CODE",{});var alt=s(ole);gso=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),hso=r(i6,":"),i6.forEach(t),pso=i(Zs),k=n(Zs,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ck=s(jn);rle=n(Ck,"STRONG",{});var nlt=s(rle);_so=r(nlt,"albert"),nlt.forEach(t),uso=r(Ck," \u2014 "),oB=n(Ck,"A",{href:!0});var slt=s(oB);bso=r(slt,"AlbertTokenizer"),slt.forEach(t),vso=r(Ck," or "),rB=n(Ck,"A",{href:!0});var llt=s(rB);Fso=r(llt,"AlbertTokenizerFast"),llt.forEach(t),Tso=r(Ck," (ALBERT model)"),Ck.forEach(t),Mso=i(S),Dn=n(S,"LI",{});var wk=s(Dn);tle=n(wk,"STRONG",{});var ilt=s(tle);Eso=r(ilt,"bart"),ilt.forEach(t),Cso=r(wk," \u2014 "),tB=n(wk,"A",{href:!0});var dlt=s(tB);wso=r(dlt,"BartTokenizer"),dlt.forEach(t),Aso=r(wk," or "),aB=n(wk,"A",{href:!0});var clt=s(aB);Lso=r(clt,"BartTokenizerFast"),clt.forEach(t),yso=r(wk," (BART model)"),wk.forEach(t),xso=i(S),Gn=n(S,"LI",{});var Ak=s(Gn);ale=n(Ak,"STRONG",{});var flt=s(ale);$so=r(flt,"barthez"),flt.forEach(t),kso=r(Ak," \u2014 "),nB=n(Ak,"A",{href:!0});var mlt=s(nB);Sso=r(mlt,"BarthezTokenizer"),mlt.forEach(t),Rso=r(Ak," or "),sB=n(Ak,"A",{href:!0});var glt=s(sB);Pso=r(glt,"BarthezTokenizerFast"),glt.forEach(t),Bso=r(Ak," (BARThez model)"),Ak.forEach(t),Iso=i(S),eh=n(S,"LI",{});var vye=s(eh);nle=n(vye,"STRONG",{});var hlt=s(nle);Nso=r(hlt,"bartpho"),hlt.forEach(t),qso=r(vye," \u2014 "),lB=n(vye,"A",{href:!0});var plt=s(lB);jso=r(plt,"BartphoTokenizer"),plt.forEach(t),Dso=r(vye," (BARTpho model)"),vye.forEach(t),Gso=i(S),On=n(S,"LI",{});var Lk=s(On);sle=n(Lk,"STRONG",{});var _lt=s(sle);Oso=r(_lt,"bert"),_lt.forEach(t),Vso=r(Lk," \u2014 "),iB=n(Lk,"A",{href:!0});var ult=s(iB);Xso=r(ult,"BertTokenizer"),ult.forEach(t),zso=r(Lk," or "),dB=n(Lk,"A",{href:!0});var blt=s(dB);Qso=r(blt,"BertTokenizerFast"),blt.forEach(t),Wso=r(Lk," (BERT model)"),Lk.forEach(t),Hso=i(S),oh=n(S,"LI",{});var Fye=s(oh);lle=n(Fye,"STRONG",{});var vlt=s(lle);Uso=r(vlt,"bert-generation"),vlt.forEach(t),Jso=r(Fye," \u2014 "),cB=n(Fye,"A",{href:!0});var Flt=s(cB);Yso=r(Flt,"BertGenerationTokenizer"),Flt.forEach(t),Kso=r(Fye," (Bert Generation model)"),Fye.forEach(t),Zso=i(S),rh=n(S,"LI",{});var Tye=s(rh);ile=n(Tye,"STRONG",{});var Tlt=s(ile);elo=r(Tlt,"bert-japanese"),Tlt.forEach(t),olo=r(Tye," \u2014 "),fB=n(Tye,"A",{href:!0});var Mlt=s(fB);rlo=r(Mlt,"BertJapaneseTokenizer"),Mlt.forEach(t),tlo=r(Tye," (BertJapanese model)"),Tye.forEach(t),alo=i(S),th=n(S,"LI",{});var Mye=s(th);dle=n(Mye,"STRONG",{});var Elt=s(dle);nlo=r(Elt,"bertweet"),Elt.forEach(t),slo=r(Mye," \u2014 "),mB=n(Mye,"A",{href:!0});var Clt=s(mB);llo=r(Clt,"BertweetTokenizer"),Clt.forEach(t),ilo=r(Mye," (BERTweet model)"),Mye.forEach(t),dlo=i(S),Vn=n(S,"LI",{});var yk=s(Vn);cle=n(yk,"STRONG",{});var wlt=s(cle);clo=r(wlt,"big_bird"),wlt.forEach(t),flo=r(yk," \u2014 "),gB=n(yk,"A",{href:!0});var Alt=s(gB);mlo=r(Alt,"BigBirdTokenizer"),Alt.forEach(t),glo=r(yk," or "),hB=n(yk,"A",{href:!0});var Llt=s(hB);hlo=r(Llt,"BigBirdTokenizerFast"),Llt.forEach(t),plo=r(yk," (BigBird model)"),yk.forEach(t),_lo=i(S),Xn=n(S,"LI",{});var xk=s(Xn);fle=n(xk,"STRONG",{});var ylt=s(fle);ulo=r(ylt,"bigbird_pegasus"),ylt.forEach(t),blo=r(xk," \u2014 "),pB=n(xk,"A",{href:!0});var xlt=s(pB);vlo=r(xlt,"PegasusTokenizer"),xlt.forEach(t),Flo=r(xk," or "),_B=n(xk,"A",{href:!0});var $lt=s(_B);Tlo=r($lt,"PegasusTokenizerFast"),$lt.forEach(t),Mlo=r(xk," (BigBird-Pegasus model)"),xk.forEach(t),Elo=i(S),zn=n(S,"LI",{});var $k=s(zn);mle=n($k,"STRONG",{});var klt=s(mle);Clo=r(klt,"blenderbot"),klt.forEach(t),wlo=r($k," \u2014 "),uB=n($k,"A",{href:!0});var Slt=s(uB);Alo=r(Slt,"BlenderbotTokenizer"),Slt.forEach(t),Llo=r($k," or "),bB=n($k,"A",{href:!0});var Rlt=s(bB);ylo=r(Rlt,"BlenderbotTokenizerFast"),Rlt.forEach(t),xlo=r($k," (Blenderbot model)"),$k.forEach(t),$lo=i(S),ah=n(S,"LI",{});var Eye=s(ah);gle=n(Eye,"STRONG",{});var Plt=s(gle);klo=r(Plt,"blenderbot-small"),Plt.forEach(t),Slo=r(Eye," \u2014 "),vB=n(Eye,"A",{href:!0});var Blt=s(vB);Rlo=r(Blt,"BlenderbotSmallTokenizer"),Blt.forEach(t),Plo=r(Eye," (BlenderbotSmall model)"),Eye.forEach(t),Blo=i(S),nh=n(S,"LI",{});var Cye=s(nh);hle=n(Cye,"STRONG",{});var Ilt=s(hle);Ilo=r(Ilt,"bloom"),Ilt.forEach(t),Nlo=r(Cye," \u2014 "),FB=n(Cye,"A",{href:!0});var Nlt=s(FB);qlo=r(Nlt,"BloomTokenizerFast"),Nlt.forEach(t),jlo=r(Cye," (BLOOM model)"),Cye.forEach(t),Dlo=i(S),sh=n(S,"LI",{});var wye=s(sh);ple=n(wye,"STRONG",{});var qlt=s(ple);Glo=r(qlt,"byt5"),qlt.forEach(t),Olo=r(wye," \u2014 "),TB=n(wye,"A",{href:!0});var jlt=s(TB);Vlo=r(jlt,"ByT5Tokenizer"),jlt.forEach(t),Xlo=r(wye," (ByT5 model)"),wye.forEach(t),zlo=i(S),Qn=n(S,"LI",{});var kk=s(Qn);_le=n(kk,"STRONG",{});var Dlt=s(_le);Qlo=r(Dlt,"camembert"),Dlt.forEach(t),Wlo=r(kk," \u2014 "),MB=n(kk,"A",{href:!0});var Glt=s(MB);Hlo=r(Glt,"CamembertTokenizer"),Glt.forEach(t),Ulo=r(kk," or "),EB=n(kk,"A",{href:!0});var Olt=s(EB);Jlo=r(Olt,"CamembertTokenizerFast"),Olt.forEach(t),Ylo=r(kk," (CamemBERT model)"),kk.forEach(t),Klo=i(S),lh=n(S,"LI",{});var Aye=s(lh);ule=n(Aye,"STRONG",{});var Vlt=s(ule);Zlo=r(Vlt,"canine"),Vlt.forEach(t),eio=r(Aye," \u2014 "),CB=n(Aye,"A",{href:!0});var Xlt=s(CB);oio=r(Xlt,"CanineTokenizer"),Xlt.forEach(t),rio=r(Aye," (CANINE model)"),Aye.forEach(t),tio=i(S),Wn=n(S,"LI",{});var Sk=s(Wn);ble=n(Sk,"STRONG",{});var zlt=s(ble);aio=r(zlt,"clip"),zlt.forEach(t),nio=r(Sk," \u2014 "),wB=n(Sk,"A",{href:!0});var Qlt=s(wB);sio=r(Qlt,"CLIPTokenizer"),Qlt.forEach(t),lio=r(Sk," or "),AB=n(Sk,"A",{href:!0});var Wlt=s(AB);iio=r(Wlt,"CLIPTokenizerFast"),Wlt.forEach(t),dio=r(Sk," (CLIP model)"),Sk.forEach(t),cio=i(S),Hn=n(S,"LI",{});var Rk=s(Hn);vle=n(Rk,"STRONG",{});var Hlt=s(vle);fio=r(Hlt,"codegen"),Hlt.forEach(t),mio=r(Rk," \u2014 "),LB=n(Rk,"A",{href:!0});var Ult=s(LB);gio=r(Ult,"CodeGenTokenizer"),Ult.forEach(t),hio=r(Rk," or "),yB=n(Rk,"A",{href:!0});var Jlt=s(yB);pio=r(Jlt,"CodeGenTokenizerFast"),Jlt.forEach(t),_io=r(Rk," (CodeGen model)"),Rk.forEach(t),uio=i(S),Un=n(S,"LI",{});var Pk=s(Un);Fle=n(Pk,"STRONG",{});var Ylt=s(Fle);bio=r(Ylt,"convbert"),Ylt.forEach(t),vio=r(Pk," \u2014 "),xB=n(Pk,"A",{href:!0});var Klt=s(xB);Fio=r(Klt,"ConvBertTokenizer"),Klt.forEach(t),Tio=r(Pk," or "),$B=n(Pk,"A",{href:!0});var Zlt=s($B);Mio=r(Zlt,"ConvBertTokenizerFast"),Zlt.forEach(t),Eio=r(Pk," (ConvBERT model)"),Pk.forEach(t),Cio=i(S),Jn=n(S,"LI",{});var Bk=s(Jn);Tle=n(Bk,"STRONG",{});var eit=s(Tle);wio=r(eit,"cpm"),eit.forEach(t),Aio=r(Bk," \u2014 "),kB=n(Bk,"A",{href:!0});var oit=s(kB);Lio=r(oit,"CpmTokenizer"),oit.forEach(t),yio=r(Bk," or "),SB=n(Bk,"A",{href:!0});var rit=s(SB);xio=r(rit,"CpmTokenizerFast"),rit.forEach(t),$io=r(Bk," (CPM model)"),Bk.forEach(t),kio=i(S),ih=n(S,"LI",{});var Lye=s(ih);Mle=n(Lye,"STRONG",{});var tit=s(Mle);Sio=r(tit,"ctrl"),tit.forEach(t),Rio=r(Lye," \u2014 "),RB=n(Lye,"A",{href:!0});var ait=s(RB);Pio=r(ait,"CTRLTokenizer"),ait.forEach(t),Bio=r(Lye," (CTRL model)"),Lye.forEach(t),Iio=i(S),Yn=n(S,"LI",{});var Ik=s(Yn);Ele=n(Ik,"STRONG",{});var nit=s(Ele);Nio=r(nit,"data2vec-text"),nit.forEach(t),qio=r(Ik," \u2014 "),PB=n(Ik,"A",{href:!0});var sit=s(PB);jio=r(sit,"RobertaTokenizer"),sit.forEach(t),Dio=r(Ik," or "),BB=n(Ik,"A",{href:!0});var lit=s(BB);Gio=r(lit,"RobertaTokenizerFast"),lit.forEach(t),Oio=r(Ik," (Data2VecText model)"),Ik.forEach(t),Vio=i(S),Kn=n(S,"LI",{});var Nk=s(Kn);Cle=n(Nk,"STRONG",{});var iit=s(Cle);Xio=r(iit,"deberta"),iit.forEach(t),zio=r(Nk," \u2014 "),IB=n(Nk,"A",{href:!0});var dit=s(IB);Qio=r(dit,"DebertaTokenizer"),dit.forEach(t),Wio=r(Nk," or "),NB=n(Nk,"A",{href:!0});var cit=s(NB);Hio=r(cit,"DebertaTokenizerFast"),cit.forEach(t),Uio=r(Nk," (DeBERTa model)"),Nk.forEach(t),Jio=i(S),Zn=n(S,"LI",{});var qk=s(Zn);wle=n(qk,"STRONG",{});var fit=s(wle);Yio=r(fit,"deberta-v2"),fit.forEach(t),Kio=r(qk," \u2014 "),qB=n(qk,"A",{href:!0});var mit=s(qB);Zio=r(mit,"DebertaV2Tokenizer"),mit.forEach(t),edo=r(qk," or "),jB=n(qk,"A",{href:!0});var git=s(jB);odo=r(git,"DebertaV2TokenizerFast"),git.forEach(t),rdo=r(qk," (DeBERTa-v2 model)"),qk.forEach(t),tdo=i(S),es=n(S,"LI",{});var jk=s(es);Ale=n(jk,"STRONG",{});var hit=s(Ale);ado=r(hit,"distilbert"),hit.forEach(t),ndo=r(jk," \u2014 "),DB=n(jk,"A",{href:!0});var pit=s(DB);sdo=r(pit,"DistilBertTokenizer"),pit.forEach(t),ldo=r(jk," or "),GB=n(jk,"A",{href:!0});var _it=s(GB);ido=r(_it,"DistilBertTokenizerFast"),_it.forEach(t),ddo=r(jk," (DistilBERT model)"),jk.forEach(t),cdo=i(S),os=n(S,"LI",{});var Dk=s(os);Lle=n(Dk,"STRONG",{});var uit=s(Lle);fdo=r(uit,"dpr"),uit.forEach(t),mdo=r(Dk," \u2014 "),OB=n(Dk,"A",{href:!0});var bit=s(OB);gdo=r(bit,"DPRQuestionEncoderTokenizer"),bit.forEach(t),hdo=r(Dk," or "),VB=n(Dk,"A",{href:!0});var vit=s(VB);pdo=r(vit,"DPRQuestionEncoderTokenizerFast"),vit.forEach(t),_do=r(Dk," (DPR model)"),Dk.forEach(t),udo=i(S),rs=n(S,"LI",{});var Gk=s(rs);yle=n(Gk,"STRONG",{});var Fit=s(yle);bdo=r(Fit,"electra"),Fit.forEach(t),vdo=r(Gk," \u2014 "),XB=n(Gk,"A",{href:!0});var Tit=s(XB);Fdo=r(Tit,"ElectraTokenizer"),Tit.forEach(t),Tdo=r(Gk," or "),zB=n(Gk,"A",{href:!0});var Mit=s(zB);Mdo=r(Mit,"ElectraTokenizerFast"),Mit.forEach(t),Edo=r(Gk," (ELECTRA model)"),Gk.forEach(t),Cdo=i(S),dh=n(S,"LI",{});var yye=s(dh);xle=n(yye,"STRONG",{});var Eit=s(xle);wdo=r(Eit,"flaubert"),Eit.forEach(t),Ado=r(yye," \u2014 "),QB=n(yye,"A",{href:!0});var Cit=s(QB);Ldo=r(Cit,"FlaubertTokenizer"),Cit.forEach(t),ydo=r(yye," (FlauBERT model)"),yye.forEach(t),xdo=i(S),ts=n(S,"LI",{});var Ok=s(ts);$le=n(Ok,"STRONG",{});var wit=s($le);$do=r(wit,"fnet"),wit.forEach(t),kdo=r(Ok," \u2014 "),WB=n(Ok,"A",{href:!0});var Ait=s(WB);Sdo=r(Ait,"FNetTokenizer"),Ait.forEach(t),Rdo=r(Ok," or "),HB=n(Ok,"A",{href:!0});var Lit=s(HB);Pdo=r(Lit,"FNetTokenizerFast"),Lit.forEach(t),Bdo=r(Ok," (FNet model)"),Ok.forEach(t),Ido=i(S),ch=n(S,"LI",{});var xye=s(ch);kle=n(xye,"STRONG",{});var yit=s(kle);Ndo=r(yit,"fsmt"),yit.forEach(t),qdo=r(xye," \u2014 "),UB=n(xye,"A",{href:!0});var xit=s(UB);jdo=r(xit,"FSMTTokenizer"),xit.forEach(t),Ddo=r(xye," (FairSeq Machine-Translation model)"),xye.forEach(t),Gdo=i(S),as=n(S,"LI",{});var Vk=s(as);Sle=n(Vk,"STRONG",{});var $it=s(Sle);Odo=r($it,"funnel"),$it.forEach(t),Vdo=r(Vk," \u2014 "),JB=n(Vk,"A",{href:!0});var kit=s(JB);Xdo=r(kit,"FunnelTokenizer"),kit.forEach(t),zdo=r(Vk," or "),YB=n(Vk,"A",{href:!0});var Sit=s(YB);Qdo=r(Sit,"FunnelTokenizerFast"),Sit.forEach(t),Wdo=r(Vk," (Funnel Transformer model)"),Vk.forEach(t),Hdo=i(S),ns=n(S,"LI",{});var Xk=s(ns);Rle=n(Xk,"STRONG",{});var Rit=s(Rle);Udo=r(Rit,"gpt2"),Rit.forEach(t),Jdo=r(Xk," \u2014 "),KB=n(Xk,"A",{href:!0});var Pit=s(KB);Ydo=r(Pit,"GPT2Tokenizer"),Pit.forEach(t),Kdo=r(Xk," or "),ZB=n(Xk,"A",{href:!0});var Bit=s(ZB);Zdo=r(Bit,"GPT2TokenizerFast"),Bit.forEach(t),eco=r(Xk," (OpenAI GPT-2 model)"),Xk.forEach(t),oco=i(S),ss=n(S,"LI",{});var zk=s(ss);Ple=n(zk,"STRONG",{});var Iit=s(Ple);rco=r(Iit,"gpt_neo"),Iit.forEach(t),tco=r(zk," \u2014 "),eI=n(zk,"A",{href:!0});var Nit=s(eI);aco=r(Nit,"GPT2Tokenizer"),Nit.forEach(t),nco=r(zk," or "),oI=n(zk,"A",{href:!0});var qit=s(oI);sco=r(qit,"GPT2TokenizerFast"),qit.forEach(t),lco=r(zk," (GPT Neo model)"),zk.forEach(t),ico=i(S),fh=n(S,"LI",{});var $ye=s(fh);Ble=n($ye,"STRONG",{});var jit=s(Ble);dco=r(jit,"gpt_neox"),jit.forEach(t),cco=r($ye," \u2014 "),rI=n($ye,"A",{href:!0});var Dit=s(rI);fco=r(Dit,"GPTNeoXTokenizerFast"),Dit.forEach(t),mco=r($ye," (GPT NeoX model)"),$ye.forEach(t),gco=i(S),ls=n(S,"LI",{});var Qk=s(ls);Ile=n(Qk,"STRONG",{});var Git=s(Ile);hco=r(Git,"gptj"),Git.forEach(t),pco=r(Qk," \u2014 "),tI=n(Qk,"A",{href:!0});var Oit=s(tI);_co=r(Oit,"GPT2Tokenizer"),Oit.forEach(t),uco=r(Qk," or "),aI=n(Qk,"A",{href:!0});var Vit=s(aI);bco=r(Vit,"GPT2TokenizerFast"),Vit.forEach(t),vco=r(Qk," (GPT-J model)"),Qk.forEach(t),Fco=i(S),is=n(S,"LI",{});var Wk=s(is);Nle=n(Wk,"STRONG",{});var Xit=s(Nle);Tco=r(Xit,"groupvit"),Xit.forEach(t),Mco=r(Wk," \u2014 "),nI=n(Wk,"A",{href:!0});var zit=s(nI);Eco=r(zit,"CLIPTokenizer"),zit.forEach(t),Cco=r(Wk," or "),sI=n(Wk,"A",{href:!0});var Qit=s(sI);wco=r(Qit,"CLIPTokenizerFast"),Qit.forEach(t),Aco=r(Wk," (GroupViT model)"),Wk.forEach(t),Lco=i(S),ds=n(S,"LI",{});var Hk=s(ds);qle=n(Hk,"STRONG",{});var Wit=s(qle);yco=r(Wit,"herbert"),Wit.forEach(t),xco=r(Hk," \u2014 "),lI=n(Hk,"A",{href:!0});var Hit=s(lI);$co=r(Hit,"HerbertTokenizer"),Hit.forEach(t),kco=r(Hk," or "),iI=n(Hk,"A",{href:!0});var Uit=s(iI);Sco=r(Uit,"HerbertTokenizerFast"),Uit.forEach(t),Rco=r(Hk," (HerBERT model)"),Hk.forEach(t),Pco=i(S),mh=n(S,"LI",{});var kye=s(mh);jle=n(kye,"STRONG",{});var Jit=s(jle);Bco=r(Jit,"hubert"),Jit.forEach(t),Ico=r(kye," \u2014 "),dI=n(kye,"A",{href:!0});var Yit=s(dI);Nco=r(Yit,"Wav2Vec2CTCTokenizer"),Yit.forEach(t),qco=r(kye," (Hubert model)"),kye.forEach(t),jco=i(S),cs=n(S,"LI",{});var Uk=s(cs);Dle=n(Uk,"STRONG",{});var Kit=s(Dle);Dco=r(Kit,"ibert"),Kit.forEach(t),Gco=r(Uk," \u2014 "),cI=n(Uk,"A",{href:!0});var Zit=s(cI);Oco=r(Zit,"RobertaTokenizer"),Zit.forEach(t),Vco=r(Uk," or "),fI=n(Uk,"A",{href:!0});var edt=s(fI);Xco=r(edt,"RobertaTokenizerFast"),edt.forEach(t),zco=r(Uk," (I-BERT model)"),Uk.forEach(t),Qco=i(S),fs=n(S,"LI",{});var Jk=s(fs);Gle=n(Jk,"STRONG",{});var odt=s(Gle);Wco=r(odt,"layoutlm"),odt.forEach(t),Hco=r(Jk," \u2014 "),mI=n(Jk,"A",{href:!0});var rdt=s(mI);Uco=r(rdt,"LayoutLMTokenizer"),rdt.forEach(t),Jco=r(Jk," or "),gI=n(Jk,"A",{href:!0});var tdt=s(gI);Yco=r(tdt,"LayoutLMTokenizerFast"),tdt.forEach(t),Kco=r(Jk," (LayoutLM model)"),Jk.forEach(t),Zco=i(S),ms=n(S,"LI",{});var Yk=s(ms);Ole=n(Yk,"STRONG",{});var adt=s(Ole);efo=r(adt,"layoutlmv2"),adt.forEach(t),ofo=r(Yk," \u2014 "),hI=n(Yk,"A",{href:!0});var ndt=s(hI);rfo=r(ndt,"LayoutLMv2Tokenizer"),ndt.forEach(t),tfo=r(Yk," or "),pI=n(Yk,"A",{href:!0});var sdt=s(pI);afo=r(sdt,"LayoutLMv2TokenizerFast"),sdt.forEach(t),nfo=r(Yk," (LayoutLMv2 model)"),Yk.forEach(t),sfo=i(S),gs=n(S,"LI",{});var Kk=s(gs);Vle=n(Kk,"STRONG",{});var ldt=s(Vle);lfo=r(ldt,"layoutlmv3"),ldt.forEach(t),ifo=r(Kk," \u2014 "),_I=n(Kk,"A",{href:!0});var idt=s(_I);dfo=r(idt,"LayoutLMv3Tokenizer"),idt.forEach(t),cfo=r(Kk," or "),uI=n(Kk,"A",{href:!0});var ddt=s(uI);ffo=r(ddt,"LayoutLMv3TokenizerFast"),ddt.forEach(t),mfo=r(Kk," (LayoutLMv3 model)"),Kk.forEach(t),gfo=i(S),hs=n(S,"LI",{});var Zk=s(hs);Xle=n(Zk,"STRONG",{});var cdt=s(Xle);hfo=r(cdt,"layoutxlm"),cdt.forEach(t),pfo=r(Zk," \u2014 "),bI=n(Zk,"A",{href:!0});var fdt=s(bI);_fo=r(fdt,"LayoutXLMTokenizer"),fdt.forEach(t),ufo=r(Zk," or "),vI=n(Zk,"A",{href:!0});var mdt=s(vI);bfo=r(mdt,"LayoutXLMTokenizerFast"),mdt.forEach(t),vfo=r(Zk," (LayoutXLM model)"),Zk.forEach(t),Ffo=i(S),ps=n(S,"LI",{});var eS=s(ps);zle=n(eS,"STRONG",{});var gdt=s(zle);Tfo=r(gdt,"led"),gdt.forEach(t),Mfo=r(eS," \u2014 "),FI=n(eS,"A",{href:!0});var hdt=s(FI);Efo=r(hdt,"LEDTokenizer"),hdt.forEach(t),Cfo=r(eS," or "),TI=n(eS,"A",{href:!0});var pdt=s(TI);wfo=r(pdt,"LEDTokenizerFast"),pdt.forEach(t),Afo=r(eS," (LED model)"),eS.forEach(t),Lfo=i(S),_s=n(S,"LI",{});var oS=s(_s);Qle=n(oS,"STRONG",{});var _dt=s(Qle);yfo=r(_dt,"longformer"),_dt.forEach(t),xfo=r(oS," \u2014 "),MI=n(oS,"A",{href:!0});var udt=s(MI);$fo=r(udt,"LongformerTokenizer"),udt.forEach(t),kfo=r(oS," or "),EI=n(oS,"A",{href:!0});var bdt=s(EI);Sfo=r(bdt,"LongformerTokenizerFast"),bdt.forEach(t),Rfo=r(oS," (Longformer model)"),oS.forEach(t),Pfo=i(S),us=n(S,"LI",{});var rS=s(us);Wle=n(rS,"STRONG",{});var vdt=s(Wle);Bfo=r(vdt,"longt5"),vdt.forEach(t),Ifo=r(rS," \u2014 "),CI=n(rS,"A",{href:!0});var Fdt=s(CI);Nfo=r(Fdt,"T5Tokenizer"),Fdt.forEach(t),qfo=r(rS," or "),wI=n(rS,"A",{href:!0});var Tdt=s(wI);jfo=r(Tdt,"T5TokenizerFast"),Tdt.forEach(t),Dfo=r(rS," (LongT5 model)"),rS.forEach(t),Gfo=i(S),gh=n(S,"LI",{});var Sye=s(gh);Hle=n(Sye,"STRONG",{});var Mdt=s(Hle);Ofo=r(Mdt,"luke"),Mdt.forEach(t),Vfo=r(Sye," \u2014 "),AI=n(Sye,"A",{href:!0});var Edt=s(AI);Xfo=r(Edt,"LukeTokenizer"),Edt.forEach(t),zfo=r(Sye," (LUKE model)"),Sye.forEach(t),Qfo=i(S),bs=n(S,"LI",{});var tS=s(bs);Ule=n(tS,"STRONG",{});var Cdt=s(Ule);Wfo=r(Cdt,"lxmert"),Cdt.forEach(t),Hfo=r(tS," \u2014 "),LI=n(tS,"A",{href:!0});var wdt=s(LI);Ufo=r(wdt,"LxmertTokenizer"),wdt.forEach(t),Jfo=r(tS," or "),yI=n(tS,"A",{href:!0});var Adt=s(yI);Yfo=r(Adt,"LxmertTokenizerFast"),Adt.forEach(t),Kfo=r(tS," (LXMERT model)"),tS.forEach(t),Zfo=i(S),hh=n(S,"LI",{});var Rye=s(hh);Jle=n(Rye,"STRONG",{});var Ldt=s(Jle);emo=r(Ldt,"m2m_100"),Ldt.forEach(t),omo=r(Rye," \u2014 "),xI=n(Rye,"A",{href:!0});var ydt=s(xI);rmo=r(ydt,"M2M100Tokenizer"),ydt.forEach(t),tmo=r(Rye," (M2M100 model)"),Rye.forEach(t),amo=i(S),ph=n(S,"LI",{});var Pye=s(ph);Yle=n(Pye,"STRONG",{});var xdt=s(Yle);nmo=r(xdt,"marian"),xdt.forEach(t),smo=r(Pye," \u2014 "),$I=n(Pye,"A",{href:!0});var $dt=s($I);lmo=r($dt,"MarianTokenizer"),$dt.forEach(t),imo=r(Pye," (Marian model)"),Pye.forEach(t),dmo=i(S),vs=n(S,"LI",{});var aS=s(vs);Kle=n(aS,"STRONG",{});var kdt=s(Kle);cmo=r(kdt,"mbart"),kdt.forEach(t),fmo=r(aS," \u2014 "),kI=n(aS,"A",{href:!0});var Sdt=s(kI);mmo=r(Sdt,"MBartTokenizer"),Sdt.forEach(t),gmo=r(aS," or "),SI=n(aS,"A",{href:!0});var Rdt=s(SI);hmo=r(Rdt,"MBartTokenizerFast"),Rdt.forEach(t),pmo=r(aS," (mBART model)"),aS.forEach(t),_mo=i(S),Fs=n(S,"LI",{});var nS=s(Fs);Zle=n(nS,"STRONG",{});var Pdt=s(Zle);umo=r(Pdt,"mbart50"),Pdt.forEach(t),bmo=r(nS," \u2014 "),RI=n(nS,"A",{href:!0});var Bdt=s(RI);vmo=r(Bdt,"MBart50Tokenizer"),Bdt.forEach(t),Fmo=r(nS," or "),PI=n(nS,"A",{href:!0});var Idt=s(PI);Tmo=r(Idt,"MBart50TokenizerFast"),Idt.forEach(t),Mmo=r(nS," (mBART-50 model)"),nS.forEach(t),Emo=i(S),Ts=n(S,"LI",{});var sS=s(Ts);eie=n(sS,"STRONG",{});var Ndt=s(eie);Cmo=r(Ndt,"megatron-bert"),Ndt.forEach(t),wmo=r(sS," \u2014 "),BI=n(sS,"A",{href:!0});var qdt=s(BI);Amo=r(qdt,"BertTokenizer"),qdt.forEach(t),Lmo=r(sS," or "),II=n(sS,"A",{href:!0});var jdt=s(II);ymo=r(jdt,"BertTokenizerFast"),jdt.forEach(t),xmo=r(sS," (Megatron-BERT model)"),sS.forEach(t),$mo=i(S),_h=n(S,"LI",{});var Bye=s(_h);oie=n(Bye,"STRONG",{});var Ddt=s(oie);kmo=r(Ddt,"mluke"),Ddt.forEach(t),Smo=r(Bye," \u2014 "),NI=n(Bye,"A",{href:!0});var Gdt=s(NI);Rmo=r(Gdt,"MLukeTokenizer"),Gdt.forEach(t),Pmo=r(Bye," (mLUKE model)"),Bye.forEach(t),Bmo=i(S),Ms=n(S,"LI",{});var lS=s(Ms);rie=n(lS,"STRONG",{});var Odt=s(rie);Imo=r(Odt,"mobilebert"),Odt.forEach(t),Nmo=r(lS," \u2014 "),qI=n(lS,"A",{href:!0});var Vdt=s(qI);qmo=r(Vdt,"MobileBertTokenizer"),Vdt.forEach(t),jmo=r(lS," or "),jI=n(lS,"A",{href:!0});var Xdt=s(jI);Dmo=r(Xdt,"MobileBertTokenizerFast"),Xdt.forEach(t),Gmo=r(lS," (MobileBERT model)"),lS.forEach(t),Omo=i(S),Es=n(S,"LI",{});var iS=s(Es);tie=n(iS,"STRONG",{});var zdt=s(tie);Vmo=r(zdt,"mpnet"),zdt.forEach(t),Xmo=r(iS," \u2014 "),DI=n(iS,"A",{href:!0});var Qdt=s(DI);zmo=r(Qdt,"MPNetTokenizer"),Qdt.forEach(t),Qmo=r(iS," or "),GI=n(iS,"A",{href:!0});var Wdt=s(GI);Wmo=r(Wdt,"MPNetTokenizerFast"),Wdt.forEach(t),Hmo=r(iS," (MPNet model)"),iS.forEach(t),Umo=i(S),Cs=n(S,"LI",{});var dS=s(Cs);aie=n(dS,"STRONG",{});var Hdt=s(aie);Jmo=r(Hdt,"mt5"),Hdt.forEach(t),Ymo=r(dS," \u2014 "),OI=n(dS,"A",{href:!0});var Udt=s(OI);Kmo=r(Udt,"MT5Tokenizer"),Udt.forEach(t),Zmo=r(dS," or "),VI=n(dS,"A",{href:!0});var Jdt=s(VI);ego=r(Jdt,"MT5TokenizerFast"),Jdt.forEach(t),ogo=r(dS," (MT5 model)"),dS.forEach(t),rgo=i(S),ws=n(S,"LI",{});var cS=s(ws);nie=n(cS,"STRONG",{});var Ydt=s(nie);tgo=r(Ydt,"mvp"),Ydt.forEach(t),ago=r(cS," \u2014 "),XI=n(cS,"A",{href:!0});var Kdt=s(XI);ngo=r(Kdt,"MvpTokenizer"),Kdt.forEach(t),sgo=r(cS," or "),zI=n(cS,"A",{href:!0});var Zdt=s(zI);lgo=r(Zdt,"MvpTokenizerFast"),Zdt.forEach(t),igo=r(cS," (MVP model)"),cS.forEach(t),dgo=i(S),As=n(S,"LI",{});var fS=s(As);sie=n(fS,"STRONG",{});var ect=s(sie);cgo=r(ect,"nezha"),ect.forEach(t),fgo=r(fS," \u2014 "),QI=n(fS,"A",{href:!0});var oct=s(QI);mgo=r(oct,"BertTokenizer"),oct.forEach(t),ggo=r(fS," or "),WI=n(fS,"A",{href:!0});var rct=s(WI);hgo=r(rct,"BertTokenizerFast"),rct.forEach(t),pgo=r(fS," (Nezha model)"),fS.forEach(t),_go=i(S),Ls=n(S,"LI",{});var mS=s(Ls);lie=n(mS,"STRONG",{});var tct=s(lie);ugo=r(tct,"nystromformer"),tct.forEach(t),bgo=r(mS," \u2014 "),HI=n(mS,"A",{href:!0});var act=s(HI);vgo=r(act,"AlbertTokenizer"),act.forEach(t),Fgo=r(mS," or "),UI=n(mS,"A",{href:!0});var nct=s(UI);Tgo=r(nct,"AlbertTokenizerFast"),nct.forEach(t),Mgo=r(mS," (Nystr\xF6mformer model)"),mS.forEach(t),Ego=i(S),ys=n(S,"LI",{});var gS=s(ys);iie=n(gS,"STRONG",{});var sct=s(iie);Cgo=r(sct,"openai-gpt"),sct.forEach(t),wgo=r(gS," \u2014 "),JI=n(gS,"A",{href:!0});var lct=s(JI);Ago=r(lct,"OpenAIGPTTokenizer"),lct.forEach(t),Lgo=r(gS," or "),YI=n(gS,"A",{href:!0});var ict=s(YI);ygo=r(ict,"OpenAIGPTTokenizerFast"),ict.forEach(t),xgo=r(gS," (OpenAI GPT model)"),gS.forEach(t),$go=i(S),uh=n(S,"LI",{});var Iye=s(uh);die=n(Iye,"STRONG",{});var dct=s(die);kgo=r(dct,"opt"),dct.forEach(t),Sgo=r(Iye," \u2014 "),KI=n(Iye,"A",{href:!0});var cct=s(KI);Rgo=r(cct,"GPT2Tokenizer"),cct.forEach(t),Pgo=r(Iye," (OPT model)"),Iye.forEach(t),Bgo=i(S),xs=n(S,"LI",{});var hS=s(xs);cie=n(hS,"STRONG",{});var fct=s(cie);Igo=r(fct,"pegasus"),fct.forEach(t),Ngo=r(hS," \u2014 "),ZI=n(hS,"A",{href:!0});var mct=s(ZI);qgo=r(mct,"PegasusTokenizer"),mct.forEach(t),jgo=r(hS," or "),eN=n(hS,"A",{href:!0});var gct=s(eN);Dgo=r(gct,"PegasusTokenizerFast"),gct.forEach(t),Ggo=r(hS," (Pegasus model)"),hS.forEach(t),Ogo=i(S),bh=n(S,"LI",{});var Nye=s(bh);fie=n(Nye,"STRONG",{});var hct=s(fie);Vgo=r(hct,"perceiver"),hct.forEach(t),Xgo=r(Nye," \u2014 "),oN=n(Nye,"A",{href:!0});var pct=s(oN);zgo=r(pct,"PerceiverTokenizer"),pct.forEach(t),Qgo=r(Nye," (Perceiver model)"),Nye.forEach(t),Wgo=i(S),vh=n(S,"LI",{});var qye=s(vh);mie=n(qye,"STRONG",{});var _ct=s(mie);Hgo=r(_ct,"phobert"),_ct.forEach(t),Ugo=r(qye," \u2014 "),rN=n(qye,"A",{href:!0});var uct=s(rN);Jgo=r(uct,"PhobertTokenizer"),uct.forEach(t),Ygo=r(qye," (PhoBERT model)"),qye.forEach(t),Kgo=i(S),Fh=n(S,"LI",{});var jye=s(Fh);gie=n(jye,"STRONG",{});var bct=s(gie);Zgo=r(bct,"plbart"),bct.forEach(t),eho=r(jye," \u2014 "),tN=n(jye,"A",{href:!0});var vct=s(tN);oho=r(vct,"PLBartTokenizer"),vct.forEach(t),rho=r(jye," (PLBart model)"),jye.forEach(t),tho=i(S),Th=n(S,"LI",{});var Dye=s(Th);hie=n(Dye,"STRONG",{});var Fct=s(hie);aho=r(Fct,"prophetnet"),Fct.forEach(t),nho=r(Dye," \u2014 "),aN=n(Dye,"A",{href:!0});var Tct=s(aN);sho=r(Tct,"ProphetNetTokenizer"),Tct.forEach(t),lho=r(Dye," (ProphetNet model)"),Dye.forEach(t),iho=i(S),$s=n(S,"LI",{});var pS=s($s);pie=n(pS,"STRONG",{});var Mct=s(pie);dho=r(Mct,"qdqbert"),Mct.forEach(t),cho=r(pS," \u2014 "),nN=n(pS,"A",{href:!0});var Ect=s(nN);fho=r(Ect,"BertTokenizer"),Ect.forEach(t),mho=r(pS," or "),sN=n(pS,"A",{href:!0});var Cct=s(sN);gho=r(Cct,"BertTokenizerFast"),Cct.forEach(t),hho=r(pS," (QDQBert model)"),pS.forEach(t),pho=i(S),Mh=n(S,"LI",{});var Gye=s(Mh);_ie=n(Gye,"STRONG",{});var wct=s(_ie);_ho=r(wct,"rag"),wct.forEach(t),uho=r(Gye," \u2014 "),lN=n(Gye,"A",{href:!0});var Act=s(lN);bho=r(Act,"RagTokenizer"),Act.forEach(t),vho=r(Gye," (RAG model)"),Gye.forEach(t),Fho=i(S),ks=n(S,"LI",{});var _S=s(ks);uie=n(_S,"STRONG",{});var Lct=s(uie);Tho=r(Lct,"realm"),Lct.forEach(t),Mho=r(_S," \u2014 "),iN=n(_S,"A",{href:!0});var yct=s(iN);Eho=r(yct,"RealmTokenizer"),yct.forEach(t),Cho=r(_S," or "),dN=n(_S,"A",{href:!0});var xct=s(dN);who=r(xct,"RealmTokenizerFast"),xct.forEach(t),Aho=r(_S," (REALM model)"),_S.forEach(t),Lho=i(S),Ss=n(S,"LI",{});var uS=s(Ss);bie=n(uS,"STRONG",{});var $ct=s(bie);yho=r($ct,"reformer"),$ct.forEach(t),xho=r(uS," \u2014 "),cN=n(uS,"A",{href:!0});var kct=s(cN);$ho=r(kct,"ReformerTokenizer"),kct.forEach(t),kho=r(uS," or "),fN=n(uS,"A",{href:!0});var Sct=s(fN);Sho=r(Sct,"ReformerTokenizerFast"),Sct.forEach(t),Rho=r(uS," (Reformer model)"),uS.forEach(t),Pho=i(S),Rs=n(S,"LI",{});var bS=s(Rs);vie=n(bS,"STRONG",{});var Rct=s(vie);Bho=r(Rct,"rembert"),Rct.forEach(t),Iho=r(bS," \u2014 "),mN=n(bS,"A",{href:!0});var Pct=s(mN);Nho=r(Pct,"RemBertTokenizer"),Pct.forEach(t),qho=r(bS," or "),gN=n(bS,"A",{href:!0});var Bct=s(gN);jho=r(Bct,"RemBertTokenizerFast"),Bct.forEach(t),Dho=r(bS," (RemBERT model)"),bS.forEach(t),Gho=i(S),Ps=n(S,"LI",{});var vS=s(Ps);Fie=n(vS,"STRONG",{});var Ict=s(Fie);Oho=r(Ict,"retribert"),Ict.forEach(t),Vho=r(vS," \u2014 "),hN=n(vS,"A",{href:!0});var Nct=s(hN);Xho=r(Nct,"RetriBertTokenizer"),Nct.forEach(t),zho=r(vS," or "),pN=n(vS,"A",{href:!0});var qct=s(pN);Qho=r(qct,"RetriBertTokenizerFast"),qct.forEach(t),Who=r(vS," (RetriBERT model)"),vS.forEach(t),Hho=i(S),Bs=n(S,"LI",{});var FS=s(Bs);Tie=n(FS,"STRONG",{});var jct=s(Tie);Uho=r(jct,"roberta"),jct.forEach(t),Jho=r(FS," \u2014 "),_N=n(FS,"A",{href:!0});var Dct=s(_N);Yho=r(Dct,"RobertaTokenizer"),Dct.forEach(t),Kho=r(FS," or "),uN=n(FS,"A",{href:!0});var Gct=s(uN);Zho=r(Gct,"RobertaTokenizerFast"),Gct.forEach(t),epo=r(FS," (RoBERTa model)"),FS.forEach(t),opo=i(S),Is=n(S,"LI",{});var TS=s(Is);Mie=n(TS,"STRONG",{});var Oct=s(Mie);rpo=r(Oct,"roformer"),Oct.forEach(t),tpo=r(TS," \u2014 "),bN=n(TS,"A",{href:!0});var Vct=s(bN);apo=r(Vct,"RoFormerTokenizer"),Vct.forEach(t),npo=r(TS," or "),vN=n(TS,"A",{href:!0});var Xct=s(vN);spo=r(Xct,"RoFormerTokenizerFast"),Xct.forEach(t),lpo=r(TS," (RoFormer model)"),TS.forEach(t),ipo=i(S),Eh=n(S,"LI",{});var Oye=s(Eh);Eie=n(Oye,"STRONG",{});var zct=s(Eie);dpo=r(zct,"speech_to_text"),zct.forEach(t),cpo=r(Oye," \u2014 "),FN=n(Oye,"A",{href:!0});var Qct=s(FN);fpo=r(Qct,"Speech2TextTokenizer"),Qct.forEach(t),mpo=r(Oye," (Speech2Text model)"),Oye.forEach(t),gpo=i(S),Ch=n(S,"LI",{});var Vye=s(Ch);Cie=n(Vye,"STRONG",{});var Wct=s(Cie);hpo=r(Wct,"speech_to_text_2"),Wct.forEach(t),ppo=r(Vye," \u2014 "),TN=n(Vye,"A",{href:!0});var Hct=s(TN);_po=r(Hct,"Speech2Text2Tokenizer"),Hct.forEach(t),upo=r(Vye," (Speech2Text2 model)"),Vye.forEach(t),bpo=i(S),Ns=n(S,"LI",{});var MS=s(Ns);wie=n(MS,"STRONG",{});var Uct=s(wie);vpo=r(Uct,"splinter"),Uct.forEach(t),Fpo=r(MS," \u2014 "),MN=n(MS,"A",{href:!0});var Jct=s(MN);Tpo=r(Jct,"SplinterTokenizer"),Jct.forEach(t),Mpo=r(MS," or "),EN=n(MS,"A",{href:!0});var Yct=s(EN);Epo=r(Yct,"SplinterTokenizerFast"),Yct.forEach(t),Cpo=r(MS," (Splinter model)"),MS.forEach(t),wpo=i(S),qs=n(S,"LI",{});var ES=s(qs);Aie=n(ES,"STRONG",{});var Kct=s(Aie);Apo=r(Kct,"squeezebert"),Kct.forEach(t),Lpo=r(ES," \u2014 "),CN=n(ES,"A",{href:!0});var Zct=s(CN);ypo=r(Zct,"SqueezeBertTokenizer"),Zct.forEach(t),xpo=r(ES," or "),wN=n(ES,"A",{href:!0});var eft=s(wN);$po=r(eft,"SqueezeBertTokenizerFast"),eft.forEach(t),kpo=r(ES," (SqueezeBERT model)"),ES.forEach(t),Spo=i(S),js=n(S,"LI",{});var CS=s(js);Lie=n(CS,"STRONG",{});var oft=s(Lie);Rpo=r(oft,"t5"),oft.forEach(t),Ppo=r(CS," \u2014 "),AN=n(CS,"A",{href:!0});var rft=s(AN);Bpo=r(rft,"T5Tokenizer"),rft.forEach(t),Ipo=r(CS," or "),LN=n(CS,"A",{href:!0});var tft=s(LN);Npo=r(tft,"T5TokenizerFast"),tft.forEach(t),qpo=r(CS," (T5 model)"),CS.forEach(t),jpo=i(S),wh=n(S,"LI",{});var Xye=s(wh);yie=n(Xye,"STRONG",{});var aft=s(yie);Dpo=r(aft,"tapas"),aft.forEach(t),Gpo=r(Xye," \u2014 "),yN=n(Xye,"A",{href:!0});var nft=s(yN);Opo=r(nft,"TapasTokenizer"),nft.forEach(t),Vpo=r(Xye," (TAPAS model)"),Xye.forEach(t),Xpo=i(S),Ah=n(S,"LI",{});var zye=s(Ah);xie=n(zye,"STRONG",{});var sft=s(xie);zpo=r(sft,"tapex"),sft.forEach(t),Qpo=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var lft=s(xN);Wpo=r(lft,"TapexTokenizer"),lft.forEach(t),Hpo=r(zye," (TAPEX model)"),zye.forEach(t),Upo=i(S),Lh=n(S,"LI",{});var Qye=s(Lh);$ie=n(Qye,"STRONG",{});var ift=s($ie);Jpo=r(ift,"transfo-xl"),ift.forEach(t),Ypo=r(Qye," \u2014 "),$N=n(Qye,"A",{href:!0});var dft=s($N);Kpo=r(dft,"TransfoXLTokenizer"),dft.forEach(t),Zpo=r(Qye," (Transformer-XL model)"),Qye.forEach(t),e_o=i(S),Ds=n(S,"LI",{});var wS=s(Ds);kie=n(wS,"STRONG",{});var cft=s(kie);o_o=r(cft,"vilt"),cft.forEach(t),r_o=r(wS," \u2014 "),kN=n(wS,"A",{href:!0});var fft=s(kN);t_o=r(fft,"BertTokenizer"),fft.forEach(t),a_o=r(wS," or "),SN=n(wS,"A",{href:!0});var mft=s(SN);n_o=r(mft,"BertTokenizerFast"),mft.forEach(t),s_o=r(wS," (ViLT model)"),wS.forEach(t),l_o=i(S),Gs=n(S,"LI",{});var AS=s(Gs);Sie=n(AS,"STRONG",{});var gft=s(Sie);i_o=r(gft,"visual_bert"),gft.forEach(t),d_o=r(AS," \u2014 "),RN=n(AS,"A",{href:!0});var hft=s(RN);c_o=r(hft,"BertTokenizer"),hft.forEach(t),f_o=r(AS," or "),PN=n(AS,"A",{href:!0});var pft=s(PN);m_o=r(pft,"BertTokenizerFast"),pft.forEach(t),g_o=r(AS," (VisualBERT model)"),AS.forEach(t),h_o=i(S),yh=n(S,"LI",{});var Wye=s(yh);Rie=n(Wye,"STRONG",{});var _ft=s(Rie);p_o=r(_ft,"wav2vec2"),_ft.forEach(t),__o=r(Wye," \u2014 "),BN=n(Wye,"A",{href:!0});var uft=s(BN);u_o=r(uft,"Wav2Vec2CTCTokenizer"),uft.forEach(t),b_o=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),v_o=i(S),xh=n(S,"LI",{});var Hye=s(xh);Pie=n(Hye,"STRONG",{});var bft=s(Pie);F_o=r(bft,"wav2vec2-conformer"),bft.forEach(t),T_o=r(Hye," \u2014 "),IN=n(Hye,"A",{href:!0});var vft=s(IN);M_o=r(vft,"Wav2Vec2CTCTokenizer"),vft.forEach(t),E_o=r(Hye," (Wav2Vec2-Conformer model)"),Hye.forEach(t),C_o=i(S),$h=n(S,"LI",{});var Uye=s($h);Bie=n(Uye,"STRONG",{});var Fft=s(Bie);w_o=r(Fft,"wav2vec2_phoneme"),Fft.forEach(t),A_o=r(Uye," \u2014 "),NN=n(Uye,"A",{href:!0});var Tft=s(NN);L_o=r(Tft,"Wav2Vec2PhonemeCTCTokenizer"),Tft.forEach(t),y_o=r(Uye," (Wav2Vec2Phoneme model)"),Uye.forEach(t),x_o=i(S),Os=n(S,"LI",{});var LS=s(Os);Iie=n(LS,"STRONG",{});var Mft=s(Iie);$_o=r(Mft,"xglm"),Mft.forEach(t),k_o=r(LS," \u2014 "),qN=n(LS,"A",{href:!0});var Eft=s(qN);S_o=r(Eft,"XGLMTokenizer"),Eft.forEach(t),R_o=r(LS," or "),jN=n(LS,"A",{href:!0});var Cft=s(jN);P_o=r(Cft,"XGLMTokenizerFast"),Cft.forEach(t),B_o=r(LS," (XGLM model)"),LS.forEach(t),I_o=i(S),kh=n(S,"LI",{});var Jye=s(kh);Nie=n(Jye,"STRONG",{});var wft=s(Nie);N_o=r(wft,"xlm"),wft.forEach(t),q_o=r(Jye," \u2014 "),DN=n(Jye,"A",{href:!0});var Aft=s(DN);j_o=r(Aft,"XLMTokenizer"),Aft.forEach(t),D_o=r(Jye," (XLM model)"),Jye.forEach(t),G_o=i(S),Sh=n(S,"LI",{});var Yye=s(Sh);qie=n(Yye,"STRONG",{});var Lft=s(qie);O_o=r(Lft,"xlm-prophetnet"),Lft.forEach(t),V_o=r(Yye," \u2014 "),GN=n(Yye,"A",{href:!0});var yft=s(GN);X_o=r(yft,"XLMProphetNetTokenizer"),yft.forEach(t),z_o=r(Yye," (XLM-ProphetNet model)"),Yye.forEach(t),Q_o=i(S),Vs=n(S,"LI",{});var yS=s(Vs);jie=n(yS,"STRONG",{});var xft=s(jie);W_o=r(xft,"xlm-roberta"),xft.forEach(t),H_o=r(yS," \u2014 "),ON=n(yS,"A",{href:!0});var $ft=s(ON);U_o=r($ft,"XLMRobertaTokenizer"),$ft.forEach(t),J_o=r(yS," or "),VN=n(yS,"A",{href:!0});var kft=s(VN);Y_o=r(kft,"XLMRobertaTokenizerFast"),kft.forEach(t),K_o=r(yS," (XLM-RoBERTa model)"),yS.forEach(t),Z_o=i(S),Xs=n(S,"LI",{});var xS=s(Xs);Die=n(xS,"STRONG",{});var Sft=s(Die);euo=r(Sft,"xlm-roberta-xl"),Sft.forEach(t),ouo=r(xS," \u2014 "),XN=n(xS,"A",{href:!0});var Rft=s(XN);ruo=r(Rft,"RobertaTokenizer"),Rft.forEach(t),tuo=r(xS," or "),zN=n(xS,"A",{href:!0});var Pft=s(zN);auo=r(Pft,"RobertaTokenizerFast"),Pft.forEach(t),nuo=r(xS," (XLM-RoBERTa-XL model)"),xS.forEach(t),suo=i(S),zs=n(S,"LI",{});var $S=s(zs);Gie=n($S,"STRONG",{});var Bft=s(Gie);luo=r(Bft,"xlnet"),Bft.forEach(t),iuo=r($S," \u2014 "),QN=n($S,"A",{href:!0});var Ift=s(QN);duo=r(Ift,"XLNetTokenizer"),Ift.forEach(t),cuo=r($S," or "),WN=n($S,"A",{href:!0});var Nft=s(WN);fuo=r(Nft,"XLNetTokenizerFast"),Nft.forEach(t),muo=r($S," (XLNet model)"),$S.forEach(t),guo=i(S),Qs=n(S,"LI",{});var kS=s(Qs);Oie=n(kS,"STRONG",{});var qft=s(Oie);huo=r(qft,"yoso"),qft.forEach(t),puo=r(kS," \u2014 "),HN=n(kS,"A",{href:!0});var jft=s(HN);_uo=r(jft,"AlbertTokenizer"),jft.forEach(t),uuo=r(kS," or "),UN=n(kS,"A",{href:!0});var Dft=s(UN);buo=r(Dft,"AlbertTokenizerFast"),Dft.forEach(t),vuo=r(kS," (YOSO model)"),kS.forEach(t),S.forEach(t),Fuo=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),Tuo=i(Ks),Ph=n(Ks,"DIV",{class:!0});var pQe=s(Ph);T(vL.$$.fragment,pQe),Muo=i(pQe),Vie=n(pQe,"P",{});var Gft=s(Vie);Euo=r(Gft,"Register a new tokenizer in this mapping."),Gft.forEach(t),pQe.forEach(t),Ks.forEach(t),hXe=i(f),qi=n(f,"H2",{class:!0});var _Qe=s(qi);Bh=n(_Qe,"A",{id:!0,class:!0,href:!0});var Oft=s(Bh);Xie=n(Oft,"SPAN",{});var Vft=s(Xie);T(FL.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),Cuo=i(_Qe),zie=n(_Qe,"SPAN",{});var Xft=s(zie);wuo=r(Xft,"AutoFeatureExtractor"),Xft.forEach(t),_Qe.forEach(t),pXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(TL.$$.fragment,el),Auo=i(el),ML=n(el,"P",{});var uQe=s(ML);Luo=r(uQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JN=n(uQe,"A",{href:!0});var zft=s(JN);yuo=r(zft,"AutoFeatureExtractor.from_pretrained()"),zft.forEach(t),xuo=r(uQe," class method."),uQe.forEach(t),$uo=i(el),EL=n(el,"P",{});var bQe=s(EL);kuo=r(bQe,"This class cannot be instantiated directly using "),Qie=n(bQe,"CODE",{});var Qft=s(Qie);Suo=r(Qft,"__init__()"),Qft.forEach(t),Ruo=r(bQe," (throws an error)."),bQe.forEach(t),Puo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(CL.$$.fragment,na),Buo=i(na),Wie=n(na,"P",{});var Wft=s(Wie);Iuo=r(Wft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wft.forEach(t),Nuo=i(na),Ba=n(na,"P",{});var d6=s(Ba);quo=r(d6,"The feature extractor class to instantiate is selected based on the "),Hie=n(d6,"CODE",{});var Hft=s(Hie);juo=r(Hft,"model_type"),Hft.forEach(t),Duo=r(d6,` property of the config object
(either passed as an argument or loaded from `),Uie=n(d6,"CODE",{});var Uft=s(Uie);Guo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),Ouo=r(d6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jie=n(d6,"CODE",{});var Jft=s(Jie);Vuo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),Xuo=r(d6,":"),d6.forEach(t),zuo=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var Kye=s(Ih);Yie=n(Kye,"STRONG",{});var Yft=s(Yie);Quo=r(Yft,"beit"),Yft.forEach(t),Wuo=r(Kye," \u2014 "),YN=n(Kye,"A",{href:!0});var Kft=s(YN);Huo=r(Kft,"BeitFeatureExtractor"),Kft.forEach(t),Uuo=r(Kye," (BEiT model)"),Kye.forEach(t),Juo=i(K),Nh=n(K,"LI",{});var Zye=s(Nh);Kie=n(Zye,"STRONG",{});var Zft=s(Kie);Yuo=r(Zft,"clip"),Zft.forEach(t),Kuo=r(Zye," \u2014 "),KN=n(Zye,"A",{href:!0});var emt=s(KN);Zuo=r(emt,"CLIPFeatureExtractor"),emt.forEach(t),e2o=r(Zye," (CLIP model)"),Zye.forEach(t),o2o=i(K),qh=n(K,"LI",{});var e9e=s(qh);Zie=n(e9e,"STRONG",{});var omt=s(Zie);r2o=r(omt,"convnext"),omt.forEach(t),t2o=r(e9e," \u2014 "),ZN=n(e9e,"A",{href:!0});var rmt=s(ZN);a2o=r(rmt,"ConvNextFeatureExtractor"),rmt.forEach(t),n2o=r(e9e," (ConvNeXT model)"),e9e.forEach(t),s2o=i(K),jh=n(K,"LI",{});var o9e=s(jh);ede=n(o9e,"STRONG",{});var tmt=s(ede);l2o=r(tmt,"cvt"),tmt.forEach(t),i2o=r(o9e," \u2014 "),eq=n(o9e,"A",{href:!0});var amt=s(eq);d2o=r(amt,"ConvNextFeatureExtractor"),amt.forEach(t),c2o=r(o9e," (CvT model)"),o9e.forEach(t),f2o=i(K),Dh=n(K,"LI",{});var r9e=s(Dh);ode=n(r9e,"STRONG",{});var nmt=s(ode);m2o=r(nmt,"data2vec-audio"),nmt.forEach(t),g2o=r(r9e," \u2014 "),oq=n(r9e,"A",{href:!0});var smt=s(oq);h2o=r(smt,"Wav2Vec2FeatureExtractor"),smt.forEach(t),p2o=r(r9e," (Data2VecAudio model)"),r9e.forEach(t),_2o=i(K),Gh=n(K,"LI",{});var t9e=s(Gh);rde=n(t9e,"STRONG",{});var lmt=s(rde);u2o=r(lmt,"data2vec-vision"),lmt.forEach(t),b2o=r(t9e," \u2014 "),rq=n(t9e,"A",{href:!0});var imt=s(rq);v2o=r(imt,"BeitFeatureExtractor"),imt.forEach(t),F2o=r(t9e," (Data2VecVision model)"),t9e.forEach(t),T2o=i(K),Oh=n(K,"LI",{});var a9e=s(Oh);tde=n(a9e,"STRONG",{});var dmt=s(tde);M2o=r(dmt,"deit"),dmt.forEach(t),E2o=r(a9e," \u2014 "),tq=n(a9e,"A",{href:!0});var cmt=s(tq);C2o=r(cmt,"DeiTFeatureExtractor"),cmt.forEach(t),w2o=r(a9e," (DeiT model)"),a9e.forEach(t),A2o=i(K),Vh=n(K,"LI",{});var n9e=s(Vh);ade=n(n9e,"STRONG",{});var fmt=s(ade);L2o=r(fmt,"detr"),fmt.forEach(t),y2o=r(n9e," \u2014 "),aq=n(n9e,"A",{href:!0});var mmt=s(aq);x2o=r(mmt,"DetrFeatureExtractor"),mmt.forEach(t),$2o=r(n9e," (DETR model)"),n9e.forEach(t),k2o=i(K),Xh=n(K,"LI",{});var s9e=s(Xh);nde=n(s9e,"STRONG",{});var gmt=s(nde);S2o=r(gmt,"dpt"),gmt.forEach(t),R2o=r(s9e," \u2014 "),nq=n(s9e,"A",{href:!0});var hmt=s(nq);P2o=r(hmt,"DPTFeatureExtractor"),hmt.forEach(t),B2o=r(s9e," (DPT model)"),s9e.forEach(t),I2o=i(K),zh=n(K,"LI",{});var l9e=s(zh);sde=n(l9e,"STRONG",{});var pmt=s(sde);N2o=r(pmt,"flava"),pmt.forEach(t),q2o=r(l9e," \u2014 "),sq=n(l9e,"A",{href:!0});var _mt=s(sq);j2o=r(_mt,"FlavaFeatureExtractor"),_mt.forEach(t),D2o=r(l9e," (FLAVA model)"),l9e.forEach(t),G2o=i(K),Qh=n(K,"LI",{});var i9e=s(Qh);lde=n(i9e,"STRONG",{});var umt=s(lde);O2o=r(umt,"glpn"),umt.forEach(t),V2o=r(i9e," \u2014 "),lq=n(i9e,"A",{href:!0});var bmt=s(lq);X2o=r(bmt,"GLPNFeatureExtractor"),bmt.forEach(t),z2o=r(i9e," (GLPN model)"),i9e.forEach(t),Q2o=i(K),Wh=n(K,"LI",{});var d9e=s(Wh);ide=n(d9e,"STRONG",{});var vmt=s(ide);W2o=r(vmt,"groupvit"),vmt.forEach(t),H2o=r(d9e," \u2014 "),iq=n(d9e,"A",{href:!0});var Fmt=s(iq);U2o=r(Fmt,"CLIPFeatureExtractor"),Fmt.forEach(t),J2o=r(d9e," (GroupViT model)"),d9e.forEach(t),Y2o=i(K),Hh=n(K,"LI",{});var c9e=s(Hh);dde=n(c9e,"STRONG",{});var Tmt=s(dde);K2o=r(Tmt,"hubert"),Tmt.forEach(t),Z2o=r(c9e," \u2014 "),dq=n(c9e,"A",{href:!0});var Mmt=s(dq);e1o=r(Mmt,"Wav2Vec2FeatureExtractor"),Mmt.forEach(t),o1o=r(c9e," (Hubert model)"),c9e.forEach(t),r1o=i(K),Uh=n(K,"LI",{});var f9e=s(Uh);cde=n(f9e,"STRONG",{});var Emt=s(cde);t1o=r(Emt,"imagegpt"),Emt.forEach(t),a1o=r(f9e," \u2014 "),cq=n(f9e,"A",{href:!0});var Cmt=s(cq);n1o=r(Cmt,"ImageGPTFeatureExtractor"),Cmt.forEach(t),s1o=r(f9e," (ImageGPT model)"),f9e.forEach(t),l1o=i(K),Jh=n(K,"LI",{});var m9e=s(Jh);fde=n(m9e,"STRONG",{});var wmt=s(fde);i1o=r(wmt,"layoutlmv2"),wmt.forEach(t),d1o=r(m9e," \u2014 "),fq=n(m9e,"A",{href:!0});var Amt=s(fq);c1o=r(Amt,"LayoutLMv2FeatureExtractor"),Amt.forEach(t),f1o=r(m9e," (LayoutLMv2 model)"),m9e.forEach(t),m1o=i(K),Yh=n(K,"LI",{});var g9e=s(Yh);mde=n(g9e,"STRONG",{});var Lmt=s(mde);g1o=r(Lmt,"layoutlmv3"),Lmt.forEach(t),h1o=r(g9e," \u2014 "),mq=n(g9e,"A",{href:!0});var ymt=s(mq);p1o=r(ymt,"LayoutLMv3FeatureExtractor"),ymt.forEach(t),_1o=r(g9e," (LayoutLMv3 model)"),g9e.forEach(t),u1o=i(K),Kh=n(K,"LI",{});var h9e=s(Kh);gde=n(h9e,"STRONG",{});var xmt=s(gde);b1o=r(xmt,"levit"),xmt.forEach(t),v1o=r(h9e," \u2014 "),gq=n(h9e,"A",{href:!0});var $mt=s(gq);F1o=r($mt,"LevitFeatureExtractor"),$mt.forEach(t),T1o=r(h9e," (LeViT model)"),h9e.forEach(t),M1o=i(K),Zh=n(K,"LI",{});var p9e=s(Zh);hde=n(p9e,"STRONG",{});var kmt=s(hde);E1o=r(kmt,"maskformer"),kmt.forEach(t),C1o=r(p9e," \u2014 "),hq=n(p9e,"A",{href:!0});var Smt=s(hq);w1o=r(Smt,"MaskFormerFeatureExtractor"),Smt.forEach(t),A1o=r(p9e," (MaskFormer model)"),p9e.forEach(t),L1o=i(K),ep=n(K,"LI",{});var _9e=s(ep);pde=n(_9e,"STRONG",{});var Rmt=s(pde);y1o=r(Rmt,"mctct"),Rmt.forEach(t),x1o=r(_9e," \u2014 "),pq=n(_9e,"A",{href:!0});var Pmt=s(pq);$1o=r(Pmt,"MCTCTFeatureExtractor"),Pmt.forEach(t),k1o=r(_9e," (M-CTC-T model)"),_9e.forEach(t),S1o=i(K),op=n(K,"LI",{});var u9e=s(op);_de=n(u9e,"STRONG",{});var Bmt=s(_de);R1o=r(Bmt,"mobilevit"),Bmt.forEach(t),P1o=r(u9e," \u2014 "),_q=n(u9e,"A",{href:!0});var Imt=s(_q);B1o=r(Imt,"MobileViTFeatureExtractor"),Imt.forEach(t),I1o=r(u9e," (MobileViT model)"),u9e.forEach(t),N1o=i(K),rp=n(K,"LI",{});var b9e=s(rp);ude=n(b9e,"STRONG",{});var Nmt=s(ude);q1o=r(Nmt,"perceiver"),Nmt.forEach(t),j1o=r(b9e," \u2014 "),uq=n(b9e,"A",{href:!0});var qmt=s(uq);D1o=r(qmt,"PerceiverFeatureExtractor"),qmt.forEach(t),G1o=r(b9e," (Perceiver model)"),b9e.forEach(t),O1o=i(K),tp=n(K,"LI",{});var v9e=s(tp);bde=n(v9e,"STRONG",{});var jmt=s(bde);V1o=r(jmt,"poolformer"),jmt.forEach(t),X1o=r(v9e," \u2014 "),bq=n(v9e,"A",{href:!0});var Dmt=s(bq);z1o=r(Dmt,"PoolFormerFeatureExtractor"),Dmt.forEach(t),Q1o=r(v9e," (PoolFormer model)"),v9e.forEach(t),W1o=i(K),ap=n(K,"LI",{});var F9e=s(ap);vde=n(F9e,"STRONG",{});var Gmt=s(vde);H1o=r(Gmt,"regnet"),Gmt.forEach(t),U1o=r(F9e," \u2014 "),vq=n(F9e,"A",{href:!0});var Omt=s(vq);J1o=r(Omt,"ConvNextFeatureExtractor"),Omt.forEach(t),Y1o=r(F9e," (RegNet model)"),F9e.forEach(t),K1o=i(K),np=n(K,"LI",{});var T9e=s(np);Fde=n(T9e,"STRONG",{});var Vmt=s(Fde);Z1o=r(Vmt,"resnet"),Vmt.forEach(t),ebo=r(T9e," \u2014 "),Fq=n(T9e,"A",{href:!0});var Xmt=s(Fq);obo=r(Xmt,"ConvNextFeatureExtractor"),Xmt.forEach(t),rbo=r(T9e," (ResNet model)"),T9e.forEach(t),tbo=i(K),sp=n(K,"LI",{});var M9e=s(sp);Tde=n(M9e,"STRONG",{});var zmt=s(Tde);abo=r(zmt,"segformer"),zmt.forEach(t),nbo=r(M9e," \u2014 "),Tq=n(M9e,"A",{href:!0});var Qmt=s(Tq);sbo=r(Qmt,"SegformerFeatureExtractor"),Qmt.forEach(t),lbo=r(M9e," (SegFormer model)"),M9e.forEach(t),ibo=i(K),lp=n(K,"LI",{});var E9e=s(lp);Mde=n(E9e,"STRONG",{});var Wmt=s(Mde);dbo=r(Wmt,"speech_to_text"),Wmt.forEach(t),cbo=r(E9e," \u2014 "),Mq=n(E9e,"A",{href:!0});var Hmt=s(Mq);fbo=r(Hmt,"Speech2TextFeatureExtractor"),Hmt.forEach(t),mbo=r(E9e," (Speech2Text model)"),E9e.forEach(t),gbo=i(K),ip=n(K,"LI",{});var C9e=s(ip);Ede=n(C9e,"STRONG",{});var Umt=s(Ede);hbo=r(Umt,"swin"),Umt.forEach(t),pbo=r(C9e," \u2014 "),Eq=n(C9e,"A",{href:!0});var Jmt=s(Eq);_bo=r(Jmt,"ViTFeatureExtractor"),Jmt.forEach(t),ubo=r(C9e," (Swin Transformer model)"),C9e.forEach(t),bbo=i(K),dp=n(K,"LI",{});var w9e=s(dp);Cde=n(w9e,"STRONG",{});var Ymt=s(Cde);vbo=r(Ymt,"van"),Ymt.forEach(t),Fbo=r(w9e," \u2014 "),Cq=n(w9e,"A",{href:!0});var Kmt=s(Cq);Tbo=r(Kmt,"ConvNextFeatureExtractor"),Kmt.forEach(t),Mbo=r(w9e," (VAN model)"),w9e.forEach(t),Ebo=i(K),cp=n(K,"LI",{});var A9e=s(cp);wde=n(A9e,"STRONG",{});var Zmt=s(wde);Cbo=r(Zmt,"vilt"),Zmt.forEach(t),wbo=r(A9e," \u2014 "),wq=n(A9e,"A",{href:!0});var egt=s(wq);Abo=r(egt,"ViltFeatureExtractor"),egt.forEach(t),Lbo=r(A9e," (ViLT model)"),A9e.forEach(t),ybo=i(K),fp=n(K,"LI",{});var L9e=s(fp);Ade=n(L9e,"STRONG",{});var ogt=s(Ade);xbo=r(ogt,"vit"),ogt.forEach(t),$bo=r(L9e," \u2014 "),Aq=n(L9e,"A",{href:!0});var rgt=s(Aq);kbo=r(rgt,"ViTFeatureExtractor"),rgt.forEach(t),Sbo=r(L9e," (ViT model)"),L9e.forEach(t),Rbo=i(K),mp=n(K,"LI",{});var y9e=s(mp);Lde=n(y9e,"STRONG",{});var tgt=s(Lde);Pbo=r(tgt,"vit_mae"),tgt.forEach(t),Bbo=r(y9e," \u2014 "),Lq=n(y9e,"A",{href:!0});var agt=s(Lq);Ibo=r(agt,"ViTFeatureExtractor"),agt.forEach(t),Nbo=r(y9e," (ViTMAE model)"),y9e.forEach(t),qbo=i(K),gp=n(K,"LI",{});var x9e=s(gp);yde=n(x9e,"STRONG",{});var ngt=s(yde);jbo=r(ngt,"wav2vec2"),ngt.forEach(t),Dbo=r(x9e," \u2014 "),yq=n(x9e,"A",{href:!0});var sgt=s(yq);Gbo=r(sgt,"Wav2Vec2FeatureExtractor"),sgt.forEach(t),Obo=r(x9e," (Wav2Vec2 model)"),x9e.forEach(t),Vbo=i(K),hp=n(K,"LI",{});var $9e=s(hp);xde=n($9e,"STRONG",{});var lgt=s(xde);Xbo=r(lgt,"wav2vec2-conformer"),lgt.forEach(t),zbo=r($9e," \u2014 "),xq=n($9e,"A",{href:!0});var igt=s(xq);Qbo=r(igt,"Wav2Vec2FeatureExtractor"),igt.forEach(t),Wbo=r($9e," (Wav2Vec2-Conformer model)"),$9e.forEach(t),Hbo=i(K),pp=n(K,"LI",{});var k9e=s(pp);$de=n(k9e,"STRONG",{});var dgt=s($de);Ubo=r(dgt,"yolos"),dgt.forEach(t),Jbo=r(k9e," \u2014 "),$q=n(k9e,"A",{href:!0});var cgt=s($q);Ybo=r(cgt,"YolosFeatureExtractor"),cgt.forEach(t),Kbo=r(k9e," (YOLOS model)"),k9e.forEach(t),K.forEach(t),Zbo=i(na),T(_p.$$.fragment,na),evo=i(na),T(up.$$.fragment,na),na.forEach(t),ovo=i(el),bp=n(el,"DIV",{class:!0});var vQe=s(bp);T(wL.$$.fragment,vQe),rvo=i(vQe),kde=n(vQe,"P",{});var fgt=s(kde);tvo=r(fgt,"Register a new feature extractor for this class."),fgt.forEach(t),vQe.forEach(t),el.forEach(t),_Xe=i(f),ji=n(f,"H2",{class:!0});var FQe=s(ji);vp=n(FQe,"A",{id:!0,class:!0,href:!0});var mgt=s(vp);Sde=n(mgt,"SPAN",{});var ggt=s(Sde);T(AL.$$.fragment,ggt),ggt.forEach(t),mgt.forEach(t),avo=i(FQe),Rde=n(FQe,"SPAN",{});var hgt=s(Rde);nvo=r(hgt,"AutoProcessor"),hgt.forEach(t),FQe.forEach(t),uXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(LL.$$.fragment,ol),svo=i(ol),yL=n(ol,"P",{});var TQe=s(yL);lvo=r(TQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kq=n(TQe,"A",{href:!0});var pgt=s(kq);ivo=r(pgt,"AutoProcessor.from_pretrained()"),pgt.forEach(t),dvo=r(TQe," class method."),TQe.forEach(t),cvo=i(ol),xL=n(ol,"P",{});var MQe=s(xL);fvo=r(MQe,"This class cannot be instantiated directly using "),Pde=n(MQe,"CODE",{});var _gt=s(Pde);mvo=r(_gt,"__init__()"),_gt.forEach(t),gvo=r(MQe," (throws an error)."),MQe.forEach(t),hvo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T($L.$$.fragment,sa),pvo=i(sa),Bde=n(sa,"P",{});var ugt=s(Bde);_vo=r(ugt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ugt.forEach(t),uvo=i(sa),Di=n(sa,"P",{});var Pre=s(Di);bvo=r(Pre,"The processor class to instantiate is selected based on the "),Ide=n(Pre,"CODE",{});var bgt=s(Ide);vvo=r(bgt,"model_type"),bgt.forEach(t),Fvo=r(Pre,` property of the config object (either
passed as an argument or loaded from `),Nde=n(Pre,"CODE",{});var vgt=s(Nde);Tvo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),Mvo=r(Pre," if possible):"),Pre.forEach(t),Evo=i(sa),he=n(sa,"UL",{});var ue=s(he);Fp=n(ue,"LI",{});var S9e=s(Fp);qde=n(S9e,"STRONG",{});var Fgt=s(qde);Cvo=r(Fgt,"clip"),Fgt.forEach(t),wvo=r(S9e," \u2014 "),Sq=n(S9e,"A",{href:!0});var Tgt=s(Sq);Avo=r(Tgt,"CLIPProcessor"),Tgt.forEach(t),Lvo=r(S9e," (CLIP model)"),S9e.forEach(t),yvo=i(ue),Tp=n(ue,"LI",{});var R9e=s(Tp);jde=n(R9e,"STRONG",{});var Mgt=s(jde);xvo=r(Mgt,"flava"),Mgt.forEach(t),$vo=r(R9e," \u2014 "),Dde=n(R9e,"CODE",{});var Egt=s(Dde);kvo=r(Egt,"FLAVAProcessor"),Egt.forEach(t),Svo=r(R9e," (FLAVA model)"),R9e.forEach(t),Rvo=i(ue),Mp=n(ue,"LI",{});var P9e=s(Mp);Gde=n(P9e,"STRONG",{});var Cgt=s(Gde);Pvo=r(Cgt,"groupvit"),Cgt.forEach(t),Bvo=r(P9e," \u2014 "),Rq=n(P9e,"A",{href:!0});var wgt=s(Rq);Ivo=r(wgt,"CLIPProcessor"),wgt.forEach(t),Nvo=r(P9e," (GroupViT model)"),P9e.forEach(t),qvo=i(ue),Ep=n(ue,"LI",{});var B9e=s(Ep);Ode=n(B9e,"STRONG",{});var Agt=s(Ode);jvo=r(Agt,"layoutlmv2"),Agt.forEach(t),Dvo=r(B9e," \u2014 "),Pq=n(B9e,"A",{href:!0});var Lgt=s(Pq);Gvo=r(Lgt,"LayoutLMv2Processor"),Lgt.forEach(t),Ovo=r(B9e," (LayoutLMv2 model)"),B9e.forEach(t),Vvo=i(ue),Cp=n(ue,"LI",{});var I9e=s(Cp);Vde=n(I9e,"STRONG",{});var ygt=s(Vde);Xvo=r(ygt,"layoutlmv3"),ygt.forEach(t),zvo=r(I9e," \u2014 "),Bq=n(I9e,"A",{href:!0});var xgt=s(Bq);Qvo=r(xgt,"LayoutLMv3Processor"),xgt.forEach(t),Wvo=r(I9e," (LayoutLMv3 model)"),I9e.forEach(t),Hvo=i(ue),wp=n(ue,"LI",{});var N9e=s(wp);Xde=n(N9e,"STRONG",{});var $gt=s(Xde);Uvo=r($gt,"layoutxlm"),$gt.forEach(t),Jvo=r(N9e," \u2014 "),Iq=n(N9e,"A",{href:!0});var kgt=s(Iq);Yvo=r(kgt,"LayoutXLMProcessor"),kgt.forEach(t),Kvo=r(N9e," (LayoutXLM model)"),N9e.forEach(t),Zvo=i(ue),Ap=n(ue,"LI",{});var q9e=s(Ap);zde=n(q9e,"STRONG",{});var Sgt=s(zde);e0o=r(Sgt,"sew"),Sgt.forEach(t),o0o=r(q9e," \u2014 "),Nq=n(q9e,"A",{href:!0});var Rgt=s(Nq);r0o=r(Rgt,"Wav2Vec2Processor"),Rgt.forEach(t),t0o=r(q9e," (SEW model)"),q9e.forEach(t),a0o=i(ue),Lp=n(ue,"LI",{});var j9e=s(Lp);Qde=n(j9e,"STRONG",{});var Pgt=s(Qde);n0o=r(Pgt,"sew-d"),Pgt.forEach(t),s0o=r(j9e," \u2014 "),qq=n(j9e,"A",{href:!0});var Bgt=s(qq);l0o=r(Bgt,"Wav2Vec2Processor"),Bgt.forEach(t),i0o=r(j9e," (SEW-D model)"),j9e.forEach(t),d0o=i(ue),yp=n(ue,"LI",{});var D9e=s(yp);Wde=n(D9e,"STRONG",{});var Igt=s(Wde);c0o=r(Igt,"speech_to_text"),Igt.forEach(t),f0o=r(D9e," \u2014 "),jq=n(D9e,"A",{href:!0});var Ngt=s(jq);m0o=r(Ngt,"Speech2TextProcessor"),Ngt.forEach(t),g0o=r(D9e," (Speech2Text model)"),D9e.forEach(t),h0o=i(ue),xp=n(ue,"LI",{});var G9e=s(xp);Hde=n(G9e,"STRONG",{});var qgt=s(Hde);p0o=r(qgt,"speech_to_text_2"),qgt.forEach(t),_0o=r(G9e," \u2014 "),Dq=n(G9e,"A",{href:!0});var jgt=s(Dq);u0o=r(jgt,"Speech2Text2Processor"),jgt.forEach(t),b0o=r(G9e," (Speech2Text2 model)"),G9e.forEach(t),v0o=i(ue),$p=n(ue,"LI",{});var O9e=s($p);Ude=n(O9e,"STRONG",{});var Dgt=s(Ude);F0o=r(Dgt,"trocr"),Dgt.forEach(t),T0o=r(O9e," \u2014 "),Gq=n(O9e,"A",{href:!0});var Ggt=s(Gq);M0o=r(Ggt,"TrOCRProcessor"),Ggt.forEach(t),E0o=r(O9e," (TrOCR model)"),O9e.forEach(t),C0o=i(ue),kp=n(ue,"LI",{});var V9e=s(kp);Jde=n(V9e,"STRONG",{});var Ogt=s(Jde);w0o=r(Ogt,"unispeech"),Ogt.forEach(t),A0o=r(V9e," \u2014 "),Oq=n(V9e,"A",{href:!0});var Vgt=s(Oq);L0o=r(Vgt,"Wav2Vec2Processor"),Vgt.forEach(t),y0o=r(V9e," (UniSpeech model)"),V9e.forEach(t),x0o=i(ue),Sp=n(ue,"LI",{});var X9e=s(Sp);Yde=n(X9e,"STRONG",{});var Xgt=s(Yde);$0o=r(Xgt,"unispeech-sat"),Xgt.forEach(t),k0o=r(X9e," \u2014 "),Vq=n(X9e,"A",{href:!0});var zgt=s(Vq);S0o=r(zgt,"Wav2Vec2Processor"),zgt.forEach(t),R0o=r(X9e," (UniSpeechSat model)"),X9e.forEach(t),P0o=i(ue),Rp=n(ue,"LI",{});var z9e=s(Rp);Kde=n(z9e,"STRONG",{});var Qgt=s(Kde);B0o=r(Qgt,"vilt"),Qgt.forEach(t),I0o=r(z9e," \u2014 "),Xq=n(z9e,"A",{href:!0});var Wgt=s(Xq);N0o=r(Wgt,"ViltProcessor"),Wgt.forEach(t),q0o=r(z9e," (ViLT model)"),z9e.forEach(t),j0o=i(ue),Pp=n(ue,"LI",{});var Q9e=s(Pp);Zde=n(Q9e,"STRONG",{});var Hgt=s(Zde);D0o=r(Hgt,"vision-text-dual-encoder"),Hgt.forEach(t),G0o=r(Q9e," \u2014 "),zq=n(Q9e,"A",{href:!0});var Ugt=s(zq);O0o=r(Ugt,"VisionTextDualEncoderProcessor"),Ugt.forEach(t),V0o=r(Q9e," (VisionTextDualEncoder model)"),Q9e.forEach(t),X0o=i(ue),Bp=n(ue,"LI",{});var W9e=s(Bp);ece=n(W9e,"STRONG",{});var Jgt=s(ece);z0o=r(Jgt,"wav2vec2"),Jgt.forEach(t),Q0o=r(W9e," \u2014 "),Qq=n(W9e,"A",{href:!0});var Ygt=s(Qq);W0o=r(Ygt,"Wav2Vec2Processor"),Ygt.forEach(t),H0o=r(W9e," (Wav2Vec2 model)"),W9e.forEach(t),U0o=i(ue),Ip=n(ue,"LI",{});var H9e=s(Ip);oce=n(H9e,"STRONG",{});var Kgt=s(oce);J0o=r(Kgt,"wav2vec2-conformer"),Kgt.forEach(t),Y0o=r(H9e," \u2014 "),Wq=n(H9e,"A",{href:!0});var Zgt=s(Wq);K0o=r(Zgt,"Wav2Vec2Processor"),Zgt.forEach(t),Z0o=r(H9e," (Wav2Vec2-Conformer model)"),H9e.forEach(t),eFo=i(ue),Np=n(ue,"LI",{});var U9e=s(Np);rce=n(U9e,"STRONG",{});var eht=s(rce);oFo=r(eht,"wavlm"),eht.forEach(t),rFo=r(U9e," \u2014 "),Hq=n(U9e,"A",{href:!0});var oht=s(Hq);tFo=r(oht,"Wav2Vec2Processor"),oht.forEach(t),aFo=r(U9e," (WavLM model)"),U9e.forEach(t),ue.forEach(t),nFo=i(sa),T(qp.$$.fragment,sa),sFo=i(sa),T(jp.$$.fragment,sa),sa.forEach(t),lFo=i(ol),Dp=n(ol,"DIV",{class:!0});var EQe=s(Dp);T(kL.$$.fragment,EQe),iFo=i(EQe),tce=n(EQe,"P",{});var rht=s(tce);dFo=r(rht,"Register a new processor for this class."),rht.forEach(t),EQe.forEach(t),ol.forEach(t),bXe=i(f),Gi=n(f,"H2",{class:!0});var CQe=s(Gi);Gp=n(CQe,"A",{id:!0,class:!0,href:!0});var tht=s(Gp);ace=n(tht,"SPAN",{});var aht=s(ace);T(SL.$$.fragment,aht),aht.forEach(t),tht.forEach(t),cFo=i(CQe),nce=n(CQe,"SPAN",{});var nht=s(nce);fFo=r(nht,"AutoModel"),nht.forEach(t),CQe.forEach(t),vXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(RL.$$.fragment,rl),mFo=i(rl),Oi=n(rl,"P",{});var Bre=s(Oi);gFo=r(Bre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uq=n(Bre,"A",{href:!0});var sht=s(Uq);hFo=r(sht,"from_pretrained()"),sht.forEach(t),pFo=r(Bre," class method or the "),Jq=n(Bre,"A",{href:!0});var lht=s(Jq);_Fo=r(lht,"from_config()"),lht.forEach(t),uFo=r(Bre,` class
method.`),Bre.forEach(t),bFo=i(rl),PL=n(rl,"P",{});var wQe=s(PL);vFo=r(wQe,"This class cannot be instantiated directly using "),sce=n(wQe,"CODE",{});var iht=s(sce);FFo=r(iht,"__init__()"),iht.forEach(t),TFo=r(wQe," (throws an error)."),wQe.forEach(t),MFo=i(rl),it=n(rl,"DIV",{class:!0});var c6=s(it);T(BL.$$.fragment,c6),EFo=i(c6),lce=n(c6,"P",{});var dht=s(lce);CFo=r(dht,"Instantiates one of the base model classes of the library from a configuration."),dht.forEach(t),wFo=i(c6),Vi=n(c6,"P",{});var Ire=s(Vi);AFo=r(Ire,`Note:
Loading a model from its configuration file does `),ice=n(Ire,"STRONG",{});var cht=s(ice);LFo=r(cht,"not"),cht.forEach(t),yFo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=n(Ire,"A",{href:!0});var fht=s(Yq);xFo=r(fht,"from_pretrained()"),fht.forEach(t),$Fo=r(Ire," to load the model weights."),Ire.forEach(t),kFo=i(c6),T(Op.$$.fragment,c6),c6.forEach(t),SFo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(IL.$$.fragment,la),RFo=i(la),dce=n(la,"P",{});var mht=s(dce);PFo=r(mht,"Instantiate one of the base model classes of the library from a pretrained model."),mht.forEach(t),BFo=i(la),Ia=n(la,"P",{});var f6=s(Ia);IFo=r(f6,"The model class to instantiate is selected based on the "),cce=n(f6,"CODE",{});var ght=s(cce);NFo=r(ght,"model_type"),ght.forEach(t),qFo=r(f6,` property of the config object (either
passed as an argument or loaded from `),fce=n(f6,"CODE",{});var hht=s(fce);jFo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),DFo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(f6,"CODE",{});var pht=s(mce);GFo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),OFo=r(f6,":"),f6.forEach(t),VFo=i(la),y=n(la,"UL",{});var x=s(y);Vp=n(x,"LI",{});var J9e=s(Vp);gce=n(J9e,"STRONG",{});var _ht=s(gce);XFo=r(_ht,"albert"),_ht.forEach(t),zFo=r(J9e," \u2014 "),Kq=n(J9e,"A",{href:!0});var uht=s(Kq);QFo=r(uht,"AlbertModel"),uht.forEach(t),WFo=r(J9e," (ALBERT model)"),J9e.forEach(t),HFo=i(x),Xp=n(x,"LI",{});var Y9e=s(Xp);hce=n(Y9e,"STRONG",{});var bht=s(hce);UFo=r(bht,"bart"),bht.forEach(t),JFo=r(Y9e," \u2014 "),Zq=n(Y9e,"A",{href:!0});var vht=s(Zq);YFo=r(vht,"BartModel"),vht.forEach(t),KFo=r(Y9e," (BART model)"),Y9e.forEach(t),ZFo=i(x),zp=n(x,"LI",{});var K9e=s(zp);pce=n(K9e,"STRONG",{});var Fht=s(pce);eTo=r(Fht,"beit"),Fht.forEach(t),oTo=r(K9e," \u2014 "),ej=n(K9e,"A",{href:!0});var Tht=s(ej);rTo=r(Tht,"BeitModel"),Tht.forEach(t),tTo=r(K9e," (BEiT model)"),K9e.forEach(t),aTo=i(x),Qp=n(x,"LI",{});var Z9e=s(Qp);_ce=n(Z9e,"STRONG",{});var Mht=s(_ce);nTo=r(Mht,"bert"),Mht.forEach(t),sTo=r(Z9e," \u2014 "),oj=n(Z9e,"A",{href:!0});var Eht=s(oj);lTo=r(Eht,"BertModel"),Eht.forEach(t),iTo=r(Z9e," (BERT model)"),Z9e.forEach(t),dTo=i(x),Wp=n(x,"LI",{});var exe=s(Wp);uce=n(exe,"STRONG",{});var Cht=s(uce);cTo=r(Cht,"bert-generation"),Cht.forEach(t),fTo=r(exe," \u2014 "),rj=n(exe,"A",{href:!0});var wht=s(rj);mTo=r(wht,"BertGenerationEncoder"),wht.forEach(t),gTo=r(exe," (Bert Generation model)"),exe.forEach(t),hTo=i(x),Hp=n(x,"LI",{});var oxe=s(Hp);bce=n(oxe,"STRONG",{});var Aht=s(bce);pTo=r(Aht,"big_bird"),Aht.forEach(t),_To=r(oxe," \u2014 "),tj=n(oxe,"A",{href:!0});var Lht=s(tj);uTo=r(Lht,"BigBirdModel"),Lht.forEach(t),bTo=r(oxe," (BigBird model)"),oxe.forEach(t),vTo=i(x),Up=n(x,"LI",{});var rxe=s(Up);vce=n(rxe,"STRONG",{});var yht=s(vce);FTo=r(yht,"bigbird_pegasus"),yht.forEach(t),TTo=r(rxe," \u2014 "),aj=n(rxe,"A",{href:!0});var xht=s(aj);MTo=r(xht,"BigBirdPegasusModel"),xht.forEach(t),ETo=r(rxe," (BigBird-Pegasus model)"),rxe.forEach(t),CTo=i(x),Jp=n(x,"LI",{});var txe=s(Jp);Fce=n(txe,"STRONG",{});var $ht=s(Fce);wTo=r($ht,"blenderbot"),$ht.forEach(t),ATo=r(txe," \u2014 "),nj=n(txe,"A",{href:!0});var kht=s(nj);LTo=r(kht,"BlenderbotModel"),kht.forEach(t),yTo=r(txe," (Blenderbot model)"),txe.forEach(t),xTo=i(x),Yp=n(x,"LI",{});var axe=s(Yp);Tce=n(axe,"STRONG",{});var Sht=s(Tce);$To=r(Sht,"blenderbot-small"),Sht.forEach(t),kTo=r(axe," \u2014 "),sj=n(axe,"A",{href:!0});var Rht=s(sj);STo=r(Rht,"BlenderbotSmallModel"),Rht.forEach(t),RTo=r(axe," (BlenderbotSmall model)"),axe.forEach(t),PTo=i(x),Kp=n(x,"LI",{});var nxe=s(Kp);Mce=n(nxe,"STRONG",{});var Pht=s(Mce);BTo=r(Pht,"bloom"),Pht.forEach(t),ITo=r(nxe," \u2014 "),lj=n(nxe,"A",{href:!0});var Bht=s(lj);NTo=r(Bht,"BloomModel"),Bht.forEach(t),qTo=r(nxe," (BLOOM model)"),nxe.forEach(t),jTo=i(x),Zp=n(x,"LI",{});var sxe=s(Zp);Ece=n(sxe,"STRONG",{});var Iht=s(Ece);DTo=r(Iht,"camembert"),Iht.forEach(t),GTo=r(sxe," \u2014 "),ij=n(sxe,"A",{href:!0});var Nht=s(ij);OTo=r(Nht,"CamembertModel"),Nht.forEach(t),VTo=r(sxe," (CamemBERT model)"),sxe.forEach(t),XTo=i(x),e_=n(x,"LI",{});var lxe=s(e_);Cce=n(lxe,"STRONG",{});var qht=s(Cce);zTo=r(qht,"canine"),qht.forEach(t),QTo=r(lxe," \u2014 "),dj=n(lxe,"A",{href:!0});var jht=s(dj);WTo=r(jht,"CanineModel"),jht.forEach(t),HTo=r(lxe," (CANINE model)"),lxe.forEach(t),UTo=i(x),o_=n(x,"LI",{});var ixe=s(o_);wce=n(ixe,"STRONG",{});var Dht=s(wce);JTo=r(Dht,"clip"),Dht.forEach(t),YTo=r(ixe," \u2014 "),cj=n(ixe,"A",{href:!0});var Ght=s(cj);KTo=r(Ght,"CLIPModel"),Ght.forEach(t),ZTo=r(ixe," (CLIP model)"),ixe.forEach(t),e8o=i(x),r_=n(x,"LI",{});var dxe=s(r_);Ace=n(dxe,"STRONG",{});var Oht=s(Ace);o8o=r(Oht,"codegen"),Oht.forEach(t),r8o=r(dxe," \u2014 "),fj=n(dxe,"A",{href:!0});var Vht=s(fj);t8o=r(Vht,"CodeGenModel"),Vht.forEach(t),a8o=r(dxe," (CodeGen model)"),dxe.forEach(t),n8o=i(x),t_=n(x,"LI",{});var cxe=s(t_);Lce=n(cxe,"STRONG",{});var Xht=s(Lce);s8o=r(Xht,"convbert"),Xht.forEach(t),l8o=r(cxe," \u2014 "),mj=n(cxe,"A",{href:!0});var zht=s(mj);i8o=r(zht,"ConvBertModel"),zht.forEach(t),d8o=r(cxe," (ConvBERT model)"),cxe.forEach(t),c8o=i(x),a_=n(x,"LI",{});var fxe=s(a_);yce=n(fxe,"STRONG",{});var Qht=s(yce);f8o=r(Qht,"convnext"),Qht.forEach(t),m8o=r(fxe," \u2014 "),gj=n(fxe,"A",{href:!0});var Wht=s(gj);g8o=r(Wht,"ConvNextModel"),Wht.forEach(t),h8o=r(fxe," (ConvNeXT model)"),fxe.forEach(t),p8o=i(x),n_=n(x,"LI",{});var mxe=s(n_);xce=n(mxe,"STRONG",{});var Hht=s(xce);_8o=r(Hht,"ctrl"),Hht.forEach(t),u8o=r(mxe," \u2014 "),hj=n(mxe,"A",{href:!0});var Uht=s(hj);b8o=r(Uht,"CTRLModel"),Uht.forEach(t),v8o=r(mxe," (CTRL model)"),mxe.forEach(t),F8o=i(x),s_=n(x,"LI",{});var gxe=s(s_);$ce=n(gxe,"STRONG",{});var Jht=s($ce);T8o=r(Jht,"cvt"),Jht.forEach(t),M8o=r(gxe," \u2014 "),pj=n(gxe,"A",{href:!0});var Yht=s(pj);E8o=r(Yht,"CvtModel"),Yht.forEach(t),C8o=r(gxe," (CvT model)"),gxe.forEach(t),w8o=i(x),l_=n(x,"LI",{});var hxe=s(l_);kce=n(hxe,"STRONG",{});var Kht=s(kce);A8o=r(Kht,"data2vec-audio"),Kht.forEach(t),L8o=r(hxe," \u2014 "),_j=n(hxe,"A",{href:!0});var Zht=s(_j);y8o=r(Zht,"Data2VecAudioModel"),Zht.forEach(t),x8o=r(hxe," (Data2VecAudio model)"),hxe.forEach(t),$8o=i(x),i_=n(x,"LI",{});var pxe=s(i_);Sce=n(pxe,"STRONG",{});var ept=s(Sce);k8o=r(ept,"data2vec-text"),ept.forEach(t),S8o=r(pxe," \u2014 "),uj=n(pxe,"A",{href:!0});var opt=s(uj);R8o=r(opt,"Data2VecTextModel"),opt.forEach(t),P8o=r(pxe," (Data2VecText model)"),pxe.forEach(t),B8o=i(x),d_=n(x,"LI",{});var _xe=s(d_);Rce=n(_xe,"STRONG",{});var rpt=s(Rce);I8o=r(rpt,"data2vec-vision"),rpt.forEach(t),N8o=r(_xe," \u2014 "),bj=n(_xe,"A",{href:!0});var tpt=s(bj);q8o=r(tpt,"Data2VecVisionModel"),tpt.forEach(t),j8o=r(_xe," (Data2VecVision model)"),_xe.forEach(t),D8o=i(x),c_=n(x,"LI",{});var uxe=s(c_);Pce=n(uxe,"STRONG",{});var apt=s(Pce);G8o=r(apt,"deberta"),apt.forEach(t),O8o=r(uxe," \u2014 "),vj=n(uxe,"A",{href:!0});var npt=s(vj);V8o=r(npt,"DebertaModel"),npt.forEach(t),X8o=r(uxe," (DeBERTa model)"),uxe.forEach(t),z8o=i(x),f_=n(x,"LI",{});var bxe=s(f_);Bce=n(bxe,"STRONG",{});var spt=s(Bce);Q8o=r(spt,"deberta-v2"),spt.forEach(t),W8o=r(bxe," \u2014 "),Fj=n(bxe,"A",{href:!0});var lpt=s(Fj);H8o=r(lpt,"DebertaV2Model"),lpt.forEach(t),U8o=r(bxe," (DeBERTa-v2 model)"),bxe.forEach(t),J8o=i(x),m_=n(x,"LI",{});var vxe=s(m_);Ice=n(vxe,"STRONG",{});var ipt=s(Ice);Y8o=r(ipt,"decision_transformer"),ipt.forEach(t),K8o=r(vxe," \u2014 "),Tj=n(vxe,"A",{href:!0});var dpt=s(Tj);Z8o=r(dpt,"DecisionTransformerModel"),dpt.forEach(t),eMo=r(vxe," (Decision Transformer model)"),vxe.forEach(t),oMo=i(x),g_=n(x,"LI",{});var Fxe=s(g_);Nce=n(Fxe,"STRONG",{});var cpt=s(Nce);rMo=r(cpt,"deit"),cpt.forEach(t),tMo=r(Fxe," \u2014 "),Mj=n(Fxe,"A",{href:!0});var fpt=s(Mj);aMo=r(fpt,"DeiTModel"),fpt.forEach(t),nMo=r(Fxe," (DeiT model)"),Fxe.forEach(t),sMo=i(x),h_=n(x,"LI",{});var Txe=s(h_);qce=n(Txe,"STRONG",{});var mpt=s(qce);lMo=r(mpt,"detr"),mpt.forEach(t),iMo=r(Txe," \u2014 "),Ej=n(Txe,"A",{href:!0});var gpt=s(Ej);dMo=r(gpt,"DetrModel"),gpt.forEach(t),cMo=r(Txe," (DETR model)"),Txe.forEach(t),fMo=i(x),p_=n(x,"LI",{});var Mxe=s(p_);jce=n(Mxe,"STRONG",{});var hpt=s(jce);mMo=r(hpt,"distilbert"),hpt.forEach(t),gMo=r(Mxe," \u2014 "),Cj=n(Mxe,"A",{href:!0});var ppt=s(Cj);hMo=r(ppt,"DistilBertModel"),ppt.forEach(t),pMo=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),_Mo=i(x),__=n(x,"LI",{});var Exe=s(__);Dce=n(Exe,"STRONG",{});var _pt=s(Dce);uMo=r(_pt,"dpr"),_pt.forEach(t),bMo=r(Exe," \u2014 "),wj=n(Exe,"A",{href:!0});var upt=s(wj);vMo=r(upt,"DPRQuestionEncoder"),upt.forEach(t),FMo=r(Exe," (DPR model)"),Exe.forEach(t),TMo=i(x),u_=n(x,"LI",{});var Cxe=s(u_);Gce=n(Cxe,"STRONG",{});var bpt=s(Gce);MMo=r(bpt,"dpt"),bpt.forEach(t),EMo=r(Cxe," \u2014 "),Aj=n(Cxe,"A",{href:!0});var vpt=s(Aj);CMo=r(vpt,"DPTModel"),vpt.forEach(t),wMo=r(Cxe," (DPT model)"),Cxe.forEach(t),AMo=i(x),b_=n(x,"LI",{});var wxe=s(b_);Oce=n(wxe,"STRONG",{});var Fpt=s(Oce);LMo=r(Fpt,"electra"),Fpt.forEach(t),yMo=r(wxe," \u2014 "),Lj=n(wxe,"A",{href:!0});var Tpt=s(Lj);xMo=r(Tpt,"ElectraModel"),Tpt.forEach(t),$Mo=r(wxe," (ELECTRA model)"),wxe.forEach(t),kMo=i(x),v_=n(x,"LI",{});var Axe=s(v_);Vce=n(Axe,"STRONG",{});var Mpt=s(Vce);SMo=r(Mpt,"flaubert"),Mpt.forEach(t),RMo=r(Axe," \u2014 "),yj=n(Axe,"A",{href:!0});var Ept=s(yj);PMo=r(Ept,"FlaubertModel"),Ept.forEach(t),BMo=r(Axe," (FlauBERT model)"),Axe.forEach(t),IMo=i(x),F_=n(x,"LI",{});var Lxe=s(F_);Xce=n(Lxe,"STRONG",{});var Cpt=s(Xce);NMo=r(Cpt,"flava"),Cpt.forEach(t),qMo=r(Lxe," \u2014 "),xj=n(Lxe,"A",{href:!0});var wpt=s(xj);jMo=r(wpt,"FlavaModel"),wpt.forEach(t),DMo=r(Lxe," (FLAVA model)"),Lxe.forEach(t),GMo=i(x),T_=n(x,"LI",{});var yxe=s(T_);zce=n(yxe,"STRONG",{});var Apt=s(zce);OMo=r(Apt,"fnet"),Apt.forEach(t),VMo=r(yxe," \u2014 "),$j=n(yxe,"A",{href:!0});var Lpt=s($j);XMo=r(Lpt,"FNetModel"),Lpt.forEach(t),zMo=r(yxe," (FNet model)"),yxe.forEach(t),QMo=i(x),M_=n(x,"LI",{});var xxe=s(M_);Qce=n(xxe,"STRONG",{});var ypt=s(Qce);WMo=r(ypt,"fsmt"),ypt.forEach(t),HMo=r(xxe," \u2014 "),kj=n(xxe,"A",{href:!0});var xpt=s(kj);UMo=r(xpt,"FSMTModel"),xpt.forEach(t),JMo=r(xxe," (FairSeq Machine-Translation model)"),xxe.forEach(t),YMo=i(x),Ws=n(x,"LI",{});var SS=s(Ws);Wce=n(SS,"STRONG",{});var $pt=s(Wce);KMo=r($pt,"funnel"),$pt.forEach(t),ZMo=r(SS," \u2014 "),Sj=n(SS,"A",{href:!0});var kpt=s(Sj);e4o=r(kpt,"FunnelModel"),kpt.forEach(t),o4o=r(SS," or "),Rj=n(SS,"A",{href:!0});var Spt=s(Rj);r4o=r(Spt,"FunnelBaseModel"),Spt.forEach(t),t4o=r(SS," (Funnel Transformer model)"),SS.forEach(t),a4o=i(x),E_=n(x,"LI",{});var $xe=s(E_);Hce=n($xe,"STRONG",{});var Rpt=s(Hce);n4o=r(Rpt,"glpn"),Rpt.forEach(t),s4o=r($xe," \u2014 "),Pj=n($xe,"A",{href:!0});var Ppt=s(Pj);l4o=r(Ppt,"GLPNModel"),Ppt.forEach(t),i4o=r($xe," (GLPN model)"),$xe.forEach(t),d4o=i(x),C_=n(x,"LI",{});var kxe=s(C_);Uce=n(kxe,"STRONG",{});var Bpt=s(Uce);c4o=r(Bpt,"gpt2"),Bpt.forEach(t),f4o=r(kxe," \u2014 "),Bj=n(kxe,"A",{href:!0});var Ipt=s(Bj);m4o=r(Ipt,"GPT2Model"),Ipt.forEach(t),g4o=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),h4o=i(x),w_=n(x,"LI",{});var Sxe=s(w_);Jce=n(Sxe,"STRONG",{});var Npt=s(Jce);p4o=r(Npt,"gpt_neo"),Npt.forEach(t),_4o=r(Sxe," \u2014 "),Ij=n(Sxe,"A",{href:!0});var qpt=s(Ij);u4o=r(qpt,"GPTNeoModel"),qpt.forEach(t),b4o=r(Sxe," (GPT Neo model)"),Sxe.forEach(t),v4o=i(x),A_=n(x,"LI",{});var Rxe=s(A_);Yce=n(Rxe,"STRONG",{});var jpt=s(Yce);F4o=r(jpt,"gpt_neox"),jpt.forEach(t),T4o=r(Rxe," \u2014 "),Nj=n(Rxe,"A",{href:!0});var Dpt=s(Nj);M4o=r(Dpt,"GPTNeoXModel"),Dpt.forEach(t),E4o=r(Rxe," (GPT NeoX model)"),Rxe.forEach(t),C4o=i(x),L_=n(x,"LI",{});var Pxe=s(L_);Kce=n(Pxe,"STRONG",{});var Gpt=s(Kce);w4o=r(Gpt,"gptj"),Gpt.forEach(t),A4o=r(Pxe," \u2014 "),qj=n(Pxe,"A",{href:!0});var Opt=s(qj);L4o=r(Opt,"GPTJModel"),Opt.forEach(t),y4o=r(Pxe," (GPT-J model)"),Pxe.forEach(t),x4o=i(x),y_=n(x,"LI",{});var Bxe=s(y_);Zce=n(Bxe,"STRONG",{});var Vpt=s(Zce);$4o=r(Vpt,"groupvit"),Vpt.forEach(t),k4o=r(Bxe," \u2014 "),jj=n(Bxe,"A",{href:!0});var Xpt=s(jj);S4o=r(Xpt,"GroupViTModel"),Xpt.forEach(t),R4o=r(Bxe," (GroupViT model)"),Bxe.forEach(t),P4o=i(x),x_=n(x,"LI",{});var Ixe=s(x_);efe=n(Ixe,"STRONG",{});var zpt=s(efe);B4o=r(zpt,"hubert"),zpt.forEach(t),I4o=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var Qpt=s(Dj);N4o=r(Qpt,"HubertModel"),Qpt.forEach(t),q4o=r(Ixe," (Hubert model)"),Ixe.forEach(t),j4o=i(x),$_=n(x,"LI",{});var Nxe=s($_);ofe=n(Nxe,"STRONG",{});var Wpt=s(ofe);D4o=r(Wpt,"ibert"),Wpt.forEach(t),G4o=r(Nxe," \u2014 "),Gj=n(Nxe,"A",{href:!0});var Hpt=s(Gj);O4o=r(Hpt,"IBertModel"),Hpt.forEach(t),V4o=r(Nxe," (I-BERT model)"),Nxe.forEach(t),X4o=i(x),k_=n(x,"LI",{});var qxe=s(k_);rfe=n(qxe,"STRONG",{});var Upt=s(rfe);z4o=r(Upt,"imagegpt"),Upt.forEach(t),Q4o=r(qxe," \u2014 "),Oj=n(qxe,"A",{href:!0});var Jpt=s(Oj);W4o=r(Jpt,"ImageGPTModel"),Jpt.forEach(t),H4o=r(qxe," (ImageGPT model)"),qxe.forEach(t),U4o=i(x),S_=n(x,"LI",{});var jxe=s(S_);tfe=n(jxe,"STRONG",{});var Ypt=s(tfe);J4o=r(Ypt,"layoutlm"),Ypt.forEach(t),Y4o=r(jxe," \u2014 "),Vj=n(jxe,"A",{href:!0});var Kpt=s(Vj);K4o=r(Kpt,"LayoutLMModel"),Kpt.forEach(t),Z4o=r(jxe," (LayoutLM model)"),jxe.forEach(t),eEo=i(x),R_=n(x,"LI",{});var Dxe=s(R_);afe=n(Dxe,"STRONG",{});var Zpt=s(afe);oEo=r(Zpt,"layoutlmv2"),Zpt.forEach(t),rEo=r(Dxe," \u2014 "),Xj=n(Dxe,"A",{href:!0});var e_t=s(Xj);tEo=r(e_t,"LayoutLMv2Model"),e_t.forEach(t),aEo=r(Dxe," (LayoutLMv2 model)"),Dxe.forEach(t),nEo=i(x),P_=n(x,"LI",{});var Gxe=s(P_);nfe=n(Gxe,"STRONG",{});var o_t=s(nfe);sEo=r(o_t,"layoutlmv3"),o_t.forEach(t),lEo=r(Gxe," \u2014 "),zj=n(Gxe,"A",{href:!0});var r_t=s(zj);iEo=r(r_t,"LayoutLMv3Model"),r_t.forEach(t),dEo=r(Gxe," (LayoutLMv3 model)"),Gxe.forEach(t),cEo=i(x),B_=n(x,"LI",{});var Oxe=s(B_);sfe=n(Oxe,"STRONG",{});var t_t=s(sfe);fEo=r(t_t,"led"),t_t.forEach(t),mEo=r(Oxe," \u2014 "),Qj=n(Oxe,"A",{href:!0});var a_t=s(Qj);gEo=r(a_t,"LEDModel"),a_t.forEach(t),hEo=r(Oxe," (LED model)"),Oxe.forEach(t),pEo=i(x),I_=n(x,"LI",{});var Vxe=s(I_);lfe=n(Vxe,"STRONG",{});var n_t=s(lfe);_Eo=r(n_t,"levit"),n_t.forEach(t),uEo=r(Vxe," \u2014 "),Wj=n(Vxe,"A",{href:!0});var s_t=s(Wj);bEo=r(s_t,"LevitModel"),s_t.forEach(t),vEo=r(Vxe," (LeViT model)"),Vxe.forEach(t),FEo=i(x),N_=n(x,"LI",{});var Xxe=s(N_);ife=n(Xxe,"STRONG",{});var l_t=s(ife);TEo=r(l_t,"longformer"),l_t.forEach(t),MEo=r(Xxe," \u2014 "),Hj=n(Xxe,"A",{href:!0});var i_t=s(Hj);EEo=r(i_t,"LongformerModel"),i_t.forEach(t),CEo=r(Xxe," (Longformer model)"),Xxe.forEach(t),wEo=i(x),q_=n(x,"LI",{});var zxe=s(q_);dfe=n(zxe,"STRONG",{});var d_t=s(dfe);AEo=r(d_t,"longt5"),d_t.forEach(t),LEo=r(zxe," \u2014 "),Uj=n(zxe,"A",{href:!0});var c_t=s(Uj);yEo=r(c_t,"LongT5Model"),c_t.forEach(t),xEo=r(zxe," (LongT5 model)"),zxe.forEach(t),$Eo=i(x),j_=n(x,"LI",{});var Qxe=s(j_);cfe=n(Qxe,"STRONG",{});var f_t=s(cfe);kEo=r(f_t,"luke"),f_t.forEach(t),SEo=r(Qxe," \u2014 "),Jj=n(Qxe,"A",{href:!0});var m_t=s(Jj);REo=r(m_t,"LukeModel"),m_t.forEach(t),PEo=r(Qxe," (LUKE model)"),Qxe.forEach(t),BEo=i(x),D_=n(x,"LI",{});var Wxe=s(D_);ffe=n(Wxe,"STRONG",{});var g_t=s(ffe);IEo=r(g_t,"lxmert"),g_t.forEach(t),NEo=r(Wxe," \u2014 "),Yj=n(Wxe,"A",{href:!0});var h_t=s(Yj);qEo=r(h_t,"LxmertModel"),h_t.forEach(t),jEo=r(Wxe," (LXMERT model)"),Wxe.forEach(t),DEo=i(x),G_=n(x,"LI",{});var Hxe=s(G_);mfe=n(Hxe,"STRONG",{});var p_t=s(mfe);GEo=r(p_t,"m2m_100"),p_t.forEach(t),OEo=r(Hxe," \u2014 "),Kj=n(Hxe,"A",{href:!0});var __t=s(Kj);VEo=r(__t,"M2M100Model"),__t.forEach(t),XEo=r(Hxe," (M2M100 model)"),Hxe.forEach(t),zEo=i(x),O_=n(x,"LI",{});var Uxe=s(O_);gfe=n(Uxe,"STRONG",{});var u_t=s(gfe);QEo=r(u_t,"marian"),u_t.forEach(t),WEo=r(Uxe," \u2014 "),Zj=n(Uxe,"A",{href:!0});var b_t=s(Zj);HEo=r(b_t,"MarianModel"),b_t.forEach(t),UEo=r(Uxe," (Marian model)"),Uxe.forEach(t),JEo=i(x),V_=n(x,"LI",{});var Jxe=s(V_);hfe=n(Jxe,"STRONG",{});var v_t=s(hfe);YEo=r(v_t,"maskformer"),v_t.forEach(t),KEo=r(Jxe," \u2014 "),eD=n(Jxe,"A",{href:!0});var F_t=s(eD);ZEo=r(F_t,"MaskFormerModel"),F_t.forEach(t),eCo=r(Jxe," (MaskFormer model)"),Jxe.forEach(t),oCo=i(x),X_=n(x,"LI",{});var Yxe=s(X_);pfe=n(Yxe,"STRONG",{});var T_t=s(pfe);rCo=r(T_t,"mbart"),T_t.forEach(t),tCo=r(Yxe," \u2014 "),oD=n(Yxe,"A",{href:!0});var M_t=s(oD);aCo=r(M_t,"MBartModel"),M_t.forEach(t),nCo=r(Yxe," (mBART model)"),Yxe.forEach(t),sCo=i(x),z_=n(x,"LI",{});var Kxe=s(z_);_fe=n(Kxe,"STRONG",{});var E_t=s(_fe);lCo=r(E_t,"mctct"),E_t.forEach(t),iCo=r(Kxe," \u2014 "),rD=n(Kxe,"A",{href:!0});var C_t=s(rD);dCo=r(C_t,"MCTCTModel"),C_t.forEach(t),cCo=r(Kxe," (M-CTC-T model)"),Kxe.forEach(t),fCo=i(x),Q_=n(x,"LI",{});var Zxe=s(Q_);ufe=n(Zxe,"STRONG",{});var w_t=s(ufe);mCo=r(w_t,"megatron-bert"),w_t.forEach(t),gCo=r(Zxe," \u2014 "),tD=n(Zxe,"A",{href:!0});var A_t=s(tD);hCo=r(A_t,"MegatronBertModel"),A_t.forEach(t),pCo=r(Zxe," (Megatron-BERT model)"),Zxe.forEach(t),_Co=i(x),W_=n(x,"LI",{});var e$e=s(W_);bfe=n(e$e,"STRONG",{});var L_t=s(bfe);uCo=r(L_t,"mobilebert"),L_t.forEach(t),bCo=r(e$e," \u2014 "),aD=n(e$e,"A",{href:!0});var y_t=s(aD);vCo=r(y_t,"MobileBertModel"),y_t.forEach(t),FCo=r(e$e," (MobileBERT model)"),e$e.forEach(t),TCo=i(x),H_=n(x,"LI",{});var o$e=s(H_);vfe=n(o$e,"STRONG",{});var x_t=s(vfe);MCo=r(x_t,"mobilevit"),x_t.forEach(t),ECo=r(o$e," \u2014 "),nD=n(o$e,"A",{href:!0});var $_t=s(nD);CCo=r($_t,"MobileViTModel"),$_t.forEach(t),wCo=r(o$e," (MobileViT model)"),o$e.forEach(t),ACo=i(x),U_=n(x,"LI",{});var r$e=s(U_);Ffe=n(r$e,"STRONG",{});var k_t=s(Ffe);LCo=r(k_t,"mpnet"),k_t.forEach(t),yCo=r(r$e," \u2014 "),sD=n(r$e,"A",{href:!0});var S_t=s(sD);xCo=r(S_t,"MPNetModel"),S_t.forEach(t),$Co=r(r$e," (MPNet model)"),r$e.forEach(t),kCo=i(x),J_=n(x,"LI",{});var t$e=s(J_);Tfe=n(t$e,"STRONG",{});var R_t=s(Tfe);SCo=r(R_t,"mt5"),R_t.forEach(t),RCo=r(t$e," \u2014 "),lD=n(t$e,"A",{href:!0});var P_t=s(lD);PCo=r(P_t,"MT5Model"),P_t.forEach(t),BCo=r(t$e," (MT5 model)"),t$e.forEach(t),ICo=i(x),Y_=n(x,"LI",{});var a$e=s(Y_);Mfe=n(a$e,"STRONG",{});var B_t=s(Mfe);NCo=r(B_t,"mvp"),B_t.forEach(t),qCo=r(a$e," \u2014 "),iD=n(a$e,"A",{href:!0});var I_t=s(iD);jCo=r(I_t,"MvpModel"),I_t.forEach(t),DCo=r(a$e," (MVP model)"),a$e.forEach(t),GCo=i(x),K_=n(x,"LI",{});var n$e=s(K_);Efe=n(n$e,"STRONG",{});var N_t=s(Efe);OCo=r(N_t,"nezha"),N_t.forEach(t),VCo=r(n$e," \u2014 "),dD=n(n$e,"A",{href:!0});var q_t=s(dD);XCo=r(q_t,"NezhaModel"),q_t.forEach(t),zCo=r(n$e," (Nezha model)"),n$e.forEach(t),QCo=i(x),Z_=n(x,"LI",{});var s$e=s(Z_);Cfe=n(s$e,"STRONG",{});var j_t=s(Cfe);WCo=r(j_t,"nystromformer"),j_t.forEach(t),HCo=r(s$e," \u2014 "),cD=n(s$e,"A",{href:!0});var D_t=s(cD);UCo=r(D_t,"NystromformerModel"),D_t.forEach(t),JCo=r(s$e," (Nystr\xF6mformer model)"),s$e.forEach(t),YCo=i(x),eu=n(x,"LI",{});var l$e=s(eu);wfe=n(l$e,"STRONG",{});var G_t=s(wfe);KCo=r(G_t,"openai-gpt"),G_t.forEach(t),ZCo=r(l$e," \u2014 "),fD=n(l$e,"A",{href:!0});var O_t=s(fD);e3o=r(O_t,"OpenAIGPTModel"),O_t.forEach(t),o3o=r(l$e," (OpenAI GPT model)"),l$e.forEach(t),r3o=i(x),ou=n(x,"LI",{});var i$e=s(ou);Afe=n(i$e,"STRONG",{});var V_t=s(Afe);t3o=r(V_t,"opt"),V_t.forEach(t),a3o=r(i$e," \u2014 "),mD=n(i$e,"A",{href:!0});var X_t=s(mD);n3o=r(X_t,"OPTModel"),X_t.forEach(t),s3o=r(i$e," (OPT model)"),i$e.forEach(t),l3o=i(x),ru=n(x,"LI",{});var d$e=s(ru);Lfe=n(d$e,"STRONG",{});var z_t=s(Lfe);i3o=r(z_t,"pegasus"),z_t.forEach(t),d3o=r(d$e," \u2014 "),gD=n(d$e,"A",{href:!0});var Q_t=s(gD);c3o=r(Q_t,"PegasusModel"),Q_t.forEach(t),f3o=r(d$e," (Pegasus model)"),d$e.forEach(t),m3o=i(x),tu=n(x,"LI",{});var c$e=s(tu);yfe=n(c$e,"STRONG",{});var W_t=s(yfe);g3o=r(W_t,"perceiver"),W_t.forEach(t),h3o=r(c$e," \u2014 "),hD=n(c$e,"A",{href:!0});var H_t=s(hD);p3o=r(H_t,"PerceiverModel"),H_t.forEach(t),_3o=r(c$e," (Perceiver model)"),c$e.forEach(t),u3o=i(x),au=n(x,"LI",{});var f$e=s(au);xfe=n(f$e,"STRONG",{});var U_t=s(xfe);b3o=r(U_t,"plbart"),U_t.forEach(t),v3o=r(f$e," \u2014 "),pD=n(f$e,"A",{href:!0});var J_t=s(pD);F3o=r(J_t,"PLBartModel"),J_t.forEach(t),T3o=r(f$e," (PLBart model)"),f$e.forEach(t),M3o=i(x),nu=n(x,"LI",{});var m$e=s(nu);$fe=n(m$e,"STRONG",{});var Y_t=s($fe);E3o=r(Y_t,"poolformer"),Y_t.forEach(t),C3o=r(m$e," \u2014 "),_D=n(m$e,"A",{href:!0});var K_t=s(_D);w3o=r(K_t,"PoolFormerModel"),K_t.forEach(t),A3o=r(m$e," (PoolFormer model)"),m$e.forEach(t),L3o=i(x),su=n(x,"LI",{});var g$e=s(su);kfe=n(g$e,"STRONG",{});var Z_t=s(kfe);y3o=r(Z_t,"prophetnet"),Z_t.forEach(t),x3o=r(g$e," \u2014 "),uD=n(g$e,"A",{href:!0});var eut=s(uD);$3o=r(eut,"ProphetNetModel"),eut.forEach(t),k3o=r(g$e," (ProphetNet model)"),g$e.forEach(t),S3o=i(x),lu=n(x,"LI",{});var h$e=s(lu);Sfe=n(h$e,"STRONG",{});var out=s(Sfe);R3o=r(out,"qdqbert"),out.forEach(t),P3o=r(h$e," \u2014 "),bD=n(h$e,"A",{href:!0});var rut=s(bD);B3o=r(rut,"QDQBertModel"),rut.forEach(t),I3o=r(h$e," (QDQBert model)"),h$e.forEach(t),N3o=i(x),iu=n(x,"LI",{});var p$e=s(iu);Rfe=n(p$e,"STRONG",{});var tut=s(Rfe);q3o=r(tut,"reformer"),tut.forEach(t),j3o=r(p$e," \u2014 "),vD=n(p$e,"A",{href:!0});var aut=s(vD);D3o=r(aut,"ReformerModel"),aut.forEach(t),G3o=r(p$e," (Reformer model)"),p$e.forEach(t),O3o=i(x),du=n(x,"LI",{});var _$e=s(du);Pfe=n(_$e,"STRONG",{});var nut=s(Pfe);V3o=r(nut,"regnet"),nut.forEach(t),X3o=r(_$e," \u2014 "),FD=n(_$e,"A",{href:!0});var sut=s(FD);z3o=r(sut,"RegNetModel"),sut.forEach(t),Q3o=r(_$e," (RegNet model)"),_$e.forEach(t),W3o=i(x),cu=n(x,"LI",{});var u$e=s(cu);Bfe=n(u$e,"STRONG",{});var lut=s(Bfe);H3o=r(lut,"rembert"),lut.forEach(t),U3o=r(u$e," \u2014 "),TD=n(u$e,"A",{href:!0});var iut=s(TD);J3o=r(iut,"RemBertModel"),iut.forEach(t),Y3o=r(u$e," (RemBERT model)"),u$e.forEach(t),K3o=i(x),fu=n(x,"LI",{});var b$e=s(fu);Ife=n(b$e,"STRONG",{});var dut=s(Ife);Z3o=r(dut,"resnet"),dut.forEach(t),e5o=r(b$e," \u2014 "),MD=n(b$e,"A",{href:!0});var cut=s(MD);o5o=r(cut,"ResNetModel"),cut.forEach(t),r5o=r(b$e," (ResNet model)"),b$e.forEach(t),t5o=i(x),mu=n(x,"LI",{});var v$e=s(mu);Nfe=n(v$e,"STRONG",{});var fut=s(Nfe);a5o=r(fut,"retribert"),fut.forEach(t),n5o=r(v$e," \u2014 "),ED=n(v$e,"A",{href:!0});var mut=s(ED);s5o=r(mut,"RetriBertModel"),mut.forEach(t),l5o=r(v$e," (RetriBERT model)"),v$e.forEach(t),i5o=i(x),gu=n(x,"LI",{});var F$e=s(gu);qfe=n(F$e,"STRONG",{});var gut=s(qfe);d5o=r(gut,"roberta"),gut.forEach(t),c5o=r(F$e," \u2014 "),CD=n(F$e,"A",{href:!0});var hut=s(CD);f5o=r(hut,"RobertaModel"),hut.forEach(t),m5o=r(F$e," (RoBERTa model)"),F$e.forEach(t),g5o=i(x),hu=n(x,"LI",{});var T$e=s(hu);jfe=n(T$e,"STRONG",{});var put=s(jfe);h5o=r(put,"roformer"),put.forEach(t),p5o=r(T$e," \u2014 "),wD=n(T$e,"A",{href:!0});var _ut=s(wD);_5o=r(_ut,"RoFormerModel"),_ut.forEach(t),u5o=r(T$e," (RoFormer model)"),T$e.forEach(t),b5o=i(x),pu=n(x,"LI",{});var M$e=s(pu);Dfe=n(M$e,"STRONG",{});var uut=s(Dfe);v5o=r(uut,"segformer"),uut.forEach(t),F5o=r(M$e," \u2014 "),AD=n(M$e,"A",{href:!0});var but=s(AD);T5o=r(but,"SegformerModel"),but.forEach(t),M5o=r(M$e," (SegFormer model)"),M$e.forEach(t),E5o=i(x),_u=n(x,"LI",{});var E$e=s(_u);Gfe=n(E$e,"STRONG",{});var vut=s(Gfe);C5o=r(vut,"sew"),vut.forEach(t),w5o=r(E$e," \u2014 "),LD=n(E$e,"A",{href:!0});var Fut=s(LD);A5o=r(Fut,"SEWModel"),Fut.forEach(t),L5o=r(E$e," (SEW model)"),E$e.forEach(t),y5o=i(x),uu=n(x,"LI",{});var C$e=s(uu);Ofe=n(C$e,"STRONG",{});var Tut=s(Ofe);x5o=r(Tut,"sew-d"),Tut.forEach(t),$5o=r(C$e," \u2014 "),yD=n(C$e,"A",{href:!0});var Mut=s(yD);k5o=r(Mut,"SEWDModel"),Mut.forEach(t),S5o=r(C$e," (SEW-D model)"),C$e.forEach(t),R5o=i(x),bu=n(x,"LI",{});var w$e=s(bu);Vfe=n(w$e,"STRONG",{});var Eut=s(Vfe);P5o=r(Eut,"speech_to_text"),Eut.forEach(t),B5o=r(w$e," \u2014 "),xD=n(w$e,"A",{href:!0});var Cut=s(xD);I5o=r(Cut,"Speech2TextModel"),Cut.forEach(t),N5o=r(w$e," (Speech2Text model)"),w$e.forEach(t),q5o=i(x),vu=n(x,"LI",{});var A$e=s(vu);Xfe=n(A$e,"STRONG",{});var wut=s(Xfe);j5o=r(wut,"splinter"),wut.forEach(t),D5o=r(A$e," \u2014 "),$D=n(A$e,"A",{href:!0});var Aut=s($D);G5o=r(Aut,"SplinterModel"),Aut.forEach(t),O5o=r(A$e," (Splinter model)"),A$e.forEach(t),V5o=i(x),Fu=n(x,"LI",{});var L$e=s(Fu);zfe=n(L$e,"STRONG",{});var Lut=s(zfe);X5o=r(Lut,"squeezebert"),Lut.forEach(t),z5o=r(L$e," \u2014 "),kD=n(L$e,"A",{href:!0});var yut=s(kD);Q5o=r(yut,"SqueezeBertModel"),yut.forEach(t),W5o=r(L$e," (SqueezeBERT model)"),L$e.forEach(t),H5o=i(x),Tu=n(x,"LI",{});var y$e=s(Tu);Qfe=n(y$e,"STRONG",{});var xut=s(Qfe);U5o=r(xut,"swin"),xut.forEach(t),J5o=r(y$e," \u2014 "),SD=n(y$e,"A",{href:!0});var $ut=s(SD);Y5o=r($ut,"SwinModel"),$ut.forEach(t),K5o=r(y$e," (Swin Transformer model)"),y$e.forEach(t),Z5o=i(x),Mu=n(x,"LI",{});var x$e=s(Mu);Wfe=n(x$e,"STRONG",{});var kut=s(Wfe);ewo=r(kut,"t5"),kut.forEach(t),owo=r(x$e," \u2014 "),RD=n(x$e,"A",{href:!0});var Sut=s(RD);rwo=r(Sut,"T5Model"),Sut.forEach(t),two=r(x$e," (T5 model)"),x$e.forEach(t),awo=i(x),Eu=n(x,"LI",{});var $$e=s(Eu);Hfe=n($$e,"STRONG",{});var Rut=s(Hfe);nwo=r(Rut,"tapas"),Rut.forEach(t),swo=r($$e," \u2014 "),PD=n($$e,"A",{href:!0});var Put=s(PD);lwo=r(Put,"TapasModel"),Put.forEach(t),iwo=r($$e," (TAPAS model)"),$$e.forEach(t),dwo=i(x),Cu=n(x,"LI",{});var k$e=s(Cu);Ufe=n(k$e,"STRONG",{});var But=s(Ufe);cwo=r(But,"trajectory_transformer"),But.forEach(t),fwo=r(k$e," \u2014 "),BD=n(k$e,"A",{href:!0});var Iut=s(BD);mwo=r(Iut,"TrajectoryTransformerModel"),Iut.forEach(t),gwo=r(k$e," (Trajectory Transformer model)"),k$e.forEach(t),hwo=i(x),wu=n(x,"LI",{});var S$e=s(wu);Jfe=n(S$e,"STRONG",{});var Nut=s(Jfe);pwo=r(Nut,"transfo-xl"),Nut.forEach(t),_wo=r(S$e," \u2014 "),ID=n(S$e,"A",{href:!0});var qut=s(ID);uwo=r(qut,"TransfoXLModel"),qut.forEach(t),bwo=r(S$e," (Transformer-XL model)"),S$e.forEach(t),vwo=i(x),Au=n(x,"LI",{});var R$e=s(Au);Yfe=n(R$e,"STRONG",{});var jut=s(Yfe);Fwo=r(jut,"unispeech"),jut.forEach(t),Two=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var Dut=s(ND);Mwo=r(Dut,"UniSpeechModel"),Dut.forEach(t),Ewo=r(R$e," (UniSpeech model)"),R$e.forEach(t),Cwo=i(x),Lu=n(x,"LI",{});var P$e=s(Lu);Kfe=n(P$e,"STRONG",{});var Gut=s(Kfe);wwo=r(Gut,"unispeech-sat"),Gut.forEach(t),Awo=r(P$e," \u2014 "),qD=n(P$e,"A",{href:!0});var Out=s(qD);Lwo=r(Out,"UniSpeechSatModel"),Out.forEach(t),ywo=r(P$e," (UniSpeechSat model)"),P$e.forEach(t),xwo=i(x),yu=n(x,"LI",{});var B$e=s(yu);Zfe=n(B$e,"STRONG",{});var Vut=s(Zfe);$wo=r(Vut,"van"),Vut.forEach(t),kwo=r(B$e," \u2014 "),jD=n(B$e,"A",{href:!0});var Xut=s(jD);Swo=r(Xut,"VanModel"),Xut.forEach(t),Rwo=r(B$e," (VAN model)"),B$e.forEach(t),Pwo=i(x),xu=n(x,"LI",{});var I$e=s(xu);eme=n(I$e,"STRONG",{});var zut=s(eme);Bwo=r(zut,"vilt"),zut.forEach(t),Iwo=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var Qut=s(DD);Nwo=r(Qut,"ViltModel"),Qut.forEach(t),qwo=r(I$e," (ViLT model)"),I$e.forEach(t),jwo=i(x),$u=n(x,"LI",{});var N$e=s($u);ome=n(N$e,"STRONG",{});var Wut=s(ome);Dwo=r(Wut,"vision-text-dual-encoder"),Wut.forEach(t),Gwo=r(N$e," \u2014 "),GD=n(N$e,"A",{href:!0});var Hut=s(GD);Owo=r(Hut,"VisionTextDualEncoderModel"),Hut.forEach(t),Vwo=r(N$e," (VisionTextDualEncoder model)"),N$e.forEach(t),Xwo=i(x),ku=n(x,"LI",{});var q$e=s(ku);rme=n(q$e,"STRONG",{});var Uut=s(rme);zwo=r(Uut,"visual_bert"),Uut.forEach(t),Qwo=r(q$e," \u2014 "),OD=n(q$e,"A",{href:!0});var Jut=s(OD);Wwo=r(Jut,"VisualBertModel"),Jut.forEach(t),Hwo=r(q$e," (VisualBERT model)"),q$e.forEach(t),Uwo=i(x),Su=n(x,"LI",{});var j$e=s(Su);tme=n(j$e,"STRONG",{});var Yut=s(tme);Jwo=r(Yut,"vit"),Yut.forEach(t),Ywo=r(j$e," \u2014 "),VD=n(j$e,"A",{href:!0});var Kut=s(VD);Kwo=r(Kut,"ViTModel"),Kut.forEach(t),Zwo=r(j$e," (ViT model)"),j$e.forEach(t),eAo=i(x),Ru=n(x,"LI",{});var D$e=s(Ru);ame=n(D$e,"STRONG",{});var Zut=s(ame);oAo=r(Zut,"vit_mae"),Zut.forEach(t),rAo=r(D$e," \u2014 "),XD=n(D$e,"A",{href:!0});var e2t=s(XD);tAo=r(e2t,"ViTMAEModel"),e2t.forEach(t),aAo=r(D$e," (ViTMAE model)"),D$e.forEach(t),nAo=i(x),Pu=n(x,"LI",{});var G$e=s(Pu);nme=n(G$e,"STRONG",{});var o2t=s(nme);sAo=r(o2t,"wav2vec2"),o2t.forEach(t),lAo=r(G$e," \u2014 "),zD=n(G$e,"A",{href:!0});var r2t=s(zD);iAo=r(r2t,"Wav2Vec2Model"),r2t.forEach(t),dAo=r(G$e," (Wav2Vec2 model)"),G$e.forEach(t),cAo=i(x),Bu=n(x,"LI",{});var O$e=s(Bu);sme=n(O$e,"STRONG",{});var t2t=s(sme);fAo=r(t2t,"wav2vec2-conformer"),t2t.forEach(t),mAo=r(O$e," \u2014 "),QD=n(O$e,"A",{href:!0});var a2t=s(QD);gAo=r(a2t,"Wav2Vec2ConformerModel"),a2t.forEach(t),hAo=r(O$e," (Wav2Vec2-Conformer model)"),O$e.forEach(t),pAo=i(x),Iu=n(x,"LI",{});var V$e=s(Iu);lme=n(V$e,"STRONG",{});var n2t=s(lme);_Ao=r(n2t,"wavlm"),n2t.forEach(t),uAo=r(V$e," \u2014 "),WD=n(V$e,"A",{href:!0});var s2t=s(WD);bAo=r(s2t,"WavLMModel"),s2t.forEach(t),vAo=r(V$e," (WavLM model)"),V$e.forEach(t),FAo=i(x),Nu=n(x,"LI",{});var X$e=s(Nu);ime=n(X$e,"STRONG",{});var l2t=s(ime);TAo=r(l2t,"xglm"),l2t.forEach(t),MAo=r(X$e," \u2014 "),HD=n(X$e,"A",{href:!0});var i2t=s(HD);EAo=r(i2t,"XGLMModel"),i2t.forEach(t),CAo=r(X$e," (XGLM model)"),X$e.forEach(t),wAo=i(x),qu=n(x,"LI",{});var z$e=s(qu);dme=n(z$e,"STRONG",{});var d2t=s(dme);AAo=r(d2t,"xlm"),d2t.forEach(t),LAo=r(z$e," \u2014 "),UD=n(z$e,"A",{href:!0});var c2t=s(UD);yAo=r(c2t,"XLMModel"),c2t.forEach(t),xAo=r(z$e," (XLM model)"),z$e.forEach(t),$Ao=i(x),ju=n(x,"LI",{});var Q$e=s(ju);cme=n(Q$e,"STRONG",{});var f2t=s(cme);kAo=r(f2t,"xlm-prophetnet"),f2t.forEach(t),SAo=r(Q$e," \u2014 "),JD=n(Q$e,"A",{href:!0});var m2t=s(JD);RAo=r(m2t,"XLMProphetNetModel"),m2t.forEach(t),PAo=r(Q$e," (XLM-ProphetNet model)"),Q$e.forEach(t),BAo=i(x),Du=n(x,"LI",{});var W$e=s(Du);fme=n(W$e,"STRONG",{});var g2t=s(fme);IAo=r(g2t,"xlm-roberta"),g2t.forEach(t),NAo=r(W$e," \u2014 "),YD=n(W$e,"A",{href:!0});var h2t=s(YD);qAo=r(h2t,"XLMRobertaModel"),h2t.forEach(t),jAo=r(W$e," (XLM-RoBERTa model)"),W$e.forEach(t),DAo=i(x),Gu=n(x,"LI",{});var H$e=s(Gu);mme=n(H$e,"STRONG",{});var p2t=s(mme);GAo=r(p2t,"xlm-roberta-xl"),p2t.forEach(t),OAo=r(H$e," \u2014 "),KD=n(H$e,"A",{href:!0});var _2t=s(KD);VAo=r(_2t,"XLMRobertaXLModel"),_2t.forEach(t),XAo=r(H$e," (XLM-RoBERTa-XL model)"),H$e.forEach(t),zAo=i(x),Ou=n(x,"LI",{});var U$e=s(Ou);gme=n(U$e,"STRONG",{});var u2t=s(gme);QAo=r(u2t,"xlnet"),u2t.forEach(t),WAo=r(U$e," \u2014 "),ZD=n(U$e,"A",{href:!0});var b2t=s(ZD);HAo=r(b2t,"XLNetModel"),b2t.forEach(t),UAo=r(U$e," (XLNet model)"),U$e.forEach(t),JAo=i(x),Vu=n(x,"LI",{});var J$e=s(Vu);hme=n(J$e,"STRONG",{});var v2t=s(hme);YAo=r(v2t,"yolos"),v2t.forEach(t),KAo=r(J$e," \u2014 "),eG=n(J$e,"A",{href:!0});var F2t=s(eG);ZAo=r(F2t,"YolosModel"),F2t.forEach(t),e6o=r(J$e," (YOLOS model)"),J$e.forEach(t),o6o=i(x),Xu=n(x,"LI",{});var Y$e=s(Xu);pme=n(Y$e,"STRONG",{});var T2t=s(pme);r6o=r(T2t,"yoso"),T2t.forEach(t),t6o=r(Y$e," \u2014 "),oG=n(Y$e,"A",{href:!0});var M2t=s(oG);a6o=r(M2t,"YosoModel"),M2t.forEach(t),n6o=r(Y$e," (YOSO model)"),Y$e.forEach(t),x.forEach(t),s6o=i(la),zu=n(la,"P",{});var K$e=s(zu);l6o=r(K$e,"The model is set in evaluation mode by default using "),_me=n(K$e,"CODE",{});var E2t=s(_me);i6o=r(E2t,"model.eval()"),E2t.forEach(t),d6o=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ume=n(K$e,"CODE",{});var C2t=s(ume);c6o=r(C2t,"model.train()"),C2t.forEach(t),K$e.forEach(t),f6o=i(la),T(Qu.$$.fragment,la),la.forEach(t),rl.forEach(t),FXe=i(f),Xi=n(f,"H2",{class:!0});var AQe=s(Xi);Wu=n(AQe,"A",{id:!0,class:!0,href:!0});var w2t=s(Wu);bme=n(w2t,"SPAN",{});var A2t=s(bme);T(NL.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),m6o=i(AQe),vme=n(AQe,"SPAN",{});var L2t=s(vme);g6o=r(L2t,"AutoModelForPreTraining"),L2t.forEach(t),AQe.forEach(t),TXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(qL.$$.fragment,tl),h6o=i(tl),zi=n(tl,"P",{});var Nre=s(zi);p6o=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rG=n(Nre,"A",{href:!0});var y2t=s(rG);_6o=r(y2t,"from_pretrained()"),y2t.forEach(t),u6o=r(Nre," class method or the "),tG=n(Nre,"A",{href:!0});var x2t=s(tG);b6o=r(x2t,"from_config()"),x2t.forEach(t),v6o=r(Nre,` class
method.`),Nre.forEach(t),F6o=i(tl),jL=n(tl,"P",{});var LQe=s(jL);T6o=r(LQe,"This class cannot be instantiated directly using "),Fme=n(LQe,"CODE",{});var $2t=s(Fme);M6o=r($2t,"__init__()"),$2t.forEach(t),E6o=r(LQe," (throws an error)."),LQe.forEach(t),C6o=i(tl),dt=n(tl,"DIV",{class:!0});var m6=s(dt);T(DL.$$.fragment,m6),w6o=i(m6),Tme=n(m6,"P",{});var k2t=s(Tme);A6o=r(k2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k2t.forEach(t),L6o=i(m6),Qi=n(m6,"P",{});var qre=s(Qi);y6o=r(qre,`Note:
Loading a model from its configuration file does `),Mme=n(qre,"STRONG",{});var S2t=s(Mme);x6o=r(S2t,"not"),S2t.forEach(t),$6o=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(qre,"A",{href:!0});var R2t=s(aG);k6o=r(R2t,"from_pretrained()"),R2t.forEach(t),S6o=r(qre," to load the model weights."),qre.forEach(t),R6o=i(m6),T(Hu.$$.fragment,m6),m6.forEach(t),P6o=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(GL.$$.fragment,ia),B6o=i(ia),Eme=n(ia,"P",{});var P2t=s(Eme);I6o=r(P2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P2t.forEach(t),N6o=i(ia),Na=n(ia,"P",{});var g6=s(Na);q6o=r(g6,"The model class to instantiate is selected based on the "),Cme=n(g6,"CODE",{});var B2t=s(Cme);j6o=r(B2t,"model_type"),B2t.forEach(t),D6o=r(g6,` property of the config object (either
passed as an argument or loaded from `),wme=n(g6,"CODE",{});var I2t=s(wme);G6o=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),O6o=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(g6,"CODE",{});var N2t=s(Ame);V6o=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),X6o=r(g6,":"),g6.forEach(t),z6o=i(ia),G=n(ia,"UL",{});var O=s(G);Uu=n(O,"LI",{});var Z$e=s(Uu);Lme=n(Z$e,"STRONG",{});var q2t=s(Lme);Q6o=r(q2t,"albert"),q2t.forEach(t),W6o=r(Z$e," \u2014 "),nG=n(Z$e,"A",{href:!0});var j2t=s(nG);H6o=r(j2t,"AlbertForPreTraining"),j2t.forEach(t),U6o=r(Z$e," (ALBERT model)"),Z$e.forEach(t),J6o=i(O),Ju=n(O,"LI",{});var eke=s(Ju);yme=n(eke,"STRONG",{});var D2t=s(yme);Y6o=r(D2t,"bart"),D2t.forEach(t),K6o=r(eke," \u2014 "),sG=n(eke,"A",{href:!0});var G2t=s(sG);Z6o=r(G2t,"BartForConditionalGeneration"),G2t.forEach(t),e7o=r(eke," (BART model)"),eke.forEach(t),o7o=i(O),Yu=n(O,"LI",{});var oke=s(Yu);xme=n(oke,"STRONG",{});var O2t=s(xme);r7o=r(O2t,"bert"),O2t.forEach(t),t7o=r(oke," \u2014 "),lG=n(oke,"A",{href:!0});var V2t=s(lG);a7o=r(V2t,"BertForPreTraining"),V2t.forEach(t),n7o=r(oke," (BERT model)"),oke.forEach(t),s7o=i(O),Ku=n(O,"LI",{});var rke=s(Ku);$me=n(rke,"STRONG",{});var X2t=s($me);l7o=r(X2t,"big_bird"),X2t.forEach(t),i7o=r(rke," \u2014 "),iG=n(rke,"A",{href:!0});var z2t=s(iG);d7o=r(z2t,"BigBirdForPreTraining"),z2t.forEach(t),c7o=r(rke," (BigBird model)"),rke.forEach(t),f7o=i(O),Zu=n(O,"LI",{});var tke=s(Zu);kme=n(tke,"STRONG",{});var Q2t=s(kme);m7o=r(Q2t,"bloom"),Q2t.forEach(t),g7o=r(tke," \u2014 "),dG=n(tke,"A",{href:!0});var W2t=s(dG);h7o=r(W2t,"BloomForCausalLM"),W2t.forEach(t),p7o=r(tke," (BLOOM model)"),tke.forEach(t),_7o=i(O),e2=n(O,"LI",{});var ake=s(e2);Sme=n(ake,"STRONG",{});var H2t=s(Sme);u7o=r(H2t,"camembert"),H2t.forEach(t),b7o=r(ake," \u2014 "),cG=n(ake,"A",{href:!0});var U2t=s(cG);v7o=r(U2t,"CamembertForMaskedLM"),U2t.forEach(t),F7o=r(ake," (CamemBERT model)"),ake.forEach(t),T7o=i(O),o2=n(O,"LI",{});var nke=s(o2);Rme=n(nke,"STRONG",{});var J2t=s(Rme);M7o=r(J2t,"ctrl"),J2t.forEach(t),E7o=r(nke," \u2014 "),fG=n(nke,"A",{href:!0});var Y2t=s(fG);C7o=r(Y2t,"CTRLLMHeadModel"),Y2t.forEach(t),w7o=r(nke," (CTRL model)"),nke.forEach(t),A7o=i(O),r2=n(O,"LI",{});var ske=s(r2);Pme=n(ske,"STRONG",{});var K2t=s(Pme);L7o=r(K2t,"data2vec-text"),K2t.forEach(t),y7o=r(ske," \u2014 "),mG=n(ske,"A",{href:!0});var Z2t=s(mG);x7o=r(Z2t,"Data2VecTextForMaskedLM"),Z2t.forEach(t),$7o=r(ske," (Data2VecText model)"),ske.forEach(t),k7o=i(O),t2=n(O,"LI",{});var lke=s(t2);Bme=n(lke,"STRONG",{});var e1t=s(Bme);S7o=r(e1t,"deberta"),e1t.forEach(t),R7o=r(lke," \u2014 "),gG=n(lke,"A",{href:!0});var o1t=s(gG);P7o=r(o1t,"DebertaForMaskedLM"),o1t.forEach(t),B7o=r(lke," (DeBERTa model)"),lke.forEach(t),I7o=i(O),a2=n(O,"LI",{});var ike=s(a2);Ime=n(ike,"STRONG",{});var r1t=s(Ime);N7o=r(r1t,"deberta-v2"),r1t.forEach(t),q7o=r(ike," \u2014 "),hG=n(ike,"A",{href:!0});var t1t=s(hG);j7o=r(t1t,"DebertaV2ForMaskedLM"),t1t.forEach(t),D7o=r(ike," (DeBERTa-v2 model)"),ike.forEach(t),G7o=i(O),n2=n(O,"LI",{});var dke=s(n2);Nme=n(dke,"STRONG",{});var a1t=s(Nme);O7o=r(a1t,"distilbert"),a1t.forEach(t),V7o=r(dke," \u2014 "),pG=n(dke,"A",{href:!0});var n1t=s(pG);X7o=r(n1t,"DistilBertForMaskedLM"),n1t.forEach(t),z7o=r(dke," (DistilBERT model)"),dke.forEach(t),Q7o=i(O),s2=n(O,"LI",{});var cke=s(s2);qme=n(cke,"STRONG",{});var s1t=s(qme);W7o=r(s1t,"electra"),s1t.forEach(t),H7o=r(cke," \u2014 "),_G=n(cke,"A",{href:!0});var l1t=s(_G);U7o=r(l1t,"ElectraForPreTraining"),l1t.forEach(t),J7o=r(cke," (ELECTRA model)"),cke.forEach(t),Y7o=i(O),l2=n(O,"LI",{});var fke=s(l2);jme=n(fke,"STRONG",{});var i1t=s(jme);K7o=r(i1t,"flaubert"),i1t.forEach(t),Z7o=r(fke," \u2014 "),uG=n(fke,"A",{href:!0});var d1t=s(uG);eLo=r(d1t,"FlaubertWithLMHeadModel"),d1t.forEach(t),oLo=r(fke," (FlauBERT model)"),fke.forEach(t),rLo=i(O),i2=n(O,"LI",{});var mke=s(i2);Dme=n(mke,"STRONG",{});var c1t=s(Dme);tLo=r(c1t,"flava"),c1t.forEach(t),aLo=r(mke," \u2014 "),bG=n(mke,"A",{href:!0});var f1t=s(bG);nLo=r(f1t,"FlavaForPreTraining"),f1t.forEach(t),sLo=r(mke," (FLAVA model)"),mke.forEach(t),lLo=i(O),d2=n(O,"LI",{});var gke=s(d2);Gme=n(gke,"STRONG",{});var m1t=s(Gme);iLo=r(m1t,"fnet"),m1t.forEach(t),dLo=r(gke," \u2014 "),vG=n(gke,"A",{href:!0});var g1t=s(vG);cLo=r(g1t,"FNetForPreTraining"),g1t.forEach(t),fLo=r(gke," (FNet model)"),gke.forEach(t),mLo=i(O),c2=n(O,"LI",{});var hke=s(c2);Ome=n(hke,"STRONG",{});var h1t=s(Ome);gLo=r(h1t,"fsmt"),h1t.forEach(t),hLo=r(hke," \u2014 "),FG=n(hke,"A",{href:!0});var p1t=s(FG);pLo=r(p1t,"FSMTForConditionalGeneration"),p1t.forEach(t),_Lo=r(hke," (FairSeq Machine-Translation model)"),hke.forEach(t),uLo=i(O),f2=n(O,"LI",{});var pke=s(f2);Vme=n(pke,"STRONG",{});var _1t=s(Vme);bLo=r(_1t,"funnel"),_1t.forEach(t),vLo=r(pke," \u2014 "),TG=n(pke,"A",{href:!0});var u1t=s(TG);FLo=r(u1t,"FunnelForPreTraining"),u1t.forEach(t),TLo=r(pke," (Funnel Transformer model)"),pke.forEach(t),MLo=i(O),m2=n(O,"LI",{});var _ke=s(m2);Xme=n(_ke,"STRONG",{});var b1t=s(Xme);ELo=r(b1t,"gpt2"),b1t.forEach(t),CLo=r(_ke," \u2014 "),MG=n(_ke,"A",{href:!0});var v1t=s(MG);wLo=r(v1t,"GPT2LMHeadModel"),v1t.forEach(t),ALo=r(_ke," (OpenAI GPT-2 model)"),_ke.forEach(t),LLo=i(O),g2=n(O,"LI",{});var uke=s(g2);zme=n(uke,"STRONG",{});var F1t=s(zme);yLo=r(F1t,"ibert"),F1t.forEach(t),xLo=r(uke," \u2014 "),EG=n(uke,"A",{href:!0});var T1t=s(EG);$Lo=r(T1t,"IBertForMaskedLM"),T1t.forEach(t),kLo=r(uke," (I-BERT model)"),uke.forEach(t),SLo=i(O),h2=n(O,"LI",{});var bke=s(h2);Qme=n(bke,"STRONG",{});var M1t=s(Qme);RLo=r(M1t,"layoutlm"),M1t.forEach(t),PLo=r(bke," \u2014 "),CG=n(bke,"A",{href:!0});var E1t=s(CG);BLo=r(E1t,"LayoutLMForMaskedLM"),E1t.forEach(t),ILo=r(bke," (LayoutLM model)"),bke.forEach(t),NLo=i(O),p2=n(O,"LI",{});var vke=s(p2);Wme=n(vke,"STRONG",{});var C1t=s(Wme);qLo=r(C1t,"longformer"),C1t.forEach(t),jLo=r(vke," \u2014 "),wG=n(vke,"A",{href:!0});var w1t=s(wG);DLo=r(w1t,"LongformerForMaskedLM"),w1t.forEach(t),GLo=r(vke," (Longformer model)"),vke.forEach(t),OLo=i(O),_2=n(O,"LI",{});var Fke=s(_2);Hme=n(Fke,"STRONG",{});var A1t=s(Hme);VLo=r(A1t,"lxmert"),A1t.forEach(t),XLo=r(Fke," \u2014 "),AG=n(Fke,"A",{href:!0});var L1t=s(AG);zLo=r(L1t,"LxmertForPreTraining"),L1t.forEach(t),QLo=r(Fke," (LXMERT model)"),Fke.forEach(t),WLo=i(O),u2=n(O,"LI",{});var Tke=s(u2);Ume=n(Tke,"STRONG",{});var y1t=s(Ume);HLo=r(y1t,"megatron-bert"),y1t.forEach(t),ULo=r(Tke," \u2014 "),LG=n(Tke,"A",{href:!0});var x1t=s(LG);JLo=r(x1t,"MegatronBertForPreTraining"),x1t.forEach(t),YLo=r(Tke," (Megatron-BERT model)"),Tke.forEach(t),KLo=i(O),b2=n(O,"LI",{});var Mke=s(b2);Jme=n(Mke,"STRONG",{});var $1t=s(Jme);ZLo=r($1t,"mobilebert"),$1t.forEach(t),eyo=r(Mke," \u2014 "),yG=n(Mke,"A",{href:!0});var k1t=s(yG);oyo=r(k1t,"MobileBertForPreTraining"),k1t.forEach(t),ryo=r(Mke," (MobileBERT model)"),Mke.forEach(t),tyo=i(O),v2=n(O,"LI",{});var Eke=s(v2);Yme=n(Eke,"STRONG",{});var S1t=s(Yme);ayo=r(S1t,"mpnet"),S1t.forEach(t),nyo=r(Eke," \u2014 "),xG=n(Eke,"A",{href:!0});var R1t=s(xG);syo=r(R1t,"MPNetForMaskedLM"),R1t.forEach(t),lyo=r(Eke," (MPNet model)"),Eke.forEach(t),iyo=i(O),F2=n(O,"LI",{});var Cke=s(F2);Kme=n(Cke,"STRONG",{});var P1t=s(Kme);dyo=r(P1t,"mvp"),P1t.forEach(t),cyo=r(Cke," \u2014 "),$G=n(Cke,"A",{href:!0});var B1t=s($G);fyo=r(B1t,"MvpForConditionalGeneration"),B1t.forEach(t),myo=r(Cke," (MVP model)"),Cke.forEach(t),gyo=i(O),T2=n(O,"LI",{});var wke=s(T2);Zme=n(wke,"STRONG",{});var I1t=s(Zme);hyo=r(I1t,"nezha"),I1t.forEach(t),pyo=r(wke," \u2014 "),kG=n(wke,"A",{href:!0});var N1t=s(kG);_yo=r(N1t,"NezhaForPreTraining"),N1t.forEach(t),uyo=r(wke," (Nezha model)"),wke.forEach(t),byo=i(O),M2=n(O,"LI",{});var Ake=s(M2);ege=n(Ake,"STRONG",{});var q1t=s(ege);vyo=r(q1t,"openai-gpt"),q1t.forEach(t),Fyo=r(Ake," \u2014 "),SG=n(Ake,"A",{href:!0});var j1t=s(SG);Tyo=r(j1t,"OpenAIGPTLMHeadModel"),j1t.forEach(t),Myo=r(Ake," (OpenAI GPT model)"),Ake.forEach(t),Eyo=i(O),E2=n(O,"LI",{});var Lke=s(E2);oge=n(Lke,"STRONG",{});var D1t=s(oge);Cyo=r(D1t,"retribert"),D1t.forEach(t),wyo=r(Lke," \u2014 "),RG=n(Lke,"A",{href:!0});var G1t=s(RG);Ayo=r(G1t,"RetriBertModel"),G1t.forEach(t),Lyo=r(Lke," (RetriBERT model)"),Lke.forEach(t),yyo=i(O),C2=n(O,"LI",{});var yke=s(C2);rge=n(yke,"STRONG",{});var O1t=s(rge);xyo=r(O1t,"roberta"),O1t.forEach(t),$yo=r(yke," \u2014 "),PG=n(yke,"A",{href:!0});var V1t=s(PG);kyo=r(V1t,"RobertaForMaskedLM"),V1t.forEach(t),Syo=r(yke," (RoBERTa model)"),yke.forEach(t),Ryo=i(O),w2=n(O,"LI",{});var xke=s(w2);tge=n(xke,"STRONG",{});var X1t=s(tge);Pyo=r(X1t,"splinter"),X1t.forEach(t),Byo=r(xke," \u2014 "),BG=n(xke,"A",{href:!0});var z1t=s(BG);Iyo=r(z1t,"SplinterForPreTraining"),z1t.forEach(t),Nyo=r(xke," (Splinter model)"),xke.forEach(t),qyo=i(O),A2=n(O,"LI",{});var $ke=s(A2);age=n($ke,"STRONG",{});var Q1t=s(age);jyo=r(Q1t,"squeezebert"),Q1t.forEach(t),Dyo=r($ke," \u2014 "),IG=n($ke,"A",{href:!0});var W1t=s(IG);Gyo=r(W1t,"SqueezeBertForMaskedLM"),W1t.forEach(t),Oyo=r($ke," (SqueezeBERT model)"),$ke.forEach(t),Vyo=i(O),L2=n(O,"LI",{});var kke=s(L2);nge=n(kke,"STRONG",{});var H1t=s(nge);Xyo=r(H1t,"t5"),H1t.forEach(t),zyo=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var U1t=s(NG);Qyo=r(U1t,"T5ForConditionalGeneration"),U1t.forEach(t),Wyo=r(kke," (T5 model)"),kke.forEach(t),Hyo=i(O),y2=n(O,"LI",{});var Ske=s(y2);sge=n(Ske,"STRONG",{});var J1t=s(sge);Uyo=r(J1t,"tapas"),J1t.forEach(t),Jyo=r(Ske," \u2014 "),qG=n(Ske,"A",{href:!0});var Y1t=s(qG);Yyo=r(Y1t,"TapasForMaskedLM"),Y1t.forEach(t),Kyo=r(Ske," (TAPAS model)"),Ske.forEach(t),Zyo=i(O),x2=n(O,"LI",{});var Rke=s(x2);lge=n(Rke,"STRONG",{});var K1t=s(lge);e9o=r(K1t,"transfo-xl"),K1t.forEach(t),o9o=r(Rke," \u2014 "),jG=n(Rke,"A",{href:!0});var Z1t=s(jG);r9o=r(Z1t,"TransfoXLLMHeadModel"),Z1t.forEach(t),t9o=r(Rke," (Transformer-XL model)"),Rke.forEach(t),a9o=i(O),$2=n(O,"LI",{});var Pke=s($2);ige=n(Pke,"STRONG",{});var ebt=s(ige);n9o=r(ebt,"unispeech"),ebt.forEach(t),s9o=r(Pke," \u2014 "),DG=n(Pke,"A",{href:!0});var obt=s(DG);l9o=r(obt,"UniSpeechForPreTraining"),obt.forEach(t),i9o=r(Pke," (UniSpeech model)"),Pke.forEach(t),d9o=i(O),k2=n(O,"LI",{});var Bke=s(k2);dge=n(Bke,"STRONG",{});var rbt=s(dge);c9o=r(rbt,"unispeech-sat"),rbt.forEach(t),f9o=r(Bke," \u2014 "),GG=n(Bke,"A",{href:!0});var tbt=s(GG);m9o=r(tbt,"UniSpeechSatForPreTraining"),tbt.forEach(t),g9o=r(Bke," (UniSpeechSat model)"),Bke.forEach(t),h9o=i(O),S2=n(O,"LI",{});var Ike=s(S2);cge=n(Ike,"STRONG",{});var abt=s(cge);p9o=r(abt,"visual_bert"),abt.forEach(t),_9o=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var nbt=s(OG);u9o=r(nbt,"VisualBertForPreTraining"),nbt.forEach(t),b9o=r(Ike," (VisualBERT model)"),Ike.forEach(t),v9o=i(O),R2=n(O,"LI",{});var Nke=s(R2);fge=n(Nke,"STRONG",{});var sbt=s(fge);F9o=r(sbt,"vit_mae"),sbt.forEach(t),T9o=r(Nke," \u2014 "),VG=n(Nke,"A",{href:!0});var lbt=s(VG);M9o=r(lbt,"ViTMAEForPreTraining"),lbt.forEach(t),E9o=r(Nke," (ViTMAE model)"),Nke.forEach(t),C9o=i(O),P2=n(O,"LI",{});var qke=s(P2);mge=n(qke,"STRONG",{});var ibt=s(mge);w9o=r(ibt,"wav2vec2"),ibt.forEach(t),A9o=r(qke," \u2014 "),XG=n(qke,"A",{href:!0});var dbt=s(XG);L9o=r(dbt,"Wav2Vec2ForPreTraining"),dbt.forEach(t),y9o=r(qke," (Wav2Vec2 model)"),qke.forEach(t),x9o=i(O),B2=n(O,"LI",{});var jke=s(B2);gge=n(jke,"STRONG",{});var cbt=s(gge);$9o=r(cbt,"wav2vec2-conformer"),cbt.forEach(t),k9o=r(jke," \u2014 "),zG=n(jke,"A",{href:!0});var fbt=s(zG);S9o=r(fbt,"Wav2Vec2ConformerForPreTraining"),fbt.forEach(t),R9o=r(jke," (Wav2Vec2-Conformer model)"),jke.forEach(t),P9o=i(O),I2=n(O,"LI",{});var Dke=s(I2);hge=n(Dke,"STRONG",{});var mbt=s(hge);B9o=r(mbt,"xlm"),mbt.forEach(t),I9o=r(Dke," \u2014 "),QG=n(Dke,"A",{href:!0});var gbt=s(QG);N9o=r(gbt,"XLMWithLMHeadModel"),gbt.forEach(t),q9o=r(Dke," (XLM model)"),Dke.forEach(t),j9o=i(O),N2=n(O,"LI",{});var Gke=s(N2);pge=n(Gke,"STRONG",{});var hbt=s(pge);D9o=r(hbt,"xlm-roberta"),hbt.forEach(t),G9o=r(Gke," \u2014 "),WG=n(Gke,"A",{href:!0});var pbt=s(WG);O9o=r(pbt,"XLMRobertaForMaskedLM"),pbt.forEach(t),V9o=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),X9o=i(O),q2=n(O,"LI",{});var Oke=s(q2);_ge=n(Oke,"STRONG",{});var _bt=s(_ge);z9o=r(_bt,"xlm-roberta-xl"),_bt.forEach(t),Q9o=r(Oke," \u2014 "),HG=n(Oke,"A",{href:!0});var ubt=s(HG);W9o=r(ubt,"XLMRobertaXLForMaskedLM"),ubt.forEach(t),H9o=r(Oke," (XLM-RoBERTa-XL model)"),Oke.forEach(t),U9o=i(O),j2=n(O,"LI",{});var Vke=s(j2);uge=n(Vke,"STRONG",{});var bbt=s(uge);J9o=r(bbt,"xlnet"),bbt.forEach(t),Y9o=r(Vke," \u2014 "),UG=n(Vke,"A",{href:!0});var vbt=s(UG);K9o=r(vbt,"XLNetLMHeadModel"),vbt.forEach(t),Z9o=r(Vke," (XLNet model)"),Vke.forEach(t),O.forEach(t),exo=i(ia),D2=n(ia,"P",{});var Xke=s(D2);oxo=r(Xke,"The model is set in evaluation mode by default using "),bge=n(Xke,"CODE",{});var Fbt=s(bge);rxo=r(Fbt,"model.eval()"),Fbt.forEach(t),txo=r(Xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=n(Xke,"CODE",{});var Tbt=s(vge);axo=r(Tbt,"model.train()"),Tbt.forEach(t),Xke.forEach(t),nxo=i(ia),T(G2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),MXe=i(f),Wi=n(f,"H2",{class:!0});var yQe=s(Wi);O2=n(yQe,"A",{id:!0,class:!0,href:!0});var Mbt=s(O2);Fge=n(Mbt,"SPAN",{});var Ebt=s(Fge);T(OL.$$.fragment,Ebt),Ebt.forEach(t),Mbt.forEach(t),sxo=i(yQe),Tge=n(yQe,"SPAN",{});var Cbt=s(Tge);lxo=r(Cbt,"AutoModelForCausalLM"),Cbt.forEach(t),yQe.forEach(t),EXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(VL.$$.fragment,al),ixo=i(al),Hi=n(al,"P",{});var jre=s(Hi);dxo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JG=n(jre,"A",{href:!0});var wbt=s(JG);cxo=r(wbt,"from_pretrained()"),wbt.forEach(t),fxo=r(jre," class method or the "),YG=n(jre,"A",{href:!0});var Abt=s(YG);mxo=r(Abt,"from_config()"),Abt.forEach(t),gxo=r(jre,` class
method.`),jre.forEach(t),hxo=i(al),XL=n(al,"P",{});var xQe=s(XL);pxo=r(xQe,"This class cannot be instantiated directly using "),Mge=n(xQe,"CODE",{});var Lbt=s(Mge);_xo=r(Lbt,"__init__()"),Lbt.forEach(t),uxo=r(xQe," (throws an error)."),xQe.forEach(t),bxo=i(al),ct=n(al,"DIV",{class:!0});var h6=s(ct);T(zL.$$.fragment,h6),vxo=i(h6),Ege=n(h6,"P",{});var ybt=s(Ege);Fxo=r(ybt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ybt.forEach(t),Txo=i(h6),Ui=n(h6,"P",{});var Dre=s(Ui);Mxo=r(Dre,`Note:
Loading a model from its configuration file does `),Cge=n(Dre,"STRONG",{});var xbt=s(Cge);Exo=r(xbt,"not"),xbt.forEach(t),Cxo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(Dre,"A",{href:!0});var $bt=s(KG);wxo=r($bt,"from_pretrained()"),$bt.forEach(t),Axo=r(Dre," to load the model weights."),Dre.forEach(t),Lxo=i(h6),T(V2.$$.fragment,h6),h6.forEach(t),yxo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(QL.$$.fragment,da),xxo=i(da),wge=n(da,"P",{});var kbt=s(wge);$xo=r(kbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kbt.forEach(t),kxo=i(da),qa=n(da,"P",{});var p6=s(qa);Sxo=r(p6,"The model class to instantiate is selected based on the "),Age=n(p6,"CODE",{});var Sbt=s(Age);Rxo=r(Sbt,"model_type"),Sbt.forEach(t),Pxo=r(p6,` property of the config object (either
passed as an argument or loaded from `),Lge=n(p6,"CODE",{});var Rbt=s(Lge);Bxo=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),Ixo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(p6,"CODE",{});var Pbt=s(yge);Nxo=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),qxo=r(p6,":"),p6.forEach(t),jxo=i(da),z=n(da,"UL",{});var Q=s(z);X2=n(Q,"LI",{});var zke=s(X2);xge=n(zke,"STRONG",{});var Bbt=s(xge);Dxo=r(Bbt,"bart"),Bbt.forEach(t),Gxo=r(zke," \u2014 "),ZG=n(zke,"A",{href:!0});var Ibt=s(ZG);Oxo=r(Ibt,"BartForCausalLM"),Ibt.forEach(t),Vxo=r(zke," (BART model)"),zke.forEach(t),Xxo=i(Q),z2=n(Q,"LI",{});var Qke=s(z2);$ge=n(Qke,"STRONG",{});var Nbt=s($ge);zxo=r(Nbt,"bert"),Nbt.forEach(t),Qxo=r(Qke," \u2014 "),eO=n(Qke,"A",{href:!0});var qbt=s(eO);Wxo=r(qbt,"BertLMHeadModel"),qbt.forEach(t),Hxo=r(Qke," (BERT model)"),Qke.forEach(t),Uxo=i(Q),Q2=n(Q,"LI",{});var Wke=s(Q2);kge=n(Wke,"STRONG",{});var jbt=s(kge);Jxo=r(jbt,"bert-generation"),jbt.forEach(t),Yxo=r(Wke," \u2014 "),oO=n(Wke,"A",{href:!0});var Dbt=s(oO);Kxo=r(Dbt,"BertGenerationDecoder"),Dbt.forEach(t),Zxo=r(Wke," (Bert Generation model)"),Wke.forEach(t),e$o=i(Q),W2=n(Q,"LI",{});var Hke=s(W2);Sge=n(Hke,"STRONG",{});var Gbt=s(Sge);o$o=r(Gbt,"big_bird"),Gbt.forEach(t),r$o=r(Hke," \u2014 "),rO=n(Hke,"A",{href:!0});var Obt=s(rO);t$o=r(Obt,"BigBirdForCausalLM"),Obt.forEach(t),a$o=r(Hke," (BigBird model)"),Hke.forEach(t),n$o=i(Q),H2=n(Q,"LI",{});var Uke=s(H2);Rge=n(Uke,"STRONG",{});var Vbt=s(Rge);s$o=r(Vbt,"bigbird_pegasus"),Vbt.forEach(t),l$o=r(Uke," \u2014 "),tO=n(Uke,"A",{href:!0});var Xbt=s(tO);i$o=r(Xbt,"BigBirdPegasusForCausalLM"),Xbt.forEach(t),d$o=r(Uke," (BigBird-Pegasus model)"),Uke.forEach(t),c$o=i(Q),U2=n(Q,"LI",{});var Jke=s(U2);Pge=n(Jke,"STRONG",{});var zbt=s(Pge);f$o=r(zbt,"blenderbot"),zbt.forEach(t),m$o=r(Jke," \u2014 "),aO=n(Jke,"A",{href:!0});var Qbt=s(aO);g$o=r(Qbt,"BlenderbotForCausalLM"),Qbt.forEach(t),h$o=r(Jke," (Blenderbot model)"),Jke.forEach(t),p$o=i(Q),J2=n(Q,"LI",{});var Yke=s(J2);Bge=n(Yke,"STRONG",{});var Wbt=s(Bge);_$o=r(Wbt,"blenderbot-small"),Wbt.forEach(t),u$o=r(Yke," \u2014 "),nO=n(Yke,"A",{href:!0});var Hbt=s(nO);b$o=r(Hbt,"BlenderbotSmallForCausalLM"),Hbt.forEach(t),v$o=r(Yke," (BlenderbotSmall model)"),Yke.forEach(t),F$o=i(Q),Y2=n(Q,"LI",{});var Kke=s(Y2);Ige=n(Kke,"STRONG",{});var Ubt=s(Ige);T$o=r(Ubt,"bloom"),Ubt.forEach(t),M$o=r(Kke," \u2014 "),sO=n(Kke,"A",{href:!0});var Jbt=s(sO);E$o=r(Jbt,"BloomForCausalLM"),Jbt.forEach(t),C$o=r(Kke," (BLOOM model)"),Kke.forEach(t),w$o=i(Q),K2=n(Q,"LI",{});var Zke=s(K2);Nge=n(Zke,"STRONG",{});var Ybt=s(Nge);A$o=r(Ybt,"camembert"),Ybt.forEach(t),L$o=r(Zke," \u2014 "),lO=n(Zke,"A",{href:!0});var Kbt=s(lO);y$o=r(Kbt,"CamembertForCausalLM"),Kbt.forEach(t),x$o=r(Zke," (CamemBERT model)"),Zke.forEach(t),$$o=i(Q),Z2=n(Q,"LI",{});var eSe=s(Z2);qge=n(eSe,"STRONG",{});var Zbt=s(qge);k$o=r(Zbt,"codegen"),Zbt.forEach(t),S$o=r(eSe," \u2014 "),iO=n(eSe,"A",{href:!0});var evt=s(iO);R$o=r(evt,"CodeGenForCausalLM"),evt.forEach(t),P$o=r(eSe," (CodeGen model)"),eSe.forEach(t),B$o=i(Q),e1=n(Q,"LI",{});var oSe=s(e1);jge=n(oSe,"STRONG",{});var ovt=s(jge);I$o=r(ovt,"ctrl"),ovt.forEach(t),N$o=r(oSe," \u2014 "),dO=n(oSe,"A",{href:!0});var rvt=s(dO);q$o=r(rvt,"CTRLLMHeadModel"),rvt.forEach(t),j$o=r(oSe," (CTRL model)"),oSe.forEach(t),D$o=i(Q),o1=n(Q,"LI",{});var rSe=s(o1);Dge=n(rSe,"STRONG",{});var tvt=s(Dge);G$o=r(tvt,"data2vec-text"),tvt.forEach(t),O$o=r(rSe," \u2014 "),cO=n(rSe,"A",{href:!0});var avt=s(cO);V$o=r(avt,"Data2VecTextForCausalLM"),avt.forEach(t),X$o=r(rSe," (Data2VecText model)"),rSe.forEach(t),z$o=i(Q),r1=n(Q,"LI",{});var tSe=s(r1);Gge=n(tSe,"STRONG",{});var nvt=s(Gge);Q$o=r(nvt,"electra"),nvt.forEach(t),W$o=r(tSe," \u2014 "),fO=n(tSe,"A",{href:!0});var svt=s(fO);H$o=r(svt,"ElectraForCausalLM"),svt.forEach(t),U$o=r(tSe," (ELECTRA model)"),tSe.forEach(t),J$o=i(Q),t1=n(Q,"LI",{});var aSe=s(t1);Oge=n(aSe,"STRONG",{});var lvt=s(Oge);Y$o=r(lvt,"gpt2"),lvt.forEach(t),K$o=r(aSe," \u2014 "),mO=n(aSe,"A",{href:!0});var ivt=s(mO);Z$o=r(ivt,"GPT2LMHeadModel"),ivt.forEach(t),eko=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),oko=i(Q),a1=n(Q,"LI",{});var nSe=s(a1);Vge=n(nSe,"STRONG",{});var dvt=s(Vge);rko=r(dvt,"gpt_neo"),dvt.forEach(t),tko=r(nSe," \u2014 "),gO=n(nSe,"A",{href:!0});var cvt=s(gO);ako=r(cvt,"GPTNeoForCausalLM"),cvt.forEach(t),nko=r(nSe," (GPT Neo model)"),nSe.forEach(t),sko=i(Q),n1=n(Q,"LI",{});var sSe=s(n1);Xge=n(sSe,"STRONG",{});var fvt=s(Xge);lko=r(fvt,"gpt_neox"),fvt.forEach(t),iko=r(sSe," \u2014 "),hO=n(sSe,"A",{href:!0});var mvt=s(hO);dko=r(mvt,"GPTNeoXForCausalLM"),mvt.forEach(t),cko=r(sSe," (GPT NeoX model)"),sSe.forEach(t),fko=i(Q),s1=n(Q,"LI",{});var lSe=s(s1);zge=n(lSe,"STRONG",{});var gvt=s(zge);mko=r(gvt,"gptj"),gvt.forEach(t),gko=r(lSe," \u2014 "),pO=n(lSe,"A",{href:!0});var hvt=s(pO);hko=r(hvt,"GPTJForCausalLM"),hvt.forEach(t),pko=r(lSe," (GPT-J model)"),lSe.forEach(t),_ko=i(Q),l1=n(Q,"LI",{});var iSe=s(l1);Qge=n(iSe,"STRONG",{});var pvt=s(Qge);uko=r(pvt,"marian"),pvt.forEach(t),bko=r(iSe," \u2014 "),_O=n(iSe,"A",{href:!0});var _vt=s(_O);vko=r(_vt,"MarianForCausalLM"),_vt.forEach(t),Fko=r(iSe," (Marian model)"),iSe.forEach(t),Tko=i(Q),i1=n(Q,"LI",{});var dSe=s(i1);Wge=n(dSe,"STRONG",{});var uvt=s(Wge);Mko=r(uvt,"mbart"),uvt.forEach(t),Eko=r(dSe," \u2014 "),uO=n(dSe,"A",{href:!0});var bvt=s(uO);Cko=r(bvt,"MBartForCausalLM"),bvt.forEach(t),wko=r(dSe," (mBART model)"),dSe.forEach(t),Ako=i(Q),d1=n(Q,"LI",{});var cSe=s(d1);Hge=n(cSe,"STRONG",{});var vvt=s(Hge);Lko=r(vvt,"megatron-bert"),vvt.forEach(t),yko=r(cSe," \u2014 "),bO=n(cSe,"A",{href:!0});var Fvt=s(bO);xko=r(Fvt,"MegatronBertForCausalLM"),Fvt.forEach(t),$ko=r(cSe," (Megatron-BERT model)"),cSe.forEach(t),kko=i(Q),c1=n(Q,"LI",{});var fSe=s(c1);Uge=n(fSe,"STRONG",{});var Tvt=s(Uge);Sko=r(Tvt,"mvp"),Tvt.forEach(t),Rko=r(fSe," \u2014 "),vO=n(fSe,"A",{href:!0});var Mvt=s(vO);Pko=r(Mvt,"MvpForCausalLM"),Mvt.forEach(t),Bko=r(fSe," (MVP model)"),fSe.forEach(t),Iko=i(Q),f1=n(Q,"LI",{});var mSe=s(f1);Jge=n(mSe,"STRONG",{});var Evt=s(Jge);Nko=r(Evt,"openai-gpt"),Evt.forEach(t),qko=r(mSe," \u2014 "),FO=n(mSe,"A",{href:!0});var Cvt=s(FO);jko=r(Cvt,"OpenAIGPTLMHeadModel"),Cvt.forEach(t),Dko=r(mSe," (OpenAI GPT model)"),mSe.forEach(t),Gko=i(Q),m1=n(Q,"LI",{});var gSe=s(m1);Yge=n(gSe,"STRONG",{});var wvt=s(Yge);Oko=r(wvt,"opt"),wvt.forEach(t),Vko=r(gSe," \u2014 "),TO=n(gSe,"A",{href:!0});var Avt=s(TO);Xko=r(Avt,"OPTForCausalLM"),Avt.forEach(t),zko=r(gSe," (OPT model)"),gSe.forEach(t),Qko=i(Q),g1=n(Q,"LI",{});var hSe=s(g1);Kge=n(hSe,"STRONG",{});var Lvt=s(Kge);Wko=r(Lvt,"pegasus"),Lvt.forEach(t),Hko=r(hSe," \u2014 "),MO=n(hSe,"A",{href:!0});var yvt=s(MO);Uko=r(yvt,"PegasusForCausalLM"),yvt.forEach(t),Jko=r(hSe," (Pegasus model)"),hSe.forEach(t),Yko=i(Q),h1=n(Q,"LI",{});var pSe=s(h1);Zge=n(pSe,"STRONG",{});var xvt=s(Zge);Kko=r(xvt,"plbart"),xvt.forEach(t),Zko=r(pSe," \u2014 "),EO=n(pSe,"A",{href:!0});var $vt=s(EO);eSo=r($vt,"PLBartForCausalLM"),$vt.forEach(t),oSo=r(pSe," (PLBart model)"),pSe.forEach(t),rSo=i(Q),p1=n(Q,"LI",{});var _Se=s(p1);ehe=n(_Se,"STRONG",{});var kvt=s(ehe);tSo=r(kvt,"prophetnet"),kvt.forEach(t),aSo=r(_Se," \u2014 "),CO=n(_Se,"A",{href:!0});var Svt=s(CO);nSo=r(Svt,"ProphetNetForCausalLM"),Svt.forEach(t),sSo=r(_Se," (ProphetNet model)"),_Se.forEach(t),lSo=i(Q),_1=n(Q,"LI",{});var uSe=s(_1);ohe=n(uSe,"STRONG",{});var Rvt=s(ohe);iSo=r(Rvt,"qdqbert"),Rvt.forEach(t),dSo=r(uSe," \u2014 "),wO=n(uSe,"A",{href:!0});var Pvt=s(wO);cSo=r(Pvt,"QDQBertLMHeadModel"),Pvt.forEach(t),fSo=r(uSe," (QDQBert model)"),uSe.forEach(t),mSo=i(Q),u1=n(Q,"LI",{});var bSe=s(u1);rhe=n(bSe,"STRONG",{});var Bvt=s(rhe);gSo=r(Bvt,"reformer"),Bvt.forEach(t),hSo=r(bSe," \u2014 "),AO=n(bSe,"A",{href:!0});var Ivt=s(AO);pSo=r(Ivt,"ReformerModelWithLMHead"),Ivt.forEach(t),_So=r(bSe," (Reformer model)"),bSe.forEach(t),uSo=i(Q),b1=n(Q,"LI",{});var vSe=s(b1);the=n(vSe,"STRONG",{});var Nvt=s(the);bSo=r(Nvt,"rembert"),Nvt.forEach(t),vSo=r(vSe," \u2014 "),LO=n(vSe,"A",{href:!0});var qvt=s(LO);FSo=r(qvt,"RemBertForCausalLM"),qvt.forEach(t),TSo=r(vSe," (RemBERT model)"),vSe.forEach(t),MSo=i(Q),v1=n(Q,"LI",{});var FSe=s(v1);ahe=n(FSe,"STRONG",{});var jvt=s(ahe);ESo=r(jvt,"roberta"),jvt.forEach(t),CSo=r(FSe," \u2014 "),yO=n(FSe,"A",{href:!0});var Dvt=s(yO);wSo=r(Dvt,"RobertaForCausalLM"),Dvt.forEach(t),ASo=r(FSe," (RoBERTa model)"),FSe.forEach(t),LSo=i(Q),F1=n(Q,"LI",{});var TSe=s(F1);nhe=n(TSe,"STRONG",{});var Gvt=s(nhe);ySo=r(Gvt,"roformer"),Gvt.forEach(t),xSo=r(TSe," \u2014 "),xO=n(TSe,"A",{href:!0});var Ovt=s(xO);$So=r(Ovt,"RoFormerForCausalLM"),Ovt.forEach(t),kSo=r(TSe," (RoFormer model)"),TSe.forEach(t),SSo=i(Q),T1=n(Q,"LI",{});var MSe=s(T1);she=n(MSe,"STRONG",{});var Vvt=s(she);RSo=r(Vvt,"speech_to_text_2"),Vvt.forEach(t),PSo=r(MSe," \u2014 "),$O=n(MSe,"A",{href:!0});var Xvt=s($O);BSo=r(Xvt,"Speech2Text2ForCausalLM"),Xvt.forEach(t),ISo=r(MSe," (Speech2Text2 model)"),MSe.forEach(t),NSo=i(Q),M1=n(Q,"LI",{});var ESe=s(M1);lhe=n(ESe,"STRONG",{});var zvt=s(lhe);qSo=r(zvt,"transfo-xl"),zvt.forEach(t),jSo=r(ESe," \u2014 "),kO=n(ESe,"A",{href:!0});var Qvt=s(kO);DSo=r(Qvt,"TransfoXLLMHeadModel"),Qvt.forEach(t),GSo=r(ESe," (Transformer-XL model)"),ESe.forEach(t),OSo=i(Q),E1=n(Q,"LI",{});var CSe=s(E1);ihe=n(CSe,"STRONG",{});var Wvt=s(ihe);VSo=r(Wvt,"trocr"),Wvt.forEach(t),XSo=r(CSe," \u2014 "),SO=n(CSe,"A",{href:!0});var Hvt=s(SO);zSo=r(Hvt,"TrOCRForCausalLM"),Hvt.forEach(t),QSo=r(CSe," (TrOCR model)"),CSe.forEach(t),WSo=i(Q),C1=n(Q,"LI",{});var wSe=s(C1);dhe=n(wSe,"STRONG",{});var Uvt=s(dhe);HSo=r(Uvt,"xglm"),Uvt.forEach(t),USo=r(wSe," \u2014 "),RO=n(wSe,"A",{href:!0});var Jvt=s(RO);JSo=r(Jvt,"XGLMForCausalLM"),Jvt.forEach(t),YSo=r(wSe," (XGLM model)"),wSe.forEach(t),KSo=i(Q),w1=n(Q,"LI",{});var ASe=s(w1);che=n(ASe,"STRONG",{});var Yvt=s(che);ZSo=r(Yvt,"xlm"),Yvt.forEach(t),eRo=r(ASe," \u2014 "),PO=n(ASe,"A",{href:!0});var Kvt=s(PO);oRo=r(Kvt,"XLMWithLMHeadModel"),Kvt.forEach(t),rRo=r(ASe," (XLM model)"),ASe.forEach(t),tRo=i(Q),A1=n(Q,"LI",{});var LSe=s(A1);fhe=n(LSe,"STRONG",{});var Zvt=s(fhe);aRo=r(Zvt,"xlm-prophetnet"),Zvt.forEach(t),nRo=r(LSe," \u2014 "),BO=n(LSe,"A",{href:!0});var e0t=s(BO);sRo=r(e0t,"XLMProphetNetForCausalLM"),e0t.forEach(t),lRo=r(LSe," (XLM-ProphetNet model)"),LSe.forEach(t),iRo=i(Q),L1=n(Q,"LI",{});var ySe=s(L1);mhe=n(ySe,"STRONG",{});var o0t=s(mhe);dRo=r(o0t,"xlm-roberta"),o0t.forEach(t),cRo=r(ySe," \u2014 "),IO=n(ySe,"A",{href:!0});var r0t=s(IO);fRo=r(r0t,"XLMRobertaForCausalLM"),r0t.forEach(t),mRo=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),gRo=i(Q),y1=n(Q,"LI",{});var xSe=s(y1);ghe=n(xSe,"STRONG",{});var t0t=s(ghe);hRo=r(t0t,"xlm-roberta-xl"),t0t.forEach(t),pRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var a0t=s(NO);_Ro=r(a0t,"XLMRobertaXLForCausalLM"),a0t.forEach(t),uRo=r(xSe," (XLM-RoBERTa-XL model)"),xSe.forEach(t),bRo=i(Q),x1=n(Q,"LI",{});var $Se=s(x1);hhe=n($Se,"STRONG",{});var n0t=s(hhe);vRo=r(n0t,"xlnet"),n0t.forEach(t),FRo=r($Se," \u2014 "),qO=n($Se,"A",{href:!0});var s0t=s(qO);TRo=r(s0t,"XLNetLMHeadModel"),s0t.forEach(t),MRo=r($Se," (XLNet model)"),$Se.forEach(t),Q.forEach(t),ERo=i(da),$1=n(da,"P",{});var kSe=s($1);CRo=r(kSe,"The model is set in evaluation mode by default using "),phe=n(kSe,"CODE",{});var l0t=s(phe);wRo=r(l0t,"model.eval()"),l0t.forEach(t),ARo=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(kSe,"CODE",{});var i0t=s(_he);LRo=r(i0t,"model.train()"),i0t.forEach(t),kSe.forEach(t),yRo=i(da),T(k1.$$.fragment,da),da.forEach(t),al.forEach(t),CXe=i(f),Ji=n(f,"H2",{class:!0});var $Qe=s(Ji);S1=n($Qe,"A",{id:!0,class:!0,href:!0});var d0t=s(S1);uhe=n(d0t,"SPAN",{});var c0t=s(uhe);T(WL.$$.fragment,c0t),c0t.forEach(t),d0t.forEach(t),xRo=i($Qe),bhe=n($Qe,"SPAN",{});var f0t=s(bhe);$Ro=r(f0t,"AutoModelForMaskedLM"),f0t.forEach(t),$Qe.forEach(t),wXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(HL.$$.fragment,nl),kRo=i(nl),Yi=n(nl,"P",{});var Gre=s(Yi);SRo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jO=n(Gre,"A",{href:!0});var m0t=s(jO);RRo=r(m0t,"from_pretrained()"),m0t.forEach(t),PRo=r(Gre," class method or the "),DO=n(Gre,"A",{href:!0});var g0t=s(DO);BRo=r(g0t,"from_config()"),g0t.forEach(t),IRo=r(Gre,` class
method.`),Gre.forEach(t),NRo=i(nl),UL=n(nl,"P",{});var kQe=s(UL);qRo=r(kQe,"This class cannot be instantiated directly using "),vhe=n(kQe,"CODE",{});var h0t=s(vhe);jRo=r(h0t,"__init__()"),h0t.forEach(t),DRo=r(kQe," (throws an error)."),kQe.forEach(t),GRo=i(nl),ft=n(nl,"DIV",{class:!0});var _6=s(ft);T(JL.$$.fragment,_6),ORo=i(_6),Fhe=n(_6,"P",{});var p0t=s(Fhe);VRo=r(p0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p0t.forEach(t),XRo=i(_6),Ki=n(_6,"P",{});var Ore=s(Ki);zRo=r(Ore,`Note:
Loading a model from its configuration file does `),The=n(Ore,"STRONG",{});var _0t=s(The);QRo=r(_0t,"not"),_0t.forEach(t),WRo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(Ore,"A",{href:!0});var u0t=s(GO);HRo=r(u0t,"from_pretrained()"),u0t.forEach(t),URo=r(Ore," to load the model weights."),Ore.forEach(t),JRo=i(_6),T(R1.$$.fragment,_6),_6.forEach(t),YRo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(YL.$$.fragment,ca),KRo=i(ca),Mhe=n(ca,"P",{});var b0t=s(Mhe);ZRo=r(b0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b0t.forEach(t),ePo=i(ca),ja=n(ca,"P",{});var u6=s(ja);oPo=r(u6,"The model class to instantiate is selected based on the "),Ehe=n(u6,"CODE",{});var v0t=s(Ehe);rPo=r(v0t,"model_type"),v0t.forEach(t),tPo=r(u6,` property of the config object (either
passed as an argument or loaded from `),Che=n(u6,"CODE",{});var F0t=s(Che);aPo=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),nPo=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(u6,"CODE",{});var T0t=s(whe);sPo=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),lPo=r(u6,":"),u6.forEach(t),iPo=i(ca),W=n(ca,"UL",{});var H=s(W);P1=n(H,"LI",{});var SSe=s(P1);Ahe=n(SSe,"STRONG",{});var M0t=s(Ahe);dPo=r(M0t,"albert"),M0t.forEach(t),cPo=r(SSe," \u2014 "),OO=n(SSe,"A",{href:!0});var E0t=s(OO);fPo=r(E0t,"AlbertForMaskedLM"),E0t.forEach(t),mPo=r(SSe," (ALBERT model)"),SSe.forEach(t),gPo=i(H),B1=n(H,"LI",{});var RSe=s(B1);Lhe=n(RSe,"STRONG",{});var C0t=s(Lhe);hPo=r(C0t,"bart"),C0t.forEach(t),pPo=r(RSe," \u2014 "),VO=n(RSe,"A",{href:!0});var w0t=s(VO);_Po=r(w0t,"BartForConditionalGeneration"),w0t.forEach(t),uPo=r(RSe," (BART model)"),RSe.forEach(t),bPo=i(H),I1=n(H,"LI",{});var PSe=s(I1);yhe=n(PSe,"STRONG",{});var A0t=s(yhe);vPo=r(A0t,"bert"),A0t.forEach(t),FPo=r(PSe," \u2014 "),XO=n(PSe,"A",{href:!0});var L0t=s(XO);TPo=r(L0t,"BertForMaskedLM"),L0t.forEach(t),MPo=r(PSe," (BERT model)"),PSe.forEach(t),EPo=i(H),N1=n(H,"LI",{});var BSe=s(N1);xhe=n(BSe,"STRONG",{});var y0t=s(xhe);CPo=r(y0t,"big_bird"),y0t.forEach(t),wPo=r(BSe," \u2014 "),zO=n(BSe,"A",{href:!0});var x0t=s(zO);APo=r(x0t,"BigBirdForMaskedLM"),x0t.forEach(t),LPo=r(BSe," (BigBird model)"),BSe.forEach(t),yPo=i(H),q1=n(H,"LI",{});var ISe=s(q1);$he=n(ISe,"STRONG",{});var $0t=s($he);xPo=r($0t,"camembert"),$0t.forEach(t),$Po=r(ISe," \u2014 "),QO=n(ISe,"A",{href:!0});var k0t=s(QO);kPo=r(k0t,"CamembertForMaskedLM"),k0t.forEach(t),SPo=r(ISe," (CamemBERT model)"),ISe.forEach(t),RPo=i(H),j1=n(H,"LI",{});var NSe=s(j1);khe=n(NSe,"STRONG",{});var S0t=s(khe);PPo=r(S0t,"convbert"),S0t.forEach(t),BPo=r(NSe," \u2014 "),WO=n(NSe,"A",{href:!0});var R0t=s(WO);IPo=r(R0t,"ConvBertForMaskedLM"),R0t.forEach(t),NPo=r(NSe," (ConvBERT model)"),NSe.forEach(t),qPo=i(H),D1=n(H,"LI",{});var qSe=s(D1);She=n(qSe,"STRONG",{});var P0t=s(She);jPo=r(P0t,"data2vec-text"),P0t.forEach(t),DPo=r(qSe," \u2014 "),HO=n(qSe,"A",{href:!0});var B0t=s(HO);GPo=r(B0t,"Data2VecTextForMaskedLM"),B0t.forEach(t),OPo=r(qSe," (Data2VecText model)"),qSe.forEach(t),VPo=i(H),G1=n(H,"LI",{});var jSe=s(G1);Rhe=n(jSe,"STRONG",{});var I0t=s(Rhe);XPo=r(I0t,"deberta"),I0t.forEach(t),zPo=r(jSe," \u2014 "),UO=n(jSe,"A",{href:!0});var N0t=s(UO);QPo=r(N0t,"DebertaForMaskedLM"),N0t.forEach(t),WPo=r(jSe," (DeBERTa model)"),jSe.forEach(t),HPo=i(H),O1=n(H,"LI",{});var DSe=s(O1);Phe=n(DSe,"STRONG",{});var q0t=s(Phe);UPo=r(q0t,"deberta-v2"),q0t.forEach(t),JPo=r(DSe," \u2014 "),JO=n(DSe,"A",{href:!0});var j0t=s(JO);YPo=r(j0t,"DebertaV2ForMaskedLM"),j0t.forEach(t),KPo=r(DSe," (DeBERTa-v2 model)"),DSe.forEach(t),ZPo=i(H),V1=n(H,"LI",{});var GSe=s(V1);Bhe=n(GSe,"STRONG",{});var D0t=s(Bhe);eBo=r(D0t,"distilbert"),D0t.forEach(t),oBo=r(GSe," \u2014 "),YO=n(GSe,"A",{href:!0});var G0t=s(YO);rBo=r(G0t,"DistilBertForMaskedLM"),G0t.forEach(t),tBo=r(GSe," (DistilBERT model)"),GSe.forEach(t),aBo=i(H),X1=n(H,"LI",{});var OSe=s(X1);Ihe=n(OSe,"STRONG",{});var O0t=s(Ihe);nBo=r(O0t,"electra"),O0t.forEach(t),sBo=r(OSe," \u2014 "),KO=n(OSe,"A",{href:!0});var V0t=s(KO);lBo=r(V0t,"ElectraForMaskedLM"),V0t.forEach(t),iBo=r(OSe," (ELECTRA model)"),OSe.forEach(t),dBo=i(H),z1=n(H,"LI",{});var VSe=s(z1);Nhe=n(VSe,"STRONG",{});var X0t=s(Nhe);cBo=r(X0t,"flaubert"),X0t.forEach(t),fBo=r(VSe," \u2014 "),ZO=n(VSe,"A",{href:!0});var z0t=s(ZO);mBo=r(z0t,"FlaubertWithLMHeadModel"),z0t.forEach(t),gBo=r(VSe," (FlauBERT model)"),VSe.forEach(t),hBo=i(H),Q1=n(H,"LI",{});var XSe=s(Q1);qhe=n(XSe,"STRONG",{});var Q0t=s(qhe);pBo=r(Q0t,"fnet"),Q0t.forEach(t),_Bo=r(XSe," \u2014 "),eV=n(XSe,"A",{href:!0});var W0t=s(eV);uBo=r(W0t,"FNetForMaskedLM"),W0t.forEach(t),bBo=r(XSe," (FNet model)"),XSe.forEach(t),vBo=i(H),W1=n(H,"LI",{});var zSe=s(W1);jhe=n(zSe,"STRONG",{});var H0t=s(jhe);FBo=r(H0t,"funnel"),H0t.forEach(t),TBo=r(zSe," \u2014 "),oV=n(zSe,"A",{href:!0});var U0t=s(oV);MBo=r(U0t,"FunnelForMaskedLM"),U0t.forEach(t),EBo=r(zSe," (Funnel Transformer model)"),zSe.forEach(t),CBo=i(H),H1=n(H,"LI",{});var QSe=s(H1);Dhe=n(QSe,"STRONG",{});var J0t=s(Dhe);wBo=r(J0t,"ibert"),J0t.forEach(t),ABo=r(QSe," \u2014 "),rV=n(QSe,"A",{href:!0});var Y0t=s(rV);LBo=r(Y0t,"IBertForMaskedLM"),Y0t.forEach(t),yBo=r(QSe," (I-BERT model)"),QSe.forEach(t),xBo=i(H),U1=n(H,"LI",{});var WSe=s(U1);Ghe=n(WSe,"STRONG",{});var K0t=s(Ghe);$Bo=r(K0t,"layoutlm"),K0t.forEach(t),kBo=r(WSe," \u2014 "),tV=n(WSe,"A",{href:!0});var Z0t=s(tV);SBo=r(Z0t,"LayoutLMForMaskedLM"),Z0t.forEach(t),RBo=r(WSe," (LayoutLM model)"),WSe.forEach(t),PBo=i(H),J1=n(H,"LI",{});var HSe=s(J1);Ohe=n(HSe,"STRONG",{});var eFt=s(Ohe);BBo=r(eFt,"longformer"),eFt.forEach(t),IBo=r(HSe," \u2014 "),aV=n(HSe,"A",{href:!0});var oFt=s(aV);NBo=r(oFt,"LongformerForMaskedLM"),oFt.forEach(t),qBo=r(HSe," (Longformer model)"),HSe.forEach(t),jBo=i(H),Y1=n(H,"LI",{});var USe=s(Y1);Vhe=n(USe,"STRONG",{});var rFt=s(Vhe);DBo=r(rFt,"luke"),rFt.forEach(t),GBo=r(USe," \u2014 "),nV=n(USe,"A",{href:!0});var tFt=s(nV);OBo=r(tFt,"LukeForMaskedLM"),tFt.forEach(t),VBo=r(USe," (LUKE model)"),USe.forEach(t),XBo=i(H),K1=n(H,"LI",{});var JSe=s(K1);Xhe=n(JSe,"STRONG",{});var aFt=s(Xhe);zBo=r(aFt,"mbart"),aFt.forEach(t),QBo=r(JSe," \u2014 "),sV=n(JSe,"A",{href:!0});var nFt=s(sV);WBo=r(nFt,"MBartForConditionalGeneration"),nFt.forEach(t),HBo=r(JSe," (mBART model)"),JSe.forEach(t),UBo=i(H),Z1=n(H,"LI",{});var YSe=s(Z1);zhe=n(YSe,"STRONG",{});var sFt=s(zhe);JBo=r(sFt,"megatron-bert"),sFt.forEach(t),YBo=r(YSe," \u2014 "),lV=n(YSe,"A",{href:!0});var lFt=s(lV);KBo=r(lFt,"MegatronBertForMaskedLM"),lFt.forEach(t),ZBo=r(YSe," (Megatron-BERT model)"),YSe.forEach(t),eIo=i(H),eb=n(H,"LI",{});var KSe=s(eb);Qhe=n(KSe,"STRONG",{});var iFt=s(Qhe);oIo=r(iFt,"mobilebert"),iFt.forEach(t),rIo=r(KSe," \u2014 "),iV=n(KSe,"A",{href:!0});var dFt=s(iV);tIo=r(dFt,"MobileBertForMaskedLM"),dFt.forEach(t),aIo=r(KSe," (MobileBERT model)"),KSe.forEach(t),nIo=i(H),ob=n(H,"LI",{});var ZSe=s(ob);Whe=n(ZSe,"STRONG",{});var cFt=s(Whe);sIo=r(cFt,"mpnet"),cFt.forEach(t),lIo=r(ZSe," \u2014 "),dV=n(ZSe,"A",{href:!0});var fFt=s(dV);iIo=r(fFt,"MPNetForMaskedLM"),fFt.forEach(t),dIo=r(ZSe," (MPNet model)"),ZSe.forEach(t),cIo=i(H),rb=n(H,"LI",{});var eRe=s(rb);Hhe=n(eRe,"STRONG",{});var mFt=s(Hhe);fIo=r(mFt,"mvp"),mFt.forEach(t),mIo=r(eRe," \u2014 "),cV=n(eRe,"A",{href:!0});var gFt=s(cV);gIo=r(gFt,"MvpForConditionalGeneration"),gFt.forEach(t),hIo=r(eRe," (MVP model)"),eRe.forEach(t),pIo=i(H),tb=n(H,"LI",{});var oRe=s(tb);Uhe=n(oRe,"STRONG",{});var hFt=s(Uhe);_Io=r(hFt,"nezha"),hFt.forEach(t),uIo=r(oRe," \u2014 "),fV=n(oRe,"A",{href:!0});var pFt=s(fV);bIo=r(pFt,"NezhaForMaskedLM"),pFt.forEach(t),vIo=r(oRe," (Nezha model)"),oRe.forEach(t),FIo=i(H),ab=n(H,"LI",{});var rRe=s(ab);Jhe=n(rRe,"STRONG",{});var _Ft=s(Jhe);TIo=r(_Ft,"nystromformer"),_Ft.forEach(t),MIo=r(rRe," \u2014 "),mV=n(rRe,"A",{href:!0});var uFt=s(mV);EIo=r(uFt,"NystromformerForMaskedLM"),uFt.forEach(t),CIo=r(rRe," (Nystr\xF6mformer model)"),rRe.forEach(t),wIo=i(H),nb=n(H,"LI",{});var tRe=s(nb);Yhe=n(tRe,"STRONG",{});var bFt=s(Yhe);AIo=r(bFt,"perceiver"),bFt.forEach(t),LIo=r(tRe," \u2014 "),gV=n(tRe,"A",{href:!0});var vFt=s(gV);yIo=r(vFt,"PerceiverForMaskedLM"),vFt.forEach(t),xIo=r(tRe," (Perceiver model)"),tRe.forEach(t),$Io=i(H),sb=n(H,"LI",{});var aRe=s(sb);Khe=n(aRe,"STRONG",{});var FFt=s(Khe);kIo=r(FFt,"qdqbert"),FFt.forEach(t),SIo=r(aRe," \u2014 "),hV=n(aRe,"A",{href:!0});var TFt=s(hV);RIo=r(TFt,"QDQBertForMaskedLM"),TFt.forEach(t),PIo=r(aRe," (QDQBert model)"),aRe.forEach(t),BIo=i(H),lb=n(H,"LI",{});var nRe=s(lb);Zhe=n(nRe,"STRONG",{});var MFt=s(Zhe);IIo=r(MFt,"reformer"),MFt.forEach(t),NIo=r(nRe," \u2014 "),pV=n(nRe,"A",{href:!0});var EFt=s(pV);qIo=r(EFt,"ReformerForMaskedLM"),EFt.forEach(t),jIo=r(nRe," (Reformer model)"),nRe.forEach(t),DIo=i(H),ib=n(H,"LI",{});var sRe=s(ib);epe=n(sRe,"STRONG",{});var CFt=s(epe);GIo=r(CFt,"rembert"),CFt.forEach(t),OIo=r(sRe," \u2014 "),_V=n(sRe,"A",{href:!0});var wFt=s(_V);VIo=r(wFt,"RemBertForMaskedLM"),wFt.forEach(t),XIo=r(sRe," (RemBERT model)"),sRe.forEach(t),zIo=i(H),db=n(H,"LI",{});var lRe=s(db);ope=n(lRe,"STRONG",{});var AFt=s(ope);QIo=r(AFt,"roberta"),AFt.forEach(t),WIo=r(lRe," \u2014 "),uV=n(lRe,"A",{href:!0});var LFt=s(uV);HIo=r(LFt,"RobertaForMaskedLM"),LFt.forEach(t),UIo=r(lRe," (RoBERTa model)"),lRe.forEach(t),JIo=i(H),cb=n(H,"LI",{});var iRe=s(cb);rpe=n(iRe,"STRONG",{});var yFt=s(rpe);YIo=r(yFt,"roformer"),yFt.forEach(t),KIo=r(iRe," \u2014 "),bV=n(iRe,"A",{href:!0});var xFt=s(bV);ZIo=r(xFt,"RoFormerForMaskedLM"),xFt.forEach(t),eNo=r(iRe," (RoFormer model)"),iRe.forEach(t),oNo=i(H),fb=n(H,"LI",{});var dRe=s(fb);tpe=n(dRe,"STRONG",{});var $Ft=s(tpe);rNo=r($Ft,"squeezebert"),$Ft.forEach(t),tNo=r(dRe," \u2014 "),vV=n(dRe,"A",{href:!0});var kFt=s(vV);aNo=r(kFt,"SqueezeBertForMaskedLM"),kFt.forEach(t),nNo=r(dRe," (SqueezeBERT model)"),dRe.forEach(t),sNo=i(H),mb=n(H,"LI",{});var cRe=s(mb);ape=n(cRe,"STRONG",{});var SFt=s(ape);lNo=r(SFt,"tapas"),SFt.forEach(t),iNo=r(cRe," \u2014 "),FV=n(cRe,"A",{href:!0});var RFt=s(FV);dNo=r(RFt,"TapasForMaskedLM"),RFt.forEach(t),cNo=r(cRe," (TAPAS model)"),cRe.forEach(t),fNo=i(H),gb=n(H,"LI",{});var fRe=s(gb);npe=n(fRe,"STRONG",{});var PFt=s(npe);mNo=r(PFt,"wav2vec2"),PFt.forEach(t),gNo=r(fRe," \u2014 "),spe=n(fRe,"CODE",{});var BFt=s(spe);hNo=r(BFt,"Wav2Vec2ForMaskedLM"),BFt.forEach(t),pNo=r(fRe," (Wav2Vec2 model)"),fRe.forEach(t),_No=i(H),hb=n(H,"LI",{});var mRe=s(hb);lpe=n(mRe,"STRONG",{});var IFt=s(lpe);uNo=r(IFt,"xlm"),IFt.forEach(t),bNo=r(mRe," \u2014 "),TV=n(mRe,"A",{href:!0});var NFt=s(TV);vNo=r(NFt,"XLMWithLMHeadModel"),NFt.forEach(t),FNo=r(mRe," (XLM model)"),mRe.forEach(t),TNo=i(H),pb=n(H,"LI",{});var gRe=s(pb);ipe=n(gRe,"STRONG",{});var qFt=s(ipe);MNo=r(qFt,"xlm-roberta"),qFt.forEach(t),ENo=r(gRe," \u2014 "),MV=n(gRe,"A",{href:!0});var jFt=s(MV);CNo=r(jFt,"XLMRobertaForMaskedLM"),jFt.forEach(t),wNo=r(gRe," (XLM-RoBERTa model)"),gRe.forEach(t),ANo=i(H),_b=n(H,"LI",{});var hRe=s(_b);dpe=n(hRe,"STRONG",{});var DFt=s(dpe);LNo=r(DFt,"xlm-roberta-xl"),DFt.forEach(t),yNo=r(hRe," \u2014 "),EV=n(hRe,"A",{href:!0});var GFt=s(EV);xNo=r(GFt,"XLMRobertaXLForMaskedLM"),GFt.forEach(t),$No=r(hRe," (XLM-RoBERTa-XL model)"),hRe.forEach(t),kNo=i(H),ub=n(H,"LI",{});var pRe=s(ub);cpe=n(pRe,"STRONG",{});var OFt=s(cpe);SNo=r(OFt,"yoso"),OFt.forEach(t),RNo=r(pRe," \u2014 "),CV=n(pRe,"A",{href:!0});var VFt=s(CV);PNo=r(VFt,"YosoForMaskedLM"),VFt.forEach(t),BNo=r(pRe," (YOSO model)"),pRe.forEach(t),H.forEach(t),INo=i(ca),bb=n(ca,"P",{});var _Re=s(bb);NNo=r(_Re,"The model is set in evaluation mode by default using "),fpe=n(_Re,"CODE",{});var XFt=s(fpe);qNo=r(XFt,"model.eval()"),XFt.forEach(t),jNo=r(_Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(_Re,"CODE",{});var zFt=s(mpe);DNo=r(zFt,"model.train()"),zFt.forEach(t),_Re.forEach(t),GNo=i(ca),T(vb.$$.fragment,ca),ca.forEach(t),nl.forEach(t),AXe=i(f),Zi=n(f,"H2",{class:!0});var SQe=s(Zi);Fb=n(SQe,"A",{id:!0,class:!0,href:!0});var QFt=s(Fb);gpe=n(QFt,"SPAN",{});var WFt=s(gpe);T(KL.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),ONo=i(SQe),hpe=n(SQe,"SPAN",{});var HFt=s(hpe);VNo=r(HFt,"AutoModelForSeq2SeqLM"),HFt.forEach(t),SQe.forEach(t),LXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(ZL.$$.fragment,sl),XNo=i(sl),ed=n(sl,"P",{});var Vre=s(ed);zNo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wV=n(Vre,"A",{href:!0});var UFt=s(wV);QNo=r(UFt,"from_pretrained()"),UFt.forEach(t),WNo=r(Vre," class method or the "),AV=n(Vre,"A",{href:!0});var JFt=s(AV);HNo=r(JFt,"from_config()"),JFt.forEach(t),UNo=r(Vre,` class
method.`),Vre.forEach(t),JNo=i(sl),ey=n(sl,"P",{});var RQe=s(ey);YNo=r(RQe,"This class cannot be instantiated directly using "),ppe=n(RQe,"CODE",{});var YFt=s(ppe);KNo=r(YFt,"__init__()"),YFt.forEach(t),ZNo=r(RQe," (throws an error)."),RQe.forEach(t),eqo=i(sl),mt=n(sl,"DIV",{class:!0});var b6=s(mt);T(oy.$$.fragment,b6),oqo=i(b6),_pe=n(b6,"P",{});var KFt=s(_pe);rqo=r(KFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KFt.forEach(t),tqo=i(b6),od=n(b6,"P",{});var Xre=s(od);aqo=r(Xre,`Note:
Loading a model from its configuration file does `),upe=n(Xre,"STRONG",{});var ZFt=s(upe);nqo=r(ZFt,"not"),ZFt.forEach(t),sqo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(Xre,"A",{href:!0});var eTt=s(LV);lqo=r(eTt,"from_pretrained()"),eTt.forEach(t),iqo=r(Xre," to load the model weights."),Xre.forEach(t),dqo=i(b6),T(Tb.$$.fragment,b6),b6.forEach(t),cqo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(ry.$$.fragment,fa),fqo=i(fa),bpe=n(fa,"P",{});var oTt=s(bpe);mqo=r(oTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oTt.forEach(t),gqo=i(fa),Da=n(fa,"P",{});var v6=s(Da);hqo=r(v6,"The model class to instantiate is selected based on the "),vpe=n(v6,"CODE",{});var rTt=s(vpe);pqo=r(rTt,"model_type"),rTt.forEach(t),_qo=r(v6,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(v6,"CODE",{});var tTt=s(Fpe);uqo=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),bqo=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(v6,"CODE",{});var aTt=s(Tpe);vqo=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),Fqo=r(v6,":"),v6.forEach(t),Tqo=i(fa),pe=n(fa,"UL",{});var be=s(pe);Mb=n(be,"LI",{});var uRe=s(Mb);Mpe=n(uRe,"STRONG",{});var nTt=s(Mpe);Mqo=r(nTt,"bart"),nTt.forEach(t),Eqo=r(uRe," \u2014 "),yV=n(uRe,"A",{href:!0});var sTt=s(yV);Cqo=r(sTt,"BartForConditionalGeneration"),sTt.forEach(t),wqo=r(uRe," (BART model)"),uRe.forEach(t),Aqo=i(be),Eb=n(be,"LI",{});var bRe=s(Eb);Epe=n(bRe,"STRONG",{});var lTt=s(Epe);Lqo=r(lTt,"bigbird_pegasus"),lTt.forEach(t),yqo=r(bRe," \u2014 "),xV=n(bRe,"A",{href:!0});var iTt=s(xV);xqo=r(iTt,"BigBirdPegasusForConditionalGeneration"),iTt.forEach(t),$qo=r(bRe," (BigBird-Pegasus model)"),bRe.forEach(t),kqo=i(be),Cb=n(be,"LI",{});var vRe=s(Cb);Cpe=n(vRe,"STRONG",{});var dTt=s(Cpe);Sqo=r(dTt,"blenderbot"),dTt.forEach(t),Rqo=r(vRe," \u2014 "),$V=n(vRe,"A",{href:!0});var cTt=s($V);Pqo=r(cTt,"BlenderbotForConditionalGeneration"),cTt.forEach(t),Bqo=r(vRe," (Blenderbot model)"),vRe.forEach(t),Iqo=i(be),wb=n(be,"LI",{});var FRe=s(wb);wpe=n(FRe,"STRONG",{});var fTt=s(wpe);Nqo=r(fTt,"blenderbot-small"),fTt.forEach(t),qqo=r(FRe," \u2014 "),kV=n(FRe,"A",{href:!0});var mTt=s(kV);jqo=r(mTt,"BlenderbotSmallForConditionalGeneration"),mTt.forEach(t),Dqo=r(FRe," (BlenderbotSmall model)"),FRe.forEach(t),Gqo=i(be),Ab=n(be,"LI",{});var TRe=s(Ab);Ape=n(TRe,"STRONG",{});var gTt=s(Ape);Oqo=r(gTt,"encoder-decoder"),gTt.forEach(t),Vqo=r(TRe," \u2014 "),SV=n(TRe,"A",{href:!0});var hTt=s(SV);Xqo=r(hTt,"EncoderDecoderModel"),hTt.forEach(t),zqo=r(TRe," (Encoder decoder model)"),TRe.forEach(t),Qqo=i(be),Lb=n(be,"LI",{});var MRe=s(Lb);Lpe=n(MRe,"STRONG",{});var pTt=s(Lpe);Wqo=r(pTt,"fsmt"),pTt.forEach(t),Hqo=r(MRe," \u2014 "),RV=n(MRe,"A",{href:!0});var _Tt=s(RV);Uqo=r(_Tt,"FSMTForConditionalGeneration"),_Tt.forEach(t),Jqo=r(MRe," (FairSeq Machine-Translation model)"),MRe.forEach(t),Yqo=i(be),yb=n(be,"LI",{});var ERe=s(yb);ype=n(ERe,"STRONG",{});var uTt=s(ype);Kqo=r(uTt,"led"),uTt.forEach(t),Zqo=r(ERe," \u2014 "),PV=n(ERe,"A",{href:!0});var bTt=s(PV);ejo=r(bTt,"LEDForConditionalGeneration"),bTt.forEach(t),ojo=r(ERe," (LED model)"),ERe.forEach(t),rjo=i(be),xb=n(be,"LI",{});var CRe=s(xb);xpe=n(CRe,"STRONG",{});var vTt=s(xpe);tjo=r(vTt,"longt5"),vTt.forEach(t),ajo=r(CRe," \u2014 "),BV=n(CRe,"A",{href:!0});var FTt=s(BV);njo=r(FTt,"LongT5ForConditionalGeneration"),FTt.forEach(t),sjo=r(CRe," (LongT5 model)"),CRe.forEach(t),ljo=i(be),$b=n(be,"LI",{});var wRe=s($b);$pe=n(wRe,"STRONG",{});var TTt=s($pe);ijo=r(TTt,"m2m_100"),TTt.forEach(t),djo=r(wRe," \u2014 "),IV=n(wRe,"A",{href:!0});var MTt=s(IV);cjo=r(MTt,"M2M100ForConditionalGeneration"),MTt.forEach(t),fjo=r(wRe," (M2M100 model)"),wRe.forEach(t),mjo=i(be),kb=n(be,"LI",{});var ARe=s(kb);kpe=n(ARe,"STRONG",{});var ETt=s(kpe);gjo=r(ETt,"marian"),ETt.forEach(t),hjo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var CTt=s(NV);pjo=r(CTt,"MarianMTModel"),CTt.forEach(t),_jo=r(ARe," (Marian model)"),ARe.forEach(t),ujo=i(be),Sb=n(be,"LI",{});var LRe=s(Sb);Spe=n(LRe,"STRONG",{});var wTt=s(Spe);bjo=r(wTt,"mbart"),wTt.forEach(t),vjo=r(LRe," \u2014 "),qV=n(LRe,"A",{href:!0});var ATt=s(qV);Fjo=r(ATt,"MBartForConditionalGeneration"),ATt.forEach(t),Tjo=r(LRe," (mBART model)"),LRe.forEach(t),Mjo=i(be),Rb=n(be,"LI",{});var yRe=s(Rb);Rpe=n(yRe,"STRONG",{});var LTt=s(Rpe);Ejo=r(LTt,"mt5"),LTt.forEach(t),Cjo=r(yRe," \u2014 "),jV=n(yRe,"A",{href:!0});var yTt=s(jV);wjo=r(yTt,"MT5ForConditionalGeneration"),yTt.forEach(t),Ajo=r(yRe," (MT5 model)"),yRe.forEach(t),Ljo=i(be),Pb=n(be,"LI",{});var xRe=s(Pb);Ppe=n(xRe,"STRONG",{});var xTt=s(Ppe);yjo=r(xTt,"mvp"),xTt.forEach(t),xjo=r(xRe," \u2014 "),DV=n(xRe,"A",{href:!0});var $Tt=s(DV);$jo=r($Tt,"MvpForConditionalGeneration"),$Tt.forEach(t),kjo=r(xRe," (MVP model)"),xRe.forEach(t),Sjo=i(be),Bb=n(be,"LI",{});var $Re=s(Bb);Bpe=n($Re,"STRONG",{});var kTt=s(Bpe);Rjo=r(kTt,"pegasus"),kTt.forEach(t),Pjo=r($Re," \u2014 "),GV=n($Re,"A",{href:!0});var STt=s(GV);Bjo=r(STt,"PegasusForConditionalGeneration"),STt.forEach(t),Ijo=r($Re," (Pegasus model)"),$Re.forEach(t),Njo=i(be),Ib=n(be,"LI",{});var kRe=s(Ib);Ipe=n(kRe,"STRONG",{});var RTt=s(Ipe);qjo=r(RTt,"plbart"),RTt.forEach(t),jjo=r(kRe," \u2014 "),OV=n(kRe,"A",{href:!0});var PTt=s(OV);Djo=r(PTt,"PLBartForConditionalGeneration"),PTt.forEach(t),Gjo=r(kRe," (PLBart model)"),kRe.forEach(t),Ojo=i(be),Nb=n(be,"LI",{});var SRe=s(Nb);Npe=n(SRe,"STRONG",{});var BTt=s(Npe);Vjo=r(BTt,"prophetnet"),BTt.forEach(t),Xjo=r(SRe," \u2014 "),VV=n(SRe,"A",{href:!0});var ITt=s(VV);zjo=r(ITt,"ProphetNetForConditionalGeneration"),ITt.forEach(t),Qjo=r(SRe," (ProphetNet model)"),SRe.forEach(t),Wjo=i(be),qb=n(be,"LI",{});var RRe=s(qb);qpe=n(RRe,"STRONG",{});var NTt=s(qpe);Hjo=r(NTt,"t5"),NTt.forEach(t),Ujo=r(RRe," \u2014 "),XV=n(RRe,"A",{href:!0});var qTt=s(XV);Jjo=r(qTt,"T5ForConditionalGeneration"),qTt.forEach(t),Yjo=r(RRe," (T5 model)"),RRe.forEach(t),Kjo=i(be),jb=n(be,"LI",{});var PRe=s(jb);jpe=n(PRe,"STRONG",{});var jTt=s(jpe);Zjo=r(jTt,"xlm-prophetnet"),jTt.forEach(t),eDo=r(PRe," \u2014 "),zV=n(PRe,"A",{href:!0});var DTt=s(zV);oDo=r(DTt,"XLMProphetNetForConditionalGeneration"),DTt.forEach(t),rDo=r(PRe," (XLM-ProphetNet model)"),PRe.forEach(t),be.forEach(t),tDo=i(fa),Db=n(fa,"P",{});var BRe=s(Db);aDo=r(BRe,"The model is set in evaluation mode by default using "),Dpe=n(BRe,"CODE",{});var GTt=s(Dpe);nDo=r(GTt,"model.eval()"),GTt.forEach(t),sDo=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(BRe,"CODE",{});var OTt=s(Gpe);lDo=r(OTt,"model.train()"),OTt.forEach(t),BRe.forEach(t),iDo=i(fa),T(Gb.$$.fragment,fa),fa.forEach(t),sl.forEach(t),yXe=i(f),rd=n(f,"H2",{class:!0});var PQe=s(rd);Ob=n(PQe,"A",{id:!0,class:!0,href:!0});var VTt=s(Ob);Ope=n(VTt,"SPAN",{});var XTt=s(Ope);T(ty.$$.fragment,XTt),XTt.forEach(t),VTt.forEach(t),dDo=i(PQe),Vpe=n(PQe,"SPAN",{});var zTt=s(Vpe);cDo=r(zTt,"AutoModelForSequenceClassification"),zTt.forEach(t),PQe.forEach(t),xXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(ay.$$.fragment,ll),fDo=i(ll),td=n(ll,"P",{});var zre=s(td);mDo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QV=n(zre,"A",{href:!0});var QTt=s(QV);gDo=r(QTt,"from_pretrained()"),QTt.forEach(t),hDo=r(zre," class method or the "),WV=n(zre,"A",{href:!0});var WTt=s(WV);pDo=r(WTt,"from_config()"),WTt.forEach(t),_Do=r(zre,` class
method.`),zre.forEach(t),uDo=i(ll),ny=n(ll,"P",{});var BQe=s(ny);bDo=r(BQe,"This class cannot be instantiated directly using "),Xpe=n(BQe,"CODE",{});var HTt=s(Xpe);vDo=r(HTt,"__init__()"),HTt.forEach(t),FDo=r(BQe," (throws an error)."),BQe.forEach(t),TDo=i(ll),gt=n(ll,"DIV",{class:!0});var F6=s(gt);T(sy.$$.fragment,F6),MDo=i(F6),zpe=n(F6,"P",{});var UTt=s(zpe);EDo=r(UTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UTt.forEach(t),CDo=i(F6),ad=n(F6,"P",{});var Qre=s(ad);wDo=r(Qre,`Note:
Loading a model from its configuration file does `),Qpe=n(Qre,"STRONG",{});var JTt=s(Qpe);ADo=r(JTt,"not"),JTt.forEach(t),LDo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(Qre,"A",{href:!0});var YTt=s(HV);yDo=r(YTt,"from_pretrained()"),YTt.forEach(t),xDo=r(Qre," to load the model weights."),Qre.forEach(t),$Do=i(F6),T(Vb.$$.fragment,F6),F6.forEach(t),kDo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(ly.$$.fragment,ma),SDo=i(ma),Wpe=n(ma,"P",{});var KTt=s(Wpe);RDo=r(KTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KTt.forEach(t),PDo=i(ma),Ga=n(ma,"P",{});var T6=s(Ga);BDo=r(T6,"The model class to instantiate is selected based on the "),Hpe=n(T6,"CODE",{});var ZTt=s(Hpe);IDo=r(ZTt,"model_type"),ZTt.forEach(t),NDo=r(T6,` property of the config object (either
passed as an argument or loaded from `),Upe=n(T6,"CODE",{});var e8t=s(Upe);qDo=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),jDo=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(T6,"CODE",{});var o8t=s(Jpe);DDo=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),GDo=r(T6,":"),T6.forEach(t),ODo=i(ma),N=n(ma,"UL",{});var j=s(N);Xb=n(j,"LI",{});var IRe=s(Xb);Ype=n(IRe,"STRONG",{});var r8t=s(Ype);VDo=r(r8t,"albert"),r8t.forEach(t),XDo=r(IRe," \u2014 "),UV=n(IRe,"A",{href:!0});var t8t=s(UV);zDo=r(t8t,"AlbertForSequenceClassification"),t8t.forEach(t),QDo=r(IRe," (ALBERT model)"),IRe.forEach(t),WDo=i(j),zb=n(j,"LI",{});var NRe=s(zb);Kpe=n(NRe,"STRONG",{});var a8t=s(Kpe);HDo=r(a8t,"bart"),a8t.forEach(t),UDo=r(NRe," \u2014 "),JV=n(NRe,"A",{href:!0});var n8t=s(JV);JDo=r(n8t,"BartForSequenceClassification"),n8t.forEach(t),YDo=r(NRe," (BART model)"),NRe.forEach(t),KDo=i(j),Qb=n(j,"LI",{});var qRe=s(Qb);Zpe=n(qRe,"STRONG",{});var s8t=s(Zpe);ZDo=r(s8t,"bert"),s8t.forEach(t),eGo=r(qRe," \u2014 "),YV=n(qRe,"A",{href:!0});var l8t=s(YV);oGo=r(l8t,"BertForSequenceClassification"),l8t.forEach(t),rGo=r(qRe," (BERT model)"),qRe.forEach(t),tGo=i(j),Wb=n(j,"LI",{});var jRe=s(Wb);e_e=n(jRe,"STRONG",{});var i8t=s(e_e);aGo=r(i8t,"big_bird"),i8t.forEach(t),nGo=r(jRe," \u2014 "),KV=n(jRe,"A",{href:!0});var d8t=s(KV);sGo=r(d8t,"BigBirdForSequenceClassification"),d8t.forEach(t),lGo=r(jRe," (BigBird model)"),jRe.forEach(t),iGo=i(j),Hb=n(j,"LI",{});var DRe=s(Hb);o_e=n(DRe,"STRONG",{});var c8t=s(o_e);dGo=r(c8t,"bigbird_pegasus"),c8t.forEach(t),cGo=r(DRe," \u2014 "),ZV=n(DRe,"A",{href:!0});var f8t=s(ZV);fGo=r(f8t,"BigBirdPegasusForSequenceClassification"),f8t.forEach(t),mGo=r(DRe," (BigBird-Pegasus model)"),DRe.forEach(t),gGo=i(j),Ub=n(j,"LI",{});var GRe=s(Ub);r_e=n(GRe,"STRONG",{});var m8t=s(r_e);hGo=r(m8t,"bloom"),m8t.forEach(t),pGo=r(GRe," \u2014 "),eX=n(GRe,"A",{href:!0});var g8t=s(eX);_Go=r(g8t,"BloomForSequenceClassification"),g8t.forEach(t),uGo=r(GRe," (BLOOM model)"),GRe.forEach(t),bGo=i(j),Jb=n(j,"LI",{});var ORe=s(Jb);t_e=n(ORe,"STRONG",{});var h8t=s(t_e);vGo=r(h8t,"camembert"),h8t.forEach(t),FGo=r(ORe," \u2014 "),oX=n(ORe,"A",{href:!0});var p8t=s(oX);TGo=r(p8t,"CamembertForSequenceClassification"),p8t.forEach(t),MGo=r(ORe," (CamemBERT model)"),ORe.forEach(t),EGo=i(j),Yb=n(j,"LI",{});var VRe=s(Yb);a_e=n(VRe,"STRONG",{});var _8t=s(a_e);CGo=r(_8t,"canine"),_8t.forEach(t),wGo=r(VRe," \u2014 "),rX=n(VRe,"A",{href:!0});var u8t=s(rX);AGo=r(u8t,"CanineForSequenceClassification"),u8t.forEach(t),LGo=r(VRe," (CANINE model)"),VRe.forEach(t),yGo=i(j),Kb=n(j,"LI",{});var XRe=s(Kb);n_e=n(XRe,"STRONG",{});var b8t=s(n_e);xGo=r(b8t,"convbert"),b8t.forEach(t),$Go=r(XRe," \u2014 "),tX=n(XRe,"A",{href:!0});var v8t=s(tX);kGo=r(v8t,"ConvBertForSequenceClassification"),v8t.forEach(t),SGo=r(XRe," (ConvBERT model)"),XRe.forEach(t),RGo=i(j),Zb=n(j,"LI",{});var zRe=s(Zb);s_e=n(zRe,"STRONG",{});var F8t=s(s_e);PGo=r(F8t,"ctrl"),F8t.forEach(t),BGo=r(zRe," \u2014 "),aX=n(zRe,"A",{href:!0});var T8t=s(aX);IGo=r(T8t,"CTRLForSequenceClassification"),T8t.forEach(t),NGo=r(zRe," (CTRL model)"),zRe.forEach(t),qGo=i(j),ev=n(j,"LI",{});var QRe=s(ev);l_e=n(QRe,"STRONG",{});var M8t=s(l_e);jGo=r(M8t,"data2vec-text"),M8t.forEach(t),DGo=r(QRe," \u2014 "),nX=n(QRe,"A",{href:!0});var E8t=s(nX);GGo=r(E8t,"Data2VecTextForSequenceClassification"),E8t.forEach(t),OGo=r(QRe," (Data2VecText model)"),QRe.forEach(t),VGo=i(j),ov=n(j,"LI",{});var WRe=s(ov);i_e=n(WRe,"STRONG",{});var C8t=s(i_e);XGo=r(C8t,"deberta"),C8t.forEach(t),zGo=r(WRe," \u2014 "),sX=n(WRe,"A",{href:!0});var w8t=s(sX);QGo=r(w8t,"DebertaForSequenceClassification"),w8t.forEach(t),WGo=r(WRe," (DeBERTa model)"),WRe.forEach(t),HGo=i(j),rv=n(j,"LI",{});var HRe=s(rv);d_e=n(HRe,"STRONG",{});var A8t=s(d_e);UGo=r(A8t,"deberta-v2"),A8t.forEach(t),JGo=r(HRe," \u2014 "),lX=n(HRe,"A",{href:!0});var L8t=s(lX);YGo=r(L8t,"DebertaV2ForSequenceClassification"),L8t.forEach(t),KGo=r(HRe," (DeBERTa-v2 model)"),HRe.forEach(t),ZGo=i(j),tv=n(j,"LI",{});var URe=s(tv);c_e=n(URe,"STRONG",{});var y8t=s(c_e);eOo=r(y8t,"distilbert"),y8t.forEach(t),oOo=r(URe," \u2014 "),iX=n(URe,"A",{href:!0});var x8t=s(iX);rOo=r(x8t,"DistilBertForSequenceClassification"),x8t.forEach(t),tOo=r(URe," (DistilBERT model)"),URe.forEach(t),aOo=i(j),av=n(j,"LI",{});var JRe=s(av);f_e=n(JRe,"STRONG",{});var $8t=s(f_e);nOo=r($8t,"electra"),$8t.forEach(t),sOo=r(JRe," \u2014 "),dX=n(JRe,"A",{href:!0});var k8t=s(dX);lOo=r(k8t,"ElectraForSequenceClassification"),k8t.forEach(t),iOo=r(JRe," (ELECTRA model)"),JRe.forEach(t),dOo=i(j),nv=n(j,"LI",{});var YRe=s(nv);m_e=n(YRe,"STRONG",{});var S8t=s(m_e);cOo=r(S8t,"flaubert"),S8t.forEach(t),fOo=r(YRe," \u2014 "),cX=n(YRe,"A",{href:!0});var R8t=s(cX);mOo=r(R8t,"FlaubertForSequenceClassification"),R8t.forEach(t),gOo=r(YRe," (FlauBERT model)"),YRe.forEach(t),hOo=i(j),sv=n(j,"LI",{});var KRe=s(sv);g_e=n(KRe,"STRONG",{});var P8t=s(g_e);pOo=r(P8t,"fnet"),P8t.forEach(t),_Oo=r(KRe," \u2014 "),fX=n(KRe,"A",{href:!0});var B8t=s(fX);uOo=r(B8t,"FNetForSequenceClassification"),B8t.forEach(t),bOo=r(KRe," (FNet model)"),KRe.forEach(t),vOo=i(j),lv=n(j,"LI",{});var ZRe=s(lv);h_e=n(ZRe,"STRONG",{});var I8t=s(h_e);FOo=r(I8t,"funnel"),I8t.forEach(t),TOo=r(ZRe," \u2014 "),mX=n(ZRe,"A",{href:!0});var N8t=s(mX);MOo=r(N8t,"FunnelForSequenceClassification"),N8t.forEach(t),EOo=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),COo=i(j),iv=n(j,"LI",{});var ePe=s(iv);p_e=n(ePe,"STRONG",{});var q8t=s(p_e);wOo=r(q8t,"gpt2"),q8t.forEach(t),AOo=r(ePe," \u2014 "),gX=n(ePe,"A",{href:!0});var j8t=s(gX);LOo=r(j8t,"GPT2ForSequenceClassification"),j8t.forEach(t),yOo=r(ePe," (OpenAI GPT-2 model)"),ePe.forEach(t),xOo=i(j),dv=n(j,"LI",{});var oPe=s(dv);__e=n(oPe,"STRONG",{});var D8t=s(__e);$Oo=r(D8t,"gpt_neo"),D8t.forEach(t),kOo=r(oPe," \u2014 "),hX=n(oPe,"A",{href:!0});var G8t=s(hX);SOo=r(G8t,"GPTNeoForSequenceClassification"),G8t.forEach(t),ROo=r(oPe," (GPT Neo model)"),oPe.forEach(t),POo=i(j),cv=n(j,"LI",{});var rPe=s(cv);u_e=n(rPe,"STRONG",{});var O8t=s(u_e);BOo=r(O8t,"gptj"),O8t.forEach(t),IOo=r(rPe," \u2014 "),pX=n(rPe,"A",{href:!0});var V8t=s(pX);NOo=r(V8t,"GPTJForSequenceClassification"),V8t.forEach(t),qOo=r(rPe," (GPT-J model)"),rPe.forEach(t),jOo=i(j),fv=n(j,"LI",{});var tPe=s(fv);b_e=n(tPe,"STRONG",{});var X8t=s(b_e);DOo=r(X8t,"ibert"),X8t.forEach(t),GOo=r(tPe," \u2014 "),_X=n(tPe,"A",{href:!0});var z8t=s(_X);OOo=r(z8t,"IBertForSequenceClassification"),z8t.forEach(t),VOo=r(tPe," (I-BERT model)"),tPe.forEach(t),XOo=i(j),mv=n(j,"LI",{});var aPe=s(mv);v_e=n(aPe,"STRONG",{});var Q8t=s(v_e);zOo=r(Q8t,"layoutlm"),Q8t.forEach(t),QOo=r(aPe," \u2014 "),uX=n(aPe,"A",{href:!0});var W8t=s(uX);WOo=r(W8t,"LayoutLMForSequenceClassification"),W8t.forEach(t),HOo=r(aPe," (LayoutLM model)"),aPe.forEach(t),UOo=i(j),gv=n(j,"LI",{});var nPe=s(gv);F_e=n(nPe,"STRONG",{});var H8t=s(F_e);JOo=r(H8t,"layoutlmv2"),H8t.forEach(t),YOo=r(nPe," \u2014 "),bX=n(nPe,"A",{href:!0});var U8t=s(bX);KOo=r(U8t,"LayoutLMv2ForSequenceClassification"),U8t.forEach(t),ZOo=r(nPe," (LayoutLMv2 model)"),nPe.forEach(t),eVo=i(j),hv=n(j,"LI",{});var sPe=s(hv);T_e=n(sPe,"STRONG",{});var J8t=s(T_e);oVo=r(J8t,"layoutlmv3"),J8t.forEach(t),rVo=r(sPe," \u2014 "),vX=n(sPe,"A",{href:!0});var Y8t=s(vX);tVo=r(Y8t,"LayoutLMv3ForSequenceClassification"),Y8t.forEach(t),aVo=r(sPe," (LayoutLMv3 model)"),sPe.forEach(t),nVo=i(j),pv=n(j,"LI",{});var lPe=s(pv);M_e=n(lPe,"STRONG",{});var K8t=s(M_e);sVo=r(K8t,"led"),K8t.forEach(t),lVo=r(lPe," \u2014 "),FX=n(lPe,"A",{href:!0});var Z8t=s(FX);iVo=r(Z8t,"LEDForSequenceClassification"),Z8t.forEach(t),dVo=r(lPe," (LED model)"),lPe.forEach(t),cVo=i(j),_v=n(j,"LI",{});var iPe=s(_v);E_e=n(iPe,"STRONG",{});var eMt=s(E_e);fVo=r(eMt,"longformer"),eMt.forEach(t),mVo=r(iPe," \u2014 "),TX=n(iPe,"A",{href:!0});var oMt=s(TX);gVo=r(oMt,"LongformerForSequenceClassification"),oMt.forEach(t),hVo=r(iPe," (Longformer model)"),iPe.forEach(t),pVo=i(j),uv=n(j,"LI",{});var dPe=s(uv);C_e=n(dPe,"STRONG",{});var rMt=s(C_e);_Vo=r(rMt,"mbart"),rMt.forEach(t),uVo=r(dPe," \u2014 "),MX=n(dPe,"A",{href:!0});var tMt=s(MX);bVo=r(tMt,"MBartForSequenceClassification"),tMt.forEach(t),vVo=r(dPe," (mBART model)"),dPe.forEach(t),FVo=i(j),bv=n(j,"LI",{});var cPe=s(bv);w_e=n(cPe,"STRONG",{});var aMt=s(w_e);TVo=r(aMt,"megatron-bert"),aMt.forEach(t),MVo=r(cPe," \u2014 "),EX=n(cPe,"A",{href:!0});var nMt=s(EX);EVo=r(nMt,"MegatronBertForSequenceClassification"),nMt.forEach(t),CVo=r(cPe," (Megatron-BERT model)"),cPe.forEach(t),wVo=i(j),vv=n(j,"LI",{});var fPe=s(vv);A_e=n(fPe,"STRONG",{});var sMt=s(A_e);AVo=r(sMt,"mobilebert"),sMt.forEach(t),LVo=r(fPe," \u2014 "),CX=n(fPe,"A",{href:!0});var lMt=s(CX);yVo=r(lMt,"MobileBertForSequenceClassification"),lMt.forEach(t),xVo=r(fPe," (MobileBERT model)"),fPe.forEach(t),$Vo=i(j),Fv=n(j,"LI",{});var mPe=s(Fv);L_e=n(mPe,"STRONG",{});var iMt=s(L_e);kVo=r(iMt,"mpnet"),iMt.forEach(t),SVo=r(mPe," \u2014 "),wX=n(mPe,"A",{href:!0});var dMt=s(wX);RVo=r(dMt,"MPNetForSequenceClassification"),dMt.forEach(t),PVo=r(mPe," (MPNet model)"),mPe.forEach(t),BVo=i(j),Tv=n(j,"LI",{});var gPe=s(Tv);y_e=n(gPe,"STRONG",{});var cMt=s(y_e);IVo=r(cMt,"mvp"),cMt.forEach(t),NVo=r(gPe," \u2014 "),AX=n(gPe,"A",{href:!0});var fMt=s(AX);qVo=r(fMt,"MvpForSequenceClassification"),fMt.forEach(t),jVo=r(gPe," (MVP model)"),gPe.forEach(t),DVo=i(j),Mv=n(j,"LI",{});var hPe=s(Mv);x_e=n(hPe,"STRONG",{});var mMt=s(x_e);GVo=r(mMt,"nezha"),mMt.forEach(t),OVo=r(hPe," \u2014 "),LX=n(hPe,"A",{href:!0});var gMt=s(LX);VVo=r(gMt,"NezhaForSequenceClassification"),gMt.forEach(t),XVo=r(hPe," (Nezha model)"),hPe.forEach(t),zVo=i(j),Ev=n(j,"LI",{});var pPe=s(Ev);$_e=n(pPe,"STRONG",{});var hMt=s($_e);QVo=r(hMt,"nystromformer"),hMt.forEach(t),WVo=r(pPe," \u2014 "),yX=n(pPe,"A",{href:!0});var pMt=s(yX);HVo=r(pMt,"NystromformerForSequenceClassification"),pMt.forEach(t),UVo=r(pPe," (Nystr\xF6mformer model)"),pPe.forEach(t),JVo=i(j),Cv=n(j,"LI",{});var _Pe=s(Cv);k_e=n(_Pe,"STRONG",{});var _Mt=s(k_e);YVo=r(_Mt,"openai-gpt"),_Mt.forEach(t),KVo=r(_Pe," \u2014 "),xX=n(_Pe,"A",{href:!0});var uMt=s(xX);ZVo=r(uMt,"OpenAIGPTForSequenceClassification"),uMt.forEach(t),eXo=r(_Pe," (OpenAI GPT model)"),_Pe.forEach(t),oXo=i(j),wv=n(j,"LI",{});var uPe=s(wv);S_e=n(uPe,"STRONG",{});var bMt=s(S_e);rXo=r(bMt,"perceiver"),bMt.forEach(t),tXo=r(uPe," \u2014 "),$X=n(uPe,"A",{href:!0});var vMt=s($X);aXo=r(vMt,"PerceiverForSequenceClassification"),vMt.forEach(t),nXo=r(uPe," (Perceiver model)"),uPe.forEach(t),sXo=i(j),Av=n(j,"LI",{});var bPe=s(Av);R_e=n(bPe,"STRONG",{});var FMt=s(R_e);lXo=r(FMt,"plbart"),FMt.forEach(t),iXo=r(bPe," \u2014 "),kX=n(bPe,"A",{href:!0});var TMt=s(kX);dXo=r(TMt,"PLBartForSequenceClassification"),TMt.forEach(t),cXo=r(bPe," (PLBart model)"),bPe.forEach(t),fXo=i(j),Lv=n(j,"LI",{});var vPe=s(Lv);P_e=n(vPe,"STRONG",{});var MMt=s(P_e);mXo=r(MMt,"qdqbert"),MMt.forEach(t),gXo=r(vPe," \u2014 "),SX=n(vPe,"A",{href:!0});var EMt=s(SX);hXo=r(EMt,"QDQBertForSequenceClassification"),EMt.forEach(t),pXo=r(vPe," (QDQBert model)"),vPe.forEach(t),_Xo=i(j),yv=n(j,"LI",{});var FPe=s(yv);B_e=n(FPe,"STRONG",{});var CMt=s(B_e);uXo=r(CMt,"reformer"),CMt.forEach(t),bXo=r(FPe," \u2014 "),RX=n(FPe,"A",{href:!0});var wMt=s(RX);vXo=r(wMt,"ReformerForSequenceClassification"),wMt.forEach(t),FXo=r(FPe," (Reformer model)"),FPe.forEach(t),TXo=i(j),xv=n(j,"LI",{});var TPe=s(xv);I_e=n(TPe,"STRONG",{});var AMt=s(I_e);MXo=r(AMt,"rembert"),AMt.forEach(t),EXo=r(TPe," \u2014 "),PX=n(TPe,"A",{href:!0});var LMt=s(PX);CXo=r(LMt,"RemBertForSequenceClassification"),LMt.forEach(t),wXo=r(TPe," (RemBERT model)"),TPe.forEach(t),AXo=i(j),$v=n(j,"LI",{});var MPe=s($v);N_e=n(MPe,"STRONG",{});var yMt=s(N_e);LXo=r(yMt,"roberta"),yMt.forEach(t),yXo=r(MPe," \u2014 "),BX=n(MPe,"A",{href:!0});var xMt=s(BX);xXo=r(xMt,"RobertaForSequenceClassification"),xMt.forEach(t),$Xo=r(MPe," (RoBERTa model)"),MPe.forEach(t),kXo=i(j),kv=n(j,"LI",{});var EPe=s(kv);q_e=n(EPe,"STRONG",{});var $Mt=s(q_e);SXo=r($Mt,"roformer"),$Mt.forEach(t),RXo=r(EPe," \u2014 "),IX=n(EPe,"A",{href:!0});var kMt=s(IX);PXo=r(kMt,"RoFormerForSequenceClassification"),kMt.forEach(t),BXo=r(EPe," (RoFormer model)"),EPe.forEach(t),IXo=i(j),Sv=n(j,"LI",{});var CPe=s(Sv);j_e=n(CPe,"STRONG",{});var SMt=s(j_e);NXo=r(SMt,"squeezebert"),SMt.forEach(t),qXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var RMt=s(NX);jXo=r(RMt,"SqueezeBertForSequenceClassification"),RMt.forEach(t),DXo=r(CPe," (SqueezeBERT model)"),CPe.forEach(t),GXo=i(j),Rv=n(j,"LI",{});var wPe=s(Rv);D_e=n(wPe,"STRONG",{});var PMt=s(D_e);OXo=r(PMt,"tapas"),PMt.forEach(t),VXo=r(wPe," \u2014 "),qX=n(wPe,"A",{href:!0});var BMt=s(qX);XXo=r(BMt,"TapasForSequenceClassification"),BMt.forEach(t),zXo=r(wPe," (TAPAS model)"),wPe.forEach(t),QXo=i(j),Pv=n(j,"LI",{});var APe=s(Pv);G_e=n(APe,"STRONG",{});var IMt=s(G_e);WXo=r(IMt,"transfo-xl"),IMt.forEach(t),HXo=r(APe," \u2014 "),jX=n(APe,"A",{href:!0});var NMt=s(jX);UXo=r(NMt,"TransfoXLForSequenceClassification"),NMt.forEach(t),JXo=r(APe," (Transformer-XL model)"),APe.forEach(t),YXo=i(j),Bv=n(j,"LI",{});var LPe=s(Bv);O_e=n(LPe,"STRONG",{});var qMt=s(O_e);KXo=r(qMt,"xlm"),qMt.forEach(t),ZXo=r(LPe," \u2014 "),DX=n(LPe,"A",{href:!0});var jMt=s(DX);ezo=r(jMt,"XLMForSequenceClassification"),jMt.forEach(t),ozo=r(LPe," (XLM model)"),LPe.forEach(t),rzo=i(j),Iv=n(j,"LI",{});var yPe=s(Iv);V_e=n(yPe,"STRONG",{});var DMt=s(V_e);tzo=r(DMt,"xlm-roberta"),DMt.forEach(t),azo=r(yPe," \u2014 "),GX=n(yPe,"A",{href:!0});var GMt=s(GX);nzo=r(GMt,"XLMRobertaForSequenceClassification"),GMt.forEach(t),szo=r(yPe," (XLM-RoBERTa model)"),yPe.forEach(t),lzo=i(j),Nv=n(j,"LI",{});var xPe=s(Nv);X_e=n(xPe,"STRONG",{});var OMt=s(X_e);izo=r(OMt,"xlm-roberta-xl"),OMt.forEach(t),dzo=r(xPe," \u2014 "),OX=n(xPe,"A",{href:!0});var VMt=s(OX);czo=r(VMt,"XLMRobertaXLForSequenceClassification"),VMt.forEach(t),fzo=r(xPe," (XLM-RoBERTa-XL model)"),xPe.forEach(t),mzo=i(j),qv=n(j,"LI",{});var $Pe=s(qv);z_e=n($Pe,"STRONG",{});var XMt=s(z_e);gzo=r(XMt,"xlnet"),XMt.forEach(t),hzo=r($Pe," \u2014 "),VX=n($Pe,"A",{href:!0});var zMt=s(VX);pzo=r(zMt,"XLNetForSequenceClassification"),zMt.forEach(t),_zo=r($Pe," (XLNet model)"),$Pe.forEach(t),uzo=i(j),jv=n(j,"LI",{});var kPe=s(jv);Q_e=n(kPe,"STRONG",{});var QMt=s(Q_e);bzo=r(QMt,"yoso"),QMt.forEach(t),vzo=r(kPe," \u2014 "),XX=n(kPe,"A",{href:!0});var WMt=s(XX);Fzo=r(WMt,"YosoForSequenceClassification"),WMt.forEach(t),Tzo=r(kPe," (YOSO model)"),kPe.forEach(t),j.forEach(t),Mzo=i(ma),Dv=n(ma,"P",{});var SPe=s(Dv);Ezo=r(SPe,"The model is set in evaluation mode by default using "),W_e=n(SPe,"CODE",{});var HMt=s(W_e);Czo=r(HMt,"model.eval()"),HMt.forEach(t),wzo=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(SPe,"CODE",{});var UMt=s(H_e);Azo=r(UMt,"model.train()"),UMt.forEach(t),SPe.forEach(t),Lzo=i(ma),T(Gv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),$Xe=i(f),nd=n(f,"H2",{class:!0});var IQe=s(nd);Ov=n(IQe,"A",{id:!0,class:!0,href:!0});var JMt=s(Ov);U_e=n(JMt,"SPAN",{});var YMt=s(U_e);T(iy.$$.fragment,YMt),YMt.forEach(t),JMt.forEach(t),yzo=i(IQe),J_e=n(IQe,"SPAN",{});var KMt=s(J_e);xzo=r(KMt,"AutoModelForMultipleChoice"),KMt.forEach(t),IQe.forEach(t),kXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(dy.$$.fragment,il),$zo=i(il),sd=n(il,"P",{});var Wre=s(sd);kzo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=n(Wre,"A",{href:!0});var ZMt=s(zX);Szo=r(ZMt,"from_pretrained()"),ZMt.forEach(t),Rzo=r(Wre," class method or the "),QX=n(Wre,"A",{href:!0});var e4t=s(QX);Pzo=r(e4t,"from_config()"),e4t.forEach(t),Bzo=r(Wre,` class
method.`),Wre.forEach(t),Izo=i(il),cy=n(il,"P",{});var NQe=s(cy);Nzo=r(NQe,"This class cannot be instantiated directly using "),Y_e=n(NQe,"CODE",{});var o4t=s(Y_e);qzo=r(o4t,"__init__()"),o4t.forEach(t),jzo=r(NQe," (throws an error)."),NQe.forEach(t),Dzo=i(il),ht=n(il,"DIV",{class:!0});var M6=s(ht);T(fy.$$.fragment,M6),Gzo=i(M6),K_e=n(M6,"P",{});var r4t=s(K_e);Ozo=r(r4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),r4t.forEach(t),Vzo=i(M6),ld=n(M6,"P",{});var Hre=s(ld);Xzo=r(Hre,`Note:
Loading a model from its configuration file does `),Z_e=n(Hre,"STRONG",{});var t4t=s(Z_e);zzo=r(t4t,"not"),t4t.forEach(t),Qzo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(Hre,"A",{href:!0});var a4t=s(WX);Wzo=r(a4t,"from_pretrained()"),a4t.forEach(t),Hzo=r(Hre," to load the model weights."),Hre.forEach(t),Uzo=i(M6),T(Vv.$$.fragment,M6),M6.forEach(t),Jzo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(my.$$.fragment,ga),Yzo=i(ga),eue=n(ga,"P",{});var n4t=s(eue);Kzo=r(n4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n4t.forEach(t),Zzo=i(ga),Oa=n(ga,"P",{});var E6=s(Oa);eQo=r(E6,"The model class to instantiate is selected based on the "),oue=n(E6,"CODE",{});var s4t=s(oue);oQo=r(s4t,"model_type"),s4t.forEach(t),rQo=r(E6,` property of the config object (either
passed as an argument or loaded from `),rue=n(E6,"CODE",{});var l4t=s(rue);tQo=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),aQo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(E6,"CODE",{});var i4t=s(tue);nQo=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),sQo=r(E6,":"),E6.forEach(t),lQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Xv=n(ee,"LI",{});var RPe=s(Xv);aue=n(RPe,"STRONG",{});var d4t=s(aue);iQo=r(d4t,"albert"),d4t.forEach(t),dQo=r(RPe," \u2014 "),HX=n(RPe,"A",{href:!0});var c4t=s(HX);cQo=r(c4t,"AlbertForMultipleChoice"),c4t.forEach(t),fQo=r(RPe," (ALBERT model)"),RPe.forEach(t),mQo=i(ee),zv=n(ee,"LI",{});var PPe=s(zv);nue=n(PPe,"STRONG",{});var f4t=s(nue);gQo=r(f4t,"bert"),f4t.forEach(t),hQo=r(PPe," \u2014 "),UX=n(PPe,"A",{href:!0});var m4t=s(UX);pQo=r(m4t,"BertForMultipleChoice"),m4t.forEach(t),_Qo=r(PPe," (BERT model)"),PPe.forEach(t),uQo=i(ee),Qv=n(ee,"LI",{});var BPe=s(Qv);sue=n(BPe,"STRONG",{});var g4t=s(sue);bQo=r(g4t,"big_bird"),g4t.forEach(t),vQo=r(BPe," \u2014 "),JX=n(BPe,"A",{href:!0});var h4t=s(JX);FQo=r(h4t,"BigBirdForMultipleChoice"),h4t.forEach(t),TQo=r(BPe," (BigBird model)"),BPe.forEach(t),MQo=i(ee),Wv=n(ee,"LI",{});var IPe=s(Wv);lue=n(IPe,"STRONG",{});var p4t=s(lue);EQo=r(p4t,"camembert"),p4t.forEach(t),CQo=r(IPe," \u2014 "),YX=n(IPe,"A",{href:!0});var _4t=s(YX);wQo=r(_4t,"CamembertForMultipleChoice"),_4t.forEach(t),AQo=r(IPe," (CamemBERT model)"),IPe.forEach(t),LQo=i(ee),Hv=n(ee,"LI",{});var NPe=s(Hv);iue=n(NPe,"STRONG",{});var u4t=s(iue);yQo=r(u4t,"canine"),u4t.forEach(t),xQo=r(NPe," \u2014 "),KX=n(NPe,"A",{href:!0});var b4t=s(KX);$Qo=r(b4t,"CanineForMultipleChoice"),b4t.forEach(t),kQo=r(NPe," (CANINE model)"),NPe.forEach(t),SQo=i(ee),Uv=n(ee,"LI",{});var qPe=s(Uv);due=n(qPe,"STRONG",{});var v4t=s(due);RQo=r(v4t,"convbert"),v4t.forEach(t),PQo=r(qPe," \u2014 "),ZX=n(qPe,"A",{href:!0});var F4t=s(ZX);BQo=r(F4t,"ConvBertForMultipleChoice"),F4t.forEach(t),IQo=r(qPe," (ConvBERT model)"),qPe.forEach(t),NQo=i(ee),Jv=n(ee,"LI",{});var jPe=s(Jv);cue=n(jPe,"STRONG",{});var T4t=s(cue);qQo=r(T4t,"data2vec-text"),T4t.forEach(t),jQo=r(jPe," \u2014 "),ez=n(jPe,"A",{href:!0});var M4t=s(ez);DQo=r(M4t,"Data2VecTextForMultipleChoice"),M4t.forEach(t),GQo=r(jPe," (Data2VecText model)"),jPe.forEach(t),OQo=i(ee),Yv=n(ee,"LI",{});var DPe=s(Yv);fue=n(DPe,"STRONG",{});var E4t=s(fue);VQo=r(E4t,"deberta-v2"),E4t.forEach(t),XQo=r(DPe," \u2014 "),oz=n(DPe,"A",{href:!0});var C4t=s(oz);zQo=r(C4t,"DebertaV2ForMultipleChoice"),C4t.forEach(t),QQo=r(DPe," (DeBERTa-v2 model)"),DPe.forEach(t),WQo=i(ee),Kv=n(ee,"LI",{});var GPe=s(Kv);mue=n(GPe,"STRONG",{});var w4t=s(mue);HQo=r(w4t,"distilbert"),w4t.forEach(t),UQo=r(GPe," \u2014 "),rz=n(GPe,"A",{href:!0});var A4t=s(rz);JQo=r(A4t,"DistilBertForMultipleChoice"),A4t.forEach(t),YQo=r(GPe," (DistilBERT model)"),GPe.forEach(t),KQo=i(ee),Zv=n(ee,"LI",{});var OPe=s(Zv);gue=n(OPe,"STRONG",{});var L4t=s(gue);ZQo=r(L4t,"electra"),L4t.forEach(t),eWo=r(OPe," \u2014 "),tz=n(OPe,"A",{href:!0});var y4t=s(tz);oWo=r(y4t,"ElectraForMultipleChoice"),y4t.forEach(t),rWo=r(OPe," (ELECTRA model)"),OPe.forEach(t),tWo=i(ee),e0=n(ee,"LI",{});var VPe=s(e0);hue=n(VPe,"STRONG",{});var x4t=s(hue);aWo=r(x4t,"flaubert"),x4t.forEach(t),nWo=r(VPe," \u2014 "),az=n(VPe,"A",{href:!0});var $4t=s(az);sWo=r($4t,"FlaubertForMultipleChoice"),$4t.forEach(t),lWo=r(VPe," (FlauBERT model)"),VPe.forEach(t),iWo=i(ee),o0=n(ee,"LI",{});var XPe=s(o0);pue=n(XPe,"STRONG",{});var k4t=s(pue);dWo=r(k4t,"fnet"),k4t.forEach(t),cWo=r(XPe," \u2014 "),nz=n(XPe,"A",{href:!0});var S4t=s(nz);fWo=r(S4t,"FNetForMultipleChoice"),S4t.forEach(t),mWo=r(XPe," (FNet model)"),XPe.forEach(t),gWo=i(ee),r0=n(ee,"LI",{});var zPe=s(r0);_ue=n(zPe,"STRONG",{});var R4t=s(_ue);hWo=r(R4t,"funnel"),R4t.forEach(t),pWo=r(zPe," \u2014 "),sz=n(zPe,"A",{href:!0});var P4t=s(sz);_Wo=r(P4t,"FunnelForMultipleChoice"),P4t.forEach(t),uWo=r(zPe," (Funnel Transformer model)"),zPe.forEach(t),bWo=i(ee),t0=n(ee,"LI",{});var QPe=s(t0);uue=n(QPe,"STRONG",{});var B4t=s(uue);vWo=r(B4t,"ibert"),B4t.forEach(t),FWo=r(QPe," \u2014 "),lz=n(QPe,"A",{href:!0});var I4t=s(lz);TWo=r(I4t,"IBertForMultipleChoice"),I4t.forEach(t),MWo=r(QPe," (I-BERT model)"),QPe.forEach(t),EWo=i(ee),a0=n(ee,"LI",{});var WPe=s(a0);bue=n(WPe,"STRONG",{});var N4t=s(bue);CWo=r(N4t,"longformer"),N4t.forEach(t),wWo=r(WPe," \u2014 "),iz=n(WPe,"A",{href:!0});var q4t=s(iz);AWo=r(q4t,"LongformerForMultipleChoice"),q4t.forEach(t),LWo=r(WPe," (Longformer model)"),WPe.forEach(t),yWo=i(ee),n0=n(ee,"LI",{});var HPe=s(n0);vue=n(HPe,"STRONG",{});var j4t=s(vue);xWo=r(j4t,"megatron-bert"),j4t.forEach(t),$Wo=r(HPe," \u2014 "),dz=n(HPe,"A",{href:!0});var D4t=s(dz);kWo=r(D4t,"MegatronBertForMultipleChoice"),D4t.forEach(t),SWo=r(HPe," (Megatron-BERT model)"),HPe.forEach(t),RWo=i(ee),s0=n(ee,"LI",{});var UPe=s(s0);Fue=n(UPe,"STRONG",{});var G4t=s(Fue);PWo=r(G4t,"mobilebert"),G4t.forEach(t),BWo=r(UPe," \u2014 "),cz=n(UPe,"A",{href:!0});var O4t=s(cz);IWo=r(O4t,"MobileBertForMultipleChoice"),O4t.forEach(t),NWo=r(UPe," (MobileBERT model)"),UPe.forEach(t),qWo=i(ee),l0=n(ee,"LI",{});var JPe=s(l0);Tue=n(JPe,"STRONG",{});var V4t=s(Tue);jWo=r(V4t,"mpnet"),V4t.forEach(t),DWo=r(JPe," \u2014 "),fz=n(JPe,"A",{href:!0});var X4t=s(fz);GWo=r(X4t,"MPNetForMultipleChoice"),X4t.forEach(t),OWo=r(JPe," (MPNet model)"),JPe.forEach(t),VWo=i(ee),i0=n(ee,"LI",{});var YPe=s(i0);Mue=n(YPe,"STRONG",{});var z4t=s(Mue);XWo=r(z4t,"nezha"),z4t.forEach(t),zWo=r(YPe," \u2014 "),mz=n(YPe,"A",{href:!0});var Q4t=s(mz);QWo=r(Q4t,"NezhaForMultipleChoice"),Q4t.forEach(t),WWo=r(YPe," (Nezha model)"),YPe.forEach(t),HWo=i(ee),d0=n(ee,"LI",{});var KPe=s(d0);Eue=n(KPe,"STRONG",{});var W4t=s(Eue);UWo=r(W4t,"nystromformer"),W4t.forEach(t),JWo=r(KPe," \u2014 "),gz=n(KPe,"A",{href:!0});var H4t=s(gz);YWo=r(H4t,"NystromformerForMultipleChoice"),H4t.forEach(t),KWo=r(KPe," (Nystr\xF6mformer model)"),KPe.forEach(t),ZWo=i(ee),c0=n(ee,"LI",{});var ZPe=s(c0);Cue=n(ZPe,"STRONG",{});var U4t=s(Cue);eHo=r(U4t,"qdqbert"),U4t.forEach(t),oHo=r(ZPe," \u2014 "),hz=n(ZPe,"A",{href:!0});var J4t=s(hz);rHo=r(J4t,"QDQBertForMultipleChoice"),J4t.forEach(t),tHo=r(ZPe," (QDQBert model)"),ZPe.forEach(t),aHo=i(ee),f0=n(ee,"LI",{});var eBe=s(f0);wue=n(eBe,"STRONG",{});var Y4t=s(wue);nHo=r(Y4t,"rembert"),Y4t.forEach(t),sHo=r(eBe," \u2014 "),pz=n(eBe,"A",{href:!0});var K4t=s(pz);lHo=r(K4t,"RemBertForMultipleChoice"),K4t.forEach(t),iHo=r(eBe," (RemBERT model)"),eBe.forEach(t),dHo=i(ee),m0=n(ee,"LI",{});var oBe=s(m0);Aue=n(oBe,"STRONG",{});var Z4t=s(Aue);cHo=r(Z4t,"roberta"),Z4t.forEach(t),fHo=r(oBe," \u2014 "),_z=n(oBe,"A",{href:!0});var eEt=s(_z);mHo=r(eEt,"RobertaForMultipleChoice"),eEt.forEach(t),gHo=r(oBe," (RoBERTa model)"),oBe.forEach(t),hHo=i(ee),g0=n(ee,"LI",{});var rBe=s(g0);Lue=n(rBe,"STRONG",{});var oEt=s(Lue);pHo=r(oEt,"roformer"),oEt.forEach(t),_Ho=r(rBe," \u2014 "),uz=n(rBe,"A",{href:!0});var rEt=s(uz);uHo=r(rEt,"RoFormerForMultipleChoice"),rEt.forEach(t),bHo=r(rBe," (RoFormer model)"),rBe.forEach(t),vHo=i(ee),h0=n(ee,"LI",{});var tBe=s(h0);yue=n(tBe,"STRONG",{});var tEt=s(yue);FHo=r(tEt,"squeezebert"),tEt.forEach(t),THo=r(tBe," \u2014 "),bz=n(tBe,"A",{href:!0});var aEt=s(bz);MHo=r(aEt,"SqueezeBertForMultipleChoice"),aEt.forEach(t),EHo=r(tBe," (SqueezeBERT model)"),tBe.forEach(t),CHo=i(ee),p0=n(ee,"LI",{});var aBe=s(p0);xue=n(aBe,"STRONG",{});var nEt=s(xue);wHo=r(nEt,"xlm"),nEt.forEach(t),AHo=r(aBe," \u2014 "),vz=n(aBe,"A",{href:!0});var sEt=s(vz);LHo=r(sEt,"XLMForMultipleChoice"),sEt.forEach(t),yHo=r(aBe," (XLM model)"),aBe.forEach(t),xHo=i(ee),_0=n(ee,"LI",{});var nBe=s(_0);$ue=n(nBe,"STRONG",{});var lEt=s($ue);$Ho=r(lEt,"xlm-roberta"),lEt.forEach(t),kHo=r(nBe," \u2014 "),Fz=n(nBe,"A",{href:!0});var iEt=s(Fz);SHo=r(iEt,"XLMRobertaForMultipleChoice"),iEt.forEach(t),RHo=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),PHo=i(ee),u0=n(ee,"LI",{});var sBe=s(u0);kue=n(sBe,"STRONG",{});var dEt=s(kue);BHo=r(dEt,"xlm-roberta-xl"),dEt.forEach(t),IHo=r(sBe," \u2014 "),Tz=n(sBe,"A",{href:!0});var cEt=s(Tz);NHo=r(cEt,"XLMRobertaXLForMultipleChoice"),cEt.forEach(t),qHo=r(sBe," (XLM-RoBERTa-XL model)"),sBe.forEach(t),jHo=i(ee),b0=n(ee,"LI",{});var lBe=s(b0);Sue=n(lBe,"STRONG",{});var fEt=s(Sue);DHo=r(fEt,"xlnet"),fEt.forEach(t),GHo=r(lBe," \u2014 "),Mz=n(lBe,"A",{href:!0});var mEt=s(Mz);OHo=r(mEt,"XLNetForMultipleChoice"),mEt.forEach(t),VHo=r(lBe," (XLNet model)"),lBe.forEach(t),XHo=i(ee),v0=n(ee,"LI",{});var iBe=s(v0);Rue=n(iBe,"STRONG",{});var gEt=s(Rue);zHo=r(gEt,"yoso"),gEt.forEach(t),QHo=r(iBe," \u2014 "),Ez=n(iBe,"A",{href:!0});var hEt=s(Ez);WHo=r(hEt,"YosoForMultipleChoice"),hEt.forEach(t),HHo=r(iBe," (YOSO model)"),iBe.forEach(t),ee.forEach(t),UHo=i(ga),F0=n(ga,"P",{});var dBe=s(F0);JHo=r(dBe,"The model is set in evaluation mode by default using "),Pue=n(dBe,"CODE",{});var pEt=s(Pue);YHo=r(pEt,"model.eval()"),pEt.forEach(t),KHo=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(dBe,"CODE",{});var _Et=s(Bue);ZHo=r(_Et,"model.train()"),_Et.forEach(t),dBe.forEach(t),eUo=i(ga),T(T0.$$.fragment,ga),ga.forEach(t),il.forEach(t),SXe=i(f),id=n(f,"H2",{class:!0});var qQe=s(id);M0=n(qQe,"A",{id:!0,class:!0,href:!0});var uEt=s(M0);Iue=n(uEt,"SPAN",{});var bEt=s(Iue);T(gy.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),oUo=i(qQe),Nue=n(qQe,"SPAN",{});var vEt=s(Nue);rUo=r(vEt,"AutoModelForNextSentencePrediction"),vEt.forEach(t),qQe.forEach(t),RXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(hy.$$.fragment,dl),tUo=i(dl),dd=n(dl,"P",{});var Ure=s(dd);aUo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=n(Ure,"A",{href:!0});var FEt=s(Cz);nUo=r(FEt,"from_pretrained()"),FEt.forEach(t),sUo=r(Ure," class method or the "),wz=n(Ure,"A",{href:!0});var TEt=s(wz);lUo=r(TEt,"from_config()"),TEt.forEach(t),iUo=r(Ure,` class
method.`),Ure.forEach(t),dUo=i(dl),py=n(dl,"P",{});var jQe=s(py);cUo=r(jQe,"This class cannot be instantiated directly using "),que=n(jQe,"CODE",{});var MEt=s(que);fUo=r(MEt,"__init__()"),MEt.forEach(t),mUo=r(jQe," (throws an error)."),jQe.forEach(t),gUo=i(dl),pt=n(dl,"DIV",{class:!0});var C6=s(pt);T(_y.$$.fragment,C6),hUo=i(C6),jue=n(C6,"P",{});var EEt=s(jue);pUo=r(EEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EEt.forEach(t),_Uo=i(C6),cd=n(C6,"P",{});var Jre=s(cd);uUo=r(Jre,`Note:
Loading a model from its configuration file does `),Due=n(Jre,"STRONG",{});var CEt=s(Due);bUo=r(CEt,"not"),CEt.forEach(t),vUo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(Jre,"A",{href:!0});var wEt=s(Az);FUo=r(wEt,"from_pretrained()"),wEt.forEach(t),TUo=r(Jre," to load the model weights."),Jre.forEach(t),MUo=i(C6),T(E0.$$.fragment,C6),C6.forEach(t),EUo=i(dl),ao=n(dl,"DIV",{class:!0});var ha=s(ao);T(uy.$$.fragment,ha),CUo=i(ha),Gue=n(ha,"P",{});var AEt=s(Gue);wUo=r(AEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AEt.forEach(t),AUo=i(ha),Va=n(ha,"P",{});var w6=s(Va);LUo=r(w6,"The model class to instantiate is selected based on the "),Oue=n(w6,"CODE",{});var LEt=s(Oue);yUo=r(LEt,"model_type"),LEt.forEach(t),xUo=r(w6,` property of the config object (either
passed as an argument or loaded from `),Vue=n(w6,"CODE",{});var yEt=s(Vue);$Uo=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),kUo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(w6,"CODE",{});var xEt=s(Xue);SUo=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),RUo=r(w6,":"),w6.forEach(t),PUo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);C0=n(pa,"LI",{});var cBe=s(C0);zue=n(cBe,"STRONG",{});var $Et=s(zue);BUo=r($Et,"bert"),$Et.forEach(t),IUo=r(cBe," \u2014 "),Lz=n(cBe,"A",{href:!0});var kEt=s(Lz);NUo=r(kEt,"BertForNextSentencePrediction"),kEt.forEach(t),qUo=r(cBe," (BERT model)"),cBe.forEach(t),jUo=i(pa),w0=n(pa,"LI",{});var fBe=s(w0);Que=n(fBe,"STRONG",{});var SEt=s(Que);DUo=r(SEt,"fnet"),SEt.forEach(t),GUo=r(fBe," \u2014 "),yz=n(fBe,"A",{href:!0});var REt=s(yz);OUo=r(REt,"FNetForNextSentencePrediction"),REt.forEach(t),VUo=r(fBe," (FNet model)"),fBe.forEach(t),XUo=i(pa),A0=n(pa,"LI",{});var mBe=s(A0);Wue=n(mBe,"STRONG",{});var PEt=s(Wue);zUo=r(PEt,"megatron-bert"),PEt.forEach(t),QUo=r(mBe," \u2014 "),xz=n(mBe,"A",{href:!0});var BEt=s(xz);WUo=r(BEt,"MegatronBertForNextSentencePrediction"),BEt.forEach(t),HUo=r(mBe," (Megatron-BERT model)"),mBe.forEach(t),UUo=i(pa),L0=n(pa,"LI",{});var gBe=s(L0);Hue=n(gBe,"STRONG",{});var IEt=s(Hue);JUo=r(IEt,"mobilebert"),IEt.forEach(t),YUo=r(gBe," \u2014 "),$z=n(gBe,"A",{href:!0});var NEt=s($z);KUo=r(NEt,"MobileBertForNextSentencePrediction"),NEt.forEach(t),ZUo=r(gBe," (MobileBERT model)"),gBe.forEach(t),eJo=i(pa),y0=n(pa,"LI",{});var hBe=s(y0);Uue=n(hBe,"STRONG",{});var qEt=s(Uue);oJo=r(qEt,"nezha"),qEt.forEach(t),rJo=r(hBe," \u2014 "),kz=n(hBe,"A",{href:!0});var jEt=s(kz);tJo=r(jEt,"NezhaForNextSentencePrediction"),jEt.forEach(t),aJo=r(hBe," (Nezha model)"),hBe.forEach(t),nJo=i(pa),x0=n(pa,"LI",{});var pBe=s(x0);Jue=n(pBe,"STRONG",{});var DEt=s(Jue);sJo=r(DEt,"qdqbert"),DEt.forEach(t),lJo=r(pBe," \u2014 "),Sz=n(pBe,"A",{href:!0});var GEt=s(Sz);iJo=r(GEt,"QDQBertForNextSentencePrediction"),GEt.forEach(t),dJo=r(pBe," (QDQBert model)"),pBe.forEach(t),pa.forEach(t),cJo=i(ha),$0=n(ha,"P",{});var _Be=s($0);fJo=r(_Be,"The model is set in evaluation mode by default using "),Yue=n(_Be,"CODE",{});var OEt=s(Yue);mJo=r(OEt,"model.eval()"),OEt.forEach(t),gJo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=n(_Be,"CODE",{});var VEt=s(Kue);hJo=r(VEt,"model.train()"),VEt.forEach(t),_Be.forEach(t),pJo=i(ha),T(k0.$$.fragment,ha),ha.forEach(t),dl.forEach(t),PXe=i(f),fd=n(f,"H2",{class:!0});var DQe=s(fd);S0=n(DQe,"A",{id:!0,class:!0,href:!0});var XEt=s(S0);Zue=n(XEt,"SPAN",{});var zEt=s(Zue);T(by.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),_Jo=i(DQe),e2e=n(DQe,"SPAN",{});var QEt=s(e2e);uJo=r(QEt,"AutoModelForTokenClassification"),QEt.forEach(t),DQe.forEach(t),BXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(vy.$$.fragment,cl),bJo=i(cl),md=n(cl,"P",{});var Yre=s(md);vJo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=n(Yre,"A",{href:!0});var WEt=s(Rz);FJo=r(WEt,"from_pretrained()"),WEt.forEach(t),TJo=r(Yre," class method or the "),Pz=n(Yre,"A",{href:!0});var HEt=s(Pz);MJo=r(HEt,"from_config()"),HEt.forEach(t),EJo=r(Yre,` class
method.`),Yre.forEach(t),CJo=i(cl),Fy=n(cl,"P",{});var GQe=s(Fy);wJo=r(GQe,"This class cannot be instantiated directly using "),o2e=n(GQe,"CODE",{});var UEt=s(o2e);AJo=r(UEt,"__init__()"),UEt.forEach(t),LJo=r(GQe," (throws an error)."),GQe.forEach(t),yJo=i(cl),_t=n(cl,"DIV",{class:!0});var A6=s(_t);T(Ty.$$.fragment,A6),xJo=i(A6),r2e=n(A6,"P",{});var JEt=s(r2e);$Jo=r(JEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JEt.forEach(t),kJo=i(A6),gd=n(A6,"P",{});var Kre=s(gd);SJo=r(Kre,`Note:
Loading a model from its configuration file does `),t2e=n(Kre,"STRONG",{});var YEt=s(t2e);RJo=r(YEt,"not"),YEt.forEach(t),PJo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(Kre,"A",{href:!0});var KEt=s(Bz);BJo=r(KEt,"from_pretrained()"),KEt.forEach(t),IJo=r(Kre," to load the model weights."),Kre.forEach(t),NJo=i(A6),T(R0.$$.fragment,A6),A6.forEach(t),qJo=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(My.$$.fragment,_a),jJo=i(_a),a2e=n(_a,"P",{});var ZEt=s(a2e);DJo=r(ZEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZEt.forEach(t),GJo=i(_a),Xa=n(_a,"P",{});var L6=s(Xa);OJo=r(L6,"The model class to instantiate is selected based on the "),n2e=n(L6,"CODE",{});var eCt=s(n2e);VJo=r(eCt,"model_type"),eCt.forEach(t),XJo=r(L6,` property of the config object (either
passed as an argument or loaded from `),s2e=n(L6,"CODE",{});var oCt=s(s2e);zJo=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),QJo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(L6,"CODE",{});var rCt=s(l2e);WJo=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),HJo=r(L6,":"),L6.forEach(t),UJo=i(_a),U=n(_a,"UL",{});var J=s(U);P0=n(J,"LI",{});var uBe=s(P0);i2e=n(uBe,"STRONG",{});var tCt=s(i2e);JJo=r(tCt,"albert"),tCt.forEach(t),YJo=r(uBe," \u2014 "),Iz=n(uBe,"A",{href:!0});var aCt=s(Iz);KJo=r(aCt,"AlbertForTokenClassification"),aCt.forEach(t),ZJo=r(uBe," (ALBERT model)"),uBe.forEach(t),eYo=i(J),B0=n(J,"LI",{});var bBe=s(B0);d2e=n(bBe,"STRONG",{});var nCt=s(d2e);oYo=r(nCt,"bert"),nCt.forEach(t),rYo=r(bBe," \u2014 "),Nz=n(bBe,"A",{href:!0});var sCt=s(Nz);tYo=r(sCt,"BertForTokenClassification"),sCt.forEach(t),aYo=r(bBe," (BERT model)"),bBe.forEach(t),nYo=i(J),I0=n(J,"LI",{});var vBe=s(I0);c2e=n(vBe,"STRONG",{});var lCt=s(c2e);sYo=r(lCt,"big_bird"),lCt.forEach(t),lYo=r(vBe," \u2014 "),qz=n(vBe,"A",{href:!0});var iCt=s(qz);iYo=r(iCt,"BigBirdForTokenClassification"),iCt.forEach(t),dYo=r(vBe," (BigBird model)"),vBe.forEach(t),cYo=i(J),N0=n(J,"LI",{});var FBe=s(N0);f2e=n(FBe,"STRONG",{});var dCt=s(f2e);fYo=r(dCt,"bloom"),dCt.forEach(t),mYo=r(FBe," \u2014 "),jz=n(FBe,"A",{href:!0});var cCt=s(jz);gYo=r(cCt,"BloomForTokenClassification"),cCt.forEach(t),hYo=r(FBe," (BLOOM model)"),FBe.forEach(t),pYo=i(J),q0=n(J,"LI",{});var TBe=s(q0);m2e=n(TBe,"STRONG",{});var fCt=s(m2e);_Yo=r(fCt,"camembert"),fCt.forEach(t),uYo=r(TBe," \u2014 "),Dz=n(TBe,"A",{href:!0});var mCt=s(Dz);bYo=r(mCt,"CamembertForTokenClassification"),mCt.forEach(t),vYo=r(TBe," (CamemBERT model)"),TBe.forEach(t),FYo=i(J),j0=n(J,"LI",{});var MBe=s(j0);g2e=n(MBe,"STRONG",{});var gCt=s(g2e);TYo=r(gCt,"canine"),gCt.forEach(t),MYo=r(MBe," \u2014 "),Gz=n(MBe,"A",{href:!0});var hCt=s(Gz);EYo=r(hCt,"CanineForTokenClassification"),hCt.forEach(t),CYo=r(MBe," (CANINE model)"),MBe.forEach(t),wYo=i(J),D0=n(J,"LI",{});var EBe=s(D0);h2e=n(EBe,"STRONG",{});var pCt=s(h2e);AYo=r(pCt,"convbert"),pCt.forEach(t),LYo=r(EBe," \u2014 "),Oz=n(EBe,"A",{href:!0});var _Ct=s(Oz);yYo=r(_Ct,"ConvBertForTokenClassification"),_Ct.forEach(t),xYo=r(EBe," (ConvBERT model)"),EBe.forEach(t),$Yo=i(J),G0=n(J,"LI",{});var CBe=s(G0);p2e=n(CBe,"STRONG",{});var uCt=s(p2e);kYo=r(uCt,"data2vec-text"),uCt.forEach(t),SYo=r(CBe," \u2014 "),Vz=n(CBe,"A",{href:!0});var bCt=s(Vz);RYo=r(bCt,"Data2VecTextForTokenClassification"),bCt.forEach(t),PYo=r(CBe," (Data2VecText model)"),CBe.forEach(t),BYo=i(J),O0=n(J,"LI",{});var wBe=s(O0);_2e=n(wBe,"STRONG",{});var vCt=s(_2e);IYo=r(vCt,"deberta"),vCt.forEach(t),NYo=r(wBe," \u2014 "),Xz=n(wBe,"A",{href:!0});var FCt=s(Xz);qYo=r(FCt,"DebertaForTokenClassification"),FCt.forEach(t),jYo=r(wBe," (DeBERTa model)"),wBe.forEach(t),DYo=i(J),V0=n(J,"LI",{});var ABe=s(V0);u2e=n(ABe,"STRONG",{});var TCt=s(u2e);GYo=r(TCt,"deberta-v2"),TCt.forEach(t),OYo=r(ABe," \u2014 "),zz=n(ABe,"A",{href:!0});var MCt=s(zz);VYo=r(MCt,"DebertaV2ForTokenClassification"),MCt.forEach(t),XYo=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),zYo=i(J),X0=n(J,"LI",{});var LBe=s(X0);b2e=n(LBe,"STRONG",{});var ECt=s(b2e);QYo=r(ECt,"distilbert"),ECt.forEach(t),WYo=r(LBe," \u2014 "),Qz=n(LBe,"A",{href:!0});var CCt=s(Qz);HYo=r(CCt,"DistilBertForTokenClassification"),CCt.forEach(t),UYo=r(LBe," (DistilBERT model)"),LBe.forEach(t),JYo=i(J),z0=n(J,"LI",{});var yBe=s(z0);v2e=n(yBe,"STRONG",{});var wCt=s(v2e);YYo=r(wCt,"electra"),wCt.forEach(t),KYo=r(yBe," \u2014 "),Wz=n(yBe,"A",{href:!0});var ACt=s(Wz);ZYo=r(ACt,"ElectraForTokenClassification"),ACt.forEach(t),eKo=r(yBe," (ELECTRA model)"),yBe.forEach(t),oKo=i(J),Q0=n(J,"LI",{});var xBe=s(Q0);F2e=n(xBe,"STRONG",{});var LCt=s(F2e);rKo=r(LCt,"flaubert"),LCt.forEach(t),tKo=r(xBe," \u2014 "),Hz=n(xBe,"A",{href:!0});var yCt=s(Hz);aKo=r(yCt,"FlaubertForTokenClassification"),yCt.forEach(t),nKo=r(xBe," (FlauBERT model)"),xBe.forEach(t),sKo=i(J),W0=n(J,"LI",{});var $Be=s(W0);T2e=n($Be,"STRONG",{});var xCt=s(T2e);lKo=r(xCt,"fnet"),xCt.forEach(t),iKo=r($Be," \u2014 "),Uz=n($Be,"A",{href:!0});var $Ct=s(Uz);dKo=r($Ct,"FNetForTokenClassification"),$Ct.forEach(t),cKo=r($Be," (FNet model)"),$Be.forEach(t),fKo=i(J),H0=n(J,"LI",{});var kBe=s(H0);M2e=n(kBe,"STRONG",{});var kCt=s(M2e);mKo=r(kCt,"funnel"),kCt.forEach(t),gKo=r(kBe," \u2014 "),Jz=n(kBe,"A",{href:!0});var SCt=s(Jz);hKo=r(SCt,"FunnelForTokenClassification"),SCt.forEach(t),pKo=r(kBe," (Funnel Transformer model)"),kBe.forEach(t),_Ko=i(J),U0=n(J,"LI",{});var SBe=s(U0);E2e=n(SBe,"STRONG",{});var RCt=s(E2e);uKo=r(RCt,"gpt2"),RCt.forEach(t),bKo=r(SBe," \u2014 "),Yz=n(SBe,"A",{href:!0});var PCt=s(Yz);vKo=r(PCt,"GPT2ForTokenClassification"),PCt.forEach(t),FKo=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),TKo=i(J),J0=n(J,"LI",{});var RBe=s(J0);C2e=n(RBe,"STRONG",{});var BCt=s(C2e);MKo=r(BCt,"ibert"),BCt.forEach(t),EKo=r(RBe," \u2014 "),Kz=n(RBe,"A",{href:!0});var ICt=s(Kz);CKo=r(ICt,"IBertForTokenClassification"),ICt.forEach(t),wKo=r(RBe," (I-BERT model)"),RBe.forEach(t),AKo=i(J),Y0=n(J,"LI",{});var PBe=s(Y0);w2e=n(PBe,"STRONG",{});var NCt=s(w2e);LKo=r(NCt,"layoutlm"),NCt.forEach(t),yKo=r(PBe," \u2014 "),Zz=n(PBe,"A",{href:!0});var qCt=s(Zz);xKo=r(qCt,"LayoutLMForTokenClassification"),qCt.forEach(t),$Ko=r(PBe," (LayoutLM model)"),PBe.forEach(t),kKo=i(J),K0=n(J,"LI",{});var BBe=s(K0);A2e=n(BBe,"STRONG",{});var jCt=s(A2e);SKo=r(jCt,"layoutlmv2"),jCt.forEach(t),RKo=r(BBe," \u2014 "),eQ=n(BBe,"A",{href:!0});var DCt=s(eQ);PKo=r(DCt,"LayoutLMv2ForTokenClassification"),DCt.forEach(t),BKo=r(BBe," (LayoutLMv2 model)"),BBe.forEach(t),IKo=i(J),Z0=n(J,"LI",{});var IBe=s(Z0);L2e=n(IBe,"STRONG",{});var GCt=s(L2e);NKo=r(GCt,"layoutlmv3"),GCt.forEach(t),qKo=r(IBe," \u2014 "),oQ=n(IBe,"A",{href:!0});var OCt=s(oQ);jKo=r(OCt,"LayoutLMv3ForTokenClassification"),OCt.forEach(t),DKo=r(IBe," (LayoutLMv3 model)"),IBe.forEach(t),GKo=i(J),eF=n(J,"LI",{});var NBe=s(eF);y2e=n(NBe,"STRONG",{});var VCt=s(y2e);OKo=r(VCt,"longformer"),VCt.forEach(t),VKo=r(NBe," \u2014 "),rQ=n(NBe,"A",{href:!0});var XCt=s(rQ);XKo=r(XCt,"LongformerForTokenClassification"),XCt.forEach(t),zKo=r(NBe," (Longformer model)"),NBe.forEach(t),QKo=i(J),oF=n(J,"LI",{});var qBe=s(oF);x2e=n(qBe,"STRONG",{});var zCt=s(x2e);WKo=r(zCt,"megatron-bert"),zCt.forEach(t),HKo=r(qBe," \u2014 "),tQ=n(qBe,"A",{href:!0});var QCt=s(tQ);UKo=r(QCt,"MegatronBertForTokenClassification"),QCt.forEach(t),JKo=r(qBe," (Megatron-BERT model)"),qBe.forEach(t),YKo=i(J),rF=n(J,"LI",{});var jBe=s(rF);$2e=n(jBe,"STRONG",{});var WCt=s($2e);KKo=r(WCt,"mobilebert"),WCt.forEach(t),ZKo=r(jBe," \u2014 "),aQ=n(jBe,"A",{href:!0});var HCt=s(aQ);eZo=r(HCt,"MobileBertForTokenClassification"),HCt.forEach(t),oZo=r(jBe," (MobileBERT model)"),jBe.forEach(t),rZo=i(J),tF=n(J,"LI",{});var DBe=s(tF);k2e=n(DBe,"STRONG",{});var UCt=s(k2e);tZo=r(UCt,"mpnet"),UCt.forEach(t),aZo=r(DBe," \u2014 "),nQ=n(DBe,"A",{href:!0});var JCt=s(nQ);nZo=r(JCt,"MPNetForTokenClassification"),JCt.forEach(t),sZo=r(DBe," (MPNet model)"),DBe.forEach(t),lZo=i(J),aF=n(J,"LI",{});var GBe=s(aF);S2e=n(GBe,"STRONG",{});var YCt=s(S2e);iZo=r(YCt,"nezha"),YCt.forEach(t),dZo=r(GBe," \u2014 "),sQ=n(GBe,"A",{href:!0});var KCt=s(sQ);cZo=r(KCt,"NezhaForTokenClassification"),KCt.forEach(t),fZo=r(GBe," (Nezha model)"),GBe.forEach(t),mZo=i(J),nF=n(J,"LI",{});var OBe=s(nF);R2e=n(OBe,"STRONG",{});var ZCt=s(R2e);gZo=r(ZCt,"nystromformer"),ZCt.forEach(t),hZo=r(OBe," \u2014 "),lQ=n(OBe,"A",{href:!0});var e3t=s(lQ);pZo=r(e3t,"NystromformerForTokenClassification"),e3t.forEach(t),_Zo=r(OBe," (Nystr\xF6mformer model)"),OBe.forEach(t),uZo=i(J),sF=n(J,"LI",{});var VBe=s(sF);P2e=n(VBe,"STRONG",{});var o3t=s(P2e);bZo=r(o3t,"qdqbert"),o3t.forEach(t),vZo=r(VBe," \u2014 "),iQ=n(VBe,"A",{href:!0});var r3t=s(iQ);FZo=r(r3t,"QDQBertForTokenClassification"),r3t.forEach(t),TZo=r(VBe," (QDQBert model)"),VBe.forEach(t),MZo=i(J),lF=n(J,"LI",{});var XBe=s(lF);B2e=n(XBe,"STRONG",{});var t3t=s(B2e);EZo=r(t3t,"rembert"),t3t.forEach(t),CZo=r(XBe," \u2014 "),dQ=n(XBe,"A",{href:!0});var a3t=s(dQ);wZo=r(a3t,"RemBertForTokenClassification"),a3t.forEach(t),AZo=r(XBe," (RemBERT model)"),XBe.forEach(t),LZo=i(J),iF=n(J,"LI",{});var zBe=s(iF);I2e=n(zBe,"STRONG",{});var n3t=s(I2e);yZo=r(n3t,"roberta"),n3t.forEach(t),xZo=r(zBe," \u2014 "),cQ=n(zBe,"A",{href:!0});var s3t=s(cQ);$Zo=r(s3t,"RobertaForTokenClassification"),s3t.forEach(t),kZo=r(zBe," (RoBERTa model)"),zBe.forEach(t),SZo=i(J),dF=n(J,"LI",{});var QBe=s(dF);N2e=n(QBe,"STRONG",{});var l3t=s(N2e);RZo=r(l3t,"roformer"),l3t.forEach(t),PZo=r(QBe," \u2014 "),fQ=n(QBe,"A",{href:!0});var i3t=s(fQ);BZo=r(i3t,"RoFormerForTokenClassification"),i3t.forEach(t),IZo=r(QBe," (RoFormer model)"),QBe.forEach(t),NZo=i(J),cF=n(J,"LI",{});var WBe=s(cF);q2e=n(WBe,"STRONG",{});var d3t=s(q2e);qZo=r(d3t,"squeezebert"),d3t.forEach(t),jZo=r(WBe," \u2014 "),mQ=n(WBe,"A",{href:!0});var c3t=s(mQ);DZo=r(c3t,"SqueezeBertForTokenClassification"),c3t.forEach(t),GZo=r(WBe," (SqueezeBERT model)"),WBe.forEach(t),OZo=i(J),fF=n(J,"LI",{});var HBe=s(fF);j2e=n(HBe,"STRONG",{});var f3t=s(j2e);VZo=r(f3t,"xlm"),f3t.forEach(t),XZo=r(HBe," \u2014 "),gQ=n(HBe,"A",{href:!0});var m3t=s(gQ);zZo=r(m3t,"XLMForTokenClassification"),m3t.forEach(t),QZo=r(HBe," (XLM model)"),HBe.forEach(t),WZo=i(J),mF=n(J,"LI",{});var UBe=s(mF);D2e=n(UBe,"STRONG",{});var g3t=s(D2e);HZo=r(g3t,"xlm-roberta"),g3t.forEach(t),UZo=r(UBe," \u2014 "),hQ=n(UBe,"A",{href:!0});var h3t=s(hQ);JZo=r(h3t,"XLMRobertaForTokenClassification"),h3t.forEach(t),YZo=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),KZo=i(J),gF=n(J,"LI",{});var JBe=s(gF);G2e=n(JBe,"STRONG",{});var p3t=s(G2e);ZZo=r(p3t,"xlm-roberta-xl"),p3t.forEach(t),eer=r(JBe," \u2014 "),pQ=n(JBe,"A",{href:!0});var _3t=s(pQ);oer=r(_3t,"XLMRobertaXLForTokenClassification"),_3t.forEach(t),rer=r(JBe," (XLM-RoBERTa-XL model)"),JBe.forEach(t),ter=i(J),hF=n(J,"LI",{});var YBe=s(hF);O2e=n(YBe,"STRONG",{});var u3t=s(O2e);aer=r(u3t,"xlnet"),u3t.forEach(t),ner=r(YBe," \u2014 "),_Q=n(YBe,"A",{href:!0});var b3t=s(_Q);ser=r(b3t,"XLNetForTokenClassification"),b3t.forEach(t),ler=r(YBe," (XLNet model)"),YBe.forEach(t),ier=i(J),pF=n(J,"LI",{});var KBe=s(pF);V2e=n(KBe,"STRONG",{});var v3t=s(V2e);der=r(v3t,"yoso"),v3t.forEach(t),cer=r(KBe," \u2014 "),uQ=n(KBe,"A",{href:!0});var F3t=s(uQ);fer=r(F3t,"YosoForTokenClassification"),F3t.forEach(t),mer=r(KBe," (YOSO model)"),KBe.forEach(t),J.forEach(t),ger=i(_a),_F=n(_a,"P",{});var ZBe=s(_F);her=r(ZBe,"The model is set in evaluation mode by default using "),X2e=n(ZBe,"CODE",{});var T3t=s(X2e);per=r(T3t,"model.eval()"),T3t.forEach(t),_er=r(ZBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=n(ZBe,"CODE",{});var M3t=s(z2e);uer=r(M3t,"model.train()"),M3t.forEach(t),ZBe.forEach(t),ber=i(_a),T(uF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),IXe=i(f),hd=n(f,"H2",{class:!0});var OQe=s(hd);bF=n(OQe,"A",{id:!0,class:!0,href:!0});var E3t=s(bF);Q2e=n(E3t,"SPAN",{});var C3t=s(Q2e);T(Ey.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),ver=i(OQe),W2e=n(OQe,"SPAN",{});var w3t=s(W2e);Fer=r(w3t,"AutoModelForQuestionAnswering"),w3t.forEach(t),OQe.forEach(t),NXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(Cy.$$.fragment,fl),Ter=i(fl),pd=n(fl,"P",{});var Zre=s(pd);Mer=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=n(Zre,"A",{href:!0});var A3t=s(bQ);Eer=r(A3t,"from_pretrained()"),A3t.forEach(t),Cer=r(Zre," class method or the "),vQ=n(Zre,"A",{href:!0});var L3t=s(vQ);wer=r(L3t,"from_config()"),L3t.forEach(t),Aer=r(Zre,` class
method.`),Zre.forEach(t),Ler=i(fl),wy=n(fl,"P",{});var VQe=s(wy);yer=r(VQe,"This class cannot be instantiated directly using "),H2e=n(VQe,"CODE",{});var y3t=s(H2e);xer=r(y3t,"__init__()"),y3t.forEach(t),$er=r(VQe," (throws an error)."),VQe.forEach(t),ker=i(fl),ut=n(fl,"DIV",{class:!0});var y6=s(ut);T(Ay.$$.fragment,y6),Ser=i(y6),U2e=n(y6,"P",{});var x3t=s(U2e);Rer=r(x3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x3t.forEach(t),Per=i(y6),_d=n(y6,"P",{});var ete=s(_d);Ber=r(ete,`Note:
Loading a model from its configuration file does `),J2e=n(ete,"STRONG",{});var $3t=s(J2e);Ier=r($3t,"not"),$3t.forEach(t),Ner=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(ete,"A",{href:!0});var k3t=s(FQ);qer=r(k3t,"from_pretrained()"),k3t.forEach(t),jer=r(ete," to load the model weights."),ete.forEach(t),Der=i(y6),T(vF.$$.fragment,y6),y6.forEach(t),Ger=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(Ly.$$.fragment,ua),Oer=i(ua),Y2e=n(ua,"P",{});var S3t=s(Y2e);Ver=r(S3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S3t.forEach(t),Xer=i(ua),za=n(ua,"P",{});var x6=s(za);zer=r(x6,"The model class to instantiate is selected based on the "),K2e=n(x6,"CODE",{});var R3t=s(K2e);Qer=r(R3t,"model_type"),R3t.forEach(t),Wer=r(x6,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(x6,"CODE",{});var P3t=s(Z2e);Her=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),Uer=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(x6,"CODE",{});var B3t=s(e1e);Jer=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),Yer=r(x6,":"),x6.forEach(t),Ker=i(ua),V=n(ua,"UL",{});var X=s(V);FF=n(X,"LI",{});var eIe=s(FF);o1e=n(eIe,"STRONG",{});var I3t=s(o1e);Zer=r(I3t,"albert"),I3t.forEach(t),eor=r(eIe," \u2014 "),TQ=n(eIe,"A",{href:!0});var N3t=s(TQ);oor=r(N3t,"AlbertForQuestionAnswering"),N3t.forEach(t),ror=r(eIe," (ALBERT model)"),eIe.forEach(t),tor=i(X),TF=n(X,"LI",{});var oIe=s(TF);r1e=n(oIe,"STRONG",{});var q3t=s(r1e);aor=r(q3t,"bart"),q3t.forEach(t),nor=r(oIe," \u2014 "),MQ=n(oIe,"A",{href:!0});var j3t=s(MQ);sor=r(j3t,"BartForQuestionAnswering"),j3t.forEach(t),lor=r(oIe," (BART model)"),oIe.forEach(t),ior=i(X),MF=n(X,"LI",{});var rIe=s(MF);t1e=n(rIe,"STRONG",{});var D3t=s(t1e);dor=r(D3t,"bert"),D3t.forEach(t),cor=r(rIe," \u2014 "),EQ=n(rIe,"A",{href:!0});var G3t=s(EQ);mor=r(G3t,"BertForQuestionAnswering"),G3t.forEach(t),gor=r(rIe," (BERT model)"),rIe.forEach(t),hor=i(X),EF=n(X,"LI",{});var tIe=s(EF);a1e=n(tIe,"STRONG",{});var O3t=s(a1e);por=r(O3t,"big_bird"),O3t.forEach(t),_or=r(tIe," \u2014 "),CQ=n(tIe,"A",{href:!0});var V3t=s(CQ);uor=r(V3t,"BigBirdForQuestionAnswering"),V3t.forEach(t),bor=r(tIe," (BigBird model)"),tIe.forEach(t),vor=i(X),CF=n(X,"LI",{});var aIe=s(CF);n1e=n(aIe,"STRONG",{});var X3t=s(n1e);For=r(X3t,"bigbird_pegasus"),X3t.forEach(t),Tor=r(aIe," \u2014 "),wQ=n(aIe,"A",{href:!0});var z3t=s(wQ);Mor=r(z3t,"BigBirdPegasusForQuestionAnswering"),z3t.forEach(t),Eor=r(aIe," (BigBird-Pegasus model)"),aIe.forEach(t),Cor=i(X),wF=n(X,"LI",{});var nIe=s(wF);s1e=n(nIe,"STRONG",{});var Q3t=s(s1e);wor=r(Q3t,"camembert"),Q3t.forEach(t),Aor=r(nIe," \u2014 "),AQ=n(nIe,"A",{href:!0});var W3t=s(AQ);Lor=r(W3t,"CamembertForQuestionAnswering"),W3t.forEach(t),yor=r(nIe," (CamemBERT model)"),nIe.forEach(t),xor=i(X),AF=n(X,"LI",{});var sIe=s(AF);l1e=n(sIe,"STRONG",{});var H3t=s(l1e);$or=r(H3t,"canine"),H3t.forEach(t),kor=r(sIe," \u2014 "),LQ=n(sIe,"A",{href:!0});var U3t=s(LQ);Sor=r(U3t,"CanineForQuestionAnswering"),U3t.forEach(t),Ror=r(sIe," (CANINE model)"),sIe.forEach(t),Por=i(X),LF=n(X,"LI",{});var lIe=s(LF);i1e=n(lIe,"STRONG",{});var J3t=s(i1e);Bor=r(J3t,"convbert"),J3t.forEach(t),Ior=r(lIe," \u2014 "),yQ=n(lIe,"A",{href:!0});var Y3t=s(yQ);Nor=r(Y3t,"ConvBertForQuestionAnswering"),Y3t.forEach(t),qor=r(lIe," (ConvBERT model)"),lIe.forEach(t),jor=i(X),yF=n(X,"LI",{});var iIe=s(yF);d1e=n(iIe,"STRONG",{});var K3t=s(d1e);Dor=r(K3t,"data2vec-text"),K3t.forEach(t),Gor=r(iIe," \u2014 "),xQ=n(iIe,"A",{href:!0});var Z3t=s(xQ);Oor=r(Z3t,"Data2VecTextForQuestionAnswering"),Z3t.forEach(t),Vor=r(iIe," (Data2VecText model)"),iIe.forEach(t),Xor=i(X),xF=n(X,"LI",{});var dIe=s(xF);c1e=n(dIe,"STRONG",{});var e5t=s(c1e);zor=r(e5t,"deberta"),e5t.forEach(t),Qor=r(dIe," \u2014 "),$Q=n(dIe,"A",{href:!0});var o5t=s($Q);Wor=r(o5t,"DebertaForQuestionAnswering"),o5t.forEach(t),Hor=r(dIe," (DeBERTa model)"),dIe.forEach(t),Uor=i(X),$F=n(X,"LI",{});var cIe=s($F);f1e=n(cIe,"STRONG",{});var r5t=s(f1e);Jor=r(r5t,"deberta-v2"),r5t.forEach(t),Yor=r(cIe," \u2014 "),kQ=n(cIe,"A",{href:!0});var t5t=s(kQ);Kor=r(t5t,"DebertaV2ForQuestionAnswering"),t5t.forEach(t),Zor=r(cIe," (DeBERTa-v2 model)"),cIe.forEach(t),err=i(X),kF=n(X,"LI",{});var fIe=s(kF);m1e=n(fIe,"STRONG",{});var a5t=s(m1e);orr=r(a5t,"distilbert"),a5t.forEach(t),rrr=r(fIe," \u2014 "),SQ=n(fIe,"A",{href:!0});var n5t=s(SQ);trr=r(n5t,"DistilBertForQuestionAnswering"),n5t.forEach(t),arr=r(fIe," (DistilBERT model)"),fIe.forEach(t),nrr=i(X),SF=n(X,"LI",{});var mIe=s(SF);g1e=n(mIe,"STRONG",{});var s5t=s(g1e);srr=r(s5t,"electra"),s5t.forEach(t),lrr=r(mIe," \u2014 "),RQ=n(mIe,"A",{href:!0});var l5t=s(RQ);irr=r(l5t,"ElectraForQuestionAnswering"),l5t.forEach(t),drr=r(mIe," (ELECTRA model)"),mIe.forEach(t),crr=i(X),RF=n(X,"LI",{});var gIe=s(RF);h1e=n(gIe,"STRONG",{});var i5t=s(h1e);frr=r(i5t,"flaubert"),i5t.forEach(t),mrr=r(gIe," \u2014 "),PQ=n(gIe,"A",{href:!0});var d5t=s(PQ);grr=r(d5t,"FlaubertForQuestionAnsweringSimple"),d5t.forEach(t),hrr=r(gIe," (FlauBERT model)"),gIe.forEach(t),prr=i(X),PF=n(X,"LI",{});var hIe=s(PF);p1e=n(hIe,"STRONG",{});var c5t=s(p1e);_rr=r(c5t,"fnet"),c5t.forEach(t),urr=r(hIe," \u2014 "),BQ=n(hIe,"A",{href:!0});var f5t=s(BQ);brr=r(f5t,"FNetForQuestionAnswering"),f5t.forEach(t),vrr=r(hIe," (FNet model)"),hIe.forEach(t),Frr=i(X),BF=n(X,"LI",{});var pIe=s(BF);_1e=n(pIe,"STRONG",{});var m5t=s(_1e);Trr=r(m5t,"funnel"),m5t.forEach(t),Mrr=r(pIe," \u2014 "),IQ=n(pIe,"A",{href:!0});var g5t=s(IQ);Err=r(g5t,"FunnelForQuestionAnswering"),g5t.forEach(t),Crr=r(pIe," (Funnel Transformer model)"),pIe.forEach(t),wrr=i(X),IF=n(X,"LI",{});var _Ie=s(IF);u1e=n(_Ie,"STRONG",{});var h5t=s(u1e);Arr=r(h5t,"gptj"),h5t.forEach(t),Lrr=r(_Ie," \u2014 "),NQ=n(_Ie,"A",{href:!0});var p5t=s(NQ);yrr=r(p5t,"GPTJForQuestionAnswering"),p5t.forEach(t),xrr=r(_Ie," (GPT-J model)"),_Ie.forEach(t),$rr=i(X),NF=n(X,"LI",{});var uIe=s(NF);b1e=n(uIe,"STRONG",{});var _5t=s(b1e);krr=r(_5t,"ibert"),_5t.forEach(t),Srr=r(uIe," \u2014 "),qQ=n(uIe,"A",{href:!0});var u5t=s(qQ);Rrr=r(u5t,"IBertForQuestionAnswering"),u5t.forEach(t),Prr=r(uIe," (I-BERT model)"),uIe.forEach(t),Brr=i(X),qF=n(X,"LI",{});var bIe=s(qF);v1e=n(bIe,"STRONG",{});var b5t=s(v1e);Irr=r(b5t,"layoutlmv2"),b5t.forEach(t),Nrr=r(bIe," \u2014 "),jQ=n(bIe,"A",{href:!0});var v5t=s(jQ);qrr=r(v5t,"LayoutLMv2ForQuestionAnswering"),v5t.forEach(t),jrr=r(bIe," (LayoutLMv2 model)"),bIe.forEach(t),Drr=i(X),jF=n(X,"LI",{});var vIe=s(jF);F1e=n(vIe,"STRONG",{});var F5t=s(F1e);Grr=r(F5t,"layoutlmv3"),F5t.forEach(t),Orr=r(vIe," \u2014 "),DQ=n(vIe,"A",{href:!0});var T5t=s(DQ);Vrr=r(T5t,"LayoutLMv3ForQuestionAnswering"),T5t.forEach(t),Xrr=r(vIe," (LayoutLMv3 model)"),vIe.forEach(t),zrr=i(X),DF=n(X,"LI",{});var FIe=s(DF);T1e=n(FIe,"STRONG",{});var M5t=s(T1e);Qrr=r(M5t,"led"),M5t.forEach(t),Wrr=r(FIe," \u2014 "),GQ=n(FIe,"A",{href:!0});var E5t=s(GQ);Hrr=r(E5t,"LEDForQuestionAnswering"),E5t.forEach(t),Urr=r(FIe," (LED model)"),FIe.forEach(t),Jrr=i(X),GF=n(X,"LI",{});var TIe=s(GF);M1e=n(TIe,"STRONG",{});var C5t=s(M1e);Yrr=r(C5t,"longformer"),C5t.forEach(t),Krr=r(TIe," \u2014 "),OQ=n(TIe,"A",{href:!0});var w5t=s(OQ);Zrr=r(w5t,"LongformerForQuestionAnswering"),w5t.forEach(t),etr=r(TIe," (Longformer model)"),TIe.forEach(t),otr=i(X),OF=n(X,"LI",{});var MIe=s(OF);E1e=n(MIe,"STRONG",{});var A5t=s(E1e);rtr=r(A5t,"lxmert"),A5t.forEach(t),ttr=r(MIe," \u2014 "),VQ=n(MIe,"A",{href:!0});var L5t=s(VQ);atr=r(L5t,"LxmertForQuestionAnswering"),L5t.forEach(t),ntr=r(MIe," (LXMERT model)"),MIe.forEach(t),str=i(X),VF=n(X,"LI",{});var EIe=s(VF);C1e=n(EIe,"STRONG",{});var y5t=s(C1e);ltr=r(y5t,"mbart"),y5t.forEach(t),itr=r(EIe," \u2014 "),XQ=n(EIe,"A",{href:!0});var x5t=s(XQ);dtr=r(x5t,"MBartForQuestionAnswering"),x5t.forEach(t),ctr=r(EIe," (mBART model)"),EIe.forEach(t),ftr=i(X),XF=n(X,"LI",{});var CIe=s(XF);w1e=n(CIe,"STRONG",{});var $5t=s(w1e);mtr=r($5t,"megatron-bert"),$5t.forEach(t),gtr=r(CIe," \u2014 "),zQ=n(CIe,"A",{href:!0});var k5t=s(zQ);htr=r(k5t,"MegatronBertForQuestionAnswering"),k5t.forEach(t),ptr=r(CIe," (Megatron-BERT model)"),CIe.forEach(t),_tr=i(X),zF=n(X,"LI",{});var wIe=s(zF);A1e=n(wIe,"STRONG",{});var S5t=s(A1e);utr=r(S5t,"mobilebert"),S5t.forEach(t),btr=r(wIe," \u2014 "),QQ=n(wIe,"A",{href:!0});var R5t=s(QQ);vtr=r(R5t,"MobileBertForQuestionAnswering"),R5t.forEach(t),Ftr=r(wIe," (MobileBERT model)"),wIe.forEach(t),Ttr=i(X),QF=n(X,"LI",{});var AIe=s(QF);L1e=n(AIe,"STRONG",{});var P5t=s(L1e);Mtr=r(P5t,"mpnet"),P5t.forEach(t),Etr=r(AIe," \u2014 "),WQ=n(AIe,"A",{href:!0});var B5t=s(WQ);Ctr=r(B5t,"MPNetForQuestionAnswering"),B5t.forEach(t),wtr=r(AIe," (MPNet model)"),AIe.forEach(t),Atr=i(X),WF=n(X,"LI",{});var LIe=s(WF);y1e=n(LIe,"STRONG",{});var I5t=s(y1e);Ltr=r(I5t,"mvp"),I5t.forEach(t),ytr=r(LIe," \u2014 "),HQ=n(LIe,"A",{href:!0});var N5t=s(HQ);xtr=r(N5t,"MvpForQuestionAnswering"),N5t.forEach(t),$tr=r(LIe," (MVP model)"),LIe.forEach(t),ktr=i(X),HF=n(X,"LI",{});var yIe=s(HF);x1e=n(yIe,"STRONG",{});var q5t=s(x1e);Str=r(q5t,"nezha"),q5t.forEach(t),Rtr=r(yIe," \u2014 "),UQ=n(yIe,"A",{href:!0});var j5t=s(UQ);Ptr=r(j5t,"NezhaForQuestionAnswering"),j5t.forEach(t),Btr=r(yIe," (Nezha model)"),yIe.forEach(t),Itr=i(X),UF=n(X,"LI",{});var xIe=s(UF);$1e=n(xIe,"STRONG",{});var D5t=s($1e);Ntr=r(D5t,"nystromformer"),D5t.forEach(t),qtr=r(xIe," \u2014 "),JQ=n(xIe,"A",{href:!0});var G5t=s(JQ);jtr=r(G5t,"NystromformerForQuestionAnswering"),G5t.forEach(t),Dtr=r(xIe," (Nystr\xF6mformer model)"),xIe.forEach(t),Gtr=i(X),JF=n(X,"LI",{});var $Ie=s(JF);k1e=n($Ie,"STRONG",{});var O5t=s(k1e);Otr=r(O5t,"qdqbert"),O5t.forEach(t),Vtr=r($Ie," \u2014 "),YQ=n($Ie,"A",{href:!0});var V5t=s(YQ);Xtr=r(V5t,"QDQBertForQuestionAnswering"),V5t.forEach(t),ztr=r($Ie," (QDQBert model)"),$Ie.forEach(t),Qtr=i(X),YF=n(X,"LI",{});var kIe=s(YF);S1e=n(kIe,"STRONG",{});var X5t=s(S1e);Wtr=r(X5t,"reformer"),X5t.forEach(t),Htr=r(kIe," \u2014 "),KQ=n(kIe,"A",{href:!0});var z5t=s(KQ);Utr=r(z5t,"ReformerForQuestionAnswering"),z5t.forEach(t),Jtr=r(kIe," (Reformer model)"),kIe.forEach(t),Ytr=i(X),KF=n(X,"LI",{});var SIe=s(KF);R1e=n(SIe,"STRONG",{});var Q5t=s(R1e);Ktr=r(Q5t,"rembert"),Q5t.forEach(t),Ztr=r(SIe," \u2014 "),ZQ=n(SIe,"A",{href:!0});var W5t=s(ZQ);ear=r(W5t,"RemBertForQuestionAnswering"),W5t.forEach(t),oar=r(SIe," (RemBERT model)"),SIe.forEach(t),rar=i(X),ZF=n(X,"LI",{});var RIe=s(ZF);P1e=n(RIe,"STRONG",{});var H5t=s(P1e);tar=r(H5t,"roberta"),H5t.forEach(t),aar=r(RIe," \u2014 "),eW=n(RIe,"A",{href:!0});var U5t=s(eW);nar=r(U5t,"RobertaForQuestionAnswering"),U5t.forEach(t),sar=r(RIe," (RoBERTa model)"),RIe.forEach(t),lar=i(X),eT=n(X,"LI",{});var PIe=s(eT);B1e=n(PIe,"STRONG",{});var J5t=s(B1e);iar=r(J5t,"roformer"),J5t.forEach(t),dar=r(PIe," \u2014 "),oW=n(PIe,"A",{href:!0});var Y5t=s(oW);car=r(Y5t,"RoFormerForQuestionAnswering"),Y5t.forEach(t),far=r(PIe," (RoFormer model)"),PIe.forEach(t),mar=i(X),oT=n(X,"LI",{});var BIe=s(oT);I1e=n(BIe,"STRONG",{});var K5t=s(I1e);gar=r(K5t,"splinter"),K5t.forEach(t),har=r(BIe," \u2014 "),rW=n(BIe,"A",{href:!0});var Z5t=s(rW);par=r(Z5t,"SplinterForQuestionAnswering"),Z5t.forEach(t),_ar=r(BIe," (Splinter model)"),BIe.forEach(t),uar=i(X),rT=n(X,"LI",{});var IIe=s(rT);N1e=n(IIe,"STRONG",{});var ewt=s(N1e);bar=r(ewt,"squeezebert"),ewt.forEach(t),Far=r(IIe," \u2014 "),tW=n(IIe,"A",{href:!0});var owt=s(tW);Tar=r(owt,"SqueezeBertForQuestionAnswering"),owt.forEach(t),Mar=r(IIe," (SqueezeBERT model)"),IIe.forEach(t),Ear=i(X),tT=n(X,"LI",{});var NIe=s(tT);q1e=n(NIe,"STRONG",{});var rwt=s(q1e);Car=r(rwt,"xlm"),rwt.forEach(t),war=r(NIe," \u2014 "),aW=n(NIe,"A",{href:!0});var twt=s(aW);Aar=r(twt,"XLMForQuestionAnsweringSimple"),twt.forEach(t),Lar=r(NIe," (XLM model)"),NIe.forEach(t),yar=i(X),aT=n(X,"LI",{});var qIe=s(aT);j1e=n(qIe,"STRONG",{});var awt=s(j1e);xar=r(awt,"xlm-roberta"),awt.forEach(t),$ar=r(qIe," \u2014 "),nW=n(qIe,"A",{href:!0});var nwt=s(nW);kar=r(nwt,"XLMRobertaForQuestionAnswering"),nwt.forEach(t),Sar=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),Rar=i(X),nT=n(X,"LI",{});var jIe=s(nT);D1e=n(jIe,"STRONG",{});var swt=s(D1e);Par=r(swt,"xlm-roberta-xl"),swt.forEach(t),Bar=r(jIe," \u2014 "),sW=n(jIe,"A",{href:!0});var lwt=s(sW);Iar=r(lwt,"XLMRobertaXLForQuestionAnswering"),lwt.forEach(t),Nar=r(jIe," (XLM-RoBERTa-XL model)"),jIe.forEach(t),qar=i(X),sT=n(X,"LI",{});var DIe=s(sT);G1e=n(DIe,"STRONG",{});var iwt=s(G1e);jar=r(iwt,"xlnet"),iwt.forEach(t),Dar=r(DIe," \u2014 "),lW=n(DIe,"A",{href:!0});var dwt=s(lW);Gar=r(dwt,"XLNetForQuestionAnsweringSimple"),dwt.forEach(t),Oar=r(DIe," (XLNet model)"),DIe.forEach(t),Var=i(X),lT=n(X,"LI",{});var GIe=s(lT);O1e=n(GIe,"STRONG",{});var cwt=s(O1e);Xar=r(cwt,"yoso"),cwt.forEach(t),zar=r(GIe," \u2014 "),iW=n(GIe,"A",{href:!0});var fwt=s(iW);Qar=r(fwt,"YosoForQuestionAnswering"),fwt.forEach(t),War=r(GIe," (YOSO model)"),GIe.forEach(t),X.forEach(t),Har=i(ua),iT=n(ua,"P",{});var OIe=s(iT);Uar=r(OIe,"The model is set in evaluation mode by default using "),V1e=n(OIe,"CODE",{});var mwt=s(V1e);Jar=r(mwt,"model.eval()"),mwt.forEach(t),Yar=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=n(OIe,"CODE",{});var gwt=s(X1e);Kar=r(gwt,"model.train()"),gwt.forEach(t),OIe.forEach(t),Zar=i(ua),T(dT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),qXe=i(f),ud=n(f,"H2",{class:!0});var XQe=s(ud);cT=n(XQe,"A",{id:!0,class:!0,href:!0});var hwt=s(cT);z1e=n(hwt,"SPAN",{});var pwt=s(z1e);T(yy.$$.fragment,pwt),pwt.forEach(t),hwt.forEach(t),enr=i(XQe),Q1e=n(XQe,"SPAN",{});var _wt=s(Q1e);onr=r(_wt,"AutoModelForTableQuestionAnswering"),_wt.forEach(t),XQe.forEach(t),jXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(xy.$$.fragment,ml),rnr=i(ml),bd=n(ml,"P",{});var ote=s(bd);tnr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=n(ote,"A",{href:!0});var uwt=s(dW);anr=r(uwt,"from_pretrained()"),uwt.forEach(t),nnr=r(ote," class method or the "),cW=n(ote,"A",{href:!0});var bwt=s(cW);snr=r(bwt,"from_config()"),bwt.forEach(t),lnr=r(ote,` class
method.`),ote.forEach(t),inr=i(ml),$y=n(ml,"P",{});var zQe=s($y);dnr=r(zQe,"This class cannot be instantiated directly using "),W1e=n(zQe,"CODE",{});var vwt=s(W1e);cnr=r(vwt,"__init__()"),vwt.forEach(t),fnr=r(zQe," (throws an error)."),zQe.forEach(t),mnr=i(ml),bt=n(ml,"DIV",{class:!0});var $6=s(bt);T(ky.$$.fragment,$6),gnr=i($6),H1e=n($6,"P",{});var Fwt=s(H1e);hnr=r(Fwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fwt.forEach(t),pnr=i($6),vd=n($6,"P",{});var rte=s(vd);_nr=r(rte,`Note:
Loading a model from its configuration file does `),U1e=n(rte,"STRONG",{});var Twt=s(U1e);unr=r(Twt,"not"),Twt.forEach(t),bnr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(rte,"A",{href:!0});var Mwt=s(fW);vnr=r(Mwt,"from_pretrained()"),Mwt.forEach(t),Fnr=r(rte," to load the model weights."),rte.forEach(t),Tnr=i($6),T(fT.$$.fragment,$6),$6.forEach(t),Mnr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Sy.$$.fragment,ba),Enr=i(ba),J1e=n(ba,"P",{});var Ewt=s(J1e);Cnr=r(Ewt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ewt.forEach(t),wnr=i(ba),Qa=n(ba,"P",{});var k6=s(Qa);Anr=r(k6,"The model class to instantiate is selected based on the "),Y1e=n(k6,"CODE",{});var Cwt=s(Y1e);Lnr=r(Cwt,"model_type"),Cwt.forEach(t),ynr=r(k6,` property of the config object (either
passed as an argument or loaded from `),K1e=n(k6,"CODE",{});var wwt=s(K1e);xnr=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),$nr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(k6,"CODE",{});var Awt=s(Z1e);knr=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),Snr=r(k6,":"),k6.forEach(t),Rnr=i(ba),ebe=n(ba,"UL",{});var Lwt=s(ebe);mT=n(Lwt,"LI",{});var VIe=s(mT);obe=n(VIe,"STRONG",{});var ywt=s(obe);Pnr=r(ywt,"tapas"),ywt.forEach(t),Bnr=r(VIe," \u2014 "),mW=n(VIe,"A",{href:!0});var xwt=s(mW);Inr=r(xwt,"TapasForQuestionAnswering"),xwt.forEach(t),Nnr=r(VIe," (TAPAS model)"),VIe.forEach(t),Lwt.forEach(t),qnr=i(ba),gT=n(ba,"P",{});var XIe=s(gT);jnr=r(XIe,"The model is set in evaluation mode by default using "),rbe=n(XIe,"CODE",{});var $wt=s(rbe);Dnr=r($wt,"model.eval()"),$wt.forEach(t),Gnr=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(XIe,"CODE",{});var kwt=s(tbe);Onr=r(kwt,"model.train()"),kwt.forEach(t),XIe.forEach(t),Vnr=i(ba),T(hT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),DXe=i(f),Fd=n(f,"H2",{class:!0});var QQe=s(Fd);pT=n(QQe,"A",{id:!0,class:!0,href:!0});var Swt=s(pT);abe=n(Swt,"SPAN",{});var Rwt=s(abe);T(Ry.$$.fragment,Rwt),Rwt.forEach(t),Swt.forEach(t),Xnr=i(QQe),nbe=n(QQe,"SPAN",{});var Pwt=s(nbe);znr=r(Pwt,"AutoModelForImageClassification"),Pwt.forEach(t),QQe.forEach(t),GXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(Py.$$.fragment,gl),Qnr=i(gl),Td=n(gl,"P",{});var tte=s(Td);Wnr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=n(tte,"A",{href:!0});var Bwt=s(gW);Hnr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),Unr=r(tte," class method or the "),hW=n(tte,"A",{href:!0});var Iwt=s(hW);Jnr=r(Iwt,"from_config()"),Iwt.forEach(t),Ynr=r(tte,` class
method.`),tte.forEach(t),Knr=i(gl),By=n(gl,"P",{});var WQe=s(By);Znr=r(WQe,"This class cannot be instantiated directly using "),sbe=n(WQe,"CODE",{});var Nwt=s(sbe);esr=r(Nwt,"__init__()"),Nwt.forEach(t),osr=r(WQe," (throws an error)."),WQe.forEach(t),rsr=i(gl),vt=n(gl,"DIV",{class:!0});var S6=s(vt);T(Iy.$$.fragment,S6),tsr=i(S6),lbe=n(S6,"P",{});var qwt=s(lbe);asr=r(qwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qwt.forEach(t),nsr=i(S6),Md=n(S6,"P",{});var ate=s(Md);ssr=r(ate,`Note:
Loading a model from its configuration file does `),ibe=n(ate,"STRONG",{});var jwt=s(ibe);lsr=r(jwt,"not"),jwt.forEach(t),isr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(ate,"A",{href:!0});var Dwt=s(pW);dsr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),csr=r(ate," to load the model weights."),ate.forEach(t),fsr=i(S6),T(_T.$$.fragment,S6),S6.forEach(t),msr=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Ny.$$.fragment,va),gsr=i(va),dbe=n(va,"P",{});var Gwt=s(dbe);hsr=r(Gwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gwt.forEach(t),psr=i(va),Wa=n(va,"P",{});var R6=s(Wa);_sr=r(R6,"The model class to instantiate is selected based on the "),cbe=n(R6,"CODE",{});var Owt=s(cbe);usr=r(Owt,"model_type"),Owt.forEach(t),bsr=r(R6,` property of the config object (either
passed as an argument or loaded from `),fbe=n(R6,"CODE",{});var Vwt=s(fbe);vsr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),Fsr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(R6,"CODE",{});var Xwt=s(mbe);Tsr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),Msr=r(R6,":"),R6.forEach(t),Esr=i(va),ve=n(va,"UL",{});var Te=s(ve);uT=n(Te,"LI",{});var zIe=s(uT);gbe=n(zIe,"STRONG",{});var zwt=s(gbe);Csr=r(zwt,"beit"),zwt.forEach(t),wsr=r(zIe," \u2014 "),_W=n(zIe,"A",{href:!0});var Qwt=s(_W);Asr=r(Qwt,"BeitForImageClassification"),Qwt.forEach(t),Lsr=r(zIe," (BEiT model)"),zIe.forEach(t),ysr=i(Te),bT=n(Te,"LI",{});var QIe=s(bT);hbe=n(QIe,"STRONG",{});var Wwt=s(hbe);xsr=r(Wwt,"convnext"),Wwt.forEach(t),$sr=r(QIe," \u2014 "),uW=n(QIe,"A",{href:!0});var Hwt=s(uW);ksr=r(Hwt,"ConvNextForImageClassification"),Hwt.forEach(t),Ssr=r(QIe," (ConvNeXT model)"),QIe.forEach(t),Rsr=i(Te),vT=n(Te,"LI",{});var WIe=s(vT);pbe=n(WIe,"STRONG",{});var Uwt=s(pbe);Psr=r(Uwt,"cvt"),Uwt.forEach(t),Bsr=r(WIe," \u2014 "),bW=n(WIe,"A",{href:!0});var Jwt=s(bW);Isr=r(Jwt,"CvtForImageClassification"),Jwt.forEach(t),Nsr=r(WIe," (CvT model)"),WIe.forEach(t),qsr=i(Te),FT=n(Te,"LI",{});var HIe=s(FT);_be=n(HIe,"STRONG",{});var Ywt=s(_be);jsr=r(Ywt,"data2vec-vision"),Ywt.forEach(t),Dsr=r(HIe," \u2014 "),vW=n(HIe,"A",{href:!0});var Kwt=s(vW);Gsr=r(Kwt,"Data2VecVisionForImageClassification"),Kwt.forEach(t),Osr=r(HIe," (Data2VecVision model)"),HIe.forEach(t),Vsr=i(Te),Hs=n(Te,"LI",{});var RS=s(Hs);ube=n(RS,"STRONG",{});var Zwt=s(ube);Xsr=r(Zwt,"deit"),Zwt.forEach(t),zsr=r(RS," \u2014 "),FW=n(RS,"A",{href:!0});var eAt=s(FW);Qsr=r(eAt,"DeiTForImageClassification"),eAt.forEach(t),Wsr=r(RS," or "),TW=n(RS,"A",{href:!0});var oAt=s(TW);Hsr=r(oAt,"DeiTForImageClassificationWithTeacher"),oAt.forEach(t),Usr=r(RS," (DeiT model)"),RS.forEach(t),Jsr=i(Te),TT=n(Te,"LI",{});var UIe=s(TT);bbe=n(UIe,"STRONG",{});var rAt=s(bbe);Ysr=r(rAt,"imagegpt"),rAt.forEach(t),Ksr=r(UIe," \u2014 "),MW=n(UIe,"A",{href:!0});var tAt=s(MW);Zsr=r(tAt,"ImageGPTForImageClassification"),tAt.forEach(t),elr=r(UIe," (ImageGPT model)"),UIe.forEach(t),olr=i(Te),Us=n(Te,"LI",{});var PS=s(Us);vbe=n(PS,"STRONG",{});var aAt=s(vbe);rlr=r(aAt,"levit"),aAt.forEach(t),tlr=r(PS," \u2014 "),EW=n(PS,"A",{href:!0});var nAt=s(EW);alr=r(nAt,"LevitForImageClassification"),nAt.forEach(t),nlr=r(PS," or "),CW=n(PS,"A",{href:!0});var sAt=s(CW);slr=r(sAt,"LevitForImageClassificationWithTeacher"),sAt.forEach(t),llr=r(PS," (LeViT model)"),PS.forEach(t),ilr=i(Te),MT=n(Te,"LI",{});var JIe=s(MT);Fbe=n(JIe,"STRONG",{});var lAt=s(Fbe);dlr=r(lAt,"mobilevit"),lAt.forEach(t),clr=r(JIe," \u2014 "),wW=n(JIe,"A",{href:!0});var iAt=s(wW);flr=r(iAt,"MobileViTForImageClassification"),iAt.forEach(t),mlr=r(JIe," (MobileViT model)"),JIe.forEach(t),glr=i(Te),Ft=n(Te,"LI",{});var Rf=s(Ft);Tbe=n(Rf,"STRONG",{});var dAt=s(Tbe);hlr=r(dAt,"perceiver"),dAt.forEach(t),plr=r(Rf," \u2014 "),AW=n(Rf,"A",{href:!0});var cAt=s(AW);_lr=r(cAt,"PerceiverForImageClassificationLearned"),cAt.forEach(t),ulr=r(Rf," or "),LW=n(Rf,"A",{href:!0});var fAt=s(LW);blr=r(fAt,"PerceiverForImageClassificationFourier"),fAt.forEach(t),vlr=r(Rf," or "),yW=n(Rf,"A",{href:!0});var mAt=s(yW);Flr=r(mAt,"PerceiverForImageClassificationConvProcessing"),mAt.forEach(t),Tlr=r(Rf," (Perceiver model)"),Rf.forEach(t),Mlr=i(Te),ET=n(Te,"LI",{});var YIe=s(ET);Mbe=n(YIe,"STRONG",{});var gAt=s(Mbe);Elr=r(gAt,"poolformer"),gAt.forEach(t),Clr=r(YIe," \u2014 "),xW=n(YIe,"A",{href:!0});var hAt=s(xW);wlr=r(hAt,"PoolFormerForImageClassification"),hAt.forEach(t),Alr=r(YIe," (PoolFormer model)"),YIe.forEach(t),Llr=i(Te),CT=n(Te,"LI",{});var KIe=s(CT);Ebe=n(KIe,"STRONG",{});var pAt=s(Ebe);ylr=r(pAt,"regnet"),pAt.forEach(t),xlr=r(KIe," \u2014 "),$W=n(KIe,"A",{href:!0});var _At=s($W);$lr=r(_At,"RegNetForImageClassification"),_At.forEach(t),klr=r(KIe," (RegNet model)"),KIe.forEach(t),Slr=i(Te),wT=n(Te,"LI",{});var ZIe=s(wT);Cbe=n(ZIe,"STRONG",{});var uAt=s(Cbe);Rlr=r(uAt,"resnet"),uAt.forEach(t),Plr=r(ZIe," \u2014 "),kW=n(ZIe,"A",{href:!0});var bAt=s(kW);Blr=r(bAt,"ResNetForImageClassification"),bAt.forEach(t),Ilr=r(ZIe," (ResNet model)"),ZIe.forEach(t),Nlr=i(Te),AT=n(Te,"LI",{});var eNe=s(AT);wbe=n(eNe,"STRONG",{});var vAt=s(wbe);qlr=r(vAt,"segformer"),vAt.forEach(t),jlr=r(eNe," \u2014 "),SW=n(eNe,"A",{href:!0});var FAt=s(SW);Dlr=r(FAt,"SegformerForImageClassification"),FAt.forEach(t),Glr=r(eNe," (SegFormer model)"),eNe.forEach(t),Olr=i(Te),LT=n(Te,"LI",{});var oNe=s(LT);Abe=n(oNe,"STRONG",{});var TAt=s(Abe);Vlr=r(TAt,"swin"),TAt.forEach(t),Xlr=r(oNe," \u2014 "),RW=n(oNe,"A",{href:!0});var MAt=s(RW);zlr=r(MAt,"SwinForImageClassification"),MAt.forEach(t),Qlr=r(oNe," (Swin Transformer model)"),oNe.forEach(t),Wlr=i(Te),yT=n(Te,"LI",{});var rNe=s(yT);Lbe=n(rNe,"STRONG",{});var EAt=s(Lbe);Hlr=r(EAt,"van"),EAt.forEach(t),Ulr=r(rNe," \u2014 "),PW=n(rNe,"A",{href:!0});var CAt=s(PW);Jlr=r(CAt,"VanForImageClassification"),CAt.forEach(t),Ylr=r(rNe," (VAN model)"),rNe.forEach(t),Klr=i(Te),xT=n(Te,"LI",{});var tNe=s(xT);ybe=n(tNe,"STRONG",{});var wAt=s(ybe);Zlr=r(wAt,"vit"),wAt.forEach(t),eir=r(tNe," \u2014 "),BW=n(tNe,"A",{href:!0});var AAt=s(BW);oir=r(AAt,"ViTForImageClassification"),AAt.forEach(t),rir=r(tNe," (ViT model)"),tNe.forEach(t),Te.forEach(t),tir=i(va),$T=n(va,"P",{});var aNe=s($T);air=r(aNe,"The model is set in evaluation mode by default using "),xbe=n(aNe,"CODE",{});var LAt=s(xbe);nir=r(LAt,"model.eval()"),LAt.forEach(t),sir=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(aNe,"CODE",{});var yAt=s($be);lir=r(yAt,"model.train()"),yAt.forEach(t),aNe.forEach(t),iir=i(va),T(kT.$$.fragment,va),va.forEach(t),gl.forEach(t),OXe=i(f),Ed=n(f,"H2",{class:!0});var HQe=s(Ed);ST=n(HQe,"A",{id:!0,class:!0,href:!0});var xAt=s(ST);kbe=n(xAt,"SPAN",{});var $At=s(kbe);T(qy.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),dir=i(HQe),Sbe=n(HQe,"SPAN",{});var kAt=s(Sbe);cir=r(kAt,"AutoModelForVision2Seq"),kAt.forEach(t),HQe.forEach(t),VXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(jy.$$.fragment,hl),fir=i(hl),Cd=n(hl,"P",{});var nte=s(Cd);mir=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=n(nte,"A",{href:!0});var SAt=s(IW);gir=r(SAt,"from_pretrained()"),SAt.forEach(t),hir=r(nte," class method or the "),NW=n(nte,"A",{href:!0});var RAt=s(NW);pir=r(RAt,"from_config()"),RAt.forEach(t),_ir=r(nte,` class
method.`),nte.forEach(t),uir=i(hl),Dy=n(hl,"P",{});var UQe=s(Dy);bir=r(UQe,"This class cannot be instantiated directly using "),Rbe=n(UQe,"CODE",{});var PAt=s(Rbe);vir=r(PAt,"__init__()"),PAt.forEach(t),Fir=r(UQe," (throws an error)."),UQe.forEach(t),Tir=i(hl),Tt=n(hl,"DIV",{class:!0});var P6=s(Tt);T(Gy.$$.fragment,P6),Mir=i(P6),Pbe=n(P6,"P",{});var BAt=s(Pbe);Eir=r(BAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BAt.forEach(t),Cir=i(P6),wd=n(P6,"P",{});var ste=s(wd);wir=r(ste,`Note:
Loading a model from its configuration file does `),Bbe=n(ste,"STRONG",{});var IAt=s(Bbe);Air=r(IAt,"not"),IAt.forEach(t),Lir=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(ste,"A",{href:!0});var NAt=s(qW);yir=r(NAt,"from_pretrained()"),NAt.forEach(t),xir=r(ste," to load the model weights."),ste.forEach(t),$ir=i(P6),T(RT.$$.fragment,P6),P6.forEach(t),kir=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Oy.$$.fragment,Fa),Sir=i(Fa),Ibe=n(Fa,"P",{});var qAt=s(Ibe);Rir=r(qAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qAt.forEach(t),Pir=i(Fa),Ha=n(Fa,"P",{});var B6=s(Ha);Bir=r(B6,"The model class to instantiate is selected based on the "),Nbe=n(B6,"CODE",{});var jAt=s(Nbe);Iir=r(jAt,"model_type"),jAt.forEach(t),Nir=r(B6,` property of the config object (either
passed as an argument or loaded from `),qbe=n(B6,"CODE",{});var DAt=s(qbe);qir=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),jir=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(B6,"CODE",{});var GAt=s(jbe);Dir=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),Gir=r(B6,":"),B6.forEach(t),Oir=i(Fa),Dbe=n(Fa,"UL",{});var OAt=s(Dbe);PT=n(OAt,"LI",{});var nNe=s(PT);Gbe=n(nNe,"STRONG",{});var VAt=s(Gbe);Vir=r(VAt,"vision-encoder-decoder"),VAt.forEach(t),Xir=r(nNe," \u2014 "),jW=n(nNe,"A",{href:!0});var XAt=s(jW);zir=r(XAt,"VisionEncoderDecoderModel"),XAt.forEach(t),Qir=r(nNe," (Vision Encoder decoder model)"),nNe.forEach(t),OAt.forEach(t),Wir=i(Fa),BT=n(Fa,"P",{});var sNe=s(BT);Hir=r(sNe,"The model is set in evaluation mode by default using "),Obe=n(sNe,"CODE",{});var zAt=s(Obe);Uir=r(zAt,"model.eval()"),zAt.forEach(t),Jir=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=n(sNe,"CODE",{});var QAt=s(Vbe);Yir=r(QAt,"model.train()"),QAt.forEach(t),sNe.forEach(t),Kir=i(Fa),T(IT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),XXe=i(f),Ad=n(f,"H2",{class:!0});var JQe=s(Ad);NT=n(JQe,"A",{id:!0,class:!0,href:!0});var WAt=s(NT);Xbe=n(WAt,"SPAN",{});var HAt=s(Xbe);T(Vy.$$.fragment,HAt),HAt.forEach(t),WAt.forEach(t),Zir=i(JQe),zbe=n(JQe,"SPAN",{});var UAt=s(zbe);edr=r(UAt,"AutoModelForVisualQuestionAnswering"),UAt.forEach(t),JQe.forEach(t),zXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Xy.$$.fragment,pl),odr=i(pl),Ld=n(pl,"P",{});var lte=s(Ld);rdr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=n(lte,"A",{href:!0});var JAt=s(DW);tdr=r(JAt,"from_pretrained()"),JAt.forEach(t),adr=r(lte," class method or the "),GW=n(lte,"A",{href:!0});var YAt=s(GW);ndr=r(YAt,"from_config()"),YAt.forEach(t),sdr=r(lte,` class
method.`),lte.forEach(t),ldr=i(pl),zy=n(pl,"P",{});var YQe=s(zy);idr=r(YQe,"This class cannot be instantiated directly using "),Qbe=n(YQe,"CODE",{});var KAt=s(Qbe);ddr=r(KAt,"__init__()"),KAt.forEach(t),cdr=r(YQe," (throws an error)."),YQe.forEach(t),fdr=i(pl),Mt=n(pl,"DIV",{class:!0});var I6=s(Mt);T(Qy.$$.fragment,I6),mdr=i(I6),Wbe=n(I6,"P",{});var ZAt=s(Wbe);gdr=r(ZAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ZAt.forEach(t),hdr=i(I6),yd=n(I6,"P",{});var ite=s(yd);pdr=r(ite,`Note:
Loading a model from its configuration file does `),Hbe=n(ite,"STRONG",{});var e6t=s(Hbe);_dr=r(e6t,"not"),e6t.forEach(t),udr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(ite,"A",{href:!0});var o6t=s(OW);bdr=r(o6t,"from_pretrained()"),o6t.forEach(t),vdr=r(ite," to load the model weights."),ite.forEach(t),Fdr=i(I6),T(qT.$$.fragment,I6),I6.forEach(t),Tdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Wy.$$.fragment,Ta),Mdr=i(Ta),Ube=n(Ta,"P",{});var r6t=s(Ube);Edr=r(r6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),r6t.forEach(t),Cdr=i(Ta),Ua=n(Ta,"P",{});var N6=s(Ua);wdr=r(N6,"The model class to instantiate is selected based on the "),Jbe=n(N6,"CODE",{});var t6t=s(Jbe);Adr=r(t6t,"model_type"),t6t.forEach(t),Ldr=r(N6,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(N6,"CODE",{});var a6t=s(Ybe);ydr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),xdr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(N6,"CODE",{});var n6t=s(Kbe);$dr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),kdr=r(N6,":"),N6.forEach(t),Sdr=i(Ta),Zbe=n(Ta,"UL",{});var s6t=s(Zbe);jT=n(s6t,"LI",{});var lNe=s(jT);eve=n(lNe,"STRONG",{});var l6t=s(eve);Rdr=r(l6t,"vilt"),l6t.forEach(t),Pdr=r(lNe," \u2014 "),VW=n(lNe,"A",{href:!0});var i6t=s(VW);Bdr=r(i6t,"ViltForQuestionAnswering"),i6t.forEach(t),Idr=r(lNe," (ViLT model)"),lNe.forEach(t),s6t.forEach(t),Ndr=i(Ta),DT=n(Ta,"P",{});var iNe=s(DT);qdr=r(iNe,"The model is set in evaluation mode by default using "),ove=n(iNe,"CODE",{});var d6t=s(ove);jdr=r(d6t,"model.eval()"),d6t.forEach(t),Ddr=r(iNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rve=n(iNe,"CODE",{});var c6t=s(rve);Gdr=r(c6t,"model.train()"),c6t.forEach(t),iNe.forEach(t),Odr=i(Ta),T(GT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),QXe=i(f),xd=n(f,"H2",{class:!0});var KQe=s(xd);OT=n(KQe,"A",{id:!0,class:!0,href:!0});var f6t=s(OT);tve=n(f6t,"SPAN",{});var m6t=s(tve);T(Hy.$$.fragment,m6t),m6t.forEach(t),f6t.forEach(t),Vdr=i(KQe),ave=n(KQe,"SPAN",{});var g6t=s(ave);Xdr=r(g6t,"AutoModelForAudioClassification"),g6t.forEach(t),KQe.forEach(t),WXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Uy.$$.fragment,_l),zdr=i(_l),$d=n(_l,"P",{});var dte=s($d);Qdr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=n(dte,"A",{href:!0});var h6t=s(XW);Wdr=r(h6t,"from_pretrained()"),h6t.forEach(t),Hdr=r(dte," class method or the "),zW=n(dte,"A",{href:!0});var p6t=s(zW);Udr=r(p6t,"from_config()"),p6t.forEach(t),Jdr=r(dte,` class
method.`),dte.forEach(t),Ydr=i(_l),Jy=n(_l,"P",{});var ZQe=s(Jy);Kdr=r(ZQe,"This class cannot be instantiated directly using "),nve=n(ZQe,"CODE",{});var _6t=s(nve);Zdr=r(_6t,"__init__()"),_6t.forEach(t),ecr=r(ZQe," (throws an error)."),ZQe.forEach(t),ocr=i(_l),Et=n(_l,"DIV",{class:!0});var q6=s(Et);T(Yy.$$.fragment,q6),rcr=i(q6),sve=n(q6,"P",{});var u6t=s(sve);tcr=r(u6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),u6t.forEach(t),acr=i(q6),kd=n(q6,"P",{});var cte=s(kd);ncr=r(cte,`Note:
Loading a model from its configuration file does `),lve=n(cte,"STRONG",{});var b6t=s(lve);scr=r(b6t,"not"),b6t.forEach(t),lcr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(cte,"A",{href:!0});var v6t=s(QW);icr=r(v6t,"from_pretrained()"),v6t.forEach(t),dcr=r(cte," to load the model weights."),cte.forEach(t),ccr=i(q6),T(VT.$$.fragment,q6),q6.forEach(t),fcr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(Ky.$$.fragment,Ma),mcr=i(Ma),ive=n(Ma,"P",{});var F6t=s(ive);gcr=r(F6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),F6t.forEach(t),hcr=i(Ma),Ja=n(Ma,"P",{});var j6=s(Ja);pcr=r(j6,"The model class to instantiate is selected based on the "),dve=n(j6,"CODE",{});var T6t=s(dve);_cr=r(T6t,"model_type"),T6t.forEach(t),ucr=r(j6,` property of the config object (either
passed as an argument or loaded from `),cve=n(j6,"CODE",{});var M6t=s(cve);bcr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),vcr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(j6,"CODE",{});var E6t=s(fve);Fcr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),Tcr=r(j6,":"),j6.forEach(t),Mcr=i(Ma),Be=n(Ma,"UL",{});var ze=s(Be);XT=n(ze,"LI",{});var dNe=s(XT);mve=n(dNe,"STRONG",{});var C6t=s(mve);Ecr=r(C6t,"data2vec-audio"),C6t.forEach(t),Ccr=r(dNe," \u2014 "),WW=n(dNe,"A",{href:!0});var w6t=s(WW);wcr=r(w6t,"Data2VecAudioForSequenceClassification"),w6t.forEach(t),Acr=r(dNe," (Data2VecAudio model)"),dNe.forEach(t),Lcr=i(ze),zT=n(ze,"LI",{});var cNe=s(zT);gve=n(cNe,"STRONG",{});var A6t=s(gve);ycr=r(A6t,"hubert"),A6t.forEach(t),xcr=r(cNe," \u2014 "),HW=n(cNe,"A",{href:!0});var L6t=s(HW);$cr=r(L6t,"HubertForSequenceClassification"),L6t.forEach(t),kcr=r(cNe," (Hubert model)"),cNe.forEach(t),Scr=i(ze),QT=n(ze,"LI",{});var fNe=s(QT);hve=n(fNe,"STRONG",{});var y6t=s(hve);Rcr=r(y6t,"sew"),y6t.forEach(t),Pcr=r(fNe," \u2014 "),UW=n(fNe,"A",{href:!0});var x6t=s(UW);Bcr=r(x6t,"SEWForSequenceClassification"),x6t.forEach(t),Icr=r(fNe," (SEW model)"),fNe.forEach(t),Ncr=i(ze),WT=n(ze,"LI",{});var mNe=s(WT);pve=n(mNe,"STRONG",{});var $6t=s(pve);qcr=r($6t,"sew-d"),$6t.forEach(t),jcr=r(mNe," \u2014 "),JW=n(mNe,"A",{href:!0});var k6t=s(JW);Dcr=r(k6t,"SEWDForSequenceClassification"),k6t.forEach(t),Gcr=r(mNe," (SEW-D model)"),mNe.forEach(t),Ocr=i(ze),HT=n(ze,"LI",{});var gNe=s(HT);_ve=n(gNe,"STRONG",{});var S6t=s(_ve);Vcr=r(S6t,"unispeech"),S6t.forEach(t),Xcr=r(gNe," \u2014 "),YW=n(gNe,"A",{href:!0});var R6t=s(YW);zcr=r(R6t,"UniSpeechForSequenceClassification"),R6t.forEach(t),Qcr=r(gNe," (UniSpeech model)"),gNe.forEach(t),Wcr=i(ze),UT=n(ze,"LI",{});var hNe=s(UT);uve=n(hNe,"STRONG",{});var P6t=s(uve);Hcr=r(P6t,"unispeech-sat"),P6t.forEach(t),Ucr=r(hNe," \u2014 "),KW=n(hNe,"A",{href:!0});var B6t=s(KW);Jcr=r(B6t,"UniSpeechSatForSequenceClassification"),B6t.forEach(t),Ycr=r(hNe," (UniSpeechSat model)"),hNe.forEach(t),Kcr=i(ze),JT=n(ze,"LI",{});var pNe=s(JT);bve=n(pNe,"STRONG",{});var I6t=s(bve);Zcr=r(I6t,"wav2vec2"),I6t.forEach(t),efr=r(pNe," \u2014 "),ZW=n(pNe,"A",{href:!0});var N6t=s(ZW);ofr=r(N6t,"Wav2Vec2ForSequenceClassification"),N6t.forEach(t),rfr=r(pNe," (Wav2Vec2 model)"),pNe.forEach(t),tfr=i(ze),YT=n(ze,"LI",{});var _Ne=s(YT);vve=n(_Ne,"STRONG",{});var q6t=s(vve);afr=r(q6t,"wav2vec2-conformer"),q6t.forEach(t),nfr=r(_Ne," \u2014 "),eH=n(_Ne,"A",{href:!0});var j6t=s(eH);sfr=r(j6t,"Wav2Vec2ConformerForSequenceClassification"),j6t.forEach(t),lfr=r(_Ne," (Wav2Vec2-Conformer model)"),_Ne.forEach(t),ifr=i(ze),KT=n(ze,"LI",{});var uNe=s(KT);Fve=n(uNe,"STRONG",{});var D6t=s(Fve);dfr=r(D6t,"wavlm"),D6t.forEach(t),cfr=r(uNe," \u2014 "),oH=n(uNe,"A",{href:!0});var G6t=s(oH);ffr=r(G6t,"WavLMForSequenceClassification"),G6t.forEach(t),mfr=r(uNe," (WavLM model)"),uNe.forEach(t),ze.forEach(t),gfr=i(Ma),ZT=n(Ma,"P",{});var bNe=s(ZT);hfr=r(bNe,"The model is set in evaluation mode by default using "),Tve=n(bNe,"CODE",{});var O6t=s(Tve);pfr=r(O6t,"model.eval()"),O6t.forEach(t),_fr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=n(bNe,"CODE",{});var V6t=s(Mve);ufr=r(V6t,"model.train()"),V6t.forEach(t),bNe.forEach(t),bfr=i(Ma),T(e8.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),HXe=i(f),Sd=n(f,"H2",{class:!0});var eWe=s(Sd);o8=n(eWe,"A",{id:!0,class:!0,href:!0});var X6t=s(o8);Eve=n(X6t,"SPAN",{});var z6t=s(Eve);T(Zy.$$.fragment,z6t),z6t.forEach(t),X6t.forEach(t),vfr=i(eWe),Cve=n(eWe,"SPAN",{});var Q6t=s(Cve);Ffr=r(Q6t,"AutoModelForAudioFrameClassification"),Q6t.forEach(t),eWe.forEach(t),UXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(e9.$$.fragment,ul),Tfr=i(ul),Rd=n(ul,"P",{});var fte=s(Rd);Mfr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=n(fte,"A",{href:!0});var W6t=s(rH);Efr=r(W6t,"from_pretrained()"),W6t.forEach(t),Cfr=r(fte," class method or the "),tH=n(fte,"A",{href:!0});var H6t=s(tH);wfr=r(H6t,"from_config()"),H6t.forEach(t),Afr=r(fte,` class
method.`),fte.forEach(t),Lfr=i(ul),o9=n(ul,"P",{});var oWe=s(o9);yfr=r(oWe,"This class cannot be instantiated directly using "),wve=n(oWe,"CODE",{});var U6t=s(wve);xfr=r(U6t,"__init__()"),U6t.forEach(t),$fr=r(oWe," (throws an error)."),oWe.forEach(t),kfr=i(ul),Ct=n(ul,"DIV",{class:!0});var D6=s(Ct);T(r9.$$.fragment,D6),Sfr=i(D6),Ave=n(D6,"P",{});var J6t=s(Ave);Rfr=r(J6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),J6t.forEach(t),Pfr=i(D6),Pd=n(D6,"P",{});var mte=s(Pd);Bfr=r(mte,`Note:
Loading a model from its configuration file does `),Lve=n(mte,"STRONG",{});var Y6t=s(Lve);Ifr=r(Y6t,"not"),Y6t.forEach(t),Nfr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(mte,"A",{href:!0});var K6t=s(aH);qfr=r(K6t,"from_pretrained()"),K6t.forEach(t),jfr=r(mte," to load the model weights."),mte.forEach(t),Dfr=i(D6),T(r8.$$.fragment,D6),D6.forEach(t),Gfr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(t9.$$.fragment,Ea),Ofr=i(Ea),yve=n(Ea,"P",{});var Z6t=s(yve);Vfr=r(Z6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Z6t.forEach(t),Xfr=i(Ea),Ya=n(Ea,"P",{});var G6=s(Ya);zfr=r(G6,"The model class to instantiate is selected based on the "),xve=n(G6,"CODE",{});var e7t=s(xve);Qfr=r(e7t,"model_type"),e7t.forEach(t),Wfr=r(G6,` property of the config object (either
passed as an argument or loaded from `),$ve=n(G6,"CODE",{});var o7t=s($ve);Hfr=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),Ufr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(G6,"CODE",{});var r7t=s(kve);Jfr=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),Yfr=r(G6,":"),G6.forEach(t),Kfr=i(Ea),rt=n(Ea,"UL",{});var bl=s(rt);t8=n(bl,"LI",{});var vNe=s(t8);Sve=n(vNe,"STRONG",{});var t7t=s(Sve);Zfr=r(t7t,"data2vec-audio"),t7t.forEach(t),emr=r(vNe," \u2014 "),nH=n(vNe,"A",{href:!0});var a7t=s(nH);omr=r(a7t,"Data2VecAudioForAudioFrameClassification"),a7t.forEach(t),rmr=r(vNe," (Data2VecAudio model)"),vNe.forEach(t),tmr=i(bl),a8=n(bl,"LI",{});var FNe=s(a8);Rve=n(FNe,"STRONG",{});var n7t=s(Rve);amr=r(n7t,"unispeech-sat"),n7t.forEach(t),nmr=r(FNe," \u2014 "),sH=n(FNe,"A",{href:!0});var s7t=s(sH);smr=r(s7t,"UniSpeechSatForAudioFrameClassification"),s7t.forEach(t),lmr=r(FNe," (UniSpeechSat model)"),FNe.forEach(t),imr=i(bl),n8=n(bl,"LI",{});var TNe=s(n8);Pve=n(TNe,"STRONG",{});var l7t=s(Pve);dmr=r(l7t,"wav2vec2"),l7t.forEach(t),cmr=r(TNe," \u2014 "),lH=n(TNe,"A",{href:!0});var i7t=s(lH);fmr=r(i7t,"Wav2Vec2ForAudioFrameClassification"),i7t.forEach(t),mmr=r(TNe," (Wav2Vec2 model)"),TNe.forEach(t),gmr=i(bl),s8=n(bl,"LI",{});var MNe=s(s8);Bve=n(MNe,"STRONG",{});var d7t=s(Bve);hmr=r(d7t,"wav2vec2-conformer"),d7t.forEach(t),pmr=r(MNe," \u2014 "),iH=n(MNe,"A",{href:!0});var c7t=s(iH);_mr=r(c7t,"Wav2Vec2ConformerForAudioFrameClassification"),c7t.forEach(t),umr=r(MNe," (Wav2Vec2-Conformer model)"),MNe.forEach(t),bmr=i(bl),l8=n(bl,"LI",{});var ENe=s(l8);Ive=n(ENe,"STRONG",{});var f7t=s(Ive);vmr=r(f7t,"wavlm"),f7t.forEach(t),Fmr=r(ENe," \u2014 "),dH=n(ENe,"A",{href:!0});var m7t=s(dH);Tmr=r(m7t,"WavLMForAudioFrameClassification"),m7t.forEach(t),Mmr=r(ENe," (WavLM model)"),ENe.forEach(t),bl.forEach(t),Emr=i(Ea),i8=n(Ea,"P",{});var CNe=s(i8);Cmr=r(CNe,"The model is set in evaluation mode by default using "),Nve=n(CNe,"CODE",{});var g7t=s(Nve);wmr=r(g7t,"model.eval()"),g7t.forEach(t),Amr=r(CNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=n(CNe,"CODE",{});var h7t=s(qve);Lmr=r(h7t,"model.train()"),h7t.forEach(t),CNe.forEach(t),ymr=i(Ea),T(d8.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),JXe=i(f),Bd=n(f,"H2",{class:!0});var rWe=s(Bd);c8=n(rWe,"A",{id:!0,class:!0,href:!0});var p7t=s(c8);jve=n(p7t,"SPAN",{});var _7t=s(jve);T(a9.$$.fragment,_7t),_7t.forEach(t),p7t.forEach(t),xmr=i(rWe),Dve=n(rWe,"SPAN",{});var u7t=s(Dve);$mr=r(u7t,"AutoModelForCTC"),u7t.forEach(t),rWe.forEach(t),YXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(n9.$$.fragment,vl),kmr=i(vl),Id=n(vl,"P",{});var gte=s(Id);Smr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=n(gte,"A",{href:!0});var b7t=s(cH);Rmr=r(b7t,"from_pretrained()"),b7t.forEach(t),Pmr=r(gte," class method or the "),fH=n(gte,"A",{href:!0});var v7t=s(fH);Bmr=r(v7t,"from_config()"),v7t.forEach(t),Imr=r(gte,` class
method.`),gte.forEach(t),Nmr=i(vl),s9=n(vl,"P",{});var tWe=s(s9);qmr=r(tWe,"This class cannot be instantiated directly using "),Gve=n(tWe,"CODE",{});var F7t=s(Gve);jmr=r(F7t,"__init__()"),F7t.forEach(t),Dmr=r(tWe," (throws an error)."),tWe.forEach(t),Gmr=i(vl),wt=n(vl,"DIV",{class:!0});var O6=s(wt);T(l9.$$.fragment,O6),Omr=i(O6),Ove=n(O6,"P",{});var T7t=s(Ove);Vmr=r(T7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),T7t.forEach(t),Xmr=i(O6),Nd=n(O6,"P",{});var hte=s(Nd);zmr=r(hte,`Note:
Loading a model from its configuration file does `),Vve=n(hte,"STRONG",{});var M7t=s(Vve);Qmr=r(M7t,"not"),M7t.forEach(t),Wmr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(hte,"A",{href:!0});var E7t=s(mH);Hmr=r(E7t,"from_pretrained()"),E7t.forEach(t),Umr=r(hte," to load the model weights."),hte.forEach(t),Jmr=i(O6),T(f8.$$.fragment,O6),O6.forEach(t),Ymr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(i9.$$.fragment,Ca),Kmr=i(Ca),Xve=n(Ca,"P",{});var C7t=s(Xve);Zmr=r(C7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),C7t.forEach(t),egr=i(Ca),Ka=n(Ca,"P",{});var V6=s(Ka);ogr=r(V6,"The model class to instantiate is selected based on the "),zve=n(V6,"CODE",{});var w7t=s(zve);rgr=r(w7t,"model_type"),w7t.forEach(t),tgr=r(V6,` property of the config object (either
passed as an argument or loaded from `),Qve=n(V6,"CODE",{});var A7t=s(Qve);agr=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),ngr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(V6,"CODE",{});var L7t=s(Wve);sgr=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),lgr=r(V6,":"),V6.forEach(t),igr=i(Ca),ye=n(Ca,"UL",{});var Ie=s(ye);m8=n(Ie,"LI",{});var wNe=s(m8);Hve=n(wNe,"STRONG",{});var y7t=s(Hve);dgr=r(y7t,"data2vec-audio"),y7t.forEach(t),cgr=r(wNe," \u2014 "),gH=n(wNe,"A",{href:!0});var x7t=s(gH);fgr=r(x7t,"Data2VecAudioForCTC"),x7t.forEach(t),mgr=r(wNe," (Data2VecAudio model)"),wNe.forEach(t),ggr=i(Ie),g8=n(Ie,"LI",{});var ANe=s(g8);Uve=n(ANe,"STRONG",{});var $7t=s(Uve);hgr=r($7t,"hubert"),$7t.forEach(t),pgr=r(ANe," \u2014 "),hH=n(ANe,"A",{href:!0});var k7t=s(hH);_gr=r(k7t,"HubertForCTC"),k7t.forEach(t),ugr=r(ANe," (Hubert model)"),ANe.forEach(t),bgr=i(Ie),h8=n(Ie,"LI",{});var LNe=s(h8);Jve=n(LNe,"STRONG",{});var S7t=s(Jve);vgr=r(S7t,"mctct"),S7t.forEach(t),Fgr=r(LNe," \u2014 "),pH=n(LNe,"A",{href:!0});var R7t=s(pH);Tgr=r(R7t,"MCTCTForCTC"),R7t.forEach(t),Mgr=r(LNe," (M-CTC-T model)"),LNe.forEach(t),Egr=i(Ie),p8=n(Ie,"LI",{});var yNe=s(p8);Yve=n(yNe,"STRONG",{});var P7t=s(Yve);Cgr=r(P7t,"sew"),P7t.forEach(t),wgr=r(yNe," \u2014 "),_H=n(yNe,"A",{href:!0});var B7t=s(_H);Agr=r(B7t,"SEWForCTC"),B7t.forEach(t),Lgr=r(yNe," (SEW model)"),yNe.forEach(t),ygr=i(Ie),_8=n(Ie,"LI",{});var xNe=s(_8);Kve=n(xNe,"STRONG",{});var I7t=s(Kve);xgr=r(I7t,"sew-d"),I7t.forEach(t),$gr=r(xNe," \u2014 "),uH=n(xNe,"A",{href:!0});var N7t=s(uH);kgr=r(N7t,"SEWDForCTC"),N7t.forEach(t),Sgr=r(xNe," (SEW-D model)"),xNe.forEach(t),Rgr=i(Ie),u8=n(Ie,"LI",{});var $Ne=s(u8);Zve=n($Ne,"STRONG",{});var q7t=s(Zve);Pgr=r(q7t,"unispeech"),q7t.forEach(t),Bgr=r($Ne," \u2014 "),bH=n($Ne,"A",{href:!0});var j7t=s(bH);Igr=r(j7t,"UniSpeechForCTC"),j7t.forEach(t),Ngr=r($Ne," (UniSpeech model)"),$Ne.forEach(t),qgr=i(Ie),b8=n(Ie,"LI",{});var kNe=s(b8);e0e=n(kNe,"STRONG",{});var D7t=s(e0e);jgr=r(D7t,"unispeech-sat"),D7t.forEach(t),Dgr=r(kNe," \u2014 "),vH=n(kNe,"A",{href:!0});var G7t=s(vH);Ggr=r(G7t,"UniSpeechSatForCTC"),G7t.forEach(t),Ogr=r(kNe," (UniSpeechSat model)"),kNe.forEach(t),Vgr=i(Ie),v8=n(Ie,"LI",{});var SNe=s(v8);o0e=n(SNe,"STRONG",{});var O7t=s(o0e);Xgr=r(O7t,"wav2vec2"),O7t.forEach(t),zgr=r(SNe," \u2014 "),FH=n(SNe,"A",{href:!0});var V7t=s(FH);Qgr=r(V7t,"Wav2Vec2ForCTC"),V7t.forEach(t),Wgr=r(SNe," (Wav2Vec2 model)"),SNe.forEach(t),Hgr=i(Ie),F8=n(Ie,"LI",{});var RNe=s(F8);r0e=n(RNe,"STRONG",{});var X7t=s(r0e);Ugr=r(X7t,"wav2vec2-conformer"),X7t.forEach(t),Jgr=r(RNe," \u2014 "),TH=n(RNe,"A",{href:!0});var z7t=s(TH);Ygr=r(z7t,"Wav2Vec2ConformerForCTC"),z7t.forEach(t),Kgr=r(RNe," (Wav2Vec2-Conformer model)"),RNe.forEach(t),Zgr=i(Ie),T8=n(Ie,"LI",{});var PNe=s(T8);t0e=n(PNe,"STRONG",{});var Q7t=s(t0e);ehr=r(Q7t,"wavlm"),Q7t.forEach(t),ohr=r(PNe," \u2014 "),MH=n(PNe,"A",{href:!0});var W7t=s(MH);rhr=r(W7t,"WavLMForCTC"),W7t.forEach(t),thr=r(PNe," (WavLM model)"),PNe.forEach(t),Ie.forEach(t),ahr=i(Ca),M8=n(Ca,"P",{});var BNe=s(M8);nhr=r(BNe,"The model is set in evaluation mode by default using "),a0e=n(BNe,"CODE",{});var H7t=s(a0e);shr=r(H7t,"model.eval()"),H7t.forEach(t),lhr=r(BNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n0e=n(BNe,"CODE",{});var U7t=s(n0e);ihr=r(U7t,"model.train()"),U7t.forEach(t),BNe.forEach(t),dhr=i(Ca),T(E8.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),KXe=i(f),qd=n(f,"H2",{class:!0});var aWe=s(qd);C8=n(aWe,"A",{id:!0,class:!0,href:!0});var J7t=s(C8);s0e=n(J7t,"SPAN",{});var Y7t=s(s0e);T(d9.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),chr=i(aWe),l0e=n(aWe,"SPAN",{});var K7t=s(l0e);fhr=r(K7t,"AutoModelForSpeechSeq2Seq"),K7t.forEach(t),aWe.forEach(t),ZXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(c9.$$.fragment,Fl),mhr=i(Fl),jd=n(Fl,"P",{});var pte=s(jd);ghr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=n(pte,"A",{href:!0});var Z7t=s(EH);hhr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),phr=r(pte," class method or the "),CH=n(pte,"A",{href:!0});var eLt=s(CH);_hr=r(eLt,"from_config()"),eLt.forEach(t),uhr=r(pte,` class
method.`),pte.forEach(t),bhr=i(Fl),f9=n(Fl,"P",{});var nWe=s(f9);vhr=r(nWe,"This class cannot be instantiated directly using "),i0e=n(nWe,"CODE",{});var oLt=s(i0e);Fhr=r(oLt,"__init__()"),oLt.forEach(t),Thr=r(nWe," (throws an error)."),nWe.forEach(t),Mhr=i(Fl),At=n(Fl,"DIV",{class:!0});var X6=s(At);T(m9.$$.fragment,X6),Ehr=i(X6),d0e=n(X6,"P",{});var rLt=s(d0e);Chr=r(rLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rLt.forEach(t),whr=i(X6),Dd=n(X6,"P",{});var _te=s(Dd);Ahr=r(_te,`Note:
Loading a model from its configuration file does `),c0e=n(_te,"STRONG",{});var tLt=s(c0e);Lhr=r(tLt,"not"),tLt.forEach(t),yhr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(_te,"A",{href:!0});var aLt=s(wH);xhr=r(aLt,"from_pretrained()"),aLt.forEach(t),$hr=r(_te," to load the model weights."),_te.forEach(t),khr=i(X6),T(w8.$$.fragment,X6),X6.forEach(t),Shr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(g9.$$.fragment,wa),Rhr=i(wa),f0e=n(wa,"P",{});var nLt=s(f0e);Phr=r(nLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nLt.forEach(t),Bhr=i(wa),Za=n(wa,"P",{});var z6=s(Za);Ihr=r(z6,"The model class to instantiate is selected based on the "),m0e=n(z6,"CODE",{});var sLt=s(m0e);Nhr=r(sLt,"model_type"),sLt.forEach(t),qhr=r(z6,` property of the config object (either
passed as an argument or loaded from `),g0e=n(z6,"CODE",{});var lLt=s(g0e);jhr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),Dhr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(z6,"CODE",{});var iLt=s(h0e);Ghr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),Ohr=r(z6,":"),z6.forEach(t),Vhr=i(wa),h9=n(wa,"UL",{});var sWe=s(h9);A8=n(sWe,"LI",{});var INe=s(A8);p0e=n(INe,"STRONG",{});var dLt=s(p0e);Xhr=r(dLt,"speech-encoder-decoder"),dLt.forEach(t),zhr=r(INe," \u2014 "),AH=n(INe,"A",{href:!0});var cLt=s(AH);Qhr=r(cLt,"SpeechEncoderDecoderModel"),cLt.forEach(t),Whr=r(INe," (Speech Encoder decoder model)"),INe.forEach(t),Hhr=i(sWe),L8=n(sWe,"LI",{});var NNe=s(L8);_0e=n(NNe,"STRONG",{});var fLt=s(_0e);Uhr=r(fLt,"speech_to_text"),fLt.forEach(t),Jhr=r(NNe," \u2014 "),LH=n(NNe,"A",{href:!0});var mLt=s(LH);Yhr=r(mLt,"Speech2TextForConditionalGeneration"),mLt.forEach(t),Khr=r(NNe," (Speech2Text model)"),NNe.forEach(t),sWe.forEach(t),Zhr=i(wa),y8=n(wa,"P",{});var qNe=s(y8);epr=r(qNe,"The model is set in evaluation mode by default using "),u0e=n(qNe,"CODE",{});var gLt=s(u0e);opr=r(gLt,"model.eval()"),gLt.forEach(t),rpr=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=n(qNe,"CODE",{});var hLt=s(b0e);tpr=r(hLt,"model.train()"),hLt.forEach(t),qNe.forEach(t),apr=i(wa),T(x8.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),eze=i(f),Gd=n(f,"H2",{class:!0});var lWe=s(Gd);$8=n(lWe,"A",{id:!0,class:!0,href:!0});var pLt=s($8);v0e=n(pLt,"SPAN",{});var _Lt=s(v0e);T(p9.$$.fragment,_Lt),_Lt.forEach(t),pLt.forEach(t),npr=i(lWe),F0e=n(lWe,"SPAN",{});var uLt=s(F0e);spr=r(uLt,"AutoModelForAudioXVector"),uLt.forEach(t),lWe.forEach(t),oze=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(_9.$$.fragment,Tl),lpr=i(Tl),Od=n(Tl,"P",{});var ute=s(Od);ipr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=n(ute,"A",{href:!0});var bLt=s(yH);dpr=r(bLt,"from_pretrained()"),bLt.forEach(t),cpr=r(ute," class method or the "),xH=n(ute,"A",{href:!0});var vLt=s(xH);fpr=r(vLt,"from_config()"),vLt.forEach(t),mpr=r(ute,` class
method.`),ute.forEach(t),gpr=i(Tl),u9=n(Tl,"P",{});var iWe=s(u9);hpr=r(iWe,"This class cannot be instantiated directly using "),T0e=n(iWe,"CODE",{});var FLt=s(T0e);ppr=r(FLt,"__init__()"),FLt.forEach(t),_pr=r(iWe," (throws an error)."),iWe.forEach(t),upr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var Q6=s(Lt);T(b9.$$.fragment,Q6),bpr=i(Q6),M0e=n(Q6,"P",{});var TLt=s(M0e);vpr=r(TLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),TLt.forEach(t),Fpr=i(Q6),Vd=n(Q6,"P",{});var bte=s(Vd);Tpr=r(bte,`Note:
Loading a model from its configuration file does `),E0e=n(bte,"STRONG",{});var MLt=s(E0e);Mpr=r(MLt,"not"),MLt.forEach(t),Epr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(bte,"A",{href:!0});var ELt=s($H);Cpr=r(ELt,"from_pretrained()"),ELt.forEach(t),wpr=r(bte," to load the model weights."),bte.forEach(t),Apr=i(Q6),T(k8.$$.fragment,Q6),Q6.forEach(t),Lpr=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(v9.$$.fragment,Aa),ypr=i(Aa),C0e=n(Aa,"P",{});var CLt=s(C0e);xpr=r(CLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),CLt.forEach(t),$pr=i(Aa),en=n(Aa,"P",{});var W6=s(en);kpr=r(W6,"The model class to instantiate is selected based on the "),w0e=n(W6,"CODE",{});var wLt=s(w0e);Spr=r(wLt,"model_type"),wLt.forEach(t),Rpr=r(W6,` property of the config object (either
passed as an argument or loaded from `),A0e=n(W6,"CODE",{});var ALt=s(A0e);Ppr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),Bpr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(W6,"CODE",{});var LLt=s(L0e);Ipr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),Npr=r(W6,":"),W6.forEach(t),qpr=i(Aa),tt=n(Aa,"UL",{});var Ml=s(tt);S8=n(Ml,"LI",{});var jNe=s(S8);y0e=n(jNe,"STRONG",{});var yLt=s(y0e);jpr=r(yLt,"data2vec-audio"),yLt.forEach(t),Dpr=r(jNe," \u2014 "),kH=n(jNe,"A",{href:!0});var xLt=s(kH);Gpr=r(xLt,"Data2VecAudioForXVector"),xLt.forEach(t),Opr=r(jNe," (Data2VecAudio model)"),jNe.forEach(t),Vpr=i(Ml),R8=n(Ml,"LI",{});var DNe=s(R8);x0e=n(DNe,"STRONG",{});var $Lt=s(x0e);Xpr=r($Lt,"unispeech-sat"),$Lt.forEach(t),zpr=r(DNe," \u2014 "),SH=n(DNe,"A",{href:!0});var kLt=s(SH);Qpr=r(kLt,"UniSpeechSatForXVector"),kLt.forEach(t),Wpr=r(DNe," (UniSpeechSat model)"),DNe.forEach(t),Hpr=i(Ml),P8=n(Ml,"LI",{});var GNe=s(P8);$0e=n(GNe,"STRONG",{});var SLt=s($0e);Upr=r(SLt,"wav2vec2"),SLt.forEach(t),Jpr=r(GNe," \u2014 "),RH=n(GNe,"A",{href:!0});var RLt=s(RH);Ypr=r(RLt,"Wav2Vec2ForXVector"),RLt.forEach(t),Kpr=r(GNe," (Wav2Vec2 model)"),GNe.forEach(t),Zpr=i(Ml),B8=n(Ml,"LI",{});var ONe=s(B8);k0e=n(ONe,"STRONG",{});var PLt=s(k0e);e_r=r(PLt,"wav2vec2-conformer"),PLt.forEach(t),o_r=r(ONe," \u2014 "),PH=n(ONe,"A",{href:!0});var BLt=s(PH);r_r=r(BLt,"Wav2Vec2ConformerForXVector"),BLt.forEach(t),t_r=r(ONe," (Wav2Vec2-Conformer model)"),ONe.forEach(t),a_r=i(Ml),I8=n(Ml,"LI",{});var VNe=s(I8);S0e=n(VNe,"STRONG",{});var ILt=s(S0e);n_r=r(ILt,"wavlm"),ILt.forEach(t),s_r=r(VNe," \u2014 "),BH=n(VNe,"A",{href:!0});var NLt=s(BH);l_r=r(NLt,"WavLMForXVector"),NLt.forEach(t),i_r=r(VNe," (WavLM model)"),VNe.forEach(t),Ml.forEach(t),d_r=i(Aa),N8=n(Aa,"P",{});var XNe=s(N8);c_r=r(XNe,"The model is set in evaluation mode by default using "),R0e=n(XNe,"CODE",{});var qLt=s(R0e);f_r=r(qLt,"model.eval()"),qLt.forEach(t),m_r=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P0e=n(XNe,"CODE",{});var jLt=s(P0e);g_r=r(jLt,"model.train()"),jLt.forEach(t),XNe.forEach(t),h_r=i(Aa),T(q8.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),rze=i(f),Xd=n(f,"H2",{class:!0});var dWe=s(Xd);j8=n(dWe,"A",{id:!0,class:!0,href:!0});var DLt=s(j8);B0e=n(DLt,"SPAN",{});var GLt=s(B0e);T(F9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),p_r=i(dWe),I0e=n(dWe,"SPAN",{});var OLt=s(I0e);__r=r(OLt,"AutoModelForMaskedImageModeling"),OLt.forEach(t),dWe.forEach(t),tze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(T9.$$.fragment,El),u_r=i(El),zd=n(El,"P",{});var vte=s(zd);b_r=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=n(vte,"A",{href:!0});var VLt=s(IH);v_r=r(VLt,"from_pretrained()"),VLt.forEach(t),F_r=r(vte," class method or the "),NH=n(vte,"A",{href:!0});var XLt=s(NH);T_r=r(XLt,"from_config()"),XLt.forEach(t),M_r=r(vte,` class
method.`),vte.forEach(t),E_r=i(El),M9=n(El,"P",{});var cWe=s(M9);C_r=r(cWe,"This class cannot be instantiated directly using "),N0e=n(cWe,"CODE",{});var zLt=s(N0e);w_r=r(zLt,"__init__()"),zLt.forEach(t),A_r=r(cWe," (throws an error)."),cWe.forEach(t),L_r=i(El),yt=n(El,"DIV",{class:!0});var H6=s(yt);T(E9.$$.fragment,H6),y_r=i(H6),q0e=n(H6,"P",{});var QLt=s(q0e);x_r=r(QLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QLt.forEach(t),$_r=i(H6),Qd=n(H6,"P",{});var Fte=s(Qd);k_r=r(Fte,`Note:
Loading a model from its configuration file does `),j0e=n(Fte,"STRONG",{});var WLt=s(j0e);S_r=r(WLt,"not"),WLt.forEach(t),R_r=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(Fte,"A",{href:!0});var HLt=s(qH);P_r=r(HLt,"from_pretrained()"),HLt.forEach(t),B_r=r(Fte," to load the model weights."),Fte.forEach(t),I_r=i(H6),T(D8.$$.fragment,H6),H6.forEach(t),N_r=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(C9.$$.fragment,La),q_r=i(La),D0e=n(La,"P",{});var ULt=s(D0e);j_r=r(ULt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ULt.forEach(t),D_r=i(La),on=n(La,"P",{});var U6=s(on);G_r=r(U6,"The model class to instantiate is selected based on the "),G0e=n(U6,"CODE",{});var JLt=s(G0e);O_r=r(JLt,"model_type"),JLt.forEach(t),V_r=r(U6,` property of the config object (either
passed as an argument or loaded from `),O0e=n(U6,"CODE",{});var YLt=s(O0e);X_r=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),z_r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(U6,"CODE",{});var KLt=s(V0e);Q_r=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),W_r=r(U6,":"),U6.forEach(t),H_r=i(La),Wd=n(La,"UL",{});var Tte=s(Wd);G8=n(Tte,"LI",{});var zNe=s(G8);X0e=n(zNe,"STRONG",{});var ZLt=s(X0e);U_r=r(ZLt,"deit"),ZLt.forEach(t),J_r=r(zNe," \u2014 "),jH=n(zNe,"A",{href:!0});var eyt=s(jH);Y_r=r(eyt,"DeiTForMaskedImageModeling"),eyt.forEach(t),K_r=r(zNe," (DeiT model)"),zNe.forEach(t),Z_r=i(Tte),O8=n(Tte,"LI",{});var QNe=s(O8);z0e=n(QNe,"STRONG",{});var oyt=s(z0e);eur=r(oyt,"swin"),oyt.forEach(t),our=r(QNe," \u2014 "),DH=n(QNe,"A",{href:!0});var ryt=s(DH);rur=r(ryt,"SwinForMaskedImageModeling"),ryt.forEach(t),tur=r(QNe," (Swin Transformer model)"),QNe.forEach(t),aur=i(Tte),V8=n(Tte,"LI",{});var WNe=s(V8);Q0e=n(WNe,"STRONG",{});var tyt=s(Q0e);nur=r(tyt,"vit"),tyt.forEach(t),sur=r(WNe," \u2014 "),GH=n(WNe,"A",{href:!0});var ayt=s(GH);lur=r(ayt,"ViTForMaskedImageModeling"),ayt.forEach(t),iur=r(WNe," (ViT model)"),WNe.forEach(t),Tte.forEach(t),dur=i(La),X8=n(La,"P",{});var HNe=s(X8);cur=r(HNe,"The model is set in evaluation mode by default using "),W0e=n(HNe,"CODE",{});var nyt=s(W0e);fur=r(nyt,"model.eval()"),nyt.forEach(t),mur=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H0e=n(HNe,"CODE",{});var syt=s(H0e);gur=r(syt,"model.train()"),syt.forEach(t),HNe.forEach(t),hur=i(La),T(z8.$$.fragment,La),La.forEach(t),El.forEach(t),aze=i(f),Hd=n(f,"H2",{class:!0});var fWe=s(Hd);Q8=n(fWe,"A",{id:!0,class:!0,href:!0});var lyt=s(Q8);U0e=n(lyt,"SPAN",{});var iyt=s(U0e);T(w9.$$.fragment,iyt),iyt.forEach(t),lyt.forEach(t),pur=i(fWe),J0e=n(fWe,"SPAN",{});var dyt=s(J0e);_ur=r(dyt,"AutoModelForObjectDetection"),dyt.forEach(t),fWe.forEach(t),nze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(A9.$$.fragment,Cl),uur=i(Cl),Ud=n(Cl,"P",{});var Mte=s(Ud);bur=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=n(Mte,"A",{href:!0});var cyt=s(OH);vur=r(cyt,"from_pretrained()"),cyt.forEach(t),Fur=r(Mte," class method or the "),VH=n(Mte,"A",{href:!0});var fyt=s(VH);Tur=r(fyt,"from_config()"),fyt.forEach(t),Mur=r(Mte,` class
method.`),Mte.forEach(t),Eur=i(Cl),L9=n(Cl,"P",{});var mWe=s(L9);Cur=r(mWe,"This class cannot be instantiated directly using "),Y0e=n(mWe,"CODE",{});var myt=s(Y0e);wur=r(myt,"__init__()"),myt.forEach(t),Aur=r(mWe," (throws an error)."),mWe.forEach(t),Lur=i(Cl),xt=n(Cl,"DIV",{class:!0});var J6=s(xt);T(y9.$$.fragment,J6),yur=i(J6),K0e=n(J6,"P",{});var gyt=s(K0e);xur=r(gyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gyt.forEach(t),$ur=i(J6),Jd=n(J6,"P",{});var Ete=s(Jd);kur=r(Ete,`Note:
Loading a model from its configuration file does `),Z0e=n(Ete,"STRONG",{});var hyt=s(Z0e);Sur=r(hyt,"not"),hyt.forEach(t),Rur=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Ete,"A",{href:!0});var pyt=s(XH);Pur=r(pyt,"from_pretrained()"),pyt.forEach(t),Bur=r(Ete," to load the model weights."),Ete.forEach(t),Iur=i(J6),T(W8.$$.fragment,J6),J6.forEach(t),Nur=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(x9.$$.fragment,ya),qur=i(ya),eFe=n(ya,"P",{});var _yt=s(eFe);jur=r(_yt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_yt.forEach(t),Dur=i(ya),rn=n(ya,"P",{});var Y6=s(rn);Gur=r(Y6,"The model class to instantiate is selected based on the "),oFe=n(Y6,"CODE",{});var uyt=s(oFe);Our=r(uyt,"model_type"),uyt.forEach(t),Vur=r(Y6,` property of the config object (either
passed as an argument or loaded from `),rFe=n(Y6,"CODE",{});var byt=s(rFe);Xur=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),zur=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(Y6,"CODE",{});var vyt=s(tFe);Qur=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),Wur=r(Y6,":"),Y6.forEach(t),Hur=i(ya),$9=n(ya,"UL",{});var gWe=s($9);H8=n(gWe,"LI",{});var UNe=s(H8);aFe=n(UNe,"STRONG",{});var Fyt=s(aFe);Uur=r(Fyt,"detr"),Fyt.forEach(t),Jur=r(UNe," \u2014 "),zH=n(UNe,"A",{href:!0});var Tyt=s(zH);Yur=r(Tyt,"DetrForObjectDetection"),Tyt.forEach(t),Kur=r(UNe," (DETR model)"),UNe.forEach(t),Zur=i(gWe),U8=n(gWe,"LI",{});var JNe=s(U8);nFe=n(JNe,"STRONG",{});var Myt=s(nFe);e2r=r(Myt,"yolos"),Myt.forEach(t),o2r=r(JNe," \u2014 "),QH=n(JNe,"A",{href:!0});var Eyt=s(QH);r2r=r(Eyt,"YolosForObjectDetection"),Eyt.forEach(t),t2r=r(JNe," (YOLOS model)"),JNe.forEach(t),gWe.forEach(t),a2r=i(ya),J8=n(ya,"P",{});var YNe=s(J8);n2r=r(YNe,"The model is set in evaluation mode by default using "),sFe=n(YNe,"CODE",{});var Cyt=s(sFe);s2r=r(Cyt,"model.eval()"),Cyt.forEach(t),l2r=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=n(YNe,"CODE",{});var wyt=s(lFe);i2r=r(wyt,"model.train()"),wyt.forEach(t),YNe.forEach(t),d2r=i(ya),T(Y8.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),sze=i(f),Yd=n(f,"H2",{class:!0});var hWe=s(Yd);K8=n(hWe,"A",{id:!0,class:!0,href:!0});var Ayt=s(K8);iFe=n(Ayt,"SPAN",{});var Lyt=s(iFe);T(k9.$$.fragment,Lyt),Lyt.forEach(t),Ayt.forEach(t),c2r=i(hWe),dFe=n(hWe,"SPAN",{});var yyt=s(dFe);f2r=r(yyt,"AutoModelForImageSegmentation"),yyt.forEach(t),hWe.forEach(t),lze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(S9.$$.fragment,wl),m2r=i(wl),Kd=n(wl,"P",{});var Cte=s(Kd);g2r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WH=n(Cte,"A",{href:!0});var xyt=s(WH);h2r=r(xyt,"from_pretrained()"),xyt.forEach(t),p2r=r(Cte," class method or the "),HH=n(Cte,"A",{href:!0});var $yt=s(HH);_2r=r($yt,"from_config()"),$yt.forEach(t),u2r=r(Cte,` class
method.`),Cte.forEach(t),b2r=i(wl),R9=n(wl,"P",{});var pWe=s(R9);v2r=r(pWe,"This class cannot be instantiated directly using "),cFe=n(pWe,"CODE",{});var kyt=s(cFe);F2r=r(kyt,"__init__()"),kyt.forEach(t),T2r=r(pWe," (throws an error)."),pWe.forEach(t),M2r=i(wl),$t=n(wl,"DIV",{class:!0});var K6=s($t);T(P9.$$.fragment,K6),E2r=i(K6),fFe=n(K6,"P",{});var Syt=s(fFe);C2r=r(Syt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Syt.forEach(t),w2r=i(K6),Zd=n(K6,"P",{});var wte=s(Zd);A2r=r(wte,`Note:
Loading a model from its configuration file does `),mFe=n(wte,"STRONG",{});var Ryt=s(mFe);L2r=r(Ryt,"not"),Ryt.forEach(t),y2r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(wte,"A",{href:!0});var Pyt=s(UH);x2r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),$2r=r(wte," to load the model weights."),wte.forEach(t),k2r=i(K6),T(Z8.$$.fragment,K6),K6.forEach(t),S2r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(B9.$$.fragment,xa),R2r=i(xa),gFe=n(xa,"P",{});var Byt=s(gFe);P2r=r(Byt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Byt.forEach(t),B2r=i(xa),tn=n(xa,"P",{});var Z6=s(tn);I2r=r(Z6,"The model class to instantiate is selected based on the "),hFe=n(Z6,"CODE",{});var Iyt=s(hFe);N2r=r(Iyt,"model_type"),Iyt.forEach(t),q2r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),pFe=n(Z6,"CODE",{});var Nyt=s(pFe);j2r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),D2r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(Z6,"CODE",{});var qyt=s(_Fe);G2r=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),O2r=r(Z6,":"),Z6.forEach(t),V2r=i(xa),uFe=n(xa,"UL",{});var jyt=s(uFe);eM=n(jyt,"LI",{});var KNe=s(eM);bFe=n(KNe,"STRONG",{});var Dyt=s(bFe);X2r=r(Dyt,"detr"),Dyt.forEach(t),z2r=r(KNe," \u2014 "),JH=n(KNe,"A",{href:!0});var Gyt=s(JH);Q2r=r(Gyt,"DetrForSegmentation"),Gyt.forEach(t),W2r=r(KNe," (DETR model)"),KNe.forEach(t),jyt.forEach(t),H2r=i(xa),oM=n(xa,"P",{});var ZNe=s(oM);U2r=r(ZNe,"The model is set in evaluation mode by default using "),vFe=n(ZNe,"CODE",{});var Oyt=s(vFe);J2r=r(Oyt,"model.eval()"),Oyt.forEach(t),Y2r=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=n(ZNe,"CODE",{});var Vyt=s(FFe);K2r=r(Vyt,"model.train()"),Vyt.forEach(t),ZNe.forEach(t),Z2r=i(xa),T(rM.$$.fragment,xa),xa.forEach(t),wl.forEach(t),ize=i(f),ec=n(f,"H2",{class:!0});var _We=s(ec);tM=n(_We,"A",{id:!0,class:!0,href:!0});var Xyt=s(tM);TFe=n(Xyt,"SPAN",{});var zyt=s(TFe);T(I9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),e1r=i(_We),MFe=n(_We,"SPAN",{});var Qyt=s(MFe);o1r=r(Qyt,"AutoModelForSemanticSegmentation"),Qyt.forEach(t),_We.forEach(t),dze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(N9.$$.fragment,Al),r1r=i(Al),oc=n(Al,"P",{});var Ate=s(oc);t1r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YH=n(Ate,"A",{href:!0});var Wyt=s(YH);a1r=r(Wyt,"from_pretrained()"),Wyt.forEach(t),n1r=r(Ate," class method or the "),KH=n(Ate,"A",{href:!0});var Hyt=s(KH);s1r=r(Hyt,"from_config()"),Hyt.forEach(t),l1r=r(Ate,` class
method.`),Ate.forEach(t),i1r=i(Al),q9=n(Al,"P",{});var uWe=s(q9);d1r=r(uWe,"This class cannot be instantiated directly using "),EFe=n(uWe,"CODE",{});var Uyt=s(EFe);c1r=r(Uyt,"__init__()"),Uyt.forEach(t),f1r=r(uWe," (throws an error)."),uWe.forEach(t),m1r=i(Al),kt=n(Al,"DIV",{class:!0});var e7=s(kt);T(j9.$$.fragment,e7),g1r=i(e7),CFe=n(e7,"P",{});var Jyt=s(CFe);h1r=r(Jyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jyt.forEach(t),p1r=i(e7),rc=n(e7,"P",{});var Lte=s(rc);_1r=r(Lte,`Note:
Loading a model from its configuration file does `),wFe=n(Lte,"STRONG",{});var Yyt=s(wFe);u1r=r(Yyt,"not"),Yyt.forEach(t),b1r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(Lte,"A",{href:!0});var Kyt=s(ZH);v1r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),F1r=r(Lte," to load the model weights."),Lte.forEach(t),T1r=i(e7),T(aM.$$.fragment,e7),e7.forEach(t),M1r=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(D9.$$.fragment,$a),E1r=i($a),AFe=n($a,"P",{});var Zyt=s(AFe);C1r=r(Zyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Zyt.forEach(t),w1r=i($a),an=n($a,"P",{});var o7=s(an);A1r=r(o7,"The model class to instantiate is selected based on the "),LFe=n(o7,"CODE",{});var e9t=s(LFe);L1r=r(e9t,"model_type"),e9t.forEach(t),y1r=r(o7,` property of the config object (either
passed as an argument or loaded from `),yFe=n(o7,"CODE",{});var o9t=s(yFe);x1r=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),$1r=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(o7,"CODE",{});var r9t=s(xFe);k1r=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),S1r=r(o7,":"),o7.forEach(t),R1r=i($a),at=n($a,"UL",{});var Ll=s(at);nM=n(Ll,"LI",{});var eqe=s(nM);$Fe=n(eqe,"STRONG",{});var t9t=s($Fe);P1r=r(t9t,"beit"),t9t.forEach(t),B1r=r(eqe," \u2014 "),eU=n(eqe,"A",{href:!0});var a9t=s(eU);I1r=r(a9t,"BeitForSemanticSegmentation"),a9t.forEach(t),N1r=r(eqe," (BEiT model)"),eqe.forEach(t),q1r=i(Ll),sM=n(Ll,"LI",{});var oqe=s(sM);kFe=n(oqe,"STRONG",{});var n9t=s(kFe);j1r=r(n9t,"data2vec-vision"),n9t.forEach(t),D1r=r(oqe," \u2014 "),oU=n(oqe,"A",{href:!0});var s9t=s(oU);G1r=r(s9t,"Data2VecVisionForSemanticSegmentation"),s9t.forEach(t),O1r=r(oqe," (Data2VecVision model)"),oqe.forEach(t),V1r=i(Ll),lM=n(Ll,"LI",{});var rqe=s(lM);SFe=n(rqe,"STRONG",{});var l9t=s(SFe);X1r=r(l9t,"dpt"),l9t.forEach(t),z1r=r(rqe," \u2014 "),rU=n(rqe,"A",{href:!0});var i9t=s(rU);Q1r=r(i9t,"DPTForSemanticSegmentation"),i9t.forEach(t),W1r=r(rqe," (DPT model)"),rqe.forEach(t),H1r=i(Ll),iM=n(Ll,"LI",{});var tqe=s(iM);RFe=n(tqe,"STRONG",{});var d9t=s(RFe);U1r=r(d9t,"mobilevit"),d9t.forEach(t),J1r=r(tqe," \u2014 "),tU=n(tqe,"A",{href:!0});var c9t=s(tU);Y1r=r(c9t,"MobileViTForSemanticSegmentation"),c9t.forEach(t),K1r=r(tqe," (MobileViT model)"),tqe.forEach(t),Z1r=i(Ll),dM=n(Ll,"LI",{});var aqe=s(dM);PFe=n(aqe,"STRONG",{});var f9t=s(PFe);ebr=r(f9t,"segformer"),f9t.forEach(t),obr=r(aqe," \u2014 "),aU=n(aqe,"A",{href:!0});var m9t=s(aU);rbr=r(m9t,"SegformerForSemanticSegmentation"),m9t.forEach(t),tbr=r(aqe," (SegFormer model)"),aqe.forEach(t),Ll.forEach(t),abr=i($a),cM=n($a,"P",{});var nqe=s(cM);nbr=r(nqe,"The model is set in evaluation mode by default using "),BFe=n(nqe,"CODE",{});var g9t=s(BFe);sbr=r(g9t,"model.eval()"),g9t.forEach(t),lbr=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(nqe,"CODE",{});var h9t=s(IFe);ibr=r(h9t,"model.train()"),h9t.forEach(t),nqe.forEach(t),dbr=i($a),T(fM.$$.fragment,$a),$a.forEach(t),Al.forEach(t),cze=i(f),tc=n(f,"H2",{class:!0});var bWe=s(tc);mM=n(bWe,"A",{id:!0,class:!0,href:!0});var p9t=s(mM);NFe=n(p9t,"SPAN",{});var _9t=s(NFe);T(G9.$$.fragment,_9t),_9t.forEach(t),p9t.forEach(t),cbr=i(bWe),qFe=n(bWe,"SPAN",{});var u9t=s(qFe);fbr=r(u9t,"AutoModelForInstanceSegmentation"),u9t.forEach(t),bWe.forEach(t),fze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(O9.$$.fragment,yl),mbr=i(yl),ac=n(yl,"P",{});var yte=s(ac);gbr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nU=n(yte,"A",{href:!0});var b9t=s(nU);hbr=r(b9t,"from_pretrained()"),b9t.forEach(t),pbr=r(yte," class method or the "),sU=n(yte,"A",{href:!0});var v9t=s(sU);_br=r(v9t,"from_config()"),v9t.forEach(t),ubr=r(yte,` class
method.`),yte.forEach(t),bbr=i(yl),V9=n(yl,"P",{});var vWe=s(V9);vbr=r(vWe,"This class cannot be instantiated directly using "),jFe=n(vWe,"CODE",{});var F9t=s(jFe);Fbr=r(F9t,"__init__()"),F9t.forEach(t),Tbr=r(vWe," (throws an error)."),vWe.forEach(t),Mbr=i(yl),St=n(yl,"DIV",{class:!0});var r7=s(St);T(X9.$$.fragment,r7),Ebr=i(r7),DFe=n(r7,"P",{});var T9t=s(DFe);Cbr=r(T9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),T9t.forEach(t),wbr=i(r7),nc=n(r7,"P",{});var xte=s(nc);Abr=r(xte,`Note:
Loading a model from its configuration file does `),GFe=n(xte,"STRONG",{});var M9t=s(GFe);Lbr=r(M9t,"not"),M9t.forEach(t),ybr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(xte,"A",{href:!0});var E9t=s(lU);xbr=r(E9t,"from_pretrained()"),E9t.forEach(t),$br=r(xte," to load the model weights."),xte.forEach(t),kbr=i(r7),T(gM.$$.fragment,r7),r7.forEach(t),Sbr=i(yl),To=n(yl,"DIV",{class:!0});var ka=s(To);T(z9.$$.fragment,ka),Rbr=i(ka),OFe=n(ka,"P",{});var C9t=s(OFe);Pbr=r(C9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),C9t.forEach(t),Bbr=i(ka),nn=n(ka,"P",{});var t7=s(nn);Ibr=r(t7,"The model class to instantiate is selected based on the "),VFe=n(t7,"CODE",{});var w9t=s(VFe);Nbr=r(w9t,"model_type"),w9t.forEach(t),qbr=r(t7,` property of the config object (either
passed as an argument or loaded from `),XFe=n(t7,"CODE",{});var A9t=s(XFe);jbr=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),Dbr=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(t7,"CODE",{});var L9t=s(zFe);Gbr=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),Obr=r(t7,":"),t7.forEach(t),Vbr=i(ka),QFe=n(ka,"UL",{});var y9t=s(QFe);hM=n(y9t,"LI",{});var sqe=s(hM);WFe=n(sqe,"STRONG",{});var x9t=s(WFe);Xbr=r(x9t,"maskformer"),x9t.forEach(t),zbr=r(sqe," \u2014 "),iU=n(sqe,"A",{href:!0});var $9t=s(iU);Qbr=r($9t,"MaskFormerForInstanceSegmentation"),$9t.forEach(t),Wbr=r(sqe," (MaskFormer model)"),sqe.forEach(t),y9t.forEach(t),Hbr=i(ka),pM=n(ka,"P",{});var lqe=s(pM);Ubr=r(lqe,"The model is set in evaluation mode by default using "),HFe=n(lqe,"CODE",{});var k9t=s(HFe);Jbr=r(k9t,"model.eval()"),k9t.forEach(t),Ybr=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=n(lqe,"CODE",{});var S9t=s(UFe);Kbr=r(S9t,"model.train()"),S9t.forEach(t),lqe.forEach(t),Zbr=i(ka),T(_M.$$.fragment,ka),ka.forEach(t),yl.forEach(t),mze=i(f),sc=n(f,"H2",{class:!0});var FWe=s(sc);uM=n(FWe,"A",{id:!0,class:!0,href:!0});var R9t=s(uM);JFe=n(R9t,"SPAN",{});var P9t=s(JFe);T(Q9.$$.fragment,P9t),P9t.forEach(t),R9t.forEach(t),evr=i(FWe),YFe=n(FWe,"SPAN",{});var B9t=s(YFe);ovr=r(B9t,"TFAutoModel"),B9t.forEach(t),FWe.forEach(t),gze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(W9.$$.fragment,xl),rvr=i(xl),lc=n(xl,"P",{});var $te=s(lc);tvr=r($te,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=n($te,"A",{href:!0});var I9t=s(dU);avr=r(I9t,"from_pretrained()"),I9t.forEach(t),nvr=r($te," class method or the "),cU=n($te,"A",{href:!0});var N9t=s(cU);svr=r(N9t,"from_config()"),N9t.forEach(t),lvr=r($te,` class
method.`),$te.forEach(t),ivr=i(xl),H9=n(xl,"P",{});var TWe=s(H9);dvr=r(TWe,"This class cannot be instantiated directly using "),KFe=n(TWe,"CODE",{});var q9t=s(KFe);cvr=r(q9t,"__init__()"),q9t.forEach(t),fvr=r(TWe," (throws an error)."),TWe.forEach(t),mvr=i(xl),Rt=n(xl,"DIV",{class:!0});var a7=s(Rt);T(U9.$$.fragment,a7),gvr=i(a7),ZFe=n(a7,"P",{});var j9t=s(ZFe);hvr=r(j9t,"Instantiates one of the base model classes of the library from a configuration."),j9t.forEach(t),pvr=i(a7),ic=n(a7,"P",{});var kte=s(ic);_vr=r(kte,`Note:
Loading a model from its configuration file does `),eTe=n(kte,"STRONG",{});var D9t=s(eTe);uvr=r(D9t,"not"),D9t.forEach(t),bvr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(kte,"A",{href:!0});var G9t=s(fU);vvr=r(G9t,"from_pretrained()"),G9t.forEach(t),Fvr=r(kte," to load the model weights."),kte.forEach(t),Tvr=i(a7),T(bM.$$.fragment,a7),a7.forEach(t),Mvr=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(J9.$$.fragment,$l),Evr=i($l),oTe=n($l,"P",{});var O9t=s(oTe);Cvr=r(O9t,"Instantiate one of the base model classes of the library from a pretrained model."),O9t.forEach(t),wvr=i($l),sn=n($l,"P",{});var n7=s(sn);Avr=r(n7,"The model class to instantiate is selected based on the "),rTe=n(n7,"CODE",{});var V9t=s(rTe);Lvr=r(V9t,"model_type"),V9t.forEach(t),yvr=r(n7,` property of the config object (either
passed as an argument or loaded from `),tTe=n(n7,"CODE",{});var X9t=s(tTe);xvr=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),$vr=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(n7,"CODE",{});var z9t=s(aTe);kvr=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),Svr=r(n7,":"),n7.forEach(t),Rvr=i($l),q=n($l,"UL",{});var D=s(q);vM=n(D,"LI",{});var iqe=s(vM);nTe=n(iqe,"STRONG",{});var Q9t=s(nTe);Pvr=r(Q9t,"albert"),Q9t.forEach(t),Bvr=r(iqe," \u2014 "),mU=n(iqe,"A",{href:!0});var W9t=s(mU);Ivr=r(W9t,"TFAlbertModel"),W9t.forEach(t),Nvr=r(iqe," (ALBERT model)"),iqe.forEach(t),qvr=i(D),FM=n(D,"LI",{});var dqe=s(FM);sTe=n(dqe,"STRONG",{});var H9t=s(sTe);jvr=r(H9t,"bart"),H9t.forEach(t),Dvr=r(dqe," \u2014 "),gU=n(dqe,"A",{href:!0});var U9t=s(gU);Gvr=r(U9t,"TFBartModel"),U9t.forEach(t),Ovr=r(dqe," (BART model)"),dqe.forEach(t),Vvr=i(D),TM=n(D,"LI",{});var cqe=s(TM);lTe=n(cqe,"STRONG",{});var J9t=s(lTe);Xvr=r(J9t,"bert"),J9t.forEach(t),zvr=r(cqe," \u2014 "),hU=n(cqe,"A",{href:!0});var Y9t=s(hU);Qvr=r(Y9t,"TFBertModel"),Y9t.forEach(t),Wvr=r(cqe," (BERT model)"),cqe.forEach(t),Hvr=i(D),MM=n(D,"LI",{});var fqe=s(MM);iTe=n(fqe,"STRONG",{});var K9t=s(iTe);Uvr=r(K9t,"blenderbot"),K9t.forEach(t),Jvr=r(fqe," \u2014 "),pU=n(fqe,"A",{href:!0});var Z9t=s(pU);Yvr=r(Z9t,"TFBlenderbotModel"),Z9t.forEach(t),Kvr=r(fqe," (Blenderbot model)"),fqe.forEach(t),Zvr=i(D),EM=n(D,"LI",{});var mqe=s(EM);dTe=n(mqe,"STRONG",{});var ext=s(dTe);e0r=r(ext,"blenderbot-small"),ext.forEach(t),o0r=r(mqe," \u2014 "),_U=n(mqe,"A",{href:!0});var oxt=s(_U);r0r=r(oxt,"TFBlenderbotSmallModel"),oxt.forEach(t),t0r=r(mqe," (BlenderbotSmall model)"),mqe.forEach(t),a0r=i(D),CM=n(D,"LI",{});var gqe=s(CM);cTe=n(gqe,"STRONG",{});var rxt=s(cTe);n0r=r(rxt,"camembert"),rxt.forEach(t),s0r=r(gqe," \u2014 "),uU=n(gqe,"A",{href:!0});var txt=s(uU);l0r=r(txt,"TFCamembertModel"),txt.forEach(t),i0r=r(gqe," (CamemBERT model)"),gqe.forEach(t),d0r=i(D),wM=n(D,"LI",{});var hqe=s(wM);fTe=n(hqe,"STRONG",{});var axt=s(fTe);c0r=r(axt,"clip"),axt.forEach(t),f0r=r(hqe," \u2014 "),bU=n(hqe,"A",{href:!0});var nxt=s(bU);m0r=r(nxt,"TFCLIPModel"),nxt.forEach(t),g0r=r(hqe," (CLIP model)"),hqe.forEach(t),h0r=i(D),AM=n(D,"LI",{});var pqe=s(AM);mTe=n(pqe,"STRONG",{});var sxt=s(mTe);p0r=r(sxt,"convbert"),sxt.forEach(t),_0r=r(pqe," \u2014 "),vU=n(pqe,"A",{href:!0});var lxt=s(vU);u0r=r(lxt,"TFConvBertModel"),lxt.forEach(t),b0r=r(pqe," (ConvBERT model)"),pqe.forEach(t),v0r=i(D),LM=n(D,"LI",{});var _qe=s(LM);gTe=n(_qe,"STRONG",{});var ixt=s(gTe);F0r=r(ixt,"convnext"),ixt.forEach(t),T0r=r(_qe," \u2014 "),FU=n(_qe,"A",{href:!0});var dxt=s(FU);M0r=r(dxt,"TFConvNextModel"),dxt.forEach(t),E0r=r(_qe," (ConvNeXT model)"),_qe.forEach(t),C0r=i(D),yM=n(D,"LI",{});var uqe=s(yM);hTe=n(uqe,"STRONG",{});var cxt=s(hTe);w0r=r(cxt,"ctrl"),cxt.forEach(t),A0r=r(uqe," \u2014 "),TU=n(uqe,"A",{href:!0});var fxt=s(TU);L0r=r(fxt,"TFCTRLModel"),fxt.forEach(t),y0r=r(uqe," (CTRL model)"),uqe.forEach(t),x0r=i(D),xM=n(D,"LI",{});var bqe=s(xM);pTe=n(bqe,"STRONG",{});var mxt=s(pTe);$0r=r(mxt,"data2vec-vision"),mxt.forEach(t),k0r=r(bqe," \u2014 "),MU=n(bqe,"A",{href:!0});var gxt=s(MU);S0r=r(gxt,"TFData2VecVisionModel"),gxt.forEach(t),R0r=r(bqe," (Data2VecVision model)"),bqe.forEach(t),P0r=i(D),$M=n(D,"LI",{});var vqe=s($M);_Te=n(vqe,"STRONG",{});var hxt=s(_Te);B0r=r(hxt,"deberta"),hxt.forEach(t),I0r=r(vqe," \u2014 "),EU=n(vqe,"A",{href:!0});var pxt=s(EU);N0r=r(pxt,"TFDebertaModel"),pxt.forEach(t),q0r=r(vqe," (DeBERTa model)"),vqe.forEach(t),j0r=i(D),kM=n(D,"LI",{});var Fqe=s(kM);uTe=n(Fqe,"STRONG",{});var _xt=s(uTe);D0r=r(_xt,"deberta-v2"),_xt.forEach(t),G0r=r(Fqe," \u2014 "),CU=n(Fqe,"A",{href:!0});var uxt=s(CU);O0r=r(uxt,"TFDebertaV2Model"),uxt.forEach(t),V0r=r(Fqe," (DeBERTa-v2 model)"),Fqe.forEach(t),X0r=i(D),SM=n(D,"LI",{});var Tqe=s(SM);bTe=n(Tqe,"STRONG",{});var bxt=s(bTe);z0r=r(bxt,"deit"),bxt.forEach(t),Q0r=r(Tqe," \u2014 "),wU=n(Tqe,"A",{href:!0});var vxt=s(wU);W0r=r(vxt,"TFDeiTModel"),vxt.forEach(t),H0r=r(Tqe," (DeiT model)"),Tqe.forEach(t),U0r=i(D),RM=n(D,"LI",{});var Mqe=s(RM);vTe=n(Mqe,"STRONG",{});var Fxt=s(vTe);J0r=r(Fxt,"distilbert"),Fxt.forEach(t),Y0r=r(Mqe," \u2014 "),AU=n(Mqe,"A",{href:!0});var Txt=s(AU);K0r=r(Txt,"TFDistilBertModel"),Txt.forEach(t),Z0r=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),eFr=i(D),PM=n(D,"LI",{});var Eqe=s(PM);FTe=n(Eqe,"STRONG",{});var Mxt=s(FTe);oFr=r(Mxt,"dpr"),Mxt.forEach(t),rFr=r(Eqe," \u2014 "),LU=n(Eqe,"A",{href:!0});var Ext=s(LU);tFr=r(Ext,"TFDPRQuestionEncoder"),Ext.forEach(t),aFr=r(Eqe," (DPR model)"),Eqe.forEach(t),nFr=i(D),BM=n(D,"LI",{});var Cqe=s(BM);TTe=n(Cqe,"STRONG",{});var Cxt=s(TTe);sFr=r(Cxt,"electra"),Cxt.forEach(t),lFr=r(Cqe," \u2014 "),yU=n(Cqe,"A",{href:!0});var wxt=s(yU);iFr=r(wxt,"TFElectraModel"),wxt.forEach(t),dFr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),cFr=i(D),IM=n(D,"LI",{});var wqe=s(IM);MTe=n(wqe,"STRONG",{});var Axt=s(MTe);fFr=r(Axt,"flaubert"),Axt.forEach(t),mFr=r(wqe," \u2014 "),xU=n(wqe,"A",{href:!0});var Lxt=s(xU);gFr=r(Lxt,"TFFlaubertModel"),Lxt.forEach(t),hFr=r(wqe," (FlauBERT model)"),wqe.forEach(t),pFr=i(D),Js=n(D,"LI",{});var BS=s(Js);ETe=n(BS,"STRONG",{});var yxt=s(ETe);_Fr=r(yxt,"funnel"),yxt.forEach(t),uFr=r(BS," \u2014 "),$U=n(BS,"A",{href:!0});var xxt=s($U);bFr=r(xxt,"TFFunnelModel"),xxt.forEach(t),vFr=r(BS," or "),kU=n(BS,"A",{href:!0});var $xt=s(kU);FFr=r($xt,"TFFunnelBaseModel"),$xt.forEach(t),TFr=r(BS," (Funnel Transformer model)"),BS.forEach(t),MFr=i(D),NM=n(D,"LI",{});var Aqe=s(NM);CTe=n(Aqe,"STRONG",{});var kxt=s(CTe);EFr=r(kxt,"gpt2"),kxt.forEach(t),CFr=r(Aqe," \u2014 "),SU=n(Aqe,"A",{href:!0});var Sxt=s(SU);wFr=r(Sxt,"TFGPT2Model"),Sxt.forEach(t),AFr=r(Aqe," (OpenAI GPT-2 model)"),Aqe.forEach(t),LFr=i(D),qM=n(D,"LI",{});var Lqe=s(qM);wTe=n(Lqe,"STRONG",{});var Rxt=s(wTe);yFr=r(Rxt,"gptj"),Rxt.forEach(t),xFr=r(Lqe," \u2014 "),RU=n(Lqe,"A",{href:!0});var Pxt=s(RU);$Fr=r(Pxt,"TFGPTJModel"),Pxt.forEach(t),kFr=r(Lqe," (GPT-J model)"),Lqe.forEach(t),SFr=i(D),jM=n(D,"LI",{});var yqe=s(jM);ATe=n(yqe,"STRONG",{});var Bxt=s(ATe);RFr=r(Bxt,"hubert"),Bxt.forEach(t),PFr=r(yqe," \u2014 "),PU=n(yqe,"A",{href:!0});var Ixt=s(PU);BFr=r(Ixt,"TFHubertModel"),Ixt.forEach(t),IFr=r(yqe," (Hubert model)"),yqe.forEach(t),NFr=i(D),DM=n(D,"LI",{});var xqe=s(DM);LTe=n(xqe,"STRONG",{});var Nxt=s(LTe);qFr=r(Nxt,"layoutlm"),Nxt.forEach(t),jFr=r(xqe," \u2014 "),BU=n(xqe,"A",{href:!0});var qxt=s(BU);DFr=r(qxt,"TFLayoutLMModel"),qxt.forEach(t),GFr=r(xqe," (LayoutLM model)"),xqe.forEach(t),OFr=i(D),GM=n(D,"LI",{});var $qe=s(GM);yTe=n($qe,"STRONG",{});var jxt=s(yTe);VFr=r(jxt,"led"),jxt.forEach(t),XFr=r($qe," \u2014 "),IU=n($qe,"A",{href:!0});var Dxt=s(IU);zFr=r(Dxt,"TFLEDModel"),Dxt.forEach(t),QFr=r($qe," (LED model)"),$qe.forEach(t),WFr=i(D),OM=n(D,"LI",{});var kqe=s(OM);xTe=n(kqe,"STRONG",{});var Gxt=s(xTe);HFr=r(Gxt,"longformer"),Gxt.forEach(t),UFr=r(kqe," \u2014 "),NU=n(kqe,"A",{href:!0});var Oxt=s(NU);JFr=r(Oxt,"TFLongformerModel"),Oxt.forEach(t),YFr=r(kqe," (Longformer model)"),kqe.forEach(t),KFr=i(D),VM=n(D,"LI",{});var Sqe=s(VM);$Te=n(Sqe,"STRONG",{});var Vxt=s($Te);ZFr=r(Vxt,"lxmert"),Vxt.forEach(t),eTr=r(Sqe," \u2014 "),qU=n(Sqe,"A",{href:!0});var Xxt=s(qU);oTr=r(Xxt,"TFLxmertModel"),Xxt.forEach(t),rTr=r(Sqe," (LXMERT model)"),Sqe.forEach(t),tTr=i(D),XM=n(D,"LI",{});var Rqe=s(XM);kTe=n(Rqe,"STRONG",{});var zxt=s(kTe);aTr=r(zxt,"marian"),zxt.forEach(t),nTr=r(Rqe," \u2014 "),jU=n(Rqe,"A",{href:!0});var Qxt=s(jU);sTr=r(Qxt,"TFMarianModel"),Qxt.forEach(t),lTr=r(Rqe," (Marian model)"),Rqe.forEach(t),iTr=i(D),zM=n(D,"LI",{});var Pqe=s(zM);STe=n(Pqe,"STRONG",{});var Wxt=s(STe);dTr=r(Wxt,"mbart"),Wxt.forEach(t),cTr=r(Pqe," \u2014 "),DU=n(Pqe,"A",{href:!0});var Hxt=s(DU);fTr=r(Hxt,"TFMBartModel"),Hxt.forEach(t),mTr=r(Pqe," (mBART model)"),Pqe.forEach(t),gTr=i(D),QM=n(D,"LI",{});var Bqe=s(QM);RTe=n(Bqe,"STRONG",{});var Uxt=s(RTe);hTr=r(Uxt,"mobilebert"),Uxt.forEach(t),pTr=r(Bqe," \u2014 "),GU=n(Bqe,"A",{href:!0});var Jxt=s(GU);_Tr=r(Jxt,"TFMobileBertModel"),Jxt.forEach(t),uTr=r(Bqe," (MobileBERT model)"),Bqe.forEach(t),bTr=i(D),WM=n(D,"LI",{});var Iqe=s(WM);PTe=n(Iqe,"STRONG",{});var Yxt=s(PTe);vTr=r(Yxt,"mpnet"),Yxt.forEach(t),FTr=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var Kxt=s(OU);TTr=r(Kxt,"TFMPNetModel"),Kxt.forEach(t),MTr=r(Iqe," (MPNet model)"),Iqe.forEach(t),ETr=i(D),HM=n(D,"LI",{});var Nqe=s(HM);BTe=n(Nqe,"STRONG",{});var Zxt=s(BTe);CTr=r(Zxt,"mt5"),Zxt.forEach(t),wTr=r(Nqe," \u2014 "),VU=n(Nqe,"A",{href:!0});var e$t=s(VU);ATr=r(e$t,"TFMT5Model"),e$t.forEach(t),LTr=r(Nqe," (MT5 model)"),Nqe.forEach(t),yTr=i(D),UM=n(D,"LI",{});var qqe=s(UM);ITe=n(qqe,"STRONG",{});var o$t=s(ITe);xTr=r(o$t,"openai-gpt"),o$t.forEach(t),$Tr=r(qqe," \u2014 "),XU=n(qqe,"A",{href:!0});var r$t=s(XU);kTr=r(r$t,"TFOpenAIGPTModel"),r$t.forEach(t),STr=r(qqe," (OpenAI GPT model)"),qqe.forEach(t),RTr=i(D),JM=n(D,"LI",{});var jqe=s(JM);NTe=n(jqe,"STRONG",{});var t$t=s(NTe);PTr=r(t$t,"opt"),t$t.forEach(t),BTr=r(jqe," \u2014 "),zU=n(jqe,"A",{href:!0});var a$t=s(zU);ITr=r(a$t,"TFOPTModel"),a$t.forEach(t),NTr=r(jqe," (OPT model)"),jqe.forEach(t),qTr=i(D),YM=n(D,"LI",{});var Dqe=s(YM);qTe=n(Dqe,"STRONG",{});var n$t=s(qTe);jTr=r(n$t,"pegasus"),n$t.forEach(t),DTr=r(Dqe," \u2014 "),QU=n(Dqe,"A",{href:!0});var s$t=s(QU);GTr=r(s$t,"TFPegasusModel"),s$t.forEach(t),OTr=r(Dqe," (Pegasus model)"),Dqe.forEach(t),VTr=i(D),KM=n(D,"LI",{});var Gqe=s(KM);jTe=n(Gqe,"STRONG",{});var l$t=s(jTe);XTr=r(l$t,"regnet"),l$t.forEach(t),zTr=r(Gqe," \u2014 "),WU=n(Gqe,"A",{href:!0});var i$t=s(WU);QTr=r(i$t,"TFRegNetModel"),i$t.forEach(t),WTr=r(Gqe," (RegNet model)"),Gqe.forEach(t),HTr=i(D),ZM=n(D,"LI",{});var Oqe=s(ZM);DTe=n(Oqe,"STRONG",{});var d$t=s(DTe);UTr=r(d$t,"rembert"),d$t.forEach(t),JTr=r(Oqe," \u2014 "),HU=n(Oqe,"A",{href:!0});var c$t=s(HU);YTr=r(c$t,"TFRemBertModel"),c$t.forEach(t),KTr=r(Oqe," (RemBERT model)"),Oqe.forEach(t),ZTr=i(D),e4=n(D,"LI",{});var Vqe=s(e4);GTe=n(Vqe,"STRONG",{});var f$t=s(GTe);e8r=r(f$t,"resnet"),f$t.forEach(t),o8r=r(Vqe," \u2014 "),UU=n(Vqe,"A",{href:!0});var m$t=s(UU);r8r=r(m$t,"TFResNetModel"),m$t.forEach(t),t8r=r(Vqe," (ResNet model)"),Vqe.forEach(t),a8r=i(D),o4=n(D,"LI",{});var Xqe=s(o4);OTe=n(Xqe,"STRONG",{});var g$t=s(OTe);n8r=r(g$t,"roberta"),g$t.forEach(t),s8r=r(Xqe," \u2014 "),JU=n(Xqe,"A",{href:!0});var h$t=s(JU);l8r=r(h$t,"TFRobertaModel"),h$t.forEach(t),i8r=r(Xqe," (RoBERTa model)"),Xqe.forEach(t),d8r=i(D),r4=n(D,"LI",{});var zqe=s(r4);VTe=n(zqe,"STRONG",{});var p$t=s(VTe);c8r=r(p$t,"roformer"),p$t.forEach(t),f8r=r(zqe," \u2014 "),YU=n(zqe,"A",{href:!0});var _$t=s(YU);m8r=r(_$t,"TFRoFormerModel"),_$t.forEach(t),g8r=r(zqe," (RoFormer model)"),zqe.forEach(t),h8r=i(D),t4=n(D,"LI",{});var Qqe=s(t4);XTe=n(Qqe,"STRONG",{});var u$t=s(XTe);p8r=r(u$t,"speech_to_text"),u$t.forEach(t),_8r=r(Qqe," \u2014 "),KU=n(Qqe,"A",{href:!0});var b$t=s(KU);u8r=r(b$t,"TFSpeech2TextModel"),b$t.forEach(t),b8r=r(Qqe," (Speech2Text model)"),Qqe.forEach(t),v8r=i(D),a4=n(D,"LI",{});var Wqe=s(a4);zTe=n(Wqe,"STRONG",{});var v$t=s(zTe);F8r=r(v$t,"swin"),v$t.forEach(t),T8r=r(Wqe," \u2014 "),ZU=n(Wqe,"A",{href:!0});var F$t=s(ZU);M8r=r(F$t,"TFSwinModel"),F$t.forEach(t),E8r=r(Wqe," (Swin Transformer model)"),Wqe.forEach(t),C8r=i(D),n4=n(D,"LI",{});var Hqe=s(n4);QTe=n(Hqe,"STRONG",{});var T$t=s(QTe);w8r=r(T$t,"t5"),T$t.forEach(t),A8r=r(Hqe," \u2014 "),eJ=n(Hqe,"A",{href:!0});var M$t=s(eJ);L8r=r(M$t,"TFT5Model"),M$t.forEach(t),y8r=r(Hqe," (T5 model)"),Hqe.forEach(t),x8r=i(D),s4=n(D,"LI",{});var Uqe=s(s4);WTe=n(Uqe,"STRONG",{});var E$t=s(WTe);$8r=r(E$t,"tapas"),E$t.forEach(t),k8r=r(Uqe," \u2014 "),oJ=n(Uqe,"A",{href:!0});var C$t=s(oJ);S8r=r(C$t,"TFTapasModel"),C$t.forEach(t),R8r=r(Uqe," (TAPAS model)"),Uqe.forEach(t),P8r=i(D),l4=n(D,"LI",{});var Jqe=s(l4);HTe=n(Jqe,"STRONG",{});var w$t=s(HTe);B8r=r(w$t,"transfo-xl"),w$t.forEach(t),I8r=r(Jqe," \u2014 "),rJ=n(Jqe,"A",{href:!0});var A$t=s(rJ);N8r=r(A$t,"TFTransfoXLModel"),A$t.forEach(t),q8r=r(Jqe," (Transformer-XL model)"),Jqe.forEach(t),j8r=i(D),i4=n(D,"LI",{});var Yqe=s(i4);UTe=n(Yqe,"STRONG",{});var L$t=s(UTe);D8r=r(L$t,"vit"),L$t.forEach(t),G8r=r(Yqe," \u2014 "),tJ=n(Yqe,"A",{href:!0});var y$t=s(tJ);O8r=r(y$t,"TFViTModel"),y$t.forEach(t),V8r=r(Yqe," (ViT model)"),Yqe.forEach(t),X8r=i(D),d4=n(D,"LI",{});var Kqe=s(d4);JTe=n(Kqe,"STRONG",{});var x$t=s(JTe);z8r=r(x$t,"vit_mae"),x$t.forEach(t),Q8r=r(Kqe," \u2014 "),aJ=n(Kqe,"A",{href:!0});var $$t=s(aJ);W8r=r($$t,"TFViTMAEModel"),$$t.forEach(t),H8r=r(Kqe," (ViTMAE model)"),Kqe.forEach(t),U8r=i(D),c4=n(D,"LI",{});var Zqe=s(c4);YTe=n(Zqe,"STRONG",{});var k$t=s(YTe);J8r=r(k$t,"wav2vec2"),k$t.forEach(t),Y8r=r(Zqe," \u2014 "),nJ=n(Zqe,"A",{href:!0});var S$t=s(nJ);K8r=r(S$t,"TFWav2Vec2Model"),S$t.forEach(t),Z8r=r(Zqe," (Wav2Vec2 model)"),Zqe.forEach(t),eMr=i(D),f4=n(D,"LI",{});var eje=s(f4);KTe=n(eje,"STRONG",{});var R$t=s(KTe);oMr=r(R$t,"xlm"),R$t.forEach(t),rMr=r(eje," \u2014 "),sJ=n(eje,"A",{href:!0});var P$t=s(sJ);tMr=r(P$t,"TFXLMModel"),P$t.forEach(t),aMr=r(eje," (XLM model)"),eje.forEach(t),nMr=i(D),m4=n(D,"LI",{});var oje=s(m4);ZTe=n(oje,"STRONG",{});var B$t=s(ZTe);sMr=r(B$t,"xlm-roberta"),B$t.forEach(t),lMr=r(oje," \u2014 "),lJ=n(oje,"A",{href:!0});var I$t=s(lJ);iMr=r(I$t,"TFXLMRobertaModel"),I$t.forEach(t),dMr=r(oje," (XLM-RoBERTa model)"),oje.forEach(t),cMr=i(D),g4=n(D,"LI",{});var rje=s(g4);e8e=n(rje,"STRONG",{});var N$t=s(e8e);fMr=r(N$t,"xlnet"),N$t.forEach(t),mMr=r(rje," \u2014 "),iJ=n(rje,"A",{href:!0});var q$t=s(iJ);gMr=r(q$t,"TFXLNetModel"),q$t.forEach(t),hMr=r(rje," (XLNet model)"),rje.forEach(t),D.forEach(t),pMr=i($l),T(h4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),hze=i(f),dc=n(f,"H2",{class:!0});var MWe=s(dc);p4=n(MWe,"A",{id:!0,class:!0,href:!0});var j$t=s(p4);o8e=n(j$t,"SPAN",{});var D$t=s(o8e);T(Y9.$$.fragment,D$t),D$t.forEach(t),j$t.forEach(t),_Mr=i(MWe),r8e=n(MWe,"SPAN",{});var G$t=s(r8e);uMr=r(G$t,"TFAutoModelForPreTraining"),G$t.forEach(t),MWe.forEach(t),pze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(K9.$$.fragment,kl),bMr=i(kl),cc=n(kl,"P",{});var Ste=s(cc);vMr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dJ=n(Ste,"A",{href:!0});var O$t=s(dJ);FMr=r(O$t,"from_pretrained()"),O$t.forEach(t),TMr=r(Ste," class method or the "),cJ=n(Ste,"A",{href:!0});var V$t=s(cJ);MMr=r(V$t,"from_config()"),V$t.forEach(t),EMr=r(Ste,` class
method.`),Ste.forEach(t),CMr=i(kl),Z9=n(kl,"P",{});var EWe=s(Z9);wMr=r(EWe,"This class cannot be instantiated directly using "),t8e=n(EWe,"CODE",{});var X$t=s(t8e);AMr=r(X$t,"__init__()"),X$t.forEach(t),LMr=r(EWe," (throws an error)."),EWe.forEach(t),yMr=i(kl),Pt=n(kl,"DIV",{class:!0});var s7=s(Pt);T(ex.$$.fragment,s7),xMr=i(s7),a8e=n(s7,"P",{});var z$t=s(a8e);$Mr=r(z$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),z$t.forEach(t),kMr=i(s7),fc=n(s7,"P",{});var Rte=s(fc);SMr=r(Rte,`Note:
Loading a model from its configuration file does `),n8e=n(Rte,"STRONG",{});var Q$t=s(n8e);RMr=r(Q$t,"not"),Q$t.forEach(t),PMr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(Rte,"A",{href:!0});var W$t=s(fJ);BMr=r(W$t,"from_pretrained()"),W$t.forEach(t),IMr=r(Rte," to load the model weights."),Rte.forEach(t),NMr=i(s7),T(_4.$$.fragment,s7),s7.forEach(t),qMr=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(ox.$$.fragment,Sl),jMr=i(Sl),s8e=n(Sl,"P",{});var H$t=s(s8e);DMr=r(H$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),H$t.forEach(t),GMr=i(Sl),ln=n(Sl,"P",{});var l7=s(ln);OMr=r(l7,"The model class to instantiate is selected based on the "),l8e=n(l7,"CODE",{});var U$t=s(l8e);VMr=r(U$t,"model_type"),U$t.forEach(t),XMr=r(l7,` property of the config object (either
passed as an argument or loaded from `),i8e=n(l7,"CODE",{});var J$t=s(i8e);zMr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),QMr=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=n(l7,"CODE",{});var Y$t=s(d8e);WMr=r(Y$t,"pretrained_model_name_or_path"),Y$t.forEach(t),HMr=r(l7,":"),l7.forEach(t),UMr=i(Sl),se=n(Sl,"UL",{});var le=s(se);u4=n(le,"LI",{});var tje=s(u4);c8e=n(tje,"STRONG",{});var K$t=s(c8e);JMr=r(K$t,"albert"),K$t.forEach(t),YMr=r(tje," \u2014 "),mJ=n(tje,"A",{href:!0});var Z$t=s(mJ);KMr=r(Z$t,"TFAlbertForPreTraining"),Z$t.forEach(t),ZMr=r(tje," (ALBERT model)"),tje.forEach(t),e4r=i(le),b4=n(le,"LI",{});var aje=s(b4);f8e=n(aje,"STRONG",{});var ekt=s(f8e);o4r=r(ekt,"bart"),ekt.forEach(t),r4r=r(aje," \u2014 "),gJ=n(aje,"A",{href:!0});var okt=s(gJ);t4r=r(okt,"TFBartForConditionalGeneration"),okt.forEach(t),a4r=r(aje," (BART model)"),aje.forEach(t),n4r=i(le),v4=n(le,"LI",{});var nje=s(v4);m8e=n(nje,"STRONG",{});var rkt=s(m8e);s4r=r(rkt,"bert"),rkt.forEach(t),l4r=r(nje," \u2014 "),hJ=n(nje,"A",{href:!0});var tkt=s(hJ);i4r=r(tkt,"TFBertForPreTraining"),tkt.forEach(t),d4r=r(nje," (BERT model)"),nje.forEach(t),c4r=i(le),F4=n(le,"LI",{});var sje=s(F4);g8e=n(sje,"STRONG",{});var akt=s(g8e);f4r=r(akt,"camembert"),akt.forEach(t),m4r=r(sje," \u2014 "),pJ=n(sje,"A",{href:!0});var nkt=s(pJ);g4r=r(nkt,"TFCamembertForMaskedLM"),nkt.forEach(t),h4r=r(sje," (CamemBERT model)"),sje.forEach(t),p4r=i(le),T4=n(le,"LI",{});var lje=s(T4);h8e=n(lje,"STRONG",{});var skt=s(h8e);_4r=r(skt,"ctrl"),skt.forEach(t),u4r=r(lje," \u2014 "),_J=n(lje,"A",{href:!0});var lkt=s(_J);b4r=r(lkt,"TFCTRLLMHeadModel"),lkt.forEach(t),v4r=r(lje," (CTRL model)"),lje.forEach(t),F4r=i(le),M4=n(le,"LI",{});var ije=s(M4);p8e=n(ije,"STRONG",{});var ikt=s(p8e);T4r=r(ikt,"distilbert"),ikt.forEach(t),M4r=r(ije," \u2014 "),uJ=n(ije,"A",{href:!0});var dkt=s(uJ);E4r=r(dkt,"TFDistilBertForMaskedLM"),dkt.forEach(t),C4r=r(ije," (DistilBERT model)"),ije.forEach(t),w4r=i(le),E4=n(le,"LI",{});var dje=s(E4);_8e=n(dje,"STRONG",{});var ckt=s(_8e);A4r=r(ckt,"electra"),ckt.forEach(t),L4r=r(dje," \u2014 "),bJ=n(dje,"A",{href:!0});var fkt=s(bJ);y4r=r(fkt,"TFElectraForPreTraining"),fkt.forEach(t),x4r=r(dje," (ELECTRA model)"),dje.forEach(t),$4r=i(le),C4=n(le,"LI",{});var cje=s(C4);u8e=n(cje,"STRONG",{});var mkt=s(u8e);k4r=r(mkt,"flaubert"),mkt.forEach(t),S4r=r(cje," \u2014 "),vJ=n(cje,"A",{href:!0});var gkt=s(vJ);R4r=r(gkt,"TFFlaubertWithLMHeadModel"),gkt.forEach(t),P4r=r(cje," (FlauBERT model)"),cje.forEach(t),B4r=i(le),w4=n(le,"LI",{});var fje=s(w4);b8e=n(fje,"STRONG",{});var hkt=s(b8e);I4r=r(hkt,"funnel"),hkt.forEach(t),N4r=r(fje," \u2014 "),FJ=n(fje,"A",{href:!0});var pkt=s(FJ);q4r=r(pkt,"TFFunnelForPreTraining"),pkt.forEach(t),j4r=r(fje," (Funnel Transformer model)"),fje.forEach(t),D4r=i(le),A4=n(le,"LI",{});var mje=s(A4);v8e=n(mje,"STRONG",{});var _kt=s(v8e);G4r=r(_kt,"gpt2"),_kt.forEach(t),O4r=r(mje," \u2014 "),TJ=n(mje,"A",{href:!0});var ukt=s(TJ);V4r=r(ukt,"TFGPT2LMHeadModel"),ukt.forEach(t),X4r=r(mje," (OpenAI GPT-2 model)"),mje.forEach(t),z4r=i(le),L4=n(le,"LI",{});var gje=s(L4);F8e=n(gje,"STRONG",{});var bkt=s(F8e);Q4r=r(bkt,"layoutlm"),bkt.forEach(t),W4r=r(gje," \u2014 "),MJ=n(gje,"A",{href:!0});var vkt=s(MJ);H4r=r(vkt,"TFLayoutLMForMaskedLM"),vkt.forEach(t),U4r=r(gje," (LayoutLM model)"),gje.forEach(t),J4r=i(le),y4=n(le,"LI",{});var hje=s(y4);T8e=n(hje,"STRONG",{});var Fkt=s(T8e);Y4r=r(Fkt,"lxmert"),Fkt.forEach(t),K4r=r(hje," \u2014 "),EJ=n(hje,"A",{href:!0});var Tkt=s(EJ);Z4r=r(Tkt,"TFLxmertForPreTraining"),Tkt.forEach(t),eEr=r(hje," (LXMERT model)"),hje.forEach(t),oEr=i(le),x4=n(le,"LI",{});var pje=s(x4);M8e=n(pje,"STRONG",{});var Mkt=s(M8e);rEr=r(Mkt,"mobilebert"),Mkt.forEach(t),tEr=r(pje," \u2014 "),CJ=n(pje,"A",{href:!0});var Ekt=s(CJ);aEr=r(Ekt,"TFMobileBertForPreTraining"),Ekt.forEach(t),nEr=r(pje," (MobileBERT model)"),pje.forEach(t),sEr=i(le),$4=n(le,"LI",{});var _je=s($4);E8e=n(_je,"STRONG",{});var Ckt=s(E8e);lEr=r(Ckt,"mpnet"),Ckt.forEach(t),iEr=r(_je," \u2014 "),wJ=n(_je,"A",{href:!0});var wkt=s(wJ);dEr=r(wkt,"TFMPNetForMaskedLM"),wkt.forEach(t),cEr=r(_je," (MPNet model)"),_je.forEach(t),fEr=i(le),k4=n(le,"LI",{});var uje=s(k4);C8e=n(uje,"STRONG",{});var Akt=s(C8e);mEr=r(Akt,"openai-gpt"),Akt.forEach(t),gEr=r(uje," \u2014 "),AJ=n(uje,"A",{href:!0});var Lkt=s(AJ);hEr=r(Lkt,"TFOpenAIGPTLMHeadModel"),Lkt.forEach(t),pEr=r(uje," (OpenAI GPT model)"),uje.forEach(t),_Er=i(le),S4=n(le,"LI",{});var bje=s(S4);w8e=n(bje,"STRONG",{});var ykt=s(w8e);uEr=r(ykt,"roberta"),ykt.forEach(t),bEr=r(bje," \u2014 "),LJ=n(bje,"A",{href:!0});var xkt=s(LJ);vEr=r(xkt,"TFRobertaForMaskedLM"),xkt.forEach(t),FEr=r(bje," (RoBERTa model)"),bje.forEach(t),TEr=i(le),R4=n(le,"LI",{});var vje=s(R4);A8e=n(vje,"STRONG",{});var $kt=s(A8e);MEr=r($kt,"t5"),$kt.forEach(t),EEr=r(vje," \u2014 "),yJ=n(vje,"A",{href:!0});var kkt=s(yJ);CEr=r(kkt,"TFT5ForConditionalGeneration"),kkt.forEach(t),wEr=r(vje," (T5 model)"),vje.forEach(t),AEr=i(le),P4=n(le,"LI",{});var Fje=s(P4);L8e=n(Fje,"STRONG",{});var Skt=s(L8e);LEr=r(Skt,"tapas"),Skt.forEach(t),yEr=r(Fje," \u2014 "),xJ=n(Fje,"A",{href:!0});var Rkt=s(xJ);xEr=r(Rkt,"TFTapasForMaskedLM"),Rkt.forEach(t),$Er=r(Fje," (TAPAS model)"),Fje.forEach(t),kEr=i(le),B4=n(le,"LI",{});var Tje=s(B4);y8e=n(Tje,"STRONG",{});var Pkt=s(y8e);SEr=r(Pkt,"transfo-xl"),Pkt.forEach(t),REr=r(Tje," \u2014 "),$J=n(Tje,"A",{href:!0});var Bkt=s($J);PEr=r(Bkt,"TFTransfoXLLMHeadModel"),Bkt.forEach(t),BEr=r(Tje," (Transformer-XL model)"),Tje.forEach(t),IEr=i(le),I4=n(le,"LI",{});var Mje=s(I4);x8e=n(Mje,"STRONG",{});var Ikt=s(x8e);NEr=r(Ikt,"vit_mae"),Ikt.forEach(t),qEr=r(Mje," \u2014 "),kJ=n(Mje,"A",{href:!0});var Nkt=s(kJ);jEr=r(Nkt,"TFViTMAEForPreTraining"),Nkt.forEach(t),DEr=r(Mje," (ViTMAE model)"),Mje.forEach(t),GEr=i(le),N4=n(le,"LI",{});var Eje=s(N4);$8e=n(Eje,"STRONG",{});var qkt=s($8e);OEr=r(qkt,"xlm"),qkt.forEach(t),VEr=r(Eje," \u2014 "),SJ=n(Eje,"A",{href:!0});var jkt=s(SJ);XEr=r(jkt,"TFXLMWithLMHeadModel"),jkt.forEach(t),zEr=r(Eje," (XLM model)"),Eje.forEach(t),QEr=i(le),q4=n(le,"LI",{});var Cje=s(q4);k8e=n(Cje,"STRONG",{});var Dkt=s(k8e);WEr=r(Dkt,"xlm-roberta"),Dkt.forEach(t),HEr=r(Cje," \u2014 "),RJ=n(Cje,"A",{href:!0});var Gkt=s(RJ);UEr=r(Gkt,"TFXLMRobertaForMaskedLM"),Gkt.forEach(t),JEr=r(Cje," (XLM-RoBERTa model)"),Cje.forEach(t),YEr=i(le),j4=n(le,"LI",{});var wje=s(j4);S8e=n(wje,"STRONG",{});var Okt=s(S8e);KEr=r(Okt,"xlnet"),Okt.forEach(t),ZEr=r(wje," \u2014 "),PJ=n(wje,"A",{href:!0});var Vkt=s(PJ);eCr=r(Vkt,"TFXLNetLMHeadModel"),Vkt.forEach(t),oCr=r(wje," (XLNet model)"),wje.forEach(t),le.forEach(t),rCr=i(Sl),T(D4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),_ze=i(f),mc=n(f,"H2",{class:!0});var CWe=s(mc);G4=n(CWe,"A",{id:!0,class:!0,href:!0});var Xkt=s(G4);R8e=n(Xkt,"SPAN",{});var zkt=s(R8e);T(rx.$$.fragment,zkt),zkt.forEach(t),Xkt.forEach(t),tCr=i(CWe),P8e=n(CWe,"SPAN",{});var Qkt=s(P8e);aCr=r(Qkt,"TFAutoModelForCausalLM"),Qkt.forEach(t),CWe.forEach(t),uze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(tx.$$.fragment,Rl),nCr=i(Rl),gc=n(Rl,"P",{});var Pte=s(gc);sCr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=n(Pte,"A",{href:!0});var Wkt=s(BJ);lCr=r(Wkt,"from_pretrained()"),Wkt.forEach(t),iCr=r(Pte," class method or the "),IJ=n(Pte,"A",{href:!0});var Hkt=s(IJ);dCr=r(Hkt,"from_config()"),Hkt.forEach(t),cCr=r(Pte,` class
method.`),Pte.forEach(t),fCr=i(Rl),ax=n(Rl,"P",{});var wWe=s(ax);mCr=r(wWe,"This class cannot be instantiated directly using "),B8e=n(wWe,"CODE",{});var Ukt=s(B8e);gCr=r(Ukt,"__init__()"),Ukt.forEach(t),hCr=r(wWe," (throws an error)."),wWe.forEach(t),pCr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var i7=s(Bt);T(nx.$$.fragment,i7),_Cr=i(i7),I8e=n(i7,"P",{});var Jkt=s(I8e);uCr=r(Jkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jkt.forEach(t),bCr=i(i7),hc=n(i7,"P",{});var Bte=s(hc);vCr=r(Bte,`Note:
Loading a model from its configuration file does `),N8e=n(Bte,"STRONG",{});var Ykt=s(N8e);FCr=r(Ykt,"not"),Ykt.forEach(t),TCr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Bte,"A",{href:!0});var Kkt=s(NJ);MCr=r(Kkt,"from_pretrained()"),Kkt.forEach(t),ECr=r(Bte," to load the model weights."),Bte.forEach(t),CCr=i(i7),T(O4.$$.fragment,i7),i7.forEach(t),wCr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(sx.$$.fragment,Pl),ACr=i(Pl),q8e=n(Pl,"P",{});var Zkt=s(q8e);LCr=r(Zkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zkt.forEach(t),yCr=i(Pl),dn=n(Pl,"P",{});var d7=s(dn);xCr=r(d7,"The model class to instantiate is selected based on the "),j8e=n(d7,"CODE",{});var eSt=s(j8e);$Cr=r(eSt,"model_type"),eSt.forEach(t),kCr=r(d7,` property of the config object (either
passed as an argument or loaded from `),D8e=n(d7,"CODE",{});var oSt=s(D8e);SCr=r(oSt,"pretrained_model_name_or_path"),oSt.forEach(t),RCr=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=n(d7,"CODE",{});var rSt=s(G8e);PCr=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),BCr=r(d7,":"),d7.forEach(t),ICr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);V4=n(Ce,"LI",{});var Aje=s(V4);O8e=n(Aje,"STRONG",{});var tSt=s(O8e);NCr=r(tSt,"bert"),tSt.forEach(t),qCr=r(Aje," \u2014 "),qJ=n(Aje,"A",{href:!0});var aSt=s(qJ);jCr=r(aSt,"TFBertLMHeadModel"),aSt.forEach(t),DCr=r(Aje," (BERT model)"),Aje.forEach(t),GCr=i(Ce),X4=n(Ce,"LI",{});var Lje=s(X4);V8e=n(Lje,"STRONG",{});var nSt=s(V8e);OCr=r(nSt,"camembert"),nSt.forEach(t),VCr=r(Lje," \u2014 "),jJ=n(Lje,"A",{href:!0});var sSt=s(jJ);XCr=r(sSt,"TFCamembertForCausalLM"),sSt.forEach(t),zCr=r(Lje," (CamemBERT model)"),Lje.forEach(t),QCr=i(Ce),z4=n(Ce,"LI",{});var yje=s(z4);X8e=n(yje,"STRONG",{});var lSt=s(X8e);WCr=r(lSt,"ctrl"),lSt.forEach(t),HCr=r(yje," \u2014 "),DJ=n(yje,"A",{href:!0});var iSt=s(DJ);UCr=r(iSt,"TFCTRLLMHeadModel"),iSt.forEach(t),JCr=r(yje," (CTRL model)"),yje.forEach(t),YCr=i(Ce),Q4=n(Ce,"LI",{});var xje=s(Q4);z8e=n(xje,"STRONG",{});var dSt=s(z8e);KCr=r(dSt,"gpt2"),dSt.forEach(t),ZCr=r(xje," \u2014 "),GJ=n(xje,"A",{href:!0});var cSt=s(GJ);e3r=r(cSt,"TFGPT2LMHeadModel"),cSt.forEach(t),o3r=r(xje," (OpenAI GPT-2 model)"),xje.forEach(t),r3r=i(Ce),W4=n(Ce,"LI",{});var $je=s(W4);Q8e=n($je,"STRONG",{});var fSt=s(Q8e);t3r=r(fSt,"gptj"),fSt.forEach(t),a3r=r($je," \u2014 "),OJ=n($je,"A",{href:!0});var mSt=s(OJ);n3r=r(mSt,"TFGPTJForCausalLM"),mSt.forEach(t),s3r=r($je," (GPT-J model)"),$je.forEach(t),l3r=i(Ce),H4=n(Ce,"LI",{});var kje=s(H4);W8e=n(kje,"STRONG",{});var gSt=s(W8e);i3r=r(gSt,"openai-gpt"),gSt.forEach(t),d3r=r(kje," \u2014 "),VJ=n(kje,"A",{href:!0});var hSt=s(VJ);c3r=r(hSt,"TFOpenAIGPTLMHeadModel"),hSt.forEach(t),f3r=r(kje," (OpenAI GPT model)"),kje.forEach(t),m3r=i(Ce),U4=n(Ce,"LI",{});var Sje=s(U4);H8e=n(Sje,"STRONG",{});var pSt=s(H8e);g3r=r(pSt,"opt"),pSt.forEach(t),h3r=r(Sje," \u2014 "),XJ=n(Sje,"A",{href:!0});var _St=s(XJ);p3r=r(_St,"TFOPTForCausalLM"),_St.forEach(t),_3r=r(Sje," (OPT model)"),Sje.forEach(t),u3r=i(Ce),J4=n(Ce,"LI",{});var Rje=s(J4);U8e=n(Rje,"STRONG",{});var uSt=s(U8e);b3r=r(uSt,"rembert"),uSt.forEach(t),v3r=r(Rje," \u2014 "),zJ=n(Rje,"A",{href:!0});var bSt=s(zJ);F3r=r(bSt,"TFRemBertForCausalLM"),bSt.forEach(t),T3r=r(Rje," (RemBERT model)"),Rje.forEach(t),M3r=i(Ce),Y4=n(Ce,"LI",{});var Pje=s(Y4);J8e=n(Pje,"STRONG",{});var vSt=s(J8e);E3r=r(vSt,"roberta"),vSt.forEach(t),C3r=r(Pje," \u2014 "),QJ=n(Pje,"A",{href:!0});var FSt=s(QJ);w3r=r(FSt,"TFRobertaForCausalLM"),FSt.forEach(t),A3r=r(Pje," (RoBERTa model)"),Pje.forEach(t),L3r=i(Ce),K4=n(Ce,"LI",{});var Bje=s(K4);Y8e=n(Bje,"STRONG",{});var TSt=s(Y8e);y3r=r(TSt,"roformer"),TSt.forEach(t),x3r=r(Bje," \u2014 "),WJ=n(Bje,"A",{href:!0});var MSt=s(WJ);$3r=r(MSt,"TFRoFormerForCausalLM"),MSt.forEach(t),k3r=r(Bje," (RoFormer model)"),Bje.forEach(t),S3r=i(Ce),Z4=n(Ce,"LI",{});var Ije=s(Z4);K8e=n(Ije,"STRONG",{});var ESt=s(K8e);R3r=r(ESt,"transfo-xl"),ESt.forEach(t),P3r=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var CSt=s(HJ);B3r=r(CSt,"TFTransfoXLLMHeadModel"),CSt.forEach(t),I3r=r(Ije," (Transformer-XL model)"),Ije.forEach(t),N3r=i(Ce),eE=n(Ce,"LI",{});var Nje=s(eE);Z8e=n(Nje,"STRONG",{});var wSt=s(Z8e);q3r=r(wSt,"xlm"),wSt.forEach(t),j3r=r(Nje," \u2014 "),UJ=n(Nje,"A",{href:!0});var ASt=s(UJ);D3r=r(ASt,"TFXLMWithLMHeadModel"),ASt.forEach(t),G3r=r(Nje," (XLM model)"),Nje.forEach(t),O3r=i(Ce),oE=n(Ce,"LI",{});var qje=s(oE);eMe=n(qje,"STRONG",{});var LSt=s(eMe);V3r=r(LSt,"xlnet"),LSt.forEach(t),X3r=r(qje," \u2014 "),JJ=n(qje,"A",{href:!0});var ySt=s(JJ);z3r=r(ySt,"TFXLNetLMHeadModel"),ySt.forEach(t),Q3r=r(qje," (XLNet model)"),qje.forEach(t),Ce.forEach(t),W3r=i(Pl),T(rE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),bze=i(f),pc=n(f,"H2",{class:!0});var AWe=s(pc);tE=n(AWe,"A",{id:!0,class:!0,href:!0});var xSt=s(tE);oMe=n(xSt,"SPAN",{});var $St=s(oMe);T(lx.$$.fragment,$St),$St.forEach(t),xSt.forEach(t),H3r=i(AWe),rMe=n(AWe,"SPAN",{});var kSt=s(rMe);U3r=r(kSt,"TFAutoModelForImageClassification"),kSt.forEach(t),AWe.forEach(t),vze=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(ix.$$.fragment,Bl),J3r=i(Bl),_c=n(Bl,"P",{});var Ite=s(_c);Y3r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YJ=n(Ite,"A",{href:!0});var SSt=s(YJ);K3r=r(SSt,"from_pretrained()"),SSt.forEach(t),Z3r=r(Ite," class method or the "),KJ=n(Ite,"A",{href:!0});var RSt=s(KJ);e5r=r(RSt,"from_config()"),RSt.forEach(t),o5r=r(Ite,` class
method.`),Ite.forEach(t),r5r=i(Bl),dx=n(Bl,"P",{});var LWe=s(dx);t5r=r(LWe,"This class cannot be instantiated directly using "),tMe=n(LWe,"CODE",{});var PSt=s(tMe);a5r=r(PSt,"__init__()"),PSt.forEach(t),n5r=r(LWe," (throws an error)."),LWe.forEach(t),s5r=i(Bl),It=n(Bl,"DIV",{class:!0});var c7=s(It);T(cx.$$.fragment,c7),l5r=i(c7),aMe=n(c7,"P",{});var BSt=s(aMe);i5r=r(BSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BSt.forEach(t),d5r=i(c7),uc=n(c7,"P",{});var Nte=s(uc);c5r=r(Nte,`Note:
Loading a model from its configuration file does `),nMe=n(Nte,"STRONG",{});var ISt=s(nMe);f5r=r(ISt,"not"),ISt.forEach(t),m5r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Nte,"A",{href:!0});var NSt=s(ZJ);g5r=r(NSt,"from_pretrained()"),NSt.forEach(t),h5r=r(Nte," to load the model weights."),Nte.forEach(t),p5r=i(c7),T(aE.$$.fragment,c7),c7.forEach(t),_5r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(fx.$$.fragment,Il),u5r=i(Il),sMe=n(Il,"P",{});var qSt=s(sMe);b5r=r(qSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qSt.forEach(t),v5r=i(Il),cn=n(Il,"P",{});var f7=s(cn);F5r=r(f7,"The model class to instantiate is selected based on the "),lMe=n(f7,"CODE",{});var jSt=s(lMe);T5r=r(jSt,"model_type"),jSt.forEach(t),M5r=r(f7,` property of the config object (either
passed as an argument or loaded from `),iMe=n(f7,"CODE",{});var DSt=s(iMe);E5r=r(DSt,"pretrained_model_name_or_path"),DSt.forEach(t),C5r=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(f7,"CODE",{});var GSt=s(dMe);w5r=r(GSt,"pretrained_model_name_or_path"),GSt.forEach(t),A5r=r(f7,":"),f7.forEach(t),L5r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);nE=n(ot,"LI",{});var jje=s(nE);cMe=n(jje,"STRONG",{});var OSt=s(cMe);y5r=r(OSt,"convnext"),OSt.forEach(t),x5r=r(jje," \u2014 "),eY=n(jje,"A",{href:!0});var VSt=s(eY);$5r=r(VSt,"TFConvNextForImageClassification"),VSt.forEach(t),k5r=r(jje," (ConvNeXT model)"),jje.forEach(t),S5r=i(ot),sE=n(ot,"LI",{});var Dje=s(sE);fMe=n(Dje,"STRONG",{});var XSt=s(fMe);R5r=r(XSt,"data2vec-vision"),XSt.forEach(t),P5r=r(Dje," \u2014 "),oY=n(Dje,"A",{href:!0});var zSt=s(oY);B5r=r(zSt,"TFData2VecVisionForImageClassification"),zSt.forEach(t),I5r=r(Dje," (Data2VecVision model)"),Dje.forEach(t),N5r=i(ot),Ys=n(ot,"LI",{});var IS=s(Ys);mMe=n(IS,"STRONG",{});var QSt=s(mMe);q5r=r(QSt,"deit"),QSt.forEach(t),j5r=r(IS," \u2014 "),rY=n(IS,"A",{href:!0});var WSt=s(rY);D5r=r(WSt,"TFDeiTForImageClassification"),WSt.forEach(t),G5r=r(IS," or "),tY=n(IS,"A",{href:!0});var HSt=s(tY);O5r=r(HSt,"TFDeiTForImageClassificationWithTeacher"),HSt.forEach(t),V5r=r(IS," (DeiT model)"),IS.forEach(t),X5r=i(ot),lE=n(ot,"LI",{});var Gje=s(lE);gMe=n(Gje,"STRONG",{});var USt=s(gMe);z5r=r(USt,"regnet"),USt.forEach(t),Q5r=r(Gje," \u2014 "),aY=n(Gje,"A",{href:!0});var JSt=s(aY);W5r=r(JSt,"TFRegNetForImageClassification"),JSt.forEach(t),H5r=r(Gje," (RegNet model)"),Gje.forEach(t),U5r=i(ot),iE=n(ot,"LI",{});var Oje=s(iE);hMe=n(Oje,"STRONG",{});var YSt=s(hMe);J5r=r(YSt,"resnet"),YSt.forEach(t),Y5r=r(Oje," \u2014 "),nY=n(Oje,"A",{href:!0});var KSt=s(nY);K5r=r(KSt,"TFResNetForImageClassification"),KSt.forEach(t),Z5r=r(Oje," (ResNet model)"),Oje.forEach(t),ewr=i(ot),dE=n(ot,"LI",{});var Vje=s(dE);pMe=n(Vje,"STRONG",{});var ZSt=s(pMe);owr=r(ZSt,"swin"),ZSt.forEach(t),rwr=r(Vje," \u2014 "),sY=n(Vje,"A",{href:!0});var eRt=s(sY);twr=r(eRt,"TFSwinForImageClassification"),eRt.forEach(t),awr=r(Vje," (Swin Transformer model)"),Vje.forEach(t),nwr=i(ot),cE=n(ot,"LI",{});var Xje=s(cE);_Me=n(Xje,"STRONG",{});var oRt=s(_Me);swr=r(oRt,"vit"),oRt.forEach(t),lwr=r(Xje," \u2014 "),lY=n(Xje,"A",{href:!0});var rRt=s(lY);iwr=r(rRt,"TFViTForImageClassification"),rRt.forEach(t),dwr=r(Xje," (ViT model)"),Xje.forEach(t),ot.forEach(t),cwr=i(Il),T(fE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Fze=i(f),bc=n(f,"H2",{class:!0});var yWe=s(bc);mE=n(yWe,"A",{id:!0,class:!0,href:!0});var tRt=s(mE);uMe=n(tRt,"SPAN",{});var aRt=s(uMe);T(mx.$$.fragment,aRt),aRt.forEach(t),tRt.forEach(t),fwr=i(yWe),bMe=n(yWe,"SPAN",{});var nRt=s(bMe);mwr=r(nRt,"TFAutoModelForMaskedLM"),nRt.forEach(t),yWe.forEach(t),Tze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(gx.$$.fragment,Nl),gwr=i(Nl),vc=n(Nl,"P",{});var qte=s(vc);hwr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=n(qte,"A",{href:!0});var sRt=s(iY);pwr=r(sRt,"from_pretrained()"),sRt.forEach(t),_wr=r(qte," class method or the "),dY=n(qte,"A",{href:!0});var lRt=s(dY);uwr=r(lRt,"from_config()"),lRt.forEach(t),bwr=r(qte,` class
method.`),qte.forEach(t),vwr=i(Nl),hx=n(Nl,"P",{});var xWe=s(hx);Fwr=r(xWe,"This class cannot be instantiated directly using "),vMe=n(xWe,"CODE",{});var iRt=s(vMe);Twr=r(iRt,"__init__()"),iRt.forEach(t),Mwr=r(xWe," (throws an error)."),xWe.forEach(t),Ewr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var m7=s(Nt);T(px.$$.fragment,m7),Cwr=i(m7),FMe=n(m7,"P",{});var dRt=s(FMe);wwr=r(dRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dRt.forEach(t),Awr=i(m7),Fc=n(m7,"P",{});var jte=s(Fc);Lwr=r(jte,`Note:
Loading a model from its configuration file does `),TMe=n(jte,"STRONG",{});var cRt=s(TMe);ywr=r(cRt,"not"),cRt.forEach(t),xwr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(jte,"A",{href:!0});var fRt=s(cY);$wr=r(fRt,"from_pretrained()"),fRt.forEach(t),kwr=r(jte," to load the model weights."),jte.forEach(t),Swr=i(m7),T(gE.$$.fragment,m7),m7.forEach(t),Rwr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(_x.$$.fragment,ql),Pwr=i(ql),MMe=n(ql,"P",{});var mRt=s(MMe);Bwr=r(mRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mRt.forEach(t),Iwr=i(ql),fn=n(ql,"P",{});var g7=s(fn);Nwr=r(g7,"The model class to instantiate is selected based on the "),EMe=n(g7,"CODE",{});var gRt=s(EMe);qwr=r(gRt,"model_type"),gRt.forEach(t),jwr=r(g7,` property of the config object (either
passed as an argument or loaded from `),CMe=n(g7,"CODE",{});var hRt=s(CMe);Dwr=r(hRt,"pretrained_model_name_or_path"),hRt.forEach(t),Gwr=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(g7,"CODE",{});var pRt=s(wMe);Owr=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),Vwr=r(g7,":"),g7.forEach(t),Xwr=i(ql),ie=n(ql,"UL",{});var fe=s(ie);hE=n(fe,"LI",{});var zje=s(hE);AMe=n(zje,"STRONG",{});var _Rt=s(AMe);zwr=r(_Rt,"albert"),_Rt.forEach(t),Qwr=r(zje," \u2014 "),fY=n(zje,"A",{href:!0});var uRt=s(fY);Wwr=r(uRt,"TFAlbertForMaskedLM"),uRt.forEach(t),Hwr=r(zje," (ALBERT model)"),zje.forEach(t),Uwr=i(fe),pE=n(fe,"LI",{});var Qje=s(pE);LMe=n(Qje,"STRONG",{});var bRt=s(LMe);Jwr=r(bRt,"bert"),bRt.forEach(t),Ywr=r(Qje," \u2014 "),mY=n(Qje,"A",{href:!0});var vRt=s(mY);Kwr=r(vRt,"TFBertForMaskedLM"),vRt.forEach(t),Zwr=r(Qje," (BERT model)"),Qje.forEach(t),eAr=i(fe),_E=n(fe,"LI",{});var Wje=s(_E);yMe=n(Wje,"STRONG",{});var FRt=s(yMe);oAr=r(FRt,"camembert"),FRt.forEach(t),rAr=r(Wje," \u2014 "),gY=n(Wje,"A",{href:!0});var TRt=s(gY);tAr=r(TRt,"TFCamembertForMaskedLM"),TRt.forEach(t),aAr=r(Wje," (CamemBERT model)"),Wje.forEach(t),nAr=i(fe),uE=n(fe,"LI",{});var Hje=s(uE);xMe=n(Hje,"STRONG",{});var MRt=s(xMe);sAr=r(MRt,"convbert"),MRt.forEach(t),lAr=r(Hje," \u2014 "),hY=n(Hje,"A",{href:!0});var ERt=s(hY);iAr=r(ERt,"TFConvBertForMaskedLM"),ERt.forEach(t),dAr=r(Hje," (ConvBERT model)"),Hje.forEach(t),cAr=i(fe),bE=n(fe,"LI",{});var Uje=s(bE);$Me=n(Uje,"STRONG",{});var CRt=s($Me);fAr=r(CRt,"deberta"),CRt.forEach(t),mAr=r(Uje," \u2014 "),pY=n(Uje,"A",{href:!0});var wRt=s(pY);gAr=r(wRt,"TFDebertaForMaskedLM"),wRt.forEach(t),hAr=r(Uje," (DeBERTa model)"),Uje.forEach(t),pAr=i(fe),vE=n(fe,"LI",{});var Jje=s(vE);kMe=n(Jje,"STRONG",{});var ARt=s(kMe);_Ar=r(ARt,"deberta-v2"),ARt.forEach(t),uAr=r(Jje," \u2014 "),_Y=n(Jje,"A",{href:!0});var LRt=s(_Y);bAr=r(LRt,"TFDebertaV2ForMaskedLM"),LRt.forEach(t),vAr=r(Jje," (DeBERTa-v2 model)"),Jje.forEach(t),FAr=i(fe),FE=n(fe,"LI",{});var Yje=s(FE);SMe=n(Yje,"STRONG",{});var yRt=s(SMe);TAr=r(yRt,"distilbert"),yRt.forEach(t),MAr=r(Yje," \u2014 "),uY=n(Yje,"A",{href:!0});var xRt=s(uY);EAr=r(xRt,"TFDistilBertForMaskedLM"),xRt.forEach(t),CAr=r(Yje," (DistilBERT model)"),Yje.forEach(t),wAr=i(fe),TE=n(fe,"LI",{});var Kje=s(TE);RMe=n(Kje,"STRONG",{});var $Rt=s(RMe);AAr=r($Rt,"electra"),$Rt.forEach(t),LAr=r(Kje," \u2014 "),bY=n(Kje,"A",{href:!0});var kRt=s(bY);yAr=r(kRt,"TFElectraForMaskedLM"),kRt.forEach(t),xAr=r(Kje," (ELECTRA model)"),Kje.forEach(t),$Ar=i(fe),ME=n(fe,"LI",{});var Zje=s(ME);PMe=n(Zje,"STRONG",{});var SRt=s(PMe);kAr=r(SRt,"flaubert"),SRt.forEach(t),SAr=r(Zje," \u2014 "),vY=n(Zje,"A",{href:!0});var RRt=s(vY);RAr=r(RRt,"TFFlaubertWithLMHeadModel"),RRt.forEach(t),PAr=r(Zje," (FlauBERT model)"),Zje.forEach(t),BAr=i(fe),EE=n(fe,"LI",{});var eDe=s(EE);BMe=n(eDe,"STRONG",{});var PRt=s(BMe);IAr=r(PRt,"funnel"),PRt.forEach(t),NAr=r(eDe," \u2014 "),FY=n(eDe,"A",{href:!0});var BRt=s(FY);qAr=r(BRt,"TFFunnelForMaskedLM"),BRt.forEach(t),jAr=r(eDe," (Funnel Transformer model)"),eDe.forEach(t),DAr=i(fe),CE=n(fe,"LI",{});var oDe=s(CE);IMe=n(oDe,"STRONG",{});var IRt=s(IMe);GAr=r(IRt,"layoutlm"),IRt.forEach(t),OAr=r(oDe," \u2014 "),TY=n(oDe,"A",{href:!0});var NRt=s(TY);VAr=r(NRt,"TFLayoutLMForMaskedLM"),NRt.forEach(t),XAr=r(oDe," (LayoutLM model)"),oDe.forEach(t),zAr=i(fe),wE=n(fe,"LI",{});var rDe=s(wE);NMe=n(rDe,"STRONG",{});var qRt=s(NMe);QAr=r(qRt,"longformer"),qRt.forEach(t),WAr=r(rDe," \u2014 "),MY=n(rDe,"A",{href:!0});var jRt=s(MY);HAr=r(jRt,"TFLongformerForMaskedLM"),jRt.forEach(t),UAr=r(rDe," (Longformer model)"),rDe.forEach(t),JAr=i(fe),AE=n(fe,"LI",{});var tDe=s(AE);qMe=n(tDe,"STRONG",{});var DRt=s(qMe);YAr=r(DRt,"mobilebert"),DRt.forEach(t),KAr=r(tDe," \u2014 "),EY=n(tDe,"A",{href:!0});var GRt=s(EY);ZAr=r(GRt,"TFMobileBertForMaskedLM"),GRt.forEach(t),e6r=r(tDe," (MobileBERT model)"),tDe.forEach(t),o6r=i(fe),LE=n(fe,"LI",{});var aDe=s(LE);jMe=n(aDe,"STRONG",{});var ORt=s(jMe);r6r=r(ORt,"mpnet"),ORt.forEach(t),t6r=r(aDe," \u2014 "),CY=n(aDe,"A",{href:!0});var VRt=s(CY);a6r=r(VRt,"TFMPNetForMaskedLM"),VRt.forEach(t),n6r=r(aDe," (MPNet model)"),aDe.forEach(t),s6r=i(fe),yE=n(fe,"LI",{});var nDe=s(yE);DMe=n(nDe,"STRONG",{});var XRt=s(DMe);l6r=r(XRt,"rembert"),XRt.forEach(t),i6r=r(nDe," \u2014 "),wY=n(nDe,"A",{href:!0});var zRt=s(wY);d6r=r(zRt,"TFRemBertForMaskedLM"),zRt.forEach(t),c6r=r(nDe," (RemBERT model)"),nDe.forEach(t),f6r=i(fe),xE=n(fe,"LI",{});var sDe=s(xE);GMe=n(sDe,"STRONG",{});var QRt=s(GMe);m6r=r(QRt,"roberta"),QRt.forEach(t),g6r=r(sDe," \u2014 "),AY=n(sDe,"A",{href:!0});var WRt=s(AY);h6r=r(WRt,"TFRobertaForMaskedLM"),WRt.forEach(t),p6r=r(sDe," (RoBERTa model)"),sDe.forEach(t),_6r=i(fe),$E=n(fe,"LI",{});var lDe=s($E);OMe=n(lDe,"STRONG",{});var HRt=s(OMe);u6r=r(HRt,"roformer"),HRt.forEach(t),b6r=r(lDe," \u2014 "),LY=n(lDe,"A",{href:!0});var URt=s(LY);v6r=r(URt,"TFRoFormerForMaskedLM"),URt.forEach(t),F6r=r(lDe," (RoFormer model)"),lDe.forEach(t),T6r=i(fe),kE=n(fe,"LI",{});var iDe=s(kE);VMe=n(iDe,"STRONG",{});var JRt=s(VMe);M6r=r(JRt,"tapas"),JRt.forEach(t),E6r=r(iDe," \u2014 "),yY=n(iDe,"A",{href:!0});var YRt=s(yY);C6r=r(YRt,"TFTapasForMaskedLM"),YRt.forEach(t),w6r=r(iDe," (TAPAS model)"),iDe.forEach(t),A6r=i(fe),SE=n(fe,"LI",{});var dDe=s(SE);XMe=n(dDe,"STRONG",{});var KRt=s(XMe);L6r=r(KRt,"xlm"),KRt.forEach(t),y6r=r(dDe," \u2014 "),xY=n(dDe,"A",{href:!0});var ZRt=s(xY);x6r=r(ZRt,"TFXLMWithLMHeadModel"),ZRt.forEach(t),$6r=r(dDe," (XLM model)"),dDe.forEach(t),k6r=i(fe),RE=n(fe,"LI",{});var cDe=s(RE);zMe=n(cDe,"STRONG",{});var ePt=s(zMe);S6r=r(ePt,"xlm-roberta"),ePt.forEach(t),R6r=r(cDe," \u2014 "),$Y=n(cDe,"A",{href:!0});var oPt=s($Y);P6r=r(oPt,"TFXLMRobertaForMaskedLM"),oPt.forEach(t),B6r=r(cDe," (XLM-RoBERTa model)"),cDe.forEach(t),fe.forEach(t),I6r=i(ql),T(PE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Mze=i(f),Tc=n(f,"H2",{class:!0});var $We=s(Tc);BE=n($We,"A",{id:!0,class:!0,href:!0});var rPt=s(BE);QMe=n(rPt,"SPAN",{});var tPt=s(QMe);T(ux.$$.fragment,tPt),tPt.forEach(t),rPt.forEach(t),N6r=i($We),WMe=n($We,"SPAN",{});var aPt=s(WMe);q6r=r(aPt,"TFAutoModelForSeq2SeqLM"),aPt.forEach(t),$We.forEach(t),Eze=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(bx.$$.fragment,jl),j6r=i(jl),Mc=n(jl,"P",{});var Dte=s(Mc);D6r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=n(Dte,"A",{href:!0});var nPt=s(kY);G6r=r(nPt,"from_pretrained()"),nPt.forEach(t),O6r=r(Dte," class method or the "),SY=n(Dte,"A",{href:!0});var sPt=s(SY);V6r=r(sPt,"from_config()"),sPt.forEach(t),X6r=r(Dte,` class
method.`),Dte.forEach(t),z6r=i(jl),vx=n(jl,"P",{});var kWe=s(vx);Q6r=r(kWe,"This class cannot be instantiated directly using "),HMe=n(kWe,"CODE",{});var lPt=s(HMe);W6r=r(lPt,"__init__()"),lPt.forEach(t),H6r=r(kWe," (throws an error)."),kWe.forEach(t),U6r=i(jl),qt=n(jl,"DIV",{class:!0});var h7=s(qt);T(Fx.$$.fragment,h7),J6r=i(h7),UMe=n(h7,"P",{});var iPt=s(UMe);Y6r=r(iPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iPt.forEach(t),K6r=i(h7),Ec=n(h7,"P",{});var Gte=s(Ec);Z6r=r(Gte,`Note:
Loading a model from its configuration file does `),JMe=n(Gte,"STRONG",{});var dPt=s(JMe);e7r=r(dPt,"not"),dPt.forEach(t),o7r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Gte,"A",{href:!0});var cPt=s(RY);r7r=r(cPt,"from_pretrained()"),cPt.forEach(t),t7r=r(Gte," to load the model weights."),Gte.forEach(t),a7r=i(h7),T(IE.$$.fragment,h7),h7.forEach(t),n7r=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(Tx.$$.fragment,Dl),s7r=i(Dl),YMe=n(Dl,"P",{});var fPt=s(YMe);l7r=r(fPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fPt.forEach(t),i7r=i(Dl),mn=n(Dl,"P",{});var p7=s(mn);d7r=r(p7,"The model class to instantiate is selected based on the "),KMe=n(p7,"CODE",{});var mPt=s(KMe);c7r=r(mPt,"model_type"),mPt.forEach(t),f7r=r(p7,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(p7,"CODE",{});var gPt=s(ZMe);m7r=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),g7r=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(p7,"CODE",{});var hPt=s(e4e);h7r=r(hPt,"pretrained_model_name_or_path"),hPt.forEach(t),p7r=r(p7,":"),p7.forEach(t),_7r=i(Dl),xe=n(Dl,"UL",{});var Ne=s(xe);NE=n(Ne,"LI",{});var fDe=s(NE);o4e=n(fDe,"STRONG",{});var pPt=s(o4e);u7r=r(pPt,"bart"),pPt.forEach(t),b7r=r(fDe," \u2014 "),PY=n(fDe,"A",{href:!0});var _Pt=s(PY);v7r=r(_Pt,"TFBartForConditionalGeneration"),_Pt.forEach(t),F7r=r(fDe," (BART model)"),fDe.forEach(t),T7r=i(Ne),qE=n(Ne,"LI",{});var mDe=s(qE);r4e=n(mDe,"STRONG",{});var uPt=s(r4e);M7r=r(uPt,"blenderbot"),uPt.forEach(t),E7r=r(mDe," \u2014 "),BY=n(mDe,"A",{href:!0});var bPt=s(BY);C7r=r(bPt,"TFBlenderbotForConditionalGeneration"),bPt.forEach(t),w7r=r(mDe," (Blenderbot model)"),mDe.forEach(t),A7r=i(Ne),jE=n(Ne,"LI",{});var gDe=s(jE);t4e=n(gDe,"STRONG",{});var vPt=s(t4e);L7r=r(vPt,"blenderbot-small"),vPt.forEach(t),y7r=r(gDe," \u2014 "),IY=n(gDe,"A",{href:!0});var FPt=s(IY);x7r=r(FPt,"TFBlenderbotSmallForConditionalGeneration"),FPt.forEach(t),$7r=r(gDe," (BlenderbotSmall model)"),gDe.forEach(t),k7r=i(Ne),DE=n(Ne,"LI",{});var hDe=s(DE);a4e=n(hDe,"STRONG",{});var TPt=s(a4e);S7r=r(TPt,"encoder-decoder"),TPt.forEach(t),R7r=r(hDe," \u2014 "),NY=n(hDe,"A",{href:!0});var MPt=s(NY);P7r=r(MPt,"TFEncoderDecoderModel"),MPt.forEach(t),B7r=r(hDe," (Encoder decoder model)"),hDe.forEach(t),I7r=i(Ne),GE=n(Ne,"LI",{});var pDe=s(GE);n4e=n(pDe,"STRONG",{});var EPt=s(n4e);N7r=r(EPt,"led"),EPt.forEach(t),q7r=r(pDe," \u2014 "),qY=n(pDe,"A",{href:!0});var CPt=s(qY);j7r=r(CPt,"TFLEDForConditionalGeneration"),CPt.forEach(t),D7r=r(pDe," (LED model)"),pDe.forEach(t),G7r=i(Ne),OE=n(Ne,"LI",{});var _De=s(OE);s4e=n(_De,"STRONG",{});var wPt=s(s4e);O7r=r(wPt,"marian"),wPt.forEach(t),V7r=r(_De," \u2014 "),jY=n(_De,"A",{href:!0});var APt=s(jY);X7r=r(APt,"TFMarianMTModel"),APt.forEach(t),z7r=r(_De," (Marian model)"),_De.forEach(t),Q7r=i(Ne),VE=n(Ne,"LI",{});var uDe=s(VE);l4e=n(uDe,"STRONG",{});var LPt=s(l4e);W7r=r(LPt,"mbart"),LPt.forEach(t),H7r=r(uDe," \u2014 "),DY=n(uDe,"A",{href:!0});var yPt=s(DY);U7r=r(yPt,"TFMBartForConditionalGeneration"),yPt.forEach(t),J7r=r(uDe," (mBART model)"),uDe.forEach(t),Y7r=i(Ne),XE=n(Ne,"LI",{});var bDe=s(XE);i4e=n(bDe,"STRONG",{});var xPt=s(i4e);K7r=r(xPt,"mt5"),xPt.forEach(t),Z7r=r(bDe," \u2014 "),GY=n(bDe,"A",{href:!0});var $Pt=s(GY);eLr=r($Pt,"TFMT5ForConditionalGeneration"),$Pt.forEach(t),oLr=r(bDe," (MT5 model)"),bDe.forEach(t),rLr=i(Ne),zE=n(Ne,"LI",{});var vDe=s(zE);d4e=n(vDe,"STRONG",{});var kPt=s(d4e);tLr=r(kPt,"pegasus"),kPt.forEach(t),aLr=r(vDe," \u2014 "),OY=n(vDe,"A",{href:!0});var SPt=s(OY);nLr=r(SPt,"TFPegasusForConditionalGeneration"),SPt.forEach(t),sLr=r(vDe," (Pegasus model)"),vDe.forEach(t),lLr=i(Ne),QE=n(Ne,"LI",{});var FDe=s(QE);c4e=n(FDe,"STRONG",{});var RPt=s(c4e);iLr=r(RPt,"t5"),RPt.forEach(t),dLr=r(FDe," \u2014 "),VY=n(FDe,"A",{href:!0});var PPt=s(VY);cLr=r(PPt,"TFT5ForConditionalGeneration"),PPt.forEach(t),fLr=r(FDe," (T5 model)"),FDe.forEach(t),Ne.forEach(t),mLr=i(Dl),T(WE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Cze=i(f),Cc=n(f,"H2",{class:!0});var SWe=s(Cc);HE=n(SWe,"A",{id:!0,class:!0,href:!0});var BPt=s(HE);f4e=n(BPt,"SPAN",{});var IPt=s(f4e);T(Mx.$$.fragment,IPt),IPt.forEach(t),BPt.forEach(t),gLr=i(SWe),m4e=n(SWe,"SPAN",{});var NPt=s(m4e);hLr=r(NPt,"TFAutoModelForSequenceClassification"),NPt.forEach(t),SWe.forEach(t),wze=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(Ex.$$.fragment,Gl),pLr=i(Gl),wc=n(Gl,"P",{});var Ote=s(wc);_Lr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XY=n(Ote,"A",{href:!0});var qPt=s(XY);uLr=r(qPt,"from_pretrained()"),qPt.forEach(t),bLr=r(Ote," class method or the "),zY=n(Ote,"A",{href:!0});var jPt=s(zY);vLr=r(jPt,"from_config()"),jPt.forEach(t),FLr=r(Ote,` class
method.`),Ote.forEach(t),TLr=i(Gl),Cx=n(Gl,"P",{});var RWe=s(Cx);MLr=r(RWe,"This class cannot be instantiated directly using "),g4e=n(RWe,"CODE",{});var DPt=s(g4e);ELr=r(DPt,"__init__()"),DPt.forEach(t),CLr=r(RWe," (throws an error)."),RWe.forEach(t),wLr=i(Gl),jt=n(Gl,"DIV",{class:!0});var _7=s(jt);T(wx.$$.fragment,_7),ALr=i(_7),h4e=n(_7,"P",{});var GPt=s(h4e);LLr=r(GPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GPt.forEach(t),yLr=i(_7),Ac=n(_7,"P",{});var Vte=s(Ac);xLr=r(Vte,`Note:
Loading a model from its configuration file does `),p4e=n(Vte,"STRONG",{});var OPt=s(p4e);$Lr=r(OPt,"not"),OPt.forEach(t),kLr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Vte,"A",{href:!0});var VPt=s(QY);SLr=r(VPt,"from_pretrained()"),VPt.forEach(t),RLr=r(Vte," to load the model weights."),Vte.forEach(t),PLr=i(_7),T(UE.$$.fragment,_7),_7.forEach(t),BLr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(Ax.$$.fragment,Ol),ILr=i(Ol),_4e=n(Ol,"P",{});var XPt=s(_4e);NLr=r(XPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XPt.forEach(t),qLr=i(Ol),gn=n(Ol,"P",{});var u7=s(gn);jLr=r(u7,"The model class to instantiate is selected based on the "),u4e=n(u7,"CODE",{});var zPt=s(u4e);DLr=r(zPt,"model_type"),zPt.forEach(t),GLr=r(u7,` property of the config object (either
passed as an argument or loaded from `),b4e=n(u7,"CODE",{});var QPt=s(b4e);OLr=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),VLr=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(u7,"CODE",{});var WPt=s(v4e);XLr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),zLr=r(u7,":"),u7.forEach(t),QLr=i(Ol),ae=n(Ol,"UL",{});var ne=s(ae);JE=n(ne,"LI",{});var TDe=s(JE);F4e=n(TDe,"STRONG",{});var HPt=s(F4e);WLr=r(HPt,"albert"),HPt.forEach(t),HLr=r(TDe," \u2014 "),WY=n(TDe,"A",{href:!0});var UPt=s(WY);ULr=r(UPt,"TFAlbertForSequenceClassification"),UPt.forEach(t),JLr=r(TDe," (ALBERT model)"),TDe.forEach(t),YLr=i(ne),YE=n(ne,"LI",{});var MDe=s(YE);T4e=n(MDe,"STRONG",{});var JPt=s(T4e);KLr=r(JPt,"bert"),JPt.forEach(t),ZLr=r(MDe," \u2014 "),HY=n(MDe,"A",{href:!0});var YPt=s(HY);eyr=r(YPt,"TFBertForSequenceClassification"),YPt.forEach(t),oyr=r(MDe," (BERT model)"),MDe.forEach(t),ryr=i(ne),KE=n(ne,"LI",{});var EDe=s(KE);M4e=n(EDe,"STRONG",{});var KPt=s(M4e);tyr=r(KPt,"camembert"),KPt.forEach(t),ayr=r(EDe," \u2014 "),UY=n(EDe,"A",{href:!0});var ZPt=s(UY);nyr=r(ZPt,"TFCamembertForSequenceClassification"),ZPt.forEach(t),syr=r(EDe," (CamemBERT model)"),EDe.forEach(t),lyr=i(ne),ZE=n(ne,"LI",{});var CDe=s(ZE);E4e=n(CDe,"STRONG",{});var eBt=s(E4e);iyr=r(eBt,"convbert"),eBt.forEach(t),dyr=r(CDe," \u2014 "),JY=n(CDe,"A",{href:!0});var oBt=s(JY);cyr=r(oBt,"TFConvBertForSequenceClassification"),oBt.forEach(t),fyr=r(CDe," (ConvBERT model)"),CDe.forEach(t),myr=i(ne),eC=n(ne,"LI",{});var wDe=s(eC);C4e=n(wDe,"STRONG",{});var rBt=s(C4e);gyr=r(rBt,"ctrl"),rBt.forEach(t),hyr=r(wDe," \u2014 "),YY=n(wDe,"A",{href:!0});var tBt=s(YY);pyr=r(tBt,"TFCTRLForSequenceClassification"),tBt.forEach(t),_yr=r(wDe," (CTRL model)"),wDe.forEach(t),uyr=i(ne),oC=n(ne,"LI",{});var ADe=s(oC);w4e=n(ADe,"STRONG",{});var aBt=s(w4e);byr=r(aBt,"deberta"),aBt.forEach(t),vyr=r(ADe," \u2014 "),KY=n(ADe,"A",{href:!0});var nBt=s(KY);Fyr=r(nBt,"TFDebertaForSequenceClassification"),nBt.forEach(t),Tyr=r(ADe," (DeBERTa model)"),ADe.forEach(t),Myr=i(ne),rC=n(ne,"LI",{});var LDe=s(rC);A4e=n(LDe,"STRONG",{});var sBt=s(A4e);Eyr=r(sBt,"deberta-v2"),sBt.forEach(t),Cyr=r(LDe," \u2014 "),ZY=n(LDe,"A",{href:!0});var lBt=s(ZY);wyr=r(lBt,"TFDebertaV2ForSequenceClassification"),lBt.forEach(t),Ayr=r(LDe," (DeBERTa-v2 model)"),LDe.forEach(t),Lyr=i(ne),tC=n(ne,"LI",{});var yDe=s(tC);L4e=n(yDe,"STRONG",{});var iBt=s(L4e);yyr=r(iBt,"distilbert"),iBt.forEach(t),xyr=r(yDe," \u2014 "),eK=n(yDe,"A",{href:!0});var dBt=s(eK);$yr=r(dBt,"TFDistilBertForSequenceClassification"),dBt.forEach(t),kyr=r(yDe," (DistilBERT model)"),yDe.forEach(t),Syr=i(ne),aC=n(ne,"LI",{});var xDe=s(aC);y4e=n(xDe,"STRONG",{});var cBt=s(y4e);Ryr=r(cBt,"electra"),cBt.forEach(t),Pyr=r(xDe," \u2014 "),oK=n(xDe,"A",{href:!0});var fBt=s(oK);Byr=r(fBt,"TFElectraForSequenceClassification"),fBt.forEach(t),Iyr=r(xDe," (ELECTRA model)"),xDe.forEach(t),Nyr=i(ne),nC=n(ne,"LI",{});var $De=s(nC);x4e=n($De,"STRONG",{});var mBt=s(x4e);qyr=r(mBt,"flaubert"),mBt.forEach(t),jyr=r($De," \u2014 "),rK=n($De,"A",{href:!0});var gBt=s(rK);Dyr=r(gBt,"TFFlaubertForSequenceClassification"),gBt.forEach(t),Gyr=r($De," (FlauBERT model)"),$De.forEach(t),Oyr=i(ne),sC=n(ne,"LI",{});var kDe=s(sC);$4e=n(kDe,"STRONG",{});var hBt=s($4e);Vyr=r(hBt,"funnel"),hBt.forEach(t),Xyr=r(kDe," \u2014 "),tK=n(kDe,"A",{href:!0});var pBt=s(tK);zyr=r(pBt,"TFFunnelForSequenceClassification"),pBt.forEach(t),Qyr=r(kDe," (Funnel Transformer model)"),kDe.forEach(t),Wyr=i(ne),lC=n(ne,"LI",{});var SDe=s(lC);k4e=n(SDe,"STRONG",{});var _Bt=s(k4e);Hyr=r(_Bt,"gpt2"),_Bt.forEach(t),Uyr=r(SDe," \u2014 "),aK=n(SDe,"A",{href:!0});var uBt=s(aK);Jyr=r(uBt,"TFGPT2ForSequenceClassification"),uBt.forEach(t),Yyr=r(SDe," (OpenAI GPT-2 model)"),SDe.forEach(t),Kyr=i(ne),iC=n(ne,"LI",{});var RDe=s(iC);S4e=n(RDe,"STRONG",{});var bBt=s(S4e);Zyr=r(bBt,"gptj"),bBt.forEach(t),e9r=r(RDe," \u2014 "),nK=n(RDe,"A",{href:!0});var vBt=s(nK);o9r=r(vBt,"TFGPTJForSequenceClassification"),vBt.forEach(t),r9r=r(RDe," (GPT-J model)"),RDe.forEach(t),t9r=i(ne),dC=n(ne,"LI",{});var PDe=s(dC);R4e=n(PDe,"STRONG",{});var FBt=s(R4e);a9r=r(FBt,"layoutlm"),FBt.forEach(t),n9r=r(PDe," \u2014 "),sK=n(PDe,"A",{href:!0});var TBt=s(sK);s9r=r(TBt,"TFLayoutLMForSequenceClassification"),TBt.forEach(t),l9r=r(PDe," (LayoutLM model)"),PDe.forEach(t),i9r=i(ne),cC=n(ne,"LI",{});var BDe=s(cC);P4e=n(BDe,"STRONG",{});var MBt=s(P4e);d9r=r(MBt,"longformer"),MBt.forEach(t),c9r=r(BDe," \u2014 "),lK=n(BDe,"A",{href:!0});var EBt=s(lK);f9r=r(EBt,"TFLongformerForSequenceClassification"),EBt.forEach(t),m9r=r(BDe," (Longformer model)"),BDe.forEach(t),g9r=i(ne),fC=n(ne,"LI",{});var IDe=s(fC);B4e=n(IDe,"STRONG",{});var CBt=s(B4e);h9r=r(CBt,"mobilebert"),CBt.forEach(t),p9r=r(IDe," \u2014 "),iK=n(IDe,"A",{href:!0});var wBt=s(iK);_9r=r(wBt,"TFMobileBertForSequenceClassification"),wBt.forEach(t),u9r=r(IDe," (MobileBERT model)"),IDe.forEach(t),b9r=i(ne),mC=n(ne,"LI",{});var NDe=s(mC);I4e=n(NDe,"STRONG",{});var ABt=s(I4e);v9r=r(ABt,"mpnet"),ABt.forEach(t),F9r=r(NDe," \u2014 "),dK=n(NDe,"A",{href:!0});var LBt=s(dK);T9r=r(LBt,"TFMPNetForSequenceClassification"),LBt.forEach(t),M9r=r(NDe," (MPNet model)"),NDe.forEach(t),E9r=i(ne),gC=n(ne,"LI",{});var qDe=s(gC);N4e=n(qDe,"STRONG",{});var yBt=s(N4e);C9r=r(yBt,"openai-gpt"),yBt.forEach(t),w9r=r(qDe," \u2014 "),cK=n(qDe,"A",{href:!0});var xBt=s(cK);A9r=r(xBt,"TFOpenAIGPTForSequenceClassification"),xBt.forEach(t),L9r=r(qDe," (OpenAI GPT model)"),qDe.forEach(t),y9r=i(ne),hC=n(ne,"LI",{});var jDe=s(hC);q4e=n(jDe,"STRONG",{});var $Bt=s(q4e);x9r=r($Bt,"rembert"),$Bt.forEach(t),$9r=r(jDe," \u2014 "),fK=n(jDe,"A",{href:!0});var kBt=s(fK);k9r=r(kBt,"TFRemBertForSequenceClassification"),kBt.forEach(t),S9r=r(jDe," (RemBERT model)"),jDe.forEach(t),R9r=i(ne),pC=n(ne,"LI",{});var DDe=s(pC);j4e=n(DDe,"STRONG",{});var SBt=s(j4e);P9r=r(SBt,"roberta"),SBt.forEach(t),B9r=r(DDe," \u2014 "),mK=n(DDe,"A",{href:!0});var RBt=s(mK);I9r=r(RBt,"TFRobertaForSequenceClassification"),RBt.forEach(t),N9r=r(DDe," (RoBERTa model)"),DDe.forEach(t),q9r=i(ne),_C=n(ne,"LI",{});var GDe=s(_C);D4e=n(GDe,"STRONG",{});var PBt=s(D4e);j9r=r(PBt,"roformer"),PBt.forEach(t),D9r=r(GDe," \u2014 "),gK=n(GDe,"A",{href:!0});var BBt=s(gK);G9r=r(BBt,"TFRoFormerForSequenceClassification"),BBt.forEach(t),O9r=r(GDe," (RoFormer model)"),GDe.forEach(t),V9r=i(ne),uC=n(ne,"LI",{});var ODe=s(uC);G4e=n(ODe,"STRONG",{});var IBt=s(G4e);X9r=r(IBt,"tapas"),IBt.forEach(t),z9r=r(ODe," \u2014 "),hK=n(ODe,"A",{href:!0});var NBt=s(hK);Q9r=r(NBt,"TFTapasForSequenceClassification"),NBt.forEach(t),W9r=r(ODe," (TAPAS model)"),ODe.forEach(t),H9r=i(ne),bC=n(ne,"LI",{});var VDe=s(bC);O4e=n(VDe,"STRONG",{});var qBt=s(O4e);U9r=r(qBt,"transfo-xl"),qBt.forEach(t),J9r=r(VDe," \u2014 "),pK=n(VDe,"A",{href:!0});var jBt=s(pK);Y9r=r(jBt,"TFTransfoXLForSequenceClassification"),jBt.forEach(t),K9r=r(VDe," (Transformer-XL model)"),VDe.forEach(t),Z9r=i(ne),vC=n(ne,"LI",{});var XDe=s(vC);V4e=n(XDe,"STRONG",{});var DBt=s(V4e);exr=r(DBt,"xlm"),DBt.forEach(t),oxr=r(XDe," \u2014 "),_K=n(XDe,"A",{href:!0});var GBt=s(_K);rxr=r(GBt,"TFXLMForSequenceClassification"),GBt.forEach(t),txr=r(XDe," (XLM model)"),XDe.forEach(t),axr=i(ne),FC=n(ne,"LI",{});var zDe=s(FC);X4e=n(zDe,"STRONG",{});var OBt=s(X4e);nxr=r(OBt,"xlm-roberta"),OBt.forEach(t),sxr=r(zDe," \u2014 "),uK=n(zDe,"A",{href:!0});var VBt=s(uK);lxr=r(VBt,"TFXLMRobertaForSequenceClassification"),VBt.forEach(t),ixr=r(zDe," (XLM-RoBERTa model)"),zDe.forEach(t),dxr=i(ne),TC=n(ne,"LI",{});var QDe=s(TC);z4e=n(QDe,"STRONG",{});var XBt=s(z4e);cxr=r(XBt,"xlnet"),XBt.forEach(t),fxr=r(QDe," \u2014 "),bK=n(QDe,"A",{href:!0});var zBt=s(bK);mxr=r(zBt,"TFXLNetForSequenceClassification"),zBt.forEach(t),gxr=r(QDe," (XLNet model)"),QDe.forEach(t),ne.forEach(t),hxr=i(Ol),T(MC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Aze=i(f),Lc=n(f,"H2",{class:!0});var PWe=s(Lc);EC=n(PWe,"A",{id:!0,class:!0,href:!0});var QBt=s(EC);Q4e=n(QBt,"SPAN",{});var WBt=s(Q4e);T(Lx.$$.fragment,WBt),WBt.forEach(t),QBt.forEach(t),pxr=i(PWe),W4e=n(PWe,"SPAN",{});var HBt=s(W4e);_xr=r(HBt,"TFAutoModelForMultipleChoice"),HBt.forEach(t),PWe.forEach(t),Lze=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(yx.$$.fragment,Vl),uxr=i(Vl),yc=n(Vl,"P",{});var Xte=s(yc);bxr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vK=n(Xte,"A",{href:!0});var UBt=s(vK);vxr=r(UBt,"from_pretrained()"),UBt.forEach(t),Fxr=r(Xte," class method or the "),FK=n(Xte,"A",{href:!0});var JBt=s(FK);Txr=r(JBt,"from_config()"),JBt.forEach(t),Mxr=r(Xte,` class
method.`),Xte.forEach(t),Exr=i(Vl),xx=n(Vl,"P",{});var BWe=s(xx);Cxr=r(BWe,"This class cannot be instantiated directly using "),H4e=n(BWe,"CODE",{});var YBt=s(H4e);wxr=r(YBt,"__init__()"),YBt.forEach(t),Axr=r(BWe," (throws an error)."),BWe.forEach(t),Lxr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var b7=s(Dt);T($x.$$.fragment,b7),yxr=i(b7),U4e=n(b7,"P",{});var KBt=s(U4e);xxr=r(KBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KBt.forEach(t),$xr=i(b7),xc=n(b7,"P",{});var zte=s(xc);kxr=r(zte,`Note:
Loading a model from its configuration file does `),J4e=n(zte,"STRONG",{});var ZBt=s(J4e);Sxr=r(ZBt,"not"),ZBt.forEach(t),Rxr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(zte,"A",{href:!0});var eIt=s(TK);Pxr=r(eIt,"from_pretrained()"),eIt.forEach(t),Bxr=r(zte," to load the model weights."),zte.forEach(t),Ixr=i(b7),T(CC.$$.fragment,b7),b7.forEach(t),Nxr=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(kx.$$.fragment,Xl),qxr=i(Xl),Y4e=n(Xl,"P",{});var oIt=s(Y4e);jxr=r(oIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oIt.forEach(t),Dxr=i(Xl),hn=n(Xl,"P",{});var v7=s(hn);Gxr=r(v7,"The model class to instantiate is selected based on the "),K4e=n(v7,"CODE",{});var rIt=s(K4e);Oxr=r(rIt,"model_type"),rIt.forEach(t),Vxr=r(v7,` property of the config object (either
passed as an argument or loaded from `),Z4e=n(v7,"CODE",{});var tIt=s(Z4e);Xxr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),zxr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(v7,"CODE",{});var aIt=s(eEe);Qxr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),Wxr=r(v7,":"),v7.forEach(t),Hxr=i(Xl),_e=n(Xl,"UL",{});var Fe=s(_e);wC=n(Fe,"LI",{});var WDe=s(wC);oEe=n(WDe,"STRONG",{});var nIt=s(oEe);Uxr=r(nIt,"albert"),nIt.forEach(t),Jxr=r(WDe," \u2014 "),MK=n(WDe,"A",{href:!0});var sIt=s(MK);Yxr=r(sIt,"TFAlbertForMultipleChoice"),sIt.forEach(t),Kxr=r(WDe," (ALBERT model)"),WDe.forEach(t),Zxr=i(Fe),AC=n(Fe,"LI",{});var HDe=s(AC);rEe=n(HDe,"STRONG",{});var lIt=s(rEe);e$r=r(lIt,"bert"),lIt.forEach(t),o$r=r(HDe," \u2014 "),EK=n(HDe,"A",{href:!0});var iIt=s(EK);r$r=r(iIt,"TFBertForMultipleChoice"),iIt.forEach(t),t$r=r(HDe," (BERT model)"),HDe.forEach(t),a$r=i(Fe),LC=n(Fe,"LI",{});var UDe=s(LC);tEe=n(UDe,"STRONG",{});var dIt=s(tEe);n$r=r(dIt,"camembert"),dIt.forEach(t),s$r=r(UDe," \u2014 "),CK=n(UDe,"A",{href:!0});var cIt=s(CK);l$r=r(cIt,"TFCamembertForMultipleChoice"),cIt.forEach(t),i$r=r(UDe," (CamemBERT model)"),UDe.forEach(t),d$r=i(Fe),yC=n(Fe,"LI",{});var JDe=s(yC);aEe=n(JDe,"STRONG",{});var fIt=s(aEe);c$r=r(fIt,"convbert"),fIt.forEach(t),f$r=r(JDe," \u2014 "),wK=n(JDe,"A",{href:!0});var mIt=s(wK);m$r=r(mIt,"TFConvBertForMultipleChoice"),mIt.forEach(t),g$r=r(JDe," (ConvBERT model)"),JDe.forEach(t),h$r=i(Fe),xC=n(Fe,"LI",{});var YDe=s(xC);nEe=n(YDe,"STRONG",{});var gIt=s(nEe);p$r=r(gIt,"distilbert"),gIt.forEach(t),_$r=r(YDe," \u2014 "),AK=n(YDe,"A",{href:!0});var hIt=s(AK);u$r=r(hIt,"TFDistilBertForMultipleChoice"),hIt.forEach(t),b$r=r(YDe," (DistilBERT model)"),YDe.forEach(t),v$r=i(Fe),$C=n(Fe,"LI",{});var KDe=s($C);sEe=n(KDe,"STRONG",{});var pIt=s(sEe);F$r=r(pIt,"electra"),pIt.forEach(t),T$r=r(KDe," \u2014 "),LK=n(KDe,"A",{href:!0});var _It=s(LK);M$r=r(_It,"TFElectraForMultipleChoice"),_It.forEach(t),E$r=r(KDe," (ELECTRA model)"),KDe.forEach(t),C$r=i(Fe),kC=n(Fe,"LI",{});var ZDe=s(kC);lEe=n(ZDe,"STRONG",{});var uIt=s(lEe);w$r=r(uIt,"flaubert"),uIt.forEach(t),A$r=r(ZDe," \u2014 "),yK=n(ZDe,"A",{href:!0});var bIt=s(yK);L$r=r(bIt,"TFFlaubertForMultipleChoice"),bIt.forEach(t),y$r=r(ZDe," (FlauBERT model)"),ZDe.forEach(t),x$r=i(Fe),SC=n(Fe,"LI",{});var eGe=s(SC);iEe=n(eGe,"STRONG",{});var vIt=s(iEe);$$r=r(vIt,"funnel"),vIt.forEach(t),k$r=r(eGe," \u2014 "),xK=n(eGe,"A",{href:!0});var FIt=s(xK);S$r=r(FIt,"TFFunnelForMultipleChoice"),FIt.forEach(t),R$r=r(eGe," (Funnel Transformer model)"),eGe.forEach(t),P$r=i(Fe),RC=n(Fe,"LI",{});var oGe=s(RC);dEe=n(oGe,"STRONG",{});var TIt=s(dEe);B$r=r(TIt,"longformer"),TIt.forEach(t),I$r=r(oGe," \u2014 "),$K=n(oGe,"A",{href:!0});var MIt=s($K);N$r=r(MIt,"TFLongformerForMultipleChoice"),MIt.forEach(t),q$r=r(oGe," (Longformer model)"),oGe.forEach(t),j$r=i(Fe),PC=n(Fe,"LI",{});var rGe=s(PC);cEe=n(rGe,"STRONG",{});var EIt=s(cEe);D$r=r(EIt,"mobilebert"),EIt.forEach(t),G$r=r(rGe," \u2014 "),kK=n(rGe,"A",{href:!0});var CIt=s(kK);O$r=r(CIt,"TFMobileBertForMultipleChoice"),CIt.forEach(t),V$r=r(rGe," (MobileBERT model)"),rGe.forEach(t),X$r=i(Fe),BC=n(Fe,"LI",{});var tGe=s(BC);fEe=n(tGe,"STRONG",{});var wIt=s(fEe);z$r=r(wIt,"mpnet"),wIt.forEach(t),Q$r=r(tGe," \u2014 "),SK=n(tGe,"A",{href:!0});var AIt=s(SK);W$r=r(AIt,"TFMPNetForMultipleChoice"),AIt.forEach(t),H$r=r(tGe," (MPNet model)"),tGe.forEach(t),U$r=i(Fe),IC=n(Fe,"LI",{});var aGe=s(IC);mEe=n(aGe,"STRONG",{});var LIt=s(mEe);J$r=r(LIt,"rembert"),LIt.forEach(t),Y$r=r(aGe," \u2014 "),RK=n(aGe,"A",{href:!0});var yIt=s(RK);K$r=r(yIt,"TFRemBertForMultipleChoice"),yIt.forEach(t),Z$r=r(aGe," (RemBERT model)"),aGe.forEach(t),ekr=i(Fe),NC=n(Fe,"LI",{});var nGe=s(NC);gEe=n(nGe,"STRONG",{});var xIt=s(gEe);okr=r(xIt,"roberta"),xIt.forEach(t),rkr=r(nGe," \u2014 "),PK=n(nGe,"A",{href:!0});var $It=s(PK);tkr=r($It,"TFRobertaForMultipleChoice"),$It.forEach(t),akr=r(nGe," (RoBERTa model)"),nGe.forEach(t),nkr=i(Fe),qC=n(Fe,"LI",{});var sGe=s(qC);hEe=n(sGe,"STRONG",{});var kIt=s(hEe);skr=r(kIt,"roformer"),kIt.forEach(t),lkr=r(sGe," \u2014 "),BK=n(sGe,"A",{href:!0});var SIt=s(BK);ikr=r(SIt,"TFRoFormerForMultipleChoice"),SIt.forEach(t),dkr=r(sGe," (RoFormer model)"),sGe.forEach(t),ckr=i(Fe),jC=n(Fe,"LI",{});var lGe=s(jC);pEe=n(lGe,"STRONG",{});var RIt=s(pEe);fkr=r(RIt,"xlm"),RIt.forEach(t),mkr=r(lGe," \u2014 "),IK=n(lGe,"A",{href:!0});var PIt=s(IK);gkr=r(PIt,"TFXLMForMultipleChoice"),PIt.forEach(t),hkr=r(lGe," (XLM model)"),lGe.forEach(t),pkr=i(Fe),DC=n(Fe,"LI",{});var iGe=s(DC);_Ee=n(iGe,"STRONG",{});var BIt=s(_Ee);_kr=r(BIt,"xlm-roberta"),BIt.forEach(t),ukr=r(iGe," \u2014 "),NK=n(iGe,"A",{href:!0});var IIt=s(NK);bkr=r(IIt,"TFXLMRobertaForMultipleChoice"),IIt.forEach(t),vkr=r(iGe," (XLM-RoBERTa model)"),iGe.forEach(t),Fkr=i(Fe),GC=n(Fe,"LI",{});var dGe=s(GC);uEe=n(dGe,"STRONG",{});var NIt=s(uEe);Tkr=r(NIt,"xlnet"),NIt.forEach(t),Mkr=r(dGe," \u2014 "),qK=n(dGe,"A",{href:!0});var qIt=s(qK);Ekr=r(qIt,"TFXLNetForMultipleChoice"),qIt.forEach(t),Ckr=r(dGe," (XLNet model)"),dGe.forEach(t),Fe.forEach(t),wkr=i(Xl),T(OC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),yze=i(f),$c=n(f,"H2",{class:!0});var IWe=s($c);VC=n(IWe,"A",{id:!0,class:!0,href:!0});var jIt=s(VC);bEe=n(jIt,"SPAN",{});var DIt=s(bEe);T(Sx.$$.fragment,DIt),DIt.forEach(t),jIt.forEach(t),Akr=i(IWe),vEe=n(IWe,"SPAN",{});var GIt=s(vEe);Lkr=r(GIt,"TFAutoModelForNextSentencePrediction"),GIt.forEach(t),IWe.forEach(t),xze=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Rx.$$.fragment,zl),ykr=i(zl),kc=n(zl,"P",{});var Qte=s(kc);xkr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=n(Qte,"A",{href:!0});var OIt=s(jK);$kr=r(OIt,"from_pretrained()"),OIt.forEach(t),kkr=r(Qte," class method or the "),DK=n(Qte,"A",{href:!0});var VIt=s(DK);Skr=r(VIt,"from_config()"),VIt.forEach(t),Rkr=r(Qte,` class
method.`),Qte.forEach(t),Pkr=i(zl),Px=n(zl,"P",{});var NWe=s(Px);Bkr=r(NWe,"This class cannot be instantiated directly using "),FEe=n(NWe,"CODE",{});var XIt=s(FEe);Ikr=r(XIt,"__init__()"),XIt.forEach(t),Nkr=r(NWe," (throws an error)."),NWe.forEach(t),qkr=i(zl),Gt=n(zl,"DIV",{class:!0});var F7=s(Gt);T(Bx.$$.fragment,F7),jkr=i(F7),TEe=n(F7,"P",{});var zIt=s(TEe);Dkr=r(zIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zIt.forEach(t),Gkr=i(F7),Sc=n(F7,"P",{});var Wte=s(Sc);Okr=r(Wte,`Note:
Loading a model from its configuration file does `),MEe=n(Wte,"STRONG",{});var QIt=s(MEe);Vkr=r(QIt,"not"),QIt.forEach(t),Xkr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(Wte,"A",{href:!0});var WIt=s(GK);zkr=r(WIt,"from_pretrained()"),WIt.forEach(t),Qkr=r(Wte," to load the model weights."),Wte.forEach(t),Wkr=i(F7),T(XC.$$.fragment,F7),F7.forEach(t),Hkr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(Ix.$$.fragment,Ql),Ukr=i(Ql),EEe=n(Ql,"P",{});var HIt=s(EEe);Jkr=r(HIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HIt.forEach(t),Ykr=i(Ql),pn=n(Ql,"P",{});var T7=s(pn);Kkr=r(T7,"The model class to instantiate is selected based on the "),CEe=n(T7,"CODE",{});var UIt=s(CEe);Zkr=r(UIt,"model_type"),UIt.forEach(t),eSr=r(T7,` property of the config object (either
passed as an argument or loaded from `),wEe=n(T7,"CODE",{});var JIt=s(wEe);oSr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),rSr=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(T7,"CODE",{});var YIt=s(AEe);tSr=r(YIt,"pretrained_model_name_or_path"),YIt.forEach(t),aSr=r(T7,":"),T7.forEach(t),nSr=i(Ql),Nx=n(Ql,"UL",{});var qWe=s(Nx);zC=n(qWe,"LI",{});var cGe=s(zC);LEe=n(cGe,"STRONG",{});var KIt=s(LEe);sSr=r(KIt,"bert"),KIt.forEach(t),lSr=r(cGe," \u2014 "),OK=n(cGe,"A",{href:!0});var ZIt=s(OK);iSr=r(ZIt,"TFBertForNextSentencePrediction"),ZIt.forEach(t),dSr=r(cGe," (BERT model)"),cGe.forEach(t),cSr=i(qWe),QC=n(qWe,"LI",{});var fGe=s(QC);yEe=n(fGe,"STRONG",{});var eNt=s(yEe);fSr=r(eNt,"mobilebert"),eNt.forEach(t),mSr=r(fGe," \u2014 "),VK=n(fGe,"A",{href:!0});var oNt=s(VK);gSr=r(oNt,"TFMobileBertForNextSentencePrediction"),oNt.forEach(t),hSr=r(fGe," (MobileBERT model)"),fGe.forEach(t),qWe.forEach(t),pSr=i(Ql),T(WC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),$ze=i(f),Rc=n(f,"H2",{class:!0});var jWe=s(Rc);HC=n(jWe,"A",{id:!0,class:!0,href:!0});var rNt=s(HC);xEe=n(rNt,"SPAN",{});var tNt=s(xEe);T(qx.$$.fragment,tNt),tNt.forEach(t),rNt.forEach(t),_Sr=i(jWe),$Ee=n(jWe,"SPAN",{});var aNt=s($Ee);uSr=r(aNt,"TFAutoModelForTableQuestionAnswering"),aNt.forEach(t),jWe.forEach(t),kze=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(jx.$$.fragment,Wl),bSr=i(Wl),Pc=n(Wl,"P",{});var Hte=s(Pc);vSr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XK=n(Hte,"A",{href:!0});var nNt=s(XK);FSr=r(nNt,"from_pretrained()"),nNt.forEach(t),TSr=r(Hte," class method or the "),zK=n(Hte,"A",{href:!0});var sNt=s(zK);MSr=r(sNt,"from_config()"),sNt.forEach(t),ESr=r(Hte,` class
method.`),Hte.forEach(t),CSr=i(Wl),Dx=n(Wl,"P",{});var DWe=s(Dx);wSr=r(DWe,"This class cannot be instantiated directly using "),kEe=n(DWe,"CODE",{});var lNt=s(kEe);ASr=r(lNt,"__init__()"),lNt.forEach(t),LSr=r(DWe," (throws an error)."),DWe.forEach(t),ySr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var M7=s(Ot);T(Gx.$$.fragment,M7),xSr=i(M7),SEe=n(M7,"P",{});var iNt=s(SEe);$Sr=r(iNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iNt.forEach(t),kSr=i(M7),Bc=n(M7,"P",{});var Ute=s(Bc);SSr=r(Ute,`Note:
Loading a model from its configuration file does `),REe=n(Ute,"STRONG",{});var dNt=s(REe);RSr=r(dNt,"not"),dNt.forEach(t),PSr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Ute,"A",{href:!0});var cNt=s(QK);BSr=r(cNt,"from_pretrained()"),cNt.forEach(t),ISr=r(Ute," to load the model weights."),Ute.forEach(t),NSr=i(M7),T(UC.$$.fragment,M7),M7.forEach(t),qSr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Ox.$$.fragment,Hl),jSr=i(Hl),PEe=n(Hl,"P",{});var fNt=s(PEe);DSr=r(fNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fNt.forEach(t),GSr=i(Hl),_n=n(Hl,"P",{});var E7=s(_n);OSr=r(E7,"The model class to instantiate is selected based on the "),BEe=n(E7,"CODE",{});var mNt=s(BEe);VSr=r(mNt,"model_type"),mNt.forEach(t),XSr=r(E7,` property of the config object (either
passed as an argument or loaded from `),IEe=n(E7,"CODE",{});var gNt=s(IEe);zSr=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),QSr=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=n(E7,"CODE",{});var hNt=s(NEe);WSr=r(hNt,"pretrained_model_name_or_path"),hNt.forEach(t),HSr=r(E7,":"),E7.forEach(t),USr=i(Hl),qEe=n(Hl,"UL",{});var pNt=s(qEe);JC=n(pNt,"LI",{});var mGe=s(JC);jEe=n(mGe,"STRONG",{});var _Nt=s(jEe);JSr=r(_Nt,"tapas"),_Nt.forEach(t),YSr=r(mGe," \u2014 "),WK=n(mGe,"A",{href:!0});var uNt=s(WK);KSr=r(uNt,"TFTapasForQuestionAnswering"),uNt.forEach(t),ZSr=r(mGe," (TAPAS model)"),mGe.forEach(t),pNt.forEach(t),eRr=i(Hl),T(YC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Sze=i(f),Ic=n(f,"H2",{class:!0});var GWe=s(Ic);KC=n(GWe,"A",{id:!0,class:!0,href:!0});var bNt=s(KC);DEe=n(bNt,"SPAN",{});var vNt=s(DEe);T(Vx.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),oRr=i(GWe),GEe=n(GWe,"SPAN",{});var FNt=s(GEe);rRr=r(FNt,"TFAutoModelForTokenClassification"),FNt.forEach(t),GWe.forEach(t),Rze=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Xx.$$.fragment,Ul),tRr=i(Ul),Nc=n(Ul,"P",{});var Jte=s(Nc);aRr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HK=n(Jte,"A",{href:!0});var TNt=s(HK);nRr=r(TNt,"from_pretrained()"),TNt.forEach(t),sRr=r(Jte," class method or the "),UK=n(Jte,"A",{href:!0});var MNt=s(UK);lRr=r(MNt,"from_config()"),MNt.forEach(t),iRr=r(Jte,` class
method.`),Jte.forEach(t),dRr=i(Ul),zx=n(Ul,"P",{});var OWe=s(zx);cRr=r(OWe,"This class cannot be instantiated directly using "),OEe=n(OWe,"CODE",{});var ENt=s(OEe);fRr=r(ENt,"__init__()"),ENt.forEach(t),mRr=r(OWe," (throws an error)."),OWe.forEach(t),gRr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var C7=s(Vt);T(Qx.$$.fragment,C7),hRr=i(C7),VEe=n(C7,"P",{});var CNt=s(VEe);pRr=r(CNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CNt.forEach(t),_Rr=i(C7),qc=n(C7,"P",{});var Yte=s(qc);uRr=r(Yte,`Note:
Loading a model from its configuration file does `),XEe=n(Yte,"STRONG",{});var wNt=s(XEe);bRr=r(wNt,"not"),wNt.forEach(t),vRr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Yte,"A",{href:!0});var ANt=s(JK);FRr=r(ANt,"from_pretrained()"),ANt.forEach(t),TRr=r(Yte," to load the model weights."),Yte.forEach(t),MRr=i(C7),T(ZC.$$.fragment,C7),C7.forEach(t),ERr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Wx.$$.fragment,Jl),CRr=i(Jl),zEe=n(Jl,"P",{});var LNt=s(zEe);wRr=r(LNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LNt.forEach(t),ARr=i(Jl),un=n(Jl,"P",{});var w7=s(un);LRr=r(w7,"The model class to instantiate is selected based on the "),QEe=n(w7,"CODE",{});var yNt=s(QEe);yRr=r(yNt,"model_type"),yNt.forEach(t),xRr=r(w7,` property of the config object (either
passed as an argument or loaded from `),WEe=n(w7,"CODE",{});var xNt=s(WEe);$Rr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),kRr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(w7,"CODE",{});var $Nt=s(HEe);SRr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),RRr=r(w7,":"),w7.forEach(t),PRr=i(Jl),de=n(Jl,"UL",{});var me=s(de);e3=n(me,"LI",{});var gGe=s(e3);UEe=n(gGe,"STRONG",{});var kNt=s(UEe);BRr=r(kNt,"albert"),kNt.forEach(t),IRr=r(gGe," \u2014 "),YK=n(gGe,"A",{href:!0});var SNt=s(YK);NRr=r(SNt,"TFAlbertForTokenClassification"),SNt.forEach(t),qRr=r(gGe," (ALBERT model)"),gGe.forEach(t),jRr=i(me),o3=n(me,"LI",{});var hGe=s(o3);JEe=n(hGe,"STRONG",{});var RNt=s(JEe);DRr=r(RNt,"bert"),RNt.forEach(t),GRr=r(hGe," \u2014 "),KK=n(hGe,"A",{href:!0});var PNt=s(KK);ORr=r(PNt,"TFBertForTokenClassification"),PNt.forEach(t),VRr=r(hGe," (BERT model)"),hGe.forEach(t),XRr=i(me),r3=n(me,"LI",{});var pGe=s(r3);YEe=n(pGe,"STRONG",{});var BNt=s(YEe);zRr=r(BNt,"camembert"),BNt.forEach(t),QRr=r(pGe," \u2014 "),ZK=n(pGe,"A",{href:!0});var INt=s(ZK);WRr=r(INt,"TFCamembertForTokenClassification"),INt.forEach(t),HRr=r(pGe," (CamemBERT model)"),pGe.forEach(t),URr=i(me),t3=n(me,"LI",{});var _Ge=s(t3);KEe=n(_Ge,"STRONG",{});var NNt=s(KEe);JRr=r(NNt,"convbert"),NNt.forEach(t),YRr=r(_Ge," \u2014 "),eZ=n(_Ge,"A",{href:!0});var qNt=s(eZ);KRr=r(qNt,"TFConvBertForTokenClassification"),qNt.forEach(t),ZRr=r(_Ge," (ConvBERT model)"),_Ge.forEach(t),ePr=i(me),a3=n(me,"LI",{});var uGe=s(a3);ZEe=n(uGe,"STRONG",{});var jNt=s(ZEe);oPr=r(jNt,"deberta"),jNt.forEach(t),rPr=r(uGe," \u2014 "),oZ=n(uGe,"A",{href:!0});var DNt=s(oZ);tPr=r(DNt,"TFDebertaForTokenClassification"),DNt.forEach(t),aPr=r(uGe," (DeBERTa model)"),uGe.forEach(t),nPr=i(me),n3=n(me,"LI",{});var bGe=s(n3);eCe=n(bGe,"STRONG",{});var GNt=s(eCe);sPr=r(GNt,"deberta-v2"),GNt.forEach(t),lPr=r(bGe," \u2014 "),rZ=n(bGe,"A",{href:!0});var ONt=s(rZ);iPr=r(ONt,"TFDebertaV2ForTokenClassification"),ONt.forEach(t),dPr=r(bGe," (DeBERTa-v2 model)"),bGe.forEach(t),cPr=i(me),s3=n(me,"LI",{});var vGe=s(s3);oCe=n(vGe,"STRONG",{});var VNt=s(oCe);fPr=r(VNt,"distilbert"),VNt.forEach(t),mPr=r(vGe," \u2014 "),tZ=n(vGe,"A",{href:!0});var XNt=s(tZ);gPr=r(XNt,"TFDistilBertForTokenClassification"),XNt.forEach(t),hPr=r(vGe," (DistilBERT model)"),vGe.forEach(t),pPr=i(me),l3=n(me,"LI",{});var FGe=s(l3);rCe=n(FGe,"STRONG",{});var zNt=s(rCe);_Pr=r(zNt,"electra"),zNt.forEach(t),uPr=r(FGe," \u2014 "),aZ=n(FGe,"A",{href:!0});var QNt=s(aZ);bPr=r(QNt,"TFElectraForTokenClassification"),QNt.forEach(t),vPr=r(FGe," (ELECTRA model)"),FGe.forEach(t),FPr=i(me),i3=n(me,"LI",{});var TGe=s(i3);tCe=n(TGe,"STRONG",{});var WNt=s(tCe);TPr=r(WNt,"flaubert"),WNt.forEach(t),MPr=r(TGe," \u2014 "),nZ=n(TGe,"A",{href:!0});var HNt=s(nZ);EPr=r(HNt,"TFFlaubertForTokenClassification"),HNt.forEach(t),CPr=r(TGe," (FlauBERT model)"),TGe.forEach(t),wPr=i(me),d3=n(me,"LI",{});var MGe=s(d3);aCe=n(MGe,"STRONG",{});var UNt=s(aCe);APr=r(UNt,"funnel"),UNt.forEach(t),LPr=r(MGe," \u2014 "),sZ=n(MGe,"A",{href:!0});var JNt=s(sZ);yPr=r(JNt,"TFFunnelForTokenClassification"),JNt.forEach(t),xPr=r(MGe," (Funnel Transformer model)"),MGe.forEach(t),$Pr=i(me),c3=n(me,"LI",{});var EGe=s(c3);nCe=n(EGe,"STRONG",{});var YNt=s(nCe);kPr=r(YNt,"layoutlm"),YNt.forEach(t),SPr=r(EGe," \u2014 "),lZ=n(EGe,"A",{href:!0});var KNt=s(lZ);RPr=r(KNt,"TFLayoutLMForTokenClassification"),KNt.forEach(t),PPr=r(EGe," (LayoutLM model)"),EGe.forEach(t),BPr=i(me),f3=n(me,"LI",{});var CGe=s(f3);sCe=n(CGe,"STRONG",{});var ZNt=s(sCe);IPr=r(ZNt,"longformer"),ZNt.forEach(t),NPr=r(CGe," \u2014 "),iZ=n(CGe,"A",{href:!0});var eqt=s(iZ);qPr=r(eqt,"TFLongformerForTokenClassification"),eqt.forEach(t),jPr=r(CGe," (Longformer model)"),CGe.forEach(t),DPr=i(me),m3=n(me,"LI",{});var wGe=s(m3);lCe=n(wGe,"STRONG",{});var oqt=s(lCe);GPr=r(oqt,"mobilebert"),oqt.forEach(t),OPr=r(wGe," \u2014 "),dZ=n(wGe,"A",{href:!0});var rqt=s(dZ);VPr=r(rqt,"TFMobileBertForTokenClassification"),rqt.forEach(t),XPr=r(wGe," (MobileBERT model)"),wGe.forEach(t),zPr=i(me),g3=n(me,"LI",{});var AGe=s(g3);iCe=n(AGe,"STRONG",{});var tqt=s(iCe);QPr=r(tqt,"mpnet"),tqt.forEach(t),WPr=r(AGe," \u2014 "),cZ=n(AGe,"A",{href:!0});var aqt=s(cZ);HPr=r(aqt,"TFMPNetForTokenClassification"),aqt.forEach(t),UPr=r(AGe," (MPNet model)"),AGe.forEach(t),JPr=i(me),h3=n(me,"LI",{});var LGe=s(h3);dCe=n(LGe,"STRONG",{});var nqt=s(dCe);YPr=r(nqt,"rembert"),nqt.forEach(t),KPr=r(LGe," \u2014 "),fZ=n(LGe,"A",{href:!0});var sqt=s(fZ);ZPr=r(sqt,"TFRemBertForTokenClassification"),sqt.forEach(t),eBr=r(LGe," (RemBERT model)"),LGe.forEach(t),oBr=i(me),p3=n(me,"LI",{});var yGe=s(p3);cCe=n(yGe,"STRONG",{});var lqt=s(cCe);rBr=r(lqt,"roberta"),lqt.forEach(t),tBr=r(yGe," \u2014 "),mZ=n(yGe,"A",{href:!0});var iqt=s(mZ);aBr=r(iqt,"TFRobertaForTokenClassification"),iqt.forEach(t),nBr=r(yGe," (RoBERTa model)"),yGe.forEach(t),sBr=i(me),_3=n(me,"LI",{});var xGe=s(_3);fCe=n(xGe,"STRONG",{});var dqt=s(fCe);lBr=r(dqt,"roformer"),dqt.forEach(t),iBr=r(xGe," \u2014 "),gZ=n(xGe,"A",{href:!0});var cqt=s(gZ);dBr=r(cqt,"TFRoFormerForTokenClassification"),cqt.forEach(t),cBr=r(xGe," (RoFormer model)"),xGe.forEach(t),fBr=i(me),u3=n(me,"LI",{});var $Ge=s(u3);mCe=n($Ge,"STRONG",{});var fqt=s(mCe);mBr=r(fqt,"xlm"),fqt.forEach(t),gBr=r($Ge," \u2014 "),hZ=n($Ge,"A",{href:!0});var mqt=s(hZ);hBr=r(mqt,"TFXLMForTokenClassification"),mqt.forEach(t),pBr=r($Ge," (XLM model)"),$Ge.forEach(t),_Br=i(me),b3=n(me,"LI",{});var kGe=s(b3);gCe=n(kGe,"STRONG",{});var gqt=s(gCe);uBr=r(gqt,"xlm-roberta"),gqt.forEach(t),bBr=r(kGe," \u2014 "),pZ=n(kGe,"A",{href:!0});var hqt=s(pZ);vBr=r(hqt,"TFXLMRobertaForTokenClassification"),hqt.forEach(t),FBr=r(kGe," (XLM-RoBERTa model)"),kGe.forEach(t),TBr=i(me),v3=n(me,"LI",{});var SGe=s(v3);hCe=n(SGe,"STRONG",{});var pqt=s(hCe);MBr=r(pqt,"xlnet"),pqt.forEach(t),EBr=r(SGe," \u2014 "),_Z=n(SGe,"A",{href:!0});var _qt=s(_Z);CBr=r(_qt,"TFXLNetForTokenClassification"),_qt.forEach(t),wBr=r(SGe," (XLNet model)"),SGe.forEach(t),me.forEach(t),ABr=i(Jl),T(F3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Pze=i(f),jc=n(f,"H2",{class:!0});var VWe=s(jc);T3=n(VWe,"A",{id:!0,class:!0,href:!0});var uqt=s(T3);pCe=n(uqt,"SPAN",{});var bqt=s(pCe);T(Hx.$$.fragment,bqt),bqt.forEach(t),uqt.forEach(t),LBr=i(VWe),_Ce=n(VWe,"SPAN",{});var vqt=s(_Ce);yBr=r(vqt,"TFAutoModelForQuestionAnswering"),vqt.forEach(t),VWe.forEach(t),Bze=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Ux.$$.fragment,Yl),xBr=i(Yl),Dc=n(Yl,"P",{});var Kte=s(Dc);$Br=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=n(Kte,"A",{href:!0});var Fqt=s(uZ);kBr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),SBr=r(Kte," class method or the "),bZ=n(Kte,"A",{href:!0});var Tqt=s(bZ);RBr=r(Tqt,"from_config()"),Tqt.forEach(t),PBr=r(Kte,` class
method.`),Kte.forEach(t),BBr=i(Yl),Jx=n(Yl,"P",{});var XWe=s(Jx);IBr=r(XWe,"This class cannot be instantiated directly using "),uCe=n(XWe,"CODE",{});var Mqt=s(uCe);NBr=r(Mqt,"__init__()"),Mqt.forEach(t),qBr=r(XWe," (throws an error)."),XWe.forEach(t),jBr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var A7=s(Xt);T(Yx.$$.fragment,A7),DBr=i(A7),bCe=n(A7,"P",{});var Eqt=s(bCe);GBr=r(Eqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eqt.forEach(t),OBr=i(A7),Gc=n(A7,"P",{});var Zte=s(Gc);VBr=r(Zte,`Note:
Loading a model from its configuration file does `),vCe=n(Zte,"STRONG",{});var Cqt=s(vCe);XBr=r(Cqt,"not"),Cqt.forEach(t),zBr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Zte,"A",{href:!0});var wqt=s(vZ);QBr=r(wqt,"from_pretrained()"),wqt.forEach(t),WBr=r(Zte," to load the model weights."),Zte.forEach(t),HBr=i(A7),T(M3.$$.fragment,A7),A7.forEach(t),UBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Kx.$$.fragment,Kl),JBr=i(Kl),FCe=n(Kl,"P",{});var Aqt=s(FCe);YBr=r(Aqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Aqt.forEach(t),KBr=i(Kl),bn=n(Kl,"P",{});var L7=s(bn);ZBr=r(L7,"The model class to instantiate is selected based on the "),TCe=n(L7,"CODE",{});var Lqt=s(TCe);eIr=r(Lqt,"model_type"),Lqt.forEach(t),oIr=r(L7,` property of the config object (either
passed as an argument or loaded from `),MCe=n(L7,"CODE",{});var yqt=s(MCe);rIr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),tIr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(L7,"CODE",{});var xqt=s(ECe);aIr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),nIr=r(L7,":"),L7.forEach(t),sIr=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);E3=n(ge,"LI",{});var RGe=s(E3);CCe=n(RGe,"STRONG",{});var $qt=s(CCe);lIr=r($qt,"albert"),$qt.forEach(t),iIr=r(RGe," \u2014 "),FZ=n(RGe,"A",{href:!0});var kqt=s(FZ);dIr=r(kqt,"TFAlbertForQuestionAnswering"),kqt.forEach(t),cIr=r(RGe," (ALBERT model)"),RGe.forEach(t),fIr=i(ge),C3=n(ge,"LI",{});var PGe=s(C3);wCe=n(PGe,"STRONG",{});var Sqt=s(wCe);mIr=r(Sqt,"bert"),Sqt.forEach(t),gIr=r(PGe," \u2014 "),TZ=n(PGe,"A",{href:!0});var Rqt=s(TZ);hIr=r(Rqt,"TFBertForQuestionAnswering"),Rqt.forEach(t),pIr=r(PGe," (BERT model)"),PGe.forEach(t),_Ir=i(ge),w3=n(ge,"LI",{});var BGe=s(w3);ACe=n(BGe,"STRONG",{});var Pqt=s(ACe);uIr=r(Pqt,"camembert"),Pqt.forEach(t),bIr=r(BGe," \u2014 "),MZ=n(BGe,"A",{href:!0});var Bqt=s(MZ);vIr=r(Bqt,"TFCamembertForQuestionAnswering"),Bqt.forEach(t),FIr=r(BGe," (CamemBERT model)"),BGe.forEach(t),TIr=i(ge),A3=n(ge,"LI",{});var IGe=s(A3);LCe=n(IGe,"STRONG",{});var Iqt=s(LCe);MIr=r(Iqt,"convbert"),Iqt.forEach(t),EIr=r(IGe," \u2014 "),EZ=n(IGe,"A",{href:!0});var Nqt=s(EZ);CIr=r(Nqt,"TFConvBertForQuestionAnswering"),Nqt.forEach(t),wIr=r(IGe," (ConvBERT model)"),IGe.forEach(t),AIr=i(ge),L3=n(ge,"LI",{});var NGe=s(L3);yCe=n(NGe,"STRONG",{});var qqt=s(yCe);LIr=r(qqt,"deberta"),qqt.forEach(t),yIr=r(NGe," \u2014 "),CZ=n(NGe,"A",{href:!0});var jqt=s(CZ);xIr=r(jqt,"TFDebertaForQuestionAnswering"),jqt.forEach(t),$Ir=r(NGe," (DeBERTa model)"),NGe.forEach(t),kIr=i(ge),y3=n(ge,"LI",{});var qGe=s(y3);xCe=n(qGe,"STRONG",{});var Dqt=s(xCe);SIr=r(Dqt,"deberta-v2"),Dqt.forEach(t),RIr=r(qGe," \u2014 "),wZ=n(qGe,"A",{href:!0});var Gqt=s(wZ);PIr=r(Gqt,"TFDebertaV2ForQuestionAnswering"),Gqt.forEach(t),BIr=r(qGe," (DeBERTa-v2 model)"),qGe.forEach(t),IIr=i(ge),x3=n(ge,"LI",{});var jGe=s(x3);$Ce=n(jGe,"STRONG",{});var Oqt=s($Ce);NIr=r(Oqt,"distilbert"),Oqt.forEach(t),qIr=r(jGe," \u2014 "),AZ=n(jGe,"A",{href:!0});var Vqt=s(AZ);jIr=r(Vqt,"TFDistilBertForQuestionAnswering"),Vqt.forEach(t),DIr=r(jGe," (DistilBERT model)"),jGe.forEach(t),GIr=i(ge),$3=n(ge,"LI",{});var DGe=s($3);kCe=n(DGe,"STRONG",{});var Xqt=s(kCe);OIr=r(Xqt,"electra"),Xqt.forEach(t),VIr=r(DGe," \u2014 "),LZ=n(DGe,"A",{href:!0});var zqt=s(LZ);XIr=r(zqt,"TFElectraForQuestionAnswering"),zqt.forEach(t),zIr=r(DGe," (ELECTRA model)"),DGe.forEach(t),QIr=i(ge),k3=n(ge,"LI",{});var GGe=s(k3);SCe=n(GGe,"STRONG",{});var Qqt=s(SCe);WIr=r(Qqt,"flaubert"),Qqt.forEach(t),HIr=r(GGe," \u2014 "),yZ=n(GGe,"A",{href:!0});var Wqt=s(yZ);UIr=r(Wqt,"TFFlaubertForQuestionAnsweringSimple"),Wqt.forEach(t),JIr=r(GGe," (FlauBERT model)"),GGe.forEach(t),YIr=i(ge),S3=n(ge,"LI",{});var OGe=s(S3);RCe=n(OGe,"STRONG",{});var Hqt=s(RCe);KIr=r(Hqt,"funnel"),Hqt.forEach(t),ZIr=r(OGe," \u2014 "),xZ=n(OGe,"A",{href:!0});var Uqt=s(xZ);eNr=r(Uqt,"TFFunnelForQuestionAnswering"),Uqt.forEach(t),oNr=r(OGe," (Funnel Transformer model)"),OGe.forEach(t),rNr=i(ge),R3=n(ge,"LI",{});var VGe=s(R3);PCe=n(VGe,"STRONG",{});var Jqt=s(PCe);tNr=r(Jqt,"gptj"),Jqt.forEach(t),aNr=r(VGe," \u2014 "),$Z=n(VGe,"A",{href:!0});var Yqt=s($Z);nNr=r(Yqt,"TFGPTJForQuestionAnswering"),Yqt.forEach(t),sNr=r(VGe," (GPT-J model)"),VGe.forEach(t),lNr=i(ge),P3=n(ge,"LI",{});var XGe=s(P3);BCe=n(XGe,"STRONG",{});var Kqt=s(BCe);iNr=r(Kqt,"longformer"),Kqt.forEach(t),dNr=r(XGe," \u2014 "),kZ=n(XGe,"A",{href:!0});var Zqt=s(kZ);cNr=r(Zqt,"TFLongformerForQuestionAnswering"),Zqt.forEach(t),fNr=r(XGe," (Longformer model)"),XGe.forEach(t),mNr=i(ge),B3=n(ge,"LI",{});var zGe=s(B3);ICe=n(zGe,"STRONG",{});var ejt=s(ICe);gNr=r(ejt,"mobilebert"),ejt.forEach(t),hNr=r(zGe," \u2014 "),SZ=n(zGe,"A",{href:!0});var ojt=s(SZ);pNr=r(ojt,"TFMobileBertForQuestionAnswering"),ojt.forEach(t),_Nr=r(zGe," (MobileBERT model)"),zGe.forEach(t),uNr=i(ge),I3=n(ge,"LI",{});var QGe=s(I3);NCe=n(QGe,"STRONG",{});var rjt=s(NCe);bNr=r(rjt,"mpnet"),rjt.forEach(t),vNr=r(QGe," \u2014 "),RZ=n(QGe,"A",{href:!0});var tjt=s(RZ);FNr=r(tjt,"TFMPNetForQuestionAnswering"),tjt.forEach(t),TNr=r(QGe," (MPNet model)"),QGe.forEach(t),MNr=i(ge),N3=n(ge,"LI",{});var WGe=s(N3);qCe=n(WGe,"STRONG",{});var ajt=s(qCe);ENr=r(ajt,"rembert"),ajt.forEach(t),CNr=r(WGe," \u2014 "),PZ=n(WGe,"A",{href:!0});var njt=s(PZ);wNr=r(njt,"TFRemBertForQuestionAnswering"),njt.forEach(t),ANr=r(WGe," (RemBERT model)"),WGe.forEach(t),LNr=i(ge),q3=n(ge,"LI",{});var HGe=s(q3);jCe=n(HGe,"STRONG",{});var sjt=s(jCe);yNr=r(sjt,"roberta"),sjt.forEach(t),xNr=r(HGe," \u2014 "),BZ=n(HGe,"A",{href:!0});var ljt=s(BZ);$Nr=r(ljt,"TFRobertaForQuestionAnswering"),ljt.forEach(t),kNr=r(HGe," (RoBERTa model)"),HGe.forEach(t),SNr=i(ge),j3=n(ge,"LI",{});var UGe=s(j3);DCe=n(UGe,"STRONG",{});var ijt=s(DCe);RNr=r(ijt,"roformer"),ijt.forEach(t),PNr=r(UGe," \u2014 "),IZ=n(UGe,"A",{href:!0});var djt=s(IZ);BNr=r(djt,"TFRoFormerForQuestionAnswering"),djt.forEach(t),INr=r(UGe," (RoFormer model)"),UGe.forEach(t),NNr=i(ge),D3=n(ge,"LI",{});var JGe=s(D3);GCe=n(JGe,"STRONG",{});var cjt=s(GCe);qNr=r(cjt,"xlm"),cjt.forEach(t),jNr=r(JGe," \u2014 "),NZ=n(JGe,"A",{href:!0});var fjt=s(NZ);DNr=r(fjt,"TFXLMForQuestionAnsweringSimple"),fjt.forEach(t),GNr=r(JGe," (XLM model)"),JGe.forEach(t),ONr=i(ge),G3=n(ge,"LI",{});var YGe=s(G3);OCe=n(YGe,"STRONG",{});var mjt=s(OCe);VNr=r(mjt,"xlm-roberta"),mjt.forEach(t),XNr=r(YGe," \u2014 "),qZ=n(YGe,"A",{href:!0});var gjt=s(qZ);zNr=r(gjt,"TFXLMRobertaForQuestionAnswering"),gjt.forEach(t),QNr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),WNr=i(ge),O3=n(ge,"LI",{});var KGe=s(O3);VCe=n(KGe,"STRONG",{});var hjt=s(VCe);HNr=r(hjt,"xlnet"),hjt.forEach(t),UNr=r(KGe," \u2014 "),jZ=n(KGe,"A",{href:!0});var pjt=s(jZ);JNr=r(pjt,"TFXLNetForQuestionAnsweringSimple"),pjt.forEach(t),YNr=r(KGe," (XLNet model)"),KGe.forEach(t),ge.forEach(t),KNr=i(Kl),T(V3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Ize=i(f),Oc=n(f,"H2",{class:!0});var zWe=s(Oc);X3=n(zWe,"A",{id:!0,class:!0,href:!0});var _jt=s(X3);XCe=n(_jt,"SPAN",{});var ujt=s(XCe);T(Zx.$$.fragment,ujt),ujt.forEach(t),_jt.forEach(t),ZNr=i(zWe),zCe=n(zWe,"SPAN",{});var bjt=s(zCe);eqr=r(bjt,"TFAutoModelForVision2Seq"),bjt.forEach(t),zWe.forEach(t),Nze=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(e$.$$.fragment,Zl),oqr=i(Zl),Vc=n(Zl,"P",{});var eae=s(Vc);rqr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=n(eae,"A",{href:!0});var vjt=s(DZ);tqr=r(vjt,"from_pretrained()"),vjt.forEach(t),aqr=r(eae," class method or the "),GZ=n(eae,"A",{href:!0});var Fjt=s(GZ);nqr=r(Fjt,"from_config()"),Fjt.forEach(t),sqr=r(eae,` class
method.`),eae.forEach(t),lqr=i(Zl),o$=n(Zl,"P",{});var QWe=s(o$);iqr=r(QWe,"This class cannot be instantiated directly using "),QCe=n(QWe,"CODE",{});var Tjt=s(QCe);dqr=r(Tjt,"__init__()"),Tjt.forEach(t),cqr=r(QWe," (throws an error)."),QWe.forEach(t),fqr=i(Zl),zt=n(Zl,"DIV",{class:!0});var y7=s(zt);T(r$.$$.fragment,y7),mqr=i(y7),WCe=n(y7,"P",{});var Mjt=s(WCe);gqr=r(Mjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mjt.forEach(t),hqr=i(y7),Xc=n(y7,"P",{});var oae=s(Xc);pqr=r(oae,`Note:
Loading a model from its configuration file does `),HCe=n(oae,"STRONG",{});var Ejt=s(HCe);_qr=r(Ejt,"not"),Ejt.forEach(t),uqr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(oae,"A",{href:!0});var Cjt=s(OZ);bqr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),vqr=r(oae," to load the model weights."),oae.forEach(t),Fqr=i(y7),T(z3.$$.fragment,y7),y7.forEach(t),Tqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(t$.$$.fragment,ei),Mqr=i(ei),UCe=n(ei,"P",{});var wjt=s(UCe);Eqr=r(wjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wjt.forEach(t),Cqr=i(ei),vn=n(ei,"P",{});var x7=s(vn);wqr=r(x7,"The model class to instantiate is selected based on the "),JCe=n(x7,"CODE",{});var Ajt=s(JCe);Aqr=r(Ajt,"model_type"),Ajt.forEach(t),Lqr=r(x7,` property of the config object (either
passed as an argument or loaded from `),YCe=n(x7,"CODE",{});var Ljt=s(YCe);yqr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),xqr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=n(x7,"CODE",{});var yjt=s(KCe);$qr=r(yjt,"pretrained_model_name_or_path"),yjt.forEach(t),kqr=r(x7,":"),x7.forEach(t),Sqr=i(ei),ZCe=n(ei,"UL",{});var xjt=s(ZCe);Q3=n(xjt,"LI",{});var ZGe=s(Q3);e3e=n(ZGe,"STRONG",{});var $jt=s(e3e);Rqr=r($jt,"vision-encoder-decoder"),$jt.forEach(t),Pqr=r(ZGe," \u2014 "),VZ=n(ZGe,"A",{href:!0});var kjt=s(VZ);Bqr=r(kjt,"TFVisionEncoderDecoderModel"),kjt.forEach(t),Iqr=r(ZGe," (Vision Encoder decoder model)"),ZGe.forEach(t),xjt.forEach(t),Nqr=i(ei),T(W3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),qze=i(f),zc=n(f,"H2",{class:!0});var WWe=s(zc);H3=n(WWe,"A",{id:!0,class:!0,href:!0});var Sjt=s(H3);o3e=n(Sjt,"SPAN",{});var Rjt=s(o3e);T(a$.$$.fragment,Rjt),Rjt.forEach(t),Sjt.forEach(t),qqr=i(WWe),r3e=n(WWe,"SPAN",{});var Pjt=s(r3e);jqr=r(Pjt,"TFAutoModelForSpeechSeq2Seq"),Pjt.forEach(t),WWe.forEach(t),jze=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(n$.$$.fragment,oi),Dqr=i(oi),Qc=n(oi,"P",{});var rae=s(Qc);Gqr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XZ=n(rae,"A",{href:!0});var Bjt=s(XZ);Oqr=r(Bjt,"from_pretrained()"),Bjt.forEach(t),Vqr=r(rae," class method or the "),zZ=n(rae,"A",{href:!0});var Ijt=s(zZ);Xqr=r(Ijt,"from_config()"),Ijt.forEach(t),zqr=r(rae,` class
method.`),rae.forEach(t),Qqr=i(oi),s$=n(oi,"P",{});var HWe=s(s$);Wqr=r(HWe,"This class cannot be instantiated directly using "),t3e=n(HWe,"CODE",{});var Njt=s(t3e);Hqr=r(Njt,"__init__()"),Njt.forEach(t),Uqr=r(HWe," (throws an error)."),HWe.forEach(t),Jqr=i(oi),Qt=n(oi,"DIV",{class:!0});var $7=s(Qt);T(l$.$$.fragment,$7),Yqr=i($7),a3e=n($7,"P",{});var qjt=s(a3e);Kqr=r(qjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qjt.forEach(t),Zqr=i($7),Wc=n($7,"P",{});var tae=s(Wc);ejr=r(tae,`Note:
Loading a model from its configuration file does `),n3e=n(tae,"STRONG",{});var jjt=s(n3e);ojr=r(jjt,"not"),jjt.forEach(t),rjr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(tae,"A",{href:!0});var Djt=s(QZ);tjr=r(Djt,"from_pretrained()"),Djt.forEach(t),ajr=r(tae," to load the model weights."),tae.forEach(t),njr=i($7),T(U3.$$.fragment,$7),$7.forEach(t),sjr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(i$.$$.fragment,ri),ljr=i(ri),s3e=n(ri,"P",{});var Gjt=s(s3e);ijr=r(Gjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gjt.forEach(t),djr=i(ri),Fn=n(ri,"P",{});var k7=s(Fn);cjr=r(k7,"The model class to instantiate is selected based on the "),l3e=n(k7,"CODE",{});var Ojt=s(l3e);fjr=r(Ojt,"model_type"),Ojt.forEach(t),mjr=r(k7,` property of the config object (either
passed as an argument or loaded from `),i3e=n(k7,"CODE",{});var Vjt=s(i3e);gjr=r(Vjt,"pretrained_model_name_or_path"),Vjt.forEach(t),hjr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(k7,"CODE",{});var Xjt=s(d3e);pjr=r(Xjt,"pretrained_model_name_or_path"),Xjt.forEach(t),_jr=r(k7,":"),k7.forEach(t),ujr=i(ri),c3e=n(ri,"UL",{});var zjt=s(c3e);J3=n(zjt,"LI",{});var eOe=s(J3);f3e=n(eOe,"STRONG",{});var Qjt=s(f3e);bjr=r(Qjt,"speech_to_text"),Qjt.forEach(t),vjr=r(eOe," \u2014 "),WZ=n(eOe,"A",{href:!0});var Wjt=s(WZ);Fjr=r(Wjt,"TFSpeech2TextForConditionalGeneration"),Wjt.forEach(t),Tjr=r(eOe," (Speech2Text model)"),eOe.forEach(t),zjt.forEach(t),Mjr=i(ri),T(Y3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Dze=i(f),Hc=n(f,"H2",{class:!0});var UWe=s(Hc);K3=n(UWe,"A",{id:!0,class:!0,href:!0});var Hjt=s(K3);m3e=n(Hjt,"SPAN",{});var Ujt=s(m3e);T(d$.$$.fragment,Ujt),Ujt.forEach(t),Hjt.forEach(t),Ejr=i(UWe),g3e=n(UWe,"SPAN",{});var Jjt=s(g3e);Cjr=r(Jjt,"FlaxAutoModel"),Jjt.forEach(t),UWe.forEach(t),Gze=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(c$.$$.fragment,ti),wjr=i(ti),Uc=n(ti,"P",{});var aae=s(Uc);Ajr=r(aae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HZ=n(aae,"A",{href:!0});var Yjt=s(HZ);Ljr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),yjr=r(aae," class method or the "),UZ=n(aae,"A",{href:!0});var Kjt=s(UZ);xjr=r(Kjt,"from_config()"),Kjt.forEach(t),$jr=r(aae,` class
method.`),aae.forEach(t),kjr=i(ti),f$=n(ti,"P",{});var JWe=s(f$);Sjr=r(JWe,"This class cannot be instantiated directly using "),h3e=n(JWe,"CODE",{});var Zjt=s(h3e);Rjr=r(Zjt,"__init__()"),Zjt.forEach(t),Pjr=r(JWe," (throws an error)."),JWe.forEach(t),Bjr=i(ti),Wt=n(ti,"DIV",{class:!0});var S7=s(Wt);T(m$.$$.fragment,S7),Ijr=i(S7),p3e=n(S7,"P",{});var eDt=s(p3e);Njr=r(eDt,"Instantiates one of the base model classes of the library from a configuration."),eDt.forEach(t),qjr=i(S7),Jc=n(S7,"P",{});var nae=s(Jc);jjr=r(nae,`Note:
Loading a model from its configuration file does `),_3e=n(nae,"STRONG",{});var oDt=s(_3e);Djr=r(oDt,"not"),oDt.forEach(t),Gjr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(nae,"A",{href:!0});var rDt=s(JZ);Ojr=r(rDt,"from_pretrained()"),rDt.forEach(t),Vjr=r(nae," to load the model weights."),nae.forEach(t),Xjr=i(S7),T(Z3.$$.fragment,S7),S7.forEach(t),zjr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(g$.$$.fragment,ai),Qjr=i(ai),u3e=n(ai,"P",{});var tDt=s(u3e);Wjr=r(tDt,"Instantiate one of the base model classes of the library from a pretrained model."),tDt.forEach(t),Hjr=i(ai),Tn=n(ai,"P",{});var R7=s(Tn);Ujr=r(R7,"The model class to instantiate is selected based on the "),b3e=n(R7,"CODE",{});var aDt=s(b3e);Jjr=r(aDt,"model_type"),aDt.forEach(t),Yjr=r(R7,` property of the config object (either
passed as an argument or loaded from `),v3e=n(R7,"CODE",{});var nDt=s(v3e);Kjr=r(nDt,"pretrained_model_name_or_path"),nDt.forEach(t),Zjr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(R7,"CODE",{});var sDt=s(F3e);eDr=r(sDt,"pretrained_model_name_or_path"),sDt.forEach(t),oDr=r(R7,":"),R7.forEach(t),rDr=i(ai),oe=n(ai,"UL",{});var re=s(oe);e5=n(re,"LI",{});var oOe=s(e5);T3e=n(oOe,"STRONG",{});var lDt=s(T3e);tDr=r(lDt,"albert"),lDt.forEach(t),aDr=r(oOe," \u2014 "),YZ=n(oOe,"A",{href:!0});var iDt=s(YZ);nDr=r(iDt,"FlaxAlbertModel"),iDt.forEach(t),sDr=r(oOe," (ALBERT model)"),oOe.forEach(t),lDr=i(re),o5=n(re,"LI",{});var rOe=s(o5);M3e=n(rOe,"STRONG",{});var dDt=s(M3e);iDr=r(dDt,"bart"),dDt.forEach(t),dDr=r(rOe," \u2014 "),KZ=n(rOe,"A",{href:!0});var cDt=s(KZ);cDr=r(cDt,"FlaxBartModel"),cDt.forEach(t),fDr=r(rOe," (BART model)"),rOe.forEach(t),mDr=i(re),r5=n(re,"LI",{});var tOe=s(r5);E3e=n(tOe,"STRONG",{});var fDt=s(E3e);gDr=r(fDt,"beit"),fDt.forEach(t),hDr=r(tOe," \u2014 "),ZZ=n(tOe,"A",{href:!0});var mDt=s(ZZ);pDr=r(mDt,"FlaxBeitModel"),mDt.forEach(t),_Dr=r(tOe," (BEiT model)"),tOe.forEach(t),uDr=i(re),t5=n(re,"LI",{});var aOe=s(t5);C3e=n(aOe,"STRONG",{});var gDt=s(C3e);bDr=r(gDt,"bert"),gDt.forEach(t),vDr=r(aOe," \u2014 "),eee=n(aOe,"A",{href:!0});var hDt=s(eee);FDr=r(hDt,"FlaxBertModel"),hDt.forEach(t),TDr=r(aOe," (BERT model)"),aOe.forEach(t),MDr=i(re),a5=n(re,"LI",{});var nOe=s(a5);w3e=n(nOe,"STRONG",{});var pDt=s(w3e);EDr=r(pDt,"big_bird"),pDt.forEach(t),CDr=r(nOe," \u2014 "),oee=n(nOe,"A",{href:!0});var _Dt=s(oee);wDr=r(_Dt,"FlaxBigBirdModel"),_Dt.forEach(t),ADr=r(nOe," (BigBird model)"),nOe.forEach(t),LDr=i(re),n5=n(re,"LI",{});var sOe=s(n5);A3e=n(sOe,"STRONG",{});var uDt=s(A3e);yDr=r(uDt,"blenderbot"),uDt.forEach(t),xDr=r(sOe," \u2014 "),ree=n(sOe,"A",{href:!0});var bDt=s(ree);$Dr=r(bDt,"FlaxBlenderbotModel"),bDt.forEach(t),kDr=r(sOe," (Blenderbot model)"),sOe.forEach(t),SDr=i(re),s5=n(re,"LI",{});var lOe=s(s5);L3e=n(lOe,"STRONG",{});var vDt=s(L3e);RDr=r(vDt,"blenderbot-small"),vDt.forEach(t),PDr=r(lOe," \u2014 "),tee=n(lOe,"A",{href:!0});var FDt=s(tee);BDr=r(FDt,"FlaxBlenderbotSmallModel"),FDt.forEach(t),IDr=r(lOe," (BlenderbotSmall model)"),lOe.forEach(t),NDr=i(re),l5=n(re,"LI",{});var iOe=s(l5);y3e=n(iOe,"STRONG",{});var TDt=s(y3e);qDr=r(TDt,"bloom"),TDt.forEach(t),jDr=r(iOe," \u2014 "),aee=n(iOe,"A",{href:!0});var MDt=s(aee);DDr=r(MDt,"FlaxBloomModel"),MDt.forEach(t),GDr=r(iOe," (BLOOM model)"),iOe.forEach(t),ODr=i(re),i5=n(re,"LI",{});var dOe=s(i5);x3e=n(dOe,"STRONG",{});var EDt=s(x3e);VDr=r(EDt,"clip"),EDt.forEach(t),XDr=r(dOe," \u2014 "),nee=n(dOe,"A",{href:!0});var CDt=s(nee);zDr=r(CDt,"FlaxCLIPModel"),CDt.forEach(t),QDr=r(dOe," (CLIP model)"),dOe.forEach(t),WDr=i(re),d5=n(re,"LI",{});var cOe=s(d5);$3e=n(cOe,"STRONG",{});var wDt=s($3e);HDr=r(wDt,"distilbert"),wDt.forEach(t),UDr=r(cOe," \u2014 "),see=n(cOe,"A",{href:!0});var ADt=s(see);JDr=r(ADt,"FlaxDistilBertModel"),ADt.forEach(t),YDr=r(cOe," (DistilBERT model)"),cOe.forEach(t),KDr=i(re),c5=n(re,"LI",{});var fOe=s(c5);k3e=n(fOe,"STRONG",{});var LDt=s(k3e);ZDr=r(LDt,"electra"),LDt.forEach(t),eGr=r(fOe," \u2014 "),lee=n(fOe,"A",{href:!0});var yDt=s(lee);oGr=r(yDt,"FlaxElectraModel"),yDt.forEach(t),rGr=r(fOe," (ELECTRA model)"),fOe.forEach(t),tGr=i(re),f5=n(re,"LI",{});var mOe=s(f5);S3e=n(mOe,"STRONG",{});var xDt=s(S3e);aGr=r(xDt,"gpt2"),xDt.forEach(t),nGr=r(mOe," \u2014 "),iee=n(mOe,"A",{href:!0});var $Dt=s(iee);sGr=r($Dt,"FlaxGPT2Model"),$Dt.forEach(t),lGr=r(mOe," (OpenAI GPT-2 model)"),mOe.forEach(t),iGr=i(re),m5=n(re,"LI",{});var gOe=s(m5);R3e=n(gOe,"STRONG",{});var kDt=s(R3e);dGr=r(kDt,"gpt_neo"),kDt.forEach(t),cGr=r(gOe," \u2014 "),dee=n(gOe,"A",{href:!0});var SDt=s(dee);fGr=r(SDt,"FlaxGPTNeoModel"),SDt.forEach(t),mGr=r(gOe," (GPT Neo model)"),gOe.forEach(t),gGr=i(re),g5=n(re,"LI",{});var hOe=s(g5);P3e=n(hOe,"STRONG",{});var RDt=s(P3e);hGr=r(RDt,"gptj"),RDt.forEach(t),pGr=r(hOe," \u2014 "),cee=n(hOe,"A",{href:!0});var PDt=s(cee);_Gr=r(PDt,"FlaxGPTJModel"),PDt.forEach(t),uGr=r(hOe," (GPT-J model)"),hOe.forEach(t),bGr=i(re),h5=n(re,"LI",{});var pOe=s(h5);B3e=n(pOe,"STRONG",{});var BDt=s(B3e);vGr=r(BDt,"longt5"),BDt.forEach(t),FGr=r(pOe," \u2014 "),fee=n(pOe,"A",{href:!0});var IDt=s(fee);TGr=r(IDt,"FlaxLongT5Model"),IDt.forEach(t),MGr=r(pOe," (LongT5 model)"),pOe.forEach(t),EGr=i(re),p5=n(re,"LI",{});var _Oe=s(p5);I3e=n(_Oe,"STRONG",{});var NDt=s(I3e);CGr=r(NDt,"marian"),NDt.forEach(t),wGr=r(_Oe," \u2014 "),mee=n(_Oe,"A",{href:!0});var qDt=s(mee);AGr=r(qDt,"FlaxMarianModel"),qDt.forEach(t),LGr=r(_Oe," (Marian model)"),_Oe.forEach(t),yGr=i(re),_5=n(re,"LI",{});var uOe=s(_5);N3e=n(uOe,"STRONG",{});var jDt=s(N3e);xGr=r(jDt,"mbart"),jDt.forEach(t),$Gr=r(uOe," \u2014 "),gee=n(uOe,"A",{href:!0});var DDt=s(gee);kGr=r(DDt,"FlaxMBartModel"),DDt.forEach(t),SGr=r(uOe," (mBART model)"),uOe.forEach(t),RGr=i(re),u5=n(re,"LI",{});var bOe=s(u5);q3e=n(bOe,"STRONG",{});var GDt=s(q3e);PGr=r(GDt,"mt5"),GDt.forEach(t),BGr=r(bOe," \u2014 "),hee=n(bOe,"A",{href:!0});var ODt=s(hee);IGr=r(ODt,"FlaxMT5Model"),ODt.forEach(t),NGr=r(bOe," (MT5 model)"),bOe.forEach(t),qGr=i(re),b5=n(re,"LI",{});var vOe=s(b5);j3e=n(vOe,"STRONG",{});var VDt=s(j3e);jGr=r(VDt,"opt"),VDt.forEach(t),DGr=r(vOe," \u2014 "),pee=n(vOe,"A",{href:!0});var XDt=s(pee);GGr=r(XDt,"FlaxOPTModel"),XDt.forEach(t),OGr=r(vOe," (OPT model)"),vOe.forEach(t),VGr=i(re),v5=n(re,"LI",{});var FOe=s(v5);D3e=n(FOe,"STRONG",{});var zDt=s(D3e);XGr=r(zDt,"pegasus"),zDt.forEach(t),zGr=r(FOe," \u2014 "),_ee=n(FOe,"A",{href:!0});var QDt=s(_ee);QGr=r(QDt,"FlaxPegasusModel"),QDt.forEach(t),WGr=r(FOe," (Pegasus model)"),FOe.forEach(t),HGr=i(re),F5=n(re,"LI",{});var TOe=s(F5);G3e=n(TOe,"STRONG",{});var WDt=s(G3e);UGr=r(WDt,"roberta"),WDt.forEach(t),JGr=r(TOe," \u2014 "),uee=n(TOe,"A",{href:!0});var HDt=s(uee);YGr=r(HDt,"FlaxRobertaModel"),HDt.forEach(t),KGr=r(TOe," (RoBERTa model)"),TOe.forEach(t),ZGr=i(re),T5=n(re,"LI",{});var MOe=s(T5);O3e=n(MOe,"STRONG",{});var UDt=s(O3e);eOr=r(UDt,"roformer"),UDt.forEach(t),oOr=r(MOe," \u2014 "),bee=n(MOe,"A",{href:!0});var JDt=s(bee);rOr=r(JDt,"FlaxRoFormerModel"),JDt.forEach(t),tOr=r(MOe," (RoFormer model)"),MOe.forEach(t),aOr=i(re),M5=n(re,"LI",{});var EOe=s(M5);V3e=n(EOe,"STRONG",{});var YDt=s(V3e);nOr=r(YDt,"t5"),YDt.forEach(t),sOr=r(EOe," \u2014 "),vee=n(EOe,"A",{href:!0});var KDt=s(vee);lOr=r(KDt,"FlaxT5Model"),KDt.forEach(t),iOr=r(EOe," (T5 model)"),EOe.forEach(t),dOr=i(re),E5=n(re,"LI",{});var COe=s(E5);X3e=n(COe,"STRONG",{});var ZDt=s(X3e);cOr=r(ZDt,"vision-text-dual-encoder"),ZDt.forEach(t),fOr=r(COe," \u2014 "),Fee=n(COe,"A",{href:!0});var eGt=s(Fee);mOr=r(eGt,"FlaxVisionTextDualEncoderModel"),eGt.forEach(t),gOr=r(COe," (VisionTextDualEncoder model)"),COe.forEach(t),hOr=i(re),C5=n(re,"LI",{});var wOe=s(C5);z3e=n(wOe,"STRONG",{});var oGt=s(z3e);pOr=r(oGt,"vit"),oGt.forEach(t),_Or=r(wOe," \u2014 "),Tee=n(wOe,"A",{href:!0});var rGt=s(Tee);uOr=r(rGt,"FlaxViTModel"),rGt.forEach(t),bOr=r(wOe," (ViT model)"),wOe.forEach(t),vOr=i(re),w5=n(re,"LI",{});var AOe=s(w5);Q3e=n(AOe,"STRONG",{});var tGt=s(Q3e);FOr=r(tGt,"wav2vec2"),tGt.forEach(t),TOr=r(AOe," \u2014 "),Mee=n(AOe,"A",{href:!0});var aGt=s(Mee);MOr=r(aGt,"FlaxWav2Vec2Model"),aGt.forEach(t),EOr=r(AOe," (Wav2Vec2 model)"),AOe.forEach(t),COr=i(re),A5=n(re,"LI",{});var LOe=s(A5);W3e=n(LOe,"STRONG",{});var nGt=s(W3e);wOr=r(nGt,"xglm"),nGt.forEach(t),AOr=r(LOe," \u2014 "),Eee=n(LOe,"A",{href:!0});var sGt=s(Eee);LOr=r(sGt,"FlaxXGLMModel"),sGt.forEach(t),yOr=r(LOe," (XGLM model)"),LOe.forEach(t),xOr=i(re),L5=n(re,"LI",{});var yOe=s(L5);H3e=n(yOe,"STRONG",{});var lGt=s(H3e);$Or=r(lGt,"xlm-roberta"),lGt.forEach(t),kOr=r(yOe," \u2014 "),Cee=n(yOe,"A",{href:!0});var iGt=s(Cee);SOr=r(iGt,"FlaxXLMRobertaModel"),iGt.forEach(t),ROr=r(yOe," (XLM-RoBERTa model)"),yOe.forEach(t),re.forEach(t),POr=i(ai),T(y5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Oze=i(f),Yc=n(f,"H2",{class:!0});var YWe=s(Yc);x5=n(YWe,"A",{id:!0,class:!0,href:!0});var dGt=s(x5);U3e=n(dGt,"SPAN",{});var cGt=s(U3e);T(h$.$$.fragment,cGt),cGt.forEach(t),dGt.forEach(t),BOr=i(YWe),J3e=n(YWe,"SPAN",{});var fGt=s(J3e);IOr=r(fGt,"FlaxAutoModelForCausalLM"),fGt.forEach(t),YWe.forEach(t),Vze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(p$.$$.fragment,ni),NOr=i(ni),Kc=n(ni,"P",{});var sae=s(Kc);qOr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wee=n(sae,"A",{href:!0});var mGt=s(wee);jOr=r(mGt,"from_pretrained()"),mGt.forEach(t),DOr=r(sae," class method or the "),Aee=n(sae,"A",{href:!0});var gGt=s(Aee);GOr=r(gGt,"from_config()"),gGt.forEach(t),OOr=r(sae,` class
method.`),sae.forEach(t),VOr=i(ni),_$=n(ni,"P",{});var KWe=s(_$);XOr=r(KWe,"This class cannot be instantiated directly using "),Y3e=n(KWe,"CODE",{});var hGt=s(Y3e);zOr=r(hGt,"__init__()"),hGt.forEach(t),QOr=r(KWe," (throws an error)."),KWe.forEach(t),WOr=i(ni),Ht=n(ni,"DIV",{class:!0});var P7=s(Ht);T(u$.$$.fragment,P7),HOr=i(P7),K3e=n(P7,"P",{});var pGt=s(K3e);UOr=r(pGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pGt.forEach(t),JOr=i(P7),Zc=n(P7,"P",{});var lae=s(Zc);YOr=r(lae,`Note:
Loading a model from its configuration file does `),Z3e=n(lae,"STRONG",{});var _Gt=s(Z3e);KOr=r(_Gt,"not"),_Gt.forEach(t),ZOr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(lae,"A",{href:!0});var uGt=s(Lee);eVr=r(uGt,"from_pretrained()"),uGt.forEach(t),oVr=r(lae," to load the model weights."),lae.forEach(t),rVr=i(P7),T($5.$$.fragment,P7),P7.forEach(t),tVr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(b$.$$.fragment,si),aVr=i(si),e5e=n(si,"P",{});var bGt=s(e5e);nVr=r(bGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bGt.forEach(t),sVr=i(si),Mn=n(si,"P",{});var B7=s(Mn);lVr=r(B7,"The model class to instantiate is selected based on the "),o5e=n(B7,"CODE",{});var vGt=s(o5e);iVr=r(vGt,"model_type"),vGt.forEach(t),dVr=r(B7,` property of the config object (either
passed as an argument or loaded from `),r5e=n(B7,"CODE",{});var FGt=s(r5e);cVr=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),fVr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(B7,"CODE",{});var TGt=s(t5e);mVr=r(TGt,"pretrained_model_name_or_path"),TGt.forEach(t),gVr=r(B7,":"),B7.forEach(t),hVr=i(si),Ae=n(si,"UL",{});var Pe=s(Ae);k5=n(Pe,"LI",{});var xOe=s(k5);a5e=n(xOe,"STRONG",{});var MGt=s(a5e);pVr=r(MGt,"bart"),MGt.forEach(t),_Vr=r(xOe," \u2014 "),yee=n(xOe,"A",{href:!0});var EGt=s(yee);uVr=r(EGt,"FlaxBartForCausalLM"),EGt.forEach(t),bVr=r(xOe," (BART model)"),xOe.forEach(t),vVr=i(Pe),S5=n(Pe,"LI",{});var $Oe=s(S5);n5e=n($Oe,"STRONG",{});var CGt=s(n5e);FVr=r(CGt,"bert"),CGt.forEach(t),TVr=r($Oe," \u2014 "),xee=n($Oe,"A",{href:!0});var wGt=s(xee);MVr=r(wGt,"FlaxBertForCausalLM"),wGt.forEach(t),EVr=r($Oe," (BERT model)"),$Oe.forEach(t),CVr=i(Pe),R5=n(Pe,"LI",{});var kOe=s(R5);s5e=n(kOe,"STRONG",{});var AGt=s(s5e);wVr=r(AGt,"big_bird"),AGt.forEach(t),AVr=r(kOe," \u2014 "),$ee=n(kOe,"A",{href:!0});var LGt=s($ee);LVr=r(LGt,"FlaxBigBirdForCausalLM"),LGt.forEach(t),yVr=r(kOe," (BigBird model)"),kOe.forEach(t),xVr=i(Pe),P5=n(Pe,"LI",{});var SOe=s(P5);l5e=n(SOe,"STRONG",{});var yGt=s(l5e);$Vr=r(yGt,"bloom"),yGt.forEach(t),kVr=r(SOe," \u2014 "),kee=n(SOe,"A",{href:!0});var xGt=s(kee);SVr=r(xGt,"FlaxBloomForCausalLM"),xGt.forEach(t),RVr=r(SOe," (BLOOM model)"),SOe.forEach(t),PVr=i(Pe),B5=n(Pe,"LI",{});var ROe=s(B5);i5e=n(ROe,"STRONG",{});var $Gt=s(i5e);BVr=r($Gt,"electra"),$Gt.forEach(t),IVr=r(ROe," \u2014 "),See=n(ROe,"A",{href:!0});var kGt=s(See);NVr=r(kGt,"FlaxElectraForCausalLM"),kGt.forEach(t),qVr=r(ROe," (ELECTRA model)"),ROe.forEach(t),jVr=i(Pe),I5=n(Pe,"LI",{});var POe=s(I5);d5e=n(POe,"STRONG",{});var SGt=s(d5e);DVr=r(SGt,"gpt2"),SGt.forEach(t),GVr=r(POe," \u2014 "),Ree=n(POe,"A",{href:!0});var RGt=s(Ree);OVr=r(RGt,"FlaxGPT2LMHeadModel"),RGt.forEach(t),VVr=r(POe," (OpenAI GPT-2 model)"),POe.forEach(t),XVr=i(Pe),N5=n(Pe,"LI",{});var BOe=s(N5);c5e=n(BOe,"STRONG",{});var PGt=s(c5e);zVr=r(PGt,"gpt_neo"),PGt.forEach(t),QVr=r(BOe," \u2014 "),Pee=n(BOe,"A",{href:!0});var BGt=s(Pee);WVr=r(BGt,"FlaxGPTNeoForCausalLM"),BGt.forEach(t),HVr=r(BOe," (GPT Neo model)"),BOe.forEach(t),UVr=i(Pe),q5=n(Pe,"LI",{});var IOe=s(q5);f5e=n(IOe,"STRONG",{});var IGt=s(f5e);JVr=r(IGt,"gptj"),IGt.forEach(t),YVr=r(IOe," \u2014 "),Bee=n(IOe,"A",{href:!0});var NGt=s(Bee);KVr=r(NGt,"FlaxGPTJForCausalLM"),NGt.forEach(t),ZVr=r(IOe," (GPT-J model)"),IOe.forEach(t),eXr=i(Pe),j5=n(Pe,"LI",{});var NOe=s(j5);m5e=n(NOe,"STRONG",{});var qGt=s(m5e);oXr=r(qGt,"opt"),qGt.forEach(t),rXr=r(NOe," \u2014 "),Iee=n(NOe,"A",{href:!0});var jGt=s(Iee);tXr=r(jGt,"FlaxOPTForCausalLM"),jGt.forEach(t),aXr=r(NOe," (OPT model)"),NOe.forEach(t),nXr=i(Pe),D5=n(Pe,"LI",{});var qOe=s(D5);g5e=n(qOe,"STRONG",{});var DGt=s(g5e);sXr=r(DGt,"roberta"),DGt.forEach(t),lXr=r(qOe," \u2014 "),Nee=n(qOe,"A",{href:!0});var GGt=s(Nee);iXr=r(GGt,"FlaxRobertaForCausalLM"),GGt.forEach(t),dXr=r(qOe," (RoBERTa model)"),qOe.forEach(t),cXr=i(Pe),G5=n(Pe,"LI",{});var jOe=s(G5);h5e=n(jOe,"STRONG",{});var OGt=s(h5e);fXr=r(OGt,"xglm"),OGt.forEach(t),mXr=r(jOe," \u2014 "),qee=n(jOe,"A",{href:!0});var VGt=s(qee);gXr=r(VGt,"FlaxXGLMForCausalLM"),VGt.forEach(t),hXr=r(jOe," (XGLM model)"),jOe.forEach(t),Pe.forEach(t),pXr=i(si),T(O5.$$.fragment,si),si.forEach(t),ni.forEach(t),Xze=i(f),ef=n(f,"H2",{class:!0});var ZWe=s(ef);V5=n(ZWe,"A",{id:!0,class:!0,href:!0});var XGt=s(V5);p5e=n(XGt,"SPAN",{});var zGt=s(p5e);T(v$.$$.fragment,zGt),zGt.forEach(t),XGt.forEach(t),_Xr=i(ZWe),_5e=n(ZWe,"SPAN",{});var QGt=s(_5e);uXr=r(QGt,"FlaxAutoModelForPreTraining"),QGt.forEach(t),ZWe.forEach(t),zze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(F$.$$.fragment,li),bXr=i(li),of=n(li,"P",{});var iae=s(of);vXr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jee=n(iae,"A",{href:!0});var WGt=s(jee);FXr=r(WGt,"from_pretrained()"),WGt.forEach(t),TXr=r(iae," class method or the "),Dee=n(iae,"A",{href:!0});var HGt=s(Dee);MXr=r(HGt,"from_config()"),HGt.forEach(t),EXr=r(iae,` class
method.`),iae.forEach(t),CXr=i(li),T$=n(li,"P",{});var eHe=s(T$);wXr=r(eHe,"This class cannot be instantiated directly using "),u5e=n(eHe,"CODE",{});var UGt=s(u5e);AXr=r(UGt,"__init__()"),UGt.forEach(t),LXr=r(eHe," (throws an error)."),eHe.forEach(t),yXr=i(li),Ut=n(li,"DIV",{class:!0});var I7=s(Ut);T(M$.$$.fragment,I7),xXr=i(I7),b5e=n(I7,"P",{});var JGt=s(b5e);$Xr=r(JGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JGt.forEach(t),kXr=i(I7),rf=n(I7,"P",{});var dae=s(rf);SXr=r(dae,`Note:
Loading a model from its configuration file does `),v5e=n(dae,"STRONG",{});var YGt=s(v5e);RXr=r(YGt,"not"),YGt.forEach(t),PXr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=n(dae,"A",{href:!0});var KGt=s(Gee);BXr=r(KGt,"from_pretrained()"),KGt.forEach(t),IXr=r(dae," to load the model weights."),dae.forEach(t),NXr=i(I7),T(X5.$$.fragment,I7),I7.forEach(t),qXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(E$.$$.fragment,ii),jXr=i(ii),F5e=n(ii,"P",{});var ZGt=s(F5e);DXr=r(ZGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZGt.forEach(t),GXr=i(ii),En=n(ii,"P",{});var N7=s(En);OXr=r(N7,"The model class to instantiate is selected based on the "),T5e=n(N7,"CODE",{});var eOt=s(T5e);VXr=r(eOt,"model_type"),eOt.forEach(t),XXr=r(N7,` property of the config object (either
passed as an argument or loaded from `),M5e=n(N7,"CODE",{});var oOt=s(M5e);zXr=r(oOt,"pretrained_model_name_or_path"),oOt.forEach(t),QXr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(N7,"CODE",{});var rOt=s(E5e);WXr=r(rOt,"pretrained_model_name_or_path"),rOt.forEach(t),HXr=r(N7,":"),N7.forEach(t),UXr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);z5=n(we,"LI",{});var DOe=s(z5);C5e=n(DOe,"STRONG",{});var tOt=s(C5e);JXr=r(tOt,"albert"),tOt.forEach(t),YXr=r(DOe," \u2014 "),Oee=n(DOe,"A",{href:!0});var aOt=s(Oee);KXr=r(aOt,"FlaxAlbertForPreTraining"),aOt.forEach(t),ZXr=r(DOe," (ALBERT model)"),DOe.forEach(t),ezr=i(we),Q5=n(we,"LI",{});var GOe=s(Q5);w5e=n(GOe,"STRONG",{});var nOt=s(w5e);ozr=r(nOt,"bart"),nOt.forEach(t),rzr=r(GOe," \u2014 "),Vee=n(GOe,"A",{href:!0});var sOt=s(Vee);tzr=r(sOt,"FlaxBartForConditionalGeneration"),sOt.forEach(t),azr=r(GOe," (BART model)"),GOe.forEach(t),nzr=i(we),W5=n(we,"LI",{});var OOe=s(W5);A5e=n(OOe,"STRONG",{});var lOt=s(A5e);szr=r(lOt,"bert"),lOt.forEach(t),lzr=r(OOe," \u2014 "),Xee=n(OOe,"A",{href:!0});var iOt=s(Xee);izr=r(iOt,"FlaxBertForPreTraining"),iOt.forEach(t),dzr=r(OOe," (BERT model)"),OOe.forEach(t),czr=i(we),H5=n(we,"LI",{});var VOe=s(H5);L5e=n(VOe,"STRONG",{});var dOt=s(L5e);fzr=r(dOt,"big_bird"),dOt.forEach(t),mzr=r(VOe," \u2014 "),zee=n(VOe,"A",{href:!0});var cOt=s(zee);gzr=r(cOt,"FlaxBigBirdForPreTraining"),cOt.forEach(t),hzr=r(VOe," (BigBird model)"),VOe.forEach(t),pzr=i(we),U5=n(we,"LI",{});var XOe=s(U5);y5e=n(XOe,"STRONG",{});var fOt=s(y5e);_zr=r(fOt,"electra"),fOt.forEach(t),uzr=r(XOe," \u2014 "),Qee=n(XOe,"A",{href:!0});var mOt=s(Qee);bzr=r(mOt,"FlaxElectraForPreTraining"),mOt.forEach(t),vzr=r(XOe," (ELECTRA model)"),XOe.forEach(t),Fzr=i(we),J5=n(we,"LI",{});var zOe=s(J5);x5e=n(zOe,"STRONG",{});var gOt=s(x5e);Tzr=r(gOt,"longt5"),gOt.forEach(t),Mzr=r(zOe," \u2014 "),Wee=n(zOe,"A",{href:!0});var hOt=s(Wee);Ezr=r(hOt,"FlaxLongT5ForConditionalGeneration"),hOt.forEach(t),Czr=r(zOe," (LongT5 model)"),zOe.forEach(t),wzr=i(we),Y5=n(we,"LI",{});var QOe=s(Y5);$5e=n(QOe,"STRONG",{});var pOt=s($5e);Azr=r(pOt,"mbart"),pOt.forEach(t),Lzr=r(QOe," \u2014 "),Hee=n(QOe,"A",{href:!0});var _Ot=s(Hee);yzr=r(_Ot,"FlaxMBartForConditionalGeneration"),_Ot.forEach(t),xzr=r(QOe," (mBART model)"),QOe.forEach(t),$zr=i(we),K5=n(we,"LI",{});var WOe=s(K5);k5e=n(WOe,"STRONG",{});var uOt=s(k5e);kzr=r(uOt,"mt5"),uOt.forEach(t),Szr=r(WOe," \u2014 "),Uee=n(WOe,"A",{href:!0});var bOt=s(Uee);Rzr=r(bOt,"FlaxMT5ForConditionalGeneration"),bOt.forEach(t),Pzr=r(WOe," (MT5 model)"),WOe.forEach(t),Bzr=i(we),Z5=n(we,"LI",{});var HOe=s(Z5);S5e=n(HOe,"STRONG",{});var vOt=s(S5e);Izr=r(vOt,"roberta"),vOt.forEach(t),Nzr=r(HOe," \u2014 "),Jee=n(HOe,"A",{href:!0});var FOt=s(Jee);qzr=r(FOt,"FlaxRobertaForMaskedLM"),FOt.forEach(t),jzr=r(HOe," (RoBERTa model)"),HOe.forEach(t),Dzr=i(we),ew=n(we,"LI",{});var UOe=s(ew);R5e=n(UOe,"STRONG",{});var TOt=s(R5e);Gzr=r(TOt,"roformer"),TOt.forEach(t),Ozr=r(UOe," \u2014 "),Yee=n(UOe,"A",{href:!0});var MOt=s(Yee);Vzr=r(MOt,"FlaxRoFormerForMaskedLM"),MOt.forEach(t),Xzr=r(UOe," (RoFormer model)"),UOe.forEach(t),zzr=i(we),ow=n(we,"LI",{});var JOe=s(ow);P5e=n(JOe,"STRONG",{});var EOt=s(P5e);Qzr=r(EOt,"t5"),EOt.forEach(t),Wzr=r(JOe," \u2014 "),Kee=n(JOe,"A",{href:!0});var COt=s(Kee);Hzr=r(COt,"FlaxT5ForConditionalGeneration"),COt.forEach(t),Uzr=r(JOe," (T5 model)"),JOe.forEach(t),Jzr=i(we),rw=n(we,"LI",{});var YOe=s(rw);B5e=n(YOe,"STRONG",{});var wOt=s(B5e);Yzr=r(wOt,"wav2vec2"),wOt.forEach(t),Kzr=r(YOe," \u2014 "),Zee=n(YOe,"A",{href:!0});var AOt=s(Zee);Zzr=r(AOt,"FlaxWav2Vec2ForPreTraining"),AOt.forEach(t),eQr=r(YOe," (Wav2Vec2 model)"),YOe.forEach(t),oQr=i(we),tw=n(we,"LI",{});var KOe=s(tw);I5e=n(KOe,"STRONG",{});var LOt=s(I5e);rQr=r(LOt,"xlm-roberta"),LOt.forEach(t),tQr=r(KOe," \u2014 "),eoe=n(KOe,"A",{href:!0});var yOt=s(eoe);aQr=r(yOt,"FlaxXLMRobertaForMaskedLM"),yOt.forEach(t),nQr=r(KOe," (XLM-RoBERTa model)"),KOe.forEach(t),we.forEach(t),sQr=i(ii),T(aw.$$.fragment,ii),ii.forEach(t),li.forEach(t),Qze=i(f),tf=n(f,"H2",{class:!0});var oHe=s(tf);nw=n(oHe,"A",{id:!0,class:!0,href:!0});var xOt=s(nw);N5e=n(xOt,"SPAN",{});var $Ot=s(N5e);T(C$.$$.fragment,$Ot),$Ot.forEach(t),xOt.forEach(t),lQr=i(oHe),q5e=n(oHe,"SPAN",{});var kOt=s(q5e);iQr=r(kOt,"FlaxAutoModelForMaskedLM"),kOt.forEach(t),oHe.forEach(t),Wze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(w$.$$.fragment,di),dQr=i(di),af=n(di,"P",{});var cae=s(af);cQr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ooe=n(cae,"A",{href:!0});var SOt=s(ooe);fQr=r(SOt,"from_pretrained()"),SOt.forEach(t),mQr=r(cae," class method or the "),roe=n(cae,"A",{href:!0});var ROt=s(roe);gQr=r(ROt,"from_config()"),ROt.forEach(t),hQr=r(cae,` class
method.`),cae.forEach(t),pQr=i(di),A$=n(di,"P",{});var rHe=s(A$);_Qr=r(rHe,"This class cannot be instantiated directly using "),j5e=n(rHe,"CODE",{});var POt=s(j5e);uQr=r(POt,"__init__()"),POt.forEach(t),bQr=r(rHe," (throws an error)."),rHe.forEach(t),vQr=i(di),Jt=n(di,"DIV",{class:!0});var q7=s(Jt);T(L$.$$.fragment,q7),FQr=i(q7),D5e=n(q7,"P",{});var BOt=s(D5e);TQr=r(BOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BOt.forEach(t),MQr=i(q7),nf=n(q7,"P",{});var fae=s(nf);EQr=r(fae,`Note:
Loading a model from its configuration file does `),G5e=n(fae,"STRONG",{});var IOt=s(G5e);CQr=r(IOt,"not"),IOt.forEach(t),wQr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(fae,"A",{href:!0});var NOt=s(toe);AQr=r(NOt,"from_pretrained()"),NOt.forEach(t),LQr=r(fae," to load the model weights."),fae.forEach(t),yQr=i(q7),T(sw.$$.fragment,q7),q7.forEach(t),xQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(y$.$$.fragment,ci),$Qr=i(ci),O5e=n(ci,"P",{});var qOt=s(O5e);kQr=r(qOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qOt.forEach(t),SQr=i(ci),Cn=n(ci,"P",{});var j7=s(Cn);RQr=r(j7,"The model class to instantiate is selected based on the "),V5e=n(j7,"CODE",{});var jOt=s(V5e);PQr=r(jOt,"model_type"),jOt.forEach(t),BQr=r(j7,` property of the config object (either
passed as an argument or loaded from `),X5e=n(j7,"CODE",{});var DOt=s(X5e);IQr=r(DOt,"pretrained_model_name_or_path"),DOt.forEach(t),NQr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(j7,"CODE",{});var GOt=s(z5e);qQr=r(GOt,"pretrained_model_name_or_path"),GOt.forEach(t),jQr=r(j7,":"),j7.forEach(t),DQr=i(ci),$e=n(ci,"UL",{});var qe=s($e);lw=n(qe,"LI",{});var ZOe=s(lw);Q5e=n(ZOe,"STRONG",{});var OOt=s(Q5e);GQr=r(OOt,"albert"),OOt.forEach(t),OQr=r(ZOe," \u2014 "),aoe=n(ZOe,"A",{href:!0});var VOt=s(aoe);VQr=r(VOt,"FlaxAlbertForMaskedLM"),VOt.forEach(t),XQr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),zQr=i(qe),iw=n(qe,"LI",{});var eVe=s(iw);W5e=n(eVe,"STRONG",{});var XOt=s(W5e);QQr=r(XOt,"bart"),XOt.forEach(t),WQr=r(eVe," \u2014 "),noe=n(eVe,"A",{href:!0});var zOt=s(noe);HQr=r(zOt,"FlaxBartForConditionalGeneration"),zOt.forEach(t),UQr=r(eVe," (BART model)"),eVe.forEach(t),JQr=i(qe),dw=n(qe,"LI",{});var oVe=s(dw);H5e=n(oVe,"STRONG",{});var QOt=s(H5e);YQr=r(QOt,"bert"),QOt.forEach(t),KQr=r(oVe," \u2014 "),soe=n(oVe,"A",{href:!0});var WOt=s(soe);ZQr=r(WOt,"FlaxBertForMaskedLM"),WOt.forEach(t),eWr=r(oVe," (BERT model)"),oVe.forEach(t),oWr=i(qe),cw=n(qe,"LI",{});var rVe=s(cw);U5e=n(rVe,"STRONG",{});var HOt=s(U5e);rWr=r(HOt,"big_bird"),HOt.forEach(t),tWr=r(rVe," \u2014 "),loe=n(rVe,"A",{href:!0});var UOt=s(loe);aWr=r(UOt,"FlaxBigBirdForMaskedLM"),UOt.forEach(t),nWr=r(rVe," (BigBird model)"),rVe.forEach(t),sWr=i(qe),fw=n(qe,"LI",{});var tVe=s(fw);J5e=n(tVe,"STRONG",{});var JOt=s(J5e);lWr=r(JOt,"distilbert"),JOt.forEach(t),iWr=r(tVe," \u2014 "),ioe=n(tVe,"A",{href:!0});var YOt=s(ioe);dWr=r(YOt,"FlaxDistilBertForMaskedLM"),YOt.forEach(t),cWr=r(tVe," (DistilBERT model)"),tVe.forEach(t),fWr=i(qe),mw=n(qe,"LI",{});var aVe=s(mw);Y5e=n(aVe,"STRONG",{});var KOt=s(Y5e);mWr=r(KOt,"electra"),KOt.forEach(t),gWr=r(aVe," \u2014 "),doe=n(aVe,"A",{href:!0});var ZOt=s(doe);hWr=r(ZOt,"FlaxElectraForMaskedLM"),ZOt.forEach(t),pWr=r(aVe," (ELECTRA model)"),aVe.forEach(t),_Wr=i(qe),gw=n(qe,"LI",{});var nVe=s(gw);K5e=n(nVe,"STRONG",{});var eVt=s(K5e);uWr=r(eVt,"mbart"),eVt.forEach(t),bWr=r(nVe," \u2014 "),coe=n(nVe,"A",{href:!0});var oVt=s(coe);vWr=r(oVt,"FlaxMBartForConditionalGeneration"),oVt.forEach(t),FWr=r(nVe," (mBART model)"),nVe.forEach(t),TWr=i(qe),hw=n(qe,"LI",{});var sVe=s(hw);Z5e=n(sVe,"STRONG",{});var rVt=s(Z5e);MWr=r(rVt,"roberta"),rVt.forEach(t),EWr=r(sVe," \u2014 "),foe=n(sVe,"A",{href:!0});var tVt=s(foe);CWr=r(tVt,"FlaxRobertaForMaskedLM"),tVt.forEach(t),wWr=r(sVe," (RoBERTa model)"),sVe.forEach(t),AWr=i(qe),pw=n(qe,"LI",{});var lVe=s(pw);ewe=n(lVe,"STRONG",{});var aVt=s(ewe);LWr=r(aVt,"roformer"),aVt.forEach(t),yWr=r(lVe," \u2014 "),moe=n(lVe,"A",{href:!0});var nVt=s(moe);xWr=r(nVt,"FlaxRoFormerForMaskedLM"),nVt.forEach(t),$Wr=r(lVe," (RoFormer model)"),lVe.forEach(t),kWr=i(qe),_w=n(qe,"LI",{});var iVe=s(_w);owe=n(iVe,"STRONG",{});var sVt=s(owe);SWr=r(sVt,"xlm-roberta"),sVt.forEach(t),RWr=r(iVe," \u2014 "),goe=n(iVe,"A",{href:!0});var lVt=s(goe);PWr=r(lVt,"FlaxXLMRobertaForMaskedLM"),lVt.forEach(t),BWr=r(iVe," (XLM-RoBERTa model)"),iVe.forEach(t),qe.forEach(t),IWr=i(ci),T(uw.$$.fragment,ci),ci.forEach(t),di.forEach(t),Hze=i(f),sf=n(f,"H2",{class:!0});var tHe=s(sf);bw=n(tHe,"A",{id:!0,class:!0,href:!0});var iVt=s(bw);rwe=n(iVt,"SPAN",{});var dVt=s(rwe);T(x$.$$.fragment,dVt),dVt.forEach(t),iVt.forEach(t),NWr=i(tHe),twe=n(tHe,"SPAN",{});var cVt=s(twe);qWr=r(cVt,"FlaxAutoModelForSeq2SeqLM"),cVt.forEach(t),tHe.forEach(t),Uze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T($$.$$.fragment,fi),jWr=i(fi),lf=n(fi,"P",{});var mae=s(lf);DWr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=n(mae,"A",{href:!0});var fVt=s(hoe);GWr=r(fVt,"from_pretrained()"),fVt.forEach(t),OWr=r(mae," class method or the "),poe=n(mae,"A",{href:!0});var mVt=s(poe);VWr=r(mVt,"from_config()"),mVt.forEach(t),XWr=r(mae,` class
method.`),mae.forEach(t),zWr=i(fi),k$=n(fi,"P",{});var aHe=s(k$);QWr=r(aHe,"This class cannot be instantiated directly using "),awe=n(aHe,"CODE",{});var gVt=s(awe);WWr=r(gVt,"__init__()"),gVt.forEach(t),HWr=r(aHe," (throws an error)."),aHe.forEach(t),UWr=i(fi),Yt=n(fi,"DIV",{class:!0});var D7=s(Yt);T(S$.$$.fragment,D7),JWr=i(D7),nwe=n(D7,"P",{});var hVt=s(nwe);YWr=r(hVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hVt.forEach(t),KWr=i(D7),df=n(D7,"P",{});var gae=s(df);ZWr=r(gae,`Note:
Loading a model from its configuration file does `),swe=n(gae,"STRONG",{});var pVt=s(swe);eHr=r(pVt,"not"),pVt.forEach(t),oHr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(gae,"A",{href:!0});var _Vt=s(_oe);rHr=r(_Vt,"from_pretrained()"),_Vt.forEach(t),tHr=r(gae," to load the model weights."),gae.forEach(t),aHr=i(D7),T(vw.$$.fragment,D7),D7.forEach(t),nHr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(R$.$$.fragment,mi),sHr=i(mi),lwe=n(mi,"P",{});var uVt=s(lwe);lHr=r(uVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uVt.forEach(t),iHr=i(mi),wn=n(mi,"P",{});var G7=s(wn);dHr=r(G7,"The model class to instantiate is selected based on the "),iwe=n(G7,"CODE",{});var bVt=s(iwe);cHr=r(bVt,"model_type"),bVt.forEach(t),fHr=r(G7,` property of the config object (either
passed as an argument or loaded from `),dwe=n(G7,"CODE",{});var vVt=s(dwe);mHr=r(vVt,"pretrained_model_name_or_path"),vVt.forEach(t),gHr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=n(G7,"CODE",{});var FVt=s(cwe);hHr=r(FVt,"pretrained_model_name_or_path"),FVt.forEach(t),pHr=r(G7,":"),G7.forEach(t),_Hr=i(mi),ke=n(mi,"UL",{});var je=s(ke);Fw=n(je,"LI",{});var dVe=s(Fw);fwe=n(dVe,"STRONG",{});var TVt=s(fwe);uHr=r(TVt,"bart"),TVt.forEach(t),bHr=r(dVe," \u2014 "),uoe=n(dVe,"A",{href:!0});var MVt=s(uoe);vHr=r(MVt,"FlaxBartForConditionalGeneration"),MVt.forEach(t),FHr=r(dVe," (BART model)"),dVe.forEach(t),THr=i(je),Tw=n(je,"LI",{});var cVe=s(Tw);mwe=n(cVe,"STRONG",{});var EVt=s(mwe);MHr=r(EVt,"blenderbot"),EVt.forEach(t),EHr=r(cVe," \u2014 "),boe=n(cVe,"A",{href:!0});var CVt=s(boe);CHr=r(CVt,"FlaxBlenderbotForConditionalGeneration"),CVt.forEach(t),wHr=r(cVe," (Blenderbot model)"),cVe.forEach(t),AHr=i(je),Mw=n(je,"LI",{});var fVe=s(Mw);gwe=n(fVe,"STRONG",{});var wVt=s(gwe);LHr=r(wVt,"blenderbot-small"),wVt.forEach(t),yHr=r(fVe," \u2014 "),voe=n(fVe,"A",{href:!0});var AVt=s(voe);xHr=r(AVt,"FlaxBlenderbotSmallForConditionalGeneration"),AVt.forEach(t),$Hr=r(fVe," (BlenderbotSmall model)"),fVe.forEach(t),kHr=i(je),Ew=n(je,"LI",{});var mVe=s(Ew);hwe=n(mVe,"STRONG",{});var LVt=s(hwe);SHr=r(LVt,"encoder-decoder"),LVt.forEach(t),RHr=r(mVe," \u2014 "),Foe=n(mVe,"A",{href:!0});var yVt=s(Foe);PHr=r(yVt,"FlaxEncoderDecoderModel"),yVt.forEach(t),BHr=r(mVe," (Encoder decoder model)"),mVe.forEach(t),IHr=i(je),Cw=n(je,"LI",{});var gVe=s(Cw);pwe=n(gVe,"STRONG",{});var xVt=s(pwe);NHr=r(xVt,"longt5"),xVt.forEach(t),qHr=r(gVe," \u2014 "),Toe=n(gVe,"A",{href:!0});var $Vt=s(Toe);jHr=r($Vt,"FlaxLongT5ForConditionalGeneration"),$Vt.forEach(t),DHr=r(gVe," (LongT5 model)"),gVe.forEach(t),GHr=i(je),ww=n(je,"LI",{});var hVe=s(ww);_we=n(hVe,"STRONG",{});var kVt=s(_we);OHr=r(kVt,"marian"),kVt.forEach(t),VHr=r(hVe," \u2014 "),Moe=n(hVe,"A",{href:!0});var SVt=s(Moe);XHr=r(SVt,"FlaxMarianMTModel"),SVt.forEach(t),zHr=r(hVe," (Marian model)"),hVe.forEach(t),QHr=i(je),Aw=n(je,"LI",{});var pVe=s(Aw);uwe=n(pVe,"STRONG",{});var RVt=s(uwe);WHr=r(RVt,"mbart"),RVt.forEach(t),HHr=r(pVe," \u2014 "),Eoe=n(pVe,"A",{href:!0});var PVt=s(Eoe);UHr=r(PVt,"FlaxMBartForConditionalGeneration"),PVt.forEach(t),JHr=r(pVe," (mBART model)"),pVe.forEach(t),YHr=i(je),Lw=n(je,"LI",{});var _Ve=s(Lw);bwe=n(_Ve,"STRONG",{});var BVt=s(bwe);KHr=r(BVt,"mt5"),BVt.forEach(t),ZHr=r(_Ve," \u2014 "),Coe=n(_Ve,"A",{href:!0});var IVt=s(Coe);eUr=r(IVt,"FlaxMT5ForConditionalGeneration"),IVt.forEach(t),oUr=r(_Ve," (MT5 model)"),_Ve.forEach(t),rUr=i(je),yw=n(je,"LI",{});var uVe=s(yw);vwe=n(uVe,"STRONG",{});var NVt=s(vwe);tUr=r(NVt,"pegasus"),NVt.forEach(t),aUr=r(uVe," \u2014 "),woe=n(uVe,"A",{href:!0});var qVt=s(woe);nUr=r(qVt,"FlaxPegasusForConditionalGeneration"),qVt.forEach(t),sUr=r(uVe," (Pegasus model)"),uVe.forEach(t),lUr=i(je),xw=n(je,"LI",{});var bVe=s(xw);Fwe=n(bVe,"STRONG",{});var jVt=s(Fwe);iUr=r(jVt,"t5"),jVt.forEach(t),dUr=r(bVe," \u2014 "),Aoe=n(bVe,"A",{href:!0});var DVt=s(Aoe);cUr=r(DVt,"FlaxT5ForConditionalGeneration"),DVt.forEach(t),fUr=r(bVe," (T5 model)"),bVe.forEach(t),je.forEach(t),mUr=i(mi),T($w.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Jze=i(f),cf=n(f,"H2",{class:!0});var nHe=s(cf);kw=n(nHe,"A",{id:!0,class:!0,href:!0});var GVt=s(kw);Twe=n(GVt,"SPAN",{});var OVt=s(Twe);T(P$.$$.fragment,OVt),OVt.forEach(t),GVt.forEach(t),gUr=i(nHe),Mwe=n(nHe,"SPAN",{});var VVt=s(Mwe);hUr=r(VVt,"FlaxAutoModelForSequenceClassification"),VVt.forEach(t),nHe.forEach(t),Yze=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(B$.$$.fragment,gi),pUr=i(gi),ff=n(gi,"P",{});var hae=s(ff);_Ur=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=n(hae,"A",{href:!0});var XVt=s(Loe);uUr=r(XVt,"from_pretrained()"),XVt.forEach(t),bUr=r(hae," class method or the "),yoe=n(hae,"A",{href:!0});var zVt=s(yoe);vUr=r(zVt,"from_config()"),zVt.forEach(t),FUr=r(hae,` class
method.`),hae.forEach(t),TUr=i(gi),I$=n(gi,"P",{});var sHe=s(I$);MUr=r(sHe,"This class cannot be instantiated directly using "),Ewe=n(sHe,"CODE",{});var QVt=s(Ewe);EUr=r(QVt,"__init__()"),QVt.forEach(t),CUr=r(sHe," (throws an error)."),sHe.forEach(t),wUr=i(gi),Kt=n(gi,"DIV",{class:!0});var O7=s(Kt);T(N$.$$.fragment,O7),AUr=i(O7),Cwe=n(O7,"P",{});var WVt=s(Cwe);LUr=r(WVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WVt.forEach(t),yUr=i(O7),mf=n(O7,"P",{});var pae=s(mf);xUr=r(pae,`Note:
Loading a model from its configuration file does `),wwe=n(pae,"STRONG",{});var HVt=s(wwe);$Ur=r(HVt,"not"),HVt.forEach(t),kUr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(pae,"A",{href:!0});var UVt=s(xoe);SUr=r(UVt,"from_pretrained()"),UVt.forEach(t),RUr=r(pae," to load the model weights."),pae.forEach(t),PUr=i(O7),T(Sw.$$.fragment,O7),O7.forEach(t),BUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(q$.$$.fragment,hi),IUr=i(hi),Awe=n(hi,"P",{});var JVt=s(Awe);NUr=r(JVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JVt.forEach(t),qUr=i(hi),An=n(hi,"P",{});var V7=s(An);jUr=r(V7,"The model class to instantiate is selected based on the "),Lwe=n(V7,"CODE",{});var YVt=s(Lwe);DUr=r(YVt,"model_type"),YVt.forEach(t),GUr=r(V7,` property of the config object (either
passed as an argument or loaded from `),ywe=n(V7,"CODE",{});var KVt=s(ywe);OUr=r(KVt,"pretrained_model_name_or_path"),KVt.forEach(t),VUr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=n(V7,"CODE",{});var ZVt=s(xwe);XUr=r(ZVt,"pretrained_model_name_or_path"),ZVt.forEach(t),zUr=r(V7,":"),V7.forEach(t),QUr=i(hi),Se=n(hi,"UL",{});var De=s(Se);Rw=n(De,"LI",{});var vVe=s(Rw);$we=n(vVe,"STRONG",{});var eXt=s($we);WUr=r(eXt,"albert"),eXt.forEach(t),HUr=r(vVe," \u2014 "),$oe=n(vVe,"A",{href:!0});var oXt=s($oe);UUr=r(oXt,"FlaxAlbertForSequenceClassification"),oXt.forEach(t),JUr=r(vVe," (ALBERT model)"),vVe.forEach(t),YUr=i(De),Pw=n(De,"LI",{});var FVe=s(Pw);kwe=n(FVe,"STRONG",{});var rXt=s(kwe);KUr=r(rXt,"bart"),rXt.forEach(t),ZUr=r(FVe," \u2014 "),koe=n(FVe,"A",{href:!0});var tXt=s(koe);eJr=r(tXt,"FlaxBartForSequenceClassification"),tXt.forEach(t),oJr=r(FVe," (BART model)"),FVe.forEach(t),rJr=i(De),Bw=n(De,"LI",{});var TVe=s(Bw);Swe=n(TVe,"STRONG",{});var aXt=s(Swe);tJr=r(aXt,"bert"),aXt.forEach(t),aJr=r(TVe," \u2014 "),Soe=n(TVe,"A",{href:!0});var nXt=s(Soe);nJr=r(nXt,"FlaxBertForSequenceClassification"),nXt.forEach(t),sJr=r(TVe," (BERT model)"),TVe.forEach(t),lJr=i(De),Iw=n(De,"LI",{});var MVe=s(Iw);Rwe=n(MVe,"STRONG",{});var sXt=s(Rwe);iJr=r(sXt,"big_bird"),sXt.forEach(t),dJr=r(MVe," \u2014 "),Roe=n(MVe,"A",{href:!0});var lXt=s(Roe);cJr=r(lXt,"FlaxBigBirdForSequenceClassification"),lXt.forEach(t),fJr=r(MVe," (BigBird model)"),MVe.forEach(t),mJr=i(De),Nw=n(De,"LI",{});var EVe=s(Nw);Pwe=n(EVe,"STRONG",{});var iXt=s(Pwe);gJr=r(iXt,"distilbert"),iXt.forEach(t),hJr=r(EVe," \u2014 "),Poe=n(EVe,"A",{href:!0});var dXt=s(Poe);pJr=r(dXt,"FlaxDistilBertForSequenceClassification"),dXt.forEach(t),_Jr=r(EVe," (DistilBERT model)"),EVe.forEach(t),uJr=i(De),qw=n(De,"LI",{});var CVe=s(qw);Bwe=n(CVe,"STRONG",{});var cXt=s(Bwe);bJr=r(cXt,"electra"),cXt.forEach(t),vJr=r(CVe," \u2014 "),Boe=n(CVe,"A",{href:!0});var fXt=s(Boe);FJr=r(fXt,"FlaxElectraForSequenceClassification"),fXt.forEach(t),TJr=r(CVe," (ELECTRA model)"),CVe.forEach(t),MJr=i(De),jw=n(De,"LI",{});var wVe=s(jw);Iwe=n(wVe,"STRONG",{});var mXt=s(Iwe);EJr=r(mXt,"mbart"),mXt.forEach(t),CJr=r(wVe," \u2014 "),Ioe=n(wVe,"A",{href:!0});var gXt=s(Ioe);wJr=r(gXt,"FlaxMBartForSequenceClassification"),gXt.forEach(t),AJr=r(wVe," (mBART model)"),wVe.forEach(t),LJr=i(De),Dw=n(De,"LI",{});var AVe=s(Dw);Nwe=n(AVe,"STRONG",{});var hXt=s(Nwe);yJr=r(hXt,"roberta"),hXt.forEach(t),xJr=r(AVe," \u2014 "),Noe=n(AVe,"A",{href:!0});var pXt=s(Noe);$Jr=r(pXt,"FlaxRobertaForSequenceClassification"),pXt.forEach(t),kJr=r(AVe," (RoBERTa model)"),AVe.forEach(t),SJr=i(De),Gw=n(De,"LI",{});var LVe=s(Gw);qwe=n(LVe,"STRONG",{});var _Xt=s(qwe);RJr=r(_Xt,"roformer"),_Xt.forEach(t),PJr=r(LVe," \u2014 "),qoe=n(LVe,"A",{href:!0});var uXt=s(qoe);BJr=r(uXt,"FlaxRoFormerForSequenceClassification"),uXt.forEach(t),IJr=r(LVe," (RoFormer model)"),LVe.forEach(t),NJr=i(De),Ow=n(De,"LI",{});var yVe=s(Ow);jwe=n(yVe,"STRONG",{});var bXt=s(jwe);qJr=r(bXt,"xlm-roberta"),bXt.forEach(t),jJr=r(yVe," \u2014 "),joe=n(yVe,"A",{href:!0});var vXt=s(joe);DJr=r(vXt,"FlaxXLMRobertaForSequenceClassification"),vXt.forEach(t),GJr=r(yVe," (XLM-RoBERTa model)"),yVe.forEach(t),De.forEach(t),OJr=i(hi),T(Vw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Kze=i(f),gf=n(f,"H2",{class:!0});var lHe=s(gf);Xw=n(lHe,"A",{id:!0,class:!0,href:!0});var FXt=s(Xw);Dwe=n(FXt,"SPAN",{});var TXt=s(Dwe);T(j$.$$.fragment,TXt),TXt.forEach(t),FXt.forEach(t),VJr=i(lHe),Gwe=n(lHe,"SPAN",{});var MXt=s(Gwe);XJr=r(MXt,"FlaxAutoModelForQuestionAnswering"),MXt.forEach(t),lHe.forEach(t),Zze=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(D$.$$.fragment,pi),zJr=i(pi),hf=n(pi,"P",{});var _ae=s(hf);QJr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Doe=n(_ae,"A",{href:!0});var EXt=s(Doe);WJr=r(EXt,"from_pretrained()"),EXt.forEach(t),HJr=r(_ae," class method or the "),Goe=n(_ae,"A",{href:!0});var CXt=s(Goe);UJr=r(CXt,"from_config()"),CXt.forEach(t),JJr=r(_ae,` class
method.`),_ae.forEach(t),YJr=i(pi),G$=n(pi,"P",{});var iHe=s(G$);KJr=r(iHe,"This class cannot be instantiated directly using "),Owe=n(iHe,"CODE",{});var wXt=s(Owe);ZJr=r(wXt,"__init__()"),wXt.forEach(t),eYr=r(iHe," (throws an error)."),iHe.forEach(t),oYr=i(pi),Zt=n(pi,"DIV",{class:!0});var X7=s(Zt);T(O$.$$.fragment,X7),rYr=i(X7),Vwe=n(X7,"P",{});var AXt=s(Vwe);tYr=r(AXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AXt.forEach(t),aYr=i(X7),pf=n(X7,"P",{});var uae=s(pf);nYr=r(uae,`Note:
Loading a model from its configuration file does `),Xwe=n(uae,"STRONG",{});var LXt=s(Xwe);sYr=r(LXt,"not"),LXt.forEach(t),lYr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(uae,"A",{href:!0});var yXt=s(Ooe);iYr=r(yXt,"from_pretrained()"),yXt.forEach(t),dYr=r(uae," to load the model weights."),uae.forEach(t),cYr=i(X7),T(zw.$$.fragment,X7),X7.forEach(t),fYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(V$.$$.fragment,_i),mYr=i(_i),zwe=n(_i,"P",{});var xXt=s(zwe);gYr=r(xXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xXt.forEach(t),hYr=i(_i),Ln=n(_i,"P",{});var z7=s(Ln);pYr=r(z7,"The model class to instantiate is selected based on the "),Qwe=n(z7,"CODE",{});var $Xt=s(Qwe);_Yr=r($Xt,"model_type"),$Xt.forEach(t),uYr=r(z7,` property of the config object (either
passed as an argument or loaded from `),Wwe=n(z7,"CODE",{});var kXt=s(Wwe);bYr=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),vYr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hwe=n(z7,"CODE",{});var SXt=s(Hwe);FYr=r(SXt,"pretrained_model_name_or_path"),SXt.forEach(t),TYr=r(z7,":"),z7.forEach(t),MYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);Qw=n(Ge,"LI",{});var xVe=s(Qw);Uwe=n(xVe,"STRONG",{});var RXt=s(Uwe);EYr=r(RXt,"albert"),RXt.forEach(t),CYr=r(xVe," \u2014 "),Voe=n(xVe,"A",{href:!0});var PXt=s(Voe);wYr=r(PXt,"FlaxAlbertForQuestionAnswering"),PXt.forEach(t),AYr=r(xVe," (ALBERT model)"),xVe.forEach(t),LYr=i(Ge),Ww=n(Ge,"LI",{});var $Ve=s(Ww);Jwe=n($Ve,"STRONG",{});var BXt=s(Jwe);yYr=r(BXt,"bart"),BXt.forEach(t),xYr=r($Ve," \u2014 "),Xoe=n($Ve,"A",{href:!0});var IXt=s(Xoe);$Yr=r(IXt,"FlaxBartForQuestionAnswering"),IXt.forEach(t),kYr=r($Ve," (BART model)"),$Ve.forEach(t),SYr=i(Ge),Hw=n(Ge,"LI",{});var kVe=s(Hw);Ywe=n(kVe,"STRONG",{});var NXt=s(Ywe);RYr=r(NXt,"bert"),NXt.forEach(t),PYr=r(kVe," \u2014 "),zoe=n(kVe,"A",{href:!0});var qXt=s(zoe);BYr=r(qXt,"FlaxBertForQuestionAnswering"),qXt.forEach(t),IYr=r(kVe," (BERT model)"),kVe.forEach(t),NYr=i(Ge),Uw=n(Ge,"LI",{});var SVe=s(Uw);Kwe=n(SVe,"STRONG",{});var jXt=s(Kwe);qYr=r(jXt,"big_bird"),jXt.forEach(t),jYr=r(SVe," \u2014 "),Qoe=n(SVe,"A",{href:!0});var DXt=s(Qoe);DYr=r(DXt,"FlaxBigBirdForQuestionAnswering"),DXt.forEach(t),GYr=r(SVe," (BigBird model)"),SVe.forEach(t),OYr=i(Ge),Jw=n(Ge,"LI",{});var RVe=s(Jw);Zwe=n(RVe,"STRONG",{});var GXt=s(Zwe);VYr=r(GXt,"distilbert"),GXt.forEach(t),XYr=r(RVe," \u2014 "),Woe=n(RVe,"A",{href:!0});var OXt=s(Woe);zYr=r(OXt,"FlaxDistilBertForQuestionAnswering"),OXt.forEach(t),QYr=r(RVe," (DistilBERT model)"),RVe.forEach(t),WYr=i(Ge),Yw=n(Ge,"LI",{});var PVe=s(Yw);eAe=n(PVe,"STRONG",{});var VXt=s(eAe);HYr=r(VXt,"electra"),VXt.forEach(t),UYr=r(PVe," \u2014 "),Hoe=n(PVe,"A",{href:!0});var XXt=s(Hoe);JYr=r(XXt,"FlaxElectraForQuestionAnswering"),XXt.forEach(t),YYr=r(PVe," (ELECTRA model)"),PVe.forEach(t),KYr=i(Ge),Kw=n(Ge,"LI",{});var BVe=s(Kw);oAe=n(BVe,"STRONG",{});var zXt=s(oAe);ZYr=r(zXt,"mbart"),zXt.forEach(t),eKr=r(BVe," \u2014 "),Uoe=n(BVe,"A",{href:!0});var QXt=s(Uoe);oKr=r(QXt,"FlaxMBartForQuestionAnswering"),QXt.forEach(t),rKr=r(BVe," (mBART model)"),BVe.forEach(t),tKr=i(Ge),Zw=n(Ge,"LI",{});var IVe=s(Zw);rAe=n(IVe,"STRONG",{});var WXt=s(rAe);aKr=r(WXt,"roberta"),WXt.forEach(t),nKr=r(IVe," \u2014 "),Joe=n(IVe,"A",{href:!0});var HXt=s(Joe);sKr=r(HXt,"FlaxRobertaForQuestionAnswering"),HXt.forEach(t),lKr=r(IVe," (RoBERTa model)"),IVe.forEach(t),iKr=i(Ge),eA=n(Ge,"LI",{});var NVe=s(eA);tAe=n(NVe,"STRONG",{});var UXt=s(tAe);dKr=r(UXt,"roformer"),UXt.forEach(t),cKr=r(NVe," \u2014 "),Yoe=n(NVe,"A",{href:!0});var JXt=s(Yoe);fKr=r(JXt,"FlaxRoFormerForQuestionAnswering"),JXt.forEach(t),mKr=r(NVe," (RoFormer model)"),NVe.forEach(t),gKr=i(Ge),oA=n(Ge,"LI",{});var qVe=s(oA);aAe=n(qVe,"STRONG",{});var YXt=s(aAe);hKr=r(YXt,"xlm-roberta"),YXt.forEach(t),pKr=r(qVe," \u2014 "),Koe=n(qVe,"A",{href:!0});var KXt=s(Koe);_Kr=r(KXt,"FlaxXLMRobertaForQuestionAnswering"),KXt.forEach(t),uKr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),Ge.forEach(t),bKr=i(_i),T(rA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),eQe=i(f),_f=n(f,"H2",{class:!0});var dHe=s(_f);tA=n(dHe,"A",{id:!0,class:!0,href:!0});var ZXt=s(tA);nAe=n(ZXt,"SPAN",{});var ezt=s(nAe);T(X$.$$.fragment,ezt),ezt.forEach(t),ZXt.forEach(t),vKr=i(dHe),sAe=n(dHe,"SPAN",{});var ozt=s(sAe);FKr=r(ozt,"FlaxAutoModelForTokenClassification"),ozt.forEach(t),dHe.forEach(t),oQe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(z$.$$.fragment,ui),TKr=i(ui),uf=n(ui,"P",{});var bae=s(uf);MKr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Zoe=n(bae,"A",{href:!0});var rzt=s(Zoe);EKr=r(rzt,"from_pretrained()"),rzt.forEach(t),CKr=r(bae," class method or the "),ere=n(bae,"A",{href:!0});var tzt=s(ere);wKr=r(tzt,"from_config()"),tzt.forEach(t),AKr=r(bae,` class
method.`),bae.forEach(t),LKr=i(ui),Q$=n(ui,"P",{});var cHe=s(Q$);yKr=r(cHe,"This class cannot be instantiated directly using "),lAe=n(cHe,"CODE",{});var azt=s(lAe);xKr=r(azt,"__init__()"),azt.forEach(t),$Kr=r(cHe," (throws an error)."),cHe.forEach(t),kKr=i(ui),ea=n(ui,"DIV",{class:!0});var Q7=s(ea);T(W$.$$.fragment,Q7),SKr=i(Q7),iAe=n(Q7,"P",{});var nzt=s(iAe);RKr=r(nzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nzt.forEach(t),PKr=i(Q7),bf=n(Q7,"P",{});var vae=s(bf);BKr=r(vae,`Note:
Loading a model from its configuration file does `),dAe=n(vae,"STRONG",{});var szt=s(dAe);IKr=r(szt,"not"),szt.forEach(t),NKr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(vae,"A",{href:!0});var lzt=s(ore);qKr=r(lzt,"from_pretrained()"),lzt.forEach(t),jKr=r(vae," to load the model weights."),vae.forEach(t),DKr=i(Q7),T(aA.$$.fragment,Q7),Q7.forEach(t),GKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(H$.$$.fragment,bi),OKr=i(bi),cAe=n(bi,"P",{});var izt=s(cAe);VKr=r(izt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),izt.forEach(t),XKr=i(bi),yn=n(bi,"P",{});var W7=s(yn);zKr=r(W7,"The model class to instantiate is selected based on the "),fAe=n(W7,"CODE",{});var dzt=s(fAe);QKr=r(dzt,"model_type"),dzt.forEach(t),WKr=r(W7,` property of the config object (either
passed as an argument or loaded from `),mAe=n(W7,"CODE",{});var czt=s(mAe);HKr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),UKr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=n(W7,"CODE",{});var fzt=s(gAe);JKr=r(fzt,"pretrained_model_name_or_path"),fzt.forEach(t),YKr=r(W7,":"),W7.forEach(t),KKr=i(bi),Ve=n(bi,"UL",{});var Mo=s(Ve);nA=n(Mo,"LI",{});var jVe=s(nA);hAe=n(jVe,"STRONG",{});var mzt=s(hAe);ZKr=r(mzt,"albert"),mzt.forEach(t),eZr=r(jVe," \u2014 "),rre=n(jVe,"A",{href:!0});var gzt=s(rre);oZr=r(gzt,"FlaxAlbertForTokenClassification"),gzt.forEach(t),rZr=r(jVe," (ALBERT model)"),jVe.forEach(t),tZr=i(Mo),sA=n(Mo,"LI",{});var DVe=s(sA);pAe=n(DVe,"STRONG",{});var hzt=s(pAe);aZr=r(hzt,"bert"),hzt.forEach(t),nZr=r(DVe," \u2014 "),tre=n(DVe,"A",{href:!0});var pzt=s(tre);sZr=r(pzt,"FlaxBertForTokenClassification"),pzt.forEach(t),lZr=r(DVe," (BERT model)"),DVe.forEach(t),iZr=i(Mo),lA=n(Mo,"LI",{});var GVe=s(lA);_Ae=n(GVe,"STRONG",{});var _zt=s(_Ae);dZr=r(_zt,"big_bird"),_zt.forEach(t),cZr=r(GVe," \u2014 "),are=n(GVe,"A",{href:!0});var uzt=s(are);fZr=r(uzt,"FlaxBigBirdForTokenClassification"),uzt.forEach(t),mZr=r(GVe," (BigBird model)"),GVe.forEach(t),gZr=i(Mo),iA=n(Mo,"LI",{});var OVe=s(iA);uAe=n(OVe,"STRONG",{});var bzt=s(uAe);hZr=r(bzt,"distilbert"),bzt.forEach(t),pZr=r(OVe," \u2014 "),nre=n(OVe,"A",{href:!0});var vzt=s(nre);_Zr=r(vzt,"FlaxDistilBertForTokenClassification"),vzt.forEach(t),uZr=r(OVe," (DistilBERT model)"),OVe.forEach(t),bZr=i(Mo),dA=n(Mo,"LI",{});var VVe=s(dA);bAe=n(VVe,"STRONG",{});var Fzt=s(bAe);vZr=r(Fzt,"electra"),Fzt.forEach(t),FZr=r(VVe," \u2014 "),sre=n(VVe,"A",{href:!0});var Tzt=s(sre);TZr=r(Tzt,"FlaxElectraForTokenClassification"),Tzt.forEach(t),MZr=r(VVe," (ELECTRA model)"),VVe.forEach(t),EZr=i(Mo),cA=n(Mo,"LI",{});var XVe=s(cA);vAe=n(XVe,"STRONG",{});var Mzt=s(vAe);CZr=r(Mzt,"roberta"),Mzt.forEach(t),wZr=r(XVe," \u2014 "),lre=n(XVe,"A",{href:!0});var Ezt=s(lre);AZr=r(Ezt,"FlaxRobertaForTokenClassification"),Ezt.forEach(t),LZr=r(XVe," (RoBERTa model)"),XVe.forEach(t),yZr=i(Mo),fA=n(Mo,"LI",{});var zVe=s(fA);FAe=n(zVe,"STRONG",{});var Czt=s(FAe);xZr=r(Czt,"roformer"),Czt.forEach(t),$Zr=r(zVe," \u2014 "),ire=n(zVe,"A",{href:!0});var wzt=s(ire);kZr=r(wzt,"FlaxRoFormerForTokenClassification"),wzt.forEach(t),SZr=r(zVe," (RoFormer model)"),zVe.forEach(t),RZr=i(Mo),mA=n(Mo,"LI",{});var QVe=s(mA);TAe=n(QVe,"STRONG",{});var Azt=s(TAe);PZr=r(Azt,"xlm-roberta"),Azt.forEach(t),BZr=r(QVe," \u2014 "),dre=n(QVe,"A",{href:!0});var Lzt=s(dre);IZr=r(Lzt,"FlaxXLMRobertaForTokenClassification"),Lzt.forEach(t),NZr=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),Mo.forEach(t),qZr=i(bi),T(gA.$$.fragment,bi),bi.forEach(t),ui.forEach(t),rQe=i(f),vf=n(f,"H2",{class:!0});var fHe=s(vf);hA=n(fHe,"A",{id:!0,class:!0,href:!0});var yzt=s(hA);MAe=n(yzt,"SPAN",{});var xzt=s(MAe);T(U$.$$.fragment,xzt),xzt.forEach(t),yzt.forEach(t),jZr=i(fHe),EAe=n(fHe,"SPAN",{});var $zt=s(EAe);DZr=r($zt,"FlaxAutoModelForMultipleChoice"),$zt.forEach(t),fHe.forEach(t),tQe=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(J$.$$.fragment,vi),GZr=i(vi),Ff=n(vi,"P",{});var Fae=s(Ff);OZr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cre=n(Fae,"A",{href:!0});var kzt=s(cre);VZr=r(kzt,"from_pretrained()"),kzt.forEach(t),XZr=r(Fae," class method or the "),fre=n(Fae,"A",{href:!0});var Szt=s(fre);zZr=r(Szt,"from_config()"),Szt.forEach(t),QZr=r(Fae,` class
method.`),Fae.forEach(t),WZr=i(vi),Y$=n(vi,"P",{});var mHe=s(Y$);HZr=r(mHe,"This class cannot be instantiated directly using "),CAe=n(mHe,"CODE",{});var Rzt=s(CAe);UZr=r(Rzt,"__init__()"),Rzt.forEach(t),JZr=r(mHe," (throws an error)."),mHe.forEach(t),YZr=i(vi),oa=n(vi,"DIV",{class:!0});var H7=s(oa);T(K$.$$.fragment,H7),KZr=i(H7),wAe=n(H7,"P",{});var Pzt=s(wAe);ZZr=r(Pzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pzt.forEach(t),eet=i(H7),Tf=n(H7,"P",{});var Tae=s(Tf);oet=r(Tae,`Note:
Loading a model from its configuration file does `),AAe=n(Tae,"STRONG",{});var Bzt=s(AAe);ret=r(Bzt,"not"),Bzt.forEach(t),tet=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(Tae,"A",{href:!0});var Izt=s(mre);aet=r(Izt,"from_pretrained()"),Izt.forEach(t),net=r(Tae," to load the model weights."),Tae.forEach(t),set=i(H7),T(pA.$$.fragment,H7),H7.forEach(t),iet=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(Z$.$$.fragment,Fi),det=i(Fi),LAe=n(Fi,"P",{});var Nzt=s(LAe);cet=r(Nzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nzt.forEach(t),fet=i(Fi),xn=n(Fi,"P",{});var U7=s(xn);met=r(U7,"The model class to instantiate is selected based on the "),yAe=n(U7,"CODE",{});var qzt=s(yAe);get=r(qzt,"model_type"),qzt.forEach(t),het=r(U7,` property of the config object (either
passed as an argument or loaded from `),xAe=n(U7,"CODE",{});var jzt=s(xAe);pet=r(jzt,"pretrained_model_name_or_path"),jzt.forEach(t),_et=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ae=n(U7,"CODE",{});var Dzt=s($Ae);uet=r(Dzt,"pretrained_model_name_or_path"),Dzt.forEach(t),bet=r(U7,":"),U7.forEach(t),vet=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);_A=n(Eo,"LI",{});var WVe=s(_A);kAe=n(WVe,"STRONG",{});var Gzt=s(kAe);Fet=r(Gzt,"albert"),Gzt.forEach(t),Tet=r(WVe," \u2014 "),gre=n(WVe,"A",{href:!0});var Ozt=s(gre);Met=r(Ozt,"FlaxAlbertForMultipleChoice"),Ozt.forEach(t),Eet=r(WVe," (ALBERT model)"),WVe.forEach(t),Cet=i(Eo),uA=n(Eo,"LI",{});var HVe=s(uA);SAe=n(HVe,"STRONG",{});var Vzt=s(SAe);wet=r(Vzt,"bert"),Vzt.forEach(t),Aet=r(HVe," \u2014 "),hre=n(HVe,"A",{href:!0});var Xzt=s(hre);Let=r(Xzt,"FlaxBertForMultipleChoice"),Xzt.forEach(t),yet=r(HVe," (BERT model)"),HVe.forEach(t),xet=i(Eo),bA=n(Eo,"LI",{});var UVe=s(bA);RAe=n(UVe,"STRONG",{});var zzt=s(RAe);$et=r(zzt,"big_bird"),zzt.forEach(t),ket=r(UVe," \u2014 "),pre=n(UVe,"A",{href:!0});var Qzt=s(pre);Set=r(Qzt,"FlaxBigBirdForMultipleChoice"),Qzt.forEach(t),Ret=r(UVe," (BigBird model)"),UVe.forEach(t),Pet=i(Eo),vA=n(Eo,"LI",{});var JVe=s(vA);PAe=n(JVe,"STRONG",{});var Wzt=s(PAe);Bet=r(Wzt,"distilbert"),Wzt.forEach(t),Iet=r(JVe," \u2014 "),_re=n(JVe,"A",{href:!0});var Hzt=s(_re);Net=r(Hzt,"FlaxDistilBertForMultipleChoice"),Hzt.forEach(t),qet=r(JVe," (DistilBERT model)"),JVe.forEach(t),jet=i(Eo),FA=n(Eo,"LI",{});var YVe=s(FA);BAe=n(YVe,"STRONG",{});var Uzt=s(BAe);Det=r(Uzt,"electra"),Uzt.forEach(t),Get=r(YVe," \u2014 "),ure=n(YVe,"A",{href:!0});var Jzt=s(ure);Oet=r(Jzt,"FlaxElectraForMultipleChoice"),Jzt.forEach(t),Vet=r(YVe," (ELECTRA model)"),YVe.forEach(t),Xet=i(Eo),TA=n(Eo,"LI",{});var KVe=s(TA);IAe=n(KVe,"STRONG",{});var Yzt=s(IAe);zet=r(Yzt,"roberta"),Yzt.forEach(t),Qet=r(KVe," \u2014 "),bre=n(KVe,"A",{href:!0});var Kzt=s(bre);Wet=r(Kzt,"FlaxRobertaForMultipleChoice"),Kzt.forEach(t),Het=r(KVe," (RoBERTa model)"),KVe.forEach(t),Uet=i(Eo),MA=n(Eo,"LI",{});var ZVe=s(MA);NAe=n(ZVe,"STRONG",{});var Zzt=s(NAe);Jet=r(Zzt,"roformer"),Zzt.forEach(t),Yet=r(ZVe," \u2014 "),vre=n(ZVe,"A",{href:!0});var eQt=s(vre);Ket=r(eQt,"FlaxRoFormerForMultipleChoice"),eQt.forEach(t),Zet=r(ZVe," (RoFormer model)"),ZVe.forEach(t),eot=i(Eo),EA=n(Eo,"LI",{});var eXe=s(EA);qAe=n(eXe,"STRONG",{});var oQt=s(qAe);oot=r(oQt,"xlm-roberta"),oQt.forEach(t),rot=r(eXe," \u2014 "),Fre=n(eXe,"A",{href:!0});var rQt=s(Fre);tot=r(rQt,"FlaxXLMRobertaForMultipleChoice"),rQt.forEach(t),aot=r(eXe," (XLM-RoBERTa model)"),eXe.forEach(t),Eo.forEach(t),not=i(Fi),T(CA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),aQe=i(f),Mf=n(f,"H2",{class:!0});var gHe=s(Mf);wA=n(gHe,"A",{id:!0,class:!0,href:!0});var tQt=s(wA);jAe=n(tQt,"SPAN",{});var aQt=s(jAe);T(ek.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),sot=i(gHe),DAe=n(gHe,"SPAN",{});var nQt=s(DAe);lot=r(nQt,"FlaxAutoModelForNextSentencePrediction"),nQt.forEach(t),gHe.forEach(t),nQe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(ok.$$.fragment,Ti),iot=i(Ti),Ef=n(Ti,"P",{});var Mae=s(Ef);dot=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tre=n(Mae,"A",{href:!0});var sQt=s(Tre);cot=r(sQt,"from_pretrained()"),sQt.forEach(t),fot=r(Mae," class method or the "),Mre=n(Mae,"A",{href:!0});var lQt=s(Mre);mot=r(lQt,"from_config()"),lQt.forEach(t),got=r(Mae,` class
method.`),Mae.forEach(t),hot=i(Ti),rk=n(Ti,"P",{});var hHe=s(rk);pot=r(hHe,"This class cannot be instantiated directly using "),GAe=n(hHe,"CODE",{});var iQt=s(GAe);_ot=r(iQt,"__init__()"),iQt.forEach(t),uot=r(hHe," (throws an error)."),hHe.forEach(t),bot=i(Ti),ra=n(Ti,"DIV",{class:!0});var J7=s(ra);T(tk.$$.fragment,J7),vot=i(J7),OAe=n(J7,"P",{});var dQt=s(OAe);Fot=r(dQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dQt.forEach(t),Tot=i(J7),Cf=n(J7,"P",{});var Eae=s(Cf);Mot=r(Eae,`Note:
Loading a model from its configuration file does `),VAe=n(Eae,"STRONG",{});var cQt=s(VAe);Eot=r(cQt,"not"),cQt.forEach(t),Cot=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Eae,"A",{href:!0});var fQt=s(Ere);wot=r(fQt,"from_pretrained()"),fQt.forEach(t),Aot=r(Eae," to load the model weights."),Eae.forEach(t),Lot=i(J7),T(AA.$$.fragment,J7),J7.forEach(t),yot=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(ak.$$.fragment,Mi),xot=i(Mi),XAe=n(Mi,"P",{});var mQt=s(XAe);$ot=r(mQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mQt.forEach(t),kot=i(Mi),$n=n(Mi,"P",{});var Y7=s($n);Sot=r(Y7,"The model class to instantiate is selected based on the "),zAe=n(Y7,"CODE",{});var gQt=s(zAe);Rot=r(gQt,"model_type"),gQt.forEach(t),Pot=r(Y7,` property of the config object (either
passed as an argument or loaded from `),QAe=n(Y7,"CODE",{});var hQt=s(QAe);Bot=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),Iot=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WAe=n(Y7,"CODE",{});var pQt=s(WAe);Not=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),qot=r(Y7,":"),Y7.forEach(t),jot=i(Mi),HAe=n(Mi,"UL",{});var _Qt=s(HAe);LA=n(_Qt,"LI",{});var oXe=s(LA);UAe=n(oXe,"STRONG",{});var uQt=s(UAe);Dot=r(uQt,"bert"),uQt.forEach(t),Got=r(oXe," \u2014 "),Cre=n(oXe,"A",{href:!0});var bQt=s(Cre);Oot=r(bQt,"FlaxBertForNextSentencePrediction"),bQt.forEach(t),Vot=r(oXe," (BERT model)"),oXe.forEach(t),_Qt.forEach(t),Xot=i(Mi),T(yA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),sQe=i(f),wf=n(f,"H2",{class:!0});var pHe=s(wf);xA=n(pHe,"A",{id:!0,class:!0,href:!0});var vQt=s(xA);JAe=n(vQt,"SPAN",{});var FQt=s(JAe);T(nk.$$.fragment,FQt),FQt.forEach(t),vQt.forEach(t),zot=i(pHe),YAe=n(pHe,"SPAN",{});var TQt=s(YAe);Qot=r(TQt,"FlaxAutoModelForImageClassification"),TQt.forEach(t),pHe.forEach(t),lQe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(sk.$$.fragment,Ei),Wot=i(Ei),Af=n(Ei,"P",{});var Cae=s(Af);Hot=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wre=n(Cae,"A",{href:!0});var MQt=s(wre);Uot=r(MQt,"from_pretrained()"),MQt.forEach(t),Jot=r(Cae," class method or the "),Are=n(Cae,"A",{href:!0});var EQt=s(Are);Yot=r(EQt,"from_config()"),EQt.forEach(t),Kot=r(Cae,` class
method.`),Cae.forEach(t),Zot=i(Ei),lk=n(Ei,"P",{});var _He=s(lk);ert=r(_He,"This class cannot be instantiated directly using "),KAe=n(_He,"CODE",{});var CQt=s(KAe);ort=r(CQt,"__init__()"),CQt.forEach(t),rrt=r(_He," (throws an error)."),_He.forEach(t),trt=i(Ei),ta=n(Ei,"DIV",{class:!0});var K7=s(ta);T(ik.$$.fragment,K7),art=i(K7),ZAe=n(K7,"P",{});var wQt=s(ZAe);nrt=r(wQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wQt.forEach(t),srt=i(K7),Lf=n(K7,"P",{});var wae=s(Lf);lrt=r(wae,`Note:
Loading a model from its configuration file does `),e6e=n(wae,"STRONG",{});var AQt=s(e6e);irt=r(AQt,"not"),AQt.forEach(t),drt=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(wae,"A",{href:!0});var LQt=s(Lre);crt=r(LQt,"from_pretrained()"),LQt.forEach(t),frt=r(wae," to load the model weights."),wae.forEach(t),mrt=i(K7),T($A.$$.fragment,K7),K7.forEach(t),grt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(dk.$$.fragment,Ci),hrt=i(Ci),o6e=n(Ci,"P",{});var yQt=s(o6e);prt=r(yQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yQt.forEach(t),_rt=i(Ci),kn=n(Ci,"P",{});var Z7=s(kn);urt=r(Z7,"The model class to instantiate is selected based on the "),r6e=n(Z7,"CODE",{});var xQt=s(r6e);brt=r(xQt,"model_type"),xQt.forEach(t),vrt=r(Z7,` property of the config object (either
passed as an argument or loaded from `),t6e=n(Z7,"CODE",{});var $Qt=s(t6e);Frt=r($Qt,"pretrained_model_name_or_path"),$Qt.forEach(t),Trt=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(Z7,"CODE",{});var kQt=s(a6e);Mrt=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),Ert=r(Z7,":"),Z7.forEach(t),Crt=i(Ci),ck=n(Ci,"UL",{});var uHe=s(ck);kA=n(uHe,"LI",{});var rXe=s(kA);n6e=n(rXe,"STRONG",{});var SQt=s(n6e);wrt=r(SQt,"beit"),SQt.forEach(t),Art=r(rXe," \u2014 "),yre=n(rXe,"A",{href:!0});var RQt=s(yre);Lrt=r(RQt,"FlaxBeitForImageClassification"),RQt.forEach(t),yrt=r(rXe," (BEiT model)"),rXe.forEach(t),xrt=i(uHe),SA=n(uHe,"LI",{});var tXe=s(SA);s6e=n(tXe,"STRONG",{});var PQt=s(s6e);$rt=r(PQt,"vit"),PQt.forEach(t),krt=r(tXe," \u2014 "),xre=n(tXe,"A",{href:!0});var BQt=s(xre);Srt=r(BQt,"FlaxViTForImageClassification"),BQt.forEach(t),Rrt=r(tXe," (ViT model)"),tXe.forEach(t),uHe.forEach(t),Prt=i(Ci),T(RA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),iQe=i(f),yf=n(f,"H2",{class:!0});var bHe=s(yf);PA=n(bHe,"A",{id:!0,class:!0,href:!0});var IQt=s(PA);l6e=n(IQt,"SPAN",{});var NQt=s(l6e);T(fk.$$.fragment,NQt),NQt.forEach(t),IQt.forEach(t),Brt=i(bHe),i6e=n(bHe,"SPAN",{});var qQt=s(i6e);Irt=r(qQt,"FlaxAutoModelForVision2Seq"),qQt.forEach(t),bHe.forEach(t),dQe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(mk.$$.fragment,wi),Nrt=i(wi),xf=n(wi,"P",{});var Aae=s(xf);qrt=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$re=n(Aae,"A",{href:!0});var jQt=s($re);jrt=r(jQt,"from_pretrained()"),jQt.forEach(t),Drt=r(Aae," class method or the "),kre=n(Aae,"A",{href:!0});var DQt=s(kre);Grt=r(DQt,"from_config()"),DQt.forEach(t),Ort=r(Aae,` class
method.`),Aae.forEach(t),Vrt=i(wi),gk=n(wi,"P",{});var vHe=s(gk);Xrt=r(vHe,"This class cannot be instantiated directly using "),d6e=n(vHe,"CODE",{});var GQt=s(d6e);zrt=r(GQt,"__init__()"),GQt.forEach(t),Qrt=r(vHe," (throws an error)."),vHe.forEach(t),Wrt=i(wi),aa=n(wi,"DIV",{class:!0});var eL=s(aa);T(hk.$$.fragment,eL),Hrt=i(eL),c6e=n(eL,"P",{});var OQt=s(c6e);Urt=r(OQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OQt.forEach(t),Jrt=i(eL),$f=n(eL,"P",{});var Lae=s($f);Yrt=r(Lae,`Note:
Loading a model from its configuration file does `),f6e=n(Lae,"STRONG",{});var VQt=s(f6e);Krt=r(VQt,"not"),VQt.forEach(t),Zrt=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Lae,"A",{href:!0});var XQt=s(Sre);ett=r(XQt,"from_pretrained()"),XQt.forEach(t),ott=r(Lae," to load the model weights."),Lae.forEach(t),rtt=i(eL),T(BA.$$.fragment,eL),eL.forEach(t),ttt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(pk.$$.fragment,Ai),att=i(Ai),m6e=n(Ai,"P",{});var zQt=s(m6e);ntt=r(zQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zQt.forEach(t),stt=i(Ai),Sn=n(Ai,"P",{});var oL=s(Sn);ltt=r(oL,"The model class to instantiate is selected based on the "),g6e=n(oL,"CODE",{});var QQt=s(g6e);itt=r(QQt,"model_type"),QQt.forEach(t),dtt=r(oL,` property of the config object (either
passed as an argument or loaded from `),h6e=n(oL,"CODE",{});var WQt=s(h6e);ctt=r(WQt,"pretrained_model_name_or_path"),WQt.forEach(t),ftt=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(oL,"CODE",{});var HQt=s(p6e);mtt=r(HQt,"pretrained_model_name_or_path"),HQt.forEach(t),gtt=r(oL,":"),oL.forEach(t),htt=i(Ai),_6e=n(Ai,"UL",{});var UQt=s(_6e);IA=n(UQt,"LI",{});var aXe=s(IA);u6e=n(aXe,"STRONG",{});var JQt=s(u6e);ptt=r(JQt,"vision-encoder-decoder"),JQt.forEach(t),_tt=r(aXe," \u2014 "),Rre=n(aXe,"A",{href:!0});var YQt=s(Rre);utt=r(YQt,"FlaxVisionEncoderDecoderModel"),YQt.forEach(t),btt=r(aXe," (Vision Encoder decoder model)"),aXe.forEach(t),UQt.forEach(t),vtt=i(Ai),T(NA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(tUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(VS,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(XS,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertConfig"),c(zS,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartConfig"),c(QS,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitConfig"),c(WS,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertConfig"),c(HS,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(US,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdConfig"),c(JS,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(YS,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(KS,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ZS,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomConfig"),c(eR,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertConfig"),c(oR,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineConfig"),c(rR,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPConfig"),c(tR,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenConfig"),c(aR,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertConfig"),c(nR,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextConfig"),c(sR,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLConfig"),c(lR,"href","/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtConfig"),c(iR,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(dR,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(cR,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(fR,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaConfig"),c(mR,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(gR,"href","/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(hR,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTConfig"),c(pR,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrConfig"),c(_R,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uR,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRConfig"),c(bR,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTConfig"),c(vR,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraConfig"),c(FR,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(TR,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertConfig"),c(MR,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaConfig"),c(ER,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetConfig"),c(CR,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTConfig"),c(wR,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelConfig"),c(AR,"href","/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNConfig"),c(LR,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Config"),c(yR,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(xR,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c($R,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJConfig"),c(kR,"href","/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTConfig"),c(SR,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertConfig"),c(RR,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertConfig"),c(PR,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(BR,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(IR,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(NR,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(qR,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDConfig"),c(jR,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitConfig"),c(DR,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerConfig"),c(GR,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Config"),c(OR,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeConfig"),c(VR,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertConfig"),c(XR,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Config"),c(zR,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianConfig"),c(QR,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(WR,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartConfig"),c(HR,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTConfig"),c(UR,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(JR,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(YR,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(KR,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetConfig"),c(ZR,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Config"),c(eP,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpConfig"),c(oP,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaConfig"),c(rP,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tP,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aP,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTConfig"),c(nP,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusConfig"),c(sP,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lP,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartConfig"),c(iP,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dP,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cP,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fP,"href","/docs/transformers/pr_18022/en/model_doc/rag#transformers.RagConfig"),c(mP,"href","/docs/transformers/pr_18022/en/model_doc/realm#transformers.RealmConfig"),c(gP,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerConfig"),c(hP,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetConfig"),c(pP,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertConfig"),c(_P,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetConfig"),c(uP,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertConfig"),c(bP,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaConfig"),c(vP,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerConfig"),c(FP,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerConfig"),c(TP,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWConfig"),c(MP,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDConfig"),c(EP,"href","/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CP,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wP,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AP,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterConfig"),c(LP,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yP,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinConfig"),c(xP,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Config"),c($P,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasConfig"),c(kP,"href","/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(SP,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(RP,"href","/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRConfig"),c(PP,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BP,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(IP,"href","/docs/transformers/pr_18022/en/model_doc/van#transformers.VanConfig"),c(NP,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltConfig"),c(qP,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(jP,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(DP,"href","/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(GP,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTConfig"),c(OP,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(VP,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(XP,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(zP,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMConfig"),c(QP,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMConfig"),c(WP,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMConfig"),c(HP,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(UP,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(JP,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(YP,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetConfig"),c(KP,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosConfig"),c(ZP,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(eB,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(oB,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartTokenizer"),c(aB,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartTokenizerFast"),c(nB,"href","/docs/transformers/pr_18022/en/model_doc/barthez#transformers.BarthezTokenizer"),c(sB,"href","/docs/transformers/pr_18022/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(lB,"href","/docs/transformers/pr_18022/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(iB,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(fB,"href","/docs/transformers/pr_18022/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(mB,"href","/docs/transformers/pr_18022/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(gB,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(hB,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(pB,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_B,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uB,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(bB,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(vB,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(FB,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(TB,"href","/docs/transformers/pr_18022/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MB,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertTokenizer"),c(EB,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CB,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineTokenizer"),c(wB,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizer"),c(AB,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(LB,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(yB,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(xB,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertTokenizer"),c($B,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_18022/en/model_doc/cpm#transformers.CpmTokenizer"),c(SB,"href","/docs/transformers/pr_18022/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(RB,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PB,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NB,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(jB,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(DB,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(GB,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(OB,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(VB,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(XB,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraTokenizer"),c(zB,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QB,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WB,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetTokenizer"),c(HB,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(JB,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelTokenizer"),c(YB,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(KB,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rI,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(tI,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nI,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizer"),c(sI,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lI,"href","/docs/transformers/pr_18022/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iI,"href","/docs/transformers/pr_18022/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dI,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cI,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fI,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mI,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gI,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hI,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pI,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_I,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uI,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(bI,"href","/docs/transformers/pr_18022/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vI,"href","/docs/transformers/pr_18022/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FI,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDTokenizer"),c(TI,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDTokenizerFast"),c(MI,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EI,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CI,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Tokenizer"),c(wI,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5TokenizerFast"),c(AI,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeTokenizer"),c(LI,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yI,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(xI,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c($I,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianTokenizer"),c(kI,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartTokenizer"),c(SI,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(RI,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(PI,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(BI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_18022/en/model_doc/mluke#transformers.MLukeTokenizer"),c(qI,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(jI,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(DI,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(GI,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(OI,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Tokenizer"),c(VI,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5TokenizerFast"),c(XI,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpTokenizer"),c(zI,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(QI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(HI,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizer"),c(UI,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JI,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YI,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KI,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZI,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eN,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oN,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rN,"href","/docs/transformers/pr_18022/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tN,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aN,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_18022/en/model_doc/rag#transformers.RagTokenizer"),c(iN,"href","/docs/transformers/pr_18022/en/model_doc/realm#transformers.RealmTokenizer"),c(dN,"href","/docs/transformers/pr_18022/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cN,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fN,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mN,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gN,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pN,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_N,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uN,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vN,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FN,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TN,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MN,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EN,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CN,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wN,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AN,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Tokenizer"),c(LN,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5TokenizerFast"),c(yN,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasTokenizer"),c(xN,"href","/docs/transformers/pr_18022/en/model_doc/tapex#transformers.TapexTokenizer"),c($N,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizer"),c(PN,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertTokenizerFast"),c(BN,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NN,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qN,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jN,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DN,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMTokenizer"),c(GN,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ON,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VN,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XN,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zN,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QN,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WN,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HN,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizer"),c(UN,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(JN,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YN,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KN,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rq,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cq,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(mq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(gq,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($q,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoProcessor"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(kq,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Sq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPProcessor"),c(Rq,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPProcessor"),c(Pq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Bq,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Iq,"href","/docs/transformers/pr_18022/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Nq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Dq,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Gq,"href","/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Oq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltProcessor"),c(zq,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Qq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"id","transformers.AutoModel"),c(Gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gp,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Uq,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jq,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yq,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kq,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertModel"),c(Zq,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartModel"),c(ej,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitModel"),c(oj,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertModel"),c(rj,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tj,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdModel"),c(aj,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nj,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sj,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lj,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomModel"),c(ij,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertModel"),c(dj,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineModel"),c(cj,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.CLIPModel"),c(fj,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenModel"),c(mj,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertModel"),c(gj,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextModel"),c(hj,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLModel"),c(pj,"href","/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtModel"),c(_j,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uj,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bj,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vj,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaModel"),c(Fj,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Tj,"href","/docs/transformers/pr_18022/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Mj,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTModel"),c(Ej,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrModel"),c(Cj,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertModel"),c(wj,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Aj,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTModel"),c(Lj,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraModel"),c(yj,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertModel"),c(xj,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaModel"),c($j,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetModel"),c(kj,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTModel"),c(Sj,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelModel"),c(Rj,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Pj,"href","/docs/transformers/pr_18022/en/model_doc/glpn#transformers.GLPNModel"),c(Bj,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2Model"),c(Ij,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Nj,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(qj,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJModel"),c(jj,"href","/docs/transformers/pr_18022/en/model_doc/groupvit#transformers.GroupViTModel"),c(Dj,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertModel"),c(Gj,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertModel"),c(Oj,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Vj,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Xj,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zj,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Qj,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDModel"),c(Wj,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitModel"),c(Hj,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerModel"),c(Uj,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5Model"),c(Jj,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeModel"),c(Yj,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertModel"),c(Kj,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100Model"),c(Zj,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianModel"),c(eD,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oD,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartModel"),c(rD,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTModel"),c(tD,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aD,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nD,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTModel"),c(sD,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetModel"),c(lD,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5Model"),c(iD,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpModel"),c(dD,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaModel"),c(cD,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fD,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mD,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTModel"),c(gD,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusModel"),c(hD,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverModel"),c(pD,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartModel"),c(_D,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uD,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(bD,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertModel"),c(vD,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModel"),c(FD,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetModel"),c(TD,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertModel"),c(MD,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetModel"),c(ED,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel"),c(CD,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaModel"),c(wD,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerModel"),c(AD,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerModel"),c(LD,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWModel"),c(yD,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDModel"),c(xD,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c($D,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterModel"),c(kD,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SD,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinModel"),c(RD,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5Model"),c(PD,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasModel"),c(BD,"href","/docs/transformers/pr_18022/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(ID,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(ND,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechModel"),c(qD,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(jD,"href","/docs/transformers/pr_18022/en/model_doc/van#transformers.VanModel"),c(DD,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltModel"),c(GD,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(OD,"href","/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertModel"),c(VD,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTModel"),c(XD,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zD,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(QD,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(WD,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMModel"),c(HD,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMModel"),c(UD,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMModel"),c(JD,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(YD,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(KD,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(ZD,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetModel"),c(eG,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosModel"),c(oG,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wu,"id","transformers.AutoModelForPreTraining"),c(Wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(rG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForPreTraining"),c(sG,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForPreTraining"),c(iG,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(dG,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM"),c(cG,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fG,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mG,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gG,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hG,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pG,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uG,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_18022/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vG,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForPreTraining"),c(FG,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(MG,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EG,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CG,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wG,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AG,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(LG,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(yG,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xG,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($G,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(SG,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RG,"href","/docs/transformers/pr_18022/en/model_doc/retribert#transformers.RetriBertModel"),c(PG,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BG,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IG,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NG,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jG,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DG,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GG,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(OG,"href","/docs/transformers/pr_18022/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VG,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XG,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zG,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(QG,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WG,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HG,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UG,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForCausalLM"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(JG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForCausalLM"),c(eO,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertLMHeadModel"),c(oO,"href","/docs/transformers/pr_18022/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rO,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tO,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aO,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nO,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sO,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lO,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(iO,"href","/docs/transformers/pr_18022/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(dO,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cO,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(fO,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForCausalLM"),c(mO,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gO,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(hO,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(pO,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(_O,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianForCausalLM"),c(uO,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForCausalLM"),c(bO,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(vO,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForCausalLM"),c(FO,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TO,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.OPTForCausalLM"),c(MO,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(EO,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(CO,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(wO,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(AO,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(LO,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(yO,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(xO,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c($O,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(kO,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SO,"href","/docs/transformers/pr_18022/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(RO,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(PO,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(IO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(NO,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(qO,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S1,"id","transformers.AutoModelForMaskedLM"),c(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S1,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(jO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(VO,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMaskedLM"),c(zO,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(QO,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(WO,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UO,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(JO,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(YO,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(KO,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eV,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oV,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rV,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aV,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nV,"href","/docs/transformers/pr_18022/en/model_doc/luke#transformers.LukeForMaskedLM"),c(sV,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cV,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(mV,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gV,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hV,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(_V,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bV,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vV,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FV,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TV,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MV,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(EV,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(CV,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fb,"id","transformers.AutoModelForSeq2SeqLM"),c(Fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(wV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($V,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(RV,"href","/docs/transformers/pr_18022/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18022/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.MarianMTModel"),c(qV,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18022/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_18022/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(QV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForSequenceClassification"),c(YV,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(eX,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(oX,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c($X,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18022/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForMultipleChoice"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(zX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YX,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(az,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.AutoModelForNextSentencePrediction"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(Cz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.AutoModelForTokenClassification"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Nz,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForTokenClassification"),c(qz,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(jz,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Dz,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Gz,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Oz,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zz,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForQuestionAnswering"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_18022/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_18022/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(BQ,"href","/docs/transformers/pr_18022/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18022/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18022/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18022/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18022/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18022/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18022/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18022/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18022/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18022/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iW,"href","/docs/transformers/pr_18022/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForTableQuestionAnswering"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(dW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForImageClassification"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(gW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForImageClassification"),c(uW,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bW,"href","/docs/transformers/pr_18022/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vW,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FW,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TW,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_18022/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EW,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassification"),c(CW,"href","/docs/transformers/pr_18022/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wW,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(AW,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LW,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yW,"href","/docs/transformers/pr_18022/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xW,"href","/docs/transformers/pr_18022/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($W,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kW,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SW,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RW,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForImageClassification"),c(PW,"href","/docs/transformers/pr_18022/en/model_doc/van#transformers.VanForImageClassification"),c(BW,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVision2Seq"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(IW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(DW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_18022/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForAudioClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(XW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HW,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YW,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KW,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(eH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o8,"id","transformers.AutoModelForAudioFrameClassification"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(rH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.AutoModelForCTC"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(cH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hH,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.HubertForCTC"),c(pH,"href","/docs/transformers/pr_18022/en/model_doc/mctct#transformers.MCTCTForCTC"),c(_H,"href","/docs/transformers/pr_18022/en/model_doc/sew#transformers.SEWForCTC"),c(uH,"href","/docs/transformers/pr_18022/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(MH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c(EH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_18022/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(LH,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($8,"id","transformers.AutoModelForAudioXVector"),c($8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($8,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(yH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(SH,"href","/docs/transformers/pr_18022/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(RH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(PH,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(BH,"href","/docs/transformers/pr_18022/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j8,"id","transformers.AutoModelForMaskedImageModeling"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(IH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(DH,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(GH,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q8,"id","transformers.AutoModelForObjectDetection"),c(Q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q8,"href","#transformers.AutoModelForObjectDetection"),c(Hd,"class","relative group"),c(OH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForObjectDetection"),c(QH,"href","/docs/transformers/pr_18022/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K8,"id","transformers.AutoModelForImageSegmentation"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(WH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_18022/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.AutoModelForSemanticSegmentation"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(YH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(rU,"href","/docs/transformers/pr_18022/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_18022/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_18022/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.AutoModelForInstanceSegmentation"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(nU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_18022/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModel"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(dU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertModel"),c(gU,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartModel"),c(hU,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertModel"),c(pU,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_U,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uU,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertModel"),c(bU,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.TFCLIPModel"),c(vU,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertModel"),c(FU,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextModel"),c(TU,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MU,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EU,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaModel"),c(CU,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wU,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTModel"),c(AU,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LU,"href","/docs/transformers/pr_18022/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yU,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraModel"),c(xU,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($U,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelModel"),c(kU,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(SU,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2Model"),c(RU,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJModel"),c(PU,"href","/docs/transformers/pr_18022/en/model_doc/hubert#transformers.TFHubertModel"),c(BU,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(IU,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDModel"),c(NU,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerModel"),c(qU,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jU,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianModel"),c(DU,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartModel"),c(GU,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(OU,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetModel"),c(VU,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5Model"),c(XU,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zU,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTModel"),c(QU,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusModel"),c(WU,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetModel"),c(HU,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertModel"),c(UU,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetModel"),c(JU,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaModel"),c(YU,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KU,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ZU,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinModel"),c(eJ,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5Model"),c(oJ,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasModel"),c(rJ,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tJ,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTModel"),c(aJ,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nJ,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMModel"),c(lJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iJ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForPreTraining"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gJ,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForPreTraining"),c(pJ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_J,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uJ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vJ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FJ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(TJ,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MJ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EJ,"href","/docs/transformers/pr_18022/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(CJ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wJ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AJ,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LJ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($J,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kJ,"href","/docs/transformers/pr_18022/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(SJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForCausalLM"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(DJ,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GJ,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OJ,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(VJ,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XJ,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(zJ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QJ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WJ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HJ,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UJ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JJ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForImageClassification"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18022/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(oY,"href","/docs/transformers/pr_18022/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(rY,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(tY,"href","/docs/transformers/pr_18022/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(aY,"href","/docs/transformers/pr_18022/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(nY,"href","/docs/transformers/pr_18022/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(sY,"href","/docs/transformers/pr_18022/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(lY,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForMaskedLM"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(iY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mY,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gY,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hY,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pY,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_Y,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uY,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vY,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FY,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TY,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MY,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EY,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wY,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LY,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yY,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xY,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Y,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(kY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qY,"href","/docs/transformers/pr_18022/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.TFMarianMTModel"),c(DY,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.TFAutoModelForSequenceClassification"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(XY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HY,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JY,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_18022/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KY,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18022/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18022/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForMultipleChoice"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(vK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yK,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($K,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(jK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(VK,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(XK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_18022/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.TFAutoModelForTokenClassification"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(HK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(KK,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ZK,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(rZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(tZ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18022/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.TFAutoModelForQuestionAnswering"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(uZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_18022/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_18022/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_18022/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18022/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(xZ,"href","/docs/transformers/pr_18022/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18022/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18022/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18022/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18022/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qZ,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18022/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.TFAutoModelForVision2Seq"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_18022/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.FlaxAutoModel"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(HZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertModel"),c(KZ,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartModel"),c(ZZ,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitModel"),c(eee,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertModel"),c(oee,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ree,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(tee,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(aee,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomModel"),c(nee,"href","/docs/transformers/pr_18022/en/model_doc/clip#transformers.FlaxCLIPModel"),c(see,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lee,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraModel"),c(iee,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dee,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cee,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(fee,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(mee,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianModel"),c(gee,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartModel"),c(hee,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5Model"),c(pee,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTModel"),c(_ee,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(uee,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(bee,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(vee,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5Model"),c(Fee,"href","/docs/transformers/pr_18022/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Tee,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTModel"),c(Mee,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Eee,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Cee,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForCausalLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(wee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(xee,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c($ee,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(kee,"href","/docs/transformers/pr_18022/en/model_doc/bloom#transformers.FlaxBloomForCausalLM"),c(See,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ree,"href","/docs/transformers/pr_18022/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Pee,"href","/docs/transformers/pr_18022/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Bee,"href","/docs/transformers/pr_18022/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Iee,"href","/docs/transformers/pr_18022/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Nee,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(qee,"href","/docs/transformers/pr_18022/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForPreTraining"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(jee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gee,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oee,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Vee,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zee,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Qee,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Wee,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Yee,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Kee,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Zee,"href","/docs/transformers/pr_18022/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(eoe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForMaskedLM"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(noe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(loe,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ioe,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(doe,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(coe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(moe,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(goe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(hoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_18022/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_18022/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Toe,"href","/docs/transformers/pr_18022/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_18022/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Eoe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_18022/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(woe,"href","/docs/transformers/pr_18022/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_18022/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(Loe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(joe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18022/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18022/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tA,"id","transformers.FlaxAutoModelForTokenClassification"),c(tA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tre,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(are,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nre,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sre,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lre,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ire,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dre,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(hA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(cre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gre,"href","/docs/transformers/pr_18022/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hre,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pre,"href","/docs/transformers/pr_18022/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_re,"href","/docs/transformers/pr_18022/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ure,"href","/docs/transformers/pr_18022/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bre,"href","/docs/transformers/pr_18022/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vre,"href","/docs/transformers/pr_18022/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_18022/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(wA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(Tre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/pr_18022/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xA,"id","transformers.FlaxAutoModelForImageClassification"),c(xA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xA,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(wre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Are,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/pr_18022/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xre,"href","/docs/transformers/pr_18022/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PA,"id","transformers.FlaxAutoModelForVision2Seq"),c(PA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c($re,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/pr_18022/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/pr_18022/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,Li),b(f,Pf,u),b(f,lt,u),e(lt,yi),e(lt,xi),e(xi,rL),e(lt,Bf),b(f,Oe,u),b(f,We,u),e(We,$i),e(We,Pn),e(Pn,tL),e(We,Bn),e(We,In),e(In,aL),e(We,ki),e(We,Nn),e(Nn,nL),e(We,Si),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Le,u),e(Le,NS),e(Le,Ri),e(Ri,qS),e(Le,jS),b(f,wo,u),b(f,Ra,u),e(Ra,DS),e(Ra,Nf),e(Nf,GS),e(Ra,FHe),b(f,nXe,u),b(f,Pi,u),e(Pi,qf),e(qf,yae),M(sL,yae,null),e(Pi,THe),e(Pi,xae),e(xae,MHe),b(f,sXe,u),b(f,qn,u),e(qn,EHe),e(qn,$ae),e($ae,CHe),e(qn,wHe),e(qn,kae),e(kae,AHe),e(qn,LHe),b(f,lXe,u),M(lL,f,u),b(f,iXe,u),b(f,OS,u),e(OS,yHe),b(f,dXe,u),M(jf,f,u),b(f,cXe,u),b(f,Bi,u),e(Bi,Df),e(Df,Sae),M(iL,Sae,null),e(Bi,xHe),e(Bi,Rae),e(Rae,$He),b(f,fXe,u),b(f,Ao,u),M(dL,Ao,null),e(Ao,kHe),e(Ao,cL),e(cL,SHe),e(cL,VS),e(VS,RHe),e(cL,PHe),e(Ao,BHe),e(Ao,fL),e(fL,IHe),e(fL,Pae),e(Pae,NHe),e(fL,qHe),e(Ao,jHe),e(Ao,Lr),M(mL,Lr,null),e(Lr,DHe),e(Lr,Bae),e(Bae,GHe),e(Lr,OHe),e(Lr,Ii),e(Ii,VHe),e(Ii,Iae),e(Iae,XHe),e(Ii,zHe),e(Ii,Nae),e(Nae,QHe),e(Ii,WHe),e(Lr,HHe),e(Lr,A),e(A,Gf),e(Gf,qae),e(qae,UHe),e(Gf,JHe),e(Gf,XS),e(XS,YHe),e(Gf,KHe),e(A,ZHe),e(A,Of),e(Of,jae),e(jae,eUe),e(Of,oUe),e(Of,zS),e(zS,rUe),e(Of,tUe),e(A,aUe),e(A,Vf),e(Vf,Dae),e(Dae,nUe),e(Vf,sUe),e(Vf,QS),e(QS,lUe),e(Vf,iUe),e(A,dUe),e(A,Xf),e(Xf,Gae),e(Gae,cUe),e(Xf,fUe),e(Xf,WS),e(WS,mUe),e(Xf,gUe),e(A,hUe),e(A,zf),e(zf,Oae),e(Oae,pUe),e(zf,_Ue),e(zf,HS),e(HS,uUe),e(zf,bUe),e(A,vUe),e(A,Qf),e(Qf,Vae),e(Vae,FUe),e(Qf,TUe),e(Qf,US),e(US,MUe),e(Qf,EUe),e(A,CUe),e(A,Wf),e(Wf,Xae),e(Xae,wUe),e(Wf,AUe),e(Wf,JS),e(JS,LUe),e(Wf,yUe),e(A,xUe),e(A,Hf),e(Hf,zae),e(zae,$Ue),e(Hf,kUe),e(Hf,YS),e(YS,SUe),e(Hf,RUe),e(A,PUe),e(A,Uf),e(Uf,Qae),e(Qae,BUe),e(Uf,IUe),e(Uf,KS),e(KS,NUe),e(Uf,qUe),e(A,jUe),e(A,Jf),e(Jf,Wae),e(Wae,DUe),e(Jf,GUe),e(Jf,ZS),e(ZS,OUe),e(Jf,VUe),e(A,XUe),e(A,Yf),e(Yf,Hae),e(Hae,zUe),e(Yf,QUe),e(Yf,eR),e(eR,WUe),e(Yf,HUe),e(A,UUe),e(A,Kf),e(Kf,Uae),e(Uae,JUe),e(Kf,YUe),e(Kf,oR),e(oR,KUe),e(Kf,ZUe),e(A,eJe),e(A,Zf),e(Zf,Jae),e(Jae,oJe),e(Zf,rJe),e(Zf,rR),e(rR,tJe),e(Zf,aJe),e(A,nJe),e(A,em),e(em,Yae),e(Yae,sJe),e(em,lJe),e(em,tR),e(tR,iJe),e(em,dJe),e(A,cJe),e(A,om),e(om,Kae),e(Kae,fJe),e(om,mJe),e(om,aR),e(aR,gJe),e(om,hJe),e(A,pJe),e(A,rm),e(rm,Zae),e(Zae,_Je),e(rm,uJe),e(rm,nR),e(nR,bJe),e(rm,vJe),e(A,FJe),e(A,tm),e(tm,ene),e(ene,TJe),e(tm,MJe),e(tm,sR),e(sR,EJe),e(tm,CJe),e(A,wJe),e(A,am),e(am,one),e(one,AJe),e(am,LJe),e(am,lR),e(lR,yJe),e(am,xJe),e(A,$Je),e(A,nm),e(nm,rne),e(rne,kJe),e(nm,SJe),e(nm,iR),e(iR,RJe),e(nm,PJe),e(A,BJe),e(A,sm),e(sm,tne),e(tne,IJe),e(sm,NJe),e(sm,dR),e(dR,qJe),e(sm,jJe),e(A,DJe),e(A,lm),e(lm,ane),e(ane,GJe),e(lm,OJe),e(lm,cR),e(cR,VJe),e(lm,XJe),e(A,zJe),e(A,im),e(im,nne),e(nne,QJe),e(im,WJe),e(im,fR),e(fR,HJe),e(im,UJe),e(A,JJe),e(A,dm),e(dm,sne),e(sne,YJe),e(dm,KJe),e(dm,mR),e(mR,ZJe),e(dm,eYe),e(A,oYe),e(A,cm),e(cm,lne),e(lne,rYe),e(cm,tYe),e(cm,gR),e(gR,aYe),e(cm,nYe),e(A,sYe),e(A,fm),e(fm,ine),e(ine,lYe),e(fm,iYe),e(fm,hR),e(hR,dYe),e(fm,cYe),e(A,fYe),e(A,mm),e(mm,dne),e(dne,mYe),e(mm,gYe),e(mm,pR),e(pR,hYe),e(mm,pYe),e(A,_Ye),e(A,gm),e(gm,cne),e(cne,uYe),e(gm,bYe),e(gm,_R),e(_R,vYe),e(gm,FYe),e(A,TYe),e(A,hm),e(hm,fne),e(fne,MYe),e(hm,EYe),e(hm,uR),e(uR,CYe),e(hm,wYe),e(A,AYe),e(A,pm),e(pm,mne),e(mne,LYe),e(pm,yYe),e(pm,bR),e(bR,xYe),e(pm,$Ye),e(A,kYe),e(A,_m),e(_m,gne),e(gne,SYe),e(_m,RYe),e(_m,vR),e(vR,PYe),e(_m,BYe),e(A,IYe),e(A,um),e(um,hne),e(hne,NYe),e(um,qYe),e(um,FR),e(FR,jYe),e(um,DYe),e(A,GYe),e(A,bm),e(bm,pne),e(pne,OYe),e(bm,VYe),e(bm,TR),e(TR,XYe),e(bm,zYe),e(A,QYe),e(A,vm),e(vm,_ne),e(_ne,WYe),e(vm,HYe),e(vm,MR),e(MR,UYe),e(vm,JYe),e(A,YYe),e(A,Fm),e(Fm,une),e(une,KYe),e(Fm,ZYe),e(Fm,ER),e(ER,eKe),e(Fm,oKe),e(A,rKe),e(A,Tm),e(Tm,bne),e(bne,tKe),e(Tm,aKe),e(Tm,CR),e(CR,nKe),e(Tm,sKe),e(A,lKe),e(A,Mm),e(Mm,vne),e(vne,iKe),e(Mm,dKe),e(Mm,wR),e(wR,cKe),e(Mm,fKe),e(A,mKe),e(A,Em),e(Em,Fne),e(Fne,gKe),e(Em,hKe),e(Em,AR),e(AR,pKe),e(Em,_Ke),e(A,uKe),e(A,Cm),e(Cm,Tne),e(Tne,bKe),e(Cm,vKe),e(Cm,LR),e(LR,FKe),e(Cm,TKe),e(A,MKe),e(A,wm),e(wm,Mne),e(Mne,EKe),e(wm,CKe),e(wm,yR),e(yR,wKe),e(wm,AKe),e(A,LKe),e(A,Am),e(Am,Ene),e(Ene,yKe),e(Am,xKe),e(Am,xR),e(xR,$Ke),e(Am,kKe),e(A,SKe),e(A,Lm),e(Lm,Cne),e(Cne,RKe),e(Lm,PKe),e(Lm,$R),e($R,BKe),e(Lm,IKe),e(A,NKe),e(A,ym),e(ym,wne),e(wne,qKe),e(ym,jKe),e(ym,kR),e(kR,DKe),e(ym,GKe),e(A,OKe),e(A,xm),e(xm,Ane),e(Ane,VKe),e(xm,XKe),e(xm,SR),e(SR,zKe),e(xm,QKe),e(A,WKe),e(A,$m),e($m,Lne),e(Lne,HKe),e($m,UKe),e($m,RR),e(RR,JKe),e($m,YKe),e(A,KKe),e(A,km),e(km,yne),e(yne,ZKe),e(km,eZe),e(km,PR),e(PR,oZe),e(km,rZe),e(A,tZe),e(A,Sm),e(Sm,xne),e(xne,aZe),e(Sm,nZe),e(Sm,BR),e(BR,sZe),e(Sm,lZe),e(A,iZe),e(A,Rm),e(Rm,$ne),e($ne,dZe),e(Rm,cZe),e(Rm,IR),e(IR,fZe),e(Rm,mZe),e(A,gZe),e(A,Pm),e(Pm,kne),e(kne,hZe),e(Pm,pZe),e(Pm,NR),e(NR,_Ze),e(Pm,uZe),e(A,bZe),e(A,Bm),e(Bm,Sne),e(Sne,vZe),e(Bm,FZe),e(Bm,qR),e(qR,TZe),e(Bm,MZe),e(A,EZe),e(A,Im),e(Im,Rne),e(Rne,CZe),e(Im,wZe),e(Im,jR),e(jR,AZe),e(Im,LZe),e(A,yZe),e(A,Nm),e(Nm,Pne),e(Pne,xZe),e(Nm,$Ze),e(Nm,DR),e(DR,kZe),e(Nm,SZe),e(A,RZe),e(A,qm),e(qm,Bne),e(Bne,PZe),e(qm,BZe),e(qm,GR),e(GR,IZe),e(qm,NZe),e(A,qZe),e(A,jm),e(jm,Ine),e(Ine,jZe),e(jm,DZe),e(jm,OR),e(OR,GZe),e(jm,OZe),e(A,VZe),e(A,Dm),e(Dm,Nne),e(Nne,XZe),e(Dm,zZe),e(Dm,VR),e(VR,QZe),e(Dm,WZe),e(A,HZe),e(A,Gm),e(Gm,qne),e(qne,UZe),e(Gm,JZe),e(Gm,XR),e(XR,YZe),e(Gm,KZe),e(A,ZZe),e(A,Om),e(Om,jne),e(jne,eeo),e(Om,oeo),e(Om,zR),e(zR,reo),e(Om,teo),e(A,aeo),e(A,Vm),e(Vm,Dne),e(Dne,neo),e(Vm,seo),e(Vm,QR),e(QR,leo),e(Vm,ieo),e(A,deo),e(A,Xm),e(Xm,Gne),e(Gne,ceo),e(Xm,feo),e(Xm,WR),e(WR,meo),e(Xm,geo),e(A,heo),e(A,zm),e(zm,One),e(One,peo),e(zm,_eo),e(zm,HR),e(HR,ueo),e(zm,beo),e(A,veo),e(A,Qm),e(Qm,Vne),e(Vne,Feo),e(Qm,Teo),e(Qm,UR),e(UR,Meo),e(Qm,Eeo),e(A,Ceo),e(A,Wm),e(Wm,Xne),e(Xne,weo),e(Wm,Aeo),e(Wm,JR),e(JR,Leo),e(Wm,yeo),e(A,xeo),e(A,Hm),e(Hm,zne),e(zne,$eo),e(Hm,keo),e(Hm,YR),e(YR,Seo),e(Hm,Reo),e(A,Peo),e(A,Um),e(Um,Qne),e(Qne,Beo),e(Um,Ieo),e(Um,KR),e(KR,Neo),e(Um,qeo),e(A,jeo),e(A,Jm),e(Jm,Wne),e(Wne,Deo),e(Jm,Geo),e(Jm,ZR),e(ZR,Oeo),e(Jm,Veo),e(A,Xeo),e(A,Ym),e(Ym,Hne),e(Hne,zeo),e(Ym,Qeo),e(Ym,eP),e(eP,Weo),e(Ym,Heo),e(A,Ueo),e(A,Km),e(Km,Une),e(Une,Jeo),e(Km,Yeo),e(Km,oP),e(oP,Keo),e(Km,Zeo),e(A,eoo),e(A,Zm),e(Zm,Jne),e(Jne,ooo),e(Zm,roo),e(Zm,rP),e(rP,too),e(Zm,aoo),e(A,noo),e(A,eg),e(eg,Yne),e(Yne,soo),e(eg,loo),e(eg,tP),e(tP,ioo),e(eg,doo),e(A,coo),e(A,og),e(og,Kne),e(Kne,foo),e(og,moo),e(og,aP),e(aP,goo),e(og,hoo),e(A,poo),e(A,rg),e(rg,Zne),e(Zne,_oo),e(rg,uoo),e(rg,nP),e(nP,boo),e(rg,voo),e(A,Foo),e(A,tg),e(tg,ese),e(ese,Too),e(tg,Moo),e(tg,sP),e(sP,Eoo),e(tg,Coo),e(A,woo),e(A,ag),e(ag,ose),e(ose,Aoo),e(ag,Loo),e(ag,lP),e(lP,yoo),e(ag,xoo),e(A,$oo),e(A,ng),e(ng,rse),e(rse,koo),e(ng,Soo),e(ng,iP),e(iP,Roo),e(ng,Poo),e(A,Boo),e(A,sg),e(sg,tse),e(tse,Ioo),e(sg,Noo),e(sg,dP),e(dP,qoo),e(sg,joo),e(A,Doo),e(A,lg),e(lg,ase),e(ase,Goo),e(lg,Ooo),e(lg,cP),e(cP,Voo),e(lg,Xoo),e(A,zoo),e(A,ig),e(ig,nse),e(nse,Qoo),e(ig,Woo),e(ig,fP),e(fP,Hoo),e(ig,Uoo),e(A,Joo),e(A,dg),e(dg,sse),e(sse,Yoo),e(dg,Koo),e(dg,mP),e(mP,Zoo),e(dg,ero),e(A,oro),e(A,cg),e(cg,lse),e(lse,rro),e(cg,tro),e(cg,gP),e(gP,aro),e(cg,nro),e(A,sro),e(A,fg),e(fg,ise),e(ise,lro),e(fg,iro),e(fg,hP),e(hP,dro),e(fg,cro),e(A,fro),e(A,mg),e(mg,dse),e(dse,mro),e(mg,gro),e(mg,pP),e(pP,hro),e(mg,pro),e(A,_ro),e(A,gg),e(gg,cse),e(cse,uro),e(gg,bro),e(gg,_P),e(_P,vro),e(gg,Fro),e(A,Tro),e(A,hg),e(hg,fse),e(fse,Mro),e(hg,Ero),e(hg,uP),e(uP,Cro),e(hg,wro),e(A,Aro),e(A,pg),e(pg,mse),e(mse,Lro),e(pg,yro),e(pg,bP),e(bP,xro),e(pg,$ro),e(A,kro),e(A,_g),e(_g,gse),e(gse,Sro),e(_g,Rro),e(_g,vP),e(vP,Pro),e(_g,Bro),e(A,Iro),e(A,ug),e(ug,hse),e(hse,Nro),e(ug,qro),e(ug,FP),e(FP,jro),e(ug,Dro),e(A,Gro),e(A,bg),e(bg,pse),e(pse,Oro),e(bg,Vro),e(bg,TP),e(TP,Xro),e(bg,zro),e(A,Qro),e(A,vg),e(vg,_se),e(_se,Wro),e(vg,Hro),e(vg,MP),e(MP,Uro),e(vg,Jro),e(A,Yro),e(A,Fg),e(Fg,use),e(use,Kro),e(Fg,Zro),e(Fg,EP),e(EP,eto),e(Fg,oto),e(A,rto),e(A,Tg),e(Tg,bse),e(bse,tto),e(Tg,ato),e(Tg,CP),e(CP,nto),e(Tg,sto),e(A,lto),e(A,Mg),e(Mg,vse),e(vse,ito),e(Mg,dto),e(Mg,wP),e(wP,cto),e(Mg,fto),e(A,mto),e(A,Eg),e(Eg,Fse),e(Fse,gto),e(Eg,hto),e(Eg,AP),e(AP,pto),e(Eg,_to),e(A,uto),e(A,Cg),e(Cg,Tse),e(Tse,bto),e(Cg,vto),e(Cg,LP),e(LP,Fto),e(Cg,Tto),e(A,Mto),e(A,wg),e(wg,Mse),e(Mse,Eto),e(wg,Cto),e(wg,yP),e(yP,wto),e(wg,Ato),e(A,Lto),e(A,Ag),e(Ag,Ese),e(Ese,yto),e(Ag,xto),e(Ag,xP),e(xP,$to),e(Ag,kto),e(A,Sto),e(A,Lg),e(Lg,Cse),e(Cse,Rto),e(Lg,Pto),e(Lg,$P),e($P,Bto),e(Lg,Ito),e(A,Nto),e(A,yg),e(yg,wse),e(wse,qto),e(yg,jto),e(yg,kP),e(kP,Dto),e(yg,Gto),e(A,Oto),e(A,xg),e(xg,Ase),e(Ase,Vto),e(xg,Xto),e(xg,SP),e(SP,zto),e(xg,Qto),e(A,Wto),e(A,$g),e($g,Lse),e(Lse,Hto),e($g,Uto),e($g,RP),e(RP,Jto),e($g,Yto),e(A,Kto),e(A,kg),e(kg,yse),e(yse,Zto),e(kg,eao),e(kg,PP),e(PP,oao),e(kg,rao),e(A,tao),e(A,Sg),e(Sg,xse),e(xse,aao),e(Sg,nao),e(Sg,BP),e(BP,sao),e(Sg,lao),e(A,iao),e(A,Rg),e(Rg,$se),e($se,dao),e(Rg,cao),e(Rg,IP),e(IP,fao),e(Rg,mao),e(A,gao),e(A,Pg),e(Pg,kse),e(kse,hao),e(Pg,pao),e(Pg,NP),e(NP,_ao),e(Pg,uao),e(A,bao),e(A,Bg),e(Bg,Sse),e(Sse,vao),e(Bg,Fao),e(Bg,qP),e(qP,Tao),e(Bg,Mao),e(A,Eao),e(A,Ig),e(Ig,Rse),e(Rse,Cao),e(Ig,wao),e(Ig,jP),e(jP,Aao),e(Ig,Lao),e(A,yao),e(A,Ng),e(Ng,Pse),e(Pse,xao),e(Ng,$ao),e(Ng,DP),e(DP,kao),e(Ng,Sao),e(A,Rao),e(A,qg),e(qg,Bse),e(Bse,Pao),e(qg,Bao),e(qg,GP),e(GP,Iao),e(qg,Nao),e(A,qao),e(A,jg),e(jg,Ise),e(Ise,jao),e(jg,Dao),e(jg,OP),e(OP,Gao),e(jg,Oao),e(A,Vao),e(A,Dg),e(Dg,Nse),e(Nse,Xao),e(Dg,zao),e(Dg,VP),e(VP,Qao),e(Dg,Wao),e(A,Hao),e(A,Gg),e(Gg,qse),e(qse,Uao),e(Gg,Jao),e(Gg,XP),e(XP,Yao),e(Gg,Kao),e(A,Zao),e(A,Og),e(Og,jse),e(jse,eno),e(Og,ono),e(Og,zP),e(zP,rno),e(Og,tno),e(A,ano),e(A,Vg),e(Vg,Dse),e(Dse,nno),e(Vg,sno),e(Vg,QP),e(QP,lno),e(Vg,ino),e(A,dno),e(A,Xg),e(Xg,Gse),e(Gse,cno),e(Xg,fno),e(Xg,WP),e(WP,mno),e(Xg,gno),e(A,hno),e(A,zg),e(zg,Ose),e(Ose,pno),e(zg,_no),e(zg,HP),e(HP,uno),e(zg,bno),e(A,vno),e(A,Qg),e(Qg,Vse),e(Vse,Fno),e(Qg,Tno),e(Qg,UP),e(UP,Mno),e(Qg,Eno),e(A,Cno),e(A,Wg),e(Wg,Xse),e(Xse,wno),e(Wg,Ano),e(Wg,JP),e(JP,Lno),e(Wg,yno),e(A,xno),e(A,Hg),e(Hg,zse),e(zse,$no),e(Hg,kno),e(Hg,YP),e(YP,Sno),e(Hg,Rno),e(A,Pno),e(A,Ug),e(Ug,Qse),e(Qse,Bno),e(Ug,Ino),e(Ug,KP),e(KP,Nno),e(Ug,qno),e(A,jno),e(A,Jg),e(Jg,Wse),e(Wse,Dno),e(Jg,Gno),e(Jg,ZP),e(ZP,Ono),e(Jg,Vno),e(Lr,Xno),M(Yg,Lr,null),e(Ao,zno),e(Ao,Kg),M(gL,Kg,null),e(Kg,Qno),e(Kg,Hse),e(Hse,Wno),b(f,mXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,Use),M(hL,Use,null),e(Ni,Hno),e(Ni,Jse),e(Jse,Uno),b(f,gXe,u),b(f,Lo,u),M(pL,Lo,null),e(Lo,Jno),e(Lo,_L),e(_L,Yno),e(_L,eB),e(eB,Kno),e(_L,Zno),e(Lo,eso),e(Lo,uL),e(uL,oso),e(uL,Yse),e(Yse,rso),e(uL,tso),e(Lo,aso),e(Lo,yr),M(bL,yr,null),e(yr,nso),e(yr,Kse),e(Kse,sso),e(yr,lso),e(yr,Pa),e(Pa,iso),e(Pa,Zse),e(Zse,dso),e(Pa,cso),e(Pa,ele),e(ele,fso),e(Pa,mso),e(Pa,ole),e(ole,gso),e(Pa,hso),e(yr,pso),e(yr,k),e(k,jn),e(jn,rle),e(rle,_so),e(jn,uso),e(jn,oB),e(oB,bso),e(jn,vso),e(jn,rB),e(rB,Fso),e(jn,Tso),e(k,Mso),e(k,Dn),e(Dn,tle),e(tle,Eso),e(Dn,Cso),e(Dn,tB),e(tB,wso),e(Dn,Aso),e(Dn,aB),e(aB,Lso),e(Dn,yso),e(k,xso),e(k,Gn),e(Gn,ale),e(ale,$so),e(Gn,kso),e(Gn,nB),e(nB,Sso),e(Gn,Rso),e(Gn,sB),e(sB,Pso),e(Gn,Bso),e(k,Iso),e(k,eh),e(eh,nle),e(nle,Nso),e(eh,qso),e(eh,lB),e(lB,jso),e(eh,Dso),e(k,Gso),e(k,On),e(On,sle),e(sle,Oso),e(On,Vso),e(On,iB),e(iB,Xso),e(On,zso),e(On,dB),e(dB,Qso),e(On,Wso),e(k,Hso),e(k,oh),e(oh,lle),e(lle,Uso),e(oh,Jso),e(oh,cB),e(cB,Yso),e(oh,Kso),e(k,Zso),e(k,rh),e(rh,ile),e(ile,elo),e(rh,olo),e(rh,fB),e(fB,rlo),e(rh,tlo),e(k,alo),e(k,th),e(th,dle),e(dle,nlo),e(th,slo),e(th,mB),e(mB,llo),e(th,ilo),e(k,dlo),e(k,Vn),e(Vn,cle),e(cle,clo),e(Vn,flo),e(Vn,gB),e(gB,mlo),e(Vn,glo),e(Vn,hB),e(hB,hlo),e(Vn,plo),e(k,_lo),e(k,Xn),e(Xn,fle),e(fle,ulo),e(Xn,blo),e(Xn,pB),e(pB,vlo),e(Xn,Flo),e(Xn,_B),e(_B,Tlo),e(Xn,Mlo),e(k,Elo),e(k,zn),e(zn,mle),e(mle,Clo),e(zn,wlo),e(zn,uB),e(uB,Alo),e(zn,Llo),e(zn,bB),e(bB,ylo),e(zn,xlo),e(k,$lo),e(k,ah),e(ah,gle),e(gle,klo),e(ah,Slo),e(ah,vB),e(vB,Rlo),e(ah,Plo),e(k,Blo),e(k,nh),e(nh,hle),e(hle,Ilo),e(nh,Nlo),e(nh,FB),e(FB,qlo),e(nh,jlo),e(k,Dlo),e(k,sh),e(sh,ple),e(ple,Glo),e(sh,Olo),e(sh,TB),e(TB,Vlo),e(sh,Xlo),e(k,zlo),e(k,Qn),e(Qn,_le),e(_le,Qlo),e(Qn,Wlo),e(Qn,MB),e(MB,Hlo),e(Qn,Ulo),e(Qn,EB),e(EB,Jlo),e(Qn,Ylo),e(k,Klo),e(k,lh),e(lh,ule),e(ule,Zlo),e(lh,eio),e(lh,CB),e(CB,oio),e(lh,rio),e(k,tio),e(k,Wn),e(Wn,ble),e(ble,aio),e(Wn,nio),e(Wn,wB),e(wB,sio),e(Wn,lio),e(Wn,AB),e(AB,iio),e(Wn,dio),e(k,cio),e(k,Hn),e(Hn,vle),e(vle,fio),e(Hn,mio),e(Hn,LB),e(LB,gio),e(Hn,hio),e(Hn,yB),e(yB,pio),e(Hn,_io),e(k,uio),e(k,Un),e(Un,Fle),e(Fle,bio),e(Un,vio),e(Un,xB),e(xB,Fio),e(Un,Tio),e(Un,$B),e($B,Mio),e(Un,Eio),e(k,Cio),e(k,Jn),e(Jn,Tle),e(Tle,wio),e(Jn,Aio),e(Jn,kB),e(kB,Lio),e(Jn,yio),e(Jn,SB),e(SB,xio),e(Jn,$io),e(k,kio),e(k,ih),e(ih,Mle),e(Mle,Sio),e(ih,Rio),e(ih,RB),e(RB,Pio),e(ih,Bio),e(k,Iio),e(k,Yn),e(Yn,Ele),e(Ele,Nio),e(Yn,qio),e(Yn,PB),e(PB,jio),e(Yn,Dio),e(Yn,BB),e(BB,Gio),e(Yn,Oio),e(k,Vio),e(k,Kn),e(Kn,Cle),e(Cle,Xio),e(Kn,zio),e(Kn,IB),e(IB,Qio),e(Kn,Wio),e(Kn,NB),e(NB,Hio),e(Kn,Uio),e(k,Jio),e(k,Zn),e(Zn,wle),e(wle,Yio),e(Zn,Kio),e(Zn,qB),e(qB,Zio),e(Zn,edo),e(Zn,jB),e(jB,odo),e(Zn,rdo),e(k,tdo),e(k,es),e(es,Ale),e(Ale,ado),e(es,ndo),e(es,DB),e(DB,sdo),e(es,ldo),e(es,GB),e(GB,ido),e(es,ddo),e(k,cdo),e(k,os),e(os,Lle),e(Lle,fdo),e(os,mdo),e(os,OB),e(OB,gdo),e(os,hdo),e(os,VB),e(VB,pdo),e(os,_do),e(k,udo),e(k,rs),e(rs,yle),e(yle,bdo),e(rs,vdo),e(rs,XB),e(XB,Fdo),e(rs,Tdo),e(rs,zB),e(zB,Mdo),e(rs,Edo),e(k,Cdo),e(k,dh),e(dh,xle),e(xle,wdo),e(dh,Ado),e(dh,QB),e(QB,Ldo),e(dh,ydo),e(k,xdo),e(k,ts),e(ts,$le),e($le,$do),e(ts,kdo),e(ts,WB),e(WB,Sdo),e(ts,Rdo),e(ts,HB),e(HB,Pdo),e(ts,Bdo),e(k,Ido),e(k,ch),e(ch,kle),e(kle,Ndo),e(ch,qdo),e(ch,UB),e(UB,jdo),e(ch,Ddo),e(k,Gdo),e(k,as),e(as,Sle),e(Sle,Odo),e(as,Vdo),e(as,JB),e(JB,Xdo),e(as,zdo),e(as,YB),e(YB,Qdo),e(as,Wdo),e(k,Hdo),e(k,ns),e(ns,Rle),e(Rle,Udo),e(ns,Jdo),e(ns,KB),e(KB,Ydo),e(ns,Kdo),e(ns,ZB),e(ZB,Zdo),e(ns,eco),e(k,oco),e(k,ss),e(ss,Ple),e(Ple,rco),e(ss,tco),e(ss,eI),e(eI,aco),e(ss,nco),e(ss,oI),e(oI,sco),e(ss,lco),e(k,ico),e(k,fh),e(fh,Ble),e(Ble,dco),e(fh,cco),e(fh,rI),e(rI,fco),e(fh,mco),e(k,gco),e(k,ls),e(ls,Ile),e(Ile,hco),e(ls,pco),e(ls,tI),e(tI,_co),e(ls,uco),e(ls,aI),e(aI,bco),e(ls,vco),e(k,Fco),e(k,is),e(is,Nle),e(Nle,Tco),e(is,Mco),e(is,nI),e(nI,Eco),e(is,Cco),e(is,sI),e(sI,wco),e(is,Aco),e(k,Lco),e(k,ds),e(ds,qle),e(qle,yco),e(ds,xco),e(ds,lI),e(lI,$co),e(ds,kco),e(ds,iI),e(iI,Sco),e(ds,Rco),e(k,Pco),e(k,mh),e(mh,jle),e(jle,Bco),e(mh,Ico),e(mh,dI),e(dI,Nco),e(mh,qco),e(k,jco),e(k,cs),e(cs,Dle),e(Dle,Dco),e(cs,Gco),e(cs,cI),e(cI,Oco),e(cs,Vco),e(cs,fI),e(fI,Xco),e(cs,zco),e(k,Qco),e(k,fs),e(fs,Gle),e(Gle,Wco),e(fs,Hco),e(fs,mI),e(mI,Uco),e(fs,Jco),e(fs,gI),e(gI,Yco),e(fs,Kco),e(k,Zco),e(k,ms),e(ms,Ole),e(Ole,efo),e(ms,ofo),e(ms,hI),e(hI,rfo),e(ms,tfo),e(ms,pI),e(pI,afo),e(ms,nfo),e(k,sfo),e(k,gs),e(gs,Vle),e(Vle,lfo),e(gs,ifo),e(gs,_I),e(_I,dfo),e(gs,cfo),e(gs,uI),e(uI,ffo),e(gs,mfo),e(k,gfo),e(k,hs),e(hs,Xle),e(Xle,hfo),e(hs,pfo),e(hs,bI),e(bI,_fo),e(hs,ufo),e(hs,vI),e(vI,bfo),e(hs,vfo),e(k,Ffo),e(k,ps),e(ps,zle),e(zle,Tfo),e(ps,Mfo),e(ps,FI),e(FI,Efo),e(ps,Cfo),e(ps,TI),e(TI,wfo),e(ps,Afo),e(k,Lfo),e(k,_s),e(_s,Qle),e(Qle,yfo),e(_s,xfo),e(_s,MI),e(MI,$fo),e(_s,kfo),e(_s,EI),e(EI,Sfo),e(_s,Rfo),e(k,Pfo),e(k,us),e(us,Wle),e(Wle,Bfo),e(us,Ifo),e(us,CI),e(CI,Nfo),e(us,qfo),e(us,wI),e(wI,jfo),e(us,Dfo),e(k,Gfo),e(k,gh),e(gh,Hle),e(Hle,Ofo),e(gh,Vfo),e(gh,AI),e(AI,Xfo),e(gh,zfo),e(k,Qfo),e(k,bs),e(bs,Ule),e(Ule,Wfo),e(bs,Hfo),e(bs,LI),e(LI,Ufo),e(bs,Jfo),e(bs,yI),e(yI,Yfo),e(bs,Kfo),e(k,Zfo),e(k,hh),e(hh,Jle),e(Jle,emo),e(hh,omo),e(hh,xI),e(xI,rmo),e(hh,tmo),e(k,amo),e(k,ph),e(ph,Yle),e(Yle,nmo),e(ph,smo),e(ph,$I),e($I,lmo),e(ph,imo),e(k,dmo),e(k,vs),e(vs,Kle),e(Kle,cmo),e(vs,fmo),e(vs,kI),e(kI,mmo),e(vs,gmo),e(vs,SI),e(SI,hmo),e(vs,pmo),e(k,_mo),e(k,Fs),e(Fs,Zle),e(Zle,umo),e(Fs,bmo),e(Fs,RI),e(RI,vmo),e(Fs,Fmo),e(Fs,PI),e(PI,Tmo),e(Fs,Mmo),e(k,Emo),e(k,Ts),e(Ts,eie),e(eie,Cmo),e(Ts,wmo),e(Ts,BI),e(BI,Amo),e(Ts,Lmo),e(Ts,II),e(II,ymo),e(Ts,xmo),e(k,$mo),e(k,_h),e(_h,oie),e(oie,kmo),e(_h,Smo),e(_h,NI),e(NI,Rmo),e(_h,Pmo),e(k,Bmo),e(k,Ms),e(Ms,rie),e(rie,Imo),e(Ms,Nmo),e(Ms,qI),e(qI,qmo),e(Ms,jmo),e(Ms,jI),e(jI,Dmo),e(Ms,Gmo),e(k,Omo),e(k,Es),e(Es,tie),e(tie,Vmo),e(Es,Xmo),e(Es,DI),e(DI,zmo),e(Es,Qmo),e(Es,GI),e(GI,Wmo),e(Es,Hmo),e(k,Umo),e(k,Cs),e(Cs,aie),e(aie,Jmo),e(Cs,Ymo),e(Cs,OI),e(OI,Kmo),e(Cs,Zmo),e(Cs,VI),e(VI,ego),e(Cs,ogo),e(k,rgo),e(k,ws),e(ws,nie),e(nie,tgo),e(ws,ago),e(ws,XI),e(XI,ngo),e(ws,sgo),e(ws,zI),e(zI,lgo),e(ws,igo),e(k,dgo),e(k,As),e(As,sie),e(sie,cgo),e(As,fgo),e(As,QI),e(QI,mgo),e(As,ggo),e(As,WI),e(WI,hgo),e(As,pgo),e(k,_go),e(k,Ls),e(Ls,lie),e(lie,ugo),e(Ls,bgo),e(Ls,HI),e(HI,vgo),e(Ls,Fgo),e(Ls,UI),e(UI,Tgo),e(Ls,Mgo),e(k,Ego),e(k,ys),e(ys,iie),e(iie,Cgo),e(ys,wgo),e(ys,JI),e(JI,Ago),e(ys,Lgo),e(ys,YI),e(YI,ygo),e(ys,xgo),e(k,$go),e(k,uh),e(uh,die),e(die,kgo),e(uh,Sgo),e(uh,KI),e(KI,Rgo),e(uh,Pgo),e(k,Bgo),e(k,xs),e(xs,cie),e(cie,Igo),e(xs,Ngo),e(xs,ZI),e(ZI,qgo),e(xs,jgo),e(xs,eN),e(eN,Dgo),e(xs,Ggo),e(k,Ogo),e(k,bh),e(bh,fie),e(fie,Vgo),e(bh,Xgo),e(bh,oN),e(oN,zgo),e(bh,Qgo),e(k,Wgo),e(k,vh),e(vh,mie),e(mie,Hgo),e(vh,Ugo),e(vh,rN),e(rN,Jgo),e(vh,Ygo),e(k,Kgo),e(k,Fh),e(Fh,gie),e(gie,Zgo),e(Fh,eho),e(Fh,tN),e(tN,oho),e(Fh,rho),e(k,tho),e(k,Th),e(Th,hie),e(hie,aho),e(Th,nho),e(Th,aN),e(aN,sho),e(Th,lho),e(k,iho),e(k,$s),e($s,pie),e(pie,dho),e($s,cho),e($s,nN),e(nN,fho),e($s,mho),e($s,sN),e(sN,gho),e($s,hho),e(k,pho),e(k,Mh),e(Mh,_ie),e(_ie,_ho),e(Mh,uho),e(Mh,lN),e(lN,bho),e(Mh,vho),e(k,Fho),e(k,ks),e(ks,uie),e(uie,Tho),e(ks,Mho),e(ks,iN),e(iN,Eho),e(ks,Cho),e(ks,dN),e(dN,who),e(ks,Aho),e(k,Lho),e(k,Ss),e(Ss,bie),e(bie,yho),e(Ss,xho),e(Ss,cN),e(cN,$ho),e(Ss,kho),e(Ss,fN),e(fN,Sho),e(Ss,Rho),e(k,Pho),e(k,Rs),e(Rs,vie),e(vie,Bho),e(Rs,Iho),e(Rs,mN),e(mN,Nho),e(Rs,qho),e(Rs,gN),e(gN,jho),e(Rs,Dho),e(k,Gho),e(k,Ps),e(Ps,Fie),e(Fie,Oho),e(Ps,Vho),e(Ps,hN),e(hN,Xho),e(Ps,zho),e(Ps,pN),e(pN,Qho),e(Ps,Who),e(k,Hho),e(k,Bs),e(Bs,Tie),e(Tie,Uho),e(Bs,Jho),e(Bs,_N),e(_N,Yho),e(Bs,Kho),e(Bs,uN),e(uN,Zho),e(Bs,epo),e(k,opo),e(k,Is),e(Is,Mie),e(Mie,rpo),e(Is,tpo),e(Is,bN),e(bN,apo),e(Is,npo),e(Is,vN),e(vN,spo),e(Is,lpo),e(k,ipo),e(k,Eh),e(Eh,Eie),e(Eie,dpo),e(Eh,cpo),e(Eh,FN),e(FN,fpo),e(Eh,mpo),e(k,gpo),e(k,Ch),e(Ch,Cie),e(Cie,hpo),e(Ch,ppo),e(Ch,TN),e(TN,_po),e(Ch,upo),e(k,bpo),e(k,Ns),e(Ns,wie),e(wie,vpo),e(Ns,Fpo),e(Ns,MN),e(MN,Tpo),e(Ns,Mpo),e(Ns,EN),e(EN,Epo),e(Ns,Cpo),e(k,wpo),e(k,qs),e(qs,Aie),e(Aie,Apo),e(qs,Lpo),e(qs,CN),e(CN,ypo),e(qs,xpo),e(qs,wN),e(wN,$po),e(qs,kpo),e(k,Spo),e(k,js),e(js,Lie),e(Lie,Rpo),e(js,Ppo),e(js,AN),e(AN,Bpo),e(js,Ipo),e(js,LN),e(LN,Npo),e(js,qpo),e(k,jpo),e(k,wh),e(wh,yie),e(yie,Dpo),e(wh,Gpo),e(wh,yN),e(yN,Opo),e(wh,Vpo),e(k,Xpo),e(k,Ah),e(Ah,xie),e(xie,zpo),e(Ah,Qpo),e(Ah,xN),e(xN,Wpo),e(Ah,Hpo),e(k,Upo),e(k,Lh),e(Lh,$ie),e($ie,Jpo),e(Lh,Ypo),e(Lh,$N),e($N,Kpo),e(Lh,Zpo),e(k,e_o),e(k,Ds),e(Ds,kie),e(kie,o_o),e(Ds,r_o),e(Ds,kN),e(kN,t_o),e(Ds,a_o),e(Ds,SN),e(SN,n_o),e(Ds,s_o),e(k,l_o),e(k,Gs),e(Gs,Sie),e(Sie,i_o),e(Gs,d_o),e(Gs,RN),e(RN,c_o),e(Gs,f_o),e(Gs,PN),e(PN,m_o),e(Gs,g_o),e(k,h_o),e(k,yh),e(yh,Rie),e(Rie,p_o),e(yh,__o),e(yh,BN),e(BN,u_o),e(yh,b_o),e(k,v_o),e(k,xh),e(xh,Pie),e(Pie,F_o),e(xh,T_o),e(xh,IN),e(IN,M_o),e(xh,E_o),e(k,C_o),e(k,$h),e($h,Bie),e(Bie,w_o),e($h,A_o),e($h,NN),e(NN,L_o),e($h,y_o),e(k,x_o),e(k,Os),e(Os,Iie),e(Iie,$_o),e(Os,k_o),e(Os,qN),e(qN,S_o),e(Os,R_o),e(Os,jN),e(jN,P_o),e(Os,B_o),e(k,I_o),e(k,kh),e(kh,Nie),e(Nie,N_o),e(kh,q_o),e(kh,DN),e(DN,j_o),e(kh,D_o),e(k,G_o),e(k,Sh),e(Sh,qie),e(qie,O_o),e(Sh,V_o),e(Sh,GN),e(GN,X_o),e(Sh,z_o),e(k,Q_o),e(k,Vs),e(Vs,jie),e(jie,W_o),e(Vs,H_o),e(Vs,ON),e(ON,U_o),e(Vs,J_o),e(Vs,VN),e(VN,Y_o),e(Vs,K_o),e(k,Z_o),e(k,Xs),e(Xs,Die),e(Die,euo),e(Xs,ouo),e(Xs,XN),e(XN,ruo),e(Xs,tuo),e(Xs,zN),e(zN,auo),e(Xs,nuo),e(k,suo),e(k,zs),e(zs,Gie),e(Gie,luo),e(zs,iuo),e(zs,QN),e(QN,duo),e(zs,cuo),e(zs,WN),e(WN,fuo),e(zs,muo),e(k,guo),e(k,Qs),e(Qs,Oie),e(Oie,huo),e(Qs,puo),e(Qs,HN),e(HN,_uo),e(Qs,uuo),e(Qs,UN),e(UN,buo),e(Qs,vuo),e(yr,Fuo),M(Rh,yr,null),e(Lo,Tuo),e(Lo,Ph),M(vL,Ph,null),e(Ph,Muo),e(Ph,Vie),e(Vie,Euo),b(f,hXe,u),b(f,qi,u),e(qi,Bh),e(Bh,Xie),M(FL,Xie,null),e(qi,Cuo),e(qi,zie),e(zie,wuo),b(f,pXe,u),b(f,yo,u),M(TL,yo,null),e(yo,Auo),e(yo,ML),e(ML,Luo),e(ML,JN),e(JN,yuo),e(ML,xuo),e(yo,$uo),e(yo,EL),e(EL,kuo),e(EL,Qie),e(Qie,Suo),e(EL,Ruo),e(yo,Puo),e(yo,Ue),M(CL,Ue,null),e(Ue,Buo),e(Ue,Wie),e(Wie,Iuo),e(Ue,Nuo),e(Ue,Ba),e(Ba,quo),e(Ba,Hie),e(Hie,juo),e(Ba,Duo),e(Ba,Uie),e(Uie,Guo),e(Ba,Ouo),e(Ba,Jie),e(Jie,Vuo),e(Ba,Xuo),e(Ue,zuo),e(Ue,Y),e(Y,Ih),e(Ih,Yie),e(Yie,Quo),e(Ih,Wuo),e(Ih,YN),e(YN,Huo),e(Ih,Uuo),e(Y,Juo),e(Y,Nh),e(Nh,Kie),e(Kie,Yuo),e(Nh,Kuo),e(Nh,KN),e(KN,Zuo),e(Nh,e2o),e(Y,o2o),e(Y,qh),e(qh,Zie),e(Zie,r2o),e(qh,t2o),e(qh,ZN),e(ZN,a2o),e(qh,n2o),e(Y,s2o),e(Y,jh),e(jh,ede),e(ede,l2o),e(jh,i2o),e(jh,eq),e(eq,d2o),e(jh,c2o),e(Y,f2o),e(Y,Dh),e(Dh,ode),e(ode,m2o),e(Dh,g2o),e(Dh,oq),e(oq,h2o),e(Dh,p2o),e(Y,_2o),e(Y,Gh),e(Gh,rde),e(rde,u2o),e(Gh,b2o),e(Gh,rq),e(rq,v2o),e(Gh,F2o),e(Y,T2o),e(Y,Oh),e(Oh,tde),e(tde,M2o),e(Oh,E2o),e(Oh,tq),e(tq,C2o),e(Oh,w2o),e(Y,A2o),e(Y,Vh),e(Vh,ade),e(ade,L2o),e(Vh,y2o),e(Vh,aq),e(aq,x2o),e(Vh,$2o),e(Y,k2o),e(Y,Xh),e(Xh,nde),e(nde,S2o),e(Xh,R2o),e(Xh,nq),e(nq,P2o),e(Xh,B2o),e(Y,I2o),e(Y,zh),e(zh,sde),e(sde,N2o),e(zh,q2o),e(zh,sq),e(sq,j2o),e(zh,D2o),e(Y,G2o),e(Y,Qh),e(Qh,lde),e(lde,O2o),e(Qh,V2o),e(Qh,lq),e(lq,X2o),e(Qh,z2o),e(Y,Q2o),e(Y,Wh),e(Wh,ide),e(ide,W2o),e(Wh,H2o),e(Wh,iq),e(iq,U2o),e(Wh,J2o),e(Y,Y2o),e(Y,Hh),e(Hh,dde),e(dde,K2o),e(Hh,Z2o),e(Hh,dq),e(dq,e1o),e(Hh,o1o),e(Y,r1o),e(Y,Uh),e(Uh,cde),e(cde,t1o),e(Uh,a1o),e(Uh,cq),e(cq,n1o),e(Uh,s1o),e(Y,l1o),e(Y,Jh),e(Jh,fde),e(fde,i1o),e(Jh,d1o),e(Jh,fq),e(fq,c1o),e(Jh,f1o),e(Y,m1o),e(Y,Yh),e(Yh,mde),e(mde,g1o),e(Yh,h1o),e(Yh,mq),e(mq,p1o),e(Yh,_1o),e(Y,u1o),e(Y,Kh),e(Kh,gde),e(gde,b1o),e(Kh,v1o),e(Kh,gq),e(gq,F1o),e(Kh,T1o),e(Y,M1o),e(Y,Zh),e(Zh,hde),e(hde,E1o),e(Zh,C1o),e(Zh,hq),e(hq,w1o),e(Zh,A1o),e(Y,L1o),e(Y,ep),e(ep,pde),e(pde,y1o),e(ep,x1o),e(ep,pq),e(pq,$1o),e(ep,k1o),e(Y,S1o),e(Y,op),e(op,_de),e(_de,R1o),e(op,P1o),e(op,_q),e(_q,B1o),e(op,I1o),e(Y,N1o),e(Y,rp),e(rp,ude),e(ude,q1o),e(rp,j1o),e(rp,uq),e(uq,D1o),e(rp,G1o),e(Y,O1o),e(Y,tp),e(tp,bde),e(bde,V1o),e(tp,X1o),e(tp,bq),e(bq,z1o),e(tp,Q1o),e(Y,W1o),e(Y,ap),e(ap,vde),e(vde,H1o),e(ap,U1o),e(ap,vq),e(vq,J1o),e(ap,Y1o),e(Y,K1o),e(Y,np),e(np,Fde),e(Fde,Z1o),e(np,ebo),e(np,Fq),e(Fq,obo),e(np,rbo),e(Y,tbo),e(Y,sp),e(sp,Tde),e(Tde,abo),e(sp,nbo),e(sp,Tq),e(Tq,sbo),e(sp,lbo),e(Y,ibo),e(Y,lp),e(lp,Mde),e(Mde,dbo),e(lp,cbo),e(lp,Mq),e(Mq,fbo),e(lp,mbo),e(Y,gbo),e(Y,ip),e(ip,Ede),e(Ede,hbo),e(ip,pbo),e(ip,Eq),e(Eq,_bo),e(ip,ubo),e(Y,bbo),e(Y,dp),e(dp,Cde),e(Cde,vbo),e(dp,Fbo),e(dp,Cq),e(Cq,Tbo),e(dp,Mbo),e(Y,Ebo),e(Y,cp),e(cp,wde),e(wde,Cbo),e(cp,wbo),e(cp,wq),e(wq,Abo),e(cp,Lbo),e(Y,ybo),e(Y,fp),e(fp,Ade),e(Ade,xbo),e(fp,$bo),e(fp,Aq),e(Aq,kbo),e(fp,Sbo),e(Y,Rbo),e(Y,mp),e(mp,Lde),e(Lde,Pbo),e(mp,Bbo),e(mp,Lq),e(Lq,Ibo),e(mp,Nbo),e(Y,qbo),e(Y,gp),e(gp,yde),e(yde,jbo),e(gp,Dbo),e(gp,yq),e(yq,Gbo),e(gp,Obo),e(Y,Vbo),e(Y,hp),e(hp,xde),e(xde,Xbo),e(hp,zbo),e(hp,xq),e(xq,Qbo),e(hp,Wbo),e(Y,Hbo),e(Y,pp),e(pp,$de),e($de,Ubo),e(pp,Jbo),e(pp,$q),e($q,Ybo),e(pp,Kbo),e(Ue,Zbo),M(_p,Ue,null),e(Ue,evo),M(up,Ue,null),e(yo,ovo),e(yo,bp),M(wL,bp,null),e(bp,rvo),e(bp,kde),e(kde,tvo),b(f,_Xe,u),b(f,ji,u),e(ji,vp),e(vp,Sde),M(AL,Sde,null),e(ji,avo),e(ji,Rde),e(Rde,nvo),b(f,uXe,u),b(f,xo,u),M(LL,xo,null),e(xo,svo),e(xo,yL),e(yL,lvo),e(yL,kq),e(kq,ivo),e(yL,dvo),e(xo,cvo),e(xo,xL),e(xL,fvo),e(xL,Pde),e(Pde,mvo),e(xL,gvo),e(xo,hvo),e(xo,Je),M($L,Je,null),e(Je,pvo),e(Je,Bde),e(Bde,_vo),e(Je,uvo),e(Je,Di),e(Di,bvo),e(Di,Ide),e(Ide,vvo),e(Di,Fvo),e(Di,Nde),e(Nde,Tvo),e(Di,Mvo),e(Je,Evo),e(Je,he),e(he,Fp),e(Fp,qde),e(qde,Cvo),e(Fp,wvo),e(Fp,Sq),e(Sq,Avo),e(Fp,Lvo),e(he,yvo),e(he,Tp),e(Tp,jde),e(jde,xvo),e(Tp,$vo),e(Tp,Dde),e(Dde,kvo),e(Tp,Svo),e(he,Rvo),e(he,Mp),e(Mp,Gde),e(Gde,Pvo),e(Mp,Bvo),e(Mp,Rq),e(Rq,Ivo),e(Mp,Nvo),e(he,qvo),e(he,Ep),e(Ep,Ode),e(Ode,jvo),e(Ep,Dvo),e(Ep,Pq),e(Pq,Gvo),e(Ep,Ovo),e(he,Vvo),e(he,Cp),e(Cp,Vde),e(Vde,Xvo),e(Cp,zvo),e(Cp,Bq),e(Bq,Qvo),e(Cp,Wvo),e(he,Hvo),e(he,wp),e(wp,Xde),e(Xde,Uvo),e(wp,Jvo),e(wp,Iq),e(Iq,Yvo),e(wp,Kvo),e(he,Zvo),e(he,Ap),e(Ap,zde),e(zde,e0o),e(Ap,o0o),e(Ap,Nq),e(Nq,r0o),e(Ap,t0o),e(he,a0o),e(he,Lp),e(Lp,Qde),e(Qde,n0o),e(Lp,s0o),e(Lp,qq),e(qq,l0o),e(Lp,i0o),e(he,d0o),e(he,yp),e(yp,Wde),e(Wde,c0o),e(yp,f0o),e(yp,jq),e(jq,m0o),e(yp,g0o),e(he,h0o),e(he,xp),e(xp,Hde),e(Hde,p0o),e(xp,_0o),e(xp,Dq),e(Dq,u0o),e(xp,b0o),e(he,v0o),e(he,$p),e($p,Ude),e(Ude,F0o),e($p,T0o),e($p,Gq),e(Gq,M0o),e($p,E0o),e(he,C0o),e(he,kp),e(kp,Jde),e(Jde,w0o),e(kp,A0o),e(kp,Oq),e(Oq,L0o),e(kp,y0o),e(he,x0o),e(he,Sp),e(Sp,Yde),e(Yde,$0o),e(Sp,k0o),e(Sp,Vq),e(Vq,S0o),e(Sp,R0o),e(he,P0o),e(he,Rp),e(Rp,Kde),e(Kde,B0o),e(Rp,I0o),e(Rp,Xq),e(Xq,N0o),e(Rp,q0o),e(he,j0o),e(he,Pp),e(Pp,Zde),e(Zde,D0o),e(Pp,G0o),e(Pp,zq),e(zq,O0o),e(Pp,V0o),e(he,X0o),e(he,Bp),e(Bp,ece),e(ece,z0o),e(Bp,Q0o),e(Bp,Qq),e(Qq,W0o),e(Bp,H0o),e(he,U0o),e(he,Ip),e(Ip,oce),e(oce,J0o),e(Ip,Y0o),e(Ip,Wq),e(Wq,K0o),e(Ip,Z0o),e(he,eFo),e(he,Np),e(Np,rce),e(rce,oFo),e(Np,rFo),e(Np,Hq),e(Hq,tFo),e(Np,aFo),e(Je,nFo),M(qp,Je,null),e(Je,sFo),M(jp,Je,null),e(xo,lFo),e(xo,Dp),M(kL,Dp,null),e(Dp,iFo),e(Dp,tce),e(tce,dFo),b(f,bXe,u),b(f,Gi,u),e(Gi,Gp),e(Gp,ace),M(SL,ace,null),e(Gi,cFo),e(Gi,nce),e(nce,fFo),b(f,vXe,u),b(f,$o,u),M(RL,$o,null),e($o,mFo),e($o,Oi),e(Oi,gFo),e(Oi,Uq),e(Uq,hFo),e(Oi,pFo),e(Oi,Jq),e(Jq,_Fo),e(Oi,uFo),e($o,bFo),e($o,PL),e(PL,vFo),e(PL,sce),e(sce,FFo),e(PL,TFo),e($o,MFo),e($o,it),M(BL,it,null),e(it,EFo),e(it,lce),e(lce,CFo),e(it,wFo),e(it,Vi),e(Vi,AFo),e(Vi,ice),e(ice,LFo),e(Vi,yFo),e(Vi,Yq),e(Yq,xFo),e(Vi,$Fo),e(it,kFo),M(Op,it,null),e($o,SFo),e($o,Ye),M(IL,Ye,null),e(Ye,RFo),e(Ye,dce),e(dce,PFo),e(Ye,BFo),e(Ye,Ia),e(Ia,IFo),e(Ia,cce),e(cce,NFo),e(Ia,qFo),e(Ia,fce),e(fce,jFo),e(Ia,DFo),e(Ia,mce),e(mce,GFo),e(Ia,OFo),e(Ye,VFo),e(Ye,y),e(y,Vp),e(Vp,gce),e(gce,XFo),e(Vp,zFo),e(Vp,Kq),e(Kq,QFo),e(Vp,WFo),e(y,HFo),e(y,Xp),e(Xp,hce),e(hce,UFo),e(Xp,JFo),e(Xp,Zq),e(Zq,YFo),e(Xp,KFo),e(y,ZFo),e(y,zp),e(zp,pce),e(pce,eTo),e(zp,oTo),e(zp,ej),e(ej,rTo),e(zp,tTo),e(y,aTo),e(y,Qp),e(Qp,_ce),e(_ce,nTo),e(Qp,sTo),e(Qp,oj),e(oj,lTo),e(Qp,iTo),e(y,dTo),e(y,Wp),e(Wp,uce),e(uce,cTo),e(Wp,fTo),e(Wp,rj),e(rj,mTo),e(Wp,gTo),e(y,hTo),e(y,Hp),e(Hp,bce),e(bce,pTo),e(Hp,_To),e(Hp,tj),e(tj,uTo),e(Hp,bTo),e(y,vTo),e(y,Up),e(Up,vce),e(vce,FTo),e(Up,TTo),e(Up,aj),e(aj,MTo),e(Up,ETo),e(y,CTo),e(y,Jp),e(Jp,Fce),e(Fce,wTo),e(Jp,ATo),e(Jp,nj),e(nj,LTo),e(Jp,yTo),e(y,xTo),e(y,Yp),e(Yp,Tce),e(Tce,$To),e(Yp,kTo),e(Yp,sj),e(sj,STo),e(Yp,RTo),e(y,PTo),e(y,Kp),e(Kp,Mce),e(Mce,BTo),e(Kp,ITo),e(Kp,lj),e(lj,NTo),e(Kp,qTo),e(y,jTo),e(y,Zp),e(Zp,Ece),e(Ece,DTo),e(Zp,GTo),e(Zp,ij),e(ij,OTo),e(Zp,VTo),e(y,XTo),e(y,e_),e(e_,Cce),e(Cce,zTo),e(e_,QTo),e(e_,dj),e(dj,WTo),e(e_,HTo),e(y,UTo),e(y,o_),e(o_,wce),e(wce,JTo),e(o_,YTo),e(o_,cj),e(cj,KTo),e(o_,ZTo),e(y,e8o),e(y,r_),e(r_,Ace),e(Ace,o8o),e(r_,r8o),e(r_,fj),e(fj,t8o),e(r_,a8o),e(y,n8o),e(y,t_),e(t_,Lce),e(Lce,s8o),e(t_,l8o),e(t_,mj),e(mj,i8o),e(t_,d8o),e(y,c8o),e(y,a_),e(a_,yce),e(yce,f8o),e(a_,m8o),e(a_,gj),e(gj,g8o),e(a_,h8o),e(y,p8o),e(y,n_),e(n_,xce),e(xce,_8o),e(n_,u8o),e(n_,hj),e(hj,b8o),e(n_,v8o),e(y,F8o),e(y,s_),e(s_,$ce),e($ce,T8o),e(s_,M8o),e(s_,pj),e(pj,E8o),e(s_,C8o),e(y,w8o),e(y,l_),e(l_,kce),e(kce,A8o),e(l_,L8o),e(l_,_j),e(_j,y8o),e(l_,x8o),e(y,$8o),e(y,i_),e(i_,Sce),e(Sce,k8o),e(i_,S8o),e(i_,uj),e(uj,R8o),e(i_,P8o),e(y,B8o),e(y,d_),e(d_,Rce),e(Rce,I8o),e(d_,N8o),e(d_,bj),e(bj,q8o),e(d_,j8o),e(y,D8o),e(y,c_),e(c_,Pce),e(Pce,G8o),e(c_,O8o),e(c_,vj),e(vj,V8o),e(c_,X8o),e(y,z8o),e(y,f_),e(f_,Bce),e(Bce,Q8o),e(f_,W8o),e(f_,Fj),e(Fj,H8o),e(f_,U8o),e(y,J8o),e(y,m_),e(m_,Ice),e(Ice,Y8o),e(m_,K8o),e(m_,Tj),e(Tj,Z8o),e(m_,eMo),e(y,oMo),e(y,g_),e(g_,Nce),e(Nce,rMo),e(g_,tMo),e(g_,Mj),e(Mj,aMo),e(g_,nMo),e(y,sMo),e(y,h_),e(h_,qce),e(qce,lMo),e(h_,iMo),e(h_,Ej),e(Ej,dMo),e(h_,cMo),e(y,fMo),e(y,p_),e(p_,jce),e(jce,mMo),e(p_,gMo),e(p_,Cj),e(Cj,hMo),e(p_,pMo),e(y,_Mo),e(y,__),e(__,Dce),e(Dce,uMo),e(__,bMo),e(__,wj),e(wj,vMo),e(__,FMo),e(y,TMo),e(y,u_),e(u_,Gce),e(Gce,MMo),e(u_,EMo),e(u_,Aj),e(Aj,CMo),e(u_,wMo),e(y,AMo),e(y,b_),e(b_,Oce),e(Oce,LMo),e(b_,yMo),e(b_,Lj),e(Lj,xMo),e(b_,$Mo),e(y,kMo),e(y,v_),e(v_,Vce),e(Vce,SMo),e(v_,RMo),e(v_,yj),e(yj,PMo),e(v_,BMo),e(y,IMo),e(y,F_),e(F_,Xce),e(Xce,NMo),e(F_,qMo),e(F_,xj),e(xj,jMo),e(F_,DMo),e(y,GMo),e(y,T_),e(T_,zce),e(zce,OMo),e(T_,VMo),e(T_,$j),e($j,XMo),e(T_,zMo),e(y,QMo),e(y,M_),e(M_,Qce),e(Qce,WMo),e(M_,HMo),e(M_,kj),e(kj,UMo),e(M_,JMo),e(y,YMo),e(y,Ws),e(Ws,Wce),e(Wce,KMo),e(Ws,ZMo),e(Ws,Sj),e(Sj,e4o),e(Ws,o4o),e(Ws,Rj),e(Rj,r4o),e(Ws,t4o),e(y,a4o),e(y,E_),e(E_,Hce),e(Hce,n4o),e(E_,s4o),e(E_,Pj),e(Pj,l4o),e(E_,i4o),e(y,d4o),e(y,C_),e(C_,Uce),e(Uce,c4o),e(C_,f4o),e(C_,Bj),e(Bj,m4o),e(C_,g4o),e(y,h4o),e(y,w_),e(w_,Jce),e(Jce,p4o),e(w_,_4o),e(w_,Ij),e(Ij,u4o),e(w_,b4o),e(y,v4o),e(y,A_),e(A_,Yce),e(Yce,F4o),e(A_,T4o),e(A_,Nj),e(Nj,M4o),e(A_,E4o),e(y,C4o),e(y,L_),e(L_,Kce),e(Kce,w4o),e(L_,A4o),e(L_,qj),e(qj,L4o),e(L_,y4o),e(y,x4o),e(y,y_),e(y_,Zce),e(Zce,$4o),e(y_,k4o),e(y_,jj),e(jj,S4o),e(y_,R4o),e(y,P4o),e(y,x_),e(x_,efe),e(efe,B4o),e(x_,I4o),e(x_,Dj),e(Dj,N4o),e(x_,q4o),e(y,j4o),e(y,$_),e($_,ofe),e(ofe,D4o),e($_,G4o),e($_,Gj),e(Gj,O4o),e($_,V4o),e(y,X4o),e(y,k_),e(k_,rfe),e(rfe,z4o),e(k_,Q4o),e(k_,Oj),e(Oj,W4o),e(k_,H4o),e(y,U4o),e(y,S_),e(S_,tfe),e(tfe,J4o),e(S_,Y4o),e(S_,Vj),e(Vj,K4o),e(S_,Z4o),e(y,eEo),e(y,R_),e(R_,afe),e(afe,oEo),e(R_,rEo),e(R_,Xj),e(Xj,tEo),e(R_,aEo),e(y,nEo),e(y,P_),e(P_,nfe),e(nfe,sEo),e(P_,lEo),e(P_,zj),e(zj,iEo),e(P_,dEo),e(y,cEo),e(y,B_),e(B_,sfe),e(sfe,fEo),e(B_,mEo),e(B_,Qj),e(Qj,gEo),e(B_,hEo),e(y,pEo),e(y,I_),e(I_,lfe),e(lfe,_Eo),e(I_,uEo),e(I_,Wj),e(Wj,bEo),e(I_,vEo),e(y,FEo),e(y,N_),e(N_,ife),e(ife,TEo),e(N_,MEo),e(N_,Hj),e(Hj,EEo),e(N_,CEo),e(y,wEo),e(y,q_),e(q_,dfe),e(dfe,AEo),e(q_,LEo),e(q_,Uj),e(Uj,yEo),e(q_,xEo),e(y,$Eo),e(y,j_),e(j_,cfe),e(cfe,kEo),e(j_,SEo),e(j_,Jj),e(Jj,REo),e(j_,PEo),e(y,BEo),e(y,D_),e(D_,ffe),e(ffe,IEo),e(D_,NEo),e(D_,Yj),e(Yj,qEo),e(D_,jEo),e(y,DEo),e(y,G_),e(G_,mfe),e(mfe,GEo),e(G_,OEo),e(G_,Kj),e(Kj,VEo),e(G_,XEo),e(y,zEo),e(y,O_),e(O_,gfe),e(gfe,QEo),e(O_,WEo),e(O_,Zj),e(Zj,HEo),e(O_,UEo),e(y,JEo),e(y,V_),e(V_,hfe),e(hfe,YEo),e(V_,KEo),e(V_,eD),e(eD,ZEo),e(V_,eCo),e(y,oCo),e(y,X_),e(X_,pfe),e(pfe,rCo),e(X_,tCo),e(X_,oD),e(oD,aCo),e(X_,nCo),e(y,sCo),e(y,z_),e(z_,_fe),e(_fe,lCo),e(z_,iCo),e(z_,rD),e(rD,dCo),e(z_,cCo),e(y,fCo),e(y,Q_),e(Q_,ufe),e(ufe,mCo),e(Q_,gCo),e(Q_,tD),e(tD,hCo),e(Q_,pCo),e(y,_Co),e(y,W_),e(W_,bfe),e(bfe,uCo),e(W_,bCo),e(W_,aD),e(aD,vCo),e(W_,FCo),e(y,TCo),e(y,H_),e(H_,vfe),e(vfe,MCo),e(H_,ECo),e(H_,nD),e(nD,CCo),e(H_,wCo),e(y,ACo),e(y,U_),e(U_,Ffe),e(Ffe,LCo),e(U_,yCo),e(U_,sD),e(sD,xCo),e(U_,$Co),e(y,kCo),e(y,J_),e(J_,Tfe),e(Tfe,SCo),e(J_,RCo),e(J_,lD),e(lD,PCo),e(J_,BCo),e(y,ICo),e(y,Y_),e(Y_,Mfe),e(Mfe,NCo),e(Y_,qCo),e(Y_,iD),e(iD,jCo),e(Y_,DCo),e(y,GCo),e(y,K_),e(K_,Efe),e(Efe,OCo),e(K_,VCo),e(K_,dD),e(dD,XCo),e(K_,zCo),e(y,QCo),e(y,Z_),e(Z_,Cfe),e(Cfe,WCo),e(Z_,HCo),e(Z_,cD),e(cD,UCo),e(Z_,JCo),e(y,YCo),e(y,eu),e(eu,wfe),e(wfe,KCo),e(eu,ZCo),e(eu,fD),e(fD,e3o),e(eu,o3o),e(y,r3o),e(y,ou),e(ou,Afe),e(Afe,t3o),e(ou,a3o),e(ou,mD),e(mD,n3o),e(ou,s3o),e(y,l3o),e(y,ru),e(ru,Lfe),e(Lfe,i3o),e(ru,d3o),e(ru,gD),e(gD,c3o),e(ru,f3o),e(y,m3o),e(y,tu),e(tu,yfe),e(yfe,g3o),e(tu,h3o),e(tu,hD),e(hD,p3o),e(tu,_3o),e(y,u3o),e(y,au),e(au,xfe),e(xfe,b3o),e(au,v3o),e(au,pD),e(pD,F3o),e(au,T3o),e(y,M3o),e(y,nu),e(nu,$fe),e($fe,E3o),e(nu,C3o),e(nu,_D),e(_D,w3o),e(nu,A3o),e(y,L3o),e(y,su),e(su,kfe),e(kfe,y3o),e(su,x3o),e(su,uD),e(uD,$3o),e(su,k3o),e(y,S3o),e(y,lu),e(lu,Sfe),e(Sfe,R3o),e(lu,P3o),e(lu,bD),e(bD,B3o),e(lu,I3o),e(y,N3o),e(y,iu),e(iu,Rfe),e(Rfe,q3o),e(iu,j3o),e(iu,vD),e(vD,D3o),e(iu,G3o),e(y,O3o),e(y,du),e(du,Pfe),e(Pfe,V3o),e(du,X3o),e(du,FD),e(FD,z3o),e(du,Q3o),e(y,W3o),e(y,cu),e(cu,Bfe),e(Bfe,H3o),e(cu,U3o),e(cu,TD),e(TD,J3o),e(cu,Y3o),e(y,K3o),e(y,fu),e(fu,Ife),e(Ife,Z3o),e(fu,e5o),e(fu,MD),e(MD,o5o),e(fu,r5o),e(y,t5o),e(y,mu),e(mu,Nfe),e(Nfe,a5o),e(mu,n5o),e(mu,ED),e(ED,s5o),e(mu,l5o),e(y,i5o),e(y,gu),e(gu,qfe),e(qfe,d5o),e(gu,c5o),e(gu,CD),e(CD,f5o),e(gu,m5o),e(y,g5o),e(y,hu),e(hu,jfe),e(jfe,h5o),e(hu,p5o),e(hu,wD),e(wD,_5o),e(hu,u5o),e(y,b5o),e(y,pu),e(pu,Dfe),e(Dfe,v5o),e(pu,F5o),e(pu,AD),e(AD,T5o),e(pu,M5o),e(y,E5o),e(y,_u),e(_u,Gfe),e(Gfe,C5o),e(_u,w5o),e(_u,LD),e(LD,A5o),e(_u,L5o),e(y,y5o),e(y,uu),e(uu,Ofe),e(Ofe,x5o),e(uu,$5o),e(uu,yD),e(yD,k5o),e(uu,S5o),e(y,R5o),e(y,bu),e(bu,Vfe),e(Vfe,P5o),e(bu,B5o),e(bu,xD),e(xD,I5o),e(bu,N5o),e(y,q5o),e(y,vu),e(vu,Xfe),e(Xfe,j5o),e(vu,D5o),e(vu,$D),e($D,G5o),e(vu,O5o),e(y,V5o),e(y,Fu),e(Fu,zfe),e(zfe,X5o),e(Fu,z5o),e(Fu,kD),e(kD,Q5o),e(Fu,W5o),e(y,H5o),e(y,Tu),e(Tu,Qfe),e(Qfe,U5o),e(Tu,J5o),e(Tu,SD),e(SD,Y5o),e(Tu,K5o),e(y,Z5o),e(y,Mu),e(Mu,Wfe),e(Wfe,ewo),e(Mu,owo),e(Mu,RD),e(RD,rwo),e(Mu,two),e(y,awo),e(y,Eu),e(Eu,Hfe),e(Hfe,nwo),e(Eu,swo),e(Eu,PD),e(PD,lwo),e(Eu,iwo),e(y,dwo),e(y,Cu),e(Cu,Ufe),e(Ufe,cwo),e(Cu,fwo),e(Cu,BD),e(BD,mwo),e(Cu,gwo),e(y,hwo),e(y,wu),e(wu,Jfe),e(Jfe,pwo),e(wu,_wo),e(wu,ID),e(ID,uwo),e(wu,bwo),e(y,vwo),e(y,Au),e(Au,Yfe),e(Yfe,Fwo),e(Au,Two),e(Au,ND),e(ND,Mwo),e(Au,Ewo),e(y,Cwo),e(y,Lu),e(Lu,Kfe),e(Kfe,wwo),e(Lu,Awo),e(Lu,qD),e(qD,Lwo),e(Lu,ywo),e(y,xwo),e(y,yu),e(yu,Zfe),e(Zfe,$wo),e(yu,kwo),e(yu,jD),e(jD,Swo),e(yu,Rwo),e(y,Pwo),e(y,xu),e(xu,eme),e(eme,Bwo),e(xu,Iwo),e(xu,DD),e(DD,Nwo),e(xu,qwo),e(y,jwo),e(y,$u),e($u,ome),e(ome,Dwo),e($u,Gwo),e($u,GD),e(GD,Owo),e($u,Vwo),e(y,Xwo),e(y,ku),e(ku,rme),e(rme,zwo),e(ku,Qwo),e(ku,OD),e(OD,Wwo),e(ku,Hwo),e(y,Uwo),e(y,Su),e(Su,tme),e(tme,Jwo),e(Su,Ywo),e(Su,VD),e(VD,Kwo),e(Su,Zwo),e(y,eAo),e(y,Ru),e(Ru,ame),e(ame,oAo),e(Ru,rAo),e(Ru,XD),e(XD,tAo),e(Ru,aAo),e(y,nAo),e(y,Pu),e(Pu,nme),e(nme,sAo),e(Pu,lAo),e(Pu,zD),e(zD,iAo),e(Pu,dAo),e(y,cAo),e(y,Bu),e(Bu,sme),e(sme,fAo),e(Bu,mAo),e(Bu,QD),e(QD,gAo),e(Bu,hAo),e(y,pAo),e(y,Iu),e(Iu,lme),e(lme,_Ao),e(Iu,uAo),e(Iu,WD),e(WD,bAo),e(Iu,vAo),e(y,FAo),e(y,Nu),e(Nu,ime),e(ime,TAo),e(Nu,MAo),e(Nu,HD),e(HD,EAo),e(Nu,CAo),e(y,wAo),e(y,qu),e(qu,dme),e(dme,AAo),e(qu,LAo),e(qu,UD),e(UD,yAo),e(qu,xAo),e(y,$Ao),e(y,ju),e(ju,cme),e(cme,kAo),e(ju,SAo),e(ju,JD),e(JD,RAo),e(ju,PAo),e(y,BAo),e(y,Du),e(Du,fme),e(fme,IAo),e(Du,NAo),e(Du,YD),e(YD,qAo),e(Du,jAo),e(y,DAo),e(y,Gu),e(Gu,mme),e(mme,GAo),e(Gu,OAo),e(Gu,KD),e(KD,VAo),e(Gu,XAo),e(y,zAo),e(y,Ou),e(Ou,gme),e(gme,QAo),e(Ou,WAo),e(Ou,ZD),e(ZD,HAo),e(Ou,UAo),e(y,JAo),e(y,Vu),e(Vu,hme),e(hme,YAo),e(Vu,KAo),e(Vu,eG),e(eG,ZAo),e(Vu,e6o),e(y,o6o),e(y,Xu),e(Xu,pme),e(pme,r6o),e(Xu,t6o),e(Xu,oG),e(oG,a6o),e(Xu,n6o),e(Ye,s6o),e(Ye,zu),e(zu,l6o),e(zu,_me),e(_me,i6o),e(zu,d6o),e(zu,ume),e(ume,c6o),e(Ye,f6o),M(Qu,Ye,null),b(f,FXe,u),b(f,Xi,u),e(Xi,Wu),e(Wu,bme),M(NL,bme,null),e(Xi,m6o),e(Xi,vme),e(vme,g6o),b(f,TXe,u),b(f,ko,u),M(qL,ko,null),e(ko,h6o),e(ko,zi),e(zi,p6o),e(zi,rG),e(rG,_6o),e(zi,u6o),e(zi,tG),e(tG,b6o),e(zi,v6o),e(ko,F6o),e(ko,jL),e(jL,T6o),e(jL,Fme),e(Fme,M6o),e(jL,E6o),e(ko,C6o),e(ko,dt),M(DL,dt,null),e(dt,w6o),e(dt,Tme),e(Tme,A6o),e(dt,L6o),e(dt,Qi),e(Qi,y6o),e(Qi,Mme),e(Mme,x6o),e(Qi,$6o),e(Qi,aG),e(aG,k6o),e(Qi,S6o),e(dt,R6o),M(Hu,dt,null),e(ko,P6o),e(ko,Ke),M(GL,Ke,null),e(Ke,B6o),e(Ke,Eme),e(Eme,I6o),e(Ke,N6o),e(Ke,Na),e(Na,q6o),e(Na,Cme),e(Cme,j6o),e(Na,D6o),e(Na,wme),e(wme,G6o),e(Na,O6o),e(Na,Ame),e(Ame,V6o),e(Na,X6o),e(Ke,z6o),e(Ke,G),e(G,Uu),e(Uu,Lme),e(Lme,Q6o),e(Uu,W6o),e(Uu,nG),e(nG,H6o),e(Uu,U6o),e(G,J6o),e(G,Ju),e(Ju,yme),e(yme,Y6o),e(Ju,K6o),e(Ju,sG),e(sG,Z6o),e(Ju,e7o),e(G,o7o),e(G,Yu),e(Yu,xme),e(xme,r7o),e(Yu,t7o),e(Yu,lG),e(lG,a7o),e(Yu,n7o),e(G,s7o),e(G,Ku),e(Ku,$me),e($me,l7o),e(Ku,i7o),e(Ku,iG),e(iG,d7o),e(Ku,c7o),e(G,f7o),e(G,Zu),e(Zu,kme),e(kme,m7o),e(Zu,g7o),e(Zu,dG),e(dG,h7o),e(Zu,p7o),e(G,_7o),e(G,e2),e(e2,Sme),e(Sme,u7o),e(e2,b7o),e(e2,cG),e(cG,v7o),e(e2,F7o),e(G,T7o),e(G,o2),e(o2,Rme),e(Rme,M7o),e(o2,E7o),e(o2,fG),e(fG,C7o),e(o2,w7o),e(G,A7o),e(G,r2),e(r2,Pme),e(Pme,L7o),e(r2,y7o),e(r2,mG),e(mG,x7o),e(r2,$7o),e(G,k7o),e(G,t2),e(t2,Bme),e(Bme,S7o),e(t2,R7o),e(t2,gG),e(gG,P7o),e(t2,B7o),e(G,I7o),e(G,a2),e(a2,Ime),e(Ime,N7o),e(a2,q7o),e(a2,hG),e(hG,j7o),e(a2,D7o),e(G,G7o),e(G,n2),e(n2,Nme),e(Nme,O7o),e(n2,V7o),e(n2,pG),e(pG,X7o),e(n2,z7o),e(G,Q7o),e(G,s2),e(s2,qme),e(qme,W7o),e(s2,H7o),e(s2,_G),e(_G,U7o),e(s2,J7o),e(G,Y7o),e(G,l2),e(l2,jme),e(jme,K7o),e(l2,Z7o),e(l2,uG),e(uG,eLo),e(l2,oLo),e(G,rLo),e(G,i2),e(i2,Dme),e(Dme,tLo),e(i2,aLo),e(i2,bG),e(bG,nLo),e(i2,sLo),e(G,lLo),e(G,d2),e(d2,Gme),e(Gme,iLo),e(d2,dLo),e(d2,vG),e(vG,cLo),e(d2,fLo),e(G,mLo),e(G,c2),e(c2,Ome),e(Ome,gLo),e(c2,hLo),e(c2,FG),e(FG,pLo),e(c2,_Lo),e(G,uLo),e(G,f2),e(f2,Vme),e(Vme,bLo),e(f2,vLo),e(f2,TG),e(TG,FLo),e(f2,TLo),e(G,MLo),e(G,m2),e(m2,Xme),e(Xme,ELo),e(m2,CLo),e(m2,MG),e(MG,wLo),e(m2,ALo),e(G,LLo),e(G,g2),e(g2,zme),e(zme,yLo),e(g2,xLo),e(g2,EG),e(EG,$Lo),e(g2,kLo),e(G,SLo),e(G,h2),e(h2,Qme),e(Qme,RLo),e(h2,PLo),e(h2,CG),e(CG,BLo),e(h2,ILo),e(G,NLo),e(G,p2),e(p2,Wme),e(Wme,qLo),e(p2,jLo),e(p2,wG),e(wG,DLo),e(p2,GLo),e(G,OLo),e(G,_2),e(_2,Hme),e(Hme,VLo),e(_2,XLo),e(_2,AG),e(AG,zLo),e(_2,QLo),e(G,WLo),e(G,u2),e(u2,Ume),e(Ume,HLo),e(u2,ULo),e(u2,LG),e(LG,JLo),e(u2,YLo),e(G,KLo),e(G,b2),e(b2,Jme),e(Jme,ZLo),e(b2,eyo),e(b2,yG),e(yG,oyo),e(b2,ryo),e(G,tyo),e(G,v2),e(v2,Yme),e(Yme,ayo),e(v2,nyo),e(v2,xG),e(xG,syo),e(v2,lyo),e(G,iyo),e(G,F2),e(F2,Kme),e(Kme,dyo),e(F2,cyo),e(F2,$G),e($G,fyo),e(F2,myo),e(G,gyo),e(G,T2),e(T2,Zme),e(Zme,hyo),e(T2,pyo),e(T2,kG),e(kG,_yo),e(T2,uyo),e(G,byo),e(G,M2),e(M2,ege),e(ege,vyo),e(M2,Fyo),e(M2,SG),e(SG,Tyo),e(M2,Myo),e(G,Eyo),e(G,E2),e(E2,oge),e(oge,Cyo),e(E2,wyo),e(E2,RG),e(RG,Ayo),e(E2,Lyo),e(G,yyo),e(G,C2),e(C2,rge),e(rge,xyo),e(C2,$yo),e(C2,PG),e(PG,kyo),e(C2,Syo),e(G,Ryo),e(G,w2),e(w2,tge),e(tge,Pyo),e(w2,Byo),e(w2,BG),e(BG,Iyo),e(w2,Nyo),e(G,qyo),e(G,A2),e(A2,age),e(age,jyo),e(A2,Dyo),e(A2,IG),e(IG,Gyo),e(A2,Oyo),e(G,Vyo),e(G,L2),e(L2,nge),e(nge,Xyo),e(L2,zyo),e(L2,NG),e(NG,Qyo),e(L2,Wyo),e(G,Hyo),e(G,y2),e(y2,sge),e(sge,Uyo),e(y2,Jyo),e(y2,qG),e(qG,Yyo),e(y2,Kyo),e(G,Zyo),e(G,x2),e(x2,lge),e(lge,e9o),e(x2,o9o),e(x2,jG),e(jG,r9o),e(x2,t9o),e(G,a9o),e(G,$2),e($2,ige),e(ige,n9o),e($2,s9o),e($2,DG),e(DG,l9o),e($2,i9o),e(G,d9o),e(G,k2),e(k2,dge),e(dge,c9o),e(k2,f9o),e(k2,GG),e(GG,m9o),e(k2,g9o),e(G,h9o),e(G,S2),e(S2,cge),e(cge,p9o),e(S2,_9o),e(S2,OG),e(OG,u9o),e(S2,b9o),e(G,v9o),e(G,R2),e(R2,fge),e(fge,F9o),e(R2,T9o),e(R2,VG),e(VG,M9o),e(R2,E9o),e(G,C9o),e(G,P2),e(P2,mge),e(mge,w9o),e(P2,A9o),e(P2,XG),e(XG,L9o),e(P2,y9o),e(G,x9o),e(G,B2),e(B2,gge),e(gge,$9o),e(B2,k9o),e(B2,zG),e(zG,S9o),e(B2,R9o),e(G,P9o),e(G,I2),e(I2,hge),e(hge,B9o),e(I2,I9o),e(I2,QG),e(QG,N9o),e(I2,q9o),e(G,j9o),e(G,N2),e(N2,pge),e(pge,D9o),e(N2,G9o),e(N2,WG),e(WG,O9o),e(N2,V9o),e(G,X9o),e(G,q2),e(q2,_ge),e(_ge,z9o),e(q2,Q9o),e(q2,HG),e(HG,W9o),e(q2,H9o),e(G,U9o),e(G,j2),e(j2,uge),e(uge,J9o),e(j2,Y9o),e(j2,UG),e(UG,K9o),e(j2,Z9o),e(Ke,exo),e(Ke,D2),e(D2,oxo),e(D2,bge),e(bge,rxo),e(D2,txo),e(D2,vge),e(vge,axo),e(Ke,nxo),M(G2,Ke,null),b(f,MXe,u),b(f,Wi,u),e(Wi,O2),e(O2,Fge),M(OL,Fge,null),e(Wi,sxo),e(Wi,Tge),e(Tge,lxo),b(f,EXe,u),b(f,So,u),M(VL,So,null),e(So,ixo),e(So,Hi),e(Hi,dxo),e(Hi,JG),e(JG,cxo),e(Hi,fxo),e(Hi,YG),e(YG,mxo),e(Hi,gxo),e(So,hxo),e(So,XL),e(XL,pxo),e(XL,Mge),e(Mge,_xo),e(XL,uxo),e(So,bxo),e(So,ct),M(zL,ct,null),e(ct,vxo),e(ct,Ege),e(Ege,Fxo),e(ct,Txo),e(ct,Ui),e(Ui,Mxo),e(Ui,Cge),e(Cge,Exo),e(Ui,Cxo),e(Ui,KG),e(KG,wxo),e(Ui,Axo),e(ct,Lxo),M(V2,ct,null),e(So,yxo),e(So,Ze),M(QL,Ze,null),e(Ze,xxo),e(Ze,wge),e(wge,$xo),e(Ze,kxo),e(Ze,qa),e(qa,Sxo),e(qa,Age),e(Age,Rxo),e(qa,Pxo),e(qa,Lge),e(Lge,Bxo),e(qa,Ixo),e(qa,yge),e(yge,Nxo),e(qa,qxo),e(Ze,jxo),e(Ze,z),e(z,X2),e(X2,xge),e(xge,Dxo),e(X2,Gxo),e(X2,ZG),e(ZG,Oxo),e(X2,Vxo),e(z,Xxo),e(z,z2),e(z2,$ge),e($ge,zxo),e(z2,Qxo),e(z2,eO),e(eO,Wxo),e(z2,Hxo),e(z,Uxo),e(z,Q2),e(Q2,kge),e(kge,Jxo),e(Q2,Yxo),e(Q2,oO),e(oO,Kxo),e(Q2,Zxo),e(z,e$o),e(z,W2),e(W2,Sge),e(Sge,o$o),e(W2,r$o),e(W2,rO),e(rO,t$o),e(W2,a$o),e(z,n$o),e(z,H2),e(H2,Rge),e(Rge,s$o),e(H2,l$o),e(H2,tO),e(tO,i$o),e(H2,d$o),e(z,c$o),e(z,U2),e(U2,Pge),e(Pge,f$o),e(U2,m$o),e(U2,aO),e(aO,g$o),e(U2,h$o),e(z,p$o),e(z,J2),e(J2,Bge),e(Bge,_$o),e(J2,u$o),e(J2,nO),e(nO,b$o),e(J2,v$o),e(z,F$o),e(z,Y2),e(Y2,Ige),e(Ige,T$o),e(Y2,M$o),e(Y2,sO),e(sO,E$o),e(Y2,C$o),e(z,w$o),e(z,K2),e(K2,Nge),e(Nge,A$o),e(K2,L$o),e(K2,lO),e(lO,y$o),e(K2,x$o),e(z,$$o),e(z,Z2),e(Z2,qge),e(qge,k$o),e(Z2,S$o),e(Z2,iO),e(iO,R$o),e(Z2,P$o),e(z,B$o),e(z,e1),e(e1,jge),e(jge,I$o),e(e1,N$o),e(e1,dO),e(dO,q$o),e(e1,j$o),e(z,D$o),e(z,o1),e(o1,Dge),e(Dge,G$o),e(o1,O$o),e(o1,cO),e(cO,V$o),e(o1,X$o),e(z,z$o),e(z,r1),e(r1,Gge),e(Gge,Q$o),e(r1,W$o),e(r1,fO),e(fO,H$o),e(r1,U$o),e(z,J$o),e(z,t1),e(t1,Oge),e(Oge,Y$o),e(t1,K$o),e(t1,mO),e(mO,Z$o),e(t1,eko),e(z,oko),e(z,a1),e(a1,Vge),e(Vge,rko),e(a1,tko),e(a1,gO),e(gO,ako),e(a1,nko),e(z,sko),e(z,n1),e(n1,Xge),e(Xge,lko),e(n1,iko),e(n1,hO),e(hO,dko),e(n1,cko),e(z,fko),e(z,s1),e(s1,zge),e(zge,mko),e(s1,gko),e(s1,pO),e(pO,hko),e(s1,pko),e(z,_ko),e(z,l1),e(l1,Qge),e(Qge,uko),e(l1,bko),e(l1,_O),e(_O,vko),e(l1,Fko),e(z,Tko),e(z,i1),e(i1,Wge),e(Wge,Mko),e(i1,Eko),e(i1,uO),e(uO,Cko),e(i1,wko),e(z,Ako),e(z,d1),e(d1,Hge),e(Hge,Lko),e(d1,yko),e(d1,bO),e(bO,xko),e(d1,$ko),e(z,kko),e(z,c1),e(c1,Uge),e(Uge,Sko),e(c1,Rko),e(c1,vO),e(vO,Pko),e(c1,Bko),e(z,Iko),e(z,f1),e(f1,Jge),e(Jge,Nko),e(f1,qko),e(f1,FO),e(FO,jko),e(f1,Dko),e(z,Gko),e(z,m1),e(m1,Yge),e(Yge,Oko),e(m1,Vko),e(m1,TO),e(TO,Xko),e(m1,zko),e(z,Qko),e(z,g1),e(g1,Kge),e(Kge,Wko),e(g1,Hko),e(g1,MO),e(MO,Uko),e(g1,Jko),e(z,Yko),e(z,h1),e(h1,Zge),e(Zge,Kko),e(h1,Zko),e(h1,EO),e(EO,eSo),e(h1,oSo),e(z,rSo),e(z,p1),e(p1,ehe),e(ehe,tSo),e(p1,aSo),e(p1,CO),e(CO,nSo),e(p1,sSo),e(z,lSo),e(z,_1),e(_1,ohe),e(ohe,iSo),e(_1,dSo),e(_1,wO),e(wO,cSo),e(_1,fSo),e(z,mSo),e(z,u1),e(u1,rhe),e(rhe,gSo),e(u1,hSo),e(u1,AO),e(AO,pSo),e(u1,_So),e(z,uSo),e(z,b1),e(b1,the),e(the,bSo),e(b1,vSo),e(b1,LO),e(LO,FSo),e(b1,TSo),e(z,MSo),e(z,v1),e(v1,ahe),e(ahe,ESo),e(v1,CSo),e(v1,yO),e(yO,wSo),e(v1,ASo),e(z,LSo),e(z,F1),e(F1,nhe),e(nhe,ySo),e(F1,xSo),e(F1,xO),e(xO,$So),e(F1,kSo),e(z,SSo),e(z,T1),e(T1,she),e(she,RSo),e(T1,PSo),e(T1,$O),e($O,BSo),e(T1,ISo),e(z,NSo),e(z,M1),e(M1,lhe),e(lhe,qSo),e(M1,jSo),e(M1,kO),e(kO,DSo),e(M1,GSo),e(z,OSo),e(z,E1),e(E1,ihe),e(ihe,VSo),e(E1,XSo),e(E1,SO),e(SO,zSo),e(E1,QSo),e(z,WSo),e(z,C1),e(C1,dhe),e(dhe,HSo),e(C1,USo),e(C1,RO),e(RO,JSo),e(C1,YSo),e(z,KSo),e(z,w1),e(w1,che),e(che,ZSo),e(w1,eRo),e(w1,PO),e(PO,oRo),e(w1,rRo),e(z,tRo),e(z,A1),e(A1,fhe),e(fhe,aRo),e(A1,nRo),e(A1,BO),e(BO,sRo),e(A1,lRo),e(z,iRo),e(z,L1),e(L1,mhe),e(mhe,dRo),e(L1,cRo),e(L1,IO),e(IO,fRo),e(L1,mRo),e(z,gRo),e(z,y1),e(y1,ghe),e(ghe,hRo),e(y1,pRo),e(y1,NO),e(NO,_Ro),e(y1,uRo),e(z,bRo),e(z,x1),e(x1,hhe),e(hhe,vRo),e(x1,FRo),e(x1,qO),e(qO,TRo),e(x1,MRo),e(Ze,ERo),e(Ze,$1),e($1,CRo),e($1,phe),e(phe,wRo),e($1,ARo),e($1,_he),e(_he,LRo),e(Ze,yRo),M(k1,Ze,null),b(f,CXe,u),b(f,Ji,u),e(Ji,S1),e(S1,uhe),M(WL,uhe,null),e(Ji,xRo),e(Ji,bhe),e(bhe,$Ro),b(f,wXe,u),b(f,Ro,u),M(HL,Ro,null),e(Ro,kRo),e(Ro,Yi),e(Yi,SRo),e(Yi,jO),e(jO,RRo),e(Yi,PRo),e(Yi,DO),e(DO,BRo),e(Yi,IRo),e(Ro,NRo),e(Ro,UL),e(UL,qRo),e(UL,vhe),e(vhe,jRo),e(UL,DRo),e(Ro,GRo),e(Ro,ft),M(JL,ft,null),e(ft,ORo),e(ft,Fhe),e(Fhe,VRo),e(ft,XRo),e(ft,Ki),e(Ki,zRo),e(Ki,The),e(The,QRo),e(Ki,WRo),e(Ki,GO),e(GO,HRo),e(Ki,URo),e(ft,JRo),M(R1,ft,null),e(Ro,YRo),e(Ro,eo),M(YL,eo,null),e(eo,KRo),e(eo,Mhe),e(Mhe,ZRo),e(eo,ePo),e(eo,ja),e(ja,oPo),e(ja,Ehe),e(Ehe,rPo),e(ja,tPo),e(ja,Che),e(Che,aPo),e(ja,nPo),e(ja,whe),e(whe,sPo),e(ja,lPo),e(eo,iPo),e(eo,W),e(W,P1),e(P1,Ahe),e(Ahe,dPo),e(P1,cPo),e(P1,OO),e(OO,fPo),e(P1,mPo),e(W,gPo),e(W,B1),e(B1,Lhe),e(Lhe,hPo),e(B1,pPo),e(B1,VO),e(VO,_Po),e(B1,uPo),e(W,bPo),e(W,I1),e(I1,yhe),e(yhe,vPo),e(I1,FPo),e(I1,XO),e(XO,TPo),e(I1,MPo),e(W,EPo),e(W,N1),e(N1,xhe),e(xhe,CPo),e(N1,wPo),e(N1,zO),e(zO,APo),e(N1,LPo),e(W,yPo),e(W,q1),e(q1,$he),e($he,xPo),e(q1,$Po),e(q1,QO),e(QO,kPo),e(q1,SPo),e(W,RPo),e(W,j1),e(j1,khe),e(khe,PPo),e(j1,BPo),e(j1,WO),e(WO,IPo),e(j1,NPo),e(W,qPo),e(W,D1),e(D1,She),e(She,jPo),e(D1,DPo),e(D1,HO),e(HO,GPo),e(D1,OPo),e(W,VPo),e(W,G1),e(G1,Rhe),e(Rhe,XPo),e(G1,zPo),e(G1,UO),e(UO,QPo),e(G1,WPo),e(W,HPo),e(W,O1),e(O1,Phe),e(Phe,UPo),e(O1,JPo),e(O1,JO),e(JO,YPo),e(O1,KPo),e(W,ZPo),e(W,V1),e(V1,Bhe),e(Bhe,eBo),e(V1,oBo),e(V1,YO),e(YO,rBo),e(V1,tBo),e(W,aBo),e(W,X1),e(X1,Ihe),e(Ihe,nBo),e(X1,sBo),e(X1,KO),e(KO,lBo),e(X1,iBo),e(W,dBo),e(W,z1),e(z1,Nhe),e(Nhe,cBo),e(z1,fBo),e(z1,ZO),e(ZO,mBo),e(z1,gBo),e(W,hBo),e(W,Q1),e(Q1,qhe),e(qhe,pBo),e(Q1,_Bo),e(Q1,eV),e(eV,uBo),e(Q1,bBo),e(W,vBo),e(W,W1),e(W1,jhe),e(jhe,FBo),e(W1,TBo),e(W1,oV),e(oV,MBo),e(W1,EBo),e(W,CBo),e(W,H1),e(H1,Dhe),e(Dhe,wBo),e(H1,ABo),e(H1,rV),e(rV,LBo),e(H1,yBo),e(W,xBo),e(W,U1),e(U1,Ghe),e(Ghe,$Bo),e(U1,kBo),e(U1,tV),e(tV,SBo),e(U1,RBo),e(W,PBo),e(W,J1),e(J1,Ohe),e(Ohe,BBo),e(J1,IBo),e(J1,aV),e(aV,NBo),e(J1,qBo),e(W,jBo),e(W,Y1),e(Y1,Vhe),e(Vhe,DBo),e(Y1,GBo),e(Y1,nV),e(nV,OBo),e(Y1,VBo),e(W,XBo),e(W,K1),e(K1,Xhe),e(Xhe,zBo),e(K1,QBo),e(K1,sV),e(sV,WBo),e(K1,HBo),e(W,UBo),e(W,Z1),e(Z1,zhe),e(zhe,JBo),e(Z1,YBo),e(Z1,lV),e(lV,KBo),e(Z1,ZBo),e(W,eIo),e(W,eb),e(eb,Qhe),e(Qhe,oIo),e(eb,rIo),e(eb,iV),e(iV,tIo),e(eb,aIo),e(W,nIo),e(W,ob),e(ob,Whe),e(Whe,sIo),e(ob,lIo),e(ob,dV),e(dV,iIo),e(ob,dIo),e(W,cIo),e(W,rb),e(rb,Hhe),e(Hhe,fIo),e(rb,mIo),e(rb,cV),e(cV,gIo),e(rb,hIo),e(W,pIo),e(W,tb),e(tb,Uhe),e(Uhe,_Io),e(tb,uIo),e(tb,fV),e(fV,bIo),e(tb,vIo),e(W,FIo),e(W,ab),e(ab,Jhe),e(Jhe,TIo),e(ab,MIo),e(ab,mV),e(mV,EIo),e(ab,CIo),e(W,wIo),e(W,nb),e(nb,Yhe),e(Yhe,AIo),e(nb,LIo),e(nb,gV),e(gV,yIo),e(nb,xIo),e(W,$Io),e(W,sb),e(sb,Khe),e(Khe,kIo),e(sb,SIo),e(sb,hV),e(hV,RIo),e(sb,PIo),e(W,BIo),e(W,lb),e(lb,Zhe),e(Zhe,IIo),e(lb,NIo),e(lb,pV),e(pV,qIo),e(lb,jIo),e(W,DIo),e(W,ib),e(ib,epe),e(epe,GIo),e(ib,OIo),e(ib,_V),e(_V,VIo),e(ib,XIo),e(W,zIo),e(W,db),e(db,ope),e(ope,QIo),e(db,WIo),e(db,uV),e(uV,HIo),e(db,UIo),e(W,JIo),e(W,cb),e(cb,rpe),e(rpe,YIo),e(cb,KIo),e(cb,bV),e(bV,ZIo),e(cb,eNo),e(W,oNo),e(W,fb),e(fb,tpe),e(tpe,rNo),e(fb,tNo),e(fb,vV),e(vV,aNo),e(fb,nNo),e(W,sNo),e(W,mb),e(mb,ape),e(ape,lNo),e(mb,iNo),e(mb,FV),e(FV,dNo),e(mb,cNo),e(W,fNo),e(W,gb),e(gb,npe),e(npe,mNo),e(gb,gNo),e(gb,spe),e(spe,hNo),e(gb,pNo),e(W,_No),e(W,hb),e(hb,lpe),e(lpe,uNo),e(hb,bNo),e(hb,TV),e(TV,vNo),e(hb,FNo),e(W,TNo),e(W,pb),e(pb,ipe),e(ipe,MNo),e(pb,ENo),e(pb,MV),e(MV,CNo),e(pb,wNo),e(W,ANo),e(W,_b),e(_b,dpe),e(dpe,LNo),e(_b,yNo),e(_b,EV),e(EV,xNo),e(_b,$No),e(W,kNo),e(W,ub),e(ub,cpe),e(cpe,SNo),e(ub,RNo),e(ub,CV),e(CV,PNo),e(ub,BNo),e(eo,INo),e(eo,bb),e(bb,NNo),e(bb,fpe),e(fpe,qNo),e(bb,jNo),e(bb,mpe),e(mpe,DNo),e(eo,GNo),M(vb,eo,null),b(f,AXe,u),b(f,Zi,u),e(Zi,Fb),e(Fb,gpe),M(KL,gpe,null),e(Zi,ONo),e(Zi,hpe),e(hpe,VNo),b(f,LXe,u),b(f,Po,u),M(ZL,Po,null),e(Po,XNo),e(Po,ed),e(ed,zNo),e(ed,wV),e(wV,QNo),e(ed,WNo),e(ed,AV),e(AV,HNo),e(ed,UNo),e(Po,JNo),e(Po,ey),e(ey,YNo),e(ey,ppe),e(ppe,KNo),e(ey,ZNo),e(Po,eqo),e(Po,mt),M(oy,mt,null),e(mt,oqo),e(mt,_pe),e(_pe,rqo),e(mt,tqo),e(mt,od),e(od,aqo),e(od,upe),e(upe,nqo),e(od,sqo),e(od,LV),e(LV,lqo),e(od,iqo),e(mt,dqo),M(Tb,mt,null),e(Po,cqo),e(Po,oo),M(ry,oo,null),e(oo,fqo),e(oo,bpe),e(bpe,mqo),e(oo,gqo),e(oo,Da),e(Da,hqo),e(Da,vpe),e(vpe,pqo),e(Da,_qo),e(Da,Fpe),e(Fpe,uqo),e(Da,bqo),e(Da,Tpe),e(Tpe,vqo),e(Da,Fqo),e(oo,Tqo),e(oo,pe),e(pe,Mb),e(Mb,Mpe),e(Mpe,Mqo),e(Mb,Eqo),e(Mb,yV),e(yV,Cqo),e(Mb,wqo),e(pe,Aqo),e(pe,Eb),e(Eb,Epe),e(Epe,Lqo),e(Eb,yqo),e(Eb,xV),e(xV,xqo),e(Eb,$qo),e(pe,kqo),e(pe,Cb),e(Cb,Cpe),e(Cpe,Sqo),e(Cb,Rqo),e(Cb,$V),e($V,Pqo),e(Cb,Bqo),e(pe,Iqo),e(pe,wb),e(wb,wpe),e(wpe,Nqo),e(wb,qqo),e(wb,kV),e(kV,jqo),e(wb,Dqo),e(pe,Gqo),e(pe,Ab),e(Ab,Ape),e(Ape,Oqo),e(Ab,Vqo),e(Ab,SV),e(SV,Xqo),e(Ab,zqo),e(pe,Qqo),e(pe,Lb),e(Lb,Lpe),e(Lpe,Wqo),e(Lb,Hqo),e(Lb,RV),e(RV,Uqo),e(Lb,Jqo),e(pe,Yqo),e(pe,yb),e(yb,ype),e(ype,Kqo),e(yb,Zqo),e(yb,PV),e(PV,ejo),e(yb,ojo),e(pe,rjo),e(pe,xb),e(xb,xpe),e(xpe,tjo),e(xb,ajo),e(xb,BV),e(BV,njo),e(xb,sjo),e(pe,ljo),e(pe,$b),e($b,$pe),e($pe,ijo),e($b,djo),e($b,IV),e(IV,cjo),e($b,fjo),e(pe,mjo),e(pe,kb),e(kb,kpe),e(kpe,gjo),e(kb,hjo),e(kb,NV),e(NV,pjo),e(kb,_jo),e(pe,ujo),e(pe,Sb),e(Sb,Spe),e(Spe,bjo),e(Sb,vjo),e(Sb,qV),e(qV,Fjo),e(Sb,Tjo),e(pe,Mjo),e(pe,Rb),e(Rb,Rpe),e(Rpe,Ejo),e(Rb,Cjo),e(Rb,jV),e(jV,wjo),e(Rb,Ajo),e(pe,Ljo),e(pe,Pb),e(Pb,Ppe),e(Ppe,yjo),e(Pb,xjo),e(Pb,DV),e(DV,$jo),e(Pb,kjo),e(pe,Sjo),e(pe,Bb),e(Bb,Bpe),e(Bpe,Rjo),e(Bb,Pjo),e(Bb,GV),e(GV,Bjo),e(Bb,Ijo),e(pe,Njo),e(pe,Ib),e(Ib,Ipe),e(Ipe,qjo),e(Ib,jjo),e(Ib,OV),e(OV,Djo),e(Ib,Gjo),e(pe,Ojo),e(pe,Nb),e(Nb,Npe),e(Npe,Vjo),e(Nb,Xjo),e(Nb,VV),e(VV,zjo),e(Nb,Qjo),e(pe,Wjo),e(pe,qb),e(qb,qpe),e(qpe,Hjo),e(qb,Ujo),e(qb,XV),e(XV,Jjo),e(qb,Yjo),e(pe,Kjo),e(pe,jb),e(jb,jpe),e(jpe,Zjo),e(jb,eDo),e(jb,zV),e(zV,oDo),e(jb,rDo),e(oo,tDo),e(oo,Db),e(Db,aDo),e(Db,Dpe),e(Dpe,nDo),e(Db,sDo),e(Db,Gpe),e(Gpe,lDo),e(oo,iDo),M(Gb,oo,null),b(f,yXe,u),b(f,rd,u),e(rd,Ob),e(Ob,Ope),M(ty,Ope,null),e(rd,dDo),e(rd,Vpe),e(Vpe,cDo),b(f,xXe,u),b(f,Bo,u),M(ay,Bo,null),e(Bo,fDo),e(Bo,td),e(td,mDo),e(td,QV),e(QV,gDo),e(td,hDo),e(td,WV),e(WV,pDo),e(td,_Do),e(Bo,uDo),e(Bo,ny),e(ny,bDo),e(ny,Xpe),e(Xpe,vDo),e(ny,FDo),e(Bo,TDo),e(Bo,gt),M(sy,gt,null),e(gt,MDo),e(gt,zpe),e(zpe,EDo),e(gt,CDo),e(gt,ad),e(ad,wDo),e(ad,Qpe),e(Qpe,ADo),e(ad,LDo),e(ad,HV),e(HV,yDo),e(ad,xDo),e(gt,$Do),M(Vb,gt,null),e(Bo,kDo),e(Bo,ro),M(ly,ro,null),e(ro,SDo),e(ro,Wpe),e(Wpe,RDo),e(ro,PDo),e(ro,Ga),e(Ga,BDo),e(Ga,Hpe),e(Hpe,IDo),e(Ga,NDo),e(Ga,Upe),e(Upe,qDo),e(Ga,jDo),e(Ga,Jpe),e(Jpe,DDo),e(Ga,GDo),e(ro,ODo),e(ro,N),e(N,Xb),e(Xb,Ype),e(Ype,VDo),e(Xb,XDo),e(Xb,UV),e(UV,zDo),e(Xb,QDo),e(N,WDo),e(N,zb),e(zb,Kpe),e(Kpe,HDo),e(zb,UDo),e(zb,JV),e(JV,JDo),e(zb,YDo),e(N,KDo),e(N,Qb),e(Qb,Zpe),e(Zpe,ZDo),e(Qb,eGo),e(Qb,YV),e(YV,oGo),e(Qb,rGo),e(N,tGo),e(N,Wb),e(Wb,e_e),e(e_e,aGo),e(Wb,nGo),e(Wb,KV),e(KV,sGo),e(Wb,lGo),e(N,iGo),e(N,Hb),e(Hb,o_e),e(o_e,dGo),e(Hb,cGo),e(Hb,ZV),e(ZV,fGo),e(Hb,mGo),e(N,gGo),e(N,Ub),e(Ub,r_e),e(r_e,hGo),e(Ub,pGo),e(Ub,eX),e(eX,_Go),e(Ub,uGo),e(N,bGo),e(N,Jb),e(Jb,t_e),e(t_e,vGo),e(Jb,FGo),e(Jb,oX),e(oX,TGo),e(Jb,MGo),e(N,EGo),e(N,Yb),e(Yb,a_e),e(a_e,CGo),e(Yb,wGo),e(Yb,rX),e(rX,AGo),e(Yb,LGo),e(N,yGo),e(N,Kb),e(Kb,n_e),e(n_e,xGo),e(Kb,$Go),e(Kb,tX),e(tX,kGo),e(Kb,SGo),e(N,RGo),e(N,Zb),e(Zb,s_e),e(s_e,PGo),e(Zb,BGo),e(Zb,aX),e(aX,IGo),e(Zb,NGo),e(N,qGo),e(N,ev),e(ev,l_e),e(l_e,jGo),e(ev,DGo),e(ev,nX),e(nX,GGo),e(ev,OGo),e(N,VGo),e(N,ov),e(ov,i_e),e(i_e,XGo),e(ov,zGo),e(ov,sX),e(sX,QGo),e(ov,WGo),e(N,HGo),e(N,rv),e(rv,d_e),e(d_e,UGo),e(rv,JGo),e(rv,lX),e(lX,YGo),e(rv,KGo),e(N,ZGo),e(N,tv),e(tv,c_e),e(c_e,eOo),e(tv,oOo),e(tv,iX),e(iX,rOo),e(tv,tOo),e(N,aOo),e(N,av),e(av,f_e),e(f_e,nOo),e(av,sOo),e(av,dX),e(dX,lOo),e(av,iOo),e(N,dOo),e(N,nv),e(nv,m_e),e(m_e,cOo),e(nv,fOo),e(nv,cX),e(cX,mOo),e(nv,gOo),e(N,hOo),e(N,sv),e(sv,g_e),e(g_e,pOo),e(sv,_Oo),e(sv,fX),e(fX,uOo),e(sv,bOo),e(N,vOo),e(N,lv),e(lv,h_e),e(h_e,FOo),e(lv,TOo),e(lv,mX),e(mX,MOo),e(lv,EOo),e(N,COo),e(N,iv),e(iv,p_e),e(p_e,wOo),e(iv,AOo),e(iv,gX),e(gX,LOo),e(iv,yOo),e(N,xOo),e(N,dv),e(dv,__e),e(__e,$Oo),e(dv,kOo),e(dv,hX),e(hX,SOo),e(dv,ROo),e(N,POo),e(N,cv),e(cv,u_e),e(u_e,BOo),e(cv,IOo),e(cv,pX),e(pX,NOo),e(cv,qOo),e(N,jOo),e(N,fv),e(fv,b_e),e(b_e,DOo),e(fv,GOo),e(fv,_X),e(_X,OOo),e(fv,VOo),e(N,XOo),e(N,mv),e(mv,v_e),e(v_e,zOo),e(mv,QOo),e(mv,uX),e(uX,WOo),e(mv,HOo),e(N,UOo),e(N,gv),e(gv,F_e),e(F_e,JOo),e(gv,YOo),e(gv,bX),e(bX,KOo),e(gv,ZOo),e(N,eVo),e(N,hv),e(hv,T_e),e(T_e,oVo),e(hv,rVo),e(hv,vX),e(vX,tVo),e(hv,aVo),e(N,nVo),e(N,pv),e(pv,M_e),e(M_e,sVo),e(pv,lVo),e(pv,FX),e(FX,iVo),e(pv,dVo),e(N,cVo),e(N,_v),e(_v,E_e),e(E_e,fVo),e(_v,mVo),e(_v,TX),e(TX,gVo),e(_v,hVo),e(N,pVo),e(N,uv),e(uv,C_e),e(C_e,_Vo),e(uv,uVo),e(uv,MX),e(MX,bVo),e(uv,vVo),e(N,FVo),e(N,bv),e(bv,w_e),e(w_e,TVo),e(bv,MVo),e(bv,EX),e(EX,EVo),e(bv,CVo),e(N,wVo),e(N,vv),e(vv,A_e),e(A_e,AVo),e(vv,LVo),e(vv,CX),e(CX,yVo),e(vv,xVo),e(N,$Vo),e(N,Fv),e(Fv,L_e),e(L_e,kVo),e(Fv,SVo),e(Fv,wX),e(wX,RVo),e(Fv,PVo),e(N,BVo),e(N,Tv),e(Tv,y_e),e(y_e,IVo),e(Tv,NVo),e(Tv,AX),e(AX,qVo),e(Tv,jVo),e(N,DVo),e(N,Mv),e(Mv,x_e),e(x_e,GVo),e(Mv,OVo),e(Mv,LX),e(LX,VVo),e(Mv,XVo),e(N,zVo),e(N,Ev),e(Ev,$_e),e($_e,QVo),e(Ev,WVo),e(Ev,yX),e(yX,HVo),e(Ev,UVo),e(N,JVo),e(N,Cv),e(Cv,k_e),e(k_e,YVo),e(Cv,KVo),e(Cv,xX),e(xX,ZVo),e(Cv,eXo),e(N,oXo),e(N,wv),e(wv,S_e),e(S_e,rXo),e(wv,tXo),e(wv,$X),e($X,aXo),e(wv,nXo),e(N,sXo),e(N,Av),e(Av,R_e),e(R_e,lXo),e(Av,iXo),e(Av,kX),e(kX,dXo),e(Av,cXo),e(N,fXo),e(N,Lv),e(Lv,P_e),e(P_e,mXo),e(Lv,gXo),e(Lv,SX),e(SX,hXo),e(Lv,pXo),e(N,_Xo),e(N,yv),e(yv,B_e),e(B_e,uXo),e(yv,bXo),e(yv,RX),e(RX,vXo),e(yv,FXo),e(N,TXo),e(N,xv),e(xv,I_e),e(I_e,MXo),e(xv,EXo),e(xv,PX),e(PX,CXo),e(xv,wXo),e(N,AXo),e(N,$v),e($v,N_e),e(N_e,LXo),e($v,yXo),e($v,BX),e(BX,xXo),e($v,$Xo),e(N,kXo),e(N,kv),e(kv,q_e),e(q_e,SXo),e(kv,RXo),e(kv,IX),e(IX,PXo),e(kv,BXo),e(N,IXo),e(N,Sv),e(Sv,j_e),e(j_e,NXo),e(Sv,qXo),e(Sv,NX),e(NX,jXo),e(Sv,DXo),e(N,GXo),e(N,Rv),e(Rv,D_e),e(D_e,OXo),e(Rv,VXo),e(Rv,qX),e(qX,XXo),e(Rv,zXo),e(N,QXo),e(N,Pv),e(Pv,G_e),e(G_e,WXo),e(Pv,HXo),e(Pv,jX),e(jX,UXo),e(Pv,JXo),e(N,YXo),e(N,Bv),e(Bv,O_e),e(O_e,KXo),e(Bv,ZXo),e(Bv,DX),e(DX,ezo),e(Bv,ozo),e(N,rzo),e(N,Iv),e(Iv,V_e),e(V_e,tzo),e(Iv,azo),e(Iv,GX),e(GX,nzo),e(Iv,szo),e(N,lzo),e(N,Nv),e(Nv,X_e),e(X_e,izo),e(Nv,dzo),e(Nv,OX),e(OX,czo),e(Nv,fzo),e(N,mzo),e(N,qv),e(qv,z_e),e(z_e,gzo),e(qv,hzo),e(qv,VX),e(VX,pzo),e(qv,_zo),e(N,uzo),e(N,jv),e(jv,Q_e),e(Q_e,bzo),e(jv,vzo),e(jv,XX),e(XX,Fzo),e(jv,Tzo),e(ro,Mzo),e(ro,Dv),e(Dv,Ezo),e(Dv,W_e),e(W_e,Czo),e(Dv,wzo),e(Dv,H_e),e(H_e,Azo),e(ro,Lzo),M(Gv,ro,null),b(f,$Xe,u),b(f,nd,u),e(nd,Ov),e(Ov,U_e),M(iy,U_e,null),e(nd,yzo),e(nd,J_e),e(J_e,xzo),b(f,kXe,u),b(f,Io,u),M(dy,Io,null),e(Io,$zo),e(Io,sd),e(sd,kzo),e(sd,zX),e(zX,Szo),e(sd,Rzo),e(sd,QX),e(QX,Pzo),e(sd,Bzo),e(Io,Izo),e(Io,cy),e(cy,Nzo),e(cy,Y_e),e(Y_e,qzo),e(cy,jzo),e(Io,Dzo),e(Io,ht),M(fy,ht,null),e(ht,Gzo),e(ht,K_e),e(K_e,Ozo),e(ht,Vzo),e(ht,ld),e(ld,Xzo),e(ld,Z_e),e(Z_e,zzo),e(ld,Qzo),e(ld,WX),e(WX,Wzo),e(ld,Hzo),e(ht,Uzo),M(Vv,ht,null),e(Io,Jzo),e(Io,to),M(my,to,null),e(to,Yzo),e(to,eue),e(eue,Kzo),e(to,Zzo),e(to,Oa),e(Oa,eQo),e(Oa,oue),e(oue,oQo),e(Oa,rQo),e(Oa,rue),e(rue,tQo),e(Oa,aQo),e(Oa,tue),e(tue,nQo),e(Oa,sQo),e(to,lQo),e(to,Z),e(Z,Xv),e(Xv,aue),e(aue,iQo),e(Xv,dQo),e(Xv,HX),e(HX,cQo),e(Xv,fQo),e(Z,mQo),e(Z,zv),e(zv,nue),e(nue,gQo),e(zv,hQo),e(zv,UX),e(UX,pQo),e(zv,_Qo),e(Z,uQo),e(Z,Qv),e(Qv,sue),e(sue,bQo),e(Qv,vQo),e(Qv,JX),e(JX,FQo),e(Qv,TQo),e(Z,MQo),e(Z,Wv),e(Wv,lue),e(lue,EQo),e(Wv,CQo),e(Wv,YX),e(YX,wQo),e(Wv,AQo),e(Z,LQo),e(Z,Hv),e(Hv,iue),e(iue,yQo),e(Hv,xQo),e(Hv,KX),e(KX,$Qo),e(Hv,kQo),e(Z,SQo),e(Z,Uv),e(Uv,due),e(due,RQo),e(Uv,PQo),e(Uv,ZX),e(ZX,BQo),e(Uv,IQo),e(Z,NQo),e(Z,Jv),e(Jv,cue),e(cue,qQo),e(Jv,jQo),e(Jv,ez),e(ez,DQo),e(Jv,GQo),e(Z,OQo),e(Z,Yv),e(Yv,fue),e(fue,VQo),e(Yv,XQo),e(Yv,oz),e(oz,zQo),e(Yv,QQo),e(Z,WQo),e(Z,Kv),e(Kv,mue),e(mue,HQo),e(Kv,UQo),e(Kv,rz),e(rz,JQo),e(Kv,YQo),e(Z,KQo),e(Z,Zv),e(Zv,gue),e(gue,ZQo),e(Zv,eWo),e(Zv,tz),e(tz,oWo),e(Zv,rWo),e(Z,tWo),e(Z,e0),e(e0,hue),e(hue,aWo),e(e0,nWo),e(e0,az),e(az,sWo),e(e0,lWo),e(Z,iWo),e(Z,o0),e(o0,pue),e(pue,dWo),e(o0,cWo),e(o0,nz),e(nz,fWo),e(o0,mWo),e(Z,gWo),e(Z,r0),e(r0,_ue),e(_ue,hWo),e(r0,pWo),e(r0,sz),e(sz,_Wo),e(r0,uWo),e(Z,bWo),e(Z,t0),e(t0,uue),e(uue,vWo),e(t0,FWo),e(t0,lz),e(lz,TWo),e(t0,MWo),e(Z,EWo),e(Z,a0),e(a0,bue),e(bue,CWo),e(a0,wWo),e(a0,iz),e(iz,AWo),e(a0,LWo),e(Z,yWo),e(Z,n0),e(n0,vue),e(vue,xWo),e(n0,$Wo),e(n0,dz),e(dz,kWo),e(n0,SWo),e(Z,RWo),e(Z,s0),e(s0,Fue),e(Fue,PWo),e(s0,BWo),e(s0,cz),e(cz,IWo),e(s0,NWo),e(Z,qWo),e(Z,l0),e(l0,Tue),e(Tue,jWo),e(l0,DWo),e(l0,fz),e(fz,GWo),e(l0,OWo),e(Z,VWo),e(Z,i0),e(i0,Mue),e(Mue,XWo),e(i0,zWo),e(i0,mz),e(mz,QWo),e(i0,WWo),e(Z,HWo),e(Z,d0),e(d0,Eue),e(Eue,UWo),e(d0,JWo),e(d0,gz),e(gz,YWo),e(d0,KWo),e(Z,ZWo),e(Z,c0),e(c0,Cue),e(Cue,eHo),e(c0,oHo),e(c0,hz),e(hz,rHo),e(c0,tHo),e(Z,aHo),e(Z,f0),e(f0,wue),e(wue,nHo),e(f0,sHo),e(f0,pz),e(pz,lHo),e(f0,iHo),e(Z,dHo),e(Z,m0),e(m0,Aue),e(Aue,cHo),e(m0,fHo),e(m0,_z),e(_z,mHo),e(m0,gHo),e(Z,hHo),e(Z,g0),e(g0,Lue),e(Lue,pHo),e(g0,_Ho),e(g0,uz),e(uz,uHo),e(g0,bHo),e(Z,vHo),e(Z,h0),e(h0,yue),e(yue,FHo),e(h0,THo),e(h0,bz),e(bz,MHo),e(h0,EHo),e(Z,CHo),e(Z,p0),e(p0,xue),e(xue,wHo),e(p0,AHo),e(p0,vz),e(vz,LHo),e(p0,yHo),e(Z,xHo),e(Z,_0),e(_0,$ue),e($ue,$Ho),e(_0,kHo),e(_0,Fz),e(Fz,SHo),e(_0,RHo),e(Z,PHo),e(Z,u0),e(u0,kue),e(kue,BHo),e(u0,IHo),e(u0,Tz),e(Tz,NHo),e(u0,qHo),e(Z,jHo),e(Z,b0),e(b0,Sue),e(Sue,DHo),e(b0,GHo),e(b0,Mz),e(Mz,OHo),e(b0,VHo),e(Z,XHo),e(Z,v0),e(v0,Rue),e(Rue,zHo),e(v0,QHo),e(v0,Ez),e(Ez,WHo),e(v0,HHo),e(to,UHo),e(to,F0),e(F0,JHo),e(F0,Pue),e(Pue,YHo),e(F0,KHo),e(F0,Bue),e(Bue,ZHo),e(to,eUo),M(T0,to,null),b(f,SXe,u),b(f,id,u),e(id,M0),e(M0,Iue),M(gy,Iue,null),e(id,oUo),e(id,Nue),e(Nue,rUo),b(f,RXe,u),b(f,No,u),M(hy,No,null),e(No,tUo),e(No,dd),e(dd,aUo),e(dd,Cz),e(Cz,nUo),e(dd,sUo),e(dd,wz),e(wz,lUo),e(dd,iUo),e(No,dUo),e(No,py),e(py,cUo),e(py,que),e(que,fUo),e(py,mUo),e(No,gUo),e(No,pt),M(_y,pt,null),e(pt,hUo),e(pt,jue),e(jue,pUo),e(pt,_Uo),e(pt,cd),e(cd,uUo),e(cd,Due),e(Due,bUo),e(cd,vUo),e(cd,Az),e(Az,FUo),e(cd,TUo),e(pt,MUo),M(E0,pt,null),e(No,EUo),e(No,ao),M(uy,ao,null),e(ao,CUo),e(ao,Gue),e(Gue,wUo),e(ao,AUo),e(ao,Va),e(Va,LUo),e(Va,Oue),e(Oue,yUo),e(Va,xUo),e(Va,Vue),e(Vue,$Uo),e(Va,kUo),e(Va,Xue),e(Xue,SUo),e(Va,RUo),e(ao,PUo),e(ao,qo),e(qo,C0),e(C0,zue),e(zue,BUo),e(C0,IUo),e(C0,Lz),e(Lz,NUo),e(C0,qUo),e(qo,jUo),e(qo,w0),e(w0,Que),e(Que,DUo),e(w0,GUo),e(w0,yz),e(yz,OUo),e(w0,VUo),e(qo,XUo),e(qo,A0),e(A0,Wue),e(Wue,zUo),e(A0,QUo),e(A0,xz),e(xz,WUo),e(A0,HUo),e(qo,UUo),e(qo,L0),e(L0,Hue),e(Hue,JUo),e(L0,YUo),e(L0,$z),e($z,KUo),e(L0,ZUo),e(qo,eJo),e(qo,y0),e(y0,Uue),e(Uue,oJo),e(y0,rJo),e(y0,kz),e(kz,tJo),e(y0,aJo),e(qo,nJo),e(qo,x0),e(x0,Jue),e(Jue,sJo),e(x0,lJo),e(x0,Sz),e(Sz,iJo),e(x0,dJo),e(ao,cJo),e(ao,$0),e($0,fJo),e($0,Yue),e(Yue,mJo),e($0,gJo),e($0,Kue),e(Kue,hJo),e(ao,pJo),M(k0,ao,null),b(f,PXe,u),b(f,fd,u),e(fd,S0),e(S0,Zue),M(by,Zue,null),e(fd,_Jo),e(fd,e2e),e(e2e,uJo),b(f,BXe,u),b(f,jo,u),M(vy,jo,null),e(jo,bJo),e(jo,md),e(md,vJo),e(md,Rz),e(Rz,FJo),e(md,TJo),e(md,Pz),e(Pz,MJo),e(md,EJo),e(jo,CJo),e(jo,Fy),e(Fy,wJo),e(Fy,o2e),e(o2e,AJo),e(Fy,LJo),e(jo,yJo),e(jo,_t),M(Ty,_t,null),e(_t,xJo),e(_t,r2e),e(r2e,$Jo),e(_t,kJo),e(_t,gd),e(gd,SJo),e(gd,t2e),e(t2e,RJo),e(gd,PJo),e(gd,Bz),e(Bz,BJo),e(gd,IJo),e(_t,NJo),M(R0,_t,null),e(jo,qJo),e(jo,no),M(My,no,null),e(no,jJo),e(no,a2e),e(a2e,DJo),e(no,GJo),e(no,Xa),e(Xa,OJo),e(Xa,n2e),e(n2e,VJo),e(Xa,XJo),e(Xa,s2e),e(s2e,zJo),e(Xa,QJo),e(Xa,l2e),e(l2e,WJo),e(Xa,HJo),e(no,UJo),e(no,U),e(U,P0),e(P0,i2e),e(i2e,JJo),e(P0,YJo),e(P0,Iz),e(Iz,KJo),e(P0,ZJo),e(U,eYo),e(U,B0),e(B0,d2e),e(d2e,oYo),e(B0,rYo),e(B0,Nz),e(Nz,tYo),e(B0,aYo),e(U,nYo),e(U,I0),e(I0,c2e),e(c2e,sYo),e(I0,lYo),e(I0,qz),e(qz,iYo),e(I0,dYo),e(U,cYo),e(U,N0),e(N0,f2e),e(f2e,fYo),e(N0,mYo),e(N0,jz),e(jz,gYo),e(N0,hYo),e(U,pYo),e(U,q0),e(q0,m2e),e(m2e,_Yo),e(q0,uYo),e(q0,Dz),e(Dz,bYo),e(q0,vYo),e(U,FYo),e(U,j0),e(j0,g2e),e(g2e,TYo),e(j0,MYo),e(j0,Gz),e(Gz,EYo),e(j0,CYo),e(U,wYo),e(U,D0),e(D0,h2e),e(h2e,AYo),e(D0,LYo),e(D0,Oz),e(Oz,yYo),e(D0,xYo),e(U,$Yo),e(U,G0),e(G0,p2e),e(p2e,kYo),e(G0,SYo),e(G0,Vz),e(Vz,RYo),e(G0,PYo),e(U,BYo),e(U,O0),e(O0,_2e),e(_2e,IYo),e(O0,NYo),e(O0,Xz),e(Xz,qYo),e(O0,jYo),e(U,DYo),e(U,V0),e(V0,u2e),e(u2e,GYo),e(V0,OYo),e(V0,zz),e(zz,VYo),e(V0,XYo),e(U,zYo),e(U,X0),e(X0,b2e),e(b2e,QYo),e(X0,WYo),e(X0,Qz),e(Qz,HYo),e(X0,UYo),e(U,JYo),e(U,z0),e(z0,v2e),e(v2e,YYo),e(z0,KYo),e(z0,Wz),e(Wz,ZYo),e(z0,eKo),e(U,oKo),e(U,Q0),e(Q0,F2e),e(F2e,rKo),e(Q0,tKo),e(Q0,Hz),e(Hz,aKo),e(Q0,nKo),e(U,sKo),e(U,W0),e(W0,T2e),e(T2e,lKo),e(W0,iKo),e(W0,Uz),e(Uz,dKo),e(W0,cKo),e(U,fKo),e(U,H0),e(H0,M2e),e(M2e,mKo),e(H0,gKo),e(H0,Jz),e(Jz,hKo),e(H0,pKo),e(U,_Ko),e(U,U0),e(U0,E2e),e(E2e,uKo),e(U0,bKo),e(U0,Yz),e(Yz,vKo),e(U0,FKo),e(U,TKo),e(U,J0),e(J0,C2e),e(C2e,MKo),e(J0,EKo),e(J0,Kz),e(Kz,CKo),e(J0,wKo),e(U,AKo),e(U,Y0),e(Y0,w2e),e(w2e,LKo),e(Y0,yKo),e(Y0,Zz),e(Zz,xKo),e(Y0,$Ko),e(U,kKo),e(U,K0),e(K0,A2e),e(A2e,SKo),e(K0,RKo),e(K0,eQ),e(eQ,PKo),e(K0,BKo),e(U,IKo),e(U,Z0),e(Z0,L2e),e(L2e,NKo),e(Z0,qKo),e(Z0,oQ),e(oQ,jKo),e(Z0,DKo),e(U,GKo),e(U,eF),e(eF,y2e),e(y2e,OKo),e(eF,VKo),e(eF,rQ),e(rQ,XKo),e(eF,zKo),e(U,QKo),e(U,oF),e(oF,x2e),e(x2e,WKo),e(oF,HKo),e(oF,tQ),e(tQ,UKo),e(oF,JKo),e(U,YKo),e(U,rF),e(rF,$2e),e($2e,KKo),e(rF,ZKo),e(rF,aQ),e(aQ,eZo),e(rF,oZo),e(U,rZo),e(U,tF),e(tF,k2e),e(k2e,tZo),e(tF,aZo),e(tF,nQ),e(nQ,nZo),e(tF,sZo),e(U,lZo),e(U,aF),e(aF,S2e),e(S2e,iZo),e(aF,dZo),e(aF,sQ),e(sQ,cZo),e(aF,fZo),e(U,mZo),e(U,nF),e(nF,R2e),e(R2e,gZo),e(nF,hZo),e(nF,lQ),e(lQ,pZo),e(nF,_Zo),e(U,uZo),e(U,sF),e(sF,P2e),e(P2e,bZo),e(sF,vZo),e(sF,iQ),e(iQ,FZo),e(sF,TZo),e(U,MZo),e(U,lF),e(lF,B2e),e(B2e,EZo),e(lF,CZo),e(lF,dQ),e(dQ,wZo),e(lF,AZo),e(U,LZo),e(U,iF),e(iF,I2e),e(I2e,yZo),e(iF,xZo),e(iF,cQ),e(cQ,$Zo),e(iF,kZo),e(U,SZo),e(U,dF),e(dF,N2e),e(N2e,RZo),e(dF,PZo),e(dF,fQ),e(fQ,BZo),e(dF,IZo),e(U,NZo),e(U,cF),e(cF,q2e),e(q2e,qZo),e(cF,jZo),e(cF,mQ),e(mQ,DZo),e(cF,GZo),e(U,OZo),e(U,fF),e(fF,j2e),e(j2e,VZo),e(fF,XZo),e(fF,gQ),e(gQ,zZo),e(fF,QZo),e(U,WZo),e(U,mF),e(mF,D2e),e(D2e,HZo),e(mF,UZo),e(mF,hQ),e(hQ,JZo),e(mF,YZo),e(U,KZo),e(U,gF),e(gF,G2e),e(G2e,ZZo),e(gF,eer),e(gF,pQ),e(pQ,oer),e(gF,rer),e(U,ter),e(U,hF),e(hF,O2e),e(O2e,aer),e(hF,ner),e(hF,_Q),e(_Q,ser),e(hF,ler),e(U,ier),e(U,pF),e(pF,V2e),e(V2e,der),e(pF,cer),e(pF,uQ),e(uQ,fer),e(pF,mer),e(no,ger),e(no,_F),e(_F,her),e(_F,X2e),e(X2e,per),e(_F,_er),e(_F,z2e),e(z2e,uer),e(no,ber),M(uF,no,null),b(f,IXe,u),b(f,hd,u),e(hd,bF),e(bF,Q2e),M(Ey,Q2e,null),e(hd,ver),e(hd,W2e),e(W2e,Fer),b(f,NXe,u),b(f,Do,u),M(Cy,Do,null),e(Do,Ter),e(Do,pd),e(pd,Mer),e(pd,bQ),e(bQ,Eer),e(pd,Cer),e(pd,vQ),e(vQ,wer),e(pd,Aer),e(Do,Ler),e(Do,wy),e(wy,yer),e(wy,H2e),e(H2e,xer),e(wy,$er),e(Do,ker),e(Do,ut),M(Ay,ut,null),e(ut,Ser),e(ut,U2e),e(U2e,Rer),e(ut,Per),e(ut,_d),e(_d,Ber),e(_d,J2e),e(J2e,Ier),e(_d,Ner),e(_d,FQ),e(FQ,qer),e(_d,jer),e(ut,Der),M(vF,ut,null),e(Do,Ger),e(Do,so),M(Ly,so,null),e(so,Oer),e(so,Y2e),e(Y2e,Ver),e(so,Xer),e(so,za),e(za,zer),e(za,K2e),e(K2e,Qer),e(za,Wer),e(za,Z2e),e(Z2e,Her),e(za,Uer),e(za,e1e),e(e1e,Jer),e(za,Yer),e(so,Ker),e(so,V),e(V,FF),e(FF,o1e),e(o1e,Zer),e(FF,eor),e(FF,TQ),e(TQ,oor),e(FF,ror),e(V,tor),e(V,TF),e(TF,r1e),e(r1e,aor),e(TF,nor),e(TF,MQ),e(MQ,sor),e(TF,lor),e(V,ior),e(V,MF),e(MF,t1e),e(t1e,dor),e(MF,cor),e(MF,EQ),e(EQ,mor),e(MF,gor),e(V,hor),e(V,EF),e(EF,a1e),e(a1e,por),e(EF,_or),e(EF,CQ),e(CQ,uor),e(EF,bor),e(V,vor),e(V,CF),e(CF,n1e),e(n1e,For),e(CF,Tor),e(CF,wQ),e(wQ,Mor),e(CF,Eor),e(V,Cor),e(V,wF),e(wF,s1e),e(s1e,wor),e(wF,Aor),e(wF,AQ),e(AQ,Lor),e(wF,yor),e(V,xor),e(V,AF),e(AF,l1e),e(l1e,$or),e(AF,kor),e(AF,LQ),e(LQ,Sor),e(AF,Ror),e(V,Por),e(V,LF),e(LF,i1e),e(i1e,Bor),e(LF,Ior),e(LF,yQ),e(yQ,Nor),e(LF,qor),e(V,jor),e(V,yF),e(yF,d1e),e(d1e,Dor),e(yF,Gor),e(yF,xQ),e(xQ,Oor),e(yF,Vor),e(V,Xor),e(V,xF),e(xF,c1e),e(c1e,zor),e(xF,Qor),e(xF,$Q),e($Q,Wor),e(xF,Hor),e(V,Uor),e(V,$F),e($F,f1e),e(f1e,Jor),e($F,Yor),e($F,kQ),e(kQ,Kor),e($F,Zor),e(V,err),e(V,kF),e(kF,m1e),e(m1e,orr),e(kF,rrr),e(kF,SQ),e(SQ,trr),e(kF,arr),e(V,nrr),e(V,SF),e(SF,g1e),e(g1e,srr),e(SF,lrr),e(SF,RQ),e(RQ,irr),e(SF,drr),e(V,crr),e(V,RF),e(RF,h1e),e(h1e,frr),e(RF,mrr),e(RF,PQ),e(PQ,grr),e(RF,hrr),e(V,prr),e(V,PF),e(PF,p1e),e(p1e,_rr),e(PF,urr),e(PF,BQ),e(BQ,brr),e(PF,vrr),e(V,Frr),e(V,BF),e(BF,_1e),e(_1e,Trr),e(BF,Mrr),e(BF,IQ),e(IQ,Err),e(BF,Crr),e(V,wrr),e(V,IF),e(IF,u1e),e(u1e,Arr),e(IF,Lrr),e(IF,NQ),e(NQ,yrr),e(IF,xrr),e(V,$rr),e(V,NF),e(NF,b1e),e(b1e,krr),e(NF,Srr),e(NF,qQ),e(qQ,Rrr),e(NF,Prr),e(V,Brr),e(V,qF),e(qF,v1e),e(v1e,Irr),e(qF,Nrr),e(qF,jQ),e(jQ,qrr),e(qF,jrr),e(V,Drr),e(V,jF),e(jF,F1e),e(F1e,Grr),e(jF,Orr),e(jF,DQ),e(DQ,Vrr),e(jF,Xrr),e(V,zrr),e(V,DF),e(DF,T1e),e(T1e,Qrr),e(DF,Wrr),e(DF,GQ),e(GQ,Hrr),e(DF,Urr),e(V,Jrr),e(V,GF),e(GF,M1e),e(M1e,Yrr),e(GF,Krr),e(GF,OQ),e(OQ,Zrr),e(GF,etr),e(V,otr),e(V,OF),e(OF,E1e),e(E1e,rtr),e(OF,ttr),e(OF,VQ),e(VQ,atr),e(OF,ntr),e(V,str),e(V,VF),e(VF,C1e),e(C1e,ltr),e(VF,itr),e(VF,XQ),e(XQ,dtr),e(VF,ctr),e(V,ftr),e(V,XF),e(XF,w1e),e(w1e,mtr),e(XF,gtr),e(XF,zQ),e(zQ,htr),e(XF,ptr),e(V,_tr),e(V,zF),e(zF,A1e),e(A1e,utr),e(zF,btr),e(zF,QQ),e(QQ,vtr),e(zF,Ftr),e(V,Ttr),e(V,QF),e(QF,L1e),e(L1e,Mtr),e(QF,Etr),e(QF,WQ),e(WQ,Ctr),e(QF,wtr),e(V,Atr),e(V,WF),e(WF,y1e),e(y1e,Ltr),e(WF,ytr),e(WF,HQ),e(HQ,xtr),e(WF,$tr),e(V,ktr),e(V,HF),e(HF,x1e),e(x1e,Str),e(HF,Rtr),e(HF,UQ),e(UQ,Ptr),e(HF,Btr),e(V,Itr),e(V,UF),e(UF,$1e),e($1e,Ntr),e(UF,qtr),e(UF,JQ),e(JQ,jtr),e(UF,Dtr),e(V,Gtr),e(V,JF),e(JF,k1e),e(k1e,Otr),e(JF,Vtr),e(JF,YQ),e(YQ,Xtr),e(JF,ztr),e(V,Qtr),e(V,YF),e(YF,S1e),e(S1e,Wtr),e(YF,Htr),e(YF,KQ),e(KQ,Utr),e(YF,Jtr),e(V,Ytr),e(V,KF),e(KF,R1e),e(R1e,Ktr),e(KF,Ztr),e(KF,ZQ),e(ZQ,ear),e(KF,oar),e(V,rar),e(V,ZF),e(ZF,P1e),e(P1e,tar),e(ZF,aar),e(ZF,eW),e(eW,nar),e(ZF,sar),e(V,lar),e(V,eT),e(eT,B1e),e(B1e,iar),e(eT,dar),e(eT,oW),e(oW,car),e(eT,far),e(V,mar),e(V,oT),e(oT,I1e),e(I1e,gar),e(oT,har),e(oT,rW),e(rW,par),e(oT,_ar),e(V,uar),e(V,rT),e(rT,N1e),e(N1e,bar),e(rT,Far),e(rT,tW),e(tW,Tar),e(rT,Mar),e(V,Ear),e(V,tT),e(tT,q1e),e(q1e,Car),e(tT,war),e(tT,aW),e(aW,Aar),e(tT,Lar),e(V,yar),e(V,aT),e(aT,j1e),e(j1e,xar),e(aT,$ar),e(aT,nW),e(nW,kar),e(aT,Sar),e(V,Rar),e(V,nT),e(nT,D1e),e(D1e,Par),e(nT,Bar),e(nT,sW),e(sW,Iar),e(nT,Nar),e(V,qar),e(V,sT),e(sT,G1e),e(G1e,jar),e(sT,Dar),e(sT,lW),e(lW,Gar),e(sT,Oar),e(V,Var),e(V,lT),e(lT,O1e),e(O1e,Xar),e(lT,zar),e(lT,iW),e(iW,Qar),e(lT,War),e(so,Har),e(so,iT),e(iT,Uar),e(iT,V1e),e(V1e,Jar),e(iT,Yar),e(iT,X1e),e(X1e,Kar),e(so,Zar),M(dT,so,null),b(f,qXe,u),b(f,ud,u),e(ud,cT),e(cT,z1e),M(yy,z1e,null),e(ud,enr),e(ud,Q1e),e(Q1e,onr),b(f,jXe,u),b(f,Go,u),M(xy,Go,null),e(Go,rnr),e(Go,bd),e(bd,tnr),e(bd,dW),e(dW,anr),e(bd,nnr),e(bd,cW),e(cW,snr),e(bd,lnr),e(Go,inr),e(Go,$y),e($y,dnr),e($y,W1e),e(W1e,cnr),e($y,fnr),e(Go,mnr),e(Go,bt),M(ky,bt,null),e(bt,gnr),e(bt,H1e),e(H1e,hnr),e(bt,pnr),e(bt,vd),e(vd,_nr),e(vd,U1e),e(U1e,unr),e(vd,bnr),e(vd,fW),e(fW,vnr),e(vd,Fnr),e(bt,Tnr),M(fT,bt,null),e(Go,Mnr),e(Go,lo),M(Sy,lo,null),e(lo,Enr),e(lo,J1e),e(J1e,Cnr),e(lo,wnr),e(lo,Qa),e(Qa,Anr),e(Qa,Y1e),e(Y1e,Lnr),e(Qa,ynr),e(Qa,K1e),e(K1e,xnr),e(Qa,$nr),e(Qa,Z1e),e(Z1e,knr),e(Qa,Snr),e(lo,Rnr),e(lo,ebe),e(ebe,mT),e(mT,obe),e(obe,Pnr),e(mT,Bnr),e(mT,mW),e(mW,Inr),e(mT,Nnr),e(lo,qnr),e(lo,gT),e(gT,jnr),e(gT,rbe),e(rbe,Dnr),e(gT,Gnr),e(gT,tbe),e(tbe,Onr),e(lo,Vnr),M(hT,lo,null),b(f,DXe,u),b(f,Fd,u),e(Fd,pT),e(pT,abe),M(Ry,abe,null),e(Fd,Xnr),e(Fd,nbe),e(nbe,znr),b(f,GXe,u),b(f,Oo,u),M(Py,Oo,null),e(Oo,Qnr),e(Oo,Td),e(Td,Wnr),e(Td,gW),e(gW,Hnr),e(Td,Unr),e(Td,hW),e(hW,Jnr),e(Td,Ynr),e(Oo,Knr),e(Oo,By),e(By,Znr),e(By,sbe),e(sbe,esr),e(By,osr),e(Oo,rsr),e(Oo,vt),M(Iy,vt,null),e(vt,tsr),e(vt,lbe),e(lbe,asr),e(vt,nsr),e(vt,Md),e(Md,ssr),e(Md,ibe),e(ibe,lsr),e(Md,isr),e(Md,pW),e(pW,dsr),e(Md,csr),e(vt,fsr),M(_T,vt,null),e(Oo,msr),e(Oo,io),M(Ny,io,null),e(io,gsr),e(io,dbe),e(dbe,hsr),e(io,psr),e(io,Wa),e(Wa,_sr),e(Wa,cbe),e(cbe,usr),e(Wa,bsr),e(Wa,fbe),e(fbe,vsr),e(Wa,Fsr),e(Wa,mbe),e(mbe,Tsr),e(Wa,Msr),e(io,Esr),e(io,ve),e(ve,uT),e(uT,gbe),e(gbe,Csr),e(uT,wsr),e(uT,_W),e(_W,Asr),e(uT,Lsr),e(ve,ysr),e(ve,bT),e(bT,hbe),e(hbe,xsr),e(bT,$sr),e(bT,uW),e(uW,ksr),e(bT,Ssr),e(ve,Rsr),e(ve,vT),e(vT,pbe),e(pbe,Psr),e(vT,Bsr),e(vT,bW),e(bW,Isr),e(vT,Nsr),e(ve,qsr),e(ve,FT),e(FT,_be),e(_be,jsr),e(FT,Dsr),e(FT,vW),e(vW,Gsr),e(FT,Osr),e(ve,Vsr),e(ve,Hs),e(Hs,ube),e(ube,Xsr),e(Hs,zsr),e(Hs,FW),e(FW,Qsr),e(Hs,Wsr),e(Hs,TW),e(TW,Hsr),e(Hs,Usr),e(ve,Jsr),e(ve,TT),e(TT,bbe),e(bbe,Ysr),e(TT,Ksr),e(TT,MW),e(MW,Zsr),e(TT,elr),e(ve,olr),e(ve,Us),e(Us,vbe),e(vbe,rlr),e(Us,tlr),e(Us,EW),e(EW,alr),e(Us,nlr),e(Us,CW),e(CW,slr),e(Us,llr),e(ve,ilr),e(ve,MT),e(MT,Fbe),e(Fbe,dlr),e(MT,clr),e(MT,wW),e(wW,flr),e(MT,mlr),e(ve,glr),e(ve,Ft),e(Ft,Tbe),e(Tbe,hlr),e(Ft,plr),e(Ft,AW),e(AW,_lr),e(Ft,ulr),e(Ft,LW),e(LW,blr),e(Ft,vlr),e(Ft,yW),e(yW,Flr),e(Ft,Tlr),e(ve,Mlr),e(ve,ET),e(ET,Mbe),e(Mbe,Elr),e(ET,Clr),e(ET,xW),e(xW,wlr),e(ET,Alr),e(ve,Llr),e(ve,CT),e(CT,Ebe),e(Ebe,ylr),e(CT,xlr),e(CT,$W),e($W,$lr),e(CT,klr),e(ve,Slr),e(ve,wT),e(wT,Cbe),e(Cbe,Rlr),e(wT,Plr),e(wT,kW),e(kW,Blr),e(wT,Ilr),e(ve,Nlr),e(ve,AT),e(AT,wbe),e(wbe,qlr),e(AT,jlr),e(AT,SW),e(SW,Dlr),e(AT,Glr),e(ve,Olr),e(ve,LT),e(LT,Abe),e(Abe,Vlr),e(LT,Xlr),e(LT,RW),e(RW,zlr),e(LT,Qlr),e(ve,Wlr),e(ve,yT),e(yT,Lbe),e(Lbe,Hlr),e(yT,Ulr),e(yT,PW),e(PW,Jlr),e(yT,Ylr),e(ve,Klr),e(ve,xT),e(xT,ybe),e(ybe,Zlr),e(xT,eir),e(xT,BW),e(BW,oir),e(xT,rir),e(io,tir),e(io,$T),e($T,air),e($T,xbe),e(xbe,nir),e($T,sir),e($T,$be),e($be,lir),e(io,iir),M(kT,io,null),b(f,OXe,u),b(f,Ed,u),e(Ed,ST),e(ST,kbe),M(qy,kbe,null),e(Ed,dir),e(Ed,Sbe),e(Sbe,cir),b(f,VXe,u),b(f,Vo,u),M(jy,Vo,null),e(Vo,fir),e(Vo,Cd),e(Cd,mir),e(Cd,IW),e(IW,gir),e(Cd,hir),e(Cd,NW),e(NW,pir),e(Cd,_ir),e(Vo,uir),e(Vo,Dy),e(Dy,bir),e(Dy,Rbe),e(Rbe,vir),e(Dy,Fir),e(Vo,Tir),e(Vo,Tt),M(Gy,Tt,null),e(Tt,Mir),e(Tt,Pbe),e(Pbe,Eir),e(Tt,Cir),e(Tt,wd),e(wd,wir),e(wd,Bbe),e(Bbe,Air),e(wd,Lir),e(wd,qW),e(qW,yir),e(wd,xir),e(Tt,$ir),M(RT,Tt,null),e(Vo,kir),e(Vo,co),M(Oy,co,null),e(co,Sir),e(co,Ibe),e(Ibe,Rir),e(co,Pir),e(co,Ha),e(Ha,Bir),e(Ha,Nbe),e(Nbe,Iir),e(Ha,Nir),e(Ha,qbe),e(qbe,qir),e(Ha,jir),e(Ha,jbe),e(jbe,Dir),e(Ha,Gir),e(co,Oir),e(co,Dbe),e(Dbe,PT),e(PT,Gbe),e(Gbe,Vir),e(PT,Xir),e(PT,jW),e(jW,zir),e(PT,Qir),e(co,Wir),e(co,BT),e(BT,Hir),e(BT,Obe),e(Obe,Uir),e(BT,Jir),e(BT,Vbe),e(Vbe,Yir),e(co,Kir),M(IT,co,null),b(f,XXe,u),b(f,Ad,u),e(Ad,NT),e(NT,Xbe),M(Vy,Xbe,null),e(Ad,Zir),e(Ad,zbe),e(zbe,edr),b(f,zXe,u),b(f,Xo,u),M(Xy,Xo,null),e(Xo,odr),e(Xo,Ld),e(Ld,rdr),e(Ld,DW),e(DW,tdr),e(Ld,adr),e(Ld,GW),e(GW,ndr),e(Ld,sdr),e(Xo,ldr),e(Xo,zy),e(zy,idr),e(zy,Qbe),e(Qbe,ddr),e(zy,cdr),e(Xo,fdr),e(Xo,Mt),M(Qy,Mt,null),e(Mt,mdr),e(Mt,Wbe),e(Wbe,gdr),e(Mt,hdr),e(Mt,yd),e(yd,pdr),e(yd,Hbe),e(Hbe,_dr),e(yd,udr),e(yd,OW),e(OW,bdr),e(yd,vdr),e(Mt,Fdr),M(qT,Mt,null),e(Xo,Tdr),e(Xo,fo),M(Wy,fo,null),e(fo,Mdr),e(fo,Ube),e(Ube,Edr),e(fo,Cdr),e(fo,Ua),e(Ua,wdr),e(Ua,Jbe),e(Jbe,Adr),e(Ua,Ldr),e(Ua,Ybe),e(Ybe,ydr),e(Ua,xdr),e(Ua,Kbe),e(Kbe,$dr),e(Ua,kdr),e(fo,Sdr),e(fo,Zbe),e(Zbe,jT),e(jT,eve),e(eve,Rdr),e(jT,Pdr),e(jT,VW),e(VW,Bdr),e(jT,Idr),e(fo,Ndr),e(fo,DT),e(DT,qdr),e(DT,ove),e(ove,jdr),e(DT,Ddr),e(DT,rve),e(rve,Gdr),e(fo,Odr),M(GT,fo,null),b(f,QXe,u),b(f,xd,u),e(xd,OT),e(OT,tve),M(Hy,tve,null),e(xd,Vdr),e(xd,ave),e(ave,Xdr),b(f,WXe,u),b(f,zo,u),M(Uy,zo,null),e(zo,zdr),e(zo,$d),e($d,Qdr),e($d,XW),e(XW,Wdr),e($d,Hdr),e($d,zW),e(zW,Udr),e($d,Jdr),e(zo,Ydr),e(zo,Jy),e(Jy,Kdr),e(Jy,nve),e(nve,Zdr),e(Jy,ecr),e(zo,ocr),e(zo,Et),M(Yy,Et,null),e(Et,rcr),e(Et,sve),e(sve,tcr),e(Et,acr),e(Et,kd),e(kd,ncr),e(kd,lve),e(lve,scr),e(kd,lcr),e(kd,QW),e(QW,icr),e(kd,dcr),e(Et,ccr),M(VT,Et,null),e(zo,fcr),e(zo,mo),M(Ky,mo,null),e(mo,mcr),e(mo,ive),e(ive,gcr),e(mo,hcr),e(mo,Ja),e(Ja,pcr),e(Ja,dve),e(dve,_cr),e(Ja,ucr),e(Ja,cve),e(cve,bcr),e(Ja,vcr),e(Ja,fve),e(fve,Fcr),e(Ja,Tcr),e(mo,Mcr),e(mo,Be),e(Be,XT),e(XT,mve),e(mve,Ecr),e(XT,Ccr),e(XT,WW),e(WW,wcr),e(XT,Acr),e(Be,Lcr),e(Be,zT),e(zT,gve),e(gve,ycr),e(zT,xcr),e(zT,HW),e(HW,$cr),e(zT,kcr),e(Be,Scr),e(Be,QT),e(QT,hve),e(hve,Rcr),e(QT,Pcr),e(QT,UW),e(UW,Bcr),e(QT,Icr),e(Be,Ncr),e(Be,WT),e(WT,pve),e(pve,qcr),e(WT,jcr),e(WT,JW),e(JW,Dcr),e(WT,Gcr),e(Be,Ocr),e(Be,HT),e(HT,_ve),e(_ve,Vcr),e(HT,Xcr),e(HT,YW),e(YW,zcr),e(HT,Qcr),e(Be,Wcr),e(Be,UT),e(UT,uve),e(uve,Hcr),e(UT,Ucr),e(UT,KW),e(KW,Jcr),e(UT,Ycr),e(Be,Kcr),e(Be,JT),e(JT,bve),e(bve,Zcr),e(JT,efr),e(JT,ZW),e(ZW,ofr),e(JT,rfr),e(Be,tfr),e(Be,YT),e(YT,vve),e(vve,afr),e(YT,nfr),e(YT,eH),e(eH,sfr),e(YT,lfr),e(Be,ifr),e(Be,KT),e(KT,Fve),e(Fve,dfr),e(KT,cfr),e(KT,oH),e(oH,ffr),e(KT,mfr),e(mo,gfr),e(mo,ZT),e(ZT,hfr),e(ZT,Tve),e(Tve,pfr),e(ZT,_fr),e(ZT,Mve),e(Mve,ufr),e(mo,bfr),M(e8,mo,null),b(f,HXe,u),b(f,Sd,u),e(Sd,o8),e(o8,Eve),M(Zy,Eve,null),e(Sd,vfr),e(Sd,Cve),e(Cve,Ffr),b(f,UXe,u),b(f,Qo,u),M(e9,Qo,null),e(Qo,Tfr),e(Qo,Rd),e(Rd,Mfr),e(Rd,rH),e(rH,Efr),e(Rd,Cfr),e(Rd,tH),e(tH,wfr),e(Rd,Afr),e(Qo,Lfr),e(Qo,o9),e(o9,yfr),e(o9,wve),e(wve,xfr),e(o9,$fr),e(Qo,kfr),e(Qo,Ct),M(r9,Ct,null),e(Ct,Sfr),e(Ct,Ave),e(Ave,Rfr),e(Ct,Pfr),e(Ct,Pd),e(Pd,Bfr),e(Pd,Lve),e(Lve,Ifr),e(Pd,Nfr),e(Pd,aH),e(aH,qfr),e(Pd,jfr),e(Ct,Dfr),M(r8,Ct,null),e(Qo,Gfr),e(Qo,go),M(t9,go,null),e(go,Ofr),e(go,yve),e(yve,Vfr),e(go,Xfr),e(go,Ya),e(Ya,zfr),e(Ya,xve),e(xve,Qfr),e(Ya,Wfr),e(Ya,$ve),e($ve,Hfr),e(Ya,Ufr),e(Ya,kve),e(kve,Jfr),e(Ya,Yfr),e(go,Kfr),e(go,rt),e(rt,t8),e(t8,Sve),e(Sve,Zfr),e(t8,emr),e(t8,nH),e(nH,omr),e(t8,rmr),e(rt,tmr),e(rt,a8),e(a8,Rve),e(Rve,amr),e(a8,nmr),e(a8,sH),e(sH,smr),e(a8,lmr),e(rt,imr),e(rt,n8),e(n8,Pve),e(Pve,dmr),e(n8,cmr),e(n8,lH),e(lH,fmr),e(n8,mmr),e(rt,gmr),e(rt,s8),e(s8,Bve),e(Bve,hmr),e(s8,pmr),e(s8,iH),e(iH,_mr),e(s8,umr),e(rt,bmr),e(rt,l8),e(l8,Ive),e(Ive,vmr),e(l8,Fmr),e(l8,dH),e(dH,Tmr),e(l8,Mmr),e(go,Emr),e(go,i8),e(i8,Cmr),e(i8,Nve),e(Nve,wmr),e(i8,Amr),e(i8,qve),e(qve,Lmr),e(go,ymr),M(d8,go,null),b(f,JXe,u),b(f,Bd,u),e(Bd,c8),e(c8,jve),M(a9,jve,null),e(Bd,xmr),e(Bd,Dve),e(Dve,$mr),b(f,YXe,u),b(f,Wo,u),M(n9,Wo,null),e(Wo,kmr),e(Wo,Id),e(Id,Smr),e(Id,cH),e(cH,Rmr),e(Id,Pmr),e(Id,fH),e(fH,Bmr),e(Id,Imr),e(Wo,Nmr),e(Wo,s9),e(s9,qmr),e(s9,Gve),e(Gve,jmr),e(s9,Dmr),e(Wo,Gmr),e(Wo,wt),M(l9,wt,null),e(wt,Omr),e(wt,Ove),e(Ove,Vmr),e(wt,Xmr),e(wt,Nd),e(Nd,zmr),e(Nd,Vve),e(Vve,Qmr),e(Nd,Wmr),e(Nd,mH),e(mH,Hmr),e(Nd,Umr),e(wt,Jmr),M(f8,wt,null),e(Wo,Ymr),e(Wo,ho),M(i9,ho,null),e(ho,Kmr),e(ho,Xve),e(Xve,Zmr),e(ho,egr),e(ho,Ka),e(Ka,ogr),e(Ka,zve),e(zve,rgr),e(Ka,tgr),e(Ka,Qve),e(Qve,agr),e(Ka,ngr),e(Ka,Wve),e(Wve,sgr),e(Ka,lgr),e(ho,igr),e(ho,ye),e(ye,m8),e(m8,Hve),e(Hve,dgr),e(m8,cgr),e(m8,gH),e(gH,fgr),e(m8,mgr),e(ye,ggr),e(ye,g8),e(g8,Uve),e(Uve,hgr),e(g8,pgr),e(g8,hH),e(hH,_gr),e(g8,ugr),e(ye,bgr),e(ye,h8),e(h8,Jve),e(Jve,vgr),e(h8,Fgr),e(h8,pH),e(pH,Tgr),e(h8,Mgr),e(ye,Egr),e(ye,p8),e(p8,Yve),e(Yve,Cgr),e(p8,wgr),e(p8,_H),e(_H,Agr),e(p8,Lgr),e(ye,ygr),e(ye,_8),e(_8,Kve),e(Kve,xgr),e(_8,$gr),e(_8,uH),e(uH,kgr),e(_8,Sgr),e(ye,Rgr),e(ye,u8),e(u8,Zve),e(Zve,Pgr),e(u8,Bgr),e(u8,bH),e(bH,Igr),e(u8,Ngr),e(ye,qgr),e(ye,b8),e(b8,e0e),e(e0e,jgr),e(b8,Dgr),e(b8,vH),e(vH,Ggr),e(b8,Ogr),e(ye,Vgr),e(ye,v8),e(v8,o0e),e(o0e,Xgr),e(v8,zgr),e(v8,FH),e(FH,Qgr),e(v8,Wgr),e(ye,Hgr),e(ye,F8),e(F8,r0e),e(r0e,Ugr),e(F8,Jgr),e(F8,TH),e(TH,Ygr),e(F8,Kgr),e(ye,Zgr),e(ye,T8),e(T8,t0e),e(t0e,ehr),e(T8,ohr),e(T8,MH),e(MH,rhr),e(T8,thr),e(ho,ahr),e(ho,M8),e(M8,nhr),e(M8,a0e),e(a0e,shr),e(M8,lhr),e(M8,n0e),e(n0e,ihr),e(ho,dhr),M(E8,ho,null),b(f,KXe,u),b(f,qd,u),e(qd,C8),e(C8,s0e),M(d9,s0e,null),e(qd,chr),e(qd,l0e),e(l0e,fhr),b(f,ZXe,u),b(f,Ho,u),M(c9,Ho,null),e(Ho,mhr),e(Ho,jd),e(jd,ghr),e(jd,EH),e(EH,hhr),e(jd,phr),e(jd,CH),e(CH,_hr),e(jd,uhr),e(Ho,bhr),e(Ho,f9),e(f9,vhr),e(f9,i0e),e(i0e,Fhr),e(f9,Thr),e(Ho,Mhr),e(Ho,At),M(m9,At,null),e(At,Ehr),e(At,d0e),e(d0e,Chr),e(At,whr),e(At,Dd),e(Dd,Ahr),e(Dd,c0e),e(c0e,Lhr),e(Dd,yhr),e(Dd,wH),e(wH,xhr),e(Dd,$hr),e(At,khr),M(w8,At,null),e(Ho,Shr),e(Ho,po),M(g9,po,null),e(po,Rhr),e(po,f0e),e(f0e,Phr),e(po,Bhr),e(po,Za),e(Za,Ihr),e(Za,m0e),e(m0e,Nhr),e(Za,qhr),e(Za,g0e),e(g0e,jhr),e(Za,Dhr),e(Za,h0e),e(h0e,Ghr),e(Za,Ohr),e(po,Vhr),e(po,h9),e(h9,A8),e(A8,p0e),e(p0e,Xhr),e(A8,zhr),e(A8,AH),e(AH,Qhr),e(A8,Whr),e(h9,Hhr),e(h9,L8),e(L8,_0e),e(_0e,Uhr),e(L8,Jhr),e(L8,LH),e(LH,Yhr),e(L8,Khr),e(po,Zhr),e(po,y8),e(y8,epr),e(y8,u0e),e(u0e,opr),e(y8,rpr),e(y8,b0e),e(b0e,tpr),e(po,apr),M(x8,po,null),b(f,eze,u),b(f,Gd,u),e(Gd,$8),e($8,v0e),M(p9,v0e,null),e(Gd,npr),e(Gd,F0e),e(F0e,spr),b(f,oze,u),b(f,Uo,u),M(_9,Uo,null),e(Uo,lpr),e(Uo,Od),e(Od,ipr),e(Od,yH),e(yH,dpr),e(Od,cpr),e(Od,xH),e(xH,fpr),e(Od,mpr),e(Uo,gpr),e(Uo,u9),e(u9,hpr),e(u9,T0e),e(T0e,ppr),e(u9,_pr),e(Uo,upr),e(Uo,Lt),M(b9,Lt,null),e(Lt,bpr),e(Lt,M0e),e(M0e,vpr),e(Lt,Fpr),e(Lt,Vd),e(Vd,Tpr),e(Vd,E0e),e(E0e,Mpr),e(Vd,Epr),e(Vd,$H),e($H,Cpr),e(Vd,wpr),e(Lt,Apr),M(k8,Lt,null),e(Uo,Lpr),e(Uo,_o),M(v9,_o,null),e(_o,ypr),e(_o,C0e),e(C0e,xpr),e(_o,$pr),e(_o,en),e(en,kpr),e(en,w0e),e(w0e,Spr),e(en,Rpr),e(en,A0e),e(A0e,Ppr),e(en,Bpr),e(en,L0e),e(L0e,Ipr),e(en,Npr),e(_o,qpr),e(_o,tt),e(tt,S8),e(S8,y0e),e(y0e,jpr),e(S8,Dpr),e(S8,kH),e(kH,Gpr),e(S8,Opr),e(tt,Vpr),e(tt,R8),e(R8,x0e),e(x0e,Xpr),e(R8,zpr),e(R8,SH),e(SH,Qpr),e(R8,Wpr),e(tt,Hpr),e(tt,P8),e(P8,$0e),e($0e,Upr),e(P8,Jpr),e(P8,RH),e(RH,Ypr),e(P8,Kpr),e(tt,Zpr),e(tt,B8),e(B8,k0e),e(k0e,e_r),e(B8,o_r),e(B8,PH),e(PH,r_r),e(B8,t_r),e(tt,a_r),e(tt,I8),e(I8,S0e),e(S0e,n_r),e(I8,s_r),e(I8,BH),e(BH,l_r),e(I8,i_r),e(_o,d_r),e(_o,N8),e(N8,c_r),e(N8,R0e),e(R0e,f_r),e(N8,m_r),e(N8,P0e),e(P0e,g_r),e(_o,h_r),M(q8,_o,null),b(f,rze,u),b(f,Xd,u),e(Xd,j8),e(j8,B0e),M(F9,B0e,null),e(Xd,p_r),e(Xd,I0e),e(I0e,__r),b(f,tze,u),b(f,Jo,u),M(T9,Jo,null),e(Jo,u_r),e(Jo,zd),e(zd,b_r),e(zd,IH),e(IH,v_r),e(zd,F_r),e(zd,NH),e(NH,T_r),e(zd,M_r),e(Jo,E_r),e(Jo,M9),e(M9,C_r),e(M9,N0e),e(N0e,w_r),e(M9,A_r),e(Jo,L_r),e(Jo,yt),M(E9,yt,null),e(yt,y_r),e(yt,q0e),e(q0e,x_r),e(yt,$_r),e(yt,Qd),e(Qd,k_r),e(Qd,j0e),e(j0e,S_r),e(Qd,R_r),e(Qd,qH),e(qH,P_r),e(Qd,B_r),e(yt,I_r),M(D8,yt,null),e(Jo,N_r),e(Jo,uo),M(C9,uo,null),e(uo,q_r),e(uo,D0e),e(D0e,j_r),e(uo,D_r),e(uo,on),e(on,G_r),e(on,G0e),e(G0e,O_r),e(on,V_r),e(on,O0e),e(O0e,X_r),e(on,z_r),e(on,V0e),e(V0e,Q_r),e(on,W_r),e(uo,H_r),e(uo,Wd),e(Wd,G8),e(G8,X0e),e(X0e,U_r),e(G8,J_r),e(G8,jH),e(jH,Y_r),e(G8,K_r),e(Wd,Z_r),e(Wd,O8),e(O8,z0e),e(z0e,eur),e(O8,our),e(O8,DH),e(DH,rur),e(O8,tur),e(Wd,aur),e(Wd,V8),e(V8,Q0e),e(Q0e,nur),e(V8,sur),e(V8,GH),e(GH,lur),e(V8,iur),e(uo,dur),e(uo,X8),e(X8,cur),e(X8,W0e),e(W0e,fur),e(X8,mur),e(X8,H0e),e(H0e,gur),e(uo,hur),M(z8,uo,null),b(f,aze,u),b(f,Hd,u),e(Hd,Q8),e(Q8,U0e),M(w9,U0e,null),e(Hd,pur),e(Hd,J0e),e(J0e,_ur),b(f,nze,u),b(f,Yo,u),M(A9,Yo,null),e(Yo,uur),e(Yo,Ud),e(Ud,bur),e(Ud,OH),e(OH,vur),e(Ud,Fur),e(Ud,VH),e(VH,Tur),e(Ud,Mur),e(Yo,Eur),e(Yo,L9),e(L9,Cur),e(L9,Y0e),e(Y0e,wur),e(L9,Aur),e(Yo,Lur),e(Yo,xt),M(y9,xt,null),e(xt,yur),e(xt,K0e),e(K0e,xur),e(xt,$ur),e(xt,Jd),e(Jd,kur),e(Jd,Z0e),e(Z0e,Sur),e(Jd,Rur),e(Jd,XH),e(XH,Pur),e(Jd,Bur),e(xt,Iur),M(W8,xt,null),e(Yo,Nur),e(Yo,bo),M(x9,bo,null),e(bo,qur),e(bo,eFe),e(eFe,jur),e(bo,Dur),e(bo,rn),e(rn,Gur),e(rn,oFe),e(oFe,Our),e(rn,Vur),e(rn,rFe),e(rFe,Xur),e(rn,zur),e(rn,tFe),e(tFe,Qur),e(rn,Wur),e(bo,Hur),e(bo,$9),e($9,H8),e(H8,aFe),e(aFe,Uur),e(H8,Jur),e(H8,zH),e(zH,Yur),e(H8,Kur),e($9,Zur),e($9,U8),e(U8,nFe),e(nFe,e2r),e(U8,o2r),e(U8,QH),e(QH,r2r),e(U8,t2r),e(bo,a2r),e(bo,J8),e(J8,n2r),e(J8,sFe),e(sFe,s2r),e(J8,l2r),e(J8,lFe),e(lFe,i2r),e(bo,d2r),M(Y8,bo,null),b(f,sze,u),b(f,Yd,u),e(Yd,K8),e(K8,iFe),M(k9,iFe,null),e(Yd,c2r),e(Yd,dFe),e(dFe,f2r),b(f,lze,u),b(f,Ko,u),M(S9,Ko,null),e(Ko,m2r),e(Ko,Kd),e(Kd,g2r),e(Kd,WH),e(WH,h2r),e(Kd,p2r),e(Kd,HH),e(HH,_2r),e(Kd,u2r),e(Ko,b2r),e(Ko,R9),e(R9,v2r),e(R9,cFe),e(cFe,F2r),e(R9,T2r),e(Ko,M2r),e(Ko,$t),M(P9,$t,null),e($t,E2r),e($t,fFe),e(fFe,C2r),e($t,w2r),e($t,Zd),e(Zd,A2r),e(Zd,mFe),e(mFe,L2r),e(Zd,y2r),e(Zd,UH),e(UH,x2r),e(Zd,$2r),e($t,k2r),M(Z8,$t,null),e(Ko,S2r),e(Ko,vo),M(B9,vo,null),e(vo,R2r),e(vo,gFe),e(gFe,P2r),e(vo,B2r),e(vo,tn),e(tn,I2r),e(tn,hFe),e(hFe,N2r),e(tn,q2r),e(tn,pFe),e(pFe,j2r),e(tn,D2r),e(tn,_Fe),e(_Fe,G2r),e(tn,O2r),e(vo,V2r),e(vo,uFe),e(uFe,eM),e(eM,bFe),e(bFe,X2r),e(eM,z2r),e(eM,JH),e(JH,Q2r),e(eM,W2r),e(vo,H2r),e(vo,oM),e(oM,U2r),e(oM,vFe),e(vFe,J2r),e(oM,Y2r),e(oM,FFe),e(FFe,K2r),e(vo,Z2r),M(rM,vo,null),b(f,ize,u),b(f,ec,u),e(ec,tM),e(tM,TFe),M(I9,TFe,null),e(ec,e1r),e(ec,MFe),e(MFe,o1r),b(f,dze,u),b(f,Zo,u),M(N9,Zo,null),e(Zo,r1r),e(Zo,oc),e(oc,t1r),e(oc,YH),e(YH,a1r),e(oc,n1r),e(oc,KH),e(KH,s1r),e(oc,l1r),e(Zo,i1r),e(Zo,q9),e(q9,d1r),e(q9,EFe),e(EFe,c1r),e(q9,f1r),e(Zo,m1r),e(Zo,kt),M(j9,kt,null),e(kt,g1r),e(kt,CFe),e(CFe,h1r),e(kt,p1r),e(kt,rc),e(rc,_1r),e(rc,wFe),e(wFe,u1r),e(rc,b1r),e(rc,ZH),e(ZH,v1r),e(rc,F1r),e(kt,T1r),M(aM,kt,null),e(Zo,M1r),e(Zo,Fo),M(D9,Fo,null),e(Fo,E1r),e(Fo,AFe),e(AFe,C1r),e(Fo,w1r),e(Fo,an),e(an,A1r),e(an,LFe),e(LFe,L1r),e(an,y1r),e(an,yFe),e(yFe,x1r),e(an,$1r),e(an,xFe),e(xFe,k1r),e(an,S1r),e(Fo,R1r),e(Fo,at),e(at,nM),e(nM,$Fe),e($Fe,P1r),e(nM,B1r),e(nM,eU),e(eU,I1r),e(nM,N1r),e(at,q1r),e(at,sM),e(sM,kFe),e(kFe,j1r),e(sM,D1r),e(sM,oU),e(oU,G1r),e(sM,O1r),e(at,V1r),e(at,lM),e(lM,SFe),e(SFe,X1r),e(lM,z1r),e(lM,rU),e(rU,Q1r),e(lM,W1r),e(at,H1r),e(at,iM),e(iM,RFe),e(RFe,U1r),e(iM,J1r),e(iM,tU),e(tU,Y1r),e(iM,K1r),e(at,Z1r),e(at,dM),e(dM,PFe),e(PFe,ebr),e(dM,obr),e(dM,aU),e(aU,rbr),e(dM,tbr),e(Fo,abr),e(Fo,cM),e(cM,nbr),e(cM,BFe),e(BFe,sbr),e(cM,lbr),e(cM,IFe),e(IFe,ibr),e(Fo,dbr),M(fM,Fo,null),b(f,cze,u),b(f,tc,u),e(tc,mM),e(mM,NFe),M(G9,NFe,null),e(tc,cbr),e(tc,qFe),e(qFe,fbr),b(f,fze,u),b(f,er,u),M(O9,er,null),e(er,mbr),e(er,ac),e(ac,gbr),e(ac,nU),e(nU,hbr),e(ac,pbr),e(ac,sU),e(sU,_br),e(ac,ubr),e(er,bbr),e(er,V9),e(V9,vbr),e(V9,jFe),e(jFe,Fbr),e(V9,Tbr),e(er,Mbr),e(er,St),M(X9,St,null),e(St,Ebr),e(St,DFe),e(DFe,Cbr),e(St,wbr),e(St,nc),e(nc,Abr),e(nc,GFe),e(GFe,Lbr),e(nc,ybr),e(nc,lU),e(lU,xbr),e(nc,$br),e(St,kbr),M(gM,St,null),e(er,Sbr),e(er,To),M(z9,To,null),e(To,Rbr),e(To,OFe),e(OFe,Pbr),e(To,Bbr),e(To,nn),e(nn,Ibr),e(nn,VFe),e(VFe,Nbr),e(nn,qbr),e(nn,XFe),e(XFe,jbr),e(nn,Dbr),e(nn,zFe),e(zFe,Gbr),e(nn,Obr),e(To,Vbr),e(To,QFe),e(QFe,hM),e(hM,WFe),e(WFe,Xbr),e(hM,zbr),e(hM,iU),e(iU,Qbr),e(hM,Wbr),e(To,Hbr),e(To,pM),e(pM,Ubr),e(pM,HFe),e(HFe,Jbr),e(pM,Ybr),e(pM,UFe),e(UFe,Kbr),e(To,Zbr),M(_M,To,null),b(f,mze,u),b(f,sc,u),e(sc,uM),e(uM,JFe),M(Q9,JFe,null),e(sc,evr),e(sc,YFe),e(YFe,ovr),b(f,gze,u),b(f,or,u),M(W9,or,null),e(or,rvr),e(or,lc),e(lc,tvr),e(lc,dU),e(dU,avr),e(lc,nvr),e(lc,cU),e(cU,svr),e(lc,lvr),e(or,ivr),e(or,H9),e(H9,dvr),e(H9,KFe),e(KFe,cvr),e(H9,fvr),e(or,mvr),e(or,Rt),M(U9,Rt,null),e(Rt,gvr),e(Rt,ZFe),e(ZFe,hvr),e(Rt,pvr),e(Rt,ic),e(ic,_vr),e(ic,eTe),e(eTe,uvr),e(ic,bvr),e(ic,fU),e(fU,vvr),e(ic,Fvr),e(Rt,Tvr),M(bM,Rt,null),e(or,Mvr),e(or,xr),M(J9,xr,null),e(xr,Evr),e(xr,oTe),e(oTe,Cvr),e(xr,wvr),e(xr,sn),e(sn,Avr),e(sn,rTe),e(rTe,Lvr),e(sn,yvr),e(sn,tTe),e(tTe,xvr),e(sn,$vr),e(sn,aTe),e(aTe,kvr),e(sn,Svr),e(xr,Rvr),e(xr,q),e(q,vM),e(vM,nTe),e(nTe,Pvr),e(vM,Bvr),e(vM,mU),e(mU,Ivr),e(vM,Nvr),e(q,qvr),e(q,FM),e(FM,sTe),e(sTe,jvr),e(FM,Dvr),e(FM,gU),e(gU,Gvr),e(FM,Ovr),e(q,Vvr),e(q,TM),e(TM,lTe),e(lTe,Xvr),e(TM,zvr),e(TM,hU),e(hU,Qvr),e(TM,Wvr),e(q,Hvr),e(q,MM),e(MM,iTe),e(iTe,Uvr),e(MM,Jvr),e(MM,pU),e(pU,Yvr),e(MM,Kvr),e(q,Zvr),e(q,EM),e(EM,dTe),e(dTe,e0r),e(EM,o0r),e(EM,_U),e(_U,r0r),e(EM,t0r),e(q,a0r),e(q,CM),e(CM,cTe),e(cTe,n0r),e(CM,s0r),e(CM,uU),e(uU,l0r),e(CM,i0r),e(q,d0r),e(q,wM),e(wM,fTe),e(fTe,c0r),e(wM,f0r),e(wM,bU),e(bU,m0r),e(wM,g0r),e(q,h0r),e(q,AM),e(AM,mTe),e(mTe,p0r),e(AM,_0r),e(AM,vU),e(vU,u0r),e(AM,b0r),e(q,v0r),e(q,LM),e(LM,gTe),e(gTe,F0r),e(LM,T0r),e(LM,FU),e(FU,M0r),e(LM,E0r),e(q,C0r),e(q,yM),e(yM,hTe),e(hTe,w0r),e(yM,A0r),e(yM,TU),e(TU,L0r),e(yM,y0r),e(q,x0r),e(q,xM),e(xM,pTe),e(pTe,$0r),e(xM,k0r),e(xM,MU),e(MU,S0r),e(xM,R0r),e(q,P0r),e(q,$M),e($M,_Te),e(_Te,B0r),e($M,I0r),e($M,EU),e(EU,N0r),e($M,q0r),e(q,j0r),e(q,kM),e(kM,uTe),e(uTe,D0r),e(kM,G0r),e(kM,CU),e(CU,O0r),e(kM,V0r),e(q,X0r),e(q,SM),e(SM,bTe),e(bTe,z0r),e(SM,Q0r),e(SM,wU),e(wU,W0r),e(SM,H0r),e(q,U0r),e(q,RM),e(RM,vTe),e(vTe,J0r),e(RM,Y0r),e(RM,AU),e(AU,K0r),e(RM,Z0r),e(q,eFr),e(q,PM),e(PM,FTe),e(FTe,oFr),e(PM,rFr),e(PM,LU),e(LU,tFr),e(PM,aFr),e(q,nFr),e(q,BM),e(BM,TTe),e(TTe,sFr),e(BM,lFr),e(BM,yU),e(yU,iFr),e(BM,dFr),e(q,cFr),e(q,IM),e(IM,MTe),e(MTe,fFr),e(IM,mFr),e(IM,xU),e(xU,gFr),e(IM,hFr),e(q,pFr),e(q,Js),e(Js,ETe),e(ETe,_Fr),e(Js,uFr),e(Js,$U),e($U,bFr),e(Js,vFr),e(Js,kU),e(kU,FFr),e(Js,TFr),e(q,MFr),e(q,NM),e(NM,CTe),e(CTe,EFr),e(NM,CFr),e(NM,SU),e(SU,wFr),e(NM,AFr),e(q,LFr),e(q,qM),e(qM,wTe),e(wTe,yFr),e(qM,xFr),e(qM,RU),e(RU,$Fr),e(qM,kFr),e(q,SFr),e(q,jM),e(jM,ATe),e(ATe,RFr),e(jM,PFr),e(jM,PU),e(PU,BFr),e(jM,IFr),e(q,NFr),e(q,DM),e(DM,LTe),e(LTe,qFr),e(DM,jFr),e(DM,BU),e(BU,DFr),e(DM,GFr),e(q,OFr),e(q,GM),e(GM,yTe),e(yTe,VFr),e(GM,XFr),e(GM,IU),e(IU,zFr),e(GM,QFr),e(q,WFr),e(q,OM),e(OM,xTe),e(xTe,HFr),e(OM,UFr),e(OM,NU),e(NU,JFr),e(OM,YFr),e(q,KFr),e(q,VM),e(VM,$Te),e($Te,ZFr),e(VM,eTr),e(VM,qU),e(qU,oTr),e(VM,rTr),e(q,tTr),e(q,XM),e(XM,kTe),e(kTe,aTr),e(XM,nTr),e(XM,jU),e(jU,sTr),e(XM,lTr),e(q,iTr),e(q,zM),e(zM,STe),e(STe,dTr),e(zM,cTr),e(zM,DU),e(DU,fTr),e(zM,mTr),e(q,gTr),e(q,QM),e(QM,RTe),e(RTe,hTr),e(QM,pTr),e(QM,GU),e(GU,_Tr),e(QM,uTr),e(q,bTr),e(q,WM),e(WM,PTe),e(PTe,vTr),e(WM,FTr),e(WM,OU),e(OU,TTr),e(WM,MTr),e(q,ETr),e(q,HM),e(HM,BTe),e(BTe,CTr),e(HM,wTr),e(HM,VU),e(VU,ATr),e(HM,LTr),e(q,yTr),e(q,UM),e(UM,ITe),e(ITe,xTr),e(UM,$Tr),e(UM,XU),e(XU,kTr),e(UM,STr),e(q,RTr),e(q,JM),e(JM,NTe),e(NTe,PTr),e(JM,BTr),e(JM,zU),e(zU,ITr),e(JM,NTr),e(q,qTr),e(q,YM),e(YM,qTe),e(qTe,jTr),e(YM,DTr),e(YM,QU),e(QU,GTr),e(YM,OTr),e(q,VTr),e(q,KM),e(KM,jTe),e(jTe,XTr),e(KM,zTr),e(KM,WU),e(WU,QTr),e(KM,WTr),e(q,HTr),e(q,ZM),e(ZM,DTe),e(DTe,UTr),e(ZM,JTr),e(ZM,HU),e(HU,YTr),e(ZM,KTr),e(q,ZTr),e(q,e4),e(e4,GTe),e(GTe,e8r),e(e4,o8r),e(e4,UU),e(UU,r8r),e(e4,t8r),e(q,a8r),e(q,o4),e(o4,OTe),e(OTe,n8r),e(o4,s8r),e(o4,JU),e(JU,l8r),e(o4,i8r),e(q,d8r),e(q,r4),e(r4,VTe),e(VTe,c8r),e(r4,f8r),e(r4,YU),e(YU,m8r),e(r4,g8r),e(q,h8r),e(q,t4),e(t4,XTe),e(XTe,p8r),e(t4,_8r),e(t4,KU),e(KU,u8r),e(t4,b8r),e(q,v8r),e(q,a4),e(a4,zTe),e(zTe,F8r),e(a4,T8r),e(a4,ZU),e(ZU,M8r),e(a4,E8r),e(q,C8r),e(q,n4),e(n4,QTe),e(QTe,w8r),e(n4,A8r),e(n4,eJ),e(eJ,L8r),e(n4,y8r),e(q,x8r),e(q,s4),e(s4,WTe),e(WTe,$8r),e(s4,k8r),e(s4,oJ),e(oJ,S8r),e(s4,R8r),e(q,P8r),e(q,l4),e(l4,HTe),e(HTe,B8r),e(l4,I8r),e(l4,rJ),e(rJ,N8r),e(l4,q8r),e(q,j8r),e(q,i4),e(i4,UTe),e(UTe,D8r),e(i4,G8r),e(i4,tJ),e(tJ,O8r),e(i4,V8r),e(q,X8r),e(q,d4),e(d4,JTe),e(JTe,z8r),e(d4,Q8r),e(d4,aJ),e(aJ,W8r),e(d4,H8r),e(q,U8r),e(q,c4),e(c4,YTe),e(YTe,J8r),e(c4,Y8r),e(c4,nJ),e(nJ,K8r),e(c4,Z8r),e(q,eMr),e(q,f4),e(f4,KTe),e(KTe,oMr),e(f4,rMr),e(f4,sJ),e(sJ,tMr),e(f4,aMr),e(q,nMr),e(q,m4),e(m4,ZTe),e(ZTe,sMr),e(m4,lMr),e(m4,lJ),e(lJ,iMr),e(m4,dMr),e(q,cMr),e(q,g4),e(g4,e8e),e(e8e,fMr),e(g4,mMr),e(g4,iJ),e(iJ,gMr),e(g4,hMr),e(xr,pMr),M(h4,xr,null),b(f,hze,u),b(f,dc,u),e(dc,p4),e(p4,o8e),M(Y9,o8e,null),e(dc,_Mr),e(dc,r8e),e(r8e,uMr),b(f,pze,u),b(f,rr,u),M(K9,rr,null),e(rr,bMr),e(rr,cc),e(cc,vMr),e(cc,dJ),e(dJ,FMr),e(cc,TMr),e(cc,cJ),e(cJ,MMr),e(cc,EMr),e(rr,CMr),e(rr,Z9),e(Z9,wMr),e(Z9,t8e),e(t8e,AMr),e(Z9,LMr),e(rr,yMr),e(rr,Pt),M(ex,Pt,null),e(Pt,xMr),e(Pt,a8e),e(a8e,$Mr),e(Pt,kMr),e(Pt,fc),e(fc,SMr),e(fc,n8e),e(n8e,RMr),e(fc,PMr),e(fc,fJ),e(fJ,BMr),e(fc,IMr),e(Pt,NMr),M(_4,Pt,null),e(rr,qMr),e(rr,$r),M(ox,$r,null),e($r,jMr),e($r,s8e),e(s8e,DMr),e($r,GMr),e($r,ln),e(ln,OMr),e(ln,l8e),e(l8e,VMr),e(ln,XMr),e(ln,i8e),e(i8e,zMr),e(ln,QMr),e(ln,d8e),e(d8e,WMr),e(ln,HMr),e($r,UMr),e($r,se),e(se,u4),e(u4,c8e),e(c8e,JMr),e(u4,YMr),e(u4,mJ),e(mJ,KMr),e(u4,ZMr),e(se,e4r),e(se,b4),e(b4,f8e),e(f8e,o4r),e(b4,r4r),e(b4,gJ),e(gJ,t4r),e(b4,a4r),e(se,n4r),e(se,v4),e(v4,m8e),e(m8e,s4r),e(v4,l4r),e(v4,hJ),e(hJ,i4r),e(v4,d4r),e(se,c4r),e(se,F4),e(F4,g8e),e(g8e,f4r),e(F4,m4r),e(F4,pJ),e(pJ,g4r),e(F4,h4r),e(se,p4r),e(se,T4),e(T4,h8e),e(h8e,_4r),e(T4,u4r),e(T4,_J),e(_J,b4r),e(T4,v4r),e(se,F4r),e(se,M4),e(M4,p8e),e(p8e,T4r),e(M4,M4r),e(M4,uJ),e(uJ,E4r),e(M4,C4r),e(se,w4r),e(se,E4),e(E4,_8e),e(_8e,A4r),e(E4,L4r),e(E4,bJ),e(bJ,y4r),e(E4,x4r),e(se,$4r),e(se,C4),e(C4,u8e),e(u8e,k4r),e(C4,S4r),e(C4,vJ),e(vJ,R4r),e(C4,P4r),e(se,B4r),e(se,w4),e(w4,b8e),e(b8e,I4r),e(w4,N4r),e(w4,FJ),e(FJ,q4r),e(w4,j4r),e(se,D4r),e(se,A4),e(A4,v8e),e(v8e,G4r),e(A4,O4r),e(A4,TJ),e(TJ,V4r),e(A4,X4r),e(se,z4r),e(se,L4),e(L4,F8e),e(F8e,Q4r),e(L4,W4r),e(L4,MJ),e(MJ,H4r),e(L4,U4r),e(se,J4r),e(se,y4),e(y4,T8e),e(T8e,Y4r),e(y4,K4r),e(y4,EJ),e(EJ,Z4r),e(y4,eEr),e(se,oEr),e(se,x4),e(x4,M8e),e(M8e,rEr),e(x4,tEr),e(x4,CJ),e(CJ,aEr),e(x4,nEr),e(se,sEr),e(se,$4),e($4,E8e),e(E8e,lEr),e($4,iEr),e($4,wJ),e(wJ,dEr),e($4,cEr),e(se,fEr),e(se,k4),e(k4,C8e),e(C8e,mEr),e(k4,gEr),e(k4,AJ),e(AJ,hEr),e(k4,pEr),e(se,_Er),e(se,S4),e(S4,w8e),e(w8e,uEr),e(S4,bEr),e(S4,LJ),e(LJ,vEr),e(S4,FEr),e(se,TEr),e(se,R4),e(R4,A8e),e(A8e,MEr),e(R4,EEr),e(R4,yJ),e(yJ,CEr),e(R4,wEr),e(se,AEr),e(se,P4),e(P4,L8e),e(L8e,LEr),e(P4,yEr),e(P4,xJ),e(xJ,xEr),e(P4,$Er),e(se,kEr),e(se,B4),e(B4,y8e),e(y8e,SEr),e(B4,REr),e(B4,$J),e($J,PEr),e(B4,BEr),e(se,IEr),e(se,I4),e(I4,x8e),e(x8e,NEr),e(I4,qEr),e(I4,kJ),e(kJ,jEr),e(I4,DEr),e(se,GEr),e(se,N4),e(N4,$8e),e($8e,OEr),e(N4,VEr),e(N4,SJ),e(SJ,XEr),e(N4,zEr),e(se,QEr),e(se,q4),e(q4,k8e),e(k8e,WEr),e(q4,HEr),e(q4,RJ),e(RJ,UEr),e(q4,JEr),e(se,YEr),e(se,j4),e(j4,S8e),e(S8e,KEr),e(j4,ZEr),e(j4,PJ),e(PJ,eCr),e(j4,oCr),e($r,rCr),M(D4,$r,null),b(f,_ze,u),b(f,mc,u),e(mc,G4),e(G4,R8e),M(rx,R8e,null),e(mc,tCr),e(mc,P8e),e(P8e,aCr),b(f,uze,u),b(f,tr,u),M(tx,tr,null),e(tr,nCr),e(tr,gc),e(gc,sCr),e(gc,BJ),e(BJ,lCr),e(gc,iCr),e(gc,IJ),e(IJ,dCr),e(gc,cCr),e(tr,fCr),e(tr,ax),e(ax,mCr),e(ax,B8e),e(B8e,gCr),e(ax,hCr),e(tr,pCr),e(tr,Bt),M(nx,Bt,null),e(Bt,_Cr),e(Bt,I8e),e(I8e,uCr),e(Bt,bCr),e(Bt,hc),e(hc,vCr),e(hc,N8e),e(N8e,FCr),e(hc,TCr),e(hc,NJ),e(NJ,MCr),e(hc,ECr),e(Bt,CCr),M(O4,Bt,null),e(tr,wCr),e(tr,kr),M(sx,kr,null),e(kr,ACr),e(kr,q8e),e(q8e,LCr),e(kr,yCr),e(kr,dn),e(dn,xCr),e(dn,j8e),e(j8e,$Cr),e(dn,kCr),e(dn,D8e),e(D8e,SCr),e(dn,RCr),e(dn,G8e),e(G8e,PCr),e(dn,BCr),e(kr,ICr),e(kr,Me),e(Me,V4),e(V4,O8e),e(O8e,NCr),e(V4,qCr),e(V4,qJ),e(qJ,jCr),e(V4,DCr),e(Me,GCr),e(Me,X4),e(X4,V8e),e(V8e,OCr),e(X4,VCr),e(X4,jJ),e(jJ,XCr),e(X4,zCr),e(Me,QCr),e(Me,z4),e(z4,X8e),e(X8e,WCr),e(z4,HCr),e(z4,DJ),e(DJ,UCr),e(z4,JCr),e(Me,YCr),e(Me,Q4),e(Q4,z8e),e(z8e,KCr),e(Q4,ZCr),e(Q4,GJ),e(GJ,e3r),e(Q4,o3r),e(Me,r3r),e(Me,W4),e(W4,Q8e),e(Q8e,t3r),e(W4,a3r),e(W4,OJ),e(OJ,n3r),e(W4,s3r),e(Me,l3r),e(Me,H4),e(H4,W8e),e(W8e,i3r),e(H4,d3r),e(H4,VJ),e(VJ,c3r),e(H4,f3r),e(Me,m3r),e(Me,U4),e(U4,H8e),e(H8e,g3r),e(U4,h3r),e(U4,XJ),e(XJ,p3r),e(U4,_3r),e(Me,u3r),e(Me,J4),e(J4,U8e),e(U8e,b3r),e(J4,v3r),e(J4,zJ),e(zJ,F3r),e(J4,T3r),e(Me,M3r),e(Me,Y4),e(Y4,J8e),e(J8e,E3r),e(Y4,C3r),e(Y4,QJ),e(QJ,w3r),e(Y4,A3r),e(Me,L3r),e(Me,K4),e(K4,Y8e),e(Y8e,y3r),e(K4,x3r),e(K4,WJ),e(WJ,$3r),e(K4,k3r),e(Me,S3r),e(Me,Z4),e(Z4,K8e),e(K8e,R3r),e(Z4,P3r),e(Z4,HJ),e(HJ,B3r),e(Z4,I3r),e(Me,N3r),e(Me,eE),e(eE,Z8e),e(Z8e,q3r),e(eE,j3r),e(eE,UJ),e(UJ,D3r),e(eE,G3r),e(Me,O3r),e(Me,oE),e(oE,eMe),e(eMe,V3r),e(oE,X3r),e(oE,JJ),e(JJ,z3r),e(oE,Q3r),e(kr,W3r),M(rE,kr,null),b(f,bze,u),b(f,pc,u),e(pc,tE),e(tE,oMe),M(lx,oMe,null),e(pc,H3r),e(pc,rMe),e(rMe,U3r),b(f,vze,u),b(f,ar,u),M(ix,ar,null),e(ar,J3r),e(ar,_c),e(_c,Y3r),e(_c,YJ),e(YJ,K3r),e(_c,Z3r),e(_c,KJ),e(KJ,e5r),e(_c,o5r),e(ar,r5r),e(ar,dx),e(dx,t5r),e(dx,tMe),e(tMe,a5r),e(dx,n5r),e(ar,s5r),e(ar,It),M(cx,It,null),e(It,l5r),e(It,aMe),e(aMe,i5r),e(It,d5r),e(It,uc),e(uc,c5r),e(uc,nMe),e(nMe,f5r),e(uc,m5r),e(uc,ZJ),e(ZJ,g5r),e(uc,h5r),e(It,p5r),M(aE,It,null),e(ar,_5r),e(ar,Sr),M(fx,Sr,null),e(Sr,u5r),e(Sr,sMe),e(sMe,b5r),e(Sr,v5r),e(Sr,cn),e(cn,F5r),e(cn,lMe),e(lMe,T5r),e(cn,M5r),e(cn,iMe),e(iMe,E5r),e(cn,C5r),e(cn,dMe),e(dMe,w5r),e(cn,A5r),e(Sr,L5r),e(Sr,Qe),e(Qe,nE),e(nE,cMe),e(cMe,y5r),e(nE,x5r),e(nE,eY),e(eY,$5r),e(nE,k5r),e(Qe,S5r),e(Qe,sE),e(sE,fMe),e(fMe,R5r),e(sE,P5r),e(sE,oY),e(oY,B5r),e(sE,I5r),e(Qe,N5r),e(Qe,Ys),e(Ys,mMe),e(mMe,q5r),e(Ys,j5r),e(Ys,rY),e(rY,D5r),e(Ys,G5r),e(Ys,tY),e(tY,O5r),e(Ys,V5r),e(Qe,X5r),e(Qe,lE),e(lE,gMe),e(gMe,z5r),e(lE,Q5r),e(lE,aY),e(aY,W5r),e(lE,H5r),e(Qe,U5r),e(Qe,iE),e(iE,hMe),e(hMe,J5r),e(iE,Y5r),e(iE,nY),e(nY,K5r),e(iE,Z5r),e(Qe,ewr),e(Qe,dE),e(dE,pMe),e(pMe,owr),e(dE,rwr),e(dE,sY),e(sY,twr),e(dE,awr),e(Qe,nwr),e(Qe,cE),e(cE,_Me),e(_Me,swr),e(cE,lwr),e(cE,lY),e(lY,iwr),e(cE,dwr),e(Sr,cwr),M(fE,Sr,null),b(f,Fze,u),b(f,bc,u),e(bc,mE),e(mE,uMe),M(mx,uMe,null),e(bc,fwr),e(bc,bMe),e(bMe,mwr),b(f,Tze,u),b(f,nr,u),M(gx,nr,null),e(nr,gwr),e(nr,vc),e(vc,hwr),e(vc,iY),e(iY,pwr),e(vc,_wr),e(vc,dY),e(dY,uwr),e(vc,bwr),e(nr,vwr),e(nr,hx),e(hx,Fwr),e(hx,vMe),e(vMe,Twr),e(hx,Mwr),e(nr,Ewr),e(nr,Nt),M(px,Nt,null),e(Nt,Cwr),e(Nt,FMe),e(FMe,wwr),e(Nt,Awr),e(Nt,Fc),e(Fc,Lwr),e(Fc,TMe),e(TMe,ywr),e(Fc,xwr),e(Fc,cY),e(cY,$wr),e(Fc,kwr),e(Nt,Swr),M(gE,Nt,null),e(nr,Rwr),e(nr,Rr),M(_x,Rr,null),e(Rr,Pwr),e(Rr,MMe),e(MMe,Bwr),e(Rr,Iwr),e(Rr,fn),e(fn,Nwr),e(fn,EMe),e(EMe,qwr),e(fn,jwr),e(fn,CMe),e(CMe,Dwr),e(fn,Gwr),e(fn,wMe),e(wMe,Owr),e(fn,Vwr),e(Rr,Xwr),e(Rr,ie),e(ie,hE),e(hE,AMe),e(AMe,zwr),e(hE,Qwr),e(hE,fY),e(fY,Wwr),e(hE,Hwr),e(ie,Uwr),e(ie,pE),e(pE,LMe),e(LMe,Jwr),e(pE,Ywr),e(pE,mY),e(mY,Kwr),e(pE,Zwr),e(ie,eAr),e(ie,_E),e(_E,yMe),e(yMe,oAr),e(_E,rAr),e(_E,gY),e(gY,tAr),e(_E,aAr),e(ie,nAr),e(ie,uE),e(uE,xMe),e(xMe,sAr),e(uE,lAr),e(uE,hY),e(hY,iAr),e(uE,dAr),e(ie,cAr),e(ie,bE),e(bE,$Me),e($Me,fAr),e(bE,mAr),e(bE,pY),e(pY,gAr),e(bE,hAr),e(ie,pAr),e(ie,vE),e(vE,kMe),e(kMe,_Ar),e(vE,uAr),e(vE,_Y),e(_Y,bAr),e(vE,vAr),e(ie,FAr),e(ie,FE),e(FE,SMe),e(SMe,TAr),e(FE,MAr),e(FE,uY),e(uY,EAr),e(FE,CAr),e(ie,wAr),e(ie,TE),e(TE,RMe),e(RMe,AAr),e(TE,LAr),e(TE,bY),e(bY,yAr),e(TE,xAr),e(ie,$Ar),e(ie,ME),e(ME,PMe),e(PMe,kAr),e(ME,SAr),e(ME,vY),e(vY,RAr),e(ME,PAr),e(ie,BAr),e(ie,EE),e(EE,BMe),e(BMe,IAr),e(EE,NAr),e(EE,FY),e(FY,qAr),e(EE,jAr),e(ie,DAr),e(ie,CE),e(CE,IMe),e(IMe,GAr),e(CE,OAr),e(CE,TY),e(TY,VAr),e(CE,XAr),e(ie,zAr),e(ie,wE),e(wE,NMe),e(NMe,QAr),e(wE,WAr),e(wE,MY),e(MY,HAr),e(wE,UAr),e(ie,JAr),e(ie,AE),e(AE,qMe),e(qMe,YAr),e(AE,KAr),e(AE,EY),e(EY,ZAr),e(AE,e6r),e(ie,o6r),e(ie,LE),e(LE,jMe),e(jMe,r6r),e(LE,t6r),e(LE,CY),e(CY,a6r),e(LE,n6r),e(ie,s6r),e(ie,yE),e(yE,DMe),e(DMe,l6r),e(yE,i6r),e(yE,wY),e(wY,d6r),e(yE,c6r),e(ie,f6r),e(ie,xE),e(xE,GMe),e(GMe,m6r),e(xE,g6r),e(xE,AY),e(AY,h6r),e(xE,p6r),e(ie,_6r),e(ie,$E),e($E,OMe),e(OMe,u6r),e($E,b6r),e($E,LY),e(LY,v6r),e($E,F6r),e(ie,T6r),e(ie,kE),e(kE,VMe),e(VMe,M6r),e(kE,E6r),e(kE,yY),e(yY,C6r),e(kE,w6r),e(ie,A6r),e(ie,SE),e(SE,XMe),e(XMe,L6r),e(SE,y6r),e(SE,xY),e(xY,x6r),e(SE,$6r),e(ie,k6r),e(ie,RE),e(RE,zMe),e(zMe,S6r),e(RE,R6r),e(RE,$Y),e($Y,P6r),e(RE,B6r),e(Rr,I6r),M(PE,Rr,null),b(f,Mze,u),b(f,Tc,u),e(Tc,BE),e(BE,QMe),M(ux,QMe,null),e(Tc,N6r),e(Tc,WMe),e(WMe,q6r),b(f,Eze,u),b(f,sr,u),M(bx,sr,null),e(sr,j6r),e(sr,Mc),e(Mc,D6r),e(Mc,kY),e(kY,G6r),e(Mc,O6r),e(Mc,SY),e(SY,V6r),e(Mc,X6r),e(sr,z6r),e(sr,vx),e(vx,Q6r),e(vx,HMe),e(HMe,W6r),e(vx,H6r),e(sr,U6r),e(sr,qt),M(Fx,qt,null),e(qt,J6r),e(qt,UMe),e(UMe,Y6r),e(qt,K6r),e(qt,Ec),e(Ec,Z6r),e(Ec,JMe),e(JMe,e7r),e(Ec,o7r),e(Ec,RY),e(RY,r7r),e(Ec,t7r),e(qt,a7r),M(IE,qt,null),e(sr,n7r),e(sr,Pr),M(Tx,Pr,null),e(Pr,s7r),e(Pr,YMe),e(YMe,l7r),e(Pr,i7r),e(Pr,mn),e(mn,d7r),e(mn,KMe),e(KMe,c7r),e(mn,f7r),e(mn,ZMe),e(ZMe,m7r),e(mn,g7r),e(mn,e4e),e(e4e,h7r),e(mn,p7r),e(Pr,_7r),e(Pr,xe),e(xe,NE),e(NE,o4e),e(o4e,u7r),e(NE,b7r),e(NE,PY),e(PY,v7r),e(NE,F7r),e(xe,T7r),e(xe,qE),e(qE,r4e),e(r4e,M7r),e(qE,E7r),e(qE,BY),e(BY,C7r),e(qE,w7r),e(xe,A7r),e(xe,jE),e(jE,t4e),e(t4e,L7r),e(jE,y7r),e(jE,IY),e(IY,x7r),e(jE,$7r),e(xe,k7r),e(xe,DE),e(DE,a4e),e(a4e,S7r),e(DE,R7r),e(DE,NY),e(NY,P7r),e(DE,B7r),e(xe,I7r),e(xe,GE),e(GE,n4e),e(n4e,N7r),e(GE,q7r),e(GE,qY),e(qY,j7r),e(GE,D7r),e(xe,G7r),e(xe,OE),e(OE,s4e),e(s4e,O7r),e(OE,V7r),e(OE,jY),e(jY,X7r),e(OE,z7r),e(xe,Q7r),e(xe,VE),e(VE,l4e),e(l4e,W7r),e(VE,H7r),e(VE,DY),e(DY,U7r),e(VE,J7r),e(xe,Y7r),e(xe,XE),e(XE,i4e),e(i4e,K7r),e(XE,Z7r),e(XE,GY),e(GY,eLr),e(XE,oLr),e(xe,rLr),e(xe,zE),e(zE,d4e),e(d4e,tLr),e(zE,aLr),e(zE,OY),e(OY,nLr),e(zE,sLr),e(xe,lLr),e(xe,QE),e(QE,c4e),e(c4e,iLr),e(QE,dLr),e(QE,VY),e(VY,cLr),e(QE,fLr),e(Pr,mLr),M(WE,Pr,null),b(f,Cze,u),b(f,Cc,u),e(Cc,HE),e(HE,f4e),M(Mx,f4e,null),e(Cc,gLr),e(Cc,m4e),e(m4e,hLr),b(f,wze,u),b(f,lr,u),M(Ex,lr,null),e(lr,pLr),e(lr,wc),e(wc,_Lr),e(wc,XY),e(XY,uLr),e(wc,bLr),e(wc,zY),e(zY,vLr),e(wc,FLr),e(lr,TLr),e(lr,Cx),e(Cx,MLr),e(Cx,g4e),e(g4e,ELr),e(Cx,CLr),e(lr,wLr),e(lr,jt),M(wx,jt,null),e(jt,ALr),e(jt,h4e),e(h4e,LLr),e(jt,yLr),e(jt,Ac),e(Ac,xLr),e(Ac,p4e),e(p4e,$Lr),e(Ac,kLr),e(Ac,QY),e(QY,SLr),e(Ac,RLr),e(jt,PLr),M(UE,jt,null),e(lr,BLr),e(lr,Br),M(Ax,Br,null),e(Br,ILr),e(Br,_4e),e(_4e,NLr),e(Br,qLr),e(Br,gn),e(gn,jLr),e(gn,u4e),e(u4e,DLr),e(gn,GLr),e(gn,b4e),e(b4e,OLr),e(gn,VLr),e(gn,v4e),e(v4e,XLr),e(gn,zLr),e(Br,QLr),e(Br,ae),e(ae,JE),e(JE,F4e),e(F4e,WLr),e(JE,HLr),e(JE,WY),e(WY,ULr),e(JE,JLr),e(ae,YLr),e(ae,YE),e(YE,T4e),e(T4e,KLr),e(YE,ZLr),e(YE,HY),e(HY,eyr),e(YE,oyr),e(ae,ryr),e(ae,KE),e(KE,M4e),e(M4e,tyr),e(KE,ayr),e(KE,UY),e(UY,nyr),e(KE,syr),e(ae,lyr),e(ae,ZE),e(ZE,E4e),e(E4e,iyr),e(ZE,dyr),e(ZE,JY),e(JY,cyr),e(ZE,fyr),e(ae,myr),e(ae,eC),e(eC,C4e),e(C4e,gyr),e(eC,hyr),e(eC,YY),e(YY,pyr),e(eC,_yr),e(ae,uyr),e(ae,oC),e(oC,w4e),e(w4e,byr),e(oC,vyr),e(oC,KY),e(KY,Fyr),e(oC,Tyr),e(ae,Myr),e(ae,rC),e(rC,A4e),e(A4e,Eyr),e(rC,Cyr),e(rC,ZY),e(ZY,wyr),e(rC,Ayr),e(ae,Lyr),e(ae,tC),e(tC,L4e),e(L4e,yyr),e(tC,xyr),e(tC,eK),e(eK,$yr),e(tC,kyr),e(ae,Syr),e(ae,aC),e(aC,y4e),e(y4e,Ryr),e(aC,Pyr),e(aC,oK),e(oK,Byr),e(aC,Iyr),e(ae,Nyr),e(ae,nC),e(nC,x4e),e(x4e,qyr),e(nC,jyr),e(nC,rK),e(rK,Dyr),e(nC,Gyr),e(ae,Oyr),e(ae,sC),e(sC,$4e),e($4e,Vyr),e(sC,Xyr),e(sC,tK),e(tK,zyr),e(sC,Qyr),e(ae,Wyr),e(ae,lC),e(lC,k4e),e(k4e,Hyr),e(lC,Uyr),e(lC,aK),e(aK,Jyr),e(lC,Yyr),e(ae,Kyr),e(ae,iC),e(iC,S4e),e(S4e,Zyr),e(iC,e9r),e(iC,nK),e(nK,o9r),e(iC,r9r),e(ae,t9r),e(ae,dC),e(dC,R4e),e(R4e,a9r),e(dC,n9r),e(dC,sK),e(sK,s9r),e(dC,l9r),e(ae,i9r),e(ae,cC),e(cC,P4e),e(P4e,d9r),e(cC,c9r),e(cC,lK),e(lK,f9r),e(cC,m9r),e(ae,g9r),e(ae,fC),e(fC,B4e),e(B4e,h9r),e(fC,p9r),e(fC,iK),e(iK,_9r),e(fC,u9r),e(ae,b9r),e(ae,mC),e(mC,I4e),e(I4e,v9r),e(mC,F9r),e(mC,dK),e(dK,T9r),e(mC,M9r),e(ae,E9r),e(ae,gC),e(gC,N4e),e(N4e,C9r),e(gC,w9r),e(gC,cK),e(cK,A9r),e(gC,L9r),e(ae,y9r),e(ae,hC),e(hC,q4e),e(q4e,x9r),e(hC,$9r),e(hC,fK),e(fK,k9r),e(hC,S9r),e(ae,R9r),e(ae,pC),e(pC,j4e),e(j4e,P9r),e(pC,B9r),e(pC,mK),e(mK,I9r),e(pC,N9r),e(ae,q9r),e(ae,_C),e(_C,D4e),e(D4e,j9r),e(_C,D9r),e(_C,gK),e(gK,G9r),e(_C,O9r),e(ae,V9r),e(ae,uC),e(uC,G4e),e(G4e,X9r),e(uC,z9r),e(uC,hK),e(hK,Q9r),e(uC,W9r),e(ae,H9r),e(ae,bC),e(bC,O4e),e(O4e,U9r),e(bC,J9r),e(bC,pK),e(pK,Y9r),e(bC,K9r),e(ae,Z9r),e(ae,vC),e(vC,V4e),e(V4e,exr),e(vC,oxr),e(vC,_K),e(_K,rxr),e(vC,txr),e(ae,axr),e(ae,FC),e(FC,X4e),e(X4e,nxr),e(FC,sxr),e(FC,uK),e(uK,lxr),e(FC,ixr),e(ae,dxr),e(ae,TC),e(TC,z4e),e(z4e,cxr),e(TC,fxr),e(TC,bK),e(bK,mxr),e(TC,gxr),e(Br,hxr),M(MC,Br,null),b(f,Aze,u),b(f,Lc,u),e(Lc,EC),e(EC,Q4e),M(Lx,Q4e,null),e(Lc,pxr),e(Lc,W4e),e(W4e,_xr),b(f,Lze,u),b(f,ir,u),M(yx,ir,null),e(ir,uxr),e(ir,yc),e(yc,bxr),e(yc,vK),e(vK,vxr),e(yc,Fxr),e(yc,FK),e(FK,Txr),e(yc,Mxr),e(ir,Exr),e(ir,xx),e(xx,Cxr),e(xx,H4e),e(H4e,wxr),e(xx,Axr),e(ir,Lxr),e(ir,Dt),M($x,Dt,null),e(Dt,yxr),e(Dt,U4e),e(U4e,xxr),e(Dt,$xr),e(Dt,xc),e(xc,kxr),e(xc,J4e),e(J4e,Sxr),e(xc,Rxr),e(xc,TK),e(TK,Pxr),e(xc,Bxr),e(Dt,Ixr),M(CC,Dt,null),e(ir,Nxr),e(ir,Ir),M(kx,Ir,null),e(Ir,qxr),e(Ir,Y4e),e(Y4e,jxr),e(Ir,Dxr),e(Ir,hn),e(hn,Gxr),e(hn,K4e),e(K4e,Oxr),e(hn,Vxr),e(hn,Z4e),e(Z4e,Xxr),e(hn,zxr),e(hn,eEe),e(eEe,Qxr),e(hn,Wxr),e(Ir,Hxr),e(Ir,_e),e(_e,wC),e(wC,oEe),e(oEe,Uxr),e(wC,Jxr),e(wC,MK),e(MK,Yxr),e(wC,Kxr),e(_e,Zxr),e(_e,AC),e(AC,rEe),e(rEe,e$r),e(AC,o$r),e(AC,EK),e(EK,r$r),e(AC,t$r),e(_e,a$r),e(_e,LC),e(LC,tEe),e(tEe,n$r),e(LC,s$r),e(LC,CK),e(CK,l$r),e(LC,i$r),e(_e,d$r),e(_e,yC),e(yC,aEe),e(aEe,c$r),e(yC,f$r),e(yC,wK),e(wK,m$r),e(yC,g$r),e(_e,h$r),e(_e,xC),e(xC,nEe),e(nEe,p$r),e(xC,_$r),e(xC,AK),e(AK,u$r),e(xC,b$r),e(_e,v$r),e(_e,$C),e($C,sEe),e(sEe,F$r),e($C,T$r),e($C,LK),e(LK,M$r),e($C,E$r),e(_e,C$r),e(_e,kC),e(kC,lEe),e(lEe,w$r),e(kC,A$r),e(kC,yK),e(yK,L$r),e(kC,y$r),e(_e,x$r),e(_e,SC),e(SC,iEe),e(iEe,$$r),e(SC,k$r),e(SC,xK),e(xK,S$r),e(SC,R$r),e(_e,P$r),e(_e,RC),e(RC,dEe),e(dEe,B$r),e(RC,I$r),e(RC,$K),e($K,N$r),e(RC,q$r),e(_e,j$r),e(_e,PC),e(PC,cEe),e(cEe,D$r),e(PC,G$r),e(PC,kK),e(kK,O$r),e(PC,V$r),e(_e,X$r),e(_e,BC),e(BC,fEe),e(fEe,z$r),e(BC,Q$r),e(BC,SK),e(SK,W$r),e(BC,H$r),e(_e,U$r),e(_e,IC),e(IC,mEe),e(mEe,J$r),e(IC,Y$r),e(IC,RK),e(RK,K$r),e(IC,Z$r),e(_e,ekr),e(_e,NC),e(NC,gEe),e(gEe,okr),e(NC,rkr),e(NC,PK),e(PK,tkr),e(NC,akr),e(_e,nkr),e(_e,qC),e(qC,hEe),e(hEe,skr),e(qC,lkr),e(qC,BK),e(BK,ikr),e(qC,dkr),e(_e,ckr),e(_e,jC),e(jC,pEe),e(pEe,fkr),e(jC,mkr),e(jC,IK),e(IK,gkr),e(jC,hkr),e(_e,pkr),e(_e,DC),e(DC,_Ee),e(_Ee,_kr),e(DC,ukr),e(DC,NK),e(NK,bkr),e(DC,vkr),e(_e,Fkr),e(_e,GC),e(GC,uEe),e(uEe,Tkr),e(GC,Mkr),e(GC,qK),e(qK,Ekr),e(GC,Ckr),e(Ir,wkr),M(OC,Ir,null),b(f,yze,u),b(f,$c,u),e($c,VC),e(VC,bEe),M(Sx,bEe,null),e($c,Akr),e($c,vEe),e(vEe,Lkr),b(f,xze,u),b(f,dr,u),M(Rx,dr,null),e(dr,ykr),e(dr,kc),e(kc,xkr),e(kc,jK),e(jK,$kr),e(kc,kkr),e(kc,DK),e(DK,Skr),e(kc,Rkr),e(dr,Pkr),e(dr,Px),e(Px,Bkr),e(Px,FEe),e(FEe,Ikr),e(Px,Nkr),e(dr,qkr),e(dr,Gt),M(Bx,Gt,null),e(Gt,jkr),e(Gt,TEe),e(TEe,Dkr),e(Gt,Gkr),e(Gt,Sc),e(Sc,Okr),e(Sc,MEe),e(MEe,Vkr),e(Sc,Xkr),e(Sc,GK),e(GK,zkr),e(Sc,Qkr),e(Gt,Wkr),M(XC,Gt,null),e(dr,Hkr),e(dr,Nr),M(Ix,Nr,null),e(Nr,Ukr),e(Nr,EEe),e(EEe,Jkr),e(Nr,Ykr),e(Nr,pn),e(pn,Kkr),e(pn,CEe),e(CEe,Zkr),e(pn,eSr),e(pn,wEe),e(wEe,oSr),e(pn,rSr),e(pn,AEe),e(AEe,tSr),e(pn,aSr),e(Nr,nSr),e(Nr,Nx),e(Nx,zC),e(zC,LEe),e(LEe,sSr),e(zC,lSr),e(zC,OK),e(OK,iSr),e(zC,dSr),e(Nx,cSr),e(Nx,QC),e(QC,yEe),e(yEe,fSr),e(QC,mSr),e(QC,VK),e(VK,gSr),e(QC,hSr),e(Nr,pSr),M(WC,Nr,null),b(f,$ze,u),b(f,Rc,u),e(Rc,HC),e(HC,xEe),M(qx,xEe,null),e(Rc,_Sr),e(Rc,$Ee),e($Ee,uSr),b(f,kze,u),b(f,cr,u),M(jx,cr,null),e(cr,bSr),e(cr,Pc),e(Pc,vSr),e(Pc,XK),e(XK,FSr),e(Pc,TSr),e(Pc,zK),e(zK,MSr),e(Pc,ESr),e(cr,CSr),e(cr,Dx),e(Dx,wSr),e(Dx,kEe),e(kEe,ASr),e(Dx,LSr),e(cr,ySr),e(cr,Ot),M(Gx,Ot,null),e(Ot,xSr),e(Ot,SEe),e(SEe,$Sr),e(Ot,kSr),e(Ot,Bc),e(Bc,SSr),e(Bc,REe),e(REe,RSr),e(Bc,PSr),e(Bc,QK),e(QK,BSr),e(Bc,ISr),e(Ot,NSr),M(UC,Ot,null),e(cr,qSr),e(cr,qr),M(Ox,qr,null),e(qr,jSr),e(qr,PEe),e(PEe,DSr),e(qr,GSr),e(qr,_n),e(_n,OSr),e(_n,BEe),e(BEe,VSr),e(_n,XSr),e(_n,IEe),e(IEe,zSr),e(_n,QSr),e(_n,NEe),e(NEe,WSr),e(_n,HSr),e(qr,USr),e(qr,qEe),e(qEe,JC),e(JC,jEe),e(jEe,JSr),e(JC,YSr),e(JC,WK),e(WK,KSr),e(JC,ZSr),e(qr,eRr),M(YC,qr,null),b(f,Sze,u),b(f,Ic,u),e(Ic,KC),e(KC,DEe),M(Vx,DEe,null),e(Ic,oRr),e(Ic,GEe),e(GEe,rRr),b(f,Rze,u),b(f,fr,u),M(Xx,fr,null),e(fr,tRr),e(fr,Nc),e(Nc,aRr),e(Nc,HK),e(HK,nRr),e(Nc,sRr),e(Nc,UK),e(UK,lRr),e(Nc,iRr),e(fr,dRr),e(fr,zx),e(zx,cRr),e(zx,OEe),e(OEe,fRr),e(zx,mRr),e(fr,gRr),e(fr,Vt),M(Qx,Vt,null),e(Vt,hRr),e(Vt,VEe),e(VEe,pRr),e(Vt,_Rr),e(Vt,qc),e(qc,uRr),e(qc,XEe),e(XEe,bRr),e(qc,vRr),e(qc,JK),e(JK,FRr),e(qc,TRr),e(Vt,MRr),M(ZC,Vt,null),e(fr,ERr),e(fr,jr),M(Wx,jr,null),e(jr,CRr),e(jr,zEe),e(zEe,wRr),e(jr,ARr),e(jr,un),e(un,LRr),e(un,QEe),e(QEe,yRr),e(un,xRr),e(un,WEe),e(WEe,$Rr),e(un,kRr),e(un,HEe),e(HEe,SRr),e(un,RRr),e(jr,PRr),e(jr,de),e(de,e3),e(e3,UEe),e(UEe,BRr),e(e3,IRr),e(e3,YK),e(YK,NRr),e(e3,qRr),e(de,jRr),e(de,o3),e(o3,JEe),e(JEe,DRr),e(o3,GRr),e(o3,KK),e(KK,ORr),e(o3,VRr),e(de,XRr),e(de,r3),e(r3,YEe),e(YEe,zRr),e(r3,QRr),e(r3,ZK),e(ZK,WRr),e(r3,HRr),e(de,URr),e(de,t3),e(t3,KEe),e(KEe,JRr),e(t3,YRr),e(t3,eZ),e(eZ,KRr),e(t3,ZRr),e(de,ePr),e(de,a3),e(a3,ZEe),e(ZEe,oPr),e(a3,rPr),e(a3,oZ),e(oZ,tPr),e(a3,aPr),e(de,nPr),e(de,n3),e(n3,eCe),e(eCe,sPr),e(n3,lPr),e(n3,rZ),e(rZ,iPr),e(n3,dPr),e(de,cPr),e(de,s3),e(s3,oCe),e(oCe,fPr),e(s3,mPr),e(s3,tZ),e(tZ,gPr),e(s3,hPr),e(de,pPr),e(de,l3),e(l3,rCe),e(rCe,_Pr),e(l3,uPr),e(l3,aZ),e(aZ,bPr),e(l3,vPr),e(de,FPr),e(de,i3),e(i3,tCe),e(tCe,TPr),e(i3,MPr),e(i3,nZ),e(nZ,EPr),e(i3,CPr),e(de,wPr),e(de,d3),e(d3,aCe),e(aCe,APr),e(d3,LPr),e(d3,sZ),e(sZ,yPr),e(d3,xPr),e(de,$Pr),e(de,c3),e(c3,nCe),e(nCe,kPr),e(c3,SPr),e(c3,lZ),e(lZ,RPr),e(c3,PPr),e(de,BPr),e(de,f3),e(f3,sCe),e(sCe,IPr),e(f3,NPr),e(f3,iZ),e(iZ,qPr),e(f3,jPr),e(de,DPr),e(de,m3),e(m3,lCe),e(lCe,GPr),e(m3,OPr),e(m3,dZ),e(dZ,VPr),e(m3,XPr),e(de,zPr),e(de,g3),e(g3,iCe),e(iCe,QPr),e(g3,WPr),e(g3,cZ),e(cZ,HPr),e(g3,UPr),e(de,JPr),e(de,h3),e(h3,dCe),e(dCe,YPr),e(h3,KPr),e(h3,fZ),e(fZ,ZPr),e(h3,eBr),e(de,oBr),e(de,p3),e(p3,cCe),e(cCe,rBr),e(p3,tBr),e(p3,mZ),e(mZ,aBr),e(p3,nBr),e(de,sBr),e(de,_3),e(_3,fCe),e(fCe,lBr),e(_3,iBr),e(_3,gZ),e(gZ,dBr),e(_3,cBr),e(de,fBr),e(de,u3),e(u3,mCe),e(mCe,mBr),e(u3,gBr),e(u3,hZ),e(hZ,hBr),e(u3,pBr),e(de,_Br),e(de,b3),e(b3,gCe),e(gCe,uBr),e(b3,bBr),e(b3,pZ),e(pZ,vBr),e(b3,FBr),e(de,TBr),e(de,v3),e(v3,hCe),e(hCe,MBr),e(v3,EBr),e(v3,_Z),e(_Z,CBr),e(v3,wBr),e(jr,ABr),M(F3,jr,null),b(f,Pze,u),b(f,jc,u),e(jc,T3),e(T3,pCe),M(Hx,pCe,null),e(jc,LBr),e(jc,_Ce),e(_Ce,yBr),b(f,Bze,u),b(f,mr,u),M(Ux,mr,null),e(mr,xBr),e(mr,Dc),e(Dc,$Br),e(Dc,uZ),e(uZ,kBr),e(Dc,SBr),e(Dc,bZ),e(bZ,RBr),e(Dc,PBr),e(mr,BBr),e(mr,Jx),e(Jx,IBr),e(Jx,uCe),e(uCe,NBr),e(Jx,qBr),e(mr,jBr),e(mr,Xt),M(Yx,Xt,null),e(Xt,DBr),e(Xt,bCe),e(bCe,GBr),e(Xt,OBr),e(Xt,Gc),e(Gc,VBr),e(Gc,vCe),e(vCe,XBr),e(Gc,zBr),e(Gc,vZ),e(vZ,QBr),e(Gc,WBr),e(Xt,HBr),M(M3,Xt,null),e(mr,UBr),e(mr,Dr),M(Kx,Dr,null),e(Dr,JBr),e(Dr,FCe),e(FCe,YBr),e(Dr,KBr),e(Dr,bn),e(bn,ZBr),e(bn,TCe),e(TCe,eIr),e(bn,oIr),e(bn,MCe),e(MCe,rIr),e(bn,tIr),e(bn,ECe),e(ECe,aIr),e(bn,nIr),e(Dr,sIr),e(Dr,ce),e(ce,E3),e(E3,CCe),e(CCe,lIr),e(E3,iIr),e(E3,FZ),e(FZ,dIr),e(E3,cIr),e(ce,fIr),e(ce,C3),e(C3,wCe),e(wCe,mIr),e(C3,gIr),e(C3,TZ),e(TZ,hIr),e(C3,pIr),e(ce,_Ir),e(ce,w3),e(w3,ACe),e(ACe,uIr),e(w3,bIr),e(w3,MZ),e(MZ,vIr),e(w3,FIr),e(ce,TIr),e(ce,A3),e(A3,LCe),e(LCe,MIr),e(A3,EIr),e(A3,EZ),e(EZ,CIr),e(A3,wIr),e(ce,AIr),e(ce,L3),e(L3,yCe),e(yCe,LIr),e(L3,yIr),e(L3,CZ),e(CZ,xIr),e(L3,$Ir),e(ce,kIr),e(ce,y3),e(y3,xCe),e(xCe,SIr),e(y3,RIr),e(y3,wZ),e(wZ,PIr),e(y3,BIr),e(ce,IIr),e(ce,x3),e(x3,$Ce),e($Ce,NIr),e(x3,qIr),e(x3,AZ),e(AZ,jIr),e(x3,DIr),e(ce,GIr),e(ce,$3),e($3,kCe),e(kCe,OIr),e($3,VIr),e($3,LZ),e(LZ,XIr),e($3,zIr),e(ce,QIr),e(ce,k3),e(k3,SCe),e(SCe,WIr),e(k3,HIr),e(k3,yZ),e(yZ,UIr),e(k3,JIr),e(ce,YIr),e(ce,S3),e(S3,RCe),e(RCe,KIr),e(S3,ZIr),e(S3,xZ),e(xZ,eNr),e(S3,oNr),e(ce,rNr),e(ce,R3),e(R3,PCe),e(PCe,tNr),e(R3,aNr),e(R3,$Z),e($Z,nNr),e(R3,sNr),e(ce,lNr),e(ce,P3),e(P3,BCe),e(BCe,iNr),e(P3,dNr),e(P3,kZ),e(kZ,cNr),e(P3,fNr),e(ce,mNr),e(ce,B3),e(B3,ICe),e(ICe,gNr),e(B3,hNr),e(B3,SZ),e(SZ,pNr),e(B3,_Nr),e(ce,uNr),e(ce,I3),e(I3,NCe),e(NCe,bNr),e(I3,vNr),e(I3,RZ),e(RZ,FNr),e(I3,TNr),e(ce,MNr),e(ce,N3),e(N3,qCe),e(qCe,ENr),e(N3,CNr),e(N3,PZ),e(PZ,wNr),e(N3,ANr),e(ce,LNr),e(ce,q3),e(q3,jCe),e(jCe,yNr),e(q3,xNr),e(q3,BZ),e(BZ,$Nr),e(q3,kNr),e(ce,SNr),e(ce,j3),e(j3,DCe),e(DCe,RNr),e(j3,PNr),e(j3,IZ),e(IZ,BNr),e(j3,INr),e(ce,NNr),e(ce,D3),e(D3,GCe),e(GCe,qNr),e(D3,jNr),e(D3,NZ),e(NZ,DNr),e(D3,GNr),e(ce,ONr),e(ce,G3),e(G3,OCe),e(OCe,VNr),e(G3,XNr),e(G3,qZ),e(qZ,zNr),e(G3,QNr),e(ce,WNr),e(ce,O3),e(O3,VCe),e(VCe,HNr),e(O3,UNr),e(O3,jZ),e(jZ,JNr),e(O3,YNr),e(Dr,KNr),M(V3,Dr,null),b(f,Ize,u),b(f,Oc,u),e(Oc,X3),e(X3,XCe),M(Zx,XCe,null),e(Oc,ZNr),e(Oc,zCe),e(zCe,eqr),b(f,Nze,u),b(f,gr,u),M(e$,gr,null),e(gr,oqr),e(gr,Vc),e(Vc,rqr),e(Vc,DZ),e(DZ,tqr),e(Vc,aqr),e(Vc,GZ),e(GZ,nqr),e(Vc,sqr),e(gr,lqr),e(gr,o$),e(o$,iqr),e(o$,QCe),e(QCe,dqr),e(o$,cqr),e(gr,fqr),e(gr,zt),M(r$,zt,null),e(zt,mqr),e(zt,WCe),e(WCe,gqr),e(zt,hqr),e(zt,Xc),e(Xc,pqr),e(Xc,HCe),e(HCe,_qr),e(Xc,uqr),e(Xc,OZ),e(OZ,bqr),e(Xc,vqr),e(zt,Fqr),M(z3,zt,null),e(gr,Tqr),e(gr,Gr),M(t$,Gr,null),e(Gr,Mqr),e(Gr,UCe),e(UCe,Eqr),e(Gr,Cqr),e(Gr,vn),e(vn,wqr),e(vn,JCe),e(JCe,Aqr),e(vn,Lqr),e(vn,YCe),e(YCe,yqr),e(vn,xqr),e(vn,KCe),e(KCe,$qr),e(vn,kqr),e(Gr,Sqr),e(Gr,ZCe),e(ZCe,Q3),e(Q3,e3e),e(e3e,Rqr),e(Q3,Pqr),e(Q3,VZ),e(VZ,Bqr),e(Q3,Iqr),e(Gr,Nqr),M(W3,Gr,null),b(f,qze,u),b(f,zc,u),e(zc,H3),e(H3,o3e),M(a$,o3e,null),e(zc,qqr),e(zc,r3e),e(r3e,jqr),b(f,jze,u),b(f,hr,u),M(n$,hr,null),e(hr,Dqr),e(hr,Qc),e(Qc,Gqr),e(Qc,XZ),e(XZ,Oqr),e(Qc,Vqr),e(Qc,zZ),e(zZ,Xqr),e(Qc,zqr),e(hr,Qqr),e(hr,s$),e(s$,Wqr),e(s$,t3e),e(t3e,Hqr),e(s$,Uqr),e(hr,Jqr),e(hr,Qt),M(l$,Qt,null),e(Qt,Yqr),e(Qt,a3e),e(a3e,Kqr),e(Qt,Zqr),e(Qt,Wc),e(Wc,ejr),e(Wc,n3e),e(n3e,ojr),e(Wc,rjr),e(Wc,QZ),e(QZ,tjr),e(Wc,ajr),e(Qt,njr),M(U3,Qt,null),e(hr,sjr),e(hr,Or),M(i$,Or,null),e(Or,ljr),e(Or,s3e),e(s3e,ijr),e(Or,djr),e(Or,Fn),e(Fn,cjr),e(Fn,l3e),e(l3e,fjr),e(Fn,mjr),e(Fn,i3e),e(i3e,gjr),e(Fn,hjr),e(Fn,d3e),e(d3e,pjr),e(Fn,_jr),e(Or,ujr),e(Or,c3e),e(c3e,J3),e(J3,f3e),e(f3e,bjr),e(J3,vjr),e(J3,WZ),e(WZ,Fjr),e(J3,Tjr),e(Or,Mjr),M(Y3,Or,null),b(f,Dze,u),b(f,Hc,u),e(Hc,K3),e(K3,m3e),M(d$,m3e,null),e(Hc,Ejr),e(Hc,g3e),e(g3e,Cjr),b(f,Gze,u),b(f,pr,u),M(c$,pr,null),e(pr,wjr),e(pr,Uc),e(Uc,Ajr),e(Uc,HZ),e(HZ,Ljr),e(Uc,yjr),e(Uc,UZ),e(UZ,xjr),e(Uc,$jr),e(pr,kjr),e(pr,f$),e(f$,Sjr),e(f$,h3e),e(h3e,Rjr),e(f$,Pjr),e(pr,Bjr),e(pr,Wt),M(m$,Wt,null),e(Wt,Ijr),e(Wt,p3e),e(p3e,Njr),e(Wt,qjr),e(Wt,Jc),e(Jc,jjr),e(Jc,_3e),e(_3e,Djr),e(Jc,Gjr),e(Jc,JZ),e(JZ,Ojr),e(Jc,Vjr),e(Wt,Xjr),M(Z3,Wt,null),e(pr,zjr),e(pr,Vr),M(g$,Vr,null),e(Vr,Qjr),e(Vr,u3e),e(u3e,Wjr),e(Vr,Hjr),e(Vr,Tn),e(Tn,Ujr),e(Tn,b3e),e(b3e,Jjr),e(Tn,Yjr),e(Tn,v3e),e(v3e,Kjr),e(Tn,Zjr),e(Tn,F3e),e(F3e,eDr),e(Tn,oDr),e(Vr,rDr),e(Vr,oe),e(oe,e5),e(e5,T3e),e(T3e,tDr),e(e5,aDr),e(e5,YZ),e(YZ,nDr),e(e5,sDr),e(oe,lDr),e(oe,o5),e(o5,M3e),e(M3e,iDr),e(o5,dDr),e(o5,KZ),e(KZ,cDr),e(o5,fDr),e(oe,mDr),e(oe,r5),e(r5,E3e),e(E3e,gDr),e(r5,hDr),e(r5,ZZ),e(ZZ,pDr),e(r5,_Dr),e(oe,uDr),e(oe,t5),e(t5,C3e),e(C3e,bDr),e(t5,vDr),e(t5,eee),e(eee,FDr),e(t5,TDr),e(oe,MDr),e(oe,a5),e(a5,w3e),e(w3e,EDr),e(a5,CDr),e(a5,oee),e(oee,wDr),e(a5,ADr),e(oe,LDr),e(oe,n5),e(n5,A3e),e(A3e,yDr),e(n5,xDr),e(n5,ree),e(ree,$Dr),e(n5,kDr),e(oe,SDr),e(oe,s5),e(s5,L3e),e(L3e,RDr),e(s5,PDr),e(s5,tee),e(tee,BDr),e(s5,IDr),e(oe,NDr),e(oe,l5),e(l5,y3e),e(y3e,qDr),e(l5,jDr),e(l5,aee),e(aee,DDr),e(l5,GDr),e(oe,ODr),e(oe,i5),e(i5,x3e),e(x3e,VDr),e(i5,XDr),e(i5,nee),e(nee,zDr),e(i5,QDr),e(oe,WDr),e(oe,d5),e(d5,$3e),e($3e,HDr),e(d5,UDr),e(d5,see),e(see,JDr),e(d5,YDr),e(oe,KDr),e(oe,c5),e(c5,k3e),e(k3e,ZDr),e(c5,eGr),e(c5,lee),e(lee,oGr),e(c5,rGr),e(oe,tGr),e(oe,f5),e(f5,S3e),e(S3e,aGr),e(f5,nGr),e(f5,iee),e(iee,sGr),e(f5,lGr),e(oe,iGr),e(oe,m5),e(m5,R3e),e(R3e,dGr),e(m5,cGr),e(m5,dee),e(dee,fGr),e(m5,mGr),e(oe,gGr),e(oe,g5),e(g5,P3e),e(P3e,hGr),e(g5,pGr),e(g5,cee),e(cee,_Gr),e(g5,uGr),e(oe,bGr),e(oe,h5),e(h5,B3e),e(B3e,vGr),e(h5,FGr),e(h5,fee),e(fee,TGr),e(h5,MGr),e(oe,EGr),e(oe,p5),e(p5,I3e),e(I3e,CGr),e(p5,wGr),e(p5,mee),e(mee,AGr),e(p5,LGr),e(oe,yGr),e(oe,_5),e(_5,N3e),e(N3e,xGr),e(_5,$Gr),e(_5,gee),e(gee,kGr),e(_5,SGr),e(oe,RGr),e(oe,u5),e(u5,q3e),e(q3e,PGr),e(u5,BGr),e(u5,hee),e(hee,IGr),e(u5,NGr),e(oe,qGr),e(oe,b5),e(b5,j3e),e(j3e,jGr),e(b5,DGr),e(b5,pee),e(pee,GGr),e(b5,OGr),e(oe,VGr),e(oe,v5),e(v5,D3e),e(D3e,XGr),e(v5,zGr),e(v5,_ee),e(_ee,QGr),e(v5,WGr),e(oe,HGr),e(oe,F5),e(F5,G3e),e(G3e,UGr),e(F5,JGr),e(F5,uee),e(uee,YGr),e(F5,KGr),e(oe,ZGr),e(oe,T5),e(T5,O3e),e(O3e,eOr),e(T5,oOr),e(T5,bee),e(bee,rOr),e(T5,tOr),e(oe,aOr),e(oe,M5),e(M5,V3e),e(V3e,nOr),e(M5,sOr),e(M5,vee),e(vee,lOr),e(M5,iOr),e(oe,dOr),e(oe,E5),e(E5,X3e),e(X3e,cOr),e(E5,fOr),e(E5,Fee),e(Fee,mOr),e(E5,gOr),e(oe,hOr),e(oe,C5),e(C5,z3e),e(z3e,pOr),e(C5,_Or),e(C5,Tee),e(Tee,uOr),e(C5,bOr),e(oe,vOr),e(oe,w5),e(w5,Q3e),e(Q3e,FOr),e(w5,TOr),e(w5,Mee),e(Mee,MOr),e(w5,EOr),e(oe,COr),e(oe,A5),e(A5,W3e),e(W3e,wOr),e(A5,AOr),e(A5,Eee),e(Eee,LOr),e(A5,yOr),e(oe,xOr),e(oe,L5),e(L5,H3e),e(H3e,$Or),e(L5,kOr),e(L5,Cee),e(Cee,SOr),e(L5,ROr),e(Vr,POr),M(y5,Vr,null),b(f,Oze,u),b(f,Yc,u),e(Yc,x5),e(x5,U3e),M(h$,U3e,null),e(Yc,BOr),e(Yc,J3e),e(J3e,IOr),b(f,Vze,u),b(f,_r,u),M(p$,_r,null),e(_r,NOr),e(_r,Kc),e(Kc,qOr),e(Kc,wee),e(wee,jOr),e(Kc,DOr),e(Kc,Aee),e(Aee,GOr),e(Kc,OOr),e(_r,VOr),e(_r,_$),e(_$,XOr),e(_$,Y3e),e(Y3e,zOr),e(_$,QOr),e(_r,WOr),e(_r,Ht),M(u$,Ht,null),e(Ht,HOr),e(Ht,K3e),e(K3e,UOr),e(Ht,JOr),e(Ht,Zc),e(Zc,YOr),e(Zc,Z3e),e(Z3e,KOr),e(Zc,ZOr),e(Zc,Lee),e(Lee,eVr),e(Zc,oVr),e(Ht,rVr),M($5,Ht,null),e(_r,tVr),e(_r,Xr),M(b$,Xr,null),e(Xr,aVr),e(Xr,e5e),e(e5e,nVr),e(Xr,sVr),e(Xr,Mn),e(Mn,lVr),e(Mn,o5e),e(o5e,iVr),e(Mn,dVr),e(Mn,r5e),e(r5e,cVr),e(Mn,fVr),e(Mn,t5e),e(t5e,mVr),e(Mn,gVr),e(Xr,hVr),e(Xr,Ae),e(Ae,k5),e(k5,a5e),e(a5e,pVr),e(k5,_Vr),e(k5,yee),e(yee,uVr),e(k5,bVr),e(Ae,vVr),e(Ae,S5),e(S5,n5e),e(n5e,FVr),e(S5,TVr),e(S5,xee),e(xee,MVr),e(S5,EVr),e(Ae,CVr),e(Ae,R5),e(R5,s5e),e(s5e,wVr),e(R5,AVr),e(R5,$ee),e($ee,LVr),e(R5,yVr),e(Ae,xVr),e(Ae,P5),e(P5,l5e),e(l5e,$Vr),e(P5,kVr),e(P5,kee),e(kee,SVr),e(P5,RVr),e(Ae,PVr),e(Ae,B5),e(B5,i5e),e(i5e,BVr),e(B5,IVr),e(B5,See),e(See,NVr),e(B5,qVr),e(Ae,jVr),e(Ae,I5),e(I5,d5e),e(d5e,DVr),e(I5,GVr),e(I5,Ree),e(Ree,OVr),e(I5,VVr),e(Ae,XVr),e(Ae,N5),e(N5,c5e),e(c5e,zVr),e(N5,QVr),e(N5,Pee),e(Pee,WVr),e(N5,HVr),e(Ae,UVr),e(Ae,q5),e(q5,f5e),e(f5e,JVr),e(q5,YVr),e(q5,Bee),e(Bee,KVr),e(q5,ZVr),e(Ae,eXr),e(Ae,j5),e(j5,m5e),e(m5e,oXr),e(j5,rXr),e(j5,Iee),e(Iee,tXr),e(j5,aXr),e(Ae,nXr),e(Ae,D5),e(D5,g5e),e(g5e,sXr),e(D5,lXr),e(D5,Nee),e(Nee,iXr),e(D5,dXr),e(Ae,cXr),e(Ae,G5),e(G5,h5e),e(h5e,fXr),e(G5,mXr),e(G5,qee),e(qee,gXr),e(G5,hXr),e(Xr,pXr),M(O5,Xr,null),b(f,Xze,u),b(f,ef,u),e(ef,V5),e(V5,p5e),M(v$,p5e,null),e(ef,_Xr),e(ef,_5e),e(_5e,uXr),b(f,zze,u),b(f,ur,u),M(F$,ur,null),e(ur,bXr),e(ur,of),e(of,vXr),e(of,jee),e(jee,FXr),e(of,TXr),e(of,Dee),e(Dee,MXr),e(of,EXr),e(ur,CXr),e(ur,T$),e(T$,wXr),e(T$,u5e),e(u5e,AXr),e(T$,LXr),e(ur,yXr),e(ur,Ut),M(M$,Ut,null),e(Ut,xXr),e(Ut,b5e),e(b5e,$Xr),e(Ut,kXr),e(Ut,rf),e(rf,SXr),e(rf,v5e),e(v5e,RXr),e(rf,PXr),e(rf,Gee),e(Gee,BXr),e(rf,IXr),e(Ut,NXr),M(X5,Ut,null),e(ur,qXr),e(ur,zr),M(E$,zr,null),e(zr,jXr),e(zr,F5e),e(F5e,DXr),e(zr,GXr),e(zr,En),e(En,OXr),e(En,T5e),e(T5e,VXr),e(En,XXr),e(En,M5e),e(M5e,zXr),e(En,QXr),e(En,E5e),e(E5e,WXr),e(En,HXr),e(zr,UXr),e(zr,Ee),e(Ee,z5),e(z5,C5e),e(C5e,JXr),e(z5,YXr),e(z5,Oee),e(Oee,KXr),e(z5,ZXr),e(Ee,ezr),e(Ee,Q5),e(Q5,w5e),e(w5e,ozr),e(Q5,rzr),e(Q5,Vee),e(Vee,tzr),e(Q5,azr),e(Ee,nzr),e(Ee,W5),e(W5,A5e),e(A5e,szr),e(W5,lzr),e(W5,Xee),e(Xee,izr),e(W5,dzr),e(Ee,czr),e(Ee,H5),e(H5,L5e),e(L5e,fzr),e(H5,mzr),e(H5,zee),e(zee,gzr),e(H5,hzr),e(Ee,pzr),e(Ee,U5),e(U5,y5e),e(y5e,_zr),e(U5,uzr),e(U5,Qee),e(Qee,bzr),e(U5,vzr),e(Ee,Fzr),e(Ee,J5),e(J5,x5e),e(x5e,Tzr),e(J5,Mzr),e(J5,Wee),e(Wee,Ezr),e(J5,Czr),e(Ee,wzr),e(Ee,Y5),e(Y5,$5e),e($5e,Azr),e(Y5,Lzr),e(Y5,Hee),e(Hee,yzr),e(Y5,xzr),e(Ee,$zr),e(Ee,K5),e(K5,k5e),e(k5e,kzr),e(K5,Szr),e(K5,Uee),e(Uee,Rzr),e(K5,Pzr),e(Ee,Bzr),e(Ee,Z5),e(Z5,S5e),e(S5e,Izr),e(Z5,Nzr),e(Z5,Jee),e(Jee,qzr),e(Z5,jzr),e(Ee,Dzr),e(Ee,ew),e(ew,R5e),e(R5e,Gzr),e(ew,Ozr),e(ew,Yee),e(Yee,Vzr),e(ew,Xzr),e(Ee,zzr),e(Ee,ow),e(ow,P5e),e(P5e,Qzr),e(ow,Wzr),e(ow,Kee),e(Kee,Hzr),e(ow,Uzr),e(Ee,Jzr),e(Ee,rw),e(rw,B5e),e(B5e,Yzr),e(rw,Kzr),e(rw,Zee),e(Zee,Zzr),e(rw,eQr),e(Ee,oQr),e(Ee,tw),e(tw,I5e),e(I5e,rQr),e(tw,tQr),e(tw,eoe),e(eoe,aQr),e(tw,nQr),e(zr,sQr),M(aw,zr,null),b(f,Qze,u),b(f,tf,u),e(tf,nw),e(nw,N5e),M(C$,N5e,null),e(tf,lQr),e(tf,q5e),e(q5e,iQr),b(f,Wze,u),b(f,br,u),M(w$,br,null),e(br,dQr),e(br,af),e(af,cQr),e(af,ooe),e(ooe,fQr),e(af,mQr),e(af,roe),e(roe,gQr),e(af,hQr),e(br,pQr),e(br,A$),e(A$,_Qr),e(A$,j5e),e(j5e,uQr),e(A$,bQr),e(br,vQr),e(br,Jt),M(L$,Jt,null),e(Jt,FQr),e(Jt,D5e),e(D5e,TQr),e(Jt,MQr),e(Jt,nf),e(nf,EQr),e(nf,G5e),e(G5e,CQr),e(nf,wQr),e(nf,toe),e(toe,AQr),e(nf,LQr),e(Jt,yQr),M(sw,Jt,null),e(br,xQr),e(br,Qr),M(y$,Qr,null),e(Qr,$Qr),e(Qr,O5e),e(O5e,kQr),e(Qr,SQr),e(Qr,Cn),e(Cn,RQr),e(Cn,V5e),e(V5e,PQr),e(Cn,BQr),e(Cn,X5e),e(X5e,IQr),e(Cn,NQr),e(Cn,z5e),e(z5e,qQr),e(Cn,jQr),e(Qr,DQr),e(Qr,$e),e($e,lw),e(lw,Q5e),e(Q5e,GQr),e(lw,OQr),e(lw,aoe),e(aoe,VQr),e(lw,XQr),e($e,zQr),e($e,iw),e(iw,W5e),e(W5e,QQr),e(iw,WQr),e(iw,noe),e(noe,HQr),e(iw,UQr),e($e,JQr),e($e,dw),e(dw,H5e),e(H5e,YQr),e(dw,KQr),e(dw,soe),e(soe,ZQr),e(dw,eWr),e($e,oWr),e($e,cw),e(cw,U5e),e(U5e,rWr),e(cw,tWr),e(cw,loe),e(loe,aWr),e(cw,nWr),e($e,sWr),e($e,fw),e(fw,J5e),e(J5e,lWr),e(fw,iWr),e(fw,ioe),e(ioe,dWr),e(fw,cWr),e($e,fWr),e($e,mw),e(mw,Y5e),e(Y5e,mWr),e(mw,gWr),e(mw,doe),e(doe,hWr),e(mw,pWr),e($e,_Wr),e($e,gw),e(gw,K5e),e(K5e,uWr),e(gw,bWr),e(gw,coe),e(coe,vWr),e(gw,FWr),e($e,TWr),e($e,hw),e(hw,Z5e),e(Z5e,MWr),e(hw,EWr),e(hw,foe),e(foe,CWr),e(hw,wWr),e($e,AWr),e($e,pw),e(pw,ewe),e(ewe,LWr),e(pw,yWr),e(pw,moe),e(moe,xWr),e(pw,$Wr),e($e,kWr),e($e,_w),e(_w,owe),e(owe,SWr),e(_w,RWr),e(_w,goe),e(goe,PWr),e(_w,BWr),e(Qr,IWr),M(uw,Qr,null),b(f,Hze,u),b(f,sf,u),e(sf,bw),e(bw,rwe),M(x$,rwe,null),e(sf,NWr),e(sf,twe),e(twe,qWr),b(f,Uze,u),b(f,vr,u),M($$,vr,null),e(vr,jWr),e(vr,lf),e(lf,DWr),e(lf,hoe),e(hoe,GWr),e(lf,OWr),e(lf,poe),e(poe,VWr),e(lf,XWr),e(vr,zWr),e(vr,k$),e(k$,QWr),e(k$,awe),e(awe,WWr),e(k$,HWr),e(vr,UWr),e(vr,Yt),M(S$,Yt,null),e(Yt,JWr),e(Yt,nwe),e(nwe,YWr),e(Yt,KWr),e(Yt,df),e(df,ZWr),e(df,swe),e(swe,eHr),e(df,oHr),e(df,_oe),e(_oe,rHr),e(df,tHr),e(Yt,aHr),M(vw,Yt,null),e(vr,nHr),e(vr,Wr),M(R$,Wr,null),e(Wr,sHr),e(Wr,lwe),e(lwe,lHr),e(Wr,iHr),e(Wr,wn),e(wn,dHr),e(wn,iwe),e(iwe,cHr),e(wn,fHr),e(wn,dwe),e(dwe,mHr),e(wn,gHr),e(wn,cwe),e(cwe,hHr),e(wn,pHr),e(Wr,_Hr),e(Wr,ke),e(ke,Fw),e(Fw,fwe),e(fwe,uHr),e(Fw,bHr),e(Fw,uoe),e(uoe,vHr),e(Fw,FHr),e(ke,THr),e(ke,Tw),e(Tw,mwe),e(mwe,MHr),e(Tw,EHr),e(Tw,boe),e(boe,CHr),e(Tw,wHr),e(ke,AHr),e(ke,Mw),e(Mw,gwe),e(gwe,LHr),e(Mw,yHr),e(Mw,voe),e(voe,xHr),e(Mw,$Hr),e(ke,kHr),e(ke,Ew),e(Ew,hwe),e(hwe,SHr),e(Ew,RHr),e(Ew,Foe),e(Foe,PHr),e(Ew,BHr),e(ke,IHr),e(ke,Cw),e(Cw,pwe),e(pwe,NHr),e(Cw,qHr),e(Cw,Toe),e(Toe,jHr),e(Cw,DHr),e(ke,GHr),e(ke,ww),e(ww,_we),e(_we,OHr),e(ww,VHr),e(ww,Moe),e(Moe,XHr),e(ww,zHr),e(ke,QHr),e(ke,Aw),e(Aw,uwe),e(uwe,WHr),e(Aw,HHr),e(Aw,Eoe),e(Eoe,UHr),e(Aw,JHr),e(ke,YHr),e(ke,Lw),e(Lw,bwe),e(bwe,KHr),e(Lw,ZHr),e(Lw,Coe),e(Coe,eUr),e(Lw,oUr),e(ke,rUr),e(ke,yw),e(yw,vwe),e(vwe,tUr),e(yw,aUr),e(yw,woe),e(woe,nUr),e(yw,sUr),e(ke,lUr),e(ke,xw),e(xw,Fwe),e(Fwe,iUr),e(xw,dUr),e(xw,Aoe),e(Aoe,cUr),e(xw,fUr),e(Wr,mUr),M($w,Wr,null),b(f,Jze,u),b(f,cf,u),e(cf,kw),e(kw,Twe),M(P$,Twe,null),e(cf,gUr),e(cf,Mwe),e(Mwe,hUr),b(f,Yze,u),b(f,Fr,u),M(B$,Fr,null),e(Fr,pUr),e(Fr,ff),e(ff,_Ur),e(ff,Loe),e(Loe,uUr),e(ff,bUr),e(ff,yoe),e(yoe,vUr),e(ff,FUr),e(Fr,TUr),e(Fr,I$),e(I$,MUr),e(I$,Ewe),e(Ewe,EUr),e(I$,CUr),e(Fr,wUr),e(Fr,Kt),M(N$,Kt,null),e(Kt,AUr),e(Kt,Cwe),e(Cwe,LUr),e(Kt,yUr),e(Kt,mf),e(mf,xUr),e(mf,wwe),e(wwe,$Ur),e(mf,kUr),e(mf,xoe),e(xoe,SUr),e(mf,RUr),e(Kt,PUr),M(Sw,Kt,null),e(Fr,BUr),e(Fr,Hr),M(q$,Hr,null),e(Hr,IUr),e(Hr,Awe),e(Awe,NUr),e(Hr,qUr),e(Hr,An),e(An,jUr),e(An,Lwe),e(Lwe,DUr),e(An,GUr),e(An,ywe),e(ywe,OUr),e(An,VUr),e(An,xwe),e(xwe,XUr),e(An,zUr),e(Hr,QUr),e(Hr,Se),e(Se,Rw),e(Rw,$we),e($we,WUr),e(Rw,HUr),e(Rw,$oe),e($oe,UUr),e(Rw,JUr),e(Se,YUr),e(Se,Pw),e(Pw,kwe),e(kwe,KUr),e(Pw,ZUr),e(Pw,koe),e(koe,eJr),e(Pw,oJr),e(Se,rJr),e(Se,Bw),e(Bw,Swe),e(Swe,tJr),e(Bw,aJr),e(Bw,Soe),e(Soe,nJr),e(Bw,sJr),e(Se,lJr),e(Se,Iw),e(Iw,Rwe),e(Rwe,iJr),e(Iw,dJr),e(Iw,Roe),e(Roe,cJr),e(Iw,fJr),e(Se,mJr),e(Se,Nw),e(Nw,Pwe),e(Pwe,gJr),e(Nw,hJr),e(Nw,Poe),e(Poe,pJr),e(Nw,_Jr),e(Se,uJr),e(Se,qw),e(qw,Bwe),e(Bwe,bJr),e(qw,vJr),e(qw,Boe),e(Boe,FJr),e(qw,TJr),e(Se,MJr),e(Se,jw),e(jw,Iwe),e(Iwe,EJr),e(jw,CJr),e(jw,Ioe),e(Ioe,wJr),e(jw,AJr),e(Se,LJr),e(Se,Dw),e(Dw,Nwe),e(Nwe,yJr),e(Dw,xJr),e(Dw,Noe),e(Noe,$Jr),e(Dw,kJr),e(Se,SJr),e(Se,Gw),e(Gw,qwe),e(qwe,RJr),e(Gw,PJr),e(Gw,qoe),e(qoe,BJr),e(Gw,IJr),e(Se,NJr),e(Se,Ow),e(Ow,jwe),e(jwe,qJr),e(Ow,jJr),e(Ow,joe),e(joe,DJr),e(Ow,GJr),e(Hr,OJr),M(Vw,Hr,null),b(f,Kze,u),b(f,gf,u),e(gf,Xw),e(Xw,Dwe),M(j$,Dwe,null),e(gf,VJr),e(gf,Gwe),e(Gwe,XJr),b(f,Zze,u),b(f,Tr,u),M(D$,Tr,null),e(Tr,zJr),e(Tr,hf),e(hf,QJr),e(hf,Doe),e(Doe,WJr),e(hf,HJr),e(hf,Goe),e(Goe,UJr),e(hf,JJr),e(Tr,YJr),e(Tr,G$),e(G$,KJr),e(G$,Owe),e(Owe,ZJr),e(G$,eYr),e(Tr,oYr),e(Tr,Zt),M(O$,Zt,null),e(Zt,rYr),e(Zt,Vwe),e(Vwe,tYr),e(Zt,aYr),e(Zt,pf),e(pf,nYr),e(pf,Xwe),e(Xwe,sYr),e(pf,lYr),e(pf,Ooe),e(Ooe,iYr),e(pf,dYr),e(Zt,cYr),M(zw,Zt,null),e(Tr,fYr),e(Tr,Ur),M(V$,Ur,null),e(Ur,mYr),e(Ur,zwe),e(zwe,gYr),e(Ur,hYr),e(Ur,Ln),e(Ln,pYr),e(Ln,Qwe),e(Qwe,_Yr),e(Ln,uYr),e(Ln,Wwe),e(Wwe,bYr),e(Ln,vYr),e(Ln,Hwe),e(Hwe,FYr),e(Ln,TYr),e(Ur,MYr),e(Ur,Re),e(Re,Qw),e(Qw,Uwe),e(Uwe,EYr),e(Qw,CYr),e(Qw,Voe),e(Voe,wYr),e(Qw,AYr),e(Re,LYr),e(Re,Ww),e(Ww,Jwe),e(Jwe,yYr),e(Ww,xYr),e(Ww,Xoe),e(Xoe,$Yr),e(Ww,kYr),e(Re,SYr),e(Re,Hw),e(Hw,Ywe),e(Ywe,RYr),e(Hw,PYr),e(Hw,zoe),e(zoe,BYr),e(Hw,IYr),e(Re,NYr),e(Re,Uw),e(Uw,Kwe),e(Kwe,qYr),e(Uw,jYr),e(Uw,Qoe),e(Qoe,DYr),e(Uw,GYr),e(Re,OYr),e(Re,Jw),e(Jw,Zwe),e(Zwe,VYr),e(Jw,XYr),e(Jw,Woe),e(Woe,zYr),e(Jw,QYr),e(Re,WYr),e(Re,Yw),e(Yw,eAe),e(eAe,HYr),e(Yw,UYr),e(Yw,Hoe),e(Hoe,JYr),e(Yw,YYr),e(Re,KYr),e(Re,Kw),e(Kw,oAe),e(oAe,ZYr),e(Kw,eKr),e(Kw,Uoe),e(Uoe,oKr),e(Kw,rKr),e(Re,tKr),e(Re,Zw),e(Zw,rAe),e(rAe,aKr),e(Zw,nKr),e(Zw,Joe),e(Joe,sKr),e(Zw,lKr),e(Re,iKr),e(Re,eA),e(eA,tAe),e(tAe,dKr),e(eA,cKr),e(eA,Yoe),e(Yoe,fKr),e(eA,mKr),e(Re,gKr),e(Re,oA),e(oA,aAe),e(aAe,hKr),e(oA,pKr),e(oA,Koe),e(Koe,_Kr),e(oA,uKr),e(Ur,bKr),M(rA,Ur,null),b(f,eQe,u),b(f,_f,u),e(_f,tA),e(tA,nAe),M(X$,nAe,null),e(_f,vKr),e(_f,sAe),e(sAe,FKr),b(f,oQe,u),b(f,Mr,u),M(z$,Mr,null),e(Mr,TKr),e(Mr,uf),e(uf,MKr),e(uf,Zoe),e(Zoe,EKr),e(uf,CKr),e(uf,ere),e(ere,wKr),e(uf,AKr),e(Mr,LKr),e(Mr,Q$),e(Q$,yKr),e(Q$,lAe),e(lAe,xKr),e(Q$,$Kr),e(Mr,kKr),e(Mr,ea),M(W$,ea,null),e(ea,SKr),e(ea,iAe),e(iAe,RKr),e(ea,PKr),e(ea,bf),e(bf,BKr),e(bf,dAe),e(dAe,IKr),e(bf,NKr),e(bf,ore),e(ore,qKr),e(bf,jKr),e(ea,DKr),M(aA,ea,null),e(Mr,GKr),e(Mr,Jr),M(H$,Jr,null),e(Jr,OKr),e(Jr,cAe),e(cAe,VKr),e(Jr,XKr),e(Jr,yn),e(yn,zKr),e(yn,fAe),e(fAe,QKr),e(yn,WKr),e(yn,mAe),e(mAe,HKr),e(yn,UKr),e(yn,gAe),e(gAe,JKr),e(yn,YKr),e(Jr,KKr),e(Jr,Ve),e(Ve,nA),e(nA,hAe),e(hAe,ZKr),e(nA,eZr),e(nA,rre),e(rre,oZr),e(nA,rZr),e(Ve,tZr),e(Ve,sA),e(sA,pAe),e(pAe,aZr),e(sA,nZr),e(sA,tre),e(tre,sZr),e(sA,lZr),e(Ve,iZr),e(Ve,lA),e(lA,_Ae),e(_Ae,dZr),e(lA,cZr),e(lA,are),e(are,fZr),e(lA,mZr),e(Ve,gZr),e(Ve,iA),e(iA,uAe),e(uAe,hZr),e(iA,pZr),e(iA,nre),e(nre,_Zr),e(iA,uZr),e(Ve,bZr),e(Ve,dA),e(dA,bAe),e(bAe,vZr),e(dA,FZr),e(dA,sre),e(sre,TZr),e(dA,MZr),e(Ve,EZr),e(Ve,cA),e(cA,vAe),e(vAe,CZr),e(cA,wZr),e(cA,lre),e(lre,AZr),e(cA,LZr),e(Ve,yZr),e(Ve,fA),e(fA,FAe),e(FAe,xZr),e(fA,$Zr),e(fA,ire),e(ire,kZr),e(fA,SZr),e(Ve,RZr),e(Ve,mA),e(mA,TAe),e(TAe,PZr),e(mA,BZr),e(mA,dre),e(dre,IZr),e(mA,NZr),e(Jr,qZr),M(gA,Jr,null),b(f,rQe,u),b(f,vf,u),e(vf,hA),e(hA,MAe),M(U$,MAe,null),e(vf,jZr),e(vf,EAe),e(EAe,DZr),b(f,tQe,u),b(f,Er,u),M(J$,Er,null),e(Er,GZr),e(Er,Ff),e(Ff,OZr),e(Ff,cre),e(cre,VZr),e(Ff,XZr),e(Ff,fre),e(fre,zZr),e(Ff,QZr),e(Er,WZr),e(Er,Y$),e(Y$,HZr),e(Y$,CAe),e(CAe,UZr),e(Y$,JZr),e(Er,YZr),e(Er,oa),M(K$,oa,null),e(oa,KZr),e(oa,wAe),e(wAe,ZZr),e(oa,eet),e(oa,Tf),e(Tf,oet),e(Tf,AAe),e(AAe,ret),e(Tf,tet),e(Tf,mre),e(mre,aet),e(Tf,net),e(oa,set),M(pA,oa,null),e(Er,iet),e(Er,Yr),M(Z$,Yr,null),e(Yr,det),e(Yr,LAe),e(LAe,cet),e(Yr,fet),e(Yr,xn),e(xn,met),e(xn,yAe),e(yAe,get),e(xn,het),e(xn,xAe),e(xAe,pet),e(xn,_et),e(xn,$Ae),e($Ae,uet),e(xn,bet),e(Yr,vet),e(Yr,Xe),e(Xe,_A),e(_A,kAe),e(kAe,Fet),e(_A,Tet),e(_A,gre),e(gre,Met),e(_A,Eet),e(Xe,Cet),e(Xe,uA),e(uA,SAe),e(SAe,wet),e(uA,Aet),e(uA,hre),e(hre,Let),e(uA,yet),e(Xe,xet),e(Xe,bA),e(bA,RAe),e(RAe,$et),e(bA,ket),e(bA,pre),e(pre,Set),e(bA,Ret),e(Xe,Pet),e(Xe,vA),e(vA,PAe),e(PAe,Bet),e(vA,Iet),e(vA,_re),e(_re,Net),e(vA,qet),e(Xe,jet),e(Xe,FA),e(FA,BAe),e(BAe,Det),e(FA,Get),e(FA,ure),e(ure,Oet),e(FA,Vet),e(Xe,Xet),e(Xe,TA),e(TA,IAe),e(IAe,zet),e(TA,Qet),e(TA,bre),e(bre,Wet),e(TA,Het),e(Xe,Uet),e(Xe,MA),e(MA,NAe),e(NAe,Jet),e(MA,Yet),e(MA,vre),e(vre,Ket),e(MA,Zet),e(Xe,eot),e(Xe,EA),e(EA,qAe),e(qAe,oot),e(EA,rot),e(EA,Fre),e(Fre,tot),e(EA,aot),e(Yr,not),M(CA,Yr,null),b(f,aQe,u),b(f,Mf,u),e(Mf,wA),e(wA,jAe),M(ek,jAe,null),e(Mf,sot),e(Mf,DAe),e(DAe,lot),b(f,nQe,u),b(f,Cr,u),M(ok,Cr,null),e(Cr,iot),e(Cr,Ef),e(Ef,dot),e(Ef,Tre),e(Tre,cot),e(Ef,fot),e(Ef,Mre),e(Mre,mot),e(Ef,got),e(Cr,hot),e(Cr,rk),e(rk,pot),e(rk,GAe),e(GAe,_ot),e(rk,uot),e(Cr,bot),e(Cr,ra),M(tk,ra,null),e(ra,vot),e(ra,OAe),e(OAe,Fot),e(ra,Tot),e(ra,Cf),e(Cf,Mot),e(Cf,VAe),e(VAe,Eot),e(Cf,Cot),e(Cf,Ere),e(Ere,wot),e(Cf,Aot),e(ra,Lot),M(AA,ra,null),e(Cr,yot),e(Cr,Kr),M(ak,Kr,null),e(Kr,xot),e(Kr,XAe),e(XAe,$ot),e(Kr,kot),e(Kr,$n),e($n,Sot),e($n,zAe),e(zAe,Rot),e($n,Pot),e($n,QAe),e(QAe,Bot),e($n,Iot),e($n,WAe),e(WAe,Not),e($n,qot),e(Kr,jot),e(Kr,HAe),e(HAe,LA),e(LA,UAe),e(UAe,Dot),e(LA,Got),e(LA,Cre),e(Cre,Oot),e(LA,Vot),e(Kr,Xot),M(yA,Kr,null),b(f,sQe,u),b(f,wf,u),e(wf,xA),e(xA,JAe),M(nk,JAe,null),e(wf,zot),e(wf,YAe),e(YAe,Qot),b(f,lQe,u),b(f,wr,u),M(sk,wr,null),e(wr,Wot),e(wr,Af),e(Af,Hot),e(Af,wre),e(wre,Uot),e(Af,Jot),e(Af,Are),e(Are,Yot),e(Af,Kot),e(wr,Zot),e(wr,lk),e(lk,ert),e(lk,KAe),e(KAe,ort),e(lk,rrt),e(wr,trt),e(wr,ta),M(ik,ta,null),e(ta,art),e(ta,ZAe),e(ZAe,nrt),e(ta,srt),e(ta,Lf),e(Lf,lrt),e(Lf,e6e),e(e6e,irt),e(Lf,drt),e(Lf,Lre),e(Lre,crt),e(Lf,frt),e(ta,mrt),M($A,ta,null),e(wr,grt),e(wr,Zr),M(dk,Zr,null),e(Zr,hrt),e(Zr,o6e),e(o6e,prt),e(Zr,_rt),e(Zr,kn),e(kn,urt),e(kn,r6e),e(r6e,brt),e(kn,vrt),e(kn,t6e),e(t6e,Frt),e(kn,Trt),e(kn,a6e),e(a6e,Mrt),e(kn,Ert),e(Zr,Crt),e(Zr,ck),e(ck,kA),e(kA,n6e),e(n6e,wrt),e(kA,Art),e(kA,yre),e(yre,Lrt),e(kA,yrt),e(ck,xrt),e(ck,SA),e(SA,s6e),e(s6e,$rt),e(SA,krt),e(SA,xre),e(xre,Srt),e(SA,Rrt),e(Zr,Prt),M(RA,Zr,null),b(f,iQe,u),b(f,yf,u),e(yf,PA),e(PA,l6e),M(fk,l6e,null),e(yf,Brt),e(yf,i6e),e(i6e,Irt),b(f,dQe,u),b(f,Ar,u),M(mk,Ar,null),e(Ar,Nrt),e(Ar,xf),e(xf,qrt),e(xf,$re),e($re,jrt),e(xf,Drt),e(xf,kre),e(kre,Grt),e(xf,Ort),e(Ar,Vrt),e(Ar,gk),e(gk,Xrt),e(gk,d6e),e(d6e,zrt),e(gk,Qrt),e(Ar,Wrt),e(Ar,aa),M(hk,aa,null),e(aa,Hrt),e(aa,c6e),e(c6e,Urt),e(aa,Jrt),e(aa,$f),e($f,Yrt),e($f,f6e),e(f6e,Krt),e($f,Zrt),e($f,Sre),e(Sre,ett),e($f,ott),e(aa,rtt),M(BA,aa,null),e(Ar,ttt),e(Ar,et),M(pk,et,null),e(et,att),e(et,m6e),e(m6e,ntt),e(et,stt),e(et,Sn),e(Sn,ltt),e(Sn,g6e),e(g6e,itt),e(Sn,dtt),e(Sn,h6e),e(h6e,ctt),e(Sn,ftt),e(Sn,p6e),e(p6e,mtt),e(Sn,gtt),e(et,htt),e(et,_6e),e(_6e,IA),e(IA,u6e),e(u6e,ptt),e(IA,_tt),e(IA,Rre),e(Rre,utt),e(IA,btt),e(et,vtt),M(NA,et,null),cQe=!0},p(f,[u]){const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),jf.$set(_k);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),Yg.$set(b6e);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),Rh.$set(v6e);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),_p.$set(F6e);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),up.$set(uk);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),qp.$set(T6e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),jp.$set(Rn);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),Op.$set(M6e);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),Qu.$set(E6e);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),Hu.$set(C6e);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),G2.$set(bk);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),V2.$set(w6e);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),k1.$set(vk);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),R1.$set(A6e);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),vb.$set(Fk);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),Tb.$set(L6e);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),Gb.$set(y6e);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),Vb.$set(x6e);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),Gv.$set(kf);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),Vv.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),T0.$set(k6e);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),E0.$set(S6e);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),k0.$set(Tk);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),R0.$set(R6e);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),uF.$set(P6e);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),vF.$set(B6e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),dT.$set(nt);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),fT.$set(Mk);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),hT.$set(I6e);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),_T.$set(Ek);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),kT.$set(N6e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),RT.$set(st);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),IT.$set(q6e);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),qT.$set(Sf);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),GT.$set(j6e);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),VT.$set(D6e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),e8.$set(L);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),r8.$set(qA);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),d8.$set(G6e);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),f8.$set(O6e);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),E8.$set(jA);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),w8.$set(V6e);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),x8.$set(X6e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),k8.$set(DA);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),q8.$set(z6e);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),D8.$set(Q6e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),z8.$set(GA);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),W8.$set(W6e);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),Y8.$set(H6e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),Z8.$set(OA);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),rM.$set(U6e);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),aM.$set(J6e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),fM.$set(VA);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),gM.$set(Y6e);const K6e={};u&2&&(K6e.$$scope={dirty:u,ctx:f}),_M.$set(K6e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),bM.$set(XA);const Z6e={};u&2&&(Z6e.$$scope={dirty:u,ctx:f}),h4.$set(Z6e);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),_4.$set(e7e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),D4.$set(zA);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),O4.$set(o7e);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),rE.$set(r7e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),aE.$set(QA);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),fE.$set(t7e);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),gE.$set(a7e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),PE.$set(WA);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),IE.$set(n7e);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),WE.$set(s7e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),UE.$set(HA);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),MC.$set(l7e);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),CC.$set(i7e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),OC.$set(UA);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),XC.$set(d7e);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),WC.$set(c7e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),UC.$set(JA);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),YC.$set(f7e);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),ZC.$set(m7e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),F3.$set(YA);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),M3.$set(g7e);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),V3.$set(h7e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),z3.$set(KA);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),W3.$set(p7e);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),U3.$set(_7e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),Y3.$set(ZA);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),Z3.$set(u7e);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),y5.$set(b7e);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),$5.$set(e6);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),O5.$set(v7e);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),X5.$set(F7e);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),aw.$set(o6);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),sw.$set(T7e);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),uw.$set(M7e);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),vw.$set(r6);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),$w.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),Sw.$set(C7e);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),Vw.$set(t6);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),zw.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),rA.$set(A7e);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),aA.$set(a6);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),gA.$set(L7e);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),pA.$set(y7e);const n6={};u&2&&(n6.$$scope={dirty:u,ctx:f}),CA.$set(n6);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),AA.$set(x7e);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),yA.$set($7e);const s6={};u&2&&(s6.$$scope={dirty:u,ctx:f}),$A.$set(s6);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),RA.$set(k7e);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),BA.$set(S7e);const l6={};u&2&&(l6.$$scope={dirty:u,ctx:f}),NA.$set(l6)},i(f){cQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(jf.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(mL.$$.fragment,f),E(Yg.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(bL.$$.fragment,f),E(Rh.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(CL.$$.fragment,f),E(_p.$$.fragment,f),E(up.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(qp.$$.fragment,f),E(jp.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(Op.$$.fragment,f),E(IL.$$.fragment,f),E(Qu.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(Hu.$$.fragment,f),E(GL.$$.fragment,f),E(G2.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(V2.$$.fragment,f),E(QL.$$.fragment,f),E(k1.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(R1.$$.fragment,f),E(YL.$$.fragment,f),E(vb.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(Tb.$$.fragment,f),E(ry.$$.fragment,f),E(Gb.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Vb.$$.fragment,f),E(ly.$$.fragment,f),E(Gv.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Vv.$$.fragment,f),E(my.$$.fragment,f),E(T0.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(E0.$$.fragment,f),E(uy.$$.fragment,f),E(k0.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(R0.$$.fragment,f),E(My.$$.fragment,f),E(uF.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(vF.$$.fragment,f),E(Ly.$$.fragment,f),E(dT.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(fT.$$.fragment,f),E(Sy.$$.fragment,f),E(hT.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(_T.$$.fragment,f),E(Ny.$$.fragment,f),E(kT.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(RT.$$.fragment,f),E(Oy.$$.fragment,f),E(IT.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(qT.$$.fragment,f),E(Wy.$$.fragment,f),E(GT.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(VT.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(r8.$$.fragment,f),E(t9.$$.fragment,f),E(d8.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(f8.$$.fragment,f),E(i9.$$.fragment,f),E(E8.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(w8.$$.fragment,f),E(g9.$$.fragment,f),E(x8.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(k8.$$.fragment,f),E(v9.$$.fragment,f),E(q8.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(D8.$$.fragment,f),E(C9.$$.fragment,f),E(z8.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(W8.$$.fragment,f),E(x9.$$.fragment,f),E(Y8.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(Z8.$$.fragment,f),E(B9.$$.fragment,f),E(rM.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(aM.$$.fragment,f),E(D9.$$.fragment,f),E(fM.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(gM.$$.fragment,f),E(z9.$$.fragment,f),E(_M.$$.fragment,f),E(Q9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(bM.$$.fragment,f),E(J9.$$.fragment,f),E(h4.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(_4.$$.fragment,f),E(ox.$$.fragment,f),E(D4.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(O4.$$.fragment,f),E(sx.$$.fragment,f),E(rE.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(aE.$$.fragment,f),E(fx.$$.fragment,f),E(fE.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(gE.$$.fragment,f),E(_x.$$.fragment,f),E(PE.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(IE.$$.fragment,f),E(Tx.$$.fragment,f),E(WE.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(UE.$$.fragment,f),E(Ax.$$.fragment,f),E(MC.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(CC.$$.fragment,f),E(kx.$$.fragment,f),E(OC.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(XC.$$.fragment,f),E(Ix.$$.fragment,f),E(WC.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(UC.$$.fragment,f),E(Ox.$$.fragment,f),E(YC.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(ZC.$$.fragment,f),E(Wx.$$.fragment,f),E(F3.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(M3.$$.fragment,f),E(Kx.$$.fragment,f),E(V3.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(z3.$$.fragment,f),E(t$.$$.fragment,f),E(W3.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(U3.$$.fragment,f),E(i$.$$.fragment,f),E(Y3.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(Z3.$$.fragment,f),E(g$.$$.fragment,f),E(y5.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E($5.$$.fragment,f),E(b$.$$.fragment,f),E(O5.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(X5.$$.fragment,f),E(E$.$$.fragment,f),E(aw.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(sw.$$.fragment,f),E(y$.$$.fragment,f),E(uw.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(vw.$$.fragment,f),E(R$.$$.fragment,f),E($w.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(Sw.$$.fragment,f),E(q$.$$.fragment,f),E(Vw.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(zw.$$.fragment,f),E(V$.$$.fragment,f),E(rA.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(aA.$$.fragment,f),E(H$.$$.fragment,f),E(gA.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(pA.$$.fragment,f),E(Z$.$$.fragment,f),E(CA.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(AA.$$.fragment,f),E(ak.$$.fragment,f),E(yA.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E($A.$$.fragment,f),E(dk.$$.fragment,f),E(RA.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(BA.$$.fragment,f),E(pk.$$.fragment,f),E(NA.$$.fragment,f),cQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(jf.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(mL.$$.fragment,f),C(Yg.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(bL.$$.fragment,f),C(Rh.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(CL.$$.fragment,f),C(_p.$$.fragment,f),C(up.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(qp.$$.fragment,f),C(jp.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(Op.$$.fragment,f),C(IL.$$.fragment,f),C(Qu.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(Hu.$$.fragment,f),C(GL.$$.fragment,f),C(G2.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(V2.$$.fragment,f),C(QL.$$.fragment,f),C(k1.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(R1.$$.fragment,f),C(YL.$$.fragment,f),C(vb.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(Tb.$$.fragment,f),C(ry.$$.fragment,f),C(Gb.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Vb.$$.fragment,f),C(ly.$$.fragment,f),C(Gv.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Vv.$$.fragment,f),C(my.$$.fragment,f),C(T0.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(E0.$$.fragment,f),C(uy.$$.fragment,f),C(k0.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(R0.$$.fragment,f),C(My.$$.fragment,f),C(uF.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(vF.$$.fragment,f),C(Ly.$$.fragment,f),C(dT.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(fT.$$.fragment,f),C(Sy.$$.fragment,f),C(hT.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(_T.$$.fragment,f),C(Ny.$$.fragment,f),C(kT.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(RT.$$.fragment,f),C(Oy.$$.fragment,f),C(IT.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(qT.$$.fragment,f),C(Wy.$$.fragment,f),C(GT.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(VT.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(r8.$$.fragment,f),C(t9.$$.fragment,f),C(d8.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(f8.$$.fragment,f),C(i9.$$.fragment,f),C(E8.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(w8.$$.fragment,f),C(g9.$$.fragment,f),C(x8.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(k8.$$.fragment,f),C(v9.$$.fragment,f),C(q8.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(D8.$$.fragment,f),C(C9.$$.fragment,f),C(z8.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(W8.$$.fragment,f),C(x9.$$.fragment,f),C(Y8.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(Z8.$$.fragment,f),C(B9.$$.fragment,f),C(rM.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(aM.$$.fragment,f),C(D9.$$.fragment,f),C(fM.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(gM.$$.fragment,f),C(z9.$$.fragment,f),C(_M.$$.fragment,f),C(Q9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(bM.$$.fragment,f),C(J9.$$.fragment,f),C(h4.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(_4.$$.fragment,f),C(ox.$$.fragment,f),C(D4.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(O4.$$.fragment,f),C(sx.$$.fragment,f),C(rE.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(aE.$$.fragment,f),C(fx.$$.fragment,f),C(fE.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(gE.$$.fragment,f),C(_x.$$.fragment,f),C(PE.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(IE.$$.fragment,f),C(Tx.$$.fragment,f),C(WE.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(UE.$$.fragment,f),C(Ax.$$.fragment,f),C(MC.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(CC.$$.fragment,f),C(kx.$$.fragment,f),C(OC.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(XC.$$.fragment,f),C(Ix.$$.fragment,f),C(WC.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(UC.$$.fragment,f),C(Ox.$$.fragment,f),C(YC.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(ZC.$$.fragment,f),C(Wx.$$.fragment,f),C(F3.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(M3.$$.fragment,f),C(Kx.$$.fragment,f),C(V3.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(z3.$$.fragment,f),C(t$.$$.fragment,f),C(W3.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(U3.$$.fragment,f),C(i$.$$.fragment,f),C(Y3.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(Z3.$$.fragment,f),C(g$.$$.fragment,f),C(y5.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C($5.$$.fragment,f),C(b$.$$.fragment,f),C(O5.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(X5.$$.fragment,f),C(E$.$$.fragment,f),C(aw.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(sw.$$.fragment,f),C(y$.$$.fragment,f),C(uw.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(vw.$$.fragment,f),C(R$.$$.fragment,f),C($w.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(Sw.$$.fragment,f),C(q$.$$.fragment,f),C(Vw.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(zw.$$.fragment,f),C(V$.$$.fragment,f),C(rA.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(aA.$$.fragment,f),C(H$.$$.fragment,f),C(gA.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(pA.$$.fragment,f),C(Z$.$$.fragment,f),C(CA.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(AA.$$.fragment,f),C(ak.$$.fragment,f),C(yA.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C($A.$$.fragment,f),C(dk.$$.fragment,f),C(RA.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(BA.$$.fragment,f),C(pk.$$.fragment,f),C(NA.$$.fragment,f),cQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Le),f&&t(wo),f&&t(Ra),f&&t(nXe),f&&t(Pi),w(sL),f&&t(sXe),f&&t(qn),f&&t(lXe),w(lL,f),f&&t(iXe),f&&t(OS),f&&t(dXe),w(jf,f),f&&t(cXe),f&&t(Bi),w(iL),f&&t(fXe),f&&t(Ao),w(dL),w(mL),w(Yg),w(gL),f&&t(mXe),f&&t(Ni),w(hL),f&&t(gXe),f&&t(Lo),w(pL),w(bL),w(Rh),w(vL),f&&t(hXe),f&&t(qi),w(FL),f&&t(pXe),f&&t(yo),w(TL),w(CL),w(_p),w(up),w(wL),f&&t(_Xe),f&&t(ji),w(AL),f&&t(uXe),f&&t(xo),w(LL),w($L),w(qp),w(jp),w(kL),f&&t(bXe),f&&t(Gi),w(SL),f&&t(vXe),f&&t($o),w(RL),w(BL),w(Op),w(IL),w(Qu),f&&t(FXe),f&&t(Xi),w(NL),f&&t(TXe),f&&t(ko),w(qL),w(DL),w(Hu),w(GL),w(G2),f&&t(MXe),f&&t(Wi),w(OL),f&&t(EXe),f&&t(So),w(VL),w(zL),w(V2),w(QL),w(k1),f&&t(CXe),f&&t(Ji),w(WL),f&&t(wXe),f&&t(Ro),w(HL),w(JL),w(R1),w(YL),w(vb),f&&t(AXe),f&&t(Zi),w(KL),f&&t(LXe),f&&t(Po),w(ZL),w(oy),w(Tb),w(ry),w(Gb),f&&t(yXe),f&&t(rd),w(ty),f&&t(xXe),f&&t(Bo),w(ay),w(sy),w(Vb),w(ly),w(Gv),f&&t($Xe),f&&t(nd),w(iy),f&&t(kXe),f&&t(Io),w(dy),w(fy),w(Vv),w(my),w(T0),f&&t(SXe),f&&t(id),w(gy),f&&t(RXe),f&&t(No),w(hy),w(_y),w(E0),w(uy),w(k0),f&&t(PXe),f&&t(fd),w(by),f&&t(BXe),f&&t(jo),w(vy),w(Ty),w(R0),w(My),w(uF),f&&t(IXe),f&&t(hd),w(Ey),f&&t(NXe),f&&t(Do),w(Cy),w(Ay),w(vF),w(Ly),w(dT),f&&t(qXe),f&&t(ud),w(yy),f&&t(jXe),f&&t(Go),w(xy),w(ky),w(fT),w(Sy),w(hT),f&&t(DXe),f&&t(Fd),w(Ry),f&&t(GXe),f&&t(Oo),w(Py),w(Iy),w(_T),w(Ny),w(kT),f&&t(OXe),f&&t(Ed),w(qy),f&&t(VXe),f&&t(Vo),w(jy),w(Gy),w(RT),w(Oy),w(IT),f&&t(XXe),f&&t(Ad),w(Vy),f&&t(zXe),f&&t(Xo),w(Xy),w(Qy),w(qT),w(Wy),w(GT),f&&t(QXe),f&&t(xd),w(Hy),f&&t(WXe),f&&t(zo),w(Uy),w(Yy),w(VT),w(Ky),w(e8),f&&t(HXe),f&&t(Sd),w(Zy),f&&t(UXe),f&&t(Qo),w(e9),w(r9),w(r8),w(t9),w(d8),f&&t(JXe),f&&t(Bd),w(a9),f&&t(YXe),f&&t(Wo),w(n9),w(l9),w(f8),w(i9),w(E8),f&&t(KXe),f&&t(qd),w(d9),f&&t(ZXe),f&&t(Ho),w(c9),w(m9),w(w8),w(g9),w(x8),f&&t(eze),f&&t(Gd),w(p9),f&&t(oze),f&&t(Uo),w(_9),w(b9),w(k8),w(v9),w(q8),f&&t(rze),f&&t(Xd),w(F9),f&&t(tze),f&&t(Jo),w(T9),w(E9),w(D8),w(C9),w(z8),f&&t(aze),f&&t(Hd),w(w9),f&&t(nze),f&&t(Yo),w(A9),w(y9),w(W8),w(x9),w(Y8),f&&t(sze),f&&t(Yd),w(k9),f&&t(lze),f&&t(Ko),w(S9),w(P9),w(Z8),w(B9),w(rM),f&&t(ize),f&&t(ec),w(I9),f&&t(dze),f&&t(Zo),w(N9),w(j9),w(aM),w(D9),w(fM),f&&t(cze),f&&t(tc),w(G9),f&&t(fze),f&&t(er),w(O9),w(X9),w(gM),w(z9),w(_M),f&&t(mze),f&&t(sc),w(Q9),f&&t(gze),f&&t(or),w(W9),w(U9),w(bM),w(J9),w(h4),f&&t(hze),f&&t(dc),w(Y9),f&&t(pze),f&&t(rr),w(K9),w(ex),w(_4),w(ox),w(D4),f&&t(_ze),f&&t(mc),w(rx),f&&t(uze),f&&t(tr),w(tx),w(nx),w(O4),w(sx),w(rE),f&&t(bze),f&&t(pc),w(lx),f&&t(vze),f&&t(ar),w(ix),w(cx),w(aE),w(fx),w(fE),f&&t(Fze),f&&t(bc),w(mx),f&&t(Tze),f&&t(nr),w(gx),w(px),w(gE),w(_x),w(PE),f&&t(Mze),f&&t(Tc),w(ux),f&&t(Eze),f&&t(sr),w(bx),w(Fx),w(IE),w(Tx),w(WE),f&&t(Cze),f&&t(Cc),w(Mx),f&&t(wze),f&&t(lr),w(Ex),w(wx),w(UE),w(Ax),w(MC),f&&t(Aze),f&&t(Lc),w(Lx),f&&t(Lze),f&&t(ir),w(yx),w($x),w(CC),w(kx),w(OC),f&&t(yze),f&&t($c),w(Sx),f&&t(xze),f&&t(dr),w(Rx),w(Bx),w(XC),w(Ix),w(WC),f&&t($ze),f&&t(Rc),w(qx),f&&t(kze),f&&t(cr),w(jx),w(Gx),w(UC),w(Ox),w(YC),f&&t(Sze),f&&t(Ic),w(Vx),f&&t(Rze),f&&t(fr),w(Xx),w(Qx),w(ZC),w(Wx),w(F3),f&&t(Pze),f&&t(jc),w(Hx),f&&t(Bze),f&&t(mr),w(Ux),w(Yx),w(M3),w(Kx),w(V3),f&&t(Ize),f&&t(Oc),w(Zx),f&&t(Nze),f&&t(gr),w(e$),w(r$),w(z3),w(t$),w(W3),f&&t(qze),f&&t(zc),w(a$),f&&t(jze),f&&t(hr),w(n$),w(l$),w(U3),w(i$),w(Y3),f&&t(Dze),f&&t(Hc),w(d$),f&&t(Gze),f&&t(pr),w(c$),w(m$),w(Z3),w(g$),w(y5),f&&t(Oze),f&&t(Yc),w(h$),f&&t(Vze),f&&t(_r),w(p$),w(u$),w($5),w(b$),w(O5),f&&t(Xze),f&&t(ef),w(v$),f&&t(zze),f&&t(ur),w(F$),w(M$),w(X5),w(E$),w(aw),f&&t(Qze),f&&t(tf),w(C$),f&&t(Wze),f&&t(br),w(w$),w(L$),w(sw),w(y$),w(uw),f&&t(Hze),f&&t(sf),w(x$),f&&t(Uze),f&&t(vr),w($$),w(S$),w(vw),w(R$),w($w),f&&t(Jze),f&&t(cf),w(P$),f&&t(Yze),f&&t(Fr),w(B$),w(N$),w(Sw),w(q$),w(Vw),f&&t(Kze),f&&t(gf),w(j$),f&&t(Zze),f&&t(Tr),w(D$),w(O$),w(zw),w(V$),w(rA),f&&t(eQe),f&&t(_f),w(X$),f&&t(oQe),f&&t(Mr),w(z$),w(W$),w(aA),w(H$),w(gA),f&&t(rQe),f&&t(vf),w(U$),f&&t(tQe),f&&t(Er),w(J$),w(K$),w(pA),w(Z$),w(CA),f&&t(aQe),f&&t(Mf),w(ek),f&&t(nQe),f&&t(Cr),w(ok),w(tk),w(AA),w(ak),w(yA),f&&t(sQe),f&&t(wf),w(nk),f&&t(lQe),f&&t(wr),w(sk),w(ik),w($A),w(dk),w(RA),f&&t(iQe),f&&t(yf),w(fk),f&&t(dQe),f&&t(Ar),w(mk),w(hk),w(BA),w(pk),w(NA)}}}const tUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function aUt($){return rWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fUt extends KQt{constructor(g){super();ZQt(this,g,aUt,rUt,eWt,{})}}export{fUt as default,tUt as metadata};
