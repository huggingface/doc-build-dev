import{S as Jwt,i as Ywt,s as Kwt,e as a,k as l,w as F,t as o,M as Zwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as eAt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function oAt(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,Ww,gf,qe,Xe,fi,yn,Hw,Ln,xn,Uw,mi,$n,Jw,gi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Ww=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),yn=o("NewModel"),Hw=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Uw=o(`, make sure its
`),mi=a("code"),$n=o("config_class"),Jw=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var h$=s(p);m=r(h$,"NewModelConfig"),h$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var p$=s(ii);mf=r(p$,"model_type"),p$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var u$=s(di);ci=r(u$,'"new-model"'),u$.forEach(t),Ww=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);yn=r(Ea,"NewModel"),Ea.forEach(t),Hw=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var _$=s(Ln);xn=r(_$,"PreTrainedModel"),_$.forEach(t),Uw=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var pf=s(mi);$n=r(pf,"config_class"),pf.forEach(t),Jw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var b$=s(gi);hf=r(b$,"NewModelConfig"),b$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,mf),e(g,et),e(g,di),e(di,ci),e(g,Ww),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,yn),e(qe,Hw),e(qe,Ln),e(Ln,xn),e(qe,Uw),e(qe,mi),e(mi,$n),e(qe,Jw),e(qe,gi),e(gi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,Ww,gf,qe,Xe,fi,yn,Hw,Ln,xn,Uw,mi,$n,Jw,gi,hf,Ma,ze,Ae,h$,hi,p$,u$,Eo,Ea,_$,pf,b$,Jje,jPe,pi,uf,KZ,Yw,Yje,ZZ,Kje,DPe,kn,Zje,eee,eDe,oDe,oee,rDe,tDe,GPe,Kw,OPe,v$,aDe,VPe,_f,XPe,ui,bf,ree,Zw,nDe,tee,sDe,zPe,Co,eA,lDe,oA,iDe,F$,dDe,cDe,fDe,rA,mDe,aee,gDe,hDe,pDe,Er,tA,uDe,nee,_De,bDe,_i,vDe,see,FDe,TDe,lee,MDe,EDe,CDe,y,vf,iee,wDe,ADe,T$,yDe,LDe,xDe,Ff,dee,$De,kDe,M$,SDe,RDe,BDe,Tf,cee,PDe,IDe,E$,qDe,NDe,jDe,Mf,fee,DDe,GDe,C$,ODe,VDe,XDe,Ef,mee,zDe,QDe,w$,WDe,HDe,UDe,Cf,gee,JDe,YDe,A$,KDe,ZDe,eGe,wf,hee,oGe,rGe,y$,tGe,aGe,nGe,Af,pee,sGe,lGe,L$,iGe,dGe,cGe,yf,uee,fGe,mGe,x$,gGe,hGe,pGe,Lf,_ee,uGe,_Ge,$$,bGe,vGe,FGe,xf,bee,TGe,MGe,k$,EGe,CGe,wGe,$f,vee,AGe,yGe,S$,LGe,xGe,$Ge,kf,Fee,kGe,SGe,R$,RGe,BGe,PGe,Sf,Tee,IGe,qGe,B$,NGe,jGe,DGe,Rf,Mee,GGe,OGe,P$,VGe,XGe,zGe,Bf,Eee,QGe,WGe,I$,HGe,UGe,JGe,Pf,Cee,YGe,KGe,q$,ZGe,eOe,oOe,If,wee,rOe,tOe,N$,aOe,nOe,sOe,qf,Aee,lOe,iOe,j$,dOe,cOe,fOe,Nf,yee,mOe,gOe,D$,hOe,pOe,uOe,jf,Lee,_Oe,bOe,G$,vOe,FOe,TOe,Df,xee,MOe,EOe,O$,COe,wOe,AOe,Gf,$ee,yOe,LOe,V$,xOe,$Oe,kOe,Of,kee,SOe,ROe,X$,BOe,POe,IOe,Vf,See,qOe,NOe,z$,jOe,DOe,GOe,Xf,Ree,OOe,VOe,Q$,XOe,zOe,QOe,zf,Bee,WOe,HOe,W$,UOe,JOe,YOe,Qf,Pee,KOe,ZOe,H$,eVe,oVe,rVe,Wf,Iee,tVe,aVe,U$,nVe,sVe,lVe,Hf,qee,iVe,dVe,J$,cVe,fVe,mVe,Uf,Nee,gVe,hVe,Y$,pVe,uVe,_Ve,Jf,jee,bVe,vVe,K$,FVe,TVe,MVe,Yf,Dee,EVe,CVe,Z$,wVe,AVe,yVe,Kf,Gee,LVe,xVe,ek,$Ve,kVe,SVe,Zf,Oee,RVe,BVe,ok,PVe,IVe,qVe,em,Vee,NVe,jVe,rk,DVe,GVe,OVe,om,Xee,VVe,XVe,tk,zVe,QVe,WVe,rm,zee,HVe,UVe,ak,JVe,YVe,KVe,tm,Qee,ZVe,eXe,nk,oXe,rXe,tXe,am,Wee,aXe,nXe,sk,sXe,lXe,iXe,nm,Hee,dXe,cXe,lk,fXe,mXe,gXe,sm,Uee,hXe,pXe,ik,uXe,_Xe,bXe,lm,Jee,vXe,FXe,dk,TXe,MXe,EXe,im,Yee,CXe,wXe,ck,AXe,yXe,LXe,dm,Kee,xXe,$Xe,fk,kXe,SXe,RXe,cm,Zee,BXe,PXe,mk,IXe,qXe,NXe,fm,eoe,jXe,DXe,gk,GXe,OXe,VXe,mm,ooe,XXe,zXe,hk,QXe,WXe,HXe,gm,roe,UXe,JXe,pk,YXe,KXe,ZXe,hm,toe,eze,oze,uk,rze,tze,aze,pm,aoe,nze,sze,_k,lze,ize,dze,um,noe,cze,fze,bk,mze,gze,hze,_m,soe,pze,uze,vk,_ze,bze,vze,bm,loe,Fze,Tze,Fk,Mze,Eze,Cze,vm,ioe,wze,Aze,Tk,yze,Lze,xze,Fm,doe,$ze,kze,Mk,Sze,Rze,Bze,Tm,coe,Pze,Ize,Ek,qze,Nze,jze,Mm,foe,Dze,Gze,Ck,Oze,Vze,Xze,Em,moe,zze,Qze,wk,Wze,Hze,Uze,Cm,goe,Jze,Yze,Ak,Kze,Zze,eQe,wm,hoe,oQe,rQe,yk,tQe,aQe,nQe,Am,poe,sQe,lQe,Lk,iQe,dQe,cQe,ym,uoe,fQe,mQe,xk,gQe,hQe,pQe,Lm,_oe,uQe,_Qe,$k,bQe,vQe,FQe,xm,boe,TQe,MQe,kk,EQe,CQe,wQe,$m,voe,AQe,yQe,Sk,LQe,xQe,$Qe,km,Foe,kQe,SQe,Rk,RQe,BQe,PQe,Sm,Toe,IQe,qQe,Bk,NQe,jQe,DQe,Rm,Moe,GQe,OQe,Pk,VQe,XQe,zQe,Bm,Eoe,QQe,WQe,Ik,HQe,UQe,JQe,Pm,Coe,YQe,KQe,qk,ZQe,eWe,oWe,Im,woe,rWe,tWe,Nk,aWe,nWe,sWe,qm,Aoe,lWe,iWe,jk,dWe,cWe,fWe,Nm,yoe,mWe,gWe,Dk,hWe,pWe,uWe,jm,Loe,_We,bWe,Gk,vWe,FWe,TWe,Dm,xoe,MWe,EWe,Ok,CWe,wWe,AWe,Gm,$oe,yWe,LWe,Vk,xWe,$We,kWe,Om,koe,SWe,RWe,Xk,BWe,PWe,IWe,Vm,Soe,qWe,NWe,zk,jWe,DWe,GWe,Xm,Roe,OWe,VWe,Qk,XWe,zWe,QWe,zm,Boe,WWe,HWe,Wk,UWe,JWe,YWe,Qm,Poe,KWe,ZWe,Hk,eHe,oHe,rHe,Wm,Ioe,tHe,aHe,Uk,nHe,sHe,lHe,Hm,qoe,iHe,dHe,Jk,cHe,fHe,mHe,Um,Noe,gHe,hHe,Yk,pHe,uHe,_He,Jm,joe,bHe,vHe,Kk,FHe,THe,MHe,Ym,Doe,EHe,CHe,Zk,wHe,AHe,yHe,Km,Goe,LHe,xHe,eS,$He,kHe,SHe,Zm,Ooe,RHe,BHe,oS,PHe,IHe,qHe,eg,Voe,NHe,jHe,rS,DHe,GHe,OHe,og,Xoe,VHe,XHe,tS,zHe,QHe,WHe,rg,zoe,HHe,UHe,aS,JHe,YHe,KHe,tg,Qoe,ZHe,eUe,nS,oUe,rUe,tUe,ag,Woe,aUe,nUe,sS,sUe,lUe,iUe,ng,Hoe,dUe,cUe,lS,fUe,mUe,gUe,sg,Uoe,hUe,pUe,iS,uUe,_Ue,bUe,lg,Joe,vUe,FUe,dS,TUe,MUe,EUe,ig,Yoe,CUe,wUe,cS,AUe,yUe,LUe,dg,Koe,xUe,$Ue,fS,kUe,SUe,RUe,cg,Zoe,BUe,PUe,mS,IUe,qUe,NUe,fg,ere,jUe,DUe,gS,GUe,OUe,VUe,mg,ore,XUe,zUe,hS,QUe,WUe,HUe,gg,rre,UUe,JUe,pS,YUe,KUe,ZUe,hg,tre,eJe,oJe,uS,rJe,tJe,aJe,pg,nJe,ug,aA,sJe,are,lJe,QPe,bi,_g,nre,nA,iJe,sre,dJe,WPe,wo,sA,cJe,lA,fJe,_S,mJe,gJe,hJe,iA,pJe,lre,uJe,_Je,bJe,Cr,dA,vJe,ire,FJe,TJe,Ca,MJe,dre,EJe,CJe,cre,wJe,AJe,fre,yJe,LJe,xJe,k,Sn,mre,$Je,kJe,bS,SJe,RJe,vS,BJe,PJe,IJe,Rn,gre,qJe,NJe,FS,jJe,DJe,TS,GJe,OJe,VJe,Bn,hre,XJe,zJe,MS,QJe,WJe,ES,HJe,UJe,JJe,bg,pre,YJe,KJe,CS,ZJe,eYe,oYe,Pn,ure,rYe,tYe,wS,aYe,nYe,AS,sYe,lYe,iYe,vg,_re,dYe,cYe,yS,fYe,mYe,gYe,Fg,bre,hYe,pYe,LS,uYe,_Ye,bYe,Tg,vre,vYe,FYe,xS,TYe,MYe,EYe,In,Fre,CYe,wYe,$S,AYe,yYe,kS,LYe,xYe,$Ye,qn,Tre,kYe,SYe,SS,RYe,BYe,RS,PYe,IYe,qYe,Nn,Mre,NYe,jYe,BS,DYe,GYe,PS,OYe,VYe,XYe,Mg,Ere,zYe,QYe,IS,WYe,HYe,UYe,Eg,Cre,JYe,YYe,qS,KYe,ZYe,eKe,jn,wre,oKe,rKe,NS,tKe,aKe,jS,nKe,sKe,lKe,Cg,Are,iKe,dKe,DS,cKe,fKe,mKe,Dn,yre,gKe,hKe,GS,pKe,uKe,OS,_Ke,bKe,vKe,Gn,Lre,FKe,TKe,VS,MKe,EKe,XS,CKe,wKe,AKe,On,xre,yKe,LKe,zS,xKe,$Ke,QS,kKe,SKe,RKe,wg,$re,BKe,PKe,WS,IKe,qKe,NKe,Vn,kre,jKe,DKe,HS,GKe,OKe,US,VKe,XKe,zKe,Xn,Sre,QKe,WKe,JS,HKe,UKe,YS,JKe,YKe,KKe,zn,Rre,ZKe,eZe,KS,oZe,rZe,ZS,tZe,aZe,nZe,Qn,Bre,sZe,lZe,eR,iZe,dZe,oR,cZe,fZe,mZe,Wn,Pre,gZe,hZe,rR,pZe,uZe,tR,_Ze,bZe,vZe,Hn,Ire,FZe,TZe,aR,MZe,EZe,nR,CZe,wZe,AZe,Ag,qre,yZe,LZe,sR,xZe,$Ze,kZe,Un,Nre,SZe,RZe,lR,BZe,PZe,iR,IZe,qZe,NZe,yg,jre,jZe,DZe,dR,GZe,OZe,VZe,Jn,Dre,XZe,zZe,cR,QZe,WZe,fR,HZe,UZe,JZe,Yn,Gre,YZe,KZe,mR,ZZe,eeo,gR,oeo,reo,teo,Kn,Ore,aeo,neo,hR,seo,leo,pR,ieo,deo,ceo,Zn,Vre,feo,meo,uR,geo,heo,_R,peo,ueo,_eo,es,Xre,beo,veo,bR,Feo,Teo,vR,Meo,Eeo,Ceo,Lg,zre,weo,Aeo,FR,yeo,Leo,xeo,os,Qre,$eo,keo,TR,Seo,Reo,MR,Beo,Peo,Ieo,rs,Wre,qeo,Neo,ER,jeo,Deo,CR,Geo,Oeo,Veo,ts,Hre,Xeo,zeo,wR,Qeo,Weo,AR,Heo,Ueo,Jeo,as,Ure,Yeo,Keo,yR,Zeo,eoo,LR,ooo,roo,too,ns,Jre,aoo,noo,xR,soo,loo,$R,ioo,doo,coo,ss,Yre,foo,moo,kR,goo,hoo,SR,poo,uoo,_oo,xg,Kre,boo,voo,RR,Foo,Too,Moo,ls,Zre,Eoo,Coo,BR,woo,Aoo,PR,yoo,Loo,xoo,$g,ete,$oo,koo,IR,Soo,Roo,Boo,kg,ote,Poo,Ioo,qR,qoo,Noo,joo,is,rte,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,ds,tte,Woo,Hoo,DR,Uoo,Joo,GR,Yoo,Koo,Zoo,cs,ate,ero,oro,OR,rro,tro,VR,aro,nro,sro,Sg,nte,lro,iro,XR,dro,cro,fro,fs,ste,mro,gro,zR,hro,pro,QR,uro,_ro,bro,ms,lte,vro,Fro,WR,Tro,Mro,HR,Ero,Cro,wro,gs,ite,Aro,yro,UR,Lro,xro,JR,$ro,kro,Sro,hs,dte,Rro,Bro,YR,Pro,Iro,KR,qro,Nro,jro,ps,cte,Dro,Gro,ZR,Oro,Vro,eB,Xro,zro,Qro,Rg,fte,Wro,Hro,oB,Uro,Jro,Yro,us,mte,Kro,Zro,rB,eto,oto,tB,rto,tto,ato,Bg,gte,nto,sto,aB,lto,ito,dto,Pg,hte,cto,fto,nB,mto,gto,hto,Ig,pte,pto,uto,sB,_to,bto,vto,qg,ute,Fto,Tto,lB,Mto,Eto,Cto,_s,_te,wto,Ato,iB,yto,Lto,dB,xto,$to,kto,Ng,bte,Sto,Rto,cB,Bto,Pto,Ito,bs,vte,qto,Nto,fB,jto,Dto,mB,Gto,Oto,Vto,vs,Fte,Xto,zto,gB,Qto,Wto,hB,Hto,Uto,Jto,Fs,Tte,Yto,Kto,pB,Zto,eao,uB,oao,rao,tao,Ts,Mte,aao,nao,_B,sao,lao,bB,iao,dao,cao,Ms,Ete,fao,mao,vB,gao,hao,FB,pao,uao,_ao,Es,Cte,bao,vao,TB,Fao,Tao,MB,Mao,Eao,Cao,jg,wte,wao,Aao,EB,yao,Lao,xao,Dg,Ate,$ao,kao,CB,Sao,Rao,Bao,Cs,yte,Pao,Iao,wB,qao,Nao,AB,jao,Dao,Gao,ws,Lte,Oao,Vao,yB,Xao,zao,LB,Qao,Wao,Hao,As,xte,Uao,Jao,xB,Yao,Kao,$B,Zao,eno,ono,Gg,$te,rno,tno,kB,ano,nno,sno,Og,kte,lno,ino,SB,dno,cno,fno,Vg,Ste,mno,gno,RB,hno,pno,uno,ys,Rte,_no,bno,BB,vno,Fno,PB,Tno,Mno,Eno,Xg,Bte,Cno,wno,IB,Ano,yno,Lno,zg,Pte,xno,$no,qB,kno,Sno,Rno,Ls,Ite,Bno,Pno,NB,Ino,qno,jB,Nno,jno,Dno,Qg,qte,Gno,Ono,DB,Vno,Xno,zno,Wg,Nte,Qno,Wno,GB,Hno,Uno,Jno,xs,jte,Yno,Kno,OB,Zno,eso,VB,oso,rso,tso,$s,Dte,aso,nso,XB,sso,lso,zB,iso,dso,cso,ks,Gte,fso,mso,QB,gso,hso,WB,pso,uso,_so,Ss,Ote,bso,vso,HB,Fso,Tso,UB,Mso,Eso,Cso,Hg,wso,Ug,cA,Aso,Vte,yso,HPe,vi,Jg,Xte,fA,Lso,zte,xso,UPe,Ao,mA,$so,gA,kso,JB,Sso,Rso,Bso,hA,Pso,Qte,Iso,qso,Nso,Qe,pA,jso,Wte,Dso,Gso,wa,Oso,Hte,Vso,Xso,Ute,zso,Qso,Jte,Wso,Hso,Uso,oe,Yg,Yte,Jso,Yso,YB,Kso,Zso,elo,Kg,Kte,olo,rlo,KB,tlo,alo,nlo,Zg,Zte,slo,llo,ZB,ilo,dlo,clo,eh,eae,flo,mlo,eP,glo,hlo,plo,oh,oae,ulo,_lo,oP,blo,vlo,Flo,rh,rae,Tlo,Mlo,rP,Elo,Clo,wlo,th,tae,Alo,ylo,tP,Llo,xlo,$lo,ah,aae,klo,Slo,aP,Rlo,Blo,Plo,nh,nae,Ilo,qlo,nP,Nlo,jlo,Dlo,sh,sae,Glo,Olo,sP,Vlo,Xlo,zlo,lh,lae,Qlo,Wlo,lP,Hlo,Ulo,Jlo,ih,iae,Ylo,Klo,iP,Zlo,eio,oio,dh,dae,rio,tio,dP,aio,nio,sio,ch,cae,lio,iio,cP,dio,cio,fio,fh,fae,mio,gio,fP,hio,pio,uio,mh,mae,_io,bio,mP,vio,Fio,Tio,gh,gae,Mio,Eio,gP,Cio,wio,Aio,hh,hae,yio,Lio,hP,xio,$io,kio,ph,pae,Sio,Rio,pP,Bio,Pio,Iio,uh,uae,qio,Nio,uP,jio,Dio,Gio,_h,_ae,Oio,Vio,_P,Xio,zio,Qio,bh,bae,Wio,Hio,bP,Uio,Jio,Yio,vh,vae,Kio,Zio,vP,edo,odo,rdo,Fh,Fae,tdo,ado,FP,ndo,sdo,ldo,Th,Tae,ido,ddo,TP,cdo,fdo,mdo,Mh,gdo,Eh,hdo,Ch,uA,pdo,Mae,udo,JPe,Fi,wh,Eae,_A,_do,Cae,bdo,YPe,yo,bA,vdo,vA,Fdo,MP,Tdo,Mdo,Edo,FA,Cdo,wae,wdo,Ado,ydo,We,TA,Ldo,Aae,xdo,$do,Ti,kdo,yae,Sdo,Rdo,Lae,Bdo,Pdo,Ido,_e,Ah,xae,qdo,Ndo,EP,jdo,Ddo,Gdo,yh,$ae,Odo,Vdo,kae,Xdo,zdo,Qdo,Lh,Sae,Wdo,Hdo,CP,Udo,Jdo,Ydo,xh,Rae,Kdo,Zdo,wP,eco,oco,rco,$h,Bae,tco,aco,AP,nco,sco,lco,kh,Pae,ico,dco,yP,cco,fco,mco,Sh,Iae,gco,hco,LP,pco,uco,_co,Rh,qae,bco,vco,xP,Fco,Tco,Mco,Bh,Nae,Eco,Cco,$P,wco,Aco,yco,Ph,jae,Lco,xco,kP,$co,kco,Sco,Ih,Dae,Rco,Bco,SP,Pco,Ico,qco,qh,Gae,Nco,jco,RP,Dco,Gco,Oco,Nh,Oae,Vco,Xco,BP,zco,Qco,Wco,jh,Vae,Hco,Uco,PP,Jco,Yco,Kco,Dh,Xae,Zco,efo,IP,ofo,rfo,tfo,Gh,afo,Oh,nfo,Vh,MA,sfo,zae,lfo,KPe,Mi,Xh,Qae,EA,ifo,Wae,dfo,ZPe,Lo,CA,cfo,Ei,ffo,qP,mfo,gfo,NP,hfo,pfo,ufo,wA,_fo,Hae,bfo,vfo,Ffo,ot,AA,Tfo,Uae,Mfo,Efo,Ci,Cfo,Jae,wfo,Afo,jP,yfo,Lfo,xfo,zh,$fo,He,yA,kfo,Yae,Sfo,Rfo,Aa,Bfo,Kae,Pfo,Ifo,Zae,qfo,Nfo,ene,jfo,Dfo,Gfo,x,Qh,one,Ofo,Vfo,DP,Xfo,zfo,Qfo,Wh,rne,Wfo,Hfo,GP,Ufo,Jfo,Yfo,Hh,tne,Kfo,Zfo,OP,emo,omo,rmo,Uh,ane,tmo,amo,VP,nmo,smo,lmo,Jh,nne,imo,dmo,XP,cmo,fmo,mmo,Yh,sne,gmo,hmo,zP,pmo,umo,_mo,Kh,lne,bmo,vmo,QP,Fmo,Tmo,Mmo,Zh,ine,Emo,Cmo,WP,wmo,Amo,ymo,ep,dne,Lmo,xmo,HP,$mo,kmo,Smo,op,cne,Rmo,Bmo,UP,Pmo,Imo,qmo,rp,fne,Nmo,jmo,JP,Dmo,Gmo,Omo,tp,mne,Vmo,Xmo,YP,zmo,Qmo,Wmo,ap,gne,Hmo,Umo,KP,Jmo,Ymo,Kmo,np,hne,Zmo,ego,ZP,ogo,rgo,tgo,sp,pne,ago,ngo,eI,sgo,lgo,igo,lp,une,dgo,cgo,oI,fgo,mgo,ggo,ip,_ne,hgo,pgo,rI,ugo,_go,bgo,dp,bne,vgo,Fgo,tI,Tgo,Mgo,Ego,cp,vne,Cgo,wgo,aI,Ago,ygo,Lgo,fp,Fne,xgo,$go,nI,kgo,Sgo,Rgo,mp,Tne,Bgo,Pgo,sI,Igo,qgo,Ngo,gp,Mne,jgo,Dgo,lI,Ggo,Ogo,Vgo,hp,Ene,Xgo,zgo,iI,Qgo,Wgo,Hgo,pp,Cne,Ugo,Jgo,dI,Ygo,Kgo,Zgo,up,wne,eho,oho,cI,rho,tho,aho,_p,Ane,nho,sho,fI,lho,iho,dho,bp,yne,cho,fho,mI,mho,gho,hho,vp,Lne,pho,uho,gI,_ho,bho,vho,Fp,xne,Fho,Tho,hI,Mho,Eho,Cho,Tp,$ne,who,Aho,pI,yho,Lho,xho,Mp,kne,$ho,kho,uI,Sho,Rho,Bho,Rs,Sne,Pho,Iho,_I,qho,Nho,bI,jho,Dho,Gho,Ep,Rne,Oho,Vho,vI,Xho,zho,Qho,Cp,Bne,Who,Hho,FI,Uho,Jho,Yho,wp,Pne,Kho,Zho,TI,epo,opo,rpo,Ap,Ine,tpo,apo,MI,npo,spo,lpo,yp,qne,ipo,dpo,EI,cpo,fpo,mpo,Lp,Nne,gpo,hpo,CI,ppo,upo,_po,xp,jne,bpo,vpo,wI,Fpo,Tpo,Mpo,$p,Dne,Epo,Cpo,AI,wpo,Apo,ypo,kp,Gne,Lpo,xpo,yI,$po,kpo,Spo,Sp,One,Rpo,Bpo,LI,Ppo,Ipo,qpo,Rp,Vne,Npo,jpo,xI,Dpo,Gpo,Opo,Bp,Xne,Vpo,Xpo,$I,zpo,Qpo,Wpo,Pp,zne,Hpo,Upo,kI,Jpo,Ypo,Kpo,Ip,Qne,Zpo,euo,SI,ouo,ruo,tuo,qp,Wne,auo,nuo,RI,suo,luo,iuo,Np,Hne,duo,cuo,BI,fuo,muo,guo,jp,Une,huo,puo,PI,uuo,_uo,buo,Dp,Jne,vuo,Fuo,II,Tuo,Muo,Euo,Gp,Yne,Cuo,wuo,qI,Auo,yuo,Luo,Op,Kne,xuo,$uo,NI,kuo,Suo,Ruo,Vp,Zne,Buo,Puo,jI,Iuo,quo,Nuo,Xp,ese,juo,Duo,DI,Guo,Ouo,Vuo,zp,ose,Xuo,zuo,GI,Quo,Wuo,Huo,Qp,rse,Uuo,Juo,OI,Yuo,Kuo,Zuo,Wp,tse,e_o,o_o,VI,r_o,t_o,a_o,Hp,ase,n_o,s_o,XI,l_o,i_o,d_o,Up,nse,c_o,f_o,zI,m_o,g_o,h_o,Jp,sse,p_o,u_o,QI,__o,b_o,v_o,Yp,lse,F_o,T_o,WI,M_o,E_o,C_o,Kp,ise,w_o,A_o,HI,y_o,L_o,x_o,Zp,dse,$_o,k_o,UI,S_o,R_o,B_o,eu,cse,P_o,I_o,JI,q_o,N_o,j_o,ou,fse,D_o,G_o,YI,O_o,V_o,X_o,ru,mse,z_o,Q_o,KI,W_o,H_o,U_o,tu,gse,J_o,Y_o,ZI,K_o,Z_o,e1o,au,hse,o1o,r1o,eq,t1o,a1o,n1o,nu,pse,s1o,l1o,oq,i1o,d1o,c1o,su,use,f1o,m1o,rq,g1o,h1o,p1o,lu,_se,u1o,_1o,tq,b1o,v1o,F1o,iu,bse,T1o,M1o,aq,E1o,C1o,w1o,du,vse,A1o,y1o,nq,L1o,x1o,$1o,cu,Fse,k1o,S1o,sq,R1o,B1o,P1o,fu,Tse,I1o,q1o,lq,N1o,j1o,D1o,mu,Mse,G1o,O1o,iq,V1o,X1o,z1o,gu,Ese,Q1o,W1o,dq,H1o,U1o,J1o,hu,Cse,Y1o,K1o,cq,Z1o,e8o,o8o,pu,wse,r8o,t8o,fq,a8o,n8o,s8o,uu,Ase,l8o,i8o,mq,d8o,c8o,f8o,_u,yse,m8o,g8o,gq,h8o,p8o,u8o,bu,Lse,_8o,b8o,hq,v8o,F8o,T8o,vu,xse,M8o,E8o,pq,C8o,w8o,A8o,Fu,$se,y8o,L8o,uq,x8o,$8o,k8o,Tu,kse,S8o,R8o,_q,B8o,P8o,I8o,Mu,Sse,q8o,N8o,bq,j8o,D8o,G8o,Eu,Rse,O8o,V8o,vq,X8o,z8o,Q8o,Cu,Bse,W8o,H8o,Fq,U8o,J8o,Y8o,wu,Pse,K8o,Z8o,Tq,ebo,obo,rbo,Au,Ise,tbo,abo,Mq,nbo,sbo,lbo,yu,qse,ibo,dbo,Eq,cbo,fbo,mbo,Lu,Nse,gbo,hbo,Cq,pbo,ubo,_bo,xu,jse,bbo,vbo,wq,Fbo,Tbo,Mbo,$u,Dse,Ebo,Cbo,Aq,wbo,Abo,ybo,ku,Gse,Lbo,xbo,yq,$bo,kbo,Sbo,Su,Ose,Rbo,Bbo,Lq,Pbo,Ibo,qbo,Ru,Vse,Nbo,jbo,xq,Dbo,Gbo,Obo,Bu,Vbo,Xse,Xbo,zbo,zse,Qbo,Wbo,Pu,eIe,wi,Iu,Qse,LA,Hbo,Wse,Ubo,oIe,xo,xA,Jbo,Ai,Ybo,$q,Kbo,Zbo,kq,e2o,o2o,r2o,$A,t2o,Hse,a2o,n2o,s2o,rt,kA,l2o,Use,i2o,d2o,yi,c2o,Jse,f2o,m2o,Sq,g2o,h2o,p2o,qu,u2o,Ue,SA,_2o,Yse,b2o,v2o,ya,F2o,Kse,T2o,M2o,Zse,E2o,C2o,ele,w2o,A2o,y2o,G,Nu,ole,L2o,x2o,Rq,$2o,k2o,S2o,ju,rle,R2o,B2o,Bq,P2o,I2o,q2o,Du,tle,N2o,j2o,Pq,D2o,G2o,O2o,Gu,ale,V2o,X2o,Iq,z2o,Q2o,W2o,Ou,nle,H2o,U2o,qq,J2o,Y2o,K2o,Vu,sle,Z2o,evo,Nq,ovo,rvo,tvo,Xu,lle,avo,nvo,jq,svo,lvo,ivo,zu,ile,dvo,cvo,Dq,fvo,mvo,gvo,Qu,dle,hvo,pvo,Gq,uvo,_vo,bvo,Wu,cle,vvo,Fvo,Oq,Tvo,Mvo,Evo,Hu,fle,Cvo,wvo,Vq,Avo,yvo,Lvo,Uu,mle,xvo,$vo,Xq,kvo,Svo,Rvo,Ju,gle,Bvo,Pvo,zq,Ivo,qvo,Nvo,Yu,hle,jvo,Dvo,Qq,Gvo,Ovo,Vvo,Ku,ple,Xvo,zvo,Wq,Qvo,Wvo,Hvo,Zu,ule,Uvo,Jvo,Hq,Yvo,Kvo,Zvo,e_,_le,eFo,oFo,Uq,rFo,tFo,aFo,o_,ble,nFo,sFo,Jq,lFo,iFo,dFo,r_,vle,cFo,fFo,Yq,mFo,gFo,hFo,t_,Fle,pFo,uFo,Kq,_Fo,bFo,vFo,a_,Tle,FFo,TFo,Zq,MFo,EFo,CFo,n_,Mle,wFo,AFo,eN,yFo,LFo,xFo,s_,Ele,$Fo,kFo,oN,SFo,RFo,BFo,l_,Cle,PFo,IFo,rN,qFo,NFo,jFo,i_,wle,DFo,GFo,tN,OFo,VFo,XFo,d_,Ale,zFo,QFo,aN,WFo,HFo,UFo,c_,yle,JFo,YFo,nN,KFo,ZFo,e6o,f_,Lle,o6o,r6o,sN,t6o,a6o,n6o,m_,xle,s6o,l6o,lN,i6o,d6o,c6o,g_,$le,f6o,m6o,iN,g6o,h6o,p6o,h_,kle,u6o,_6o,dN,b6o,v6o,F6o,p_,Sle,T6o,M6o,cN,E6o,C6o,w6o,u_,Rle,A6o,y6o,fN,L6o,x6o,$6o,__,Ble,k6o,S6o,mN,R6o,B6o,P6o,b_,Ple,I6o,q6o,gN,N6o,j6o,D6o,v_,Ile,G6o,O6o,hN,V6o,X6o,z6o,F_,qle,Q6o,W6o,pN,H6o,U6o,J6o,T_,Nle,Y6o,K6o,uN,Z6o,eTo,oTo,M_,jle,rTo,tTo,_N,aTo,nTo,sTo,E_,Dle,lTo,iTo,bN,dTo,cTo,fTo,C_,mTo,Gle,gTo,hTo,Ole,pTo,uTo,w_,rIe,Li,A_,Vle,RA,_To,Xle,bTo,tIe,$o,BA,vTo,xi,FTo,vN,TTo,MTo,FN,ETo,CTo,wTo,PA,ATo,zle,yTo,LTo,xTo,tt,IA,$To,Qle,kTo,STo,$i,RTo,Wle,BTo,PTo,TN,ITo,qTo,NTo,y_,jTo,Je,qA,DTo,Hle,GTo,OTo,La,VTo,Ule,XTo,zTo,Jle,QTo,WTo,Yle,HTo,UTo,JTo,z,L_,Kle,YTo,KTo,MN,ZTo,e9o,o9o,x_,Zle,r9o,t9o,EN,a9o,n9o,s9o,$_,eie,l9o,i9o,CN,d9o,c9o,f9o,k_,oie,m9o,g9o,wN,h9o,p9o,u9o,S_,rie,_9o,b9o,AN,v9o,F9o,T9o,R_,tie,M9o,E9o,yN,C9o,w9o,A9o,B_,aie,y9o,L9o,LN,x9o,$9o,k9o,P_,nie,S9o,R9o,xN,B9o,P9o,I9o,I_,sie,q9o,N9o,$N,j9o,D9o,G9o,q_,lie,O9o,V9o,kN,X9o,z9o,Q9o,N_,iie,W9o,H9o,SN,U9o,J9o,Y9o,j_,die,K9o,Z9o,RN,eMo,oMo,rMo,D_,cie,tMo,aMo,BN,nMo,sMo,lMo,G_,fie,iMo,dMo,PN,cMo,fMo,mMo,O_,mie,gMo,hMo,IN,pMo,uMo,_Mo,V_,gie,bMo,vMo,qN,FMo,TMo,MMo,X_,hie,EMo,CMo,NN,wMo,AMo,yMo,z_,pie,LMo,xMo,jN,$Mo,kMo,SMo,Q_,uie,RMo,BMo,DN,PMo,IMo,qMo,W_,_ie,NMo,jMo,GN,DMo,GMo,OMo,H_,bie,VMo,XMo,ON,zMo,QMo,WMo,U_,vie,HMo,UMo,VN,JMo,YMo,KMo,J_,Fie,ZMo,e4o,XN,o4o,r4o,t4o,Y_,Tie,a4o,n4o,zN,s4o,l4o,i4o,K_,Mie,d4o,c4o,QN,f4o,m4o,g4o,Z_,Eie,h4o,p4o,WN,u4o,_4o,b4o,e1,Cie,v4o,F4o,HN,T4o,M4o,E4o,o1,wie,C4o,w4o,UN,A4o,y4o,L4o,r1,Aie,x4o,$4o,JN,k4o,S4o,R4o,t1,yie,B4o,P4o,YN,I4o,q4o,N4o,a1,Lie,j4o,D4o,KN,G4o,O4o,V4o,n1,xie,X4o,z4o,ZN,Q4o,W4o,H4o,s1,$ie,U4o,J4o,ej,Y4o,K4o,Z4o,l1,kie,eEo,oEo,oj,rEo,tEo,aEo,i1,Sie,nEo,sEo,rj,lEo,iEo,dEo,d1,Rie,cEo,fEo,tj,mEo,gEo,hEo,c1,pEo,Bie,uEo,_Eo,Pie,bEo,vEo,f1,aIe,ki,m1,Iie,NA,FEo,qie,TEo,nIe,ko,jA,MEo,Si,EEo,aj,CEo,wEo,nj,AEo,yEo,LEo,DA,xEo,Nie,$Eo,kEo,SEo,at,GA,REo,jie,BEo,PEo,Ri,IEo,Die,qEo,NEo,sj,jEo,DEo,GEo,g1,OEo,Ye,OA,VEo,Gie,XEo,zEo,xa,QEo,Oie,WEo,HEo,Vie,UEo,JEo,Xie,YEo,KEo,ZEo,Q,h1,zie,e5o,o5o,lj,r5o,t5o,a5o,p1,Qie,n5o,s5o,ij,l5o,i5o,d5o,u1,Wie,c5o,f5o,dj,m5o,g5o,h5o,_1,Hie,p5o,u5o,cj,_5o,b5o,v5o,b1,Uie,F5o,T5o,fj,M5o,E5o,C5o,v1,Jie,w5o,A5o,mj,y5o,L5o,x5o,F1,Yie,$5o,k5o,gj,S5o,R5o,B5o,T1,Kie,P5o,I5o,hj,q5o,N5o,j5o,M1,Zie,D5o,G5o,pj,O5o,V5o,X5o,E1,ede,z5o,Q5o,uj,W5o,H5o,U5o,C1,ode,J5o,Y5o,_j,K5o,Z5o,eCo,w1,rde,oCo,rCo,bj,tCo,aCo,nCo,A1,tde,sCo,lCo,vj,iCo,dCo,cCo,y1,ade,fCo,mCo,Fj,gCo,hCo,pCo,L1,nde,uCo,_Co,Tj,bCo,vCo,FCo,x1,sde,TCo,MCo,Mj,ECo,CCo,wCo,$1,lde,ACo,yCo,Ej,LCo,xCo,$Co,k1,ide,kCo,SCo,Cj,RCo,BCo,PCo,S1,dde,ICo,qCo,wj,NCo,jCo,DCo,R1,cde,GCo,OCo,Aj,VCo,XCo,zCo,B1,fde,QCo,WCo,yj,HCo,UCo,JCo,P1,mde,YCo,KCo,Lj,ZCo,e3o,o3o,I1,gde,r3o,t3o,xj,a3o,n3o,s3o,q1,hde,l3o,i3o,$j,d3o,c3o,f3o,N1,pde,m3o,g3o,kj,h3o,p3o,u3o,j1,ude,_3o,b3o,Sj,v3o,F3o,T3o,D1,_de,M3o,E3o,Rj,C3o,w3o,A3o,G1,bde,y3o,L3o,Bj,x3o,$3o,k3o,O1,vde,S3o,R3o,Pj,B3o,P3o,I3o,V1,Fde,q3o,N3o,Ij,j3o,D3o,G3o,X1,Tde,O3o,V3o,Mde,X3o,z3o,Q3o,z1,Ede,W3o,H3o,qj,U3o,J3o,Y3o,Q1,Cde,K3o,Z3o,Nj,ewo,owo,rwo,W1,wde,two,awo,jj,nwo,swo,lwo,H1,Ade,iwo,dwo,Dj,cwo,fwo,mwo,U1,gwo,yde,hwo,pwo,Lde,uwo,_wo,J1,sIe,Bi,Y1,xde,VA,bwo,$de,vwo,lIe,So,XA,Fwo,Pi,Two,Gj,Mwo,Ewo,Oj,Cwo,wwo,Awo,zA,ywo,kde,Lwo,xwo,$wo,nt,QA,kwo,Sde,Swo,Rwo,Ii,Bwo,Rde,Pwo,Iwo,Vj,qwo,Nwo,jwo,K1,Dwo,Ke,WA,Gwo,Bde,Owo,Vwo,$a,Xwo,Pde,zwo,Qwo,Ide,Wwo,Hwo,qde,Uwo,Jwo,Ywo,pe,Z1,Nde,Kwo,Zwo,Xj,eAo,oAo,rAo,e8,jde,tAo,aAo,zj,nAo,sAo,lAo,o8,Dde,iAo,dAo,Qj,cAo,fAo,mAo,r8,Gde,gAo,hAo,Wj,pAo,uAo,_Ao,t8,Ode,bAo,vAo,Hj,FAo,TAo,MAo,a8,Vde,EAo,CAo,Uj,wAo,AAo,yAo,n8,Xde,LAo,xAo,Jj,$Ao,kAo,SAo,s8,zde,RAo,BAo,Yj,PAo,IAo,qAo,l8,Qde,NAo,jAo,Kj,DAo,GAo,OAo,i8,Wde,VAo,XAo,Zj,zAo,QAo,WAo,d8,Hde,HAo,UAo,eD,JAo,YAo,KAo,c8,Ude,ZAo,e0o,oD,o0o,r0o,t0o,f8,Jde,a0o,n0o,rD,s0o,l0o,i0o,m8,Yde,d0o,c0o,tD,f0o,m0o,g0o,g8,Kde,h0o,p0o,aD,u0o,_0o,b0o,h8,Zde,v0o,F0o,nD,T0o,M0o,E0o,p8,C0o,ece,w0o,A0o,oce,y0o,L0o,u8,iIe,qi,_8,rce,HA,x0o,tce,$0o,dIe,Ro,UA,k0o,Ni,S0o,sD,R0o,B0o,lD,P0o,I0o,q0o,JA,N0o,ace,j0o,D0o,G0o,st,YA,O0o,nce,V0o,X0o,ji,z0o,sce,Q0o,W0o,iD,H0o,U0o,J0o,b8,Y0o,Ze,KA,K0o,lce,Z0o,eyo,ka,oyo,ice,ryo,tyo,dce,ayo,nyo,cce,syo,lyo,iyo,q,v8,fce,dyo,cyo,dD,fyo,myo,gyo,F8,mce,hyo,pyo,cD,uyo,_yo,byo,T8,gce,vyo,Fyo,fD,Tyo,Myo,Eyo,M8,hce,Cyo,wyo,mD,Ayo,yyo,Lyo,E8,pce,xyo,$yo,gD,kyo,Syo,Ryo,C8,uce,Byo,Pyo,hD,Iyo,qyo,Nyo,w8,_ce,jyo,Dyo,pD,Gyo,Oyo,Vyo,A8,bce,Xyo,zyo,uD,Qyo,Wyo,Hyo,y8,vce,Uyo,Jyo,_D,Yyo,Kyo,Zyo,L8,Fce,eLo,oLo,bD,rLo,tLo,aLo,x8,Tce,nLo,sLo,vD,lLo,iLo,dLo,$8,Mce,cLo,fLo,FD,mLo,gLo,hLo,k8,Ece,pLo,uLo,TD,_Lo,bLo,vLo,S8,Cce,FLo,TLo,MD,MLo,ELo,CLo,R8,wce,wLo,ALo,ED,yLo,LLo,xLo,B8,Ace,$Lo,kLo,CD,SLo,RLo,BLo,P8,yce,PLo,ILo,wD,qLo,NLo,jLo,I8,Lce,DLo,GLo,AD,OLo,VLo,XLo,q8,xce,zLo,QLo,yD,WLo,HLo,ULo,N8,$ce,JLo,YLo,LD,KLo,ZLo,exo,j8,kce,oxo,rxo,xD,txo,axo,nxo,D8,Sce,sxo,lxo,$D,ixo,dxo,cxo,G8,Rce,fxo,mxo,kD,gxo,hxo,pxo,O8,Bce,uxo,_xo,SD,bxo,vxo,Fxo,V8,Pce,Txo,Mxo,RD,Exo,Cxo,wxo,X8,Ice,Axo,yxo,BD,Lxo,xxo,$xo,z8,qce,kxo,Sxo,PD,Rxo,Bxo,Pxo,Q8,Nce,Ixo,qxo,ID,Nxo,jxo,Dxo,W8,jce,Gxo,Oxo,qD,Vxo,Xxo,zxo,H8,Dce,Qxo,Wxo,ND,Hxo,Uxo,Jxo,U8,Gce,Yxo,Kxo,jD,Zxo,e7o,o7o,J8,Oce,r7o,t7o,DD,a7o,n7o,s7o,Y8,Vce,l7o,i7o,GD,d7o,c7o,f7o,K8,Xce,m7o,g7o,OD,h7o,p7o,u7o,Z8,zce,_7o,b7o,VD,v7o,F7o,T7o,eb,Qce,M7o,E7o,XD,C7o,w7o,A7o,ob,Wce,y7o,L7o,zD,x7o,$7o,k7o,rb,Hce,S7o,R7o,QD,B7o,P7o,I7o,tb,Uce,q7o,N7o,WD,j7o,D7o,G7o,ab,Jce,O7o,V7o,HD,X7o,z7o,Q7o,nb,Yce,W7o,H7o,UD,U7o,J7o,Y7o,sb,Kce,K7o,Z7o,JD,e$o,o$o,r$o,lb,Zce,t$o,a$o,YD,n$o,s$o,l$o,ib,efe,i$o,d$o,KD,c$o,f$o,m$o,db,ofe,g$o,h$o,ZD,p$o,u$o,_$o,cb,rfe,b$o,v$o,eG,F$o,T$o,M$o,fb,E$o,tfe,C$o,w$o,afe,A$o,y$o,mb,cIe,Di,gb,nfe,ZA,L$o,sfe,x$o,fIe,Bo,e0,$$o,Gi,k$o,oG,S$o,R$o,rG,B$o,P$o,I$o,o0,q$o,lfe,N$o,j$o,D$o,lt,r0,G$o,ife,O$o,V$o,Oi,X$o,dfe,z$o,Q$o,tG,W$o,H$o,U$o,hb,J$o,eo,t0,Y$o,cfe,K$o,Z$o,Sa,eko,ffe,oko,rko,mfe,tko,ako,gfe,nko,sko,lko,Y,pb,hfe,iko,dko,aG,cko,fko,mko,ub,pfe,gko,hko,nG,pko,uko,_ko,_b,ufe,bko,vko,sG,Fko,Tko,Mko,bb,_fe,Eko,Cko,lG,wko,Ako,yko,vb,bfe,Lko,xko,iG,$ko,kko,Sko,Fb,vfe,Rko,Bko,dG,Pko,Iko,qko,Tb,Ffe,Nko,jko,cG,Dko,Gko,Oko,Mb,Tfe,Vko,Xko,fG,zko,Qko,Wko,Eb,Mfe,Hko,Uko,mG,Jko,Yko,Kko,Cb,Efe,Zko,eSo,gG,oSo,rSo,tSo,wb,Cfe,aSo,nSo,hG,sSo,lSo,iSo,Ab,wfe,dSo,cSo,pG,fSo,mSo,gSo,yb,Afe,hSo,pSo,uG,uSo,_So,bSo,Lb,yfe,vSo,FSo,_G,TSo,MSo,ESo,xb,Lfe,CSo,wSo,bG,ASo,ySo,LSo,$b,xfe,xSo,$So,vG,kSo,SSo,RSo,kb,$fe,BSo,PSo,FG,ISo,qSo,NSo,Sb,kfe,jSo,DSo,TG,GSo,OSo,VSo,Rb,Sfe,XSo,zSo,MG,QSo,WSo,HSo,Bb,Rfe,USo,JSo,EG,YSo,KSo,ZSo,Pb,Bfe,eRo,oRo,CG,rRo,tRo,aRo,Ib,Pfe,nRo,sRo,wG,lRo,iRo,dRo,qb,Ife,cRo,fRo,AG,mRo,gRo,hRo,Nb,qfe,pRo,uRo,yG,_Ro,bRo,vRo,jb,Nfe,FRo,TRo,LG,MRo,ERo,CRo,Db,jfe,wRo,ARo,xG,yRo,LRo,xRo,Gb,Dfe,$Ro,kRo,$G,SRo,RRo,BRo,Ob,Gfe,PRo,IRo,kG,qRo,NRo,jRo,Vb,Ofe,DRo,GRo,SG,ORo,VRo,XRo,Xb,zRo,Vfe,QRo,WRo,Xfe,HRo,URo,zb,mIe,Vi,Qb,zfe,a0,JRo,Qfe,YRo,gIe,Po,n0,KRo,Xi,ZRo,RG,eBo,oBo,BG,rBo,tBo,aBo,s0,nBo,Wfe,sBo,lBo,iBo,it,l0,dBo,Hfe,cBo,fBo,zi,mBo,Ufe,gBo,hBo,PG,pBo,uBo,_Bo,Wb,bBo,oo,i0,vBo,Jfe,FBo,TBo,Ra,MBo,Yfe,EBo,CBo,Kfe,wBo,ABo,Zfe,yBo,LBo,xBo,Yr,Hb,eme,$Bo,kBo,IG,SBo,RBo,BBo,Ub,ome,PBo,IBo,qG,qBo,NBo,jBo,Jb,rme,DBo,GBo,NG,OBo,VBo,XBo,Yb,tme,zBo,QBo,jG,WBo,HBo,UBo,Kb,ame,JBo,YBo,DG,KBo,ZBo,ePo,Zb,oPo,nme,rPo,tPo,sme,aPo,nPo,e2,hIe,Qi,o2,lme,d0,sPo,ime,lPo,pIe,Io,c0,iPo,Wi,dPo,GG,cPo,fPo,OG,mPo,gPo,hPo,f0,pPo,dme,uPo,_Po,bPo,dt,m0,vPo,cme,FPo,TPo,Hi,MPo,fme,EPo,CPo,VG,wPo,APo,yPo,r2,LPo,ro,g0,xPo,mme,$Po,kPo,Ba,SPo,gme,RPo,BPo,hme,PPo,IPo,pme,qPo,NPo,jPo,U,t2,ume,DPo,GPo,XG,OPo,VPo,XPo,a2,_me,zPo,QPo,zG,WPo,HPo,UPo,n2,bme,JPo,YPo,QG,KPo,ZPo,eIo,s2,vme,oIo,rIo,WG,tIo,aIo,nIo,l2,Fme,sIo,lIo,HG,iIo,dIo,cIo,i2,Tme,fIo,mIo,UG,gIo,hIo,pIo,d2,Mme,uIo,_Io,JG,bIo,vIo,FIo,c2,Eme,TIo,MIo,YG,EIo,CIo,wIo,f2,Cme,AIo,yIo,KG,LIo,xIo,$Io,m2,wme,kIo,SIo,ZG,RIo,BIo,PIo,g2,Ame,IIo,qIo,eO,NIo,jIo,DIo,h2,yme,GIo,OIo,oO,VIo,XIo,zIo,p2,Lme,QIo,WIo,rO,HIo,UIo,JIo,u2,xme,YIo,KIo,tO,ZIo,eqo,oqo,_2,$me,rqo,tqo,aO,aqo,nqo,sqo,b2,kme,lqo,iqo,nO,dqo,cqo,fqo,v2,Sme,mqo,gqo,sO,hqo,pqo,uqo,F2,Rme,_qo,bqo,lO,vqo,Fqo,Tqo,T2,Bme,Mqo,Eqo,iO,Cqo,wqo,Aqo,M2,Pme,yqo,Lqo,dO,xqo,$qo,kqo,E2,Ime,Sqo,Rqo,cO,Bqo,Pqo,Iqo,C2,qme,qqo,Nqo,fO,jqo,Dqo,Gqo,w2,Nme,Oqo,Vqo,mO,Xqo,zqo,Qqo,A2,jme,Wqo,Hqo,gO,Uqo,Jqo,Yqo,y2,Dme,Kqo,Zqo,hO,eNo,oNo,rNo,L2,Gme,tNo,aNo,pO,nNo,sNo,lNo,x2,Ome,iNo,dNo,uO,cNo,fNo,mNo,$2,Vme,gNo,hNo,_O,pNo,uNo,_No,k2,Xme,bNo,vNo,bO,FNo,TNo,MNo,S2,zme,ENo,CNo,vO,wNo,ANo,yNo,R2,Qme,LNo,xNo,FO,$No,kNo,SNo,B2,Wme,RNo,BNo,TO,PNo,INo,qNo,P2,Hme,NNo,jNo,MO,DNo,GNo,ONo,I2,VNo,Ume,XNo,zNo,Jme,QNo,WNo,q2,uIe,Ui,N2,Yme,h0,HNo,Kme,UNo,_Ie,qo,p0,JNo,Ji,YNo,EO,KNo,ZNo,CO,ejo,ojo,rjo,u0,tjo,Zme,ajo,njo,sjo,ct,_0,ljo,ege,ijo,djo,Yi,cjo,oge,fjo,mjo,wO,gjo,hjo,pjo,j2,ujo,to,b0,_jo,rge,bjo,vjo,Pa,Fjo,tge,Tjo,Mjo,age,Ejo,Cjo,nge,wjo,Ajo,yjo,O,D2,sge,Ljo,xjo,AO,$jo,kjo,Sjo,G2,lge,Rjo,Bjo,yO,Pjo,Ijo,qjo,O2,ige,Njo,jjo,LO,Djo,Gjo,Ojo,V2,dge,Vjo,Xjo,xO,zjo,Qjo,Wjo,X2,cge,Hjo,Ujo,$O,Jjo,Yjo,Kjo,z2,fge,Zjo,eDo,kO,oDo,rDo,tDo,Q2,mge,aDo,nDo,SO,sDo,lDo,iDo,W2,gge,dDo,cDo,RO,fDo,mDo,gDo,H2,hge,hDo,pDo,BO,uDo,_Do,bDo,U2,pge,vDo,FDo,PO,TDo,MDo,EDo,J2,uge,CDo,wDo,IO,ADo,yDo,LDo,Y2,_ge,xDo,$Do,qO,kDo,SDo,RDo,K2,bge,BDo,PDo,NO,IDo,qDo,NDo,Z2,vge,jDo,DDo,jO,GDo,ODo,VDo,ev,Fge,XDo,zDo,DO,QDo,WDo,HDo,ov,Tge,UDo,JDo,GO,YDo,KDo,ZDo,rv,Mge,eGo,oGo,OO,rGo,tGo,aGo,tv,Ege,nGo,sGo,VO,lGo,iGo,dGo,av,Cge,cGo,fGo,XO,mGo,gGo,hGo,nv,wge,pGo,uGo,zO,_Go,bGo,vGo,sv,Age,FGo,TGo,QO,MGo,EGo,CGo,lv,yge,wGo,AGo,WO,yGo,LGo,xGo,iv,Lge,$Go,kGo,HO,SGo,RGo,BGo,dv,xge,PGo,IGo,UO,qGo,NGo,jGo,cv,$ge,DGo,GGo,JO,OGo,VGo,XGo,fv,kge,zGo,QGo,YO,WGo,HGo,UGo,mv,Sge,JGo,YGo,KO,KGo,ZGo,eOo,gv,Rge,oOo,rOo,ZO,tOo,aOo,nOo,hv,Bge,sOo,lOo,eV,iOo,dOo,cOo,pv,Pge,fOo,mOo,oV,gOo,hOo,pOo,uv,Ige,uOo,_Oo,rV,bOo,vOo,FOo,_v,qge,TOo,MOo,tV,EOo,COo,wOo,bv,Nge,AOo,yOo,aV,LOo,xOo,$Oo,vv,jge,kOo,SOo,nV,ROo,BOo,POo,Fv,Dge,IOo,qOo,sV,NOo,jOo,DOo,Tv,Gge,GOo,OOo,lV,VOo,XOo,zOo,Mv,Oge,QOo,WOo,iV,HOo,UOo,JOo,Ev,Vge,YOo,KOo,dV,ZOo,eVo,oVo,Cv,Xge,rVo,tVo,cV,aVo,nVo,sVo,wv,lVo,zge,iVo,dVo,Qge,cVo,fVo,Av,bIe,Ki,yv,Wge,v0,mVo,Hge,gVo,vIe,No,F0,hVo,Zi,pVo,fV,uVo,_Vo,mV,bVo,vVo,FVo,T0,TVo,Uge,MVo,EVo,CVo,ft,M0,wVo,Jge,AVo,yVo,ed,LVo,Yge,xVo,$Vo,gV,kVo,SVo,RVo,Lv,BVo,ao,E0,PVo,Kge,IVo,qVo,Ia,NVo,Zge,jVo,DVo,ehe,GVo,OVo,ohe,VVo,XVo,zVo,rhe,xv,the,QVo,WVo,hV,HVo,UVo,JVo,$v,YVo,ahe,KVo,ZVo,nhe,eXo,oXo,kv,FIe,od,Sv,she,C0,rXo,lhe,tXo,TIe,jo,w0,aXo,rd,nXo,pV,sXo,lXo,uV,iXo,dXo,cXo,A0,fXo,ihe,mXo,gXo,hXo,mt,y0,pXo,dhe,uXo,_Xo,td,bXo,che,vXo,FXo,_V,TXo,MXo,EXo,Rv,CXo,no,L0,wXo,fhe,AXo,yXo,qa,LXo,mhe,xXo,$Xo,ghe,kXo,SXo,hhe,RXo,BXo,PXo,Fe,Bv,phe,IXo,qXo,bV,NXo,jXo,DXo,Pv,uhe,GXo,OXo,vV,VXo,XXo,zXo,Iv,_he,QXo,WXo,FV,HXo,UXo,JXo,Bs,bhe,YXo,KXo,TV,ZXo,ezo,MV,ozo,rzo,tzo,qv,vhe,azo,nzo,EV,szo,lzo,izo,gt,Fhe,dzo,czo,CV,fzo,mzo,wV,gzo,hzo,AV,pzo,uzo,_zo,Nv,The,bzo,vzo,yV,Fzo,Tzo,Mzo,jv,Mhe,Ezo,Czo,LV,wzo,Azo,yzo,Dv,Ehe,Lzo,xzo,xV,$zo,kzo,Szo,Gv,Che,Rzo,Bzo,$V,Pzo,Izo,qzo,Ov,whe,Nzo,jzo,kV,Dzo,Gzo,Ozo,Vv,Ahe,Vzo,Xzo,SV,zzo,Qzo,Wzo,Xv,yhe,Hzo,Uzo,RV,Jzo,Yzo,Kzo,zv,Zzo,Lhe,eQo,oQo,xhe,rQo,tQo,Qv,MIe,ad,Wv,$he,x0,aQo,khe,nQo,EIe,Do,$0,sQo,nd,lQo,BV,iQo,dQo,PV,cQo,fQo,mQo,k0,gQo,She,hQo,pQo,uQo,ht,S0,_Qo,Rhe,bQo,vQo,sd,FQo,Bhe,TQo,MQo,IV,EQo,CQo,wQo,Hv,AQo,so,R0,yQo,Phe,LQo,xQo,Na,$Qo,Ihe,kQo,SQo,qhe,RQo,BQo,Nhe,PQo,IQo,qQo,jhe,Uv,Dhe,NQo,jQo,qV,DQo,GQo,OQo,Jv,VQo,Ghe,XQo,zQo,Ohe,QQo,WQo,Yv,CIe,ld,Kv,Vhe,B0,HQo,Xhe,UQo,wIe,Go,P0,JQo,id,YQo,NV,KQo,ZQo,jV,eWo,oWo,rWo,I0,tWo,zhe,aWo,nWo,sWo,pt,q0,lWo,Qhe,iWo,dWo,dd,cWo,Whe,fWo,mWo,DV,gWo,hWo,pWo,Zv,uWo,lo,N0,_Wo,Hhe,bWo,vWo,ja,FWo,Uhe,TWo,MWo,Jhe,EWo,CWo,Yhe,wWo,AWo,yWo,Ne,eF,Khe,LWo,xWo,GV,$Wo,kWo,SWo,oF,Zhe,RWo,BWo,OV,PWo,IWo,qWo,rF,epe,NWo,jWo,VV,DWo,GWo,OWo,tF,ope,VWo,XWo,XV,zWo,QWo,WWo,aF,rpe,HWo,UWo,zV,JWo,YWo,KWo,nF,tpe,ZWo,eHo,QV,oHo,rHo,tHo,sF,ape,aHo,nHo,WV,sHo,lHo,iHo,lF,npe,dHo,cHo,HV,fHo,mHo,gHo,iF,hHo,spe,pHo,uHo,lpe,_Ho,bHo,dF,AIe,cd,cF,ipe,j0,vHo,dpe,FHo,yIe,Oo,D0,THo,fd,MHo,UV,EHo,CHo,JV,wHo,AHo,yHo,G0,LHo,cpe,xHo,$Ho,kHo,ut,O0,SHo,fpe,RHo,BHo,md,PHo,mpe,IHo,qHo,YV,NHo,jHo,DHo,fF,GHo,io,V0,OHo,gpe,VHo,XHo,Da,zHo,hpe,QHo,WHo,ppe,HHo,UHo,upe,JHo,YHo,KHo,Ga,mF,_pe,ZHo,eUo,KV,oUo,rUo,tUo,gF,bpe,aUo,nUo,ZV,sUo,lUo,iUo,hF,vpe,dUo,cUo,eX,fUo,mUo,gUo,pF,Fpe,hUo,pUo,oX,uUo,_Uo,bUo,uF,vUo,Tpe,FUo,TUo,Mpe,MUo,EUo,_F,LIe,gd,bF,Epe,X0,CUo,Cpe,wUo,xIe,Vo,z0,AUo,hd,yUo,rX,LUo,xUo,tX,$Uo,kUo,SUo,Q0,RUo,wpe,BUo,PUo,IUo,_t,W0,qUo,Ape,NUo,jUo,pd,DUo,ype,GUo,OUo,aX,VUo,XUo,zUo,vF,QUo,co,H0,WUo,Lpe,HUo,UUo,Oa,JUo,xpe,YUo,KUo,$pe,ZUo,eJo,kpe,oJo,rJo,tJo,je,FF,Spe,aJo,nJo,nX,sJo,lJo,iJo,TF,Rpe,dJo,cJo,sX,fJo,mJo,gJo,MF,Bpe,hJo,pJo,lX,uJo,_Jo,bJo,EF,Ppe,vJo,FJo,iX,TJo,MJo,EJo,CF,Ipe,CJo,wJo,dX,AJo,yJo,LJo,wF,qpe,xJo,$Jo,cX,kJo,SJo,RJo,AF,Npe,BJo,PJo,fX,IJo,qJo,NJo,yF,jpe,jJo,DJo,mX,GJo,OJo,VJo,LF,XJo,Dpe,zJo,QJo,Gpe,WJo,HJo,xF,$Ie,ud,$F,Ope,U0,UJo,Vpe,JJo,kIe,Xo,J0,YJo,_d,KJo,gX,ZJo,eYo,hX,oYo,rYo,tYo,Y0,aYo,Xpe,nYo,sYo,lYo,bt,K0,iYo,zpe,dYo,cYo,bd,fYo,Qpe,mYo,gYo,pX,hYo,pYo,uYo,kF,_Yo,fo,Z0,bYo,Wpe,vYo,FYo,Va,TYo,Hpe,MYo,EYo,Upe,CYo,wYo,Jpe,AYo,yYo,LYo,ey,SF,Ype,xYo,$Yo,uX,kYo,SYo,RYo,RF,Kpe,BYo,PYo,_X,IYo,qYo,NYo,BF,jYo,Zpe,DYo,GYo,eue,OYo,VYo,PF,SIe,vd,IF,oue,oy,XYo,rue,zYo,RIe,zo,ry,QYo,Fd,WYo,bX,HYo,UYo,vX,JYo,YYo,KYo,ty,ZYo,tue,eKo,oKo,rKo,vt,ay,tKo,aue,aKo,nKo,Td,sKo,nue,lKo,iKo,FX,dKo,cKo,fKo,qF,mKo,mo,ny,gKo,sue,hKo,pKo,Xa,uKo,lue,_Ko,bKo,iue,vKo,FKo,due,TKo,MKo,EKo,za,NF,cue,CKo,wKo,TX,AKo,yKo,LKo,jF,fue,xKo,$Ko,MX,kKo,SKo,RKo,DF,mue,BKo,PKo,EX,IKo,qKo,NKo,GF,gue,jKo,DKo,CX,GKo,OKo,VKo,OF,XKo,hue,zKo,QKo,pue,WKo,HKo,VF,BIe,Md,XF,uue,sy,UKo,_ue,JKo,PIe,Qo,ly,YKo,Ed,KKo,wX,ZKo,eZo,AX,oZo,rZo,tZo,iy,aZo,bue,nZo,sZo,lZo,Ft,dy,iZo,vue,dZo,cZo,Cd,fZo,Fue,mZo,gZo,yX,hZo,pZo,uZo,zF,_Zo,go,cy,bZo,Tue,vZo,FZo,Qa,TZo,Mue,MZo,EZo,Eue,CZo,wZo,Cue,AZo,yZo,LZo,wd,QF,wue,xZo,$Zo,LX,kZo,SZo,RZo,WF,Aue,BZo,PZo,xX,IZo,qZo,NZo,HF,yue,jZo,DZo,$X,GZo,OZo,VZo,UF,XZo,Lue,zZo,QZo,xue,WZo,HZo,JF,IIe,Ad,YF,$ue,fy,UZo,kue,JZo,qIe,Wo,my,YZo,yd,KZo,kX,ZZo,eer,SX,oer,rer,ter,gy,aer,Sue,ner,ser,ler,Tt,hy,ier,Rue,der,cer,Ld,fer,Bue,mer,ger,RX,her,per,uer,KF,_er,ho,py,ber,Pue,ver,Fer,Wa,Ter,Iue,Mer,Eer,que,Cer,wer,Nue,Aer,yer,Ler,uy,ZF,jue,xer,$er,BX,ker,Ser,Rer,e6,Due,Ber,Per,PX,Ier,qer,Ner,o6,jer,Gue,Der,Ger,Oue,Oer,Ver,r6,NIe,xd,t6,Vue,_y,Xer,Xue,zer,jIe,Ho,by,Qer,$d,Wer,IX,Her,Uer,qX,Jer,Yer,Ker,vy,Zer,zue,eor,oor,ror,Mt,Fy,tor,Que,aor,nor,kd,sor,Wue,lor,ior,NX,dor,cor,mor,a6,gor,po,Ty,hor,Hue,por,uor,Ha,_or,Uue,bor,vor,Jue,For,Tor,Yue,Mor,Eor,Cor,Kue,n6,Zue,wor,Aor,jX,yor,Lor,xor,s6,$or,e_e,kor,Sor,o_e,Ror,Bor,l6,DIe,Sd,i6,r_e,My,Por,t_e,Ior,GIe,Uo,Ey,qor,Rd,Nor,DX,jor,Dor,GX,Gor,Oor,Vor,Cy,Xor,a_e,zor,Qor,Wor,Et,wy,Hor,n_e,Uor,Jor,Bd,Yor,s_e,Kor,Zor,OX,err,orr,rrr,d6,trr,uo,Ay,arr,l_e,nrr,srr,Ua,lrr,i_e,irr,drr,d_e,crr,frr,c_e,mrr,grr,hrr,Ja,c6,f_e,prr,urr,VX,_rr,brr,vrr,f6,m_e,Frr,Trr,XX,Mrr,Err,Crr,m6,g_e,wrr,Arr,zX,yrr,Lrr,xrr,g6,h_e,$rr,krr,QX,Srr,Rrr,Brr,h6,Prr,p_e,Irr,qrr,u_e,Nrr,jrr,p6,OIe,Pd,u6,__e,yy,Drr,b_e,Grr,VIe,Jo,Ly,Orr,Id,Vrr,WX,Xrr,zrr,HX,Qrr,Wrr,Hrr,xy,Urr,v_e,Jrr,Yrr,Krr,Ct,$y,Zrr,F_e,etr,otr,qd,rtr,T_e,ttr,atr,UX,ntr,str,ltr,_6,itr,_o,ky,dtr,M_e,ctr,ftr,Ya,mtr,E_e,gtr,htr,C_e,ptr,utr,w_e,_tr,btr,vtr,A_e,b6,y_e,Ftr,Ttr,JX,Mtr,Etr,Ctr,v6,wtr,L_e,Atr,ytr,x_e,Ltr,xtr,F6,XIe,Nd,T6,$_e,Sy,$tr,k_e,ktr,zIe,Yo,Ry,Str,jd,Rtr,YX,Btr,Ptr,KX,Itr,qtr,Ntr,By,jtr,S_e,Dtr,Gtr,Otr,wt,Py,Vtr,R_e,Xtr,ztr,Dd,Qtr,B_e,Wtr,Htr,ZX,Utr,Jtr,Ytr,M6,Ktr,wr,Iy,Ztr,P_e,ear,oar,Ka,rar,I_e,tar,aar,q_e,nar,sar,N_e,lar,iar,dar,N,E6,j_e,car,far,ez,mar,gar,har,C6,D_e,par,uar,oz,_ar,bar,Far,w6,G_e,Tar,Mar,rz,Ear,Car,war,A6,O_e,Aar,yar,tz,Lar,xar,$ar,y6,V_e,kar,Sar,az,Rar,Bar,Par,L6,X_e,Iar,qar,nz,Nar,jar,Dar,x6,z_e,Gar,Oar,sz,Var,Xar,zar,$6,Q_e,Qar,War,lz,Har,Uar,Jar,k6,W_e,Yar,Kar,iz,Zar,enr,onr,S6,H_e,rnr,tnr,dz,anr,nnr,snr,R6,U_e,lnr,inr,cz,dnr,cnr,fnr,B6,J_e,mnr,gnr,fz,hnr,pnr,unr,P6,Y_e,_nr,bnr,mz,vnr,Fnr,Tnr,I6,K_e,Mnr,Enr,gz,Cnr,wnr,Anr,q6,Z_e,ynr,Lnr,hz,xnr,$nr,knr,N6,e1e,Snr,Rnr,pz,Bnr,Pnr,Inr,j6,o1e,qnr,Nnr,uz,jnr,Dnr,Gnr,Ps,r1e,Onr,Vnr,_z,Xnr,znr,bz,Qnr,Wnr,Hnr,D6,t1e,Unr,Jnr,vz,Ynr,Knr,Znr,G6,a1e,esr,osr,Fz,rsr,tsr,asr,O6,n1e,nsr,ssr,Tz,lsr,isr,dsr,V6,s1e,csr,fsr,Mz,msr,gsr,hsr,X6,l1e,psr,usr,Ez,_sr,bsr,vsr,z6,i1e,Fsr,Tsr,Cz,Msr,Esr,Csr,Q6,d1e,wsr,Asr,wz,ysr,Lsr,xsr,W6,c1e,$sr,ksr,Az,Ssr,Rsr,Bsr,H6,f1e,Psr,Isr,yz,qsr,Nsr,jsr,U6,m1e,Dsr,Gsr,Lz,Osr,Vsr,Xsr,J6,g1e,zsr,Qsr,xz,Wsr,Hsr,Usr,Y6,h1e,Jsr,Ysr,$z,Ksr,Zsr,elr,K6,p1e,olr,rlr,kz,tlr,alr,nlr,Z6,u1e,slr,llr,Sz,ilr,dlr,clr,eT,_1e,flr,mlr,Rz,glr,hlr,plr,oT,b1e,ulr,_lr,Bz,blr,vlr,Flr,rT,v1e,Tlr,Mlr,Pz,Elr,Clr,wlr,tT,F1e,Alr,ylr,Iz,Llr,xlr,$lr,aT,T1e,klr,Slr,qz,Rlr,Blr,Plr,nT,M1e,Ilr,qlr,Nz,Nlr,jlr,Dlr,sT,E1e,Glr,Olr,jz,Vlr,Xlr,zlr,lT,C1e,Qlr,Wlr,Dz,Hlr,Ulr,Jlr,iT,w1e,Ylr,Klr,Gz,Zlr,eir,oir,dT,A1e,rir,tir,Oz,air,nir,sir,cT,y1e,lir,iir,Vz,dir,cir,fir,fT,L1e,mir,gir,Xz,hir,pir,uir,mT,x1e,_ir,bir,zz,vir,Fir,Tir,gT,$1e,Mir,Eir,Qz,Cir,wir,Air,hT,QIe,Gd,pT,k1e,qy,yir,S1e,Lir,WIe,Ko,Ny,xir,Od,$ir,Wz,kir,Sir,Hz,Rir,Bir,Pir,jy,Iir,R1e,qir,Nir,jir,At,Dy,Dir,B1e,Gir,Oir,Vd,Vir,P1e,Xir,zir,Uz,Qir,Wir,Hir,uT,Uir,Ar,Gy,Jir,I1e,Yir,Kir,Za,Zir,q1e,edr,odr,N1e,rdr,tdr,j1e,adr,ndr,sdr,se,_T,D1e,ldr,idr,Jz,ddr,cdr,fdr,bT,G1e,mdr,gdr,Yz,hdr,pdr,udr,vT,O1e,_dr,bdr,Kz,vdr,Fdr,Tdr,FT,V1e,Mdr,Edr,Zz,Cdr,wdr,Adr,TT,X1e,ydr,Ldr,eQ,xdr,$dr,kdr,MT,z1e,Sdr,Rdr,oQ,Bdr,Pdr,Idr,ET,Q1e,qdr,Ndr,rQ,jdr,Ddr,Gdr,CT,W1e,Odr,Vdr,tQ,Xdr,zdr,Qdr,wT,H1e,Wdr,Hdr,aQ,Udr,Jdr,Ydr,AT,U1e,Kdr,Zdr,nQ,ecr,ocr,rcr,yT,J1e,tcr,acr,sQ,ncr,scr,lcr,LT,Y1e,icr,dcr,lQ,ccr,fcr,mcr,xT,K1e,gcr,hcr,iQ,pcr,ucr,_cr,$T,Z1e,bcr,vcr,dQ,Fcr,Tcr,Mcr,kT,e8e,Ecr,Ccr,cQ,wcr,Acr,ycr,ST,o8e,Lcr,xcr,fQ,$cr,kcr,Scr,RT,r8e,Rcr,Bcr,mQ,Pcr,Icr,qcr,BT,t8e,Ncr,jcr,gQ,Dcr,Gcr,Ocr,PT,a8e,Vcr,Xcr,hQ,zcr,Qcr,Wcr,IT,n8e,Hcr,Ucr,pQ,Jcr,Ycr,Kcr,qT,s8e,Zcr,efr,uQ,ofr,rfr,tfr,NT,l8e,afr,nfr,_Q,sfr,lfr,ifr,jT,i8e,dfr,cfr,bQ,ffr,mfr,gfr,DT,HIe,Xd,GT,d8e,Oy,hfr,c8e,pfr,UIe,Zo,Vy,ufr,zd,_fr,vQ,bfr,vfr,FQ,Ffr,Tfr,Mfr,Xy,Efr,f8e,Cfr,wfr,Afr,yt,zy,yfr,m8e,Lfr,xfr,Qd,$fr,g8e,kfr,Sfr,TQ,Rfr,Bfr,Pfr,OT,Ifr,yr,Qy,qfr,h8e,Nfr,jfr,en,Dfr,p8e,Gfr,Ofr,u8e,Vfr,Xfr,_8e,zfr,Qfr,Wfr,Te,VT,b8e,Hfr,Ufr,MQ,Jfr,Yfr,Kfr,XT,v8e,Zfr,emr,EQ,omr,rmr,tmr,zT,F8e,amr,nmr,CQ,smr,lmr,imr,QT,T8e,dmr,cmr,wQ,fmr,mmr,gmr,WT,M8e,hmr,pmr,AQ,umr,_mr,bmr,HT,E8e,vmr,Fmr,yQ,Tmr,Mmr,Emr,UT,C8e,Cmr,wmr,LQ,Amr,ymr,Lmr,JT,w8e,xmr,$mr,xQ,kmr,Smr,Rmr,YT,A8e,Bmr,Pmr,$Q,Imr,qmr,Nmr,KT,y8e,jmr,Dmr,kQ,Gmr,Omr,Vmr,ZT,L8e,Xmr,zmr,SQ,Qmr,Wmr,Hmr,e9,x8e,Umr,Jmr,RQ,Ymr,Kmr,Zmr,o9,JIe,Wd,r9,$8e,Wy,egr,k8e,ogr,YIe,er,Hy,rgr,Hd,tgr,BQ,agr,ngr,PQ,sgr,lgr,igr,Uy,dgr,S8e,cgr,fgr,mgr,Lt,Jy,ggr,R8e,hgr,pgr,Ud,ugr,B8e,_gr,bgr,IQ,vgr,Fgr,Tgr,t9,Mgr,Lr,Yy,Egr,P8e,Cgr,wgr,on,Agr,I8e,ygr,Lgr,q8e,xgr,$gr,N8e,kgr,Sgr,Rgr,rn,a9,j8e,Bgr,Pgr,qQ,Igr,qgr,Ngr,n9,D8e,jgr,Dgr,NQ,Ggr,Ogr,Vgr,s9,G8e,Xgr,zgr,jQ,Qgr,Wgr,Hgr,l9,O8e,Ugr,Jgr,DQ,Ygr,Kgr,Zgr,i9,KIe,Jd,d9,V8e,Ky,ehr,X8e,ohr,ZIe,or,Zy,rhr,Yd,thr,GQ,ahr,nhr,OQ,shr,lhr,ihr,eL,dhr,z8e,chr,fhr,mhr,xt,oL,ghr,Q8e,hhr,phr,Kd,uhr,W8e,_hr,bhr,VQ,vhr,Fhr,Thr,c9,Mhr,xr,rL,Ehr,H8e,Chr,whr,tn,Ahr,U8e,yhr,Lhr,J8e,xhr,$hr,Y8e,khr,Shr,Rhr,ie,f9,K8e,Bhr,Phr,XQ,Ihr,qhr,Nhr,m9,Z8e,jhr,Dhr,zQ,Ghr,Ohr,Vhr,g9,ebe,Xhr,zhr,QQ,Qhr,Whr,Hhr,h9,obe,Uhr,Jhr,WQ,Yhr,Khr,Zhr,p9,rbe,epr,opr,HQ,rpr,tpr,apr,u9,tbe,npr,spr,UQ,lpr,ipr,dpr,_9,abe,cpr,fpr,JQ,mpr,gpr,hpr,b9,nbe,ppr,upr,YQ,_pr,bpr,vpr,v9,sbe,Fpr,Tpr,KQ,Mpr,Epr,Cpr,F9,lbe,wpr,Apr,ZQ,ypr,Lpr,xpr,T9,ibe,$pr,kpr,eW,Spr,Rpr,Bpr,M9,dbe,Ppr,Ipr,oW,qpr,Npr,jpr,E9,cbe,Dpr,Gpr,rW,Opr,Vpr,Xpr,C9,fbe,zpr,Qpr,tW,Wpr,Hpr,Upr,w9,mbe,Jpr,Ypr,aW,Kpr,Zpr,eur,A9,gbe,our,rur,nW,tur,aur,nur,y9,hbe,sur,lur,sW,iur,dur,cur,L9,pbe,fur,mur,lW,gur,hur,pur,x9,ube,uur,_ur,iW,bur,vur,Fur,$9,_be,Tur,Mur,dW,Eur,Cur,wur,k9,eqe,Zd,S9,bbe,tL,Aur,vbe,yur,oqe,rr,aL,Lur,ec,xur,cW,$ur,kur,fW,Sur,Rur,Bur,nL,Pur,Fbe,Iur,qur,Nur,$t,sL,jur,Tbe,Dur,Gur,oc,Our,Mbe,Vur,Xur,mW,zur,Qur,Wur,R9,Hur,$r,lL,Uur,Ebe,Jur,Yur,an,Kur,Cbe,Zur,e_r,wbe,o_r,r_r,Abe,t_r,a_r,n_r,ye,B9,ybe,s_r,l_r,gW,i_r,d_r,c_r,P9,Lbe,f_r,m_r,hW,g_r,h_r,p_r,I9,xbe,u_r,__r,pW,b_r,v_r,F_r,q9,$be,T_r,M_r,uW,E_r,C_r,w_r,N9,kbe,A_r,y_r,_W,L_r,x_r,$_r,j9,Sbe,k_r,S_r,bW,R_r,B_r,P_r,D9,Rbe,I_r,q_r,vW,N_r,j_r,D_r,G9,Bbe,G_r,O_r,FW,V_r,X_r,z_r,O9,Pbe,Q_r,W_r,TW,H_r,U_r,J_r,V9,Ibe,Y_r,K_r,MW,Z_r,e1r,o1r,X9,rqe,rc,z9,qbe,iL,r1r,Nbe,t1r,tqe,tr,dL,a1r,tc,n1r,EW,s1r,l1r,CW,i1r,d1r,c1r,cL,f1r,jbe,m1r,g1r,h1r,kt,fL,p1r,Dbe,u1r,_1r,ac,b1r,Gbe,v1r,F1r,wW,T1r,M1r,E1r,Q9,C1r,kr,mL,w1r,Obe,A1r,y1r,nn,L1r,Vbe,x1r,$1r,Xbe,k1r,S1r,zbe,R1r,B1r,P1r,Z,W9,Qbe,I1r,q1r,AW,N1r,j1r,D1r,H9,Wbe,G1r,O1r,yW,V1r,X1r,z1r,U9,Hbe,Q1r,W1r,LW,H1r,U1r,J1r,J9,Ube,Y1r,K1r,xW,Z1r,e8r,o8r,Y9,Jbe,r8r,t8r,$W,a8r,n8r,s8r,K9,Ybe,l8r,i8r,kW,d8r,c8r,f8r,Z9,Kbe,m8r,g8r,SW,h8r,p8r,u8r,eM,Zbe,_8r,b8r,RW,v8r,F8r,T8r,oM,e2e,M8r,E8r,BW,C8r,w8r,A8r,rM,o2e,y8r,L8r,PW,x8r,$8r,k8r,tM,r2e,S8r,R8r,IW,B8r,P8r,I8r,aM,t2e,q8r,N8r,qW,j8r,D8r,G8r,nM,a2e,O8r,V8r,NW,X8r,z8r,Q8r,sM,n2e,W8r,H8r,jW,U8r,J8r,Y8r,lM,s2e,K8r,Z8r,DW,ebr,obr,rbr,iM,l2e,tbr,abr,GW,nbr,sbr,lbr,dM,i2e,ibr,dbr,OW,cbr,fbr,mbr,cM,d2e,gbr,hbr,VW,pbr,ubr,_br,fM,c2e,bbr,vbr,XW,Fbr,Tbr,Mbr,mM,f2e,Ebr,Cbr,zW,wbr,Abr,ybr,gM,m2e,Lbr,xbr,QW,$br,kbr,Sbr,hM,g2e,Rbr,Bbr,WW,Pbr,Ibr,qbr,pM,h2e,Nbr,jbr,HW,Dbr,Gbr,Obr,uM,p2e,Vbr,Xbr,UW,zbr,Qbr,Wbr,_M,u2e,Hbr,Ubr,JW,Jbr,Ybr,Kbr,bM,_2e,Zbr,e2r,YW,o2r,r2r,t2r,vM,aqe,nc,FM,b2e,gL,a2r,v2e,n2r,nqe,ar,hL,s2r,sc,l2r,KW,i2r,d2r,ZW,c2r,f2r,m2r,pL,g2r,F2e,h2r,p2r,u2r,St,uL,_2r,T2e,b2r,v2r,lc,F2r,M2e,T2r,M2r,eH,E2r,C2r,w2r,TM,A2r,Sr,_L,y2r,E2e,L2r,x2r,sn,$2r,C2e,k2r,S2r,w2e,R2r,B2r,A2e,P2r,I2r,q2r,he,MM,y2e,N2r,j2r,oH,D2r,G2r,O2r,EM,L2e,V2r,X2r,rH,z2r,Q2r,W2r,CM,x2e,H2r,U2r,tH,J2r,Y2r,K2r,wM,$2e,Z2r,evr,aH,ovr,rvr,tvr,AM,k2e,avr,nvr,nH,svr,lvr,ivr,yM,S2e,dvr,cvr,sH,fvr,mvr,gvr,LM,R2e,hvr,pvr,lH,uvr,_vr,bvr,xM,B2e,vvr,Fvr,iH,Tvr,Mvr,Evr,$M,P2e,Cvr,wvr,dH,Avr,yvr,Lvr,kM,I2e,xvr,$vr,cH,kvr,Svr,Rvr,SM,q2e,Bvr,Pvr,fH,Ivr,qvr,Nvr,RM,N2e,jvr,Dvr,mH,Gvr,Ovr,Vvr,BM,j2e,Xvr,zvr,gH,Qvr,Wvr,Hvr,PM,D2e,Uvr,Jvr,hH,Yvr,Kvr,Zvr,IM,G2e,eFr,oFr,pH,rFr,tFr,aFr,qM,O2e,nFr,sFr,uH,lFr,iFr,dFr,NM,V2e,cFr,fFr,_H,mFr,gFr,hFr,jM,sqe,ic,DM,X2e,bL,pFr,z2e,uFr,lqe,nr,vL,_Fr,dc,bFr,bH,vFr,FFr,vH,TFr,MFr,EFr,FL,CFr,Q2e,wFr,AFr,yFr,Rt,TL,LFr,W2e,xFr,$Fr,cc,kFr,H2e,SFr,RFr,FH,BFr,PFr,IFr,GM,qFr,Rr,ML,NFr,U2e,jFr,DFr,ln,GFr,J2e,OFr,VFr,Y2e,XFr,zFr,K2e,QFr,WFr,HFr,EL,OM,Z2e,UFr,JFr,TH,YFr,KFr,ZFr,VM,eve,e6r,o6r,MH,r6r,t6r,a6r,XM,iqe,fc,zM,ove,CL,n6r,rve,s6r,dqe,sr,wL,l6r,mc,i6r,EH,d6r,c6r,CH,f6r,m6r,g6r,AL,h6r,tve,p6r,u6r,_6r,Bt,yL,b6r,ave,v6r,F6r,gc,T6r,nve,M6r,E6r,wH,C6r,w6r,A6r,QM,y6r,Br,LL,L6r,sve,x6r,$6r,dn,k6r,lve,S6r,R6r,ive,B6r,P6r,dve,I6r,q6r,N6r,cve,WM,fve,j6r,D6r,AH,G6r,O6r,V6r,HM,cqe,hc,UM,mve,xL,X6r,gve,z6r,fqe,lr,$L,Q6r,pc,W6r,yH,H6r,U6r,LH,J6r,Y6r,K6r,kL,Z6r,hve,eTr,oTr,rTr,Pt,SL,tTr,pve,aTr,nTr,uc,sTr,uve,lTr,iTr,xH,dTr,cTr,fTr,JM,mTr,Pr,RL,gTr,_ve,hTr,pTr,cn,uTr,bve,_Tr,bTr,vve,vTr,FTr,Fve,TTr,MTr,ETr,de,YM,Tve,CTr,wTr,$H,ATr,yTr,LTr,KM,Mve,xTr,$Tr,kH,kTr,STr,RTr,ZM,Eve,BTr,PTr,SH,ITr,qTr,NTr,e4,Cve,jTr,DTr,RH,GTr,OTr,VTr,o4,wve,XTr,zTr,BH,QTr,WTr,HTr,r4,Ave,UTr,JTr,PH,YTr,KTr,ZTr,t4,yve,e9r,o9r,IH,r9r,t9r,a9r,a4,Lve,n9r,s9r,qH,l9r,i9r,d9r,n4,xve,c9r,f9r,NH,m9r,g9r,h9r,s4,$ve,p9r,u9r,jH,_9r,b9r,v9r,l4,kve,F9r,T9r,DH,M9r,E9r,C9r,i4,Sve,w9r,A9r,GH,y9r,L9r,x9r,d4,Rve,$9r,k9r,OH,S9r,R9r,B9r,c4,Bve,P9r,I9r,VH,q9r,N9r,j9r,f4,Pve,D9r,G9r,XH,O9r,V9r,X9r,m4,Ive,z9r,Q9r,zH,W9r,H9r,U9r,g4,qve,J9r,Y9r,QH,K9r,Z9r,eMr,h4,Nve,oMr,rMr,WH,tMr,aMr,nMr,p4,jve,sMr,lMr,HH,iMr,dMr,cMr,u4,Dve,fMr,mMr,UH,gMr,hMr,pMr,_4,mqe,_c,b4,Gve,BL,uMr,Ove,_Mr,gqe,ir,PL,bMr,bc,vMr,JH,FMr,TMr,YH,MMr,EMr,CMr,IL,wMr,Vve,AMr,yMr,LMr,It,qL,xMr,Xve,$Mr,kMr,vc,SMr,zve,RMr,BMr,KH,PMr,IMr,qMr,v4,NMr,Ir,NL,jMr,Qve,DMr,GMr,fn,OMr,Wve,VMr,XMr,Hve,zMr,QMr,Uve,WMr,HMr,UMr,ce,F4,Jve,JMr,YMr,ZH,KMr,ZMr,e4r,T4,Yve,o4r,r4r,eU,t4r,a4r,n4r,M4,Kve,s4r,l4r,oU,i4r,d4r,c4r,E4,Zve,f4r,m4r,rU,g4r,h4r,p4r,C4,eFe,u4r,_4r,tU,b4r,v4r,F4r,w4,oFe,T4r,M4r,aU,E4r,C4r,w4r,A4,rFe,A4r,y4r,nU,L4r,x4r,$4r,y4,tFe,k4r,S4r,sU,R4r,B4r,P4r,L4,aFe,I4r,q4r,lU,N4r,j4r,D4r,x4,nFe,G4r,O4r,iU,V4r,X4r,z4r,$4,sFe,Q4r,W4r,dU,H4r,U4r,J4r,k4,lFe,Y4r,K4r,cU,Z4r,eEr,oEr,S4,iFe,rEr,tEr,fU,aEr,nEr,sEr,R4,dFe,lEr,iEr,mU,dEr,cEr,fEr,B4,cFe,mEr,gEr,gU,hEr,pEr,uEr,P4,fFe,_Er,bEr,hU,vEr,FEr,TEr,I4,mFe,MEr,EEr,pU,CEr,wEr,AEr,q4,gFe,yEr,LEr,uU,xEr,$Er,kEr,N4,hFe,SEr,REr,_U,BEr,PEr,IEr,j4,pFe,qEr,NEr,bU,jEr,DEr,GEr,D4,hqe,Fc,G4,uFe,jL,OEr,_Fe,VEr,pqe,dr,DL,XEr,Tc,zEr,vU,QEr,WEr,FU,HEr,UEr,JEr,GL,YEr,bFe,KEr,ZEr,e5r,qt,OL,o5r,vFe,r5r,t5r,Mc,a5r,FFe,n5r,s5r,TU,l5r,i5r,d5r,O4,c5r,qr,VL,f5r,TFe,m5r,g5r,mn,h5r,MFe,p5r,u5r,EFe,_5r,b5r,CFe,v5r,F5r,T5r,wFe,V4,AFe,M5r,E5r,MU,C5r,w5r,A5r,X4,uqe,Ec,z4,yFe,XL,y5r,LFe,L5r,_qe,cr,zL,x5r,Cc,$5r,EU,k5r,S5r,CU,R5r,B5r,P5r,QL,I5r,xFe,q5r,N5r,j5r,Nt,WL,D5r,$Fe,G5r,O5r,wc,V5r,kFe,X5r,z5r,wU,Q5r,W5r,H5r,Q4,U5r,Nr,HL,J5r,SFe,Y5r,K5r,gn,Z5r,RFe,eCr,oCr,BFe,rCr,tCr,PFe,aCr,nCr,sCr,IFe,W4,qFe,lCr,iCr,AU,dCr,cCr,fCr,H4,bqe,Ac,U4,NFe,UL,mCr,jFe,gCr,vqe,fr,JL,hCr,yc,pCr,yU,uCr,_Cr,LU,bCr,vCr,FCr,YL,TCr,DFe,MCr,ECr,CCr,jt,KL,wCr,GFe,ACr,yCr,Lc,LCr,OFe,xCr,$Cr,xU,kCr,SCr,RCr,J4,BCr,jr,ZL,PCr,VFe,ICr,qCr,hn,NCr,XFe,jCr,DCr,zFe,GCr,OCr,QFe,VCr,XCr,zCr,re,Y4,WFe,QCr,WCr,$U,HCr,UCr,JCr,K4,HFe,YCr,KCr,kU,ZCr,e3r,o3r,Z4,UFe,r3r,t3r,SU,a3r,n3r,s3r,eE,JFe,l3r,i3r,RU,d3r,c3r,f3r,oE,YFe,m3r,g3r,BU,h3r,p3r,u3r,rE,KFe,_3r,b3r,PU,v3r,F3r,T3r,tE,ZFe,M3r,E3r,IU,C3r,w3r,A3r,aE,e6e,y3r,L3r,qU,x3r,$3r,k3r,nE,o6e,S3r,R3r,NU,B3r,P3r,I3r,sE,r6e,q3r,N3r,jU,j3r,D3r,G3r,lE,t6e,O3r,V3r,DU,X3r,z3r,Q3r,iE,a6e,W3r,H3r,GU,U3r,J3r,Y3r,dE,n6e,K3r,Z3r,OU,ewr,owr,rwr,cE,s6e,twr,awr,VU,nwr,swr,lwr,fE,l6e,iwr,dwr,XU,cwr,fwr,mwr,mE,i6e,gwr,hwr,zU,pwr,uwr,_wr,gE,d6e,bwr,vwr,QU,Fwr,Twr,Mwr,hE,c6e,Ewr,Cwr,WU,wwr,Awr,ywr,pE,f6e,Lwr,xwr,HU,$wr,kwr,Swr,uE,m6e,Rwr,Bwr,UU,Pwr,Iwr,qwr,_E,g6e,Nwr,jwr,JU,Dwr,Gwr,Owr,bE,h6e,Vwr,Xwr,YU,zwr,Qwr,Wwr,vE,p6e,Hwr,Uwr,KU,Jwr,Ywr,Kwr,FE,u6e,Zwr,eAr,ZU,oAr,rAr,tAr,TE,_6e,aAr,nAr,eJ,sAr,lAr,iAr,ME,Fqe,xc,EE,b6e,ex,dAr,v6e,cAr,Tqe,mr,ox,fAr,$c,mAr,oJ,gAr,hAr,rJ,pAr,uAr,_Ar,rx,bAr,F6e,vAr,FAr,TAr,Dt,tx,MAr,T6e,EAr,CAr,kc,wAr,M6e,AAr,yAr,tJ,LAr,xAr,$Ar,CE,kAr,Dr,ax,SAr,E6e,RAr,BAr,pn,PAr,C6e,IAr,qAr,w6e,NAr,jAr,A6e,DAr,GAr,OAr,ke,wE,y6e,VAr,XAr,aJ,zAr,QAr,WAr,AE,L6e,HAr,UAr,nJ,JAr,YAr,KAr,yE,x6e,ZAr,e0r,sJ,o0r,r0r,t0r,LE,$6e,a0r,n0r,lJ,s0r,l0r,i0r,xE,k6e,d0r,c0r,iJ,f0r,m0r,g0r,$E,S6e,h0r,p0r,dJ,u0r,_0r,b0r,kE,R6e,v0r,F0r,cJ,T0r,M0r,E0r,SE,B6e,C0r,w0r,fJ,A0r,y0r,L0r,RE,P6e,x0r,$0r,mJ,k0r,S0r,R0r,BE,Mqe,Sc,PE,I6e,nx,B0r,q6e,P0r,Eqe,gr,sx,I0r,Rc,q0r,gJ,N0r,j0r,hJ,D0r,G0r,O0r,lx,V0r,N6e,X0r,z0r,Q0r,Gt,ix,W0r,j6e,H0r,U0r,Bc,J0r,D6e,Y0r,K0r,pJ,Z0r,eyr,oyr,IE,ryr,Gr,dx,tyr,G6e,ayr,nyr,un,syr,O6e,lyr,iyr,V6e,dyr,cyr,X6e,fyr,myr,gyr,Me,qE,z6e,hyr,pyr,uJ,uyr,_yr,byr,NE,Q6e,vyr,Fyr,_J,Tyr,Myr,Eyr,jE,W6e,Cyr,wyr,bJ,Ayr,yyr,Lyr,DE,H6e,xyr,$yr,vJ,kyr,Syr,Ryr,GE,U6e,Byr,Pyr,FJ,Iyr,qyr,Nyr,OE,J6e,jyr,Dyr,TJ,Gyr,Oyr,Vyr,VE,Y6e,Xyr,zyr,MJ,Qyr,Wyr,Hyr,XE,K6e,Uyr,Jyr,EJ,Yyr,Kyr,Zyr,zE,Z6e,eLr,oLr,CJ,rLr,tLr,aLr,QE,eTe,nLr,sLr,wJ,lLr,iLr,dLr,WE,oTe,cLr,fLr,AJ,mLr,gLr,hLr,HE,rTe,pLr,uLr,yJ,_Lr,bLr,vLr,UE,Cqe,Pc,JE,tTe,cx,FLr,aTe,TLr,wqe,hr,fx,MLr,Ic,ELr,LJ,CLr,wLr,xJ,ALr,yLr,LLr,mx,xLr,nTe,$Lr,kLr,SLr,Ot,gx,RLr,sTe,BLr,PLr,qc,ILr,lTe,qLr,NLr,$J,jLr,DLr,GLr,YE,OLr,Or,hx,VLr,iTe,XLr,zLr,_n,QLr,dTe,WLr,HLr,cTe,ULr,JLr,fTe,YLr,KLr,ZLr,Le,KE,mTe,exr,oxr,kJ,rxr,txr,axr,ZE,gTe,nxr,sxr,SJ,lxr,ixr,dxr,e5,hTe,cxr,fxr,RJ,mxr,gxr,hxr,o5,pTe,pxr,uxr,BJ,_xr,bxr,vxr,r5,uTe,Fxr,Txr,PJ,Mxr,Exr,Cxr,t5,_Te,wxr,Axr,IJ,yxr,Lxr,xxr,a5,bTe,$xr,kxr,qJ,Sxr,Rxr,Bxr,n5,vTe,Pxr,Ixr,NJ,qxr,Nxr,jxr,s5,FTe,Dxr,Gxr,jJ,Oxr,Vxr,Xxr,l5,TTe,zxr,Qxr,DJ,Wxr,Hxr,Uxr,i5,Aqe,Nc,d5,MTe,px,Jxr,ETe,Yxr,yqe,pr,ux,Kxr,jc,Zxr,GJ,e7r,o7r,OJ,r7r,t7r,a7r,_x,n7r,CTe,s7r,l7r,i7r,Vt,bx,d7r,wTe,c7r,f7r,Dc,m7r,ATe,g7r,h7r,VJ,p7r,u7r,_7r,c5,b7r,Vr,vx,v7r,yTe,F7r,T7r,bn,M7r,LTe,E7r,C7r,xTe,w7r,A7r,$Te,y7r,L7r,x7r,Se,f5,kTe,$7r,k7r,XJ,S7r,R7r,B7r,m5,STe,P7r,I7r,zJ,q7r,N7r,j7r,g5,RTe,D7r,G7r,QJ,O7r,V7r,X7r,h5,BTe,z7r,Q7r,WJ,W7r,H7r,U7r,p5,PTe,J7r,Y7r,HJ,K7r,Z7r,e$r,u5,ITe,o$r,r$r,UJ,t$r,a$r,n$r,_5,qTe,s$r,l$r,JJ,i$r,d$r,c$r,b5,NTe,f$r,m$r,YJ,g$r,h$r,p$r,v5,jTe,u$r,_$r,KJ,b$r,v$r,F$r,F5,Lqe,Gc,T5,DTe,Fx,T$r,GTe,M$r,xqe,ur,Tx,E$r,Oc,C$r,ZJ,w$r,A$r,eY,y$r,L$r,x$r,Mx,$$r,OTe,k$r,S$r,R$r,Xt,Ex,B$r,VTe,P$r,I$r,Vc,q$r,XTe,N$r,j$r,oY,D$r,G$r,O$r,M5,V$r,Xr,Cx,X$r,zTe,z$r,Q$r,vn,W$r,QTe,H$r,U$r,WTe,J$r,Y$r,HTe,K$r,Z$r,ekr,xe,E5,UTe,okr,rkr,rY,tkr,akr,nkr,C5,JTe,skr,lkr,tY,ikr,dkr,ckr,w5,YTe,fkr,mkr,aY,gkr,hkr,pkr,A5,KTe,ukr,_kr,nY,bkr,vkr,Fkr,y5,ZTe,Tkr,Mkr,sY,Ekr,Ckr,wkr,L5,e9e,Akr,ykr,lY,Lkr,xkr,$kr,x5,o9e,kkr,Skr,iY,Rkr,Bkr,Pkr,$5,r9e,Ikr,qkr,dY,Nkr,jkr,Dkr,k5,t9e,Gkr,Okr,cY,Vkr,Xkr,zkr,S5,a9e,Qkr,Wkr,fY,Hkr,Ukr,Jkr,R5,$qe,Xc,B5,n9e,wx,Ykr,s9e,Kkr,kqe,_r,Ax,Zkr,zc,eSr,mY,oSr,rSr,gY,tSr,aSr,nSr,yx,sSr,l9e,lSr,iSr,dSr,zt,Lx,cSr,i9e,fSr,mSr,Qc,gSr,d9e,hSr,pSr,hY,uSr,_Sr,bSr,P5,vSr,zr,xx,FSr,c9e,TSr,MSr,Fn,ESr,f9e,CSr,wSr,m9e,ASr,ySr,g9e,LSr,xSr,$Sr,$e,I5,h9e,kSr,SSr,pY,RSr,BSr,PSr,q5,p9e,ISr,qSr,uY,NSr,jSr,DSr,N5,u9e,GSr,OSr,_Y,VSr,XSr,zSr,j5,_9e,QSr,WSr,bY,HSr,USr,JSr,D5,b9e,YSr,KSr,vY,ZSr,eRr,oRr,G5,v9e,rRr,tRr,FY,aRr,nRr,sRr,O5,F9e,lRr,iRr,TY,dRr,cRr,fRr,V5,T9e,mRr,gRr,MY,hRr,pRr,uRr,X5,M9e,_Rr,bRr,EY,vRr,FRr,TRr,z5,E9e,MRr,ERr,CY,CRr,wRr,ARr,Q5,Sqe,Wc,W5,C9e,$x,yRr,w9e,LRr,Rqe,br,kx,xRr,Hc,$Rr,wY,kRr,SRr,AY,RRr,BRr,PRr,Sx,IRr,A9e,qRr,NRr,jRr,Qt,Rx,DRr,y9e,GRr,ORr,Uc,VRr,L9e,XRr,zRr,yY,QRr,WRr,HRr,H5,URr,Qr,Bx,JRr,x9e,YRr,KRr,Tn,ZRr,$9e,eBr,oBr,k9e,rBr,tBr,S9e,aBr,nBr,sBr,De,U5,R9e,lBr,iBr,LY,dBr,cBr,fBr,J5,B9e,mBr,gBr,xY,hBr,pBr,uBr,Y5,P9e,_Br,bBr,$Y,vBr,FBr,TBr,K5,I9e,MBr,EBr,kY,CBr,wBr,ABr,Z5,q9e,yBr,LBr,SY,xBr,$Br,kBr,eC,N9e,SBr,RBr,RY,BBr,PBr,IBr,oC,j9e,qBr,NBr,BY,jBr,DBr,GBr,rC,D9e,OBr,VBr,PY,XBr,zBr,QBr,tC,Bqe,Jc,aC,G9e,Px,WBr,O9e,HBr,Pqe,vr,Ix,UBr,Yc,JBr,IY,YBr,KBr,qY,ZBr,ePr,oPr,qx,rPr,V9e,tPr,aPr,nPr,Wt,Nx,sPr,X9e,lPr,iPr,Kc,dPr,z9e,cPr,fPr,NY,mPr,gPr,hPr,nC,pPr,Wr,jx,uPr,Q9e,_Pr,bPr,Mn,vPr,W9e,FPr,TPr,H9e,MPr,EPr,U9e,CPr,wPr,APr,Ge,sC,J9e,yPr,LPr,jY,xPr,$Pr,kPr,lC,Y9e,SPr,RPr,DY,BPr,PPr,IPr,iC,K9e,qPr,NPr,GY,jPr,DPr,GPr,dC,Z9e,OPr,VPr,OY,XPr,zPr,QPr,cC,eMe,WPr,HPr,VY,UPr,JPr,YPr,fC,oMe,KPr,ZPr,XY,eIr,oIr,rIr,mC,rMe,tIr,aIr,zY,nIr,sIr,lIr,gC,tMe,iIr,dIr,QY,cIr,fIr,mIr,hC,Iqe,Zc,pC,aMe,Dx,gIr,nMe,hIr,qqe,Fr,Gx,pIr,ef,uIr,WY,_Ir,bIr,HY,vIr,FIr,TIr,Ox,MIr,sMe,EIr,CIr,wIr,Ht,Vx,AIr,lMe,yIr,LIr,of,xIr,iMe,$Ir,kIr,UY,SIr,RIr,BIr,uC,PIr,Hr,Xx,IIr,dMe,qIr,NIr,En,jIr,cMe,DIr,GIr,fMe,OIr,VIr,mMe,XIr,zIr,QIr,gMe,_C,hMe,WIr,HIr,JY,UIr,JIr,YIr,bC,Nqe,rf,vC,pMe,zx,KIr,uMe,ZIr,jqe,Tr,Qx,eqr,tf,oqr,YY,rqr,tqr,KY,aqr,nqr,sqr,Wx,lqr,_Me,iqr,dqr,cqr,Ut,Hx,fqr,bMe,mqr,gqr,af,hqr,vMe,pqr,uqr,ZY,_qr,bqr,vqr,FC,Fqr,Ur,Ux,Tqr,FMe,Mqr,Eqr,Cn,Cqr,TMe,wqr,Aqr,MMe,yqr,Lqr,EMe,xqr,$qr,kqr,Jx,TC,CMe,Sqr,Rqr,eK,Bqr,Pqr,Iqr,MC,wMe,qqr,Nqr,oK,jqr,Dqr,Gqr,EC,Dqe,nf,CC,AMe,Yx,Oqr,yMe,Vqr,Gqe,Mr,Kx,Xqr,sf,zqr,rK,Qqr,Wqr,tK,Hqr,Uqr,Jqr,Zx,Yqr,LMe,Kqr,Zqr,eNr,Jt,e7,oNr,xMe,rNr,tNr,lf,aNr,$Me,nNr,sNr,aK,lNr,iNr,dNr,wC,cNr,Jr,o7,fNr,kMe,mNr,gNr,wn,hNr,SMe,pNr,uNr,RMe,_Nr,bNr,BMe,vNr,FNr,TNr,PMe,AC,IMe,MNr,ENr,nK,CNr,wNr,ANr,yC,Oqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Yw=new ee({}),Kw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new yNr({props:{warning:!0,$$slots:{default:[oAt]},$$scope:{ctx:A}}}),Zw=new ee({}),eA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L570"}}),tA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L593"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),aA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L716"}}),nA=new ee({}),sA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L387"}}),dA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L401"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),cA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L597"}}),fA=new ee({}),mA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),pA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),Mh=new yNr({props:{$$slots:{default:[aAt]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),uA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L327"}}),_A=new ee({}),bA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L86"}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L100"}}),Gh=new yNr({props:{$$slots:{default:[sAt]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),MA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L253"}}),EA=new ee({}),CA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L719"}}),AA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),LA=new ee({}),xA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L726"}}),kA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),RA=new ee({}),BA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L741"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),NA=new ee({}),jA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L748"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L755"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L764"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),b8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),ZA=new ee({}),e0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L798"}}),r0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),t0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),a0=new ee({}),n0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L805"}}),l0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),i0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),e2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),d0=new ee({}),c0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L791"}}),m0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),r2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),g0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),h0=new ee({}),p0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L773"}}),_0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),b0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),v0=new ee({}),F0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L780"}}),M0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),E0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),C0=new ee({}),w0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L814"}}),y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),x0=new ee({}),$0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L853"}}),S0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),R0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),B0=new ee({}),P0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L860"}}),q0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),N0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),j0=new ee({}),D0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L883"}}),O0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),V0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),X0=new ee({}),z0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L867"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),H0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),U0=new ee({}),J0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L874"}}),K0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),Z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L892"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L899"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L846"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L821"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L828"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),p6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L837"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),F6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Py=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),M6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[e0t]},$$scope:{ctx:A}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[o0t]},$$scope:{ctx:A}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[r0t]},$$scope:{ctx:A}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[t0t]},$$scope:{ctx:A}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[a0t]},$$scope:{ctx:A}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),o9=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[n0t]},$$scope:{ctx:A}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),t9=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[s0t]},$$scope:{ctx:A}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),i9=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[l0t]},$$scope:{ctx:A}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),oL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),c9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[i0t]},$$scope:{ctx:A}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),k9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[d0t]},$$scope:{ctx:A}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),R9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[c0t]},$$scope:{ctx:A}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),X9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[f0t]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Q9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[m0t]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[g0t]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[h0t]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[p0t]},$$scope:{ctx:A}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[u0t]},$$scope:{ctx:A}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_0t]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[b0t]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[v0t]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[F0t]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[T0t]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[M0t]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[E0t]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[C0t]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[w0t]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[A0t]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[y0t]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[L0t]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[x0t]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$0t]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[k0t]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[S0t]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[R0t]},$$scope:{ctx:A}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[B0t]},$$scope:{ctx:A}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P0t]},$$scope:{ctx:A}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[I0t]},$$scope:{ctx:A}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[q0t]},$$scope:{ctx:A}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[N0t]},$$scope:{ctx:A}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[j0t]},$$scope:{ctx:A}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[D0t]},$$scope:{ctx:A}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[G0t]},$$scope:{ctx:A}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[O0t]},$$scope:{ctx:A}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[V0t]},$$scope:{ctx:A}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[X0t]},$$scope:{ctx:A}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:A}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Q0t]},$$scope:{ctx:A}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:A}}}),zx=new ee({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[H0t]},$$scope:{ctx:A}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:A}}}),Yx=new ee({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),e7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[J0t]},$$scope:{ctx:A}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),mf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Ww=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),yn=a("a"),Hw=o("AutoConfig"),Ln=o(", "),xn=a("a"),Uw=o("AutoModel"),mi=o(`, and
`),$n=a("a"),Jw=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),h$=o("will create a model that is an instance of "),hi=a("a"),p$=o("BertModel"),u$=o("."),Eo=l(),Ea=a("p"),_$=o("There is one class of "),pf=a("code"),b$=o("AutoModel"),Jje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jPe=l(),pi=a("h2"),uf=a("a"),KZ=a("span"),F(Yw.$$.fragment),Yje=l(),ZZ=a("span"),Kje=o("Extending the Auto Classes"),DPe=l(),kn=a("p"),Zje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=a("code"),eDe=o("NewModel"),oDe=o(", make sure you have a "),oee=a("code"),rDe=o("NewModelConfig"),tDe=o(` then you can add those to the auto
classes like this:`),GPe=l(),F(Kw.$$.fragment),OPe=l(),v$=a("p"),aDe=o("You will then be able to use the auto classes like you would usually do!"),VPe=l(),F(_f.$$.fragment),XPe=l(),ui=a("h2"),bf=a("a"),ree=a("span"),F(Zw.$$.fragment),nDe=l(),tee=a("span"),sDe=o("AutoConfig"),zPe=l(),Co=a("div"),F(eA.$$.fragment),lDe=l(),oA=a("p"),iDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=a("a"),dDe=o("from_pretrained()"),cDe=o(" class method."),fDe=l(),rA=a("p"),mDe=o("This class cannot be instantiated directly using "),aee=a("code"),gDe=o("__init__()"),hDe=o(" (throws an error)."),pDe=l(),Er=a("div"),F(tA.$$.fragment),uDe=l(),nee=a("p"),_De=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bDe=l(),_i=a("p"),vDe=o("The configuration class to instantiate is selected based on the "),see=a("code"),FDe=o("model_type"),TDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=a("code"),MDe=o("pretrained_model_name_or_path"),EDe=o(":"),CDe=l(),y=a("ul"),vf=a("li"),iee=a("strong"),wDe=o("albert"),ADe=o(" \u2014 "),T$=a("a"),yDe=o("AlbertConfig"),LDe=o(" (ALBERT model)"),xDe=l(),Ff=a("li"),dee=a("strong"),$De=o("bart"),kDe=o(" \u2014 "),M$=a("a"),SDe=o("BartConfig"),RDe=o(" (BART model)"),BDe=l(),Tf=a("li"),cee=a("strong"),PDe=o("beit"),IDe=o(" \u2014 "),E$=a("a"),qDe=o("BeitConfig"),NDe=o(" (BEiT model)"),jDe=l(),Mf=a("li"),fee=a("strong"),DDe=o("bert"),GDe=o(" \u2014 "),C$=a("a"),ODe=o("BertConfig"),VDe=o(" (BERT model)"),XDe=l(),Ef=a("li"),mee=a("strong"),zDe=o("bert-generation"),QDe=o(" \u2014 "),w$=a("a"),WDe=o("BertGenerationConfig"),HDe=o(" (Bert Generation model)"),UDe=l(),Cf=a("li"),gee=a("strong"),JDe=o("big_bird"),YDe=o(" \u2014 "),A$=a("a"),KDe=o("BigBirdConfig"),ZDe=o(" (BigBird model)"),eGe=l(),wf=a("li"),hee=a("strong"),oGe=o("bigbird_pegasus"),rGe=o(" \u2014 "),y$=a("a"),tGe=o("BigBirdPegasusConfig"),aGe=o(" (BigBirdPegasus model)"),nGe=l(),Af=a("li"),pee=a("strong"),sGe=o("blenderbot"),lGe=o(" \u2014 "),L$=a("a"),iGe=o("BlenderbotConfig"),dGe=o(" (Blenderbot model)"),cGe=l(),yf=a("li"),uee=a("strong"),fGe=o("blenderbot-small"),mGe=o(" \u2014 "),x$=a("a"),gGe=o("BlenderbotSmallConfig"),hGe=o(" (BlenderbotSmall model)"),pGe=l(),Lf=a("li"),_ee=a("strong"),uGe=o("camembert"),_Ge=o(" \u2014 "),$$=a("a"),bGe=o("CamembertConfig"),vGe=o(" (CamemBERT model)"),FGe=l(),xf=a("li"),bee=a("strong"),TGe=o("canine"),MGe=o(" \u2014 "),k$=a("a"),EGe=o("CanineConfig"),CGe=o(" (Canine model)"),wGe=l(),$f=a("li"),vee=a("strong"),AGe=o("clip"),yGe=o(" \u2014 "),S$=a("a"),LGe=o("CLIPConfig"),xGe=o(" (CLIP model)"),$Ge=l(),kf=a("li"),Fee=a("strong"),kGe=o("convbert"),SGe=o(" \u2014 "),R$=a("a"),RGe=o("ConvBertConfig"),BGe=o(" (ConvBERT model)"),PGe=l(),Sf=a("li"),Tee=a("strong"),IGe=o("convnext"),qGe=o(" \u2014 "),B$=a("a"),NGe=o("ConvNextConfig"),jGe=o(" (ConvNext model)"),DGe=l(),Rf=a("li"),Mee=a("strong"),GGe=o("ctrl"),OGe=o(" \u2014 "),P$=a("a"),VGe=o("CTRLConfig"),XGe=o(" (CTRL model)"),zGe=l(),Bf=a("li"),Eee=a("strong"),QGe=o("data2vec-audio"),WGe=o(" \u2014 "),I$=a("a"),HGe=o("Data2VecAudioConfig"),UGe=o(" (Data2VecAudio model)"),JGe=l(),Pf=a("li"),Cee=a("strong"),YGe=o("data2vec-text"),KGe=o(" \u2014 "),q$=a("a"),ZGe=o("Data2VecTextConfig"),eOe=o(" (Data2VecText model)"),oOe=l(),If=a("li"),wee=a("strong"),rOe=o("data2vec-vision"),tOe=o(" \u2014 "),N$=a("a"),aOe=o("Data2VecVisionConfig"),nOe=o(" (Data2VecVision model)"),sOe=l(),qf=a("li"),Aee=a("strong"),lOe=o("deberta"),iOe=o(" \u2014 "),j$=a("a"),dOe=o("DebertaConfig"),cOe=o(" (DeBERTa model)"),fOe=l(),Nf=a("li"),yee=a("strong"),mOe=o("deberta-v2"),gOe=o(" \u2014 "),D$=a("a"),hOe=o("DebertaV2Config"),pOe=o(" (DeBERTa-v2 model)"),uOe=l(),jf=a("li"),Lee=a("strong"),_Oe=o("decision_transformer"),bOe=o(" \u2014 "),G$=a("a"),vOe=o("DecisionTransformerConfig"),FOe=o(" (Decision Transformer model)"),TOe=l(),Df=a("li"),xee=a("strong"),MOe=o("deit"),EOe=o(" \u2014 "),O$=a("a"),COe=o("DeiTConfig"),wOe=o(" (DeiT model)"),AOe=l(),Gf=a("li"),$ee=a("strong"),yOe=o("detr"),LOe=o(" \u2014 "),V$=a("a"),xOe=o("DetrConfig"),$Oe=o(" (DETR model)"),kOe=l(),Of=a("li"),kee=a("strong"),SOe=o("distilbert"),ROe=o(" \u2014 "),X$=a("a"),BOe=o("DistilBertConfig"),POe=o(" (DistilBERT model)"),IOe=l(),Vf=a("li"),See=a("strong"),qOe=o("dpr"),NOe=o(" \u2014 "),z$=a("a"),jOe=o("DPRConfig"),DOe=o(" (DPR model)"),GOe=l(),Xf=a("li"),Ree=a("strong"),OOe=o("dpt"),VOe=o(" \u2014 "),Q$=a("a"),XOe=o("DPTConfig"),zOe=o(" (DPT model)"),QOe=l(),zf=a("li"),Bee=a("strong"),WOe=o("electra"),HOe=o(" \u2014 "),W$=a("a"),UOe=o("ElectraConfig"),JOe=o(" (ELECTRA model)"),YOe=l(),Qf=a("li"),Pee=a("strong"),KOe=o("encoder-decoder"),ZOe=o(" \u2014 "),H$=a("a"),eVe=o("EncoderDecoderConfig"),oVe=o(" (Encoder decoder model)"),rVe=l(),Wf=a("li"),Iee=a("strong"),tVe=o("flaubert"),aVe=o(" \u2014 "),U$=a("a"),nVe=o("FlaubertConfig"),sVe=o(" (FlauBERT model)"),lVe=l(),Hf=a("li"),qee=a("strong"),iVe=o("flava"),dVe=o(" \u2014 "),J$=a("a"),cVe=o("FlavaConfig"),fVe=o(" (Flava model)"),mVe=l(),Uf=a("li"),Nee=a("strong"),gVe=o("fnet"),hVe=o(" \u2014 "),Y$=a("a"),pVe=o("FNetConfig"),uVe=o(" (FNet model)"),_Ve=l(),Jf=a("li"),jee=a("strong"),bVe=o("fsmt"),vVe=o(" \u2014 "),K$=a("a"),FVe=o("FSMTConfig"),TVe=o(" (FairSeq Machine-Translation model)"),MVe=l(),Yf=a("li"),Dee=a("strong"),EVe=o("funnel"),CVe=o(" \u2014 "),Z$=a("a"),wVe=o("FunnelConfig"),AVe=o(" (Funnel Transformer model)"),yVe=l(),Kf=a("li"),Gee=a("strong"),LVe=o("glpn"),xVe=o(" \u2014 "),ek=a("a"),$Ve=o("GLPNConfig"),kVe=o(" (GLPN model)"),SVe=l(),Zf=a("li"),Oee=a("strong"),RVe=o("gpt2"),BVe=o(" \u2014 "),ok=a("a"),PVe=o("GPT2Config"),IVe=o(" (OpenAI GPT-2 model)"),qVe=l(),em=a("li"),Vee=a("strong"),NVe=o("gpt_neo"),jVe=o(" \u2014 "),rk=a("a"),DVe=o("GPTNeoConfig"),GVe=o(" (GPT Neo model)"),OVe=l(),om=a("li"),Xee=a("strong"),VVe=o("gptj"),XVe=o(" \u2014 "),tk=a("a"),zVe=o("GPTJConfig"),QVe=o(" (GPT-J model)"),WVe=l(),rm=a("li"),zee=a("strong"),HVe=o("hubert"),UVe=o(" \u2014 "),ak=a("a"),JVe=o("HubertConfig"),YVe=o(" (Hubert model)"),KVe=l(),tm=a("li"),Qee=a("strong"),ZVe=o("ibert"),eXe=o(" \u2014 "),nk=a("a"),oXe=o("IBertConfig"),rXe=o(" (I-BERT model)"),tXe=l(),am=a("li"),Wee=a("strong"),aXe=o("imagegpt"),nXe=o(" \u2014 "),sk=a("a"),sXe=o("ImageGPTConfig"),lXe=o(" (ImageGPT model)"),iXe=l(),nm=a("li"),Hee=a("strong"),dXe=o("layoutlm"),cXe=o(" \u2014 "),lk=a("a"),fXe=o("LayoutLMConfig"),mXe=o(" (LayoutLM model)"),gXe=l(),sm=a("li"),Uee=a("strong"),hXe=o("layoutlmv2"),pXe=o(" \u2014 "),ik=a("a"),uXe=o("LayoutLMv2Config"),_Xe=o(" (LayoutLMv2 model)"),bXe=l(),lm=a("li"),Jee=a("strong"),vXe=o("led"),FXe=o(" \u2014 "),dk=a("a"),TXe=o("LEDConfig"),MXe=o(" (LED model)"),EXe=l(),im=a("li"),Yee=a("strong"),CXe=o("longformer"),wXe=o(" \u2014 "),ck=a("a"),AXe=o("LongformerConfig"),yXe=o(" (Longformer model)"),LXe=l(),dm=a("li"),Kee=a("strong"),xXe=o("luke"),$Xe=o(" \u2014 "),fk=a("a"),kXe=o("LukeConfig"),SXe=o(" (LUKE model)"),RXe=l(),cm=a("li"),Zee=a("strong"),BXe=o("lxmert"),PXe=o(" \u2014 "),mk=a("a"),IXe=o("LxmertConfig"),qXe=o(" (LXMERT model)"),NXe=l(),fm=a("li"),eoe=a("strong"),jXe=o("m2m_100"),DXe=o(" \u2014 "),gk=a("a"),GXe=o("M2M100Config"),OXe=o(" (M2M100 model)"),VXe=l(),mm=a("li"),ooe=a("strong"),XXe=o("marian"),zXe=o(" \u2014 "),hk=a("a"),QXe=o("MarianConfig"),WXe=o(" (Marian model)"),HXe=l(),gm=a("li"),roe=a("strong"),UXe=o("maskformer"),JXe=o(" \u2014 "),pk=a("a"),YXe=o("MaskFormerConfig"),KXe=o(" (MaskFormer model)"),ZXe=l(),hm=a("li"),toe=a("strong"),eze=o("mbart"),oze=o(" \u2014 "),uk=a("a"),rze=o("MBartConfig"),tze=o(" (mBART model)"),aze=l(),pm=a("li"),aoe=a("strong"),nze=o("megatron-bert"),sze=o(" \u2014 "),_k=a("a"),lze=o("MegatronBertConfig"),ize=o(" (MegatronBert model)"),dze=l(),um=a("li"),noe=a("strong"),cze=o("mobilebert"),fze=o(" \u2014 "),bk=a("a"),mze=o("MobileBertConfig"),gze=o(" (MobileBERT model)"),hze=l(),_m=a("li"),soe=a("strong"),pze=o("mpnet"),uze=o(" \u2014 "),vk=a("a"),_ze=o("MPNetConfig"),bze=o(" (MPNet model)"),vze=l(),bm=a("li"),loe=a("strong"),Fze=o("mt5"),Tze=o(" \u2014 "),Fk=a("a"),Mze=o("MT5Config"),Eze=o(" (mT5 model)"),Cze=l(),vm=a("li"),ioe=a("strong"),wze=o("nystromformer"),Aze=o(" \u2014 "),Tk=a("a"),yze=o("NystromformerConfig"),Lze=o(" (Nystromformer model)"),xze=l(),Fm=a("li"),doe=a("strong"),$ze=o("openai-gpt"),kze=o(" \u2014 "),Mk=a("a"),Sze=o("OpenAIGPTConfig"),Rze=o(" (OpenAI GPT model)"),Bze=l(),Tm=a("li"),coe=a("strong"),Pze=o("opt"),Ize=o(" \u2014 "),Ek=a("a"),qze=o("OPTConfig"),Nze=o(" (OPT model)"),jze=l(),Mm=a("li"),foe=a("strong"),Dze=o("pegasus"),Gze=o(" \u2014 "),Ck=a("a"),Oze=o("PegasusConfig"),Vze=o(" (Pegasus model)"),Xze=l(),Em=a("li"),moe=a("strong"),zze=o("perceiver"),Qze=o(" \u2014 "),wk=a("a"),Wze=o("PerceiverConfig"),Hze=o(" (Perceiver model)"),Uze=l(),Cm=a("li"),goe=a("strong"),Jze=o("plbart"),Yze=o(" \u2014 "),Ak=a("a"),Kze=o("PLBartConfig"),Zze=o(" (PLBart model)"),eQe=l(),wm=a("li"),hoe=a("strong"),oQe=o("poolformer"),rQe=o(" \u2014 "),yk=a("a"),tQe=o("PoolFormerConfig"),aQe=o(" (PoolFormer model)"),nQe=l(),Am=a("li"),poe=a("strong"),sQe=o("prophetnet"),lQe=o(" \u2014 "),Lk=a("a"),iQe=o("ProphetNetConfig"),dQe=o(" (ProphetNet model)"),cQe=l(),ym=a("li"),uoe=a("strong"),fQe=o("qdqbert"),mQe=o(" \u2014 "),xk=a("a"),gQe=o("QDQBertConfig"),hQe=o(" (QDQBert model)"),pQe=l(),Lm=a("li"),_oe=a("strong"),uQe=o("rag"),_Qe=o(" \u2014 "),$k=a("a"),bQe=o("RagConfig"),vQe=o(" (RAG model)"),FQe=l(),xm=a("li"),boe=a("strong"),TQe=o("realm"),MQe=o(" \u2014 "),kk=a("a"),EQe=o("RealmConfig"),CQe=o(" (Realm model)"),wQe=l(),$m=a("li"),voe=a("strong"),AQe=o("reformer"),yQe=o(" \u2014 "),Sk=a("a"),LQe=o("ReformerConfig"),xQe=o(" (Reformer model)"),$Qe=l(),km=a("li"),Foe=a("strong"),kQe=o("regnet"),SQe=o(" \u2014 "),Rk=a("a"),RQe=o("RegNetConfig"),BQe=o(" (RegNet model)"),PQe=l(),Sm=a("li"),Toe=a("strong"),IQe=o("rembert"),qQe=o(" \u2014 "),Bk=a("a"),NQe=o("RemBertConfig"),jQe=o(" (RemBERT model)"),DQe=l(),Rm=a("li"),Moe=a("strong"),GQe=o("resnet"),OQe=o(" \u2014 "),Pk=a("a"),VQe=o("ResNetConfig"),XQe=o(" (ResNet model)"),zQe=l(),Bm=a("li"),Eoe=a("strong"),QQe=o("retribert"),WQe=o(" \u2014 "),Ik=a("a"),HQe=o("RetriBertConfig"),UQe=o(" (RetriBERT model)"),JQe=l(),Pm=a("li"),Coe=a("strong"),YQe=o("roberta"),KQe=o(" \u2014 "),qk=a("a"),ZQe=o("RobertaConfig"),eWe=o(" (RoBERTa model)"),oWe=l(),Im=a("li"),woe=a("strong"),rWe=o("roformer"),tWe=o(" \u2014 "),Nk=a("a"),aWe=o("RoFormerConfig"),nWe=o(" (RoFormer model)"),sWe=l(),qm=a("li"),Aoe=a("strong"),lWe=o("segformer"),iWe=o(" \u2014 "),jk=a("a"),dWe=o("SegformerConfig"),cWe=o(" (SegFormer model)"),fWe=l(),Nm=a("li"),yoe=a("strong"),mWe=o("sew"),gWe=o(" \u2014 "),Dk=a("a"),hWe=o("SEWConfig"),pWe=o(" (SEW model)"),uWe=l(),jm=a("li"),Loe=a("strong"),_We=o("sew-d"),bWe=o(" \u2014 "),Gk=a("a"),vWe=o("SEWDConfig"),FWe=o(" (SEW-D model)"),TWe=l(),Dm=a("li"),xoe=a("strong"),MWe=o("speech-encoder-decoder"),EWe=o(" \u2014 "),Ok=a("a"),CWe=o("SpeechEncoderDecoderConfig"),wWe=o(" (Speech Encoder decoder model)"),AWe=l(),Gm=a("li"),$oe=a("strong"),yWe=o("speech_to_text"),LWe=o(" \u2014 "),Vk=a("a"),xWe=o("Speech2TextConfig"),$We=o(" (Speech2Text model)"),kWe=l(),Om=a("li"),koe=a("strong"),SWe=o("speech_to_text_2"),RWe=o(" \u2014 "),Xk=a("a"),BWe=o("Speech2Text2Config"),PWe=o(" (Speech2Text2 model)"),IWe=l(),Vm=a("li"),Soe=a("strong"),qWe=o("splinter"),NWe=o(" \u2014 "),zk=a("a"),jWe=o("SplinterConfig"),DWe=o(" (Splinter model)"),GWe=l(),Xm=a("li"),Roe=a("strong"),OWe=o("squeezebert"),VWe=o(" \u2014 "),Qk=a("a"),XWe=o("SqueezeBertConfig"),zWe=o(" (SqueezeBERT model)"),QWe=l(),zm=a("li"),Boe=a("strong"),WWe=o("swin"),HWe=o(" \u2014 "),Wk=a("a"),UWe=o("SwinConfig"),JWe=o(" (Swin model)"),YWe=l(),Qm=a("li"),Poe=a("strong"),KWe=o("t5"),ZWe=o(" \u2014 "),Hk=a("a"),eHe=o("T5Config"),oHe=o(" (T5 model)"),rHe=l(),Wm=a("li"),Ioe=a("strong"),tHe=o("tapas"),aHe=o(" \u2014 "),Uk=a("a"),nHe=o("TapasConfig"),sHe=o(" (TAPAS model)"),lHe=l(),Hm=a("li"),qoe=a("strong"),iHe=o("transfo-xl"),dHe=o(" \u2014 "),Jk=a("a"),cHe=o("TransfoXLConfig"),fHe=o(" (Transformer-XL model)"),mHe=l(),Um=a("li"),Noe=a("strong"),gHe=o("trocr"),hHe=o(" \u2014 "),Yk=a("a"),pHe=o("TrOCRConfig"),uHe=o(" (TrOCR model)"),_He=l(),Jm=a("li"),joe=a("strong"),bHe=o("unispeech"),vHe=o(" \u2014 "),Kk=a("a"),FHe=o("UniSpeechConfig"),THe=o(" (UniSpeech model)"),MHe=l(),Ym=a("li"),Doe=a("strong"),EHe=o("unispeech-sat"),CHe=o(" \u2014 "),Zk=a("a"),wHe=o("UniSpeechSatConfig"),AHe=o(" (UniSpeechSat model)"),yHe=l(),Km=a("li"),Goe=a("strong"),LHe=o("van"),xHe=o(" \u2014 "),eS=a("a"),$He=o("VanConfig"),kHe=o(" (VAN model)"),SHe=l(),Zm=a("li"),Ooe=a("strong"),RHe=o("vilt"),BHe=o(" \u2014 "),oS=a("a"),PHe=o("ViltConfig"),IHe=o(" (ViLT model)"),qHe=l(),eg=a("li"),Voe=a("strong"),NHe=o("vision-encoder-decoder"),jHe=o(" \u2014 "),rS=a("a"),DHe=o("VisionEncoderDecoderConfig"),GHe=o(" (Vision Encoder decoder model)"),OHe=l(),og=a("li"),Xoe=a("strong"),VHe=o("vision-text-dual-encoder"),XHe=o(" \u2014 "),tS=a("a"),zHe=o("VisionTextDualEncoderConfig"),QHe=o(" (VisionTextDualEncoder model)"),WHe=l(),rg=a("li"),zoe=a("strong"),HHe=o("visual_bert"),UHe=o(" \u2014 "),aS=a("a"),JHe=o("VisualBertConfig"),YHe=o(" (VisualBert model)"),KHe=l(),tg=a("li"),Qoe=a("strong"),ZHe=o("vit"),eUe=o(" \u2014 "),nS=a("a"),oUe=o("ViTConfig"),rUe=o(" (ViT model)"),tUe=l(),ag=a("li"),Woe=a("strong"),aUe=o("vit_mae"),nUe=o(" \u2014 "),sS=a("a"),sUe=o("ViTMAEConfig"),lUe=o(" (ViTMAE model)"),iUe=l(),ng=a("li"),Hoe=a("strong"),dUe=o("wav2vec2"),cUe=o(" \u2014 "),lS=a("a"),fUe=o("Wav2Vec2Config"),mUe=o(" (Wav2Vec2 model)"),gUe=l(),sg=a("li"),Uoe=a("strong"),hUe=o("wavlm"),pUe=o(" \u2014 "),iS=a("a"),uUe=o("WavLMConfig"),_Ue=o(" (WavLM model)"),bUe=l(),lg=a("li"),Joe=a("strong"),vUe=o("xglm"),FUe=o(" \u2014 "),dS=a("a"),TUe=o("XGLMConfig"),MUe=o(" (XGLM model)"),EUe=l(),ig=a("li"),Yoe=a("strong"),CUe=o("xlm"),wUe=o(" \u2014 "),cS=a("a"),AUe=o("XLMConfig"),yUe=o(" (XLM model)"),LUe=l(),dg=a("li"),Koe=a("strong"),xUe=o("xlm-prophetnet"),$Ue=o(" \u2014 "),fS=a("a"),kUe=o("XLMProphetNetConfig"),SUe=o(" (XLMProphetNet model)"),RUe=l(),cg=a("li"),Zoe=a("strong"),BUe=o("xlm-roberta"),PUe=o(" \u2014 "),mS=a("a"),IUe=o("XLMRobertaConfig"),qUe=o(" (XLM-RoBERTa model)"),NUe=l(),fg=a("li"),ere=a("strong"),jUe=o("xlm-roberta-xl"),DUe=o(" \u2014 "),gS=a("a"),GUe=o("XLMRobertaXLConfig"),OUe=o(" (XLM-RoBERTa-XL model)"),VUe=l(),mg=a("li"),ore=a("strong"),XUe=o("xlnet"),zUe=o(" \u2014 "),hS=a("a"),QUe=o("XLNetConfig"),WUe=o(" (XLNet model)"),HUe=l(),gg=a("li"),rre=a("strong"),UUe=o("yolos"),JUe=o(" \u2014 "),pS=a("a"),YUe=o("YolosConfig"),KUe=o(" (YOLOS model)"),ZUe=l(),hg=a("li"),tre=a("strong"),eJe=o("yoso"),oJe=o(" \u2014 "),uS=a("a"),rJe=o("YosoConfig"),tJe=o(" (YOSO model)"),aJe=l(),F(pg.$$.fragment),nJe=l(),ug=a("div"),F(aA.$$.fragment),sJe=l(),are=a("p"),lJe=o("Register a new configuration for this class."),QPe=l(),bi=a("h2"),_g=a("a"),nre=a("span"),F(nA.$$.fragment),iJe=l(),sre=a("span"),dJe=o("AutoTokenizer"),WPe=l(),wo=a("div"),F(sA.$$.fragment),cJe=l(),lA=a("p"),fJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=a("a"),mJe=o("AutoTokenizer.from_pretrained()"),gJe=o(" class method."),hJe=l(),iA=a("p"),pJe=o("This class cannot be instantiated directly using "),lre=a("code"),uJe=o("__init__()"),_Je=o(" (throws an error)."),bJe=l(),Cr=a("div"),F(dA.$$.fragment),vJe=l(),ire=a("p"),FJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TJe=l(),Ca=a("p"),MJe=o("The tokenizer class to instantiate is selected based on the "),dre=a("code"),EJe=o("model_type"),CJe=o(` property of the config object (either
passed as an argument or loaded from `),cre=a("code"),wJe=o("pretrained_model_name_or_path"),AJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fre=a("code"),yJe=o("pretrained_model_name_or_path"),LJe=o(":"),xJe=l(),k=a("ul"),Sn=a("li"),mre=a("strong"),$Je=o("albert"),kJe=o(" \u2014 "),bS=a("a"),SJe=o("AlbertTokenizer"),RJe=o(" or "),vS=a("a"),BJe=o("AlbertTokenizerFast"),PJe=o(" (ALBERT model)"),IJe=l(),Rn=a("li"),gre=a("strong"),qJe=o("bart"),NJe=o(" \u2014 "),FS=a("a"),jJe=o("BartTokenizer"),DJe=o(" or "),TS=a("a"),GJe=o("BartTokenizerFast"),OJe=o(" (BART model)"),VJe=l(),Bn=a("li"),hre=a("strong"),XJe=o("barthez"),zJe=o(" \u2014 "),MS=a("a"),QJe=o("BarthezTokenizer"),WJe=o(" or "),ES=a("a"),HJe=o("BarthezTokenizerFast"),UJe=o(" (BARThez model)"),JJe=l(),bg=a("li"),pre=a("strong"),YJe=o("bartpho"),KJe=o(" \u2014 "),CS=a("a"),ZJe=o("BartphoTokenizer"),eYe=o(" (BARTpho model)"),oYe=l(),Pn=a("li"),ure=a("strong"),rYe=o("bert"),tYe=o(" \u2014 "),wS=a("a"),aYe=o("BertTokenizer"),nYe=o(" or "),AS=a("a"),sYe=o("BertTokenizerFast"),lYe=o(" (BERT model)"),iYe=l(),vg=a("li"),_re=a("strong"),dYe=o("bert-generation"),cYe=o(" \u2014 "),yS=a("a"),fYe=o("BertGenerationTokenizer"),mYe=o(" (Bert Generation model)"),gYe=l(),Fg=a("li"),bre=a("strong"),hYe=o("bert-japanese"),pYe=o(" \u2014 "),LS=a("a"),uYe=o("BertJapaneseTokenizer"),_Ye=o(" (BertJapanese model)"),bYe=l(),Tg=a("li"),vre=a("strong"),vYe=o("bertweet"),FYe=o(" \u2014 "),xS=a("a"),TYe=o("BertweetTokenizer"),MYe=o(" (Bertweet model)"),EYe=l(),In=a("li"),Fre=a("strong"),CYe=o("big_bird"),wYe=o(" \u2014 "),$S=a("a"),AYe=o("BigBirdTokenizer"),yYe=o(" or "),kS=a("a"),LYe=o("BigBirdTokenizerFast"),xYe=o(" (BigBird model)"),$Ye=l(),qn=a("li"),Tre=a("strong"),kYe=o("bigbird_pegasus"),SYe=o(" \u2014 "),SS=a("a"),RYe=o("PegasusTokenizer"),BYe=o(" or "),RS=a("a"),PYe=o("PegasusTokenizerFast"),IYe=o(" (BigBirdPegasus model)"),qYe=l(),Nn=a("li"),Mre=a("strong"),NYe=o("blenderbot"),jYe=o(" \u2014 "),BS=a("a"),DYe=o("BlenderbotTokenizer"),GYe=o(" or "),PS=a("a"),OYe=o("BlenderbotTokenizerFast"),VYe=o(" (Blenderbot model)"),XYe=l(),Mg=a("li"),Ere=a("strong"),zYe=o("blenderbot-small"),QYe=o(" \u2014 "),IS=a("a"),WYe=o("BlenderbotSmallTokenizer"),HYe=o(" (BlenderbotSmall model)"),UYe=l(),Eg=a("li"),Cre=a("strong"),JYe=o("byt5"),YYe=o(" \u2014 "),qS=a("a"),KYe=o("ByT5Tokenizer"),ZYe=o(" (ByT5 model)"),eKe=l(),jn=a("li"),wre=a("strong"),oKe=o("camembert"),rKe=o(" \u2014 "),NS=a("a"),tKe=o("CamembertTokenizer"),aKe=o(" or "),jS=a("a"),nKe=o("CamembertTokenizerFast"),sKe=o(" (CamemBERT model)"),lKe=l(),Cg=a("li"),Are=a("strong"),iKe=o("canine"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("CanineTokenizer"),fKe=o(" (Canine model)"),mKe=l(),Dn=a("li"),yre=a("strong"),gKe=o("clip"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("CLIPTokenizer"),uKe=o(" or "),OS=a("a"),_Ke=o("CLIPTokenizerFast"),bKe=o(" (CLIP model)"),vKe=l(),Gn=a("li"),Lre=a("strong"),FKe=o("convbert"),TKe=o(" \u2014 "),VS=a("a"),MKe=o("ConvBertTokenizer"),EKe=o(" or "),XS=a("a"),CKe=o("ConvBertTokenizerFast"),wKe=o(" (ConvBERT model)"),AKe=l(),On=a("li"),xre=a("strong"),yKe=o("cpm"),LKe=o(" \u2014 "),zS=a("a"),xKe=o("CpmTokenizer"),$Ke=o(" or "),QS=a("a"),kKe=o("CpmTokenizerFast"),SKe=o(" (CPM model)"),RKe=l(),wg=a("li"),$re=a("strong"),BKe=o("ctrl"),PKe=o(" \u2014 "),WS=a("a"),IKe=o("CTRLTokenizer"),qKe=o(" (CTRL model)"),NKe=l(),Vn=a("li"),kre=a("strong"),jKe=o("data2vec-text"),DKe=o(" \u2014 "),HS=a("a"),GKe=o("RobertaTokenizer"),OKe=o(" or "),US=a("a"),VKe=o("RobertaTokenizerFast"),XKe=o(" (Data2VecText model)"),zKe=l(),Xn=a("li"),Sre=a("strong"),QKe=o("deberta"),WKe=o(" \u2014 "),JS=a("a"),HKe=o("DebertaTokenizer"),UKe=o(" or "),YS=a("a"),JKe=o("DebertaTokenizerFast"),YKe=o(" (DeBERTa model)"),KKe=l(),zn=a("li"),Rre=a("strong"),ZKe=o("deberta-v2"),eZe=o(" \u2014 "),KS=a("a"),oZe=o("DebertaV2Tokenizer"),rZe=o(" or "),ZS=a("a"),tZe=o("DebertaV2TokenizerFast"),aZe=o(" (DeBERTa-v2 model)"),nZe=l(),Qn=a("li"),Bre=a("strong"),sZe=o("distilbert"),lZe=o(" \u2014 "),eR=a("a"),iZe=o("DistilBertTokenizer"),dZe=o(" or "),oR=a("a"),cZe=o("DistilBertTokenizerFast"),fZe=o(" (DistilBERT model)"),mZe=l(),Wn=a("li"),Pre=a("strong"),gZe=o("dpr"),hZe=o(" \u2014 "),rR=a("a"),pZe=o("DPRQuestionEncoderTokenizer"),uZe=o(" or "),tR=a("a"),_Ze=o("DPRQuestionEncoderTokenizerFast"),bZe=o(" (DPR model)"),vZe=l(),Hn=a("li"),Ire=a("strong"),FZe=o("electra"),TZe=o(" \u2014 "),aR=a("a"),MZe=o("ElectraTokenizer"),EZe=o(" or "),nR=a("a"),CZe=o("ElectraTokenizerFast"),wZe=o(" (ELECTRA model)"),AZe=l(),Ag=a("li"),qre=a("strong"),yZe=o("flaubert"),LZe=o(" \u2014 "),sR=a("a"),xZe=o("FlaubertTokenizer"),$Ze=o(" (FlauBERT model)"),kZe=l(),Un=a("li"),Nre=a("strong"),SZe=o("fnet"),RZe=o(" \u2014 "),lR=a("a"),BZe=o("FNetTokenizer"),PZe=o(" or "),iR=a("a"),IZe=o("FNetTokenizerFast"),qZe=o(" (FNet model)"),NZe=l(),yg=a("li"),jre=a("strong"),jZe=o("fsmt"),DZe=o(" \u2014 "),dR=a("a"),GZe=o("FSMTTokenizer"),OZe=o(" (FairSeq Machine-Translation model)"),VZe=l(),Jn=a("li"),Dre=a("strong"),XZe=o("funnel"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("FunnelTokenizer"),WZe=o(" or "),fR=a("a"),HZe=o("FunnelTokenizerFast"),UZe=o(" (Funnel Transformer model)"),JZe=l(),Yn=a("li"),Gre=a("strong"),YZe=o("gpt2"),KZe=o(" \u2014 "),mR=a("a"),ZZe=o("GPT2Tokenizer"),eeo=o(" or "),gR=a("a"),oeo=o("GPT2TokenizerFast"),reo=o(" (OpenAI GPT-2 model)"),teo=l(),Kn=a("li"),Ore=a("strong"),aeo=o("gpt_neo"),neo=o(" \u2014 "),hR=a("a"),seo=o("GPT2Tokenizer"),leo=o(" or "),pR=a("a"),ieo=o("GPT2TokenizerFast"),deo=o(" (GPT Neo model)"),ceo=l(),Zn=a("li"),Vre=a("strong"),feo=o("gptj"),meo=o(" \u2014 "),uR=a("a"),geo=o("GPT2Tokenizer"),heo=o(" or "),_R=a("a"),peo=o("GPT2TokenizerFast"),ueo=o(" (GPT-J model)"),_eo=l(),es=a("li"),Xre=a("strong"),beo=o("herbert"),veo=o(" \u2014 "),bR=a("a"),Feo=o("HerbertTokenizer"),Teo=o(" or "),vR=a("a"),Meo=o("HerbertTokenizerFast"),Eeo=o(" (HerBERT model)"),Ceo=l(),Lg=a("li"),zre=a("strong"),weo=o("hubert"),Aeo=o(" \u2014 "),FR=a("a"),yeo=o("Wav2Vec2CTCTokenizer"),Leo=o(" (Hubert model)"),xeo=l(),os=a("li"),Qre=a("strong"),$eo=o("ibert"),keo=o(" \u2014 "),TR=a("a"),Seo=o("RobertaTokenizer"),Reo=o(" or "),MR=a("a"),Beo=o("RobertaTokenizerFast"),Peo=o(" (I-BERT model)"),Ieo=l(),rs=a("li"),Wre=a("strong"),qeo=o("layoutlm"),Neo=o(" \u2014 "),ER=a("a"),jeo=o("LayoutLMTokenizer"),Deo=o(" or "),CR=a("a"),Geo=o("LayoutLMTokenizerFast"),Oeo=o(" (LayoutLM model)"),Veo=l(),ts=a("li"),Hre=a("strong"),Xeo=o("layoutlmv2"),zeo=o(" \u2014 "),wR=a("a"),Qeo=o("LayoutLMv2Tokenizer"),Weo=o(" or "),AR=a("a"),Heo=o("LayoutLMv2TokenizerFast"),Ueo=o(" (LayoutLMv2 model)"),Jeo=l(),as=a("li"),Ure=a("strong"),Yeo=o("layoutxlm"),Keo=o(" \u2014 "),yR=a("a"),Zeo=o("LayoutXLMTokenizer"),eoo=o(" or "),LR=a("a"),ooo=o("LayoutXLMTokenizerFast"),roo=o(" (LayoutXLM model)"),too=l(),ns=a("li"),Jre=a("strong"),aoo=o("led"),noo=o(" \u2014 "),xR=a("a"),soo=o("LEDTokenizer"),loo=o(" or "),$R=a("a"),ioo=o("LEDTokenizerFast"),doo=o(" (LED model)"),coo=l(),ss=a("li"),Yre=a("strong"),foo=o("longformer"),moo=o(" \u2014 "),kR=a("a"),goo=o("LongformerTokenizer"),hoo=o(" or "),SR=a("a"),poo=o("LongformerTokenizerFast"),uoo=o(" (Longformer model)"),_oo=l(),xg=a("li"),Kre=a("strong"),boo=o("luke"),voo=o(" \u2014 "),RR=a("a"),Foo=o("LukeTokenizer"),Too=o(" (LUKE model)"),Moo=l(),ls=a("li"),Zre=a("strong"),Eoo=o("lxmert"),Coo=o(" \u2014 "),BR=a("a"),woo=o("LxmertTokenizer"),Aoo=o(" or "),PR=a("a"),yoo=o("LxmertTokenizerFast"),Loo=o(" (LXMERT model)"),xoo=l(),$g=a("li"),ete=a("strong"),$oo=o("m2m_100"),koo=o(" \u2014 "),IR=a("a"),Soo=o("M2M100Tokenizer"),Roo=o(" (M2M100 model)"),Boo=l(),kg=a("li"),ote=a("strong"),Poo=o("marian"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("MarianTokenizer"),Noo=o(" (Marian model)"),joo=l(),is=a("li"),rte=a("strong"),Doo=o("mbart"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("MBartTokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("MBartTokenizerFast"),zoo=o(" (mBART model)"),Qoo=l(),ds=a("li"),tte=a("strong"),Woo=o("mbart50"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("MBart50Tokenizer"),Joo=o(" or "),GR=a("a"),Yoo=o("MBart50TokenizerFast"),Koo=o(" (mBART-50 model)"),Zoo=l(),cs=a("li"),ate=a("strong"),ero=o("megatron-bert"),oro=o(" \u2014 "),OR=a("a"),rro=o("BertTokenizer"),tro=o(" or "),VR=a("a"),aro=o("BertTokenizerFast"),nro=o(" (MegatronBert model)"),sro=l(),Sg=a("li"),nte=a("strong"),lro=o("mluke"),iro=o(" \u2014 "),XR=a("a"),dro=o("MLukeTokenizer"),cro=o(" (mLUKE model)"),fro=l(),fs=a("li"),ste=a("strong"),mro=o("mobilebert"),gro=o(" \u2014 "),zR=a("a"),hro=o("MobileBertTokenizer"),pro=o(" or "),QR=a("a"),uro=o("MobileBertTokenizerFast"),_ro=o(" (MobileBERT model)"),bro=l(),ms=a("li"),lte=a("strong"),vro=o("mpnet"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("MPNetTokenizer"),Mro=o(" or "),HR=a("a"),Ero=o("MPNetTokenizerFast"),Cro=o(" (MPNet model)"),wro=l(),gs=a("li"),ite=a("strong"),Aro=o("mt5"),yro=o(" \u2014 "),UR=a("a"),Lro=o("MT5Tokenizer"),xro=o(" or "),JR=a("a"),$ro=o("MT5TokenizerFast"),kro=o(" (mT5 model)"),Sro=l(),hs=a("li"),dte=a("strong"),Rro=o("nystromformer"),Bro=o(" \u2014 "),YR=a("a"),Pro=o("AlbertTokenizer"),Iro=o(" or "),KR=a("a"),qro=o("AlbertTokenizerFast"),Nro=o(" (Nystromformer model)"),jro=l(),ps=a("li"),cte=a("strong"),Dro=o("openai-gpt"),Gro=o(" \u2014 "),ZR=a("a"),Oro=o("OpenAIGPTTokenizer"),Vro=o(" or "),eB=a("a"),Xro=o("OpenAIGPTTokenizerFast"),zro=o(" (OpenAI GPT model)"),Qro=l(),Rg=a("li"),fte=a("strong"),Wro=o("opt"),Hro=o(" \u2014 "),oB=a("a"),Uro=o("GPT2Tokenizer"),Jro=o(" (OPT model)"),Yro=l(),us=a("li"),mte=a("strong"),Kro=o("pegasus"),Zro=o(" \u2014 "),rB=a("a"),eto=o("PegasusTokenizer"),oto=o(" or "),tB=a("a"),rto=o("PegasusTokenizerFast"),tto=o(" (Pegasus model)"),ato=l(),Bg=a("li"),gte=a("strong"),nto=o("perceiver"),sto=o(" \u2014 "),aB=a("a"),lto=o("PerceiverTokenizer"),ito=o(" (Perceiver model)"),dto=l(),Pg=a("li"),hte=a("strong"),cto=o("phobert"),fto=o(" \u2014 "),nB=a("a"),mto=o("PhobertTokenizer"),gto=o(" (PhoBERT model)"),hto=l(),Ig=a("li"),pte=a("strong"),pto=o("plbart"),uto=o(" \u2014 "),sB=a("a"),_to=o("PLBartTokenizer"),bto=o(" (PLBart model)"),vto=l(),qg=a("li"),ute=a("strong"),Fto=o("prophetnet"),Tto=o(" \u2014 "),lB=a("a"),Mto=o("ProphetNetTokenizer"),Eto=o(" (ProphetNet model)"),Cto=l(),_s=a("li"),_te=a("strong"),wto=o("qdqbert"),Ato=o(" \u2014 "),iB=a("a"),yto=o("BertTokenizer"),Lto=o(" or "),dB=a("a"),xto=o("BertTokenizerFast"),$to=o(" (QDQBert model)"),kto=l(),Ng=a("li"),bte=a("strong"),Sto=o("rag"),Rto=o(" \u2014 "),cB=a("a"),Bto=o("RagTokenizer"),Pto=o(" (RAG model)"),Ito=l(),bs=a("li"),vte=a("strong"),qto=o("realm"),Nto=o(" \u2014 "),fB=a("a"),jto=o("RealmTokenizer"),Dto=o(" or "),mB=a("a"),Gto=o("RealmTokenizerFast"),Oto=o(" (Realm model)"),Vto=l(),vs=a("li"),Fte=a("strong"),Xto=o("reformer"),zto=o(" \u2014 "),gB=a("a"),Qto=o("ReformerTokenizer"),Wto=o(" or "),hB=a("a"),Hto=o("ReformerTokenizerFast"),Uto=o(" (Reformer model)"),Jto=l(),Fs=a("li"),Tte=a("strong"),Yto=o("rembert"),Kto=o(" \u2014 "),pB=a("a"),Zto=o("RemBertTokenizer"),eao=o(" or "),uB=a("a"),oao=o("RemBertTokenizerFast"),rao=o(" (RemBERT model)"),tao=l(),Ts=a("li"),Mte=a("strong"),aao=o("retribert"),nao=o(" \u2014 "),_B=a("a"),sao=o("RetriBertTokenizer"),lao=o(" or "),bB=a("a"),iao=o("RetriBertTokenizerFast"),dao=o(" (RetriBERT model)"),cao=l(),Ms=a("li"),Ete=a("strong"),fao=o("roberta"),mao=o(" \u2014 "),vB=a("a"),gao=o("RobertaTokenizer"),hao=o(" or "),FB=a("a"),pao=o("RobertaTokenizerFast"),uao=o(" (RoBERTa model)"),_ao=l(),Es=a("li"),Cte=a("strong"),bao=o("roformer"),vao=o(" \u2014 "),TB=a("a"),Fao=o("RoFormerTokenizer"),Tao=o(" or "),MB=a("a"),Mao=o("RoFormerTokenizerFast"),Eao=o(" (RoFormer model)"),Cao=l(),jg=a("li"),wte=a("strong"),wao=o("speech_to_text"),Aao=o(" \u2014 "),EB=a("a"),yao=o("Speech2TextTokenizer"),Lao=o(" (Speech2Text model)"),xao=l(),Dg=a("li"),Ate=a("strong"),$ao=o("speech_to_text_2"),kao=o(" \u2014 "),CB=a("a"),Sao=o("Speech2Text2Tokenizer"),Rao=o(" (Speech2Text2 model)"),Bao=l(),Cs=a("li"),yte=a("strong"),Pao=o("splinter"),Iao=o(" \u2014 "),wB=a("a"),qao=o("SplinterTokenizer"),Nao=o(" or "),AB=a("a"),jao=o("SplinterTokenizerFast"),Dao=o(" (Splinter model)"),Gao=l(),ws=a("li"),Lte=a("strong"),Oao=o("squeezebert"),Vao=o(" \u2014 "),yB=a("a"),Xao=o("SqueezeBertTokenizer"),zao=o(" or "),LB=a("a"),Qao=o("SqueezeBertTokenizerFast"),Wao=o(" (SqueezeBERT model)"),Hao=l(),As=a("li"),xte=a("strong"),Uao=o("t5"),Jao=o(" \u2014 "),xB=a("a"),Yao=o("T5Tokenizer"),Kao=o(" or "),$B=a("a"),Zao=o("T5TokenizerFast"),eno=o(" (T5 model)"),ono=l(),Gg=a("li"),$te=a("strong"),rno=o("tapas"),tno=o(" \u2014 "),kB=a("a"),ano=o("TapasTokenizer"),nno=o(" (TAPAS model)"),sno=l(),Og=a("li"),kte=a("strong"),lno=o("tapex"),ino=o(" \u2014 "),SB=a("a"),dno=o("TapexTokenizer"),cno=o(" (TAPEX model)"),fno=l(),Vg=a("li"),Ste=a("strong"),mno=o("transfo-xl"),gno=o(" \u2014 "),RB=a("a"),hno=o("TransfoXLTokenizer"),pno=o(" (Transformer-XL model)"),uno=l(),ys=a("li"),Rte=a("strong"),_no=o("visual_bert"),bno=o(" \u2014 "),BB=a("a"),vno=o("BertTokenizer"),Fno=o(" or "),PB=a("a"),Tno=o("BertTokenizerFast"),Mno=o(" (VisualBert model)"),Eno=l(),Xg=a("li"),Bte=a("strong"),Cno=o("wav2vec2"),wno=o(" \u2014 "),IB=a("a"),Ano=o("Wav2Vec2CTCTokenizer"),yno=o(" (Wav2Vec2 model)"),Lno=l(),zg=a("li"),Pte=a("strong"),xno=o("wav2vec2_phoneme"),$no=o(" \u2014 "),qB=a("a"),kno=o("Wav2Vec2PhonemeCTCTokenizer"),Sno=o(" (Wav2Vec2Phoneme model)"),Rno=l(),Ls=a("li"),Ite=a("strong"),Bno=o("xglm"),Pno=o(" \u2014 "),NB=a("a"),Ino=o("XGLMTokenizer"),qno=o(" or "),jB=a("a"),Nno=o("XGLMTokenizerFast"),jno=o(" (XGLM model)"),Dno=l(),Qg=a("li"),qte=a("strong"),Gno=o("xlm"),Ono=o(" \u2014 "),DB=a("a"),Vno=o("XLMTokenizer"),Xno=o(" (XLM model)"),zno=l(),Wg=a("li"),Nte=a("strong"),Qno=o("xlm-prophetnet"),Wno=o(" \u2014 "),GB=a("a"),Hno=o("XLMProphetNetTokenizer"),Uno=o(" (XLMProphetNet model)"),Jno=l(),xs=a("li"),jte=a("strong"),Yno=o("xlm-roberta"),Kno=o(" \u2014 "),OB=a("a"),Zno=o("XLMRobertaTokenizer"),eso=o(" or "),VB=a("a"),oso=o("XLMRobertaTokenizerFast"),rso=o(" (XLM-RoBERTa model)"),tso=l(),$s=a("li"),Dte=a("strong"),aso=o("xlm-roberta-xl"),nso=o(" \u2014 "),XB=a("a"),sso=o("RobertaTokenizer"),lso=o(" or "),zB=a("a"),iso=o("RobertaTokenizerFast"),dso=o(" (XLM-RoBERTa-XL model)"),cso=l(),ks=a("li"),Gte=a("strong"),fso=o("xlnet"),mso=o(" \u2014 "),QB=a("a"),gso=o("XLNetTokenizer"),hso=o(" or "),WB=a("a"),pso=o("XLNetTokenizerFast"),uso=o(" (XLNet model)"),_so=l(),Ss=a("li"),Ote=a("strong"),bso=o("yoso"),vso=o(" \u2014 "),HB=a("a"),Fso=o("AlbertTokenizer"),Tso=o(" or "),UB=a("a"),Mso=o("AlbertTokenizerFast"),Eso=o(" (YOSO model)"),Cso=l(),F(Hg.$$.fragment),wso=l(),Ug=a("div"),F(cA.$$.fragment),Aso=l(),Vte=a("p"),yso=o("Register a new tokenizer in this mapping."),HPe=l(),vi=a("h2"),Jg=a("a"),Xte=a("span"),F(fA.$$.fragment),Lso=l(),zte=a("span"),xso=o("AutoFeatureExtractor"),UPe=l(),Ao=a("div"),F(mA.$$.fragment),$so=l(),gA=a("p"),kso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JB=a("a"),Sso=o("AutoFeatureExtractor.from_pretrained()"),Rso=o(" class method."),Bso=l(),hA=a("p"),Pso=o("This class cannot be instantiated directly using "),Qte=a("code"),Iso=o("__init__()"),qso=o(" (throws an error)."),Nso=l(),Qe=a("div"),F(pA.$$.fragment),jso=l(),Wte=a("p"),Dso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Gso=l(),wa=a("p"),Oso=o("The feature extractor class to instantiate is selected based on the "),Hte=a("code"),Vso=o("model_type"),Xso=o(` property of the config object
(either passed as an argument or loaded from `),Ute=a("code"),zso=o("pretrained_model_name_or_path"),Qso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=a("code"),Wso=o("pretrained_model_name_or_path"),Hso=o(":"),Uso=l(),oe=a("ul"),Yg=a("li"),Yte=a("strong"),Jso=o("beit"),Yso=o(" \u2014 "),YB=a("a"),Kso=o("BeitFeatureExtractor"),Zso=o(" (BEiT model)"),elo=l(),Kg=a("li"),Kte=a("strong"),olo=o("clip"),rlo=o(" \u2014 "),KB=a("a"),tlo=o("CLIPFeatureExtractor"),alo=o(" (CLIP model)"),nlo=l(),Zg=a("li"),Zte=a("strong"),slo=o("convnext"),llo=o(" \u2014 "),ZB=a("a"),ilo=o("ConvNextFeatureExtractor"),dlo=o(" (ConvNext model)"),clo=l(),eh=a("li"),eae=a("strong"),flo=o("data2vec-audio"),mlo=o(" \u2014 "),eP=a("a"),glo=o("Wav2Vec2FeatureExtractor"),hlo=o(" (Data2VecAudio model)"),plo=l(),oh=a("li"),oae=a("strong"),ulo=o("data2vec-vision"),_lo=o(" \u2014 "),oP=a("a"),blo=o("BeitFeatureExtractor"),vlo=o(" (Data2VecVision model)"),Flo=l(),rh=a("li"),rae=a("strong"),Tlo=o("deit"),Mlo=o(" \u2014 "),rP=a("a"),Elo=o("DeiTFeatureExtractor"),Clo=o(" (DeiT model)"),wlo=l(),th=a("li"),tae=a("strong"),Alo=o("detr"),ylo=o(" \u2014 "),tP=a("a"),Llo=o("DetrFeatureExtractor"),xlo=o(" (DETR model)"),$lo=l(),ah=a("li"),aae=a("strong"),klo=o("dpt"),Slo=o(" \u2014 "),aP=a("a"),Rlo=o("DPTFeatureExtractor"),Blo=o(" (DPT model)"),Plo=l(),nh=a("li"),nae=a("strong"),Ilo=o("flava"),qlo=o(" \u2014 "),nP=a("a"),Nlo=o("FlavaFeatureExtractor"),jlo=o(" (Flava model)"),Dlo=l(),sh=a("li"),sae=a("strong"),Glo=o("glpn"),Olo=o(" \u2014 "),sP=a("a"),Vlo=o("GLPNFeatureExtractor"),Xlo=o(" (GLPN model)"),zlo=l(),lh=a("li"),lae=a("strong"),Qlo=o("hubert"),Wlo=o(" \u2014 "),lP=a("a"),Hlo=o("Wav2Vec2FeatureExtractor"),Ulo=o(" (Hubert model)"),Jlo=l(),ih=a("li"),iae=a("strong"),Ylo=o("layoutlmv2"),Klo=o(" \u2014 "),iP=a("a"),Zlo=o("LayoutLMv2FeatureExtractor"),eio=o(" (LayoutLMv2 model)"),oio=l(),dh=a("li"),dae=a("strong"),rio=o("maskformer"),tio=o(" \u2014 "),dP=a("a"),aio=o("MaskFormerFeatureExtractor"),nio=o(" (MaskFormer model)"),sio=l(),ch=a("li"),cae=a("strong"),lio=o("perceiver"),iio=o(" \u2014 "),cP=a("a"),dio=o("PerceiverFeatureExtractor"),cio=o(" (Perceiver model)"),fio=l(),fh=a("li"),fae=a("strong"),mio=o("poolformer"),gio=o(" \u2014 "),fP=a("a"),hio=o("PoolFormerFeatureExtractor"),pio=o(" (PoolFormer model)"),uio=l(),mh=a("li"),mae=a("strong"),_io=o("regnet"),bio=o(" \u2014 "),mP=a("a"),vio=o("ConvNextFeatureExtractor"),Fio=o(" (RegNet model)"),Tio=l(),gh=a("li"),gae=a("strong"),Mio=o("resnet"),Eio=o(" \u2014 "),gP=a("a"),Cio=o("ConvNextFeatureExtractor"),wio=o(" (ResNet model)"),Aio=l(),hh=a("li"),hae=a("strong"),yio=o("segformer"),Lio=o(" \u2014 "),hP=a("a"),xio=o("SegformerFeatureExtractor"),$io=o(" (SegFormer model)"),kio=l(),ph=a("li"),pae=a("strong"),Sio=o("speech_to_text"),Rio=o(" \u2014 "),pP=a("a"),Bio=o("Speech2TextFeatureExtractor"),Pio=o(" (Speech2Text model)"),Iio=l(),uh=a("li"),uae=a("strong"),qio=o("swin"),Nio=o(" \u2014 "),uP=a("a"),jio=o("ViTFeatureExtractor"),Dio=o(" (Swin model)"),Gio=l(),_h=a("li"),_ae=a("strong"),Oio=o("van"),Vio=o(" \u2014 "),_P=a("a"),Xio=o("ConvNextFeatureExtractor"),zio=o(" (VAN model)"),Qio=l(),bh=a("li"),bae=a("strong"),Wio=o("vit"),Hio=o(" \u2014 "),bP=a("a"),Uio=o("ViTFeatureExtractor"),Jio=o(" (ViT model)"),Yio=l(),vh=a("li"),vae=a("strong"),Kio=o("vit_mae"),Zio=o(" \u2014 "),vP=a("a"),edo=o("ViTFeatureExtractor"),odo=o(" (ViTMAE model)"),rdo=l(),Fh=a("li"),Fae=a("strong"),tdo=o("wav2vec2"),ado=o(" \u2014 "),FP=a("a"),ndo=o("Wav2Vec2FeatureExtractor"),sdo=o(" (Wav2Vec2 model)"),ldo=l(),Th=a("li"),Tae=a("strong"),ido=o("yolos"),ddo=o(" \u2014 "),TP=a("a"),cdo=o("YolosFeatureExtractor"),fdo=o(" (YOLOS model)"),mdo=l(),F(Mh.$$.fragment),gdo=l(),F(Eh.$$.fragment),hdo=l(),Ch=a("div"),F(uA.$$.fragment),pdo=l(),Mae=a("p"),udo=o("Register a new feature extractor for this class."),JPe=l(),Fi=a("h2"),wh=a("a"),Eae=a("span"),F(_A.$$.fragment),_do=l(),Cae=a("span"),bdo=o("AutoProcessor"),YPe=l(),yo=a("div"),F(bA.$$.fragment),vdo=l(),vA=a("p"),Fdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MP=a("a"),Tdo=o("AutoProcessor.from_pretrained()"),Mdo=o(" class method."),Edo=l(),FA=a("p"),Cdo=o("This class cannot be instantiated directly using "),wae=a("code"),wdo=o("__init__()"),Ado=o(" (throws an error)."),ydo=l(),We=a("div"),F(TA.$$.fragment),Ldo=l(),Aae=a("p"),xdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$do=l(),Ti=a("p"),kdo=o("The processor class to instantiate is selected based on the "),yae=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Bdo=o("pretrained_model_name_or_path"),Pdo=o(" if possible):"),Ido=l(),_e=a("ul"),Ah=a("li"),xae=a("strong"),qdo=o("clip"),Ndo=o(" \u2014 "),EP=a("a"),jdo=o("CLIPProcessor"),Ddo=o(" (CLIP model)"),Gdo=l(),yh=a("li"),$ae=a("strong"),Odo=o("flava"),Vdo=o(" \u2014 "),kae=a("code"),Xdo=o("FLAVAProcessor"),zdo=o(" (Flava model)"),Qdo=l(),Lh=a("li"),Sae=a("strong"),Wdo=o("layoutlmv2"),Hdo=o(" \u2014 "),CP=a("a"),Udo=o("LayoutLMv2Processor"),Jdo=o(" (LayoutLMv2 model)"),Ydo=l(),xh=a("li"),Rae=a("strong"),Kdo=o("layoutxlm"),Zdo=o(" \u2014 "),wP=a("a"),eco=o("LayoutXLMProcessor"),oco=o(" (LayoutXLM model)"),rco=l(),$h=a("li"),Bae=a("strong"),tco=o("sew"),aco=o(" \u2014 "),AP=a("a"),nco=o("Wav2Vec2Processor"),sco=o(" (SEW model)"),lco=l(),kh=a("li"),Pae=a("strong"),ico=o("sew-d"),dco=o(" \u2014 "),yP=a("a"),cco=o("Wav2Vec2Processor"),fco=o(" (SEW-D model)"),mco=l(),Sh=a("li"),Iae=a("strong"),gco=o("speech_to_text"),hco=o(" \u2014 "),LP=a("a"),pco=o("Speech2TextProcessor"),uco=o(" (Speech2Text model)"),_co=l(),Rh=a("li"),qae=a("strong"),bco=o("speech_to_text_2"),vco=o(" \u2014 "),xP=a("a"),Fco=o("Speech2Text2Processor"),Tco=o(" (Speech2Text2 model)"),Mco=l(),Bh=a("li"),Nae=a("strong"),Eco=o("trocr"),Cco=o(" \u2014 "),$P=a("a"),wco=o("TrOCRProcessor"),Aco=o(" (TrOCR model)"),yco=l(),Ph=a("li"),jae=a("strong"),Lco=o("unispeech"),xco=o(" \u2014 "),kP=a("a"),$co=o("Wav2Vec2Processor"),kco=o(" (UniSpeech model)"),Sco=l(),Ih=a("li"),Dae=a("strong"),Rco=o("unispeech-sat"),Bco=o(" \u2014 "),SP=a("a"),Pco=o("Wav2Vec2Processor"),Ico=o(" (UniSpeechSat model)"),qco=l(),qh=a("li"),Gae=a("strong"),Nco=o("vilt"),jco=o(" \u2014 "),RP=a("a"),Dco=o("ViltProcessor"),Gco=o(" (ViLT model)"),Oco=l(),Nh=a("li"),Oae=a("strong"),Vco=o("vision-text-dual-encoder"),Xco=o(" \u2014 "),BP=a("a"),zco=o("VisionTextDualEncoderProcessor"),Qco=o(" (VisionTextDualEncoder model)"),Wco=l(),jh=a("li"),Vae=a("strong"),Hco=o("wav2vec2"),Uco=o(" \u2014 "),PP=a("a"),Jco=o("Wav2Vec2Processor"),Yco=o(" (Wav2Vec2 model)"),Kco=l(),Dh=a("li"),Xae=a("strong"),Zco=o("wavlm"),efo=o(" \u2014 "),IP=a("a"),ofo=o("Wav2Vec2Processor"),rfo=o(" (WavLM model)"),tfo=l(),F(Gh.$$.fragment),afo=l(),F(Oh.$$.fragment),nfo=l(),Vh=a("div"),F(MA.$$.fragment),sfo=l(),zae=a("p"),lfo=o("Register a new processor for this class."),KPe=l(),Mi=a("h2"),Xh=a("a"),Qae=a("span"),F(EA.$$.fragment),ifo=l(),Wae=a("span"),dfo=o("AutoModel"),ZPe=l(),Lo=a("div"),F(CA.$$.fragment),cfo=l(),Ei=a("p"),ffo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qP=a("a"),mfo=o("from_pretrained()"),gfo=o(" class method or the "),NP=a("a"),hfo=o("from_config()"),pfo=o(` class
method.`),ufo=l(),wA=a("p"),_fo=o("This class cannot be instantiated directly using "),Hae=a("code"),bfo=o("__init__()"),vfo=o(" (throws an error)."),Ffo=l(),ot=a("div"),F(AA.$$.fragment),Tfo=l(),Uae=a("p"),Mfo=o("Instantiates one of the base model classes of the library from a configuration."),Efo=l(),Ci=a("p"),Cfo=o(`Note:
Loading a model from its configuration file does `),Jae=a("strong"),wfo=o("not"),Afo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=a("a"),yfo=o("from_pretrained()"),Lfo=o(" to load the model weights."),xfo=l(),F(zh.$$.fragment),$fo=l(),He=a("div"),F(yA.$$.fragment),kfo=l(),Yae=a("p"),Sfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Rfo=l(),Aa=a("p"),Bfo=o("The model class to instantiate is selected based on the "),Kae=a("code"),Pfo=o("model_type"),Ifo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),qfo=o("pretrained_model_name_or_path"),Nfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),jfo=o("pretrained_model_name_or_path"),Dfo=o(":"),Gfo=l(),x=a("ul"),Qh=a("li"),one=a("strong"),Ofo=o("albert"),Vfo=o(" \u2014 "),DP=a("a"),Xfo=o("AlbertModel"),zfo=o(" (ALBERT model)"),Qfo=l(),Wh=a("li"),rne=a("strong"),Wfo=o("bart"),Hfo=o(" \u2014 "),GP=a("a"),Ufo=o("BartModel"),Jfo=o(" (BART model)"),Yfo=l(),Hh=a("li"),tne=a("strong"),Kfo=o("beit"),Zfo=o(" \u2014 "),OP=a("a"),emo=o("BeitModel"),omo=o(" (BEiT model)"),rmo=l(),Uh=a("li"),ane=a("strong"),tmo=o("bert"),amo=o(" \u2014 "),VP=a("a"),nmo=o("BertModel"),smo=o(" (BERT model)"),lmo=l(),Jh=a("li"),nne=a("strong"),imo=o("bert-generation"),dmo=o(" \u2014 "),XP=a("a"),cmo=o("BertGenerationEncoder"),fmo=o(" (Bert Generation model)"),mmo=l(),Yh=a("li"),sne=a("strong"),gmo=o("big_bird"),hmo=o(" \u2014 "),zP=a("a"),pmo=o("BigBirdModel"),umo=o(" (BigBird model)"),_mo=l(),Kh=a("li"),lne=a("strong"),bmo=o("bigbird_pegasus"),vmo=o(" \u2014 "),QP=a("a"),Fmo=o("BigBirdPegasusModel"),Tmo=o(" (BigBirdPegasus model)"),Mmo=l(),Zh=a("li"),ine=a("strong"),Emo=o("blenderbot"),Cmo=o(" \u2014 "),WP=a("a"),wmo=o("BlenderbotModel"),Amo=o(" (Blenderbot model)"),ymo=l(),ep=a("li"),dne=a("strong"),Lmo=o("blenderbot-small"),xmo=o(" \u2014 "),HP=a("a"),$mo=o("BlenderbotSmallModel"),kmo=o(" (BlenderbotSmall model)"),Smo=l(),op=a("li"),cne=a("strong"),Rmo=o("camembert"),Bmo=o(" \u2014 "),UP=a("a"),Pmo=o("CamembertModel"),Imo=o(" (CamemBERT model)"),qmo=l(),rp=a("li"),fne=a("strong"),Nmo=o("canine"),jmo=o(" \u2014 "),JP=a("a"),Dmo=o("CanineModel"),Gmo=o(" (Canine model)"),Omo=l(),tp=a("li"),mne=a("strong"),Vmo=o("clip"),Xmo=o(" \u2014 "),YP=a("a"),zmo=o("CLIPModel"),Qmo=o(" (CLIP model)"),Wmo=l(),ap=a("li"),gne=a("strong"),Hmo=o("convbert"),Umo=o(" \u2014 "),KP=a("a"),Jmo=o("ConvBertModel"),Ymo=o(" (ConvBERT model)"),Kmo=l(),np=a("li"),hne=a("strong"),Zmo=o("convnext"),ego=o(" \u2014 "),ZP=a("a"),ogo=o("ConvNextModel"),rgo=o(" (ConvNext model)"),tgo=l(),sp=a("li"),pne=a("strong"),ago=o("ctrl"),ngo=o(" \u2014 "),eI=a("a"),sgo=o("CTRLModel"),lgo=o(" (CTRL model)"),igo=l(),lp=a("li"),une=a("strong"),dgo=o("data2vec-audio"),cgo=o(" \u2014 "),oI=a("a"),fgo=o("Data2VecAudioModel"),mgo=o(" (Data2VecAudio model)"),ggo=l(),ip=a("li"),_ne=a("strong"),hgo=o("data2vec-text"),pgo=o(" \u2014 "),rI=a("a"),ugo=o("Data2VecTextModel"),_go=o(" (Data2VecText model)"),bgo=l(),dp=a("li"),bne=a("strong"),vgo=o("data2vec-vision"),Fgo=o(" \u2014 "),tI=a("a"),Tgo=o("Data2VecVisionModel"),Mgo=o(" (Data2VecVision model)"),Ego=l(),cp=a("li"),vne=a("strong"),Cgo=o("deberta"),wgo=o(" \u2014 "),aI=a("a"),Ago=o("DebertaModel"),ygo=o(" (DeBERTa model)"),Lgo=l(),fp=a("li"),Fne=a("strong"),xgo=o("deberta-v2"),$go=o(" \u2014 "),nI=a("a"),kgo=o("DebertaV2Model"),Sgo=o(" (DeBERTa-v2 model)"),Rgo=l(),mp=a("li"),Tne=a("strong"),Bgo=o("decision_transformer"),Pgo=o(" \u2014 "),sI=a("a"),Igo=o("DecisionTransformerModel"),qgo=o(" (Decision Transformer model)"),Ngo=l(),gp=a("li"),Mne=a("strong"),jgo=o("deit"),Dgo=o(" \u2014 "),lI=a("a"),Ggo=o("DeiTModel"),Ogo=o(" (DeiT model)"),Vgo=l(),hp=a("li"),Ene=a("strong"),Xgo=o("detr"),zgo=o(" \u2014 "),iI=a("a"),Qgo=o("DetrModel"),Wgo=o(" (DETR model)"),Hgo=l(),pp=a("li"),Cne=a("strong"),Ugo=o("distilbert"),Jgo=o(" \u2014 "),dI=a("a"),Ygo=o("DistilBertModel"),Kgo=o(" (DistilBERT model)"),Zgo=l(),up=a("li"),wne=a("strong"),eho=o("dpr"),oho=o(" \u2014 "),cI=a("a"),rho=o("DPRQuestionEncoder"),tho=o(" (DPR model)"),aho=l(),_p=a("li"),Ane=a("strong"),nho=o("dpt"),sho=o(" \u2014 "),fI=a("a"),lho=o("DPTModel"),iho=o(" (DPT model)"),dho=l(),bp=a("li"),yne=a("strong"),cho=o("electra"),fho=o(" \u2014 "),mI=a("a"),mho=o("ElectraModel"),gho=o(" (ELECTRA model)"),hho=l(),vp=a("li"),Lne=a("strong"),pho=o("flaubert"),uho=o(" \u2014 "),gI=a("a"),_ho=o("FlaubertModel"),bho=o(" (FlauBERT model)"),vho=l(),Fp=a("li"),xne=a("strong"),Fho=o("flava"),Tho=o(" \u2014 "),hI=a("a"),Mho=o("FlavaModel"),Eho=o(" (Flava model)"),Cho=l(),Tp=a("li"),$ne=a("strong"),who=o("fnet"),Aho=o(" \u2014 "),pI=a("a"),yho=o("FNetModel"),Lho=o(" (FNet model)"),xho=l(),Mp=a("li"),kne=a("strong"),$ho=o("fsmt"),kho=o(" \u2014 "),uI=a("a"),Sho=o("FSMTModel"),Rho=o(" (FairSeq Machine-Translation model)"),Bho=l(),Rs=a("li"),Sne=a("strong"),Pho=o("funnel"),Iho=o(" \u2014 "),_I=a("a"),qho=o("FunnelModel"),Nho=o(" or "),bI=a("a"),jho=o("FunnelBaseModel"),Dho=o(" (Funnel Transformer model)"),Gho=l(),Ep=a("li"),Rne=a("strong"),Oho=o("glpn"),Vho=o(" \u2014 "),vI=a("a"),Xho=o("GLPNModel"),zho=o(" (GLPN model)"),Qho=l(),Cp=a("li"),Bne=a("strong"),Who=o("gpt2"),Hho=o(" \u2014 "),FI=a("a"),Uho=o("GPT2Model"),Jho=o(" (OpenAI GPT-2 model)"),Yho=l(),wp=a("li"),Pne=a("strong"),Kho=o("gpt_neo"),Zho=o(" \u2014 "),TI=a("a"),epo=o("GPTNeoModel"),opo=o(" (GPT Neo model)"),rpo=l(),Ap=a("li"),Ine=a("strong"),tpo=o("gptj"),apo=o(" \u2014 "),MI=a("a"),npo=o("GPTJModel"),spo=o(" (GPT-J model)"),lpo=l(),yp=a("li"),qne=a("strong"),ipo=o("hubert"),dpo=o(" \u2014 "),EI=a("a"),cpo=o("HubertModel"),fpo=o(" (Hubert model)"),mpo=l(),Lp=a("li"),Nne=a("strong"),gpo=o("ibert"),hpo=o(" \u2014 "),CI=a("a"),ppo=o("IBertModel"),upo=o(" (I-BERT model)"),_po=l(),xp=a("li"),jne=a("strong"),bpo=o("imagegpt"),vpo=o(" \u2014 "),wI=a("a"),Fpo=o("ImageGPTModel"),Tpo=o(" (ImageGPT model)"),Mpo=l(),$p=a("li"),Dne=a("strong"),Epo=o("layoutlm"),Cpo=o(" \u2014 "),AI=a("a"),wpo=o("LayoutLMModel"),Apo=o(" (LayoutLM model)"),ypo=l(),kp=a("li"),Gne=a("strong"),Lpo=o("layoutlmv2"),xpo=o(" \u2014 "),yI=a("a"),$po=o("LayoutLMv2Model"),kpo=o(" (LayoutLMv2 model)"),Spo=l(),Sp=a("li"),One=a("strong"),Rpo=o("led"),Bpo=o(" \u2014 "),LI=a("a"),Ppo=o("LEDModel"),Ipo=o(" (LED model)"),qpo=l(),Rp=a("li"),Vne=a("strong"),Npo=o("longformer"),jpo=o(" \u2014 "),xI=a("a"),Dpo=o("LongformerModel"),Gpo=o(" (Longformer model)"),Opo=l(),Bp=a("li"),Xne=a("strong"),Vpo=o("luke"),Xpo=o(" \u2014 "),$I=a("a"),zpo=o("LukeModel"),Qpo=o(" (LUKE model)"),Wpo=l(),Pp=a("li"),zne=a("strong"),Hpo=o("lxmert"),Upo=o(" \u2014 "),kI=a("a"),Jpo=o("LxmertModel"),Ypo=o(" (LXMERT model)"),Kpo=l(),Ip=a("li"),Qne=a("strong"),Zpo=o("m2m_100"),euo=o(" \u2014 "),SI=a("a"),ouo=o("M2M100Model"),ruo=o(" (M2M100 model)"),tuo=l(),qp=a("li"),Wne=a("strong"),auo=o("marian"),nuo=o(" \u2014 "),RI=a("a"),suo=o("MarianModel"),luo=o(" (Marian model)"),iuo=l(),Np=a("li"),Hne=a("strong"),duo=o("maskformer"),cuo=o(" \u2014 "),BI=a("a"),fuo=o("MaskFormerModel"),muo=o(" (MaskFormer model)"),guo=l(),jp=a("li"),Une=a("strong"),huo=o("mbart"),puo=o(" \u2014 "),PI=a("a"),uuo=o("MBartModel"),_uo=o(" (mBART model)"),buo=l(),Dp=a("li"),Jne=a("strong"),vuo=o("megatron-bert"),Fuo=o(" \u2014 "),II=a("a"),Tuo=o("MegatronBertModel"),Muo=o(" (MegatronBert model)"),Euo=l(),Gp=a("li"),Yne=a("strong"),Cuo=o("mobilebert"),wuo=o(" \u2014 "),qI=a("a"),Auo=o("MobileBertModel"),yuo=o(" (MobileBERT model)"),Luo=l(),Op=a("li"),Kne=a("strong"),xuo=o("mpnet"),$uo=o(" \u2014 "),NI=a("a"),kuo=o("MPNetModel"),Suo=o(" (MPNet model)"),Ruo=l(),Vp=a("li"),Zne=a("strong"),Buo=o("mt5"),Puo=o(" \u2014 "),jI=a("a"),Iuo=o("MT5Model"),quo=o(" (mT5 model)"),Nuo=l(),Xp=a("li"),ese=a("strong"),juo=o("nystromformer"),Duo=o(" \u2014 "),DI=a("a"),Guo=o("NystromformerModel"),Ouo=o(" (Nystromformer model)"),Vuo=l(),zp=a("li"),ose=a("strong"),Xuo=o("openai-gpt"),zuo=o(" \u2014 "),GI=a("a"),Quo=o("OpenAIGPTModel"),Wuo=o(" (OpenAI GPT model)"),Huo=l(),Qp=a("li"),rse=a("strong"),Uuo=o("opt"),Juo=o(" \u2014 "),OI=a("a"),Yuo=o("OPTModel"),Kuo=o(" (OPT model)"),Zuo=l(),Wp=a("li"),tse=a("strong"),e_o=o("pegasus"),o_o=o(" \u2014 "),VI=a("a"),r_o=o("PegasusModel"),t_o=o(" (Pegasus model)"),a_o=l(),Hp=a("li"),ase=a("strong"),n_o=o("perceiver"),s_o=o(" \u2014 "),XI=a("a"),l_o=o("PerceiverModel"),i_o=o(" (Perceiver model)"),d_o=l(),Up=a("li"),nse=a("strong"),c_o=o("plbart"),f_o=o(" \u2014 "),zI=a("a"),m_o=o("PLBartModel"),g_o=o(" (PLBart model)"),h_o=l(),Jp=a("li"),sse=a("strong"),p_o=o("poolformer"),u_o=o(" \u2014 "),QI=a("a"),__o=o("PoolFormerModel"),b_o=o(" (PoolFormer model)"),v_o=l(),Yp=a("li"),lse=a("strong"),F_o=o("prophetnet"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("ProphetNetModel"),E_o=o(" (ProphetNet model)"),C_o=l(),Kp=a("li"),ise=a("strong"),w_o=o("qdqbert"),A_o=o(" \u2014 "),HI=a("a"),y_o=o("QDQBertModel"),L_o=o(" (QDQBert model)"),x_o=l(),Zp=a("li"),dse=a("strong"),$_o=o("reformer"),k_o=o(" \u2014 "),UI=a("a"),S_o=o("ReformerModel"),R_o=o(" (Reformer model)"),B_o=l(),eu=a("li"),cse=a("strong"),P_o=o("regnet"),I_o=o(" \u2014 "),JI=a("a"),q_o=o("RegNetModel"),N_o=o(" (RegNet model)"),j_o=l(),ou=a("li"),fse=a("strong"),D_o=o("rembert"),G_o=o(" \u2014 "),YI=a("a"),O_o=o("RemBertModel"),V_o=o(" (RemBERT model)"),X_o=l(),ru=a("li"),mse=a("strong"),z_o=o("resnet"),Q_o=o(" \u2014 "),KI=a("a"),W_o=o("ResNetModel"),H_o=o(" (ResNet model)"),U_o=l(),tu=a("li"),gse=a("strong"),J_o=o("retribert"),Y_o=o(" \u2014 "),ZI=a("a"),K_o=o("RetriBertModel"),Z_o=o(" (RetriBERT model)"),e1o=l(),au=a("li"),hse=a("strong"),o1o=o("roberta"),r1o=o(" \u2014 "),eq=a("a"),t1o=o("RobertaModel"),a1o=o(" (RoBERTa model)"),n1o=l(),nu=a("li"),pse=a("strong"),s1o=o("roformer"),l1o=o(" \u2014 "),oq=a("a"),i1o=o("RoFormerModel"),d1o=o(" (RoFormer model)"),c1o=l(),su=a("li"),use=a("strong"),f1o=o("segformer"),m1o=o(" \u2014 "),rq=a("a"),g1o=o("SegformerModel"),h1o=o(" (SegFormer model)"),p1o=l(),lu=a("li"),_se=a("strong"),u1o=o("sew"),_1o=o(" \u2014 "),tq=a("a"),b1o=o("SEWModel"),v1o=o(" (SEW model)"),F1o=l(),iu=a("li"),bse=a("strong"),T1o=o("sew-d"),M1o=o(" \u2014 "),aq=a("a"),E1o=o("SEWDModel"),C1o=o(" (SEW-D model)"),w1o=l(),du=a("li"),vse=a("strong"),A1o=o("speech_to_text"),y1o=o(" \u2014 "),nq=a("a"),L1o=o("Speech2TextModel"),x1o=o(" (Speech2Text model)"),$1o=l(),cu=a("li"),Fse=a("strong"),k1o=o("splinter"),S1o=o(" \u2014 "),sq=a("a"),R1o=o("SplinterModel"),B1o=o(" (Splinter model)"),P1o=l(),fu=a("li"),Tse=a("strong"),I1o=o("squeezebert"),q1o=o(" \u2014 "),lq=a("a"),N1o=o("SqueezeBertModel"),j1o=o(" (SqueezeBERT model)"),D1o=l(),mu=a("li"),Mse=a("strong"),G1o=o("swin"),O1o=o(" \u2014 "),iq=a("a"),V1o=o("SwinModel"),X1o=o(" (Swin model)"),z1o=l(),gu=a("li"),Ese=a("strong"),Q1o=o("t5"),W1o=o(" \u2014 "),dq=a("a"),H1o=o("T5Model"),U1o=o(" (T5 model)"),J1o=l(),hu=a("li"),Cse=a("strong"),Y1o=o("tapas"),K1o=o(" \u2014 "),cq=a("a"),Z1o=o("TapasModel"),e8o=o(" (TAPAS model)"),o8o=l(),pu=a("li"),wse=a("strong"),r8o=o("transfo-xl"),t8o=o(" \u2014 "),fq=a("a"),a8o=o("TransfoXLModel"),n8o=o(" (Transformer-XL model)"),s8o=l(),uu=a("li"),Ase=a("strong"),l8o=o("unispeech"),i8o=o(" \u2014 "),mq=a("a"),d8o=o("UniSpeechModel"),c8o=o(" (UniSpeech model)"),f8o=l(),_u=a("li"),yse=a("strong"),m8o=o("unispeech-sat"),g8o=o(" \u2014 "),gq=a("a"),h8o=o("UniSpeechSatModel"),p8o=o(" (UniSpeechSat model)"),u8o=l(),bu=a("li"),Lse=a("strong"),_8o=o("van"),b8o=o(" \u2014 "),hq=a("a"),v8o=o("VanModel"),F8o=o(" (VAN model)"),T8o=l(),vu=a("li"),xse=a("strong"),M8o=o("vilt"),E8o=o(" \u2014 "),pq=a("a"),C8o=o("ViltModel"),w8o=o(" (ViLT model)"),A8o=l(),Fu=a("li"),$se=a("strong"),y8o=o("vision-text-dual-encoder"),L8o=o(" \u2014 "),uq=a("a"),x8o=o("VisionTextDualEncoderModel"),$8o=o(" (VisionTextDualEncoder model)"),k8o=l(),Tu=a("li"),kse=a("strong"),S8o=o("visual_bert"),R8o=o(" \u2014 "),_q=a("a"),B8o=o("VisualBertModel"),P8o=o(" (VisualBert model)"),I8o=l(),Mu=a("li"),Sse=a("strong"),q8o=o("vit"),N8o=o(" \u2014 "),bq=a("a"),j8o=o("ViTModel"),D8o=o(" (ViT model)"),G8o=l(),Eu=a("li"),Rse=a("strong"),O8o=o("vit_mae"),V8o=o(" \u2014 "),vq=a("a"),X8o=o("ViTMAEModel"),z8o=o(" (ViTMAE model)"),Q8o=l(),Cu=a("li"),Bse=a("strong"),W8o=o("wav2vec2"),H8o=o(" \u2014 "),Fq=a("a"),U8o=o("Wav2Vec2Model"),J8o=o(" (Wav2Vec2 model)"),Y8o=l(),wu=a("li"),Pse=a("strong"),K8o=o("wavlm"),Z8o=o(" \u2014 "),Tq=a("a"),ebo=o("WavLMModel"),obo=o(" (WavLM model)"),rbo=l(),Au=a("li"),Ise=a("strong"),tbo=o("xglm"),abo=o(" \u2014 "),Mq=a("a"),nbo=o("XGLMModel"),sbo=o(" (XGLM model)"),lbo=l(),yu=a("li"),qse=a("strong"),ibo=o("xlm"),dbo=o(" \u2014 "),Eq=a("a"),cbo=o("XLMModel"),fbo=o(" (XLM model)"),mbo=l(),Lu=a("li"),Nse=a("strong"),gbo=o("xlm-prophetnet"),hbo=o(" \u2014 "),Cq=a("a"),pbo=o("XLMProphetNetModel"),ubo=o(" (XLMProphetNet model)"),_bo=l(),xu=a("li"),jse=a("strong"),bbo=o("xlm-roberta"),vbo=o(" \u2014 "),wq=a("a"),Fbo=o("XLMRobertaModel"),Tbo=o(" (XLM-RoBERTa model)"),Mbo=l(),$u=a("li"),Dse=a("strong"),Ebo=o("xlm-roberta-xl"),Cbo=o(" \u2014 "),Aq=a("a"),wbo=o("XLMRobertaXLModel"),Abo=o(" (XLM-RoBERTa-XL model)"),ybo=l(),ku=a("li"),Gse=a("strong"),Lbo=o("xlnet"),xbo=o(" \u2014 "),yq=a("a"),$bo=o("XLNetModel"),kbo=o(" (XLNet model)"),Sbo=l(),Su=a("li"),Ose=a("strong"),Rbo=o("yolos"),Bbo=o(" \u2014 "),Lq=a("a"),Pbo=o("YolosModel"),Ibo=o(" (YOLOS model)"),qbo=l(),Ru=a("li"),Vse=a("strong"),Nbo=o("yoso"),jbo=o(" \u2014 "),xq=a("a"),Dbo=o("YosoModel"),Gbo=o(" (YOSO model)"),Obo=l(),Bu=a("p"),Vbo=o("The model is set in evaluation mode by default using "),Xse=a("code"),Xbo=o("model.eval()"),zbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=a("code"),Qbo=o("model.train()"),Wbo=l(),F(Pu.$$.fragment),eIe=l(),wi=a("h2"),Iu=a("a"),Qse=a("span"),F(LA.$$.fragment),Hbo=l(),Wse=a("span"),Ubo=o("AutoModelForPreTraining"),oIe=l(),xo=a("div"),F(xA.$$.fragment),Jbo=l(),Ai=a("p"),Ybo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$q=a("a"),Kbo=o("from_pretrained()"),Zbo=o(" class method or the "),kq=a("a"),e2o=o("from_config()"),o2o=o(` class
method.`),r2o=l(),$A=a("p"),t2o=o("This class cannot be instantiated directly using "),Hse=a("code"),a2o=o("__init__()"),n2o=o(" (throws an error)."),s2o=l(),rt=a("div"),F(kA.$$.fragment),l2o=l(),Use=a("p"),i2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d2o=l(),yi=a("p"),c2o=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),f2o=o("not"),m2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sq=a("a"),g2o=o("from_pretrained()"),h2o=o(" to load the model weights."),p2o=l(),F(qu.$$.fragment),u2o=l(),Ue=a("div"),F(SA.$$.fragment),_2o=l(),Yse=a("p"),b2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v2o=l(),ya=a("p"),F2o=o("The model class to instantiate is selected based on the "),Kse=a("code"),T2o=o("model_type"),M2o=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),E2o=o("pretrained_model_name_or_path"),C2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),w2o=o("pretrained_model_name_or_path"),A2o=o(":"),y2o=l(),G=a("ul"),Nu=a("li"),ole=a("strong"),L2o=o("albert"),x2o=o(" \u2014 "),Rq=a("a"),$2o=o("AlbertForPreTraining"),k2o=o(" (ALBERT model)"),S2o=l(),ju=a("li"),rle=a("strong"),R2o=o("bart"),B2o=o(" \u2014 "),Bq=a("a"),P2o=o("BartForConditionalGeneration"),I2o=o(" (BART model)"),q2o=l(),Du=a("li"),tle=a("strong"),N2o=o("bert"),j2o=o(" \u2014 "),Pq=a("a"),D2o=o("BertForPreTraining"),G2o=o(" (BERT model)"),O2o=l(),Gu=a("li"),ale=a("strong"),V2o=o("big_bird"),X2o=o(" \u2014 "),Iq=a("a"),z2o=o("BigBirdForPreTraining"),Q2o=o(" (BigBird model)"),W2o=l(),Ou=a("li"),nle=a("strong"),H2o=o("camembert"),U2o=o(" \u2014 "),qq=a("a"),J2o=o("CamembertForMaskedLM"),Y2o=o(" (CamemBERT model)"),K2o=l(),Vu=a("li"),sle=a("strong"),Z2o=o("ctrl"),evo=o(" \u2014 "),Nq=a("a"),ovo=o("CTRLLMHeadModel"),rvo=o(" (CTRL model)"),tvo=l(),Xu=a("li"),lle=a("strong"),avo=o("data2vec-text"),nvo=o(" \u2014 "),jq=a("a"),svo=o("Data2VecTextForMaskedLM"),lvo=o(" (Data2VecText model)"),ivo=l(),zu=a("li"),ile=a("strong"),dvo=o("deberta"),cvo=o(" \u2014 "),Dq=a("a"),fvo=o("DebertaForMaskedLM"),mvo=o(" (DeBERTa model)"),gvo=l(),Qu=a("li"),dle=a("strong"),hvo=o("deberta-v2"),pvo=o(" \u2014 "),Gq=a("a"),uvo=o("DebertaV2ForMaskedLM"),_vo=o(" (DeBERTa-v2 model)"),bvo=l(),Wu=a("li"),cle=a("strong"),vvo=o("distilbert"),Fvo=o(" \u2014 "),Oq=a("a"),Tvo=o("DistilBertForMaskedLM"),Mvo=o(" (DistilBERT model)"),Evo=l(),Hu=a("li"),fle=a("strong"),Cvo=o("electra"),wvo=o(" \u2014 "),Vq=a("a"),Avo=o("ElectraForPreTraining"),yvo=o(" (ELECTRA model)"),Lvo=l(),Uu=a("li"),mle=a("strong"),xvo=o("flaubert"),$vo=o(" \u2014 "),Xq=a("a"),kvo=o("FlaubertWithLMHeadModel"),Svo=o(" (FlauBERT model)"),Rvo=l(),Ju=a("li"),gle=a("strong"),Bvo=o("flava"),Pvo=o(" \u2014 "),zq=a("a"),Ivo=o("FlavaForPreTraining"),qvo=o(" (Flava model)"),Nvo=l(),Yu=a("li"),hle=a("strong"),jvo=o("fnet"),Dvo=o(" \u2014 "),Qq=a("a"),Gvo=o("FNetForPreTraining"),Ovo=o(" (FNet model)"),Vvo=l(),Ku=a("li"),ple=a("strong"),Xvo=o("fsmt"),zvo=o(" \u2014 "),Wq=a("a"),Qvo=o("FSMTForConditionalGeneration"),Wvo=o(" (FairSeq Machine-Translation model)"),Hvo=l(),Zu=a("li"),ule=a("strong"),Uvo=o("funnel"),Jvo=o(" \u2014 "),Hq=a("a"),Yvo=o("FunnelForPreTraining"),Kvo=o(" (Funnel Transformer model)"),Zvo=l(),e_=a("li"),_le=a("strong"),eFo=o("gpt2"),oFo=o(" \u2014 "),Uq=a("a"),rFo=o("GPT2LMHeadModel"),tFo=o(" (OpenAI GPT-2 model)"),aFo=l(),o_=a("li"),ble=a("strong"),nFo=o("ibert"),sFo=o(" \u2014 "),Jq=a("a"),lFo=o("IBertForMaskedLM"),iFo=o(" (I-BERT model)"),dFo=l(),r_=a("li"),vle=a("strong"),cFo=o("layoutlm"),fFo=o(" \u2014 "),Yq=a("a"),mFo=o("LayoutLMForMaskedLM"),gFo=o(" (LayoutLM model)"),hFo=l(),t_=a("li"),Fle=a("strong"),pFo=o("longformer"),uFo=o(" \u2014 "),Kq=a("a"),_Fo=o("LongformerForMaskedLM"),bFo=o(" (Longformer model)"),vFo=l(),a_=a("li"),Tle=a("strong"),FFo=o("lxmert"),TFo=o(" \u2014 "),Zq=a("a"),MFo=o("LxmertForPreTraining"),EFo=o(" (LXMERT model)"),CFo=l(),n_=a("li"),Mle=a("strong"),wFo=o("megatron-bert"),AFo=o(" \u2014 "),eN=a("a"),yFo=o("MegatronBertForPreTraining"),LFo=o(" (MegatronBert model)"),xFo=l(),s_=a("li"),Ele=a("strong"),$Fo=o("mobilebert"),kFo=o(" \u2014 "),oN=a("a"),SFo=o("MobileBertForPreTraining"),RFo=o(" (MobileBERT model)"),BFo=l(),l_=a("li"),Cle=a("strong"),PFo=o("mpnet"),IFo=o(" \u2014 "),rN=a("a"),qFo=o("MPNetForMaskedLM"),NFo=o(" (MPNet model)"),jFo=l(),i_=a("li"),wle=a("strong"),DFo=o("openai-gpt"),GFo=o(" \u2014 "),tN=a("a"),OFo=o("OpenAIGPTLMHeadModel"),VFo=o(" (OpenAI GPT model)"),XFo=l(),d_=a("li"),Ale=a("strong"),zFo=o("retribert"),QFo=o(" \u2014 "),aN=a("a"),WFo=o("RetriBertModel"),HFo=o(" (RetriBERT model)"),UFo=l(),c_=a("li"),yle=a("strong"),JFo=o("roberta"),YFo=o(" \u2014 "),nN=a("a"),KFo=o("RobertaForMaskedLM"),ZFo=o(" (RoBERTa model)"),e6o=l(),f_=a("li"),Lle=a("strong"),o6o=o("squeezebert"),r6o=o(" \u2014 "),sN=a("a"),t6o=o("SqueezeBertForMaskedLM"),a6o=o(" (SqueezeBERT model)"),n6o=l(),m_=a("li"),xle=a("strong"),s6o=o("t5"),l6o=o(" \u2014 "),lN=a("a"),i6o=o("T5ForConditionalGeneration"),d6o=o(" (T5 model)"),c6o=l(),g_=a("li"),$le=a("strong"),f6o=o("tapas"),m6o=o(" \u2014 "),iN=a("a"),g6o=o("TapasForMaskedLM"),h6o=o(" (TAPAS model)"),p6o=l(),h_=a("li"),kle=a("strong"),u6o=o("transfo-xl"),_6o=o(" \u2014 "),dN=a("a"),b6o=o("TransfoXLLMHeadModel"),v6o=o(" (Transformer-XL model)"),F6o=l(),p_=a("li"),Sle=a("strong"),T6o=o("unispeech"),M6o=o(" \u2014 "),cN=a("a"),E6o=o("UniSpeechForPreTraining"),C6o=o(" (UniSpeech model)"),w6o=l(),u_=a("li"),Rle=a("strong"),A6o=o("unispeech-sat"),y6o=o(" \u2014 "),fN=a("a"),L6o=o("UniSpeechSatForPreTraining"),x6o=o(" (UniSpeechSat model)"),$6o=l(),__=a("li"),Ble=a("strong"),k6o=o("visual_bert"),S6o=o(" \u2014 "),mN=a("a"),R6o=o("VisualBertForPreTraining"),B6o=o(" (VisualBert model)"),P6o=l(),b_=a("li"),Ple=a("strong"),I6o=o("vit_mae"),q6o=o(" \u2014 "),gN=a("a"),N6o=o("ViTMAEForPreTraining"),j6o=o(" (ViTMAE model)"),D6o=l(),v_=a("li"),Ile=a("strong"),G6o=o("wav2vec2"),O6o=o(" \u2014 "),hN=a("a"),V6o=o("Wav2Vec2ForPreTraining"),X6o=o(" (Wav2Vec2 model)"),z6o=l(),F_=a("li"),qle=a("strong"),Q6o=o("xlm"),W6o=o(" \u2014 "),pN=a("a"),H6o=o("XLMWithLMHeadModel"),U6o=o(" (XLM model)"),J6o=l(),T_=a("li"),Nle=a("strong"),Y6o=o("xlm-roberta"),K6o=o(" \u2014 "),uN=a("a"),Z6o=o("XLMRobertaForMaskedLM"),eTo=o(" (XLM-RoBERTa model)"),oTo=l(),M_=a("li"),jle=a("strong"),rTo=o("xlm-roberta-xl"),tTo=o(" \u2014 "),_N=a("a"),aTo=o("XLMRobertaXLForMaskedLM"),nTo=o(" (XLM-RoBERTa-XL model)"),sTo=l(),E_=a("li"),Dle=a("strong"),lTo=o("xlnet"),iTo=o(" \u2014 "),bN=a("a"),dTo=o("XLNetLMHeadModel"),cTo=o(" (XLNet model)"),fTo=l(),C_=a("p"),mTo=o("The model is set in evaluation mode by default using "),Gle=a("code"),gTo=o("model.eval()"),hTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),pTo=o("model.train()"),uTo=l(),F(w_.$$.fragment),rIe=l(),Li=a("h2"),A_=a("a"),Vle=a("span"),F(RA.$$.fragment),_To=l(),Xle=a("span"),bTo=o("AutoModelForCausalLM"),tIe=l(),$o=a("div"),F(BA.$$.fragment),vTo=l(),xi=a("p"),FTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=a("a"),TTo=o("from_pretrained()"),MTo=o(" class method or the "),FN=a("a"),ETo=o("from_config()"),CTo=o(` class
method.`),wTo=l(),PA=a("p"),ATo=o("This class cannot be instantiated directly using "),zle=a("code"),yTo=o("__init__()"),LTo=o(" (throws an error)."),xTo=l(),tt=a("div"),F(IA.$$.fragment),$To=l(),Qle=a("p"),kTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),STo=l(),$i=a("p"),RTo=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),BTo=o("not"),PTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),ITo=o("from_pretrained()"),qTo=o(" to load the model weights."),NTo=l(),F(y_.$$.fragment),jTo=l(),Je=a("div"),F(qA.$$.fragment),DTo=l(),Hle=a("p"),GTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OTo=l(),La=a("p"),VTo=o("The model class to instantiate is selected based on the "),Ule=a("code"),XTo=o("model_type"),zTo=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),QTo=o("pretrained_model_name_or_path"),WTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),HTo=o("pretrained_model_name_or_path"),UTo=o(":"),JTo=l(),z=a("ul"),L_=a("li"),Kle=a("strong"),YTo=o("bart"),KTo=o(" \u2014 "),MN=a("a"),ZTo=o("BartForCausalLM"),e9o=o(" (BART model)"),o9o=l(),x_=a("li"),Zle=a("strong"),r9o=o("bert"),t9o=o(" \u2014 "),EN=a("a"),a9o=o("BertLMHeadModel"),n9o=o(" (BERT model)"),s9o=l(),$_=a("li"),eie=a("strong"),l9o=o("bert-generation"),i9o=o(" \u2014 "),CN=a("a"),d9o=o("BertGenerationDecoder"),c9o=o(" (Bert Generation model)"),f9o=l(),k_=a("li"),oie=a("strong"),m9o=o("big_bird"),g9o=o(" \u2014 "),wN=a("a"),h9o=o("BigBirdForCausalLM"),p9o=o(" (BigBird model)"),u9o=l(),S_=a("li"),rie=a("strong"),_9o=o("bigbird_pegasus"),b9o=o(" \u2014 "),AN=a("a"),v9o=o("BigBirdPegasusForCausalLM"),F9o=o(" (BigBirdPegasus model)"),T9o=l(),R_=a("li"),tie=a("strong"),M9o=o("blenderbot"),E9o=o(" \u2014 "),yN=a("a"),C9o=o("BlenderbotForCausalLM"),w9o=o(" (Blenderbot model)"),A9o=l(),B_=a("li"),aie=a("strong"),y9o=o("blenderbot-small"),L9o=o(" \u2014 "),LN=a("a"),x9o=o("BlenderbotSmallForCausalLM"),$9o=o(" (BlenderbotSmall model)"),k9o=l(),P_=a("li"),nie=a("strong"),S9o=o("camembert"),R9o=o(" \u2014 "),xN=a("a"),B9o=o("CamembertForCausalLM"),P9o=o(" (CamemBERT model)"),I9o=l(),I_=a("li"),sie=a("strong"),q9o=o("ctrl"),N9o=o(" \u2014 "),$N=a("a"),j9o=o("CTRLLMHeadModel"),D9o=o(" (CTRL model)"),G9o=l(),q_=a("li"),lie=a("strong"),O9o=o("data2vec-text"),V9o=o(" \u2014 "),kN=a("a"),X9o=o("Data2VecTextForCausalLM"),z9o=o(" (Data2VecText model)"),Q9o=l(),N_=a("li"),iie=a("strong"),W9o=o("electra"),H9o=o(" \u2014 "),SN=a("a"),U9o=o("ElectraForCausalLM"),J9o=o(" (ELECTRA model)"),Y9o=l(),j_=a("li"),die=a("strong"),K9o=o("gpt2"),Z9o=o(" \u2014 "),RN=a("a"),eMo=o("GPT2LMHeadModel"),oMo=o(" (OpenAI GPT-2 model)"),rMo=l(),D_=a("li"),cie=a("strong"),tMo=o("gpt_neo"),aMo=o(" \u2014 "),BN=a("a"),nMo=o("GPTNeoForCausalLM"),sMo=o(" (GPT Neo model)"),lMo=l(),G_=a("li"),fie=a("strong"),iMo=o("gptj"),dMo=o(" \u2014 "),PN=a("a"),cMo=o("GPTJForCausalLM"),fMo=o(" (GPT-J model)"),mMo=l(),O_=a("li"),mie=a("strong"),gMo=o("marian"),hMo=o(" \u2014 "),IN=a("a"),pMo=o("MarianForCausalLM"),uMo=o(" (Marian model)"),_Mo=l(),V_=a("li"),gie=a("strong"),bMo=o("mbart"),vMo=o(" \u2014 "),qN=a("a"),FMo=o("MBartForCausalLM"),TMo=o(" (mBART model)"),MMo=l(),X_=a("li"),hie=a("strong"),EMo=o("megatron-bert"),CMo=o(" \u2014 "),NN=a("a"),wMo=o("MegatronBertForCausalLM"),AMo=o(" (MegatronBert model)"),yMo=l(),z_=a("li"),pie=a("strong"),LMo=o("openai-gpt"),xMo=o(" \u2014 "),jN=a("a"),$Mo=o("OpenAIGPTLMHeadModel"),kMo=o(" (OpenAI GPT model)"),SMo=l(),Q_=a("li"),uie=a("strong"),RMo=o("opt"),BMo=o(" \u2014 "),DN=a("a"),PMo=o("OPTForCausalLM"),IMo=o(" (OPT model)"),qMo=l(),W_=a("li"),_ie=a("strong"),NMo=o("pegasus"),jMo=o(" \u2014 "),GN=a("a"),DMo=o("PegasusForCausalLM"),GMo=o(" (Pegasus model)"),OMo=l(),H_=a("li"),bie=a("strong"),VMo=o("plbart"),XMo=o(" \u2014 "),ON=a("a"),zMo=o("PLBartForCausalLM"),QMo=o(" (PLBart model)"),WMo=l(),U_=a("li"),vie=a("strong"),HMo=o("prophetnet"),UMo=o(" \u2014 "),VN=a("a"),JMo=o("ProphetNetForCausalLM"),YMo=o(" (ProphetNet model)"),KMo=l(),J_=a("li"),Fie=a("strong"),ZMo=o("qdqbert"),e4o=o(" \u2014 "),XN=a("a"),o4o=o("QDQBertLMHeadModel"),r4o=o(" (QDQBert model)"),t4o=l(),Y_=a("li"),Tie=a("strong"),a4o=o("reformer"),n4o=o(" \u2014 "),zN=a("a"),s4o=o("ReformerModelWithLMHead"),l4o=o(" (Reformer model)"),i4o=l(),K_=a("li"),Mie=a("strong"),d4o=o("rembert"),c4o=o(" \u2014 "),QN=a("a"),f4o=o("RemBertForCausalLM"),m4o=o(" (RemBERT model)"),g4o=l(),Z_=a("li"),Eie=a("strong"),h4o=o("roberta"),p4o=o(" \u2014 "),WN=a("a"),u4o=o("RobertaForCausalLM"),_4o=o(" (RoBERTa model)"),b4o=l(),e1=a("li"),Cie=a("strong"),v4o=o("roformer"),F4o=o(" \u2014 "),HN=a("a"),T4o=o("RoFormerForCausalLM"),M4o=o(" (RoFormer model)"),E4o=l(),o1=a("li"),wie=a("strong"),C4o=o("speech_to_text_2"),w4o=o(" \u2014 "),UN=a("a"),A4o=o("Speech2Text2ForCausalLM"),y4o=o(" (Speech2Text2 model)"),L4o=l(),r1=a("li"),Aie=a("strong"),x4o=o("transfo-xl"),$4o=o(" \u2014 "),JN=a("a"),k4o=o("TransfoXLLMHeadModel"),S4o=o(" (Transformer-XL model)"),R4o=l(),t1=a("li"),yie=a("strong"),B4o=o("trocr"),P4o=o(" \u2014 "),YN=a("a"),I4o=o("TrOCRForCausalLM"),q4o=o(" (TrOCR model)"),N4o=l(),a1=a("li"),Lie=a("strong"),j4o=o("xglm"),D4o=o(" \u2014 "),KN=a("a"),G4o=o("XGLMForCausalLM"),O4o=o(" (XGLM model)"),V4o=l(),n1=a("li"),xie=a("strong"),X4o=o("xlm"),z4o=o(" \u2014 "),ZN=a("a"),Q4o=o("XLMWithLMHeadModel"),W4o=o(" (XLM model)"),H4o=l(),s1=a("li"),$ie=a("strong"),U4o=o("xlm-prophetnet"),J4o=o(" \u2014 "),ej=a("a"),Y4o=o("XLMProphetNetForCausalLM"),K4o=o(" (XLMProphetNet model)"),Z4o=l(),l1=a("li"),kie=a("strong"),eEo=o("xlm-roberta"),oEo=o(" \u2014 "),oj=a("a"),rEo=o("XLMRobertaForCausalLM"),tEo=o(" (XLM-RoBERTa model)"),aEo=l(),i1=a("li"),Sie=a("strong"),nEo=o("xlm-roberta-xl"),sEo=o(" \u2014 "),rj=a("a"),lEo=o("XLMRobertaXLForCausalLM"),iEo=o(" (XLM-RoBERTa-XL model)"),dEo=l(),d1=a("li"),Rie=a("strong"),cEo=o("xlnet"),fEo=o(" \u2014 "),tj=a("a"),mEo=o("XLNetLMHeadModel"),gEo=o(" (XLNet model)"),hEo=l(),c1=a("p"),pEo=o("The model is set in evaluation mode by default using "),Bie=a("code"),uEo=o("model.eval()"),_Eo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),bEo=o("model.train()"),vEo=l(),F(f1.$$.fragment),aIe=l(),ki=a("h2"),m1=a("a"),Iie=a("span"),F(NA.$$.fragment),FEo=l(),qie=a("span"),TEo=o("AutoModelForMaskedLM"),nIe=l(),ko=a("div"),F(jA.$$.fragment),MEo=l(),Si=a("p"),EEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aj=a("a"),CEo=o("from_pretrained()"),wEo=o(" class method or the "),nj=a("a"),AEo=o("from_config()"),yEo=o(` class
method.`),LEo=l(),DA=a("p"),xEo=o("This class cannot be instantiated directly using "),Nie=a("code"),$Eo=o("__init__()"),kEo=o(" (throws an error)."),SEo=l(),at=a("div"),F(GA.$$.fragment),REo=l(),jie=a("p"),BEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PEo=l(),Ri=a("p"),IEo=o(`Note:
Loading a model from its configuration file does `),Die=a("strong"),qEo=o("not"),NEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),jEo=o("from_pretrained()"),DEo=o(" to load the model weights."),GEo=l(),F(g1.$$.fragment),OEo=l(),Ye=a("div"),F(OA.$$.fragment),VEo=l(),Gie=a("p"),XEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zEo=l(),xa=a("p"),QEo=o("The model class to instantiate is selected based on the "),Oie=a("code"),WEo=o("model_type"),HEo=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),UEo=o("pretrained_model_name_or_path"),JEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=a("code"),YEo=o("pretrained_model_name_or_path"),KEo=o(":"),ZEo=l(),Q=a("ul"),h1=a("li"),zie=a("strong"),e5o=o("albert"),o5o=o(" \u2014 "),lj=a("a"),r5o=o("AlbertForMaskedLM"),t5o=o(" (ALBERT model)"),a5o=l(),p1=a("li"),Qie=a("strong"),n5o=o("bart"),s5o=o(" \u2014 "),ij=a("a"),l5o=o("BartForConditionalGeneration"),i5o=o(" (BART model)"),d5o=l(),u1=a("li"),Wie=a("strong"),c5o=o("bert"),f5o=o(" \u2014 "),dj=a("a"),m5o=o("BertForMaskedLM"),g5o=o(" (BERT model)"),h5o=l(),_1=a("li"),Hie=a("strong"),p5o=o("big_bird"),u5o=o(" \u2014 "),cj=a("a"),_5o=o("BigBirdForMaskedLM"),b5o=o(" (BigBird model)"),v5o=l(),b1=a("li"),Uie=a("strong"),F5o=o("camembert"),T5o=o(" \u2014 "),fj=a("a"),M5o=o("CamembertForMaskedLM"),E5o=o(" (CamemBERT model)"),C5o=l(),v1=a("li"),Jie=a("strong"),w5o=o("convbert"),A5o=o(" \u2014 "),mj=a("a"),y5o=o("ConvBertForMaskedLM"),L5o=o(" (ConvBERT model)"),x5o=l(),F1=a("li"),Yie=a("strong"),$5o=o("data2vec-text"),k5o=o(" \u2014 "),gj=a("a"),S5o=o("Data2VecTextForMaskedLM"),R5o=o(" (Data2VecText model)"),B5o=l(),T1=a("li"),Kie=a("strong"),P5o=o("deberta"),I5o=o(" \u2014 "),hj=a("a"),q5o=o("DebertaForMaskedLM"),N5o=o(" (DeBERTa model)"),j5o=l(),M1=a("li"),Zie=a("strong"),D5o=o("deberta-v2"),G5o=o(" \u2014 "),pj=a("a"),O5o=o("DebertaV2ForMaskedLM"),V5o=o(" (DeBERTa-v2 model)"),X5o=l(),E1=a("li"),ede=a("strong"),z5o=o("distilbert"),Q5o=o(" \u2014 "),uj=a("a"),W5o=o("DistilBertForMaskedLM"),H5o=o(" (DistilBERT model)"),U5o=l(),C1=a("li"),ode=a("strong"),J5o=o("electra"),Y5o=o(" \u2014 "),_j=a("a"),K5o=o("ElectraForMaskedLM"),Z5o=o(" (ELECTRA model)"),eCo=l(),w1=a("li"),rde=a("strong"),oCo=o("flaubert"),rCo=o(" \u2014 "),bj=a("a"),tCo=o("FlaubertWithLMHeadModel"),aCo=o(" (FlauBERT model)"),nCo=l(),A1=a("li"),tde=a("strong"),sCo=o("fnet"),lCo=o(" \u2014 "),vj=a("a"),iCo=o("FNetForMaskedLM"),dCo=o(" (FNet model)"),cCo=l(),y1=a("li"),ade=a("strong"),fCo=o("funnel"),mCo=o(" \u2014 "),Fj=a("a"),gCo=o("FunnelForMaskedLM"),hCo=o(" (Funnel Transformer model)"),pCo=l(),L1=a("li"),nde=a("strong"),uCo=o("ibert"),_Co=o(" \u2014 "),Tj=a("a"),bCo=o("IBertForMaskedLM"),vCo=o(" (I-BERT model)"),FCo=l(),x1=a("li"),sde=a("strong"),TCo=o("layoutlm"),MCo=o(" \u2014 "),Mj=a("a"),ECo=o("LayoutLMForMaskedLM"),CCo=o(" (LayoutLM model)"),wCo=l(),$1=a("li"),lde=a("strong"),ACo=o("longformer"),yCo=o(" \u2014 "),Ej=a("a"),LCo=o("LongformerForMaskedLM"),xCo=o(" (Longformer model)"),$Co=l(),k1=a("li"),ide=a("strong"),kCo=o("mbart"),SCo=o(" \u2014 "),Cj=a("a"),RCo=o("MBartForConditionalGeneration"),BCo=o(" (mBART model)"),PCo=l(),S1=a("li"),dde=a("strong"),ICo=o("megatron-bert"),qCo=o(" \u2014 "),wj=a("a"),NCo=o("MegatronBertForMaskedLM"),jCo=o(" (MegatronBert model)"),DCo=l(),R1=a("li"),cde=a("strong"),GCo=o("mobilebert"),OCo=o(" \u2014 "),Aj=a("a"),VCo=o("MobileBertForMaskedLM"),XCo=o(" (MobileBERT model)"),zCo=l(),B1=a("li"),fde=a("strong"),QCo=o("mpnet"),WCo=o(" \u2014 "),yj=a("a"),HCo=o("MPNetForMaskedLM"),UCo=o(" (MPNet model)"),JCo=l(),P1=a("li"),mde=a("strong"),YCo=o("nystromformer"),KCo=o(" \u2014 "),Lj=a("a"),ZCo=o("NystromformerForMaskedLM"),e3o=o(" (Nystromformer model)"),o3o=l(),I1=a("li"),gde=a("strong"),r3o=o("perceiver"),t3o=o(" \u2014 "),xj=a("a"),a3o=o("PerceiverForMaskedLM"),n3o=o(" (Perceiver model)"),s3o=l(),q1=a("li"),hde=a("strong"),l3o=o("qdqbert"),i3o=o(" \u2014 "),$j=a("a"),d3o=o("QDQBertForMaskedLM"),c3o=o(" (QDQBert model)"),f3o=l(),N1=a("li"),pde=a("strong"),m3o=o("reformer"),g3o=o(" \u2014 "),kj=a("a"),h3o=o("ReformerForMaskedLM"),p3o=o(" (Reformer model)"),u3o=l(),j1=a("li"),ude=a("strong"),_3o=o("rembert"),b3o=o(" \u2014 "),Sj=a("a"),v3o=o("RemBertForMaskedLM"),F3o=o(" (RemBERT model)"),T3o=l(),D1=a("li"),_de=a("strong"),M3o=o("roberta"),E3o=o(" \u2014 "),Rj=a("a"),C3o=o("RobertaForMaskedLM"),w3o=o(" (RoBERTa model)"),A3o=l(),G1=a("li"),bde=a("strong"),y3o=o("roformer"),L3o=o(" \u2014 "),Bj=a("a"),x3o=o("RoFormerForMaskedLM"),$3o=o(" (RoFormer model)"),k3o=l(),O1=a("li"),vde=a("strong"),S3o=o("squeezebert"),R3o=o(" \u2014 "),Pj=a("a"),B3o=o("SqueezeBertForMaskedLM"),P3o=o(" (SqueezeBERT model)"),I3o=l(),V1=a("li"),Fde=a("strong"),q3o=o("tapas"),N3o=o(" \u2014 "),Ij=a("a"),j3o=o("TapasForMaskedLM"),D3o=o(" (TAPAS model)"),G3o=l(),X1=a("li"),Tde=a("strong"),O3o=o("wav2vec2"),V3o=o(" \u2014 "),Mde=a("code"),X3o=o("Wav2Vec2ForMaskedLM"),z3o=o(" (Wav2Vec2 model)"),Q3o=l(),z1=a("li"),Ede=a("strong"),W3o=o("xlm"),H3o=o(" \u2014 "),qj=a("a"),U3o=o("XLMWithLMHeadModel"),J3o=o(" (XLM model)"),Y3o=l(),Q1=a("li"),Cde=a("strong"),K3o=o("xlm-roberta"),Z3o=o(" \u2014 "),Nj=a("a"),ewo=o("XLMRobertaForMaskedLM"),owo=o(" (XLM-RoBERTa model)"),rwo=l(),W1=a("li"),wde=a("strong"),two=o("xlm-roberta-xl"),awo=o(" \u2014 "),jj=a("a"),nwo=o("XLMRobertaXLForMaskedLM"),swo=o(" (XLM-RoBERTa-XL model)"),lwo=l(),H1=a("li"),Ade=a("strong"),iwo=o("yoso"),dwo=o(" \u2014 "),Dj=a("a"),cwo=o("YosoForMaskedLM"),fwo=o(" (YOSO model)"),mwo=l(),U1=a("p"),gwo=o("The model is set in evaluation mode by default using "),yde=a("code"),hwo=o("model.eval()"),pwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=a("code"),uwo=o("model.train()"),_wo=l(),F(J1.$$.fragment),sIe=l(),Bi=a("h2"),Y1=a("a"),xde=a("span"),F(VA.$$.fragment),bwo=l(),$de=a("span"),vwo=o("AutoModelForSeq2SeqLM"),lIe=l(),So=a("div"),F(XA.$$.fragment),Fwo=l(),Pi=a("p"),Two=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gj=a("a"),Mwo=o("from_pretrained()"),Ewo=o(" class method or the "),Oj=a("a"),Cwo=o("from_config()"),wwo=o(` class
method.`),Awo=l(),zA=a("p"),ywo=o("This class cannot be instantiated directly using "),kde=a("code"),Lwo=o("__init__()"),xwo=o(" (throws an error)."),$wo=l(),nt=a("div"),F(QA.$$.fragment),kwo=l(),Sde=a("p"),Swo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rwo=l(),Ii=a("p"),Bwo=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),Pwo=o("not"),Iwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),qwo=o("from_pretrained()"),Nwo=o(" to load the model weights."),jwo=l(),F(K1.$$.fragment),Dwo=l(),Ke=a("div"),F(WA.$$.fragment),Gwo=l(),Bde=a("p"),Owo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vwo=l(),$a=a("p"),Xwo=o("The model class to instantiate is selected based on the "),Pde=a("code"),zwo=o("model_type"),Qwo=o(` property of the config object (either
passed as an argument or loaded from `),Ide=a("code"),Wwo=o("pretrained_model_name_or_path"),Hwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),Uwo=o("pretrained_model_name_or_path"),Jwo=o(":"),Ywo=l(),pe=a("ul"),Z1=a("li"),Nde=a("strong"),Kwo=o("bart"),Zwo=o(" \u2014 "),Xj=a("a"),eAo=o("BartForConditionalGeneration"),oAo=o(" (BART model)"),rAo=l(),e8=a("li"),jde=a("strong"),tAo=o("bigbird_pegasus"),aAo=o(" \u2014 "),zj=a("a"),nAo=o("BigBirdPegasusForConditionalGeneration"),sAo=o(" (BigBirdPegasus model)"),lAo=l(),o8=a("li"),Dde=a("strong"),iAo=o("blenderbot"),dAo=o(" \u2014 "),Qj=a("a"),cAo=o("BlenderbotForConditionalGeneration"),fAo=o(" (Blenderbot model)"),mAo=l(),r8=a("li"),Gde=a("strong"),gAo=o("blenderbot-small"),hAo=o(" \u2014 "),Wj=a("a"),pAo=o("BlenderbotSmallForConditionalGeneration"),uAo=o(" (BlenderbotSmall model)"),_Ao=l(),t8=a("li"),Ode=a("strong"),bAo=o("encoder-decoder"),vAo=o(" \u2014 "),Hj=a("a"),FAo=o("EncoderDecoderModel"),TAo=o(" (Encoder decoder model)"),MAo=l(),a8=a("li"),Vde=a("strong"),EAo=o("fsmt"),CAo=o(" \u2014 "),Uj=a("a"),wAo=o("FSMTForConditionalGeneration"),AAo=o(" (FairSeq Machine-Translation model)"),yAo=l(),n8=a("li"),Xde=a("strong"),LAo=o("led"),xAo=o(" \u2014 "),Jj=a("a"),$Ao=o("LEDForConditionalGeneration"),kAo=o(" (LED model)"),SAo=l(),s8=a("li"),zde=a("strong"),RAo=o("m2m_100"),BAo=o(" \u2014 "),Yj=a("a"),PAo=o("M2M100ForConditionalGeneration"),IAo=o(" (M2M100 model)"),qAo=l(),l8=a("li"),Qde=a("strong"),NAo=o("marian"),jAo=o(" \u2014 "),Kj=a("a"),DAo=o("MarianMTModel"),GAo=o(" (Marian model)"),OAo=l(),i8=a("li"),Wde=a("strong"),VAo=o("mbart"),XAo=o(" \u2014 "),Zj=a("a"),zAo=o("MBartForConditionalGeneration"),QAo=o(" (mBART model)"),WAo=l(),d8=a("li"),Hde=a("strong"),HAo=o("mt5"),UAo=o(" \u2014 "),eD=a("a"),JAo=o("MT5ForConditionalGeneration"),YAo=o(" (mT5 model)"),KAo=l(),c8=a("li"),Ude=a("strong"),ZAo=o("pegasus"),e0o=o(" \u2014 "),oD=a("a"),o0o=o("PegasusForConditionalGeneration"),r0o=o(" (Pegasus model)"),t0o=l(),f8=a("li"),Jde=a("strong"),a0o=o("plbart"),n0o=o(" \u2014 "),rD=a("a"),s0o=o("PLBartForConditionalGeneration"),l0o=o(" (PLBart model)"),i0o=l(),m8=a("li"),Yde=a("strong"),d0o=o("prophetnet"),c0o=o(" \u2014 "),tD=a("a"),f0o=o("ProphetNetForConditionalGeneration"),m0o=o(" (ProphetNet model)"),g0o=l(),g8=a("li"),Kde=a("strong"),h0o=o("t5"),p0o=o(" \u2014 "),aD=a("a"),u0o=o("T5ForConditionalGeneration"),_0o=o(" (T5 model)"),b0o=l(),h8=a("li"),Zde=a("strong"),v0o=o("xlm-prophetnet"),F0o=o(" \u2014 "),nD=a("a"),T0o=o("XLMProphetNetForConditionalGeneration"),M0o=o(" (XLMProphetNet model)"),E0o=l(),p8=a("p"),C0o=o("The model is set in evaluation mode by default using "),ece=a("code"),w0o=o("model.eval()"),A0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),y0o=o("model.train()"),L0o=l(),F(u8.$$.fragment),iIe=l(),qi=a("h2"),_8=a("a"),rce=a("span"),F(HA.$$.fragment),x0o=l(),tce=a("span"),$0o=o("AutoModelForSequenceClassification"),dIe=l(),Ro=a("div"),F(UA.$$.fragment),k0o=l(),Ni=a("p"),S0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=a("a"),R0o=o("from_pretrained()"),B0o=o(" class method or the "),lD=a("a"),P0o=o("from_config()"),I0o=o(` class
method.`),q0o=l(),JA=a("p"),N0o=o("This class cannot be instantiated directly using "),ace=a("code"),j0o=o("__init__()"),D0o=o(" (throws an error)."),G0o=l(),st=a("div"),F(YA.$$.fragment),O0o=l(),nce=a("p"),V0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X0o=l(),ji=a("p"),z0o=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),Q0o=o("not"),W0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),H0o=o("from_pretrained()"),U0o=o(" to load the model weights."),J0o=l(),F(b8.$$.fragment),Y0o=l(),Ze=a("div"),F(KA.$$.fragment),K0o=l(),lce=a("p"),Z0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eyo=l(),ka=a("p"),oyo=o("The model class to instantiate is selected based on the "),ice=a("code"),ryo=o("model_type"),tyo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),ayo=o("pretrained_model_name_or_path"),nyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),syo=o("pretrained_model_name_or_path"),lyo=o(":"),iyo=l(),q=a("ul"),v8=a("li"),fce=a("strong"),dyo=o("albert"),cyo=o(" \u2014 "),dD=a("a"),fyo=o("AlbertForSequenceClassification"),myo=o(" (ALBERT model)"),gyo=l(),F8=a("li"),mce=a("strong"),hyo=o("bart"),pyo=o(" \u2014 "),cD=a("a"),uyo=o("BartForSequenceClassification"),_yo=o(" (BART model)"),byo=l(),T8=a("li"),gce=a("strong"),vyo=o("bert"),Fyo=o(" \u2014 "),fD=a("a"),Tyo=o("BertForSequenceClassification"),Myo=o(" (BERT model)"),Eyo=l(),M8=a("li"),hce=a("strong"),Cyo=o("big_bird"),wyo=o(" \u2014 "),mD=a("a"),Ayo=o("BigBirdForSequenceClassification"),yyo=o(" (BigBird model)"),Lyo=l(),E8=a("li"),pce=a("strong"),xyo=o("bigbird_pegasus"),$yo=o(" \u2014 "),gD=a("a"),kyo=o("BigBirdPegasusForSequenceClassification"),Syo=o(" (BigBirdPegasus model)"),Ryo=l(),C8=a("li"),uce=a("strong"),Byo=o("camembert"),Pyo=o(" \u2014 "),hD=a("a"),Iyo=o("CamembertForSequenceClassification"),qyo=o(" (CamemBERT model)"),Nyo=l(),w8=a("li"),_ce=a("strong"),jyo=o("canine"),Dyo=o(" \u2014 "),pD=a("a"),Gyo=o("CanineForSequenceClassification"),Oyo=o(" (Canine model)"),Vyo=l(),A8=a("li"),bce=a("strong"),Xyo=o("convbert"),zyo=o(" \u2014 "),uD=a("a"),Qyo=o("ConvBertForSequenceClassification"),Wyo=o(" (ConvBERT model)"),Hyo=l(),y8=a("li"),vce=a("strong"),Uyo=o("ctrl"),Jyo=o(" \u2014 "),_D=a("a"),Yyo=o("CTRLForSequenceClassification"),Kyo=o(" (CTRL model)"),Zyo=l(),L8=a("li"),Fce=a("strong"),eLo=o("data2vec-text"),oLo=o(" \u2014 "),bD=a("a"),rLo=o("Data2VecTextForSequenceClassification"),tLo=o(" (Data2VecText model)"),aLo=l(),x8=a("li"),Tce=a("strong"),nLo=o("deberta"),sLo=o(" \u2014 "),vD=a("a"),lLo=o("DebertaForSequenceClassification"),iLo=o(" (DeBERTa model)"),dLo=l(),$8=a("li"),Mce=a("strong"),cLo=o("deberta-v2"),fLo=o(" \u2014 "),FD=a("a"),mLo=o("DebertaV2ForSequenceClassification"),gLo=o(" (DeBERTa-v2 model)"),hLo=l(),k8=a("li"),Ece=a("strong"),pLo=o("distilbert"),uLo=o(" \u2014 "),TD=a("a"),_Lo=o("DistilBertForSequenceClassification"),bLo=o(" (DistilBERT model)"),vLo=l(),S8=a("li"),Cce=a("strong"),FLo=o("electra"),TLo=o(" \u2014 "),MD=a("a"),MLo=o("ElectraForSequenceClassification"),ELo=o(" (ELECTRA model)"),CLo=l(),R8=a("li"),wce=a("strong"),wLo=o("flaubert"),ALo=o(" \u2014 "),ED=a("a"),yLo=o("FlaubertForSequenceClassification"),LLo=o(" (FlauBERT model)"),xLo=l(),B8=a("li"),Ace=a("strong"),$Lo=o("fnet"),kLo=o(" \u2014 "),CD=a("a"),SLo=o("FNetForSequenceClassification"),RLo=o(" (FNet model)"),BLo=l(),P8=a("li"),yce=a("strong"),PLo=o("funnel"),ILo=o(" \u2014 "),wD=a("a"),qLo=o("FunnelForSequenceClassification"),NLo=o(" (Funnel Transformer model)"),jLo=l(),I8=a("li"),Lce=a("strong"),DLo=o("gpt2"),GLo=o(" \u2014 "),AD=a("a"),OLo=o("GPT2ForSequenceClassification"),VLo=o(" (OpenAI GPT-2 model)"),XLo=l(),q8=a("li"),xce=a("strong"),zLo=o("gpt_neo"),QLo=o(" \u2014 "),yD=a("a"),WLo=o("GPTNeoForSequenceClassification"),HLo=o(" (GPT Neo model)"),ULo=l(),N8=a("li"),$ce=a("strong"),JLo=o("gptj"),YLo=o(" \u2014 "),LD=a("a"),KLo=o("GPTJForSequenceClassification"),ZLo=o(" (GPT-J model)"),exo=l(),j8=a("li"),kce=a("strong"),oxo=o("ibert"),rxo=o(" \u2014 "),xD=a("a"),txo=o("IBertForSequenceClassification"),axo=o(" (I-BERT model)"),nxo=l(),D8=a("li"),Sce=a("strong"),sxo=o("layoutlm"),lxo=o(" \u2014 "),$D=a("a"),ixo=o("LayoutLMForSequenceClassification"),dxo=o(" (LayoutLM model)"),cxo=l(),G8=a("li"),Rce=a("strong"),fxo=o("layoutlmv2"),mxo=o(" \u2014 "),kD=a("a"),gxo=o("LayoutLMv2ForSequenceClassification"),hxo=o(" (LayoutLMv2 model)"),pxo=l(),O8=a("li"),Bce=a("strong"),uxo=o("led"),_xo=o(" \u2014 "),SD=a("a"),bxo=o("LEDForSequenceClassification"),vxo=o(" (LED model)"),Fxo=l(),V8=a("li"),Pce=a("strong"),Txo=o("longformer"),Mxo=o(" \u2014 "),RD=a("a"),Exo=o("LongformerForSequenceClassification"),Cxo=o(" (Longformer model)"),wxo=l(),X8=a("li"),Ice=a("strong"),Axo=o("mbart"),yxo=o(" \u2014 "),BD=a("a"),Lxo=o("MBartForSequenceClassification"),xxo=o(" (mBART model)"),$xo=l(),z8=a("li"),qce=a("strong"),kxo=o("megatron-bert"),Sxo=o(" \u2014 "),PD=a("a"),Rxo=o("MegatronBertForSequenceClassification"),Bxo=o(" (MegatronBert model)"),Pxo=l(),Q8=a("li"),Nce=a("strong"),Ixo=o("mobilebert"),qxo=o(" \u2014 "),ID=a("a"),Nxo=o("MobileBertForSequenceClassification"),jxo=o(" (MobileBERT model)"),Dxo=l(),W8=a("li"),jce=a("strong"),Gxo=o("mpnet"),Oxo=o(" \u2014 "),qD=a("a"),Vxo=o("MPNetForSequenceClassification"),Xxo=o(" (MPNet model)"),zxo=l(),H8=a("li"),Dce=a("strong"),Qxo=o("nystromformer"),Wxo=o(" \u2014 "),ND=a("a"),Hxo=o("NystromformerForSequenceClassification"),Uxo=o(" (Nystromformer model)"),Jxo=l(),U8=a("li"),Gce=a("strong"),Yxo=o("openai-gpt"),Kxo=o(" \u2014 "),jD=a("a"),Zxo=o("OpenAIGPTForSequenceClassification"),e7o=o(" (OpenAI GPT model)"),o7o=l(),J8=a("li"),Oce=a("strong"),r7o=o("perceiver"),t7o=o(" \u2014 "),DD=a("a"),a7o=o("PerceiverForSequenceClassification"),n7o=o(" (Perceiver model)"),s7o=l(),Y8=a("li"),Vce=a("strong"),l7o=o("plbart"),i7o=o(" \u2014 "),GD=a("a"),d7o=o("PLBartForSequenceClassification"),c7o=o(" (PLBart model)"),f7o=l(),K8=a("li"),Xce=a("strong"),m7o=o("qdqbert"),g7o=o(" \u2014 "),OD=a("a"),h7o=o("QDQBertForSequenceClassification"),p7o=o(" (QDQBert model)"),u7o=l(),Z8=a("li"),zce=a("strong"),_7o=o("reformer"),b7o=o(" \u2014 "),VD=a("a"),v7o=o("ReformerForSequenceClassification"),F7o=o(" (Reformer model)"),T7o=l(),eb=a("li"),Qce=a("strong"),M7o=o("rembert"),E7o=o(" \u2014 "),XD=a("a"),C7o=o("RemBertForSequenceClassification"),w7o=o(" (RemBERT model)"),A7o=l(),ob=a("li"),Wce=a("strong"),y7o=o("roberta"),L7o=o(" \u2014 "),zD=a("a"),x7o=o("RobertaForSequenceClassification"),$7o=o(" (RoBERTa model)"),k7o=l(),rb=a("li"),Hce=a("strong"),S7o=o("roformer"),R7o=o(" \u2014 "),QD=a("a"),B7o=o("RoFormerForSequenceClassification"),P7o=o(" (RoFormer model)"),I7o=l(),tb=a("li"),Uce=a("strong"),q7o=o("squeezebert"),N7o=o(" \u2014 "),WD=a("a"),j7o=o("SqueezeBertForSequenceClassification"),D7o=o(" (SqueezeBERT model)"),G7o=l(),ab=a("li"),Jce=a("strong"),O7o=o("tapas"),V7o=o(" \u2014 "),HD=a("a"),X7o=o("TapasForSequenceClassification"),z7o=o(" (TAPAS model)"),Q7o=l(),nb=a("li"),Yce=a("strong"),W7o=o("transfo-xl"),H7o=o(" \u2014 "),UD=a("a"),U7o=o("TransfoXLForSequenceClassification"),J7o=o(" (Transformer-XL model)"),Y7o=l(),sb=a("li"),Kce=a("strong"),K7o=o("xlm"),Z7o=o(" \u2014 "),JD=a("a"),e$o=o("XLMForSequenceClassification"),o$o=o(" (XLM model)"),r$o=l(),lb=a("li"),Zce=a("strong"),t$o=o("xlm-roberta"),a$o=o(" \u2014 "),YD=a("a"),n$o=o("XLMRobertaForSequenceClassification"),s$o=o(" (XLM-RoBERTa model)"),l$o=l(),ib=a("li"),efe=a("strong"),i$o=o("xlm-roberta-xl"),d$o=o(" \u2014 "),KD=a("a"),c$o=o("XLMRobertaXLForSequenceClassification"),f$o=o(" (XLM-RoBERTa-XL model)"),m$o=l(),db=a("li"),ofe=a("strong"),g$o=o("xlnet"),h$o=o(" \u2014 "),ZD=a("a"),p$o=o("XLNetForSequenceClassification"),u$o=o(" (XLNet model)"),_$o=l(),cb=a("li"),rfe=a("strong"),b$o=o("yoso"),v$o=o(" \u2014 "),eG=a("a"),F$o=o("YosoForSequenceClassification"),T$o=o(" (YOSO model)"),M$o=l(),fb=a("p"),E$o=o("The model is set in evaluation mode by default using "),tfe=a("code"),C$o=o("model.eval()"),w$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),A$o=o("model.train()"),y$o=l(),F(mb.$$.fragment),cIe=l(),Di=a("h2"),gb=a("a"),nfe=a("span"),F(ZA.$$.fragment),L$o=l(),sfe=a("span"),x$o=o("AutoModelForMultipleChoice"),fIe=l(),Bo=a("div"),F(e0.$$.fragment),$$o=l(),Gi=a("p"),k$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oG=a("a"),S$o=o("from_pretrained()"),R$o=o(" class method or the "),rG=a("a"),B$o=o("from_config()"),P$o=o(` class
method.`),I$o=l(),o0=a("p"),q$o=o("This class cannot be instantiated directly using "),lfe=a("code"),N$o=o("__init__()"),j$o=o(" (throws an error)."),D$o=l(),lt=a("div"),F(r0.$$.fragment),G$o=l(),ife=a("p"),O$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V$o=l(),Oi=a("p"),X$o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),z$o=o("not"),Q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),W$o=o("from_pretrained()"),H$o=o(" to load the model weights."),U$o=l(),F(hb.$$.fragment),J$o=l(),eo=a("div"),F(t0.$$.fragment),Y$o=l(),cfe=a("p"),K$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z$o=l(),Sa=a("p"),eko=o("The model class to instantiate is selected based on the "),ffe=a("code"),oko=o("model_type"),rko=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),tko=o("pretrained_model_name_or_path"),ako=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),nko=o("pretrained_model_name_or_path"),sko=o(":"),lko=l(),Y=a("ul"),pb=a("li"),hfe=a("strong"),iko=o("albert"),dko=o(" \u2014 "),aG=a("a"),cko=o("AlbertForMultipleChoice"),fko=o(" (ALBERT model)"),mko=l(),ub=a("li"),pfe=a("strong"),gko=o("bert"),hko=o(" \u2014 "),nG=a("a"),pko=o("BertForMultipleChoice"),uko=o(" (BERT model)"),_ko=l(),_b=a("li"),ufe=a("strong"),bko=o("big_bird"),vko=o(" \u2014 "),sG=a("a"),Fko=o("BigBirdForMultipleChoice"),Tko=o(" (BigBird model)"),Mko=l(),bb=a("li"),_fe=a("strong"),Eko=o("camembert"),Cko=o(" \u2014 "),lG=a("a"),wko=o("CamembertForMultipleChoice"),Ako=o(" (CamemBERT model)"),yko=l(),vb=a("li"),bfe=a("strong"),Lko=o("canine"),xko=o(" \u2014 "),iG=a("a"),$ko=o("CanineForMultipleChoice"),kko=o(" (Canine model)"),Sko=l(),Fb=a("li"),vfe=a("strong"),Rko=o("convbert"),Bko=o(" \u2014 "),dG=a("a"),Pko=o("ConvBertForMultipleChoice"),Iko=o(" (ConvBERT model)"),qko=l(),Tb=a("li"),Ffe=a("strong"),Nko=o("data2vec-text"),jko=o(" \u2014 "),cG=a("a"),Dko=o("Data2VecTextForMultipleChoice"),Gko=o(" (Data2VecText model)"),Oko=l(),Mb=a("li"),Tfe=a("strong"),Vko=o("deberta-v2"),Xko=o(" \u2014 "),fG=a("a"),zko=o("DebertaV2ForMultipleChoice"),Qko=o(" (DeBERTa-v2 model)"),Wko=l(),Eb=a("li"),Mfe=a("strong"),Hko=o("distilbert"),Uko=o(" \u2014 "),mG=a("a"),Jko=o("DistilBertForMultipleChoice"),Yko=o(" (DistilBERT model)"),Kko=l(),Cb=a("li"),Efe=a("strong"),Zko=o("electra"),eSo=o(" \u2014 "),gG=a("a"),oSo=o("ElectraForMultipleChoice"),rSo=o(" (ELECTRA model)"),tSo=l(),wb=a("li"),Cfe=a("strong"),aSo=o("flaubert"),nSo=o(" \u2014 "),hG=a("a"),sSo=o("FlaubertForMultipleChoice"),lSo=o(" (FlauBERT model)"),iSo=l(),Ab=a("li"),wfe=a("strong"),dSo=o("fnet"),cSo=o(" \u2014 "),pG=a("a"),fSo=o("FNetForMultipleChoice"),mSo=o(" (FNet model)"),gSo=l(),yb=a("li"),Afe=a("strong"),hSo=o("funnel"),pSo=o(" \u2014 "),uG=a("a"),uSo=o("FunnelForMultipleChoice"),_So=o(" (Funnel Transformer model)"),bSo=l(),Lb=a("li"),yfe=a("strong"),vSo=o("ibert"),FSo=o(" \u2014 "),_G=a("a"),TSo=o("IBertForMultipleChoice"),MSo=o(" (I-BERT model)"),ESo=l(),xb=a("li"),Lfe=a("strong"),CSo=o("longformer"),wSo=o(" \u2014 "),bG=a("a"),ASo=o("LongformerForMultipleChoice"),ySo=o(" (Longformer model)"),LSo=l(),$b=a("li"),xfe=a("strong"),xSo=o("megatron-bert"),$So=o(" \u2014 "),vG=a("a"),kSo=o("MegatronBertForMultipleChoice"),SSo=o(" (MegatronBert model)"),RSo=l(),kb=a("li"),$fe=a("strong"),BSo=o("mobilebert"),PSo=o(" \u2014 "),FG=a("a"),ISo=o("MobileBertForMultipleChoice"),qSo=o(" (MobileBERT model)"),NSo=l(),Sb=a("li"),kfe=a("strong"),jSo=o("mpnet"),DSo=o(" \u2014 "),TG=a("a"),GSo=o("MPNetForMultipleChoice"),OSo=o(" (MPNet model)"),VSo=l(),Rb=a("li"),Sfe=a("strong"),XSo=o("nystromformer"),zSo=o(" \u2014 "),MG=a("a"),QSo=o("NystromformerForMultipleChoice"),WSo=o(" (Nystromformer model)"),HSo=l(),Bb=a("li"),Rfe=a("strong"),USo=o("qdqbert"),JSo=o(" \u2014 "),EG=a("a"),YSo=o("QDQBertForMultipleChoice"),KSo=o(" (QDQBert model)"),ZSo=l(),Pb=a("li"),Bfe=a("strong"),eRo=o("rembert"),oRo=o(" \u2014 "),CG=a("a"),rRo=o("RemBertForMultipleChoice"),tRo=o(" (RemBERT model)"),aRo=l(),Ib=a("li"),Pfe=a("strong"),nRo=o("roberta"),sRo=o(" \u2014 "),wG=a("a"),lRo=o("RobertaForMultipleChoice"),iRo=o(" (RoBERTa model)"),dRo=l(),qb=a("li"),Ife=a("strong"),cRo=o("roformer"),fRo=o(" \u2014 "),AG=a("a"),mRo=o("RoFormerForMultipleChoice"),gRo=o(" (RoFormer model)"),hRo=l(),Nb=a("li"),qfe=a("strong"),pRo=o("squeezebert"),uRo=o(" \u2014 "),yG=a("a"),_Ro=o("SqueezeBertForMultipleChoice"),bRo=o(" (SqueezeBERT model)"),vRo=l(),jb=a("li"),Nfe=a("strong"),FRo=o("xlm"),TRo=o(" \u2014 "),LG=a("a"),MRo=o("XLMForMultipleChoice"),ERo=o(" (XLM model)"),CRo=l(),Db=a("li"),jfe=a("strong"),wRo=o("xlm-roberta"),ARo=o(" \u2014 "),xG=a("a"),yRo=o("XLMRobertaForMultipleChoice"),LRo=o(" (XLM-RoBERTa model)"),xRo=l(),Gb=a("li"),Dfe=a("strong"),$Ro=o("xlm-roberta-xl"),kRo=o(" \u2014 "),$G=a("a"),SRo=o("XLMRobertaXLForMultipleChoice"),RRo=o(" (XLM-RoBERTa-XL model)"),BRo=l(),Ob=a("li"),Gfe=a("strong"),PRo=o("xlnet"),IRo=o(" \u2014 "),kG=a("a"),qRo=o("XLNetForMultipleChoice"),NRo=o(" (XLNet model)"),jRo=l(),Vb=a("li"),Ofe=a("strong"),DRo=o("yoso"),GRo=o(" \u2014 "),SG=a("a"),ORo=o("YosoForMultipleChoice"),VRo=o(" (YOSO model)"),XRo=l(),Xb=a("p"),zRo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),QRo=o("model.eval()"),WRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),HRo=o("model.train()"),URo=l(),F(zb.$$.fragment),mIe=l(),Vi=a("h2"),Qb=a("a"),zfe=a("span"),F(a0.$$.fragment),JRo=l(),Qfe=a("span"),YRo=o("AutoModelForNextSentencePrediction"),gIe=l(),Po=a("div"),F(n0.$$.fragment),KRo=l(),Xi=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RG=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),BG=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),s0=a("p"),nBo=o("This class cannot be instantiated directly using "),Wfe=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),it=a("div"),F(l0.$$.fragment),dBo=l(),Hfe=a("p"),cBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fBo=l(),zi=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),pBo=o("from_pretrained()"),uBo=o(" to load the model weights."),_Bo=l(),F(Wb.$$.fragment),bBo=l(),oo=a("div"),F(i0.$$.fragment),vBo=l(),Jfe=a("p"),FBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TBo=l(),Ra=a("p"),MBo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),Yr=a("ul"),Hb=a("li"),eme=a("strong"),$Bo=o("bert"),kBo=o(" \u2014 "),IG=a("a"),SBo=o("BertForNextSentencePrediction"),RBo=o(" (BERT model)"),BBo=l(),Ub=a("li"),ome=a("strong"),PBo=o("fnet"),IBo=o(" \u2014 "),qG=a("a"),qBo=o("FNetForNextSentencePrediction"),NBo=o(" (FNet model)"),jBo=l(),Jb=a("li"),rme=a("strong"),DBo=o("megatron-bert"),GBo=o(" \u2014 "),NG=a("a"),OBo=o("MegatronBertForNextSentencePrediction"),VBo=o(" (MegatronBert model)"),XBo=l(),Yb=a("li"),tme=a("strong"),zBo=o("mobilebert"),QBo=o(" \u2014 "),jG=a("a"),WBo=o("MobileBertForNextSentencePrediction"),HBo=o(" (MobileBERT model)"),UBo=l(),Kb=a("li"),ame=a("strong"),JBo=o("qdqbert"),YBo=o(" \u2014 "),DG=a("a"),KBo=o("QDQBertForNextSentencePrediction"),ZBo=o(" (QDQBert model)"),ePo=l(),Zb=a("p"),oPo=o("The model is set in evaluation mode by default using "),nme=a("code"),rPo=o("model.eval()"),tPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),aPo=o("model.train()"),nPo=l(),F(e2.$$.fragment),hIe=l(),Qi=a("h2"),o2=a("a"),lme=a("span"),F(d0.$$.fragment),sPo=l(),ime=a("span"),lPo=o("AutoModelForTokenClassification"),pIe=l(),Io=a("div"),F(c0.$$.fragment),iPo=l(),Wi=a("p"),dPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GG=a("a"),cPo=o("from_pretrained()"),fPo=o(" class method or the "),OG=a("a"),mPo=o("from_config()"),gPo=o(` class
method.`),hPo=l(),f0=a("p"),pPo=o("This class cannot be instantiated directly using "),dme=a("code"),uPo=o("__init__()"),_Po=o(" (throws an error)."),bPo=l(),dt=a("div"),F(m0.$$.fragment),vPo=l(),cme=a("p"),FPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TPo=l(),Hi=a("p"),MPo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),EPo=o("not"),CPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),wPo=o("from_pretrained()"),APo=o(" to load the model weights."),yPo=l(),F(r2.$$.fragment),LPo=l(),ro=a("div"),F(g0.$$.fragment),xPo=l(),mme=a("p"),$Po=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kPo=l(),Ba=a("p"),SPo=o("The model class to instantiate is selected based on the "),gme=a("code"),RPo=o("model_type"),BPo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),PPo=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(":"),jPo=l(),U=a("ul"),t2=a("li"),ume=a("strong"),DPo=o("albert"),GPo=o(" \u2014 "),XG=a("a"),OPo=o("AlbertForTokenClassification"),VPo=o(" (ALBERT model)"),XPo=l(),a2=a("li"),_me=a("strong"),zPo=o("bert"),QPo=o(" \u2014 "),zG=a("a"),WPo=o("BertForTokenClassification"),HPo=o(" (BERT model)"),UPo=l(),n2=a("li"),bme=a("strong"),JPo=o("big_bird"),YPo=o(" \u2014 "),QG=a("a"),KPo=o("BigBirdForTokenClassification"),ZPo=o(" (BigBird model)"),eIo=l(),s2=a("li"),vme=a("strong"),oIo=o("camembert"),rIo=o(" \u2014 "),WG=a("a"),tIo=o("CamembertForTokenClassification"),aIo=o(" (CamemBERT model)"),nIo=l(),l2=a("li"),Fme=a("strong"),sIo=o("canine"),lIo=o(" \u2014 "),HG=a("a"),iIo=o("CanineForTokenClassification"),dIo=o(" (Canine model)"),cIo=l(),i2=a("li"),Tme=a("strong"),fIo=o("convbert"),mIo=o(" \u2014 "),UG=a("a"),gIo=o("ConvBertForTokenClassification"),hIo=o(" (ConvBERT model)"),pIo=l(),d2=a("li"),Mme=a("strong"),uIo=o("data2vec-text"),_Io=o(" \u2014 "),JG=a("a"),bIo=o("Data2VecTextForTokenClassification"),vIo=o(" (Data2VecText model)"),FIo=l(),c2=a("li"),Eme=a("strong"),TIo=o("deberta"),MIo=o(" \u2014 "),YG=a("a"),EIo=o("DebertaForTokenClassification"),CIo=o(" (DeBERTa model)"),wIo=l(),f2=a("li"),Cme=a("strong"),AIo=o("deberta-v2"),yIo=o(" \u2014 "),KG=a("a"),LIo=o("DebertaV2ForTokenClassification"),xIo=o(" (DeBERTa-v2 model)"),$Io=l(),m2=a("li"),wme=a("strong"),kIo=o("distilbert"),SIo=o(" \u2014 "),ZG=a("a"),RIo=o("DistilBertForTokenClassification"),BIo=o(" (DistilBERT model)"),PIo=l(),g2=a("li"),Ame=a("strong"),IIo=o("electra"),qIo=o(" \u2014 "),eO=a("a"),NIo=o("ElectraForTokenClassification"),jIo=o(" (ELECTRA model)"),DIo=l(),h2=a("li"),yme=a("strong"),GIo=o("flaubert"),OIo=o(" \u2014 "),oO=a("a"),VIo=o("FlaubertForTokenClassification"),XIo=o(" (FlauBERT model)"),zIo=l(),p2=a("li"),Lme=a("strong"),QIo=o("fnet"),WIo=o(" \u2014 "),rO=a("a"),HIo=o("FNetForTokenClassification"),UIo=o(" (FNet model)"),JIo=l(),u2=a("li"),xme=a("strong"),YIo=o("funnel"),KIo=o(" \u2014 "),tO=a("a"),ZIo=o("FunnelForTokenClassification"),eqo=o(" (Funnel Transformer model)"),oqo=l(),_2=a("li"),$me=a("strong"),rqo=o("gpt2"),tqo=o(" \u2014 "),aO=a("a"),aqo=o("GPT2ForTokenClassification"),nqo=o(" (OpenAI GPT-2 model)"),sqo=l(),b2=a("li"),kme=a("strong"),lqo=o("ibert"),iqo=o(" \u2014 "),nO=a("a"),dqo=o("IBertForTokenClassification"),cqo=o(" (I-BERT model)"),fqo=l(),v2=a("li"),Sme=a("strong"),mqo=o("layoutlm"),gqo=o(" \u2014 "),sO=a("a"),hqo=o("LayoutLMForTokenClassification"),pqo=o(" (LayoutLM model)"),uqo=l(),F2=a("li"),Rme=a("strong"),_qo=o("layoutlmv2"),bqo=o(" \u2014 "),lO=a("a"),vqo=o("LayoutLMv2ForTokenClassification"),Fqo=o(" (LayoutLMv2 model)"),Tqo=l(),T2=a("li"),Bme=a("strong"),Mqo=o("longformer"),Eqo=o(" \u2014 "),iO=a("a"),Cqo=o("LongformerForTokenClassification"),wqo=o(" (Longformer model)"),Aqo=l(),M2=a("li"),Pme=a("strong"),yqo=o("megatron-bert"),Lqo=o(" \u2014 "),dO=a("a"),xqo=o("MegatronBertForTokenClassification"),$qo=o(" (MegatronBert model)"),kqo=l(),E2=a("li"),Ime=a("strong"),Sqo=o("mobilebert"),Rqo=o(" \u2014 "),cO=a("a"),Bqo=o("MobileBertForTokenClassification"),Pqo=o(" (MobileBERT model)"),Iqo=l(),C2=a("li"),qme=a("strong"),qqo=o("mpnet"),Nqo=o(" \u2014 "),fO=a("a"),jqo=o("MPNetForTokenClassification"),Dqo=o(" (MPNet model)"),Gqo=l(),w2=a("li"),Nme=a("strong"),Oqo=o("nystromformer"),Vqo=o(" \u2014 "),mO=a("a"),Xqo=o("NystromformerForTokenClassification"),zqo=o(" (Nystromformer model)"),Qqo=l(),A2=a("li"),jme=a("strong"),Wqo=o("qdqbert"),Hqo=o(" \u2014 "),gO=a("a"),Uqo=o("QDQBertForTokenClassification"),Jqo=o(" (QDQBert model)"),Yqo=l(),y2=a("li"),Dme=a("strong"),Kqo=o("rembert"),Zqo=o(" \u2014 "),hO=a("a"),eNo=o("RemBertForTokenClassification"),oNo=o(" (RemBERT model)"),rNo=l(),L2=a("li"),Gme=a("strong"),tNo=o("roberta"),aNo=o(" \u2014 "),pO=a("a"),nNo=o("RobertaForTokenClassification"),sNo=o(" (RoBERTa model)"),lNo=l(),x2=a("li"),Ome=a("strong"),iNo=o("roformer"),dNo=o(" \u2014 "),uO=a("a"),cNo=o("RoFormerForTokenClassification"),fNo=o(" (RoFormer model)"),mNo=l(),$2=a("li"),Vme=a("strong"),gNo=o("squeezebert"),hNo=o(" \u2014 "),_O=a("a"),pNo=o("SqueezeBertForTokenClassification"),uNo=o(" (SqueezeBERT model)"),_No=l(),k2=a("li"),Xme=a("strong"),bNo=o("xlm"),vNo=o(" \u2014 "),bO=a("a"),FNo=o("XLMForTokenClassification"),TNo=o(" (XLM model)"),MNo=l(),S2=a("li"),zme=a("strong"),ENo=o("xlm-roberta"),CNo=o(" \u2014 "),vO=a("a"),wNo=o("XLMRobertaForTokenClassification"),ANo=o(" (XLM-RoBERTa model)"),yNo=l(),R2=a("li"),Qme=a("strong"),LNo=o("xlm-roberta-xl"),xNo=o(" \u2014 "),FO=a("a"),$No=o("XLMRobertaXLForTokenClassification"),kNo=o(" (XLM-RoBERTa-XL model)"),SNo=l(),B2=a("li"),Wme=a("strong"),RNo=o("xlnet"),BNo=o(" \u2014 "),TO=a("a"),PNo=o("XLNetForTokenClassification"),INo=o(" (XLNet model)"),qNo=l(),P2=a("li"),Hme=a("strong"),NNo=o("yoso"),jNo=o(" \u2014 "),MO=a("a"),DNo=o("YosoForTokenClassification"),GNo=o(" (YOSO model)"),ONo=l(),I2=a("p"),VNo=o("The model is set in evaluation mode by default using "),Ume=a("code"),XNo=o("model.eval()"),zNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=a("code"),QNo=o("model.train()"),WNo=l(),F(q2.$$.fragment),uIe=l(),Ui=a("h2"),N2=a("a"),Yme=a("span"),F(h0.$$.fragment),HNo=l(),Kme=a("span"),UNo=o("AutoModelForQuestionAnswering"),_Ie=l(),qo=a("div"),F(p0.$$.fragment),JNo=l(),Ji=a("p"),YNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EO=a("a"),KNo=o("from_pretrained()"),ZNo=o(" class method or the "),CO=a("a"),ejo=o("from_config()"),ojo=o(` class
method.`),rjo=l(),u0=a("p"),tjo=o("This class cannot be instantiated directly using "),Zme=a("code"),ajo=o("__init__()"),njo=o(" (throws an error)."),sjo=l(),ct=a("div"),F(_0.$$.fragment),ljo=l(),ege=a("p"),ijo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),djo=l(),Yi=a("p"),cjo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),fjo=o("not"),mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),gjo=o("from_pretrained()"),hjo=o(" to load the model weights."),pjo=l(),F(j2.$$.fragment),ujo=l(),to=a("div"),F(b0.$$.fragment),_jo=l(),rge=a("p"),bjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vjo=l(),Pa=a("p"),Fjo=o("The model class to instantiate is selected based on the "),tge=a("code"),Tjo=o("model_type"),Mjo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),Ejo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),wjo=o("pretrained_model_name_or_path"),Ajo=o(":"),yjo=l(),O=a("ul"),D2=a("li"),sge=a("strong"),Ljo=o("albert"),xjo=o(" \u2014 "),AO=a("a"),$jo=o("AlbertForQuestionAnswering"),kjo=o(" (ALBERT model)"),Sjo=l(),G2=a("li"),lge=a("strong"),Rjo=o("bart"),Bjo=o(" \u2014 "),yO=a("a"),Pjo=o("BartForQuestionAnswering"),Ijo=o(" (BART model)"),qjo=l(),O2=a("li"),ige=a("strong"),Njo=o("bert"),jjo=o(" \u2014 "),LO=a("a"),Djo=o("BertForQuestionAnswering"),Gjo=o(" (BERT model)"),Ojo=l(),V2=a("li"),dge=a("strong"),Vjo=o("big_bird"),Xjo=o(" \u2014 "),xO=a("a"),zjo=o("BigBirdForQuestionAnswering"),Qjo=o(" (BigBird model)"),Wjo=l(),X2=a("li"),cge=a("strong"),Hjo=o("bigbird_pegasus"),Ujo=o(" \u2014 "),$O=a("a"),Jjo=o("BigBirdPegasusForQuestionAnswering"),Yjo=o(" (BigBirdPegasus model)"),Kjo=l(),z2=a("li"),fge=a("strong"),Zjo=o("camembert"),eDo=o(" \u2014 "),kO=a("a"),oDo=o("CamembertForQuestionAnswering"),rDo=o(" (CamemBERT model)"),tDo=l(),Q2=a("li"),mge=a("strong"),aDo=o("canine"),nDo=o(" \u2014 "),SO=a("a"),sDo=o("CanineForQuestionAnswering"),lDo=o(" (Canine model)"),iDo=l(),W2=a("li"),gge=a("strong"),dDo=o("convbert"),cDo=o(" \u2014 "),RO=a("a"),fDo=o("ConvBertForQuestionAnswering"),mDo=o(" (ConvBERT model)"),gDo=l(),H2=a("li"),hge=a("strong"),hDo=o("data2vec-text"),pDo=o(" \u2014 "),BO=a("a"),uDo=o("Data2VecTextForQuestionAnswering"),_Do=o(" (Data2VecText model)"),bDo=l(),U2=a("li"),pge=a("strong"),vDo=o("deberta"),FDo=o(" \u2014 "),PO=a("a"),TDo=o("DebertaForQuestionAnswering"),MDo=o(" (DeBERTa model)"),EDo=l(),J2=a("li"),uge=a("strong"),CDo=o("deberta-v2"),wDo=o(" \u2014 "),IO=a("a"),ADo=o("DebertaV2ForQuestionAnswering"),yDo=o(" (DeBERTa-v2 model)"),LDo=l(),Y2=a("li"),_ge=a("strong"),xDo=o("distilbert"),$Do=o(" \u2014 "),qO=a("a"),kDo=o("DistilBertForQuestionAnswering"),SDo=o(" (DistilBERT model)"),RDo=l(),K2=a("li"),bge=a("strong"),BDo=o("electra"),PDo=o(" \u2014 "),NO=a("a"),IDo=o("ElectraForQuestionAnswering"),qDo=o(" (ELECTRA model)"),NDo=l(),Z2=a("li"),vge=a("strong"),jDo=o("flaubert"),DDo=o(" \u2014 "),jO=a("a"),GDo=o("FlaubertForQuestionAnsweringSimple"),ODo=o(" (FlauBERT model)"),VDo=l(),ev=a("li"),Fge=a("strong"),XDo=o("fnet"),zDo=o(" \u2014 "),DO=a("a"),QDo=o("FNetForQuestionAnswering"),WDo=o(" (FNet model)"),HDo=l(),ov=a("li"),Tge=a("strong"),UDo=o("funnel"),JDo=o(" \u2014 "),GO=a("a"),YDo=o("FunnelForQuestionAnswering"),KDo=o(" (Funnel Transformer model)"),ZDo=l(),rv=a("li"),Mge=a("strong"),eGo=o("gptj"),oGo=o(" \u2014 "),OO=a("a"),rGo=o("GPTJForQuestionAnswering"),tGo=o(" (GPT-J model)"),aGo=l(),tv=a("li"),Ege=a("strong"),nGo=o("ibert"),sGo=o(" \u2014 "),VO=a("a"),lGo=o("IBertForQuestionAnswering"),iGo=o(" (I-BERT model)"),dGo=l(),av=a("li"),Cge=a("strong"),cGo=o("layoutlmv2"),fGo=o(" \u2014 "),XO=a("a"),mGo=o("LayoutLMv2ForQuestionAnswering"),gGo=o(" (LayoutLMv2 model)"),hGo=l(),nv=a("li"),wge=a("strong"),pGo=o("led"),uGo=o(" \u2014 "),zO=a("a"),_Go=o("LEDForQuestionAnswering"),bGo=o(" (LED model)"),vGo=l(),sv=a("li"),Age=a("strong"),FGo=o("longformer"),TGo=o(" \u2014 "),QO=a("a"),MGo=o("LongformerForQuestionAnswering"),EGo=o(" (Longformer model)"),CGo=l(),lv=a("li"),yge=a("strong"),wGo=o("lxmert"),AGo=o(" \u2014 "),WO=a("a"),yGo=o("LxmertForQuestionAnswering"),LGo=o(" (LXMERT model)"),xGo=l(),iv=a("li"),Lge=a("strong"),$Go=o("mbart"),kGo=o(" \u2014 "),HO=a("a"),SGo=o("MBartForQuestionAnswering"),RGo=o(" (mBART model)"),BGo=l(),dv=a("li"),xge=a("strong"),PGo=o("megatron-bert"),IGo=o(" \u2014 "),UO=a("a"),qGo=o("MegatronBertForQuestionAnswering"),NGo=o(" (MegatronBert model)"),jGo=l(),cv=a("li"),$ge=a("strong"),DGo=o("mobilebert"),GGo=o(" \u2014 "),JO=a("a"),OGo=o("MobileBertForQuestionAnswering"),VGo=o(" (MobileBERT model)"),XGo=l(),fv=a("li"),kge=a("strong"),zGo=o("mpnet"),QGo=o(" \u2014 "),YO=a("a"),WGo=o("MPNetForQuestionAnswering"),HGo=o(" (MPNet model)"),UGo=l(),mv=a("li"),Sge=a("strong"),JGo=o("nystromformer"),YGo=o(" \u2014 "),KO=a("a"),KGo=o("NystromformerForQuestionAnswering"),ZGo=o(" (Nystromformer model)"),eOo=l(),gv=a("li"),Rge=a("strong"),oOo=o("qdqbert"),rOo=o(" \u2014 "),ZO=a("a"),tOo=o("QDQBertForQuestionAnswering"),aOo=o(" (QDQBert model)"),nOo=l(),hv=a("li"),Bge=a("strong"),sOo=o("reformer"),lOo=o(" \u2014 "),eV=a("a"),iOo=o("ReformerForQuestionAnswering"),dOo=o(" (Reformer model)"),cOo=l(),pv=a("li"),Pge=a("strong"),fOo=o("rembert"),mOo=o(" \u2014 "),oV=a("a"),gOo=o("RemBertForQuestionAnswering"),hOo=o(" (RemBERT model)"),pOo=l(),uv=a("li"),Ige=a("strong"),uOo=o("roberta"),_Oo=o(" \u2014 "),rV=a("a"),bOo=o("RobertaForQuestionAnswering"),vOo=o(" (RoBERTa model)"),FOo=l(),_v=a("li"),qge=a("strong"),TOo=o("roformer"),MOo=o(" \u2014 "),tV=a("a"),EOo=o("RoFormerForQuestionAnswering"),COo=o(" (RoFormer model)"),wOo=l(),bv=a("li"),Nge=a("strong"),AOo=o("splinter"),yOo=o(" \u2014 "),aV=a("a"),LOo=o("SplinterForQuestionAnswering"),xOo=o(" (Splinter model)"),$Oo=l(),vv=a("li"),jge=a("strong"),kOo=o("squeezebert"),SOo=o(" \u2014 "),nV=a("a"),ROo=o("SqueezeBertForQuestionAnswering"),BOo=o(" (SqueezeBERT model)"),POo=l(),Fv=a("li"),Dge=a("strong"),IOo=o("xlm"),qOo=o(" \u2014 "),sV=a("a"),NOo=o("XLMForQuestionAnsweringSimple"),jOo=o(" (XLM model)"),DOo=l(),Tv=a("li"),Gge=a("strong"),GOo=o("xlm-roberta"),OOo=o(" \u2014 "),lV=a("a"),VOo=o("XLMRobertaForQuestionAnswering"),XOo=o(" (XLM-RoBERTa model)"),zOo=l(),Mv=a("li"),Oge=a("strong"),QOo=o("xlm-roberta-xl"),WOo=o(" \u2014 "),iV=a("a"),HOo=o("XLMRobertaXLForQuestionAnswering"),UOo=o(" (XLM-RoBERTa-XL model)"),JOo=l(),Ev=a("li"),Vge=a("strong"),YOo=o("xlnet"),KOo=o(" \u2014 "),dV=a("a"),ZOo=o("XLNetForQuestionAnsweringSimple"),eVo=o(" (XLNet model)"),oVo=l(),Cv=a("li"),Xge=a("strong"),rVo=o("yoso"),tVo=o(" \u2014 "),cV=a("a"),aVo=o("YosoForQuestionAnswering"),nVo=o(" (YOSO model)"),sVo=l(),wv=a("p"),lVo=o("The model is set in evaluation mode by default using "),zge=a("code"),iVo=o("model.eval()"),dVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),cVo=o("model.train()"),fVo=l(),F(Av.$$.fragment),bIe=l(),Ki=a("h2"),yv=a("a"),Wge=a("span"),F(v0.$$.fragment),mVo=l(),Hge=a("span"),gVo=o("AutoModelForTableQuestionAnswering"),vIe=l(),No=a("div"),F(F0.$$.fragment),hVo=l(),Zi=a("p"),pVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fV=a("a"),uVo=o("from_pretrained()"),_Vo=o(" class method or the "),mV=a("a"),bVo=o("from_config()"),vVo=o(` class
method.`),FVo=l(),T0=a("p"),TVo=o("This class cannot be instantiated directly using "),Uge=a("code"),MVo=o("__init__()"),EVo=o(" (throws an error)."),CVo=l(),ft=a("div"),F(M0.$$.fragment),wVo=l(),Jge=a("p"),AVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yVo=l(),ed=a("p"),LVo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),xVo=o("not"),$Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),kVo=o("from_pretrained()"),SVo=o(" to load the model weights."),RVo=l(),F(Lv.$$.fragment),BVo=l(),ao=a("div"),F(E0.$$.fragment),PVo=l(),Kge=a("p"),IVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qVo=l(),Ia=a("p"),NVo=o("The model class to instantiate is selected based on the "),Zge=a("code"),jVo=o("model_type"),DVo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),GVo=o("pretrained_model_name_or_path"),OVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),VVo=o("pretrained_model_name_or_path"),XVo=o(":"),zVo=l(),rhe=a("ul"),xv=a("li"),the=a("strong"),QVo=o("tapas"),WVo=o(" \u2014 "),hV=a("a"),HVo=o("TapasForQuestionAnswering"),UVo=o(" (TAPAS model)"),JVo=l(),$v=a("p"),YVo=o("The model is set in evaluation mode by default using "),ahe=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),eXo=o("model.train()"),oXo=l(),F(kv.$$.fragment),FIe=l(),od=a("h2"),Sv=a("a"),she=a("span"),F(C0.$$.fragment),rXo=l(),lhe=a("span"),tXo=o("AutoModelForImageClassification"),TIe=l(),jo=a("div"),F(w0.$$.fragment),aXo=l(),rd=a("p"),nXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pV=a("a"),sXo=o("from_pretrained()"),lXo=o(" class method or the "),uV=a("a"),iXo=o("from_config()"),dXo=o(` class
method.`),cXo=l(),A0=a("p"),fXo=o("This class cannot be instantiated directly using "),ihe=a("code"),mXo=o("__init__()"),gXo=o(" (throws an error)."),hXo=l(),mt=a("div"),F(y0.$$.fragment),pXo=l(),dhe=a("p"),uXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Xo=l(),td=a("p"),bXo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),vXo=o("not"),FXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),TXo=o("from_pretrained()"),MXo=o(" to load the model weights."),EXo=l(),F(Rv.$$.fragment),CXo=l(),no=a("div"),F(L0.$$.fragment),wXo=l(),fhe=a("p"),AXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yXo=l(),qa=a("p"),LXo=o("The model class to instantiate is selected based on the "),mhe=a("code"),xXo=o("model_type"),$Xo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),kXo=o("pretrained_model_name_or_path"),SXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),RXo=o("pretrained_model_name_or_path"),BXo=o(":"),PXo=l(),Fe=a("ul"),Bv=a("li"),phe=a("strong"),IXo=o("beit"),qXo=o(" \u2014 "),bV=a("a"),NXo=o("BeitForImageClassification"),jXo=o(" (BEiT model)"),DXo=l(),Pv=a("li"),uhe=a("strong"),GXo=o("convnext"),OXo=o(" \u2014 "),vV=a("a"),VXo=o("ConvNextForImageClassification"),XXo=o(" (ConvNext model)"),zXo=l(),Iv=a("li"),_he=a("strong"),QXo=o("data2vec-vision"),WXo=o(" \u2014 "),FV=a("a"),HXo=o("Data2VecVisionForImageClassification"),UXo=o(" (Data2VecVision model)"),JXo=l(),Bs=a("li"),bhe=a("strong"),YXo=o("deit"),KXo=o(" \u2014 "),TV=a("a"),ZXo=o("DeiTForImageClassification"),ezo=o(" or "),MV=a("a"),ozo=o("DeiTForImageClassificationWithTeacher"),rzo=o(" (DeiT model)"),tzo=l(),qv=a("li"),vhe=a("strong"),azo=o("imagegpt"),nzo=o(" \u2014 "),EV=a("a"),szo=o("ImageGPTForImageClassification"),lzo=o(" (ImageGPT model)"),izo=l(),gt=a("li"),Fhe=a("strong"),dzo=o("perceiver"),czo=o(" \u2014 "),CV=a("a"),fzo=o("PerceiverForImageClassificationLearned"),mzo=o(" or "),wV=a("a"),gzo=o("PerceiverForImageClassificationFourier"),hzo=o(" or "),AV=a("a"),pzo=o("PerceiverForImageClassificationConvProcessing"),uzo=o(" (Perceiver model)"),_zo=l(),Nv=a("li"),The=a("strong"),bzo=o("poolformer"),vzo=o(" \u2014 "),yV=a("a"),Fzo=o("PoolFormerForImageClassification"),Tzo=o(" (PoolFormer model)"),Mzo=l(),jv=a("li"),Mhe=a("strong"),Ezo=o("regnet"),Czo=o(" \u2014 "),LV=a("a"),wzo=o("RegNetForImageClassification"),Azo=o(" (RegNet model)"),yzo=l(),Dv=a("li"),Ehe=a("strong"),Lzo=o("resnet"),xzo=o(" \u2014 "),xV=a("a"),$zo=o("ResNetForImageClassification"),kzo=o(" (ResNet model)"),Szo=l(),Gv=a("li"),Che=a("strong"),Rzo=o("segformer"),Bzo=o(" \u2014 "),$V=a("a"),Pzo=o("SegformerForImageClassification"),Izo=o(" (SegFormer model)"),qzo=l(),Ov=a("li"),whe=a("strong"),Nzo=o("swin"),jzo=o(" \u2014 "),kV=a("a"),Dzo=o("SwinForImageClassification"),Gzo=o(" (Swin model)"),Ozo=l(),Vv=a("li"),Ahe=a("strong"),Vzo=o("van"),Xzo=o(" \u2014 "),SV=a("a"),zzo=o("VanForImageClassification"),Qzo=o(" (VAN model)"),Wzo=l(),Xv=a("li"),yhe=a("strong"),Hzo=o("vit"),Uzo=o(" \u2014 "),RV=a("a"),Jzo=o("ViTForImageClassification"),Yzo=o(" (ViT model)"),Kzo=l(),zv=a("p"),Zzo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),rQo=o("model.train()"),tQo=l(),F(Qv.$$.fragment),MIe=l(),ad=a("h2"),Wv=a("a"),$he=a("span"),F(x0.$$.fragment),aQo=l(),khe=a("span"),nQo=o("AutoModelForVision2Seq"),EIe=l(),Do=a("div"),F($0.$$.fragment),sQo=l(),nd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BV=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),PV=a("a"),cQo=o("from_config()"),fQo=o(` class
method.`),mQo=l(),k0=a("p"),gQo=o("This class cannot be instantiated directly using "),She=a("code"),hQo=o("__init__()"),pQo=o(" (throws an error)."),uQo=l(),ht=a("div"),F(S0.$$.fragment),_Qo=l(),Rhe=a("p"),bQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vQo=l(),sd=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),F(Hv.$$.fragment),AQo=l(),so=a("div"),F(R0.$$.fragment),yQo=l(),Phe=a("p"),LQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xQo=l(),Na=a("p"),$Qo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),RQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),PQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),jhe=a("ul"),Uv=a("li"),Dhe=a("strong"),NQo=o("vision-encoder-decoder"),jQo=o(" \u2014 "),qV=a("a"),DQo=o("VisionEncoderDecoderModel"),GQo=o(" (Vision Encoder decoder model)"),OQo=l(),Jv=a("p"),VQo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),XQo=o("model.eval()"),zQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),QQo=o("model.train()"),WQo=l(),F(Yv.$$.fragment),CIe=l(),ld=a("h2"),Kv=a("a"),Vhe=a("span"),F(B0.$$.fragment),HQo=l(),Xhe=a("span"),UQo=o("AutoModelForAudioClassification"),wIe=l(),Go=a("div"),F(P0.$$.fragment),JQo=l(),id=a("p"),YQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NV=a("a"),KQo=o("from_pretrained()"),ZQo=o(" class method or the "),jV=a("a"),eWo=o("from_config()"),oWo=o(` class
method.`),rWo=l(),I0=a("p"),tWo=o("This class cannot be instantiated directly using "),zhe=a("code"),aWo=o("__init__()"),nWo=o(" (throws an error)."),sWo=l(),pt=a("div"),F(q0.$$.fragment),lWo=l(),Qhe=a("p"),iWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dWo=l(),dd=a("p"),cWo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),fWo=o("not"),mWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),gWo=o("from_pretrained()"),hWo=o(" to load the model weights."),pWo=l(),F(Zv.$$.fragment),uWo=l(),lo=a("div"),F(N0.$$.fragment),_Wo=l(),Hhe=a("p"),bWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vWo=l(),ja=a("p"),FWo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),TWo=o("model_type"),MWo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(":"),yWo=l(),Ne=a("ul"),eF=a("li"),Khe=a("strong"),LWo=o("data2vec-audio"),xWo=o(" \u2014 "),GV=a("a"),$Wo=o("Data2VecAudioForSequenceClassification"),kWo=o(" (Data2VecAudio model)"),SWo=l(),oF=a("li"),Zhe=a("strong"),RWo=o("hubert"),BWo=o(" \u2014 "),OV=a("a"),PWo=o("HubertForSequenceClassification"),IWo=o(" (Hubert model)"),qWo=l(),rF=a("li"),epe=a("strong"),NWo=o("sew"),jWo=o(" \u2014 "),VV=a("a"),DWo=o("SEWForSequenceClassification"),GWo=o(" (SEW model)"),OWo=l(),tF=a("li"),ope=a("strong"),VWo=o("sew-d"),XWo=o(" \u2014 "),XV=a("a"),zWo=o("SEWDForSequenceClassification"),QWo=o(" (SEW-D model)"),WWo=l(),aF=a("li"),rpe=a("strong"),HWo=o("unispeech"),UWo=o(" \u2014 "),zV=a("a"),JWo=o("UniSpeechForSequenceClassification"),YWo=o(" (UniSpeech model)"),KWo=l(),nF=a("li"),tpe=a("strong"),ZWo=o("unispeech-sat"),eHo=o(" \u2014 "),QV=a("a"),oHo=o("UniSpeechSatForSequenceClassification"),rHo=o(" (UniSpeechSat model)"),tHo=l(),sF=a("li"),ape=a("strong"),aHo=o("wav2vec2"),nHo=o(" \u2014 "),WV=a("a"),sHo=o("Wav2Vec2ForSequenceClassification"),lHo=o(" (Wav2Vec2 model)"),iHo=l(),lF=a("li"),npe=a("strong"),dHo=o("wavlm"),cHo=o(" \u2014 "),HV=a("a"),fHo=o("WavLMForSequenceClassification"),mHo=o(" (WavLM model)"),gHo=l(),iF=a("p"),hHo=o("The model is set in evaluation mode by default using "),spe=a("code"),pHo=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),_Ho=o("model.train()"),bHo=l(),F(dF.$$.fragment),AIe=l(),cd=a("h2"),cF=a("a"),ipe=a("span"),F(j0.$$.fragment),vHo=l(),dpe=a("span"),FHo=o("AutoModelForAudioFrameClassification"),yIe=l(),Oo=a("div"),F(D0.$$.fragment),THo=l(),fd=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UV=a("a"),EHo=o("from_pretrained()"),CHo=o(" class method or the "),JV=a("a"),wHo=o("from_config()"),AHo=o(` class
method.`),yHo=l(),G0=a("p"),LHo=o("This class cannot be instantiated directly using "),cpe=a("code"),xHo=o("__init__()"),$Ho=o(" (throws an error)."),kHo=l(),ut=a("div"),F(O0.$$.fragment),SHo=l(),fpe=a("p"),RHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BHo=l(),md=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),IHo=o("not"),qHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),NHo=o("from_pretrained()"),jHo=o(" to load the model weights."),DHo=l(),F(fF.$$.fragment),GHo=l(),io=a("div"),F(V0.$$.fragment),OHo=l(),gpe=a("p"),VHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),XHo=l(),Da=a("p"),zHo=o("The model class to instantiate is selected based on the "),hpe=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),Ga=a("ul"),mF=a("li"),_pe=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),KV=a("a"),oUo=o("Data2VecAudioForAudioFrameClassification"),rUo=o(" (Data2VecAudio model)"),tUo=l(),gF=a("li"),bpe=a("strong"),aUo=o("unispeech-sat"),nUo=o(" \u2014 "),ZV=a("a"),sUo=o("UniSpeechSatForAudioFrameClassification"),lUo=o(" (UniSpeechSat model)"),iUo=l(),hF=a("li"),vpe=a("strong"),dUo=o("wav2vec2"),cUo=o(" \u2014 "),eX=a("a"),fUo=o("Wav2Vec2ForAudioFrameClassification"),mUo=o(" (Wav2Vec2 model)"),gUo=l(),pF=a("li"),Fpe=a("strong"),hUo=o("wavlm"),pUo=o(" \u2014 "),oX=a("a"),uUo=o("WavLMForAudioFrameClassification"),_Uo=o(" (WavLM model)"),bUo=l(),uF=a("p"),vUo=o("The model is set in evaluation mode by default using "),Tpe=a("code"),FUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=a("code"),MUo=o("model.train()"),EUo=l(),F(_F.$$.fragment),LIe=l(),gd=a("h2"),bF=a("a"),Epe=a("span"),F(X0.$$.fragment),CUo=l(),Cpe=a("span"),wUo=o("AutoModelForCTC"),xIe=l(),Vo=a("div"),F(z0.$$.fragment),AUo=l(),hd=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rX=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),tX=a("a"),$Uo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),Q0=a("p"),RUo=o("This class cannot be instantiated directly using "),wpe=a("code"),BUo=o("__init__()"),PUo=o(" (throws an error)."),IUo=l(),_t=a("div"),F(W0.$$.fragment),qUo=l(),Ape=a("p"),NUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jUo=l(),pd=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),F(vF.$$.fragment),QUo=l(),co=a("div"),F(H0.$$.fragment),WUo=l(),Lpe=a("p"),HUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),UUo=l(),Oa=a("p"),JUo=o("The model class to instantiate is selected based on the "),xpe=a("code"),YUo=o("model_type"),KUo=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(":"),tJo=l(),je=a("ul"),FF=a("li"),Spe=a("strong"),aJo=o("data2vec-audio"),nJo=o(" \u2014 "),nX=a("a"),sJo=o("Data2VecAudioForCTC"),lJo=o(" (Data2VecAudio model)"),iJo=l(),TF=a("li"),Rpe=a("strong"),dJo=o("hubert"),cJo=o(" \u2014 "),sX=a("a"),fJo=o("HubertForCTC"),mJo=o(" (Hubert model)"),gJo=l(),MF=a("li"),Bpe=a("strong"),hJo=o("sew"),pJo=o(" \u2014 "),lX=a("a"),uJo=o("SEWForCTC"),_Jo=o(" (SEW model)"),bJo=l(),EF=a("li"),Ppe=a("strong"),vJo=o("sew-d"),FJo=o(" \u2014 "),iX=a("a"),TJo=o("SEWDForCTC"),MJo=o(" (SEW-D model)"),EJo=l(),CF=a("li"),Ipe=a("strong"),CJo=o("unispeech"),wJo=o(" \u2014 "),dX=a("a"),AJo=o("UniSpeechForCTC"),yJo=o(" (UniSpeech model)"),LJo=l(),wF=a("li"),qpe=a("strong"),xJo=o("unispeech-sat"),$Jo=o(" \u2014 "),cX=a("a"),kJo=o("UniSpeechSatForCTC"),SJo=o(" (UniSpeechSat model)"),RJo=l(),AF=a("li"),Npe=a("strong"),BJo=o("wav2vec2"),PJo=o(" \u2014 "),fX=a("a"),IJo=o("Wav2Vec2ForCTC"),qJo=o(" (Wav2Vec2 model)"),NJo=l(),yF=a("li"),jpe=a("strong"),jJo=o("wavlm"),DJo=o(" \u2014 "),mX=a("a"),GJo=o("WavLMForCTC"),OJo=o(" (WavLM model)"),VJo=l(),LF=a("p"),XJo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),zJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),WJo=o("model.train()"),HJo=l(),F(xF.$$.fragment),$Ie=l(),ud=a("h2"),$F=a("a"),Ope=a("span"),F(U0.$$.fragment),UJo=l(),Vpe=a("span"),JJo=o("AutoModelForSpeechSeq2Seq"),kIe=l(),Xo=a("div"),F(J0.$$.fragment),YJo=l(),_d=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),hX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),Y0=a("p"),aYo=o("This class cannot be instantiated directly using "),Xpe=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),bt=a("div"),F(K0.$$.fragment),iYo=l(),zpe=a("p"),dYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cYo=l(),bd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),uYo=l(),F(kF.$$.fragment),_Yo=l(),fo=a("div"),F(Z0.$$.fragment),bYo=l(),Wpe=a("p"),vYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FYo=l(),Va=a("p"),TYo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),ey=a("ul"),SF=a("li"),Ype=a("strong"),xYo=o("speech-encoder-decoder"),$Yo=o(" \u2014 "),uX=a("a"),kYo=o("SpeechEncoderDecoderModel"),SYo=o(" (Speech Encoder decoder model)"),RYo=l(),RF=a("li"),Kpe=a("strong"),BYo=o("speech_to_text"),PYo=o(" \u2014 "),_X=a("a"),IYo=o("Speech2TextForConditionalGeneration"),qYo=o(" (Speech2Text model)"),NYo=l(),BF=a("p"),jYo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),DYo=o("model.eval()"),GYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),OYo=o("model.train()"),VYo=l(),F(PF.$$.fragment),SIe=l(),vd=a("h2"),IF=a("a"),oue=a("span"),F(oy.$$.fragment),XYo=l(),rue=a("span"),zYo=o("AutoModelForAudioXVector"),RIe=l(),zo=a("div"),F(ry.$$.fragment),QYo=l(),Fd=a("p"),WYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bX=a("a"),HYo=o("from_pretrained()"),UYo=o(" class method or the "),vX=a("a"),JYo=o("from_config()"),YYo=o(` class
method.`),KYo=l(),ty=a("p"),ZYo=o("This class cannot be instantiated directly using "),tue=a("code"),eKo=o("__init__()"),oKo=o(" (throws an error)."),rKo=l(),vt=a("div"),F(ay.$$.fragment),tKo=l(),aue=a("p"),aKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nKo=l(),Td=a("p"),sKo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),lKo=o("not"),iKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),dKo=o("from_pretrained()"),cKo=o(" to load the model weights."),fKo=l(),F(qF.$$.fragment),mKo=l(),mo=a("div"),F(ny.$$.fragment),gKo=l(),sue=a("p"),hKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pKo=l(),Xa=a("p"),uKo=o("The model class to instantiate is selected based on the "),lue=a("code"),_Ko=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),za=a("ul"),NF=a("li"),cue=a("strong"),CKo=o("data2vec-audio"),wKo=o(" \u2014 "),TX=a("a"),AKo=o("Data2VecAudioForXVector"),yKo=o(" (Data2VecAudio model)"),LKo=l(),jF=a("li"),fue=a("strong"),xKo=o("unispeech-sat"),$Ko=o(" \u2014 "),MX=a("a"),kKo=o("UniSpeechSatForXVector"),SKo=o(" (UniSpeechSat model)"),RKo=l(),DF=a("li"),mue=a("strong"),BKo=o("wav2vec2"),PKo=o(" \u2014 "),EX=a("a"),IKo=o("Wav2Vec2ForXVector"),qKo=o(" (Wav2Vec2 model)"),NKo=l(),GF=a("li"),gue=a("strong"),jKo=o("wavlm"),DKo=o(" \u2014 "),CX=a("a"),GKo=o("WavLMForXVector"),OKo=o(" (WavLM model)"),VKo=l(),OF=a("p"),XKo=o("The model is set in evaluation mode by default using "),hue=a("code"),zKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),WKo=o("model.train()"),HKo=l(),F(VF.$$.fragment),BIe=l(),Md=a("h2"),XF=a("a"),uue=a("span"),F(sy.$$.fragment),UKo=l(),_ue=a("span"),JKo=o("AutoModelForMaskedImageModeling"),PIe=l(),Qo=a("div"),F(ly.$$.fragment),YKo=l(),Ed=a("p"),KKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wX=a("a"),ZKo=o("from_pretrained()"),eZo=o(" class method or the "),AX=a("a"),oZo=o("from_config()"),rZo=o(` class
method.`),tZo=l(),iy=a("p"),aZo=o("This class cannot be instantiated directly using "),bue=a("code"),nZo=o("__init__()"),sZo=o(" (throws an error)."),lZo=l(),Ft=a("div"),F(dy.$$.fragment),iZo=l(),vue=a("p"),dZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cZo=l(),Cd=a("p"),fZo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),mZo=o("not"),gZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),hZo=o("from_pretrained()"),pZo=o(" to load the model weights."),uZo=l(),F(zF.$$.fragment),_Zo=l(),go=a("div"),F(cy.$$.fragment),bZo=l(),Tue=a("p"),vZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),FZo=l(),Qa=a("p"),TZo=o("The model class to instantiate is selected based on the "),Mue=a("code"),MZo=o("model_type"),EZo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),AZo=o("pretrained_model_name_or_path"),yZo=o(":"),LZo=l(),wd=a("ul"),QF=a("li"),wue=a("strong"),xZo=o("deit"),$Zo=o(" \u2014 "),LX=a("a"),kZo=o("DeiTForMaskedImageModeling"),SZo=o(" (DeiT model)"),RZo=l(),WF=a("li"),Aue=a("strong"),BZo=o("swin"),PZo=o(" \u2014 "),xX=a("a"),IZo=o("SwinForMaskedImageModeling"),qZo=o(" (Swin model)"),NZo=l(),HF=a("li"),yue=a("strong"),jZo=o("vit"),DZo=o(" \u2014 "),$X=a("a"),GZo=o("ViTForMaskedImageModeling"),OZo=o(" (ViT model)"),VZo=l(),UF=a("p"),XZo=o("The model is set in evaluation mode by default using "),Lue=a("code"),zZo=o("model.eval()"),QZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),WZo=o("model.train()"),HZo=l(),F(JF.$$.fragment),IIe=l(),Ad=a("h2"),YF=a("a"),$ue=a("span"),F(fy.$$.fragment),UZo=l(),kue=a("span"),JZo=o("AutoModelForObjectDetection"),qIe=l(),Wo=a("div"),F(my.$$.fragment),YZo=l(),yd=a("p"),KZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kX=a("a"),ZZo=o("from_pretrained()"),eer=o(" class method or the "),SX=a("a"),oer=o("from_config()"),rer=o(` class
method.`),ter=l(),gy=a("p"),aer=o("This class cannot be instantiated directly using "),Sue=a("code"),ner=o("__init__()"),ser=o(" (throws an error)."),ler=l(),Tt=a("div"),F(hy.$$.fragment),ier=l(),Rue=a("p"),der=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cer=l(),Ld=a("p"),fer=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),mer=o("not"),ger=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),her=o("from_pretrained()"),per=o(" to load the model weights."),uer=l(),F(KF.$$.fragment),_er=l(),ho=a("div"),F(py.$$.fragment),ber=l(),Pue=a("p"),ver=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Fer=l(),Wa=a("p"),Ter=o("The model class to instantiate is selected based on the "),Iue=a("code"),Mer=o("model_type"),Eer=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Aer=o("pretrained_model_name_or_path"),yer=o(":"),Ler=l(),uy=a("ul"),ZF=a("li"),jue=a("strong"),xer=o("detr"),$er=o(" \u2014 "),BX=a("a"),ker=o("DetrForObjectDetection"),Ser=o(" (DETR model)"),Rer=l(),e6=a("li"),Due=a("strong"),Ber=o("yolos"),Per=o(" \u2014 "),PX=a("a"),Ier=o("YolosForObjectDetection"),qer=o(" (YOLOS model)"),Ner=l(),o6=a("p"),jer=o("The model is set in evaluation mode by default using "),Gue=a("code"),Der=o("model.eval()"),Ger=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),Oer=o("model.train()"),Ver=l(),F(r6.$$.fragment),NIe=l(),xd=a("h2"),t6=a("a"),Vue=a("span"),F(_y.$$.fragment),Xer=l(),Xue=a("span"),zer=o("AutoModelForImageSegmentation"),jIe=l(),Ho=a("div"),F(by.$$.fragment),Qer=l(),$d=a("p"),Wer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IX=a("a"),Her=o("from_pretrained()"),Uer=o(" class method or the "),qX=a("a"),Jer=o("from_config()"),Yer=o(` class
method.`),Ker=l(),vy=a("p"),Zer=o("This class cannot be instantiated directly using "),zue=a("code"),eor=o("__init__()"),oor=o(" (throws an error)."),ror=l(),Mt=a("div"),F(Fy.$$.fragment),tor=l(),Que=a("p"),aor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),nor=l(),kd=a("p"),sor=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),lor=o("not"),ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),dor=o("from_pretrained()"),cor=o(" to load the model weights."),mor=l(),F(a6.$$.fragment),gor=l(),po=a("div"),F(Ty.$$.fragment),hor=l(),Hue=a("p"),por=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uor=l(),Ha=a("p"),_or=o("The model class to instantiate is selected based on the "),Uue=a("code"),bor=o("model_type"),vor=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(":"),Cor=l(),Kue=a("ul"),n6=a("li"),Zue=a("strong"),wor=o("detr"),Aor=o(" \u2014 "),jX=a("a"),yor=o("DetrForSegmentation"),Lor=o(" (DETR model)"),xor=l(),s6=a("p"),$or=o("The model is set in evaluation mode by default using "),e_e=a("code"),kor=o("model.eval()"),Sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),Ror=o("model.train()"),Bor=l(),F(l6.$$.fragment),DIe=l(),Sd=a("h2"),i6=a("a"),r_e=a("span"),F(My.$$.fragment),Por=l(),t_e=a("span"),Ior=o("AutoModelForSemanticSegmentation"),GIe=l(),Uo=a("div"),F(Ey.$$.fragment),qor=l(),Rd=a("p"),Nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DX=a("a"),jor=o("from_pretrained()"),Dor=o(" class method or the "),GX=a("a"),Gor=o("from_config()"),Oor=o(` class
method.`),Vor=l(),Cy=a("p"),Xor=o("This class cannot be instantiated directly using "),a_e=a("code"),zor=o("__init__()"),Qor=o(" (throws an error)."),Wor=l(),Et=a("div"),F(wy.$$.fragment),Hor=l(),n_e=a("p"),Uor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jor=l(),Bd=a("p"),Yor=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),Kor=o("not"),Zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),err=o("from_pretrained()"),orr=o(" to load the model weights."),rrr=l(),F(d6.$$.fragment),trr=l(),uo=a("div"),F(Ay.$$.fragment),arr=l(),l_e=a("p"),nrr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),srr=l(),Ua=a("p"),lrr=o("The model class to instantiate is selected based on the "),i_e=a("code"),irr=o("model_type"),drr=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),crr=o("pretrained_model_name_or_path"),frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(":"),hrr=l(),Ja=a("ul"),c6=a("li"),f_e=a("strong"),prr=o("beit"),urr=o(" \u2014 "),VX=a("a"),_rr=o("BeitForSemanticSegmentation"),brr=o(" (BEiT model)"),vrr=l(),f6=a("li"),m_e=a("strong"),Frr=o("data2vec-vision"),Trr=o(" \u2014 "),XX=a("a"),Mrr=o("Data2VecVisionForSemanticSegmentation"),Err=o(" (Data2VecVision model)"),Crr=l(),m6=a("li"),g_e=a("strong"),wrr=o("dpt"),Arr=o(" \u2014 "),zX=a("a"),yrr=o("DPTForSemanticSegmentation"),Lrr=o(" (DPT model)"),xrr=l(),g6=a("li"),h_e=a("strong"),$rr=o("segformer"),krr=o(" \u2014 "),QX=a("a"),Srr=o("SegformerForSemanticSegmentation"),Rrr=o(" (SegFormer model)"),Brr=l(),h6=a("p"),Prr=o("The model is set in evaluation mode by default using "),p_e=a("code"),Irr=o("model.eval()"),qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),Nrr=o("model.train()"),jrr=l(),F(p6.$$.fragment),OIe=l(),Pd=a("h2"),u6=a("a"),__e=a("span"),F(yy.$$.fragment),Drr=l(),b_e=a("span"),Grr=o("AutoModelForInstanceSegmentation"),VIe=l(),Jo=a("div"),F(Ly.$$.fragment),Orr=l(),Id=a("p"),Vrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WX=a("a"),Xrr=o("from_pretrained()"),zrr=o(" class method or the "),HX=a("a"),Qrr=o("from_config()"),Wrr=o(` class
method.`),Hrr=l(),xy=a("p"),Urr=o("This class cannot be instantiated directly using "),v_e=a("code"),Jrr=o("__init__()"),Yrr=o(" (throws an error)."),Krr=l(),Ct=a("div"),F($y.$$.fragment),Zrr=l(),F_e=a("p"),etr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),otr=l(),qd=a("p"),rtr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),ttr=o("not"),atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),ntr=o("from_pretrained()"),str=o(" to load the model weights."),ltr=l(),F(_6.$$.fragment),itr=l(),_o=a("div"),F(ky.$$.fragment),dtr=l(),M_e=a("p"),ctr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ftr=l(),Ya=a("p"),mtr=o("The model class to instantiate is selected based on the "),E_e=a("code"),gtr=o("model_type"),htr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),ptr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),_tr=o("pretrained_model_name_or_path"),btr=o(":"),vtr=l(),A_e=a("ul"),b6=a("li"),y_e=a("strong"),Ftr=o("maskformer"),Ttr=o(" \u2014 "),JX=a("a"),Mtr=o("MaskFormerForInstanceSegmentation"),Etr=o(" (MaskFormer model)"),Ctr=l(),v6=a("p"),wtr=o("The model is set in evaluation mode by default using "),L_e=a("code"),Atr=o("model.eval()"),ytr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),Ltr=o("model.train()"),xtr=l(),F(F6.$$.fragment),XIe=l(),Nd=a("h2"),T6=a("a"),$_e=a("span"),F(Sy.$$.fragment),$tr=l(),k_e=a("span"),ktr=o("TFAutoModel"),zIe=l(),Yo=a("div"),F(Ry.$$.fragment),Str=l(),jd=a("p"),Rtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YX=a("a"),Btr=o("from_pretrained()"),Ptr=o(" class method or the "),KX=a("a"),Itr=o("from_config()"),qtr=o(` class
method.`),Ntr=l(),By=a("p"),jtr=o("This class cannot be instantiated directly using "),S_e=a("code"),Dtr=o("__init__()"),Gtr=o(" (throws an error)."),Otr=l(),wt=a("div"),F(Py.$$.fragment),Vtr=l(),R_e=a("p"),Xtr=o("Instantiates one of the base model classes of the library from a configuration."),ztr=l(),Dd=a("p"),Qtr=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),Wtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Utr=o("from_pretrained()"),Jtr=o(" to load the model weights."),Ytr=l(),F(M6.$$.fragment),Ktr=l(),wr=a("div"),F(Iy.$$.fragment),Ztr=l(),P_e=a("p"),ear=o("Instantiate one of the base model classes of the library from a pretrained model."),oar=l(),Ka=a("p"),rar=o("The model class to instantiate is selected based on the "),I_e=a("code"),tar=o("model_type"),aar=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),nar=o("pretrained_model_name_or_path"),sar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(":"),dar=l(),N=a("ul"),E6=a("li"),j_e=a("strong"),car=o("albert"),far=o(" \u2014 "),ez=a("a"),mar=o("TFAlbertModel"),gar=o(" (ALBERT model)"),har=l(),C6=a("li"),D_e=a("strong"),par=o("bart"),uar=o(" \u2014 "),oz=a("a"),_ar=o("TFBartModel"),bar=o(" (BART model)"),Far=l(),w6=a("li"),G_e=a("strong"),Tar=o("bert"),Mar=o(" \u2014 "),rz=a("a"),Ear=o("TFBertModel"),Car=o(" (BERT model)"),war=l(),A6=a("li"),O_e=a("strong"),Aar=o("blenderbot"),yar=o(" \u2014 "),tz=a("a"),Lar=o("TFBlenderbotModel"),xar=o(" (Blenderbot model)"),$ar=l(),y6=a("li"),V_e=a("strong"),kar=o("blenderbot-small"),Sar=o(" \u2014 "),az=a("a"),Rar=o("TFBlenderbotSmallModel"),Bar=o(" (BlenderbotSmall model)"),Par=l(),L6=a("li"),X_e=a("strong"),Iar=o("camembert"),qar=o(" \u2014 "),nz=a("a"),Nar=o("TFCamembertModel"),jar=o(" (CamemBERT model)"),Dar=l(),x6=a("li"),z_e=a("strong"),Gar=o("clip"),Oar=o(" \u2014 "),sz=a("a"),Var=o("TFCLIPModel"),Xar=o(" (CLIP model)"),zar=l(),$6=a("li"),Q_e=a("strong"),Qar=o("convbert"),War=o(" \u2014 "),lz=a("a"),Har=o("TFConvBertModel"),Uar=o(" (ConvBERT model)"),Jar=l(),k6=a("li"),W_e=a("strong"),Yar=o("convnext"),Kar=o(" \u2014 "),iz=a("a"),Zar=o("TFConvNextModel"),enr=o(" (ConvNext model)"),onr=l(),S6=a("li"),H_e=a("strong"),rnr=o("ctrl"),tnr=o(" \u2014 "),dz=a("a"),anr=o("TFCTRLModel"),nnr=o(" (CTRL model)"),snr=l(),R6=a("li"),U_e=a("strong"),lnr=o("data2vec-vision"),inr=o(" \u2014 "),cz=a("a"),dnr=o("TFData2VecVisionModel"),cnr=o(" (Data2VecVision model)"),fnr=l(),B6=a("li"),J_e=a("strong"),mnr=o("deberta"),gnr=o(" \u2014 "),fz=a("a"),hnr=o("TFDebertaModel"),pnr=o(" (DeBERTa model)"),unr=l(),P6=a("li"),Y_e=a("strong"),_nr=o("deberta-v2"),bnr=o(" \u2014 "),mz=a("a"),vnr=o("TFDebertaV2Model"),Fnr=o(" (DeBERTa-v2 model)"),Tnr=l(),I6=a("li"),K_e=a("strong"),Mnr=o("distilbert"),Enr=o(" \u2014 "),gz=a("a"),Cnr=o("TFDistilBertModel"),wnr=o(" (DistilBERT model)"),Anr=l(),q6=a("li"),Z_e=a("strong"),ynr=o("dpr"),Lnr=o(" \u2014 "),hz=a("a"),xnr=o("TFDPRQuestionEncoder"),$nr=o(" (DPR model)"),knr=l(),N6=a("li"),e1e=a("strong"),Snr=o("electra"),Rnr=o(" \u2014 "),pz=a("a"),Bnr=o("TFElectraModel"),Pnr=o(" (ELECTRA model)"),Inr=l(),j6=a("li"),o1e=a("strong"),qnr=o("flaubert"),Nnr=o(" \u2014 "),uz=a("a"),jnr=o("TFFlaubertModel"),Dnr=o(" (FlauBERT model)"),Gnr=l(),Ps=a("li"),r1e=a("strong"),Onr=o("funnel"),Vnr=o(" \u2014 "),_z=a("a"),Xnr=o("TFFunnelModel"),znr=o(" or "),bz=a("a"),Qnr=o("TFFunnelBaseModel"),Wnr=o(" (Funnel Transformer model)"),Hnr=l(),D6=a("li"),t1e=a("strong"),Unr=o("gpt2"),Jnr=o(" \u2014 "),vz=a("a"),Ynr=o("TFGPT2Model"),Knr=o(" (OpenAI GPT-2 model)"),Znr=l(),G6=a("li"),a1e=a("strong"),esr=o("gptj"),osr=o(" \u2014 "),Fz=a("a"),rsr=o("TFGPTJModel"),tsr=o(" (GPT-J model)"),asr=l(),O6=a("li"),n1e=a("strong"),nsr=o("hubert"),ssr=o(" \u2014 "),Tz=a("a"),lsr=o("TFHubertModel"),isr=o(" (Hubert model)"),dsr=l(),V6=a("li"),s1e=a("strong"),csr=o("layoutlm"),fsr=o(" \u2014 "),Mz=a("a"),msr=o("TFLayoutLMModel"),gsr=o(" (LayoutLM model)"),hsr=l(),X6=a("li"),l1e=a("strong"),psr=o("led"),usr=o(" \u2014 "),Ez=a("a"),_sr=o("TFLEDModel"),bsr=o(" (LED model)"),vsr=l(),z6=a("li"),i1e=a("strong"),Fsr=o("longformer"),Tsr=o(" \u2014 "),Cz=a("a"),Msr=o("TFLongformerModel"),Esr=o(" (Longformer model)"),Csr=l(),Q6=a("li"),d1e=a("strong"),wsr=o("lxmert"),Asr=o(" \u2014 "),wz=a("a"),ysr=o("TFLxmertModel"),Lsr=o(" (LXMERT model)"),xsr=l(),W6=a("li"),c1e=a("strong"),$sr=o("marian"),ksr=o(" \u2014 "),Az=a("a"),Ssr=o("TFMarianModel"),Rsr=o(" (Marian model)"),Bsr=l(),H6=a("li"),f1e=a("strong"),Psr=o("mbart"),Isr=o(" \u2014 "),yz=a("a"),qsr=o("TFMBartModel"),Nsr=o(" (mBART model)"),jsr=l(),U6=a("li"),m1e=a("strong"),Dsr=o("mobilebert"),Gsr=o(" \u2014 "),Lz=a("a"),Osr=o("TFMobileBertModel"),Vsr=o(" (MobileBERT model)"),Xsr=l(),J6=a("li"),g1e=a("strong"),zsr=o("mpnet"),Qsr=o(" \u2014 "),xz=a("a"),Wsr=o("TFMPNetModel"),Hsr=o(" (MPNet model)"),Usr=l(),Y6=a("li"),h1e=a("strong"),Jsr=o("mt5"),Ysr=o(" \u2014 "),$z=a("a"),Ksr=o("TFMT5Model"),Zsr=o(" (mT5 model)"),elr=l(),K6=a("li"),p1e=a("strong"),olr=o("openai-gpt"),rlr=o(" \u2014 "),kz=a("a"),tlr=o("TFOpenAIGPTModel"),alr=o(" (OpenAI GPT model)"),nlr=l(),Z6=a("li"),u1e=a("strong"),slr=o("pegasus"),llr=o(" \u2014 "),Sz=a("a"),ilr=o("TFPegasusModel"),dlr=o(" (Pegasus model)"),clr=l(),eT=a("li"),_1e=a("strong"),flr=o("rembert"),mlr=o(" \u2014 "),Rz=a("a"),glr=o("TFRemBertModel"),hlr=o(" (RemBERT model)"),plr=l(),oT=a("li"),b1e=a("strong"),ulr=o("roberta"),_lr=o(" \u2014 "),Bz=a("a"),blr=o("TFRobertaModel"),vlr=o(" (RoBERTa model)"),Flr=l(),rT=a("li"),v1e=a("strong"),Tlr=o("roformer"),Mlr=o(" \u2014 "),Pz=a("a"),Elr=o("TFRoFormerModel"),Clr=o(" (RoFormer model)"),wlr=l(),tT=a("li"),F1e=a("strong"),Alr=o("speech_to_text"),ylr=o(" \u2014 "),Iz=a("a"),Llr=o("TFSpeech2TextModel"),xlr=o(" (Speech2Text model)"),$lr=l(),aT=a("li"),T1e=a("strong"),klr=o("swin"),Slr=o(" \u2014 "),qz=a("a"),Rlr=o("TFSwinModel"),Blr=o(" (Swin model)"),Plr=l(),nT=a("li"),M1e=a("strong"),Ilr=o("t5"),qlr=o(" \u2014 "),Nz=a("a"),Nlr=o("TFT5Model"),jlr=o(" (T5 model)"),Dlr=l(),sT=a("li"),E1e=a("strong"),Glr=o("tapas"),Olr=o(" \u2014 "),jz=a("a"),Vlr=o("TFTapasModel"),Xlr=o(" (TAPAS model)"),zlr=l(),lT=a("li"),C1e=a("strong"),Qlr=o("transfo-xl"),Wlr=o(" \u2014 "),Dz=a("a"),Hlr=o("TFTransfoXLModel"),Ulr=o(" (Transformer-XL model)"),Jlr=l(),iT=a("li"),w1e=a("strong"),Ylr=o("vit"),Klr=o(" \u2014 "),Gz=a("a"),Zlr=o("TFViTModel"),eir=o(" (ViT model)"),oir=l(),dT=a("li"),A1e=a("strong"),rir=o("vit_mae"),tir=o(" \u2014 "),Oz=a("a"),air=o("TFViTMAEModel"),nir=o(" (ViTMAE model)"),sir=l(),cT=a("li"),y1e=a("strong"),lir=o("wav2vec2"),iir=o(" \u2014 "),Vz=a("a"),dir=o("TFWav2Vec2Model"),cir=o(" (Wav2Vec2 model)"),fir=l(),fT=a("li"),L1e=a("strong"),mir=o("xlm"),gir=o(" \u2014 "),Xz=a("a"),hir=o("TFXLMModel"),pir=o(" (XLM model)"),uir=l(),mT=a("li"),x1e=a("strong"),_ir=o("xlm-roberta"),bir=o(" \u2014 "),zz=a("a"),vir=o("TFXLMRobertaModel"),Fir=o(" (XLM-RoBERTa model)"),Tir=l(),gT=a("li"),$1e=a("strong"),Mir=o("xlnet"),Eir=o(" \u2014 "),Qz=a("a"),Cir=o("TFXLNetModel"),wir=o(" (XLNet model)"),Air=l(),F(hT.$$.fragment),QIe=l(),Gd=a("h2"),pT=a("a"),k1e=a("span"),F(qy.$$.fragment),yir=l(),S1e=a("span"),Lir=o("TFAutoModelForPreTraining"),WIe=l(),Ko=a("div"),F(Ny.$$.fragment),xir=l(),Od=a("p"),$ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=a("a"),kir=o("from_pretrained()"),Sir=o(" class method or the "),Hz=a("a"),Rir=o("from_config()"),Bir=o(` class
method.`),Pir=l(),jy=a("p"),Iir=o("This class cannot be instantiated directly using "),R1e=a("code"),qir=o("__init__()"),Nir=o(" (throws an error)."),jir=l(),At=a("div"),F(Dy.$$.fragment),Dir=l(),B1e=a("p"),Gir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oir=l(),Vd=a("p"),Vir=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Xir=o("not"),zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Qir=o("from_pretrained()"),Wir=o(" to load the model weights."),Hir=l(),F(uT.$$.fragment),Uir=l(),Ar=a("div"),F(Gy.$$.fragment),Jir=l(),I1e=a("p"),Yir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kir=l(),Za=a("p"),Zir=o("The model class to instantiate is selected based on the "),q1e=a("code"),edr=o("model_type"),odr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),rdr=o("pretrained_model_name_or_path"),tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),adr=o("pretrained_model_name_or_path"),ndr=o(":"),sdr=l(),se=a("ul"),_T=a("li"),D1e=a("strong"),ldr=o("albert"),idr=o(" \u2014 "),Jz=a("a"),ddr=o("TFAlbertForPreTraining"),cdr=o(" (ALBERT model)"),fdr=l(),bT=a("li"),G1e=a("strong"),mdr=o("bart"),gdr=o(" \u2014 "),Yz=a("a"),hdr=o("TFBartForConditionalGeneration"),pdr=o(" (BART model)"),udr=l(),vT=a("li"),O1e=a("strong"),_dr=o("bert"),bdr=o(" \u2014 "),Kz=a("a"),vdr=o("TFBertForPreTraining"),Fdr=o(" (BERT model)"),Tdr=l(),FT=a("li"),V1e=a("strong"),Mdr=o("camembert"),Edr=o(" \u2014 "),Zz=a("a"),Cdr=o("TFCamembertForMaskedLM"),wdr=o(" (CamemBERT model)"),Adr=l(),TT=a("li"),X1e=a("strong"),ydr=o("ctrl"),Ldr=o(" \u2014 "),eQ=a("a"),xdr=o("TFCTRLLMHeadModel"),$dr=o(" (CTRL model)"),kdr=l(),MT=a("li"),z1e=a("strong"),Sdr=o("distilbert"),Rdr=o(" \u2014 "),oQ=a("a"),Bdr=o("TFDistilBertForMaskedLM"),Pdr=o(" (DistilBERT model)"),Idr=l(),ET=a("li"),Q1e=a("strong"),qdr=o("electra"),Ndr=o(" \u2014 "),rQ=a("a"),jdr=o("TFElectraForPreTraining"),Ddr=o(" (ELECTRA model)"),Gdr=l(),CT=a("li"),W1e=a("strong"),Odr=o("flaubert"),Vdr=o(" \u2014 "),tQ=a("a"),Xdr=o("TFFlaubertWithLMHeadModel"),zdr=o(" (FlauBERT model)"),Qdr=l(),wT=a("li"),H1e=a("strong"),Wdr=o("funnel"),Hdr=o(" \u2014 "),aQ=a("a"),Udr=o("TFFunnelForPreTraining"),Jdr=o(" (Funnel Transformer model)"),Ydr=l(),AT=a("li"),U1e=a("strong"),Kdr=o("gpt2"),Zdr=o(" \u2014 "),nQ=a("a"),ecr=o("TFGPT2LMHeadModel"),ocr=o(" (OpenAI GPT-2 model)"),rcr=l(),yT=a("li"),J1e=a("strong"),tcr=o("layoutlm"),acr=o(" \u2014 "),sQ=a("a"),ncr=o("TFLayoutLMForMaskedLM"),scr=o(" (LayoutLM model)"),lcr=l(),LT=a("li"),Y1e=a("strong"),icr=o("lxmert"),dcr=o(" \u2014 "),lQ=a("a"),ccr=o("TFLxmertForPreTraining"),fcr=o(" (LXMERT model)"),mcr=l(),xT=a("li"),K1e=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),iQ=a("a"),pcr=o("TFMobileBertForPreTraining"),ucr=o(" (MobileBERT model)"),_cr=l(),$T=a("li"),Z1e=a("strong"),bcr=o("mpnet"),vcr=o(" \u2014 "),dQ=a("a"),Fcr=o("TFMPNetForMaskedLM"),Tcr=o(" (MPNet model)"),Mcr=l(),kT=a("li"),e8e=a("strong"),Ecr=o("openai-gpt"),Ccr=o(" \u2014 "),cQ=a("a"),wcr=o("TFOpenAIGPTLMHeadModel"),Acr=o(" (OpenAI GPT model)"),ycr=l(),ST=a("li"),o8e=a("strong"),Lcr=o("roberta"),xcr=o(" \u2014 "),fQ=a("a"),$cr=o("TFRobertaForMaskedLM"),kcr=o(" (RoBERTa model)"),Scr=l(),RT=a("li"),r8e=a("strong"),Rcr=o("t5"),Bcr=o(" \u2014 "),mQ=a("a"),Pcr=o("TFT5ForConditionalGeneration"),Icr=o(" (T5 model)"),qcr=l(),BT=a("li"),t8e=a("strong"),Ncr=o("tapas"),jcr=o(" \u2014 "),gQ=a("a"),Dcr=o("TFTapasForMaskedLM"),Gcr=o(" (TAPAS model)"),Ocr=l(),PT=a("li"),a8e=a("strong"),Vcr=o("transfo-xl"),Xcr=o(" \u2014 "),hQ=a("a"),zcr=o("TFTransfoXLLMHeadModel"),Qcr=o(" (Transformer-XL model)"),Wcr=l(),IT=a("li"),n8e=a("strong"),Hcr=o("vit_mae"),Ucr=o(" \u2014 "),pQ=a("a"),Jcr=o("TFViTMAEForPreTraining"),Ycr=o(" (ViTMAE model)"),Kcr=l(),qT=a("li"),s8e=a("strong"),Zcr=o("xlm"),efr=o(" \u2014 "),uQ=a("a"),ofr=o("TFXLMWithLMHeadModel"),rfr=o(" (XLM model)"),tfr=l(),NT=a("li"),l8e=a("strong"),afr=o("xlm-roberta"),nfr=o(" \u2014 "),_Q=a("a"),sfr=o("TFXLMRobertaForMaskedLM"),lfr=o(" (XLM-RoBERTa model)"),ifr=l(),jT=a("li"),i8e=a("strong"),dfr=o("xlnet"),cfr=o(" \u2014 "),bQ=a("a"),ffr=o("TFXLNetLMHeadModel"),mfr=o(" (XLNet model)"),gfr=l(),F(DT.$$.fragment),HIe=l(),Xd=a("h2"),GT=a("a"),d8e=a("span"),F(Oy.$$.fragment),hfr=l(),c8e=a("span"),pfr=o("TFAutoModelForCausalLM"),UIe=l(),Zo=a("div"),F(Vy.$$.fragment),ufr=l(),zd=a("p"),_fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=a("a"),bfr=o("from_pretrained()"),vfr=o(" class method or the "),FQ=a("a"),Ffr=o("from_config()"),Tfr=o(` class
method.`),Mfr=l(),Xy=a("p"),Efr=o("This class cannot be instantiated directly using "),f8e=a("code"),Cfr=o("__init__()"),wfr=o(" (throws an error)."),Afr=l(),yt=a("div"),F(zy.$$.fragment),yfr=l(),m8e=a("p"),Lfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xfr=l(),Qd=a("p"),$fr=o(`Note:
Loading a model from its configuration file does `),g8e=a("strong"),kfr=o("not"),Sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Rfr=o("from_pretrained()"),Bfr=o(" to load the model weights."),Pfr=l(),F(OT.$$.fragment),Ifr=l(),yr=a("div"),F(Qy.$$.fragment),qfr=l(),h8e=a("p"),Nfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jfr=l(),en=a("p"),Dfr=o("The model class to instantiate is selected based on the "),p8e=a("code"),Gfr=o("model_type"),Ofr=o(` property of the config object (either
passed as an argument or loaded from `),u8e=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),zfr=o("pretrained_model_name_or_path"),Qfr=o(":"),Wfr=l(),Te=a("ul"),VT=a("li"),b8e=a("strong"),Hfr=o("bert"),Ufr=o(" \u2014 "),MQ=a("a"),Jfr=o("TFBertLMHeadModel"),Yfr=o(" (BERT model)"),Kfr=l(),XT=a("li"),v8e=a("strong"),Zfr=o("camembert"),emr=o(" \u2014 "),EQ=a("a"),omr=o("TFCamembertForCausalLM"),rmr=o(" (CamemBERT model)"),tmr=l(),zT=a("li"),F8e=a("strong"),amr=o("ctrl"),nmr=o(" \u2014 "),CQ=a("a"),smr=o("TFCTRLLMHeadModel"),lmr=o(" (CTRL model)"),imr=l(),QT=a("li"),T8e=a("strong"),dmr=o("gpt2"),cmr=o(" \u2014 "),wQ=a("a"),fmr=o("TFGPT2LMHeadModel"),mmr=o(" (OpenAI GPT-2 model)"),gmr=l(),WT=a("li"),M8e=a("strong"),hmr=o("gptj"),pmr=o(" \u2014 "),AQ=a("a"),umr=o("TFGPTJForCausalLM"),_mr=o(" (GPT-J model)"),bmr=l(),HT=a("li"),E8e=a("strong"),vmr=o("openai-gpt"),Fmr=o(" \u2014 "),yQ=a("a"),Tmr=o("TFOpenAIGPTLMHeadModel"),Mmr=o(" (OpenAI GPT model)"),Emr=l(),UT=a("li"),C8e=a("strong"),Cmr=o("rembert"),wmr=o(" \u2014 "),LQ=a("a"),Amr=o("TFRemBertForCausalLM"),ymr=o(" (RemBERT model)"),Lmr=l(),JT=a("li"),w8e=a("strong"),xmr=o("roberta"),$mr=o(" \u2014 "),xQ=a("a"),kmr=o("TFRobertaForCausalLM"),Smr=o(" (RoBERTa model)"),Rmr=l(),YT=a("li"),A8e=a("strong"),Bmr=o("roformer"),Pmr=o(" \u2014 "),$Q=a("a"),Imr=o("TFRoFormerForCausalLM"),qmr=o(" (RoFormer model)"),Nmr=l(),KT=a("li"),y8e=a("strong"),jmr=o("transfo-xl"),Dmr=o(" \u2014 "),kQ=a("a"),Gmr=o("TFTransfoXLLMHeadModel"),Omr=o(" (Transformer-XL model)"),Vmr=l(),ZT=a("li"),L8e=a("strong"),Xmr=o("xlm"),zmr=o(" \u2014 "),SQ=a("a"),Qmr=o("TFXLMWithLMHeadModel"),Wmr=o(" (XLM model)"),Hmr=l(),e9=a("li"),x8e=a("strong"),Umr=o("xlnet"),Jmr=o(" \u2014 "),RQ=a("a"),Ymr=o("TFXLNetLMHeadModel"),Kmr=o(" (XLNet model)"),Zmr=l(),F(o9.$$.fragment),JIe=l(),Wd=a("h2"),r9=a("a"),$8e=a("span"),F(Wy.$$.fragment),egr=l(),k8e=a("span"),ogr=o("TFAutoModelForImageClassification"),YIe=l(),er=a("div"),F(Hy.$$.fragment),rgr=l(),Hd=a("p"),tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=a("a"),agr=o("from_pretrained()"),ngr=o(" class method or the "),PQ=a("a"),sgr=o("from_config()"),lgr=o(` class
method.`),igr=l(),Uy=a("p"),dgr=o("This class cannot be instantiated directly using "),S8e=a("code"),cgr=o("__init__()"),fgr=o(" (throws an error)."),mgr=l(),Lt=a("div"),F(Jy.$$.fragment),ggr=l(),R8e=a("p"),hgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pgr=l(),Ud=a("p"),ugr=o(`Note:
Loading a model from its configuration file does `),B8e=a("strong"),_gr=o("not"),bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),vgr=o("from_pretrained()"),Fgr=o(" to load the model weights."),Tgr=l(),F(t9.$$.fragment),Mgr=l(),Lr=a("div"),F(Yy.$$.fragment),Egr=l(),P8e=a("p"),Cgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wgr=l(),on=a("p"),Agr=o("The model class to instantiate is selected based on the "),I8e=a("code"),ygr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),q8e=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),kgr=o("pretrained_model_name_or_path"),Sgr=o(":"),Rgr=l(),rn=a("ul"),a9=a("li"),j8e=a("strong"),Bgr=o("convnext"),Pgr=o(" \u2014 "),qQ=a("a"),Igr=o("TFConvNextForImageClassification"),qgr=o(" (ConvNext model)"),Ngr=l(),n9=a("li"),D8e=a("strong"),jgr=o("data2vec-vision"),Dgr=o(" \u2014 "),NQ=a("a"),Ggr=o("TFData2VecVisionForImageClassification"),Ogr=o(" (Data2VecVision model)"),Vgr=l(),s9=a("li"),G8e=a("strong"),Xgr=o("swin"),zgr=o(" \u2014 "),jQ=a("a"),Qgr=o("TFSwinForImageClassification"),Wgr=o(" (Swin model)"),Hgr=l(),l9=a("li"),O8e=a("strong"),Ugr=o("vit"),Jgr=o(" \u2014 "),DQ=a("a"),Ygr=o("TFViTForImageClassification"),Kgr=o(" (ViT model)"),Zgr=l(),F(i9.$$.fragment),KIe=l(),Jd=a("h2"),d9=a("a"),V8e=a("span"),F(Ky.$$.fragment),ehr=l(),X8e=a("span"),ohr=o("TFAutoModelForMaskedLM"),ZIe=l(),or=a("div"),F(Zy.$$.fragment),rhr=l(),Yd=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),OQ=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),eL=a("p"),dhr=o("This class cannot be instantiated directly using "),z8e=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),xt=a("div"),F(oL.$$.fragment),ghr=l(),Q8e=a("p"),hhr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),phr=l(),Kd=a("p"),uhr=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),vhr=o("from_pretrained()"),Fhr=o(" to load the model weights."),Thr=l(),F(c9.$$.fragment),Mhr=l(),xr=a("div"),F(rL.$$.fragment),Ehr=l(),H8e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),whr=l(),tn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),U8e=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),ie=a("ul"),f9=a("li"),K8e=a("strong"),Bhr=o("albert"),Phr=o(" \u2014 "),XQ=a("a"),Ihr=o("TFAlbertForMaskedLM"),qhr=o(" (ALBERT model)"),Nhr=l(),m9=a("li"),Z8e=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),zQ=a("a"),Ghr=o("TFBertForMaskedLM"),Ohr=o(" (BERT model)"),Vhr=l(),g9=a("li"),ebe=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),QQ=a("a"),Qhr=o("TFCamembertForMaskedLM"),Whr=o(" (CamemBERT model)"),Hhr=l(),h9=a("li"),obe=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),WQ=a("a"),Yhr=o("TFConvBertForMaskedLM"),Khr=o(" (ConvBERT model)"),Zhr=l(),p9=a("li"),rbe=a("strong"),epr=o("deberta"),opr=o(" \u2014 "),HQ=a("a"),rpr=o("TFDebertaForMaskedLM"),tpr=o(" (DeBERTa model)"),apr=l(),u9=a("li"),tbe=a("strong"),npr=o("deberta-v2"),spr=o(" \u2014 "),UQ=a("a"),lpr=o("TFDebertaV2ForMaskedLM"),ipr=o(" (DeBERTa-v2 model)"),dpr=l(),_9=a("li"),abe=a("strong"),cpr=o("distilbert"),fpr=o(" \u2014 "),JQ=a("a"),mpr=o("TFDistilBertForMaskedLM"),gpr=o(" (DistilBERT model)"),hpr=l(),b9=a("li"),nbe=a("strong"),ppr=o("electra"),upr=o(" \u2014 "),YQ=a("a"),_pr=o("TFElectraForMaskedLM"),bpr=o(" (ELECTRA model)"),vpr=l(),v9=a("li"),sbe=a("strong"),Fpr=o("flaubert"),Tpr=o(" \u2014 "),KQ=a("a"),Mpr=o("TFFlaubertWithLMHeadModel"),Epr=o(" (FlauBERT model)"),Cpr=l(),F9=a("li"),lbe=a("strong"),wpr=o("funnel"),Apr=o(" \u2014 "),ZQ=a("a"),ypr=o("TFFunnelForMaskedLM"),Lpr=o(" (Funnel Transformer model)"),xpr=l(),T9=a("li"),ibe=a("strong"),$pr=o("layoutlm"),kpr=o(" \u2014 "),eW=a("a"),Spr=o("TFLayoutLMForMaskedLM"),Rpr=o(" (LayoutLM model)"),Bpr=l(),M9=a("li"),dbe=a("strong"),Ppr=o("longformer"),Ipr=o(" \u2014 "),oW=a("a"),qpr=o("TFLongformerForMaskedLM"),Npr=o(" (Longformer model)"),jpr=l(),E9=a("li"),cbe=a("strong"),Dpr=o("mobilebert"),Gpr=o(" \u2014 "),rW=a("a"),Opr=o("TFMobileBertForMaskedLM"),Vpr=o(" (MobileBERT model)"),Xpr=l(),C9=a("li"),fbe=a("strong"),zpr=o("mpnet"),Qpr=o(" \u2014 "),tW=a("a"),Wpr=o("TFMPNetForMaskedLM"),Hpr=o(" (MPNet model)"),Upr=l(),w9=a("li"),mbe=a("strong"),Jpr=o("rembert"),Ypr=o(" \u2014 "),aW=a("a"),Kpr=o("TFRemBertForMaskedLM"),Zpr=o(" (RemBERT model)"),eur=l(),A9=a("li"),gbe=a("strong"),our=o("roberta"),rur=o(" \u2014 "),nW=a("a"),tur=o("TFRobertaForMaskedLM"),aur=o(" (RoBERTa model)"),nur=l(),y9=a("li"),hbe=a("strong"),sur=o("roformer"),lur=o(" \u2014 "),sW=a("a"),iur=o("TFRoFormerForMaskedLM"),dur=o(" (RoFormer model)"),cur=l(),L9=a("li"),pbe=a("strong"),fur=o("tapas"),mur=o(" \u2014 "),lW=a("a"),gur=o("TFTapasForMaskedLM"),hur=o(" (TAPAS model)"),pur=l(),x9=a("li"),ube=a("strong"),uur=o("xlm"),_ur=o(" \u2014 "),iW=a("a"),bur=o("TFXLMWithLMHeadModel"),vur=o(" (XLM model)"),Fur=l(),$9=a("li"),_be=a("strong"),Tur=o("xlm-roberta"),Mur=o(" \u2014 "),dW=a("a"),Eur=o("TFXLMRobertaForMaskedLM"),Cur=o(" (XLM-RoBERTa model)"),wur=l(),F(k9.$$.fragment),eqe=l(),Zd=a("h2"),S9=a("a"),bbe=a("span"),F(tL.$$.fragment),Aur=l(),vbe=a("span"),yur=o("TFAutoModelForSeq2SeqLM"),oqe=l(),rr=a("div"),F(aL.$$.fragment),Lur=l(),ec=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=a("a"),$ur=o("from_pretrained()"),kur=o(" class method or the "),fW=a("a"),Sur=o("from_config()"),Rur=o(` class
method.`),Bur=l(),nL=a("p"),Pur=o("This class cannot be instantiated directly using "),Fbe=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),Nur=l(),$t=a("div"),F(sL.$$.fragment),jur=l(),Tbe=a("p"),Dur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gur=l(),oc=a("p"),Our=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Vur=o("not"),Xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),zur=o("from_pretrained()"),Qur=o(" to load the model weights."),Wur=l(),F(R9.$$.fragment),Hur=l(),$r=a("div"),F(lL.$$.fragment),Uur=l(),Ebe=a("p"),Jur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yur=l(),an=a("p"),Kur=o("The model class to instantiate is selected based on the "),Cbe=a("code"),Zur=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),ye=a("ul"),B9=a("li"),ybe=a("strong"),s_r=o("bart"),l_r=o(" \u2014 "),gW=a("a"),i_r=o("TFBartForConditionalGeneration"),d_r=o(" (BART model)"),c_r=l(),P9=a("li"),Lbe=a("strong"),f_r=o("blenderbot"),m_r=o(" \u2014 "),hW=a("a"),g_r=o("TFBlenderbotForConditionalGeneration"),h_r=o(" (Blenderbot model)"),p_r=l(),I9=a("li"),xbe=a("strong"),u_r=o("blenderbot-small"),__r=o(" \u2014 "),pW=a("a"),b_r=o("TFBlenderbotSmallForConditionalGeneration"),v_r=o(" (BlenderbotSmall model)"),F_r=l(),q9=a("li"),$be=a("strong"),T_r=o("encoder-decoder"),M_r=o(" \u2014 "),uW=a("a"),E_r=o("TFEncoderDecoderModel"),C_r=o(" (Encoder decoder model)"),w_r=l(),N9=a("li"),kbe=a("strong"),A_r=o("led"),y_r=o(" \u2014 "),_W=a("a"),L_r=o("TFLEDForConditionalGeneration"),x_r=o(" (LED model)"),$_r=l(),j9=a("li"),Sbe=a("strong"),k_r=o("marian"),S_r=o(" \u2014 "),bW=a("a"),R_r=o("TFMarianMTModel"),B_r=o(" (Marian model)"),P_r=l(),D9=a("li"),Rbe=a("strong"),I_r=o("mbart"),q_r=o(" \u2014 "),vW=a("a"),N_r=o("TFMBartForConditionalGeneration"),j_r=o(" (mBART model)"),D_r=l(),G9=a("li"),Bbe=a("strong"),G_r=o("mt5"),O_r=o(" \u2014 "),FW=a("a"),V_r=o("TFMT5ForConditionalGeneration"),X_r=o(" (mT5 model)"),z_r=l(),O9=a("li"),Pbe=a("strong"),Q_r=o("pegasus"),W_r=o(" \u2014 "),TW=a("a"),H_r=o("TFPegasusForConditionalGeneration"),U_r=o(" (Pegasus model)"),J_r=l(),V9=a("li"),Ibe=a("strong"),Y_r=o("t5"),K_r=o(" \u2014 "),MW=a("a"),Z_r=o("TFT5ForConditionalGeneration"),e1r=o(" (T5 model)"),o1r=l(),F(X9.$$.fragment),rqe=l(),rc=a("h2"),z9=a("a"),qbe=a("span"),F(iL.$$.fragment),r1r=l(),Nbe=a("span"),t1r=o("TFAutoModelForSequenceClassification"),tqe=l(),tr=a("div"),F(dL.$$.fragment),a1r=l(),tc=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EW=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),CW=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),cL=a("p"),f1r=o("This class cannot be instantiated directly using "),jbe=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),kt=a("div"),F(fL.$$.fragment),p1r=l(),Dbe=a("p"),u1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_1r=l(),ac=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(Q9.$$.fragment),C1r=l(),kr=a("div"),F(mL.$$.fragment),w1r=l(),Obe=a("p"),A1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y1r=l(),nn=a("p"),L1r=o("The model class to instantiate is selected based on the "),Vbe=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),R1r=o("pretrained_model_name_or_path"),B1r=o(":"),P1r=l(),Z=a("ul"),W9=a("li"),Qbe=a("strong"),I1r=o("albert"),q1r=o(" \u2014 "),AW=a("a"),N1r=o("TFAlbertForSequenceClassification"),j1r=o(" (ALBERT model)"),D1r=l(),H9=a("li"),Wbe=a("strong"),G1r=o("bert"),O1r=o(" \u2014 "),yW=a("a"),V1r=o("TFBertForSequenceClassification"),X1r=o(" (BERT model)"),z1r=l(),U9=a("li"),Hbe=a("strong"),Q1r=o("camembert"),W1r=o(" \u2014 "),LW=a("a"),H1r=o("TFCamembertForSequenceClassification"),U1r=o(" (CamemBERT model)"),J1r=l(),J9=a("li"),Ube=a("strong"),Y1r=o("convbert"),K1r=o(" \u2014 "),xW=a("a"),Z1r=o("TFConvBertForSequenceClassification"),e8r=o(" (ConvBERT model)"),o8r=l(),Y9=a("li"),Jbe=a("strong"),r8r=o("ctrl"),t8r=o(" \u2014 "),$W=a("a"),a8r=o("TFCTRLForSequenceClassification"),n8r=o(" (CTRL model)"),s8r=l(),K9=a("li"),Ybe=a("strong"),l8r=o("deberta"),i8r=o(" \u2014 "),kW=a("a"),d8r=o("TFDebertaForSequenceClassification"),c8r=o(" (DeBERTa model)"),f8r=l(),Z9=a("li"),Kbe=a("strong"),m8r=o("deberta-v2"),g8r=o(" \u2014 "),SW=a("a"),h8r=o("TFDebertaV2ForSequenceClassification"),p8r=o(" (DeBERTa-v2 model)"),u8r=l(),eM=a("li"),Zbe=a("strong"),_8r=o("distilbert"),b8r=o(" \u2014 "),RW=a("a"),v8r=o("TFDistilBertForSequenceClassification"),F8r=o(" (DistilBERT model)"),T8r=l(),oM=a("li"),e2e=a("strong"),M8r=o("electra"),E8r=o(" \u2014 "),BW=a("a"),C8r=o("TFElectraForSequenceClassification"),w8r=o(" (ELECTRA model)"),A8r=l(),rM=a("li"),o2e=a("strong"),y8r=o("flaubert"),L8r=o(" \u2014 "),PW=a("a"),x8r=o("TFFlaubertForSequenceClassification"),$8r=o(" (FlauBERT model)"),k8r=l(),tM=a("li"),r2e=a("strong"),S8r=o("funnel"),R8r=o(" \u2014 "),IW=a("a"),B8r=o("TFFunnelForSequenceClassification"),P8r=o(" (Funnel Transformer model)"),I8r=l(),aM=a("li"),t2e=a("strong"),q8r=o("gpt2"),N8r=o(" \u2014 "),qW=a("a"),j8r=o("TFGPT2ForSequenceClassification"),D8r=o(" (OpenAI GPT-2 model)"),G8r=l(),nM=a("li"),a2e=a("strong"),O8r=o("gptj"),V8r=o(" \u2014 "),NW=a("a"),X8r=o("TFGPTJForSequenceClassification"),z8r=o(" (GPT-J model)"),Q8r=l(),sM=a("li"),n2e=a("strong"),W8r=o("layoutlm"),H8r=o(" \u2014 "),jW=a("a"),U8r=o("TFLayoutLMForSequenceClassification"),J8r=o(" (LayoutLM model)"),Y8r=l(),lM=a("li"),s2e=a("strong"),K8r=o("longformer"),Z8r=o(" \u2014 "),DW=a("a"),ebr=o("TFLongformerForSequenceClassification"),obr=o(" (Longformer model)"),rbr=l(),iM=a("li"),l2e=a("strong"),tbr=o("mobilebert"),abr=o(" \u2014 "),GW=a("a"),nbr=o("TFMobileBertForSequenceClassification"),sbr=o(" (MobileBERT model)"),lbr=l(),dM=a("li"),i2e=a("strong"),ibr=o("mpnet"),dbr=o(" \u2014 "),OW=a("a"),cbr=o("TFMPNetForSequenceClassification"),fbr=o(" (MPNet model)"),mbr=l(),cM=a("li"),d2e=a("strong"),gbr=o("openai-gpt"),hbr=o(" \u2014 "),VW=a("a"),pbr=o("TFOpenAIGPTForSequenceClassification"),ubr=o(" (OpenAI GPT model)"),_br=l(),fM=a("li"),c2e=a("strong"),bbr=o("rembert"),vbr=o(" \u2014 "),XW=a("a"),Fbr=o("TFRemBertForSequenceClassification"),Tbr=o(" (RemBERT model)"),Mbr=l(),mM=a("li"),f2e=a("strong"),Ebr=o("roberta"),Cbr=o(" \u2014 "),zW=a("a"),wbr=o("TFRobertaForSequenceClassification"),Abr=o(" (RoBERTa model)"),ybr=l(),gM=a("li"),m2e=a("strong"),Lbr=o("roformer"),xbr=o(" \u2014 "),QW=a("a"),$br=o("TFRoFormerForSequenceClassification"),kbr=o(" (RoFormer model)"),Sbr=l(),hM=a("li"),g2e=a("strong"),Rbr=o("tapas"),Bbr=o(" \u2014 "),WW=a("a"),Pbr=o("TFTapasForSequenceClassification"),Ibr=o(" (TAPAS model)"),qbr=l(),pM=a("li"),h2e=a("strong"),Nbr=o("transfo-xl"),jbr=o(" \u2014 "),HW=a("a"),Dbr=o("TFTransfoXLForSequenceClassification"),Gbr=o(" (Transformer-XL model)"),Obr=l(),uM=a("li"),p2e=a("strong"),Vbr=o("xlm"),Xbr=o(" \u2014 "),UW=a("a"),zbr=o("TFXLMForSequenceClassification"),Qbr=o(" (XLM model)"),Wbr=l(),_M=a("li"),u2e=a("strong"),Hbr=o("xlm-roberta"),Ubr=o(" \u2014 "),JW=a("a"),Jbr=o("TFXLMRobertaForSequenceClassification"),Ybr=o(" (XLM-RoBERTa model)"),Kbr=l(),bM=a("li"),_2e=a("strong"),Zbr=o("xlnet"),e2r=o(" \u2014 "),YW=a("a"),o2r=o("TFXLNetForSequenceClassification"),r2r=o(" (XLNet model)"),t2r=l(),F(vM.$$.fragment),aqe=l(),nc=a("h2"),FM=a("a"),b2e=a("span"),F(gL.$$.fragment),a2r=l(),v2e=a("span"),n2r=o("TFAutoModelForMultipleChoice"),nqe=l(),ar=a("div"),F(hL.$$.fragment),s2r=l(),sc=a("p"),l2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KW=a("a"),i2r=o("from_pretrained()"),d2r=o(" class method or the "),ZW=a("a"),c2r=o("from_config()"),f2r=o(` class
method.`),m2r=l(),pL=a("p"),g2r=o("This class cannot be instantiated directly using "),F2e=a("code"),h2r=o("__init__()"),p2r=o(" (throws an error)."),u2r=l(),St=a("div"),F(uL.$$.fragment),_2r=l(),T2e=a("p"),b2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v2r=l(),lc=a("p"),F2r=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),T2r=o("not"),M2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),E2r=o("from_pretrained()"),C2r=o(" to load the model weights."),w2r=l(),F(TM.$$.fragment),A2r=l(),Sr=a("div"),F(_L.$$.fragment),y2r=l(),E2e=a("p"),L2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x2r=l(),sn=a("p"),$2r=o("The model class to instantiate is selected based on the "),C2e=a("code"),k2r=o("model_type"),S2r=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),R2r=o("pretrained_model_name_or_path"),B2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),P2r=o("pretrained_model_name_or_path"),I2r=o(":"),q2r=l(),he=a("ul"),MM=a("li"),y2e=a("strong"),N2r=o("albert"),j2r=o(" \u2014 "),oH=a("a"),D2r=o("TFAlbertForMultipleChoice"),G2r=o(" (ALBERT model)"),O2r=l(),EM=a("li"),L2e=a("strong"),V2r=o("bert"),X2r=o(" \u2014 "),rH=a("a"),z2r=o("TFBertForMultipleChoice"),Q2r=o(" (BERT model)"),W2r=l(),CM=a("li"),x2e=a("strong"),H2r=o("camembert"),U2r=o(" \u2014 "),tH=a("a"),J2r=o("TFCamembertForMultipleChoice"),Y2r=o(" (CamemBERT model)"),K2r=l(),wM=a("li"),$2e=a("strong"),Z2r=o("convbert"),evr=o(" \u2014 "),aH=a("a"),ovr=o("TFConvBertForMultipleChoice"),rvr=o(" (ConvBERT model)"),tvr=l(),AM=a("li"),k2e=a("strong"),avr=o("distilbert"),nvr=o(" \u2014 "),nH=a("a"),svr=o("TFDistilBertForMultipleChoice"),lvr=o(" (DistilBERT model)"),ivr=l(),yM=a("li"),S2e=a("strong"),dvr=o("electra"),cvr=o(" \u2014 "),sH=a("a"),fvr=o("TFElectraForMultipleChoice"),mvr=o(" (ELECTRA model)"),gvr=l(),LM=a("li"),R2e=a("strong"),hvr=o("flaubert"),pvr=o(" \u2014 "),lH=a("a"),uvr=o("TFFlaubertForMultipleChoice"),_vr=o(" (FlauBERT model)"),bvr=l(),xM=a("li"),B2e=a("strong"),vvr=o("funnel"),Fvr=o(" \u2014 "),iH=a("a"),Tvr=o("TFFunnelForMultipleChoice"),Mvr=o(" (Funnel Transformer model)"),Evr=l(),$M=a("li"),P2e=a("strong"),Cvr=o("longformer"),wvr=o(" \u2014 "),dH=a("a"),Avr=o("TFLongformerForMultipleChoice"),yvr=o(" (Longformer model)"),Lvr=l(),kM=a("li"),I2e=a("strong"),xvr=o("mobilebert"),$vr=o(" \u2014 "),cH=a("a"),kvr=o("TFMobileBertForMultipleChoice"),Svr=o(" (MobileBERT model)"),Rvr=l(),SM=a("li"),q2e=a("strong"),Bvr=o("mpnet"),Pvr=o(" \u2014 "),fH=a("a"),Ivr=o("TFMPNetForMultipleChoice"),qvr=o(" (MPNet model)"),Nvr=l(),RM=a("li"),N2e=a("strong"),jvr=o("rembert"),Dvr=o(" \u2014 "),mH=a("a"),Gvr=o("TFRemBertForMultipleChoice"),Ovr=o(" (RemBERT model)"),Vvr=l(),BM=a("li"),j2e=a("strong"),Xvr=o("roberta"),zvr=o(" \u2014 "),gH=a("a"),Qvr=o("TFRobertaForMultipleChoice"),Wvr=o(" (RoBERTa model)"),Hvr=l(),PM=a("li"),D2e=a("strong"),Uvr=o("roformer"),Jvr=o(" \u2014 "),hH=a("a"),Yvr=o("TFRoFormerForMultipleChoice"),Kvr=o(" (RoFormer model)"),Zvr=l(),IM=a("li"),G2e=a("strong"),eFr=o("xlm"),oFr=o(" \u2014 "),pH=a("a"),rFr=o("TFXLMForMultipleChoice"),tFr=o(" (XLM model)"),aFr=l(),qM=a("li"),O2e=a("strong"),nFr=o("xlm-roberta"),sFr=o(" \u2014 "),uH=a("a"),lFr=o("TFXLMRobertaForMultipleChoice"),iFr=o(" (XLM-RoBERTa model)"),dFr=l(),NM=a("li"),V2e=a("strong"),cFr=o("xlnet"),fFr=o(" \u2014 "),_H=a("a"),mFr=o("TFXLNetForMultipleChoice"),gFr=o(" (XLNet model)"),hFr=l(),F(jM.$$.fragment),sqe=l(),ic=a("h2"),DM=a("a"),X2e=a("span"),F(bL.$$.fragment),pFr=l(),z2e=a("span"),uFr=o("TFAutoModelForNextSentencePrediction"),lqe=l(),nr=a("div"),F(vL.$$.fragment),_Fr=l(),dc=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bH=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),vH=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),FL=a("p"),CFr=o("This class cannot be instantiated directly using "),Q2e=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),yFr=l(),Rt=a("div"),F(TL.$$.fragment),LFr=l(),W2e=a("p"),xFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Fr=l(),cc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),BFr=o("from_pretrained()"),PFr=o(" to load the model weights."),IFr=l(),F(GM.$$.fragment),qFr=l(),Rr=a("div"),F(ML.$$.fragment),NFr=l(),U2e=a("p"),jFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DFr=l(),ln=a("p"),GFr=o("The model class to instantiate is selected based on the "),J2e=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),QFr=o("pretrained_model_name_or_path"),WFr=o(":"),HFr=l(),EL=a("ul"),OM=a("li"),Z2e=a("strong"),UFr=o("bert"),JFr=o(" \u2014 "),TH=a("a"),YFr=o("TFBertForNextSentencePrediction"),KFr=o(" (BERT model)"),ZFr=l(),VM=a("li"),eve=a("strong"),e6r=o("mobilebert"),o6r=o(" \u2014 "),MH=a("a"),r6r=o("TFMobileBertForNextSentencePrediction"),t6r=o(" (MobileBERT model)"),a6r=l(),F(XM.$$.fragment),iqe=l(),fc=a("h2"),zM=a("a"),ove=a("span"),F(CL.$$.fragment),n6r=l(),rve=a("span"),s6r=o("TFAutoModelForTableQuestionAnswering"),dqe=l(),sr=a("div"),F(wL.$$.fragment),l6r=l(),mc=a("p"),i6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EH=a("a"),d6r=o("from_pretrained()"),c6r=o(" class method or the "),CH=a("a"),f6r=o("from_config()"),m6r=o(` class
method.`),g6r=l(),AL=a("p"),h6r=o("This class cannot be instantiated directly using "),tve=a("code"),p6r=o("__init__()"),u6r=o(" (throws an error)."),_6r=l(),Bt=a("div"),F(yL.$$.fragment),b6r=l(),ave=a("p"),v6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F6r=l(),gc=a("p"),T6r=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),M6r=o("not"),E6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),C6r=o("from_pretrained()"),w6r=o(" to load the model weights."),A6r=l(),F(QM.$$.fragment),y6r=l(),Br=a("div"),F(LL.$$.fragment),L6r=l(),sve=a("p"),x6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$6r=l(),dn=a("p"),k6r=o("The model class to instantiate is selected based on the "),lve=a("code"),S6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),B6r=o("pretrained_model_name_or_path"),P6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),I6r=o("pretrained_model_name_or_path"),q6r=o(":"),N6r=l(),cve=a("ul"),WM=a("li"),fve=a("strong"),j6r=o("tapas"),D6r=o(" \u2014 "),AH=a("a"),G6r=o("TFTapasForQuestionAnswering"),O6r=o(" (TAPAS model)"),V6r=l(),F(HM.$$.fragment),cqe=l(),hc=a("h2"),UM=a("a"),mve=a("span"),F(xL.$$.fragment),X6r=l(),gve=a("span"),z6r=o("TFAutoModelForTokenClassification"),fqe=l(),lr=a("div"),F($L.$$.fragment),Q6r=l(),pc=a("p"),W6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=a("a"),H6r=o("from_pretrained()"),U6r=o(" class method or the "),LH=a("a"),J6r=o("from_config()"),Y6r=o(` class
method.`),K6r=l(),kL=a("p"),Z6r=o("This class cannot be instantiated directly using "),hve=a("code"),eTr=o("__init__()"),oTr=o(" (throws an error)."),rTr=l(),Pt=a("div"),F(SL.$$.fragment),tTr=l(),pve=a("p"),aTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nTr=l(),uc=a("p"),sTr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),lTr=o("not"),iTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),dTr=o("from_pretrained()"),cTr=o(" to load the model weights."),fTr=l(),F(JM.$$.fragment),mTr=l(),Pr=a("div"),F(RL.$$.fragment),gTr=l(),_ve=a("p"),hTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pTr=l(),cn=a("p"),uTr=o("The model class to instantiate is selected based on the "),bve=a("code"),_Tr=o("model_type"),bTr=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),vTr=o("pretrained_model_name_or_path"),FTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(":"),ETr=l(),de=a("ul"),YM=a("li"),Tve=a("strong"),CTr=o("albert"),wTr=o(" \u2014 "),$H=a("a"),ATr=o("TFAlbertForTokenClassification"),yTr=o(" (ALBERT model)"),LTr=l(),KM=a("li"),Mve=a("strong"),xTr=o("bert"),$Tr=o(" \u2014 "),kH=a("a"),kTr=o("TFBertForTokenClassification"),STr=o(" (BERT model)"),RTr=l(),ZM=a("li"),Eve=a("strong"),BTr=o("camembert"),PTr=o(" \u2014 "),SH=a("a"),ITr=o("TFCamembertForTokenClassification"),qTr=o(" (CamemBERT model)"),NTr=l(),e4=a("li"),Cve=a("strong"),jTr=o("convbert"),DTr=o(" \u2014 "),RH=a("a"),GTr=o("TFConvBertForTokenClassification"),OTr=o(" (ConvBERT model)"),VTr=l(),o4=a("li"),wve=a("strong"),XTr=o("deberta"),zTr=o(" \u2014 "),BH=a("a"),QTr=o("TFDebertaForTokenClassification"),WTr=o(" (DeBERTa model)"),HTr=l(),r4=a("li"),Ave=a("strong"),UTr=o("deberta-v2"),JTr=o(" \u2014 "),PH=a("a"),YTr=o("TFDebertaV2ForTokenClassification"),KTr=o(" (DeBERTa-v2 model)"),ZTr=l(),t4=a("li"),yve=a("strong"),e9r=o("distilbert"),o9r=o(" \u2014 "),IH=a("a"),r9r=o("TFDistilBertForTokenClassification"),t9r=o(" (DistilBERT model)"),a9r=l(),a4=a("li"),Lve=a("strong"),n9r=o("electra"),s9r=o(" \u2014 "),qH=a("a"),l9r=o("TFElectraForTokenClassification"),i9r=o(" (ELECTRA model)"),d9r=l(),n4=a("li"),xve=a("strong"),c9r=o("flaubert"),f9r=o(" \u2014 "),NH=a("a"),m9r=o("TFFlaubertForTokenClassification"),g9r=o(" (FlauBERT model)"),h9r=l(),s4=a("li"),$ve=a("strong"),p9r=o("funnel"),u9r=o(" \u2014 "),jH=a("a"),_9r=o("TFFunnelForTokenClassification"),b9r=o(" (Funnel Transformer model)"),v9r=l(),l4=a("li"),kve=a("strong"),F9r=o("layoutlm"),T9r=o(" \u2014 "),DH=a("a"),M9r=o("TFLayoutLMForTokenClassification"),E9r=o(" (LayoutLM model)"),C9r=l(),i4=a("li"),Sve=a("strong"),w9r=o("longformer"),A9r=o(" \u2014 "),GH=a("a"),y9r=o("TFLongformerForTokenClassification"),L9r=o(" (Longformer model)"),x9r=l(),d4=a("li"),Rve=a("strong"),$9r=o("mobilebert"),k9r=o(" \u2014 "),OH=a("a"),S9r=o("TFMobileBertForTokenClassification"),R9r=o(" (MobileBERT model)"),B9r=l(),c4=a("li"),Bve=a("strong"),P9r=o("mpnet"),I9r=o(" \u2014 "),VH=a("a"),q9r=o("TFMPNetForTokenClassification"),N9r=o(" (MPNet model)"),j9r=l(),f4=a("li"),Pve=a("strong"),D9r=o("rembert"),G9r=o(" \u2014 "),XH=a("a"),O9r=o("TFRemBertForTokenClassification"),V9r=o(" (RemBERT model)"),X9r=l(),m4=a("li"),Ive=a("strong"),z9r=o("roberta"),Q9r=o(" \u2014 "),zH=a("a"),W9r=o("TFRobertaForTokenClassification"),H9r=o(" (RoBERTa model)"),U9r=l(),g4=a("li"),qve=a("strong"),J9r=o("roformer"),Y9r=o(" \u2014 "),QH=a("a"),K9r=o("TFRoFormerForTokenClassification"),Z9r=o(" (RoFormer model)"),eMr=l(),h4=a("li"),Nve=a("strong"),oMr=o("xlm"),rMr=o(" \u2014 "),WH=a("a"),tMr=o("TFXLMForTokenClassification"),aMr=o(" (XLM model)"),nMr=l(),p4=a("li"),jve=a("strong"),sMr=o("xlm-roberta"),lMr=o(" \u2014 "),HH=a("a"),iMr=o("TFXLMRobertaForTokenClassification"),dMr=o(" (XLM-RoBERTa model)"),cMr=l(),u4=a("li"),Dve=a("strong"),fMr=o("xlnet"),mMr=o(" \u2014 "),UH=a("a"),gMr=o("TFXLNetForTokenClassification"),hMr=o(" (XLNet model)"),pMr=l(),F(_4.$$.fragment),mqe=l(),_c=a("h2"),b4=a("a"),Gve=a("span"),F(BL.$$.fragment),uMr=l(),Ove=a("span"),_Mr=o("TFAutoModelForQuestionAnswering"),gqe=l(),ir=a("div"),F(PL.$$.fragment),bMr=l(),bc=a("p"),vMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JH=a("a"),FMr=o("from_pretrained()"),TMr=o(" class method or the "),YH=a("a"),MMr=o("from_config()"),EMr=o(` class
method.`),CMr=l(),IL=a("p"),wMr=o("This class cannot be instantiated directly using "),Vve=a("code"),AMr=o("__init__()"),yMr=o(" (throws an error)."),LMr=l(),It=a("div"),F(qL.$$.fragment),xMr=l(),Xve=a("p"),$Mr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kMr=l(),vc=a("p"),SMr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),RMr=o("not"),BMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),PMr=o("from_pretrained()"),IMr=o(" to load the model weights."),qMr=l(),F(v4.$$.fragment),NMr=l(),Ir=a("div"),F(NL.$$.fragment),jMr=l(),Qve=a("p"),DMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GMr=l(),fn=a("p"),OMr=o("The model class to instantiate is selected based on the "),Wve=a("code"),VMr=o("model_type"),XMr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),zMr=o("pretrained_model_name_or_path"),QMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),WMr=o("pretrained_model_name_or_path"),HMr=o(":"),UMr=l(),ce=a("ul"),F4=a("li"),Jve=a("strong"),JMr=o("albert"),YMr=o(" \u2014 "),ZH=a("a"),KMr=o("TFAlbertForQuestionAnswering"),ZMr=o(" (ALBERT model)"),e4r=l(),T4=a("li"),Yve=a("strong"),o4r=o("bert"),r4r=o(" \u2014 "),eU=a("a"),t4r=o("TFBertForQuestionAnswering"),a4r=o(" (BERT model)"),n4r=l(),M4=a("li"),Kve=a("strong"),s4r=o("camembert"),l4r=o(" \u2014 "),oU=a("a"),i4r=o("TFCamembertForQuestionAnswering"),d4r=o(" (CamemBERT model)"),c4r=l(),E4=a("li"),Zve=a("strong"),f4r=o("convbert"),m4r=o(" \u2014 "),rU=a("a"),g4r=o("TFConvBertForQuestionAnswering"),h4r=o(" (ConvBERT model)"),p4r=l(),C4=a("li"),eFe=a("strong"),u4r=o("deberta"),_4r=o(" \u2014 "),tU=a("a"),b4r=o("TFDebertaForQuestionAnswering"),v4r=o(" (DeBERTa model)"),F4r=l(),w4=a("li"),oFe=a("strong"),T4r=o("deberta-v2"),M4r=o(" \u2014 "),aU=a("a"),E4r=o("TFDebertaV2ForQuestionAnswering"),C4r=o(" (DeBERTa-v2 model)"),w4r=l(),A4=a("li"),rFe=a("strong"),A4r=o("distilbert"),y4r=o(" \u2014 "),nU=a("a"),L4r=o("TFDistilBertForQuestionAnswering"),x4r=o(" (DistilBERT model)"),$4r=l(),y4=a("li"),tFe=a("strong"),k4r=o("electra"),S4r=o(" \u2014 "),sU=a("a"),R4r=o("TFElectraForQuestionAnswering"),B4r=o(" (ELECTRA model)"),P4r=l(),L4=a("li"),aFe=a("strong"),I4r=o("flaubert"),q4r=o(" \u2014 "),lU=a("a"),N4r=o("TFFlaubertForQuestionAnsweringSimple"),j4r=o(" (FlauBERT model)"),D4r=l(),x4=a("li"),nFe=a("strong"),G4r=o("funnel"),O4r=o(" \u2014 "),iU=a("a"),V4r=o("TFFunnelForQuestionAnswering"),X4r=o(" (Funnel Transformer model)"),z4r=l(),$4=a("li"),sFe=a("strong"),Q4r=o("gptj"),W4r=o(" \u2014 "),dU=a("a"),H4r=o("TFGPTJForQuestionAnswering"),U4r=o(" (GPT-J model)"),J4r=l(),k4=a("li"),lFe=a("strong"),Y4r=o("longformer"),K4r=o(" \u2014 "),cU=a("a"),Z4r=o("TFLongformerForQuestionAnswering"),eEr=o(" (Longformer model)"),oEr=l(),S4=a("li"),iFe=a("strong"),rEr=o("mobilebert"),tEr=o(" \u2014 "),fU=a("a"),aEr=o("TFMobileBertForQuestionAnswering"),nEr=o(" (MobileBERT model)"),sEr=l(),R4=a("li"),dFe=a("strong"),lEr=o("mpnet"),iEr=o(" \u2014 "),mU=a("a"),dEr=o("TFMPNetForQuestionAnswering"),cEr=o(" (MPNet model)"),fEr=l(),B4=a("li"),cFe=a("strong"),mEr=o("rembert"),gEr=o(" \u2014 "),gU=a("a"),hEr=o("TFRemBertForQuestionAnswering"),pEr=o(" (RemBERT model)"),uEr=l(),P4=a("li"),fFe=a("strong"),_Er=o("roberta"),bEr=o(" \u2014 "),hU=a("a"),vEr=o("TFRobertaForQuestionAnswering"),FEr=o(" (RoBERTa model)"),TEr=l(),I4=a("li"),mFe=a("strong"),MEr=o("roformer"),EEr=o(" \u2014 "),pU=a("a"),CEr=o("TFRoFormerForQuestionAnswering"),wEr=o(" (RoFormer model)"),AEr=l(),q4=a("li"),gFe=a("strong"),yEr=o("xlm"),LEr=o(" \u2014 "),uU=a("a"),xEr=o("TFXLMForQuestionAnsweringSimple"),$Er=o(" (XLM model)"),kEr=l(),N4=a("li"),hFe=a("strong"),SEr=o("xlm-roberta"),REr=o(" \u2014 "),_U=a("a"),BEr=o("TFXLMRobertaForQuestionAnswering"),PEr=o(" (XLM-RoBERTa model)"),IEr=l(),j4=a("li"),pFe=a("strong"),qEr=o("xlnet"),NEr=o(" \u2014 "),bU=a("a"),jEr=o("TFXLNetForQuestionAnsweringSimple"),DEr=o(" (XLNet model)"),GEr=l(),F(D4.$$.fragment),hqe=l(),Fc=a("h2"),G4=a("a"),uFe=a("span"),F(jL.$$.fragment),OEr=l(),_Fe=a("span"),VEr=o("TFAutoModelForVision2Seq"),pqe=l(),dr=a("div"),F(DL.$$.fragment),XEr=l(),Tc=a("p"),zEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=a("a"),QEr=o("from_pretrained()"),WEr=o(" class method or the "),FU=a("a"),HEr=o("from_config()"),UEr=o(` class
method.`),JEr=l(),GL=a("p"),YEr=o("This class cannot be instantiated directly using "),bFe=a("code"),KEr=o("__init__()"),ZEr=o(" (throws an error)."),e5r=l(),qt=a("div"),F(OL.$$.fragment),o5r=l(),vFe=a("p"),r5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),t5r=l(),Mc=a("p"),a5r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),n5r=o("not"),s5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),l5r=o("from_pretrained()"),i5r=o(" to load the model weights."),d5r=l(),F(O4.$$.fragment),c5r=l(),qr=a("div"),F(VL.$$.fragment),f5r=l(),TFe=a("p"),m5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g5r=l(),mn=a("p"),h5r=o("The model class to instantiate is selected based on the "),MFe=a("code"),p5r=o("model_type"),u5r=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),_5r=o("pretrained_model_name_or_path"),b5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),v5r=o("pretrained_model_name_or_path"),F5r=o(":"),T5r=l(),wFe=a("ul"),V4=a("li"),AFe=a("strong"),M5r=o("vision-encoder-decoder"),E5r=o(" \u2014 "),MU=a("a"),C5r=o("TFVisionEncoderDecoderModel"),w5r=o(" (Vision Encoder decoder model)"),A5r=l(),F(X4.$$.fragment),uqe=l(),Ec=a("h2"),z4=a("a"),yFe=a("span"),F(XL.$$.fragment),y5r=l(),LFe=a("span"),L5r=o("TFAutoModelForSpeechSeq2Seq"),_qe=l(),cr=a("div"),F(zL.$$.fragment),x5r=l(),Cc=a("p"),$5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EU=a("a"),k5r=o("from_pretrained()"),S5r=o(" class method or the "),CU=a("a"),R5r=o("from_config()"),B5r=o(` class
method.`),P5r=l(),QL=a("p"),I5r=o("This class cannot be instantiated directly using "),xFe=a("code"),q5r=o("__init__()"),N5r=o(" (throws an error)."),j5r=l(),Nt=a("div"),F(WL.$$.fragment),D5r=l(),$Fe=a("p"),G5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O5r=l(),wc=a("p"),V5r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),X5r=o("not"),z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),Q5r=o("from_pretrained()"),W5r=o(" to load the model weights."),H5r=l(),F(Q4.$$.fragment),U5r=l(),Nr=a("div"),F(HL.$$.fragment),J5r=l(),SFe=a("p"),Y5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),K5r=l(),gn=a("p"),Z5r=o("The model class to instantiate is selected based on the "),RFe=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),IFe=a("ul"),W4=a("li"),qFe=a("strong"),lCr=o("speech_to_text"),iCr=o(" \u2014 "),AU=a("a"),dCr=o("TFSpeech2TextForConditionalGeneration"),cCr=o(" (Speech2Text model)"),fCr=l(),F(H4.$$.fragment),bqe=l(),Ac=a("h2"),U4=a("a"),NFe=a("span"),F(UL.$$.fragment),mCr=l(),jFe=a("span"),gCr=o("FlaxAutoModel"),vqe=l(),fr=a("div"),F(JL.$$.fragment),hCr=l(),yc=a("p"),pCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yU=a("a"),uCr=o("from_pretrained()"),_Cr=o(" class method or the "),LU=a("a"),bCr=o("from_config()"),vCr=o(` class
method.`),FCr=l(),YL=a("p"),TCr=o("This class cannot be instantiated directly using "),DFe=a("code"),MCr=o("__init__()"),ECr=o(" (throws an error)."),CCr=l(),jt=a("div"),F(KL.$$.fragment),wCr=l(),GFe=a("p"),ACr=o("Instantiates one of the base model classes of the library from a configuration."),yCr=l(),Lc=a("p"),LCr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),xCr=o("not"),$Cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),kCr=o("from_pretrained()"),SCr=o(" to load the model weights."),RCr=l(),F(J4.$$.fragment),BCr=l(),jr=a("div"),F(ZL.$$.fragment),PCr=l(),VFe=a("p"),ICr=o("Instantiate one of the base model classes of the library from a pretrained model."),qCr=l(),hn=a("p"),NCr=o("The model class to instantiate is selected based on the "),XFe=a("code"),jCr=o("model_type"),DCr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),GCr=o("pretrained_model_name_or_path"),OCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),VCr=o("pretrained_model_name_or_path"),XCr=o(":"),zCr=l(),re=a("ul"),Y4=a("li"),WFe=a("strong"),QCr=o("albert"),WCr=o(" \u2014 "),$U=a("a"),HCr=o("FlaxAlbertModel"),UCr=o(" (ALBERT model)"),JCr=l(),K4=a("li"),HFe=a("strong"),YCr=o("bart"),KCr=o(" \u2014 "),kU=a("a"),ZCr=o("FlaxBartModel"),e3r=o(" (BART model)"),o3r=l(),Z4=a("li"),UFe=a("strong"),r3r=o("beit"),t3r=o(" \u2014 "),SU=a("a"),a3r=o("FlaxBeitModel"),n3r=o(" (BEiT model)"),s3r=l(),eE=a("li"),JFe=a("strong"),l3r=o("bert"),i3r=o(" \u2014 "),RU=a("a"),d3r=o("FlaxBertModel"),c3r=o(" (BERT model)"),f3r=l(),oE=a("li"),YFe=a("strong"),m3r=o("big_bird"),g3r=o(" \u2014 "),BU=a("a"),h3r=o("FlaxBigBirdModel"),p3r=o(" (BigBird model)"),u3r=l(),rE=a("li"),KFe=a("strong"),_3r=o("blenderbot"),b3r=o(" \u2014 "),PU=a("a"),v3r=o("FlaxBlenderbotModel"),F3r=o(" (Blenderbot model)"),T3r=l(),tE=a("li"),ZFe=a("strong"),M3r=o("blenderbot-small"),E3r=o(" \u2014 "),IU=a("a"),C3r=o("FlaxBlenderbotSmallModel"),w3r=o(" (BlenderbotSmall model)"),A3r=l(),aE=a("li"),e6e=a("strong"),y3r=o("clip"),L3r=o(" \u2014 "),qU=a("a"),x3r=o("FlaxCLIPModel"),$3r=o(" (CLIP model)"),k3r=l(),nE=a("li"),o6e=a("strong"),S3r=o("distilbert"),R3r=o(" \u2014 "),NU=a("a"),B3r=o("FlaxDistilBertModel"),P3r=o(" (DistilBERT model)"),I3r=l(),sE=a("li"),r6e=a("strong"),q3r=o("electra"),N3r=o(" \u2014 "),jU=a("a"),j3r=o("FlaxElectraModel"),D3r=o(" (ELECTRA model)"),G3r=l(),lE=a("li"),t6e=a("strong"),O3r=o("gpt2"),V3r=o(" \u2014 "),DU=a("a"),X3r=o("FlaxGPT2Model"),z3r=o(" (OpenAI GPT-2 model)"),Q3r=l(),iE=a("li"),a6e=a("strong"),W3r=o("gpt_neo"),H3r=o(" \u2014 "),GU=a("a"),U3r=o("FlaxGPTNeoModel"),J3r=o(" (GPT Neo model)"),Y3r=l(),dE=a("li"),n6e=a("strong"),K3r=o("gptj"),Z3r=o(" \u2014 "),OU=a("a"),ewr=o("FlaxGPTJModel"),owr=o(" (GPT-J model)"),rwr=l(),cE=a("li"),s6e=a("strong"),twr=o("marian"),awr=o(" \u2014 "),VU=a("a"),nwr=o("FlaxMarianModel"),swr=o(" (Marian model)"),lwr=l(),fE=a("li"),l6e=a("strong"),iwr=o("mbart"),dwr=o(" \u2014 "),XU=a("a"),cwr=o("FlaxMBartModel"),fwr=o(" (mBART model)"),mwr=l(),mE=a("li"),i6e=a("strong"),gwr=o("mt5"),hwr=o(" \u2014 "),zU=a("a"),pwr=o("FlaxMT5Model"),uwr=o(" (mT5 model)"),_wr=l(),gE=a("li"),d6e=a("strong"),bwr=o("pegasus"),vwr=o(" \u2014 "),QU=a("a"),Fwr=o("FlaxPegasusModel"),Twr=o(" (Pegasus model)"),Mwr=l(),hE=a("li"),c6e=a("strong"),Ewr=o("roberta"),Cwr=o(" \u2014 "),WU=a("a"),wwr=o("FlaxRobertaModel"),Awr=o(" (RoBERTa model)"),ywr=l(),pE=a("li"),f6e=a("strong"),Lwr=o("roformer"),xwr=o(" \u2014 "),HU=a("a"),$wr=o("FlaxRoFormerModel"),kwr=o(" (RoFormer model)"),Swr=l(),uE=a("li"),m6e=a("strong"),Rwr=o("t5"),Bwr=o(" \u2014 "),UU=a("a"),Pwr=o("FlaxT5Model"),Iwr=o(" (T5 model)"),qwr=l(),_E=a("li"),g6e=a("strong"),Nwr=o("vision-text-dual-encoder"),jwr=o(" \u2014 "),JU=a("a"),Dwr=o("FlaxVisionTextDualEncoderModel"),Gwr=o(" (VisionTextDualEncoder model)"),Owr=l(),bE=a("li"),h6e=a("strong"),Vwr=o("vit"),Xwr=o(" \u2014 "),YU=a("a"),zwr=o("FlaxViTModel"),Qwr=o(" (ViT model)"),Wwr=l(),vE=a("li"),p6e=a("strong"),Hwr=o("wav2vec2"),Uwr=o(" \u2014 "),KU=a("a"),Jwr=o("FlaxWav2Vec2Model"),Ywr=o(" (Wav2Vec2 model)"),Kwr=l(),FE=a("li"),u6e=a("strong"),Zwr=o("xglm"),eAr=o(" \u2014 "),ZU=a("a"),oAr=o("FlaxXGLMModel"),rAr=o(" (XGLM model)"),tAr=l(),TE=a("li"),_6e=a("strong"),aAr=o("xlm-roberta"),nAr=o(" \u2014 "),eJ=a("a"),sAr=o("FlaxXLMRobertaModel"),lAr=o(" (XLM-RoBERTa model)"),iAr=l(),F(ME.$$.fragment),Fqe=l(),xc=a("h2"),EE=a("a"),b6e=a("span"),F(ex.$$.fragment),dAr=l(),v6e=a("span"),cAr=o("FlaxAutoModelForCausalLM"),Tqe=l(),mr=a("div"),F(ox.$$.fragment),fAr=l(),$c=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),rJ=a("a"),pAr=o("from_config()"),uAr=o(` class
method.`),_Ar=l(),rx=a("p"),bAr=o("This class cannot be instantiated directly using "),F6e=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),Dt=a("div"),F(tx.$$.fragment),MAr=l(),T6e=a("p"),EAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CAr=l(),kc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),M6e=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(CE.$$.fragment),kAr=l(),Dr=a("div"),F(ax.$$.fragment),SAr=l(),E6e=a("p"),RAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BAr=l(),pn=a("p"),PAr=o("The model class to instantiate is selected based on the "),C6e=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),w6e=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),ke=a("ul"),wE=a("li"),y6e=a("strong"),VAr=o("bart"),XAr=o(" \u2014 "),aJ=a("a"),zAr=o("FlaxBartForCausalLM"),QAr=o(" (BART model)"),WAr=l(),AE=a("li"),L6e=a("strong"),HAr=o("bert"),UAr=o(" \u2014 "),nJ=a("a"),JAr=o("FlaxBertForCausalLM"),YAr=o(" (BERT model)"),KAr=l(),yE=a("li"),x6e=a("strong"),ZAr=o("big_bird"),e0r=o(" \u2014 "),sJ=a("a"),o0r=o("FlaxBigBirdForCausalLM"),r0r=o(" (BigBird model)"),t0r=l(),LE=a("li"),$6e=a("strong"),a0r=o("electra"),n0r=o(" \u2014 "),lJ=a("a"),s0r=o("FlaxElectraForCausalLM"),l0r=o(" (ELECTRA model)"),i0r=l(),xE=a("li"),k6e=a("strong"),d0r=o("gpt2"),c0r=o(" \u2014 "),iJ=a("a"),f0r=o("FlaxGPT2LMHeadModel"),m0r=o(" (OpenAI GPT-2 model)"),g0r=l(),$E=a("li"),S6e=a("strong"),h0r=o("gpt_neo"),p0r=o(" \u2014 "),dJ=a("a"),u0r=o("FlaxGPTNeoForCausalLM"),_0r=o(" (GPT Neo model)"),b0r=l(),kE=a("li"),R6e=a("strong"),v0r=o("gptj"),F0r=o(" \u2014 "),cJ=a("a"),T0r=o("FlaxGPTJForCausalLM"),M0r=o(" (GPT-J model)"),E0r=l(),SE=a("li"),B6e=a("strong"),C0r=o("roberta"),w0r=o(" \u2014 "),fJ=a("a"),A0r=o("FlaxRobertaForCausalLM"),y0r=o(" (RoBERTa model)"),L0r=l(),RE=a("li"),P6e=a("strong"),x0r=o("xglm"),$0r=o(" \u2014 "),mJ=a("a"),k0r=o("FlaxXGLMForCausalLM"),S0r=o(" (XGLM model)"),R0r=l(),F(BE.$$.fragment),Mqe=l(),Sc=a("h2"),PE=a("a"),I6e=a("span"),F(nx.$$.fragment),B0r=l(),q6e=a("span"),P0r=o("FlaxAutoModelForPreTraining"),Eqe=l(),gr=a("div"),F(sx.$$.fragment),I0r=l(),Rc=a("p"),q0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=a("a"),N0r=o("from_pretrained()"),j0r=o(" class method or the "),hJ=a("a"),D0r=o("from_config()"),G0r=o(` class
method.`),O0r=l(),lx=a("p"),V0r=o("This class cannot be instantiated directly using "),N6e=a("code"),X0r=o("__init__()"),z0r=o(" (throws an error)."),Q0r=l(),Gt=a("div"),F(ix.$$.fragment),W0r=l(),j6e=a("p"),H0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U0r=l(),Bc=a("p"),J0r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Y0r=o("not"),K0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),Z0r=o("from_pretrained()"),eyr=o(" to load the model weights."),oyr=l(),F(IE.$$.fragment),ryr=l(),Gr=a("div"),F(dx.$$.fragment),tyr=l(),G6e=a("p"),ayr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nyr=l(),un=a("p"),syr=o("The model class to instantiate is selected based on the "),O6e=a("code"),lyr=o("model_type"),iyr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),dyr=o("pretrained_model_name_or_path"),cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(":"),gyr=l(),Me=a("ul"),qE=a("li"),z6e=a("strong"),hyr=o("albert"),pyr=o(" \u2014 "),uJ=a("a"),uyr=o("FlaxAlbertForPreTraining"),_yr=o(" (ALBERT model)"),byr=l(),NE=a("li"),Q6e=a("strong"),vyr=o("bart"),Fyr=o(" \u2014 "),_J=a("a"),Tyr=o("FlaxBartForConditionalGeneration"),Myr=o(" (BART model)"),Eyr=l(),jE=a("li"),W6e=a("strong"),Cyr=o("bert"),wyr=o(" \u2014 "),bJ=a("a"),Ayr=o("FlaxBertForPreTraining"),yyr=o(" (BERT model)"),Lyr=l(),DE=a("li"),H6e=a("strong"),xyr=o("big_bird"),$yr=o(" \u2014 "),vJ=a("a"),kyr=o("FlaxBigBirdForPreTraining"),Syr=o(" (BigBird model)"),Ryr=l(),GE=a("li"),U6e=a("strong"),Byr=o("electra"),Pyr=o(" \u2014 "),FJ=a("a"),Iyr=o("FlaxElectraForPreTraining"),qyr=o(" (ELECTRA model)"),Nyr=l(),OE=a("li"),J6e=a("strong"),jyr=o("mbart"),Dyr=o(" \u2014 "),TJ=a("a"),Gyr=o("FlaxMBartForConditionalGeneration"),Oyr=o(" (mBART model)"),Vyr=l(),VE=a("li"),Y6e=a("strong"),Xyr=o("mt5"),zyr=o(" \u2014 "),MJ=a("a"),Qyr=o("FlaxMT5ForConditionalGeneration"),Wyr=o(" (mT5 model)"),Hyr=l(),XE=a("li"),K6e=a("strong"),Uyr=o("roberta"),Jyr=o(" \u2014 "),EJ=a("a"),Yyr=o("FlaxRobertaForMaskedLM"),Kyr=o(" (RoBERTa model)"),Zyr=l(),zE=a("li"),Z6e=a("strong"),eLr=o("roformer"),oLr=o(" \u2014 "),CJ=a("a"),rLr=o("FlaxRoFormerForMaskedLM"),tLr=o(" (RoFormer model)"),aLr=l(),QE=a("li"),eTe=a("strong"),nLr=o("t5"),sLr=o(" \u2014 "),wJ=a("a"),lLr=o("FlaxT5ForConditionalGeneration"),iLr=o(" (T5 model)"),dLr=l(),WE=a("li"),oTe=a("strong"),cLr=o("wav2vec2"),fLr=o(" \u2014 "),AJ=a("a"),mLr=o("FlaxWav2Vec2ForPreTraining"),gLr=o(" (Wav2Vec2 model)"),hLr=l(),HE=a("li"),rTe=a("strong"),pLr=o("xlm-roberta"),uLr=o(" \u2014 "),yJ=a("a"),_Lr=o("FlaxXLMRobertaForMaskedLM"),bLr=o(" (XLM-RoBERTa model)"),vLr=l(),F(UE.$$.fragment),Cqe=l(),Pc=a("h2"),JE=a("a"),tTe=a("span"),F(cx.$$.fragment),FLr=l(),aTe=a("span"),TLr=o("FlaxAutoModelForMaskedLM"),wqe=l(),hr=a("div"),F(fx.$$.fragment),MLr=l(),Ic=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=a("a"),CLr=o("from_pretrained()"),wLr=o(" class method or the "),xJ=a("a"),ALr=o("from_config()"),yLr=o(` class
method.`),LLr=l(),mx=a("p"),xLr=o("This class cannot be instantiated directly using "),nTe=a("code"),$Lr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),Ot=a("div"),F(gx.$$.fragment),RLr=l(),sTe=a("p"),BLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PLr=l(),qc=a("p"),ILr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),qLr=o("not"),NLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),jLr=o("from_pretrained()"),DLr=o(" to load the model weights."),GLr=l(),F(YE.$$.fragment),OLr=l(),Or=a("div"),F(hx.$$.fragment),VLr=l(),iTe=a("p"),XLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zLr=l(),_n=a("p"),QLr=o("The model class to instantiate is selected based on the "),dTe=a("code"),WLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),Le=a("ul"),KE=a("li"),mTe=a("strong"),exr=o("albert"),oxr=o(" \u2014 "),kJ=a("a"),rxr=o("FlaxAlbertForMaskedLM"),txr=o(" (ALBERT model)"),axr=l(),ZE=a("li"),gTe=a("strong"),nxr=o("bart"),sxr=o(" \u2014 "),SJ=a("a"),lxr=o("FlaxBartForConditionalGeneration"),ixr=o(" (BART model)"),dxr=l(),e5=a("li"),hTe=a("strong"),cxr=o("bert"),fxr=o(" \u2014 "),RJ=a("a"),mxr=o("FlaxBertForMaskedLM"),gxr=o(" (BERT model)"),hxr=l(),o5=a("li"),pTe=a("strong"),pxr=o("big_bird"),uxr=o(" \u2014 "),BJ=a("a"),_xr=o("FlaxBigBirdForMaskedLM"),bxr=o(" (BigBird model)"),vxr=l(),r5=a("li"),uTe=a("strong"),Fxr=o("distilbert"),Txr=o(" \u2014 "),PJ=a("a"),Mxr=o("FlaxDistilBertForMaskedLM"),Exr=o(" (DistilBERT model)"),Cxr=l(),t5=a("li"),_Te=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),IJ=a("a"),yxr=o("FlaxElectraForMaskedLM"),Lxr=o(" (ELECTRA model)"),xxr=l(),a5=a("li"),bTe=a("strong"),$xr=o("mbart"),kxr=o(" \u2014 "),qJ=a("a"),Sxr=o("FlaxMBartForConditionalGeneration"),Rxr=o(" (mBART model)"),Bxr=l(),n5=a("li"),vTe=a("strong"),Pxr=o("roberta"),Ixr=o(" \u2014 "),NJ=a("a"),qxr=o("FlaxRobertaForMaskedLM"),Nxr=o(" (RoBERTa model)"),jxr=l(),s5=a("li"),FTe=a("strong"),Dxr=o("roformer"),Gxr=o(" \u2014 "),jJ=a("a"),Oxr=o("FlaxRoFormerForMaskedLM"),Vxr=o(" (RoFormer model)"),Xxr=l(),l5=a("li"),TTe=a("strong"),zxr=o("xlm-roberta"),Qxr=o(" \u2014 "),DJ=a("a"),Wxr=o("FlaxXLMRobertaForMaskedLM"),Hxr=o(" (XLM-RoBERTa model)"),Uxr=l(),F(i5.$$.fragment),Aqe=l(),Nc=a("h2"),d5=a("a"),MTe=a("span"),F(px.$$.fragment),Jxr=l(),ETe=a("span"),Yxr=o("FlaxAutoModelForSeq2SeqLM"),yqe=l(),pr=a("div"),F(ux.$$.fragment),Kxr=l(),jc=a("p"),Zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=a("a"),e7r=o("from_pretrained()"),o7r=o(" class method or the "),OJ=a("a"),r7r=o("from_config()"),t7r=o(` class
method.`),a7r=l(),_x=a("p"),n7r=o("This class cannot be instantiated directly using "),CTe=a("code"),s7r=o("__init__()"),l7r=o(" (throws an error)."),i7r=l(),Vt=a("div"),F(bx.$$.fragment),d7r=l(),wTe=a("p"),c7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f7r=l(),Dc=a("p"),m7r=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),g7r=o("not"),h7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),p7r=o("from_pretrained()"),u7r=o(" to load the model weights."),_7r=l(),F(c5.$$.fragment),b7r=l(),Vr=a("div"),F(vx.$$.fragment),v7r=l(),yTe=a("p"),F7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T7r=l(),bn=a("p"),M7r=o("The model class to instantiate is selected based on the "),LTe=a("code"),E7r=o("model_type"),C7r=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(":"),x7r=l(),Se=a("ul"),f5=a("li"),kTe=a("strong"),$7r=o("bart"),k7r=o(" \u2014 "),XJ=a("a"),S7r=o("FlaxBartForConditionalGeneration"),R7r=o(" (BART model)"),B7r=l(),m5=a("li"),STe=a("strong"),P7r=o("blenderbot"),I7r=o(" \u2014 "),zJ=a("a"),q7r=o("FlaxBlenderbotForConditionalGeneration"),N7r=o(" (Blenderbot model)"),j7r=l(),g5=a("li"),RTe=a("strong"),D7r=o("blenderbot-small"),G7r=o(" \u2014 "),QJ=a("a"),O7r=o("FlaxBlenderbotSmallForConditionalGeneration"),V7r=o(" (BlenderbotSmall model)"),X7r=l(),h5=a("li"),BTe=a("strong"),z7r=o("encoder-decoder"),Q7r=o(" \u2014 "),WJ=a("a"),W7r=o("FlaxEncoderDecoderModel"),H7r=o(" (Encoder decoder model)"),U7r=l(),p5=a("li"),PTe=a("strong"),J7r=o("marian"),Y7r=o(" \u2014 "),HJ=a("a"),K7r=o("FlaxMarianMTModel"),Z7r=o(" (Marian model)"),e$r=l(),u5=a("li"),ITe=a("strong"),o$r=o("mbart"),r$r=o(" \u2014 "),UJ=a("a"),t$r=o("FlaxMBartForConditionalGeneration"),a$r=o(" (mBART model)"),n$r=l(),_5=a("li"),qTe=a("strong"),s$r=o("mt5"),l$r=o(" \u2014 "),JJ=a("a"),i$r=o("FlaxMT5ForConditionalGeneration"),d$r=o(" (mT5 model)"),c$r=l(),b5=a("li"),NTe=a("strong"),f$r=o("pegasus"),m$r=o(" \u2014 "),YJ=a("a"),g$r=o("FlaxPegasusForConditionalGeneration"),h$r=o(" (Pegasus model)"),p$r=l(),v5=a("li"),jTe=a("strong"),u$r=o("t5"),_$r=o(" \u2014 "),KJ=a("a"),b$r=o("FlaxT5ForConditionalGeneration"),v$r=o(" (T5 model)"),F$r=l(),F(F5.$$.fragment),Lqe=l(),Gc=a("h2"),T5=a("a"),DTe=a("span"),F(Fx.$$.fragment),T$r=l(),GTe=a("span"),M$r=o("FlaxAutoModelForSequenceClassification"),xqe=l(),ur=a("div"),F(Tx.$$.fragment),E$r=l(),Oc=a("p"),C$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=a("a"),w$r=o("from_pretrained()"),A$r=o(" class method or the "),eY=a("a"),y$r=o("from_config()"),L$r=o(` class
method.`),x$r=l(),Mx=a("p"),$$r=o("This class cannot be instantiated directly using "),OTe=a("code"),k$r=o("__init__()"),S$r=o(" (throws an error)."),R$r=l(),Xt=a("div"),F(Ex.$$.fragment),B$r=l(),VTe=a("p"),P$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I$r=l(),Vc=a("p"),q$r=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),N$r=o("not"),j$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),D$r=o("from_pretrained()"),G$r=o(" to load the model weights."),O$r=l(),F(M5.$$.fragment),V$r=l(),Xr=a("div"),F(Cx.$$.fragment),X$r=l(),zTe=a("p"),z$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q$r=l(),vn=a("p"),W$r=o("The model class to instantiate is selected based on the "),QTe=a("code"),H$r=o("model_type"),U$r=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(":"),ekr=l(),xe=a("ul"),E5=a("li"),UTe=a("strong"),okr=o("albert"),rkr=o(" \u2014 "),rY=a("a"),tkr=o("FlaxAlbertForSequenceClassification"),akr=o(" (ALBERT model)"),nkr=l(),C5=a("li"),JTe=a("strong"),skr=o("bart"),lkr=o(" \u2014 "),tY=a("a"),ikr=o("FlaxBartForSequenceClassification"),dkr=o(" (BART model)"),ckr=l(),w5=a("li"),YTe=a("strong"),fkr=o("bert"),mkr=o(" \u2014 "),aY=a("a"),gkr=o("FlaxBertForSequenceClassification"),hkr=o(" (BERT model)"),pkr=l(),A5=a("li"),KTe=a("strong"),ukr=o("big_bird"),_kr=o(" \u2014 "),nY=a("a"),bkr=o("FlaxBigBirdForSequenceClassification"),vkr=o(" (BigBird model)"),Fkr=l(),y5=a("li"),ZTe=a("strong"),Tkr=o("distilbert"),Mkr=o(" \u2014 "),sY=a("a"),Ekr=o("FlaxDistilBertForSequenceClassification"),Ckr=o(" (DistilBERT model)"),wkr=l(),L5=a("li"),e9e=a("strong"),Akr=o("electra"),ykr=o(" \u2014 "),lY=a("a"),Lkr=o("FlaxElectraForSequenceClassification"),xkr=o(" (ELECTRA model)"),$kr=l(),x5=a("li"),o9e=a("strong"),kkr=o("mbart"),Skr=o(" \u2014 "),iY=a("a"),Rkr=o("FlaxMBartForSequenceClassification"),Bkr=o(" (mBART model)"),Pkr=l(),$5=a("li"),r9e=a("strong"),Ikr=o("roberta"),qkr=o(" \u2014 "),dY=a("a"),Nkr=o("FlaxRobertaForSequenceClassification"),jkr=o(" (RoBERTa model)"),Dkr=l(),k5=a("li"),t9e=a("strong"),Gkr=o("roformer"),Okr=o(" \u2014 "),cY=a("a"),Vkr=o("FlaxRoFormerForSequenceClassification"),Xkr=o(" (RoFormer model)"),zkr=l(),S5=a("li"),a9e=a("strong"),Qkr=o("xlm-roberta"),Wkr=o(" \u2014 "),fY=a("a"),Hkr=o("FlaxXLMRobertaForSequenceClassification"),Ukr=o(" (XLM-RoBERTa model)"),Jkr=l(),F(R5.$$.fragment),$qe=l(),Xc=a("h2"),B5=a("a"),n9e=a("span"),F(wx.$$.fragment),Ykr=l(),s9e=a("span"),Kkr=o("FlaxAutoModelForQuestionAnswering"),kqe=l(),_r=a("div"),F(Ax.$$.fragment),Zkr=l(),zc=a("p"),eSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mY=a("a"),oSr=o("from_pretrained()"),rSr=o(" class method or the "),gY=a("a"),tSr=o("from_config()"),aSr=o(` class
method.`),nSr=l(),yx=a("p"),sSr=o("This class cannot be instantiated directly using "),l9e=a("code"),lSr=o("__init__()"),iSr=o(" (throws an error)."),dSr=l(),zt=a("div"),F(Lx.$$.fragment),cSr=l(),i9e=a("p"),fSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mSr=l(),Qc=a("p"),gSr=o(`Note:
Loading a model from its configuration file does `),d9e=a("strong"),hSr=o("not"),pSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),uSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),bSr=l(),F(P5.$$.fragment),vSr=l(),zr=a("div"),F(xx.$$.fragment),FSr=l(),c9e=a("p"),TSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MSr=l(),Fn=a("p"),ESr=o("The model class to instantiate is selected based on the "),f9e=a("code"),CSr=o("model_type"),wSr=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),ASr=o("pretrained_model_name_or_path"),ySr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=a("code"),LSr=o("pretrained_model_name_or_path"),xSr=o(":"),$Sr=l(),$e=a("ul"),I5=a("li"),h9e=a("strong"),kSr=o("albert"),SSr=o(" \u2014 "),pY=a("a"),RSr=o("FlaxAlbertForQuestionAnswering"),BSr=o(" (ALBERT model)"),PSr=l(),q5=a("li"),p9e=a("strong"),ISr=o("bart"),qSr=o(" \u2014 "),uY=a("a"),NSr=o("FlaxBartForQuestionAnswering"),jSr=o(" (BART model)"),DSr=l(),N5=a("li"),u9e=a("strong"),GSr=o("bert"),OSr=o(" \u2014 "),_Y=a("a"),VSr=o("FlaxBertForQuestionAnswering"),XSr=o(" (BERT model)"),zSr=l(),j5=a("li"),_9e=a("strong"),QSr=o("big_bird"),WSr=o(" \u2014 "),bY=a("a"),HSr=o("FlaxBigBirdForQuestionAnswering"),USr=o(" (BigBird model)"),JSr=l(),D5=a("li"),b9e=a("strong"),YSr=o("distilbert"),KSr=o(" \u2014 "),vY=a("a"),ZSr=o("FlaxDistilBertForQuestionAnswering"),eRr=o(" (DistilBERT model)"),oRr=l(),G5=a("li"),v9e=a("strong"),rRr=o("electra"),tRr=o(" \u2014 "),FY=a("a"),aRr=o("FlaxElectraForQuestionAnswering"),nRr=o(" (ELECTRA model)"),sRr=l(),O5=a("li"),F9e=a("strong"),lRr=o("mbart"),iRr=o(" \u2014 "),TY=a("a"),dRr=o("FlaxMBartForQuestionAnswering"),cRr=o(" (mBART model)"),fRr=l(),V5=a("li"),T9e=a("strong"),mRr=o("roberta"),gRr=o(" \u2014 "),MY=a("a"),hRr=o("FlaxRobertaForQuestionAnswering"),pRr=o(" (RoBERTa model)"),uRr=l(),X5=a("li"),M9e=a("strong"),_Rr=o("roformer"),bRr=o(" \u2014 "),EY=a("a"),vRr=o("FlaxRoFormerForQuestionAnswering"),FRr=o(" (RoFormer model)"),TRr=l(),z5=a("li"),E9e=a("strong"),MRr=o("xlm-roberta"),ERr=o(" \u2014 "),CY=a("a"),CRr=o("FlaxXLMRobertaForQuestionAnswering"),wRr=o(" (XLM-RoBERTa model)"),ARr=l(),F(Q5.$$.fragment),Sqe=l(),Wc=a("h2"),W5=a("a"),C9e=a("span"),F($x.$$.fragment),yRr=l(),w9e=a("span"),LRr=o("FlaxAutoModelForTokenClassification"),Rqe=l(),br=a("div"),F(kx.$$.fragment),xRr=l(),Hc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),AY=a("a"),RRr=o("from_config()"),BRr=o(` class
method.`),PRr=l(),Sx=a("p"),IRr=o("This class cannot be instantiated directly using "),A9e=a("code"),qRr=o("__init__()"),NRr=o(" (throws an error)."),jRr=l(),Qt=a("div"),F(Rx.$$.fragment),DRr=l(),y9e=a("p"),GRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ORr=l(),Uc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),L9e=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),HRr=l(),F(H5.$$.fragment),URr=l(),Qr=a("div"),F(Bx.$$.fragment),JRr=l(),x9e=a("p"),YRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KRr=l(),Tn=a("p"),ZRr=o("The model class to instantiate is selected based on the "),$9e=a("code"),eBr=o("model_type"),oBr=o(` property of the config object (either
passed as an argument or loaded from `),k9e=a("code"),rBr=o("pretrained_model_name_or_path"),tBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(":"),sBr=l(),De=a("ul"),U5=a("li"),R9e=a("strong"),lBr=o("albert"),iBr=o(" \u2014 "),LY=a("a"),dBr=o("FlaxAlbertForTokenClassification"),cBr=o(" (ALBERT model)"),fBr=l(),J5=a("li"),B9e=a("strong"),mBr=o("bert"),gBr=o(" \u2014 "),xY=a("a"),hBr=o("FlaxBertForTokenClassification"),pBr=o(" (BERT model)"),uBr=l(),Y5=a("li"),P9e=a("strong"),_Br=o("big_bird"),bBr=o(" \u2014 "),$Y=a("a"),vBr=o("FlaxBigBirdForTokenClassification"),FBr=o(" (BigBird model)"),TBr=l(),K5=a("li"),I9e=a("strong"),MBr=o("distilbert"),EBr=o(" \u2014 "),kY=a("a"),CBr=o("FlaxDistilBertForTokenClassification"),wBr=o(" (DistilBERT model)"),ABr=l(),Z5=a("li"),q9e=a("strong"),yBr=o("electra"),LBr=o(" \u2014 "),SY=a("a"),xBr=o("FlaxElectraForTokenClassification"),$Br=o(" (ELECTRA model)"),kBr=l(),eC=a("li"),N9e=a("strong"),SBr=o("roberta"),RBr=o(" \u2014 "),RY=a("a"),BBr=o("FlaxRobertaForTokenClassification"),PBr=o(" (RoBERTa model)"),IBr=l(),oC=a("li"),j9e=a("strong"),qBr=o("roformer"),NBr=o(" \u2014 "),BY=a("a"),jBr=o("FlaxRoFormerForTokenClassification"),DBr=o(" (RoFormer model)"),GBr=l(),rC=a("li"),D9e=a("strong"),OBr=o("xlm-roberta"),VBr=o(" \u2014 "),PY=a("a"),XBr=o("FlaxXLMRobertaForTokenClassification"),zBr=o(" (XLM-RoBERTa model)"),QBr=l(),F(tC.$$.fragment),Bqe=l(),Jc=a("h2"),aC=a("a"),G9e=a("span"),F(Px.$$.fragment),WBr=l(),O9e=a("span"),HBr=o("FlaxAutoModelForMultipleChoice"),Pqe=l(),vr=a("div"),F(Ix.$$.fragment),UBr=l(),Yc=a("p"),JBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=a("a"),YBr=o("from_pretrained()"),KBr=o(" class method or the "),qY=a("a"),ZBr=o("from_config()"),ePr=o(` class
method.`),oPr=l(),qx=a("p"),rPr=o("This class cannot be instantiated directly using "),V9e=a("code"),tPr=o("__init__()"),aPr=o(" (throws an error)."),nPr=l(),Wt=a("div"),F(Nx.$$.fragment),sPr=l(),X9e=a("p"),lPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iPr=l(),Kc=a("p"),dPr=o(`Note:
Loading a model from its configuration file does `),z9e=a("strong"),cPr=o("not"),fPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),mPr=o("from_pretrained()"),gPr=o(" to load the model weights."),hPr=l(),F(nC.$$.fragment),pPr=l(),Wr=a("div"),F(jx.$$.fragment),uPr=l(),Q9e=a("p"),_Pr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bPr=l(),Mn=a("p"),vPr=o("The model class to instantiate is selected based on the "),W9e=a("code"),FPr=o("model_type"),TPr=o(` property of the config object (either
passed as an argument or loaded from `),H9e=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(":"),APr=l(),Ge=a("ul"),sC=a("li"),J9e=a("strong"),yPr=o("albert"),LPr=o(" \u2014 "),jY=a("a"),xPr=o("FlaxAlbertForMultipleChoice"),$Pr=o(" (ALBERT model)"),kPr=l(),lC=a("li"),Y9e=a("strong"),SPr=o("bert"),RPr=o(" \u2014 "),DY=a("a"),BPr=o("FlaxBertForMultipleChoice"),PPr=o(" (BERT model)"),IPr=l(),iC=a("li"),K9e=a("strong"),qPr=o("big_bird"),NPr=o(" \u2014 "),GY=a("a"),jPr=o("FlaxBigBirdForMultipleChoice"),DPr=o(" (BigBird model)"),GPr=l(),dC=a("li"),Z9e=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),OY=a("a"),XPr=o("FlaxDistilBertForMultipleChoice"),zPr=o(" (DistilBERT model)"),QPr=l(),cC=a("li"),eMe=a("strong"),WPr=o("electra"),HPr=o(" \u2014 "),VY=a("a"),UPr=o("FlaxElectraForMultipleChoice"),JPr=o(" (ELECTRA model)"),YPr=l(),fC=a("li"),oMe=a("strong"),KPr=o("roberta"),ZPr=o(" \u2014 "),XY=a("a"),eIr=o("FlaxRobertaForMultipleChoice"),oIr=o(" (RoBERTa model)"),rIr=l(),mC=a("li"),rMe=a("strong"),tIr=o("roformer"),aIr=o(" \u2014 "),zY=a("a"),nIr=o("FlaxRoFormerForMultipleChoice"),sIr=o(" (RoFormer model)"),lIr=l(),gC=a("li"),tMe=a("strong"),iIr=o("xlm-roberta"),dIr=o(" \u2014 "),QY=a("a"),cIr=o("FlaxXLMRobertaForMultipleChoice"),fIr=o(" (XLM-RoBERTa model)"),mIr=l(),F(hC.$$.fragment),Iqe=l(),Zc=a("h2"),pC=a("a"),aMe=a("span"),F(Dx.$$.fragment),gIr=l(),nMe=a("span"),hIr=o("FlaxAutoModelForNextSentencePrediction"),qqe=l(),Fr=a("div"),F(Gx.$$.fragment),pIr=l(),ef=a("p"),uIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=a("a"),_Ir=o("from_pretrained()"),bIr=o(" class method or the "),HY=a("a"),vIr=o("from_config()"),FIr=o(` class
method.`),TIr=l(),Ox=a("p"),MIr=o("This class cannot be instantiated directly using "),sMe=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),Ht=a("div"),F(Vx.$$.fragment),AIr=l(),lMe=a("p"),yIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LIr=l(),of=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),$Ir=o("not"),kIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),SIr=o("from_pretrained()"),RIr=o(" to load the model weights."),BIr=l(),F(uC.$$.fragment),PIr=l(),Hr=a("div"),F(Xx.$$.fragment),IIr=l(),dMe=a("p"),qIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NIr=l(),En=a("p"),jIr=o("The model class to instantiate is selected based on the "),cMe=a("code"),DIr=o("model_type"),GIr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(":"),QIr=l(),gMe=a("ul"),_C=a("li"),hMe=a("strong"),WIr=o("bert"),HIr=o(" \u2014 "),JY=a("a"),UIr=o("FlaxBertForNextSentencePrediction"),JIr=o(" (BERT model)"),YIr=l(),F(bC.$$.fragment),Nqe=l(),rf=a("h2"),vC=a("a"),pMe=a("span"),F(zx.$$.fragment),KIr=l(),uMe=a("span"),ZIr=o("FlaxAutoModelForImageClassification"),jqe=l(),Tr=a("div"),F(Qx.$$.fragment),eqr=l(),tf=a("p"),oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=a("a"),rqr=o("from_pretrained()"),tqr=o(" class method or the "),KY=a("a"),aqr=o("from_config()"),nqr=o(` class
method.`),sqr=l(),Wx=a("p"),lqr=o("This class cannot be instantiated directly using "),_Me=a("code"),iqr=o("__init__()"),dqr=o(" (throws an error)."),cqr=l(),Ut=a("div"),F(Hx.$$.fragment),fqr=l(),bMe=a("p"),mqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gqr=l(),af=a("p"),hqr=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),pqr=o("not"),uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),_qr=o("from_pretrained()"),bqr=o(" to load the model weights."),vqr=l(),F(FC.$$.fragment),Fqr=l(),Ur=a("div"),F(Ux.$$.fragment),Tqr=l(),FMe=a("p"),Mqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Eqr=l(),Cn=a("p"),Cqr=o("The model class to instantiate is selected based on the "),TMe=a("code"),wqr=o("model_type"),Aqr=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),yqr=o("pretrained_model_name_or_path"),Lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(":"),kqr=l(),Jx=a("ul"),TC=a("li"),CMe=a("strong"),Sqr=o("beit"),Rqr=o(" \u2014 "),eK=a("a"),Bqr=o("FlaxBeitForImageClassification"),Pqr=o(" (BEiT model)"),Iqr=l(),MC=a("li"),wMe=a("strong"),qqr=o("vit"),Nqr=o(" \u2014 "),oK=a("a"),jqr=o("FlaxViTForImageClassification"),Dqr=o(" (ViT model)"),Gqr=l(),F(EC.$$.fragment),Dqe=l(),nf=a("h2"),CC=a("a"),AMe=a("span"),F(Yx.$$.fragment),Oqr=l(),yMe=a("span"),Vqr=o("FlaxAutoModelForVision2Seq"),Gqe=l(),Mr=a("div"),F(Kx.$$.fragment),Xqr=l(),sf=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),tK=a("a"),Hqr=o("from_config()"),Uqr=o(` class
method.`),Jqr=l(),Zx=a("p"),Yqr=o("This class cannot be instantiated directly using "),LMe=a("code"),Kqr=o("__init__()"),Zqr=o(" (throws an error)."),eNr=l(),Jt=a("div"),F(e7.$$.fragment),oNr=l(),xMe=a("p"),rNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tNr=l(),lf=a("p"),aNr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),nNr=o("not"),sNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),lNr=o("from_pretrained()"),iNr=o(" to load the model weights."),dNr=l(),F(wC.$$.fragment),cNr=l(),Jr=a("div"),F(o7.$$.fragment),fNr=l(),kMe=a("p"),mNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gNr=l(),wn=a("p"),hNr=o("The model class to instantiate is selected based on the "),SMe=a("code"),pNr=o("model_type"),uNr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),_Nr=o("pretrained_model_name_or_path"),bNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),vNr=o("pretrained_model_name_or_path"),FNr=o(":"),TNr=l(),PMe=a("ul"),AC=a("li"),IMe=a("strong"),MNr=o("vision-encoder-decoder"),ENr=o(" \u2014 "),nK=a("a"),CNr=o("FlaxVisionEncoderDecoderModel"),wNr=o(" (Vision Encoder decoder model)"),ANr=l(),F(yC.$$.fragment),this.h()},l(f){const _=Zwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var r7=s(p);m=n(r7,"A",{id:!0,class:!0,href:!0});var qMe=s(m);u=n(qMe,"SPAN",{});var NMe=s(u);T(d.$$.fragment,NMe),NMe.forEach(t),qMe.forEach(t),h=i(r7),Mo=n(r7,"SPAN",{});var jMe=s(Mo);ii=r(jMe,"Auto Classes"),jMe.forEach(t),r7.forEach(t),mf=i(f),et=n(f,"P",{});var t7=s(et);di=r(t7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(t7,"CODE",{});var DMe=s(ci);Ww=r(DMe,"from_pretrained()"),DMe.forEach(t),gf=r(t7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),t7.forEach(t),qe=i(f),Xe=n(f,"P",{});var An=s(Xe);fi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var GMe=s(yn);Hw=r(GMe,"AutoConfig"),GMe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var OMe=s(xn);Uw=r(OMe,"AutoModel"),OMe.forEach(t),mi=r(An,`, and
`),$n=n(An,"A",{href:!0});var VMe=s($n);Jw=r(VMe,"AutoTokenizer"),VMe.forEach(t),gi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var a7=s(Ae);h$=r(a7,"will create a model that is an instance of "),hi=n(a7,"A",{href:!0});var XMe=s(hi);p$=r(XMe,"BertModel"),XMe.forEach(t),u$=r(a7,"."),a7.forEach(t),Eo=i(f),Ea=n(f,"P",{});var n7=s(Ea);_$=r(n7,"There is one class of "),pf=n(n7,"CODE",{});var zMe=s(pf);b$=r(zMe,"AutoModel"),zMe.forEach(t),Jje=r(n7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),n7.forEach(t),jPe=i(f),pi=n(f,"H2",{class:!0});var s7=s(pi);uf=n(s7,"A",{id:!0,class:!0,href:!0});var QMe=s(uf);KZ=n(QMe,"SPAN",{});var WMe=s(KZ);T(Yw.$$.fragment,WMe),WMe.forEach(t),QMe.forEach(t),Yje=i(s7),ZZ=n(s7,"SPAN",{});var HMe=s(ZZ);Kje=r(HMe,"Extending the Auto Classes"),HMe.forEach(t),s7.forEach(t),DPe=i(f),kn=n(f,"P",{});var df=s(kn);Zje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=n(df,"CODE",{});var UMe=s(eee);eDe=r(UMe,"NewModel"),UMe.forEach(t),oDe=r(df,", make sure you have a "),oee=n(df,"CODE",{});var JMe=s(oee);rDe=r(JMe,"NewModelConfig"),JMe.forEach(t),tDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),GPe=i(f),T(Kw.$$.fragment,f),OPe=i(f),v$=n(f,"P",{});var YMe=s(v$);aDe=r(YMe,"You will then be able to use the auto classes like you would usually do!"),YMe.forEach(t),VPe=i(f),T(_f.$$.fragment,f),XPe=i(f),ui=n(f,"H2",{class:!0});var l7=s(ui);bf=n(l7,"A",{id:!0,class:!0,href:!0});var KMe=s(bf);ree=n(KMe,"SPAN",{});var ZMe=s(ree);T(Zw.$$.fragment,ZMe),ZMe.forEach(t),KMe.forEach(t),nDe=i(l7),tee=n(l7,"SPAN",{});var e4e=s(tee);sDe=r(e4e,"AutoConfig"),e4e.forEach(t),l7.forEach(t),zPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(eA.$$.fragment,Kr),lDe=i(Kr),oA=n(Kr,"P",{});var i7=s(oA);iDe=r(i7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=n(i7,"A",{href:!0});var o4e=s(F$);dDe=r(o4e,"from_pretrained()"),o4e.forEach(t),cDe=r(i7," class method."),i7.forEach(t),fDe=i(Kr),rA=n(Kr,"P",{});var d7=s(rA);mDe=r(d7,"This class cannot be instantiated directly using "),aee=n(d7,"CODE",{});var r4e=s(aee);gDe=r(r4e,"__init__()"),r4e.forEach(t),hDe=r(d7," (throws an error)."),d7.forEach(t),pDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(tA.$$.fragment,Zr),uDe=i(Zr),nee=n(Zr,"P",{});var t4e=s(nee);_De=r(t4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),t4e.forEach(t),bDe=i(Zr),_i=n(Zr,"P",{});var cf=s(_i);vDe=r(cf,"The configuration class to instantiate is selected based on the "),see=n(cf,"CODE",{});var a4e=s(see);FDe=r(a4e,"model_type"),a4e.forEach(t),TDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=n(cf,"CODE",{});var n4e=s(lee);MDe=r(n4e,"pretrained_model_name_or_path"),n4e.forEach(t),EDe=r(cf,":"),cf.forEach(t),CDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var LC=s(vf);iee=n(LC,"STRONG",{});var s4e=s(iee);wDe=r(s4e,"albert"),s4e.forEach(t),ADe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var l4e=s(T$);yDe=r(l4e,"AlbertConfig"),l4e.forEach(t),LDe=r(LC," (ALBERT model)"),LC.forEach(t),xDe=i(L),Ff=n(L,"LI",{});var xC=s(Ff);dee=n(xC,"STRONG",{});var i4e=s(dee);$De=r(i4e,"bart"),i4e.forEach(t),kDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var d4e=s(M$);SDe=r(d4e,"BartConfig"),d4e.forEach(t),RDe=r(xC," (BART model)"),xC.forEach(t),BDe=i(L),Tf=n(L,"LI",{});var $C=s(Tf);cee=n($C,"STRONG",{});var c4e=s(cee);PDe=r(c4e,"beit"),c4e.forEach(t),IDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var f4e=s(E$);qDe=r(f4e,"BeitConfig"),f4e.forEach(t),NDe=r($C," (BEiT model)"),$C.forEach(t),jDe=i(L),Mf=n(L,"LI",{});var kC=s(Mf);fee=n(kC,"STRONG",{});var m4e=s(fee);DDe=r(m4e,"bert"),m4e.forEach(t),GDe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var g4e=s(C$);ODe=r(g4e,"BertConfig"),g4e.forEach(t),VDe=r(kC," (BERT model)"),kC.forEach(t),XDe=i(L),Ef=n(L,"LI",{});var SC=s(Ef);mee=n(SC,"STRONG",{});var h4e=s(mee);zDe=r(h4e,"bert-generation"),h4e.forEach(t),QDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var p4e=s(w$);WDe=r(p4e,"BertGenerationConfig"),p4e.forEach(t),HDe=r(SC," (Bert Generation model)"),SC.forEach(t),UDe=i(L),Cf=n(L,"LI",{});var RC=s(Cf);gee=n(RC,"STRONG",{});var u4e=s(gee);JDe=r(u4e,"big_bird"),u4e.forEach(t),YDe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var _4e=s(A$);KDe=r(_4e,"BigBirdConfig"),_4e.forEach(t),ZDe=r(RC," (BigBird model)"),RC.forEach(t),eGe=i(L),wf=n(L,"LI",{});var BC=s(wf);hee=n(BC,"STRONG",{});var b4e=s(hee);oGe=r(b4e,"bigbird_pegasus"),b4e.forEach(t),rGe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var v4e=s(y$);tGe=r(v4e,"BigBirdPegasusConfig"),v4e.forEach(t),aGe=r(BC," (BigBirdPegasus model)"),BC.forEach(t),nGe=i(L),Af=n(L,"LI",{});var PC=s(Af);pee=n(PC,"STRONG",{});var F4e=s(pee);sGe=r(F4e,"blenderbot"),F4e.forEach(t),lGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var T4e=s(L$);iGe=r(T4e,"BlenderbotConfig"),T4e.forEach(t),dGe=r(PC," (Blenderbot model)"),PC.forEach(t),cGe=i(L),yf=n(L,"LI",{});var IC=s(yf);uee=n(IC,"STRONG",{});var M4e=s(uee);fGe=r(M4e,"blenderbot-small"),M4e.forEach(t),mGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var E4e=s(x$);gGe=r(E4e,"BlenderbotSmallConfig"),E4e.forEach(t),hGe=r(IC," (BlenderbotSmall model)"),IC.forEach(t),pGe=i(L),Lf=n(L,"LI",{});var qC=s(Lf);_ee=n(qC,"STRONG",{});var C4e=s(_ee);uGe=r(C4e,"camembert"),C4e.forEach(t),_Ge=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var w4e=s($$);bGe=r(w4e,"CamembertConfig"),w4e.forEach(t),vGe=r(qC," (CamemBERT model)"),qC.forEach(t),FGe=i(L),xf=n(L,"LI",{});var NC=s(xf);bee=n(NC,"STRONG",{});var A4e=s(bee);TGe=r(A4e,"canine"),A4e.forEach(t),MGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var y4e=s(k$);EGe=r(y4e,"CanineConfig"),y4e.forEach(t),CGe=r(NC," (Canine model)"),NC.forEach(t),wGe=i(L),$f=n(L,"LI",{});var jC=s($f);vee=n(jC,"STRONG",{});var L4e=s(vee);AGe=r(L4e,"clip"),L4e.forEach(t),yGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var x4e=s(S$);LGe=r(x4e,"CLIPConfig"),x4e.forEach(t),xGe=r(jC," (CLIP model)"),jC.forEach(t),$Ge=i(L),kf=n(L,"LI",{});var DC=s(kf);Fee=n(DC,"STRONG",{});var $4e=s(Fee);kGe=r($4e,"convbert"),$4e.forEach(t),SGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var k4e=s(R$);RGe=r(k4e,"ConvBertConfig"),k4e.forEach(t),BGe=r(DC," (ConvBERT model)"),DC.forEach(t),PGe=i(L),Sf=n(L,"LI",{});var GC=s(Sf);Tee=n(GC,"STRONG",{});var S4e=s(Tee);IGe=r(S4e,"convnext"),S4e.forEach(t),qGe=r(GC," \u2014 "),B$=n(GC,"A",{href:!0});var R4e=s(B$);NGe=r(R4e,"ConvNextConfig"),R4e.forEach(t),jGe=r(GC," (ConvNext model)"),GC.forEach(t),DGe=i(L),Rf=n(L,"LI",{});var OC=s(Rf);Mee=n(OC,"STRONG",{});var B4e=s(Mee);GGe=r(B4e,"ctrl"),B4e.forEach(t),OGe=r(OC," \u2014 "),P$=n(OC,"A",{href:!0});var P4e=s(P$);VGe=r(P4e,"CTRLConfig"),P4e.forEach(t),XGe=r(OC," (CTRL model)"),OC.forEach(t),zGe=i(L),Bf=n(L,"LI",{});var VC=s(Bf);Eee=n(VC,"STRONG",{});var I4e=s(Eee);QGe=r(I4e,"data2vec-audio"),I4e.forEach(t),WGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var q4e=s(I$);HGe=r(q4e,"Data2VecAudioConfig"),q4e.forEach(t),UGe=r(VC," (Data2VecAudio model)"),VC.forEach(t),JGe=i(L),Pf=n(L,"LI",{});var XC=s(Pf);Cee=n(XC,"STRONG",{});var N4e=s(Cee);YGe=r(N4e,"data2vec-text"),N4e.forEach(t),KGe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var j4e=s(q$);ZGe=r(j4e,"Data2VecTextConfig"),j4e.forEach(t),eOe=r(XC," (Data2VecText model)"),XC.forEach(t),oOe=i(L),If=n(L,"LI",{});var zC=s(If);wee=n(zC,"STRONG",{});var D4e=s(wee);rOe=r(D4e,"data2vec-vision"),D4e.forEach(t),tOe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var G4e=s(N$);aOe=r(G4e,"Data2VecVisionConfig"),G4e.forEach(t),nOe=r(zC," (Data2VecVision model)"),zC.forEach(t),sOe=i(L),qf=n(L,"LI",{});var QC=s(qf);Aee=n(QC,"STRONG",{});var O4e=s(Aee);lOe=r(O4e,"deberta"),O4e.forEach(t),iOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var V4e=s(j$);dOe=r(V4e,"DebertaConfig"),V4e.forEach(t),cOe=r(QC," (DeBERTa model)"),QC.forEach(t),fOe=i(L),Nf=n(L,"LI",{});var WC=s(Nf);yee=n(WC,"STRONG",{});var X4e=s(yee);mOe=r(X4e,"deberta-v2"),X4e.forEach(t),gOe=r(WC," \u2014 "),D$=n(WC,"A",{href:!0});var z4e=s(D$);hOe=r(z4e,"DebertaV2Config"),z4e.forEach(t),pOe=r(WC," (DeBERTa-v2 model)"),WC.forEach(t),uOe=i(L),jf=n(L,"LI",{});var HC=s(jf);Lee=n(HC,"STRONG",{});var Q4e=s(Lee);_Oe=r(Q4e,"decision_transformer"),Q4e.forEach(t),bOe=r(HC," \u2014 "),G$=n(HC,"A",{href:!0});var W4e=s(G$);vOe=r(W4e,"DecisionTransformerConfig"),W4e.forEach(t),FOe=r(HC," (Decision Transformer model)"),HC.forEach(t),TOe=i(L),Df=n(L,"LI",{});var UC=s(Df);xee=n(UC,"STRONG",{});var H4e=s(xee);MOe=r(H4e,"deit"),H4e.forEach(t),EOe=r(UC," \u2014 "),O$=n(UC,"A",{href:!0});var U4e=s(O$);COe=r(U4e,"DeiTConfig"),U4e.forEach(t),wOe=r(UC," (DeiT model)"),UC.forEach(t),AOe=i(L),Gf=n(L,"LI",{});var JC=s(Gf);$ee=n(JC,"STRONG",{});var J4e=s($ee);yOe=r(J4e,"detr"),J4e.forEach(t),LOe=r(JC," \u2014 "),V$=n(JC,"A",{href:!0});var LNr=s(V$);xOe=r(LNr,"DetrConfig"),LNr.forEach(t),$Oe=r(JC," (DETR model)"),JC.forEach(t),kOe=i(L),Of=n(L,"LI",{});var Y4e=s(Of);kee=n(Y4e,"STRONG",{});var xNr=s(kee);SOe=r(xNr,"distilbert"),xNr.forEach(t),ROe=r(Y4e," \u2014 "),X$=n(Y4e,"A",{href:!0});var $Nr=s(X$);BOe=r($Nr,"DistilBertConfig"),$Nr.forEach(t),POe=r(Y4e," (DistilBERT model)"),Y4e.forEach(t),IOe=i(L),Vf=n(L,"LI",{});var K4e=s(Vf);See=n(K4e,"STRONG",{});var kNr=s(See);qOe=r(kNr,"dpr"),kNr.forEach(t),NOe=r(K4e," \u2014 "),z$=n(K4e,"A",{href:!0});var SNr=s(z$);jOe=r(SNr,"DPRConfig"),SNr.forEach(t),DOe=r(K4e," (DPR model)"),K4e.forEach(t),GOe=i(L),Xf=n(L,"LI",{});var Z4e=s(Xf);Ree=n(Z4e,"STRONG",{});var RNr=s(Ree);OOe=r(RNr,"dpt"),RNr.forEach(t),VOe=r(Z4e," \u2014 "),Q$=n(Z4e,"A",{href:!0});var BNr=s(Q$);XOe=r(BNr,"DPTConfig"),BNr.forEach(t),zOe=r(Z4e," (DPT model)"),Z4e.forEach(t),QOe=i(L),zf=n(L,"LI",{});var eEe=s(zf);Bee=n(eEe,"STRONG",{});var PNr=s(Bee);WOe=r(PNr,"electra"),PNr.forEach(t),HOe=r(eEe," \u2014 "),W$=n(eEe,"A",{href:!0});var INr=s(W$);UOe=r(INr,"ElectraConfig"),INr.forEach(t),JOe=r(eEe," (ELECTRA model)"),eEe.forEach(t),YOe=i(L),Qf=n(L,"LI",{});var oEe=s(Qf);Pee=n(oEe,"STRONG",{});var qNr=s(Pee);KOe=r(qNr,"encoder-decoder"),qNr.forEach(t),ZOe=r(oEe," \u2014 "),H$=n(oEe,"A",{href:!0});var NNr=s(H$);eVe=r(NNr,"EncoderDecoderConfig"),NNr.forEach(t),oVe=r(oEe," (Encoder decoder model)"),oEe.forEach(t),rVe=i(L),Wf=n(L,"LI",{});var rEe=s(Wf);Iee=n(rEe,"STRONG",{});var jNr=s(Iee);tVe=r(jNr,"flaubert"),jNr.forEach(t),aVe=r(rEe," \u2014 "),U$=n(rEe,"A",{href:!0});var DNr=s(U$);nVe=r(DNr,"FlaubertConfig"),DNr.forEach(t),sVe=r(rEe," (FlauBERT model)"),rEe.forEach(t),lVe=i(L),Hf=n(L,"LI",{});var tEe=s(Hf);qee=n(tEe,"STRONG",{});var GNr=s(qee);iVe=r(GNr,"flava"),GNr.forEach(t),dVe=r(tEe," \u2014 "),J$=n(tEe,"A",{href:!0});var ONr=s(J$);cVe=r(ONr,"FlavaConfig"),ONr.forEach(t),fVe=r(tEe," (Flava model)"),tEe.forEach(t),mVe=i(L),Uf=n(L,"LI",{});var aEe=s(Uf);Nee=n(aEe,"STRONG",{});var VNr=s(Nee);gVe=r(VNr,"fnet"),VNr.forEach(t),hVe=r(aEe," \u2014 "),Y$=n(aEe,"A",{href:!0});var XNr=s(Y$);pVe=r(XNr,"FNetConfig"),XNr.forEach(t),uVe=r(aEe," (FNet model)"),aEe.forEach(t),_Ve=i(L),Jf=n(L,"LI",{});var nEe=s(Jf);jee=n(nEe,"STRONG",{});var zNr=s(jee);bVe=r(zNr,"fsmt"),zNr.forEach(t),vVe=r(nEe," \u2014 "),K$=n(nEe,"A",{href:!0});var QNr=s(K$);FVe=r(QNr,"FSMTConfig"),QNr.forEach(t),TVe=r(nEe," (FairSeq Machine-Translation model)"),nEe.forEach(t),MVe=i(L),Yf=n(L,"LI",{});var sEe=s(Yf);Dee=n(sEe,"STRONG",{});var WNr=s(Dee);EVe=r(WNr,"funnel"),WNr.forEach(t),CVe=r(sEe," \u2014 "),Z$=n(sEe,"A",{href:!0});var HNr=s(Z$);wVe=r(HNr,"FunnelConfig"),HNr.forEach(t),AVe=r(sEe," (Funnel Transformer model)"),sEe.forEach(t),yVe=i(L),Kf=n(L,"LI",{});var lEe=s(Kf);Gee=n(lEe,"STRONG",{});var UNr=s(Gee);LVe=r(UNr,"glpn"),UNr.forEach(t),xVe=r(lEe," \u2014 "),ek=n(lEe,"A",{href:!0});var JNr=s(ek);$Ve=r(JNr,"GLPNConfig"),JNr.forEach(t),kVe=r(lEe," (GLPN model)"),lEe.forEach(t),SVe=i(L),Zf=n(L,"LI",{});var iEe=s(Zf);Oee=n(iEe,"STRONG",{});var YNr=s(Oee);RVe=r(YNr,"gpt2"),YNr.forEach(t),BVe=r(iEe," \u2014 "),ok=n(iEe,"A",{href:!0});var KNr=s(ok);PVe=r(KNr,"GPT2Config"),KNr.forEach(t),IVe=r(iEe," (OpenAI GPT-2 model)"),iEe.forEach(t),qVe=i(L),em=n(L,"LI",{});var dEe=s(em);Vee=n(dEe,"STRONG",{});var ZNr=s(Vee);NVe=r(ZNr,"gpt_neo"),ZNr.forEach(t),jVe=r(dEe," \u2014 "),rk=n(dEe,"A",{href:!0});var ejr=s(rk);DVe=r(ejr,"GPTNeoConfig"),ejr.forEach(t),GVe=r(dEe," (GPT Neo model)"),dEe.forEach(t),OVe=i(L),om=n(L,"LI",{});var cEe=s(om);Xee=n(cEe,"STRONG",{});var ojr=s(Xee);VVe=r(ojr,"gptj"),ojr.forEach(t),XVe=r(cEe," \u2014 "),tk=n(cEe,"A",{href:!0});var rjr=s(tk);zVe=r(rjr,"GPTJConfig"),rjr.forEach(t),QVe=r(cEe," (GPT-J model)"),cEe.forEach(t),WVe=i(L),rm=n(L,"LI",{});var fEe=s(rm);zee=n(fEe,"STRONG",{});var tjr=s(zee);HVe=r(tjr,"hubert"),tjr.forEach(t),UVe=r(fEe," \u2014 "),ak=n(fEe,"A",{href:!0});var ajr=s(ak);JVe=r(ajr,"HubertConfig"),ajr.forEach(t),YVe=r(fEe," (Hubert model)"),fEe.forEach(t),KVe=i(L),tm=n(L,"LI",{});var mEe=s(tm);Qee=n(mEe,"STRONG",{});var njr=s(Qee);ZVe=r(njr,"ibert"),njr.forEach(t),eXe=r(mEe," \u2014 "),nk=n(mEe,"A",{href:!0});var sjr=s(nk);oXe=r(sjr,"IBertConfig"),sjr.forEach(t),rXe=r(mEe," (I-BERT model)"),mEe.forEach(t),tXe=i(L),am=n(L,"LI",{});var gEe=s(am);Wee=n(gEe,"STRONG",{});var ljr=s(Wee);aXe=r(ljr,"imagegpt"),ljr.forEach(t),nXe=r(gEe," \u2014 "),sk=n(gEe,"A",{href:!0});var ijr=s(sk);sXe=r(ijr,"ImageGPTConfig"),ijr.forEach(t),lXe=r(gEe," (ImageGPT model)"),gEe.forEach(t),iXe=i(L),nm=n(L,"LI",{});var hEe=s(nm);Hee=n(hEe,"STRONG",{});var djr=s(Hee);dXe=r(djr,"layoutlm"),djr.forEach(t),cXe=r(hEe," \u2014 "),lk=n(hEe,"A",{href:!0});var cjr=s(lk);fXe=r(cjr,"LayoutLMConfig"),cjr.forEach(t),mXe=r(hEe," (LayoutLM model)"),hEe.forEach(t),gXe=i(L),sm=n(L,"LI",{});var pEe=s(sm);Uee=n(pEe,"STRONG",{});var fjr=s(Uee);hXe=r(fjr,"layoutlmv2"),fjr.forEach(t),pXe=r(pEe," \u2014 "),ik=n(pEe,"A",{href:!0});var mjr=s(ik);uXe=r(mjr,"LayoutLMv2Config"),mjr.forEach(t),_Xe=r(pEe," (LayoutLMv2 model)"),pEe.forEach(t),bXe=i(L),lm=n(L,"LI",{});var uEe=s(lm);Jee=n(uEe,"STRONG",{});var gjr=s(Jee);vXe=r(gjr,"led"),gjr.forEach(t),FXe=r(uEe," \u2014 "),dk=n(uEe,"A",{href:!0});var hjr=s(dk);TXe=r(hjr,"LEDConfig"),hjr.forEach(t),MXe=r(uEe," (LED model)"),uEe.forEach(t),EXe=i(L),im=n(L,"LI",{});var _Ee=s(im);Yee=n(_Ee,"STRONG",{});var pjr=s(Yee);CXe=r(pjr,"longformer"),pjr.forEach(t),wXe=r(_Ee," \u2014 "),ck=n(_Ee,"A",{href:!0});var ujr=s(ck);AXe=r(ujr,"LongformerConfig"),ujr.forEach(t),yXe=r(_Ee," (Longformer model)"),_Ee.forEach(t),LXe=i(L),dm=n(L,"LI",{});var bEe=s(dm);Kee=n(bEe,"STRONG",{});var _jr=s(Kee);xXe=r(_jr,"luke"),_jr.forEach(t),$Xe=r(bEe," \u2014 "),fk=n(bEe,"A",{href:!0});var bjr=s(fk);kXe=r(bjr,"LukeConfig"),bjr.forEach(t),SXe=r(bEe," (LUKE model)"),bEe.forEach(t),RXe=i(L),cm=n(L,"LI",{});var vEe=s(cm);Zee=n(vEe,"STRONG",{});var vjr=s(Zee);BXe=r(vjr,"lxmert"),vjr.forEach(t),PXe=r(vEe," \u2014 "),mk=n(vEe,"A",{href:!0});var Fjr=s(mk);IXe=r(Fjr,"LxmertConfig"),Fjr.forEach(t),qXe=r(vEe," (LXMERT model)"),vEe.forEach(t),NXe=i(L),fm=n(L,"LI",{});var FEe=s(fm);eoe=n(FEe,"STRONG",{});var Tjr=s(eoe);jXe=r(Tjr,"m2m_100"),Tjr.forEach(t),DXe=r(FEe," \u2014 "),gk=n(FEe,"A",{href:!0});var Mjr=s(gk);GXe=r(Mjr,"M2M100Config"),Mjr.forEach(t),OXe=r(FEe," (M2M100 model)"),FEe.forEach(t),VXe=i(L),mm=n(L,"LI",{});var TEe=s(mm);ooe=n(TEe,"STRONG",{});var Ejr=s(ooe);XXe=r(Ejr,"marian"),Ejr.forEach(t),zXe=r(TEe," \u2014 "),hk=n(TEe,"A",{href:!0});var Cjr=s(hk);QXe=r(Cjr,"MarianConfig"),Cjr.forEach(t),WXe=r(TEe," (Marian model)"),TEe.forEach(t),HXe=i(L),gm=n(L,"LI",{});var MEe=s(gm);roe=n(MEe,"STRONG",{});var wjr=s(roe);UXe=r(wjr,"maskformer"),wjr.forEach(t),JXe=r(MEe," \u2014 "),pk=n(MEe,"A",{href:!0});var Ajr=s(pk);YXe=r(Ajr,"MaskFormerConfig"),Ajr.forEach(t),KXe=r(MEe," (MaskFormer model)"),MEe.forEach(t),ZXe=i(L),hm=n(L,"LI",{});var EEe=s(hm);toe=n(EEe,"STRONG",{});var yjr=s(toe);eze=r(yjr,"mbart"),yjr.forEach(t),oze=r(EEe," \u2014 "),uk=n(EEe,"A",{href:!0});var Ljr=s(uk);rze=r(Ljr,"MBartConfig"),Ljr.forEach(t),tze=r(EEe," (mBART model)"),EEe.forEach(t),aze=i(L),pm=n(L,"LI",{});var CEe=s(pm);aoe=n(CEe,"STRONG",{});var xjr=s(aoe);nze=r(xjr,"megatron-bert"),xjr.forEach(t),sze=r(CEe," \u2014 "),_k=n(CEe,"A",{href:!0});var $jr=s(_k);lze=r($jr,"MegatronBertConfig"),$jr.forEach(t),ize=r(CEe," (MegatronBert model)"),CEe.forEach(t),dze=i(L),um=n(L,"LI",{});var wEe=s(um);noe=n(wEe,"STRONG",{});var kjr=s(noe);cze=r(kjr,"mobilebert"),kjr.forEach(t),fze=r(wEe," \u2014 "),bk=n(wEe,"A",{href:!0});var Sjr=s(bk);mze=r(Sjr,"MobileBertConfig"),Sjr.forEach(t),gze=r(wEe," (MobileBERT model)"),wEe.forEach(t),hze=i(L),_m=n(L,"LI",{});var AEe=s(_m);soe=n(AEe,"STRONG",{});var Rjr=s(soe);pze=r(Rjr,"mpnet"),Rjr.forEach(t),uze=r(AEe," \u2014 "),vk=n(AEe,"A",{href:!0});var Bjr=s(vk);_ze=r(Bjr,"MPNetConfig"),Bjr.forEach(t),bze=r(AEe," (MPNet model)"),AEe.forEach(t),vze=i(L),bm=n(L,"LI",{});var yEe=s(bm);loe=n(yEe,"STRONG",{});var Pjr=s(loe);Fze=r(Pjr,"mt5"),Pjr.forEach(t),Tze=r(yEe," \u2014 "),Fk=n(yEe,"A",{href:!0});var Ijr=s(Fk);Mze=r(Ijr,"MT5Config"),Ijr.forEach(t),Eze=r(yEe," (mT5 model)"),yEe.forEach(t),Cze=i(L),vm=n(L,"LI",{});var LEe=s(vm);ioe=n(LEe,"STRONG",{});var qjr=s(ioe);wze=r(qjr,"nystromformer"),qjr.forEach(t),Aze=r(LEe," \u2014 "),Tk=n(LEe,"A",{href:!0});var Njr=s(Tk);yze=r(Njr,"NystromformerConfig"),Njr.forEach(t),Lze=r(LEe," (Nystromformer model)"),LEe.forEach(t),xze=i(L),Fm=n(L,"LI",{});var xEe=s(Fm);doe=n(xEe,"STRONG",{});var jjr=s(doe);$ze=r(jjr,"openai-gpt"),jjr.forEach(t),kze=r(xEe," \u2014 "),Mk=n(xEe,"A",{href:!0});var Djr=s(Mk);Sze=r(Djr,"OpenAIGPTConfig"),Djr.forEach(t),Rze=r(xEe," (OpenAI GPT model)"),xEe.forEach(t),Bze=i(L),Tm=n(L,"LI",{});var $Ee=s(Tm);coe=n($Ee,"STRONG",{});var Gjr=s(coe);Pze=r(Gjr,"opt"),Gjr.forEach(t),Ize=r($Ee," \u2014 "),Ek=n($Ee,"A",{href:!0});var Ojr=s(Ek);qze=r(Ojr,"OPTConfig"),Ojr.forEach(t),Nze=r($Ee," (OPT model)"),$Ee.forEach(t),jze=i(L),Mm=n(L,"LI",{});var kEe=s(Mm);foe=n(kEe,"STRONG",{});var Vjr=s(foe);Dze=r(Vjr,"pegasus"),Vjr.forEach(t),Gze=r(kEe," \u2014 "),Ck=n(kEe,"A",{href:!0});var Xjr=s(Ck);Oze=r(Xjr,"PegasusConfig"),Xjr.forEach(t),Vze=r(kEe," (Pegasus model)"),kEe.forEach(t),Xze=i(L),Em=n(L,"LI",{});var SEe=s(Em);moe=n(SEe,"STRONG",{});var zjr=s(moe);zze=r(zjr,"perceiver"),zjr.forEach(t),Qze=r(SEe," \u2014 "),wk=n(SEe,"A",{href:!0});var Qjr=s(wk);Wze=r(Qjr,"PerceiverConfig"),Qjr.forEach(t),Hze=r(SEe," (Perceiver model)"),SEe.forEach(t),Uze=i(L),Cm=n(L,"LI",{});var REe=s(Cm);goe=n(REe,"STRONG",{});var Wjr=s(goe);Jze=r(Wjr,"plbart"),Wjr.forEach(t),Yze=r(REe," \u2014 "),Ak=n(REe,"A",{href:!0});var Hjr=s(Ak);Kze=r(Hjr,"PLBartConfig"),Hjr.forEach(t),Zze=r(REe," (PLBart model)"),REe.forEach(t),eQe=i(L),wm=n(L,"LI",{});var BEe=s(wm);hoe=n(BEe,"STRONG",{});var Ujr=s(hoe);oQe=r(Ujr,"poolformer"),Ujr.forEach(t),rQe=r(BEe," \u2014 "),yk=n(BEe,"A",{href:!0});var Jjr=s(yk);tQe=r(Jjr,"PoolFormerConfig"),Jjr.forEach(t),aQe=r(BEe," (PoolFormer model)"),BEe.forEach(t),nQe=i(L),Am=n(L,"LI",{});var PEe=s(Am);poe=n(PEe,"STRONG",{});var Yjr=s(poe);sQe=r(Yjr,"prophetnet"),Yjr.forEach(t),lQe=r(PEe," \u2014 "),Lk=n(PEe,"A",{href:!0});var Kjr=s(Lk);iQe=r(Kjr,"ProphetNetConfig"),Kjr.forEach(t),dQe=r(PEe," (ProphetNet model)"),PEe.forEach(t),cQe=i(L),ym=n(L,"LI",{});var IEe=s(ym);uoe=n(IEe,"STRONG",{});var Zjr=s(uoe);fQe=r(Zjr,"qdqbert"),Zjr.forEach(t),mQe=r(IEe," \u2014 "),xk=n(IEe,"A",{href:!0});var eDr=s(xk);gQe=r(eDr,"QDQBertConfig"),eDr.forEach(t),hQe=r(IEe," (QDQBert model)"),IEe.forEach(t),pQe=i(L),Lm=n(L,"LI",{});var qEe=s(Lm);_oe=n(qEe,"STRONG",{});var oDr=s(_oe);uQe=r(oDr,"rag"),oDr.forEach(t),_Qe=r(qEe," \u2014 "),$k=n(qEe,"A",{href:!0});var rDr=s($k);bQe=r(rDr,"RagConfig"),rDr.forEach(t),vQe=r(qEe," (RAG model)"),qEe.forEach(t),FQe=i(L),xm=n(L,"LI",{});var NEe=s(xm);boe=n(NEe,"STRONG",{});var tDr=s(boe);TQe=r(tDr,"realm"),tDr.forEach(t),MQe=r(NEe," \u2014 "),kk=n(NEe,"A",{href:!0});var aDr=s(kk);EQe=r(aDr,"RealmConfig"),aDr.forEach(t),CQe=r(NEe," (Realm model)"),NEe.forEach(t),wQe=i(L),$m=n(L,"LI",{});var jEe=s($m);voe=n(jEe,"STRONG",{});var nDr=s(voe);AQe=r(nDr,"reformer"),nDr.forEach(t),yQe=r(jEe," \u2014 "),Sk=n(jEe,"A",{href:!0});var sDr=s(Sk);LQe=r(sDr,"ReformerConfig"),sDr.forEach(t),xQe=r(jEe," (Reformer model)"),jEe.forEach(t),$Qe=i(L),km=n(L,"LI",{});var DEe=s(km);Foe=n(DEe,"STRONG",{});var lDr=s(Foe);kQe=r(lDr,"regnet"),lDr.forEach(t),SQe=r(DEe," \u2014 "),Rk=n(DEe,"A",{href:!0});var iDr=s(Rk);RQe=r(iDr,"RegNetConfig"),iDr.forEach(t),BQe=r(DEe," (RegNet model)"),DEe.forEach(t),PQe=i(L),Sm=n(L,"LI",{});var GEe=s(Sm);Toe=n(GEe,"STRONG",{});var dDr=s(Toe);IQe=r(dDr,"rembert"),dDr.forEach(t),qQe=r(GEe," \u2014 "),Bk=n(GEe,"A",{href:!0});var cDr=s(Bk);NQe=r(cDr,"RemBertConfig"),cDr.forEach(t),jQe=r(GEe," (RemBERT model)"),GEe.forEach(t),DQe=i(L),Rm=n(L,"LI",{});var OEe=s(Rm);Moe=n(OEe,"STRONG",{});var fDr=s(Moe);GQe=r(fDr,"resnet"),fDr.forEach(t),OQe=r(OEe," \u2014 "),Pk=n(OEe,"A",{href:!0});var mDr=s(Pk);VQe=r(mDr,"ResNetConfig"),mDr.forEach(t),XQe=r(OEe," (ResNet model)"),OEe.forEach(t),zQe=i(L),Bm=n(L,"LI",{});var VEe=s(Bm);Eoe=n(VEe,"STRONG",{});var gDr=s(Eoe);QQe=r(gDr,"retribert"),gDr.forEach(t),WQe=r(VEe," \u2014 "),Ik=n(VEe,"A",{href:!0});var hDr=s(Ik);HQe=r(hDr,"RetriBertConfig"),hDr.forEach(t),UQe=r(VEe," (RetriBERT model)"),VEe.forEach(t),JQe=i(L),Pm=n(L,"LI",{});var XEe=s(Pm);Coe=n(XEe,"STRONG",{});var pDr=s(Coe);YQe=r(pDr,"roberta"),pDr.forEach(t),KQe=r(XEe," \u2014 "),qk=n(XEe,"A",{href:!0});var uDr=s(qk);ZQe=r(uDr,"RobertaConfig"),uDr.forEach(t),eWe=r(XEe," (RoBERTa model)"),XEe.forEach(t),oWe=i(L),Im=n(L,"LI",{});var zEe=s(Im);woe=n(zEe,"STRONG",{});var _Dr=s(woe);rWe=r(_Dr,"roformer"),_Dr.forEach(t),tWe=r(zEe," \u2014 "),Nk=n(zEe,"A",{href:!0});var bDr=s(Nk);aWe=r(bDr,"RoFormerConfig"),bDr.forEach(t),nWe=r(zEe," (RoFormer model)"),zEe.forEach(t),sWe=i(L),qm=n(L,"LI",{});var QEe=s(qm);Aoe=n(QEe,"STRONG",{});var vDr=s(Aoe);lWe=r(vDr,"segformer"),vDr.forEach(t),iWe=r(QEe," \u2014 "),jk=n(QEe,"A",{href:!0});var FDr=s(jk);dWe=r(FDr,"SegformerConfig"),FDr.forEach(t),cWe=r(QEe," (SegFormer model)"),QEe.forEach(t),fWe=i(L),Nm=n(L,"LI",{});var WEe=s(Nm);yoe=n(WEe,"STRONG",{});var TDr=s(yoe);mWe=r(TDr,"sew"),TDr.forEach(t),gWe=r(WEe," \u2014 "),Dk=n(WEe,"A",{href:!0});var MDr=s(Dk);hWe=r(MDr,"SEWConfig"),MDr.forEach(t),pWe=r(WEe," (SEW model)"),WEe.forEach(t),uWe=i(L),jm=n(L,"LI",{});var HEe=s(jm);Loe=n(HEe,"STRONG",{});var EDr=s(Loe);_We=r(EDr,"sew-d"),EDr.forEach(t),bWe=r(HEe," \u2014 "),Gk=n(HEe,"A",{href:!0});var CDr=s(Gk);vWe=r(CDr,"SEWDConfig"),CDr.forEach(t),FWe=r(HEe," (SEW-D model)"),HEe.forEach(t),TWe=i(L),Dm=n(L,"LI",{});var UEe=s(Dm);xoe=n(UEe,"STRONG",{});var wDr=s(xoe);MWe=r(wDr,"speech-encoder-decoder"),wDr.forEach(t),EWe=r(UEe," \u2014 "),Ok=n(UEe,"A",{href:!0});var ADr=s(Ok);CWe=r(ADr,"SpeechEncoderDecoderConfig"),ADr.forEach(t),wWe=r(UEe," (Speech Encoder decoder model)"),UEe.forEach(t),AWe=i(L),Gm=n(L,"LI",{});var JEe=s(Gm);$oe=n(JEe,"STRONG",{});var yDr=s($oe);yWe=r(yDr,"speech_to_text"),yDr.forEach(t),LWe=r(JEe," \u2014 "),Vk=n(JEe,"A",{href:!0});var LDr=s(Vk);xWe=r(LDr,"Speech2TextConfig"),LDr.forEach(t),$We=r(JEe," (Speech2Text model)"),JEe.forEach(t),kWe=i(L),Om=n(L,"LI",{});var YEe=s(Om);koe=n(YEe,"STRONG",{});var xDr=s(koe);SWe=r(xDr,"speech_to_text_2"),xDr.forEach(t),RWe=r(YEe," \u2014 "),Xk=n(YEe,"A",{href:!0});var $Dr=s(Xk);BWe=r($Dr,"Speech2Text2Config"),$Dr.forEach(t),PWe=r(YEe," (Speech2Text2 model)"),YEe.forEach(t),IWe=i(L),Vm=n(L,"LI",{});var KEe=s(Vm);Soe=n(KEe,"STRONG",{});var kDr=s(Soe);qWe=r(kDr,"splinter"),kDr.forEach(t),NWe=r(KEe," \u2014 "),zk=n(KEe,"A",{href:!0});var SDr=s(zk);jWe=r(SDr,"SplinterConfig"),SDr.forEach(t),DWe=r(KEe," (Splinter model)"),KEe.forEach(t),GWe=i(L),Xm=n(L,"LI",{});var ZEe=s(Xm);Roe=n(ZEe,"STRONG",{});var RDr=s(Roe);OWe=r(RDr,"squeezebert"),RDr.forEach(t),VWe=r(ZEe," \u2014 "),Qk=n(ZEe,"A",{href:!0});var BDr=s(Qk);XWe=r(BDr,"SqueezeBertConfig"),BDr.forEach(t),zWe=r(ZEe," (SqueezeBERT model)"),ZEe.forEach(t),QWe=i(L),zm=n(L,"LI",{});var e5e=s(zm);Boe=n(e5e,"STRONG",{});var PDr=s(Boe);WWe=r(PDr,"swin"),PDr.forEach(t),HWe=r(e5e," \u2014 "),Wk=n(e5e,"A",{href:!0});var IDr=s(Wk);UWe=r(IDr,"SwinConfig"),IDr.forEach(t),JWe=r(e5e," (Swin model)"),e5e.forEach(t),YWe=i(L),Qm=n(L,"LI",{});var o5e=s(Qm);Poe=n(o5e,"STRONG",{});var qDr=s(Poe);KWe=r(qDr,"t5"),qDr.forEach(t),ZWe=r(o5e," \u2014 "),Hk=n(o5e,"A",{href:!0});var NDr=s(Hk);eHe=r(NDr,"T5Config"),NDr.forEach(t),oHe=r(o5e," (T5 model)"),o5e.forEach(t),rHe=i(L),Wm=n(L,"LI",{});var r5e=s(Wm);Ioe=n(r5e,"STRONG",{});var jDr=s(Ioe);tHe=r(jDr,"tapas"),jDr.forEach(t),aHe=r(r5e," \u2014 "),Uk=n(r5e,"A",{href:!0});var DDr=s(Uk);nHe=r(DDr,"TapasConfig"),DDr.forEach(t),sHe=r(r5e," (TAPAS model)"),r5e.forEach(t),lHe=i(L),Hm=n(L,"LI",{});var t5e=s(Hm);qoe=n(t5e,"STRONG",{});var GDr=s(qoe);iHe=r(GDr,"transfo-xl"),GDr.forEach(t),dHe=r(t5e," \u2014 "),Jk=n(t5e,"A",{href:!0});var ODr=s(Jk);cHe=r(ODr,"TransfoXLConfig"),ODr.forEach(t),fHe=r(t5e," (Transformer-XL model)"),t5e.forEach(t),mHe=i(L),Um=n(L,"LI",{});var a5e=s(Um);Noe=n(a5e,"STRONG",{});var VDr=s(Noe);gHe=r(VDr,"trocr"),VDr.forEach(t),hHe=r(a5e," \u2014 "),Yk=n(a5e,"A",{href:!0});var XDr=s(Yk);pHe=r(XDr,"TrOCRConfig"),XDr.forEach(t),uHe=r(a5e," (TrOCR model)"),a5e.forEach(t),_He=i(L),Jm=n(L,"LI",{});var n5e=s(Jm);joe=n(n5e,"STRONG",{});var zDr=s(joe);bHe=r(zDr,"unispeech"),zDr.forEach(t),vHe=r(n5e," \u2014 "),Kk=n(n5e,"A",{href:!0});var QDr=s(Kk);FHe=r(QDr,"UniSpeechConfig"),QDr.forEach(t),THe=r(n5e," (UniSpeech model)"),n5e.forEach(t),MHe=i(L),Ym=n(L,"LI",{});var s5e=s(Ym);Doe=n(s5e,"STRONG",{});var WDr=s(Doe);EHe=r(WDr,"unispeech-sat"),WDr.forEach(t),CHe=r(s5e," \u2014 "),Zk=n(s5e,"A",{href:!0});var HDr=s(Zk);wHe=r(HDr,"UniSpeechSatConfig"),HDr.forEach(t),AHe=r(s5e," (UniSpeechSat model)"),s5e.forEach(t),yHe=i(L),Km=n(L,"LI",{});var l5e=s(Km);Goe=n(l5e,"STRONG",{});var UDr=s(Goe);LHe=r(UDr,"van"),UDr.forEach(t),xHe=r(l5e," \u2014 "),eS=n(l5e,"A",{href:!0});var JDr=s(eS);$He=r(JDr,"VanConfig"),JDr.forEach(t),kHe=r(l5e," (VAN model)"),l5e.forEach(t),SHe=i(L),Zm=n(L,"LI",{});var i5e=s(Zm);Ooe=n(i5e,"STRONG",{});var YDr=s(Ooe);RHe=r(YDr,"vilt"),YDr.forEach(t),BHe=r(i5e," \u2014 "),oS=n(i5e,"A",{href:!0});var KDr=s(oS);PHe=r(KDr,"ViltConfig"),KDr.forEach(t),IHe=r(i5e," (ViLT model)"),i5e.forEach(t),qHe=i(L),eg=n(L,"LI",{});var d5e=s(eg);Voe=n(d5e,"STRONG",{});var ZDr=s(Voe);NHe=r(ZDr,"vision-encoder-decoder"),ZDr.forEach(t),jHe=r(d5e," \u2014 "),rS=n(d5e,"A",{href:!0});var eGr=s(rS);DHe=r(eGr,"VisionEncoderDecoderConfig"),eGr.forEach(t),GHe=r(d5e," (Vision Encoder decoder model)"),d5e.forEach(t),OHe=i(L),og=n(L,"LI",{});var c5e=s(og);Xoe=n(c5e,"STRONG",{});var oGr=s(Xoe);VHe=r(oGr,"vision-text-dual-encoder"),oGr.forEach(t),XHe=r(c5e," \u2014 "),tS=n(c5e,"A",{href:!0});var rGr=s(tS);zHe=r(rGr,"VisionTextDualEncoderConfig"),rGr.forEach(t),QHe=r(c5e," (VisionTextDualEncoder model)"),c5e.forEach(t),WHe=i(L),rg=n(L,"LI",{});var f5e=s(rg);zoe=n(f5e,"STRONG",{});var tGr=s(zoe);HHe=r(tGr,"visual_bert"),tGr.forEach(t),UHe=r(f5e," \u2014 "),aS=n(f5e,"A",{href:!0});var aGr=s(aS);JHe=r(aGr,"VisualBertConfig"),aGr.forEach(t),YHe=r(f5e," (VisualBert model)"),f5e.forEach(t),KHe=i(L),tg=n(L,"LI",{});var m5e=s(tg);Qoe=n(m5e,"STRONG",{});var nGr=s(Qoe);ZHe=r(nGr,"vit"),nGr.forEach(t),eUe=r(m5e," \u2014 "),nS=n(m5e,"A",{href:!0});var sGr=s(nS);oUe=r(sGr,"ViTConfig"),sGr.forEach(t),rUe=r(m5e," (ViT model)"),m5e.forEach(t),tUe=i(L),ag=n(L,"LI",{});var g5e=s(ag);Woe=n(g5e,"STRONG",{});var lGr=s(Woe);aUe=r(lGr,"vit_mae"),lGr.forEach(t),nUe=r(g5e," \u2014 "),sS=n(g5e,"A",{href:!0});var iGr=s(sS);sUe=r(iGr,"ViTMAEConfig"),iGr.forEach(t),lUe=r(g5e," (ViTMAE model)"),g5e.forEach(t),iUe=i(L),ng=n(L,"LI",{});var h5e=s(ng);Hoe=n(h5e,"STRONG",{});var dGr=s(Hoe);dUe=r(dGr,"wav2vec2"),dGr.forEach(t),cUe=r(h5e," \u2014 "),lS=n(h5e,"A",{href:!0});var cGr=s(lS);fUe=r(cGr,"Wav2Vec2Config"),cGr.forEach(t),mUe=r(h5e," (Wav2Vec2 model)"),h5e.forEach(t),gUe=i(L),sg=n(L,"LI",{});var p5e=s(sg);Uoe=n(p5e,"STRONG",{});var fGr=s(Uoe);hUe=r(fGr,"wavlm"),fGr.forEach(t),pUe=r(p5e," \u2014 "),iS=n(p5e,"A",{href:!0});var mGr=s(iS);uUe=r(mGr,"WavLMConfig"),mGr.forEach(t),_Ue=r(p5e," (WavLM model)"),p5e.forEach(t),bUe=i(L),lg=n(L,"LI",{});var u5e=s(lg);Joe=n(u5e,"STRONG",{});var gGr=s(Joe);vUe=r(gGr,"xglm"),gGr.forEach(t),FUe=r(u5e," \u2014 "),dS=n(u5e,"A",{href:!0});var hGr=s(dS);TUe=r(hGr,"XGLMConfig"),hGr.forEach(t),MUe=r(u5e," (XGLM model)"),u5e.forEach(t),EUe=i(L),ig=n(L,"LI",{});var _5e=s(ig);Yoe=n(_5e,"STRONG",{});var pGr=s(Yoe);CUe=r(pGr,"xlm"),pGr.forEach(t),wUe=r(_5e," \u2014 "),cS=n(_5e,"A",{href:!0});var uGr=s(cS);AUe=r(uGr,"XLMConfig"),uGr.forEach(t),yUe=r(_5e," (XLM model)"),_5e.forEach(t),LUe=i(L),dg=n(L,"LI",{});var b5e=s(dg);Koe=n(b5e,"STRONG",{});var _Gr=s(Koe);xUe=r(_Gr,"xlm-prophetnet"),_Gr.forEach(t),$Ue=r(b5e," \u2014 "),fS=n(b5e,"A",{href:!0});var bGr=s(fS);kUe=r(bGr,"XLMProphetNetConfig"),bGr.forEach(t),SUe=r(b5e," (XLMProphetNet model)"),b5e.forEach(t),RUe=i(L),cg=n(L,"LI",{});var v5e=s(cg);Zoe=n(v5e,"STRONG",{});var vGr=s(Zoe);BUe=r(vGr,"xlm-roberta"),vGr.forEach(t),PUe=r(v5e," \u2014 "),mS=n(v5e,"A",{href:!0});var FGr=s(mS);IUe=r(FGr,"XLMRobertaConfig"),FGr.forEach(t),qUe=r(v5e," (XLM-RoBERTa model)"),v5e.forEach(t),NUe=i(L),fg=n(L,"LI",{});var F5e=s(fg);ere=n(F5e,"STRONG",{});var TGr=s(ere);jUe=r(TGr,"xlm-roberta-xl"),TGr.forEach(t),DUe=r(F5e," \u2014 "),gS=n(F5e,"A",{href:!0});var MGr=s(gS);GUe=r(MGr,"XLMRobertaXLConfig"),MGr.forEach(t),OUe=r(F5e," (XLM-RoBERTa-XL model)"),F5e.forEach(t),VUe=i(L),mg=n(L,"LI",{});var T5e=s(mg);ore=n(T5e,"STRONG",{});var EGr=s(ore);XUe=r(EGr,"xlnet"),EGr.forEach(t),zUe=r(T5e," \u2014 "),hS=n(T5e,"A",{href:!0});var CGr=s(hS);QUe=r(CGr,"XLNetConfig"),CGr.forEach(t),WUe=r(T5e," (XLNet model)"),T5e.forEach(t),HUe=i(L),gg=n(L,"LI",{});var M5e=s(gg);rre=n(M5e,"STRONG",{});var wGr=s(rre);UUe=r(wGr,"yolos"),wGr.forEach(t),JUe=r(M5e," \u2014 "),pS=n(M5e,"A",{href:!0});var AGr=s(pS);YUe=r(AGr,"YolosConfig"),AGr.forEach(t),KUe=r(M5e," (YOLOS model)"),M5e.forEach(t),ZUe=i(L),hg=n(L,"LI",{});var E5e=s(hg);tre=n(E5e,"STRONG",{});var yGr=s(tre);eJe=r(yGr,"yoso"),yGr.forEach(t),oJe=r(E5e," \u2014 "),uS=n(E5e,"A",{href:!0});var LGr=s(uS);rJe=r(LGr,"YosoConfig"),LGr.forEach(t),tJe=r(E5e," (YOSO model)"),E5e.forEach(t),L.forEach(t),aJe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),nJe=i(Kr),ug=n(Kr,"DIV",{class:!0});var Vqe=s(ug);T(aA.$$.fragment,Vqe),sJe=i(Vqe),are=n(Vqe,"P",{});var xGr=s(are);lJe=r(xGr,"Register a new configuration for this class."),xGr.forEach(t),Vqe.forEach(t),Kr.forEach(t),QPe=i(f),bi=n(f,"H2",{class:!0});var Xqe=s(bi);_g=n(Xqe,"A",{id:!0,class:!0,href:!0});var $Gr=s(_g);nre=n($Gr,"SPAN",{});var kGr=s(nre);T(nA.$$.fragment,kGr),kGr.forEach(t),$Gr.forEach(t),iJe=i(Xqe),sre=n(Xqe,"SPAN",{});var SGr=s(sre);dJe=r(SGr,"AutoTokenizer"),SGr.forEach(t),Xqe.forEach(t),WPe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(sA.$$.fragment,Is),cJe=i(Is),lA=n(Is,"P",{});var zqe=s(lA);fJe=r(zqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=n(zqe,"A",{href:!0});var RGr=s(_S);mJe=r(RGr,"AutoTokenizer.from_pretrained()"),RGr.forEach(t),gJe=r(zqe," class method."),zqe.forEach(t),hJe=i(Is),iA=n(Is,"P",{});var Qqe=s(iA);pJe=r(Qqe,"This class cannot be instantiated directly using "),lre=n(Qqe,"CODE",{});var BGr=s(lre);uJe=r(BGr,"__init__()"),BGr.forEach(t),_Je=r(Qqe," (throws an error)."),Qqe.forEach(t),bJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(dA.$$.fragment,qs),vJe=i(qs),ire=n(qs,"P",{});var PGr=s(ire);FJe=r(PGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PGr.forEach(t),TJe=i(qs),Ca=n(qs,"P",{});var YC=s(Ca);MJe=r(YC,"The tokenizer class to instantiate is selected based on the "),dre=n(YC,"CODE",{});var IGr=s(dre);EJe=r(IGr,"model_type"),IGr.forEach(t),CJe=r(YC,` property of the config object (either
passed as an argument or loaded from `),cre=n(YC,"CODE",{});var qGr=s(cre);wJe=r(qGr,"pretrained_model_name_or_path"),qGr.forEach(t),AJe=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fre=n(YC,"CODE",{});var NGr=s(fre);yJe=r(NGr,"pretrained_model_name_or_path"),NGr.forEach(t),LJe=r(YC,":"),YC.forEach(t),xJe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var c7=s(Sn);mre=n(c7,"STRONG",{});var jGr=s(mre);$Je=r(jGr,"albert"),jGr.forEach(t),kJe=r(c7," \u2014 "),bS=n(c7,"A",{href:!0});var DGr=s(bS);SJe=r(DGr,"AlbertTokenizer"),DGr.forEach(t),RJe=r(c7," or "),vS=n(c7,"A",{href:!0});var GGr=s(vS);BJe=r(GGr,"AlbertTokenizerFast"),GGr.forEach(t),PJe=r(c7," (ALBERT model)"),c7.forEach(t),IJe=i(S),Rn=n(S,"LI",{});var f7=s(Rn);gre=n(f7,"STRONG",{});var OGr=s(gre);qJe=r(OGr,"bart"),OGr.forEach(t),NJe=r(f7," \u2014 "),FS=n(f7,"A",{href:!0});var VGr=s(FS);jJe=r(VGr,"BartTokenizer"),VGr.forEach(t),DJe=r(f7," or "),TS=n(f7,"A",{href:!0});var XGr=s(TS);GJe=r(XGr,"BartTokenizerFast"),XGr.forEach(t),OJe=r(f7," (BART model)"),f7.forEach(t),VJe=i(S),Bn=n(S,"LI",{});var m7=s(Bn);hre=n(m7,"STRONG",{});var zGr=s(hre);XJe=r(zGr,"barthez"),zGr.forEach(t),zJe=r(m7," \u2014 "),MS=n(m7,"A",{href:!0});var QGr=s(MS);QJe=r(QGr,"BarthezTokenizer"),QGr.forEach(t),WJe=r(m7," or "),ES=n(m7,"A",{href:!0});var WGr=s(ES);HJe=r(WGr,"BarthezTokenizerFast"),WGr.forEach(t),UJe=r(m7," (BARThez model)"),m7.forEach(t),JJe=i(S),bg=n(S,"LI",{});var C5e=s(bg);pre=n(C5e,"STRONG",{});var HGr=s(pre);YJe=r(HGr,"bartpho"),HGr.forEach(t),KJe=r(C5e," \u2014 "),CS=n(C5e,"A",{href:!0});var UGr=s(CS);ZJe=r(UGr,"BartphoTokenizer"),UGr.forEach(t),eYe=r(C5e," (BARTpho model)"),C5e.forEach(t),oYe=i(S),Pn=n(S,"LI",{});var g7=s(Pn);ure=n(g7,"STRONG",{});var JGr=s(ure);rYe=r(JGr,"bert"),JGr.forEach(t),tYe=r(g7," \u2014 "),wS=n(g7,"A",{href:!0});var YGr=s(wS);aYe=r(YGr,"BertTokenizer"),YGr.forEach(t),nYe=r(g7," or "),AS=n(g7,"A",{href:!0});var KGr=s(AS);sYe=r(KGr,"BertTokenizerFast"),KGr.forEach(t),lYe=r(g7," (BERT model)"),g7.forEach(t),iYe=i(S),vg=n(S,"LI",{});var w5e=s(vg);_re=n(w5e,"STRONG",{});var ZGr=s(_re);dYe=r(ZGr,"bert-generation"),ZGr.forEach(t),cYe=r(w5e," \u2014 "),yS=n(w5e,"A",{href:!0});var eOr=s(yS);fYe=r(eOr,"BertGenerationTokenizer"),eOr.forEach(t),mYe=r(w5e," (Bert Generation model)"),w5e.forEach(t),gYe=i(S),Fg=n(S,"LI",{});var A5e=s(Fg);bre=n(A5e,"STRONG",{});var oOr=s(bre);hYe=r(oOr,"bert-japanese"),oOr.forEach(t),pYe=r(A5e," \u2014 "),LS=n(A5e,"A",{href:!0});var rOr=s(LS);uYe=r(rOr,"BertJapaneseTokenizer"),rOr.forEach(t),_Ye=r(A5e," (BertJapanese model)"),A5e.forEach(t),bYe=i(S),Tg=n(S,"LI",{});var y5e=s(Tg);vre=n(y5e,"STRONG",{});var tOr=s(vre);vYe=r(tOr,"bertweet"),tOr.forEach(t),FYe=r(y5e," \u2014 "),xS=n(y5e,"A",{href:!0});var aOr=s(xS);TYe=r(aOr,"BertweetTokenizer"),aOr.forEach(t),MYe=r(y5e," (Bertweet model)"),y5e.forEach(t),EYe=i(S),In=n(S,"LI",{});var h7=s(In);Fre=n(h7,"STRONG",{});var nOr=s(Fre);CYe=r(nOr,"big_bird"),nOr.forEach(t),wYe=r(h7," \u2014 "),$S=n(h7,"A",{href:!0});var sOr=s($S);AYe=r(sOr,"BigBirdTokenizer"),sOr.forEach(t),yYe=r(h7," or "),kS=n(h7,"A",{href:!0});var lOr=s(kS);LYe=r(lOr,"BigBirdTokenizerFast"),lOr.forEach(t),xYe=r(h7," (BigBird model)"),h7.forEach(t),$Ye=i(S),qn=n(S,"LI",{});var p7=s(qn);Tre=n(p7,"STRONG",{});var iOr=s(Tre);kYe=r(iOr,"bigbird_pegasus"),iOr.forEach(t),SYe=r(p7," \u2014 "),SS=n(p7,"A",{href:!0});var dOr=s(SS);RYe=r(dOr,"PegasusTokenizer"),dOr.forEach(t),BYe=r(p7," or "),RS=n(p7,"A",{href:!0});var cOr=s(RS);PYe=r(cOr,"PegasusTokenizerFast"),cOr.forEach(t),IYe=r(p7," (BigBirdPegasus model)"),p7.forEach(t),qYe=i(S),Nn=n(S,"LI",{});var u7=s(Nn);Mre=n(u7,"STRONG",{});var fOr=s(Mre);NYe=r(fOr,"blenderbot"),fOr.forEach(t),jYe=r(u7," \u2014 "),BS=n(u7,"A",{href:!0});var mOr=s(BS);DYe=r(mOr,"BlenderbotTokenizer"),mOr.forEach(t),GYe=r(u7," or "),PS=n(u7,"A",{href:!0});var gOr=s(PS);OYe=r(gOr,"BlenderbotTokenizerFast"),gOr.forEach(t),VYe=r(u7," (Blenderbot model)"),u7.forEach(t),XYe=i(S),Mg=n(S,"LI",{});var L5e=s(Mg);Ere=n(L5e,"STRONG",{});var hOr=s(Ere);zYe=r(hOr,"blenderbot-small"),hOr.forEach(t),QYe=r(L5e," \u2014 "),IS=n(L5e,"A",{href:!0});var pOr=s(IS);WYe=r(pOr,"BlenderbotSmallTokenizer"),pOr.forEach(t),HYe=r(L5e," (BlenderbotSmall model)"),L5e.forEach(t),UYe=i(S),Eg=n(S,"LI",{});var x5e=s(Eg);Cre=n(x5e,"STRONG",{});var uOr=s(Cre);JYe=r(uOr,"byt5"),uOr.forEach(t),YYe=r(x5e," \u2014 "),qS=n(x5e,"A",{href:!0});var _Or=s(qS);KYe=r(_Or,"ByT5Tokenizer"),_Or.forEach(t),ZYe=r(x5e," (ByT5 model)"),x5e.forEach(t),eKe=i(S),jn=n(S,"LI",{});var _7=s(jn);wre=n(_7,"STRONG",{});var bOr=s(wre);oKe=r(bOr,"camembert"),bOr.forEach(t),rKe=r(_7," \u2014 "),NS=n(_7,"A",{href:!0});var vOr=s(NS);tKe=r(vOr,"CamembertTokenizer"),vOr.forEach(t),aKe=r(_7," or "),jS=n(_7,"A",{href:!0});var FOr=s(jS);nKe=r(FOr,"CamembertTokenizerFast"),FOr.forEach(t),sKe=r(_7," (CamemBERT model)"),_7.forEach(t),lKe=i(S),Cg=n(S,"LI",{});var $5e=s(Cg);Are=n($5e,"STRONG",{});var TOr=s(Are);iKe=r(TOr,"canine"),TOr.forEach(t),dKe=r($5e," \u2014 "),DS=n($5e,"A",{href:!0});var MOr=s(DS);cKe=r(MOr,"CanineTokenizer"),MOr.forEach(t),fKe=r($5e," (Canine model)"),$5e.forEach(t),mKe=i(S),Dn=n(S,"LI",{});var b7=s(Dn);yre=n(b7,"STRONG",{});var EOr=s(yre);gKe=r(EOr,"clip"),EOr.forEach(t),hKe=r(b7," \u2014 "),GS=n(b7,"A",{href:!0});var COr=s(GS);pKe=r(COr,"CLIPTokenizer"),COr.forEach(t),uKe=r(b7," or "),OS=n(b7,"A",{href:!0});var wOr=s(OS);_Ke=r(wOr,"CLIPTokenizerFast"),wOr.forEach(t),bKe=r(b7," (CLIP model)"),b7.forEach(t),vKe=i(S),Gn=n(S,"LI",{});var v7=s(Gn);Lre=n(v7,"STRONG",{});var AOr=s(Lre);FKe=r(AOr,"convbert"),AOr.forEach(t),TKe=r(v7," \u2014 "),VS=n(v7,"A",{href:!0});var yOr=s(VS);MKe=r(yOr,"ConvBertTokenizer"),yOr.forEach(t),EKe=r(v7," or "),XS=n(v7,"A",{href:!0});var LOr=s(XS);CKe=r(LOr,"ConvBertTokenizerFast"),LOr.forEach(t),wKe=r(v7," (ConvBERT model)"),v7.forEach(t),AKe=i(S),On=n(S,"LI",{});var F7=s(On);xre=n(F7,"STRONG",{});var xOr=s(xre);yKe=r(xOr,"cpm"),xOr.forEach(t),LKe=r(F7," \u2014 "),zS=n(F7,"A",{href:!0});var $Or=s(zS);xKe=r($Or,"CpmTokenizer"),$Or.forEach(t),$Ke=r(F7," or "),QS=n(F7,"A",{href:!0});var kOr=s(QS);kKe=r(kOr,"CpmTokenizerFast"),kOr.forEach(t),SKe=r(F7," (CPM model)"),F7.forEach(t),RKe=i(S),wg=n(S,"LI",{});var k5e=s(wg);$re=n(k5e,"STRONG",{});var SOr=s($re);BKe=r(SOr,"ctrl"),SOr.forEach(t),PKe=r(k5e," \u2014 "),WS=n(k5e,"A",{href:!0});var ROr=s(WS);IKe=r(ROr,"CTRLTokenizer"),ROr.forEach(t),qKe=r(k5e," (CTRL model)"),k5e.forEach(t),NKe=i(S),Vn=n(S,"LI",{});var T7=s(Vn);kre=n(T7,"STRONG",{});var BOr=s(kre);jKe=r(BOr,"data2vec-text"),BOr.forEach(t),DKe=r(T7," \u2014 "),HS=n(T7,"A",{href:!0});var POr=s(HS);GKe=r(POr,"RobertaTokenizer"),POr.forEach(t),OKe=r(T7," or "),US=n(T7,"A",{href:!0});var IOr=s(US);VKe=r(IOr,"RobertaTokenizerFast"),IOr.forEach(t),XKe=r(T7," (Data2VecText model)"),T7.forEach(t),zKe=i(S),Xn=n(S,"LI",{});var M7=s(Xn);Sre=n(M7,"STRONG",{});var qOr=s(Sre);QKe=r(qOr,"deberta"),qOr.forEach(t),WKe=r(M7," \u2014 "),JS=n(M7,"A",{href:!0});var NOr=s(JS);HKe=r(NOr,"DebertaTokenizer"),NOr.forEach(t),UKe=r(M7," or "),YS=n(M7,"A",{href:!0});var jOr=s(YS);JKe=r(jOr,"DebertaTokenizerFast"),jOr.forEach(t),YKe=r(M7," (DeBERTa model)"),M7.forEach(t),KKe=i(S),zn=n(S,"LI",{});var E7=s(zn);Rre=n(E7,"STRONG",{});var DOr=s(Rre);ZKe=r(DOr,"deberta-v2"),DOr.forEach(t),eZe=r(E7," \u2014 "),KS=n(E7,"A",{href:!0});var GOr=s(KS);oZe=r(GOr,"DebertaV2Tokenizer"),GOr.forEach(t),rZe=r(E7," or "),ZS=n(E7,"A",{href:!0});var OOr=s(ZS);tZe=r(OOr,"DebertaV2TokenizerFast"),OOr.forEach(t),aZe=r(E7," (DeBERTa-v2 model)"),E7.forEach(t),nZe=i(S),Qn=n(S,"LI",{});var C7=s(Qn);Bre=n(C7,"STRONG",{});var VOr=s(Bre);sZe=r(VOr,"distilbert"),VOr.forEach(t),lZe=r(C7," \u2014 "),eR=n(C7,"A",{href:!0});var XOr=s(eR);iZe=r(XOr,"DistilBertTokenizer"),XOr.forEach(t),dZe=r(C7," or "),oR=n(C7,"A",{href:!0});var zOr=s(oR);cZe=r(zOr,"DistilBertTokenizerFast"),zOr.forEach(t),fZe=r(C7," (DistilBERT model)"),C7.forEach(t),mZe=i(S),Wn=n(S,"LI",{});var w7=s(Wn);Pre=n(w7,"STRONG",{});var QOr=s(Pre);gZe=r(QOr,"dpr"),QOr.forEach(t),hZe=r(w7," \u2014 "),rR=n(w7,"A",{href:!0});var WOr=s(rR);pZe=r(WOr,"DPRQuestionEncoderTokenizer"),WOr.forEach(t),uZe=r(w7," or "),tR=n(w7,"A",{href:!0});var HOr=s(tR);_Ze=r(HOr,"DPRQuestionEncoderTokenizerFast"),HOr.forEach(t),bZe=r(w7," (DPR model)"),w7.forEach(t),vZe=i(S),Hn=n(S,"LI",{});var A7=s(Hn);Ire=n(A7,"STRONG",{});var UOr=s(Ire);FZe=r(UOr,"electra"),UOr.forEach(t),TZe=r(A7," \u2014 "),aR=n(A7,"A",{href:!0});var JOr=s(aR);MZe=r(JOr,"ElectraTokenizer"),JOr.forEach(t),EZe=r(A7," or "),nR=n(A7,"A",{href:!0});var YOr=s(nR);CZe=r(YOr,"ElectraTokenizerFast"),YOr.forEach(t),wZe=r(A7," (ELECTRA model)"),A7.forEach(t),AZe=i(S),Ag=n(S,"LI",{});var S5e=s(Ag);qre=n(S5e,"STRONG",{});var KOr=s(qre);yZe=r(KOr,"flaubert"),KOr.forEach(t),LZe=r(S5e," \u2014 "),sR=n(S5e,"A",{href:!0});var ZOr=s(sR);xZe=r(ZOr,"FlaubertTokenizer"),ZOr.forEach(t),$Ze=r(S5e," (FlauBERT model)"),S5e.forEach(t),kZe=i(S),Un=n(S,"LI",{});var y7=s(Un);Nre=n(y7,"STRONG",{});var eVr=s(Nre);SZe=r(eVr,"fnet"),eVr.forEach(t),RZe=r(y7," \u2014 "),lR=n(y7,"A",{href:!0});var oVr=s(lR);BZe=r(oVr,"FNetTokenizer"),oVr.forEach(t),PZe=r(y7," or "),iR=n(y7,"A",{href:!0});var rVr=s(iR);IZe=r(rVr,"FNetTokenizerFast"),rVr.forEach(t),qZe=r(y7," (FNet model)"),y7.forEach(t),NZe=i(S),yg=n(S,"LI",{});var R5e=s(yg);jre=n(R5e,"STRONG",{});var tVr=s(jre);jZe=r(tVr,"fsmt"),tVr.forEach(t),DZe=r(R5e," \u2014 "),dR=n(R5e,"A",{href:!0});var aVr=s(dR);GZe=r(aVr,"FSMTTokenizer"),aVr.forEach(t),OZe=r(R5e," (FairSeq Machine-Translation model)"),R5e.forEach(t),VZe=i(S),Jn=n(S,"LI",{});var L7=s(Jn);Dre=n(L7,"STRONG",{});var nVr=s(Dre);XZe=r(nVr,"funnel"),nVr.forEach(t),zZe=r(L7," \u2014 "),cR=n(L7,"A",{href:!0});var sVr=s(cR);QZe=r(sVr,"FunnelTokenizer"),sVr.forEach(t),WZe=r(L7," or "),fR=n(L7,"A",{href:!0});var lVr=s(fR);HZe=r(lVr,"FunnelTokenizerFast"),lVr.forEach(t),UZe=r(L7," (Funnel Transformer model)"),L7.forEach(t),JZe=i(S),Yn=n(S,"LI",{});var x7=s(Yn);Gre=n(x7,"STRONG",{});var iVr=s(Gre);YZe=r(iVr,"gpt2"),iVr.forEach(t),KZe=r(x7," \u2014 "),mR=n(x7,"A",{href:!0});var dVr=s(mR);ZZe=r(dVr,"GPT2Tokenizer"),dVr.forEach(t),eeo=r(x7," or "),gR=n(x7,"A",{href:!0});var cVr=s(gR);oeo=r(cVr,"GPT2TokenizerFast"),cVr.forEach(t),reo=r(x7," (OpenAI GPT-2 model)"),x7.forEach(t),teo=i(S),Kn=n(S,"LI",{});var $7=s(Kn);Ore=n($7,"STRONG",{});var fVr=s(Ore);aeo=r(fVr,"gpt_neo"),fVr.forEach(t),neo=r($7," \u2014 "),hR=n($7,"A",{href:!0});var mVr=s(hR);seo=r(mVr,"GPT2Tokenizer"),mVr.forEach(t),leo=r($7," or "),pR=n($7,"A",{href:!0});var gVr=s(pR);ieo=r(gVr,"GPT2TokenizerFast"),gVr.forEach(t),deo=r($7," (GPT Neo model)"),$7.forEach(t),ceo=i(S),Zn=n(S,"LI",{});var k7=s(Zn);Vre=n(k7,"STRONG",{});var hVr=s(Vre);feo=r(hVr,"gptj"),hVr.forEach(t),meo=r(k7," \u2014 "),uR=n(k7,"A",{href:!0});var pVr=s(uR);geo=r(pVr,"GPT2Tokenizer"),pVr.forEach(t),heo=r(k7," or "),_R=n(k7,"A",{href:!0});var uVr=s(_R);peo=r(uVr,"GPT2TokenizerFast"),uVr.forEach(t),ueo=r(k7," (GPT-J model)"),k7.forEach(t),_eo=i(S),es=n(S,"LI",{});var S7=s(es);Xre=n(S7,"STRONG",{});var _Vr=s(Xre);beo=r(_Vr,"herbert"),_Vr.forEach(t),veo=r(S7," \u2014 "),bR=n(S7,"A",{href:!0});var bVr=s(bR);Feo=r(bVr,"HerbertTokenizer"),bVr.forEach(t),Teo=r(S7," or "),vR=n(S7,"A",{href:!0});var vVr=s(vR);Meo=r(vVr,"HerbertTokenizerFast"),vVr.forEach(t),Eeo=r(S7," (HerBERT model)"),S7.forEach(t),Ceo=i(S),Lg=n(S,"LI",{});var B5e=s(Lg);zre=n(B5e,"STRONG",{});var FVr=s(zre);weo=r(FVr,"hubert"),FVr.forEach(t),Aeo=r(B5e," \u2014 "),FR=n(B5e,"A",{href:!0});var TVr=s(FR);yeo=r(TVr,"Wav2Vec2CTCTokenizer"),TVr.forEach(t),Leo=r(B5e," (Hubert model)"),B5e.forEach(t),xeo=i(S),os=n(S,"LI",{});var R7=s(os);Qre=n(R7,"STRONG",{});var MVr=s(Qre);$eo=r(MVr,"ibert"),MVr.forEach(t),keo=r(R7," \u2014 "),TR=n(R7,"A",{href:!0});var EVr=s(TR);Seo=r(EVr,"RobertaTokenizer"),EVr.forEach(t),Reo=r(R7," or "),MR=n(R7,"A",{href:!0});var CVr=s(MR);Beo=r(CVr,"RobertaTokenizerFast"),CVr.forEach(t),Peo=r(R7," (I-BERT model)"),R7.forEach(t),Ieo=i(S),rs=n(S,"LI",{});var B7=s(rs);Wre=n(B7,"STRONG",{});var wVr=s(Wre);qeo=r(wVr,"layoutlm"),wVr.forEach(t),Neo=r(B7," \u2014 "),ER=n(B7,"A",{href:!0});var AVr=s(ER);jeo=r(AVr,"LayoutLMTokenizer"),AVr.forEach(t),Deo=r(B7," or "),CR=n(B7,"A",{href:!0});var yVr=s(CR);Geo=r(yVr,"LayoutLMTokenizerFast"),yVr.forEach(t),Oeo=r(B7," (LayoutLM model)"),B7.forEach(t),Veo=i(S),ts=n(S,"LI",{});var P7=s(ts);Hre=n(P7,"STRONG",{});var LVr=s(Hre);Xeo=r(LVr,"layoutlmv2"),LVr.forEach(t),zeo=r(P7," \u2014 "),wR=n(P7,"A",{href:!0});var xVr=s(wR);Qeo=r(xVr,"LayoutLMv2Tokenizer"),xVr.forEach(t),Weo=r(P7," or "),AR=n(P7,"A",{href:!0});var $Vr=s(AR);Heo=r($Vr,"LayoutLMv2TokenizerFast"),$Vr.forEach(t),Ueo=r(P7," (LayoutLMv2 model)"),P7.forEach(t),Jeo=i(S),as=n(S,"LI",{});var I7=s(as);Ure=n(I7,"STRONG",{});var kVr=s(Ure);Yeo=r(kVr,"layoutxlm"),kVr.forEach(t),Keo=r(I7," \u2014 "),yR=n(I7,"A",{href:!0});var SVr=s(yR);Zeo=r(SVr,"LayoutXLMTokenizer"),SVr.forEach(t),eoo=r(I7," or "),LR=n(I7,"A",{href:!0});var RVr=s(LR);ooo=r(RVr,"LayoutXLMTokenizerFast"),RVr.forEach(t),roo=r(I7," (LayoutXLM model)"),I7.forEach(t),too=i(S),ns=n(S,"LI",{});var q7=s(ns);Jre=n(q7,"STRONG",{});var BVr=s(Jre);aoo=r(BVr,"led"),BVr.forEach(t),noo=r(q7," \u2014 "),xR=n(q7,"A",{href:!0});var PVr=s(xR);soo=r(PVr,"LEDTokenizer"),PVr.forEach(t),loo=r(q7," or "),$R=n(q7,"A",{href:!0});var IVr=s($R);ioo=r(IVr,"LEDTokenizerFast"),IVr.forEach(t),doo=r(q7," (LED model)"),q7.forEach(t),coo=i(S),ss=n(S,"LI",{});var N7=s(ss);Yre=n(N7,"STRONG",{});var qVr=s(Yre);foo=r(qVr,"longformer"),qVr.forEach(t),moo=r(N7," \u2014 "),kR=n(N7,"A",{href:!0});var NVr=s(kR);goo=r(NVr,"LongformerTokenizer"),NVr.forEach(t),hoo=r(N7," or "),SR=n(N7,"A",{href:!0});var jVr=s(SR);poo=r(jVr,"LongformerTokenizerFast"),jVr.forEach(t),uoo=r(N7," (Longformer model)"),N7.forEach(t),_oo=i(S),xg=n(S,"LI",{});var P5e=s(xg);Kre=n(P5e,"STRONG",{});var DVr=s(Kre);boo=r(DVr,"luke"),DVr.forEach(t),voo=r(P5e," \u2014 "),RR=n(P5e,"A",{href:!0});var GVr=s(RR);Foo=r(GVr,"LukeTokenizer"),GVr.forEach(t),Too=r(P5e," (LUKE model)"),P5e.forEach(t),Moo=i(S),ls=n(S,"LI",{});var j7=s(ls);Zre=n(j7,"STRONG",{});var OVr=s(Zre);Eoo=r(OVr,"lxmert"),OVr.forEach(t),Coo=r(j7," \u2014 "),BR=n(j7,"A",{href:!0});var VVr=s(BR);woo=r(VVr,"LxmertTokenizer"),VVr.forEach(t),Aoo=r(j7," or "),PR=n(j7,"A",{href:!0});var XVr=s(PR);yoo=r(XVr,"LxmertTokenizerFast"),XVr.forEach(t),Loo=r(j7," (LXMERT model)"),j7.forEach(t),xoo=i(S),$g=n(S,"LI",{});var I5e=s($g);ete=n(I5e,"STRONG",{});var zVr=s(ete);$oo=r(zVr,"m2m_100"),zVr.forEach(t),koo=r(I5e," \u2014 "),IR=n(I5e,"A",{href:!0});var QVr=s(IR);Soo=r(QVr,"M2M100Tokenizer"),QVr.forEach(t),Roo=r(I5e," (M2M100 model)"),I5e.forEach(t),Boo=i(S),kg=n(S,"LI",{});var q5e=s(kg);ote=n(q5e,"STRONG",{});var WVr=s(ote);Poo=r(WVr,"marian"),WVr.forEach(t),Ioo=r(q5e," \u2014 "),qR=n(q5e,"A",{href:!0});var HVr=s(qR);qoo=r(HVr,"MarianTokenizer"),HVr.forEach(t),Noo=r(q5e," (Marian model)"),q5e.forEach(t),joo=i(S),is=n(S,"LI",{});var D7=s(is);rte=n(D7,"STRONG",{});var UVr=s(rte);Doo=r(UVr,"mbart"),UVr.forEach(t),Goo=r(D7," \u2014 "),NR=n(D7,"A",{href:!0});var JVr=s(NR);Ooo=r(JVr,"MBartTokenizer"),JVr.forEach(t),Voo=r(D7," or "),jR=n(D7,"A",{href:!0});var YVr=s(jR);Xoo=r(YVr,"MBartTokenizerFast"),YVr.forEach(t),zoo=r(D7," (mBART model)"),D7.forEach(t),Qoo=i(S),ds=n(S,"LI",{});var G7=s(ds);tte=n(G7,"STRONG",{});var KVr=s(tte);Woo=r(KVr,"mbart50"),KVr.forEach(t),Hoo=r(G7," \u2014 "),DR=n(G7,"A",{href:!0});var ZVr=s(DR);Uoo=r(ZVr,"MBart50Tokenizer"),ZVr.forEach(t),Joo=r(G7," or "),GR=n(G7,"A",{href:!0});var eXr=s(GR);Yoo=r(eXr,"MBart50TokenizerFast"),eXr.forEach(t),Koo=r(G7," (mBART-50 model)"),G7.forEach(t),Zoo=i(S),cs=n(S,"LI",{});var O7=s(cs);ate=n(O7,"STRONG",{});var oXr=s(ate);ero=r(oXr,"megatron-bert"),oXr.forEach(t),oro=r(O7," \u2014 "),OR=n(O7,"A",{href:!0});var rXr=s(OR);rro=r(rXr,"BertTokenizer"),rXr.forEach(t),tro=r(O7," or "),VR=n(O7,"A",{href:!0});var tXr=s(VR);aro=r(tXr,"BertTokenizerFast"),tXr.forEach(t),nro=r(O7," (MegatronBert model)"),O7.forEach(t),sro=i(S),Sg=n(S,"LI",{});var N5e=s(Sg);nte=n(N5e,"STRONG",{});var aXr=s(nte);lro=r(aXr,"mluke"),aXr.forEach(t),iro=r(N5e," \u2014 "),XR=n(N5e,"A",{href:!0});var nXr=s(XR);dro=r(nXr,"MLukeTokenizer"),nXr.forEach(t),cro=r(N5e," (mLUKE model)"),N5e.forEach(t),fro=i(S),fs=n(S,"LI",{});var V7=s(fs);ste=n(V7,"STRONG",{});var sXr=s(ste);mro=r(sXr,"mobilebert"),sXr.forEach(t),gro=r(V7," \u2014 "),zR=n(V7,"A",{href:!0});var lXr=s(zR);hro=r(lXr,"MobileBertTokenizer"),lXr.forEach(t),pro=r(V7," or "),QR=n(V7,"A",{href:!0});var iXr=s(QR);uro=r(iXr,"MobileBertTokenizerFast"),iXr.forEach(t),_ro=r(V7," (MobileBERT model)"),V7.forEach(t),bro=i(S),ms=n(S,"LI",{});var X7=s(ms);lte=n(X7,"STRONG",{});var dXr=s(lte);vro=r(dXr,"mpnet"),dXr.forEach(t),Fro=r(X7," \u2014 "),WR=n(X7,"A",{href:!0});var cXr=s(WR);Tro=r(cXr,"MPNetTokenizer"),cXr.forEach(t),Mro=r(X7," or "),HR=n(X7,"A",{href:!0});var fXr=s(HR);Ero=r(fXr,"MPNetTokenizerFast"),fXr.forEach(t),Cro=r(X7," (MPNet model)"),X7.forEach(t),wro=i(S),gs=n(S,"LI",{});var z7=s(gs);ite=n(z7,"STRONG",{});var mXr=s(ite);Aro=r(mXr,"mt5"),mXr.forEach(t),yro=r(z7," \u2014 "),UR=n(z7,"A",{href:!0});var gXr=s(UR);Lro=r(gXr,"MT5Tokenizer"),gXr.forEach(t),xro=r(z7," or "),JR=n(z7,"A",{href:!0});var hXr=s(JR);$ro=r(hXr,"MT5TokenizerFast"),hXr.forEach(t),kro=r(z7," (mT5 model)"),z7.forEach(t),Sro=i(S),hs=n(S,"LI",{});var Q7=s(hs);dte=n(Q7,"STRONG",{});var pXr=s(dte);Rro=r(pXr,"nystromformer"),pXr.forEach(t),Bro=r(Q7," \u2014 "),YR=n(Q7,"A",{href:!0});var uXr=s(YR);Pro=r(uXr,"AlbertTokenizer"),uXr.forEach(t),Iro=r(Q7," or "),KR=n(Q7,"A",{href:!0});var _Xr=s(KR);qro=r(_Xr,"AlbertTokenizerFast"),_Xr.forEach(t),Nro=r(Q7," (Nystromformer model)"),Q7.forEach(t),jro=i(S),ps=n(S,"LI",{});var W7=s(ps);cte=n(W7,"STRONG",{});var bXr=s(cte);Dro=r(bXr,"openai-gpt"),bXr.forEach(t),Gro=r(W7," \u2014 "),ZR=n(W7,"A",{href:!0});var vXr=s(ZR);Oro=r(vXr,"OpenAIGPTTokenizer"),vXr.forEach(t),Vro=r(W7," or "),eB=n(W7,"A",{href:!0});var FXr=s(eB);Xro=r(FXr,"OpenAIGPTTokenizerFast"),FXr.forEach(t),zro=r(W7," (OpenAI GPT model)"),W7.forEach(t),Qro=i(S),Rg=n(S,"LI",{});var j5e=s(Rg);fte=n(j5e,"STRONG",{});var TXr=s(fte);Wro=r(TXr,"opt"),TXr.forEach(t),Hro=r(j5e," \u2014 "),oB=n(j5e,"A",{href:!0});var MXr=s(oB);Uro=r(MXr,"GPT2Tokenizer"),MXr.forEach(t),Jro=r(j5e," (OPT model)"),j5e.forEach(t),Yro=i(S),us=n(S,"LI",{});var H7=s(us);mte=n(H7,"STRONG",{});var EXr=s(mte);Kro=r(EXr,"pegasus"),EXr.forEach(t),Zro=r(H7," \u2014 "),rB=n(H7,"A",{href:!0});var CXr=s(rB);eto=r(CXr,"PegasusTokenizer"),CXr.forEach(t),oto=r(H7," or "),tB=n(H7,"A",{href:!0});var wXr=s(tB);rto=r(wXr,"PegasusTokenizerFast"),wXr.forEach(t),tto=r(H7," (Pegasus model)"),H7.forEach(t),ato=i(S),Bg=n(S,"LI",{});var D5e=s(Bg);gte=n(D5e,"STRONG",{});var AXr=s(gte);nto=r(AXr,"perceiver"),AXr.forEach(t),sto=r(D5e," \u2014 "),aB=n(D5e,"A",{href:!0});var yXr=s(aB);lto=r(yXr,"PerceiverTokenizer"),yXr.forEach(t),ito=r(D5e," (Perceiver model)"),D5e.forEach(t),dto=i(S),Pg=n(S,"LI",{});var G5e=s(Pg);hte=n(G5e,"STRONG",{});var LXr=s(hte);cto=r(LXr,"phobert"),LXr.forEach(t),fto=r(G5e," \u2014 "),nB=n(G5e,"A",{href:!0});var xXr=s(nB);mto=r(xXr,"PhobertTokenizer"),xXr.forEach(t),gto=r(G5e," (PhoBERT model)"),G5e.forEach(t),hto=i(S),Ig=n(S,"LI",{});var O5e=s(Ig);pte=n(O5e,"STRONG",{});var $Xr=s(pte);pto=r($Xr,"plbart"),$Xr.forEach(t),uto=r(O5e," \u2014 "),sB=n(O5e,"A",{href:!0});var kXr=s(sB);_to=r(kXr,"PLBartTokenizer"),kXr.forEach(t),bto=r(O5e," (PLBart model)"),O5e.forEach(t),vto=i(S),qg=n(S,"LI",{});var V5e=s(qg);ute=n(V5e,"STRONG",{});var SXr=s(ute);Fto=r(SXr,"prophetnet"),SXr.forEach(t),Tto=r(V5e," \u2014 "),lB=n(V5e,"A",{href:!0});var RXr=s(lB);Mto=r(RXr,"ProphetNetTokenizer"),RXr.forEach(t),Eto=r(V5e," (ProphetNet model)"),V5e.forEach(t),Cto=i(S),_s=n(S,"LI",{});var U7=s(_s);_te=n(U7,"STRONG",{});var BXr=s(_te);wto=r(BXr,"qdqbert"),BXr.forEach(t),Ato=r(U7," \u2014 "),iB=n(U7,"A",{href:!0});var PXr=s(iB);yto=r(PXr,"BertTokenizer"),PXr.forEach(t),Lto=r(U7," or "),dB=n(U7,"A",{href:!0});var IXr=s(dB);xto=r(IXr,"BertTokenizerFast"),IXr.forEach(t),$to=r(U7," (QDQBert model)"),U7.forEach(t),kto=i(S),Ng=n(S,"LI",{});var X5e=s(Ng);bte=n(X5e,"STRONG",{});var qXr=s(bte);Sto=r(qXr,"rag"),qXr.forEach(t),Rto=r(X5e," \u2014 "),cB=n(X5e,"A",{href:!0});var NXr=s(cB);Bto=r(NXr,"RagTokenizer"),NXr.forEach(t),Pto=r(X5e," (RAG model)"),X5e.forEach(t),Ito=i(S),bs=n(S,"LI",{});var J7=s(bs);vte=n(J7,"STRONG",{});var jXr=s(vte);qto=r(jXr,"realm"),jXr.forEach(t),Nto=r(J7," \u2014 "),fB=n(J7,"A",{href:!0});var DXr=s(fB);jto=r(DXr,"RealmTokenizer"),DXr.forEach(t),Dto=r(J7," or "),mB=n(J7,"A",{href:!0});var GXr=s(mB);Gto=r(GXr,"RealmTokenizerFast"),GXr.forEach(t),Oto=r(J7," (Realm model)"),J7.forEach(t),Vto=i(S),vs=n(S,"LI",{});var Y7=s(vs);Fte=n(Y7,"STRONG",{});var OXr=s(Fte);Xto=r(OXr,"reformer"),OXr.forEach(t),zto=r(Y7," \u2014 "),gB=n(Y7,"A",{href:!0});var VXr=s(gB);Qto=r(VXr,"ReformerTokenizer"),VXr.forEach(t),Wto=r(Y7," or "),hB=n(Y7,"A",{href:!0});var XXr=s(hB);Hto=r(XXr,"ReformerTokenizerFast"),XXr.forEach(t),Uto=r(Y7," (Reformer model)"),Y7.forEach(t),Jto=i(S),Fs=n(S,"LI",{});var K7=s(Fs);Tte=n(K7,"STRONG",{});var zXr=s(Tte);Yto=r(zXr,"rembert"),zXr.forEach(t),Kto=r(K7," \u2014 "),pB=n(K7,"A",{href:!0});var QXr=s(pB);Zto=r(QXr,"RemBertTokenizer"),QXr.forEach(t),eao=r(K7," or "),uB=n(K7,"A",{href:!0});var WXr=s(uB);oao=r(WXr,"RemBertTokenizerFast"),WXr.forEach(t),rao=r(K7," (RemBERT model)"),K7.forEach(t),tao=i(S),Ts=n(S,"LI",{});var Z7=s(Ts);Mte=n(Z7,"STRONG",{});var HXr=s(Mte);aao=r(HXr,"retribert"),HXr.forEach(t),nao=r(Z7," \u2014 "),_B=n(Z7,"A",{href:!0});var UXr=s(_B);sao=r(UXr,"RetriBertTokenizer"),UXr.forEach(t),lao=r(Z7," or "),bB=n(Z7,"A",{href:!0});var JXr=s(bB);iao=r(JXr,"RetriBertTokenizerFast"),JXr.forEach(t),dao=r(Z7," (RetriBERT model)"),Z7.forEach(t),cao=i(S),Ms=n(S,"LI",{});var e$=s(Ms);Ete=n(e$,"STRONG",{});var YXr=s(Ete);fao=r(YXr,"roberta"),YXr.forEach(t),mao=r(e$," \u2014 "),vB=n(e$,"A",{href:!0});var KXr=s(vB);gao=r(KXr,"RobertaTokenizer"),KXr.forEach(t),hao=r(e$," or "),FB=n(e$,"A",{href:!0});var ZXr=s(FB);pao=r(ZXr,"RobertaTokenizerFast"),ZXr.forEach(t),uao=r(e$," (RoBERTa model)"),e$.forEach(t),_ao=i(S),Es=n(S,"LI",{});var o$=s(Es);Cte=n(o$,"STRONG",{});var ezr=s(Cte);bao=r(ezr,"roformer"),ezr.forEach(t),vao=r(o$," \u2014 "),TB=n(o$,"A",{href:!0});var ozr=s(TB);Fao=r(ozr,"RoFormerTokenizer"),ozr.forEach(t),Tao=r(o$," or "),MB=n(o$,"A",{href:!0});var rzr=s(MB);Mao=r(rzr,"RoFormerTokenizerFast"),rzr.forEach(t),Eao=r(o$," (RoFormer model)"),o$.forEach(t),Cao=i(S),jg=n(S,"LI",{});var z5e=s(jg);wte=n(z5e,"STRONG",{});var tzr=s(wte);wao=r(tzr,"speech_to_text"),tzr.forEach(t),Aao=r(z5e," \u2014 "),EB=n(z5e,"A",{href:!0});var azr=s(EB);yao=r(azr,"Speech2TextTokenizer"),azr.forEach(t),Lao=r(z5e," (Speech2Text model)"),z5e.forEach(t),xao=i(S),Dg=n(S,"LI",{});var Q5e=s(Dg);Ate=n(Q5e,"STRONG",{});var nzr=s(Ate);$ao=r(nzr,"speech_to_text_2"),nzr.forEach(t),kao=r(Q5e," \u2014 "),CB=n(Q5e,"A",{href:!0});var szr=s(CB);Sao=r(szr,"Speech2Text2Tokenizer"),szr.forEach(t),Rao=r(Q5e," (Speech2Text2 model)"),Q5e.forEach(t),Bao=i(S),Cs=n(S,"LI",{});var r$=s(Cs);yte=n(r$,"STRONG",{});var lzr=s(yte);Pao=r(lzr,"splinter"),lzr.forEach(t),Iao=r(r$," \u2014 "),wB=n(r$,"A",{href:!0});var izr=s(wB);qao=r(izr,"SplinterTokenizer"),izr.forEach(t),Nao=r(r$," or "),AB=n(r$,"A",{href:!0});var dzr=s(AB);jao=r(dzr,"SplinterTokenizerFast"),dzr.forEach(t),Dao=r(r$," (Splinter model)"),r$.forEach(t),Gao=i(S),ws=n(S,"LI",{});var t$=s(ws);Lte=n(t$,"STRONG",{});var czr=s(Lte);Oao=r(czr,"squeezebert"),czr.forEach(t),Vao=r(t$," \u2014 "),yB=n(t$,"A",{href:!0});var fzr=s(yB);Xao=r(fzr,"SqueezeBertTokenizer"),fzr.forEach(t),zao=r(t$," or "),LB=n(t$,"A",{href:!0});var mzr=s(LB);Qao=r(mzr,"SqueezeBertTokenizerFast"),mzr.forEach(t),Wao=r(t$," (SqueezeBERT model)"),t$.forEach(t),Hao=i(S),As=n(S,"LI",{});var a$=s(As);xte=n(a$,"STRONG",{});var gzr=s(xte);Uao=r(gzr,"t5"),gzr.forEach(t),Jao=r(a$," \u2014 "),xB=n(a$,"A",{href:!0});var hzr=s(xB);Yao=r(hzr,"T5Tokenizer"),hzr.forEach(t),Kao=r(a$," or "),$B=n(a$,"A",{href:!0});var pzr=s($B);Zao=r(pzr,"T5TokenizerFast"),pzr.forEach(t),eno=r(a$," (T5 model)"),a$.forEach(t),ono=i(S),Gg=n(S,"LI",{});var W5e=s(Gg);$te=n(W5e,"STRONG",{});var uzr=s($te);rno=r(uzr,"tapas"),uzr.forEach(t),tno=r(W5e," \u2014 "),kB=n(W5e,"A",{href:!0});var _zr=s(kB);ano=r(_zr,"TapasTokenizer"),_zr.forEach(t),nno=r(W5e," (TAPAS model)"),W5e.forEach(t),sno=i(S),Og=n(S,"LI",{});var H5e=s(Og);kte=n(H5e,"STRONG",{});var bzr=s(kte);lno=r(bzr,"tapex"),bzr.forEach(t),ino=r(H5e," \u2014 "),SB=n(H5e,"A",{href:!0});var vzr=s(SB);dno=r(vzr,"TapexTokenizer"),vzr.forEach(t),cno=r(H5e," (TAPEX model)"),H5e.forEach(t),fno=i(S),Vg=n(S,"LI",{});var U5e=s(Vg);Ste=n(U5e,"STRONG",{});var Fzr=s(Ste);mno=r(Fzr,"transfo-xl"),Fzr.forEach(t),gno=r(U5e," \u2014 "),RB=n(U5e,"A",{href:!0});var Tzr=s(RB);hno=r(Tzr,"TransfoXLTokenizer"),Tzr.forEach(t),pno=r(U5e," (Transformer-XL model)"),U5e.forEach(t),uno=i(S),ys=n(S,"LI",{});var n$=s(ys);Rte=n(n$,"STRONG",{});var Mzr=s(Rte);_no=r(Mzr,"visual_bert"),Mzr.forEach(t),bno=r(n$," \u2014 "),BB=n(n$,"A",{href:!0});var Ezr=s(BB);vno=r(Ezr,"BertTokenizer"),Ezr.forEach(t),Fno=r(n$," or "),PB=n(n$,"A",{href:!0});var Czr=s(PB);Tno=r(Czr,"BertTokenizerFast"),Czr.forEach(t),Mno=r(n$," (VisualBert model)"),n$.forEach(t),Eno=i(S),Xg=n(S,"LI",{});var J5e=s(Xg);Bte=n(J5e,"STRONG",{});var wzr=s(Bte);Cno=r(wzr,"wav2vec2"),wzr.forEach(t),wno=r(J5e," \u2014 "),IB=n(J5e,"A",{href:!0});var Azr=s(IB);Ano=r(Azr,"Wav2Vec2CTCTokenizer"),Azr.forEach(t),yno=r(J5e," (Wav2Vec2 model)"),J5e.forEach(t),Lno=i(S),zg=n(S,"LI",{});var Y5e=s(zg);Pte=n(Y5e,"STRONG",{});var yzr=s(Pte);xno=r(yzr,"wav2vec2_phoneme"),yzr.forEach(t),$no=r(Y5e," \u2014 "),qB=n(Y5e,"A",{href:!0});var Lzr=s(qB);kno=r(Lzr,"Wav2Vec2PhonemeCTCTokenizer"),Lzr.forEach(t),Sno=r(Y5e," (Wav2Vec2Phoneme model)"),Y5e.forEach(t),Rno=i(S),Ls=n(S,"LI",{});var s$=s(Ls);Ite=n(s$,"STRONG",{});var xzr=s(Ite);Bno=r(xzr,"xglm"),xzr.forEach(t),Pno=r(s$," \u2014 "),NB=n(s$,"A",{href:!0});var $zr=s(NB);Ino=r($zr,"XGLMTokenizer"),$zr.forEach(t),qno=r(s$," or "),jB=n(s$,"A",{href:!0});var kzr=s(jB);Nno=r(kzr,"XGLMTokenizerFast"),kzr.forEach(t),jno=r(s$," (XGLM model)"),s$.forEach(t),Dno=i(S),Qg=n(S,"LI",{});var K5e=s(Qg);qte=n(K5e,"STRONG",{});var Szr=s(qte);Gno=r(Szr,"xlm"),Szr.forEach(t),Ono=r(K5e," \u2014 "),DB=n(K5e,"A",{href:!0});var Rzr=s(DB);Vno=r(Rzr,"XLMTokenizer"),Rzr.forEach(t),Xno=r(K5e," (XLM model)"),K5e.forEach(t),zno=i(S),Wg=n(S,"LI",{});var Z5e=s(Wg);Nte=n(Z5e,"STRONG",{});var Bzr=s(Nte);Qno=r(Bzr,"xlm-prophetnet"),Bzr.forEach(t),Wno=r(Z5e," \u2014 "),GB=n(Z5e,"A",{href:!0});var Pzr=s(GB);Hno=r(Pzr,"XLMProphetNetTokenizer"),Pzr.forEach(t),Uno=r(Z5e," (XLMProphetNet model)"),Z5e.forEach(t),Jno=i(S),xs=n(S,"LI",{});var l$=s(xs);jte=n(l$,"STRONG",{});var Izr=s(jte);Yno=r(Izr,"xlm-roberta"),Izr.forEach(t),Kno=r(l$," \u2014 "),OB=n(l$,"A",{href:!0});var qzr=s(OB);Zno=r(qzr,"XLMRobertaTokenizer"),qzr.forEach(t),eso=r(l$," or "),VB=n(l$,"A",{href:!0});var Nzr=s(VB);oso=r(Nzr,"XLMRobertaTokenizerFast"),Nzr.forEach(t),rso=r(l$," (XLM-RoBERTa model)"),l$.forEach(t),tso=i(S),$s=n(S,"LI",{});var i$=s($s);Dte=n(i$,"STRONG",{});var jzr=s(Dte);aso=r(jzr,"xlm-roberta-xl"),jzr.forEach(t),nso=r(i$," \u2014 "),XB=n(i$,"A",{href:!0});var Dzr=s(XB);sso=r(Dzr,"RobertaTokenizer"),Dzr.forEach(t),lso=r(i$," or "),zB=n(i$,"A",{href:!0});var Gzr=s(zB);iso=r(Gzr,"RobertaTokenizerFast"),Gzr.forEach(t),dso=r(i$," (XLM-RoBERTa-XL model)"),i$.forEach(t),cso=i(S),ks=n(S,"LI",{});var d$=s(ks);Gte=n(d$,"STRONG",{});var Ozr=s(Gte);fso=r(Ozr,"xlnet"),Ozr.forEach(t),mso=r(d$," \u2014 "),QB=n(d$,"A",{href:!0});var Vzr=s(QB);gso=r(Vzr,"XLNetTokenizer"),Vzr.forEach(t),hso=r(d$," or "),WB=n(d$,"A",{href:!0});var Xzr=s(WB);pso=r(Xzr,"XLNetTokenizerFast"),Xzr.forEach(t),uso=r(d$," (XLNet model)"),d$.forEach(t),_so=i(S),Ss=n(S,"LI",{});var c$=s(Ss);Ote=n(c$,"STRONG",{});var zzr=s(Ote);bso=r(zzr,"yoso"),zzr.forEach(t),vso=r(c$," \u2014 "),HB=n(c$,"A",{href:!0});var Qzr=s(HB);Fso=r(Qzr,"AlbertTokenizer"),Qzr.forEach(t),Tso=r(c$," or "),UB=n(c$,"A",{href:!0});var Wzr=s(UB);Mso=r(Wzr,"AlbertTokenizerFast"),Wzr.forEach(t),Eso=r(c$," (YOSO model)"),c$.forEach(t),S.forEach(t),Cso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),wso=i(Is),Ug=n(Is,"DIV",{class:!0});var Wqe=s(Ug);T(cA.$$.fragment,Wqe),Aso=i(Wqe),Vte=n(Wqe,"P",{});var Hzr=s(Vte);yso=r(Hzr,"Register a new tokenizer in this mapping."),Hzr.forEach(t),Wqe.forEach(t),Is.forEach(t),HPe=i(f),vi=n(f,"H2",{class:!0});var Hqe=s(vi);Jg=n(Hqe,"A",{id:!0,class:!0,href:!0});var Uzr=s(Jg);Xte=n(Uzr,"SPAN",{});var Jzr=s(Xte);T(fA.$$.fragment,Jzr),Jzr.forEach(t),Uzr.forEach(t),Lso=i(Hqe),zte=n(Hqe,"SPAN",{});var Yzr=s(zte);xso=r(Yzr,"AutoFeatureExtractor"),Yzr.forEach(t),Hqe.forEach(t),UPe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(mA.$$.fragment,Ns),$so=i(Ns),gA=n(Ns,"P",{});var Uqe=s(gA);kso=r(Uqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JB=n(Uqe,"A",{href:!0});var Kzr=s(JB);Sso=r(Kzr,"AutoFeatureExtractor.from_pretrained()"),Kzr.forEach(t),Rso=r(Uqe," class method."),Uqe.forEach(t),Bso=i(Ns),hA=n(Ns,"P",{});var Jqe=s(hA);Pso=r(Jqe,"This class cannot be instantiated directly using "),Qte=n(Jqe,"CODE",{});var Zzr=s(Qte);Iso=r(Zzr,"__init__()"),Zzr.forEach(t),qso=r(Jqe," (throws an error)."),Jqe.forEach(t),Nso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(pA.$$.fragment,Yt),jso=i(Yt),Wte=n(Yt,"P",{});var eQr=s(Wte);Dso=r(eQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eQr.forEach(t),Gso=i(Yt),wa=n(Yt,"P",{});var KC=s(wa);Oso=r(KC,"The feature extractor class to instantiate is selected based on the "),Hte=n(KC,"CODE",{});var oQr=s(Hte);Vso=r(oQr,"model_type"),oQr.forEach(t),Xso=r(KC,` property of the config object
(either passed as an argument or loaded from `),Ute=n(KC,"CODE",{});var rQr=s(Ute);zso=r(rQr,"pretrained_model_name_or_path"),rQr.forEach(t),Qso=r(KC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=n(KC,"CODE",{});var tQr=s(Jte);Wso=r(tQr,"pretrained_model_name_or_path"),tQr.forEach(t),Hso=r(KC,":"),KC.forEach(t),Uso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var eCe=s(Yg);Yte=n(eCe,"STRONG",{});var aQr=s(Yte);Jso=r(aQr,"beit"),aQr.forEach(t),Yso=r(eCe," \u2014 "),YB=n(eCe,"A",{href:!0});var nQr=s(YB);Kso=r(nQr,"BeitFeatureExtractor"),nQr.forEach(t),Zso=r(eCe," (BEiT model)"),eCe.forEach(t),elo=i(ae),Kg=n(ae,"LI",{});var oCe=s(Kg);Kte=n(oCe,"STRONG",{});var sQr=s(Kte);olo=r(sQr,"clip"),sQr.forEach(t),rlo=r(oCe," \u2014 "),KB=n(oCe,"A",{href:!0});var lQr=s(KB);tlo=r(lQr,"CLIPFeatureExtractor"),lQr.forEach(t),alo=r(oCe," (CLIP model)"),oCe.forEach(t),nlo=i(ae),Zg=n(ae,"LI",{});var rCe=s(Zg);Zte=n(rCe,"STRONG",{});var iQr=s(Zte);slo=r(iQr,"convnext"),iQr.forEach(t),llo=r(rCe," \u2014 "),ZB=n(rCe,"A",{href:!0});var dQr=s(ZB);ilo=r(dQr,"ConvNextFeatureExtractor"),dQr.forEach(t),dlo=r(rCe," (ConvNext model)"),rCe.forEach(t),clo=i(ae),eh=n(ae,"LI",{});var tCe=s(eh);eae=n(tCe,"STRONG",{});var cQr=s(eae);flo=r(cQr,"data2vec-audio"),cQr.forEach(t),mlo=r(tCe," \u2014 "),eP=n(tCe,"A",{href:!0});var fQr=s(eP);glo=r(fQr,"Wav2Vec2FeatureExtractor"),fQr.forEach(t),hlo=r(tCe," (Data2VecAudio model)"),tCe.forEach(t),plo=i(ae),oh=n(ae,"LI",{});var aCe=s(oh);oae=n(aCe,"STRONG",{});var mQr=s(oae);ulo=r(mQr,"data2vec-vision"),mQr.forEach(t),_lo=r(aCe," \u2014 "),oP=n(aCe,"A",{href:!0});var gQr=s(oP);blo=r(gQr,"BeitFeatureExtractor"),gQr.forEach(t),vlo=r(aCe," (Data2VecVision model)"),aCe.forEach(t),Flo=i(ae),rh=n(ae,"LI",{});var nCe=s(rh);rae=n(nCe,"STRONG",{});var hQr=s(rae);Tlo=r(hQr,"deit"),hQr.forEach(t),Mlo=r(nCe," \u2014 "),rP=n(nCe,"A",{href:!0});var pQr=s(rP);Elo=r(pQr,"DeiTFeatureExtractor"),pQr.forEach(t),Clo=r(nCe," (DeiT model)"),nCe.forEach(t),wlo=i(ae),th=n(ae,"LI",{});var sCe=s(th);tae=n(sCe,"STRONG",{});var uQr=s(tae);Alo=r(uQr,"detr"),uQr.forEach(t),ylo=r(sCe," \u2014 "),tP=n(sCe,"A",{href:!0});var _Qr=s(tP);Llo=r(_Qr,"DetrFeatureExtractor"),_Qr.forEach(t),xlo=r(sCe," (DETR model)"),sCe.forEach(t),$lo=i(ae),ah=n(ae,"LI",{});var lCe=s(ah);aae=n(lCe,"STRONG",{});var bQr=s(aae);klo=r(bQr,"dpt"),bQr.forEach(t),Slo=r(lCe," \u2014 "),aP=n(lCe,"A",{href:!0});var vQr=s(aP);Rlo=r(vQr,"DPTFeatureExtractor"),vQr.forEach(t),Blo=r(lCe," (DPT model)"),lCe.forEach(t),Plo=i(ae),nh=n(ae,"LI",{});var iCe=s(nh);nae=n(iCe,"STRONG",{});var FQr=s(nae);Ilo=r(FQr,"flava"),FQr.forEach(t),qlo=r(iCe," \u2014 "),nP=n(iCe,"A",{href:!0});var TQr=s(nP);Nlo=r(TQr,"FlavaFeatureExtractor"),TQr.forEach(t),jlo=r(iCe," (Flava model)"),iCe.forEach(t),Dlo=i(ae),sh=n(ae,"LI",{});var dCe=s(sh);sae=n(dCe,"STRONG",{});var MQr=s(sae);Glo=r(MQr,"glpn"),MQr.forEach(t),Olo=r(dCe," \u2014 "),sP=n(dCe,"A",{href:!0});var EQr=s(sP);Vlo=r(EQr,"GLPNFeatureExtractor"),EQr.forEach(t),Xlo=r(dCe," (GLPN model)"),dCe.forEach(t),zlo=i(ae),lh=n(ae,"LI",{});var cCe=s(lh);lae=n(cCe,"STRONG",{});var CQr=s(lae);Qlo=r(CQr,"hubert"),CQr.forEach(t),Wlo=r(cCe," \u2014 "),lP=n(cCe,"A",{href:!0});var wQr=s(lP);Hlo=r(wQr,"Wav2Vec2FeatureExtractor"),wQr.forEach(t),Ulo=r(cCe," (Hubert model)"),cCe.forEach(t),Jlo=i(ae),ih=n(ae,"LI",{});var fCe=s(ih);iae=n(fCe,"STRONG",{});var AQr=s(iae);Ylo=r(AQr,"layoutlmv2"),AQr.forEach(t),Klo=r(fCe," \u2014 "),iP=n(fCe,"A",{href:!0});var yQr=s(iP);Zlo=r(yQr,"LayoutLMv2FeatureExtractor"),yQr.forEach(t),eio=r(fCe," (LayoutLMv2 model)"),fCe.forEach(t),oio=i(ae),dh=n(ae,"LI",{});var mCe=s(dh);dae=n(mCe,"STRONG",{});var LQr=s(dae);rio=r(LQr,"maskformer"),LQr.forEach(t),tio=r(mCe," \u2014 "),dP=n(mCe,"A",{href:!0});var xQr=s(dP);aio=r(xQr,"MaskFormerFeatureExtractor"),xQr.forEach(t),nio=r(mCe," (MaskFormer model)"),mCe.forEach(t),sio=i(ae),ch=n(ae,"LI",{});var gCe=s(ch);cae=n(gCe,"STRONG",{});var $Qr=s(cae);lio=r($Qr,"perceiver"),$Qr.forEach(t),iio=r(gCe," \u2014 "),cP=n(gCe,"A",{href:!0});var kQr=s(cP);dio=r(kQr,"PerceiverFeatureExtractor"),kQr.forEach(t),cio=r(gCe," (Perceiver model)"),gCe.forEach(t),fio=i(ae),fh=n(ae,"LI",{});var hCe=s(fh);fae=n(hCe,"STRONG",{});var SQr=s(fae);mio=r(SQr,"poolformer"),SQr.forEach(t),gio=r(hCe," \u2014 "),fP=n(hCe,"A",{href:!0});var RQr=s(fP);hio=r(RQr,"PoolFormerFeatureExtractor"),RQr.forEach(t),pio=r(hCe," (PoolFormer model)"),hCe.forEach(t),uio=i(ae),mh=n(ae,"LI",{});var pCe=s(mh);mae=n(pCe,"STRONG",{});var BQr=s(mae);_io=r(BQr,"regnet"),BQr.forEach(t),bio=r(pCe," \u2014 "),mP=n(pCe,"A",{href:!0});var PQr=s(mP);vio=r(PQr,"ConvNextFeatureExtractor"),PQr.forEach(t),Fio=r(pCe," (RegNet model)"),pCe.forEach(t),Tio=i(ae),gh=n(ae,"LI",{});var uCe=s(gh);gae=n(uCe,"STRONG",{});var IQr=s(gae);Mio=r(IQr,"resnet"),IQr.forEach(t),Eio=r(uCe," \u2014 "),gP=n(uCe,"A",{href:!0});var qQr=s(gP);Cio=r(qQr,"ConvNextFeatureExtractor"),qQr.forEach(t),wio=r(uCe," (ResNet model)"),uCe.forEach(t),Aio=i(ae),hh=n(ae,"LI",{});var _Ce=s(hh);hae=n(_Ce,"STRONG",{});var NQr=s(hae);yio=r(NQr,"segformer"),NQr.forEach(t),Lio=r(_Ce," \u2014 "),hP=n(_Ce,"A",{href:!0});var jQr=s(hP);xio=r(jQr,"SegformerFeatureExtractor"),jQr.forEach(t),$io=r(_Ce," (SegFormer model)"),_Ce.forEach(t),kio=i(ae),ph=n(ae,"LI",{});var bCe=s(ph);pae=n(bCe,"STRONG",{});var DQr=s(pae);Sio=r(DQr,"speech_to_text"),DQr.forEach(t),Rio=r(bCe," \u2014 "),pP=n(bCe,"A",{href:!0});var GQr=s(pP);Bio=r(GQr,"Speech2TextFeatureExtractor"),GQr.forEach(t),Pio=r(bCe," (Speech2Text model)"),bCe.forEach(t),Iio=i(ae),uh=n(ae,"LI",{});var vCe=s(uh);uae=n(vCe,"STRONG",{});var OQr=s(uae);qio=r(OQr,"swin"),OQr.forEach(t),Nio=r(vCe," \u2014 "),uP=n(vCe,"A",{href:!0});var VQr=s(uP);jio=r(VQr,"ViTFeatureExtractor"),VQr.forEach(t),Dio=r(vCe," (Swin model)"),vCe.forEach(t),Gio=i(ae),_h=n(ae,"LI",{});var FCe=s(_h);_ae=n(FCe,"STRONG",{});var XQr=s(_ae);Oio=r(XQr,"van"),XQr.forEach(t),Vio=r(FCe," \u2014 "),_P=n(FCe,"A",{href:!0});var zQr=s(_P);Xio=r(zQr,"ConvNextFeatureExtractor"),zQr.forEach(t),zio=r(FCe," (VAN model)"),FCe.forEach(t),Qio=i(ae),bh=n(ae,"LI",{});var TCe=s(bh);bae=n(TCe,"STRONG",{});var QQr=s(bae);Wio=r(QQr,"vit"),QQr.forEach(t),Hio=r(TCe," \u2014 "),bP=n(TCe,"A",{href:!0});var WQr=s(bP);Uio=r(WQr,"ViTFeatureExtractor"),WQr.forEach(t),Jio=r(TCe," (ViT model)"),TCe.forEach(t),Yio=i(ae),vh=n(ae,"LI",{});var MCe=s(vh);vae=n(MCe,"STRONG",{});var HQr=s(vae);Kio=r(HQr,"vit_mae"),HQr.forEach(t),Zio=r(MCe," \u2014 "),vP=n(MCe,"A",{href:!0});var UQr=s(vP);edo=r(UQr,"ViTFeatureExtractor"),UQr.forEach(t),odo=r(MCe," (ViTMAE model)"),MCe.forEach(t),rdo=i(ae),Fh=n(ae,"LI",{});var ECe=s(Fh);Fae=n(ECe,"STRONG",{});var JQr=s(Fae);tdo=r(JQr,"wav2vec2"),JQr.forEach(t),ado=r(ECe," \u2014 "),FP=n(ECe,"A",{href:!0});var YQr=s(FP);ndo=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),sdo=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),ldo=i(ae),Th=n(ae,"LI",{});var CCe=s(Th);Tae=n(CCe,"STRONG",{});var KQr=s(Tae);ido=r(KQr,"yolos"),KQr.forEach(t),ddo=r(CCe," \u2014 "),TP=n(CCe,"A",{href:!0});var ZQr=s(TP);cdo=r(ZQr,"YolosFeatureExtractor"),ZQr.forEach(t),fdo=r(CCe," (YOLOS model)"),CCe.forEach(t),ae.forEach(t),mdo=i(Yt),T(Mh.$$.fragment,Yt),gdo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),hdo=i(Ns),Ch=n(Ns,"DIV",{class:!0});var Yqe=s(Ch);T(uA.$$.fragment,Yqe),pdo=i(Yqe),Mae=n(Yqe,"P",{});var eWr=s(Mae);udo=r(eWr,"Register a new feature extractor for this class."),eWr.forEach(t),Yqe.forEach(t),Ns.forEach(t),JPe=i(f),Fi=n(f,"H2",{class:!0});var Kqe=s(Fi);wh=n(Kqe,"A",{id:!0,class:!0,href:!0});var oWr=s(wh);Eae=n(oWr,"SPAN",{});var rWr=s(Eae);T(_A.$$.fragment,rWr),rWr.forEach(t),oWr.forEach(t),_do=i(Kqe),Cae=n(Kqe,"SPAN",{});var tWr=s(Cae);bdo=r(tWr,"AutoProcessor"),tWr.forEach(t),Kqe.forEach(t),YPe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(bA.$$.fragment,js),vdo=i(js),vA=n(js,"P",{});var Zqe=s(vA);Fdo=r(Zqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MP=n(Zqe,"A",{href:!0});var aWr=s(MP);Tdo=r(aWr,"AutoProcessor.from_pretrained()"),aWr.forEach(t),Mdo=r(Zqe," class method."),Zqe.forEach(t),Edo=i(js),FA=n(js,"P",{});var eNe=s(FA);Cdo=r(eNe,"This class cannot be instantiated directly using "),wae=n(eNe,"CODE",{});var nWr=s(wae);wdo=r(nWr,"__init__()"),nWr.forEach(t),Ado=r(eNe," (throws an error)."),eNe.forEach(t),ydo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(TA.$$.fragment,Kt),Ldo=i(Kt),Aae=n(Kt,"P",{});var sWr=s(Aae);xdo=r(sWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sWr.forEach(t),$do=i(Kt),Ti=n(Kt,"P",{});var sK=s(Ti);kdo=r(sK,"The processor class to instantiate is selected based on the "),yae=n(sK,"CODE",{});var lWr=s(yae);Sdo=r(lWr,"model_type"),lWr.forEach(t),Rdo=r(sK,` property of the config object (either
passed as an argument or loaded from `),Lae=n(sK,"CODE",{});var iWr=s(Lae);Bdo=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),Pdo=r(sK," if possible):"),sK.forEach(t),Ido=i(Kt),_e=n(Kt,"UL",{});var ve=s(_e);Ah=n(ve,"LI",{});var wCe=s(Ah);xae=n(wCe,"STRONG",{});var dWr=s(xae);qdo=r(dWr,"clip"),dWr.forEach(t),Ndo=r(wCe," \u2014 "),EP=n(wCe,"A",{href:!0});var cWr=s(EP);jdo=r(cWr,"CLIPProcessor"),cWr.forEach(t),Ddo=r(wCe," (CLIP model)"),wCe.forEach(t),Gdo=i(ve),yh=n(ve,"LI",{});var ACe=s(yh);$ae=n(ACe,"STRONG",{});var fWr=s($ae);Odo=r(fWr,"flava"),fWr.forEach(t),Vdo=r(ACe," \u2014 "),kae=n(ACe,"CODE",{});var mWr=s(kae);Xdo=r(mWr,"FLAVAProcessor"),mWr.forEach(t),zdo=r(ACe," (Flava model)"),ACe.forEach(t),Qdo=i(ve),Lh=n(ve,"LI",{});var yCe=s(Lh);Sae=n(yCe,"STRONG",{});var gWr=s(Sae);Wdo=r(gWr,"layoutlmv2"),gWr.forEach(t),Hdo=r(yCe," \u2014 "),CP=n(yCe,"A",{href:!0});var hWr=s(CP);Udo=r(hWr,"LayoutLMv2Processor"),hWr.forEach(t),Jdo=r(yCe," (LayoutLMv2 model)"),yCe.forEach(t),Ydo=i(ve),xh=n(ve,"LI",{});var LCe=s(xh);Rae=n(LCe,"STRONG",{});var pWr=s(Rae);Kdo=r(pWr,"layoutxlm"),pWr.forEach(t),Zdo=r(LCe," \u2014 "),wP=n(LCe,"A",{href:!0});var uWr=s(wP);eco=r(uWr,"LayoutXLMProcessor"),uWr.forEach(t),oco=r(LCe," (LayoutXLM model)"),LCe.forEach(t),rco=i(ve),$h=n(ve,"LI",{});var xCe=s($h);Bae=n(xCe,"STRONG",{});var _Wr=s(Bae);tco=r(_Wr,"sew"),_Wr.forEach(t),aco=r(xCe," \u2014 "),AP=n(xCe,"A",{href:!0});var bWr=s(AP);nco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),sco=r(xCe," (SEW model)"),xCe.forEach(t),lco=i(ve),kh=n(ve,"LI",{});var $Ce=s(kh);Pae=n($Ce,"STRONG",{});var vWr=s(Pae);ico=r(vWr,"sew-d"),vWr.forEach(t),dco=r($Ce," \u2014 "),yP=n($Ce,"A",{href:!0});var FWr=s(yP);cco=r(FWr,"Wav2Vec2Processor"),FWr.forEach(t),fco=r($Ce," (SEW-D model)"),$Ce.forEach(t),mco=i(ve),Sh=n(ve,"LI",{});var kCe=s(Sh);Iae=n(kCe,"STRONG",{});var TWr=s(Iae);gco=r(TWr,"speech_to_text"),TWr.forEach(t),hco=r(kCe," \u2014 "),LP=n(kCe,"A",{href:!0});var MWr=s(LP);pco=r(MWr,"Speech2TextProcessor"),MWr.forEach(t),uco=r(kCe," (Speech2Text model)"),kCe.forEach(t),_co=i(ve),Rh=n(ve,"LI",{});var SCe=s(Rh);qae=n(SCe,"STRONG",{});var EWr=s(qae);bco=r(EWr,"speech_to_text_2"),EWr.forEach(t),vco=r(SCe," \u2014 "),xP=n(SCe,"A",{href:!0});var CWr=s(xP);Fco=r(CWr,"Speech2Text2Processor"),CWr.forEach(t),Tco=r(SCe," (Speech2Text2 model)"),SCe.forEach(t),Mco=i(ve),Bh=n(ve,"LI",{});var RCe=s(Bh);Nae=n(RCe,"STRONG",{});var wWr=s(Nae);Eco=r(wWr,"trocr"),wWr.forEach(t),Cco=r(RCe," \u2014 "),$P=n(RCe,"A",{href:!0});var AWr=s($P);wco=r(AWr,"TrOCRProcessor"),AWr.forEach(t),Aco=r(RCe," (TrOCR model)"),RCe.forEach(t),yco=i(ve),Ph=n(ve,"LI",{});var BCe=s(Ph);jae=n(BCe,"STRONG",{});var yWr=s(jae);Lco=r(yWr,"unispeech"),yWr.forEach(t),xco=r(BCe," \u2014 "),kP=n(BCe,"A",{href:!0});var LWr=s(kP);$co=r(LWr,"Wav2Vec2Processor"),LWr.forEach(t),kco=r(BCe," (UniSpeech model)"),BCe.forEach(t),Sco=i(ve),Ih=n(ve,"LI",{});var PCe=s(Ih);Dae=n(PCe,"STRONG",{});var xWr=s(Dae);Rco=r(xWr,"unispeech-sat"),xWr.forEach(t),Bco=r(PCe," \u2014 "),SP=n(PCe,"A",{href:!0});var $Wr=s(SP);Pco=r($Wr,"Wav2Vec2Processor"),$Wr.forEach(t),Ico=r(PCe," (UniSpeechSat model)"),PCe.forEach(t),qco=i(ve),qh=n(ve,"LI",{});var ICe=s(qh);Gae=n(ICe,"STRONG",{});var kWr=s(Gae);Nco=r(kWr,"vilt"),kWr.forEach(t),jco=r(ICe," \u2014 "),RP=n(ICe,"A",{href:!0});var SWr=s(RP);Dco=r(SWr,"ViltProcessor"),SWr.forEach(t),Gco=r(ICe," (ViLT model)"),ICe.forEach(t),Oco=i(ve),Nh=n(ve,"LI",{});var qCe=s(Nh);Oae=n(qCe,"STRONG",{});var RWr=s(Oae);Vco=r(RWr,"vision-text-dual-encoder"),RWr.forEach(t),Xco=r(qCe," \u2014 "),BP=n(qCe,"A",{href:!0});var BWr=s(BP);zco=r(BWr,"VisionTextDualEncoderProcessor"),BWr.forEach(t),Qco=r(qCe," (VisionTextDualEncoder model)"),qCe.forEach(t),Wco=i(ve),jh=n(ve,"LI",{});var NCe=s(jh);Vae=n(NCe,"STRONG",{});var PWr=s(Vae);Hco=r(PWr,"wav2vec2"),PWr.forEach(t),Uco=r(NCe," \u2014 "),PP=n(NCe,"A",{href:!0});var IWr=s(PP);Jco=r(IWr,"Wav2Vec2Processor"),IWr.forEach(t),Yco=r(NCe," (Wav2Vec2 model)"),NCe.forEach(t),Kco=i(ve),Dh=n(ve,"LI",{});var jCe=s(Dh);Xae=n(jCe,"STRONG",{});var qWr=s(Xae);Zco=r(qWr,"wavlm"),qWr.forEach(t),efo=r(jCe," \u2014 "),IP=n(jCe,"A",{href:!0});var NWr=s(IP);ofo=r(NWr,"Wav2Vec2Processor"),NWr.forEach(t),rfo=r(jCe," (WavLM model)"),jCe.forEach(t),ve.forEach(t),tfo=i(Kt),T(Gh.$$.fragment,Kt),afo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),nfo=i(js),Vh=n(js,"DIV",{class:!0});var oNe=s(Vh);T(MA.$$.fragment,oNe),sfo=i(oNe),zae=n(oNe,"P",{});var jWr=s(zae);lfo=r(jWr,"Register a new processor for this class."),jWr.forEach(t),oNe.forEach(t),js.forEach(t),KPe=i(f),Mi=n(f,"H2",{class:!0});var rNe=s(Mi);Xh=n(rNe,"A",{id:!0,class:!0,href:!0});var DWr=s(Xh);Qae=n(DWr,"SPAN",{});var GWr=s(Qae);T(EA.$$.fragment,GWr),GWr.forEach(t),DWr.forEach(t),ifo=i(rNe),Wae=n(rNe,"SPAN",{});var OWr=s(Wae);dfo=r(OWr,"AutoModel"),OWr.forEach(t),rNe.forEach(t),ZPe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(CA.$$.fragment,Ds),cfo=i(Ds),Ei=n(Ds,"P",{});var lK=s(Ei);ffo=r(lK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qP=n(lK,"A",{href:!0});var VWr=s(qP);mfo=r(VWr,"from_pretrained()"),VWr.forEach(t),gfo=r(lK," class method or the "),NP=n(lK,"A",{href:!0});var XWr=s(NP);hfo=r(XWr,"from_config()"),XWr.forEach(t),pfo=r(lK,` class
method.`),lK.forEach(t),ufo=i(Ds),wA=n(Ds,"P",{});var tNe=s(wA);_fo=r(tNe,"This class cannot be instantiated directly using "),Hae=n(tNe,"CODE",{});var zWr=s(Hae);bfo=r(zWr,"__init__()"),zWr.forEach(t),vfo=r(tNe," (throws an error)."),tNe.forEach(t),Ffo=i(Ds),ot=n(Ds,"DIV",{class:!0});var ZC=s(ot);T(AA.$$.fragment,ZC),Tfo=i(ZC),Uae=n(ZC,"P",{});var QWr=s(Uae);Mfo=r(QWr,"Instantiates one of the base model classes of the library from a configuration."),QWr.forEach(t),Efo=i(ZC),Ci=n(ZC,"P",{});var iK=s(Ci);Cfo=r(iK,`Note:
Loading a model from its configuration file does `),Jae=n(iK,"STRONG",{});var WWr=s(Jae);wfo=r(WWr,"not"),WWr.forEach(t),Afo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=n(iK,"A",{href:!0});var HWr=s(jP);yfo=r(HWr,"from_pretrained()"),HWr.forEach(t),Lfo=r(iK," to load the model weights."),iK.forEach(t),xfo=i(ZC),T(zh.$$.fragment,ZC),ZC.forEach(t),$fo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(yA.$$.fragment,Zt),kfo=i(Zt),Yae=n(Zt,"P",{});var UWr=s(Yae);Sfo=r(UWr,"Instantiate one of the base model classes of the library from a pretrained model."),UWr.forEach(t),Rfo=i(Zt),Aa=n(Zt,"P",{});var e3=s(Aa);Bfo=r(e3,"The model class to instantiate is selected based on the "),Kae=n(e3,"CODE",{});var JWr=s(Kae);Pfo=r(JWr,"model_type"),JWr.forEach(t),Ifo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Zae=n(e3,"CODE",{});var YWr=s(Zae);qfo=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),Nfo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(e3,"CODE",{});var KWr=s(ene);jfo=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),Dfo=r(e3,":"),e3.forEach(t),Gfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var DCe=s(Qh);one=n(DCe,"STRONG",{});var ZWr=s(one);Ofo=r(ZWr,"albert"),ZWr.forEach(t),Vfo=r(DCe," \u2014 "),DP=n(DCe,"A",{href:!0});var eHr=s(DP);Xfo=r(eHr,"AlbertModel"),eHr.forEach(t),zfo=r(DCe," (ALBERT model)"),DCe.forEach(t),Qfo=i($),Wh=n($,"LI",{});var GCe=s(Wh);rne=n(GCe,"STRONG",{});var oHr=s(rne);Wfo=r(oHr,"bart"),oHr.forEach(t),Hfo=r(GCe," \u2014 "),GP=n(GCe,"A",{href:!0});var rHr=s(GP);Ufo=r(rHr,"BartModel"),rHr.forEach(t),Jfo=r(GCe," (BART model)"),GCe.forEach(t),Yfo=i($),Hh=n($,"LI",{});var OCe=s(Hh);tne=n(OCe,"STRONG",{});var tHr=s(tne);Kfo=r(tHr,"beit"),tHr.forEach(t),Zfo=r(OCe," \u2014 "),OP=n(OCe,"A",{href:!0});var aHr=s(OP);emo=r(aHr,"BeitModel"),aHr.forEach(t),omo=r(OCe," (BEiT model)"),OCe.forEach(t),rmo=i($),Uh=n($,"LI",{});var VCe=s(Uh);ane=n(VCe,"STRONG",{});var nHr=s(ane);tmo=r(nHr,"bert"),nHr.forEach(t),amo=r(VCe," \u2014 "),VP=n(VCe,"A",{href:!0});var sHr=s(VP);nmo=r(sHr,"BertModel"),sHr.forEach(t),smo=r(VCe," (BERT model)"),VCe.forEach(t),lmo=i($),Jh=n($,"LI",{});var XCe=s(Jh);nne=n(XCe,"STRONG",{});var lHr=s(nne);imo=r(lHr,"bert-generation"),lHr.forEach(t),dmo=r(XCe," \u2014 "),XP=n(XCe,"A",{href:!0});var iHr=s(XP);cmo=r(iHr,"BertGenerationEncoder"),iHr.forEach(t),fmo=r(XCe," (Bert Generation model)"),XCe.forEach(t),mmo=i($),Yh=n($,"LI",{});var zCe=s(Yh);sne=n(zCe,"STRONG",{});var dHr=s(sne);gmo=r(dHr,"big_bird"),dHr.forEach(t),hmo=r(zCe," \u2014 "),zP=n(zCe,"A",{href:!0});var cHr=s(zP);pmo=r(cHr,"BigBirdModel"),cHr.forEach(t),umo=r(zCe," (BigBird model)"),zCe.forEach(t),_mo=i($),Kh=n($,"LI",{});var QCe=s(Kh);lne=n(QCe,"STRONG",{});var fHr=s(lne);bmo=r(fHr,"bigbird_pegasus"),fHr.forEach(t),vmo=r(QCe," \u2014 "),QP=n(QCe,"A",{href:!0});var mHr=s(QP);Fmo=r(mHr,"BigBirdPegasusModel"),mHr.forEach(t),Tmo=r(QCe," (BigBirdPegasus model)"),QCe.forEach(t),Mmo=i($),Zh=n($,"LI",{});var WCe=s(Zh);ine=n(WCe,"STRONG",{});var gHr=s(ine);Emo=r(gHr,"blenderbot"),gHr.forEach(t),Cmo=r(WCe," \u2014 "),WP=n(WCe,"A",{href:!0});var hHr=s(WP);wmo=r(hHr,"BlenderbotModel"),hHr.forEach(t),Amo=r(WCe," (Blenderbot model)"),WCe.forEach(t),ymo=i($),ep=n($,"LI",{});var HCe=s(ep);dne=n(HCe,"STRONG",{});var pHr=s(dne);Lmo=r(pHr,"blenderbot-small"),pHr.forEach(t),xmo=r(HCe," \u2014 "),HP=n(HCe,"A",{href:!0});var uHr=s(HP);$mo=r(uHr,"BlenderbotSmallModel"),uHr.forEach(t),kmo=r(HCe," (BlenderbotSmall model)"),HCe.forEach(t),Smo=i($),op=n($,"LI",{});var UCe=s(op);cne=n(UCe,"STRONG",{});var _Hr=s(cne);Rmo=r(_Hr,"camembert"),_Hr.forEach(t),Bmo=r(UCe," \u2014 "),UP=n(UCe,"A",{href:!0});var bHr=s(UP);Pmo=r(bHr,"CamembertModel"),bHr.forEach(t),Imo=r(UCe," (CamemBERT model)"),UCe.forEach(t),qmo=i($),rp=n($,"LI",{});var JCe=s(rp);fne=n(JCe,"STRONG",{});var vHr=s(fne);Nmo=r(vHr,"canine"),vHr.forEach(t),jmo=r(JCe," \u2014 "),JP=n(JCe,"A",{href:!0});var FHr=s(JP);Dmo=r(FHr,"CanineModel"),FHr.forEach(t),Gmo=r(JCe," (Canine model)"),JCe.forEach(t),Omo=i($),tp=n($,"LI",{});var YCe=s(tp);mne=n(YCe,"STRONG",{});var THr=s(mne);Vmo=r(THr,"clip"),THr.forEach(t),Xmo=r(YCe," \u2014 "),YP=n(YCe,"A",{href:!0});var MHr=s(YP);zmo=r(MHr,"CLIPModel"),MHr.forEach(t),Qmo=r(YCe," (CLIP model)"),YCe.forEach(t),Wmo=i($),ap=n($,"LI",{});var KCe=s(ap);gne=n(KCe,"STRONG",{});var EHr=s(gne);Hmo=r(EHr,"convbert"),EHr.forEach(t),Umo=r(KCe," \u2014 "),KP=n(KCe,"A",{href:!0});var CHr=s(KP);Jmo=r(CHr,"ConvBertModel"),CHr.forEach(t),Ymo=r(KCe," (ConvBERT model)"),KCe.forEach(t),Kmo=i($),np=n($,"LI",{});var ZCe=s(np);hne=n(ZCe,"STRONG",{});var wHr=s(hne);Zmo=r(wHr,"convnext"),wHr.forEach(t),ego=r(ZCe," \u2014 "),ZP=n(ZCe,"A",{href:!0});var AHr=s(ZP);ogo=r(AHr,"ConvNextModel"),AHr.forEach(t),rgo=r(ZCe," (ConvNext model)"),ZCe.forEach(t),tgo=i($),sp=n($,"LI",{});var e3e=s(sp);pne=n(e3e,"STRONG",{});var yHr=s(pne);ago=r(yHr,"ctrl"),yHr.forEach(t),ngo=r(e3e," \u2014 "),eI=n(e3e,"A",{href:!0});var LHr=s(eI);sgo=r(LHr,"CTRLModel"),LHr.forEach(t),lgo=r(e3e," (CTRL model)"),e3e.forEach(t),igo=i($),lp=n($,"LI",{});var o3e=s(lp);une=n(o3e,"STRONG",{});var xHr=s(une);dgo=r(xHr,"data2vec-audio"),xHr.forEach(t),cgo=r(o3e," \u2014 "),oI=n(o3e,"A",{href:!0});var $Hr=s(oI);fgo=r($Hr,"Data2VecAudioModel"),$Hr.forEach(t),mgo=r(o3e," (Data2VecAudio model)"),o3e.forEach(t),ggo=i($),ip=n($,"LI",{});var r3e=s(ip);_ne=n(r3e,"STRONG",{});var kHr=s(_ne);hgo=r(kHr,"data2vec-text"),kHr.forEach(t),pgo=r(r3e," \u2014 "),rI=n(r3e,"A",{href:!0});var SHr=s(rI);ugo=r(SHr,"Data2VecTextModel"),SHr.forEach(t),_go=r(r3e," (Data2VecText model)"),r3e.forEach(t),bgo=i($),dp=n($,"LI",{});var t3e=s(dp);bne=n(t3e,"STRONG",{});var RHr=s(bne);vgo=r(RHr,"data2vec-vision"),RHr.forEach(t),Fgo=r(t3e," \u2014 "),tI=n(t3e,"A",{href:!0});var BHr=s(tI);Tgo=r(BHr,"Data2VecVisionModel"),BHr.forEach(t),Mgo=r(t3e," (Data2VecVision model)"),t3e.forEach(t),Ego=i($),cp=n($,"LI",{});var a3e=s(cp);vne=n(a3e,"STRONG",{});var PHr=s(vne);Cgo=r(PHr,"deberta"),PHr.forEach(t),wgo=r(a3e," \u2014 "),aI=n(a3e,"A",{href:!0});var IHr=s(aI);Ago=r(IHr,"DebertaModel"),IHr.forEach(t),ygo=r(a3e," (DeBERTa model)"),a3e.forEach(t),Lgo=i($),fp=n($,"LI",{});var n3e=s(fp);Fne=n(n3e,"STRONG",{});var qHr=s(Fne);xgo=r(qHr,"deberta-v2"),qHr.forEach(t),$go=r(n3e," \u2014 "),nI=n(n3e,"A",{href:!0});var NHr=s(nI);kgo=r(NHr,"DebertaV2Model"),NHr.forEach(t),Sgo=r(n3e," (DeBERTa-v2 model)"),n3e.forEach(t),Rgo=i($),mp=n($,"LI",{});var s3e=s(mp);Tne=n(s3e,"STRONG",{});var jHr=s(Tne);Bgo=r(jHr,"decision_transformer"),jHr.forEach(t),Pgo=r(s3e," \u2014 "),sI=n(s3e,"A",{href:!0});var DHr=s(sI);Igo=r(DHr,"DecisionTransformerModel"),DHr.forEach(t),qgo=r(s3e," (Decision Transformer model)"),s3e.forEach(t),Ngo=i($),gp=n($,"LI",{});var l3e=s(gp);Mne=n(l3e,"STRONG",{});var GHr=s(Mne);jgo=r(GHr,"deit"),GHr.forEach(t),Dgo=r(l3e," \u2014 "),lI=n(l3e,"A",{href:!0});var OHr=s(lI);Ggo=r(OHr,"DeiTModel"),OHr.forEach(t),Ogo=r(l3e," (DeiT model)"),l3e.forEach(t),Vgo=i($),hp=n($,"LI",{});var i3e=s(hp);Ene=n(i3e,"STRONG",{});var VHr=s(Ene);Xgo=r(VHr,"detr"),VHr.forEach(t),zgo=r(i3e," \u2014 "),iI=n(i3e,"A",{href:!0});var XHr=s(iI);Qgo=r(XHr,"DetrModel"),XHr.forEach(t),Wgo=r(i3e," (DETR model)"),i3e.forEach(t),Hgo=i($),pp=n($,"LI",{});var d3e=s(pp);Cne=n(d3e,"STRONG",{});var zHr=s(Cne);Ugo=r(zHr,"distilbert"),zHr.forEach(t),Jgo=r(d3e," \u2014 "),dI=n(d3e,"A",{href:!0});var QHr=s(dI);Ygo=r(QHr,"DistilBertModel"),QHr.forEach(t),Kgo=r(d3e," (DistilBERT model)"),d3e.forEach(t),Zgo=i($),up=n($,"LI",{});var c3e=s(up);wne=n(c3e,"STRONG",{});var WHr=s(wne);eho=r(WHr,"dpr"),WHr.forEach(t),oho=r(c3e," \u2014 "),cI=n(c3e,"A",{href:!0});var HHr=s(cI);rho=r(HHr,"DPRQuestionEncoder"),HHr.forEach(t),tho=r(c3e," (DPR model)"),c3e.forEach(t),aho=i($),_p=n($,"LI",{});var f3e=s(_p);Ane=n(f3e,"STRONG",{});var UHr=s(Ane);nho=r(UHr,"dpt"),UHr.forEach(t),sho=r(f3e," \u2014 "),fI=n(f3e,"A",{href:!0});var JHr=s(fI);lho=r(JHr,"DPTModel"),JHr.forEach(t),iho=r(f3e," (DPT model)"),f3e.forEach(t),dho=i($),bp=n($,"LI",{});var m3e=s(bp);yne=n(m3e,"STRONG",{});var YHr=s(yne);cho=r(YHr,"electra"),YHr.forEach(t),fho=r(m3e," \u2014 "),mI=n(m3e,"A",{href:!0});var KHr=s(mI);mho=r(KHr,"ElectraModel"),KHr.forEach(t),gho=r(m3e," (ELECTRA model)"),m3e.forEach(t),hho=i($),vp=n($,"LI",{});var g3e=s(vp);Lne=n(g3e,"STRONG",{});var ZHr=s(Lne);pho=r(ZHr,"flaubert"),ZHr.forEach(t),uho=r(g3e," \u2014 "),gI=n(g3e,"A",{href:!0});var eUr=s(gI);_ho=r(eUr,"FlaubertModel"),eUr.forEach(t),bho=r(g3e," (FlauBERT model)"),g3e.forEach(t),vho=i($),Fp=n($,"LI",{});var h3e=s(Fp);xne=n(h3e,"STRONG",{});var oUr=s(xne);Fho=r(oUr,"flava"),oUr.forEach(t),Tho=r(h3e," \u2014 "),hI=n(h3e,"A",{href:!0});var rUr=s(hI);Mho=r(rUr,"FlavaModel"),rUr.forEach(t),Eho=r(h3e," (Flava model)"),h3e.forEach(t),Cho=i($),Tp=n($,"LI",{});var p3e=s(Tp);$ne=n(p3e,"STRONG",{});var tUr=s($ne);who=r(tUr,"fnet"),tUr.forEach(t),Aho=r(p3e," \u2014 "),pI=n(p3e,"A",{href:!0});var aUr=s(pI);yho=r(aUr,"FNetModel"),aUr.forEach(t),Lho=r(p3e," (FNet model)"),p3e.forEach(t),xho=i($),Mp=n($,"LI",{});var u3e=s(Mp);kne=n(u3e,"STRONG",{});var nUr=s(kne);$ho=r(nUr,"fsmt"),nUr.forEach(t),kho=r(u3e," \u2014 "),uI=n(u3e,"A",{href:!0});var sUr=s(uI);Sho=r(sUr,"FSMTModel"),sUr.forEach(t),Rho=r(u3e," (FairSeq Machine-Translation model)"),u3e.forEach(t),Bho=i($),Rs=n($,"LI",{});var f$=s(Rs);Sne=n(f$,"STRONG",{});var lUr=s(Sne);Pho=r(lUr,"funnel"),lUr.forEach(t),Iho=r(f$," \u2014 "),_I=n(f$,"A",{href:!0});var iUr=s(_I);qho=r(iUr,"FunnelModel"),iUr.forEach(t),Nho=r(f$," or "),bI=n(f$,"A",{href:!0});var dUr=s(bI);jho=r(dUr,"FunnelBaseModel"),dUr.forEach(t),Dho=r(f$," (Funnel Transformer model)"),f$.forEach(t),Gho=i($),Ep=n($,"LI",{});var _3e=s(Ep);Rne=n(_3e,"STRONG",{});var cUr=s(Rne);Oho=r(cUr,"glpn"),cUr.forEach(t),Vho=r(_3e," \u2014 "),vI=n(_3e,"A",{href:!0});var fUr=s(vI);Xho=r(fUr,"GLPNModel"),fUr.forEach(t),zho=r(_3e," (GLPN model)"),_3e.forEach(t),Qho=i($),Cp=n($,"LI",{});var b3e=s(Cp);Bne=n(b3e,"STRONG",{});var mUr=s(Bne);Who=r(mUr,"gpt2"),mUr.forEach(t),Hho=r(b3e," \u2014 "),FI=n(b3e,"A",{href:!0});var gUr=s(FI);Uho=r(gUr,"GPT2Model"),gUr.forEach(t),Jho=r(b3e," (OpenAI GPT-2 model)"),b3e.forEach(t),Yho=i($),wp=n($,"LI",{});var v3e=s(wp);Pne=n(v3e,"STRONG",{});var hUr=s(Pne);Kho=r(hUr,"gpt_neo"),hUr.forEach(t),Zho=r(v3e," \u2014 "),TI=n(v3e,"A",{href:!0});var pUr=s(TI);epo=r(pUr,"GPTNeoModel"),pUr.forEach(t),opo=r(v3e," (GPT Neo model)"),v3e.forEach(t),rpo=i($),Ap=n($,"LI",{});var F3e=s(Ap);Ine=n(F3e,"STRONG",{});var uUr=s(Ine);tpo=r(uUr,"gptj"),uUr.forEach(t),apo=r(F3e," \u2014 "),MI=n(F3e,"A",{href:!0});var _Ur=s(MI);npo=r(_Ur,"GPTJModel"),_Ur.forEach(t),spo=r(F3e," (GPT-J model)"),F3e.forEach(t),lpo=i($),yp=n($,"LI",{});var T3e=s(yp);qne=n(T3e,"STRONG",{});var bUr=s(qne);ipo=r(bUr,"hubert"),bUr.forEach(t),dpo=r(T3e," \u2014 "),EI=n(T3e,"A",{href:!0});var vUr=s(EI);cpo=r(vUr,"HubertModel"),vUr.forEach(t),fpo=r(T3e," (Hubert model)"),T3e.forEach(t),mpo=i($),Lp=n($,"LI",{});var M3e=s(Lp);Nne=n(M3e,"STRONG",{});var FUr=s(Nne);gpo=r(FUr,"ibert"),FUr.forEach(t),hpo=r(M3e," \u2014 "),CI=n(M3e,"A",{href:!0});var TUr=s(CI);ppo=r(TUr,"IBertModel"),TUr.forEach(t),upo=r(M3e," (I-BERT model)"),M3e.forEach(t),_po=i($),xp=n($,"LI",{});var E3e=s(xp);jne=n(E3e,"STRONG",{});var MUr=s(jne);bpo=r(MUr,"imagegpt"),MUr.forEach(t),vpo=r(E3e," \u2014 "),wI=n(E3e,"A",{href:!0});var EUr=s(wI);Fpo=r(EUr,"ImageGPTModel"),EUr.forEach(t),Tpo=r(E3e," (ImageGPT model)"),E3e.forEach(t),Mpo=i($),$p=n($,"LI",{});var C3e=s($p);Dne=n(C3e,"STRONG",{});var CUr=s(Dne);Epo=r(CUr,"layoutlm"),CUr.forEach(t),Cpo=r(C3e," \u2014 "),AI=n(C3e,"A",{href:!0});var wUr=s(AI);wpo=r(wUr,"LayoutLMModel"),wUr.forEach(t),Apo=r(C3e," (LayoutLM model)"),C3e.forEach(t),ypo=i($),kp=n($,"LI",{});var w3e=s(kp);Gne=n(w3e,"STRONG",{});var AUr=s(Gne);Lpo=r(AUr,"layoutlmv2"),AUr.forEach(t),xpo=r(w3e," \u2014 "),yI=n(w3e,"A",{href:!0});var yUr=s(yI);$po=r(yUr,"LayoutLMv2Model"),yUr.forEach(t),kpo=r(w3e," (LayoutLMv2 model)"),w3e.forEach(t),Spo=i($),Sp=n($,"LI",{});var A3e=s(Sp);One=n(A3e,"STRONG",{});var LUr=s(One);Rpo=r(LUr,"led"),LUr.forEach(t),Bpo=r(A3e," \u2014 "),LI=n(A3e,"A",{href:!0});var xUr=s(LI);Ppo=r(xUr,"LEDModel"),xUr.forEach(t),Ipo=r(A3e," (LED model)"),A3e.forEach(t),qpo=i($),Rp=n($,"LI",{});var y3e=s(Rp);Vne=n(y3e,"STRONG",{});var $Ur=s(Vne);Npo=r($Ur,"longformer"),$Ur.forEach(t),jpo=r(y3e," \u2014 "),xI=n(y3e,"A",{href:!0});var kUr=s(xI);Dpo=r(kUr,"LongformerModel"),kUr.forEach(t),Gpo=r(y3e," (Longformer model)"),y3e.forEach(t),Opo=i($),Bp=n($,"LI",{});var L3e=s(Bp);Xne=n(L3e,"STRONG",{});var SUr=s(Xne);Vpo=r(SUr,"luke"),SUr.forEach(t),Xpo=r(L3e," \u2014 "),$I=n(L3e,"A",{href:!0});var RUr=s($I);zpo=r(RUr,"LukeModel"),RUr.forEach(t),Qpo=r(L3e," (LUKE model)"),L3e.forEach(t),Wpo=i($),Pp=n($,"LI",{});var x3e=s(Pp);zne=n(x3e,"STRONG",{});var BUr=s(zne);Hpo=r(BUr,"lxmert"),BUr.forEach(t),Upo=r(x3e," \u2014 "),kI=n(x3e,"A",{href:!0});var PUr=s(kI);Jpo=r(PUr,"LxmertModel"),PUr.forEach(t),Ypo=r(x3e," (LXMERT model)"),x3e.forEach(t),Kpo=i($),Ip=n($,"LI",{});var $3e=s(Ip);Qne=n($3e,"STRONG",{});var IUr=s(Qne);Zpo=r(IUr,"m2m_100"),IUr.forEach(t),euo=r($3e," \u2014 "),SI=n($3e,"A",{href:!0});var qUr=s(SI);ouo=r(qUr,"M2M100Model"),qUr.forEach(t),ruo=r($3e," (M2M100 model)"),$3e.forEach(t),tuo=i($),qp=n($,"LI",{});var k3e=s(qp);Wne=n(k3e,"STRONG",{});var NUr=s(Wne);auo=r(NUr,"marian"),NUr.forEach(t),nuo=r(k3e," \u2014 "),RI=n(k3e,"A",{href:!0});var jUr=s(RI);suo=r(jUr,"MarianModel"),jUr.forEach(t),luo=r(k3e," (Marian model)"),k3e.forEach(t),iuo=i($),Np=n($,"LI",{});var S3e=s(Np);Hne=n(S3e,"STRONG",{});var DUr=s(Hne);duo=r(DUr,"maskformer"),DUr.forEach(t),cuo=r(S3e," \u2014 "),BI=n(S3e,"A",{href:!0});var GUr=s(BI);fuo=r(GUr,"MaskFormerModel"),GUr.forEach(t),muo=r(S3e," (MaskFormer model)"),S3e.forEach(t),guo=i($),jp=n($,"LI",{});var R3e=s(jp);Une=n(R3e,"STRONG",{});var OUr=s(Une);huo=r(OUr,"mbart"),OUr.forEach(t),puo=r(R3e," \u2014 "),PI=n(R3e,"A",{href:!0});var VUr=s(PI);uuo=r(VUr,"MBartModel"),VUr.forEach(t),_uo=r(R3e," (mBART model)"),R3e.forEach(t),buo=i($),Dp=n($,"LI",{});var B3e=s(Dp);Jne=n(B3e,"STRONG",{});var XUr=s(Jne);vuo=r(XUr,"megatron-bert"),XUr.forEach(t),Fuo=r(B3e," \u2014 "),II=n(B3e,"A",{href:!0});var zUr=s(II);Tuo=r(zUr,"MegatronBertModel"),zUr.forEach(t),Muo=r(B3e," (MegatronBert model)"),B3e.forEach(t),Euo=i($),Gp=n($,"LI",{});var P3e=s(Gp);Yne=n(P3e,"STRONG",{});var QUr=s(Yne);Cuo=r(QUr,"mobilebert"),QUr.forEach(t),wuo=r(P3e," \u2014 "),qI=n(P3e,"A",{href:!0});var WUr=s(qI);Auo=r(WUr,"MobileBertModel"),WUr.forEach(t),yuo=r(P3e," (MobileBERT model)"),P3e.forEach(t),Luo=i($),Op=n($,"LI",{});var I3e=s(Op);Kne=n(I3e,"STRONG",{});var HUr=s(Kne);xuo=r(HUr,"mpnet"),HUr.forEach(t),$uo=r(I3e," \u2014 "),NI=n(I3e,"A",{href:!0});var UUr=s(NI);kuo=r(UUr,"MPNetModel"),UUr.forEach(t),Suo=r(I3e," (MPNet model)"),I3e.forEach(t),Ruo=i($),Vp=n($,"LI",{});var q3e=s(Vp);Zne=n(q3e,"STRONG",{});var JUr=s(Zne);Buo=r(JUr,"mt5"),JUr.forEach(t),Puo=r(q3e," \u2014 "),jI=n(q3e,"A",{href:!0});var YUr=s(jI);Iuo=r(YUr,"MT5Model"),YUr.forEach(t),quo=r(q3e," (mT5 model)"),q3e.forEach(t),Nuo=i($),Xp=n($,"LI",{});var N3e=s(Xp);ese=n(N3e,"STRONG",{});var KUr=s(ese);juo=r(KUr,"nystromformer"),KUr.forEach(t),Duo=r(N3e," \u2014 "),DI=n(N3e,"A",{href:!0});var ZUr=s(DI);Guo=r(ZUr,"NystromformerModel"),ZUr.forEach(t),Ouo=r(N3e," (Nystromformer model)"),N3e.forEach(t),Vuo=i($),zp=n($,"LI",{});var j3e=s(zp);ose=n(j3e,"STRONG",{});var eJr=s(ose);Xuo=r(eJr,"openai-gpt"),eJr.forEach(t),zuo=r(j3e," \u2014 "),GI=n(j3e,"A",{href:!0});var oJr=s(GI);Quo=r(oJr,"OpenAIGPTModel"),oJr.forEach(t),Wuo=r(j3e," (OpenAI GPT model)"),j3e.forEach(t),Huo=i($),Qp=n($,"LI",{});var D3e=s(Qp);rse=n(D3e,"STRONG",{});var rJr=s(rse);Uuo=r(rJr,"opt"),rJr.forEach(t),Juo=r(D3e," \u2014 "),OI=n(D3e,"A",{href:!0});var tJr=s(OI);Yuo=r(tJr,"OPTModel"),tJr.forEach(t),Kuo=r(D3e," (OPT model)"),D3e.forEach(t),Zuo=i($),Wp=n($,"LI",{});var G3e=s(Wp);tse=n(G3e,"STRONG",{});var aJr=s(tse);e_o=r(aJr,"pegasus"),aJr.forEach(t),o_o=r(G3e," \u2014 "),VI=n(G3e,"A",{href:!0});var nJr=s(VI);r_o=r(nJr,"PegasusModel"),nJr.forEach(t),t_o=r(G3e," (Pegasus model)"),G3e.forEach(t),a_o=i($),Hp=n($,"LI",{});var O3e=s(Hp);ase=n(O3e,"STRONG",{});var sJr=s(ase);n_o=r(sJr,"perceiver"),sJr.forEach(t),s_o=r(O3e," \u2014 "),XI=n(O3e,"A",{href:!0});var lJr=s(XI);l_o=r(lJr,"PerceiverModel"),lJr.forEach(t),i_o=r(O3e," (Perceiver model)"),O3e.forEach(t),d_o=i($),Up=n($,"LI",{});var V3e=s(Up);nse=n(V3e,"STRONG",{});var iJr=s(nse);c_o=r(iJr,"plbart"),iJr.forEach(t),f_o=r(V3e," \u2014 "),zI=n(V3e,"A",{href:!0});var dJr=s(zI);m_o=r(dJr,"PLBartModel"),dJr.forEach(t),g_o=r(V3e," (PLBart model)"),V3e.forEach(t),h_o=i($),Jp=n($,"LI",{});var X3e=s(Jp);sse=n(X3e,"STRONG",{});var cJr=s(sse);p_o=r(cJr,"poolformer"),cJr.forEach(t),u_o=r(X3e," \u2014 "),QI=n(X3e,"A",{href:!0});var fJr=s(QI);__o=r(fJr,"PoolFormerModel"),fJr.forEach(t),b_o=r(X3e," (PoolFormer model)"),X3e.forEach(t),v_o=i($),Yp=n($,"LI",{});var z3e=s(Yp);lse=n(z3e,"STRONG",{});var mJr=s(lse);F_o=r(mJr,"prophetnet"),mJr.forEach(t),T_o=r(z3e," \u2014 "),WI=n(z3e,"A",{href:!0});var gJr=s(WI);M_o=r(gJr,"ProphetNetModel"),gJr.forEach(t),E_o=r(z3e," (ProphetNet model)"),z3e.forEach(t),C_o=i($),Kp=n($,"LI",{});var Q3e=s(Kp);ise=n(Q3e,"STRONG",{});var hJr=s(ise);w_o=r(hJr,"qdqbert"),hJr.forEach(t),A_o=r(Q3e," \u2014 "),HI=n(Q3e,"A",{href:!0});var pJr=s(HI);y_o=r(pJr,"QDQBertModel"),pJr.forEach(t),L_o=r(Q3e," (QDQBert model)"),Q3e.forEach(t),x_o=i($),Zp=n($,"LI",{});var W3e=s(Zp);dse=n(W3e,"STRONG",{});var uJr=s(dse);$_o=r(uJr,"reformer"),uJr.forEach(t),k_o=r(W3e," \u2014 "),UI=n(W3e,"A",{href:!0});var _Jr=s(UI);S_o=r(_Jr,"ReformerModel"),_Jr.forEach(t),R_o=r(W3e," (Reformer model)"),W3e.forEach(t),B_o=i($),eu=n($,"LI",{});var H3e=s(eu);cse=n(H3e,"STRONG",{});var bJr=s(cse);P_o=r(bJr,"regnet"),bJr.forEach(t),I_o=r(H3e," \u2014 "),JI=n(H3e,"A",{href:!0});var vJr=s(JI);q_o=r(vJr,"RegNetModel"),vJr.forEach(t),N_o=r(H3e," (RegNet model)"),H3e.forEach(t),j_o=i($),ou=n($,"LI",{});var U3e=s(ou);fse=n(U3e,"STRONG",{});var FJr=s(fse);D_o=r(FJr,"rembert"),FJr.forEach(t),G_o=r(U3e," \u2014 "),YI=n(U3e,"A",{href:!0});var TJr=s(YI);O_o=r(TJr,"RemBertModel"),TJr.forEach(t),V_o=r(U3e," (RemBERT model)"),U3e.forEach(t),X_o=i($),ru=n($,"LI",{});var J3e=s(ru);mse=n(J3e,"STRONG",{});var MJr=s(mse);z_o=r(MJr,"resnet"),MJr.forEach(t),Q_o=r(J3e," \u2014 "),KI=n(J3e,"A",{href:!0});var EJr=s(KI);W_o=r(EJr,"ResNetModel"),EJr.forEach(t),H_o=r(J3e," (ResNet model)"),J3e.forEach(t),U_o=i($),tu=n($,"LI",{});var Y3e=s(tu);gse=n(Y3e,"STRONG",{});var CJr=s(gse);J_o=r(CJr,"retribert"),CJr.forEach(t),Y_o=r(Y3e," \u2014 "),ZI=n(Y3e,"A",{href:!0});var wJr=s(ZI);K_o=r(wJr,"RetriBertModel"),wJr.forEach(t),Z_o=r(Y3e," (RetriBERT model)"),Y3e.forEach(t),e1o=i($),au=n($,"LI",{});var K3e=s(au);hse=n(K3e,"STRONG",{});var AJr=s(hse);o1o=r(AJr,"roberta"),AJr.forEach(t),r1o=r(K3e," \u2014 "),eq=n(K3e,"A",{href:!0});var yJr=s(eq);t1o=r(yJr,"RobertaModel"),yJr.forEach(t),a1o=r(K3e," (RoBERTa model)"),K3e.forEach(t),n1o=i($),nu=n($,"LI",{});var Z3e=s(nu);pse=n(Z3e,"STRONG",{});var LJr=s(pse);s1o=r(LJr,"roformer"),LJr.forEach(t),l1o=r(Z3e," \u2014 "),oq=n(Z3e,"A",{href:!0});var xJr=s(oq);i1o=r(xJr,"RoFormerModel"),xJr.forEach(t),d1o=r(Z3e," (RoFormer model)"),Z3e.forEach(t),c1o=i($),su=n($,"LI",{});var ewe=s(su);use=n(ewe,"STRONG",{});var $Jr=s(use);f1o=r($Jr,"segformer"),$Jr.forEach(t),m1o=r(ewe," \u2014 "),rq=n(ewe,"A",{href:!0});var kJr=s(rq);g1o=r(kJr,"SegformerModel"),kJr.forEach(t),h1o=r(ewe," (SegFormer model)"),ewe.forEach(t),p1o=i($),lu=n($,"LI",{});var owe=s(lu);_se=n(owe,"STRONG",{});var SJr=s(_se);u1o=r(SJr,"sew"),SJr.forEach(t),_1o=r(owe," \u2014 "),tq=n(owe,"A",{href:!0});var RJr=s(tq);b1o=r(RJr,"SEWModel"),RJr.forEach(t),v1o=r(owe," (SEW model)"),owe.forEach(t),F1o=i($),iu=n($,"LI",{});var rwe=s(iu);bse=n(rwe,"STRONG",{});var BJr=s(bse);T1o=r(BJr,"sew-d"),BJr.forEach(t),M1o=r(rwe," \u2014 "),aq=n(rwe,"A",{href:!0});var PJr=s(aq);E1o=r(PJr,"SEWDModel"),PJr.forEach(t),C1o=r(rwe," (SEW-D model)"),rwe.forEach(t),w1o=i($),du=n($,"LI",{});var twe=s(du);vse=n(twe,"STRONG",{});var IJr=s(vse);A1o=r(IJr,"speech_to_text"),IJr.forEach(t),y1o=r(twe," \u2014 "),nq=n(twe,"A",{href:!0});var qJr=s(nq);L1o=r(qJr,"Speech2TextModel"),qJr.forEach(t),x1o=r(twe," (Speech2Text model)"),twe.forEach(t),$1o=i($),cu=n($,"LI",{});var awe=s(cu);Fse=n(awe,"STRONG",{});var NJr=s(Fse);k1o=r(NJr,"splinter"),NJr.forEach(t),S1o=r(awe," \u2014 "),sq=n(awe,"A",{href:!0});var jJr=s(sq);R1o=r(jJr,"SplinterModel"),jJr.forEach(t),B1o=r(awe," (Splinter model)"),awe.forEach(t),P1o=i($),fu=n($,"LI",{});var nwe=s(fu);Tse=n(nwe,"STRONG",{});var DJr=s(Tse);I1o=r(DJr,"squeezebert"),DJr.forEach(t),q1o=r(nwe," \u2014 "),lq=n(nwe,"A",{href:!0});var GJr=s(lq);N1o=r(GJr,"SqueezeBertModel"),GJr.forEach(t),j1o=r(nwe," (SqueezeBERT model)"),nwe.forEach(t),D1o=i($),mu=n($,"LI",{});var swe=s(mu);Mse=n(swe,"STRONG",{});var OJr=s(Mse);G1o=r(OJr,"swin"),OJr.forEach(t),O1o=r(swe," \u2014 "),iq=n(swe,"A",{href:!0});var VJr=s(iq);V1o=r(VJr,"SwinModel"),VJr.forEach(t),X1o=r(swe," (Swin model)"),swe.forEach(t),z1o=i($),gu=n($,"LI",{});var lwe=s(gu);Ese=n(lwe,"STRONG",{});var XJr=s(Ese);Q1o=r(XJr,"t5"),XJr.forEach(t),W1o=r(lwe," \u2014 "),dq=n(lwe,"A",{href:!0});var zJr=s(dq);H1o=r(zJr,"T5Model"),zJr.forEach(t),U1o=r(lwe," (T5 model)"),lwe.forEach(t),J1o=i($),hu=n($,"LI",{});var iwe=s(hu);Cse=n(iwe,"STRONG",{});var QJr=s(Cse);Y1o=r(QJr,"tapas"),QJr.forEach(t),K1o=r(iwe," \u2014 "),cq=n(iwe,"A",{href:!0});var WJr=s(cq);Z1o=r(WJr,"TapasModel"),WJr.forEach(t),e8o=r(iwe," (TAPAS model)"),iwe.forEach(t),o8o=i($),pu=n($,"LI",{});var dwe=s(pu);wse=n(dwe,"STRONG",{});var HJr=s(wse);r8o=r(HJr,"transfo-xl"),HJr.forEach(t),t8o=r(dwe," \u2014 "),fq=n(dwe,"A",{href:!0});var UJr=s(fq);a8o=r(UJr,"TransfoXLModel"),UJr.forEach(t),n8o=r(dwe," (Transformer-XL model)"),dwe.forEach(t),s8o=i($),uu=n($,"LI",{});var cwe=s(uu);Ase=n(cwe,"STRONG",{});var JJr=s(Ase);l8o=r(JJr,"unispeech"),JJr.forEach(t),i8o=r(cwe," \u2014 "),mq=n(cwe,"A",{href:!0});var YJr=s(mq);d8o=r(YJr,"UniSpeechModel"),YJr.forEach(t),c8o=r(cwe," (UniSpeech model)"),cwe.forEach(t),f8o=i($),_u=n($,"LI",{});var fwe=s(_u);yse=n(fwe,"STRONG",{});var KJr=s(yse);m8o=r(KJr,"unispeech-sat"),KJr.forEach(t),g8o=r(fwe," \u2014 "),gq=n(fwe,"A",{href:!0});var ZJr=s(gq);h8o=r(ZJr,"UniSpeechSatModel"),ZJr.forEach(t),p8o=r(fwe," (UniSpeechSat model)"),fwe.forEach(t),u8o=i($),bu=n($,"LI",{});var mwe=s(bu);Lse=n(mwe,"STRONG",{});var eYr=s(Lse);_8o=r(eYr,"van"),eYr.forEach(t),b8o=r(mwe," \u2014 "),hq=n(mwe,"A",{href:!0});var oYr=s(hq);v8o=r(oYr,"VanModel"),oYr.forEach(t),F8o=r(mwe," (VAN model)"),mwe.forEach(t),T8o=i($),vu=n($,"LI",{});var gwe=s(vu);xse=n(gwe,"STRONG",{});var rYr=s(xse);M8o=r(rYr,"vilt"),rYr.forEach(t),E8o=r(gwe," \u2014 "),pq=n(gwe,"A",{href:!0});var tYr=s(pq);C8o=r(tYr,"ViltModel"),tYr.forEach(t),w8o=r(gwe," (ViLT model)"),gwe.forEach(t),A8o=i($),Fu=n($,"LI",{});var hwe=s(Fu);$se=n(hwe,"STRONG",{});var aYr=s($se);y8o=r(aYr,"vision-text-dual-encoder"),aYr.forEach(t),L8o=r(hwe," \u2014 "),uq=n(hwe,"A",{href:!0});var nYr=s(uq);x8o=r(nYr,"VisionTextDualEncoderModel"),nYr.forEach(t),$8o=r(hwe," (VisionTextDualEncoder model)"),hwe.forEach(t),k8o=i($),Tu=n($,"LI",{});var pwe=s(Tu);kse=n(pwe,"STRONG",{});var sYr=s(kse);S8o=r(sYr,"visual_bert"),sYr.forEach(t),R8o=r(pwe," \u2014 "),_q=n(pwe,"A",{href:!0});var lYr=s(_q);B8o=r(lYr,"VisualBertModel"),lYr.forEach(t),P8o=r(pwe," (VisualBert model)"),pwe.forEach(t),I8o=i($),Mu=n($,"LI",{});var uwe=s(Mu);Sse=n(uwe,"STRONG",{});var iYr=s(Sse);q8o=r(iYr,"vit"),iYr.forEach(t),N8o=r(uwe," \u2014 "),bq=n(uwe,"A",{href:!0});var dYr=s(bq);j8o=r(dYr,"ViTModel"),dYr.forEach(t),D8o=r(uwe," (ViT model)"),uwe.forEach(t),G8o=i($),Eu=n($,"LI",{});var _we=s(Eu);Rse=n(_we,"STRONG",{});var cYr=s(Rse);O8o=r(cYr,"vit_mae"),cYr.forEach(t),V8o=r(_we," \u2014 "),vq=n(_we,"A",{href:!0});var fYr=s(vq);X8o=r(fYr,"ViTMAEModel"),fYr.forEach(t),z8o=r(_we," (ViTMAE model)"),_we.forEach(t),Q8o=i($),Cu=n($,"LI",{});var bwe=s(Cu);Bse=n(bwe,"STRONG",{});var mYr=s(Bse);W8o=r(mYr,"wav2vec2"),mYr.forEach(t),H8o=r(bwe," \u2014 "),Fq=n(bwe,"A",{href:!0});var gYr=s(Fq);U8o=r(gYr,"Wav2Vec2Model"),gYr.forEach(t),J8o=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),Y8o=i($),wu=n($,"LI",{});var vwe=s(wu);Pse=n(vwe,"STRONG",{});var hYr=s(Pse);K8o=r(hYr,"wavlm"),hYr.forEach(t),Z8o=r(vwe," \u2014 "),Tq=n(vwe,"A",{href:!0});var pYr=s(Tq);ebo=r(pYr,"WavLMModel"),pYr.forEach(t),obo=r(vwe," (WavLM model)"),vwe.forEach(t),rbo=i($),Au=n($,"LI",{});var Fwe=s(Au);Ise=n(Fwe,"STRONG",{});var uYr=s(Ise);tbo=r(uYr,"xglm"),uYr.forEach(t),abo=r(Fwe," \u2014 "),Mq=n(Fwe,"A",{href:!0});var _Yr=s(Mq);nbo=r(_Yr,"XGLMModel"),_Yr.forEach(t),sbo=r(Fwe," (XGLM model)"),Fwe.forEach(t),lbo=i($),yu=n($,"LI",{});var Twe=s(yu);qse=n(Twe,"STRONG",{});var bYr=s(qse);ibo=r(bYr,"xlm"),bYr.forEach(t),dbo=r(Twe," \u2014 "),Eq=n(Twe,"A",{href:!0});var vYr=s(Eq);cbo=r(vYr,"XLMModel"),vYr.forEach(t),fbo=r(Twe," (XLM model)"),Twe.forEach(t),mbo=i($),Lu=n($,"LI",{});var Mwe=s(Lu);Nse=n(Mwe,"STRONG",{});var FYr=s(Nse);gbo=r(FYr,"xlm-prophetnet"),FYr.forEach(t),hbo=r(Mwe," \u2014 "),Cq=n(Mwe,"A",{href:!0});var TYr=s(Cq);pbo=r(TYr,"XLMProphetNetModel"),TYr.forEach(t),ubo=r(Mwe," (XLMProphetNet model)"),Mwe.forEach(t),_bo=i($),xu=n($,"LI",{});var Ewe=s(xu);jse=n(Ewe,"STRONG",{});var MYr=s(jse);bbo=r(MYr,"xlm-roberta"),MYr.forEach(t),vbo=r(Ewe," \u2014 "),wq=n(Ewe,"A",{href:!0});var EYr=s(wq);Fbo=r(EYr,"XLMRobertaModel"),EYr.forEach(t),Tbo=r(Ewe," (XLM-RoBERTa model)"),Ewe.forEach(t),Mbo=i($),$u=n($,"LI",{});var Cwe=s($u);Dse=n(Cwe,"STRONG",{});var CYr=s(Dse);Ebo=r(CYr,"xlm-roberta-xl"),CYr.forEach(t),Cbo=r(Cwe," \u2014 "),Aq=n(Cwe,"A",{href:!0});var wYr=s(Aq);wbo=r(wYr,"XLMRobertaXLModel"),wYr.forEach(t),Abo=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),ybo=i($),ku=n($,"LI",{});var wwe=s(ku);Gse=n(wwe,"STRONG",{});var AYr=s(Gse);Lbo=r(AYr,"xlnet"),AYr.forEach(t),xbo=r(wwe," \u2014 "),yq=n(wwe,"A",{href:!0});var yYr=s(yq);$bo=r(yYr,"XLNetModel"),yYr.forEach(t),kbo=r(wwe," (XLNet model)"),wwe.forEach(t),Sbo=i($),Su=n($,"LI",{});var Awe=s(Su);Ose=n(Awe,"STRONG",{});var LYr=s(Ose);Rbo=r(LYr,"yolos"),LYr.forEach(t),Bbo=r(Awe," \u2014 "),Lq=n(Awe,"A",{href:!0});var xYr=s(Lq);Pbo=r(xYr,"YolosModel"),xYr.forEach(t),Ibo=r(Awe," (YOLOS model)"),Awe.forEach(t),qbo=i($),Ru=n($,"LI",{});var ywe=s(Ru);Vse=n(ywe,"STRONG",{});var $Yr=s(Vse);Nbo=r($Yr,"yoso"),$Yr.forEach(t),jbo=r(ywe," \u2014 "),xq=n(ywe,"A",{href:!0});var kYr=s(xq);Dbo=r(kYr,"YosoModel"),kYr.forEach(t),Gbo=r(ywe," (YOSO model)"),ywe.forEach(t),$.forEach(t),Obo=i(Zt),Bu=n(Zt,"P",{});var Lwe=s(Bu);Vbo=r(Lwe,"The model is set in evaluation mode by default using "),Xse=n(Lwe,"CODE",{});var SYr=s(Xse);Xbo=r(SYr,"model.eval()"),SYr.forEach(t),zbo=r(Lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=n(Lwe,"CODE",{});var RYr=s(zse);Qbo=r(RYr,"model.train()"),RYr.forEach(t),Lwe.forEach(t),Wbo=i(Zt),T(Pu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),eIe=i(f),wi=n(f,"H2",{class:!0});var aNe=s(wi);Iu=n(aNe,"A",{id:!0,class:!0,href:!0});var BYr=s(Iu);Qse=n(BYr,"SPAN",{});var PYr=s(Qse);T(LA.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),Hbo=i(aNe),Wse=n(aNe,"SPAN",{});var IYr=s(Wse);Ubo=r(IYr,"AutoModelForPreTraining"),IYr.forEach(t),aNe.forEach(t),oIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(xA.$$.fragment,Gs),Jbo=i(Gs),Ai=n(Gs,"P",{});var dK=s(Ai);Ybo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$q=n(dK,"A",{href:!0});var qYr=s($q);Kbo=r(qYr,"from_pretrained()"),qYr.forEach(t),Zbo=r(dK," class method or the "),kq=n(dK,"A",{href:!0});var NYr=s(kq);e2o=r(NYr,"from_config()"),NYr.forEach(t),o2o=r(dK,` class
method.`),dK.forEach(t),r2o=i(Gs),$A=n(Gs,"P",{});var nNe=s($A);t2o=r(nNe,"This class cannot be instantiated directly using "),Hse=n(nNe,"CODE",{});var jYr=s(Hse);a2o=r(jYr,"__init__()"),jYr.forEach(t),n2o=r(nNe," (throws an error)."),nNe.forEach(t),s2o=i(Gs),rt=n(Gs,"DIV",{class:!0});var o3=s(rt);T(kA.$$.fragment,o3),l2o=i(o3),Use=n(o3,"P",{});var DYr=s(Use);i2o=r(DYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DYr.forEach(t),d2o=i(o3),yi=n(o3,"P",{});var cK=s(yi);c2o=r(cK,`Note:
Loading a model from its configuration file does `),Jse=n(cK,"STRONG",{});var GYr=s(Jse);f2o=r(GYr,"not"),GYr.forEach(t),m2o=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sq=n(cK,"A",{href:!0});var OYr=s(Sq);g2o=r(OYr,"from_pretrained()"),OYr.forEach(t),h2o=r(cK," to load the model weights."),cK.forEach(t),p2o=i(o3),T(qu.$$.fragment,o3),o3.forEach(t),u2o=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(SA.$$.fragment,ea),_2o=i(ea),Yse=n(ea,"P",{});var VYr=s(Yse);b2o=r(VYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VYr.forEach(t),v2o=i(ea),ya=n(ea,"P",{});var r3=s(ya);F2o=r(r3,"The model class to instantiate is selected based on the "),Kse=n(r3,"CODE",{});var XYr=s(Kse);T2o=r(XYr,"model_type"),XYr.forEach(t),M2o=r(r3,` property of the config object (either
passed as an argument or loaded from `),Zse=n(r3,"CODE",{});var zYr=s(Zse);E2o=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),C2o=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(r3,"CODE",{});var QYr=s(ele);w2o=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),A2o=r(r3,":"),r3.forEach(t),y2o=i(ea),G=n(ea,"UL",{});var V=s(G);Nu=n(V,"LI",{});var xwe=s(Nu);ole=n(xwe,"STRONG",{});var WYr=s(ole);L2o=r(WYr,"albert"),WYr.forEach(t),x2o=r(xwe," \u2014 "),Rq=n(xwe,"A",{href:!0});var HYr=s(Rq);$2o=r(HYr,"AlbertForPreTraining"),HYr.forEach(t),k2o=r(xwe," (ALBERT model)"),xwe.forEach(t),S2o=i(V),ju=n(V,"LI",{});var $we=s(ju);rle=n($we,"STRONG",{});var UYr=s(rle);R2o=r(UYr,"bart"),UYr.forEach(t),B2o=r($we," \u2014 "),Bq=n($we,"A",{href:!0});var JYr=s(Bq);P2o=r(JYr,"BartForConditionalGeneration"),JYr.forEach(t),I2o=r($we," (BART model)"),$we.forEach(t),q2o=i(V),Du=n(V,"LI",{});var kwe=s(Du);tle=n(kwe,"STRONG",{});var YYr=s(tle);N2o=r(YYr,"bert"),YYr.forEach(t),j2o=r(kwe," \u2014 "),Pq=n(kwe,"A",{href:!0});var KYr=s(Pq);D2o=r(KYr,"BertForPreTraining"),KYr.forEach(t),G2o=r(kwe," (BERT model)"),kwe.forEach(t),O2o=i(V),Gu=n(V,"LI",{});var Swe=s(Gu);ale=n(Swe,"STRONG",{});var ZYr=s(ale);V2o=r(ZYr,"big_bird"),ZYr.forEach(t),X2o=r(Swe," \u2014 "),Iq=n(Swe,"A",{href:!0});var eKr=s(Iq);z2o=r(eKr,"BigBirdForPreTraining"),eKr.forEach(t),Q2o=r(Swe," (BigBird model)"),Swe.forEach(t),W2o=i(V),Ou=n(V,"LI",{});var Rwe=s(Ou);nle=n(Rwe,"STRONG",{});var oKr=s(nle);H2o=r(oKr,"camembert"),oKr.forEach(t),U2o=r(Rwe," \u2014 "),qq=n(Rwe,"A",{href:!0});var rKr=s(qq);J2o=r(rKr,"CamembertForMaskedLM"),rKr.forEach(t),Y2o=r(Rwe," (CamemBERT model)"),Rwe.forEach(t),K2o=i(V),Vu=n(V,"LI",{});var Bwe=s(Vu);sle=n(Bwe,"STRONG",{});var tKr=s(sle);Z2o=r(tKr,"ctrl"),tKr.forEach(t),evo=r(Bwe," \u2014 "),Nq=n(Bwe,"A",{href:!0});var aKr=s(Nq);ovo=r(aKr,"CTRLLMHeadModel"),aKr.forEach(t),rvo=r(Bwe," (CTRL model)"),Bwe.forEach(t),tvo=i(V),Xu=n(V,"LI",{});var Pwe=s(Xu);lle=n(Pwe,"STRONG",{});var nKr=s(lle);avo=r(nKr,"data2vec-text"),nKr.forEach(t),nvo=r(Pwe," \u2014 "),jq=n(Pwe,"A",{href:!0});var sKr=s(jq);svo=r(sKr,"Data2VecTextForMaskedLM"),sKr.forEach(t),lvo=r(Pwe," (Data2VecText model)"),Pwe.forEach(t),ivo=i(V),zu=n(V,"LI",{});var Iwe=s(zu);ile=n(Iwe,"STRONG",{});var lKr=s(ile);dvo=r(lKr,"deberta"),lKr.forEach(t),cvo=r(Iwe," \u2014 "),Dq=n(Iwe,"A",{href:!0});var iKr=s(Dq);fvo=r(iKr,"DebertaForMaskedLM"),iKr.forEach(t),mvo=r(Iwe," (DeBERTa model)"),Iwe.forEach(t),gvo=i(V),Qu=n(V,"LI",{});var qwe=s(Qu);dle=n(qwe,"STRONG",{});var dKr=s(dle);hvo=r(dKr,"deberta-v2"),dKr.forEach(t),pvo=r(qwe," \u2014 "),Gq=n(qwe,"A",{href:!0});var cKr=s(Gq);uvo=r(cKr,"DebertaV2ForMaskedLM"),cKr.forEach(t),_vo=r(qwe," (DeBERTa-v2 model)"),qwe.forEach(t),bvo=i(V),Wu=n(V,"LI",{});var Nwe=s(Wu);cle=n(Nwe,"STRONG",{});var fKr=s(cle);vvo=r(fKr,"distilbert"),fKr.forEach(t),Fvo=r(Nwe," \u2014 "),Oq=n(Nwe,"A",{href:!0});var mKr=s(Oq);Tvo=r(mKr,"DistilBertForMaskedLM"),mKr.forEach(t),Mvo=r(Nwe," (DistilBERT model)"),Nwe.forEach(t),Evo=i(V),Hu=n(V,"LI",{});var jwe=s(Hu);fle=n(jwe,"STRONG",{});var gKr=s(fle);Cvo=r(gKr,"electra"),gKr.forEach(t),wvo=r(jwe," \u2014 "),Vq=n(jwe,"A",{href:!0});var hKr=s(Vq);Avo=r(hKr,"ElectraForPreTraining"),hKr.forEach(t),yvo=r(jwe," (ELECTRA model)"),jwe.forEach(t),Lvo=i(V),Uu=n(V,"LI",{});var Dwe=s(Uu);mle=n(Dwe,"STRONG",{});var pKr=s(mle);xvo=r(pKr,"flaubert"),pKr.forEach(t),$vo=r(Dwe," \u2014 "),Xq=n(Dwe,"A",{href:!0});var uKr=s(Xq);kvo=r(uKr,"FlaubertWithLMHeadModel"),uKr.forEach(t),Svo=r(Dwe," (FlauBERT model)"),Dwe.forEach(t),Rvo=i(V),Ju=n(V,"LI",{});var Gwe=s(Ju);gle=n(Gwe,"STRONG",{});var _Kr=s(gle);Bvo=r(_Kr,"flava"),_Kr.forEach(t),Pvo=r(Gwe," \u2014 "),zq=n(Gwe,"A",{href:!0});var bKr=s(zq);Ivo=r(bKr,"FlavaForPreTraining"),bKr.forEach(t),qvo=r(Gwe," (Flava model)"),Gwe.forEach(t),Nvo=i(V),Yu=n(V,"LI",{});var Owe=s(Yu);hle=n(Owe,"STRONG",{});var vKr=s(hle);jvo=r(vKr,"fnet"),vKr.forEach(t),Dvo=r(Owe," \u2014 "),Qq=n(Owe,"A",{href:!0});var FKr=s(Qq);Gvo=r(FKr,"FNetForPreTraining"),FKr.forEach(t),Ovo=r(Owe," (FNet model)"),Owe.forEach(t),Vvo=i(V),Ku=n(V,"LI",{});var Vwe=s(Ku);ple=n(Vwe,"STRONG",{});var TKr=s(ple);Xvo=r(TKr,"fsmt"),TKr.forEach(t),zvo=r(Vwe," \u2014 "),Wq=n(Vwe,"A",{href:!0});var MKr=s(Wq);Qvo=r(MKr,"FSMTForConditionalGeneration"),MKr.forEach(t),Wvo=r(Vwe," (FairSeq Machine-Translation model)"),Vwe.forEach(t),Hvo=i(V),Zu=n(V,"LI",{});var Xwe=s(Zu);ule=n(Xwe,"STRONG",{});var EKr=s(ule);Uvo=r(EKr,"funnel"),EKr.forEach(t),Jvo=r(Xwe," \u2014 "),Hq=n(Xwe,"A",{href:!0});var CKr=s(Hq);Yvo=r(CKr,"FunnelForPreTraining"),CKr.forEach(t),Kvo=r(Xwe," (Funnel Transformer model)"),Xwe.forEach(t),Zvo=i(V),e_=n(V,"LI",{});var zwe=s(e_);_le=n(zwe,"STRONG",{});var wKr=s(_le);eFo=r(wKr,"gpt2"),wKr.forEach(t),oFo=r(zwe," \u2014 "),Uq=n(zwe,"A",{href:!0});var AKr=s(Uq);rFo=r(AKr,"GPT2LMHeadModel"),AKr.forEach(t),tFo=r(zwe," (OpenAI GPT-2 model)"),zwe.forEach(t),aFo=i(V),o_=n(V,"LI",{});var Qwe=s(o_);ble=n(Qwe,"STRONG",{});var yKr=s(ble);nFo=r(yKr,"ibert"),yKr.forEach(t),sFo=r(Qwe," \u2014 "),Jq=n(Qwe,"A",{href:!0});var LKr=s(Jq);lFo=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),iFo=r(Qwe," (I-BERT model)"),Qwe.forEach(t),dFo=i(V),r_=n(V,"LI",{});var Wwe=s(r_);vle=n(Wwe,"STRONG",{});var xKr=s(vle);cFo=r(xKr,"layoutlm"),xKr.forEach(t),fFo=r(Wwe," \u2014 "),Yq=n(Wwe,"A",{href:!0});var $Kr=s(Yq);mFo=r($Kr,"LayoutLMForMaskedLM"),$Kr.forEach(t),gFo=r(Wwe," (LayoutLM model)"),Wwe.forEach(t),hFo=i(V),t_=n(V,"LI",{});var Hwe=s(t_);Fle=n(Hwe,"STRONG",{});var kKr=s(Fle);pFo=r(kKr,"longformer"),kKr.forEach(t),uFo=r(Hwe," \u2014 "),Kq=n(Hwe,"A",{href:!0});var SKr=s(Kq);_Fo=r(SKr,"LongformerForMaskedLM"),SKr.forEach(t),bFo=r(Hwe," (Longformer model)"),Hwe.forEach(t),vFo=i(V),a_=n(V,"LI",{});var Uwe=s(a_);Tle=n(Uwe,"STRONG",{});var RKr=s(Tle);FFo=r(RKr,"lxmert"),RKr.forEach(t),TFo=r(Uwe," \u2014 "),Zq=n(Uwe,"A",{href:!0});var BKr=s(Zq);MFo=r(BKr,"LxmertForPreTraining"),BKr.forEach(t),EFo=r(Uwe," (LXMERT model)"),Uwe.forEach(t),CFo=i(V),n_=n(V,"LI",{});var Jwe=s(n_);Mle=n(Jwe,"STRONG",{});var PKr=s(Mle);wFo=r(PKr,"megatron-bert"),PKr.forEach(t),AFo=r(Jwe," \u2014 "),eN=n(Jwe,"A",{href:!0});var IKr=s(eN);yFo=r(IKr,"MegatronBertForPreTraining"),IKr.forEach(t),LFo=r(Jwe," (MegatronBert model)"),Jwe.forEach(t),xFo=i(V),s_=n(V,"LI",{});var Ywe=s(s_);Ele=n(Ywe,"STRONG",{});var qKr=s(Ele);$Fo=r(qKr,"mobilebert"),qKr.forEach(t),kFo=r(Ywe," \u2014 "),oN=n(Ywe,"A",{href:!0});var NKr=s(oN);SFo=r(NKr,"MobileBertForPreTraining"),NKr.forEach(t),RFo=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),BFo=i(V),l_=n(V,"LI",{});var Kwe=s(l_);Cle=n(Kwe,"STRONG",{});var jKr=s(Cle);PFo=r(jKr,"mpnet"),jKr.forEach(t),IFo=r(Kwe," \u2014 "),rN=n(Kwe,"A",{href:!0});var DKr=s(rN);qFo=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),NFo=r(Kwe," (MPNet model)"),Kwe.forEach(t),jFo=i(V),i_=n(V,"LI",{});var Zwe=s(i_);wle=n(Zwe,"STRONG",{});var GKr=s(wle);DFo=r(GKr,"openai-gpt"),GKr.forEach(t),GFo=r(Zwe," \u2014 "),tN=n(Zwe,"A",{href:!0});var OKr=s(tN);OFo=r(OKr,"OpenAIGPTLMHeadModel"),OKr.forEach(t),VFo=r(Zwe," (OpenAI GPT model)"),Zwe.forEach(t),XFo=i(V),d_=n(V,"LI",{});var eAe=s(d_);Ale=n(eAe,"STRONG",{});var VKr=s(Ale);zFo=r(VKr,"retribert"),VKr.forEach(t),QFo=r(eAe," \u2014 "),aN=n(eAe,"A",{href:!0});var XKr=s(aN);WFo=r(XKr,"RetriBertModel"),XKr.forEach(t),HFo=r(eAe," (RetriBERT model)"),eAe.forEach(t),UFo=i(V),c_=n(V,"LI",{});var oAe=s(c_);yle=n(oAe,"STRONG",{});var zKr=s(yle);JFo=r(zKr,"roberta"),zKr.forEach(t),YFo=r(oAe," \u2014 "),nN=n(oAe,"A",{href:!0});var QKr=s(nN);KFo=r(QKr,"RobertaForMaskedLM"),QKr.forEach(t),ZFo=r(oAe," (RoBERTa model)"),oAe.forEach(t),e6o=i(V),f_=n(V,"LI",{});var rAe=s(f_);Lle=n(rAe,"STRONG",{});var WKr=s(Lle);o6o=r(WKr,"squeezebert"),WKr.forEach(t),r6o=r(rAe," \u2014 "),sN=n(rAe,"A",{href:!0});var HKr=s(sN);t6o=r(HKr,"SqueezeBertForMaskedLM"),HKr.forEach(t),a6o=r(rAe," (SqueezeBERT model)"),rAe.forEach(t),n6o=i(V),m_=n(V,"LI",{});var tAe=s(m_);xle=n(tAe,"STRONG",{});var UKr=s(xle);s6o=r(UKr,"t5"),UKr.forEach(t),l6o=r(tAe," \u2014 "),lN=n(tAe,"A",{href:!0});var JKr=s(lN);i6o=r(JKr,"T5ForConditionalGeneration"),JKr.forEach(t),d6o=r(tAe," (T5 model)"),tAe.forEach(t),c6o=i(V),g_=n(V,"LI",{});var aAe=s(g_);$le=n(aAe,"STRONG",{});var YKr=s($le);f6o=r(YKr,"tapas"),YKr.forEach(t),m6o=r(aAe," \u2014 "),iN=n(aAe,"A",{href:!0});var KKr=s(iN);g6o=r(KKr,"TapasForMaskedLM"),KKr.forEach(t),h6o=r(aAe," (TAPAS model)"),aAe.forEach(t),p6o=i(V),h_=n(V,"LI",{});var nAe=s(h_);kle=n(nAe,"STRONG",{});var ZKr=s(kle);u6o=r(ZKr,"transfo-xl"),ZKr.forEach(t),_6o=r(nAe," \u2014 "),dN=n(nAe,"A",{href:!0});var eZr=s(dN);b6o=r(eZr,"TransfoXLLMHeadModel"),eZr.forEach(t),v6o=r(nAe," (Transformer-XL model)"),nAe.forEach(t),F6o=i(V),p_=n(V,"LI",{});var sAe=s(p_);Sle=n(sAe,"STRONG",{});var oZr=s(Sle);T6o=r(oZr,"unispeech"),oZr.forEach(t),M6o=r(sAe," \u2014 "),cN=n(sAe,"A",{href:!0});var rZr=s(cN);E6o=r(rZr,"UniSpeechForPreTraining"),rZr.forEach(t),C6o=r(sAe," (UniSpeech model)"),sAe.forEach(t),w6o=i(V),u_=n(V,"LI",{});var lAe=s(u_);Rle=n(lAe,"STRONG",{});var tZr=s(Rle);A6o=r(tZr,"unispeech-sat"),tZr.forEach(t),y6o=r(lAe," \u2014 "),fN=n(lAe,"A",{href:!0});var aZr=s(fN);L6o=r(aZr,"UniSpeechSatForPreTraining"),aZr.forEach(t),x6o=r(lAe," (UniSpeechSat model)"),lAe.forEach(t),$6o=i(V),__=n(V,"LI",{});var iAe=s(__);Ble=n(iAe,"STRONG",{});var nZr=s(Ble);k6o=r(nZr,"visual_bert"),nZr.forEach(t),S6o=r(iAe," \u2014 "),mN=n(iAe,"A",{href:!0});var sZr=s(mN);R6o=r(sZr,"VisualBertForPreTraining"),sZr.forEach(t),B6o=r(iAe," (VisualBert model)"),iAe.forEach(t),P6o=i(V),b_=n(V,"LI",{});var dAe=s(b_);Ple=n(dAe,"STRONG",{});var lZr=s(Ple);I6o=r(lZr,"vit_mae"),lZr.forEach(t),q6o=r(dAe," \u2014 "),gN=n(dAe,"A",{href:!0});var iZr=s(gN);N6o=r(iZr,"ViTMAEForPreTraining"),iZr.forEach(t),j6o=r(dAe," (ViTMAE model)"),dAe.forEach(t),D6o=i(V),v_=n(V,"LI",{});var cAe=s(v_);Ile=n(cAe,"STRONG",{});var dZr=s(Ile);G6o=r(dZr,"wav2vec2"),dZr.forEach(t),O6o=r(cAe," \u2014 "),hN=n(cAe,"A",{href:!0});var cZr=s(hN);V6o=r(cZr,"Wav2Vec2ForPreTraining"),cZr.forEach(t),X6o=r(cAe," (Wav2Vec2 model)"),cAe.forEach(t),z6o=i(V),F_=n(V,"LI",{});var fAe=s(F_);qle=n(fAe,"STRONG",{});var fZr=s(qle);Q6o=r(fZr,"xlm"),fZr.forEach(t),W6o=r(fAe," \u2014 "),pN=n(fAe,"A",{href:!0});var mZr=s(pN);H6o=r(mZr,"XLMWithLMHeadModel"),mZr.forEach(t),U6o=r(fAe," (XLM model)"),fAe.forEach(t),J6o=i(V),T_=n(V,"LI",{});var mAe=s(T_);Nle=n(mAe,"STRONG",{});var gZr=s(Nle);Y6o=r(gZr,"xlm-roberta"),gZr.forEach(t),K6o=r(mAe," \u2014 "),uN=n(mAe,"A",{href:!0});var hZr=s(uN);Z6o=r(hZr,"XLMRobertaForMaskedLM"),hZr.forEach(t),eTo=r(mAe," (XLM-RoBERTa model)"),mAe.forEach(t),oTo=i(V),M_=n(V,"LI",{});var gAe=s(M_);jle=n(gAe,"STRONG",{});var pZr=s(jle);rTo=r(pZr,"xlm-roberta-xl"),pZr.forEach(t),tTo=r(gAe," \u2014 "),_N=n(gAe,"A",{href:!0});var uZr=s(_N);aTo=r(uZr,"XLMRobertaXLForMaskedLM"),uZr.forEach(t),nTo=r(gAe," (XLM-RoBERTa-XL model)"),gAe.forEach(t),sTo=i(V),E_=n(V,"LI",{});var hAe=s(E_);Dle=n(hAe,"STRONG",{});var _Zr=s(Dle);lTo=r(_Zr,"xlnet"),_Zr.forEach(t),iTo=r(hAe," \u2014 "),bN=n(hAe,"A",{href:!0});var bZr=s(bN);dTo=r(bZr,"XLNetLMHeadModel"),bZr.forEach(t),cTo=r(hAe," (XLNet model)"),hAe.forEach(t),V.forEach(t),fTo=i(ea),C_=n(ea,"P",{});var pAe=s(C_);mTo=r(pAe,"The model is set in evaluation mode by default using "),Gle=n(pAe,"CODE",{});var vZr=s(Gle);gTo=r(vZr,"model.eval()"),vZr.forEach(t),hTo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(pAe,"CODE",{});var FZr=s(Ole);pTo=r(FZr,"model.train()"),FZr.forEach(t),pAe.forEach(t),uTo=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),rIe=i(f),Li=n(f,"H2",{class:!0});var sNe=s(Li);A_=n(sNe,"A",{id:!0,class:!0,href:!0});var TZr=s(A_);Vle=n(TZr,"SPAN",{});var MZr=s(Vle);T(RA.$$.fragment,MZr),MZr.forEach(t),TZr.forEach(t),_To=i(sNe),Xle=n(sNe,"SPAN",{});var EZr=s(Xle);bTo=r(EZr,"AutoModelForCausalLM"),EZr.forEach(t),sNe.forEach(t),tIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(BA.$$.fragment,Os),vTo=i(Os),xi=n(Os,"P",{});var fK=s(xi);FTo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=n(fK,"A",{href:!0});var CZr=s(vN);TTo=r(CZr,"from_pretrained()"),CZr.forEach(t),MTo=r(fK," class method or the "),FN=n(fK,"A",{href:!0});var wZr=s(FN);ETo=r(wZr,"from_config()"),wZr.forEach(t),CTo=r(fK,` class
method.`),fK.forEach(t),wTo=i(Os),PA=n(Os,"P",{});var lNe=s(PA);ATo=r(lNe,"This class cannot be instantiated directly using "),zle=n(lNe,"CODE",{});var AZr=s(zle);yTo=r(AZr,"__init__()"),AZr.forEach(t),LTo=r(lNe," (throws an error)."),lNe.forEach(t),xTo=i(Os),tt=n(Os,"DIV",{class:!0});var t3=s(tt);T(IA.$$.fragment,t3),$To=i(t3),Qle=n(t3,"P",{});var yZr=s(Qle);kTo=r(yZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yZr.forEach(t),STo=i(t3),$i=n(t3,"P",{});var mK=s($i);RTo=r(mK,`Note:
Loading a model from its configuration file does `),Wle=n(mK,"STRONG",{});var LZr=s(Wle);BTo=r(LZr,"not"),LZr.forEach(t),PTo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(mK,"A",{href:!0});var xZr=s(TN);ITo=r(xZr,"from_pretrained()"),xZr.forEach(t),qTo=r(mK," to load the model weights."),mK.forEach(t),NTo=i(t3),T(y_.$$.fragment,t3),t3.forEach(t),jTo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(qA.$$.fragment,oa),DTo=i(oa),Hle=n(oa,"P",{});var $Zr=s(Hle);GTo=r($Zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Zr.forEach(t),OTo=i(oa),La=n(oa,"P",{});var a3=s(La);VTo=r(a3,"The model class to instantiate is selected based on the "),Ule=n(a3,"CODE",{});var kZr=s(Ule);XTo=r(kZr,"model_type"),kZr.forEach(t),zTo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Jle=n(a3,"CODE",{});var SZr=s(Jle);QTo=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),WTo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(a3,"CODE",{});var RZr=s(Yle);HTo=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),UTo=r(a3,":"),a3.forEach(t),JTo=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var uAe=s(L_);Kle=n(uAe,"STRONG",{});var BZr=s(Kle);YTo=r(BZr,"bart"),BZr.forEach(t),KTo=r(uAe," \u2014 "),MN=n(uAe,"A",{href:!0});var PZr=s(MN);ZTo=r(PZr,"BartForCausalLM"),PZr.forEach(t),e9o=r(uAe," (BART model)"),uAe.forEach(t),o9o=i(W),x_=n(W,"LI",{});var _Ae=s(x_);Zle=n(_Ae,"STRONG",{});var IZr=s(Zle);r9o=r(IZr,"bert"),IZr.forEach(t),t9o=r(_Ae," \u2014 "),EN=n(_Ae,"A",{href:!0});var qZr=s(EN);a9o=r(qZr,"BertLMHeadModel"),qZr.forEach(t),n9o=r(_Ae," (BERT model)"),_Ae.forEach(t),s9o=i(W),$_=n(W,"LI",{});var bAe=s($_);eie=n(bAe,"STRONG",{});var NZr=s(eie);l9o=r(NZr,"bert-generation"),NZr.forEach(t),i9o=r(bAe," \u2014 "),CN=n(bAe,"A",{href:!0});var jZr=s(CN);d9o=r(jZr,"BertGenerationDecoder"),jZr.forEach(t),c9o=r(bAe," (Bert Generation model)"),bAe.forEach(t),f9o=i(W),k_=n(W,"LI",{});var vAe=s(k_);oie=n(vAe,"STRONG",{});var DZr=s(oie);m9o=r(DZr,"big_bird"),DZr.forEach(t),g9o=r(vAe," \u2014 "),wN=n(vAe,"A",{href:!0});var GZr=s(wN);h9o=r(GZr,"BigBirdForCausalLM"),GZr.forEach(t),p9o=r(vAe," (BigBird model)"),vAe.forEach(t),u9o=i(W),S_=n(W,"LI",{});var FAe=s(S_);rie=n(FAe,"STRONG",{});var OZr=s(rie);_9o=r(OZr,"bigbird_pegasus"),OZr.forEach(t),b9o=r(FAe," \u2014 "),AN=n(FAe,"A",{href:!0});var VZr=s(AN);v9o=r(VZr,"BigBirdPegasusForCausalLM"),VZr.forEach(t),F9o=r(FAe," (BigBirdPegasus model)"),FAe.forEach(t),T9o=i(W),R_=n(W,"LI",{});var TAe=s(R_);tie=n(TAe,"STRONG",{});var XZr=s(tie);M9o=r(XZr,"blenderbot"),XZr.forEach(t),E9o=r(TAe," \u2014 "),yN=n(TAe,"A",{href:!0});var zZr=s(yN);C9o=r(zZr,"BlenderbotForCausalLM"),zZr.forEach(t),w9o=r(TAe," (Blenderbot model)"),TAe.forEach(t),A9o=i(W),B_=n(W,"LI",{});var MAe=s(B_);aie=n(MAe,"STRONG",{});var QZr=s(aie);y9o=r(QZr,"blenderbot-small"),QZr.forEach(t),L9o=r(MAe," \u2014 "),LN=n(MAe,"A",{href:!0});var WZr=s(LN);x9o=r(WZr,"BlenderbotSmallForCausalLM"),WZr.forEach(t),$9o=r(MAe," (BlenderbotSmall model)"),MAe.forEach(t),k9o=i(W),P_=n(W,"LI",{});var EAe=s(P_);nie=n(EAe,"STRONG",{});var HZr=s(nie);S9o=r(HZr,"camembert"),HZr.forEach(t),R9o=r(EAe," \u2014 "),xN=n(EAe,"A",{href:!0});var UZr=s(xN);B9o=r(UZr,"CamembertForCausalLM"),UZr.forEach(t),P9o=r(EAe," (CamemBERT model)"),EAe.forEach(t),I9o=i(W),I_=n(W,"LI",{});var CAe=s(I_);sie=n(CAe,"STRONG",{});var JZr=s(sie);q9o=r(JZr,"ctrl"),JZr.forEach(t),N9o=r(CAe," \u2014 "),$N=n(CAe,"A",{href:!0});var YZr=s($N);j9o=r(YZr,"CTRLLMHeadModel"),YZr.forEach(t),D9o=r(CAe," (CTRL model)"),CAe.forEach(t),G9o=i(W),q_=n(W,"LI",{});var wAe=s(q_);lie=n(wAe,"STRONG",{});var KZr=s(lie);O9o=r(KZr,"data2vec-text"),KZr.forEach(t),V9o=r(wAe," \u2014 "),kN=n(wAe,"A",{href:!0});var ZZr=s(kN);X9o=r(ZZr,"Data2VecTextForCausalLM"),ZZr.forEach(t),z9o=r(wAe," (Data2VecText model)"),wAe.forEach(t),Q9o=i(W),N_=n(W,"LI",{});var AAe=s(N_);iie=n(AAe,"STRONG",{});var eet=s(iie);W9o=r(eet,"electra"),eet.forEach(t),H9o=r(AAe," \u2014 "),SN=n(AAe,"A",{href:!0});var oet=s(SN);U9o=r(oet,"ElectraForCausalLM"),oet.forEach(t),J9o=r(AAe," (ELECTRA model)"),AAe.forEach(t),Y9o=i(W),j_=n(W,"LI",{});var yAe=s(j_);die=n(yAe,"STRONG",{});var ret=s(die);K9o=r(ret,"gpt2"),ret.forEach(t),Z9o=r(yAe," \u2014 "),RN=n(yAe,"A",{href:!0});var tet=s(RN);eMo=r(tet,"GPT2LMHeadModel"),tet.forEach(t),oMo=r(yAe," (OpenAI GPT-2 model)"),yAe.forEach(t),rMo=i(W),D_=n(W,"LI",{});var LAe=s(D_);cie=n(LAe,"STRONG",{});var aet=s(cie);tMo=r(aet,"gpt_neo"),aet.forEach(t),aMo=r(LAe," \u2014 "),BN=n(LAe,"A",{href:!0});var net=s(BN);nMo=r(net,"GPTNeoForCausalLM"),net.forEach(t),sMo=r(LAe," (GPT Neo model)"),LAe.forEach(t),lMo=i(W),G_=n(W,"LI",{});var xAe=s(G_);fie=n(xAe,"STRONG",{});var set=s(fie);iMo=r(set,"gptj"),set.forEach(t),dMo=r(xAe," \u2014 "),PN=n(xAe,"A",{href:!0});var iet=s(PN);cMo=r(iet,"GPTJForCausalLM"),iet.forEach(t),fMo=r(xAe," (GPT-J model)"),xAe.forEach(t),mMo=i(W),O_=n(W,"LI",{});var $Ae=s(O_);mie=n($Ae,"STRONG",{});var det=s(mie);gMo=r(det,"marian"),det.forEach(t),hMo=r($Ae," \u2014 "),IN=n($Ae,"A",{href:!0});var cet=s(IN);pMo=r(cet,"MarianForCausalLM"),cet.forEach(t),uMo=r($Ae," (Marian model)"),$Ae.forEach(t),_Mo=i(W),V_=n(W,"LI",{});var kAe=s(V_);gie=n(kAe,"STRONG",{});var fet=s(gie);bMo=r(fet,"mbart"),fet.forEach(t),vMo=r(kAe," \u2014 "),qN=n(kAe,"A",{href:!0});var met=s(qN);FMo=r(met,"MBartForCausalLM"),met.forEach(t),TMo=r(kAe," (mBART model)"),kAe.forEach(t),MMo=i(W),X_=n(W,"LI",{});var SAe=s(X_);hie=n(SAe,"STRONG",{});var get=s(hie);EMo=r(get,"megatron-bert"),get.forEach(t),CMo=r(SAe," \u2014 "),NN=n(SAe,"A",{href:!0});var het=s(NN);wMo=r(het,"MegatronBertForCausalLM"),het.forEach(t),AMo=r(SAe," (MegatronBert model)"),SAe.forEach(t),yMo=i(W),z_=n(W,"LI",{});var RAe=s(z_);pie=n(RAe,"STRONG",{});var pet=s(pie);LMo=r(pet,"openai-gpt"),pet.forEach(t),xMo=r(RAe," \u2014 "),jN=n(RAe,"A",{href:!0});var uet=s(jN);$Mo=r(uet,"OpenAIGPTLMHeadModel"),uet.forEach(t),kMo=r(RAe," (OpenAI GPT model)"),RAe.forEach(t),SMo=i(W),Q_=n(W,"LI",{});var BAe=s(Q_);uie=n(BAe,"STRONG",{});var _et=s(uie);RMo=r(_et,"opt"),_et.forEach(t),BMo=r(BAe," \u2014 "),DN=n(BAe,"A",{href:!0});var bet=s(DN);PMo=r(bet,"OPTForCausalLM"),bet.forEach(t),IMo=r(BAe," (OPT model)"),BAe.forEach(t),qMo=i(W),W_=n(W,"LI",{});var PAe=s(W_);_ie=n(PAe,"STRONG",{});var vet=s(_ie);NMo=r(vet,"pegasus"),vet.forEach(t),jMo=r(PAe," \u2014 "),GN=n(PAe,"A",{href:!0});var Fet=s(GN);DMo=r(Fet,"PegasusForCausalLM"),Fet.forEach(t),GMo=r(PAe," (Pegasus model)"),PAe.forEach(t),OMo=i(W),H_=n(W,"LI",{});var IAe=s(H_);bie=n(IAe,"STRONG",{});var Tet=s(bie);VMo=r(Tet,"plbart"),Tet.forEach(t),XMo=r(IAe," \u2014 "),ON=n(IAe,"A",{href:!0});var Met=s(ON);zMo=r(Met,"PLBartForCausalLM"),Met.forEach(t),QMo=r(IAe," (PLBart model)"),IAe.forEach(t),WMo=i(W),U_=n(W,"LI",{});var qAe=s(U_);vie=n(qAe,"STRONG",{});var Eet=s(vie);HMo=r(Eet,"prophetnet"),Eet.forEach(t),UMo=r(qAe," \u2014 "),VN=n(qAe,"A",{href:!0});var Cet=s(VN);JMo=r(Cet,"ProphetNetForCausalLM"),Cet.forEach(t),YMo=r(qAe," (ProphetNet model)"),qAe.forEach(t),KMo=i(W),J_=n(W,"LI",{});var NAe=s(J_);Fie=n(NAe,"STRONG",{});var wet=s(Fie);ZMo=r(wet,"qdqbert"),wet.forEach(t),e4o=r(NAe," \u2014 "),XN=n(NAe,"A",{href:!0});var Aet=s(XN);o4o=r(Aet,"QDQBertLMHeadModel"),Aet.forEach(t),r4o=r(NAe," (QDQBert model)"),NAe.forEach(t),t4o=i(W),Y_=n(W,"LI",{});var jAe=s(Y_);Tie=n(jAe,"STRONG",{});var yet=s(Tie);a4o=r(yet,"reformer"),yet.forEach(t),n4o=r(jAe," \u2014 "),zN=n(jAe,"A",{href:!0});var Let=s(zN);s4o=r(Let,"ReformerModelWithLMHead"),Let.forEach(t),l4o=r(jAe," (Reformer model)"),jAe.forEach(t),i4o=i(W),K_=n(W,"LI",{});var DAe=s(K_);Mie=n(DAe,"STRONG",{});var xet=s(Mie);d4o=r(xet,"rembert"),xet.forEach(t),c4o=r(DAe," \u2014 "),QN=n(DAe,"A",{href:!0});var $et=s(QN);f4o=r($et,"RemBertForCausalLM"),$et.forEach(t),m4o=r(DAe," (RemBERT model)"),DAe.forEach(t),g4o=i(W),Z_=n(W,"LI",{});var GAe=s(Z_);Eie=n(GAe,"STRONG",{});var ket=s(Eie);h4o=r(ket,"roberta"),ket.forEach(t),p4o=r(GAe," \u2014 "),WN=n(GAe,"A",{href:!0});var Set=s(WN);u4o=r(Set,"RobertaForCausalLM"),Set.forEach(t),_4o=r(GAe," (RoBERTa model)"),GAe.forEach(t),b4o=i(W),e1=n(W,"LI",{});var OAe=s(e1);Cie=n(OAe,"STRONG",{});var Ret=s(Cie);v4o=r(Ret,"roformer"),Ret.forEach(t),F4o=r(OAe," \u2014 "),HN=n(OAe,"A",{href:!0});var Bet=s(HN);T4o=r(Bet,"RoFormerForCausalLM"),Bet.forEach(t),M4o=r(OAe," (RoFormer model)"),OAe.forEach(t),E4o=i(W),o1=n(W,"LI",{});var VAe=s(o1);wie=n(VAe,"STRONG",{});var Pet=s(wie);C4o=r(Pet,"speech_to_text_2"),Pet.forEach(t),w4o=r(VAe," \u2014 "),UN=n(VAe,"A",{href:!0});var Iet=s(UN);A4o=r(Iet,"Speech2Text2ForCausalLM"),Iet.forEach(t),y4o=r(VAe," (Speech2Text2 model)"),VAe.forEach(t),L4o=i(W),r1=n(W,"LI",{});var XAe=s(r1);Aie=n(XAe,"STRONG",{});var qet=s(Aie);x4o=r(qet,"transfo-xl"),qet.forEach(t),$4o=r(XAe," \u2014 "),JN=n(XAe,"A",{href:!0});var Net=s(JN);k4o=r(Net,"TransfoXLLMHeadModel"),Net.forEach(t),S4o=r(XAe," (Transformer-XL model)"),XAe.forEach(t),R4o=i(W),t1=n(W,"LI",{});var zAe=s(t1);yie=n(zAe,"STRONG",{});var jet=s(yie);B4o=r(jet,"trocr"),jet.forEach(t),P4o=r(zAe," \u2014 "),YN=n(zAe,"A",{href:!0});var Det=s(YN);I4o=r(Det,"TrOCRForCausalLM"),Det.forEach(t),q4o=r(zAe," (TrOCR model)"),zAe.forEach(t),N4o=i(W),a1=n(W,"LI",{});var QAe=s(a1);Lie=n(QAe,"STRONG",{});var Get=s(Lie);j4o=r(Get,"xglm"),Get.forEach(t),D4o=r(QAe," \u2014 "),KN=n(QAe,"A",{href:!0});var Oet=s(KN);G4o=r(Oet,"XGLMForCausalLM"),Oet.forEach(t),O4o=r(QAe," (XGLM model)"),QAe.forEach(t),V4o=i(W),n1=n(W,"LI",{});var WAe=s(n1);xie=n(WAe,"STRONG",{});var Vet=s(xie);X4o=r(Vet,"xlm"),Vet.forEach(t),z4o=r(WAe," \u2014 "),ZN=n(WAe,"A",{href:!0});var Xet=s(ZN);Q4o=r(Xet,"XLMWithLMHeadModel"),Xet.forEach(t),W4o=r(WAe," (XLM model)"),WAe.forEach(t),H4o=i(W),s1=n(W,"LI",{});var HAe=s(s1);$ie=n(HAe,"STRONG",{});var zet=s($ie);U4o=r(zet,"xlm-prophetnet"),zet.forEach(t),J4o=r(HAe," \u2014 "),ej=n(HAe,"A",{href:!0});var Qet=s(ej);Y4o=r(Qet,"XLMProphetNetForCausalLM"),Qet.forEach(t),K4o=r(HAe," (XLMProphetNet model)"),HAe.forEach(t),Z4o=i(W),l1=n(W,"LI",{});var UAe=s(l1);kie=n(UAe,"STRONG",{});var Wet=s(kie);eEo=r(Wet,"xlm-roberta"),Wet.forEach(t),oEo=r(UAe," \u2014 "),oj=n(UAe,"A",{href:!0});var Het=s(oj);rEo=r(Het,"XLMRobertaForCausalLM"),Het.forEach(t),tEo=r(UAe," (XLM-RoBERTa model)"),UAe.forEach(t),aEo=i(W),i1=n(W,"LI",{});var JAe=s(i1);Sie=n(JAe,"STRONG",{});var Uet=s(Sie);nEo=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),sEo=r(JAe," \u2014 "),rj=n(JAe,"A",{href:!0});var Jet=s(rj);lEo=r(Jet,"XLMRobertaXLForCausalLM"),Jet.forEach(t),iEo=r(JAe," (XLM-RoBERTa-XL model)"),JAe.forEach(t),dEo=i(W),d1=n(W,"LI",{});var YAe=s(d1);Rie=n(YAe,"STRONG",{});var Yet=s(Rie);cEo=r(Yet,"xlnet"),Yet.forEach(t),fEo=r(YAe," \u2014 "),tj=n(YAe,"A",{href:!0});var Ket=s(tj);mEo=r(Ket,"XLNetLMHeadModel"),Ket.forEach(t),gEo=r(YAe," (XLNet model)"),YAe.forEach(t),W.forEach(t),hEo=i(oa),c1=n(oa,"P",{});var KAe=s(c1);pEo=r(KAe,"The model is set in evaluation mode by default using "),Bie=n(KAe,"CODE",{});var Zet=s(Bie);uEo=r(Zet,"model.eval()"),Zet.forEach(t),_Eo=r(KAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(KAe,"CODE",{});var eot=s(Pie);bEo=r(eot,"model.train()"),eot.forEach(t),KAe.forEach(t),vEo=i(oa),T(f1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),aIe=i(f),ki=n(f,"H2",{class:!0});var iNe=s(ki);m1=n(iNe,"A",{id:!0,class:!0,href:!0});var oot=s(m1);Iie=n(oot,"SPAN",{});var rot=s(Iie);T(NA.$$.fragment,rot),rot.forEach(t),oot.forEach(t),FEo=i(iNe),qie=n(iNe,"SPAN",{});var tot=s(qie);TEo=r(tot,"AutoModelForMaskedLM"),tot.forEach(t),iNe.forEach(t),nIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(jA.$$.fragment,Vs),MEo=i(Vs),Si=n(Vs,"P",{});var gK=s(Si);EEo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aj=n(gK,"A",{href:!0});var aot=s(aj);CEo=r(aot,"from_pretrained()"),aot.forEach(t),wEo=r(gK," class method or the "),nj=n(gK,"A",{href:!0});var not=s(nj);AEo=r(not,"from_config()"),not.forEach(t),yEo=r(gK,` class
method.`),gK.forEach(t),LEo=i(Vs),DA=n(Vs,"P",{});var dNe=s(DA);xEo=r(dNe,"This class cannot be instantiated directly using "),Nie=n(dNe,"CODE",{});var sot=s(Nie);$Eo=r(sot,"__init__()"),sot.forEach(t),kEo=r(dNe," (throws an error)."),dNe.forEach(t),SEo=i(Vs),at=n(Vs,"DIV",{class:!0});var n3=s(at);T(GA.$$.fragment,n3),REo=i(n3),jie=n(n3,"P",{});var lot=s(jie);BEo=r(lot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lot.forEach(t),PEo=i(n3),Ri=n(n3,"P",{});var hK=s(Ri);IEo=r(hK,`Note:
Loading a model from its configuration file does `),Die=n(hK,"STRONG",{});var iot=s(Die);qEo=r(iot,"not"),iot.forEach(t),NEo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n(hK,"A",{href:!0});var dot=s(sj);jEo=r(dot,"from_pretrained()"),dot.forEach(t),DEo=r(hK," to load the model weights."),hK.forEach(t),GEo=i(n3),T(g1.$$.fragment,n3),n3.forEach(t),OEo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(OA.$$.fragment,ra),VEo=i(ra),Gie=n(ra,"P",{});var cot=s(Gie);XEo=r(cot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cot.forEach(t),zEo=i(ra),xa=n(ra,"P",{});var s3=s(xa);QEo=r(s3,"The model class to instantiate is selected based on the "),Oie=n(s3,"CODE",{});var fot=s(Oie);WEo=r(fot,"model_type"),fot.forEach(t),HEo=r(s3,` property of the config object (either
passed as an argument or loaded from `),Vie=n(s3,"CODE",{});var mot=s(Vie);UEo=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),JEo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=n(s3,"CODE",{});var got=s(Xie);YEo=r(got,"pretrained_model_name_or_path"),got.forEach(t),KEo=r(s3,":"),s3.forEach(t),ZEo=i(ra),Q=n(ra,"UL",{});var H=s(Q);h1=n(H,"LI",{});var ZAe=s(h1);zie=n(ZAe,"STRONG",{});var hot=s(zie);e5o=r(hot,"albert"),hot.forEach(t),o5o=r(ZAe," \u2014 "),lj=n(ZAe,"A",{href:!0});var pot=s(lj);r5o=r(pot,"AlbertForMaskedLM"),pot.forEach(t),t5o=r(ZAe," (ALBERT model)"),ZAe.forEach(t),a5o=i(H),p1=n(H,"LI",{});var e0e=s(p1);Qie=n(e0e,"STRONG",{});var uot=s(Qie);n5o=r(uot,"bart"),uot.forEach(t),s5o=r(e0e," \u2014 "),ij=n(e0e,"A",{href:!0});var _ot=s(ij);l5o=r(_ot,"BartForConditionalGeneration"),_ot.forEach(t),i5o=r(e0e," (BART model)"),e0e.forEach(t),d5o=i(H),u1=n(H,"LI",{});var o0e=s(u1);Wie=n(o0e,"STRONG",{});var bot=s(Wie);c5o=r(bot,"bert"),bot.forEach(t),f5o=r(o0e," \u2014 "),dj=n(o0e,"A",{href:!0});var vot=s(dj);m5o=r(vot,"BertForMaskedLM"),vot.forEach(t),g5o=r(o0e," (BERT model)"),o0e.forEach(t),h5o=i(H),_1=n(H,"LI",{});var r0e=s(_1);Hie=n(r0e,"STRONG",{});var Fot=s(Hie);p5o=r(Fot,"big_bird"),Fot.forEach(t),u5o=r(r0e," \u2014 "),cj=n(r0e,"A",{href:!0});var Tot=s(cj);_5o=r(Tot,"BigBirdForMaskedLM"),Tot.forEach(t),b5o=r(r0e," (BigBird model)"),r0e.forEach(t),v5o=i(H),b1=n(H,"LI",{});var t0e=s(b1);Uie=n(t0e,"STRONG",{});var Mot=s(Uie);F5o=r(Mot,"camembert"),Mot.forEach(t),T5o=r(t0e," \u2014 "),fj=n(t0e,"A",{href:!0});var Eot=s(fj);M5o=r(Eot,"CamembertForMaskedLM"),Eot.forEach(t),E5o=r(t0e," (CamemBERT model)"),t0e.forEach(t),C5o=i(H),v1=n(H,"LI",{});var a0e=s(v1);Jie=n(a0e,"STRONG",{});var Cot=s(Jie);w5o=r(Cot,"convbert"),Cot.forEach(t),A5o=r(a0e," \u2014 "),mj=n(a0e,"A",{href:!0});var wot=s(mj);y5o=r(wot,"ConvBertForMaskedLM"),wot.forEach(t),L5o=r(a0e," (ConvBERT model)"),a0e.forEach(t),x5o=i(H),F1=n(H,"LI",{});var n0e=s(F1);Yie=n(n0e,"STRONG",{});var Aot=s(Yie);$5o=r(Aot,"data2vec-text"),Aot.forEach(t),k5o=r(n0e," \u2014 "),gj=n(n0e,"A",{href:!0});var yot=s(gj);S5o=r(yot,"Data2VecTextForMaskedLM"),yot.forEach(t),R5o=r(n0e," (Data2VecText model)"),n0e.forEach(t),B5o=i(H),T1=n(H,"LI",{});var s0e=s(T1);Kie=n(s0e,"STRONG",{});var Lot=s(Kie);P5o=r(Lot,"deberta"),Lot.forEach(t),I5o=r(s0e," \u2014 "),hj=n(s0e,"A",{href:!0});var xot=s(hj);q5o=r(xot,"DebertaForMaskedLM"),xot.forEach(t),N5o=r(s0e," (DeBERTa model)"),s0e.forEach(t),j5o=i(H),M1=n(H,"LI",{});var l0e=s(M1);Zie=n(l0e,"STRONG",{});var $ot=s(Zie);D5o=r($ot,"deberta-v2"),$ot.forEach(t),G5o=r(l0e," \u2014 "),pj=n(l0e,"A",{href:!0});var kot=s(pj);O5o=r(kot,"DebertaV2ForMaskedLM"),kot.forEach(t),V5o=r(l0e," (DeBERTa-v2 model)"),l0e.forEach(t),X5o=i(H),E1=n(H,"LI",{});var i0e=s(E1);ede=n(i0e,"STRONG",{});var Sot=s(ede);z5o=r(Sot,"distilbert"),Sot.forEach(t),Q5o=r(i0e," \u2014 "),uj=n(i0e,"A",{href:!0});var Rot=s(uj);W5o=r(Rot,"DistilBertForMaskedLM"),Rot.forEach(t),H5o=r(i0e," (DistilBERT model)"),i0e.forEach(t),U5o=i(H),C1=n(H,"LI",{});var d0e=s(C1);ode=n(d0e,"STRONG",{});var Bot=s(ode);J5o=r(Bot,"electra"),Bot.forEach(t),Y5o=r(d0e," \u2014 "),_j=n(d0e,"A",{href:!0});var Pot=s(_j);K5o=r(Pot,"ElectraForMaskedLM"),Pot.forEach(t),Z5o=r(d0e," (ELECTRA model)"),d0e.forEach(t),eCo=i(H),w1=n(H,"LI",{});var c0e=s(w1);rde=n(c0e,"STRONG",{});var Iot=s(rde);oCo=r(Iot,"flaubert"),Iot.forEach(t),rCo=r(c0e," \u2014 "),bj=n(c0e,"A",{href:!0});var qot=s(bj);tCo=r(qot,"FlaubertWithLMHeadModel"),qot.forEach(t),aCo=r(c0e," (FlauBERT model)"),c0e.forEach(t),nCo=i(H),A1=n(H,"LI",{});var f0e=s(A1);tde=n(f0e,"STRONG",{});var Not=s(tde);sCo=r(Not,"fnet"),Not.forEach(t),lCo=r(f0e," \u2014 "),vj=n(f0e,"A",{href:!0});var jot=s(vj);iCo=r(jot,"FNetForMaskedLM"),jot.forEach(t),dCo=r(f0e," (FNet model)"),f0e.forEach(t),cCo=i(H),y1=n(H,"LI",{});var m0e=s(y1);ade=n(m0e,"STRONG",{});var Dot=s(ade);fCo=r(Dot,"funnel"),Dot.forEach(t),mCo=r(m0e," \u2014 "),Fj=n(m0e,"A",{href:!0});var Got=s(Fj);gCo=r(Got,"FunnelForMaskedLM"),Got.forEach(t),hCo=r(m0e," (Funnel Transformer model)"),m0e.forEach(t),pCo=i(H),L1=n(H,"LI",{});var g0e=s(L1);nde=n(g0e,"STRONG",{});var Oot=s(nde);uCo=r(Oot,"ibert"),Oot.forEach(t),_Co=r(g0e," \u2014 "),Tj=n(g0e,"A",{href:!0});var Vot=s(Tj);bCo=r(Vot,"IBertForMaskedLM"),Vot.forEach(t),vCo=r(g0e," (I-BERT model)"),g0e.forEach(t),FCo=i(H),x1=n(H,"LI",{});var h0e=s(x1);sde=n(h0e,"STRONG",{});var Xot=s(sde);TCo=r(Xot,"layoutlm"),Xot.forEach(t),MCo=r(h0e," \u2014 "),Mj=n(h0e,"A",{href:!0});var zot=s(Mj);ECo=r(zot,"LayoutLMForMaskedLM"),zot.forEach(t),CCo=r(h0e," (LayoutLM model)"),h0e.forEach(t),wCo=i(H),$1=n(H,"LI",{});var p0e=s($1);lde=n(p0e,"STRONG",{});var Qot=s(lde);ACo=r(Qot,"longformer"),Qot.forEach(t),yCo=r(p0e," \u2014 "),Ej=n(p0e,"A",{href:!0});var Wot=s(Ej);LCo=r(Wot,"LongformerForMaskedLM"),Wot.forEach(t),xCo=r(p0e," (Longformer model)"),p0e.forEach(t),$Co=i(H),k1=n(H,"LI",{});var u0e=s(k1);ide=n(u0e,"STRONG",{});var Hot=s(ide);kCo=r(Hot,"mbart"),Hot.forEach(t),SCo=r(u0e," \u2014 "),Cj=n(u0e,"A",{href:!0});var Uot=s(Cj);RCo=r(Uot,"MBartForConditionalGeneration"),Uot.forEach(t),BCo=r(u0e," (mBART model)"),u0e.forEach(t),PCo=i(H),S1=n(H,"LI",{});var _0e=s(S1);dde=n(_0e,"STRONG",{});var Jot=s(dde);ICo=r(Jot,"megatron-bert"),Jot.forEach(t),qCo=r(_0e," \u2014 "),wj=n(_0e,"A",{href:!0});var Yot=s(wj);NCo=r(Yot,"MegatronBertForMaskedLM"),Yot.forEach(t),jCo=r(_0e," (MegatronBert model)"),_0e.forEach(t),DCo=i(H),R1=n(H,"LI",{});var b0e=s(R1);cde=n(b0e,"STRONG",{});var Kot=s(cde);GCo=r(Kot,"mobilebert"),Kot.forEach(t),OCo=r(b0e," \u2014 "),Aj=n(b0e,"A",{href:!0});var Zot=s(Aj);VCo=r(Zot,"MobileBertForMaskedLM"),Zot.forEach(t),XCo=r(b0e," (MobileBERT model)"),b0e.forEach(t),zCo=i(H),B1=n(H,"LI",{});var v0e=s(B1);fde=n(v0e,"STRONG",{});var ert=s(fde);QCo=r(ert,"mpnet"),ert.forEach(t),WCo=r(v0e," \u2014 "),yj=n(v0e,"A",{href:!0});var ort=s(yj);HCo=r(ort,"MPNetForMaskedLM"),ort.forEach(t),UCo=r(v0e," (MPNet model)"),v0e.forEach(t),JCo=i(H),P1=n(H,"LI",{});var F0e=s(P1);mde=n(F0e,"STRONG",{});var rrt=s(mde);YCo=r(rrt,"nystromformer"),rrt.forEach(t),KCo=r(F0e," \u2014 "),Lj=n(F0e,"A",{href:!0});var trt=s(Lj);ZCo=r(trt,"NystromformerForMaskedLM"),trt.forEach(t),e3o=r(F0e," (Nystromformer model)"),F0e.forEach(t),o3o=i(H),I1=n(H,"LI",{});var T0e=s(I1);gde=n(T0e,"STRONG",{});var art=s(gde);r3o=r(art,"perceiver"),art.forEach(t),t3o=r(T0e," \u2014 "),xj=n(T0e,"A",{href:!0});var nrt=s(xj);a3o=r(nrt,"PerceiverForMaskedLM"),nrt.forEach(t),n3o=r(T0e," (Perceiver model)"),T0e.forEach(t),s3o=i(H),q1=n(H,"LI",{});var M0e=s(q1);hde=n(M0e,"STRONG",{});var srt=s(hde);l3o=r(srt,"qdqbert"),srt.forEach(t),i3o=r(M0e," \u2014 "),$j=n(M0e,"A",{href:!0});var lrt=s($j);d3o=r(lrt,"QDQBertForMaskedLM"),lrt.forEach(t),c3o=r(M0e," (QDQBert model)"),M0e.forEach(t),f3o=i(H),N1=n(H,"LI",{});var E0e=s(N1);pde=n(E0e,"STRONG",{});var irt=s(pde);m3o=r(irt,"reformer"),irt.forEach(t),g3o=r(E0e," \u2014 "),kj=n(E0e,"A",{href:!0});var drt=s(kj);h3o=r(drt,"ReformerForMaskedLM"),drt.forEach(t),p3o=r(E0e," (Reformer model)"),E0e.forEach(t),u3o=i(H),j1=n(H,"LI",{});var C0e=s(j1);ude=n(C0e,"STRONG",{});var crt=s(ude);_3o=r(crt,"rembert"),crt.forEach(t),b3o=r(C0e," \u2014 "),Sj=n(C0e,"A",{href:!0});var frt=s(Sj);v3o=r(frt,"RemBertForMaskedLM"),frt.forEach(t),F3o=r(C0e," (RemBERT model)"),C0e.forEach(t),T3o=i(H),D1=n(H,"LI",{});var w0e=s(D1);_de=n(w0e,"STRONG",{});var mrt=s(_de);M3o=r(mrt,"roberta"),mrt.forEach(t),E3o=r(w0e," \u2014 "),Rj=n(w0e,"A",{href:!0});var grt=s(Rj);C3o=r(grt,"RobertaForMaskedLM"),grt.forEach(t),w3o=r(w0e," (RoBERTa model)"),w0e.forEach(t),A3o=i(H),G1=n(H,"LI",{});var A0e=s(G1);bde=n(A0e,"STRONG",{});var hrt=s(bde);y3o=r(hrt,"roformer"),hrt.forEach(t),L3o=r(A0e," \u2014 "),Bj=n(A0e,"A",{href:!0});var prt=s(Bj);x3o=r(prt,"RoFormerForMaskedLM"),prt.forEach(t),$3o=r(A0e," (RoFormer model)"),A0e.forEach(t),k3o=i(H),O1=n(H,"LI",{});var y0e=s(O1);vde=n(y0e,"STRONG",{});var urt=s(vde);S3o=r(urt,"squeezebert"),urt.forEach(t),R3o=r(y0e," \u2014 "),Pj=n(y0e,"A",{href:!0});var _rt=s(Pj);B3o=r(_rt,"SqueezeBertForMaskedLM"),_rt.forEach(t),P3o=r(y0e," (SqueezeBERT model)"),y0e.forEach(t),I3o=i(H),V1=n(H,"LI",{});var L0e=s(V1);Fde=n(L0e,"STRONG",{});var brt=s(Fde);q3o=r(brt,"tapas"),brt.forEach(t),N3o=r(L0e," \u2014 "),Ij=n(L0e,"A",{href:!0});var vrt=s(Ij);j3o=r(vrt,"TapasForMaskedLM"),vrt.forEach(t),D3o=r(L0e," (TAPAS model)"),L0e.forEach(t),G3o=i(H),X1=n(H,"LI",{});var x0e=s(X1);Tde=n(x0e,"STRONG",{});var Frt=s(Tde);O3o=r(Frt,"wav2vec2"),Frt.forEach(t),V3o=r(x0e," \u2014 "),Mde=n(x0e,"CODE",{});var Trt=s(Mde);X3o=r(Trt,"Wav2Vec2ForMaskedLM"),Trt.forEach(t),z3o=r(x0e," (Wav2Vec2 model)"),x0e.forEach(t),Q3o=i(H),z1=n(H,"LI",{});var $0e=s(z1);Ede=n($0e,"STRONG",{});var Mrt=s(Ede);W3o=r(Mrt,"xlm"),Mrt.forEach(t),H3o=r($0e," \u2014 "),qj=n($0e,"A",{href:!0});var Ert=s(qj);U3o=r(Ert,"XLMWithLMHeadModel"),Ert.forEach(t),J3o=r($0e," (XLM model)"),$0e.forEach(t),Y3o=i(H),Q1=n(H,"LI",{});var k0e=s(Q1);Cde=n(k0e,"STRONG",{});var Crt=s(Cde);K3o=r(Crt,"xlm-roberta"),Crt.forEach(t),Z3o=r(k0e," \u2014 "),Nj=n(k0e,"A",{href:!0});var wrt=s(Nj);ewo=r(wrt,"XLMRobertaForMaskedLM"),wrt.forEach(t),owo=r(k0e," (XLM-RoBERTa model)"),k0e.forEach(t),rwo=i(H),W1=n(H,"LI",{});var S0e=s(W1);wde=n(S0e,"STRONG",{});var Art=s(wde);two=r(Art,"xlm-roberta-xl"),Art.forEach(t),awo=r(S0e," \u2014 "),jj=n(S0e,"A",{href:!0});var yrt=s(jj);nwo=r(yrt,"XLMRobertaXLForMaskedLM"),yrt.forEach(t),swo=r(S0e," (XLM-RoBERTa-XL model)"),S0e.forEach(t),lwo=i(H),H1=n(H,"LI",{});var R0e=s(H1);Ade=n(R0e,"STRONG",{});var Lrt=s(Ade);iwo=r(Lrt,"yoso"),Lrt.forEach(t),dwo=r(R0e," \u2014 "),Dj=n(R0e,"A",{href:!0});var xrt=s(Dj);cwo=r(xrt,"YosoForMaskedLM"),xrt.forEach(t),fwo=r(R0e," (YOSO model)"),R0e.forEach(t),H.forEach(t),mwo=i(ra),U1=n(ra,"P",{});var B0e=s(U1);gwo=r(B0e,"The model is set in evaluation mode by default using "),yde=n(B0e,"CODE",{});var $rt=s(yde);hwo=r($rt,"model.eval()"),$rt.forEach(t),pwo=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=n(B0e,"CODE",{});var krt=s(Lde);uwo=r(krt,"model.train()"),krt.forEach(t),B0e.forEach(t),_wo=i(ra),T(J1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),sIe=i(f),Bi=n(f,"H2",{class:!0});var cNe=s(Bi);Y1=n(cNe,"A",{id:!0,class:!0,href:!0});var Srt=s(Y1);xde=n(Srt,"SPAN",{});var Rrt=s(xde);T(VA.$$.fragment,Rrt),Rrt.forEach(t),Srt.forEach(t),bwo=i(cNe),$de=n(cNe,"SPAN",{});var Brt=s($de);vwo=r(Brt,"AutoModelForSeq2SeqLM"),Brt.forEach(t),cNe.forEach(t),lIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(XA.$$.fragment,Xs),Fwo=i(Xs),Pi=n(Xs,"P",{});var pK=s(Pi);Two=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gj=n(pK,"A",{href:!0});var Prt=s(Gj);Mwo=r(Prt,"from_pretrained()"),Prt.forEach(t),Ewo=r(pK," class method or the "),Oj=n(pK,"A",{href:!0});var Irt=s(Oj);Cwo=r(Irt,"from_config()"),Irt.forEach(t),wwo=r(pK,` class
method.`),pK.forEach(t),Awo=i(Xs),zA=n(Xs,"P",{});var fNe=s(zA);ywo=r(fNe,"This class cannot be instantiated directly using "),kde=n(fNe,"CODE",{});var qrt=s(kde);Lwo=r(qrt,"__init__()"),qrt.forEach(t),xwo=r(fNe," (throws an error)."),fNe.forEach(t),$wo=i(Xs),nt=n(Xs,"DIV",{class:!0});var l3=s(nt);T(QA.$$.fragment,l3),kwo=i(l3),Sde=n(l3,"P",{});var Nrt=s(Sde);Swo=r(Nrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nrt.forEach(t),Rwo=i(l3),Ii=n(l3,"P",{});var uK=s(Ii);Bwo=r(uK,`Note:
Loading a model from its configuration file does `),Rde=n(uK,"STRONG",{});var jrt=s(Rde);Pwo=r(jrt,"not"),jrt.forEach(t),Iwo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(uK,"A",{href:!0});var Drt=s(Vj);qwo=r(Drt,"from_pretrained()"),Drt.forEach(t),Nwo=r(uK," to load the model weights."),uK.forEach(t),jwo=i(l3),T(K1.$$.fragment,l3),l3.forEach(t),Dwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(WA.$$.fragment,ta),Gwo=i(ta),Bde=n(ta,"P",{});var Grt=s(Bde);Owo=r(Grt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Grt.forEach(t),Vwo=i(ta),$a=n(ta,"P",{});var i3=s($a);Xwo=r(i3,"The model class to instantiate is selected based on the "),Pde=n(i3,"CODE",{});var Ort=s(Pde);zwo=r(Ort,"model_type"),Ort.forEach(t),Qwo=r(i3,` property of the config object (either
passed as an argument or loaded from `),Ide=n(i3,"CODE",{});var Vrt=s(Ide);Wwo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),Hwo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(i3,"CODE",{});var Xrt=s(qde);Uwo=r(Xrt,"pretrained_model_name_or_path"),Xrt.forEach(t),Jwo=r(i3,":"),i3.forEach(t),Ywo=i(ta),pe=n(ta,"UL",{});var be=s(pe);Z1=n(be,"LI",{});var P0e=s(Z1);Nde=n(P0e,"STRONG",{});var zrt=s(Nde);Kwo=r(zrt,"bart"),zrt.forEach(t),Zwo=r(P0e," \u2014 "),Xj=n(P0e,"A",{href:!0});var Qrt=s(Xj);eAo=r(Qrt,"BartForConditionalGeneration"),Qrt.forEach(t),oAo=r(P0e," (BART model)"),P0e.forEach(t),rAo=i(be),e8=n(be,"LI",{});var I0e=s(e8);jde=n(I0e,"STRONG",{});var Wrt=s(jde);tAo=r(Wrt,"bigbird_pegasus"),Wrt.forEach(t),aAo=r(I0e," \u2014 "),zj=n(I0e,"A",{href:!0});var Hrt=s(zj);nAo=r(Hrt,"BigBirdPegasusForConditionalGeneration"),Hrt.forEach(t),sAo=r(I0e," (BigBirdPegasus model)"),I0e.forEach(t),lAo=i(be),o8=n(be,"LI",{});var q0e=s(o8);Dde=n(q0e,"STRONG",{});var Urt=s(Dde);iAo=r(Urt,"blenderbot"),Urt.forEach(t),dAo=r(q0e," \u2014 "),Qj=n(q0e,"A",{href:!0});var Jrt=s(Qj);cAo=r(Jrt,"BlenderbotForConditionalGeneration"),Jrt.forEach(t),fAo=r(q0e," (Blenderbot model)"),q0e.forEach(t),mAo=i(be),r8=n(be,"LI",{});var N0e=s(r8);Gde=n(N0e,"STRONG",{});var Yrt=s(Gde);gAo=r(Yrt,"blenderbot-small"),Yrt.forEach(t),hAo=r(N0e," \u2014 "),Wj=n(N0e,"A",{href:!0});var Krt=s(Wj);pAo=r(Krt,"BlenderbotSmallForConditionalGeneration"),Krt.forEach(t),uAo=r(N0e," (BlenderbotSmall model)"),N0e.forEach(t),_Ao=i(be),t8=n(be,"LI",{});var j0e=s(t8);Ode=n(j0e,"STRONG",{});var Zrt=s(Ode);bAo=r(Zrt,"encoder-decoder"),Zrt.forEach(t),vAo=r(j0e," \u2014 "),Hj=n(j0e,"A",{href:!0});var ett=s(Hj);FAo=r(ett,"EncoderDecoderModel"),ett.forEach(t),TAo=r(j0e," (Encoder decoder model)"),j0e.forEach(t),MAo=i(be),a8=n(be,"LI",{});var D0e=s(a8);Vde=n(D0e,"STRONG",{});var ott=s(Vde);EAo=r(ott,"fsmt"),ott.forEach(t),CAo=r(D0e," \u2014 "),Uj=n(D0e,"A",{href:!0});var rtt=s(Uj);wAo=r(rtt,"FSMTForConditionalGeneration"),rtt.forEach(t),AAo=r(D0e," (FairSeq Machine-Translation model)"),D0e.forEach(t),yAo=i(be),n8=n(be,"LI",{});var G0e=s(n8);Xde=n(G0e,"STRONG",{});var ttt=s(Xde);LAo=r(ttt,"led"),ttt.forEach(t),xAo=r(G0e," \u2014 "),Jj=n(G0e,"A",{href:!0});var att=s(Jj);$Ao=r(att,"LEDForConditionalGeneration"),att.forEach(t),kAo=r(G0e," (LED model)"),G0e.forEach(t),SAo=i(be),s8=n(be,"LI",{});var O0e=s(s8);zde=n(O0e,"STRONG",{});var ntt=s(zde);RAo=r(ntt,"m2m_100"),ntt.forEach(t),BAo=r(O0e," \u2014 "),Yj=n(O0e,"A",{href:!0});var stt=s(Yj);PAo=r(stt,"M2M100ForConditionalGeneration"),stt.forEach(t),IAo=r(O0e," (M2M100 model)"),O0e.forEach(t),qAo=i(be),l8=n(be,"LI",{});var V0e=s(l8);Qde=n(V0e,"STRONG",{});var ltt=s(Qde);NAo=r(ltt,"marian"),ltt.forEach(t),jAo=r(V0e," \u2014 "),Kj=n(V0e,"A",{href:!0});var itt=s(Kj);DAo=r(itt,"MarianMTModel"),itt.forEach(t),GAo=r(V0e," (Marian model)"),V0e.forEach(t),OAo=i(be),i8=n(be,"LI",{});var X0e=s(i8);Wde=n(X0e,"STRONG",{});var dtt=s(Wde);VAo=r(dtt,"mbart"),dtt.forEach(t),XAo=r(X0e," \u2014 "),Zj=n(X0e,"A",{href:!0});var ctt=s(Zj);zAo=r(ctt,"MBartForConditionalGeneration"),ctt.forEach(t),QAo=r(X0e," (mBART model)"),X0e.forEach(t),WAo=i(be),d8=n(be,"LI",{});var z0e=s(d8);Hde=n(z0e,"STRONG",{});var ftt=s(Hde);HAo=r(ftt,"mt5"),ftt.forEach(t),UAo=r(z0e," \u2014 "),eD=n(z0e,"A",{href:!0});var mtt=s(eD);JAo=r(mtt,"MT5ForConditionalGeneration"),mtt.forEach(t),YAo=r(z0e," (mT5 model)"),z0e.forEach(t),KAo=i(be),c8=n(be,"LI",{});var Q0e=s(c8);Ude=n(Q0e,"STRONG",{});var gtt=s(Ude);ZAo=r(gtt,"pegasus"),gtt.forEach(t),e0o=r(Q0e," \u2014 "),oD=n(Q0e,"A",{href:!0});var htt=s(oD);o0o=r(htt,"PegasusForConditionalGeneration"),htt.forEach(t),r0o=r(Q0e," (Pegasus model)"),Q0e.forEach(t),t0o=i(be),f8=n(be,"LI",{});var W0e=s(f8);Jde=n(W0e,"STRONG",{});var ptt=s(Jde);a0o=r(ptt,"plbart"),ptt.forEach(t),n0o=r(W0e," \u2014 "),rD=n(W0e,"A",{href:!0});var utt=s(rD);s0o=r(utt,"PLBartForConditionalGeneration"),utt.forEach(t),l0o=r(W0e," (PLBart model)"),W0e.forEach(t),i0o=i(be),m8=n(be,"LI",{});var H0e=s(m8);Yde=n(H0e,"STRONG",{});var _tt=s(Yde);d0o=r(_tt,"prophetnet"),_tt.forEach(t),c0o=r(H0e," \u2014 "),tD=n(H0e,"A",{href:!0});var btt=s(tD);f0o=r(btt,"ProphetNetForConditionalGeneration"),btt.forEach(t),m0o=r(H0e," (ProphetNet model)"),H0e.forEach(t),g0o=i(be),g8=n(be,"LI",{});var U0e=s(g8);Kde=n(U0e,"STRONG",{});var vtt=s(Kde);h0o=r(vtt,"t5"),vtt.forEach(t),p0o=r(U0e," \u2014 "),aD=n(U0e,"A",{href:!0});var Ftt=s(aD);u0o=r(Ftt,"T5ForConditionalGeneration"),Ftt.forEach(t),_0o=r(U0e," (T5 model)"),U0e.forEach(t),b0o=i(be),h8=n(be,"LI",{});var J0e=s(h8);Zde=n(J0e,"STRONG",{});var Ttt=s(Zde);v0o=r(Ttt,"xlm-prophetnet"),Ttt.forEach(t),F0o=r(J0e," \u2014 "),nD=n(J0e,"A",{href:!0});var Mtt=s(nD);T0o=r(Mtt,"XLMProphetNetForConditionalGeneration"),Mtt.forEach(t),M0o=r(J0e," (XLMProphetNet model)"),J0e.forEach(t),be.forEach(t),E0o=i(ta),p8=n(ta,"P",{});var Y0e=s(p8);C0o=r(Y0e,"The model is set in evaluation mode by default using "),ece=n(Y0e,"CODE",{});var Ett=s(ece);w0o=r(Ett,"model.eval()"),Ett.forEach(t),A0o=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(Y0e,"CODE",{});var Ctt=s(oce);y0o=r(Ctt,"model.train()"),Ctt.forEach(t),Y0e.forEach(t),L0o=i(ta),T(u8.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),iIe=i(f),qi=n(f,"H2",{class:!0});var mNe=s(qi);_8=n(mNe,"A",{id:!0,class:!0,href:!0});var wtt=s(_8);rce=n(wtt,"SPAN",{});var Att=s(rce);T(HA.$$.fragment,Att),Att.forEach(t),wtt.forEach(t),x0o=i(mNe),tce=n(mNe,"SPAN",{});var ytt=s(tce);$0o=r(ytt,"AutoModelForSequenceClassification"),ytt.forEach(t),mNe.forEach(t),dIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(UA.$$.fragment,zs),k0o=i(zs),Ni=n(zs,"P",{});var _K=s(Ni);S0o=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=n(_K,"A",{href:!0});var Ltt=s(sD);R0o=r(Ltt,"from_pretrained()"),Ltt.forEach(t),B0o=r(_K," class method or the "),lD=n(_K,"A",{href:!0});var xtt=s(lD);P0o=r(xtt,"from_config()"),xtt.forEach(t),I0o=r(_K,` class
method.`),_K.forEach(t),q0o=i(zs),JA=n(zs,"P",{});var gNe=s(JA);N0o=r(gNe,"This class cannot be instantiated directly using "),ace=n(gNe,"CODE",{});var $tt=s(ace);j0o=r($tt,"__init__()"),$tt.forEach(t),D0o=r(gNe," (throws an error)."),gNe.forEach(t),G0o=i(zs),st=n(zs,"DIV",{class:!0});var d3=s(st);T(YA.$$.fragment,d3),O0o=i(d3),nce=n(d3,"P",{});var ktt=s(nce);V0o=r(ktt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ktt.forEach(t),X0o=i(d3),ji=n(d3,"P",{});var bK=s(ji);z0o=r(bK,`Note:
Loading a model from its configuration file does `),sce=n(bK,"STRONG",{});var Stt=s(sce);Q0o=r(Stt,"not"),Stt.forEach(t),W0o=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(bK,"A",{href:!0});var Rtt=s(iD);H0o=r(Rtt,"from_pretrained()"),Rtt.forEach(t),U0o=r(bK," to load the model weights."),bK.forEach(t),J0o=i(d3),T(b8.$$.fragment,d3),d3.forEach(t),Y0o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(KA.$$.fragment,aa),K0o=i(aa),lce=n(aa,"P",{});var Btt=s(lce);Z0o=r(Btt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Btt.forEach(t),eyo=i(aa),ka=n(aa,"P",{});var c3=s(ka);oyo=r(c3,"The model class to instantiate is selected based on the "),ice=n(c3,"CODE",{});var Ptt=s(ice);ryo=r(Ptt,"model_type"),Ptt.forEach(t),tyo=r(c3,` property of the config object (either
passed as an argument or loaded from `),dce=n(c3,"CODE",{});var Itt=s(dce);ayo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),nyo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(c3,"CODE",{});var qtt=s(cce);syo=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),lyo=r(c3,":"),c3.forEach(t),iyo=i(aa),q=n(aa,"UL",{});var j=s(q);v8=n(j,"LI",{});var K0e=s(v8);fce=n(K0e,"STRONG",{});var Ntt=s(fce);dyo=r(Ntt,"albert"),Ntt.forEach(t),cyo=r(K0e," \u2014 "),dD=n(K0e,"A",{href:!0});var jtt=s(dD);fyo=r(jtt,"AlbertForSequenceClassification"),jtt.forEach(t),myo=r(K0e," (ALBERT model)"),K0e.forEach(t),gyo=i(j),F8=n(j,"LI",{});var Z0e=s(F8);mce=n(Z0e,"STRONG",{});var Dtt=s(mce);hyo=r(Dtt,"bart"),Dtt.forEach(t),pyo=r(Z0e," \u2014 "),cD=n(Z0e,"A",{href:!0});var Gtt=s(cD);uyo=r(Gtt,"BartForSequenceClassification"),Gtt.forEach(t),_yo=r(Z0e," (BART model)"),Z0e.forEach(t),byo=i(j),T8=n(j,"LI",{});var eye=s(T8);gce=n(eye,"STRONG",{});var Ott=s(gce);vyo=r(Ott,"bert"),Ott.forEach(t),Fyo=r(eye," \u2014 "),fD=n(eye,"A",{href:!0});var Vtt=s(fD);Tyo=r(Vtt,"BertForSequenceClassification"),Vtt.forEach(t),Myo=r(eye," (BERT model)"),eye.forEach(t),Eyo=i(j),M8=n(j,"LI",{});var oye=s(M8);hce=n(oye,"STRONG",{});var Xtt=s(hce);Cyo=r(Xtt,"big_bird"),Xtt.forEach(t),wyo=r(oye," \u2014 "),mD=n(oye,"A",{href:!0});var ztt=s(mD);Ayo=r(ztt,"BigBirdForSequenceClassification"),ztt.forEach(t),yyo=r(oye," (BigBird model)"),oye.forEach(t),Lyo=i(j),E8=n(j,"LI",{});var rye=s(E8);pce=n(rye,"STRONG",{});var Qtt=s(pce);xyo=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),$yo=r(rye," \u2014 "),gD=n(rye,"A",{href:!0});var Wtt=s(gD);kyo=r(Wtt,"BigBirdPegasusForSequenceClassification"),Wtt.forEach(t),Syo=r(rye," (BigBirdPegasus model)"),rye.forEach(t),Ryo=i(j),C8=n(j,"LI",{});var tye=s(C8);uce=n(tye,"STRONG",{});var Htt=s(uce);Byo=r(Htt,"camembert"),Htt.forEach(t),Pyo=r(tye," \u2014 "),hD=n(tye,"A",{href:!0});var Utt=s(hD);Iyo=r(Utt,"CamembertForSequenceClassification"),Utt.forEach(t),qyo=r(tye," (CamemBERT model)"),tye.forEach(t),Nyo=i(j),w8=n(j,"LI",{});var aye=s(w8);_ce=n(aye,"STRONG",{});var Jtt=s(_ce);jyo=r(Jtt,"canine"),Jtt.forEach(t),Dyo=r(aye," \u2014 "),pD=n(aye,"A",{href:!0});var Ytt=s(pD);Gyo=r(Ytt,"CanineForSequenceClassification"),Ytt.forEach(t),Oyo=r(aye," (Canine model)"),aye.forEach(t),Vyo=i(j),A8=n(j,"LI",{});var nye=s(A8);bce=n(nye,"STRONG",{});var Ktt=s(bce);Xyo=r(Ktt,"convbert"),Ktt.forEach(t),zyo=r(nye," \u2014 "),uD=n(nye,"A",{href:!0});var Ztt=s(uD);Qyo=r(Ztt,"ConvBertForSequenceClassification"),Ztt.forEach(t),Wyo=r(nye," (ConvBERT model)"),nye.forEach(t),Hyo=i(j),y8=n(j,"LI",{});var sye=s(y8);vce=n(sye,"STRONG",{});var eat=s(vce);Uyo=r(eat,"ctrl"),eat.forEach(t),Jyo=r(sye," \u2014 "),_D=n(sye,"A",{href:!0});var oat=s(_D);Yyo=r(oat,"CTRLForSequenceClassification"),oat.forEach(t),Kyo=r(sye," (CTRL model)"),sye.forEach(t),Zyo=i(j),L8=n(j,"LI",{});var lye=s(L8);Fce=n(lye,"STRONG",{});var rat=s(Fce);eLo=r(rat,"data2vec-text"),rat.forEach(t),oLo=r(lye," \u2014 "),bD=n(lye,"A",{href:!0});var tat=s(bD);rLo=r(tat,"Data2VecTextForSequenceClassification"),tat.forEach(t),tLo=r(lye," (Data2VecText model)"),lye.forEach(t),aLo=i(j),x8=n(j,"LI",{});var iye=s(x8);Tce=n(iye,"STRONG",{});var aat=s(Tce);nLo=r(aat,"deberta"),aat.forEach(t),sLo=r(iye," \u2014 "),vD=n(iye,"A",{href:!0});var nat=s(vD);lLo=r(nat,"DebertaForSequenceClassification"),nat.forEach(t),iLo=r(iye," (DeBERTa model)"),iye.forEach(t),dLo=i(j),$8=n(j,"LI",{});var dye=s($8);Mce=n(dye,"STRONG",{});var sat=s(Mce);cLo=r(sat,"deberta-v2"),sat.forEach(t),fLo=r(dye," \u2014 "),FD=n(dye,"A",{href:!0});var lat=s(FD);mLo=r(lat,"DebertaV2ForSequenceClassification"),lat.forEach(t),gLo=r(dye," (DeBERTa-v2 model)"),dye.forEach(t),hLo=i(j),k8=n(j,"LI",{});var cye=s(k8);Ece=n(cye,"STRONG",{});var iat=s(Ece);pLo=r(iat,"distilbert"),iat.forEach(t),uLo=r(cye," \u2014 "),TD=n(cye,"A",{href:!0});var dat=s(TD);_Lo=r(dat,"DistilBertForSequenceClassification"),dat.forEach(t),bLo=r(cye," (DistilBERT model)"),cye.forEach(t),vLo=i(j),S8=n(j,"LI",{});var fye=s(S8);Cce=n(fye,"STRONG",{});var cat=s(Cce);FLo=r(cat,"electra"),cat.forEach(t),TLo=r(fye," \u2014 "),MD=n(fye,"A",{href:!0});var fat=s(MD);MLo=r(fat,"ElectraForSequenceClassification"),fat.forEach(t),ELo=r(fye," (ELECTRA model)"),fye.forEach(t),CLo=i(j),R8=n(j,"LI",{});var mye=s(R8);wce=n(mye,"STRONG",{});var mat=s(wce);wLo=r(mat,"flaubert"),mat.forEach(t),ALo=r(mye," \u2014 "),ED=n(mye,"A",{href:!0});var gat=s(ED);yLo=r(gat,"FlaubertForSequenceClassification"),gat.forEach(t),LLo=r(mye," (FlauBERT model)"),mye.forEach(t),xLo=i(j),B8=n(j,"LI",{});var gye=s(B8);Ace=n(gye,"STRONG",{});var hat=s(Ace);$Lo=r(hat,"fnet"),hat.forEach(t),kLo=r(gye," \u2014 "),CD=n(gye,"A",{href:!0});var pat=s(CD);SLo=r(pat,"FNetForSequenceClassification"),pat.forEach(t),RLo=r(gye," (FNet model)"),gye.forEach(t),BLo=i(j),P8=n(j,"LI",{});var hye=s(P8);yce=n(hye,"STRONG",{});var uat=s(yce);PLo=r(uat,"funnel"),uat.forEach(t),ILo=r(hye," \u2014 "),wD=n(hye,"A",{href:!0});var _at=s(wD);qLo=r(_at,"FunnelForSequenceClassification"),_at.forEach(t),NLo=r(hye," (Funnel Transformer model)"),hye.forEach(t),jLo=i(j),I8=n(j,"LI",{});var pye=s(I8);Lce=n(pye,"STRONG",{});var bat=s(Lce);DLo=r(bat,"gpt2"),bat.forEach(t),GLo=r(pye," \u2014 "),AD=n(pye,"A",{href:!0});var vat=s(AD);OLo=r(vat,"GPT2ForSequenceClassification"),vat.forEach(t),VLo=r(pye," (OpenAI GPT-2 model)"),pye.forEach(t),XLo=i(j),q8=n(j,"LI",{});var uye=s(q8);xce=n(uye,"STRONG",{});var Fat=s(xce);zLo=r(Fat,"gpt_neo"),Fat.forEach(t),QLo=r(uye," \u2014 "),yD=n(uye,"A",{href:!0});var Tat=s(yD);WLo=r(Tat,"GPTNeoForSequenceClassification"),Tat.forEach(t),HLo=r(uye," (GPT Neo model)"),uye.forEach(t),ULo=i(j),N8=n(j,"LI",{});var _ye=s(N8);$ce=n(_ye,"STRONG",{});var Mat=s($ce);JLo=r(Mat,"gptj"),Mat.forEach(t),YLo=r(_ye," \u2014 "),LD=n(_ye,"A",{href:!0});var Eat=s(LD);KLo=r(Eat,"GPTJForSequenceClassification"),Eat.forEach(t),ZLo=r(_ye," (GPT-J model)"),_ye.forEach(t),exo=i(j),j8=n(j,"LI",{});var bye=s(j8);kce=n(bye,"STRONG",{});var Cat=s(kce);oxo=r(Cat,"ibert"),Cat.forEach(t),rxo=r(bye," \u2014 "),xD=n(bye,"A",{href:!0});var wat=s(xD);txo=r(wat,"IBertForSequenceClassification"),wat.forEach(t),axo=r(bye," (I-BERT model)"),bye.forEach(t),nxo=i(j),D8=n(j,"LI",{});var vye=s(D8);Sce=n(vye,"STRONG",{});var Aat=s(Sce);sxo=r(Aat,"layoutlm"),Aat.forEach(t),lxo=r(vye," \u2014 "),$D=n(vye,"A",{href:!0});var yat=s($D);ixo=r(yat,"LayoutLMForSequenceClassification"),yat.forEach(t),dxo=r(vye," (LayoutLM model)"),vye.forEach(t),cxo=i(j),G8=n(j,"LI",{});var Fye=s(G8);Rce=n(Fye,"STRONG",{});var Lat=s(Rce);fxo=r(Lat,"layoutlmv2"),Lat.forEach(t),mxo=r(Fye," \u2014 "),kD=n(Fye,"A",{href:!0});var xat=s(kD);gxo=r(xat,"LayoutLMv2ForSequenceClassification"),xat.forEach(t),hxo=r(Fye," (LayoutLMv2 model)"),Fye.forEach(t),pxo=i(j),O8=n(j,"LI",{});var Tye=s(O8);Bce=n(Tye,"STRONG",{});var $at=s(Bce);uxo=r($at,"led"),$at.forEach(t),_xo=r(Tye," \u2014 "),SD=n(Tye,"A",{href:!0});var kat=s(SD);bxo=r(kat,"LEDForSequenceClassification"),kat.forEach(t),vxo=r(Tye," (LED model)"),Tye.forEach(t),Fxo=i(j),V8=n(j,"LI",{});var Mye=s(V8);Pce=n(Mye,"STRONG",{});var Sat=s(Pce);Txo=r(Sat,"longformer"),Sat.forEach(t),Mxo=r(Mye," \u2014 "),RD=n(Mye,"A",{href:!0});var Rat=s(RD);Exo=r(Rat,"LongformerForSequenceClassification"),Rat.forEach(t),Cxo=r(Mye," (Longformer model)"),Mye.forEach(t),wxo=i(j),X8=n(j,"LI",{});var Eye=s(X8);Ice=n(Eye,"STRONG",{});var Bat=s(Ice);Axo=r(Bat,"mbart"),Bat.forEach(t),yxo=r(Eye," \u2014 "),BD=n(Eye,"A",{href:!0});var Pat=s(BD);Lxo=r(Pat,"MBartForSequenceClassification"),Pat.forEach(t),xxo=r(Eye," (mBART model)"),Eye.forEach(t),$xo=i(j),z8=n(j,"LI",{});var Cye=s(z8);qce=n(Cye,"STRONG",{});var Iat=s(qce);kxo=r(Iat,"megatron-bert"),Iat.forEach(t),Sxo=r(Cye," \u2014 "),PD=n(Cye,"A",{href:!0});var qat=s(PD);Rxo=r(qat,"MegatronBertForSequenceClassification"),qat.forEach(t),Bxo=r(Cye," (MegatronBert model)"),Cye.forEach(t),Pxo=i(j),Q8=n(j,"LI",{});var wye=s(Q8);Nce=n(wye,"STRONG",{});var Nat=s(Nce);Ixo=r(Nat,"mobilebert"),Nat.forEach(t),qxo=r(wye," \u2014 "),ID=n(wye,"A",{href:!0});var jat=s(ID);Nxo=r(jat,"MobileBertForSequenceClassification"),jat.forEach(t),jxo=r(wye," (MobileBERT model)"),wye.forEach(t),Dxo=i(j),W8=n(j,"LI",{});var Aye=s(W8);jce=n(Aye,"STRONG",{});var Dat=s(jce);Gxo=r(Dat,"mpnet"),Dat.forEach(t),Oxo=r(Aye," \u2014 "),qD=n(Aye,"A",{href:!0});var Gat=s(qD);Vxo=r(Gat,"MPNetForSequenceClassification"),Gat.forEach(t),Xxo=r(Aye," (MPNet model)"),Aye.forEach(t),zxo=i(j),H8=n(j,"LI",{});var yye=s(H8);Dce=n(yye,"STRONG",{});var Oat=s(Dce);Qxo=r(Oat,"nystromformer"),Oat.forEach(t),Wxo=r(yye," \u2014 "),ND=n(yye,"A",{href:!0});var Vat=s(ND);Hxo=r(Vat,"NystromformerForSequenceClassification"),Vat.forEach(t),Uxo=r(yye," (Nystromformer model)"),yye.forEach(t),Jxo=i(j),U8=n(j,"LI",{});var Lye=s(U8);Gce=n(Lye,"STRONG",{});var Xat=s(Gce);Yxo=r(Xat,"openai-gpt"),Xat.forEach(t),Kxo=r(Lye," \u2014 "),jD=n(Lye,"A",{href:!0});var zat=s(jD);Zxo=r(zat,"OpenAIGPTForSequenceClassification"),zat.forEach(t),e7o=r(Lye," (OpenAI GPT model)"),Lye.forEach(t),o7o=i(j),J8=n(j,"LI",{});var xye=s(J8);Oce=n(xye,"STRONG",{});var Qat=s(Oce);r7o=r(Qat,"perceiver"),Qat.forEach(t),t7o=r(xye," \u2014 "),DD=n(xye,"A",{href:!0});var Wat=s(DD);a7o=r(Wat,"PerceiverForSequenceClassification"),Wat.forEach(t),n7o=r(xye," (Perceiver model)"),xye.forEach(t),s7o=i(j),Y8=n(j,"LI",{});var $ye=s(Y8);Vce=n($ye,"STRONG",{});var Hat=s(Vce);l7o=r(Hat,"plbart"),Hat.forEach(t),i7o=r($ye," \u2014 "),GD=n($ye,"A",{href:!0});var Uat=s(GD);d7o=r(Uat,"PLBartForSequenceClassification"),Uat.forEach(t),c7o=r($ye," (PLBart model)"),$ye.forEach(t),f7o=i(j),K8=n(j,"LI",{});var kye=s(K8);Xce=n(kye,"STRONG",{});var Jat=s(Xce);m7o=r(Jat,"qdqbert"),Jat.forEach(t),g7o=r(kye," \u2014 "),OD=n(kye,"A",{href:!0});var Yat=s(OD);h7o=r(Yat,"QDQBertForSequenceClassification"),Yat.forEach(t),p7o=r(kye," (QDQBert model)"),kye.forEach(t),u7o=i(j),Z8=n(j,"LI",{});var Sye=s(Z8);zce=n(Sye,"STRONG",{});var Kat=s(zce);_7o=r(Kat,"reformer"),Kat.forEach(t),b7o=r(Sye," \u2014 "),VD=n(Sye,"A",{href:!0});var Zat=s(VD);v7o=r(Zat,"ReformerForSequenceClassification"),Zat.forEach(t),F7o=r(Sye," (Reformer model)"),Sye.forEach(t),T7o=i(j),eb=n(j,"LI",{});var Rye=s(eb);Qce=n(Rye,"STRONG",{});var ent=s(Qce);M7o=r(ent,"rembert"),ent.forEach(t),E7o=r(Rye," \u2014 "),XD=n(Rye,"A",{href:!0});var ont=s(XD);C7o=r(ont,"RemBertForSequenceClassification"),ont.forEach(t),w7o=r(Rye," (RemBERT model)"),Rye.forEach(t),A7o=i(j),ob=n(j,"LI",{});var Bye=s(ob);Wce=n(Bye,"STRONG",{});var rnt=s(Wce);y7o=r(rnt,"roberta"),rnt.forEach(t),L7o=r(Bye," \u2014 "),zD=n(Bye,"A",{href:!0});var tnt=s(zD);x7o=r(tnt,"RobertaForSequenceClassification"),tnt.forEach(t),$7o=r(Bye," (RoBERTa model)"),Bye.forEach(t),k7o=i(j),rb=n(j,"LI",{});var Pye=s(rb);Hce=n(Pye,"STRONG",{});var ant=s(Hce);S7o=r(ant,"roformer"),ant.forEach(t),R7o=r(Pye," \u2014 "),QD=n(Pye,"A",{href:!0});var nnt=s(QD);B7o=r(nnt,"RoFormerForSequenceClassification"),nnt.forEach(t),P7o=r(Pye," (RoFormer model)"),Pye.forEach(t),I7o=i(j),tb=n(j,"LI",{});var Iye=s(tb);Uce=n(Iye,"STRONG",{});var snt=s(Uce);q7o=r(snt,"squeezebert"),snt.forEach(t),N7o=r(Iye," \u2014 "),WD=n(Iye,"A",{href:!0});var lnt=s(WD);j7o=r(lnt,"SqueezeBertForSequenceClassification"),lnt.forEach(t),D7o=r(Iye," (SqueezeBERT model)"),Iye.forEach(t),G7o=i(j),ab=n(j,"LI",{});var qye=s(ab);Jce=n(qye,"STRONG",{});var int=s(Jce);O7o=r(int,"tapas"),int.forEach(t),V7o=r(qye," \u2014 "),HD=n(qye,"A",{href:!0});var dnt=s(HD);X7o=r(dnt,"TapasForSequenceClassification"),dnt.forEach(t),z7o=r(qye," (TAPAS model)"),qye.forEach(t),Q7o=i(j),nb=n(j,"LI",{});var Nye=s(nb);Yce=n(Nye,"STRONG",{});var cnt=s(Yce);W7o=r(cnt,"transfo-xl"),cnt.forEach(t),H7o=r(Nye," \u2014 "),UD=n(Nye,"A",{href:!0});var fnt=s(UD);U7o=r(fnt,"TransfoXLForSequenceClassification"),fnt.forEach(t),J7o=r(Nye," (Transformer-XL model)"),Nye.forEach(t),Y7o=i(j),sb=n(j,"LI",{});var jye=s(sb);Kce=n(jye,"STRONG",{});var mnt=s(Kce);K7o=r(mnt,"xlm"),mnt.forEach(t),Z7o=r(jye," \u2014 "),JD=n(jye,"A",{href:!0});var gnt=s(JD);e$o=r(gnt,"XLMForSequenceClassification"),gnt.forEach(t),o$o=r(jye," (XLM model)"),jye.forEach(t),r$o=i(j),lb=n(j,"LI",{});var Dye=s(lb);Zce=n(Dye,"STRONG",{});var hnt=s(Zce);t$o=r(hnt,"xlm-roberta"),hnt.forEach(t),a$o=r(Dye," \u2014 "),YD=n(Dye,"A",{href:!0});var pnt=s(YD);n$o=r(pnt,"XLMRobertaForSequenceClassification"),pnt.forEach(t),s$o=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),l$o=i(j),ib=n(j,"LI",{});var Gye=s(ib);efe=n(Gye,"STRONG",{});var unt=s(efe);i$o=r(unt,"xlm-roberta-xl"),unt.forEach(t),d$o=r(Gye," \u2014 "),KD=n(Gye,"A",{href:!0});var _nt=s(KD);c$o=r(_nt,"XLMRobertaXLForSequenceClassification"),_nt.forEach(t),f$o=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),m$o=i(j),db=n(j,"LI",{});var Oye=s(db);ofe=n(Oye,"STRONG",{});var bnt=s(ofe);g$o=r(bnt,"xlnet"),bnt.forEach(t),h$o=r(Oye," \u2014 "),ZD=n(Oye,"A",{href:!0});var vnt=s(ZD);p$o=r(vnt,"XLNetForSequenceClassification"),vnt.forEach(t),u$o=r(Oye," (XLNet model)"),Oye.forEach(t),_$o=i(j),cb=n(j,"LI",{});var Vye=s(cb);rfe=n(Vye,"STRONG",{});var Fnt=s(rfe);b$o=r(Fnt,"yoso"),Fnt.forEach(t),v$o=r(Vye," \u2014 "),eG=n(Vye,"A",{href:!0});var Tnt=s(eG);F$o=r(Tnt,"YosoForSequenceClassification"),Tnt.forEach(t),T$o=r(Vye," (YOSO model)"),Vye.forEach(t),j.forEach(t),M$o=i(aa),fb=n(aa,"P",{});var Xye=s(fb);E$o=r(Xye,"The model is set in evaluation mode by default using "),tfe=n(Xye,"CODE",{});var Mnt=s(tfe);C$o=r(Mnt,"model.eval()"),Mnt.forEach(t),w$o=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(Xye,"CODE",{});var Ent=s(afe);A$o=r(Ent,"model.train()"),Ent.forEach(t),Xye.forEach(t),y$o=i(aa),T(mb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),cIe=i(f),Di=n(f,"H2",{class:!0});var hNe=s(Di);gb=n(hNe,"A",{id:!0,class:!0,href:!0});var Cnt=s(gb);nfe=n(Cnt,"SPAN",{});var wnt=s(nfe);T(ZA.$$.fragment,wnt),wnt.forEach(t),Cnt.forEach(t),L$o=i(hNe),sfe=n(hNe,"SPAN",{});var Ant=s(sfe);x$o=r(Ant,"AutoModelForMultipleChoice"),Ant.forEach(t),hNe.forEach(t),fIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(e0.$$.fragment,Qs),$$o=i(Qs),Gi=n(Qs,"P",{});var vK=s(Gi);k$o=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oG=n(vK,"A",{href:!0});var ynt=s(oG);S$o=r(ynt,"from_pretrained()"),ynt.forEach(t),R$o=r(vK," class method or the "),rG=n(vK,"A",{href:!0});var Lnt=s(rG);B$o=r(Lnt,"from_config()"),Lnt.forEach(t),P$o=r(vK,` class
method.`),vK.forEach(t),I$o=i(Qs),o0=n(Qs,"P",{});var pNe=s(o0);q$o=r(pNe,"This class cannot be instantiated directly using "),lfe=n(pNe,"CODE",{});var xnt=s(lfe);N$o=r(xnt,"__init__()"),xnt.forEach(t),j$o=r(pNe," (throws an error)."),pNe.forEach(t),D$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var f3=s(lt);T(r0.$$.fragment,f3),G$o=i(f3),ife=n(f3,"P",{});var $nt=s(ife);O$o=r($nt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$nt.forEach(t),V$o=i(f3),Oi=n(f3,"P",{});var FK=s(Oi);X$o=r(FK,`Note:
Loading a model from its configuration file does `),dfe=n(FK,"STRONG",{});var knt=s(dfe);z$o=r(knt,"not"),knt.forEach(t),Q$o=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(FK,"A",{href:!0});var Snt=s(tG);W$o=r(Snt,"from_pretrained()"),Snt.forEach(t),H$o=r(FK," to load the model weights."),FK.forEach(t),U$o=i(f3),T(hb.$$.fragment,f3),f3.forEach(t),J$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(t0.$$.fragment,na),Y$o=i(na),cfe=n(na,"P",{});var Rnt=s(cfe);K$o=r(Rnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rnt.forEach(t),Z$o=i(na),Sa=n(na,"P",{});var m3=s(Sa);eko=r(m3,"The model class to instantiate is selected based on the "),ffe=n(m3,"CODE",{});var Bnt=s(ffe);oko=r(Bnt,"model_type"),Bnt.forEach(t),rko=r(m3,` property of the config object (either
passed as an argument or loaded from `),mfe=n(m3,"CODE",{});var Pnt=s(mfe);tko=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),ako=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(m3,"CODE",{});var Int=s(gfe);nko=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),sko=r(m3,":"),m3.forEach(t),lko=i(na),Y=n(na,"UL",{});var K=s(Y);pb=n(K,"LI",{});var zye=s(pb);hfe=n(zye,"STRONG",{});var qnt=s(hfe);iko=r(qnt,"albert"),qnt.forEach(t),dko=r(zye," \u2014 "),aG=n(zye,"A",{href:!0});var Nnt=s(aG);cko=r(Nnt,"AlbertForMultipleChoice"),Nnt.forEach(t),fko=r(zye," (ALBERT model)"),zye.forEach(t),mko=i(K),ub=n(K,"LI",{});var Qye=s(ub);pfe=n(Qye,"STRONG",{});var jnt=s(pfe);gko=r(jnt,"bert"),jnt.forEach(t),hko=r(Qye," \u2014 "),nG=n(Qye,"A",{href:!0});var Dnt=s(nG);pko=r(Dnt,"BertForMultipleChoice"),Dnt.forEach(t),uko=r(Qye," (BERT model)"),Qye.forEach(t),_ko=i(K),_b=n(K,"LI",{});var Wye=s(_b);ufe=n(Wye,"STRONG",{});var Gnt=s(ufe);bko=r(Gnt,"big_bird"),Gnt.forEach(t),vko=r(Wye," \u2014 "),sG=n(Wye,"A",{href:!0});var Ont=s(sG);Fko=r(Ont,"BigBirdForMultipleChoice"),Ont.forEach(t),Tko=r(Wye," (BigBird model)"),Wye.forEach(t),Mko=i(K),bb=n(K,"LI",{});var Hye=s(bb);_fe=n(Hye,"STRONG",{});var Vnt=s(_fe);Eko=r(Vnt,"camembert"),Vnt.forEach(t),Cko=r(Hye," \u2014 "),lG=n(Hye,"A",{href:!0});var Xnt=s(lG);wko=r(Xnt,"CamembertForMultipleChoice"),Xnt.forEach(t),Ako=r(Hye," (CamemBERT model)"),Hye.forEach(t),yko=i(K),vb=n(K,"LI",{});var Uye=s(vb);bfe=n(Uye,"STRONG",{});var znt=s(bfe);Lko=r(znt,"canine"),znt.forEach(t),xko=r(Uye," \u2014 "),iG=n(Uye,"A",{href:!0});var Qnt=s(iG);$ko=r(Qnt,"CanineForMultipleChoice"),Qnt.forEach(t),kko=r(Uye," (Canine model)"),Uye.forEach(t),Sko=i(K),Fb=n(K,"LI",{});var Jye=s(Fb);vfe=n(Jye,"STRONG",{});var Wnt=s(vfe);Rko=r(Wnt,"convbert"),Wnt.forEach(t),Bko=r(Jye," \u2014 "),dG=n(Jye,"A",{href:!0});var Hnt=s(dG);Pko=r(Hnt,"ConvBertForMultipleChoice"),Hnt.forEach(t),Iko=r(Jye," (ConvBERT model)"),Jye.forEach(t),qko=i(K),Tb=n(K,"LI",{});var Yye=s(Tb);Ffe=n(Yye,"STRONG",{});var Unt=s(Ffe);Nko=r(Unt,"data2vec-text"),Unt.forEach(t),jko=r(Yye," \u2014 "),cG=n(Yye,"A",{href:!0});var Jnt=s(cG);Dko=r(Jnt,"Data2VecTextForMultipleChoice"),Jnt.forEach(t),Gko=r(Yye," (Data2VecText model)"),Yye.forEach(t),Oko=i(K),Mb=n(K,"LI",{});var Kye=s(Mb);Tfe=n(Kye,"STRONG",{});var Ynt=s(Tfe);Vko=r(Ynt,"deberta-v2"),Ynt.forEach(t),Xko=r(Kye," \u2014 "),fG=n(Kye,"A",{href:!0});var Knt=s(fG);zko=r(Knt,"DebertaV2ForMultipleChoice"),Knt.forEach(t),Qko=r(Kye," (DeBERTa-v2 model)"),Kye.forEach(t),Wko=i(K),Eb=n(K,"LI",{});var Zye=s(Eb);Mfe=n(Zye,"STRONG",{});var Znt=s(Mfe);Hko=r(Znt,"distilbert"),Znt.forEach(t),Uko=r(Zye," \u2014 "),mG=n(Zye,"A",{href:!0});var est=s(mG);Jko=r(est,"DistilBertForMultipleChoice"),est.forEach(t),Yko=r(Zye," (DistilBERT model)"),Zye.forEach(t),Kko=i(K),Cb=n(K,"LI",{});var eLe=s(Cb);Efe=n(eLe,"STRONG",{});var ost=s(Efe);Zko=r(ost,"electra"),ost.forEach(t),eSo=r(eLe," \u2014 "),gG=n(eLe,"A",{href:!0});var rst=s(gG);oSo=r(rst,"ElectraForMultipleChoice"),rst.forEach(t),rSo=r(eLe," (ELECTRA model)"),eLe.forEach(t),tSo=i(K),wb=n(K,"LI",{});var oLe=s(wb);Cfe=n(oLe,"STRONG",{});var tst=s(Cfe);aSo=r(tst,"flaubert"),tst.forEach(t),nSo=r(oLe," \u2014 "),hG=n(oLe,"A",{href:!0});var ast=s(hG);sSo=r(ast,"FlaubertForMultipleChoice"),ast.forEach(t),lSo=r(oLe," (FlauBERT model)"),oLe.forEach(t),iSo=i(K),Ab=n(K,"LI",{});var rLe=s(Ab);wfe=n(rLe,"STRONG",{});var nst=s(wfe);dSo=r(nst,"fnet"),nst.forEach(t),cSo=r(rLe," \u2014 "),pG=n(rLe,"A",{href:!0});var sst=s(pG);fSo=r(sst,"FNetForMultipleChoice"),sst.forEach(t),mSo=r(rLe," (FNet model)"),rLe.forEach(t),gSo=i(K),yb=n(K,"LI",{});var tLe=s(yb);Afe=n(tLe,"STRONG",{});var lst=s(Afe);hSo=r(lst,"funnel"),lst.forEach(t),pSo=r(tLe," \u2014 "),uG=n(tLe,"A",{href:!0});var ist=s(uG);uSo=r(ist,"FunnelForMultipleChoice"),ist.forEach(t),_So=r(tLe," (Funnel Transformer model)"),tLe.forEach(t),bSo=i(K),Lb=n(K,"LI",{});var aLe=s(Lb);yfe=n(aLe,"STRONG",{});var dst=s(yfe);vSo=r(dst,"ibert"),dst.forEach(t),FSo=r(aLe," \u2014 "),_G=n(aLe,"A",{href:!0});var cst=s(_G);TSo=r(cst,"IBertForMultipleChoice"),cst.forEach(t),MSo=r(aLe," (I-BERT model)"),aLe.forEach(t),ESo=i(K),xb=n(K,"LI",{});var nLe=s(xb);Lfe=n(nLe,"STRONG",{});var fst=s(Lfe);CSo=r(fst,"longformer"),fst.forEach(t),wSo=r(nLe," \u2014 "),bG=n(nLe,"A",{href:!0});var mst=s(bG);ASo=r(mst,"LongformerForMultipleChoice"),mst.forEach(t),ySo=r(nLe," (Longformer model)"),nLe.forEach(t),LSo=i(K),$b=n(K,"LI",{});var sLe=s($b);xfe=n(sLe,"STRONG",{});var gst=s(xfe);xSo=r(gst,"megatron-bert"),gst.forEach(t),$So=r(sLe," \u2014 "),vG=n(sLe,"A",{href:!0});var hst=s(vG);kSo=r(hst,"MegatronBertForMultipleChoice"),hst.forEach(t),SSo=r(sLe," (MegatronBert model)"),sLe.forEach(t),RSo=i(K),kb=n(K,"LI",{});var lLe=s(kb);$fe=n(lLe,"STRONG",{});var pst=s($fe);BSo=r(pst,"mobilebert"),pst.forEach(t),PSo=r(lLe," \u2014 "),FG=n(lLe,"A",{href:!0});var ust=s(FG);ISo=r(ust,"MobileBertForMultipleChoice"),ust.forEach(t),qSo=r(lLe," (MobileBERT model)"),lLe.forEach(t),NSo=i(K),Sb=n(K,"LI",{});var iLe=s(Sb);kfe=n(iLe,"STRONG",{});var _st=s(kfe);jSo=r(_st,"mpnet"),_st.forEach(t),DSo=r(iLe," \u2014 "),TG=n(iLe,"A",{href:!0});var bst=s(TG);GSo=r(bst,"MPNetForMultipleChoice"),bst.forEach(t),OSo=r(iLe," (MPNet model)"),iLe.forEach(t),VSo=i(K),Rb=n(K,"LI",{});var dLe=s(Rb);Sfe=n(dLe,"STRONG",{});var vst=s(Sfe);XSo=r(vst,"nystromformer"),vst.forEach(t),zSo=r(dLe," \u2014 "),MG=n(dLe,"A",{href:!0});var Fst=s(MG);QSo=r(Fst,"NystromformerForMultipleChoice"),Fst.forEach(t),WSo=r(dLe," (Nystromformer model)"),dLe.forEach(t),HSo=i(K),Bb=n(K,"LI",{});var cLe=s(Bb);Rfe=n(cLe,"STRONG",{});var Tst=s(Rfe);USo=r(Tst,"qdqbert"),Tst.forEach(t),JSo=r(cLe," \u2014 "),EG=n(cLe,"A",{href:!0});var Mst=s(EG);YSo=r(Mst,"QDQBertForMultipleChoice"),Mst.forEach(t),KSo=r(cLe," (QDQBert model)"),cLe.forEach(t),ZSo=i(K),Pb=n(K,"LI",{});var fLe=s(Pb);Bfe=n(fLe,"STRONG",{});var Est=s(Bfe);eRo=r(Est,"rembert"),Est.forEach(t),oRo=r(fLe," \u2014 "),CG=n(fLe,"A",{href:!0});var Cst=s(CG);rRo=r(Cst,"RemBertForMultipleChoice"),Cst.forEach(t),tRo=r(fLe," (RemBERT model)"),fLe.forEach(t),aRo=i(K),Ib=n(K,"LI",{});var mLe=s(Ib);Pfe=n(mLe,"STRONG",{});var wst=s(Pfe);nRo=r(wst,"roberta"),wst.forEach(t),sRo=r(mLe," \u2014 "),wG=n(mLe,"A",{href:!0});var Ast=s(wG);lRo=r(Ast,"RobertaForMultipleChoice"),Ast.forEach(t),iRo=r(mLe," (RoBERTa model)"),mLe.forEach(t),dRo=i(K),qb=n(K,"LI",{});var gLe=s(qb);Ife=n(gLe,"STRONG",{});var yst=s(Ife);cRo=r(yst,"roformer"),yst.forEach(t),fRo=r(gLe," \u2014 "),AG=n(gLe,"A",{href:!0});var Lst=s(AG);mRo=r(Lst,"RoFormerForMultipleChoice"),Lst.forEach(t),gRo=r(gLe," (RoFormer model)"),gLe.forEach(t),hRo=i(K),Nb=n(K,"LI",{});var hLe=s(Nb);qfe=n(hLe,"STRONG",{});var xst=s(qfe);pRo=r(xst,"squeezebert"),xst.forEach(t),uRo=r(hLe," \u2014 "),yG=n(hLe,"A",{href:!0});var $st=s(yG);_Ro=r($st,"SqueezeBertForMultipleChoice"),$st.forEach(t),bRo=r(hLe," (SqueezeBERT model)"),hLe.forEach(t),vRo=i(K),jb=n(K,"LI",{});var pLe=s(jb);Nfe=n(pLe,"STRONG",{});var kst=s(Nfe);FRo=r(kst,"xlm"),kst.forEach(t),TRo=r(pLe," \u2014 "),LG=n(pLe,"A",{href:!0});var Sst=s(LG);MRo=r(Sst,"XLMForMultipleChoice"),Sst.forEach(t),ERo=r(pLe," (XLM model)"),pLe.forEach(t),CRo=i(K),Db=n(K,"LI",{});var uLe=s(Db);jfe=n(uLe,"STRONG",{});var Rst=s(jfe);wRo=r(Rst,"xlm-roberta"),Rst.forEach(t),ARo=r(uLe," \u2014 "),xG=n(uLe,"A",{href:!0});var Bst=s(xG);yRo=r(Bst,"XLMRobertaForMultipleChoice"),Bst.forEach(t),LRo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),xRo=i(K),Gb=n(K,"LI",{});var _Le=s(Gb);Dfe=n(_Le,"STRONG",{});var Pst=s(Dfe);$Ro=r(Pst,"xlm-roberta-xl"),Pst.forEach(t),kRo=r(_Le," \u2014 "),$G=n(_Le,"A",{href:!0});var Ist=s($G);SRo=r(Ist,"XLMRobertaXLForMultipleChoice"),Ist.forEach(t),RRo=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),BRo=i(K),Ob=n(K,"LI",{});var bLe=s(Ob);Gfe=n(bLe,"STRONG",{});var qst=s(Gfe);PRo=r(qst,"xlnet"),qst.forEach(t),IRo=r(bLe," \u2014 "),kG=n(bLe,"A",{href:!0});var Nst=s(kG);qRo=r(Nst,"XLNetForMultipleChoice"),Nst.forEach(t),NRo=r(bLe," (XLNet model)"),bLe.forEach(t),jRo=i(K),Vb=n(K,"LI",{});var vLe=s(Vb);Ofe=n(vLe,"STRONG",{});var jst=s(Ofe);DRo=r(jst,"yoso"),jst.forEach(t),GRo=r(vLe," \u2014 "),SG=n(vLe,"A",{href:!0});var Dst=s(SG);ORo=r(Dst,"YosoForMultipleChoice"),Dst.forEach(t),VRo=r(vLe," (YOSO model)"),vLe.forEach(t),K.forEach(t),XRo=i(na),Xb=n(na,"P",{});var FLe=s(Xb);zRo=r(FLe,"The model is set in evaluation mode by default using "),Vfe=n(FLe,"CODE",{});var Gst=s(Vfe);QRo=r(Gst,"model.eval()"),Gst.forEach(t),WRo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(FLe,"CODE",{});var Ost=s(Xfe);HRo=r(Ost,"model.train()"),Ost.forEach(t),FLe.forEach(t),URo=i(na),T(zb.$$.fragment,na),na.forEach(t),Qs.forEach(t),mIe=i(f),Vi=n(f,"H2",{class:!0});var uNe=s(Vi);Qb=n(uNe,"A",{id:!0,class:!0,href:!0});var Vst=s(Qb);zfe=n(Vst,"SPAN",{});var Xst=s(zfe);T(a0.$$.fragment,Xst),Xst.forEach(t),Vst.forEach(t),JRo=i(uNe),Qfe=n(uNe,"SPAN",{});var zst=s(Qfe);YRo=r(zst,"AutoModelForNextSentencePrediction"),zst.forEach(t),uNe.forEach(t),gIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(n0.$$.fragment,Ws),KRo=i(Ws),Xi=n(Ws,"P",{});var TK=s(Xi);ZRo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RG=n(TK,"A",{href:!0});var Qst=s(RG);eBo=r(Qst,"from_pretrained()"),Qst.forEach(t),oBo=r(TK," class method or the "),BG=n(TK,"A",{href:!0});var Wst=s(BG);rBo=r(Wst,"from_config()"),Wst.forEach(t),tBo=r(TK,` class
method.`),TK.forEach(t),aBo=i(Ws),s0=n(Ws,"P",{});var _Ne=s(s0);nBo=r(_Ne,"This class cannot be instantiated directly using "),Wfe=n(_Ne,"CODE",{});var Hst=s(Wfe);sBo=r(Hst,"__init__()"),Hst.forEach(t),lBo=r(_Ne," (throws an error)."),_Ne.forEach(t),iBo=i(Ws),it=n(Ws,"DIV",{class:!0});var g3=s(it);T(l0.$$.fragment,g3),dBo=i(g3),Hfe=n(g3,"P",{});var Ust=s(Hfe);cBo=r(Ust,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ust.forEach(t),fBo=i(g3),zi=n(g3,"P",{});var MK=s(zi);mBo=r(MK,`Note:
Loading a model from its configuration file does `),Ufe=n(MK,"STRONG",{});var Jst=s(Ufe);gBo=r(Jst,"not"),Jst.forEach(t),hBo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(MK,"A",{href:!0});var Yst=s(PG);pBo=r(Yst,"from_pretrained()"),Yst.forEach(t),uBo=r(MK," to load the model weights."),MK.forEach(t),_Bo=i(g3),T(Wb.$$.fragment,g3),g3.forEach(t),bBo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(i0.$$.fragment,sa),vBo=i(sa),Jfe=n(sa,"P",{});var Kst=s(Jfe);FBo=r(Kst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kst.forEach(t),TBo=i(sa),Ra=n(sa,"P",{});var h3=s(Ra);MBo=r(h3,"The model class to instantiate is selected based on the "),Yfe=n(h3,"CODE",{});var Zst=s(Yfe);EBo=r(Zst,"model_type"),Zst.forEach(t),CBo=r(h3,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(h3,"CODE",{});var elt=s(Kfe);wBo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),ABo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(h3,"CODE",{});var olt=s(Zfe);yBo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),LBo=r(h3,":"),h3.forEach(t),xBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Hb=n(Hs,"LI",{});var TLe=s(Hb);eme=n(TLe,"STRONG",{});var rlt=s(eme);$Bo=r(rlt,"bert"),rlt.forEach(t),kBo=r(TLe," \u2014 "),IG=n(TLe,"A",{href:!0});var tlt=s(IG);SBo=r(tlt,"BertForNextSentencePrediction"),tlt.forEach(t),RBo=r(TLe," (BERT model)"),TLe.forEach(t),BBo=i(Hs),Ub=n(Hs,"LI",{});var MLe=s(Ub);ome=n(MLe,"STRONG",{});var alt=s(ome);PBo=r(alt,"fnet"),alt.forEach(t),IBo=r(MLe," \u2014 "),qG=n(MLe,"A",{href:!0});var nlt=s(qG);qBo=r(nlt,"FNetForNextSentencePrediction"),nlt.forEach(t),NBo=r(MLe," (FNet model)"),MLe.forEach(t),jBo=i(Hs),Jb=n(Hs,"LI",{});var ELe=s(Jb);rme=n(ELe,"STRONG",{});var slt=s(rme);DBo=r(slt,"megatron-bert"),slt.forEach(t),GBo=r(ELe," \u2014 "),NG=n(ELe,"A",{href:!0});var llt=s(NG);OBo=r(llt,"MegatronBertForNextSentencePrediction"),llt.forEach(t),VBo=r(ELe," (MegatronBert model)"),ELe.forEach(t),XBo=i(Hs),Yb=n(Hs,"LI",{});var CLe=s(Yb);tme=n(CLe,"STRONG",{});var ilt=s(tme);zBo=r(ilt,"mobilebert"),ilt.forEach(t),QBo=r(CLe," \u2014 "),jG=n(CLe,"A",{href:!0});var dlt=s(jG);WBo=r(dlt,"MobileBertForNextSentencePrediction"),dlt.forEach(t),HBo=r(CLe," (MobileBERT model)"),CLe.forEach(t),UBo=i(Hs),Kb=n(Hs,"LI",{});var wLe=s(Kb);ame=n(wLe,"STRONG",{});var clt=s(ame);JBo=r(clt,"qdqbert"),clt.forEach(t),YBo=r(wLe," \u2014 "),DG=n(wLe,"A",{href:!0});var flt=s(DG);KBo=r(flt,"QDQBertForNextSentencePrediction"),flt.forEach(t),ZBo=r(wLe," (QDQBert model)"),wLe.forEach(t),Hs.forEach(t),ePo=i(sa),Zb=n(sa,"P",{});var ALe=s(Zb);oPo=r(ALe,"The model is set in evaluation mode by default using "),nme=n(ALe,"CODE",{});var mlt=s(nme);rPo=r(mlt,"model.eval()"),mlt.forEach(t),tPo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(ALe,"CODE",{});var glt=s(sme);aPo=r(glt,"model.train()"),glt.forEach(t),ALe.forEach(t),nPo=i(sa),T(e2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),hIe=i(f),Qi=n(f,"H2",{class:!0});var bNe=s(Qi);o2=n(bNe,"A",{id:!0,class:!0,href:!0});var hlt=s(o2);lme=n(hlt,"SPAN",{});var plt=s(lme);T(d0.$$.fragment,plt),plt.forEach(t),hlt.forEach(t),sPo=i(bNe),ime=n(bNe,"SPAN",{});var ult=s(ime);lPo=r(ult,"AutoModelForTokenClassification"),ult.forEach(t),bNe.forEach(t),pIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(c0.$$.fragment,Us),iPo=i(Us),Wi=n(Us,"P",{});var EK=s(Wi);dPo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GG=n(EK,"A",{href:!0});var _lt=s(GG);cPo=r(_lt,"from_pretrained()"),_lt.forEach(t),fPo=r(EK," class method or the "),OG=n(EK,"A",{href:!0});var blt=s(OG);mPo=r(blt,"from_config()"),blt.forEach(t),gPo=r(EK,` class
method.`),EK.forEach(t),hPo=i(Us),f0=n(Us,"P",{});var vNe=s(f0);pPo=r(vNe,"This class cannot be instantiated directly using "),dme=n(vNe,"CODE",{});var vlt=s(dme);uPo=r(vlt,"__init__()"),vlt.forEach(t),_Po=r(vNe," (throws an error)."),vNe.forEach(t),bPo=i(Us),dt=n(Us,"DIV",{class:!0});var p3=s(dt);T(m0.$$.fragment,p3),vPo=i(p3),cme=n(p3,"P",{});var Flt=s(cme);FPo=r(Flt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Flt.forEach(t),TPo=i(p3),Hi=n(p3,"P",{});var CK=s(Hi);MPo=r(CK,`Note:
Loading a model from its configuration file does `),fme=n(CK,"STRONG",{});var Tlt=s(fme);EPo=r(Tlt,"not"),Tlt.forEach(t),CPo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(CK,"A",{href:!0});var Mlt=s(VG);wPo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),APo=r(CK," to load the model weights."),CK.forEach(t),yPo=i(p3),T(r2.$$.fragment,p3),p3.forEach(t),LPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(g0.$$.fragment,la),xPo=i(la),mme=n(la,"P",{});var Elt=s(mme);$Po=r(Elt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Elt.forEach(t),kPo=i(la),Ba=n(la,"P",{});var u3=s(Ba);SPo=r(u3,"The model class to instantiate is selected based on the "),gme=n(u3,"CODE",{});var Clt=s(gme);RPo=r(Clt,"model_type"),Clt.forEach(t),BPo=r(u3,` property of the config object (either
passed as an argument or loaded from `),hme=n(u3,"CODE",{});var wlt=s(hme);PPo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),IPo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(u3,"CODE",{});var Alt=s(pme);qPo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),NPo=r(u3,":"),u3.forEach(t),jPo=i(la),U=n(la,"UL",{});var J=s(U);t2=n(J,"LI",{});var yLe=s(t2);ume=n(yLe,"STRONG",{});var ylt=s(ume);DPo=r(ylt,"albert"),ylt.forEach(t),GPo=r(yLe," \u2014 "),XG=n(yLe,"A",{href:!0});var Llt=s(XG);OPo=r(Llt,"AlbertForTokenClassification"),Llt.forEach(t),VPo=r(yLe," (ALBERT model)"),yLe.forEach(t),XPo=i(J),a2=n(J,"LI",{});var LLe=s(a2);_me=n(LLe,"STRONG",{});var xlt=s(_me);zPo=r(xlt,"bert"),xlt.forEach(t),QPo=r(LLe," \u2014 "),zG=n(LLe,"A",{href:!0});var $lt=s(zG);WPo=r($lt,"BertForTokenClassification"),$lt.forEach(t),HPo=r(LLe," (BERT model)"),LLe.forEach(t),UPo=i(J),n2=n(J,"LI",{});var xLe=s(n2);bme=n(xLe,"STRONG",{});var klt=s(bme);JPo=r(klt,"big_bird"),klt.forEach(t),YPo=r(xLe," \u2014 "),QG=n(xLe,"A",{href:!0});var Slt=s(QG);KPo=r(Slt,"BigBirdForTokenClassification"),Slt.forEach(t),ZPo=r(xLe," (BigBird model)"),xLe.forEach(t),eIo=i(J),s2=n(J,"LI",{});var $Le=s(s2);vme=n($Le,"STRONG",{});var Rlt=s(vme);oIo=r(Rlt,"camembert"),Rlt.forEach(t),rIo=r($Le," \u2014 "),WG=n($Le,"A",{href:!0});var Blt=s(WG);tIo=r(Blt,"CamembertForTokenClassification"),Blt.forEach(t),aIo=r($Le," (CamemBERT model)"),$Le.forEach(t),nIo=i(J),l2=n(J,"LI",{});var kLe=s(l2);Fme=n(kLe,"STRONG",{});var Plt=s(Fme);sIo=r(Plt,"canine"),Plt.forEach(t),lIo=r(kLe," \u2014 "),HG=n(kLe,"A",{href:!0});var Ilt=s(HG);iIo=r(Ilt,"CanineForTokenClassification"),Ilt.forEach(t),dIo=r(kLe," (Canine model)"),kLe.forEach(t),cIo=i(J),i2=n(J,"LI",{});var SLe=s(i2);Tme=n(SLe,"STRONG",{});var qlt=s(Tme);fIo=r(qlt,"convbert"),qlt.forEach(t),mIo=r(SLe," \u2014 "),UG=n(SLe,"A",{href:!0});var Nlt=s(UG);gIo=r(Nlt,"ConvBertForTokenClassification"),Nlt.forEach(t),hIo=r(SLe," (ConvBERT model)"),SLe.forEach(t),pIo=i(J),d2=n(J,"LI",{});var RLe=s(d2);Mme=n(RLe,"STRONG",{});var jlt=s(Mme);uIo=r(jlt,"data2vec-text"),jlt.forEach(t),_Io=r(RLe," \u2014 "),JG=n(RLe,"A",{href:!0});var Dlt=s(JG);bIo=r(Dlt,"Data2VecTextForTokenClassification"),Dlt.forEach(t),vIo=r(RLe," (Data2VecText model)"),RLe.forEach(t),FIo=i(J),c2=n(J,"LI",{});var BLe=s(c2);Eme=n(BLe,"STRONG",{});var Glt=s(Eme);TIo=r(Glt,"deberta"),Glt.forEach(t),MIo=r(BLe," \u2014 "),YG=n(BLe,"A",{href:!0});var Olt=s(YG);EIo=r(Olt,"DebertaForTokenClassification"),Olt.forEach(t),CIo=r(BLe," (DeBERTa model)"),BLe.forEach(t),wIo=i(J),f2=n(J,"LI",{});var PLe=s(f2);Cme=n(PLe,"STRONG",{});var Vlt=s(Cme);AIo=r(Vlt,"deberta-v2"),Vlt.forEach(t),yIo=r(PLe," \u2014 "),KG=n(PLe,"A",{href:!0});var Xlt=s(KG);LIo=r(Xlt,"DebertaV2ForTokenClassification"),Xlt.forEach(t),xIo=r(PLe," (DeBERTa-v2 model)"),PLe.forEach(t),$Io=i(J),m2=n(J,"LI",{});var ILe=s(m2);wme=n(ILe,"STRONG",{});var zlt=s(wme);kIo=r(zlt,"distilbert"),zlt.forEach(t),SIo=r(ILe," \u2014 "),ZG=n(ILe,"A",{href:!0});var Qlt=s(ZG);RIo=r(Qlt,"DistilBertForTokenClassification"),Qlt.forEach(t),BIo=r(ILe," (DistilBERT model)"),ILe.forEach(t),PIo=i(J),g2=n(J,"LI",{});var qLe=s(g2);Ame=n(qLe,"STRONG",{});var Wlt=s(Ame);IIo=r(Wlt,"electra"),Wlt.forEach(t),qIo=r(qLe," \u2014 "),eO=n(qLe,"A",{href:!0});var Hlt=s(eO);NIo=r(Hlt,"ElectraForTokenClassification"),Hlt.forEach(t),jIo=r(qLe," (ELECTRA model)"),qLe.forEach(t),DIo=i(J),h2=n(J,"LI",{});var NLe=s(h2);yme=n(NLe,"STRONG",{});var Ult=s(yme);GIo=r(Ult,"flaubert"),Ult.forEach(t),OIo=r(NLe," \u2014 "),oO=n(NLe,"A",{href:!0});var Jlt=s(oO);VIo=r(Jlt,"FlaubertForTokenClassification"),Jlt.forEach(t),XIo=r(NLe," (FlauBERT model)"),NLe.forEach(t),zIo=i(J),p2=n(J,"LI",{});var jLe=s(p2);Lme=n(jLe,"STRONG",{});var Ylt=s(Lme);QIo=r(Ylt,"fnet"),Ylt.forEach(t),WIo=r(jLe," \u2014 "),rO=n(jLe,"A",{href:!0});var Klt=s(rO);HIo=r(Klt,"FNetForTokenClassification"),Klt.forEach(t),UIo=r(jLe," (FNet model)"),jLe.forEach(t),JIo=i(J),u2=n(J,"LI",{});var DLe=s(u2);xme=n(DLe,"STRONG",{});var Zlt=s(xme);YIo=r(Zlt,"funnel"),Zlt.forEach(t),KIo=r(DLe," \u2014 "),tO=n(DLe,"A",{href:!0});var eit=s(tO);ZIo=r(eit,"FunnelForTokenClassification"),eit.forEach(t),eqo=r(DLe," (Funnel Transformer model)"),DLe.forEach(t),oqo=i(J),_2=n(J,"LI",{});var GLe=s(_2);$me=n(GLe,"STRONG",{});var oit=s($me);rqo=r(oit,"gpt2"),oit.forEach(t),tqo=r(GLe," \u2014 "),aO=n(GLe,"A",{href:!0});var rit=s(aO);aqo=r(rit,"GPT2ForTokenClassification"),rit.forEach(t),nqo=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),sqo=i(J),b2=n(J,"LI",{});var OLe=s(b2);kme=n(OLe,"STRONG",{});var tit=s(kme);lqo=r(tit,"ibert"),tit.forEach(t),iqo=r(OLe," \u2014 "),nO=n(OLe,"A",{href:!0});var ait=s(nO);dqo=r(ait,"IBertForTokenClassification"),ait.forEach(t),cqo=r(OLe," (I-BERT model)"),OLe.forEach(t),fqo=i(J),v2=n(J,"LI",{});var VLe=s(v2);Sme=n(VLe,"STRONG",{});var nit=s(Sme);mqo=r(nit,"layoutlm"),nit.forEach(t),gqo=r(VLe," \u2014 "),sO=n(VLe,"A",{href:!0});var sit=s(sO);hqo=r(sit,"LayoutLMForTokenClassification"),sit.forEach(t),pqo=r(VLe," (LayoutLM model)"),VLe.forEach(t),uqo=i(J),F2=n(J,"LI",{});var XLe=s(F2);Rme=n(XLe,"STRONG",{});var lit=s(Rme);_qo=r(lit,"layoutlmv2"),lit.forEach(t),bqo=r(XLe," \u2014 "),lO=n(XLe,"A",{href:!0});var iit=s(lO);vqo=r(iit,"LayoutLMv2ForTokenClassification"),iit.forEach(t),Fqo=r(XLe," (LayoutLMv2 model)"),XLe.forEach(t),Tqo=i(J),T2=n(J,"LI",{});var zLe=s(T2);Bme=n(zLe,"STRONG",{});var dit=s(Bme);Mqo=r(dit,"longformer"),dit.forEach(t),Eqo=r(zLe," \u2014 "),iO=n(zLe,"A",{href:!0});var cit=s(iO);Cqo=r(cit,"LongformerForTokenClassification"),cit.forEach(t),wqo=r(zLe," (Longformer model)"),zLe.forEach(t),Aqo=i(J),M2=n(J,"LI",{});var QLe=s(M2);Pme=n(QLe,"STRONG",{});var fit=s(Pme);yqo=r(fit,"megatron-bert"),fit.forEach(t),Lqo=r(QLe," \u2014 "),dO=n(QLe,"A",{href:!0});var mit=s(dO);xqo=r(mit,"MegatronBertForTokenClassification"),mit.forEach(t),$qo=r(QLe," (MegatronBert model)"),QLe.forEach(t),kqo=i(J),E2=n(J,"LI",{});var WLe=s(E2);Ime=n(WLe,"STRONG",{});var git=s(Ime);Sqo=r(git,"mobilebert"),git.forEach(t),Rqo=r(WLe," \u2014 "),cO=n(WLe,"A",{href:!0});var hit=s(cO);Bqo=r(hit,"MobileBertForTokenClassification"),hit.forEach(t),Pqo=r(WLe," (MobileBERT model)"),WLe.forEach(t),Iqo=i(J),C2=n(J,"LI",{});var HLe=s(C2);qme=n(HLe,"STRONG",{});var pit=s(qme);qqo=r(pit,"mpnet"),pit.forEach(t),Nqo=r(HLe," \u2014 "),fO=n(HLe,"A",{href:!0});var uit=s(fO);jqo=r(uit,"MPNetForTokenClassification"),uit.forEach(t),Dqo=r(HLe," (MPNet model)"),HLe.forEach(t),Gqo=i(J),w2=n(J,"LI",{});var ULe=s(w2);Nme=n(ULe,"STRONG",{});var _it=s(Nme);Oqo=r(_it,"nystromformer"),_it.forEach(t),Vqo=r(ULe," \u2014 "),mO=n(ULe,"A",{href:!0});var bit=s(mO);Xqo=r(bit,"NystromformerForTokenClassification"),bit.forEach(t),zqo=r(ULe," (Nystromformer model)"),ULe.forEach(t),Qqo=i(J),A2=n(J,"LI",{});var JLe=s(A2);jme=n(JLe,"STRONG",{});var vit=s(jme);Wqo=r(vit,"qdqbert"),vit.forEach(t),Hqo=r(JLe," \u2014 "),gO=n(JLe,"A",{href:!0});var Fit=s(gO);Uqo=r(Fit,"QDQBertForTokenClassification"),Fit.forEach(t),Jqo=r(JLe," (QDQBert model)"),JLe.forEach(t),Yqo=i(J),y2=n(J,"LI",{});var YLe=s(y2);Dme=n(YLe,"STRONG",{});var Tit=s(Dme);Kqo=r(Tit,"rembert"),Tit.forEach(t),Zqo=r(YLe," \u2014 "),hO=n(YLe,"A",{href:!0});var Mit=s(hO);eNo=r(Mit,"RemBertForTokenClassification"),Mit.forEach(t),oNo=r(YLe," (RemBERT model)"),YLe.forEach(t),rNo=i(J),L2=n(J,"LI",{});var KLe=s(L2);Gme=n(KLe,"STRONG",{});var Eit=s(Gme);tNo=r(Eit,"roberta"),Eit.forEach(t),aNo=r(KLe," \u2014 "),pO=n(KLe,"A",{href:!0});var Cit=s(pO);nNo=r(Cit,"RobertaForTokenClassification"),Cit.forEach(t),sNo=r(KLe," (RoBERTa model)"),KLe.forEach(t),lNo=i(J),x2=n(J,"LI",{});var ZLe=s(x2);Ome=n(ZLe,"STRONG",{});var wit=s(Ome);iNo=r(wit,"roformer"),wit.forEach(t),dNo=r(ZLe," \u2014 "),uO=n(ZLe,"A",{href:!0});var Ait=s(uO);cNo=r(Ait,"RoFormerForTokenClassification"),Ait.forEach(t),fNo=r(ZLe," (RoFormer model)"),ZLe.forEach(t),mNo=i(J),$2=n(J,"LI",{});var exe=s($2);Vme=n(exe,"STRONG",{});var yit=s(Vme);gNo=r(yit,"squeezebert"),yit.forEach(t),hNo=r(exe," \u2014 "),_O=n(exe,"A",{href:!0});var Lit=s(_O);pNo=r(Lit,"SqueezeBertForTokenClassification"),Lit.forEach(t),uNo=r(exe," (SqueezeBERT model)"),exe.forEach(t),_No=i(J),k2=n(J,"LI",{});var oxe=s(k2);Xme=n(oxe,"STRONG",{});var xit=s(Xme);bNo=r(xit,"xlm"),xit.forEach(t),vNo=r(oxe," \u2014 "),bO=n(oxe,"A",{href:!0});var $it=s(bO);FNo=r($it,"XLMForTokenClassification"),$it.forEach(t),TNo=r(oxe," (XLM model)"),oxe.forEach(t),MNo=i(J),S2=n(J,"LI",{});var rxe=s(S2);zme=n(rxe,"STRONG",{});var kit=s(zme);ENo=r(kit,"xlm-roberta"),kit.forEach(t),CNo=r(rxe," \u2014 "),vO=n(rxe,"A",{href:!0});var Sit=s(vO);wNo=r(Sit,"XLMRobertaForTokenClassification"),Sit.forEach(t),ANo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),yNo=i(J),R2=n(J,"LI",{});var txe=s(R2);Qme=n(txe,"STRONG",{});var Rit=s(Qme);LNo=r(Rit,"xlm-roberta-xl"),Rit.forEach(t),xNo=r(txe," \u2014 "),FO=n(txe,"A",{href:!0});var Bit=s(FO);$No=r(Bit,"XLMRobertaXLForTokenClassification"),Bit.forEach(t),kNo=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),SNo=i(J),B2=n(J,"LI",{});var axe=s(B2);Wme=n(axe,"STRONG",{});var Pit=s(Wme);RNo=r(Pit,"xlnet"),Pit.forEach(t),BNo=r(axe," \u2014 "),TO=n(axe,"A",{href:!0});var Iit=s(TO);PNo=r(Iit,"XLNetForTokenClassification"),Iit.forEach(t),INo=r(axe," (XLNet model)"),axe.forEach(t),qNo=i(J),P2=n(J,"LI",{});var nxe=s(P2);Hme=n(nxe,"STRONG",{});var qit=s(Hme);NNo=r(qit,"yoso"),qit.forEach(t),jNo=r(nxe," \u2014 "),MO=n(nxe,"A",{href:!0});var Nit=s(MO);DNo=r(Nit,"YosoForTokenClassification"),Nit.forEach(t),GNo=r(nxe," (YOSO model)"),nxe.forEach(t),J.forEach(t),ONo=i(la),I2=n(la,"P",{});var sxe=s(I2);VNo=r(sxe,"The model is set in evaluation mode by default using "),Ume=n(sxe,"CODE",{});var jit=s(Ume);XNo=r(jit,"model.eval()"),jit.forEach(t),zNo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=n(sxe,"CODE",{});var Dit=s(Jme);QNo=r(Dit,"model.train()"),Dit.forEach(t),sxe.forEach(t),WNo=i(la),T(q2.$$.fragment,la),la.forEach(t),Us.forEach(t),uIe=i(f),Ui=n(f,"H2",{class:!0});var FNe=s(Ui);N2=n(FNe,"A",{id:!0,class:!0,href:!0});var Git=s(N2);Yme=n(Git,"SPAN",{});var Oit=s(Yme);T(h0.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),HNo=i(FNe),Kme=n(FNe,"SPAN",{});var Vit=s(Kme);UNo=r(Vit,"AutoModelForQuestionAnswering"),Vit.forEach(t),FNe.forEach(t),_Ie=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(p0.$$.fragment,Js),JNo=i(Js),Ji=n(Js,"P",{});var wK=s(Ji);YNo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EO=n(wK,"A",{href:!0});var Xit=s(EO);KNo=r(Xit,"from_pretrained()"),Xit.forEach(t),ZNo=r(wK," class method or the "),CO=n(wK,"A",{href:!0});var zit=s(CO);ejo=r(zit,"from_config()"),zit.forEach(t),ojo=r(wK,` class
method.`),wK.forEach(t),rjo=i(Js),u0=n(Js,"P",{});var TNe=s(u0);tjo=r(TNe,"This class cannot be instantiated directly using "),Zme=n(TNe,"CODE",{});var Qit=s(Zme);ajo=r(Qit,"__init__()"),Qit.forEach(t),njo=r(TNe," (throws an error)."),TNe.forEach(t),sjo=i(Js),ct=n(Js,"DIV",{class:!0});var _3=s(ct);T(_0.$$.fragment,_3),ljo=i(_3),ege=n(_3,"P",{});var Wit=s(ege);ijo=r(Wit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wit.forEach(t),djo=i(_3),Yi=n(_3,"P",{});var AK=s(Yi);cjo=r(AK,`Note:
Loading a model from its configuration file does `),oge=n(AK,"STRONG",{});var Hit=s(oge);fjo=r(Hit,"not"),Hit.forEach(t),mjo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(AK,"A",{href:!0});var Uit=s(wO);gjo=r(Uit,"from_pretrained()"),Uit.forEach(t),hjo=r(AK," to load the model weights."),AK.forEach(t),pjo=i(_3),T(j2.$$.fragment,_3),_3.forEach(t),ujo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(b0.$$.fragment,ia),_jo=i(ia),rge=n(ia,"P",{});var Jit=s(rge);bjo=r(Jit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jit.forEach(t),vjo=i(ia),Pa=n(ia,"P",{});var b3=s(Pa);Fjo=r(b3,"The model class to instantiate is selected based on the "),tge=n(b3,"CODE",{});var Yit=s(tge);Tjo=r(Yit,"model_type"),Yit.forEach(t),Mjo=r(b3,` property of the config object (either
passed as an argument or loaded from `),age=n(b3,"CODE",{});var Kit=s(age);Ejo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),Cjo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(b3,"CODE",{});var Zit=s(nge);wjo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),Ajo=r(b3,":"),b3.forEach(t),yjo=i(ia),O=n(ia,"UL",{});var X=s(O);D2=n(X,"LI",{});var lxe=s(D2);sge=n(lxe,"STRONG",{});var edt=s(sge);Ljo=r(edt,"albert"),edt.forEach(t),xjo=r(lxe," \u2014 "),AO=n(lxe,"A",{href:!0});var odt=s(AO);$jo=r(odt,"AlbertForQuestionAnswering"),odt.forEach(t),kjo=r(lxe," (ALBERT model)"),lxe.forEach(t),Sjo=i(X),G2=n(X,"LI",{});var ixe=s(G2);lge=n(ixe,"STRONG",{});var rdt=s(lge);Rjo=r(rdt,"bart"),rdt.forEach(t),Bjo=r(ixe," \u2014 "),yO=n(ixe,"A",{href:!0});var tdt=s(yO);Pjo=r(tdt,"BartForQuestionAnswering"),tdt.forEach(t),Ijo=r(ixe," (BART model)"),ixe.forEach(t),qjo=i(X),O2=n(X,"LI",{});var dxe=s(O2);ige=n(dxe,"STRONG",{});var adt=s(ige);Njo=r(adt,"bert"),adt.forEach(t),jjo=r(dxe," \u2014 "),LO=n(dxe,"A",{href:!0});var ndt=s(LO);Djo=r(ndt,"BertForQuestionAnswering"),ndt.forEach(t),Gjo=r(dxe," (BERT model)"),dxe.forEach(t),Ojo=i(X),V2=n(X,"LI",{});var cxe=s(V2);dge=n(cxe,"STRONG",{});var sdt=s(dge);Vjo=r(sdt,"big_bird"),sdt.forEach(t),Xjo=r(cxe," \u2014 "),xO=n(cxe,"A",{href:!0});var ldt=s(xO);zjo=r(ldt,"BigBirdForQuestionAnswering"),ldt.forEach(t),Qjo=r(cxe," (BigBird model)"),cxe.forEach(t),Wjo=i(X),X2=n(X,"LI",{});var fxe=s(X2);cge=n(fxe,"STRONG",{});var idt=s(cge);Hjo=r(idt,"bigbird_pegasus"),idt.forEach(t),Ujo=r(fxe," \u2014 "),$O=n(fxe,"A",{href:!0});var ddt=s($O);Jjo=r(ddt,"BigBirdPegasusForQuestionAnswering"),ddt.forEach(t),Yjo=r(fxe," (BigBirdPegasus model)"),fxe.forEach(t),Kjo=i(X),z2=n(X,"LI",{});var mxe=s(z2);fge=n(mxe,"STRONG",{});var cdt=s(fge);Zjo=r(cdt,"camembert"),cdt.forEach(t),eDo=r(mxe," \u2014 "),kO=n(mxe,"A",{href:!0});var fdt=s(kO);oDo=r(fdt,"CamembertForQuestionAnswering"),fdt.forEach(t),rDo=r(mxe," (CamemBERT model)"),mxe.forEach(t),tDo=i(X),Q2=n(X,"LI",{});var gxe=s(Q2);mge=n(gxe,"STRONG",{});var mdt=s(mge);aDo=r(mdt,"canine"),mdt.forEach(t),nDo=r(gxe," \u2014 "),SO=n(gxe,"A",{href:!0});var gdt=s(SO);sDo=r(gdt,"CanineForQuestionAnswering"),gdt.forEach(t),lDo=r(gxe," (Canine model)"),gxe.forEach(t),iDo=i(X),W2=n(X,"LI",{});var hxe=s(W2);gge=n(hxe,"STRONG",{});var hdt=s(gge);dDo=r(hdt,"convbert"),hdt.forEach(t),cDo=r(hxe," \u2014 "),RO=n(hxe,"A",{href:!0});var pdt=s(RO);fDo=r(pdt,"ConvBertForQuestionAnswering"),pdt.forEach(t),mDo=r(hxe," (ConvBERT model)"),hxe.forEach(t),gDo=i(X),H2=n(X,"LI",{});var pxe=s(H2);hge=n(pxe,"STRONG",{});var udt=s(hge);hDo=r(udt,"data2vec-text"),udt.forEach(t),pDo=r(pxe," \u2014 "),BO=n(pxe,"A",{href:!0});var _dt=s(BO);uDo=r(_dt,"Data2VecTextForQuestionAnswering"),_dt.forEach(t),_Do=r(pxe," (Data2VecText model)"),pxe.forEach(t),bDo=i(X),U2=n(X,"LI",{});var uxe=s(U2);pge=n(uxe,"STRONG",{});var bdt=s(pge);vDo=r(bdt,"deberta"),bdt.forEach(t),FDo=r(uxe," \u2014 "),PO=n(uxe,"A",{href:!0});var vdt=s(PO);TDo=r(vdt,"DebertaForQuestionAnswering"),vdt.forEach(t),MDo=r(uxe," (DeBERTa model)"),uxe.forEach(t),EDo=i(X),J2=n(X,"LI",{});var _xe=s(J2);uge=n(_xe,"STRONG",{});var Fdt=s(uge);CDo=r(Fdt,"deberta-v2"),Fdt.forEach(t),wDo=r(_xe," \u2014 "),IO=n(_xe,"A",{href:!0});var Tdt=s(IO);ADo=r(Tdt,"DebertaV2ForQuestionAnswering"),Tdt.forEach(t),yDo=r(_xe," (DeBERTa-v2 model)"),_xe.forEach(t),LDo=i(X),Y2=n(X,"LI",{});var bxe=s(Y2);_ge=n(bxe,"STRONG",{});var Mdt=s(_ge);xDo=r(Mdt,"distilbert"),Mdt.forEach(t),$Do=r(bxe," \u2014 "),qO=n(bxe,"A",{href:!0});var Edt=s(qO);kDo=r(Edt,"DistilBertForQuestionAnswering"),Edt.forEach(t),SDo=r(bxe," (DistilBERT model)"),bxe.forEach(t),RDo=i(X),K2=n(X,"LI",{});var vxe=s(K2);bge=n(vxe,"STRONG",{});var Cdt=s(bge);BDo=r(Cdt,"electra"),Cdt.forEach(t),PDo=r(vxe," \u2014 "),NO=n(vxe,"A",{href:!0});var wdt=s(NO);IDo=r(wdt,"ElectraForQuestionAnswering"),wdt.forEach(t),qDo=r(vxe," (ELECTRA model)"),vxe.forEach(t),NDo=i(X),Z2=n(X,"LI",{});var Fxe=s(Z2);vge=n(Fxe,"STRONG",{});var Adt=s(vge);jDo=r(Adt,"flaubert"),Adt.forEach(t),DDo=r(Fxe," \u2014 "),jO=n(Fxe,"A",{href:!0});var ydt=s(jO);GDo=r(ydt,"FlaubertForQuestionAnsweringSimple"),ydt.forEach(t),ODo=r(Fxe," (FlauBERT model)"),Fxe.forEach(t),VDo=i(X),ev=n(X,"LI",{});var Txe=s(ev);Fge=n(Txe,"STRONG",{});var Ldt=s(Fge);XDo=r(Ldt,"fnet"),Ldt.forEach(t),zDo=r(Txe," \u2014 "),DO=n(Txe,"A",{href:!0});var xdt=s(DO);QDo=r(xdt,"FNetForQuestionAnswering"),xdt.forEach(t),WDo=r(Txe," (FNet model)"),Txe.forEach(t),HDo=i(X),ov=n(X,"LI",{});var Mxe=s(ov);Tge=n(Mxe,"STRONG",{});var $dt=s(Tge);UDo=r($dt,"funnel"),$dt.forEach(t),JDo=r(Mxe," \u2014 "),GO=n(Mxe,"A",{href:!0});var kdt=s(GO);YDo=r(kdt,"FunnelForQuestionAnswering"),kdt.forEach(t),KDo=r(Mxe," (Funnel Transformer model)"),Mxe.forEach(t),ZDo=i(X),rv=n(X,"LI",{});var Exe=s(rv);Mge=n(Exe,"STRONG",{});var Sdt=s(Mge);eGo=r(Sdt,"gptj"),Sdt.forEach(t),oGo=r(Exe," \u2014 "),OO=n(Exe,"A",{href:!0});var Rdt=s(OO);rGo=r(Rdt,"GPTJForQuestionAnswering"),Rdt.forEach(t),tGo=r(Exe," (GPT-J model)"),Exe.forEach(t),aGo=i(X),tv=n(X,"LI",{});var Cxe=s(tv);Ege=n(Cxe,"STRONG",{});var Bdt=s(Ege);nGo=r(Bdt,"ibert"),Bdt.forEach(t),sGo=r(Cxe," \u2014 "),VO=n(Cxe,"A",{href:!0});var Pdt=s(VO);lGo=r(Pdt,"IBertForQuestionAnswering"),Pdt.forEach(t),iGo=r(Cxe," (I-BERT model)"),Cxe.forEach(t),dGo=i(X),av=n(X,"LI",{});var wxe=s(av);Cge=n(wxe,"STRONG",{});var Idt=s(Cge);cGo=r(Idt,"layoutlmv2"),Idt.forEach(t),fGo=r(wxe," \u2014 "),XO=n(wxe,"A",{href:!0});var qdt=s(XO);mGo=r(qdt,"LayoutLMv2ForQuestionAnswering"),qdt.forEach(t),gGo=r(wxe," (LayoutLMv2 model)"),wxe.forEach(t),hGo=i(X),nv=n(X,"LI",{});var Axe=s(nv);wge=n(Axe,"STRONG",{});var Ndt=s(wge);pGo=r(Ndt,"led"),Ndt.forEach(t),uGo=r(Axe," \u2014 "),zO=n(Axe,"A",{href:!0});var jdt=s(zO);_Go=r(jdt,"LEDForQuestionAnswering"),jdt.forEach(t),bGo=r(Axe," (LED model)"),Axe.forEach(t),vGo=i(X),sv=n(X,"LI",{});var yxe=s(sv);Age=n(yxe,"STRONG",{});var Ddt=s(Age);FGo=r(Ddt,"longformer"),Ddt.forEach(t),TGo=r(yxe," \u2014 "),QO=n(yxe,"A",{href:!0});var Gdt=s(QO);MGo=r(Gdt,"LongformerForQuestionAnswering"),Gdt.forEach(t),EGo=r(yxe," (Longformer model)"),yxe.forEach(t),CGo=i(X),lv=n(X,"LI",{});var Lxe=s(lv);yge=n(Lxe,"STRONG",{});var Odt=s(yge);wGo=r(Odt,"lxmert"),Odt.forEach(t),AGo=r(Lxe," \u2014 "),WO=n(Lxe,"A",{href:!0});var Vdt=s(WO);yGo=r(Vdt,"LxmertForQuestionAnswering"),Vdt.forEach(t),LGo=r(Lxe," (LXMERT model)"),Lxe.forEach(t),xGo=i(X),iv=n(X,"LI",{});var xxe=s(iv);Lge=n(xxe,"STRONG",{});var Xdt=s(Lge);$Go=r(Xdt,"mbart"),Xdt.forEach(t),kGo=r(xxe," \u2014 "),HO=n(xxe,"A",{href:!0});var zdt=s(HO);SGo=r(zdt,"MBartForQuestionAnswering"),zdt.forEach(t),RGo=r(xxe," (mBART model)"),xxe.forEach(t),BGo=i(X),dv=n(X,"LI",{});var $xe=s(dv);xge=n($xe,"STRONG",{});var Qdt=s(xge);PGo=r(Qdt,"megatron-bert"),Qdt.forEach(t),IGo=r($xe," \u2014 "),UO=n($xe,"A",{href:!0});var Wdt=s(UO);qGo=r(Wdt,"MegatronBertForQuestionAnswering"),Wdt.forEach(t),NGo=r($xe," (MegatronBert model)"),$xe.forEach(t),jGo=i(X),cv=n(X,"LI",{});var kxe=s(cv);$ge=n(kxe,"STRONG",{});var Hdt=s($ge);DGo=r(Hdt,"mobilebert"),Hdt.forEach(t),GGo=r(kxe," \u2014 "),JO=n(kxe,"A",{href:!0});var Udt=s(JO);OGo=r(Udt,"MobileBertForQuestionAnswering"),Udt.forEach(t),VGo=r(kxe," (MobileBERT model)"),kxe.forEach(t),XGo=i(X),fv=n(X,"LI",{});var Sxe=s(fv);kge=n(Sxe,"STRONG",{});var Jdt=s(kge);zGo=r(Jdt,"mpnet"),Jdt.forEach(t),QGo=r(Sxe," \u2014 "),YO=n(Sxe,"A",{href:!0});var Ydt=s(YO);WGo=r(Ydt,"MPNetForQuestionAnswering"),Ydt.forEach(t),HGo=r(Sxe," (MPNet model)"),Sxe.forEach(t),UGo=i(X),mv=n(X,"LI",{});var Rxe=s(mv);Sge=n(Rxe,"STRONG",{});var Kdt=s(Sge);JGo=r(Kdt,"nystromformer"),Kdt.forEach(t),YGo=r(Rxe," \u2014 "),KO=n(Rxe,"A",{href:!0});var Zdt=s(KO);KGo=r(Zdt,"NystromformerForQuestionAnswering"),Zdt.forEach(t),ZGo=r(Rxe," (Nystromformer model)"),Rxe.forEach(t),eOo=i(X),gv=n(X,"LI",{});var Bxe=s(gv);Rge=n(Bxe,"STRONG",{});var ect=s(Rge);oOo=r(ect,"qdqbert"),ect.forEach(t),rOo=r(Bxe," \u2014 "),ZO=n(Bxe,"A",{href:!0});var oct=s(ZO);tOo=r(oct,"QDQBertForQuestionAnswering"),oct.forEach(t),aOo=r(Bxe," (QDQBert model)"),Bxe.forEach(t),nOo=i(X),hv=n(X,"LI",{});var Pxe=s(hv);Bge=n(Pxe,"STRONG",{});var rct=s(Bge);sOo=r(rct,"reformer"),rct.forEach(t),lOo=r(Pxe," \u2014 "),eV=n(Pxe,"A",{href:!0});var tct=s(eV);iOo=r(tct,"ReformerForQuestionAnswering"),tct.forEach(t),dOo=r(Pxe," (Reformer model)"),Pxe.forEach(t),cOo=i(X),pv=n(X,"LI",{});var Ixe=s(pv);Pge=n(Ixe,"STRONG",{});var act=s(Pge);fOo=r(act,"rembert"),act.forEach(t),mOo=r(Ixe," \u2014 "),oV=n(Ixe,"A",{href:!0});var nct=s(oV);gOo=r(nct,"RemBertForQuestionAnswering"),nct.forEach(t),hOo=r(Ixe," (RemBERT model)"),Ixe.forEach(t),pOo=i(X),uv=n(X,"LI",{});var qxe=s(uv);Ige=n(qxe,"STRONG",{});var sct=s(Ige);uOo=r(sct,"roberta"),sct.forEach(t),_Oo=r(qxe," \u2014 "),rV=n(qxe,"A",{href:!0});var lct=s(rV);bOo=r(lct,"RobertaForQuestionAnswering"),lct.forEach(t),vOo=r(qxe," (RoBERTa model)"),qxe.forEach(t),FOo=i(X),_v=n(X,"LI",{});var Nxe=s(_v);qge=n(Nxe,"STRONG",{});var ict=s(qge);TOo=r(ict,"roformer"),ict.forEach(t),MOo=r(Nxe," \u2014 "),tV=n(Nxe,"A",{href:!0});var dct=s(tV);EOo=r(dct,"RoFormerForQuestionAnswering"),dct.forEach(t),COo=r(Nxe," (RoFormer model)"),Nxe.forEach(t),wOo=i(X),bv=n(X,"LI",{});var jxe=s(bv);Nge=n(jxe,"STRONG",{});var cct=s(Nge);AOo=r(cct,"splinter"),cct.forEach(t),yOo=r(jxe," \u2014 "),aV=n(jxe,"A",{href:!0});var fct=s(aV);LOo=r(fct,"SplinterForQuestionAnswering"),fct.forEach(t),xOo=r(jxe," (Splinter model)"),jxe.forEach(t),$Oo=i(X),vv=n(X,"LI",{});var Dxe=s(vv);jge=n(Dxe,"STRONG",{});var mct=s(jge);kOo=r(mct,"squeezebert"),mct.forEach(t),SOo=r(Dxe," \u2014 "),nV=n(Dxe,"A",{href:!0});var gct=s(nV);ROo=r(gct,"SqueezeBertForQuestionAnswering"),gct.forEach(t),BOo=r(Dxe," (SqueezeBERT model)"),Dxe.forEach(t),POo=i(X),Fv=n(X,"LI",{});var Gxe=s(Fv);Dge=n(Gxe,"STRONG",{});var hct=s(Dge);IOo=r(hct,"xlm"),hct.forEach(t),qOo=r(Gxe," \u2014 "),sV=n(Gxe,"A",{href:!0});var pct=s(sV);NOo=r(pct,"XLMForQuestionAnsweringSimple"),pct.forEach(t),jOo=r(Gxe," (XLM model)"),Gxe.forEach(t),DOo=i(X),Tv=n(X,"LI",{});var Oxe=s(Tv);Gge=n(Oxe,"STRONG",{});var uct=s(Gge);GOo=r(uct,"xlm-roberta"),uct.forEach(t),OOo=r(Oxe," \u2014 "),lV=n(Oxe,"A",{href:!0});var _ct=s(lV);VOo=r(_ct,"XLMRobertaForQuestionAnswering"),_ct.forEach(t),XOo=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),zOo=i(X),Mv=n(X,"LI",{});var Vxe=s(Mv);Oge=n(Vxe,"STRONG",{});var bct=s(Oge);QOo=r(bct,"xlm-roberta-xl"),bct.forEach(t),WOo=r(Vxe," \u2014 "),iV=n(Vxe,"A",{href:!0});var vct=s(iV);HOo=r(vct,"XLMRobertaXLForQuestionAnswering"),vct.forEach(t),UOo=r(Vxe," (XLM-RoBERTa-XL model)"),Vxe.forEach(t),JOo=i(X),Ev=n(X,"LI",{});var Xxe=s(Ev);Vge=n(Xxe,"STRONG",{});var Fct=s(Vge);YOo=r(Fct,"xlnet"),Fct.forEach(t),KOo=r(Xxe," \u2014 "),dV=n(Xxe,"A",{href:!0});var Tct=s(dV);ZOo=r(Tct,"XLNetForQuestionAnsweringSimple"),Tct.forEach(t),eVo=r(Xxe," (XLNet model)"),Xxe.forEach(t),oVo=i(X),Cv=n(X,"LI",{});var zxe=s(Cv);Xge=n(zxe,"STRONG",{});var Mct=s(Xge);rVo=r(Mct,"yoso"),Mct.forEach(t),tVo=r(zxe," \u2014 "),cV=n(zxe,"A",{href:!0});var Ect=s(cV);aVo=r(Ect,"YosoForQuestionAnswering"),Ect.forEach(t),nVo=r(zxe," (YOSO model)"),zxe.forEach(t),X.forEach(t),sVo=i(ia),wv=n(ia,"P",{});var Qxe=s(wv);lVo=r(Qxe,"The model is set in evaluation mode by default using "),zge=n(Qxe,"CODE",{});var Cct=s(zge);iVo=r(Cct,"model.eval()"),Cct.forEach(t),dVo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(Qxe,"CODE",{});var wct=s(Qge);cVo=r(wct,"model.train()"),wct.forEach(t),Qxe.forEach(t),fVo=i(ia),T(Av.$$.fragment,ia),ia.forEach(t),Js.forEach(t),bIe=i(f),Ki=n(f,"H2",{class:!0});var MNe=s(Ki);yv=n(MNe,"A",{id:!0,class:!0,href:!0});var Act=s(yv);Wge=n(Act,"SPAN",{});var yct=s(Wge);T(v0.$$.fragment,yct),yct.forEach(t),Act.forEach(t),mVo=i(MNe),Hge=n(MNe,"SPAN",{});var Lct=s(Hge);gVo=r(Lct,"AutoModelForTableQuestionAnswering"),Lct.forEach(t),MNe.forEach(t),vIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(F0.$$.fragment,Ys),hVo=i(Ys),Zi=n(Ys,"P",{});var yK=s(Zi);pVo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fV=n(yK,"A",{href:!0});var xct=s(fV);uVo=r(xct,"from_pretrained()"),xct.forEach(t),_Vo=r(yK," class method or the "),mV=n(yK,"A",{href:!0});var $ct=s(mV);bVo=r($ct,"from_config()"),$ct.forEach(t),vVo=r(yK,` class
method.`),yK.forEach(t),FVo=i(Ys),T0=n(Ys,"P",{});var ENe=s(T0);TVo=r(ENe,"This class cannot be instantiated directly using "),Uge=n(ENe,"CODE",{});var kct=s(Uge);MVo=r(kct,"__init__()"),kct.forEach(t),EVo=r(ENe," (throws an error)."),ENe.forEach(t),CVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var v3=s(ft);T(M0.$$.fragment,v3),wVo=i(v3),Jge=n(v3,"P",{});var Sct=s(Jge);AVo=r(Sct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sct.forEach(t),yVo=i(v3),ed=n(v3,"P",{});var LK=s(ed);LVo=r(LK,`Note:
Loading a model from its configuration file does `),Yge=n(LK,"STRONG",{});var Rct=s(Yge);xVo=r(Rct,"not"),Rct.forEach(t),$Vo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(LK,"A",{href:!0});var Bct=s(gV);kVo=r(Bct,"from_pretrained()"),Bct.forEach(t),SVo=r(LK," to load the model weights."),LK.forEach(t),RVo=i(v3),T(Lv.$$.fragment,v3),v3.forEach(t),BVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(E0.$$.fragment,da),PVo=i(da),Kge=n(da,"P",{});var Pct=s(Kge);IVo=r(Pct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pct.forEach(t),qVo=i(da),Ia=n(da,"P",{});var F3=s(Ia);NVo=r(F3,"The model class to instantiate is selected based on the "),Zge=n(F3,"CODE",{});var Ict=s(Zge);jVo=r(Ict,"model_type"),Ict.forEach(t),DVo=r(F3,` property of the config object (either
passed as an argument or loaded from `),ehe=n(F3,"CODE",{});var qct=s(ehe);GVo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),OVo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(F3,"CODE",{});var Nct=s(ohe);VVo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),XVo=r(F3,":"),F3.forEach(t),zVo=i(da),rhe=n(da,"UL",{});var jct=s(rhe);xv=n(jct,"LI",{});var Wxe=s(xv);the=n(Wxe,"STRONG",{});var Dct=s(the);QVo=r(Dct,"tapas"),Dct.forEach(t),WVo=r(Wxe," \u2014 "),hV=n(Wxe,"A",{href:!0});var Gct=s(hV);HVo=r(Gct,"TapasForQuestionAnswering"),Gct.forEach(t),UVo=r(Wxe," (TAPAS model)"),Wxe.forEach(t),jct.forEach(t),JVo=i(da),$v=n(da,"P",{});var Hxe=s($v);YVo=r(Hxe,"The model is set in evaluation mode by default using "),ahe=n(Hxe,"CODE",{});var Oct=s(ahe);KVo=r(Oct,"model.eval()"),Oct.forEach(t),ZVo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(Hxe,"CODE",{});var Vct=s(nhe);eXo=r(Vct,"model.train()"),Vct.forEach(t),Hxe.forEach(t),oXo=i(da),T(kv.$$.fragment,da),da.forEach(t),Ys.forEach(t),FIe=i(f),od=n(f,"H2",{class:!0});var CNe=s(od);Sv=n(CNe,"A",{id:!0,class:!0,href:!0});var Xct=s(Sv);she=n(Xct,"SPAN",{});var zct=s(she);T(C0.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),rXo=i(CNe),lhe=n(CNe,"SPAN",{});var Qct=s(lhe);tXo=r(Qct,"AutoModelForImageClassification"),Qct.forEach(t),CNe.forEach(t),TIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(w0.$$.fragment,Ks),aXo=i(Ks),rd=n(Ks,"P",{});var xK=s(rd);nXo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pV=n(xK,"A",{href:!0});var Wct=s(pV);sXo=r(Wct,"from_pretrained()"),Wct.forEach(t),lXo=r(xK," class method or the "),uV=n(xK,"A",{href:!0});var Hct=s(uV);iXo=r(Hct,"from_config()"),Hct.forEach(t),dXo=r(xK,` class
method.`),xK.forEach(t),cXo=i(Ks),A0=n(Ks,"P",{});var wNe=s(A0);fXo=r(wNe,"This class cannot be instantiated directly using "),ihe=n(wNe,"CODE",{});var Uct=s(ihe);mXo=r(Uct,"__init__()"),Uct.forEach(t),gXo=r(wNe," (throws an error)."),wNe.forEach(t),hXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var T3=s(mt);T(y0.$$.fragment,T3),pXo=i(T3),dhe=n(T3,"P",{});var Jct=s(dhe);uXo=r(Jct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jct.forEach(t),_Xo=i(T3),td=n(T3,"P",{});var $K=s(td);bXo=r($K,`Note:
Loading a model from its configuration file does `),che=n($K,"STRONG",{});var Yct=s(che);vXo=r(Yct,"not"),Yct.forEach(t),FXo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n($K,"A",{href:!0});var Kct=s(_V);TXo=r(Kct,"from_pretrained()"),Kct.forEach(t),MXo=r($K," to load the model weights."),$K.forEach(t),EXo=i(T3),T(Rv.$$.fragment,T3),T3.forEach(t),CXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(L0.$$.fragment,ca),wXo=i(ca),fhe=n(ca,"P",{});var Zct=s(fhe);AXo=r(Zct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zct.forEach(t),yXo=i(ca),qa=n(ca,"P",{});var M3=s(qa);LXo=r(M3,"The model class to instantiate is selected based on the "),mhe=n(M3,"CODE",{});var eft=s(mhe);xXo=r(eft,"model_type"),eft.forEach(t),$Xo=r(M3,` property of the config object (either
passed as an argument or loaded from `),ghe=n(M3,"CODE",{});var oft=s(ghe);kXo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),SXo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(M3,"CODE",{});var rft=s(hhe);RXo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),BXo=r(M3,":"),M3.forEach(t),PXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);Bv=n(Ee,"LI",{});var Uxe=s(Bv);phe=n(Uxe,"STRONG",{});var tft=s(phe);IXo=r(tft,"beit"),tft.forEach(t),qXo=r(Uxe," \u2014 "),bV=n(Uxe,"A",{href:!0});var aft=s(bV);NXo=r(aft,"BeitForImageClassification"),aft.forEach(t),jXo=r(Uxe," (BEiT model)"),Uxe.forEach(t),DXo=i(Ee),Pv=n(Ee,"LI",{});var Jxe=s(Pv);uhe=n(Jxe,"STRONG",{});var nft=s(uhe);GXo=r(nft,"convnext"),nft.forEach(t),OXo=r(Jxe," \u2014 "),vV=n(Jxe,"A",{href:!0});var sft=s(vV);VXo=r(sft,"ConvNextForImageClassification"),sft.forEach(t),XXo=r(Jxe," (ConvNext model)"),Jxe.forEach(t),zXo=i(Ee),Iv=n(Ee,"LI",{});var Yxe=s(Iv);_he=n(Yxe,"STRONG",{});var lft=s(_he);QXo=r(lft,"data2vec-vision"),lft.forEach(t),WXo=r(Yxe," \u2014 "),FV=n(Yxe,"A",{href:!0});var ift=s(FV);HXo=r(ift,"Data2VecVisionForImageClassification"),ift.forEach(t),UXo=r(Yxe," (Data2VecVision model)"),Yxe.forEach(t),JXo=i(Ee),Bs=n(Ee,"LI",{});var m$=s(Bs);bhe=n(m$,"STRONG",{});var dft=s(bhe);YXo=r(dft,"deit"),dft.forEach(t),KXo=r(m$," \u2014 "),TV=n(m$,"A",{href:!0});var cft=s(TV);ZXo=r(cft,"DeiTForImageClassification"),cft.forEach(t),ezo=r(m$," or "),MV=n(m$,"A",{href:!0});var fft=s(MV);ozo=r(fft,"DeiTForImageClassificationWithTeacher"),fft.forEach(t),rzo=r(m$," (DeiT model)"),m$.forEach(t),tzo=i(Ee),qv=n(Ee,"LI",{});var Kxe=s(qv);vhe=n(Kxe,"STRONG",{});var mft=s(vhe);azo=r(mft,"imagegpt"),mft.forEach(t),nzo=r(Kxe," \u2014 "),EV=n(Kxe,"A",{href:!0});var gft=s(EV);szo=r(gft,"ImageGPTForImageClassification"),gft.forEach(t),lzo=r(Kxe," (ImageGPT model)"),Kxe.forEach(t),izo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Fhe=n(ff,"STRONG",{});var hft=s(Fhe);dzo=r(hft,"perceiver"),hft.forEach(t),czo=r(ff," \u2014 "),CV=n(ff,"A",{href:!0});var pft=s(CV);fzo=r(pft,"PerceiverForImageClassificationLearned"),pft.forEach(t),mzo=r(ff," or "),wV=n(ff,"A",{href:!0});var uft=s(wV);gzo=r(uft,"PerceiverForImageClassificationFourier"),uft.forEach(t),hzo=r(ff," or "),AV=n(ff,"A",{href:!0});var _ft=s(AV);pzo=r(_ft,"PerceiverForImageClassificationConvProcessing"),_ft.forEach(t),uzo=r(ff," (Perceiver model)"),ff.forEach(t),_zo=i(Ee),Nv=n(Ee,"LI",{});var Zxe=s(Nv);The=n(Zxe,"STRONG",{});var bft=s(The);bzo=r(bft,"poolformer"),bft.forEach(t),vzo=r(Zxe," \u2014 "),yV=n(Zxe,"A",{href:!0});var vft=s(yV);Fzo=r(vft,"PoolFormerForImageClassification"),vft.forEach(t),Tzo=r(Zxe," (PoolFormer model)"),Zxe.forEach(t),Mzo=i(Ee),jv=n(Ee,"LI",{});var e7e=s(jv);Mhe=n(e7e,"STRONG",{});var Fft=s(Mhe);Ezo=r(Fft,"regnet"),Fft.forEach(t),Czo=r(e7e," \u2014 "),LV=n(e7e,"A",{href:!0});var Tft=s(LV);wzo=r(Tft,"RegNetForImageClassification"),Tft.forEach(t),Azo=r(e7e," (RegNet model)"),e7e.forEach(t),yzo=i(Ee),Dv=n(Ee,"LI",{});var o7e=s(Dv);Ehe=n(o7e,"STRONG",{});var Mft=s(Ehe);Lzo=r(Mft,"resnet"),Mft.forEach(t),xzo=r(o7e," \u2014 "),xV=n(o7e,"A",{href:!0});var Eft=s(xV);$zo=r(Eft,"ResNetForImageClassification"),Eft.forEach(t),kzo=r(o7e," (ResNet model)"),o7e.forEach(t),Szo=i(Ee),Gv=n(Ee,"LI",{});var r7e=s(Gv);Che=n(r7e,"STRONG",{});var Cft=s(Che);Rzo=r(Cft,"segformer"),Cft.forEach(t),Bzo=r(r7e," \u2014 "),$V=n(r7e,"A",{href:!0});var wft=s($V);Pzo=r(wft,"SegformerForImageClassification"),wft.forEach(t),Izo=r(r7e," (SegFormer model)"),r7e.forEach(t),qzo=i(Ee),Ov=n(Ee,"LI",{});var t7e=s(Ov);whe=n(t7e,"STRONG",{});var Aft=s(whe);Nzo=r(Aft,"swin"),Aft.forEach(t),jzo=r(t7e," \u2014 "),kV=n(t7e,"A",{href:!0});var yft=s(kV);Dzo=r(yft,"SwinForImageClassification"),yft.forEach(t),Gzo=r(t7e," (Swin model)"),t7e.forEach(t),Ozo=i(Ee),Vv=n(Ee,"LI",{});var a7e=s(Vv);Ahe=n(a7e,"STRONG",{});var Lft=s(Ahe);Vzo=r(Lft,"van"),Lft.forEach(t),Xzo=r(a7e," \u2014 "),SV=n(a7e,"A",{href:!0});var xft=s(SV);zzo=r(xft,"VanForImageClassification"),xft.forEach(t),Qzo=r(a7e," (VAN model)"),a7e.forEach(t),Wzo=i(Ee),Xv=n(Ee,"LI",{});var n7e=s(Xv);yhe=n(n7e,"STRONG",{});var $ft=s(yhe);Hzo=r($ft,"vit"),$ft.forEach(t),Uzo=r(n7e," \u2014 "),RV=n(n7e,"A",{href:!0});var kft=s(RV);Jzo=r(kft,"ViTForImageClassification"),kft.forEach(t),Yzo=r(n7e," (ViT model)"),n7e.forEach(t),Ee.forEach(t),Kzo=i(ca),zv=n(ca,"P",{});var s7e=s(zv);Zzo=r(s7e,"The model is set in evaluation mode by default using "),Lhe=n(s7e,"CODE",{});var Sft=s(Lhe);eQo=r(Sft,"model.eval()"),Sft.forEach(t),oQo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(s7e,"CODE",{});var Rft=s(xhe);rQo=r(Rft,"model.train()"),Rft.forEach(t),s7e.forEach(t),tQo=i(ca),T(Qv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),MIe=i(f),ad=n(f,"H2",{class:!0});var ANe=s(ad);Wv=n(ANe,"A",{id:!0,class:!0,href:!0});var Bft=s(Wv);$he=n(Bft,"SPAN",{});var Pft=s($he);T(x0.$$.fragment,Pft),Pft.forEach(t),Bft.forEach(t),aQo=i(ANe),khe=n(ANe,"SPAN",{});var Ift=s(khe);nQo=r(Ift,"AutoModelForVision2Seq"),Ift.forEach(t),ANe.forEach(t),EIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T($0.$$.fragment,Zs),sQo=i(Zs),nd=n(Zs,"P",{});var kK=s(nd);lQo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BV=n(kK,"A",{href:!0});var qft=s(BV);iQo=r(qft,"from_pretrained()"),qft.forEach(t),dQo=r(kK," class method or the "),PV=n(kK,"A",{href:!0});var Nft=s(PV);cQo=r(Nft,"from_config()"),Nft.forEach(t),fQo=r(kK,` class
method.`),kK.forEach(t),mQo=i(Zs),k0=n(Zs,"P",{});var yNe=s(k0);gQo=r(yNe,"This class cannot be instantiated directly using "),She=n(yNe,"CODE",{});var jft=s(She);hQo=r(jft,"__init__()"),jft.forEach(t),pQo=r(yNe," (throws an error)."),yNe.forEach(t),uQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var E3=s(ht);T(S0.$$.fragment,E3),_Qo=i(E3),Rhe=n(E3,"P",{});var Dft=s(Rhe);bQo=r(Dft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dft.forEach(t),vQo=i(E3),sd=n(E3,"P",{});var SK=s(sd);FQo=r(SK,`Note:
Loading a model from its configuration file does `),Bhe=n(SK,"STRONG",{});var Gft=s(Bhe);TQo=r(Gft,"not"),Gft.forEach(t),MQo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(SK,"A",{href:!0});var Oft=s(IV);EQo=r(Oft,"from_pretrained()"),Oft.forEach(t),CQo=r(SK," to load the model weights."),SK.forEach(t),wQo=i(E3),T(Hv.$$.fragment,E3),E3.forEach(t),AQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(R0.$$.fragment,fa),yQo=i(fa),Phe=n(fa,"P",{});var Vft=s(Phe);LQo=r(Vft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vft.forEach(t),xQo=i(fa),Na=n(fa,"P",{});var C3=s(Na);$Qo=r(C3,"The model class to instantiate is selected based on the "),Ihe=n(C3,"CODE",{});var Xft=s(Ihe);kQo=r(Xft,"model_type"),Xft.forEach(t),SQo=r(C3,` property of the config object (either
passed as an argument or loaded from `),qhe=n(C3,"CODE",{});var zft=s(qhe);RQo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),BQo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(C3,"CODE",{});var Qft=s(Nhe);PQo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),IQo=r(C3,":"),C3.forEach(t),qQo=i(fa),jhe=n(fa,"UL",{});var Wft=s(jhe);Uv=n(Wft,"LI",{});var l7e=s(Uv);Dhe=n(l7e,"STRONG",{});var Hft=s(Dhe);NQo=r(Hft,"vision-encoder-decoder"),Hft.forEach(t),jQo=r(l7e," \u2014 "),qV=n(l7e,"A",{href:!0});var Uft=s(qV);DQo=r(Uft,"VisionEncoderDecoderModel"),Uft.forEach(t),GQo=r(l7e," (Vision Encoder decoder model)"),l7e.forEach(t),Wft.forEach(t),OQo=i(fa),Jv=n(fa,"P",{});var i7e=s(Jv);VQo=r(i7e,"The model is set in evaluation mode by default using "),Ghe=n(i7e,"CODE",{});var Jft=s(Ghe);XQo=r(Jft,"model.eval()"),Jft.forEach(t),zQo=r(i7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(i7e,"CODE",{});var Yft=s(Ohe);QQo=r(Yft,"model.train()"),Yft.forEach(t),i7e.forEach(t),WQo=i(fa),T(Yv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),CIe=i(f),ld=n(f,"H2",{class:!0});var LNe=s(ld);Kv=n(LNe,"A",{id:!0,class:!0,href:!0});var Kft=s(Kv);Vhe=n(Kft,"SPAN",{});var Zft=s(Vhe);T(B0.$$.fragment,Zft),Zft.forEach(t),Kft.forEach(t),HQo=i(LNe),Xhe=n(LNe,"SPAN",{});var emt=s(Xhe);UQo=r(emt,"AutoModelForAudioClassification"),emt.forEach(t),LNe.forEach(t),wIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(P0.$$.fragment,el),JQo=i(el),id=n(el,"P",{});var RK=s(id);YQo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NV=n(RK,"A",{href:!0});var omt=s(NV);KQo=r(omt,"from_pretrained()"),omt.forEach(t),ZQo=r(RK," class method or the "),jV=n(RK,"A",{href:!0});var rmt=s(jV);eWo=r(rmt,"from_config()"),rmt.forEach(t),oWo=r(RK,` class
method.`),RK.forEach(t),rWo=i(el),I0=n(el,"P",{});var xNe=s(I0);tWo=r(xNe,"This class cannot be instantiated directly using "),zhe=n(xNe,"CODE",{});var tmt=s(zhe);aWo=r(tmt,"__init__()"),tmt.forEach(t),nWo=r(xNe," (throws an error)."),xNe.forEach(t),sWo=i(el),pt=n(el,"DIV",{class:!0});var w3=s(pt);T(q0.$$.fragment,w3),lWo=i(w3),Qhe=n(w3,"P",{});var amt=s(Qhe);iWo=r(amt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),amt.forEach(t),dWo=i(w3),dd=n(w3,"P",{});var BK=s(dd);cWo=r(BK,`Note:
Loading a model from its configuration file does `),Whe=n(BK,"STRONG",{});var nmt=s(Whe);fWo=r(nmt,"not"),nmt.forEach(t),mWo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(BK,"A",{href:!0});var smt=s(DV);gWo=r(smt,"from_pretrained()"),smt.forEach(t),hWo=r(BK," to load the model weights."),BK.forEach(t),pWo=i(w3),T(Zv.$$.fragment,w3),w3.forEach(t),uWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(N0.$$.fragment,ma),_Wo=i(ma),Hhe=n(ma,"P",{});var lmt=s(Hhe);bWo=r(lmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lmt.forEach(t),vWo=i(ma),ja=n(ma,"P",{});var A3=s(ja);FWo=r(A3,"The model class to instantiate is selected based on the "),Uhe=n(A3,"CODE",{});var imt=s(Uhe);TWo=r(imt,"model_type"),imt.forEach(t),MWo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(A3,"CODE",{});var dmt=s(Jhe);EWo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),CWo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(A3,"CODE",{});var cmt=s(Yhe);wWo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),AWo=r(A3,":"),A3.forEach(t),yWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);eF=n(bo,"LI",{});var d7e=s(eF);Khe=n(d7e,"STRONG",{});var fmt=s(Khe);LWo=r(fmt,"data2vec-audio"),fmt.forEach(t),xWo=r(d7e," \u2014 "),GV=n(d7e,"A",{href:!0});var mmt=s(GV);$Wo=r(mmt,"Data2VecAudioForSequenceClassification"),mmt.forEach(t),kWo=r(d7e," (Data2VecAudio model)"),d7e.forEach(t),SWo=i(bo),oF=n(bo,"LI",{});var c7e=s(oF);Zhe=n(c7e,"STRONG",{});var gmt=s(Zhe);RWo=r(gmt,"hubert"),gmt.forEach(t),BWo=r(c7e," \u2014 "),OV=n(c7e,"A",{href:!0});var hmt=s(OV);PWo=r(hmt,"HubertForSequenceClassification"),hmt.forEach(t),IWo=r(c7e," (Hubert model)"),c7e.forEach(t),qWo=i(bo),rF=n(bo,"LI",{});var f7e=s(rF);epe=n(f7e,"STRONG",{});var pmt=s(epe);NWo=r(pmt,"sew"),pmt.forEach(t),jWo=r(f7e," \u2014 "),VV=n(f7e,"A",{href:!0});var umt=s(VV);DWo=r(umt,"SEWForSequenceClassification"),umt.forEach(t),GWo=r(f7e," (SEW model)"),f7e.forEach(t),OWo=i(bo),tF=n(bo,"LI",{});var m7e=s(tF);ope=n(m7e,"STRONG",{});var _mt=s(ope);VWo=r(_mt,"sew-d"),_mt.forEach(t),XWo=r(m7e," \u2014 "),XV=n(m7e,"A",{href:!0});var bmt=s(XV);zWo=r(bmt,"SEWDForSequenceClassification"),bmt.forEach(t),QWo=r(m7e," (SEW-D model)"),m7e.forEach(t),WWo=i(bo),aF=n(bo,"LI",{});var g7e=s(aF);rpe=n(g7e,"STRONG",{});var vmt=s(rpe);HWo=r(vmt,"unispeech"),vmt.forEach(t),UWo=r(g7e," \u2014 "),zV=n(g7e,"A",{href:!0});var Fmt=s(zV);JWo=r(Fmt,"UniSpeechForSequenceClassification"),Fmt.forEach(t),YWo=r(g7e," (UniSpeech model)"),g7e.forEach(t),KWo=i(bo),nF=n(bo,"LI",{});var h7e=s(nF);tpe=n(h7e,"STRONG",{});var Tmt=s(tpe);ZWo=r(Tmt,"unispeech-sat"),Tmt.forEach(t),eHo=r(h7e," \u2014 "),QV=n(h7e,"A",{href:!0});var Mmt=s(QV);oHo=r(Mmt,"UniSpeechSatForSequenceClassification"),Mmt.forEach(t),rHo=r(h7e," (UniSpeechSat model)"),h7e.forEach(t),tHo=i(bo),sF=n(bo,"LI",{});var p7e=s(sF);ape=n(p7e,"STRONG",{});var Emt=s(ape);aHo=r(Emt,"wav2vec2"),Emt.forEach(t),nHo=r(p7e," \u2014 "),WV=n(p7e,"A",{href:!0});var Cmt=s(WV);sHo=r(Cmt,"Wav2Vec2ForSequenceClassification"),Cmt.forEach(t),lHo=r(p7e," (Wav2Vec2 model)"),p7e.forEach(t),iHo=i(bo),lF=n(bo,"LI",{});var u7e=s(lF);npe=n(u7e,"STRONG",{});var wmt=s(npe);dHo=r(wmt,"wavlm"),wmt.forEach(t),cHo=r(u7e," \u2014 "),HV=n(u7e,"A",{href:!0});var Amt=s(HV);fHo=r(Amt,"WavLMForSequenceClassification"),Amt.forEach(t),mHo=r(u7e," (WavLM model)"),u7e.forEach(t),bo.forEach(t),gHo=i(ma),iF=n(ma,"P",{});var _7e=s(iF);hHo=r(_7e,"The model is set in evaluation mode by default using "),spe=n(_7e,"CODE",{});var ymt=s(spe);pHo=r(ymt,"model.eval()"),ymt.forEach(t),uHo=r(_7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(_7e,"CODE",{});var Lmt=s(lpe);_Ho=r(Lmt,"model.train()"),Lmt.forEach(t),_7e.forEach(t),bHo=i(ma),T(dF.$$.fragment,ma),ma.forEach(t),el.forEach(t),AIe=i(f),cd=n(f,"H2",{class:!0});var $Ne=s(cd);cF=n($Ne,"A",{id:!0,class:!0,href:!0});var xmt=s(cF);ipe=n(xmt,"SPAN",{});var $mt=s(ipe);T(j0.$$.fragment,$mt),$mt.forEach(t),xmt.forEach(t),vHo=i($Ne),dpe=n($Ne,"SPAN",{});var kmt=s(dpe);FHo=r(kmt,"AutoModelForAudioFrameClassification"),kmt.forEach(t),$Ne.forEach(t),yIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(D0.$$.fragment,ol),THo=i(ol),fd=n(ol,"P",{});var PK=s(fd);MHo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UV=n(PK,"A",{href:!0});var Smt=s(UV);EHo=r(Smt,"from_pretrained()"),Smt.forEach(t),CHo=r(PK," class method or the "),JV=n(PK,"A",{href:!0});var Rmt=s(JV);wHo=r(Rmt,"from_config()"),Rmt.forEach(t),AHo=r(PK,` class
method.`),PK.forEach(t),yHo=i(ol),G0=n(ol,"P",{});var kNe=s(G0);LHo=r(kNe,"This class cannot be instantiated directly using "),cpe=n(kNe,"CODE",{});var Bmt=s(cpe);xHo=r(Bmt,"__init__()"),Bmt.forEach(t),$Ho=r(kNe," (throws an error)."),kNe.forEach(t),kHo=i(ol),ut=n(ol,"DIV",{class:!0});var y3=s(ut);T(O0.$$.fragment,y3),SHo=i(y3),fpe=n(y3,"P",{});var Pmt=s(fpe);RHo=r(Pmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pmt.forEach(t),BHo=i(y3),md=n(y3,"P",{});var IK=s(md);PHo=r(IK,`Note:
Loading a model from its configuration file does `),mpe=n(IK,"STRONG",{});var Imt=s(mpe);IHo=r(Imt,"not"),Imt.forEach(t),qHo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(IK,"A",{href:!0});var qmt=s(YV);NHo=r(qmt,"from_pretrained()"),qmt.forEach(t),jHo=r(IK," to load the model weights."),IK.forEach(t),DHo=i(y3),T(fF.$$.fragment,y3),y3.forEach(t),GHo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(V0.$$.fragment,ga),OHo=i(ga),gpe=n(ga,"P",{});var Nmt=s(gpe);VHo=r(Nmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nmt.forEach(t),XHo=i(ga),Da=n(ga,"P",{});var L3=s(Da);zHo=r(L3,"The model class to instantiate is selected based on the "),hpe=n(L3,"CODE",{});var jmt=s(hpe);QHo=r(jmt,"model_type"),jmt.forEach(t),WHo=r(L3,` property of the config object (either
passed as an argument or loaded from `),ppe=n(L3,"CODE",{});var Dmt=s(ppe);HHo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),UHo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(L3,"CODE",{});var Gmt=s(upe);JHo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),YHo=r(L3,":"),L3.forEach(t),KHo=i(ga),Ga=n(ga,"UL",{});var x3=s(Ga);mF=n(x3,"LI",{});var b7e=s(mF);_pe=n(b7e,"STRONG",{});var Omt=s(_pe);ZHo=r(Omt,"data2vec-audio"),Omt.forEach(t),eUo=r(b7e," \u2014 "),KV=n(b7e,"A",{href:!0});var Vmt=s(KV);oUo=r(Vmt,"Data2VecAudioForAudioFrameClassification"),Vmt.forEach(t),rUo=r(b7e," (Data2VecAudio model)"),b7e.forEach(t),tUo=i(x3),gF=n(x3,"LI",{});var v7e=s(gF);bpe=n(v7e,"STRONG",{});var Xmt=s(bpe);aUo=r(Xmt,"unispeech-sat"),Xmt.forEach(t),nUo=r(v7e," \u2014 "),ZV=n(v7e,"A",{href:!0});var zmt=s(ZV);sUo=r(zmt,"UniSpeechSatForAudioFrameClassification"),zmt.forEach(t),lUo=r(v7e," (UniSpeechSat model)"),v7e.forEach(t),iUo=i(x3),hF=n(x3,"LI",{});var F7e=s(hF);vpe=n(F7e,"STRONG",{});var Qmt=s(vpe);dUo=r(Qmt,"wav2vec2"),Qmt.forEach(t),cUo=r(F7e," \u2014 "),eX=n(F7e,"A",{href:!0});var Wmt=s(eX);fUo=r(Wmt,"Wav2Vec2ForAudioFrameClassification"),Wmt.forEach(t),mUo=r(F7e," (Wav2Vec2 model)"),F7e.forEach(t),gUo=i(x3),pF=n(x3,"LI",{});var T7e=s(pF);Fpe=n(T7e,"STRONG",{});var Hmt=s(Fpe);hUo=r(Hmt,"wavlm"),Hmt.forEach(t),pUo=r(T7e," \u2014 "),oX=n(T7e,"A",{href:!0});var Umt=s(oX);uUo=r(Umt,"WavLMForAudioFrameClassification"),Umt.forEach(t),_Uo=r(T7e," (WavLM model)"),T7e.forEach(t),x3.forEach(t),bUo=i(ga),uF=n(ga,"P",{});var M7e=s(uF);vUo=r(M7e,"The model is set in evaluation mode by default using "),Tpe=n(M7e,"CODE",{});var Jmt=s(Tpe);FUo=r(Jmt,"model.eval()"),Jmt.forEach(t),TUo=r(M7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=n(M7e,"CODE",{});var Ymt=s(Mpe);MUo=r(Ymt,"model.train()"),Ymt.forEach(t),M7e.forEach(t),EUo=i(ga),T(_F.$$.fragment,ga),ga.forEach(t),ol.forEach(t),LIe=i(f),gd=n(f,"H2",{class:!0});var SNe=s(gd);bF=n(SNe,"A",{id:!0,class:!0,href:!0});var Kmt=s(bF);Epe=n(Kmt,"SPAN",{});var Zmt=s(Epe);T(X0.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),CUo=i(SNe),Cpe=n(SNe,"SPAN",{});var egt=s(Cpe);wUo=r(egt,"AutoModelForCTC"),egt.forEach(t),SNe.forEach(t),xIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(z0.$$.fragment,rl),AUo=i(rl),hd=n(rl,"P",{});var qK=s(hd);yUo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rX=n(qK,"A",{href:!0});var ogt=s(rX);LUo=r(ogt,"from_pretrained()"),ogt.forEach(t),xUo=r(qK," class method or the "),tX=n(qK,"A",{href:!0});var rgt=s(tX);$Uo=r(rgt,"from_config()"),rgt.forEach(t),kUo=r(qK,` class
method.`),qK.forEach(t),SUo=i(rl),Q0=n(rl,"P",{});var RNe=s(Q0);RUo=r(RNe,"This class cannot be instantiated directly using "),wpe=n(RNe,"CODE",{});var tgt=s(wpe);BUo=r(tgt,"__init__()"),tgt.forEach(t),PUo=r(RNe," (throws an error)."),RNe.forEach(t),IUo=i(rl),_t=n(rl,"DIV",{class:!0});var $3=s(_t);T(W0.$$.fragment,$3),qUo=i($3),Ape=n($3,"P",{});var agt=s(Ape);NUo=r(agt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),agt.forEach(t),jUo=i($3),pd=n($3,"P",{});var NK=s(pd);DUo=r(NK,`Note:
Loading a model from its configuration file does `),ype=n(NK,"STRONG",{});var ngt=s(ype);GUo=r(ngt,"not"),ngt.forEach(t),OUo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(NK,"A",{href:!0});var sgt=s(aX);VUo=r(sgt,"from_pretrained()"),sgt.forEach(t),XUo=r(NK," to load the model weights."),NK.forEach(t),zUo=i($3),T(vF.$$.fragment,$3),$3.forEach(t),QUo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(H0.$$.fragment,ha),WUo=i(ha),Lpe=n(ha,"P",{});var lgt=s(Lpe);HUo=r(lgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lgt.forEach(t),UUo=i(ha),Oa=n(ha,"P",{});var k3=s(Oa);JUo=r(k3,"The model class to instantiate is selected based on the "),xpe=n(k3,"CODE",{});var igt=s(xpe);YUo=r(igt,"model_type"),igt.forEach(t),KUo=r(k3,` property of the config object (either
passed as an argument or loaded from `),$pe=n(k3,"CODE",{});var dgt=s($pe);ZUo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),eJo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(k3,"CODE",{});var cgt=s(kpe);oJo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),rJo=r(k3,":"),k3.forEach(t),tJo=i(ha),je=n(ha,"UL",{});var vo=s(je);FF=n(vo,"LI",{});var E7e=s(FF);Spe=n(E7e,"STRONG",{});var fgt=s(Spe);aJo=r(fgt,"data2vec-audio"),fgt.forEach(t),nJo=r(E7e," \u2014 "),nX=n(E7e,"A",{href:!0});var mgt=s(nX);sJo=r(mgt,"Data2VecAudioForCTC"),mgt.forEach(t),lJo=r(E7e," (Data2VecAudio model)"),E7e.forEach(t),iJo=i(vo),TF=n(vo,"LI",{});var C7e=s(TF);Rpe=n(C7e,"STRONG",{});var ggt=s(Rpe);dJo=r(ggt,"hubert"),ggt.forEach(t),cJo=r(C7e," \u2014 "),sX=n(C7e,"A",{href:!0});var hgt=s(sX);fJo=r(hgt,"HubertForCTC"),hgt.forEach(t),mJo=r(C7e," (Hubert model)"),C7e.forEach(t),gJo=i(vo),MF=n(vo,"LI",{});var w7e=s(MF);Bpe=n(w7e,"STRONG",{});var pgt=s(Bpe);hJo=r(pgt,"sew"),pgt.forEach(t),pJo=r(w7e," \u2014 "),lX=n(w7e,"A",{href:!0});var ugt=s(lX);uJo=r(ugt,"SEWForCTC"),ugt.forEach(t),_Jo=r(w7e," (SEW model)"),w7e.forEach(t),bJo=i(vo),EF=n(vo,"LI",{});var A7e=s(EF);Ppe=n(A7e,"STRONG",{});var _gt=s(Ppe);vJo=r(_gt,"sew-d"),_gt.forEach(t),FJo=r(A7e," \u2014 "),iX=n(A7e,"A",{href:!0});var bgt=s(iX);TJo=r(bgt,"SEWDForCTC"),bgt.forEach(t),MJo=r(A7e," (SEW-D model)"),A7e.forEach(t),EJo=i(vo),CF=n(vo,"LI",{});var y7e=s(CF);Ipe=n(y7e,"STRONG",{});var vgt=s(Ipe);CJo=r(vgt,"unispeech"),vgt.forEach(t),wJo=r(y7e," \u2014 "),dX=n(y7e,"A",{href:!0});var Fgt=s(dX);AJo=r(Fgt,"UniSpeechForCTC"),Fgt.forEach(t),yJo=r(y7e," (UniSpeech model)"),y7e.forEach(t),LJo=i(vo),wF=n(vo,"LI",{});var L7e=s(wF);qpe=n(L7e,"STRONG",{});var Tgt=s(qpe);xJo=r(Tgt,"unispeech-sat"),Tgt.forEach(t),$Jo=r(L7e," \u2014 "),cX=n(L7e,"A",{href:!0});var Mgt=s(cX);kJo=r(Mgt,"UniSpeechSatForCTC"),Mgt.forEach(t),SJo=r(L7e," (UniSpeechSat model)"),L7e.forEach(t),RJo=i(vo),AF=n(vo,"LI",{});var x7e=s(AF);Npe=n(x7e,"STRONG",{});var Egt=s(Npe);BJo=r(Egt,"wav2vec2"),Egt.forEach(t),PJo=r(x7e," \u2014 "),fX=n(x7e,"A",{href:!0});var Cgt=s(fX);IJo=r(Cgt,"Wav2Vec2ForCTC"),Cgt.forEach(t),qJo=r(x7e," (Wav2Vec2 model)"),x7e.forEach(t),NJo=i(vo),yF=n(vo,"LI",{});var $7e=s(yF);jpe=n($7e,"STRONG",{});var wgt=s(jpe);jJo=r(wgt,"wavlm"),wgt.forEach(t),DJo=r($7e," \u2014 "),mX=n($7e,"A",{href:!0});var Agt=s(mX);GJo=r(Agt,"WavLMForCTC"),Agt.forEach(t),OJo=r($7e," (WavLM model)"),$7e.forEach(t),vo.forEach(t),VJo=i(ha),LF=n(ha,"P",{});var k7e=s(LF);XJo=r(k7e,"The model is set in evaluation mode by default using "),Dpe=n(k7e,"CODE",{});var ygt=s(Dpe);zJo=r(ygt,"model.eval()"),ygt.forEach(t),QJo=r(k7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(k7e,"CODE",{});var Lgt=s(Gpe);WJo=r(Lgt,"model.train()"),Lgt.forEach(t),k7e.forEach(t),HJo=i(ha),T(xF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),$Ie=i(f),ud=n(f,"H2",{class:!0});var BNe=s(ud);$F=n(BNe,"A",{id:!0,class:!0,href:!0});var xgt=s($F);Ope=n(xgt,"SPAN",{});var $gt=s(Ope);T(U0.$$.fragment,$gt),$gt.forEach(t),xgt.forEach(t),UJo=i(BNe),Vpe=n(BNe,"SPAN",{});var kgt=s(Vpe);JJo=r(kgt,"AutoModelForSpeechSeq2Seq"),kgt.forEach(t),BNe.forEach(t),kIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(J0.$$.fragment,tl),YJo=i(tl),_d=n(tl,"P",{});var jK=s(_d);KJo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gX=n(jK,"A",{href:!0});var Sgt=s(gX);ZJo=r(Sgt,"from_pretrained()"),Sgt.forEach(t),eYo=r(jK," class method or the "),hX=n(jK,"A",{href:!0});var Rgt=s(hX);oYo=r(Rgt,"from_config()"),Rgt.forEach(t),rYo=r(jK,` class
method.`),jK.forEach(t),tYo=i(tl),Y0=n(tl,"P",{});var PNe=s(Y0);aYo=r(PNe,"This class cannot be instantiated directly using "),Xpe=n(PNe,"CODE",{});var Bgt=s(Xpe);nYo=r(Bgt,"__init__()"),Bgt.forEach(t),sYo=r(PNe," (throws an error)."),PNe.forEach(t),lYo=i(tl),bt=n(tl,"DIV",{class:!0});var S3=s(bt);T(K0.$$.fragment,S3),iYo=i(S3),zpe=n(S3,"P",{});var Pgt=s(zpe);dYo=r(Pgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pgt.forEach(t),cYo=i(S3),bd=n(S3,"P",{});var DK=s(bd);fYo=r(DK,`Note:
Loading a model from its configuration file does `),Qpe=n(DK,"STRONG",{});var Igt=s(Qpe);mYo=r(Igt,"not"),Igt.forEach(t),gYo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(DK,"A",{href:!0});var qgt=s(pX);hYo=r(qgt,"from_pretrained()"),qgt.forEach(t),pYo=r(DK," to load the model weights."),DK.forEach(t),uYo=i(S3),T(kF.$$.fragment,S3),S3.forEach(t),_Yo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Z0.$$.fragment,pa),bYo=i(pa),Wpe=n(pa,"P",{});var Ngt=s(Wpe);vYo=r(Ngt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ngt.forEach(t),FYo=i(pa),Va=n(pa,"P",{});var R3=s(Va);TYo=r(R3,"The model class to instantiate is selected based on the "),Hpe=n(R3,"CODE",{});var jgt=s(Hpe);MYo=r(jgt,"model_type"),jgt.forEach(t),EYo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Upe=n(R3,"CODE",{});var Dgt=s(Upe);CYo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),wYo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(R3,"CODE",{});var Ggt=s(Jpe);AYo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),yYo=r(R3,":"),R3.forEach(t),LYo=i(pa),ey=n(pa,"UL",{});var INe=s(ey);SF=n(INe,"LI",{});var S7e=s(SF);Ype=n(S7e,"STRONG",{});var Ogt=s(Ype);xYo=r(Ogt,"speech-encoder-decoder"),Ogt.forEach(t),$Yo=r(S7e," \u2014 "),uX=n(S7e,"A",{href:!0});var Vgt=s(uX);kYo=r(Vgt,"SpeechEncoderDecoderModel"),Vgt.forEach(t),SYo=r(S7e," (Speech Encoder decoder model)"),S7e.forEach(t),RYo=i(INe),RF=n(INe,"LI",{});var R7e=s(RF);Kpe=n(R7e,"STRONG",{});var Xgt=s(Kpe);BYo=r(Xgt,"speech_to_text"),Xgt.forEach(t),PYo=r(R7e," \u2014 "),_X=n(R7e,"A",{href:!0});var zgt=s(_X);IYo=r(zgt,"Speech2TextForConditionalGeneration"),zgt.forEach(t),qYo=r(R7e," (Speech2Text model)"),R7e.forEach(t),INe.forEach(t),NYo=i(pa),BF=n(pa,"P",{});var B7e=s(BF);jYo=r(B7e,"The model is set in evaluation mode by default using "),Zpe=n(B7e,"CODE",{});var Qgt=s(Zpe);DYo=r(Qgt,"model.eval()"),Qgt.forEach(t),GYo=r(B7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(B7e,"CODE",{});var Wgt=s(eue);OYo=r(Wgt,"model.train()"),Wgt.forEach(t),B7e.forEach(t),VYo=i(pa),T(PF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),SIe=i(f),vd=n(f,"H2",{class:!0});var qNe=s(vd);IF=n(qNe,"A",{id:!0,class:!0,href:!0});var Hgt=s(IF);oue=n(Hgt,"SPAN",{});var Ugt=s(oue);T(oy.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),XYo=i(qNe),rue=n(qNe,"SPAN",{});var Jgt=s(rue);zYo=r(Jgt,"AutoModelForAudioXVector"),Jgt.forEach(t),qNe.forEach(t),RIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(ry.$$.fragment,al),QYo=i(al),Fd=n(al,"P",{});var GK=s(Fd);WYo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bX=n(GK,"A",{href:!0});var Ygt=s(bX);HYo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),UYo=r(GK," class method or the "),vX=n(GK,"A",{href:!0});var Kgt=s(vX);JYo=r(Kgt,"from_config()"),Kgt.forEach(t),YYo=r(GK,` class
method.`),GK.forEach(t),KYo=i(al),ty=n(al,"P",{});var NNe=s(ty);ZYo=r(NNe,"This class cannot be instantiated directly using "),tue=n(NNe,"CODE",{});var Zgt=s(tue);eKo=r(Zgt,"__init__()"),Zgt.forEach(t),oKo=r(NNe," (throws an error)."),NNe.forEach(t),rKo=i(al),vt=n(al,"DIV",{class:!0});var B3=s(vt);T(ay.$$.fragment,B3),tKo=i(B3),aue=n(B3,"P",{});var eht=s(aue);aKo=r(eht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eht.forEach(t),nKo=i(B3),Td=n(B3,"P",{});var OK=s(Td);sKo=r(OK,`Note:
Loading a model from its configuration file does `),nue=n(OK,"STRONG",{});var oht=s(nue);lKo=r(oht,"not"),oht.forEach(t),iKo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(OK,"A",{href:!0});var rht=s(FX);dKo=r(rht,"from_pretrained()"),rht.forEach(t),cKo=r(OK," to load the model weights."),OK.forEach(t),fKo=i(B3),T(qF.$$.fragment,B3),B3.forEach(t),mKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(ny.$$.fragment,ua),gKo=i(ua),sue=n(ua,"P",{});var tht=s(sue);hKo=r(tht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tht.forEach(t),pKo=i(ua),Xa=n(ua,"P",{});var P3=s(Xa);uKo=r(P3,"The model class to instantiate is selected based on the "),lue=n(P3,"CODE",{});var aht=s(lue);_Ko=r(aht,"model_type"),aht.forEach(t),bKo=r(P3,` property of the config object (either
passed as an argument or loaded from `),iue=n(P3,"CODE",{});var nht=s(iue);vKo=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),FKo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(P3,"CODE",{});var sht=s(due);TKo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),MKo=r(P3,":"),P3.forEach(t),EKo=i(ua),za=n(ua,"UL",{});var I3=s(za);NF=n(I3,"LI",{});var P7e=s(NF);cue=n(P7e,"STRONG",{});var lht=s(cue);CKo=r(lht,"data2vec-audio"),lht.forEach(t),wKo=r(P7e," \u2014 "),TX=n(P7e,"A",{href:!0});var iht=s(TX);AKo=r(iht,"Data2VecAudioForXVector"),iht.forEach(t),yKo=r(P7e," (Data2VecAudio model)"),P7e.forEach(t),LKo=i(I3),jF=n(I3,"LI",{});var I7e=s(jF);fue=n(I7e,"STRONG",{});var dht=s(fue);xKo=r(dht,"unispeech-sat"),dht.forEach(t),$Ko=r(I7e," \u2014 "),MX=n(I7e,"A",{href:!0});var cht=s(MX);kKo=r(cht,"UniSpeechSatForXVector"),cht.forEach(t),SKo=r(I7e," (UniSpeechSat model)"),I7e.forEach(t),RKo=i(I3),DF=n(I3,"LI",{});var q7e=s(DF);mue=n(q7e,"STRONG",{});var fht=s(mue);BKo=r(fht,"wav2vec2"),fht.forEach(t),PKo=r(q7e," \u2014 "),EX=n(q7e,"A",{href:!0});var mht=s(EX);IKo=r(mht,"Wav2Vec2ForXVector"),mht.forEach(t),qKo=r(q7e," (Wav2Vec2 model)"),q7e.forEach(t),NKo=i(I3),GF=n(I3,"LI",{});var N7e=s(GF);gue=n(N7e,"STRONG",{});var ght=s(gue);jKo=r(ght,"wavlm"),ght.forEach(t),DKo=r(N7e," \u2014 "),CX=n(N7e,"A",{href:!0});var hht=s(CX);GKo=r(hht,"WavLMForXVector"),hht.forEach(t),OKo=r(N7e," (WavLM model)"),N7e.forEach(t),I3.forEach(t),VKo=i(ua),OF=n(ua,"P",{});var j7e=s(OF);XKo=r(j7e,"The model is set in evaluation mode by default using "),hue=n(j7e,"CODE",{});var pht=s(hue);zKo=r(pht,"model.eval()"),pht.forEach(t),QKo=r(j7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(j7e,"CODE",{});var uht=s(pue);WKo=r(uht,"model.train()"),uht.forEach(t),j7e.forEach(t),HKo=i(ua),T(VF.$$.fragment,ua),ua.forEach(t),al.forEach(t),BIe=i(f),Md=n(f,"H2",{class:!0});var jNe=s(Md);XF=n(jNe,"A",{id:!0,class:!0,href:!0});var _ht=s(XF);uue=n(_ht,"SPAN",{});var bht=s(uue);T(sy.$$.fragment,bht),bht.forEach(t),_ht.forEach(t),UKo=i(jNe),_ue=n(jNe,"SPAN",{});var vht=s(_ue);JKo=r(vht,"AutoModelForMaskedImageModeling"),vht.forEach(t),jNe.forEach(t),PIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(ly.$$.fragment,nl),YKo=i(nl),Ed=n(nl,"P",{});var VK=s(Ed);KKo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wX=n(VK,"A",{href:!0});var Fht=s(wX);ZKo=r(Fht,"from_pretrained()"),Fht.forEach(t),eZo=r(VK," class method or the "),AX=n(VK,"A",{href:!0});var Tht=s(AX);oZo=r(Tht,"from_config()"),Tht.forEach(t),rZo=r(VK,` class
method.`),VK.forEach(t),tZo=i(nl),iy=n(nl,"P",{});var DNe=s(iy);aZo=r(DNe,"This class cannot be instantiated directly using "),bue=n(DNe,"CODE",{});var Mht=s(bue);nZo=r(Mht,"__init__()"),Mht.forEach(t),sZo=r(DNe," (throws an error)."),DNe.forEach(t),lZo=i(nl),Ft=n(nl,"DIV",{class:!0});var q3=s(Ft);T(dy.$$.fragment,q3),iZo=i(q3),vue=n(q3,"P",{});var Eht=s(vue);dZo=r(Eht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eht.forEach(t),cZo=i(q3),Cd=n(q3,"P",{});var XK=s(Cd);fZo=r(XK,`Note:
Loading a model from its configuration file does `),Fue=n(XK,"STRONG",{});var Cht=s(Fue);mZo=r(Cht,"not"),Cht.forEach(t),gZo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(XK,"A",{href:!0});var wht=s(yX);hZo=r(wht,"from_pretrained()"),wht.forEach(t),pZo=r(XK," to load the model weights."),XK.forEach(t),uZo=i(q3),T(zF.$$.fragment,q3),q3.forEach(t),_Zo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(cy.$$.fragment,_a),bZo=i(_a),Tue=n(_a,"P",{});var Aht=s(Tue);vZo=r(Aht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Aht.forEach(t),FZo=i(_a),Qa=n(_a,"P",{});var N3=s(Qa);TZo=r(N3,"The model class to instantiate is selected based on the "),Mue=n(N3,"CODE",{});var yht=s(Mue);MZo=r(yht,"model_type"),yht.forEach(t),EZo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Eue=n(N3,"CODE",{});var Lht=s(Eue);CZo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),wZo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(N3,"CODE",{});var xht=s(Cue);AZo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),yZo=r(N3,":"),N3.forEach(t),LZo=i(_a),wd=n(_a,"UL",{});var zK=s(wd);QF=n(zK,"LI",{});var D7e=s(QF);wue=n(D7e,"STRONG",{});var $ht=s(wue);xZo=r($ht,"deit"),$ht.forEach(t),$Zo=r(D7e," \u2014 "),LX=n(D7e,"A",{href:!0});var kht=s(LX);kZo=r(kht,"DeiTForMaskedImageModeling"),kht.forEach(t),SZo=r(D7e," (DeiT model)"),D7e.forEach(t),RZo=i(zK),WF=n(zK,"LI",{});var G7e=s(WF);Aue=n(G7e,"STRONG",{});var Sht=s(Aue);BZo=r(Sht,"swin"),Sht.forEach(t),PZo=r(G7e," \u2014 "),xX=n(G7e,"A",{href:!0});var Rht=s(xX);IZo=r(Rht,"SwinForMaskedImageModeling"),Rht.forEach(t),qZo=r(G7e," (Swin model)"),G7e.forEach(t),NZo=i(zK),HF=n(zK,"LI",{});var O7e=s(HF);yue=n(O7e,"STRONG",{});var Bht=s(yue);jZo=r(Bht,"vit"),Bht.forEach(t),DZo=r(O7e," \u2014 "),$X=n(O7e,"A",{href:!0});var Pht=s($X);GZo=r(Pht,"ViTForMaskedImageModeling"),Pht.forEach(t),OZo=r(O7e," (ViT model)"),O7e.forEach(t),zK.forEach(t),VZo=i(_a),UF=n(_a,"P",{});var V7e=s(UF);XZo=r(V7e,"The model is set in evaluation mode by default using "),Lue=n(V7e,"CODE",{});var Iht=s(Lue);zZo=r(Iht,"model.eval()"),Iht.forEach(t),QZo=r(V7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(V7e,"CODE",{});var qht=s(xue);WZo=r(qht,"model.train()"),qht.forEach(t),V7e.forEach(t),HZo=i(_a),T(JF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),IIe=i(f),Ad=n(f,"H2",{class:!0});var GNe=s(Ad);YF=n(GNe,"A",{id:!0,class:!0,href:!0});var Nht=s(YF);$ue=n(Nht,"SPAN",{});var jht=s($ue);T(fy.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),UZo=i(GNe),kue=n(GNe,"SPAN",{});var Dht=s(kue);JZo=r(Dht,"AutoModelForObjectDetection"),Dht.forEach(t),GNe.forEach(t),qIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(my.$$.fragment,sl),YZo=i(sl),yd=n(sl,"P",{});var QK=s(yd);KZo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kX=n(QK,"A",{href:!0});var Ght=s(kX);ZZo=r(Ght,"from_pretrained()"),Ght.forEach(t),eer=r(QK," class method or the "),SX=n(QK,"A",{href:!0});var Oht=s(SX);oer=r(Oht,"from_config()"),Oht.forEach(t),rer=r(QK,` class
method.`),QK.forEach(t),ter=i(sl),gy=n(sl,"P",{});var ONe=s(gy);aer=r(ONe,"This class cannot be instantiated directly using "),Sue=n(ONe,"CODE",{});var Vht=s(Sue);ner=r(Vht,"__init__()"),Vht.forEach(t),ser=r(ONe," (throws an error)."),ONe.forEach(t),ler=i(sl),Tt=n(sl,"DIV",{class:!0});var j3=s(Tt);T(hy.$$.fragment,j3),ier=i(j3),Rue=n(j3,"P",{});var Xht=s(Rue);der=r(Xht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xht.forEach(t),cer=i(j3),Ld=n(j3,"P",{});var WK=s(Ld);fer=r(WK,`Note:
Loading a model from its configuration file does `),Bue=n(WK,"STRONG",{});var zht=s(Bue);mer=r(zht,"not"),zht.forEach(t),ger=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(WK,"A",{href:!0});var Qht=s(RX);her=r(Qht,"from_pretrained()"),Qht.forEach(t),per=r(WK," to load the model weights."),WK.forEach(t),uer=i(j3),T(KF.$$.fragment,j3),j3.forEach(t),_er=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(py.$$.fragment,ba),ber=i(ba),Pue=n(ba,"P",{});var Wht=s(Pue);ver=r(Wht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wht.forEach(t),Fer=i(ba),Wa=n(ba,"P",{});var D3=s(Wa);Ter=r(D3,"The model class to instantiate is selected based on the "),Iue=n(D3,"CODE",{});var Hht=s(Iue);Mer=r(Hht,"model_type"),Hht.forEach(t),Eer=r(D3,` property of the config object (either
passed as an argument or loaded from `),que=n(D3,"CODE",{});var Uht=s(que);Cer=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),wer=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(D3,"CODE",{});var Jht=s(Nue);Aer=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),yer=r(D3,":"),D3.forEach(t),Ler=i(ba),uy=n(ba,"UL",{});var VNe=s(uy);ZF=n(VNe,"LI",{});var X7e=s(ZF);jue=n(X7e,"STRONG",{});var Yht=s(jue);xer=r(Yht,"detr"),Yht.forEach(t),$er=r(X7e," \u2014 "),BX=n(X7e,"A",{href:!0});var Kht=s(BX);ker=r(Kht,"DetrForObjectDetection"),Kht.forEach(t),Ser=r(X7e," (DETR model)"),X7e.forEach(t),Rer=i(VNe),e6=n(VNe,"LI",{});var z7e=s(e6);Due=n(z7e,"STRONG",{});var Zht=s(Due);Ber=r(Zht,"yolos"),Zht.forEach(t),Per=r(z7e," \u2014 "),PX=n(z7e,"A",{href:!0});var ept=s(PX);Ier=r(ept,"YolosForObjectDetection"),ept.forEach(t),qer=r(z7e," (YOLOS model)"),z7e.forEach(t),VNe.forEach(t),Ner=i(ba),o6=n(ba,"P",{});var Q7e=s(o6);jer=r(Q7e,"The model is set in evaluation mode by default using "),Gue=n(Q7e,"CODE",{});var opt=s(Gue);Der=r(opt,"model.eval()"),opt.forEach(t),Ger=r(Q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(Q7e,"CODE",{});var rpt=s(Oue);Oer=r(rpt,"model.train()"),rpt.forEach(t),Q7e.forEach(t),Ver=i(ba),T(r6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),NIe=i(f),xd=n(f,"H2",{class:!0});var XNe=s(xd);t6=n(XNe,"A",{id:!0,class:!0,href:!0});var tpt=s(t6);Vue=n(tpt,"SPAN",{});var apt=s(Vue);T(_y.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),Xer=i(XNe),Xue=n(XNe,"SPAN",{});var npt=s(Xue);zer=r(npt,"AutoModelForImageSegmentation"),npt.forEach(t),XNe.forEach(t),jIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(by.$$.fragment,ll),Qer=i(ll),$d=n(ll,"P",{});var HK=s($d);Wer=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IX=n(HK,"A",{href:!0});var spt=s(IX);Her=r(spt,"from_pretrained()"),spt.forEach(t),Uer=r(HK," class method or the "),qX=n(HK,"A",{href:!0});var lpt=s(qX);Jer=r(lpt,"from_config()"),lpt.forEach(t),Yer=r(HK,` class
method.`),HK.forEach(t),Ker=i(ll),vy=n(ll,"P",{});var zNe=s(vy);Zer=r(zNe,"This class cannot be instantiated directly using "),zue=n(zNe,"CODE",{});var ipt=s(zue);eor=r(ipt,"__init__()"),ipt.forEach(t),oor=r(zNe," (throws an error)."),zNe.forEach(t),ror=i(ll),Mt=n(ll,"DIV",{class:!0});var G3=s(Mt);T(Fy.$$.fragment,G3),tor=i(G3),Que=n(G3,"P",{});var dpt=s(Que);aor=r(dpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dpt.forEach(t),nor=i(G3),kd=n(G3,"P",{});var UK=s(kd);sor=r(UK,`Note:
Loading a model from its configuration file does `),Wue=n(UK,"STRONG",{});var cpt=s(Wue);lor=r(cpt,"not"),cpt.forEach(t),ior=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(UK,"A",{href:!0});var fpt=s(NX);dor=r(fpt,"from_pretrained()"),fpt.forEach(t),cor=r(UK," to load the model weights."),UK.forEach(t),mor=i(G3),T(a6.$$.fragment,G3),G3.forEach(t),gor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(Ty.$$.fragment,va),hor=i(va),Hue=n(va,"P",{});var mpt=s(Hue);por=r(mpt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mpt.forEach(t),uor=i(va),Ha=n(va,"P",{});var O3=s(Ha);_or=r(O3,"The model class to instantiate is selected based on the "),Uue=n(O3,"CODE",{});var gpt=s(Uue);bor=r(gpt,"model_type"),gpt.forEach(t),vor=r(O3,` property of the config object (either
passed as an argument or loaded from `),Jue=n(O3,"CODE",{});var hpt=s(Jue);For=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Tor=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(O3,"CODE",{});var ppt=s(Yue);Mor=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Eor=r(O3,":"),O3.forEach(t),Cor=i(va),Kue=n(va,"UL",{});var upt=s(Kue);n6=n(upt,"LI",{});var W7e=s(n6);Zue=n(W7e,"STRONG",{});var _pt=s(Zue);wor=r(_pt,"detr"),_pt.forEach(t),Aor=r(W7e," \u2014 "),jX=n(W7e,"A",{href:!0});var bpt=s(jX);yor=r(bpt,"DetrForSegmentation"),bpt.forEach(t),Lor=r(W7e," (DETR model)"),W7e.forEach(t),upt.forEach(t),xor=i(va),s6=n(va,"P",{});var H7e=s(s6);$or=r(H7e,"The model is set in evaluation mode by default using "),e_e=n(H7e,"CODE",{});var vpt=s(e_e);kor=r(vpt,"model.eval()"),vpt.forEach(t),Sor=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(H7e,"CODE",{});var Fpt=s(o_e);Ror=r(Fpt,"model.train()"),Fpt.forEach(t),H7e.forEach(t),Bor=i(va),T(l6.$$.fragment,va),va.forEach(t),ll.forEach(t),DIe=i(f),Sd=n(f,"H2",{class:!0});var QNe=s(Sd);i6=n(QNe,"A",{id:!0,class:!0,href:!0});var Tpt=s(i6);r_e=n(Tpt,"SPAN",{});var Mpt=s(r_e);T(My.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),Por=i(QNe),t_e=n(QNe,"SPAN",{});var Ept=s(t_e);Ior=r(Ept,"AutoModelForSemanticSegmentation"),Ept.forEach(t),QNe.forEach(t),GIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(Ey.$$.fragment,il),qor=i(il),Rd=n(il,"P",{});var JK=s(Rd);Nor=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DX=n(JK,"A",{href:!0});var Cpt=s(DX);jor=r(Cpt,"from_pretrained()"),Cpt.forEach(t),Dor=r(JK," class method or the "),GX=n(JK,"A",{href:!0});var wpt=s(GX);Gor=r(wpt,"from_config()"),wpt.forEach(t),Oor=r(JK,` class
method.`),JK.forEach(t),Vor=i(il),Cy=n(il,"P",{});var WNe=s(Cy);Xor=r(WNe,"This class cannot be instantiated directly using "),a_e=n(WNe,"CODE",{});var Apt=s(a_e);zor=r(Apt,"__init__()"),Apt.forEach(t),Qor=r(WNe," (throws an error)."),WNe.forEach(t),Wor=i(il),Et=n(il,"DIV",{class:!0});var V3=s(Et);T(wy.$$.fragment,V3),Hor=i(V3),n_e=n(V3,"P",{});var ypt=s(n_e);Uor=r(ypt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ypt.forEach(t),Jor=i(V3),Bd=n(V3,"P",{});var YK=s(Bd);Yor=r(YK,`Note:
Loading a model from its configuration file does `),s_e=n(YK,"STRONG",{});var Lpt=s(s_e);Kor=r(Lpt,"not"),Lpt.forEach(t),Zor=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(YK,"A",{href:!0});var xpt=s(OX);err=r(xpt,"from_pretrained()"),xpt.forEach(t),orr=r(YK," to load the model weights."),YK.forEach(t),rrr=i(V3),T(d6.$$.fragment,V3),V3.forEach(t),trr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(Ay.$$.fragment,Fa),arr=i(Fa),l_e=n(Fa,"P",{});var $pt=s(l_e);nrr=r($pt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$pt.forEach(t),srr=i(Fa),Ua=n(Fa,"P",{});var X3=s(Ua);lrr=r(X3,"The model class to instantiate is selected based on the "),i_e=n(X3,"CODE",{});var kpt=s(i_e);irr=r(kpt,"model_type"),kpt.forEach(t),drr=r(X3,` property of the config object (either
passed as an argument or loaded from `),d_e=n(X3,"CODE",{});var Spt=s(d_e);crr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),frr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(X3,"CODE",{});var Rpt=s(c_e);mrr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),grr=r(X3,":"),X3.forEach(t),hrr=i(Fa),Ja=n(Fa,"UL",{});var z3=s(Ja);c6=n(z3,"LI",{});var U7e=s(c6);f_e=n(U7e,"STRONG",{});var Bpt=s(f_e);prr=r(Bpt,"beit"),Bpt.forEach(t),urr=r(U7e," \u2014 "),VX=n(U7e,"A",{href:!0});var Ppt=s(VX);_rr=r(Ppt,"BeitForSemanticSegmentation"),Ppt.forEach(t),brr=r(U7e," (BEiT model)"),U7e.forEach(t),vrr=i(z3),f6=n(z3,"LI",{});var J7e=s(f6);m_e=n(J7e,"STRONG",{});var Ipt=s(m_e);Frr=r(Ipt,"data2vec-vision"),Ipt.forEach(t),Trr=r(J7e," \u2014 "),XX=n(J7e,"A",{href:!0});var qpt=s(XX);Mrr=r(qpt,"Data2VecVisionForSemanticSegmentation"),qpt.forEach(t),Err=r(J7e," (Data2VecVision model)"),J7e.forEach(t),Crr=i(z3),m6=n(z3,"LI",{});var Y7e=s(m6);g_e=n(Y7e,"STRONG",{});var Npt=s(g_e);wrr=r(Npt,"dpt"),Npt.forEach(t),Arr=r(Y7e," \u2014 "),zX=n(Y7e,"A",{href:!0});var jpt=s(zX);yrr=r(jpt,"DPTForSemanticSegmentation"),jpt.forEach(t),Lrr=r(Y7e," (DPT model)"),Y7e.forEach(t),xrr=i(z3),g6=n(z3,"LI",{});var K7e=s(g6);h_e=n(K7e,"STRONG",{});var Dpt=s(h_e);$rr=r(Dpt,"segformer"),Dpt.forEach(t),krr=r(K7e," \u2014 "),QX=n(K7e,"A",{href:!0});var Gpt=s(QX);Srr=r(Gpt,"SegformerForSemanticSegmentation"),Gpt.forEach(t),Rrr=r(K7e," (SegFormer model)"),K7e.forEach(t),z3.forEach(t),Brr=i(Fa),h6=n(Fa,"P",{});var Z7e=s(h6);Prr=r(Z7e,"The model is set in evaluation mode by default using "),p_e=n(Z7e,"CODE",{});var Opt=s(p_e);Irr=r(Opt,"model.eval()"),Opt.forEach(t),qrr=r(Z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(Z7e,"CODE",{});var Vpt=s(u_e);Nrr=r(Vpt,"model.train()"),Vpt.forEach(t),Z7e.forEach(t),jrr=i(Fa),T(p6.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),OIe=i(f),Pd=n(f,"H2",{class:!0});var HNe=s(Pd);u6=n(HNe,"A",{id:!0,class:!0,href:!0});var Xpt=s(u6);__e=n(Xpt,"SPAN",{});var zpt=s(__e);T(yy.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),Drr=i(HNe),b_e=n(HNe,"SPAN",{});var Qpt=s(b_e);Grr=r(Qpt,"AutoModelForInstanceSegmentation"),Qpt.forEach(t),HNe.forEach(t),VIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(Ly.$$.fragment,dl),Orr=i(dl),Id=n(dl,"P",{});var KK=s(Id);Vrr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WX=n(KK,"A",{href:!0});var Wpt=s(WX);Xrr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),zrr=r(KK," class method or the "),HX=n(KK,"A",{href:!0});var Hpt=s(HX);Qrr=r(Hpt,"from_config()"),Hpt.forEach(t),Wrr=r(KK,` class
method.`),KK.forEach(t),Hrr=i(dl),xy=n(dl,"P",{});var UNe=s(xy);Urr=r(UNe,"This class cannot be instantiated directly using "),v_e=n(UNe,"CODE",{});var Upt=s(v_e);Jrr=r(Upt,"__init__()"),Upt.forEach(t),Yrr=r(UNe," (throws an error)."),UNe.forEach(t),Krr=i(dl),Ct=n(dl,"DIV",{class:!0});var Q3=s(Ct);T($y.$$.fragment,Q3),Zrr=i(Q3),F_e=n(Q3,"P",{});var Jpt=s(F_e);etr=r(Jpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jpt.forEach(t),otr=i(Q3),qd=n(Q3,"P",{});var ZK=s(qd);rtr=r(ZK,`Note:
Loading a model from its configuration file does `),T_e=n(ZK,"STRONG",{});var Ypt=s(T_e);ttr=r(Ypt,"not"),Ypt.forEach(t),atr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(ZK,"A",{href:!0});var Kpt=s(UX);ntr=r(Kpt,"from_pretrained()"),Kpt.forEach(t),str=r(ZK," to load the model weights."),ZK.forEach(t),ltr=i(Q3),T(_6.$$.fragment,Q3),Q3.forEach(t),itr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(ky.$$.fragment,Ta),dtr=i(Ta),M_e=n(Ta,"P",{});var Zpt=s(M_e);ctr=r(Zpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zpt.forEach(t),ftr=i(Ta),Ya=n(Ta,"P",{});var W3=s(Ya);mtr=r(W3,"The model class to instantiate is selected based on the "),E_e=n(W3,"CODE",{});var eut=s(E_e);gtr=r(eut,"model_type"),eut.forEach(t),htr=r(W3,` property of the config object (either
passed as an argument or loaded from `),C_e=n(W3,"CODE",{});var out=s(C_e);ptr=r(out,"pretrained_model_name_or_path"),out.forEach(t),utr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(W3,"CODE",{});var rut=s(w_e);_tr=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),btr=r(W3,":"),W3.forEach(t),vtr=i(Ta),A_e=n(Ta,"UL",{});var tut=s(A_e);b6=n(tut,"LI",{});var e$e=s(b6);y_e=n(e$e,"STRONG",{});var aut=s(y_e);Ftr=r(aut,"maskformer"),aut.forEach(t),Ttr=r(e$e," \u2014 "),JX=n(e$e,"A",{href:!0});var nut=s(JX);Mtr=r(nut,"MaskFormerForInstanceSegmentation"),nut.forEach(t),Etr=r(e$e," (MaskFormer model)"),e$e.forEach(t),tut.forEach(t),Ctr=i(Ta),v6=n(Ta,"P",{});var o$e=s(v6);wtr=r(o$e,"The model is set in evaluation mode by default using "),L_e=n(o$e,"CODE",{});var sut=s(L_e);Atr=r(sut,"model.eval()"),sut.forEach(t),ytr=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(o$e,"CODE",{});var lut=s(x_e);Ltr=r(lut,"model.train()"),lut.forEach(t),o$e.forEach(t),xtr=i(Ta),T(F6.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),XIe=i(f),Nd=n(f,"H2",{class:!0});var JNe=s(Nd);T6=n(JNe,"A",{id:!0,class:!0,href:!0});var iut=s(T6);$_e=n(iut,"SPAN",{});var dut=s($_e);T(Sy.$$.fragment,dut),dut.forEach(t),iut.forEach(t),$tr=i(JNe),k_e=n(JNe,"SPAN",{});var cut=s(k_e);ktr=r(cut,"TFAutoModel"),cut.forEach(t),JNe.forEach(t),zIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(Ry.$$.fragment,cl),Str=i(cl),jd=n(cl,"P",{});var eZ=s(jd);Rtr=r(eZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YX=n(eZ,"A",{href:!0});var fut=s(YX);Btr=r(fut,"from_pretrained()"),fut.forEach(t),Ptr=r(eZ," class method or the "),KX=n(eZ,"A",{href:!0});var mut=s(KX);Itr=r(mut,"from_config()"),mut.forEach(t),qtr=r(eZ,` class
method.`),eZ.forEach(t),Ntr=i(cl),By=n(cl,"P",{});var YNe=s(By);jtr=r(YNe,"This class cannot be instantiated directly using "),S_e=n(YNe,"CODE",{});var gut=s(S_e);Dtr=r(gut,"__init__()"),gut.forEach(t),Gtr=r(YNe," (throws an error)."),YNe.forEach(t),Otr=i(cl),wt=n(cl,"DIV",{class:!0});var H3=s(wt);T(Py.$$.fragment,H3),Vtr=i(H3),R_e=n(H3,"P",{});var hut=s(R_e);Xtr=r(hut,"Instantiates one of the base model classes of the library from a configuration."),hut.forEach(t),ztr=i(H3),Dd=n(H3,"P",{});var oZ=s(Dd);Qtr=r(oZ,`Note:
Loading a model from its configuration file does `),B_e=n(oZ,"STRONG",{});var put=s(B_e);Wtr=r(put,"not"),put.forEach(t),Htr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(oZ,"A",{href:!0});var uut=s(ZX);Utr=r(uut,"from_pretrained()"),uut.forEach(t),Jtr=r(oZ," to load the model weights."),oZ.forEach(t),Ytr=i(H3),T(M6.$$.fragment,H3),H3.forEach(t),Ktr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(Iy.$$.fragment,fl),Ztr=i(fl),P_e=n(fl,"P",{});var _ut=s(P_e);ear=r(_ut,"Instantiate one of the base model classes of the library from a pretrained model."),_ut.forEach(t),oar=i(fl),Ka=n(fl,"P",{});var U3=s(Ka);rar=r(U3,"The model class to instantiate is selected based on the "),I_e=n(U3,"CODE",{});var but=s(I_e);tar=r(but,"model_type"),but.forEach(t),aar=r(U3,` property of the config object (either
passed as an argument or loaded from `),q_e=n(U3,"CODE",{});var vut=s(q_e);nar=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),sar=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(U3,"CODE",{});var Fut=s(N_e);lar=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),iar=r(U3,":"),U3.forEach(t),dar=i(fl),N=n(fl,"UL",{});var D=s(N);E6=n(D,"LI",{});var r$e=s(E6);j_e=n(r$e,"STRONG",{});var Tut=s(j_e);car=r(Tut,"albert"),Tut.forEach(t),far=r(r$e," \u2014 "),ez=n(r$e,"A",{href:!0});var Mut=s(ez);mar=r(Mut,"TFAlbertModel"),Mut.forEach(t),gar=r(r$e," (ALBERT model)"),r$e.forEach(t),har=i(D),C6=n(D,"LI",{});var t$e=s(C6);D_e=n(t$e,"STRONG",{});var Eut=s(D_e);par=r(Eut,"bart"),Eut.forEach(t),uar=r(t$e," \u2014 "),oz=n(t$e,"A",{href:!0});var Cut=s(oz);_ar=r(Cut,"TFBartModel"),Cut.forEach(t),bar=r(t$e," (BART model)"),t$e.forEach(t),Far=i(D),w6=n(D,"LI",{});var a$e=s(w6);G_e=n(a$e,"STRONG",{});var wut=s(G_e);Tar=r(wut,"bert"),wut.forEach(t),Mar=r(a$e," \u2014 "),rz=n(a$e,"A",{href:!0});var Aut=s(rz);Ear=r(Aut,"TFBertModel"),Aut.forEach(t),Car=r(a$e," (BERT model)"),a$e.forEach(t),war=i(D),A6=n(D,"LI",{});var n$e=s(A6);O_e=n(n$e,"STRONG",{});var yut=s(O_e);Aar=r(yut,"blenderbot"),yut.forEach(t),yar=r(n$e," \u2014 "),tz=n(n$e,"A",{href:!0});var Lut=s(tz);Lar=r(Lut,"TFBlenderbotModel"),Lut.forEach(t),xar=r(n$e," (Blenderbot model)"),n$e.forEach(t),$ar=i(D),y6=n(D,"LI",{});var s$e=s(y6);V_e=n(s$e,"STRONG",{});var xut=s(V_e);kar=r(xut,"blenderbot-small"),xut.forEach(t),Sar=r(s$e," \u2014 "),az=n(s$e,"A",{href:!0});var $ut=s(az);Rar=r($ut,"TFBlenderbotSmallModel"),$ut.forEach(t),Bar=r(s$e," (BlenderbotSmall model)"),s$e.forEach(t),Par=i(D),L6=n(D,"LI",{});var l$e=s(L6);X_e=n(l$e,"STRONG",{});var kut=s(X_e);Iar=r(kut,"camembert"),kut.forEach(t),qar=r(l$e," \u2014 "),nz=n(l$e,"A",{href:!0});var Sut=s(nz);Nar=r(Sut,"TFCamembertModel"),Sut.forEach(t),jar=r(l$e," (CamemBERT model)"),l$e.forEach(t),Dar=i(D),x6=n(D,"LI",{});var i$e=s(x6);z_e=n(i$e,"STRONG",{});var Rut=s(z_e);Gar=r(Rut,"clip"),Rut.forEach(t),Oar=r(i$e," \u2014 "),sz=n(i$e,"A",{href:!0});var But=s(sz);Var=r(But,"TFCLIPModel"),But.forEach(t),Xar=r(i$e," (CLIP model)"),i$e.forEach(t),zar=i(D),$6=n(D,"LI",{});var d$e=s($6);Q_e=n(d$e,"STRONG",{});var Put=s(Q_e);Qar=r(Put,"convbert"),Put.forEach(t),War=r(d$e," \u2014 "),lz=n(d$e,"A",{href:!0});var Iut=s(lz);Har=r(Iut,"TFConvBertModel"),Iut.forEach(t),Uar=r(d$e," (ConvBERT model)"),d$e.forEach(t),Jar=i(D),k6=n(D,"LI",{});var c$e=s(k6);W_e=n(c$e,"STRONG",{});var qut=s(W_e);Yar=r(qut,"convnext"),qut.forEach(t),Kar=r(c$e," \u2014 "),iz=n(c$e,"A",{href:!0});var Nut=s(iz);Zar=r(Nut,"TFConvNextModel"),Nut.forEach(t),enr=r(c$e," (ConvNext model)"),c$e.forEach(t),onr=i(D),S6=n(D,"LI",{});var f$e=s(S6);H_e=n(f$e,"STRONG",{});var jut=s(H_e);rnr=r(jut,"ctrl"),jut.forEach(t),tnr=r(f$e," \u2014 "),dz=n(f$e,"A",{href:!0});var Dut=s(dz);anr=r(Dut,"TFCTRLModel"),Dut.forEach(t),nnr=r(f$e," (CTRL model)"),f$e.forEach(t),snr=i(D),R6=n(D,"LI",{});var m$e=s(R6);U_e=n(m$e,"STRONG",{});var Gut=s(U_e);lnr=r(Gut,"data2vec-vision"),Gut.forEach(t),inr=r(m$e," \u2014 "),cz=n(m$e,"A",{href:!0});var Out=s(cz);dnr=r(Out,"TFData2VecVisionModel"),Out.forEach(t),cnr=r(m$e," (Data2VecVision model)"),m$e.forEach(t),fnr=i(D),B6=n(D,"LI",{});var g$e=s(B6);J_e=n(g$e,"STRONG",{});var Vut=s(J_e);mnr=r(Vut,"deberta"),Vut.forEach(t),gnr=r(g$e," \u2014 "),fz=n(g$e,"A",{href:!0});var Xut=s(fz);hnr=r(Xut,"TFDebertaModel"),Xut.forEach(t),pnr=r(g$e," (DeBERTa model)"),g$e.forEach(t),unr=i(D),P6=n(D,"LI",{});var h$e=s(P6);Y_e=n(h$e,"STRONG",{});var zut=s(Y_e);_nr=r(zut,"deberta-v2"),zut.forEach(t),bnr=r(h$e," \u2014 "),mz=n(h$e,"A",{href:!0});var Qut=s(mz);vnr=r(Qut,"TFDebertaV2Model"),Qut.forEach(t),Fnr=r(h$e," (DeBERTa-v2 model)"),h$e.forEach(t),Tnr=i(D),I6=n(D,"LI",{});var p$e=s(I6);K_e=n(p$e,"STRONG",{});var Wut=s(K_e);Mnr=r(Wut,"distilbert"),Wut.forEach(t),Enr=r(p$e," \u2014 "),gz=n(p$e,"A",{href:!0});var Hut=s(gz);Cnr=r(Hut,"TFDistilBertModel"),Hut.forEach(t),wnr=r(p$e," (DistilBERT model)"),p$e.forEach(t),Anr=i(D),q6=n(D,"LI",{});var u$e=s(q6);Z_e=n(u$e,"STRONG",{});var Uut=s(Z_e);ynr=r(Uut,"dpr"),Uut.forEach(t),Lnr=r(u$e," \u2014 "),hz=n(u$e,"A",{href:!0});var Jut=s(hz);xnr=r(Jut,"TFDPRQuestionEncoder"),Jut.forEach(t),$nr=r(u$e," (DPR model)"),u$e.forEach(t),knr=i(D),N6=n(D,"LI",{});var _$e=s(N6);e1e=n(_$e,"STRONG",{});var Yut=s(e1e);Snr=r(Yut,"electra"),Yut.forEach(t),Rnr=r(_$e," \u2014 "),pz=n(_$e,"A",{href:!0});var Kut=s(pz);Bnr=r(Kut,"TFElectraModel"),Kut.forEach(t),Pnr=r(_$e," (ELECTRA model)"),_$e.forEach(t),Inr=i(D),j6=n(D,"LI",{});var b$e=s(j6);o1e=n(b$e,"STRONG",{});var Zut=s(o1e);qnr=r(Zut,"flaubert"),Zut.forEach(t),Nnr=r(b$e," \u2014 "),uz=n(b$e,"A",{href:!0});var e_t=s(uz);jnr=r(e_t,"TFFlaubertModel"),e_t.forEach(t),Dnr=r(b$e," (FlauBERT model)"),b$e.forEach(t),Gnr=i(D),Ps=n(D,"LI",{});var g$=s(Ps);r1e=n(g$,"STRONG",{});var o_t=s(r1e);Onr=r(o_t,"funnel"),o_t.forEach(t),Vnr=r(g$," \u2014 "),_z=n(g$,"A",{href:!0});var r_t=s(_z);Xnr=r(r_t,"TFFunnelModel"),r_t.forEach(t),znr=r(g$," or "),bz=n(g$,"A",{href:!0});var t_t=s(bz);Qnr=r(t_t,"TFFunnelBaseModel"),t_t.forEach(t),Wnr=r(g$," (Funnel Transformer model)"),g$.forEach(t),Hnr=i(D),D6=n(D,"LI",{});var v$e=s(D6);t1e=n(v$e,"STRONG",{});var a_t=s(t1e);Unr=r(a_t,"gpt2"),a_t.forEach(t),Jnr=r(v$e," \u2014 "),vz=n(v$e,"A",{href:!0});var n_t=s(vz);Ynr=r(n_t,"TFGPT2Model"),n_t.forEach(t),Knr=r(v$e," (OpenAI GPT-2 model)"),v$e.forEach(t),Znr=i(D),G6=n(D,"LI",{});var F$e=s(G6);a1e=n(F$e,"STRONG",{});var s_t=s(a1e);esr=r(s_t,"gptj"),s_t.forEach(t),osr=r(F$e," \u2014 "),Fz=n(F$e,"A",{href:!0});var l_t=s(Fz);rsr=r(l_t,"TFGPTJModel"),l_t.forEach(t),tsr=r(F$e," (GPT-J model)"),F$e.forEach(t),asr=i(D),O6=n(D,"LI",{});var T$e=s(O6);n1e=n(T$e,"STRONG",{});var i_t=s(n1e);nsr=r(i_t,"hubert"),i_t.forEach(t),ssr=r(T$e," \u2014 "),Tz=n(T$e,"A",{href:!0});var d_t=s(Tz);lsr=r(d_t,"TFHubertModel"),d_t.forEach(t),isr=r(T$e," (Hubert model)"),T$e.forEach(t),dsr=i(D),V6=n(D,"LI",{});var M$e=s(V6);s1e=n(M$e,"STRONG",{});var c_t=s(s1e);csr=r(c_t,"layoutlm"),c_t.forEach(t),fsr=r(M$e," \u2014 "),Mz=n(M$e,"A",{href:!0});var f_t=s(Mz);msr=r(f_t,"TFLayoutLMModel"),f_t.forEach(t),gsr=r(M$e," (LayoutLM model)"),M$e.forEach(t),hsr=i(D),X6=n(D,"LI",{});var E$e=s(X6);l1e=n(E$e,"STRONG",{});var m_t=s(l1e);psr=r(m_t,"led"),m_t.forEach(t),usr=r(E$e," \u2014 "),Ez=n(E$e,"A",{href:!0});var g_t=s(Ez);_sr=r(g_t,"TFLEDModel"),g_t.forEach(t),bsr=r(E$e," (LED model)"),E$e.forEach(t),vsr=i(D),z6=n(D,"LI",{});var C$e=s(z6);i1e=n(C$e,"STRONG",{});var h_t=s(i1e);Fsr=r(h_t,"longformer"),h_t.forEach(t),Tsr=r(C$e," \u2014 "),Cz=n(C$e,"A",{href:!0});var p_t=s(Cz);Msr=r(p_t,"TFLongformerModel"),p_t.forEach(t),Esr=r(C$e," (Longformer model)"),C$e.forEach(t),Csr=i(D),Q6=n(D,"LI",{});var w$e=s(Q6);d1e=n(w$e,"STRONG",{});var u_t=s(d1e);wsr=r(u_t,"lxmert"),u_t.forEach(t),Asr=r(w$e," \u2014 "),wz=n(w$e,"A",{href:!0});var __t=s(wz);ysr=r(__t,"TFLxmertModel"),__t.forEach(t),Lsr=r(w$e," (LXMERT model)"),w$e.forEach(t),xsr=i(D),W6=n(D,"LI",{});var A$e=s(W6);c1e=n(A$e,"STRONG",{});var b_t=s(c1e);$sr=r(b_t,"marian"),b_t.forEach(t),ksr=r(A$e," \u2014 "),Az=n(A$e,"A",{href:!0});var v_t=s(Az);Ssr=r(v_t,"TFMarianModel"),v_t.forEach(t),Rsr=r(A$e," (Marian model)"),A$e.forEach(t),Bsr=i(D),H6=n(D,"LI",{});var y$e=s(H6);f1e=n(y$e,"STRONG",{});var F_t=s(f1e);Psr=r(F_t,"mbart"),F_t.forEach(t),Isr=r(y$e," \u2014 "),yz=n(y$e,"A",{href:!0});var T_t=s(yz);qsr=r(T_t,"TFMBartModel"),T_t.forEach(t),Nsr=r(y$e," (mBART model)"),y$e.forEach(t),jsr=i(D),U6=n(D,"LI",{});var L$e=s(U6);m1e=n(L$e,"STRONG",{});var M_t=s(m1e);Dsr=r(M_t,"mobilebert"),M_t.forEach(t),Gsr=r(L$e," \u2014 "),Lz=n(L$e,"A",{href:!0});var E_t=s(Lz);Osr=r(E_t,"TFMobileBertModel"),E_t.forEach(t),Vsr=r(L$e," (MobileBERT model)"),L$e.forEach(t),Xsr=i(D),J6=n(D,"LI",{});var x$e=s(J6);g1e=n(x$e,"STRONG",{});var C_t=s(g1e);zsr=r(C_t,"mpnet"),C_t.forEach(t),Qsr=r(x$e," \u2014 "),xz=n(x$e,"A",{href:!0});var w_t=s(xz);Wsr=r(w_t,"TFMPNetModel"),w_t.forEach(t),Hsr=r(x$e," (MPNet model)"),x$e.forEach(t),Usr=i(D),Y6=n(D,"LI",{});var $$e=s(Y6);h1e=n($$e,"STRONG",{});var A_t=s(h1e);Jsr=r(A_t,"mt5"),A_t.forEach(t),Ysr=r($$e," \u2014 "),$z=n($$e,"A",{href:!0});var y_t=s($z);Ksr=r(y_t,"TFMT5Model"),y_t.forEach(t),Zsr=r($$e," (mT5 model)"),$$e.forEach(t),elr=i(D),K6=n(D,"LI",{});var k$e=s(K6);p1e=n(k$e,"STRONG",{});var L_t=s(p1e);olr=r(L_t,"openai-gpt"),L_t.forEach(t),rlr=r(k$e," \u2014 "),kz=n(k$e,"A",{href:!0});var x_t=s(kz);tlr=r(x_t,"TFOpenAIGPTModel"),x_t.forEach(t),alr=r(k$e," (OpenAI GPT model)"),k$e.forEach(t),nlr=i(D),Z6=n(D,"LI",{});var S$e=s(Z6);u1e=n(S$e,"STRONG",{});var $_t=s(u1e);slr=r($_t,"pegasus"),$_t.forEach(t),llr=r(S$e," \u2014 "),Sz=n(S$e,"A",{href:!0});var k_t=s(Sz);ilr=r(k_t,"TFPegasusModel"),k_t.forEach(t),dlr=r(S$e," (Pegasus model)"),S$e.forEach(t),clr=i(D),eT=n(D,"LI",{});var R$e=s(eT);_1e=n(R$e,"STRONG",{});var S_t=s(_1e);flr=r(S_t,"rembert"),S_t.forEach(t),mlr=r(R$e," \u2014 "),Rz=n(R$e,"A",{href:!0});var R_t=s(Rz);glr=r(R_t,"TFRemBertModel"),R_t.forEach(t),hlr=r(R$e," (RemBERT model)"),R$e.forEach(t),plr=i(D),oT=n(D,"LI",{});var B$e=s(oT);b1e=n(B$e,"STRONG",{});var B_t=s(b1e);ulr=r(B_t,"roberta"),B_t.forEach(t),_lr=r(B$e," \u2014 "),Bz=n(B$e,"A",{href:!0});var P_t=s(Bz);blr=r(P_t,"TFRobertaModel"),P_t.forEach(t),vlr=r(B$e," (RoBERTa model)"),B$e.forEach(t),Flr=i(D),rT=n(D,"LI",{});var P$e=s(rT);v1e=n(P$e,"STRONG",{});var I_t=s(v1e);Tlr=r(I_t,"roformer"),I_t.forEach(t),Mlr=r(P$e," \u2014 "),Pz=n(P$e,"A",{href:!0});var q_t=s(Pz);Elr=r(q_t,"TFRoFormerModel"),q_t.forEach(t),Clr=r(P$e," (RoFormer model)"),P$e.forEach(t),wlr=i(D),tT=n(D,"LI",{});var I$e=s(tT);F1e=n(I$e,"STRONG",{});var N_t=s(F1e);Alr=r(N_t,"speech_to_text"),N_t.forEach(t),ylr=r(I$e," \u2014 "),Iz=n(I$e,"A",{href:!0});var j_t=s(Iz);Llr=r(j_t,"TFSpeech2TextModel"),j_t.forEach(t),xlr=r(I$e," (Speech2Text model)"),I$e.forEach(t),$lr=i(D),aT=n(D,"LI",{});var q$e=s(aT);T1e=n(q$e,"STRONG",{});var D_t=s(T1e);klr=r(D_t,"swin"),D_t.forEach(t),Slr=r(q$e," \u2014 "),qz=n(q$e,"A",{href:!0});var G_t=s(qz);Rlr=r(G_t,"TFSwinModel"),G_t.forEach(t),Blr=r(q$e," (Swin model)"),q$e.forEach(t),Plr=i(D),nT=n(D,"LI",{});var N$e=s(nT);M1e=n(N$e,"STRONG",{});var O_t=s(M1e);Ilr=r(O_t,"t5"),O_t.forEach(t),qlr=r(N$e," \u2014 "),Nz=n(N$e,"A",{href:!0});var V_t=s(Nz);Nlr=r(V_t,"TFT5Model"),V_t.forEach(t),jlr=r(N$e," (T5 model)"),N$e.forEach(t),Dlr=i(D),sT=n(D,"LI",{});var j$e=s(sT);E1e=n(j$e,"STRONG",{});var X_t=s(E1e);Glr=r(X_t,"tapas"),X_t.forEach(t),Olr=r(j$e," \u2014 "),jz=n(j$e,"A",{href:!0});var z_t=s(jz);Vlr=r(z_t,"TFTapasModel"),z_t.forEach(t),Xlr=r(j$e," (TAPAS model)"),j$e.forEach(t),zlr=i(D),lT=n(D,"LI",{});var D$e=s(lT);C1e=n(D$e,"STRONG",{});var Q_t=s(C1e);Qlr=r(Q_t,"transfo-xl"),Q_t.forEach(t),Wlr=r(D$e," \u2014 "),Dz=n(D$e,"A",{href:!0});var W_t=s(Dz);Hlr=r(W_t,"TFTransfoXLModel"),W_t.forEach(t),Ulr=r(D$e," (Transformer-XL model)"),D$e.forEach(t),Jlr=i(D),iT=n(D,"LI",{});var G$e=s(iT);w1e=n(G$e,"STRONG",{});var H_t=s(w1e);Ylr=r(H_t,"vit"),H_t.forEach(t),Klr=r(G$e," \u2014 "),Gz=n(G$e,"A",{href:!0});var U_t=s(Gz);Zlr=r(U_t,"TFViTModel"),U_t.forEach(t),eir=r(G$e," (ViT model)"),G$e.forEach(t),oir=i(D),dT=n(D,"LI",{});var O$e=s(dT);A1e=n(O$e,"STRONG",{});var J_t=s(A1e);rir=r(J_t,"vit_mae"),J_t.forEach(t),tir=r(O$e," \u2014 "),Oz=n(O$e,"A",{href:!0});var Y_t=s(Oz);air=r(Y_t,"TFViTMAEModel"),Y_t.forEach(t),nir=r(O$e," (ViTMAE model)"),O$e.forEach(t),sir=i(D),cT=n(D,"LI",{});var V$e=s(cT);y1e=n(V$e,"STRONG",{});var K_t=s(y1e);lir=r(K_t,"wav2vec2"),K_t.forEach(t),iir=r(V$e," \u2014 "),Vz=n(V$e,"A",{href:!0});var Z_t=s(Vz);dir=r(Z_t,"TFWav2Vec2Model"),Z_t.forEach(t),cir=r(V$e," (Wav2Vec2 model)"),V$e.forEach(t),fir=i(D),fT=n(D,"LI",{});var X$e=s(fT);L1e=n(X$e,"STRONG",{});var e1t=s(L1e);mir=r(e1t,"xlm"),e1t.forEach(t),gir=r(X$e," \u2014 "),Xz=n(X$e,"A",{href:!0});var o1t=s(Xz);hir=r(o1t,"TFXLMModel"),o1t.forEach(t),pir=r(X$e," (XLM model)"),X$e.forEach(t),uir=i(D),mT=n(D,"LI",{});var z$e=s(mT);x1e=n(z$e,"STRONG",{});var r1t=s(x1e);_ir=r(r1t,"xlm-roberta"),r1t.forEach(t),bir=r(z$e," \u2014 "),zz=n(z$e,"A",{href:!0});var t1t=s(zz);vir=r(t1t,"TFXLMRobertaModel"),t1t.forEach(t),Fir=r(z$e," (XLM-RoBERTa model)"),z$e.forEach(t),Tir=i(D),gT=n(D,"LI",{});var Q$e=s(gT);$1e=n(Q$e,"STRONG",{});var a1t=s($1e);Mir=r(a1t,"xlnet"),a1t.forEach(t),Eir=r(Q$e," \u2014 "),Qz=n(Q$e,"A",{href:!0});var n1t=s(Qz);Cir=r(n1t,"TFXLNetModel"),n1t.forEach(t),wir=r(Q$e," (XLNet model)"),Q$e.forEach(t),D.forEach(t),Air=i(fl),T(hT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),QIe=i(f),Gd=n(f,"H2",{class:!0});var KNe=s(Gd);pT=n(KNe,"A",{id:!0,class:!0,href:!0});var s1t=s(pT);k1e=n(s1t,"SPAN",{});var l1t=s(k1e);T(qy.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),yir=i(KNe),S1e=n(KNe,"SPAN",{});var i1t=s(S1e);Lir=r(i1t,"TFAutoModelForPreTraining"),i1t.forEach(t),KNe.forEach(t),WIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(Ny.$$.fragment,ml),xir=i(ml),Od=n(ml,"P",{});var rZ=s(Od);$ir=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=n(rZ,"A",{href:!0});var d1t=s(Wz);kir=r(d1t,"from_pretrained()"),d1t.forEach(t),Sir=r(rZ," class method or the "),Hz=n(rZ,"A",{href:!0});var c1t=s(Hz);Rir=r(c1t,"from_config()"),c1t.forEach(t),Bir=r(rZ,` class
method.`),rZ.forEach(t),Pir=i(ml),jy=n(ml,"P",{});var ZNe=s(jy);Iir=r(ZNe,"This class cannot be instantiated directly using "),R1e=n(ZNe,"CODE",{});var f1t=s(R1e);qir=r(f1t,"__init__()"),f1t.forEach(t),Nir=r(ZNe," (throws an error)."),ZNe.forEach(t),jir=i(ml),At=n(ml,"DIV",{class:!0});var J3=s(At);T(Dy.$$.fragment,J3),Dir=i(J3),B1e=n(J3,"P",{});var m1t=s(B1e);Gir=r(m1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m1t.forEach(t),Oir=i(J3),Vd=n(J3,"P",{});var tZ=s(Vd);Vir=r(tZ,`Note:
Loading a model from its configuration file does `),P1e=n(tZ,"STRONG",{});var g1t=s(P1e);Xir=r(g1t,"not"),g1t.forEach(t),zir=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(tZ,"A",{href:!0});var h1t=s(Uz);Qir=r(h1t,"from_pretrained()"),h1t.forEach(t),Wir=r(tZ," to load the model weights."),tZ.forEach(t),Hir=i(J3),T(uT.$$.fragment,J3),J3.forEach(t),Uir=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(Gy.$$.fragment,gl),Jir=i(gl),I1e=n(gl,"P",{});var p1t=s(I1e);Yir=r(p1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p1t.forEach(t),Kir=i(gl),Za=n(gl,"P",{});var Y3=s(Za);Zir=r(Y3,"The model class to instantiate is selected based on the "),q1e=n(Y3,"CODE",{});var u1t=s(q1e);edr=r(u1t,"model_type"),u1t.forEach(t),odr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),N1e=n(Y3,"CODE",{});var _1t=s(N1e);rdr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),tdr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(Y3,"CODE",{});var b1t=s(j1e);adr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),ndr=r(Y3,":"),Y3.forEach(t),sdr=i(gl),se=n(gl,"UL",{});var le=s(se);_T=n(le,"LI",{});var W$e=s(_T);D1e=n(W$e,"STRONG",{});var v1t=s(D1e);ldr=r(v1t,"albert"),v1t.forEach(t),idr=r(W$e," \u2014 "),Jz=n(W$e,"A",{href:!0});var F1t=s(Jz);ddr=r(F1t,"TFAlbertForPreTraining"),F1t.forEach(t),cdr=r(W$e," (ALBERT model)"),W$e.forEach(t),fdr=i(le),bT=n(le,"LI",{});var H$e=s(bT);G1e=n(H$e,"STRONG",{});var T1t=s(G1e);mdr=r(T1t,"bart"),T1t.forEach(t),gdr=r(H$e," \u2014 "),Yz=n(H$e,"A",{href:!0});var M1t=s(Yz);hdr=r(M1t,"TFBartForConditionalGeneration"),M1t.forEach(t),pdr=r(H$e," (BART model)"),H$e.forEach(t),udr=i(le),vT=n(le,"LI",{});var U$e=s(vT);O1e=n(U$e,"STRONG",{});var E1t=s(O1e);_dr=r(E1t,"bert"),E1t.forEach(t),bdr=r(U$e," \u2014 "),Kz=n(U$e,"A",{href:!0});var C1t=s(Kz);vdr=r(C1t,"TFBertForPreTraining"),C1t.forEach(t),Fdr=r(U$e," (BERT model)"),U$e.forEach(t),Tdr=i(le),FT=n(le,"LI",{});var J$e=s(FT);V1e=n(J$e,"STRONG",{});var w1t=s(V1e);Mdr=r(w1t,"camembert"),w1t.forEach(t),Edr=r(J$e," \u2014 "),Zz=n(J$e,"A",{href:!0});var A1t=s(Zz);Cdr=r(A1t,"TFCamembertForMaskedLM"),A1t.forEach(t),wdr=r(J$e," (CamemBERT model)"),J$e.forEach(t),Adr=i(le),TT=n(le,"LI",{});var Y$e=s(TT);X1e=n(Y$e,"STRONG",{});var y1t=s(X1e);ydr=r(y1t,"ctrl"),y1t.forEach(t),Ldr=r(Y$e," \u2014 "),eQ=n(Y$e,"A",{href:!0});var L1t=s(eQ);xdr=r(L1t,"TFCTRLLMHeadModel"),L1t.forEach(t),$dr=r(Y$e," (CTRL model)"),Y$e.forEach(t),kdr=i(le),MT=n(le,"LI",{});var K$e=s(MT);z1e=n(K$e,"STRONG",{});var x1t=s(z1e);Sdr=r(x1t,"distilbert"),x1t.forEach(t),Rdr=r(K$e," \u2014 "),oQ=n(K$e,"A",{href:!0});var $1t=s(oQ);Bdr=r($1t,"TFDistilBertForMaskedLM"),$1t.forEach(t),Pdr=r(K$e," (DistilBERT model)"),K$e.forEach(t),Idr=i(le),ET=n(le,"LI",{});var Z$e=s(ET);Q1e=n(Z$e,"STRONG",{});var k1t=s(Q1e);qdr=r(k1t,"electra"),k1t.forEach(t),Ndr=r(Z$e," \u2014 "),rQ=n(Z$e,"A",{href:!0});var S1t=s(rQ);jdr=r(S1t,"TFElectraForPreTraining"),S1t.forEach(t),Ddr=r(Z$e," (ELECTRA model)"),Z$e.forEach(t),Gdr=i(le),CT=n(le,"LI",{});var eke=s(CT);W1e=n(eke,"STRONG",{});var R1t=s(W1e);Odr=r(R1t,"flaubert"),R1t.forEach(t),Vdr=r(eke," \u2014 "),tQ=n(eke,"A",{href:!0});var B1t=s(tQ);Xdr=r(B1t,"TFFlaubertWithLMHeadModel"),B1t.forEach(t),zdr=r(eke," (FlauBERT model)"),eke.forEach(t),Qdr=i(le),wT=n(le,"LI",{});var oke=s(wT);H1e=n(oke,"STRONG",{});var P1t=s(H1e);Wdr=r(P1t,"funnel"),P1t.forEach(t),Hdr=r(oke," \u2014 "),aQ=n(oke,"A",{href:!0});var I1t=s(aQ);Udr=r(I1t,"TFFunnelForPreTraining"),I1t.forEach(t),Jdr=r(oke," (Funnel Transformer model)"),oke.forEach(t),Ydr=i(le),AT=n(le,"LI",{});var rke=s(AT);U1e=n(rke,"STRONG",{});var q1t=s(U1e);Kdr=r(q1t,"gpt2"),q1t.forEach(t),Zdr=r(rke," \u2014 "),nQ=n(rke,"A",{href:!0});var N1t=s(nQ);ecr=r(N1t,"TFGPT2LMHeadModel"),N1t.forEach(t),ocr=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),rcr=i(le),yT=n(le,"LI",{});var tke=s(yT);J1e=n(tke,"STRONG",{});var j1t=s(J1e);tcr=r(j1t,"layoutlm"),j1t.forEach(t),acr=r(tke," \u2014 "),sQ=n(tke,"A",{href:!0});var D1t=s(sQ);ncr=r(D1t,"TFLayoutLMForMaskedLM"),D1t.forEach(t),scr=r(tke," (LayoutLM model)"),tke.forEach(t),lcr=i(le),LT=n(le,"LI",{});var ake=s(LT);Y1e=n(ake,"STRONG",{});var G1t=s(Y1e);icr=r(G1t,"lxmert"),G1t.forEach(t),dcr=r(ake," \u2014 "),lQ=n(ake,"A",{href:!0});var O1t=s(lQ);ccr=r(O1t,"TFLxmertForPreTraining"),O1t.forEach(t),fcr=r(ake," (LXMERT model)"),ake.forEach(t),mcr=i(le),xT=n(le,"LI",{});var nke=s(xT);K1e=n(nke,"STRONG",{});var V1t=s(K1e);gcr=r(V1t,"mobilebert"),V1t.forEach(t),hcr=r(nke," \u2014 "),iQ=n(nke,"A",{href:!0});var X1t=s(iQ);pcr=r(X1t,"TFMobileBertForPreTraining"),X1t.forEach(t),ucr=r(nke," (MobileBERT model)"),nke.forEach(t),_cr=i(le),$T=n(le,"LI",{});var ske=s($T);Z1e=n(ske,"STRONG",{});var z1t=s(Z1e);bcr=r(z1t,"mpnet"),z1t.forEach(t),vcr=r(ske," \u2014 "),dQ=n(ske,"A",{href:!0});var Q1t=s(dQ);Fcr=r(Q1t,"TFMPNetForMaskedLM"),Q1t.forEach(t),Tcr=r(ske," (MPNet model)"),ske.forEach(t),Mcr=i(le),kT=n(le,"LI",{});var lke=s(kT);e8e=n(lke,"STRONG",{});var W1t=s(e8e);Ecr=r(W1t,"openai-gpt"),W1t.forEach(t),Ccr=r(lke," \u2014 "),cQ=n(lke,"A",{href:!0});var H1t=s(cQ);wcr=r(H1t,"TFOpenAIGPTLMHeadModel"),H1t.forEach(t),Acr=r(lke," (OpenAI GPT model)"),lke.forEach(t),ycr=i(le),ST=n(le,"LI",{});var ike=s(ST);o8e=n(ike,"STRONG",{});var U1t=s(o8e);Lcr=r(U1t,"roberta"),U1t.forEach(t),xcr=r(ike," \u2014 "),fQ=n(ike,"A",{href:!0});var J1t=s(fQ);$cr=r(J1t,"TFRobertaForMaskedLM"),J1t.forEach(t),kcr=r(ike," (RoBERTa model)"),ike.forEach(t),Scr=i(le),RT=n(le,"LI",{});var dke=s(RT);r8e=n(dke,"STRONG",{});var Y1t=s(r8e);Rcr=r(Y1t,"t5"),Y1t.forEach(t),Bcr=r(dke," \u2014 "),mQ=n(dke,"A",{href:!0});var K1t=s(mQ);Pcr=r(K1t,"TFT5ForConditionalGeneration"),K1t.forEach(t),Icr=r(dke," (T5 model)"),dke.forEach(t),qcr=i(le),BT=n(le,"LI",{});var cke=s(BT);t8e=n(cke,"STRONG",{});var Z1t=s(t8e);Ncr=r(Z1t,"tapas"),Z1t.forEach(t),jcr=r(cke," \u2014 "),gQ=n(cke,"A",{href:!0});var e8t=s(gQ);Dcr=r(e8t,"TFTapasForMaskedLM"),e8t.forEach(t),Gcr=r(cke," (TAPAS model)"),cke.forEach(t),Ocr=i(le),PT=n(le,"LI",{});var fke=s(PT);a8e=n(fke,"STRONG",{});var o8t=s(a8e);Vcr=r(o8t,"transfo-xl"),o8t.forEach(t),Xcr=r(fke," \u2014 "),hQ=n(fke,"A",{href:!0});var r8t=s(hQ);zcr=r(r8t,"TFTransfoXLLMHeadModel"),r8t.forEach(t),Qcr=r(fke," (Transformer-XL model)"),fke.forEach(t),Wcr=i(le),IT=n(le,"LI",{});var mke=s(IT);n8e=n(mke,"STRONG",{});var t8t=s(n8e);Hcr=r(t8t,"vit_mae"),t8t.forEach(t),Ucr=r(mke," \u2014 "),pQ=n(mke,"A",{href:!0});var a8t=s(pQ);Jcr=r(a8t,"TFViTMAEForPreTraining"),a8t.forEach(t),Ycr=r(mke," (ViTMAE model)"),mke.forEach(t),Kcr=i(le),qT=n(le,"LI",{});var gke=s(qT);s8e=n(gke,"STRONG",{});var n8t=s(s8e);Zcr=r(n8t,"xlm"),n8t.forEach(t),efr=r(gke," \u2014 "),uQ=n(gke,"A",{href:!0});var s8t=s(uQ);ofr=r(s8t,"TFXLMWithLMHeadModel"),s8t.forEach(t),rfr=r(gke," (XLM model)"),gke.forEach(t),tfr=i(le),NT=n(le,"LI",{});var hke=s(NT);l8e=n(hke,"STRONG",{});var l8t=s(l8e);afr=r(l8t,"xlm-roberta"),l8t.forEach(t),nfr=r(hke," \u2014 "),_Q=n(hke,"A",{href:!0});var i8t=s(_Q);sfr=r(i8t,"TFXLMRobertaForMaskedLM"),i8t.forEach(t),lfr=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),ifr=i(le),jT=n(le,"LI",{});var pke=s(jT);i8e=n(pke,"STRONG",{});var d8t=s(i8e);dfr=r(d8t,"xlnet"),d8t.forEach(t),cfr=r(pke," \u2014 "),bQ=n(pke,"A",{href:!0});var c8t=s(bQ);ffr=r(c8t,"TFXLNetLMHeadModel"),c8t.forEach(t),mfr=r(pke," (XLNet model)"),pke.forEach(t),le.forEach(t),gfr=i(gl),T(DT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),HIe=i(f),Xd=n(f,"H2",{class:!0});var eje=s(Xd);GT=n(eje,"A",{id:!0,class:!0,href:!0});var f8t=s(GT);d8e=n(f8t,"SPAN",{});var m8t=s(d8e);T(Oy.$$.fragment,m8t),m8t.forEach(t),f8t.forEach(t),hfr=i(eje),c8e=n(eje,"SPAN",{});var g8t=s(c8e);pfr=r(g8t,"TFAutoModelForCausalLM"),g8t.forEach(t),eje.forEach(t),UIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Vy.$$.fragment,hl),ufr=i(hl),zd=n(hl,"P",{});var aZ=s(zd);_fr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=n(aZ,"A",{href:!0});var h8t=s(vQ);bfr=r(h8t,"from_pretrained()"),h8t.forEach(t),vfr=r(aZ," class method or the "),FQ=n(aZ,"A",{href:!0});var p8t=s(FQ);Ffr=r(p8t,"from_config()"),p8t.forEach(t),Tfr=r(aZ,` class
method.`),aZ.forEach(t),Mfr=i(hl),Xy=n(hl,"P",{});var oje=s(Xy);Efr=r(oje,"This class cannot be instantiated directly using "),f8e=n(oje,"CODE",{});var u8t=s(f8e);Cfr=r(u8t,"__init__()"),u8t.forEach(t),wfr=r(oje," (throws an error)."),oje.forEach(t),Afr=i(hl),yt=n(hl,"DIV",{class:!0});var K3=s(yt);T(zy.$$.fragment,K3),yfr=i(K3),m8e=n(K3,"P",{});var _8t=s(m8e);Lfr=r(_8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_8t.forEach(t),xfr=i(K3),Qd=n(K3,"P",{});var nZ=s(Qd);$fr=r(nZ,`Note:
Loading a model from its configuration file does `),g8e=n(nZ,"STRONG",{});var b8t=s(g8e);kfr=r(b8t,"not"),b8t.forEach(t),Sfr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(nZ,"A",{href:!0});var v8t=s(TQ);Rfr=r(v8t,"from_pretrained()"),v8t.forEach(t),Bfr=r(nZ," to load the model weights."),nZ.forEach(t),Pfr=i(K3),T(OT.$$.fragment,K3),K3.forEach(t),Ifr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Qy.$$.fragment,pl),qfr=i(pl),h8e=n(pl,"P",{});var F8t=s(h8e);Nfr=r(F8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F8t.forEach(t),jfr=i(pl),en=n(pl,"P",{});var Z3=s(en);Dfr=r(Z3,"The model class to instantiate is selected based on the "),p8e=n(Z3,"CODE",{});var T8t=s(p8e);Gfr=r(T8t,"model_type"),T8t.forEach(t),Ofr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),u8e=n(Z3,"CODE",{});var M8t=s(u8e);Vfr=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),Xfr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(Z3,"CODE",{});var E8t=s(_8e);zfr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Qfr=r(Z3,":"),Z3.forEach(t),Wfr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);VT=n(Ce,"LI",{});var uke=s(VT);b8e=n(uke,"STRONG",{});var C8t=s(b8e);Hfr=r(C8t,"bert"),C8t.forEach(t),Ufr=r(uke," \u2014 "),MQ=n(uke,"A",{href:!0});var w8t=s(MQ);Jfr=r(w8t,"TFBertLMHeadModel"),w8t.forEach(t),Yfr=r(uke," (BERT model)"),uke.forEach(t),Kfr=i(Ce),XT=n(Ce,"LI",{});var _ke=s(XT);v8e=n(_ke,"STRONG",{});var A8t=s(v8e);Zfr=r(A8t,"camembert"),A8t.forEach(t),emr=r(_ke," \u2014 "),EQ=n(_ke,"A",{href:!0});var y8t=s(EQ);omr=r(y8t,"TFCamembertForCausalLM"),y8t.forEach(t),rmr=r(_ke," (CamemBERT model)"),_ke.forEach(t),tmr=i(Ce),zT=n(Ce,"LI",{});var bke=s(zT);F8e=n(bke,"STRONG",{});var L8t=s(F8e);amr=r(L8t,"ctrl"),L8t.forEach(t),nmr=r(bke," \u2014 "),CQ=n(bke,"A",{href:!0});var x8t=s(CQ);smr=r(x8t,"TFCTRLLMHeadModel"),x8t.forEach(t),lmr=r(bke," (CTRL model)"),bke.forEach(t),imr=i(Ce),QT=n(Ce,"LI",{});var vke=s(QT);T8e=n(vke,"STRONG",{});var $8t=s(T8e);dmr=r($8t,"gpt2"),$8t.forEach(t),cmr=r(vke," \u2014 "),wQ=n(vke,"A",{href:!0});var k8t=s(wQ);fmr=r(k8t,"TFGPT2LMHeadModel"),k8t.forEach(t),mmr=r(vke," (OpenAI GPT-2 model)"),vke.forEach(t),gmr=i(Ce),WT=n(Ce,"LI",{});var Fke=s(WT);M8e=n(Fke,"STRONG",{});var S8t=s(M8e);hmr=r(S8t,"gptj"),S8t.forEach(t),pmr=r(Fke," \u2014 "),AQ=n(Fke,"A",{href:!0});var R8t=s(AQ);umr=r(R8t,"TFGPTJForCausalLM"),R8t.forEach(t),_mr=r(Fke," (GPT-J model)"),Fke.forEach(t),bmr=i(Ce),HT=n(Ce,"LI",{});var Tke=s(HT);E8e=n(Tke,"STRONG",{});var B8t=s(E8e);vmr=r(B8t,"openai-gpt"),B8t.forEach(t),Fmr=r(Tke," \u2014 "),yQ=n(Tke,"A",{href:!0});var P8t=s(yQ);Tmr=r(P8t,"TFOpenAIGPTLMHeadModel"),P8t.forEach(t),Mmr=r(Tke," (OpenAI GPT model)"),Tke.forEach(t),Emr=i(Ce),UT=n(Ce,"LI",{});var Mke=s(UT);C8e=n(Mke,"STRONG",{});var I8t=s(C8e);Cmr=r(I8t,"rembert"),I8t.forEach(t),wmr=r(Mke," \u2014 "),LQ=n(Mke,"A",{href:!0});var q8t=s(LQ);Amr=r(q8t,"TFRemBertForCausalLM"),q8t.forEach(t),ymr=r(Mke," (RemBERT model)"),Mke.forEach(t),Lmr=i(Ce),JT=n(Ce,"LI",{});var Eke=s(JT);w8e=n(Eke,"STRONG",{});var N8t=s(w8e);xmr=r(N8t,"roberta"),N8t.forEach(t),$mr=r(Eke," \u2014 "),xQ=n(Eke,"A",{href:!0});var j8t=s(xQ);kmr=r(j8t,"TFRobertaForCausalLM"),j8t.forEach(t),Smr=r(Eke," (RoBERTa model)"),Eke.forEach(t),Rmr=i(Ce),YT=n(Ce,"LI",{});var Cke=s(YT);A8e=n(Cke,"STRONG",{});var D8t=s(A8e);Bmr=r(D8t,"roformer"),D8t.forEach(t),Pmr=r(Cke," \u2014 "),$Q=n(Cke,"A",{href:!0});var G8t=s($Q);Imr=r(G8t,"TFRoFormerForCausalLM"),G8t.forEach(t),qmr=r(Cke," (RoFormer model)"),Cke.forEach(t),Nmr=i(Ce),KT=n(Ce,"LI",{});var wke=s(KT);y8e=n(wke,"STRONG",{});var O8t=s(y8e);jmr=r(O8t,"transfo-xl"),O8t.forEach(t),Dmr=r(wke," \u2014 "),kQ=n(wke,"A",{href:!0});var V8t=s(kQ);Gmr=r(V8t,"TFTransfoXLLMHeadModel"),V8t.forEach(t),Omr=r(wke," (Transformer-XL model)"),wke.forEach(t),Vmr=i(Ce),ZT=n(Ce,"LI",{});var Ake=s(ZT);L8e=n(Ake,"STRONG",{});var X8t=s(L8e);Xmr=r(X8t,"xlm"),X8t.forEach(t),zmr=r(Ake," \u2014 "),SQ=n(Ake,"A",{href:!0});var z8t=s(SQ);Qmr=r(z8t,"TFXLMWithLMHeadModel"),z8t.forEach(t),Wmr=r(Ake," (XLM model)"),Ake.forEach(t),Hmr=i(Ce),e9=n(Ce,"LI",{});var yke=s(e9);x8e=n(yke,"STRONG",{});var Q8t=s(x8e);Umr=r(Q8t,"xlnet"),Q8t.forEach(t),Jmr=r(yke," \u2014 "),RQ=n(yke,"A",{href:!0});var W8t=s(RQ);Ymr=r(W8t,"TFXLNetLMHeadModel"),W8t.forEach(t),Kmr=r(yke," (XLNet model)"),yke.forEach(t),Ce.forEach(t),Zmr=i(pl),T(o9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),JIe=i(f),Wd=n(f,"H2",{class:!0});var rje=s(Wd);r9=n(rje,"A",{id:!0,class:!0,href:!0});var H8t=s(r9);$8e=n(H8t,"SPAN",{});var U8t=s($8e);T(Wy.$$.fragment,U8t),U8t.forEach(t),H8t.forEach(t),egr=i(rje),k8e=n(rje,"SPAN",{});var J8t=s(k8e);ogr=r(J8t,"TFAutoModelForImageClassification"),J8t.forEach(t),rje.forEach(t),YIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(Hy.$$.fragment,ul),rgr=i(ul),Hd=n(ul,"P",{});var sZ=s(Hd);tgr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=n(sZ,"A",{href:!0});var Y8t=s(BQ);agr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),ngr=r(sZ," class method or the "),PQ=n(sZ,"A",{href:!0});var K8t=s(PQ);sgr=r(K8t,"from_config()"),K8t.forEach(t),lgr=r(sZ,` class
method.`),sZ.forEach(t),igr=i(ul),Uy=n(ul,"P",{});var tje=s(Uy);dgr=r(tje,"This class cannot be instantiated directly using "),S8e=n(tje,"CODE",{});var Z8t=s(S8e);cgr=r(Z8t,"__init__()"),Z8t.forEach(t),fgr=r(tje," (throws an error)."),tje.forEach(t),mgr=i(ul),Lt=n(ul,"DIV",{class:!0});var ew=s(Lt);T(Jy.$$.fragment,ew),ggr=i(ew),R8e=n(ew,"P",{});var ebt=s(R8e);hgr=r(ebt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ebt.forEach(t),pgr=i(ew),Ud=n(ew,"P",{});var lZ=s(Ud);ugr=r(lZ,`Note:
Loading a model from its configuration file does `),B8e=n(lZ,"STRONG",{});var obt=s(B8e);_gr=r(obt,"not"),obt.forEach(t),bgr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(lZ,"A",{href:!0});var rbt=s(IQ);vgr=r(rbt,"from_pretrained()"),rbt.forEach(t),Fgr=r(lZ," to load the model weights."),lZ.forEach(t),Tgr=i(ew),T(t9.$$.fragment,ew),ew.forEach(t),Mgr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Yy.$$.fragment,_l),Egr=i(_l),P8e=n(_l,"P",{});var tbt=s(P8e);Cgr=r(tbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tbt.forEach(t),wgr=i(_l),on=n(_l,"P",{});var ow=s(on);Agr=r(ow,"The model class to instantiate is selected based on the "),I8e=n(ow,"CODE",{});var abt=s(I8e);ygr=r(abt,"model_type"),abt.forEach(t),Lgr=r(ow,` property of the config object (either
passed as an argument or loaded from `),q8e=n(ow,"CODE",{});var nbt=s(q8e);xgr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),$gr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(ow,"CODE",{});var sbt=s(N8e);kgr=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),Sgr=r(ow,":"),ow.forEach(t),Rgr=i(_l),rn=n(_l,"UL",{});var rw=s(rn);a9=n(rw,"LI",{});var Lke=s(a9);j8e=n(Lke,"STRONG",{});var lbt=s(j8e);Bgr=r(lbt,"convnext"),lbt.forEach(t),Pgr=r(Lke," \u2014 "),qQ=n(Lke,"A",{href:!0});var ibt=s(qQ);Igr=r(ibt,"TFConvNextForImageClassification"),ibt.forEach(t),qgr=r(Lke," (ConvNext model)"),Lke.forEach(t),Ngr=i(rw),n9=n(rw,"LI",{});var xke=s(n9);D8e=n(xke,"STRONG",{});var dbt=s(D8e);jgr=r(dbt,"data2vec-vision"),dbt.forEach(t),Dgr=r(xke," \u2014 "),NQ=n(xke,"A",{href:!0});var cbt=s(NQ);Ggr=r(cbt,"TFData2VecVisionForImageClassification"),cbt.forEach(t),Ogr=r(xke," (Data2VecVision model)"),xke.forEach(t),Vgr=i(rw),s9=n(rw,"LI",{});var $ke=s(s9);G8e=n($ke,"STRONG",{});var fbt=s(G8e);Xgr=r(fbt,"swin"),fbt.forEach(t),zgr=r($ke," \u2014 "),jQ=n($ke,"A",{href:!0});var mbt=s(jQ);Qgr=r(mbt,"TFSwinForImageClassification"),mbt.forEach(t),Wgr=r($ke," (Swin model)"),$ke.forEach(t),Hgr=i(rw),l9=n(rw,"LI",{});var kke=s(l9);O8e=n(kke,"STRONG",{});var gbt=s(O8e);Ugr=r(gbt,"vit"),gbt.forEach(t),Jgr=r(kke," \u2014 "),DQ=n(kke,"A",{href:!0});var hbt=s(DQ);Ygr=r(hbt,"TFViTForImageClassification"),hbt.forEach(t),Kgr=r(kke," (ViT model)"),kke.forEach(t),rw.forEach(t),Zgr=i(_l),T(i9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),KIe=i(f),Jd=n(f,"H2",{class:!0});var aje=s(Jd);d9=n(aje,"A",{id:!0,class:!0,href:!0});var pbt=s(d9);V8e=n(pbt,"SPAN",{});var ubt=s(V8e);T(Ky.$$.fragment,ubt),ubt.forEach(t),pbt.forEach(t),ehr=i(aje),X8e=n(aje,"SPAN",{});var _bt=s(X8e);ohr=r(_bt,"TFAutoModelForMaskedLM"),_bt.forEach(t),aje.forEach(t),ZIe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(Zy.$$.fragment,bl),rhr=i(bl),Yd=n(bl,"P",{});var iZ=s(Yd);thr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=n(iZ,"A",{href:!0});var bbt=s(GQ);ahr=r(bbt,"from_pretrained()"),bbt.forEach(t),nhr=r(iZ," class method or the "),OQ=n(iZ,"A",{href:!0});var vbt=s(OQ);shr=r(vbt,"from_config()"),vbt.forEach(t),lhr=r(iZ,` class
method.`),iZ.forEach(t),ihr=i(bl),eL=n(bl,"P",{});var nje=s(eL);dhr=r(nje,"This class cannot be instantiated directly using "),z8e=n(nje,"CODE",{});var Fbt=s(z8e);chr=r(Fbt,"__init__()"),Fbt.forEach(t),fhr=r(nje," (throws an error)."),nje.forEach(t),mhr=i(bl),xt=n(bl,"DIV",{class:!0});var tw=s(xt);T(oL.$$.fragment,tw),ghr=i(tw),Q8e=n(tw,"P",{});var Tbt=s(Q8e);hhr=r(Tbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tbt.forEach(t),phr=i(tw),Kd=n(tw,"P",{});var dZ=s(Kd);uhr=r(dZ,`Note:
Loading a model from its configuration file does `),W8e=n(dZ,"STRONG",{});var Mbt=s(W8e);_hr=r(Mbt,"not"),Mbt.forEach(t),bhr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(dZ,"A",{href:!0});var Ebt=s(VQ);vhr=r(Ebt,"from_pretrained()"),Ebt.forEach(t),Fhr=r(dZ," to load the model weights."),dZ.forEach(t),Thr=i(tw),T(c9.$$.fragment,tw),tw.forEach(t),Mhr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(rL.$$.fragment,vl),Ehr=i(vl),H8e=n(vl,"P",{});var Cbt=s(H8e);Chr=r(Cbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cbt.forEach(t),whr=i(vl),tn=n(vl,"P",{});var aw=s(tn);Ahr=r(aw,"The model class to instantiate is selected based on the "),U8e=n(aw,"CODE",{});var wbt=s(U8e);yhr=r(wbt,"model_type"),wbt.forEach(t),Lhr=r(aw,` property of the config object (either
passed as an argument or loaded from `),J8e=n(aw,"CODE",{});var Abt=s(J8e);xhr=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),$hr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(aw,"CODE",{});var ybt=s(Y8e);khr=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),Shr=r(aw,":"),aw.forEach(t),Rhr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);f9=n(fe,"LI",{});var Ske=s(f9);K8e=n(Ske,"STRONG",{});var Lbt=s(K8e);Bhr=r(Lbt,"albert"),Lbt.forEach(t),Phr=r(Ske," \u2014 "),XQ=n(Ske,"A",{href:!0});var xbt=s(XQ);Ihr=r(xbt,"TFAlbertForMaskedLM"),xbt.forEach(t),qhr=r(Ske," (ALBERT model)"),Ske.forEach(t),Nhr=i(fe),m9=n(fe,"LI",{});var Rke=s(m9);Z8e=n(Rke,"STRONG",{});var $bt=s(Z8e);jhr=r($bt,"bert"),$bt.forEach(t),Dhr=r(Rke," \u2014 "),zQ=n(Rke,"A",{href:!0});var kbt=s(zQ);Ghr=r(kbt,"TFBertForMaskedLM"),kbt.forEach(t),Ohr=r(Rke," (BERT model)"),Rke.forEach(t),Vhr=i(fe),g9=n(fe,"LI",{});var Bke=s(g9);ebe=n(Bke,"STRONG",{});var Sbt=s(ebe);Xhr=r(Sbt,"camembert"),Sbt.forEach(t),zhr=r(Bke," \u2014 "),QQ=n(Bke,"A",{href:!0});var Rbt=s(QQ);Qhr=r(Rbt,"TFCamembertForMaskedLM"),Rbt.forEach(t),Whr=r(Bke," (CamemBERT model)"),Bke.forEach(t),Hhr=i(fe),h9=n(fe,"LI",{});var Pke=s(h9);obe=n(Pke,"STRONG",{});var Bbt=s(obe);Uhr=r(Bbt,"convbert"),Bbt.forEach(t),Jhr=r(Pke," \u2014 "),WQ=n(Pke,"A",{href:!0});var Pbt=s(WQ);Yhr=r(Pbt,"TFConvBertForMaskedLM"),Pbt.forEach(t),Khr=r(Pke," (ConvBERT model)"),Pke.forEach(t),Zhr=i(fe),p9=n(fe,"LI",{});var Ike=s(p9);rbe=n(Ike,"STRONG",{});var Ibt=s(rbe);epr=r(Ibt,"deberta"),Ibt.forEach(t),opr=r(Ike," \u2014 "),HQ=n(Ike,"A",{href:!0});var qbt=s(HQ);rpr=r(qbt,"TFDebertaForMaskedLM"),qbt.forEach(t),tpr=r(Ike," (DeBERTa model)"),Ike.forEach(t),apr=i(fe),u9=n(fe,"LI",{});var qke=s(u9);tbe=n(qke,"STRONG",{});var Nbt=s(tbe);npr=r(Nbt,"deberta-v2"),Nbt.forEach(t),spr=r(qke," \u2014 "),UQ=n(qke,"A",{href:!0});var jbt=s(UQ);lpr=r(jbt,"TFDebertaV2ForMaskedLM"),jbt.forEach(t),ipr=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),dpr=i(fe),_9=n(fe,"LI",{});var Nke=s(_9);abe=n(Nke,"STRONG",{});var Dbt=s(abe);cpr=r(Dbt,"distilbert"),Dbt.forEach(t),fpr=r(Nke," \u2014 "),JQ=n(Nke,"A",{href:!0});var Gbt=s(JQ);mpr=r(Gbt,"TFDistilBertForMaskedLM"),Gbt.forEach(t),gpr=r(Nke," (DistilBERT model)"),Nke.forEach(t),hpr=i(fe),b9=n(fe,"LI",{});var jke=s(b9);nbe=n(jke,"STRONG",{});var Obt=s(nbe);ppr=r(Obt,"electra"),Obt.forEach(t),upr=r(jke," \u2014 "),YQ=n(jke,"A",{href:!0});var Vbt=s(YQ);_pr=r(Vbt,"TFElectraForMaskedLM"),Vbt.forEach(t),bpr=r(jke," (ELECTRA model)"),jke.forEach(t),vpr=i(fe),v9=n(fe,"LI",{});var Dke=s(v9);sbe=n(Dke,"STRONG",{});var Xbt=s(sbe);Fpr=r(Xbt,"flaubert"),Xbt.forEach(t),Tpr=r(Dke," \u2014 "),KQ=n(Dke,"A",{href:!0});var zbt=s(KQ);Mpr=r(zbt,"TFFlaubertWithLMHeadModel"),zbt.forEach(t),Epr=r(Dke," (FlauBERT model)"),Dke.forEach(t),Cpr=i(fe),F9=n(fe,"LI",{});var Gke=s(F9);lbe=n(Gke,"STRONG",{});var Qbt=s(lbe);wpr=r(Qbt,"funnel"),Qbt.forEach(t),Apr=r(Gke," \u2014 "),ZQ=n(Gke,"A",{href:!0});var Wbt=s(ZQ);ypr=r(Wbt,"TFFunnelForMaskedLM"),Wbt.forEach(t),Lpr=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),xpr=i(fe),T9=n(fe,"LI",{});var Oke=s(T9);ibe=n(Oke,"STRONG",{});var Hbt=s(ibe);$pr=r(Hbt,"layoutlm"),Hbt.forEach(t),kpr=r(Oke," \u2014 "),eW=n(Oke,"A",{href:!0});var Ubt=s(eW);Spr=r(Ubt,"TFLayoutLMForMaskedLM"),Ubt.forEach(t),Rpr=r(Oke," (LayoutLM model)"),Oke.forEach(t),Bpr=i(fe),M9=n(fe,"LI",{});var Vke=s(M9);dbe=n(Vke,"STRONG",{});var Jbt=s(dbe);Ppr=r(Jbt,"longformer"),Jbt.forEach(t),Ipr=r(Vke," \u2014 "),oW=n(Vke,"A",{href:!0});var Ybt=s(oW);qpr=r(Ybt,"TFLongformerForMaskedLM"),Ybt.forEach(t),Npr=r(Vke," (Longformer model)"),Vke.forEach(t),jpr=i(fe),E9=n(fe,"LI",{});var Xke=s(E9);cbe=n(Xke,"STRONG",{});var Kbt=s(cbe);Dpr=r(Kbt,"mobilebert"),Kbt.forEach(t),Gpr=r(Xke," \u2014 "),rW=n(Xke,"A",{href:!0});var Zbt=s(rW);Opr=r(Zbt,"TFMobileBertForMaskedLM"),Zbt.forEach(t),Vpr=r(Xke," (MobileBERT model)"),Xke.forEach(t),Xpr=i(fe),C9=n(fe,"LI",{});var zke=s(C9);fbe=n(zke,"STRONG",{});var e2t=s(fbe);zpr=r(e2t,"mpnet"),e2t.forEach(t),Qpr=r(zke," \u2014 "),tW=n(zke,"A",{href:!0});var o2t=s(tW);Wpr=r(o2t,"TFMPNetForMaskedLM"),o2t.forEach(t),Hpr=r(zke," (MPNet model)"),zke.forEach(t),Upr=i(fe),w9=n(fe,"LI",{});var Qke=s(w9);mbe=n(Qke,"STRONG",{});var r2t=s(mbe);Jpr=r(r2t,"rembert"),r2t.forEach(t),Ypr=r(Qke," \u2014 "),aW=n(Qke,"A",{href:!0});var t2t=s(aW);Kpr=r(t2t,"TFRemBertForMaskedLM"),t2t.forEach(t),Zpr=r(Qke," (RemBERT model)"),Qke.forEach(t),eur=i(fe),A9=n(fe,"LI",{});var Wke=s(A9);gbe=n(Wke,"STRONG",{});var a2t=s(gbe);our=r(a2t,"roberta"),a2t.forEach(t),rur=r(Wke," \u2014 "),nW=n(Wke,"A",{href:!0});var n2t=s(nW);tur=r(n2t,"TFRobertaForMaskedLM"),n2t.forEach(t),aur=r(Wke," (RoBERTa model)"),Wke.forEach(t),nur=i(fe),y9=n(fe,"LI",{});var Hke=s(y9);hbe=n(Hke,"STRONG",{});var s2t=s(hbe);sur=r(s2t,"roformer"),s2t.forEach(t),lur=r(Hke," \u2014 "),sW=n(Hke,"A",{href:!0});var l2t=s(sW);iur=r(l2t,"TFRoFormerForMaskedLM"),l2t.forEach(t),dur=r(Hke," (RoFormer model)"),Hke.forEach(t),cur=i(fe),L9=n(fe,"LI",{});var Uke=s(L9);pbe=n(Uke,"STRONG",{});var i2t=s(pbe);fur=r(i2t,"tapas"),i2t.forEach(t),mur=r(Uke," \u2014 "),lW=n(Uke,"A",{href:!0});var d2t=s(lW);gur=r(d2t,"TFTapasForMaskedLM"),d2t.forEach(t),hur=r(Uke," (TAPAS model)"),Uke.forEach(t),pur=i(fe),x9=n(fe,"LI",{});var Jke=s(x9);ube=n(Jke,"STRONG",{});var c2t=s(ube);uur=r(c2t,"xlm"),c2t.forEach(t),_ur=r(Jke," \u2014 "),iW=n(Jke,"A",{href:!0});var f2t=s(iW);bur=r(f2t,"TFXLMWithLMHeadModel"),f2t.forEach(t),vur=r(Jke," (XLM model)"),Jke.forEach(t),Fur=i(fe),$9=n(fe,"LI",{});var Yke=s($9);_be=n(Yke,"STRONG",{});var m2t=s(_be);Tur=r(m2t,"xlm-roberta"),m2t.forEach(t),Mur=r(Yke," \u2014 "),dW=n(Yke,"A",{href:!0});var g2t=s(dW);Eur=r(g2t,"TFXLMRobertaForMaskedLM"),g2t.forEach(t),Cur=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),fe.forEach(t),wur=i(vl),T(k9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),eqe=i(f),Zd=n(f,"H2",{class:!0});var sje=s(Zd);S9=n(sje,"A",{id:!0,class:!0,href:!0});var h2t=s(S9);bbe=n(h2t,"SPAN",{});var p2t=s(bbe);T(tL.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),Aur=i(sje),vbe=n(sje,"SPAN",{});var u2t=s(vbe);yur=r(u2t,"TFAutoModelForSeq2SeqLM"),u2t.forEach(t),sje.forEach(t),oqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(aL.$$.fragment,Fl),Lur=i(Fl),ec=n(Fl,"P",{});var cZ=s(ec);xur=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=n(cZ,"A",{href:!0});var _2t=s(cW);$ur=r(_2t,"from_pretrained()"),_2t.forEach(t),kur=r(cZ," class method or the "),fW=n(cZ,"A",{href:!0});var b2t=s(fW);Sur=r(b2t,"from_config()"),b2t.forEach(t),Rur=r(cZ,` class
method.`),cZ.forEach(t),Bur=i(Fl),nL=n(Fl,"P",{});var lje=s(nL);Pur=r(lje,"This class cannot be instantiated directly using "),Fbe=n(lje,"CODE",{});var v2t=s(Fbe);Iur=r(v2t,"__init__()"),v2t.forEach(t),qur=r(lje," (throws an error)."),lje.forEach(t),Nur=i(Fl),$t=n(Fl,"DIV",{class:!0});var nw=s($t);T(sL.$$.fragment,nw),jur=i(nw),Tbe=n(nw,"P",{});var F2t=s(Tbe);Dur=r(F2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F2t.forEach(t),Gur=i(nw),oc=n(nw,"P",{});var fZ=s(oc);Our=r(fZ,`Note:
Loading a model from its configuration file does `),Mbe=n(fZ,"STRONG",{});var T2t=s(Mbe);Vur=r(T2t,"not"),T2t.forEach(t),Xur=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(fZ,"A",{href:!0});var M2t=s(mW);zur=r(M2t,"from_pretrained()"),M2t.forEach(t),Qur=r(fZ," to load the model weights."),fZ.forEach(t),Wur=i(nw),T(R9.$$.fragment,nw),nw.forEach(t),Hur=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(lL.$$.fragment,Tl),Uur=i(Tl),Ebe=n(Tl,"P",{});var E2t=s(Ebe);Jur=r(E2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),E2t.forEach(t),Yur=i(Tl),an=n(Tl,"P",{});var sw=s(an);Kur=r(sw,"The model class to instantiate is selected based on the "),Cbe=n(sw,"CODE",{});var C2t=s(Cbe);Zur=r(C2t,"model_type"),C2t.forEach(t),e_r=r(sw,` property of the config object (either
passed as an argument or loaded from `),wbe=n(sw,"CODE",{});var w2t=s(wbe);o_r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),r_r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(sw,"CODE",{});var A2t=s(Abe);t_r=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),a_r=r(sw,":"),sw.forEach(t),n_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);B9=n(Re,"LI",{});var Kke=s(B9);ybe=n(Kke,"STRONG",{});var y2t=s(ybe);s_r=r(y2t,"bart"),y2t.forEach(t),l_r=r(Kke," \u2014 "),gW=n(Kke,"A",{href:!0});var L2t=s(gW);i_r=r(L2t,"TFBartForConditionalGeneration"),L2t.forEach(t),d_r=r(Kke," (BART model)"),Kke.forEach(t),c_r=i(Re),P9=n(Re,"LI",{});var Zke=s(P9);Lbe=n(Zke,"STRONG",{});var x2t=s(Lbe);f_r=r(x2t,"blenderbot"),x2t.forEach(t),m_r=r(Zke," \u2014 "),hW=n(Zke,"A",{href:!0});var $2t=s(hW);g_r=r($2t,"TFBlenderbotForConditionalGeneration"),$2t.forEach(t),h_r=r(Zke," (Blenderbot model)"),Zke.forEach(t),p_r=i(Re),I9=n(Re,"LI",{});var eSe=s(I9);xbe=n(eSe,"STRONG",{});var k2t=s(xbe);u_r=r(k2t,"blenderbot-small"),k2t.forEach(t),__r=r(eSe," \u2014 "),pW=n(eSe,"A",{href:!0});var S2t=s(pW);b_r=r(S2t,"TFBlenderbotSmallForConditionalGeneration"),S2t.forEach(t),v_r=r(eSe," (BlenderbotSmall model)"),eSe.forEach(t),F_r=i(Re),q9=n(Re,"LI",{});var oSe=s(q9);$be=n(oSe,"STRONG",{});var R2t=s($be);T_r=r(R2t,"encoder-decoder"),R2t.forEach(t),M_r=r(oSe," \u2014 "),uW=n(oSe,"A",{href:!0});var B2t=s(uW);E_r=r(B2t,"TFEncoderDecoderModel"),B2t.forEach(t),C_r=r(oSe," (Encoder decoder model)"),oSe.forEach(t),w_r=i(Re),N9=n(Re,"LI",{});var rSe=s(N9);kbe=n(rSe,"STRONG",{});var P2t=s(kbe);A_r=r(P2t,"led"),P2t.forEach(t),y_r=r(rSe," \u2014 "),_W=n(rSe,"A",{href:!0});var I2t=s(_W);L_r=r(I2t,"TFLEDForConditionalGeneration"),I2t.forEach(t),x_r=r(rSe," (LED model)"),rSe.forEach(t),$_r=i(Re),j9=n(Re,"LI",{});var tSe=s(j9);Sbe=n(tSe,"STRONG",{});var q2t=s(Sbe);k_r=r(q2t,"marian"),q2t.forEach(t),S_r=r(tSe," \u2014 "),bW=n(tSe,"A",{href:!0});var N2t=s(bW);R_r=r(N2t,"TFMarianMTModel"),N2t.forEach(t),B_r=r(tSe," (Marian model)"),tSe.forEach(t),P_r=i(Re),D9=n(Re,"LI",{});var aSe=s(D9);Rbe=n(aSe,"STRONG",{});var j2t=s(Rbe);I_r=r(j2t,"mbart"),j2t.forEach(t),q_r=r(aSe," \u2014 "),vW=n(aSe,"A",{href:!0});var D2t=s(vW);N_r=r(D2t,"TFMBartForConditionalGeneration"),D2t.forEach(t),j_r=r(aSe," (mBART model)"),aSe.forEach(t),D_r=i(Re),G9=n(Re,"LI",{});var nSe=s(G9);Bbe=n(nSe,"STRONG",{});var G2t=s(Bbe);G_r=r(G2t,"mt5"),G2t.forEach(t),O_r=r(nSe," \u2014 "),FW=n(nSe,"A",{href:!0});var O2t=s(FW);V_r=r(O2t,"TFMT5ForConditionalGeneration"),O2t.forEach(t),X_r=r(nSe," (mT5 model)"),nSe.forEach(t),z_r=i(Re),O9=n(Re,"LI",{});var sSe=s(O9);Pbe=n(sSe,"STRONG",{});var V2t=s(Pbe);Q_r=r(V2t,"pegasus"),V2t.forEach(t),W_r=r(sSe," \u2014 "),TW=n(sSe,"A",{href:!0});var X2t=s(TW);H_r=r(X2t,"TFPegasusForConditionalGeneration"),X2t.forEach(t),U_r=r(sSe," (Pegasus model)"),sSe.forEach(t),J_r=i(Re),V9=n(Re,"LI",{});var lSe=s(V9);Ibe=n(lSe,"STRONG",{});var z2t=s(Ibe);Y_r=r(z2t,"t5"),z2t.forEach(t),K_r=r(lSe," \u2014 "),MW=n(lSe,"A",{href:!0});var Q2t=s(MW);Z_r=r(Q2t,"TFT5ForConditionalGeneration"),Q2t.forEach(t),e1r=r(lSe," (T5 model)"),lSe.forEach(t),Re.forEach(t),o1r=i(Tl),T(X9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),rqe=i(f),rc=n(f,"H2",{class:!0});var ije=s(rc);z9=n(ije,"A",{id:!0,class:!0,href:!0});var W2t=s(z9);qbe=n(W2t,"SPAN",{});var H2t=s(qbe);T(iL.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),r1r=i(ije),Nbe=n(ije,"SPAN",{});var U2t=s(Nbe);t1r=r(U2t,"TFAutoModelForSequenceClassification"),U2t.forEach(t),ije.forEach(t),tqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(dL.$$.fragment,Ml),a1r=i(Ml),tc=n(Ml,"P",{});var mZ=s(tc);n1r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EW=n(mZ,"A",{href:!0});var J2t=s(EW);s1r=r(J2t,"from_pretrained()"),J2t.forEach(t),l1r=r(mZ," class method or the "),CW=n(mZ,"A",{href:!0});var Y2t=s(CW);i1r=r(Y2t,"from_config()"),Y2t.forEach(t),d1r=r(mZ,` class
method.`),mZ.forEach(t),c1r=i(Ml),cL=n(Ml,"P",{});var dje=s(cL);f1r=r(dje,"This class cannot be instantiated directly using "),jbe=n(dje,"CODE",{});var K2t=s(jbe);m1r=r(K2t,"__init__()"),K2t.forEach(t),g1r=r(dje," (throws an error)."),dje.forEach(t),h1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var lw=s(kt);T(fL.$$.fragment,lw),p1r=i(lw),Dbe=n(lw,"P",{});var Z2t=s(Dbe);u1r=r(Z2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z2t.forEach(t),_1r=i(lw),ac=n(lw,"P",{});var gZ=s(ac);b1r=r(gZ,`Note:
Loading a model from its configuration file does `),Gbe=n(gZ,"STRONG",{});var evt=s(Gbe);v1r=r(evt,"not"),evt.forEach(t),F1r=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(gZ,"A",{href:!0});var ovt=s(wW);T1r=r(ovt,"from_pretrained()"),ovt.forEach(t),M1r=r(gZ," to load the model weights."),gZ.forEach(t),E1r=i(lw),T(Q9.$$.fragment,lw),lw.forEach(t),C1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(mL.$$.fragment,El),w1r=i(El),Obe=n(El,"P",{});var rvt=s(Obe);A1r=r(rvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rvt.forEach(t),y1r=i(El),nn=n(El,"P",{});var iw=s(nn);L1r=r(iw,"The model class to instantiate is selected based on the "),Vbe=n(iw,"CODE",{});var tvt=s(Vbe);x1r=r(tvt,"model_type"),tvt.forEach(t),$1r=r(iw,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(iw,"CODE",{});var avt=s(Xbe);k1r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),S1r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(iw,"CODE",{});var nvt=s(zbe);R1r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),B1r=r(iw,":"),iw.forEach(t),P1r=i(El),Z=n(El,"UL",{});var te=s(Z);W9=n(te,"LI",{});var iSe=s(W9);Qbe=n(iSe,"STRONG",{});var svt=s(Qbe);I1r=r(svt,"albert"),svt.forEach(t),q1r=r(iSe," \u2014 "),AW=n(iSe,"A",{href:!0});var lvt=s(AW);N1r=r(lvt,"TFAlbertForSequenceClassification"),lvt.forEach(t),j1r=r(iSe," (ALBERT model)"),iSe.forEach(t),D1r=i(te),H9=n(te,"LI",{});var dSe=s(H9);Wbe=n(dSe,"STRONG",{});var ivt=s(Wbe);G1r=r(ivt,"bert"),ivt.forEach(t),O1r=r(dSe," \u2014 "),yW=n(dSe,"A",{href:!0});var dvt=s(yW);V1r=r(dvt,"TFBertForSequenceClassification"),dvt.forEach(t),X1r=r(dSe," (BERT model)"),dSe.forEach(t),z1r=i(te),U9=n(te,"LI",{});var cSe=s(U9);Hbe=n(cSe,"STRONG",{});var cvt=s(Hbe);Q1r=r(cvt,"camembert"),cvt.forEach(t),W1r=r(cSe," \u2014 "),LW=n(cSe,"A",{href:!0});var fvt=s(LW);H1r=r(fvt,"TFCamembertForSequenceClassification"),fvt.forEach(t),U1r=r(cSe," (CamemBERT model)"),cSe.forEach(t),J1r=i(te),J9=n(te,"LI",{});var fSe=s(J9);Ube=n(fSe,"STRONG",{});var mvt=s(Ube);Y1r=r(mvt,"convbert"),mvt.forEach(t),K1r=r(fSe," \u2014 "),xW=n(fSe,"A",{href:!0});var gvt=s(xW);Z1r=r(gvt,"TFConvBertForSequenceClassification"),gvt.forEach(t),e8r=r(fSe," (ConvBERT model)"),fSe.forEach(t),o8r=i(te),Y9=n(te,"LI",{});var mSe=s(Y9);Jbe=n(mSe,"STRONG",{});var hvt=s(Jbe);r8r=r(hvt,"ctrl"),hvt.forEach(t),t8r=r(mSe," \u2014 "),$W=n(mSe,"A",{href:!0});var pvt=s($W);a8r=r(pvt,"TFCTRLForSequenceClassification"),pvt.forEach(t),n8r=r(mSe," (CTRL model)"),mSe.forEach(t),s8r=i(te),K9=n(te,"LI",{});var gSe=s(K9);Ybe=n(gSe,"STRONG",{});var uvt=s(Ybe);l8r=r(uvt,"deberta"),uvt.forEach(t),i8r=r(gSe," \u2014 "),kW=n(gSe,"A",{href:!0});var _vt=s(kW);d8r=r(_vt,"TFDebertaForSequenceClassification"),_vt.forEach(t),c8r=r(gSe," (DeBERTa model)"),gSe.forEach(t),f8r=i(te),Z9=n(te,"LI",{});var hSe=s(Z9);Kbe=n(hSe,"STRONG",{});var bvt=s(Kbe);m8r=r(bvt,"deberta-v2"),bvt.forEach(t),g8r=r(hSe," \u2014 "),SW=n(hSe,"A",{href:!0});var vvt=s(SW);h8r=r(vvt,"TFDebertaV2ForSequenceClassification"),vvt.forEach(t),p8r=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),u8r=i(te),eM=n(te,"LI",{});var pSe=s(eM);Zbe=n(pSe,"STRONG",{});var Fvt=s(Zbe);_8r=r(Fvt,"distilbert"),Fvt.forEach(t),b8r=r(pSe," \u2014 "),RW=n(pSe,"A",{href:!0});var Tvt=s(RW);v8r=r(Tvt,"TFDistilBertForSequenceClassification"),Tvt.forEach(t),F8r=r(pSe," (DistilBERT model)"),pSe.forEach(t),T8r=i(te),oM=n(te,"LI",{});var uSe=s(oM);e2e=n(uSe,"STRONG",{});var Mvt=s(e2e);M8r=r(Mvt,"electra"),Mvt.forEach(t),E8r=r(uSe," \u2014 "),BW=n(uSe,"A",{href:!0});var Evt=s(BW);C8r=r(Evt,"TFElectraForSequenceClassification"),Evt.forEach(t),w8r=r(uSe," (ELECTRA model)"),uSe.forEach(t),A8r=i(te),rM=n(te,"LI",{});var _Se=s(rM);o2e=n(_Se,"STRONG",{});var Cvt=s(o2e);y8r=r(Cvt,"flaubert"),Cvt.forEach(t),L8r=r(_Se," \u2014 "),PW=n(_Se,"A",{href:!0});var wvt=s(PW);x8r=r(wvt,"TFFlaubertForSequenceClassification"),wvt.forEach(t),$8r=r(_Se," (FlauBERT model)"),_Se.forEach(t),k8r=i(te),tM=n(te,"LI",{});var bSe=s(tM);r2e=n(bSe,"STRONG",{});var Avt=s(r2e);S8r=r(Avt,"funnel"),Avt.forEach(t),R8r=r(bSe," \u2014 "),IW=n(bSe,"A",{href:!0});var yvt=s(IW);B8r=r(yvt,"TFFunnelForSequenceClassification"),yvt.forEach(t),P8r=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),I8r=i(te),aM=n(te,"LI",{});var vSe=s(aM);t2e=n(vSe,"STRONG",{});var Lvt=s(t2e);q8r=r(Lvt,"gpt2"),Lvt.forEach(t),N8r=r(vSe," \u2014 "),qW=n(vSe,"A",{href:!0});var xvt=s(qW);j8r=r(xvt,"TFGPT2ForSequenceClassification"),xvt.forEach(t),D8r=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),G8r=i(te),nM=n(te,"LI",{});var FSe=s(nM);a2e=n(FSe,"STRONG",{});var $vt=s(a2e);O8r=r($vt,"gptj"),$vt.forEach(t),V8r=r(FSe," \u2014 "),NW=n(FSe,"A",{href:!0});var kvt=s(NW);X8r=r(kvt,"TFGPTJForSequenceClassification"),kvt.forEach(t),z8r=r(FSe," (GPT-J model)"),FSe.forEach(t),Q8r=i(te),sM=n(te,"LI",{});var TSe=s(sM);n2e=n(TSe,"STRONG",{});var Svt=s(n2e);W8r=r(Svt,"layoutlm"),Svt.forEach(t),H8r=r(TSe," \u2014 "),jW=n(TSe,"A",{href:!0});var Rvt=s(jW);U8r=r(Rvt,"TFLayoutLMForSequenceClassification"),Rvt.forEach(t),J8r=r(TSe," (LayoutLM model)"),TSe.forEach(t),Y8r=i(te),lM=n(te,"LI",{});var MSe=s(lM);s2e=n(MSe,"STRONG",{});var Bvt=s(s2e);K8r=r(Bvt,"longformer"),Bvt.forEach(t),Z8r=r(MSe," \u2014 "),DW=n(MSe,"A",{href:!0});var Pvt=s(DW);ebr=r(Pvt,"TFLongformerForSequenceClassification"),Pvt.forEach(t),obr=r(MSe," (Longformer model)"),MSe.forEach(t),rbr=i(te),iM=n(te,"LI",{});var ESe=s(iM);l2e=n(ESe,"STRONG",{});var Ivt=s(l2e);tbr=r(Ivt,"mobilebert"),Ivt.forEach(t),abr=r(ESe," \u2014 "),GW=n(ESe,"A",{href:!0});var qvt=s(GW);nbr=r(qvt,"TFMobileBertForSequenceClassification"),qvt.forEach(t),sbr=r(ESe," (MobileBERT model)"),ESe.forEach(t),lbr=i(te),dM=n(te,"LI",{});var CSe=s(dM);i2e=n(CSe,"STRONG",{});var Nvt=s(i2e);ibr=r(Nvt,"mpnet"),Nvt.forEach(t),dbr=r(CSe," \u2014 "),OW=n(CSe,"A",{href:!0});var jvt=s(OW);cbr=r(jvt,"TFMPNetForSequenceClassification"),jvt.forEach(t),fbr=r(CSe," (MPNet model)"),CSe.forEach(t),mbr=i(te),cM=n(te,"LI",{});var wSe=s(cM);d2e=n(wSe,"STRONG",{});var Dvt=s(d2e);gbr=r(Dvt,"openai-gpt"),Dvt.forEach(t),hbr=r(wSe," \u2014 "),VW=n(wSe,"A",{href:!0});var Gvt=s(VW);pbr=r(Gvt,"TFOpenAIGPTForSequenceClassification"),Gvt.forEach(t),ubr=r(wSe," (OpenAI GPT model)"),wSe.forEach(t),_br=i(te),fM=n(te,"LI",{});var ASe=s(fM);c2e=n(ASe,"STRONG",{});var Ovt=s(c2e);bbr=r(Ovt,"rembert"),Ovt.forEach(t),vbr=r(ASe," \u2014 "),XW=n(ASe,"A",{href:!0});var Vvt=s(XW);Fbr=r(Vvt,"TFRemBertForSequenceClassification"),Vvt.forEach(t),Tbr=r(ASe," (RemBERT model)"),ASe.forEach(t),Mbr=i(te),mM=n(te,"LI",{});var ySe=s(mM);f2e=n(ySe,"STRONG",{});var Xvt=s(f2e);Ebr=r(Xvt,"roberta"),Xvt.forEach(t),Cbr=r(ySe," \u2014 "),zW=n(ySe,"A",{href:!0});var zvt=s(zW);wbr=r(zvt,"TFRobertaForSequenceClassification"),zvt.forEach(t),Abr=r(ySe," (RoBERTa model)"),ySe.forEach(t),ybr=i(te),gM=n(te,"LI",{});var LSe=s(gM);m2e=n(LSe,"STRONG",{});var Qvt=s(m2e);Lbr=r(Qvt,"roformer"),Qvt.forEach(t),xbr=r(LSe," \u2014 "),QW=n(LSe,"A",{href:!0});var Wvt=s(QW);$br=r(Wvt,"TFRoFormerForSequenceClassification"),Wvt.forEach(t),kbr=r(LSe," (RoFormer model)"),LSe.forEach(t),Sbr=i(te),hM=n(te,"LI",{});var xSe=s(hM);g2e=n(xSe,"STRONG",{});var Hvt=s(g2e);Rbr=r(Hvt,"tapas"),Hvt.forEach(t),Bbr=r(xSe," \u2014 "),WW=n(xSe,"A",{href:!0});var Uvt=s(WW);Pbr=r(Uvt,"TFTapasForSequenceClassification"),Uvt.forEach(t),Ibr=r(xSe," (TAPAS model)"),xSe.forEach(t),qbr=i(te),pM=n(te,"LI",{});var $Se=s(pM);h2e=n($Se,"STRONG",{});var Jvt=s(h2e);Nbr=r(Jvt,"transfo-xl"),Jvt.forEach(t),jbr=r($Se," \u2014 "),HW=n($Se,"A",{href:!0});var Yvt=s(HW);Dbr=r(Yvt,"TFTransfoXLForSequenceClassification"),Yvt.forEach(t),Gbr=r($Se," (Transformer-XL model)"),$Se.forEach(t),Obr=i(te),uM=n(te,"LI",{});var kSe=s(uM);p2e=n(kSe,"STRONG",{});var Kvt=s(p2e);Vbr=r(Kvt,"xlm"),Kvt.forEach(t),Xbr=r(kSe," \u2014 "),UW=n(kSe,"A",{href:!0});var Zvt=s(UW);zbr=r(Zvt,"TFXLMForSequenceClassification"),Zvt.forEach(t),Qbr=r(kSe," (XLM model)"),kSe.forEach(t),Wbr=i(te),_M=n(te,"LI",{});var SSe=s(_M);u2e=n(SSe,"STRONG",{});var eFt=s(u2e);Hbr=r(eFt,"xlm-roberta"),eFt.forEach(t),Ubr=r(SSe," \u2014 "),JW=n(SSe,"A",{href:!0});var oFt=s(JW);Jbr=r(oFt,"TFXLMRobertaForSequenceClassification"),oFt.forEach(t),Ybr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),Kbr=i(te),bM=n(te,"LI",{});var RSe=s(bM);_2e=n(RSe,"STRONG",{});var rFt=s(_2e);Zbr=r(rFt,"xlnet"),rFt.forEach(t),e2r=r(RSe," \u2014 "),YW=n(RSe,"A",{href:!0});var tFt=s(YW);o2r=r(tFt,"TFXLNetForSequenceClassification"),tFt.forEach(t),r2r=r(RSe," (XLNet model)"),RSe.forEach(t),te.forEach(t),t2r=i(El),T(vM.$$.fragment,El),El.forEach(t),Ml.forEach(t),aqe=i(f),nc=n(f,"H2",{class:!0});var cje=s(nc);FM=n(cje,"A",{id:!0,class:!0,href:!0});var aFt=s(FM);b2e=n(aFt,"SPAN",{});var nFt=s(b2e);T(gL.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),a2r=i(cje),v2e=n(cje,"SPAN",{});var sFt=s(v2e);n2r=r(sFt,"TFAutoModelForMultipleChoice"),sFt.forEach(t),cje.forEach(t),nqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(hL.$$.fragment,Cl),s2r=i(Cl),sc=n(Cl,"P",{});var hZ=s(sc);l2r=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KW=n(hZ,"A",{href:!0});var lFt=s(KW);i2r=r(lFt,"from_pretrained()"),lFt.forEach(t),d2r=r(hZ," class method or the "),ZW=n(hZ,"A",{href:!0});var iFt=s(ZW);c2r=r(iFt,"from_config()"),iFt.forEach(t),f2r=r(hZ,` class
method.`),hZ.forEach(t),m2r=i(Cl),pL=n(Cl,"P",{});var fje=s(pL);g2r=r(fje,"This class cannot be instantiated directly using "),F2e=n(fje,"CODE",{});var dFt=s(F2e);h2r=r(dFt,"__init__()"),dFt.forEach(t),p2r=r(fje," (throws an error)."),fje.forEach(t),u2r=i(Cl),St=n(Cl,"DIV",{class:!0});var dw=s(St);T(uL.$$.fragment,dw),_2r=i(dw),T2e=n(dw,"P",{});var cFt=s(T2e);b2r=r(cFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cFt.forEach(t),v2r=i(dw),lc=n(dw,"P",{});var pZ=s(lc);F2r=r(pZ,`Note:
Loading a model from its configuration file does `),M2e=n(pZ,"STRONG",{});var fFt=s(M2e);T2r=r(fFt,"not"),fFt.forEach(t),M2r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(pZ,"A",{href:!0});var mFt=s(eH);E2r=r(mFt,"from_pretrained()"),mFt.forEach(t),C2r=r(pZ," to load the model weights."),pZ.forEach(t),w2r=i(dw),T(TM.$$.fragment,dw),dw.forEach(t),A2r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(_L.$$.fragment,wl),y2r=i(wl),E2e=n(wl,"P",{});var gFt=s(E2e);L2r=r(gFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gFt.forEach(t),x2r=i(wl),sn=n(wl,"P",{});var cw=s(sn);$2r=r(cw,"The model class to instantiate is selected based on the "),C2e=n(cw,"CODE",{});var hFt=s(C2e);k2r=r(hFt,"model_type"),hFt.forEach(t),S2r=r(cw,` property of the config object (either
passed as an argument or loaded from `),w2e=n(cw,"CODE",{});var pFt=s(w2e);R2r=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),B2r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(cw,"CODE",{});var uFt=s(A2e);P2r=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),I2r=r(cw,":"),cw.forEach(t),q2r=i(wl),he=n(wl,"UL",{});var ue=s(he);MM=n(ue,"LI",{});var BSe=s(MM);y2e=n(BSe,"STRONG",{});var _Ft=s(y2e);N2r=r(_Ft,"albert"),_Ft.forEach(t),j2r=r(BSe," \u2014 "),oH=n(BSe,"A",{href:!0});var bFt=s(oH);D2r=r(bFt,"TFAlbertForMultipleChoice"),bFt.forEach(t),G2r=r(BSe," (ALBERT model)"),BSe.forEach(t),O2r=i(ue),EM=n(ue,"LI",{});var PSe=s(EM);L2e=n(PSe,"STRONG",{});var vFt=s(L2e);V2r=r(vFt,"bert"),vFt.forEach(t),X2r=r(PSe," \u2014 "),rH=n(PSe,"A",{href:!0});var FFt=s(rH);z2r=r(FFt,"TFBertForMultipleChoice"),FFt.forEach(t),Q2r=r(PSe," (BERT model)"),PSe.forEach(t),W2r=i(ue),CM=n(ue,"LI",{});var ISe=s(CM);x2e=n(ISe,"STRONG",{});var TFt=s(x2e);H2r=r(TFt,"camembert"),TFt.forEach(t),U2r=r(ISe," \u2014 "),tH=n(ISe,"A",{href:!0});var MFt=s(tH);J2r=r(MFt,"TFCamembertForMultipleChoice"),MFt.forEach(t),Y2r=r(ISe," (CamemBERT model)"),ISe.forEach(t),K2r=i(ue),wM=n(ue,"LI",{});var qSe=s(wM);$2e=n(qSe,"STRONG",{});var EFt=s($2e);Z2r=r(EFt,"convbert"),EFt.forEach(t),evr=r(qSe," \u2014 "),aH=n(qSe,"A",{href:!0});var CFt=s(aH);ovr=r(CFt,"TFConvBertForMultipleChoice"),CFt.forEach(t),rvr=r(qSe," (ConvBERT model)"),qSe.forEach(t),tvr=i(ue),AM=n(ue,"LI",{});var NSe=s(AM);k2e=n(NSe,"STRONG",{});var wFt=s(k2e);avr=r(wFt,"distilbert"),wFt.forEach(t),nvr=r(NSe," \u2014 "),nH=n(NSe,"A",{href:!0});var AFt=s(nH);svr=r(AFt,"TFDistilBertForMultipleChoice"),AFt.forEach(t),lvr=r(NSe," (DistilBERT model)"),NSe.forEach(t),ivr=i(ue),yM=n(ue,"LI",{});var jSe=s(yM);S2e=n(jSe,"STRONG",{});var yFt=s(S2e);dvr=r(yFt,"electra"),yFt.forEach(t),cvr=r(jSe," \u2014 "),sH=n(jSe,"A",{href:!0});var LFt=s(sH);fvr=r(LFt,"TFElectraForMultipleChoice"),LFt.forEach(t),mvr=r(jSe," (ELECTRA model)"),jSe.forEach(t),gvr=i(ue),LM=n(ue,"LI",{});var DSe=s(LM);R2e=n(DSe,"STRONG",{});var xFt=s(R2e);hvr=r(xFt,"flaubert"),xFt.forEach(t),pvr=r(DSe," \u2014 "),lH=n(DSe,"A",{href:!0});var $Ft=s(lH);uvr=r($Ft,"TFFlaubertForMultipleChoice"),$Ft.forEach(t),_vr=r(DSe," (FlauBERT model)"),DSe.forEach(t),bvr=i(ue),xM=n(ue,"LI",{});var GSe=s(xM);B2e=n(GSe,"STRONG",{});var kFt=s(B2e);vvr=r(kFt,"funnel"),kFt.forEach(t),Fvr=r(GSe," \u2014 "),iH=n(GSe,"A",{href:!0});var SFt=s(iH);Tvr=r(SFt,"TFFunnelForMultipleChoice"),SFt.forEach(t),Mvr=r(GSe," (Funnel Transformer model)"),GSe.forEach(t),Evr=i(ue),$M=n(ue,"LI",{});var OSe=s($M);P2e=n(OSe,"STRONG",{});var RFt=s(P2e);Cvr=r(RFt,"longformer"),RFt.forEach(t),wvr=r(OSe," \u2014 "),dH=n(OSe,"A",{href:!0});var BFt=s(dH);Avr=r(BFt,"TFLongformerForMultipleChoice"),BFt.forEach(t),yvr=r(OSe," (Longformer model)"),OSe.forEach(t),Lvr=i(ue),kM=n(ue,"LI",{});var VSe=s(kM);I2e=n(VSe,"STRONG",{});var PFt=s(I2e);xvr=r(PFt,"mobilebert"),PFt.forEach(t),$vr=r(VSe," \u2014 "),cH=n(VSe,"A",{href:!0});var IFt=s(cH);kvr=r(IFt,"TFMobileBertForMultipleChoice"),IFt.forEach(t),Svr=r(VSe," (MobileBERT model)"),VSe.forEach(t),Rvr=i(ue),SM=n(ue,"LI",{});var XSe=s(SM);q2e=n(XSe,"STRONG",{});var qFt=s(q2e);Bvr=r(qFt,"mpnet"),qFt.forEach(t),Pvr=r(XSe," \u2014 "),fH=n(XSe,"A",{href:!0});var NFt=s(fH);Ivr=r(NFt,"TFMPNetForMultipleChoice"),NFt.forEach(t),qvr=r(XSe," (MPNet model)"),XSe.forEach(t),Nvr=i(ue),RM=n(ue,"LI",{});var zSe=s(RM);N2e=n(zSe,"STRONG",{});var jFt=s(N2e);jvr=r(jFt,"rembert"),jFt.forEach(t),Dvr=r(zSe," \u2014 "),mH=n(zSe,"A",{href:!0});var DFt=s(mH);Gvr=r(DFt,"TFRemBertForMultipleChoice"),DFt.forEach(t),Ovr=r(zSe," (RemBERT model)"),zSe.forEach(t),Vvr=i(ue),BM=n(ue,"LI",{});var QSe=s(BM);j2e=n(QSe,"STRONG",{});var GFt=s(j2e);Xvr=r(GFt,"roberta"),GFt.forEach(t),zvr=r(QSe," \u2014 "),gH=n(QSe,"A",{href:!0});var OFt=s(gH);Qvr=r(OFt,"TFRobertaForMultipleChoice"),OFt.forEach(t),Wvr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Hvr=i(ue),PM=n(ue,"LI",{});var WSe=s(PM);D2e=n(WSe,"STRONG",{});var VFt=s(D2e);Uvr=r(VFt,"roformer"),VFt.forEach(t),Jvr=r(WSe," \u2014 "),hH=n(WSe,"A",{href:!0});var XFt=s(hH);Yvr=r(XFt,"TFRoFormerForMultipleChoice"),XFt.forEach(t),Kvr=r(WSe," (RoFormer model)"),WSe.forEach(t),Zvr=i(ue),IM=n(ue,"LI",{});var HSe=s(IM);G2e=n(HSe,"STRONG",{});var zFt=s(G2e);eFr=r(zFt,"xlm"),zFt.forEach(t),oFr=r(HSe," \u2014 "),pH=n(HSe,"A",{href:!0});var QFt=s(pH);rFr=r(QFt,"TFXLMForMultipleChoice"),QFt.forEach(t),tFr=r(HSe," (XLM model)"),HSe.forEach(t),aFr=i(ue),qM=n(ue,"LI",{});var USe=s(qM);O2e=n(USe,"STRONG",{});var WFt=s(O2e);nFr=r(WFt,"xlm-roberta"),WFt.forEach(t),sFr=r(USe," \u2014 "),uH=n(USe,"A",{href:!0});var HFt=s(uH);lFr=r(HFt,"TFXLMRobertaForMultipleChoice"),HFt.forEach(t),iFr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),dFr=i(ue),NM=n(ue,"LI",{});var JSe=s(NM);V2e=n(JSe,"STRONG",{});var UFt=s(V2e);cFr=r(UFt,"xlnet"),UFt.forEach(t),fFr=r(JSe," \u2014 "),_H=n(JSe,"A",{href:!0});var JFt=s(_H);mFr=r(JFt,"TFXLNetForMultipleChoice"),JFt.forEach(t),gFr=r(JSe," (XLNet model)"),JSe.forEach(t),ue.forEach(t),hFr=i(wl),T(jM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),sqe=i(f),ic=n(f,"H2",{class:!0});var mje=s(ic);DM=n(mje,"A",{id:!0,class:!0,href:!0});var YFt=s(DM);X2e=n(YFt,"SPAN",{});var KFt=s(X2e);T(bL.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),pFr=i(mje),z2e=n(mje,"SPAN",{});var ZFt=s(z2e);uFr=r(ZFt,"TFAutoModelForNextSentencePrediction"),ZFt.forEach(t),mje.forEach(t),lqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(vL.$$.fragment,Al),_Fr=i(Al),dc=n(Al,"P",{});var uZ=s(dc);bFr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bH=n(uZ,"A",{href:!0});var e6t=s(bH);vFr=r(e6t,"from_pretrained()"),e6t.forEach(t),FFr=r(uZ," class method or the "),vH=n(uZ,"A",{href:!0});var o6t=s(vH);TFr=r(o6t,"from_config()"),o6t.forEach(t),MFr=r(uZ,` class
method.`),uZ.forEach(t),EFr=i(Al),FL=n(Al,"P",{});var gje=s(FL);CFr=r(gje,"This class cannot be instantiated directly using "),Q2e=n(gje,"CODE",{});var r6t=s(Q2e);wFr=r(r6t,"__init__()"),r6t.forEach(t),AFr=r(gje," (throws an error)."),gje.forEach(t),yFr=i(Al),Rt=n(Al,"DIV",{class:!0});var fw=s(Rt);T(TL.$$.fragment,fw),LFr=i(fw),W2e=n(fw,"P",{});var t6t=s(W2e);xFr=r(t6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t6t.forEach(t),$Fr=i(fw),cc=n(fw,"P",{});var _Z=s(cc);kFr=r(_Z,`Note:
Loading a model from its configuration file does `),H2e=n(_Z,"STRONG",{});var a6t=s(H2e);SFr=r(a6t,"not"),a6t.forEach(t),RFr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(_Z,"A",{href:!0});var n6t=s(FH);BFr=r(n6t,"from_pretrained()"),n6t.forEach(t),PFr=r(_Z," to load the model weights."),_Z.forEach(t),IFr=i(fw),T(GM.$$.fragment,fw),fw.forEach(t),qFr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(ML.$$.fragment,yl),NFr=i(yl),U2e=n(yl,"P",{});var s6t=s(U2e);jFr=r(s6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),s6t.forEach(t),DFr=i(yl),ln=n(yl,"P",{});var mw=s(ln);GFr=r(mw,"The model class to instantiate is selected based on the "),J2e=n(mw,"CODE",{});var l6t=s(J2e);OFr=r(l6t,"model_type"),l6t.forEach(t),VFr=r(mw,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(mw,"CODE",{});var i6t=s(Y2e);XFr=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),zFr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(mw,"CODE",{});var d6t=s(K2e);QFr=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),WFr=r(mw,":"),mw.forEach(t),HFr=i(yl),EL=n(yl,"UL",{});var hje=s(EL);OM=n(hje,"LI",{});var YSe=s(OM);Z2e=n(YSe,"STRONG",{});var c6t=s(Z2e);UFr=r(c6t,"bert"),c6t.forEach(t),JFr=r(YSe," \u2014 "),TH=n(YSe,"A",{href:!0});var f6t=s(TH);YFr=r(f6t,"TFBertForNextSentencePrediction"),f6t.forEach(t),KFr=r(YSe," (BERT model)"),YSe.forEach(t),ZFr=i(hje),VM=n(hje,"LI",{});var KSe=s(VM);eve=n(KSe,"STRONG",{});var m6t=s(eve);e6r=r(m6t,"mobilebert"),m6t.forEach(t),o6r=r(KSe," \u2014 "),MH=n(KSe,"A",{href:!0});var g6t=s(MH);r6r=r(g6t,"TFMobileBertForNextSentencePrediction"),g6t.forEach(t),t6r=r(KSe," (MobileBERT model)"),KSe.forEach(t),hje.forEach(t),a6r=i(yl),T(XM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),iqe=i(f),fc=n(f,"H2",{class:!0});var pje=s(fc);zM=n(pje,"A",{id:!0,class:!0,href:!0});var h6t=s(zM);ove=n(h6t,"SPAN",{});var p6t=s(ove);T(CL.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),n6r=i(pje),rve=n(pje,"SPAN",{});var u6t=s(rve);s6r=r(u6t,"TFAutoModelForTableQuestionAnswering"),u6t.forEach(t),pje.forEach(t),dqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(wL.$$.fragment,Ll),l6r=i(Ll),mc=n(Ll,"P",{});var bZ=s(mc);i6r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EH=n(bZ,"A",{href:!0});var _6t=s(EH);d6r=r(_6t,"from_pretrained()"),_6t.forEach(t),c6r=r(bZ," class method or the "),CH=n(bZ,"A",{href:!0});var b6t=s(CH);f6r=r(b6t,"from_config()"),b6t.forEach(t),m6r=r(bZ,` class
method.`),bZ.forEach(t),g6r=i(Ll),AL=n(Ll,"P",{});var uje=s(AL);h6r=r(uje,"This class cannot be instantiated directly using "),tve=n(uje,"CODE",{});var v6t=s(tve);p6r=r(v6t,"__init__()"),v6t.forEach(t),u6r=r(uje," (throws an error)."),uje.forEach(t),_6r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var gw=s(Bt);T(yL.$$.fragment,gw),b6r=i(gw),ave=n(gw,"P",{});var F6t=s(ave);v6r=r(F6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F6t.forEach(t),F6r=i(gw),gc=n(gw,"P",{});var vZ=s(gc);T6r=r(vZ,`Note:
Loading a model from its configuration file does `),nve=n(vZ,"STRONG",{});var T6t=s(nve);M6r=r(T6t,"not"),T6t.forEach(t),E6r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(vZ,"A",{href:!0});var M6t=s(wH);C6r=r(M6t,"from_pretrained()"),M6t.forEach(t),w6r=r(vZ," to load the model weights."),vZ.forEach(t),A6r=i(gw),T(QM.$$.fragment,gw),gw.forEach(t),y6r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(LL.$$.fragment,xl),L6r=i(xl),sve=n(xl,"P",{});var E6t=s(sve);x6r=r(E6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E6t.forEach(t),$6r=i(xl),dn=n(xl,"P",{});var hw=s(dn);k6r=r(hw,"The model class to instantiate is selected based on the "),lve=n(hw,"CODE",{});var C6t=s(lve);S6r=r(C6t,"model_type"),C6t.forEach(t),R6r=r(hw,` property of the config object (either
passed as an argument or loaded from `),ive=n(hw,"CODE",{});var w6t=s(ive);B6r=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),P6r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(hw,"CODE",{});var A6t=s(dve);I6r=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),q6r=r(hw,":"),hw.forEach(t),N6r=i(xl),cve=n(xl,"UL",{});var y6t=s(cve);WM=n(y6t,"LI",{});var ZSe=s(WM);fve=n(ZSe,"STRONG",{});var L6t=s(fve);j6r=r(L6t,"tapas"),L6t.forEach(t),D6r=r(ZSe," \u2014 "),AH=n(ZSe,"A",{href:!0});var x6t=s(AH);G6r=r(x6t,"TFTapasForQuestionAnswering"),x6t.forEach(t),O6r=r(ZSe," (TAPAS model)"),ZSe.forEach(t),y6t.forEach(t),V6r=i(xl),T(HM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),cqe=i(f),hc=n(f,"H2",{class:!0});var _je=s(hc);UM=n(_je,"A",{id:!0,class:!0,href:!0});var $6t=s(UM);mve=n($6t,"SPAN",{});var k6t=s(mve);T(xL.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),X6r=i(_je),gve=n(_je,"SPAN",{});var S6t=s(gve);z6r=r(S6t,"TFAutoModelForTokenClassification"),S6t.forEach(t),_je.forEach(t),fqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T($L.$$.fragment,$l),Q6r=i($l),pc=n($l,"P",{});var FZ=s(pc);W6r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=n(FZ,"A",{href:!0});var R6t=s(yH);H6r=r(R6t,"from_pretrained()"),R6t.forEach(t),U6r=r(FZ," class method or the "),LH=n(FZ,"A",{href:!0});var B6t=s(LH);J6r=r(B6t,"from_config()"),B6t.forEach(t),Y6r=r(FZ,` class
method.`),FZ.forEach(t),K6r=i($l),kL=n($l,"P",{});var bje=s(kL);Z6r=r(bje,"This class cannot be instantiated directly using "),hve=n(bje,"CODE",{});var P6t=s(hve);eTr=r(P6t,"__init__()"),P6t.forEach(t),oTr=r(bje," (throws an error)."),bje.forEach(t),rTr=i($l),Pt=n($l,"DIV",{class:!0});var pw=s(Pt);T(SL.$$.fragment,pw),tTr=i(pw),pve=n(pw,"P",{});var I6t=s(pve);aTr=r(I6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I6t.forEach(t),nTr=i(pw),uc=n(pw,"P",{});var TZ=s(uc);sTr=r(TZ,`Note:
Loading a model from its configuration file does `),uve=n(TZ,"STRONG",{});var q6t=s(uve);lTr=r(q6t,"not"),q6t.forEach(t),iTr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(TZ,"A",{href:!0});var N6t=s(xH);dTr=r(N6t,"from_pretrained()"),N6t.forEach(t),cTr=r(TZ," to load the model weights."),TZ.forEach(t),fTr=i(pw),T(JM.$$.fragment,pw),pw.forEach(t),mTr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(RL.$$.fragment,kl),gTr=i(kl),_ve=n(kl,"P",{});var j6t=s(_ve);hTr=r(j6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j6t.forEach(t),pTr=i(kl),cn=n(kl,"P",{});var uw=s(cn);uTr=r(uw,"The model class to instantiate is selected based on the "),bve=n(uw,"CODE",{});var D6t=s(bve);_Tr=r(D6t,"model_type"),D6t.forEach(t),bTr=r(uw,` property of the config object (either
passed as an argument or loaded from `),vve=n(uw,"CODE",{});var G6t=s(vve);vTr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),FTr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(uw,"CODE",{});var O6t=s(Fve);TTr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),MTr=r(uw,":"),uw.forEach(t),ETr=i(kl),de=n(kl,"UL",{});var me=s(de);YM=n(me,"LI",{});var eRe=s(YM);Tve=n(eRe,"STRONG",{});var V6t=s(Tve);CTr=r(V6t,"albert"),V6t.forEach(t),wTr=r(eRe," \u2014 "),$H=n(eRe,"A",{href:!0});var X6t=s($H);ATr=r(X6t,"TFAlbertForTokenClassification"),X6t.forEach(t),yTr=r(eRe," (ALBERT model)"),eRe.forEach(t),LTr=i(me),KM=n(me,"LI",{});var oRe=s(KM);Mve=n(oRe,"STRONG",{});var z6t=s(Mve);xTr=r(z6t,"bert"),z6t.forEach(t),$Tr=r(oRe," \u2014 "),kH=n(oRe,"A",{href:!0});var Q6t=s(kH);kTr=r(Q6t,"TFBertForTokenClassification"),Q6t.forEach(t),STr=r(oRe," (BERT model)"),oRe.forEach(t),RTr=i(me),ZM=n(me,"LI",{});var rRe=s(ZM);Eve=n(rRe,"STRONG",{});var W6t=s(Eve);BTr=r(W6t,"camembert"),W6t.forEach(t),PTr=r(rRe," \u2014 "),SH=n(rRe,"A",{href:!0});var H6t=s(SH);ITr=r(H6t,"TFCamembertForTokenClassification"),H6t.forEach(t),qTr=r(rRe," (CamemBERT model)"),rRe.forEach(t),NTr=i(me),e4=n(me,"LI",{});var tRe=s(e4);Cve=n(tRe,"STRONG",{});var U6t=s(Cve);jTr=r(U6t,"convbert"),U6t.forEach(t),DTr=r(tRe," \u2014 "),RH=n(tRe,"A",{href:!0});var J6t=s(RH);GTr=r(J6t,"TFConvBertForTokenClassification"),J6t.forEach(t),OTr=r(tRe," (ConvBERT model)"),tRe.forEach(t),VTr=i(me),o4=n(me,"LI",{});var aRe=s(o4);wve=n(aRe,"STRONG",{});var Y6t=s(wve);XTr=r(Y6t,"deberta"),Y6t.forEach(t),zTr=r(aRe," \u2014 "),BH=n(aRe,"A",{href:!0});var K6t=s(BH);QTr=r(K6t,"TFDebertaForTokenClassification"),K6t.forEach(t),WTr=r(aRe," (DeBERTa model)"),aRe.forEach(t),HTr=i(me),r4=n(me,"LI",{});var nRe=s(r4);Ave=n(nRe,"STRONG",{});var Z6t=s(Ave);UTr=r(Z6t,"deberta-v2"),Z6t.forEach(t),JTr=r(nRe," \u2014 "),PH=n(nRe,"A",{href:!0});var eTt=s(PH);YTr=r(eTt,"TFDebertaV2ForTokenClassification"),eTt.forEach(t),KTr=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),ZTr=i(me),t4=n(me,"LI",{});var sRe=s(t4);yve=n(sRe,"STRONG",{});var oTt=s(yve);e9r=r(oTt,"distilbert"),oTt.forEach(t),o9r=r(sRe," \u2014 "),IH=n(sRe,"A",{href:!0});var rTt=s(IH);r9r=r(rTt,"TFDistilBertForTokenClassification"),rTt.forEach(t),t9r=r(sRe," (DistilBERT model)"),sRe.forEach(t),a9r=i(me),a4=n(me,"LI",{});var lRe=s(a4);Lve=n(lRe,"STRONG",{});var tTt=s(Lve);n9r=r(tTt,"electra"),tTt.forEach(t),s9r=r(lRe," \u2014 "),qH=n(lRe,"A",{href:!0});var aTt=s(qH);l9r=r(aTt,"TFElectraForTokenClassification"),aTt.forEach(t),i9r=r(lRe," (ELECTRA model)"),lRe.forEach(t),d9r=i(me),n4=n(me,"LI",{});var iRe=s(n4);xve=n(iRe,"STRONG",{});var nTt=s(xve);c9r=r(nTt,"flaubert"),nTt.forEach(t),f9r=r(iRe," \u2014 "),NH=n(iRe,"A",{href:!0});var sTt=s(NH);m9r=r(sTt,"TFFlaubertForTokenClassification"),sTt.forEach(t),g9r=r(iRe," (FlauBERT model)"),iRe.forEach(t),h9r=i(me),s4=n(me,"LI",{});var dRe=s(s4);$ve=n(dRe,"STRONG",{});var lTt=s($ve);p9r=r(lTt,"funnel"),lTt.forEach(t),u9r=r(dRe," \u2014 "),jH=n(dRe,"A",{href:!0});var iTt=s(jH);_9r=r(iTt,"TFFunnelForTokenClassification"),iTt.forEach(t),b9r=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),v9r=i(me),l4=n(me,"LI",{});var cRe=s(l4);kve=n(cRe,"STRONG",{});var dTt=s(kve);F9r=r(dTt,"layoutlm"),dTt.forEach(t),T9r=r(cRe," \u2014 "),DH=n(cRe,"A",{href:!0});var cTt=s(DH);M9r=r(cTt,"TFLayoutLMForTokenClassification"),cTt.forEach(t),E9r=r(cRe," (LayoutLM model)"),cRe.forEach(t),C9r=i(me),i4=n(me,"LI",{});var fRe=s(i4);Sve=n(fRe,"STRONG",{});var fTt=s(Sve);w9r=r(fTt,"longformer"),fTt.forEach(t),A9r=r(fRe," \u2014 "),GH=n(fRe,"A",{href:!0});var mTt=s(GH);y9r=r(mTt,"TFLongformerForTokenClassification"),mTt.forEach(t),L9r=r(fRe," (Longformer model)"),fRe.forEach(t),x9r=i(me),d4=n(me,"LI",{});var mRe=s(d4);Rve=n(mRe,"STRONG",{});var gTt=s(Rve);$9r=r(gTt,"mobilebert"),gTt.forEach(t),k9r=r(mRe," \u2014 "),OH=n(mRe,"A",{href:!0});var hTt=s(OH);S9r=r(hTt,"TFMobileBertForTokenClassification"),hTt.forEach(t),R9r=r(mRe," (MobileBERT model)"),mRe.forEach(t),B9r=i(me),c4=n(me,"LI",{});var gRe=s(c4);Bve=n(gRe,"STRONG",{});var pTt=s(Bve);P9r=r(pTt,"mpnet"),pTt.forEach(t),I9r=r(gRe," \u2014 "),VH=n(gRe,"A",{href:!0});var uTt=s(VH);q9r=r(uTt,"TFMPNetForTokenClassification"),uTt.forEach(t),N9r=r(gRe," (MPNet model)"),gRe.forEach(t),j9r=i(me),f4=n(me,"LI",{});var hRe=s(f4);Pve=n(hRe,"STRONG",{});var _Tt=s(Pve);D9r=r(_Tt,"rembert"),_Tt.forEach(t),G9r=r(hRe," \u2014 "),XH=n(hRe,"A",{href:!0});var bTt=s(XH);O9r=r(bTt,"TFRemBertForTokenClassification"),bTt.forEach(t),V9r=r(hRe," (RemBERT model)"),hRe.forEach(t),X9r=i(me),m4=n(me,"LI",{});var pRe=s(m4);Ive=n(pRe,"STRONG",{});var vTt=s(Ive);z9r=r(vTt,"roberta"),vTt.forEach(t),Q9r=r(pRe," \u2014 "),zH=n(pRe,"A",{href:!0});var FTt=s(zH);W9r=r(FTt,"TFRobertaForTokenClassification"),FTt.forEach(t),H9r=r(pRe," (RoBERTa model)"),pRe.forEach(t),U9r=i(me),g4=n(me,"LI",{});var uRe=s(g4);qve=n(uRe,"STRONG",{});var TTt=s(qve);J9r=r(TTt,"roformer"),TTt.forEach(t),Y9r=r(uRe," \u2014 "),QH=n(uRe,"A",{href:!0});var MTt=s(QH);K9r=r(MTt,"TFRoFormerForTokenClassification"),MTt.forEach(t),Z9r=r(uRe," (RoFormer model)"),uRe.forEach(t),eMr=i(me),h4=n(me,"LI",{});var _Re=s(h4);Nve=n(_Re,"STRONG",{});var ETt=s(Nve);oMr=r(ETt,"xlm"),ETt.forEach(t),rMr=r(_Re," \u2014 "),WH=n(_Re,"A",{href:!0});var CTt=s(WH);tMr=r(CTt,"TFXLMForTokenClassification"),CTt.forEach(t),aMr=r(_Re," (XLM model)"),_Re.forEach(t),nMr=i(me),p4=n(me,"LI",{});var bRe=s(p4);jve=n(bRe,"STRONG",{});var wTt=s(jve);sMr=r(wTt,"xlm-roberta"),wTt.forEach(t),lMr=r(bRe," \u2014 "),HH=n(bRe,"A",{href:!0});var ATt=s(HH);iMr=r(ATt,"TFXLMRobertaForTokenClassification"),ATt.forEach(t),dMr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),cMr=i(me),u4=n(me,"LI",{});var vRe=s(u4);Dve=n(vRe,"STRONG",{});var yTt=s(Dve);fMr=r(yTt,"xlnet"),yTt.forEach(t),mMr=r(vRe," \u2014 "),UH=n(vRe,"A",{href:!0});var LTt=s(UH);gMr=r(LTt,"TFXLNetForTokenClassification"),LTt.forEach(t),hMr=r(vRe," (XLNet model)"),vRe.forEach(t),me.forEach(t),pMr=i(kl),T(_4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),mqe=i(f),_c=n(f,"H2",{class:!0});var vje=s(_c);b4=n(vje,"A",{id:!0,class:!0,href:!0});var xTt=s(b4);Gve=n(xTt,"SPAN",{});var $Tt=s(Gve);T(BL.$$.fragment,$Tt),$Tt.forEach(t),xTt.forEach(t),uMr=i(vje),Ove=n(vje,"SPAN",{});var kTt=s(Ove);_Mr=r(kTt,"TFAutoModelForQuestionAnswering"),kTt.forEach(t),vje.forEach(t),gqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(PL.$$.fragment,Sl),bMr=i(Sl),bc=n(Sl,"P",{});var MZ=s(bc);vMr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JH=n(MZ,"A",{href:!0});var STt=s(JH);FMr=r(STt,"from_pretrained()"),STt.forEach(t),TMr=r(MZ," class method or the "),YH=n(MZ,"A",{href:!0});var RTt=s(YH);MMr=r(RTt,"from_config()"),RTt.forEach(t),EMr=r(MZ,` class
method.`),MZ.forEach(t),CMr=i(Sl),IL=n(Sl,"P",{});var Fje=s(IL);wMr=r(Fje,"This class cannot be instantiated directly using "),Vve=n(Fje,"CODE",{});var BTt=s(Vve);AMr=r(BTt,"__init__()"),BTt.forEach(t),yMr=r(Fje," (throws an error)."),Fje.forEach(t),LMr=i(Sl),It=n(Sl,"DIV",{class:!0});var _w=s(It);T(qL.$$.fragment,_w),xMr=i(_w),Xve=n(_w,"P",{});var PTt=s(Xve);$Mr=r(PTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PTt.forEach(t),kMr=i(_w),vc=n(_w,"P",{});var EZ=s(vc);SMr=r(EZ,`Note:
Loading a model from its configuration file does `),zve=n(EZ,"STRONG",{});var ITt=s(zve);RMr=r(ITt,"not"),ITt.forEach(t),BMr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(EZ,"A",{href:!0});var qTt=s(KH);PMr=r(qTt,"from_pretrained()"),qTt.forEach(t),IMr=r(EZ," to load the model weights."),EZ.forEach(t),qMr=i(_w),T(v4.$$.fragment,_w),_w.forEach(t),NMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(NL.$$.fragment,Rl),jMr=i(Rl),Qve=n(Rl,"P",{});var NTt=s(Qve);DMr=r(NTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NTt.forEach(t),GMr=i(Rl),fn=n(Rl,"P",{});var bw=s(fn);OMr=r(bw,"The model class to instantiate is selected based on the "),Wve=n(bw,"CODE",{});var jTt=s(Wve);VMr=r(jTt,"model_type"),jTt.forEach(t),XMr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Hve=n(bw,"CODE",{});var DTt=s(Hve);zMr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),QMr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(bw,"CODE",{});var GTt=s(Uve);WMr=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),HMr=r(bw,":"),bw.forEach(t),UMr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);F4=n(ge,"LI",{});var FRe=s(F4);Jve=n(FRe,"STRONG",{});var OTt=s(Jve);JMr=r(OTt,"albert"),OTt.forEach(t),YMr=r(FRe," \u2014 "),ZH=n(FRe,"A",{href:!0});var VTt=s(ZH);KMr=r(VTt,"TFAlbertForQuestionAnswering"),VTt.forEach(t),ZMr=r(FRe," (ALBERT model)"),FRe.forEach(t),e4r=i(ge),T4=n(ge,"LI",{});var TRe=s(T4);Yve=n(TRe,"STRONG",{});var XTt=s(Yve);o4r=r(XTt,"bert"),XTt.forEach(t),r4r=r(TRe," \u2014 "),eU=n(TRe,"A",{href:!0});var zTt=s(eU);t4r=r(zTt,"TFBertForQuestionAnswering"),zTt.forEach(t),a4r=r(TRe," (BERT model)"),TRe.forEach(t),n4r=i(ge),M4=n(ge,"LI",{});var MRe=s(M4);Kve=n(MRe,"STRONG",{});var QTt=s(Kve);s4r=r(QTt,"camembert"),QTt.forEach(t),l4r=r(MRe," \u2014 "),oU=n(MRe,"A",{href:!0});var WTt=s(oU);i4r=r(WTt,"TFCamembertForQuestionAnswering"),WTt.forEach(t),d4r=r(MRe," (CamemBERT model)"),MRe.forEach(t),c4r=i(ge),E4=n(ge,"LI",{});var ERe=s(E4);Zve=n(ERe,"STRONG",{});var HTt=s(Zve);f4r=r(HTt,"convbert"),HTt.forEach(t),m4r=r(ERe," \u2014 "),rU=n(ERe,"A",{href:!0});var UTt=s(rU);g4r=r(UTt,"TFConvBertForQuestionAnswering"),UTt.forEach(t),h4r=r(ERe," (ConvBERT model)"),ERe.forEach(t),p4r=i(ge),C4=n(ge,"LI",{});var CRe=s(C4);eFe=n(CRe,"STRONG",{});var JTt=s(eFe);u4r=r(JTt,"deberta"),JTt.forEach(t),_4r=r(CRe," \u2014 "),tU=n(CRe,"A",{href:!0});var YTt=s(tU);b4r=r(YTt,"TFDebertaForQuestionAnswering"),YTt.forEach(t),v4r=r(CRe," (DeBERTa model)"),CRe.forEach(t),F4r=i(ge),w4=n(ge,"LI",{});var wRe=s(w4);oFe=n(wRe,"STRONG",{});var KTt=s(oFe);T4r=r(KTt,"deberta-v2"),KTt.forEach(t),M4r=r(wRe," \u2014 "),aU=n(wRe,"A",{href:!0});var ZTt=s(aU);E4r=r(ZTt,"TFDebertaV2ForQuestionAnswering"),ZTt.forEach(t),C4r=r(wRe," (DeBERTa-v2 model)"),wRe.forEach(t),w4r=i(ge),A4=n(ge,"LI",{});var ARe=s(A4);rFe=n(ARe,"STRONG",{});var e9t=s(rFe);A4r=r(e9t,"distilbert"),e9t.forEach(t),y4r=r(ARe," \u2014 "),nU=n(ARe,"A",{href:!0});var o9t=s(nU);L4r=r(o9t,"TFDistilBertForQuestionAnswering"),o9t.forEach(t),x4r=r(ARe," (DistilBERT model)"),ARe.forEach(t),$4r=i(ge),y4=n(ge,"LI",{});var yRe=s(y4);tFe=n(yRe,"STRONG",{});var r9t=s(tFe);k4r=r(r9t,"electra"),r9t.forEach(t),S4r=r(yRe," \u2014 "),sU=n(yRe,"A",{href:!0});var t9t=s(sU);R4r=r(t9t,"TFElectraForQuestionAnswering"),t9t.forEach(t),B4r=r(yRe," (ELECTRA model)"),yRe.forEach(t),P4r=i(ge),L4=n(ge,"LI",{});var LRe=s(L4);aFe=n(LRe,"STRONG",{});var a9t=s(aFe);I4r=r(a9t,"flaubert"),a9t.forEach(t),q4r=r(LRe," \u2014 "),lU=n(LRe,"A",{href:!0});var n9t=s(lU);N4r=r(n9t,"TFFlaubertForQuestionAnsweringSimple"),n9t.forEach(t),j4r=r(LRe," (FlauBERT model)"),LRe.forEach(t),D4r=i(ge),x4=n(ge,"LI",{});var xRe=s(x4);nFe=n(xRe,"STRONG",{});var s9t=s(nFe);G4r=r(s9t,"funnel"),s9t.forEach(t),O4r=r(xRe," \u2014 "),iU=n(xRe,"A",{href:!0});var l9t=s(iU);V4r=r(l9t,"TFFunnelForQuestionAnswering"),l9t.forEach(t),X4r=r(xRe," (Funnel Transformer model)"),xRe.forEach(t),z4r=i(ge),$4=n(ge,"LI",{});var $Re=s($4);sFe=n($Re,"STRONG",{});var i9t=s(sFe);Q4r=r(i9t,"gptj"),i9t.forEach(t),W4r=r($Re," \u2014 "),dU=n($Re,"A",{href:!0});var d9t=s(dU);H4r=r(d9t,"TFGPTJForQuestionAnswering"),d9t.forEach(t),U4r=r($Re," (GPT-J model)"),$Re.forEach(t),J4r=i(ge),k4=n(ge,"LI",{});var kRe=s(k4);lFe=n(kRe,"STRONG",{});var c9t=s(lFe);Y4r=r(c9t,"longformer"),c9t.forEach(t),K4r=r(kRe," \u2014 "),cU=n(kRe,"A",{href:!0});var f9t=s(cU);Z4r=r(f9t,"TFLongformerForQuestionAnswering"),f9t.forEach(t),eEr=r(kRe," (Longformer model)"),kRe.forEach(t),oEr=i(ge),S4=n(ge,"LI",{});var SRe=s(S4);iFe=n(SRe,"STRONG",{});var m9t=s(iFe);rEr=r(m9t,"mobilebert"),m9t.forEach(t),tEr=r(SRe," \u2014 "),fU=n(SRe,"A",{href:!0});var g9t=s(fU);aEr=r(g9t,"TFMobileBertForQuestionAnswering"),g9t.forEach(t),nEr=r(SRe," (MobileBERT model)"),SRe.forEach(t),sEr=i(ge),R4=n(ge,"LI",{});var RRe=s(R4);dFe=n(RRe,"STRONG",{});var h9t=s(dFe);lEr=r(h9t,"mpnet"),h9t.forEach(t),iEr=r(RRe," \u2014 "),mU=n(RRe,"A",{href:!0});var p9t=s(mU);dEr=r(p9t,"TFMPNetForQuestionAnswering"),p9t.forEach(t),cEr=r(RRe," (MPNet model)"),RRe.forEach(t),fEr=i(ge),B4=n(ge,"LI",{});var BRe=s(B4);cFe=n(BRe,"STRONG",{});var u9t=s(cFe);mEr=r(u9t,"rembert"),u9t.forEach(t),gEr=r(BRe," \u2014 "),gU=n(BRe,"A",{href:!0});var _9t=s(gU);hEr=r(_9t,"TFRemBertForQuestionAnswering"),_9t.forEach(t),pEr=r(BRe," (RemBERT model)"),BRe.forEach(t),uEr=i(ge),P4=n(ge,"LI",{});var PRe=s(P4);fFe=n(PRe,"STRONG",{});var b9t=s(fFe);_Er=r(b9t,"roberta"),b9t.forEach(t),bEr=r(PRe," \u2014 "),hU=n(PRe,"A",{href:!0});var v9t=s(hU);vEr=r(v9t,"TFRobertaForQuestionAnswering"),v9t.forEach(t),FEr=r(PRe," (RoBERTa model)"),PRe.forEach(t),TEr=i(ge),I4=n(ge,"LI",{});var IRe=s(I4);mFe=n(IRe,"STRONG",{});var F9t=s(mFe);MEr=r(F9t,"roformer"),F9t.forEach(t),EEr=r(IRe," \u2014 "),pU=n(IRe,"A",{href:!0});var T9t=s(pU);CEr=r(T9t,"TFRoFormerForQuestionAnswering"),T9t.forEach(t),wEr=r(IRe," (RoFormer model)"),IRe.forEach(t),AEr=i(ge),q4=n(ge,"LI",{});var qRe=s(q4);gFe=n(qRe,"STRONG",{});var M9t=s(gFe);yEr=r(M9t,"xlm"),M9t.forEach(t),LEr=r(qRe," \u2014 "),uU=n(qRe,"A",{href:!0});var E9t=s(uU);xEr=r(E9t,"TFXLMForQuestionAnsweringSimple"),E9t.forEach(t),$Er=r(qRe," (XLM model)"),qRe.forEach(t),kEr=i(ge),N4=n(ge,"LI",{});var NRe=s(N4);hFe=n(NRe,"STRONG",{});var C9t=s(hFe);SEr=r(C9t,"xlm-roberta"),C9t.forEach(t),REr=r(NRe," \u2014 "),_U=n(NRe,"A",{href:!0});var w9t=s(_U);BEr=r(w9t,"TFXLMRobertaForQuestionAnswering"),w9t.forEach(t),PEr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),IEr=i(ge),j4=n(ge,"LI",{});var jRe=s(j4);pFe=n(jRe,"STRONG",{});var A9t=s(pFe);qEr=r(A9t,"xlnet"),A9t.forEach(t),NEr=r(jRe," \u2014 "),bU=n(jRe,"A",{href:!0});var y9t=s(bU);jEr=r(y9t,"TFXLNetForQuestionAnsweringSimple"),y9t.forEach(t),DEr=r(jRe," (XLNet model)"),jRe.forEach(t),ge.forEach(t),GEr=i(Rl),T(D4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),hqe=i(f),Fc=n(f,"H2",{class:!0});var Tje=s(Fc);G4=n(Tje,"A",{id:!0,class:!0,href:!0});var L9t=s(G4);uFe=n(L9t,"SPAN",{});var x9t=s(uFe);T(jL.$$.fragment,x9t),x9t.forEach(t),L9t.forEach(t),OEr=i(Tje),_Fe=n(Tje,"SPAN",{});var $9t=s(_Fe);VEr=r($9t,"TFAutoModelForVision2Seq"),$9t.forEach(t),Tje.forEach(t),pqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(DL.$$.fragment,Bl),XEr=i(Bl),Tc=n(Bl,"P",{});var CZ=s(Tc);zEr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=n(CZ,"A",{href:!0});var k9t=s(vU);QEr=r(k9t,"from_pretrained()"),k9t.forEach(t),WEr=r(CZ," class method or the "),FU=n(CZ,"A",{href:!0});var S9t=s(FU);HEr=r(S9t,"from_config()"),S9t.forEach(t),UEr=r(CZ,` class
method.`),CZ.forEach(t),JEr=i(Bl),GL=n(Bl,"P",{});var Mje=s(GL);YEr=r(Mje,"This class cannot be instantiated directly using "),bFe=n(Mje,"CODE",{});var R9t=s(bFe);KEr=r(R9t,"__init__()"),R9t.forEach(t),ZEr=r(Mje," (throws an error)."),Mje.forEach(t),e5r=i(Bl),qt=n(Bl,"DIV",{class:!0});var vw=s(qt);T(OL.$$.fragment,vw),o5r=i(vw),vFe=n(vw,"P",{});var B9t=s(vFe);r5r=r(B9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),B9t.forEach(t),t5r=i(vw),Mc=n(vw,"P",{});var wZ=s(Mc);a5r=r(wZ,`Note:
Loading a model from its configuration file does `),FFe=n(wZ,"STRONG",{});var P9t=s(FFe);n5r=r(P9t,"not"),P9t.forEach(t),s5r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(wZ,"A",{href:!0});var I9t=s(TU);l5r=r(I9t,"from_pretrained()"),I9t.forEach(t),i5r=r(wZ," to load the model weights."),wZ.forEach(t),d5r=i(vw),T(O4.$$.fragment,vw),vw.forEach(t),c5r=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(VL.$$.fragment,Pl),f5r=i(Pl),TFe=n(Pl,"P",{});var q9t=s(TFe);m5r=r(q9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),q9t.forEach(t),g5r=i(Pl),mn=n(Pl,"P",{});var Fw=s(mn);h5r=r(Fw,"The model class to instantiate is selected based on the "),MFe=n(Fw,"CODE",{});var N9t=s(MFe);p5r=r(N9t,"model_type"),N9t.forEach(t),u5r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),EFe=n(Fw,"CODE",{});var j9t=s(EFe);_5r=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),b5r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(Fw,"CODE",{});var D9t=s(CFe);v5r=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),F5r=r(Fw,":"),Fw.forEach(t),T5r=i(Pl),wFe=n(Pl,"UL",{});var G9t=s(wFe);V4=n(G9t,"LI",{});var DRe=s(V4);AFe=n(DRe,"STRONG",{});var O9t=s(AFe);M5r=r(O9t,"vision-encoder-decoder"),O9t.forEach(t),E5r=r(DRe," \u2014 "),MU=n(DRe,"A",{href:!0});var V9t=s(MU);C5r=r(V9t,"TFVisionEncoderDecoderModel"),V9t.forEach(t),w5r=r(DRe," (Vision Encoder decoder model)"),DRe.forEach(t),G9t.forEach(t),A5r=i(Pl),T(X4.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),uqe=i(f),Ec=n(f,"H2",{class:!0});var Eje=s(Ec);z4=n(Eje,"A",{id:!0,class:!0,href:!0});var X9t=s(z4);yFe=n(X9t,"SPAN",{});var z9t=s(yFe);T(XL.$$.fragment,z9t),z9t.forEach(t),X9t.forEach(t),y5r=i(Eje),LFe=n(Eje,"SPAN",{});var Q9t=s(LFe);L5r=r(Q9t,"TFAutoModelForSpeechSeq2Seq"),Q9t.forEach(t),Eje.forEach(t),_qe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(zL.$$.fragment,Il),x5r=i(Il),Cc=n(Il,"P",{});var AZ=s(Cc);$5r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EU=n(AZ,"A",{href:!0});var W9t=s(EU);k5r=r(W9t,"from_pretrained()"),W9t.forEach(t),S5r=r(AZ," class method or the "),CU=n(AZ,"A",{href:!0});var H9t=s(CU);R5r=r(H9t,"from_config()"),H9t.forEach(t),B5r=r(AZ,` class
method.`),AZ.forEach(t),P5r=i(Il),QL=n(Il,"P",{});var Cje=s(QL);I5r=r(Cje,"This class cannot be instantiated directly using "),xFe=n(Cje,"CODE",{});var U9t=s(xFe);q5r=r(U9t,"__init__()"),U9t.forEach(t),N5r=r(Cje," (throws an error)."),Cje.forEach(t),j5r=i(Il),Nt=n(Il,"DIV",{class:!0});var Tw=s(Nt);T(WL.$$.fragment,Tw),D5r=i(Tw),$Fe=n(Tw,"P",{});var J9t=s($Fe);G5r=r(J9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),J9t.forEach(t),O5r=i(Tw),wc=n(Tw,"P",{});var yZ=s(wc);V5r=r(yZ,`Note:
Loading a model from its configuration file does `),kFe=n(yZ,"STRONG",{});var Y9t=s(kFe);X5r=r(Y9t,"not"),Y9t.forEach(t),z5r=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(yZ,"A",{href:!0});var K9t=s(wU);Q5r=r(K9t,"from_pretrained()"),K9t.forEach(t),W5r=r(yZ," to load the model weights."),yZ.forEach(t),H5r=i(Tw),T(Q4.$$.fragment,Tw),Tw.forEach(t),U5r=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(HL.$$.fragment,ql),J5r=i(ql),SFe=n(ql,"P",{});var Z9t=s(SFe);Y5r=r(Z9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Z9t.forEach(t),K5r=i(ql),gn=n(ql,"P",{});var Mw=s(gn);Z5r=r(Mw,"The model class to instantiate is selected based on the "),RFe=n(Mw,"CODE",{});var eMt=s(RFe);eCr=r(eMt,"model_type"),eMt.forEach(t),oCr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),BFe=n(Mw,"CODE",{});var oMt=s(BFe);rCr=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),tCr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(Mw,"CODE",{});var rMt=s(PFe);aCr=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),nCr=r(Mw,":"),Mw.forEach(t),sCr=i(ql),IFe=n(ql,"UL",{});var tMt=s(IFe);W4=n(tMt,"LI",{});var GRe=s(W4);qFe=n(GRe,"STRONG",{});var aMt=s(qFe);lCr=r(aMt,"speech_to_text"),aMt.forEach(t),iCr=r(GRe," \u2014 "),AU=n(GRe,"A",{href:!0});var nMt=s(AU);dCr=r(nMt,"TFSpeech2TextForConditionalGeneration"),nMt.forEach(t),cCr=r(GRe," (Speech2Text model)"),GRe.forEach(t),tMt.forEach(t),fCr=i(ql),T(H4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),bqe=i(f),Ac=n(f,"H2",{class:!0});var wje=s(Ac);U4=n(wje,"A",{id:!0,class:!0,href:!0});var sMt=s(U4);NFe=n(sMt,"SPAN",{});var lMt=s(NFe);T(UL.$$.fragment,lMt),lMt.forEach(t),sMt.forEach(t),mCr=i(wje),jFe=n(wje,"SPAN",{});var iMt=s(jFe);gCr=r(iMt,"FlaxAutoModel"),iMt.forEach(t),wje.forEach(t),vqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(JL.$$.fragment,Nl),hCr=i(Nl),yc=n(Nl,"P",{});var LZ=s(yc);pCr=r(LZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yU=n(LZ,"A",{href:!0});var dMt=s(yU);uCr=r(dMt,"from_pretrained()"),dMt.forEach(t),_Cr=r(LZ," class method or the "),LU=n(LZ,"A",{href:!0});var cMt=s(LU);bCr=r(cMt,"from_config()"),cMt.forEach(t),vCr=r(LZ,` class
method.`),LZ.forEach(t),FCr=i(Nl),YL=n(Nl,"P",{});var Aje=s(YL);TCr=r(Aje,"This class cannot be instantiated directly using "),DFe=n(Aje,"CODE",{});var fMt=s(DFe);MCr=r(fMt,"__init__()"),fMt.forEach(t),ECr=r(Aje," (throws an error)."),Aje.forEach(t),CCr=i(Nl),jt=n(Nl,"DIV",{class:!0});var Ew=s(jt);T(KL.$$.fragment,Ew),wCr=i(Ew),GFe=n(Ew,"P",{});var mMt=s(GFe);ACr=r(mMt,"Instantiates one of the base model classes of the library from a configuration."),mMt.forEach(t),yCr=i(Ew),Lc=n(Ew,"P",{});var xZ=s(Lc);LCr=r(xZ,`Note:
Loading a model from its configuration file does `),OFe=n(xZ,"STRONG",{});var gMt=s(OFe);xCr=r(gMt,"not"),gMt.forEach(t),$Cr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(xZ,"A",{href:!0});var hMt=s(xU);kCr=r(hMt,"from_pretrained()"),hMt.forEach(t),SCr=r(xZ," to load the model weights."),xZ.forEach(t),RCr=i(Ew),T(J4.$$.fragment,Ew),Ew.forEach(t),BCr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(ZL.$$.fragment,jl),PCr=i(jl),VFe=n(jl,"P",{});var pMt=s(VFe);ICr=r(pMt,"Instantiate one of the base model classes of the library from a pretrained model."),pMt.forEach(t),qCr=i(jl),hn=n(jl,"P",{});var Cw=s(hn);NCr=r(Cw,"The model class to instantiate is selected based on the "),XFe=n(Cw,"CODE",{});var uMt=s(XFe);jCr=r(uMt,"model_type"),uMt.forEach(t),DCr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),zFe=n(Cw,"CODE",{});var _Mt=s(zFe);GCr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),OCr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(Cw,"CODE",{});var bMt=s(QFe);VCr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),XCr=r(Cw,":"),Cw.forEach(t),zCr=i(jl),re=n(jl,"UL",{});var ne=s(re);Y4=n(ne,"LI",{});var ORe=s(Y4);WFe=n(ORe,"STRONG",{});var vMt=s(WFe);QCr=r(vMt,"albert"),vMt.forEach(t),WCr=r(ORe," \u2014 "),$U=n(ORe,"A",{href:!0});var FMt=s($U);HCr=r(FMt,"FlaxAlbertModel"),FMt.forEach(t),UCr=r(ORe," (ALBERT model)"),ORe.forEach(t),JCr=i(ne),K4=n(ne,"LI",{});var VRe=s(K4);HFe=n(VRe,"STRONG",{});var TMt=s(HFe);YCr=r(TMt,"bart"),TMt.forEach(t),KCr=r(VRe," \u2014 "),kU=n(VRe,"A",{href:!0});var MMt=s(kU);ZCr=r(MMt,"FlaxBartModel"),MMt.forEach(t),e3r=r(VRe," (BART model)"),VRe.forEach(t),o3r=i(ne),Z4=n(ne,"LI",{});var XRe=s(Z4);UFe=n(XRe,"STRONG",{});var EMt=s(UFe);r3r=r(EMt,"beit"),EMt.forEach(t),t3r=r(XRe," \u2014 "),SU=n(XRe,"A",{href:!0});var CMt=s(SU);a3r=r(CMt,"FlaxBeitModel"),CMt.forEach(t),n3r=r(XRe," (BEiT model)"),XRe.forEach(t),s3r=i(ne),eE=n(ne,"LI",{});var zRe=s(eE);JFe=n(zRe,"STRONG",{});var wMt=s(JFe);l3r=r(wMt,"bert"),wMt.forEach(t),i3r=r(zRe," \u2014 "),RU=n(zRe,"A",{href:!0});var AMt=s(RU);d3r=r(AMt,"FlaxBertModel"),AMt.forEach(t),c3r=r(zRe," (BERT model)"),zRe.forEach(t),f3r=i(ne),oE=n(ne,"LI",{});var QRe=s(oE);YFe=n(QRe,"STRONG",{});var yMt=s(YFe);m3r=r(yMt,"big_bird"),yMt.forEach(t),g3r=r(QRe," \u2014 "),BU=n(QRe,"A",{href:!0});var LMt=s(BU);h3r=r(LMt,"FlaxBigBirdModel"),LMt.forEach(t),p3r=r(QRe," (BigBird model)"),QRe.forEach(t),u3r=i(ne),rE=n(ne,"LI",{});var WRe=s(rE);KFe=n(WRe,"STRONG",{});var xMt=s(KFe);_3r=r(xMt,"blenderbot"),xMt.forEach(t),b3r=r(WRe," \u2014 "),PU=n(WRe,"A",{href:!0});var $Mt=s(PU);v3r=r($Mt,"FlaxBlenderbotModel"),$Mt.forEach(t),F3r=r(WRe," (Blenderbot model)"),WRe.forEach(t),T3r=i(ne),tE=n(ne,"LI",{});var HRe=s(tE);ZFe=n(HRe,"STRONG",{});var kMt=s(ZFe);M3r=r(kMt,"blenderbot-small"),kMt.forEach(t),E3r=r(HRe," \u2014 "),IU=n(HRe,"A",{href:!0});var SMt=s(IU);C3r=r(SMt,"FlaxBlenderbotSmallModel"),SMt.forEach(t),w3r=r(HRe," (BlenderbotSmall model)"),HRe.forEach(t),A3r=i(ne),aE=n(ne,"LI",{});var URe=s(aE);e6e=n(URe,"STRONG",{});var RMt=s(e6e);y3r=r(RMt,"clip"),RMt.forEach(t),L3r=r(URe," \u2014 "),qU=n(URe,"A",{href:!0});var BMt=s(qU);x3r=r(BMt,"FlaxCLIPModel"),BMt.forEach(t),$3r=r(URe," (CLIP model)"),URe.forEach(t),k3r=i(ne),nE=n(ne,"LI",{});var JRe=s(nE);o6e=n(JRe,"STRONG",{});var PMt=s(o6e);S3r=r(PMt,"distilbert"),PMt.forEach(t),R3r=r(JRe," \u2014 "),NU=n(JRe,"A",{href:!0});var IMt=s(NU);B3r=r(IMt,"FlaxDistilBertModel"),IMt.forEach(t),P3r=r(JRe," (DistilBERT model)"),JRe.forEach(t),I3r=i(ne),sE=n(ne,"LI",{});var YRe=s(sE);r6e=n(YRe,"STRONG",{});var qMt=s(r6e);q3r=r(qMt,"electra"),qMt.forEach(t),N3r=r(YRe," \u2014 "),jU=n(YRe,"A",{href:!0});var NMt=s(jU);j3r=r(NMt,"FlaxElectraModel"),NMt.forEach(t),D3r=r(YRe," (ELECTRA model)"),YRe.forEach(t),G3r=i(ne),lE=n(ne,"LI",{});var KRe=s(lE);t6e=n(KRe,"STRONG",{});var jMt=s(t6e);O3r=r(jMt,"gpt2"),jMt.forEach(t),V3r=r(KRe," \u2014 "),DU=n(KRe,"A",{href:!0});var DMt=s(DU);X3r=r(DMt,"FlaxGPT2Model"),DMt.forEach(t),z3r=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),Q3r=i(ne),iE=n(ne,"LI",{});var ZRe=s(iE);a6e=n(ZRe,"STRONG",{});var GMt=s(a6e);W3r=r(GMt,"gpt_neo"),GMt.forEach(t),H3r=r(ZRe," \u2014 "),GU=n(ZRe,"A",{href:!0});var OMt=s(GU);U3r=r(OMt,"FlaxGPTNeoModel"),OMt.forEach(t),J3r=r(ZRe," (GPT Neo model)"),ZRe.forEach(t),Y3r=i(ne),dE=n(ne,"LI",{});var eBe=s(dE);n6e=n(eBe,"STRONG",{});var VMt=s(n6e);K3r=r(VMt,"gptj"),VMt.forEach(t),Z3r=r(eBe," \u2014 "),OU=n(eBe,"A",{href:!0});var XMt=s(OU);ewr=r(XMt,"FlaxGPTJModel"),XMt.forEach(t),owr=r(eBe," (GPT-J model)"),eBe.forEach(t),rwr=i(ne),cE=n(ne,"LI",{});var oBe=s(cE);s6e=n(oBe,"STRONG",{});var zMt=s(s6e);twr=r(zMt,"marian"),zMt.forEach(t),awr=r(oBe," \u2014 "),VU=n(oBe,"A",{href:!0});var QMt=s(VU);nwr=r(QMt,"FlaxMarianModel"),QMt.forEach(t),swr=r(oBe," (Marian model)"),oBe.forEach(t),lwr=i(ne),fE=n(ne,"LI",{});var rBe=s(fE);l6e=n(rBe,"STRONG",{});var WMt=s(l6e);iwr=r(WMt,"mbart"),WMt.forEach(t),dwr=r(rBe," \u2014 "),XU=n(rBe,"A",{href:!0});var HMt=s(XU);cwr=r(HMt,"FlaxMBartModel"),HMt.forEach(t),fwr=r(rBe," (mBART model)"),rBe.forEach(t),mwr=i(ne),mE=n(ne,"LI",{});var tBe=s(mE);i6e=n(tBe,"STRONG",{});var UMt=s(i6e);gwr=r(UMt,"mt5"),UMt.forEach(t),hwr=r(tBe," \u2014 "),zU=n(tBe,"A",{href:!0});var JMt=s(zU);pwr=r(JMt,"FlaxMT5Model"),JMt.forEach(t),uwr=r(tBe," (mT5 model)"),tBe.forEach(t),_wr=i(ne),gE=n(ne,"LI",{});var aBe=s(gE);d6e=n(aBe,"STRONG",{});var YMt=s(d6e);bwr=r(YMt,"pegasus"),YMt.forEach(t),vwr=r(aBe," \u2014 "),QU=n(aBe,"A",{href:!0});var KMt=s(QU);Fwr=r(KMt,"FlaxPegasusModel"),KMt.forEach(t),Twr=r(aBe," (Pegasus model)"),aBe.forEach(t),Mwr=i(ne),hE=n(ne,"LI",{});var nBe=s(hE);c6e=n(nBe,"STRONG",{});var ZMt=s(c6e);Ewr=r(ZMt,"roberta"),ZMt.forEach(t),Cwr=r(nBe," \u2014 "),WU=n(nBe,"A",{href:!0});var e4t=s(WU);wwr=r(e4t,"FlaxRobertaModel"),e4t.forEach(t),Awr=r(nBe," (RoBERTa model)"),nBe.forEach(t),ywr=i(ne),pE=n(ne,"LI",{});var sBe=s(pE);f6e=n(sBe,"STRONG",{});var o4t=s(f6e);Lwr=r(o4t,"roformer"),o4t.forEach(t),xwr=r(sBe," \u2014 "),HU=n(sBe,"A",{href:!0});var r4t=s(HU);$wr=r(r4t,"FlaxRoFormerModel"),r4t.forEach(t),kwr=r(sBe," (RoFormer model)"),sBe.forEach(t),Swr=i(ne),uE=n(ne,"LI",{});var lBe=s(uE);m6e=n(lBe,"STRONG",{});var t4t=s(m6e);Rwr=r(t4t,"t5"),t4t.forEach(t),Bwr=r(lBe," \u2014 "),UU=n(lBe,"A",{href:!0});var a4t=s(UU);Pwr=r(a4t,"FlaxT5Model"),a4t.forEach(t),Iwr=r(lBe," (T5 model)"),lBe.forEach(t),qwr=i(ne),_E=n(ne,"LI",{});var iBe=s(_E);g6e=n(iBe,"STRONG",{});var n4t=s(g6e);Nwr=r(n4t,"vision-text-dual-encoder"),n4t.forEach(t),jwr=r(iBe," \u2014 "),JU=n(iBe,"A",{href:!0});var s4t=s(JU);Dwr=r(s4t,"FlaxVisionTextDualEncoderModel"),s4t.forEach(t),Gwr=r(iBe," (VisionTextDualEncoder model)"),iBe.forEach(t),Owr=i(ne),bE=n(ne,"LI",{});var dBe=s(bE);h6e=n(dBe,"STRONG",{});var l4t=s(h6e);Vwr=r(l4t,"vit"),l4t.forEach(t),Xwr=r(dBe," \u2014 "),YU=n(dBe,"A",{href:!0});var i4t=s(YU);zwr=r(i4t,"FlaxViTModel"),i4t.forEach(t),Qwr=r(dBe," (ViT model)"),dBe.forEach(t),Wwr=i(ne),vE=n(ne,"LI",{});var cBe=s(vE);p6e=n(cBe,"STRONG",{});var d4t=s(p6e);Hwr=r(d4t,"wav2vec2"),d4t.forEach(t),Uwr=r(cBe," \u2014 "),KU=n(cBe,"A",{href:!0});var c4t=s(KU);Jwr=r(c4t,"FlaxWav2Vec2Model"),c4t.forEach(t),Ywr=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),Kwr=i(ne),FE=n(ne,"LI",{});var fBe=s(FE);u6e=n(fBe,"STRONG",{});var f4t=s(u6e);Zwr=r(f4t,"xglm"),f4t.forEach(t),eAr=r(fBe," \u2014 "),ZU=n(fBe,"A",{href:!0});var m4t=s(ZU);oAr=r(m4t,"FlaxXGLMModel"),m4t.forEach(t),rAr=r(fBe," (XGLM model)"),fBe.forEach(t),tAr=i(ne),TE=n(ne,"LI",{});var mBe=s(TE);_6e=n(mBe,"STRONG",{});var g4t=s(_6e);aAr=r(g4t,"xlm-roberta"),g4t.forEach(t),nAr=r(mBe," \u2014 "),eJ=n(mBe,"A",{href:!0});var h4t=s(eJ);sAr=r(h4t,"FlaxXLMRobertaModel"),h4t.forEach(t),lAr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),ne.forEach(t),iAr=i(jl),T(ME.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),Fqe=i(f),xc=n(f,"H2",{class:!0});var yje=s(xc);EE=n(yje,"A",{id:!0,class:!0,href:!0});var p4t=s(EE);b6e=n(p4t,"SPAN",{});var u4t=s(b6e);T(ex.$$.fragment,u4t),u4t.forEach(t),p4t.forEach(t),dAr=i(yje),v6e=n(yje,"SPAN",{});var _4t=s(v6e);cAr=r(_4t,"FlaxAutoModelForCausalLM"),_4t.forEach(t),yje.forEach(t),Tqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(ox.$$.fragment,Dl),fAr=i(Dl),$c=n(Dl,"P",{});var $Z=s($c);mAr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=n($Z,"A",{href:!0});var b4t=s(oJ);gAr=r(b4t,"from_pretrained()"),b4t.forEach(t),hAr=r($Z," class method or the "),rJ=n($Z,"A",{href:!0});var v4t=s(rJ);pAr=r(v4t,"from_config()"),v4t.forEach(t),uAr=r($Z,` class
method.`),$Z.forEach(t),_Ar=i(Dl),rx=n(Dl,"P",{});var Lje=s(rx);bAr=r(Lje,"This class cannot be instantiated directly using "),F6e=n(Lje,"CODE",{});var F4t=s(F6e);vAr=r(F4t,"__init__()"),F4t.forEach(t),FAr=r(Lje," (throws an error)."),Lje.forEach(t),TAr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var ww=s(Dt);T(tx.$$.fragment,ww),MAr=i(ww),T6e=n(ww,"P",{});var T4t=s(T6e);EAr=r(T4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),T4t.forEach(t),CAr=i(ww),kc=n(ww,"P",{});var kZ=s(kc);wAr=r(kZ,`Note:
Loading a model from its configuration file does `),M6e=n(kZ,"STRONG",{});var M4t=s(M6e);AAr=r(M4t,"not"),M4t.forEach(t),yAr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(kZ,"A",{href:!0});var E4t=s(tJ);LAr=r(E4t,"from_pretrained()"),E4t.forEach(t),xAr=r(kZ," to load the model weights."),kZ.forEach(t),$Ar=i(ww),T(CE.$$.fragment,ww),ww.forEach(t),kAr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(ax.$$.fragment,Gl),SAr=i(Gl),E6e=n(Gl,"P",{});var C4t=s(E6e);RAr=r(C4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),C4t.forEach(t),BAr=i(Gl),pn=n(Gl,"P",{});var Aw=s(pn);PAr=r(Aw,"The model class to instantiate is selected based on the "),C6e=n(Aw,"CODE",{});var w4t=s(C6e);IAr=r(w4t,"model_type"),w4t.forEach(t),qAr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),w6e=n(Aw,"CODE",{});var A4t=s(w6e);NAr=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),jAr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=n(Aw,"CODE",{});var y4t=s(A6e);DAr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),GAr=r(Aw,":"),Aw.forEach(t),OAr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);wE=n(Oe,"LI",{});var gBe=s(wE);y6e=n(gBe,"STRONG",{});var L4t=s(y6e);VAr=r(L4t,"bart"),L4t.forEach(t),XAr=r(gBe," \u2014 "),aJ=n(gBe,"A",{href:!0});var x4t=s(aJ);zAr=r(x4t,"FlaxBartForCausalLM"),x4t.forEach(t),QAr=r(gBe," (BART model)"),gBe.forEach(t),WAr=i(Oe),AE=n(Oe,"LI",{});var hBe=s(AE);L6e=n(hBe,"STRONG",{});var $4t=s(L6e);HAr=r($4t,"bert"),$4t.forEach(t),UAr=r(hBe," \u2014 "),nJ=n(hBe,"A",{href:!0});var k4t=s(nJ);JAr=r(k4t,"FlaxBertForCausalLM"),k4t.forEach(t),YAr=r(hBe," (BERT model)"),hBe.forEach(t),KAr=i(Oe),yE=n(Oe,"LI",{});var pBe=s(yE);x6e=n(pBe,"STRONG",{});var S4t=s(x6e);ZAr=r(S4t,"big_bird"),S4t.forEach(t),e0r=r(pBe," \u2014 "),sJ=n(pBe,"A",{href:!0});var R4t=s(sJ);o0r=r(R4t,"FlaxBigBirdForCausalLM"),R4t.forEach(t),r0r=r(pBe," (BigBird model)"),pBe.forEach(t),t0r=i(Oe),LE=n(Oe,"LI",{});var uBe=s(LE);$6e=n(uBe,"STRONG",{});var B4t=s($6e);a0r=r(B4t,"electra"),B4t.forEach(t),n0r=r(uBe," \u2014 "),lJ=n(uBe,"A",{href:!0});var P4t=s(lJ);s0r=r(P4t,"FlaxElectraForCausalLM"),P4t.forEach(t),l0r=r(uBe," (ELECTRA model)"),uBe.forEach(t),i0r=i(Oe),xE=n(Oe,"LI",{});var _Be=s(xE);k6e=n(_Be,"STRONG",{});var I4t=s(k6e);d0r=r(I4t,"gpt2"),I4t.forEach(t),c0r=r(_Be," \u2014 "),iJ=n(_Be,"A",{href:!0});var q4t=s(iJ);f0r=r(q4t,"FlaxGPT2LMHeadModel"),q4t.forEach(t),m0r=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),g0r=i(Oe),$E=n(Oe,"LI",{});var bBe=s($E);S6e=n(bBe,"STRONG",{});var N4t=s(S6e);h0r=r(N4t,"gpt_neo"),N4t.forEach(t),p0r=r(bBe," \u2014 "),dJ=n(bBe,"A",{href:!0});var j4t=s(dJ);u0r=r(j4t,"FlaxGPTNeoForCausalLM"),j4t.forEach(t),_0r=r(bBe," (GPT Neo model)"),bBe.forEach(t),b0r=i(Oe),kE=n(Oe,"LI",{});var vBe=s(kE);R6e=n(vBe,"STRONG",{});var D4t=s(R6e);v0r=r(D4t,"gptj"),D4t.forEach(t),F0r=r(vBe," \u2014 "),cJ=n(vBe,"A",{href:!0});var G4t=s(cJ);T0r=r(G4t,"FlaxGPTJForCausalLM"),G4t.forEach(t),M0r=r(vBe," (GPT-J model)"),vBe.forEach(t),E0r=i(Oe),SE=n(Oe,"LI",{});var FBe=s(SE);B6e=n(FBe,"STRONG",{});var O4t=s(B6e);C0r=r(O4t,"roberta"),O4t.forEach(t),w0r=r(FBe," \u2014 "),fJ=n(FBe,"A",{href:!0});var V4t=s(fJ);A0r=r(V4t,"FlaxRobertaForCausalLM"),V4t.forEach(t),y0r=r(FBe," (RoBERTa model)"),FBe.forEach(t),L0r=i(Oe),RE=n(Oe,"LI",{});var TBe=s(RE);P6e=n(TBe,"STRONG",{});var X4t=s(P6e);x0r=r(X4t,"xglm"),X4t.forEach(t),$0r=r(TBe," \u2014 "),mJ=n(TBe,"A",{href:!0});var z4t=s(mJ);k0r=r(z4t,"FlaxXGLMForCausalLM"),z4t.forEach(t),S0r=r(TBe," (XGLM model)"),TBe.forEach(t),Oe.forEach(t),R0r=i(Gl),T(BE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Mqe=i(f),Sc=n(f,"H2",{class:!0});var xje=s(Sc);PE=n(xje,"A",{id:!0,class:!0,href:!0});var Q4t=s(PE);I6e=n(Q4t,"SPAN",{});var W4t=s(I6e);T(nx.$$.fragment,W4t),W4t.forEach(t),Q4t.forEach(t),B0r=i(xje),q6e=n(xje,"SPAN",{});var H4t=s(q6e);P0r=r(H4t,"FlaxAutoModelForPreTraining"),H4t.forEach(t),xje.forEach(t),Eqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(sx.$$.fragment,Ol),I0r=i(Ol),Rc=n(Ol,"P",{});var SZ=s(Rc);q0r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=n(SZ,"A",{href:!0});var U4t=s(gJ);N0r=r(U4t,"from_pretrained()"),U4t.forEach(t),j0r=r(SZ," class method or the "),hJ=n(SZ,"A",{href:!0});var J4t=s(hJ);D0r=r(J4t,"from_config()"),J4t.forEach(t),G0r=r(SZ,` class
method.`),SZ.forEach(t),O0r=i(Ol),lx=n(Ol,"P",{});var $je=s(lx);V0r=r($je,"This class cannot be instantiated directly using "),N6e=n($je,"CODE",{});var Y4t=s(N6e);X0r=r(Y4t,"__init__()"),Y4t.forEach(t),z0r=r($je," (throws an error)."),$je.forEach(t),Q0r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var yw=s(Gt);T(ix.$$.fragment,yw),W0r=i(yw),j6e=n(yw,"P",{});var K4t=s(j6e);H0r=r(K4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K4t.forEach(t),U0r=i(yw),Bc=n(yw,"P",{});var RZ=s(Bc);J0r=r(RZ,`Note:
Loading a model from its configuration file does `),D6e=n(RZ,"STRONG",{});var Z4t=s(D6e);Y0r=r(Z4t,"not"),Z4t.forEach(t),K0r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(RZ,"A",{href:!0});var eEt=s(pJ);Z0r=r(eEt,"from_pretrained()"),eEt.forEach(t),eyr=r(RZ," to load the model weights."),RZ.forEach(t),oyr=i(yw),T(IE.$$.fragment,yw),yw.forEach(t),ryr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(dx.$$.fragment,Vl),tyr=i(Vl),G6e=n(Vl,"P",{});var oEt=s(G6e);ayr=r(oEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oEt.forEach(t),nyr=i(Vl),un=n(Vl,"P",{});var Lw=s(un);syr=r(Lw,"The model class to instantiate is selected based on the "),O6e=n(Lw,"CODE",{});var rEt=s(O6e);lyr=r(rEt,"model_type"),rEt.forEach(t),iyr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),V6e=n(Lw,"CODE",{});var tEt=s(V6e);dyr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),cyr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(Lw,"CODE",{});var aEt=s(X6e);fyr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),myr=r(Lw,":"),Lw.forEach(t),gyr=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);qE=n(we,"LI",{});var MBe=s(qE);z6e=n(MBe,"STRONG",{});var nEt=s(z6e);hyr=r(nEt,"albert"),nEt.forEach(t),pyr=r(MBe," \u2014 "),uJ=n(MBe,"A",{href:!0});var sEt=s(uJ);uyr=r(sEt,"FlaxAlbertForPreTraining"),sEt.forEach(t),_yr=r(MBe," (ALBERT model)"),MBe.forEach(t),byr=i(we),NE=n(we,"LI",{});var EBe=s(NE);Q6e=n(EBe,"STRONG",{});var lEt=s(Q6e);vyr=r(lEt,"bart"),lEt.forEach(t),Fyr=r(EBe," \u2014 "),_J=n(EBe,"A",{href:!0});var iEt=s(_J);Tyr=r(iEt,"FlaxBartForConditionalGeneration"),iEt.forEach(t),Myr=r(EBe," (BART model)"),EBe.forEach(t),Eyr=i(we),jE=n(we,"LI",{});var CBe=s(jE);W6e=n(CBe,"STRONG",{});var dEt=s(W6e);Cyr=r(dEt,"bert"),dEt.forEach(t),wyr=r(CBe," \u2014 "),bJ=n(CBe,"A",{href:!0});var cEt=s(bJ);Ayr=r(cEt,"FlaxBertForPreTraining"),cEt.forEach(t),yyr=r(CBe," (BERT model)"),CBe.forEach(t),Lyr=i(we),DE=n(we,"LI",{});var wBe=s(DE);H6e=n(wBe,"STRONG",{});var fEt=s(H6e);xyr=r(fEt,"big_bird"),fEt.forEach(t),$yr=r(wBe," \u2014 "),vJ=n(wBe,"A",{href:!0});var mEt=s(vJ);kyr=r(mEt,"FlaxBigBirdForPreTraining"),mEt.forEach(t),Syr=r(wBe," (BigBird model)"),wBe.forEach(t),Ryr=i(we),GE=n(we,"LI",{});var ABe=s(GE);U6e=n(ABe,"STRONG",{});var gEt=s(U6e);Byr=r(gEt,"electra"),gEt.forEach(t),Pyr=r(ABe," \u2014 "),FJ=n(ABe,"A",{href:!0});var hEt=s(FJ);Iyr=r(hEt,"FlaxElectraForPreTraining"),hEt.forEach(t),qyr=r(ABe," (ELECTRA model)"),ABe.forEach(t),Nyr=i(we),OE=n(we,"LI",{});var yBe=s(OE);J6e=n(yBe,"STRONG",{});var pEt=s(J6e);jyr=r(pEt,"mbart"),pEt.forEach(t),Dyr=r(yBe," \u2014 "),TJ=n(yBe,"A",{href:!0});var uEt=s(TJ);Gyr=r(uEt,"FlaxMBartForConditionalGeneration"),uEt.forEach(t),Oyr=r(yBe," (mBART model)"),yBe.forEach(t),Vyr=i(we),VE=n(we,"LI",{});var LBe=s(VE);Y6e=n(LBe,"STRONG",{});var _Et=s(Y6e);Xyr=r(_Et,"mt5"),_Et.forEach(t),zyr=r(LBe," \u2014 "),MJ=n(LBe,"A",{href:!0});var bEt=s(MJ);Qyr=r(bEt,"FlaxMT5ForConditionalGeneration"),bEt.forEach(t),Wyr=r(LBe," (mT5 model)"),LBe.forEach(t),Hyr=i(we),XE=n(we,"LI",{});var xBe=s(XE);K6e=n(xBe,"STRONG",{});var vEt=s(K6e);Uyr=r(vEt,"roberta"),vEt.forEach(t),Jyr=r(xBe," \u2014 "),EJ=n(xBe,"A",{href:!0});var FEt=s(EJ);Yyr=r(FEt,"FlaxRobertaForMaskedLM"),FEt.forEach(t),Kyr=r(xBe," (RoBERTa model)"),xBe.forEach(t),Zyr=i(we),zE=n(we,"LI",{});var $Be=s(zE);Z6e=n($Be,"STRONG",{});var TEt=s(Z6e);eLr=r(TEt,"roformer"),TEt.forEach(t),oLr=r($Be," \u2014 "),CJ=n($Be,"A",{href:!0});var MEt=s(CJ);rLr=r(MEt,"FlaxRoFormerForMaskedLM"),MEt.forEach(t),tLr=r($Be," (RoFormer model)"),$Be.forEach(t),aLr=i(we),QE=n(we,"LI",{});var kBe=s(QE);eTe=n(kBe,"STRONG",{});var EEt=s(eTe);nLr=r(EEt,"t5"),EEt.forEach(t),sLr=r(kBe," \u2014 "),wJ=n(kBe,"A",{href:!0});var CEt=s(wJ);lLr=r(CEt,"FlaxT5ForConditionalGeneration"),CEt.forEach(t),iLr=r(kBe," (T5 model)"),kBe.forEach(t),dLr=i(we),WE=n(we,"LI",{});var SBe=s(WE);oTe=n(SBe,"STRONG",{});var wEt=s(oTe);cLr=r(wEt,"wav2vec2"),wEt.forEach(t),fLr=r(SBe," \u2014 "),AJ=n(SBe,"A",{href:!0});var AEt=s(AJ);mLr=r(AEt,"FlaxWav2Vec2ForPreTraining"),AEt.forEach(t),gLr=r(SBe," (Wav2Vec2 model)"),SBe.forEach(t),hLr=i(we),HE=n(we,"LI",{});var RBe=s(HE);rTe=n(RBe,"STRONG",{});var yEt=s(rTe);pLr=r(yEt,"xlm-roberta"),yEt.forEach(t),uLr=r(RBe," \u2014 "),yJ=n(RBe,"A",{href:!0});var LEt=s(yJ);_Lr=r(LEt,"FlaxXLMRobertaForMaskedLM"),LEt.forEach(t),bLr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),we.forEach(t),vLr=i(Vl),T(UE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Cqe=i(f),Pc=n(f,"H2",{class:!0});var kje=s(Pc);JE=n(kje,"A",{id:!0,class:!0,href:!0});var xEt=s(JE);tTe=n(xEt,"SPAN",{});var $Et=s(tTe);T(cx.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),FLr=i(kje),aTe=n(kje,"SPAN",{});var kEt=s(aTe);TLr=r(kEt,"FlaxAutoModelForMaskedLM"),kEt.forEach(t),kje.forEach(t),wqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(fx.$$.fragment,Xl),MLr=i(Xl),Ic=n(Xl,"P",{});var BZ=s(Ic);ELr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=n(BZ,"A",{href:!0});var SEt=s(LJ);CLr=r(SEt,"from_pretrained()"),SEt.forEach(t),wLr=r(BZ," class method or the "),xJ=n(BZ,"A",{href:!0});var REt=s(xJ);ALr=r(REt,"from_config()"),REt.forEach(t),yLr=r(BZ,` class
method.`),BZ.forEach(t),LLr=i(Xl),mx=n(Xl,"P",{});var Sje=s(mx);xLr=r(Sje,"This class cannot be instantiated directly using "),nTe=n(Sje,"CODE",{});var BEt=s(nTe);$Lr=r(BEt,"__init__()"),BEt.forEach(t),kLr=r(Sje," (throws an error)."),Sje.forEach(t),SLr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var xw=s(Ot);T(gx.$$.fragment,xw),RLr=i(xw),sTe=n(xw,"P",{});var PEt=s(sTe);BLr=r(PEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PEt.forEach(t),PLr=i(xw),qc=n(xw,"P",{});var PZ=s(qc);ILr=r(PZ,`Note:
Loading a model from its configuration file does `),lTe=n(PZ,"STRONG",{});var IEt=s(lTe);qLr=r(IEt,"not"),IEt.forEach(t),NLr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(PZ,"A",{href:!0});var qEt=s($J);jLr=r(qEt,"from_pretrained()"),qEt.forEach(t),DLr=r(PZ," to load the model weights."),PZ.forEach(t),GLr=i(xw),T(YE.$$.fragment,xw),xw.forEach(t),OLr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(hx.$$.fragment,zl),VLr=i(zl),iTe=n(zl,"P",{});var NEt=s(iTe);XLr=r(NEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NEt.forEach(t),zLr=i(zl),_n=n(zl,"P",{});var $w=s(_n);QLr=r($w,"The model class to instantiate is selected based on the "),dTe=n($w,"CODE",{});var jEt=s(dTe);WLr=r(jEt,"model_type"),jEt.forEach(t),HLr=r($w,` property of the config object (either
passed as an argument or loaded from `),cTe=n($w,"CODE",{});var DEt=s(cTe);ULr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),JLr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n($w,"CODE",{});var GEt=s(fTe);YLr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),KLr=r($w,":"),$w.forEach(t),ZLr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);KE=n(Be,"LI",{});var BBe=s(KE);mTe=n(BBe,"STRONG",{});var OEt=s(mTe);exr=r(OEt,"albert"),OEt.forEach(t),oxr=r(BBe," \u2014 "),kJ=n(BBe,"A",{href:!0});var VEt=s(kJ);rxr=r(VEt,"FlaxAlbertForMaskedLM"),VEt.forEach(t),txr=r(BBe," (ALBERT model)"),BBe.forEach(t),axr=i(Be),ZE=n(Be,"LI",{});var PBe=s(ZE);gTe=n(PBe,"STRONG",{});var XEt=s(gTe);nxr=r(XEt,"bart"),XEt.forEach(t),sxr=r(PBe," \u2014 "),SJ=n(PBe,"A",{href:!0});var zEt=s(SJ);lxr=r(zEt,"FlaxBartForConditionalGeneration"),zEt.forEach(t),ixr=r(PBe," (BART model)"),PBe.forEach(t),dxr=i(Be),e5=n(Be,"LI",{});var IBe=s(e5);hTe=n(IBe,"STRONG",{});var QEt=s(hTe);cxr=r(QEt,"bert"),QEt.forEach(t),fxr=r(IBe," \u2014 "),RJ=n(IBe,"A",{href:!0});var WEt=s(RJ);mxr=r(WEt,"FlaxBertForMaskedLM"),WEt.forEach(t),gxr=r(IBe," (BERT model)"),IBe.forEach(t),hxr=i(Be),o5=n(Be,"LI",{});var qBe=s(o5);pTe=n(qBe,"STRONG",{});var HEt=s(pTe);pxr=r(HEt,"big_bird"),HEt.forEach(t),uxr=r(qBe," \u2014 "),BJ=n(qBe,"A",{href:!0});var UEt=s(BJ);_xr=r(UEt,"FlaxBigBirdForMaskedLM"),UEt.forEach(t),bxr=r(qBe," (BigBird model)"),qBe.forEach(t),vxr=i(Be),r5=n(Be,"LI",{});var NBe=s(r5);uTe=n(NBe,"STRONG",{});var JEt=s(uTe);Fxr=r(JEt,"distilbert"),JEt.forEach(t),Txr=r(NBe," \u2014 "),PJ=n(NBe,"A",{href:!0});var YEt=s(PJ);Mxr=r(YEt,"FlaxDistilBertForMaskedLM"),YEt.forEach(t),Exr=r(NBe," (DistilBERT model)"),NBe.forEach(t),Cxr=i(Be),t5=n(Be,"LI",{});var jBe=s(t5);_Te=n(jBe,"STRONG",{});var KEt=s(_Te);wxr=r(KEt,"electra"),KEt.forEach(t),Axr=r(jBe," \u2014 "),IJ=n(jBe,"A",{href:!0});var ZEt=s(IJ);yxr=r(ZEt,"FlaxElectraForMaskedLM"),ZEt.forEach(t),Lxr=r(jBe," (ELECTRA model)"),jBe.forEach(t),xxr=i(Be),a5=n(Be,"LI",{});var DBe=s(a5);bTe=n(DBe,"STRONG",{});var e5t=s(bTe);$xr=r(e5t,"mbart"),e5t.forEach(t),kxr=r(DBe," \u2014 "),qJ=n(DBe,"A",{href:!0});var o5t=s(qJ);Sxr=r(o5t,"FlaxMBartForConditionalGeneration"),o5t.forEach(t),Rxr=r(DBe," (mBART model)"),DBe.forEach(t),Bxr=i(Be),n5=n(Be,"LI",{});var GBe=s(n5);vTe=n(GBe,"STRONG",{});var r5t=s(vTe);Pxr=r(r5t,"roberta"),r5t.forEach(t),Ixr=r(GBe," \u2014 "),NJ=n(GBe,"A",{href:!0});var t5t=s(NJ);qxr=r(t5t,"FlaxRobertaForMaskedLM"),t5t.forEach(t),Nxr=r(GBe," (RoBERTa model)"),GBe.forEach(t),jxr=i(Be),s5=n(Be,"LI",{});var OBe=s(s5);FTe=n(OBe,"STRONG",{});var a5t=s(FTe);Dxr=r(a5t,"roformer"),a5t.forEach(t),Gxr=r(OBe," \u2014 "),jJ=n(OBe,"A",{href:!0});var n5t=s(jJ);Oxr=r(n5t,"FlaxRoFormerForMaskedLM"),n5t.forEach(t),Vxr=r(OBe," (RoFormer model)"),OBe.forEach(t),Xxr=i(Be),l5=n(Be,"LI",{});var VBe=s(l5);TTe=n(VBe,"STRONG",{});var s5t=s(TTe);zxr=r(s5t,"xlm-roberta"),s5t.forEach(t),Qxr=r(VBe," \u2014 "),DJ=n(VBe,"A",{href:!0});var l5t=s(DJ);Wxr=r(l5t,"FlaxXLMRobertaForMaskedLM"),l5t.forEach(t),Hxr=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),Be.forEach(t),Uxr=i(zl),T(i5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Aqe=i(f),Nc=n(f,"H2",{class:!0});var Rje=s(Nc);d5=n(Rje,"A",{id:!0,class:!0,href:!0});var i5t=s(d5);MTe=n(i5t,"SPAN",{});var d5t=s(MTe);T(px.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),Jxr=i(Rje),ETe=n(Rje,"SPAN",{});var c5t=s(ETe);Yxr=r(c5t,"FlaxAutoModelForSeq2SeqLM"),c5t.forEach(t),Rje.forEach(t),yqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(ux.$$.fragment,Ql),Kxr=i(Ql),jc=n(Ql,"P",{});var IZ=s(jc);Zxr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=n(IZ,"A",{href:!0});var f5t=s(GJ);e7r=r(f5t,"from_pretrained()"),f5t.forEach(t),o7r=r(IZ," class method or the "),OJ=n(IZ,"A",{href:!0});var m5t=s(OJ);r7r=r(m5t,"from_config()"),m5t.forEach(t),t7r=r(IZ,` class
method.`),IZ.forEach(t),a7r=i(Ql),_x=n(Ql,"P",{});var Bje=s(_x);n7r=r(Bje,"This class cannot be instantiated directly using "),CTe=n(Bje,"CODE",{});var g5t=s(CTe);s7r=r(g5t,"__init__()"),g5t.forEach(t),l7r=r(Bje," (throws an error)."),Bje.forEach(t),i7r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var kw=s(Vt);T(bx.$$.fragment,kw),d7r=i(kw),wTe=n(kw,"P",{});var h5t=s(wTe);c7r=r(h5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h5t.forEach(t),f7r=i(kw),Dc=n(kw,"P",{});var qZ=s(Dc);m7r=r(qZ,`Note:
Loading a model from its configuration file does `),ATe=n(qZ,"STRONG",{});var p5t=s(ATe);g7r=r(p5t,"not"),p5t.forEach(t),h7r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(qZ,"A",{href:!0});var u5t=s(VJ);p7r=r(u5t,"from_pretrained()"),u5t.forEach(t),u7r=r(qZ," to load the model weights."),qZ.forEach(t),_7r=i(kw),T(c5.$$.fragment,kw),kw.forEach(t),b7r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(vx.$$.fragment,Wl),v7r=i(Wl),yTe=n(Wl,"P",{});var _5t=s(yTe);F7r=r(_5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_5t.forEach(t),T7r=i(Wl),bn=n(Wl,"P",{});var Sw=s(bn);M7r=r(Sw,"The model class to instantiate is selected based on the "),LTe=n(Sw,"CODE",{});var b5t=s(LTe);E7r=r(b5t,"model_type"),b5t.forEach(t),C7r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),xTe=n(Sw,"CODE",{});var v5t=s(xTe);w7r=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),A7r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(Sw,"CODE",{});var F5t=s($Te);y7r=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),L7r=r(Sw,":"),Sw.forEach(t),x7r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);f5=n(Ve,"LI",{});var XBe=s(f5);kTe=n(XBe,"STRONG",{});var T5t=s(kTe);$7r=r(T5t,"bart"),T5t.forEach(t),k7r=r(XBe," \u2014 "),XJ=n(XBe,"A",{href:!0});var M5t=s(XJ);S7r=r(M5t,"FlaxBartForConditionalGeneration"),M5t.forEach(t),R7r=r(XBe," (BART model)"),XBe.forEach(t),B7r=i(Ve),m5=n(Ve,"LI",{});var zBe=s(m5);STe=n(zBe,"STRONG",{});var E5t=s(STe);P7r=r(E5t,"blenderbot"),E5t.forEach(t),I7r=r(zBe," \u2014 "),zJ=n(zBe,"A",{href:!0});var C5t=s(zJ);q7r=r(C5t,"FlaxBlenderbotForConditionalGeneration"),C5t.forEach(t),N7r=r(zBe," (Blenderbot model)"),zBe.forEach(t),j7r=i(Ve),g5=n(Ve,"LI",{});var QBe=s(g5);RTe=n(QBe,"STRONG",{});var w5t=s(RTe);D7r=r(w5t,"blenderbot-small"),w5t.forEach(t),G7r=r(QBe," \u2014 "),QJ=n(QBe,"A",{href:!0});var A5t=s(QJ);O7r=r(A5t,"FlaxBlenderbotSmallForConditionalGeneration"),A5t.forEach(t),V7r=r(QBe," (BlenderbotSmall model)"),QBe.forEach(t),X7r=i(Ve),h5=n(Ve,"LI",{});var WBe=s(h5);BTe=n(WBe,"STRONG",{});var y5t=s(BTe);z7r=r(y5t,"encoder-decoder"),y5t.forEach(t),Q7r=r(WBe," \u2014 "),WJ=n(WBe,"A",{href:!0});var L5t=s(WJ);W7r=r(L5t,"FlaxEncoderDecoderModel"),L5t.forEach(t),H7r=r(WBe," (Encoder decoder model)"),WBe.forEach(t),U7r=i(Ve),p5=n(Ve,"LI",{});var HBe=s(p5);PTe=n(HBe,"STRONG",{});var x5t=s(PTe);J7r=r(x5t,"marian"),x5t.forEach(t),Y7r=r(HBe," \u2014 "),HJ=n(HBe,"A",{href:!0});var $5t=s(HJ);K7r=r($5t,"FlaxMarianMTModel"),$5t.forEach(t),Z7r=r(HBe," (Marian model)"),HBe.forEach(t),e$r=i(Ve),u5=n(Ve,"LI",{});var UBe=s(u5);ITe=n(UBe,"STRONG",{});var k5t=s(ITe);o$r=r(k5t,"mbart"),k5t.forEach(t),r$r=r(UBe," \u2014 "),UJ=n(UBe,"A",{href:!0});var S5t=s(UJ);t$r=r(S5t,"FlaxMBartForConditionalGeneration"),S5t.forEach(t),a$r=r(UBe," (mBART model)"),UBe.forEach(t),n$r=i(Ve),_5=n(Ve,"LI",{});var JBe=s(_5);qTe=n(JBe,"STRONG",{});var R5t=s(qTe);s$r=r(R5t,"mt5"),R5t.forEach(t),l$r=r(JBe," \u2014 "),JJ=n(JBe,"A",{href:!0});var B5t=s(JJ);i$r=r(B5t,"FlaxMT5ForConditionalGeneration"),B5t.forEach(t),d$r=r(JBe," (mT5 model)"),JBe.forEach(t),c$r=i(Ve),b5=n(Ve,"LI",{});var YBe=s(b5);NTe=n(YBe,"STRONG",{});var P5t=s(NTe);f$r=r(P5t,"pegasus"),P5t.forEach(t),m$r=r(YBe," \u2014 "),YJ=n(YBe,"A",{href:!0});var I5t=s(YJ);g$r=r(I5t,"FlaxPegasusForConditionalGeneration"),I5t.forEach(t),h$r=r(YBe," (Pegasus model)"),YBe.forEach(t),p$r=i(Ve),v5=n(Ve,"LI",{});var KBe=s(v5);jTe=n(KBe,"STRONG",{});var q5t=s(jTe);u$r=r(q5t,"t5"),q5t.forEach(t),_$r=r(KBe," \u2014 "),KJ=n(KBe,"A",{href:!0});var N5t=s(KJ);b$r=r(N5t,"FlaxT5ForConditionalGeneration"),N5t.forEach(t),v$r=r(KBe," (T5 model)"),KBe.forEach(t),Ve.forEach(t),F$r=i(Wl),T(F5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Lqe=i(f),Gc=n(f,"H2",{class:!0});var Pje=s(Gc);T5=n(Pje,"A",{id:!0,class:!0,href:!0});var j5t=s(T5);DTe=n(j5t,"SPAN",{});var D5t=s(DTe);T(Fx.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),T$r=i(Pje),GTe=n(Pje,"SPAN",{});var G5t=s(GTe);M$r=r(G5t,"FlaxAutoModelForSequenceClassification"),G5t.forEach(t),Pje.forEach(t),xqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(Tx.$$.fragment,Hl),E$r=i(Hl),Oc=n(Hl,"P",{});var NZ=s(Oc);C$r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=n(NZ,"A",{href:!0});var O5t=s(ZJ);w$r=r(O5t,"from_pretrained()"),O5t.forEach(t),A$r=r(NZ," class method or the "),eY=n(NZ,"A",{href:!0});var V5t=s(eY);y$r=r(V5t,"from_config()"),V5t.forEach(t),L$r=r(NZ,` class
method.`),NZ.forEach(t),x$r=i(Hl),Mx=n(Hl,"P",{});var Ije=s(Mx);$$r=r(Ije,"This class cannot be instantiated directly using "),OTe=n(Ije,"CODE",{});var X5t=s(OTe);k$r=r(X5t,"__init__()"),X5t.forEach(t),S$r=r(Ije," (throws an error)."),Ije.forEach(t),R$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Rw=s(Xt);T(Ex.$$.fragment,Rw),B$r=i(Rw),VTe=n(Rw,"P",{});var z5t=s(VTe);P$r=r(z5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z5t.forEach(t),I$r=i(Rw),Vc=n(Rw,"P",{});var jZ=s(Vc);q$r=r(jZ,`Note:
Loading a model from its configuration file does `),XTe=n(jZ,"STRONG",{});var Q5t=s(XTe);N$r=r(Q5t,"not"),Q5t.forEach(t),j$r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(jZ,"A",{href:!0});var W5t=s(oY);D$r=r(W5t,"from_pretrained()"),W5t.forEach(t),G$r=r(jZ," to load the model weights."),jZ.forEach(t),O$r=i(Rw),T(M5.$$.fragment,Rw),Rw.forEach(t),V$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(Cx.$$.fragment,Ul),X$r=i(Ul),zTe=n(Ul,"P",{});var H5t=s(zTe);z$r=r(H5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H5t.forEach(t),Q$r=i(Ul),vn=n(Ul,"P",{});var Bw=s(vn);W$r=r(Bw,"The model class to instantiate is selected based on the "),QTe=n(Bw,"CODE",{});var U5t=s(QTe);H$r=r(U5t,"model_type"),U5t.forEach(t),U$r=r(Bw,` property of the config object (either
passed as an argument or loaded from `),WTe=n(Bw,"CODE",{});var J5t=s(WTe);J$r=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),Y$r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(Bw,"CODE",{});var Y5t=s(HTe);K$r=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),Z$r=r(Bw,":"),Bw.forEach(t),ekr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);E5=n(Pe,"LI",{});var ZBe=s(E5);UTe=n(ZBe,"STRONG",{});var K5t=s(UTe);okr=r(K5t,"albert"),K5t.forEach(t),rkr=r(ZBe," \u2014 "),rY=n(ZBe,"A",{href:!0});var Z5t=s(rY);tkr=r(Z5t,"FlaxAlbertForSequenceClassification"),Z5t.forEach(t),akr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),nkr=i(Pe),C5=n(Pe,"LI",{});var ePe=s(C5);JTe=n(ePe,"STRONG",{});var eCt=s(JTe);skr=r(eCt,"bart"),eCt.forEach(t),lkr=r(ePe," \u2014 "),tY=n(ePe,"A",{href:!0});var oCt=s(tY);ikr=r(oCt,"FlaxBartForSequenceClassification"),oCt.forEach(t),dkr=r(ePe," (BART model)"),ePe.forEach(t),ckr=i(Pe),w5=n(Pe,"LI",{});var oPe=s(w5);YTe=n(oPe,"STRONG",{});var rCt=s(YTe);fkr=r(rCt,"bert"),rCt.forEach(t),mkr=r(oPe," \u2014 "),aY=n(oPe,"A",{href:!0});var tCt=s(aY);gkr=r(tCt,"FlaxBertForSequenceClassification"),tCt.forEach(t),hkr=r(oPe," (BERT model)"),oPe.forEach(t),pkr=i(Pe),A5=n(Pe,"LI",{});var rPe=s(A5);KTe=n(rPe,"STRONG",{});var aCt=s(KTe);ukr=r(aCt,"big_bird"),aCt.forEach(t),_kr=r(rPe," \u2014 "),nY=n(rPe,"A",{href:!0});var nCt=s(nY);bkr=r(nCt,"FlaxBigBirdForSequenceClassification"),nCt.forEach(t),vkr=r(rPe," (BigBird model)"),rPe.forEach(t),Fkr=i(Pe),y5=n(Pe,"LI",{});var tPe=s(y5);ZTe=n(tPe,"STRONG",{});var sCt=s(ZTe);Tkr=r(sCt,"distilbert"),sCt.forEach(t),Mkr=r(tPe," \u2014 "),sY=n(tPe,"A",{href:!0});var lCt=s(sY);Ekr=r(lCt,"FlaxDistilBertForSequenceClassification"),lCt.forEach(t),Ckr=r(tPe," (DistilBERT model)"),tPe.forEach(t),wkr=i(Pe),L5=n(Pe,"LI",{});var aPe=s(L5);e9e=n(aPe,"STRONG",{});var iCt=s(e9e);Akr=r(iCt,"electra"),iCt.forEach(t),ykr=r(aPe," \u2014 "),lY=n(aPe,"A",{href:!0});var dCt=s(lY);Lkr=r(dCt,"FlaxElectraForSequenceClassification"),dCt.forEach(t),xkr=r(aPe," (ELECTRA model)"),aPe.forEach(t),$kr=i(Pe),x5=n(Pe,"LI",{});var nPe=s(x5);o9e=n(nPe,"STRONG",{});var cCt=s(o9e);kkr=r(cCt,"mbart"),cCt.forEach(t),Skr=r(nPe," \u2014 "),iY=n(nPe,"A",{href:!0});var fCt=s(iY);Rkr=r(fCt,"FlaxMBartForSequenceClassification"),fCt.forEach(t),Bkr=r(nPe," (mBART model)"),nPe.forEach(t),Pkr=i(Pe),$5=n(Pe,"LI",{});var sPe=s($5);r9e=n(sPe,"STRONG",{});var mCt=s(r9e);Ikr=r(mCt,"roberta"),mCt.forEach(t),qkr=r(sPe," \u2014 "),dY=n(sPe,"A",{href:!0});var gCt=s(dY);Nkr=r(gCt,"FlaxRobertaForSequenceClassification"),gCt.forEach(t),jkr=r(sPe," (RoBERTa model)"),sPe.forEach(t),Dkr=i(Pe),k5=n(Pe,"LI",{});var lPe=s(k5);t9e=n(lPe,"STRONG",{});var hCt=s(t9e);Gkr=r(hCt,"roformer"),hCt.forEach(t),Okr=r(lPe," \u2014 "),cY=n(lPe,"A",{href:!0});var pCt=s(cY);Vkr=r(pCt,"FlaxRoFormerForSequenceClassification"),pCt.forEach(t),Xkr=r(lPe," (RoFormer model)"),lPe.forEach(t),zkr=i(Pe),S5=n(Pe,"LI",{});var iPe=s(S5);a9e=n(iPe,"STRONG",{});var uCt=s(a9e);Qkr=r(uCt,"xlm-roberta"),uCt.forEach(t),Wkr=r(iPe," \u2014 "),fY=n(iPe,"A",{href:!0});var _Ct=s(fY);Hkr=r(_Ct,"FlaxXLMRobertaForSequenceClassification"),_Ct.forEach(t),Ukr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),Pe.forEach(t),Jkr=i(Ul),T(R5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),$qe=i(f),Xc=n(f,"H2",{class:!0});var qje=s(Xc);B5=n(qje,"A",{id:!0,class:!0,href:!0});var bCt=s(B5);n9e=n(bCt,"SPAN",{});var vCt=s(n9e);T(wx.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),Ykr=i(qje),s9e=n(qje,"SPAN",{});var FCt=s(s9e);Kkr=r(FCt,"FlaxAutoModelForQuestionAnswering"),FCt.forEach(t),qje.forEach(t),kqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Ax.$$.fragment,Jl),Zkr=i(Jl),zc=n(Jl,"P",{});var DZ=s(zc);eSr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mY=n(DZ,"A",{href:!0});var TCt=s(mY);oSr=r(TCt,"from_pretrained()"),TCt.forEach(t),rSr=r(DZ," class method or the "),gY=n(DZ,"A",{href:!0});var MCt=s(gY);tSr=r(MCt,"from_config()"),MCt.forEach(t),aSr=r(DZ,` class
method.`),DZ.forEach(t),nSr=i(Jl),yx=n(Jl,"P",{});var Nje=s(yx);sSr=r(Nje,"This class cannot be instantiated directly using "),l9e=n(Nje,"CODE",{});var ECt=s(l9e);lSr=r(ECt,"__init__()"),ECt.forEach(t),iSr=r(Nje," (throws an error)."),Nje.forEach(t),dSr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Pw=s(zt);T(Lx.$$.fragment,Pw),cSr=i(Pw),i9e=n(Pw,"P",{});var CCt=s(i9e);fSr=r(CCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CCt.forEach(t),mSr=i(Pw),Qc=n(Pw,"P",{});var GZ=s(Qc);gSr=r(GZ,`Note:
Loading a model from its configuration file does `),d9e=n(GZ,"STRONG",{});var wCt=s(d9e);hSr=r(wCt,"not"),wCt.forEach(t),pSr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(GZ,"A",{href:!0});var ACt=s(hY);uSr=r(ACt,"from_pretrained()"),ACt.forEach(t),_Sr=r(GZ," to load the model weights."),GZ.forEach(t),bSr=i(Pw),T(P5.$$.fragment,Pw),Pw.forEach(t),vSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(xx.$$.fragment,Yl),FSr=i(Yl),c9e=n(Yl,"P",{});var yCt=s(c9e);TSr=r(yCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yCt.forEach(t),MSr=i(Yl),Fn=n(Yl,"P",{});var Iw=s(Fn);ESr=r(Iw,"The model class to instantiate is selected based on the "),f9e=n(Iw,"CODE",{});var LCt=s(f9e);CSr=r(LCt,"model_type"),LCt.forEach(t),wSr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),m9e=n(Iw,"CODE",{});var xCt=s(m9e);ASr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),ySr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=n(Iw,"CODE",{});var $Ct=s(g9e);LSr=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),xSr=r(Iw,":"),Iw.forEach(t),$Sr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);I5=n(Ie,"LI",{});var dPe=s(I5);h9e=n(dPe,"STRONG",{});var kCt=s(h9e);kSr=r(kCt,"albert"),kCt.forEach(t),SSr=r(dPe," \u2014 "),pY=n(dPe,"A",{href:!0});var SCt=s(pY);RSr=r(SCt,"FlaxAlbertForQuestionAnswering"),SCt.forEach(t),BSr=r(dPe," (ALBERT model)"),dPe.forEach(t),PSr=i(Ie),q5=n(Ie,"LI",{});var cPe=s(q5);p9e=n(cPe,"STRONG",{});var RCt=s(p9e);ISr=r(RCt,"bart"),RCt.forEach(t),qSr=r(cPe," \u2014 "),uY=n(cPe,"A",{href:!0});var BCt=s(uY);NSr=r(BCt,"FlaxBartForQuestionAnswering"),BCt.forEach(t),jSr=r(cPe," (BART model)"),cPe.forEach(t),DSr=i(Ie),N5=n(Ie,"LI",{});var fPe=s(N5);u9e=n(fPe,"STRONG",{});var PCt=s(u9e);GSr=r(PCt,"bert"),PCt.forEach(t),OSr=r(fPe," \u2014 "),_Y=n(fPe,"A",{href:!0});var ICt=s(_Y);VSr=r(ICt,"FlaxBertForQuestionAnswering"),ICt.forEach(t),XSr=r(fPe," (BERT model)"),fPe.forEach(t),zSr=i(Ie),j5=n(Ie,"LI",{});var mPe=s(j5);_9e=n(mPe,"STRONG",{});var qCt=s(_9e);QSr=r(qCt,"big_bird"),qCt.forEach(t),WSr=r(mPe," \u2014 "),bY=n(mPe,"A",{href:!0});var NCt=s(bY);HSr=r(NCt,"FlaxBigBirdForQuestionAnswering"),NCt.forEach(t),USr=r(mPe," (BigBird model)"),mPe.forEach(t),JSr=i(Ie),D5=n(Ie,"LI",{});var gPe=s(D5);b9e=n(gPe,"STRONG",{});var jCt=s(b9e);YSr=r(jCt,"distilbert"),jCt.forEach(t),KSr=r(gPe," \u2014 "),vY=n(gPe,"A",{href:!0});var DCt=s(vY);ZSr=r(DCt,"FlaxDistilBertForQuestionAnswering"),DCt.forEach(t),eRr=r(gPe," (DistilBERT model)"),gPe.forEach(t),oRr=i(Ie),G5=n(Ie,"LI",{});var hPe=s(G5);v9e=n(hPe,"STRONG",{});var GCt=s(v9e);rRr=r(GCt,"electra"),GCt.forEach(t),tRr=r(hPe," \u2014 "),FY=n(hPe,"A",{href:!0});var OCt=s(FY);aRr=r(OCt,"FlaxElectraForQuestionAnswering"),OCt.forEach(t),nRr=r(hPe," (ELECTRA model)"),hPe.forEach(t),sRr=i(Ie),O5=n(Ie,"LI",{});var pPe=s(O5);F9e=n(pPe,"STRONG",{});var VCt=s(F9e);lRr=r(VCt,"mbart"),VCt.forEach(t),iRr=r(pPe," \u2014 "),TY=n(pPe,"A",{href:!0});var XCt=s(TY);dRr=r(XCt,"FlaxMBartForQuestionAnswering"),XCt.forEach(t),cRr=r(pPe," (mBART model)"),pPe.forEach(t),fRr=i(Ie),V5=n(Ie,"LI",{});var uPe=s(V5);T9e=n(uPe,"STRONG",{});var zCt=s(T9e);mRr=r(zCt,"roberta"),zCt.forEach(t),gRr=r(uPe," \u2014 "),MY=n(uPe,"A",{href:!0});var QCt=s(MY);hRr=r(QCt,"FlaxRobertaForQuestionAnswering"),QCt.forEach(t),pRr=r(uPe," (RoBERTa model)"),uPe.forEach(t),uRr=i(Ie),X5=n(Ie,"LI",{});var _Pe=s(X5);M9e=n(_Pe,"STRONG",{});var WCt=s(M9e);_Rr=r(WCt,"roformer"),WCt.forEach(t),bRr=r(_Pe," \u2014 "),EY=n(_Pe,"A",{href:!0});var HCt=s(EY);vRr=r(HCt,"FlaxRoFormerForQuestionAnswering"),HCt.forEach(t),FRr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),TRr=i(Ie),z5=n(Ie,"LI",{});var bPe=s(z5);E9e=n(bPe,"STRONG",{});var UCt=s(E9e);MRr=r(UCt,"xlm-roberta"),UCt.forEach(t),ERr=r(bPe," \u2014 "),CY=n(bPe,"A",{href:!0});var JCt=s(CY);CRr=r(JCt,"FlaxXLMRobertaForQuestionAnswering"),JCt.forEach(t),wRr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),Ie.forEach(t),ARr=i(Yl),T(Q5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Sqe=i(f),Wc=n(f,"H2",{class:!0});var jje=s(Wc);W5=n(jje,"A",{id:!0,class:!0,href:!0});var YCt=s(W5);C9e=n(YCt,"SPAN",{});var KCt=s(C9e);T($x.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),yRr=i(jje),w9e=n(jje,"SPAN",{});var ZCt=s(w9e);LRr=r(ZCt,"FlaxAutoModelForTokenClassification"),ZCt.forEach(t),jje.forEach(t),Rqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(kx.$$.fragment,Kl),xRr=i(Kl),Hc=n(Kl,"P",{});var OZ=s(Hc);$Rr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=n(OZ,"A",{href:!0});var e3t=s(wY);kRr=r(e3t,"from_pretrained()"),e3t.forEach(t),SRr=r(OZ," class method or the "),AY=n(OZ,"A",{href:!0});var o3t=s(AY);RRr=r(o3t,"from_config()"),o3t.forEach(t),BRr=r(OZ,` class
method.`),OZ.forEach(t),PRr=i(Kl),Sx=n(Kl,"P",{});var Dje=s(Sx);IRr=r(Dje,"This class cannot be instantiated directly using "),A9e=n(Dje,"CODE",{});var r3t=s(A9e);qRr=r(r3t,"__init__()"),r3t.forEach(t),NRr=r(Dje," (throws an error)."),Dje.forEach(t),jRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var qw=s(Qt);T(Rx.$$.fragment,qw),DRr=i(qw),y9e=n(qw,"P",{});var t3t=s(y9e);GRr=r(t3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t3t.forEach(t),ORr=i(qw),Uc=n(qw,"P",{});var VZ=s(Uc);VRr=r(VZ,`Note:
Loading a model from its configuration file does `),L9e=n(VZ,"STRONG",{});var a3t=s(L9e);XRr=r(a3t,"not"),a3t.forEach(t),zRr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(VZ,"A",{href:!0});var n3t=s(yY);QRr=r(n3t,"from_pretrained()"),n3t.forEach(t),WRr=r(VZ," to load the model weights."),VZ.forEach(t),HRr=i(qw),T(H5.$$.fragment,qw),qw.forEach(t),URr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(Bx.$$.fragment,Zl),JRr=i(Zl),x9e=n(Zl,"P",{});var s3t=s(x9e);YRr=r(s3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s3t.forEach(t),KRr=i(Zl),Tn=n(Zl,"P",{});var Nw=s(Tn);ZRr=r(Nw,"The model class to instantiate is selected based on the "),$9e=n(Nw,"CODE",{});var l3t=s($9e);eBr=r(l3t,"model_type"),l3t.forEach(t),oBr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),k9e=n(Nw,"CODE",{});var i3t=s(k9e);rBr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),tBr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=n(Nw,"CODE",{});var d3t=s(S9e);aBr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),nBr=r(Nw,":"),Nw.forEach(t),sBr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);U5=n(Fo,"LI",{});var vPe=s(U5);R9e=n(vPe,"STRONG",{});var c3t=s(R9e);lBr=r(c3t,"albert"),c3t.forEach(t),iBr=r(vPe," \u2014 "),LY=n(vPe,"A",{href:!0});var f3t=s(LY);dBr=r(f3t,"FlaxAlbertForTokenClassification"),f3t.forEach(t),cBr=r(vPe," (ALBERT model)"),vPe.forEach(t),fBr=i(Fo),J5=n(Fo,"LI",{});var FPe=s(J5);B9e=n(FPe,"STRONG",{});var m3t=s(B9e);mBr=r(m3t,"bert"),m3t.forEach(t),gBr=r(FPe," \u2014 "),xY=n(FPe,"A",{href:!0});var g3t=s(xY);hBr=r(g3t,"FlaxBertForTokenClassification"),g3t.forEach(t),pBr=r(FPe," (BERT model)"),FPe.forEach(t),uBr=i(Fo),Y5=n(Fo,"LI",{});var TPe=s(Y5);P9e=n(TPe,"STRONG",{});var h3t=s(P9e);_Br=r(h3t,"big_bird"),h3t.forEach(t),bBr=r(TPe," \u2014 "),$Y=n(TPe,"A",{href:!0});var p3t=s($Y);vBr=r(p3t,"FlaxBigBirdForTokenClassification"),p3t.forEach(t),FBr=r(TPe," (BigBird model)"),TPe.forEach(t),TBr=i(Fo),K5=n(Fo,"LI",{});var MPe=s(K5);I9e=n(MPe,"STRONG",{});var u3t=s(I9e);MBr=r(u3t,"distilbert"),u3t.forEach(t),EBr=r(MPe," \u2014 "),kY=n(MPe,"A",{href:!0});var _3t=s(kY);CBr=r(_3t,"FlaxDistilBertForTokenClassification"),_3t.forEach(t),wBr=r(MPe," (DistilBERT model)"),MPe.forEach(t),ABr=i(Fo),Z5=n(Fo,"LI",{});var EPe=s(Z5);q9e=n(EPe,"STRONG",{});var b3t=s(q9e);yBr=r(b3t,"electra"),b3t.forEach(t),LBr=r(EPe," \u2014 "),SY=n(EPe,"A",{href:!0});var v3t=s(SY);xBr=r(v3t,"FlaxElectraForTokenClassification"),v3t.forEach(t),$Br=r(EPe," (ELECTRA model)"),EPe.forEach(t),kBr=i(Fo),eC=n(Fo,"LI",{});var CPe=s(eC);N9e=n(CPe,"STRONG",{});var F3t=s(N9e);SBr=r(F3t,"roberta"),F3t.forEach(t),RBr=r(CPe," \u2014 "),RY=n(CPe,"A",{href:!0});var T3t=s(RY);BBr=r(T3t,"FlaxRobertaForTokenClassification"),T3t.forEach(t),PBr=r(CPe," (RoBERTa model)"),CPe.forEach(t),IBr=i(Fo),oC=n(Fo,"LI",{});var wPe=s(oC);j9e=n(wPe,"STRONG",{});var M3t=s(j9e);qBr=r(M3t,"roformer"),M3t.forEach(t),NBr=r(wPe," \u2014 "),BY=n(wPe,"A",{href:!0});var E3t=s(BY);jBr=r(E3t,"FlaxRoFormerForTokenClassification"),E3t.forEach(t),DBr=r(wPe," (RoFormer model)"),wPe.forEach(t),GBr=i(Fo),rC=n(Fo,"LI",{});var APe=s(rC);D9e=n(APe,"STRONG",{});var C3t=s(D9e);OBr=r(C3t,"xlm-roberta"),C3t.forEach(t),VBr=r(APe," \u2014 "),PY=n(APe,"A",{href:!0});var w3t=s(PY);XBr=r(w3t,"FlaxXLMRobertaForTokenClassification"),w3t.forEach(t),zBr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),Fo.forEach(t),QBr=i(Zl),T(tC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Bqe=i(f),Jc=n(f,"H2",{class:!0});var Gje=s(Jc);aC=n(Gje,"A",{id:!0,class:!0,href:!0});var A3t=s(aC);G9e=n(A3t,"SPAN",{});var y3t=s(G9e);T(Px.$$.fragment,y3t),y3t.forEach(t),A3t.forEach(t),WBr=i(Gje),O9e=n(Gje,"SPAN",{});var L3t=s(O9e);HBr=r(L3t,"FlaxAutoModelForMultipleChoice"),L3t.forEach(t),Gje.forEach(t),Pqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Ix.$$.fragment,ei),UBr=i(ei),Yc=n(ei,"P",{});var XZ=s(Yc);JBr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=n(XZ,"A",{href:!0});var x3t=s(IY);YBr=r(x3t,"from_pretrained()"),x3t.forEach(t),KBr=r(XZ," class method or the "),qY=n(XZ,"A",{href:!0});var $3t=s(qY);ZBr=r($3t,"from_config()"),$3t.forEach(t),ePr=r(XZ,` class
method.`),XZ.forEach(t),oPr=i(ei),qx=n(ei,"P",{});var Oje=s(qx);rPr=r(Oje,"This class cannot be instantiated directly using "),V9e=n(Oje,"CODE",{});var k3t=s(V9e);tPr=r(k3t,"__init__()"),k3t.forEach(t),aPr=r(Oje," (throws an error)."),Oje.forEach(t),nPr=i(ei),Wt=n(ei,"DIV",{class:!0});var jw=s(Wt);T(Nx.$$.fragment,jw),sPr=i(jw),X9e=n(jw,"P",{});var S3t=s(X9e);lPr=r(S3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S3t.forEach(t),iPr=i(jw),Kc=n(jw,"P",{});var zZ=s(Kc);dPr=r(zZ,`Note:
Loading a model from its configuration file does `),z9e=n(zZ,"STRONG",{});var R3t=s(z9e);cPr=r(R3t,"not"),R3t.forEach(t),fPr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(zZ,"A",{href:!0});var B3t=s(NY);mPr=r(B3t,"from_pretrained()"),B3t.forEach(t),gPr=r(zZ," to load the model weights."),zZ.forEach(t),hPr=i(jw),T(nC.$$.fragment,jw),jw.forEach(t),pPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(jx.$$.fragment,oi),uPr=i(oi),Q9e=n(oi,"P",{});var P3t=s(Q9e);_Pr=r(P3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P3t.forEach(t),bPr=i(oi),Mn=n(oi,"P",{});var Dw=s(Mn);vPr=r(Dw,"The model class to instantiate is selected based on the "),W9e=n(Dw,"CODE",{});var I3t=s(W9e);FPr=r(I3t,"model_type"),I3t.forEach(t),TPr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),H9e=n(Dw,"CODE",{});var q3t=s(H9e);MPr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),EPr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=n(Dw,"CODE",{});var N3t=s(U9e);CPr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),wPr=r(Dw,":"),Dw.forEach(t),APr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);sC=n(To,"LI",{});var yPe=s(sC);J9e=n(yPe,"STRONG",{});var j3t=s(J9e);yPr=r(j3t,"albert"),j3t.forEach(t),LPr=r(yPe," \u2014 "),jY=n(yPe,"A",{href:!0});var D3t=s(jY);xPr=r(D3t,"FlaxAlbertForMultipleChoice"),D3t.forEach(t),$Pr=r(yPe," (ALBERT model)"),yPe.forEach(t),kPr=i(To),lC=n(To,"LI",{});var LPe=s(lC);Y9e=n(LPe,"STRONG",{});var G3t=s(Y9e);SPr=r(G3t,"bert"),G3t.forEach(t),RPr=r(LPe," \u2014 "),DY=n(LPe,"A",{href:!0});var O3t=s(DY);BPr=r(O3t,"FlaxBertForMultipleChoice"),O3t.forEach(t),PPr=r(LPe," (BERT model)"),LPe.forEach(t),IPr=i(To),iC=n(To,"LI",{});var xPe=s(iC);K9e=n(xPe,"STRONG",{});var V3t=s(K9e);qPr=r(V3t,"big_bird"),V3t.forEach(t),NPr=r(xPe," \u2014 "),GY=n(xPe,"A",{href:!0});var X3t=s(GY);jPr=r(X3t,"FlaxBigBirdForMultipleChoice"),X3t.forEach(t),DPr=r(xPe," (BigBird model)"),xPe.forEach(t),GPr=i(To),dC=n(To,"LI",{});var $Pe=s(dC);Z9e=n($Pe,"STRONG",{});var z3t=s(Z9e);OPr=r(z3t,"distilbert"),z3t.forEach(t),VPr=r($Pe," \u2014 "),OY=n($Pe,"A",{href:!0});var Q3t=s(OY);XPr=r(Q3t,"FlaxDistilBertForMultipleChoice"),Q3t.forEach(t),zPr=r($Pe," (DistilBERT model)"),$Pe.forEach(t),QPr=i(To),cC=n(To,"LI",{});var kPe=s(cC);eMe=n(kPe,"STRONG",{});var W3t=s(eMe);WPr=r(W3t,"electra"),W3t.forEach(t),HPr=r(kPe," \u2014 "),VY=n(kPe,"A",{href:!0});var H3t=s(VY);UPr=r(H3t,"FlaxElectraForMultipleChoice"),H3t.forEach(t),JPr=r(kPe," (ELECTRA model)"),kPe.forEach(t),YPr=i(To),fC=n(To,"LI",{});var SPe=s(fC);oMe=n(SPe,"STRONG",{});var U3t=s(oMe);KPr=r(U3t,"roberta"),U3t.forEach(t),ZPr=r(SPe," \u2014 "),XY=n(SPe,"A",{href:!0});var J3t=s(XY);eIr=r(J3t,"FlaxRobertaForMultipleChoice"),J3t.forEach(t),oIr=r(SPe," (RoBERTa model)"),SPe.forEach(t),rIr=i(To),mC=n(To,"LI",{});var RPe=s(mC);rMe=n(RPe,"STRONG",{});var Y3t=s(rMe);tIr=r(Y3t,"roformer"),Y3t.forEach(t),aIr=r(RPe," \u2014 "),zY=n(RPe,"A",{href:!0});var K3t=s(zY);nIr=r(K3t,"FlaxRoFormerForMultipleChoice"),K3t.forEach(t),sIr=r(RPe," (RoFormer model)"),RPe.forEach(t),lIr=i(To),gC=n(To,"LI",{});var BPe=s(gC);tMe=n(BPe,"STRONG",{});var Z3t=s(tMe);iIr=r(Z3t,"xlm-roberta"),Z3t.forEach(t),dIr=r(BPe," \u2014 "),QY=n(BPe,"A",{href:!0});var ewt=s(QY);cIr=r(ewt,"FlaxXLMRobertaForMultipleChoice"),ewt.forEach(t),fIr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),To.forEach(t),mIr=i(oi),T(hC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Iqe=i(f),Zc=n(f,"H2",{class:!0});var Vje=s(Zc);pC=n(Vje,"A",{id:!0,class:!0,href:!0});var owt=s(pC);aMe=n(owt,"SPAN",{});var rwt=s(aMe);T(Dx.$$.fragment,rwt),rwt.forEach(t),owt.forEach(t),gIr=i(Vje),nMe=n(Vje,"SPAN",{});var twt=s(nMe);hIr=r(twt,"FlaxAutoModelForNextSentencePrediction"),twt.forEach(t),Vje.forEach(t),qqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Gx.$$.fragment,ri),pIr=i(ri),ef=n(ri,"P",{});var QZ=s(ef);uIr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=n(QZ,"A",{href:!0});var awt=s(WY);_Ir=r(awt,"from_pretrained()"),awt.forEach(t),bIr=r(QZ," class method or the "),HY=n(QZ,"A",{href:!0});var nwt=s(HY);vIr=r(nwt,"from_config()"),nwt.forEach(t),FIr=r(QZ,` class
method.`),QZ.forEach(t),TIr=i(ri),Ox=n(ri,"P",{});var Xje=s(Ox);MIr=r(Xje,"This class cannot be instantiated directly using "),sMe=n(Xje,"CODE",{});var swt=s(sMe);EIr=r(swt,"__init__()"),swt.forEach(t),CIr=r(Xje," (throws an error)."),Xje.forEach(t),wIr=i(ri),Ht=n(ri,"DIV",{class:!0});var Gw=s(Ht);T(Vx.$$.fragment,Gw),AIr=i(Gw),lMe=n(Gw,"P",{});var lwt=s(lMe);yIr=r(lwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lwt.forEach(t),LIr=i(Gw),of=n(Gw,"P",{});var WZ=s(of);xIr=r(WZ,`Note:
Loading a model from its configuration file does `),iMe=n(WZ,"STRONG",{});var iwt=s(iMe);$Ir=r(iwt,"not"),iwt.forEach(t),kIr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(WZ,"A",{href:!0});var dwt=s(UY);SIr=r(dwt,"from_pretrained()"),dwt.forEach(t),RIr=r(WZ," to load the model weights."),WZ.forEach(t),BIr=i(Gw),T(uC.$$.fragment,Gw),Gw.forEach(t),PIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Xx.$$.fragment,ti),IIr=i(ti),dMe=n(ti,"P",{});var cwt=s(dMe);qIr=r(cwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cwt.forEach(t),NIr=i(ti),En=n(ti,"P",{});var Ow=s(En);jIr=r(Ow,"The model class to instantiate is selected based on the "),cMe=n(Ow,"CODE",{});var fwt=s(cMe);DIr=r(fwt,"model_type"),fwt.forEach(t),GIr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),fMe=n(Ow,"CODE",{});var mwt=s(fMe);OIr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),VIr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(Ow,"CODE",{});var gwt=s(mMe);XIr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),zIr=r(Ow,":"),Ow.forEach(t),QIr=i(ti),gMe=n(ti,"UL",{});var hwt=s(gMe);_C=n(hwt,"LI",{});var PPe=s(_C);hMe=n(PPe,"STRONG",{});var pwt=s(hMe);WIr=r(pwt,"bert"),pwt.forEach(t),HIr=r(PPe," \u2014 "),JY=n(PPe,"A",{href:!0});var uwt=s(JY);UIr=r(uwt,"FlaxBertForNextSentencePrediction"),uwt.forEach(t),JIr=r(PPe," (BERT model)"),PPe.forEach(t),hwt.forEach(t),YIr=i(ti),T(bC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Nqe=i(f),rf=n(f,"H2",{class:!0});var zje=s(rf);vC=n(zje,"A",{id:!0,class:!0,href:!0});var _wt=s(vC);pMe=n(_wt,"SPAN",{});var bwt=s(pMe);T(zx.$$.fragment,bwt),bwt.forEach(t),_wt.forEach(t),KIr=i(zje),uMe=n(zje,"SPAN",{});var vwt=s(uMe);ZIr=r(vwt,"FlaxAutoModelForImageClassification"),vwt.forEach(t),zje.forEach(t),jqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Qx.$$.fragment,ai),eqr=i(ai),tf=n(ai,"P",{});var HZ=s(tf);oqr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=n(HZ,"A",{href:!0});var Fwt=s(YY);rqr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),tqr=r(HZ," class method or the "),KY=n(HZ,"A",{href:!0});var Twt=s(KY);aqr=r(Twt,"from_config()"),Twt.forEach(t),nqr=r(HZ,` class
method.`),HZ.forEach(t),sqr=i(ai),Wx=n(ai,"P",{});var Qje=s(Wx);lqr=r(Qje,"This class cannot be instantiated directly using "),_Me=n(Qje,"CODE",{});var Mwt=s(_Me);iqr=r(Mwt,"__init__()"),Mwt.forEach(t),dqr=r(Qje," (throws an error)."),Qje.forEach(t),cqr=i(ai),Ut=n(ai,"DIV",{class:!0});var Vw=s(Ut);T(Hx.$$.fragment,Vw),fqr=i(Vw),bMe=n(Vw,"P",{});var Ewt=s(bMe);mqr=r(Ewt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ewt.forEach(t),gqr=i(Vw),af=n(Vw,"P",{});var UZ=s(af);hqr=r(UZ,`Note:
Loading a model from its configuration file does `),vMe=n(UZ,"STRONG",{});var Cwt=s(vMe);pqr=r(Cwt,"not"),Cwt.forEach(t),uqr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(UZ,"A",{href:!0});var wwt=s(ZY);_qr=r(wwt,"from_pretrained()"),wwt.forEach(t),bqr=r(UZ," to load the model weights."),UZ.forEach(t),vqr=i(Vw),T(FC.$$.fragment,Vw),Vw.forEach(t),Fqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Ux.$$.fragment,ni),Tqr=i(ni),FMe=n(ni,"P",{});var Awt=s(FMe);Mqr=r(Awt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Awt.forEach(t),Eqr=i(ni),Cn=n(ni,"P",{});var Xw=s(Cn);Cqr=r(Xw,"The model class to instantiate is selected based on the "),TMe=n(Xw,"CODE",{});var ywt=s(TMe);wqr=r(ywt,"model_type"),ywt.forEach(t),Aqr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),MMe=n(Xw,"CODE",{});var Lwt=s(MMe);yqr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),Lqr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(Xw,"CODE",{});var xwt=s(EMe);xqr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),$qr=r(Xw,":"),Xw.forEach(t),kqr=i(ni),Jx=n(ni,"UL",{});var Wje=s(Jx);TC=n(Wje,"LI",{});var IPe=s(TC);CMe=n(IPe,"STRONG",{});var $wt=s(CMe);Sqr=r($wt,"beit"),$wt.forEach(t),Rqr=r(IPe," \u2014 "),eK=n(IPe,"A",{href:!0});var kwt=s(eK);Bqr=r(kwt,"FlaxBeitForImageClassification"),kwt.forEach(t),Pqr=r(IPe," (BEiT model)"),IPe.forEach(t),Iqr=i(Wje),MC=n(Wje,"LI",{});var qPe=s(MC);wMe=n(qPe,"STRONG",{});var Swt=s(wMe);qqr=r(Swt,"vit"),Swt.forEach(t),Nqr=r(qPe," \u2014 "),oK=n(qPe,"A",{href:!0});var Rwt=s(oK);jqr=r(Rwt,"FlaxViTForImageClassification"),Rwt.forEach(t),Dqr=r(qPe," (ViT model)"),qPe.forEach(t),Wje.forEach(t),Gqr=i(ni),T(EC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Dqe=i(f),nf=n(f,"H2",{class:!0});var Hje=s(nf);CC=n(Hje,"A",{id:!0,class:!0,href:!0});var Bwt=s(CC);AMe=n(Bwt,"SPAN",{});var Pwt=s(AMe);T(Yx.$$.fragment,Pwt),Pwt.forEach(t),Bwt.forEach(t),Oqr=i(Hje),yMe=n(Hje,"SPAN",{});var Iwt=s(yMe);Vqr=r(Iwt,"FlaxAutoModelForVision2Seq"),Iwt.forEach(t),Hje.forEach(t),Gqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(Kx.$$.fragment,si),Xqr=i(si),sf=n(si,"P",{});var JZ=s(sf);zqr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=n(JZ,"A",{href:!0});var qwt=s(rK);Qqr=r(qwt,"from_pretrained()"),qwt.forEach(t),Wqr=r(JZ," class method or the "),tK=n(JZ,"A",{href:!0});var Nwt=s(tK);Hqr=r(Nwt,"from_config()"),Nwt.forEach(t),Uqr=r(JZ,` class
method.`),JZ.forEach(t),Jqr=i(si),Zx=n(si,"P",{});var Uje=s(Zx);Yqr=r(Uje,"This class cannot be instantiated directly using "),LMe=n(Uje,"CODE",{});var jwt=s(LMe);Kqr=r(jwt,"__init__()"),jwt.forEach(t),Zqr=r(Uje," (throws an error)."),Uje.forEach(t),eNr=i(si),Jt=n(si,"DIV",{class:!0});var zw=s(Jt);T(e7.$$.fragment,zw),oNr=i(zw),xMe=n(zw,"P",{});var Dwt=s(xMe);rNr=r(Dwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dwt.forEach(t),tNr=i(zw),lf=n(zw,"P",{});var YZ=s(lf);aNr=r(YZ,`Note:
Loading a model from its configuration file does `),$Me=n(YZ,"STRONG",{});var Gwt=s($Me);nNr=r(Gwt,"not"),Gwt.forEach(t),sNr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(YZ,"A",{href:!0});var Owt=s(aK);lNr=r(Owt,"from_pretrained()"),Owt.forEach(t),iNr=r(YZ," to load the model weights."),YZ.forEach(t),dNr=i(zw),T(wC.$$.fragment,zw),zw.forEach(t),cNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(o7.$$.fragment,li),fNr=i(li),kMe=n(li,"P",{});var Vwt=s(kMe);mNr=r(Vwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vwt.forEach(t),gNr=i(li),wn=n(li,"P",{});var Qw=s(wn);hNr=r(Qw,"The model class to instantiate is selected based on the "),SMe=n(Qw,"CODE",{});var Xwt=s(SMe);pNr=r(Xwt,"model_type"),Xwt.forEach(t),uNr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),RMe=n(Qw,"CODE",{});var zwt=s(RMe);_Nr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),bNr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(Qw,"CODE",{});var Qwt=s(BMe);vNr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),FNr=r(Qw,":"),Qw.forEach(t),TNr=i(li),PMe=n(li,"UL",{});var Wwt=s(PMe);AC=n(Wwt,"LI",{});var NPe=s(AC);IMe=n(NPe,"STRONG",{});var Hwt=s(IMe);MNr=r(Hwt,"vision-encoder-decoder"),Hwt.forEach(t),ENr=r(NPe," \u2014 "),nK=n(NPe,"A",{href:!0});var Uwt=s(nK);CNr=r(Uwt,"FlaxVisionEncoderDecoderModel"),Uwt.forEach(t),wNr=r(NPe," (Vision Encoder decoder model)"),NPe.forEach(t),Wwt.forEach(t),ANr=i(li),T(yC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Z0t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(F$,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(T$,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig"),c(M$,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(E$,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig"),c(C$,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig"),c(w$,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(A$,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig"),c(y$,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L$,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(x$,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c($$,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig"),c(k$,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig"),c(S$,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig"),c(R$,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig"),c(B$,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig"),c(I$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(q$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(N$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(j$,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig"),c(D$,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(G$,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(O$,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig"),c(V$,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig"),c(X$,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z$,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig"),c(Q$,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig"),c(W$,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig"),c(H$,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(U$,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig"),c(J$,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaConfig"),c(Y$,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig"),c(K$,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig"),c(Z$,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig"),c(ek,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig"),c(ok,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config"),c(rk,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tk,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig"),c(ak,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig"),c(nk,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig"),c(sk,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lk,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ik,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dk,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig"),c(fk,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig"),c(mk,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig"),c(pk,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uk,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vk,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig"),c(Fk,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTConfig"),c(Ck,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig"),c(wk,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ak,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig"),c(yk,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Lk,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(xk,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig"),c($k,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagConfig"),c(kk,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmConfig"),c(Sk,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig"),c(Rk,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig"),c(Bk,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig"),c(Pk,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig"),c(Ik,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig"),c(qk,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig"),c(Nk,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig"),c(jk,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig"),c(Dk,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig"),c(Gk,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ok,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Vk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Xk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(zk,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig"),c(Qk,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Wk,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig"),c(Hk,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config"),c(Uk,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig"),c(Jk,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Yk,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig"),c(Kk,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Zk,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eS,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig"),c(oS,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig"),c(rS,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tS,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aS,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nS,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig"),c(sS,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lS,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(iS,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig"),c(dS,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig"),c(cS,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig"),c(fS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(mS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(gS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(hS,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig"),c(pS,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig"),c(uS,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(_S,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(bS,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(vS,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FS,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizer"),c(TS,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizerFast"),c(MS,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ES,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(CS,"href","/docs/transformers/pr_16988/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(wS,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(AS,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(yS,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LS,"href","/docs/transformers/pr_16988/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(xS,"href","/docs/transformers/pr_16988/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($S,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(kS,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(SS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(IS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(qS,"href","/docs/transformers/pr_16988/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DS,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineTokenizer"),c(GS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizer"),c(OS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizer"),c(QS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(WS,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(US,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JS,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YS,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KS,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZS,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eR,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oR,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tR,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aR,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizer"),c(nR,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sR,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lR,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizer"),c(iR,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dR,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cR,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fR,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizer"),c(vR,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(FR,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(CR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(AR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(yR,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(LR,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xR,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizer"),c($R,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizerFast"),c(kR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizer"),c(SR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RR,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeTokenizer"),c(BR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(IR,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(qR,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianTokenizer"),c(NR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizer"),c(jR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(GR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(OR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(VR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(XR,"href","/docs/transformers/pr_16988/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(HR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(UR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(JR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YR,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(KR,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(eB,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(oB,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tB,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aB,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(nB,"href","/docs/transformers/pr_16988/en/model_doc/phobert#transformers.PhobertTokenizer"),c(sB,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartTokenizer"),c(lB,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(iB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagTokenizer"),c(fB,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizer"),c(mB,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizerFast"),c(gB,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizer"),c(hB,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(pB,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uB,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(bB,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TB,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(MB,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(EB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(CB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(wB,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizer"),c(AB,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yB,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LB,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c($B,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kB,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasTokenizer"),c(SB,"href","/docs/transformers/pr_16988/en/model_doc/tapex#transformers.TapexTokenizer"),c(RB,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(PB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DB,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMTokenizer"),c(GB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(OB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(UB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(JB,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YB,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rP,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tP,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nP,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cP,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fP,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_P,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TP,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(MP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPProcessor"),c(CP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wP,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(AP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(xP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c($P,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRProcessor"),c(kP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltProcessor"),c(BP,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(PP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(qP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DP,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel"),c(GP,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel"),c(OP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel"),c(VP,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(XP,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(zP,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel"),c(QP,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(HP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(UP,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel"),c(JP,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel"),c(YP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel"),c(KP,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel"),c(ZP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel"),c(eI,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel"),c(oI,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(rI,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(tI,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(aI,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel"),c(nI,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(sI,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(lI,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel"),c(iI,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel"),c(dI,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel"),c(cI,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fI,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel"),c(mI,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel"),c(gI,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel"),c(hI,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaModel"),c(pI,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel"),c(uI,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel"),c(_I,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel"),c(bI,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel"),c(vI,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel"),c(FI,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model"),c(TI,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MI,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel"),c(EI,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel"),c(CI,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel"),c(wI,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(AI,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yI,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LI,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel"),c(xI,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel"),c($I,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel"),c(kI,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel"),c(SI,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model"),c(RI,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel"),c(BI,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PI,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel"),c(II,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(qI,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NI,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel"),c(jI,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model"),c(DI,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel"),c(GI,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(OI,"href","/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTModel"),c(VI,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel"),c(XI,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel"),c(zI,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel"),c(QI,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WI,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(HI,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel"),c(UI,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel"),c(JI,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel"),c(YI,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel"),c(KI,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel"),c(ZI,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(eq,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel"),c(oq,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel"),c(rq,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel"),c(tq,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel"),c(aq,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel"),c(nq,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sq,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel"),c(lq,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iq,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel"),c(dq,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model"),c(cq,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel"),c(fq,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(mq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hq,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel"),c(pq,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel"),c(uq,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(_q,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bq,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel"),c(vq,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Fq,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tq,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel"),c(Mq,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel"),c(Eq,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel"),c(Cq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(wq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Aq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(yq,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel"),c(Lq,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel"),c(xq,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c($q,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rq,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bq,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining"),c(Iq,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qq,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jq,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dq,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gq,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Xq,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zq,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Qq,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Wq,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hq,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Uq,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jq,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yq,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kq,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zq,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eN,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oN,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rN,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tN,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aN,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(nN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sN,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lN,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iN,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dN,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cN,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fN,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mN,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gN,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hN,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pN,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bN,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(vN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM"),c(EN,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel"),c(CN,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(wN,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(AN,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yN,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(LN,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(xN,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($N,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kN,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(SN,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM"),c(RN,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BN,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(PN,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(IN,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM"),c(qN,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM"),c(NN,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jN,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTForCausalLM"),c(GN,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(ON,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(VN,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(XN,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zN,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(QN,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(WN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(HN,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(UN,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(JN,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(YN,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(KN,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(ZN,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tj,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m1,"id","transformers.AutoModelForMaskedLM"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(aj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lj,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ij,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM"),c(cj,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fj,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mj,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gj,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hj,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uj,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bj,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xj,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($j,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qj,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSeq2SeqLM"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Gj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Uj,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel"),c(Zj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_8,"id","transformers.AutoModelForSequenceClassification"),c(_8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_8,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(sD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(oG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(dG,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(AG,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yG,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c($G,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForNextSentencePrediction"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(RG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(NG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(DG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o2,"id","transformers.AutoModelForTokenClassification"),c(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o2,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(GG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification"),c(QG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(HG,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification"),c(UG,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(YG,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(KG,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(eO,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oO,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rO,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tO,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(aO,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nO,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iO,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dO,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(mO,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(gO,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(uO,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(_O,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(vO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(FO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(TO,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(MO,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForQuestionAnswering"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(EO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(DO,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(cV,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForTableQuestionAnswering"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(fV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForImageClassification"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(pV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification"),c(vV,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(FV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(TV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification"),c(MV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(EV,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(CV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(yV,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LV,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xV,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($V,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kV,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification"),c(SV,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification"),c(RV,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForVision2Seq"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(BV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForAudioClassification"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(NV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(OV,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(XV,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(zV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(QV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(WV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(HV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForAudioFrameClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(UV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(ZV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(eX,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(oX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForCTC"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(rX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(sX,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC"),c(lX,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC"),c(iX,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(fX,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(mX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForSpeechSeq2Seq"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(gX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(_X,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForAudioXVector"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(bX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(MX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(EX,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(CX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForMaskedImageModeling"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(wX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xX,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c($X,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForObjectDetection"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(kX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection"),c(PX,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.AutoModelForImageSegmentation"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(IX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.AutoModelForSemanticSegmentation"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(DX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(XX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(zX,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(QX,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.AutoModelForInstanceSegmentation"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(WX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T6,"id","transformers.TFAutoModel"),c(T6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T6,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(YX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel"),c(oz,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel"),c(rz,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel"),c(tz,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(az,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(nz,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel"),c(sz,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel"),c(lz,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel"),c(iz,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel"),c(dz,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel"),c(cz,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(fz,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel"),c(mz,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(gz,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(hz,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(pz,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel"),c(uz,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(_z,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel"),c(bz,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(vz,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Fz,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel"),c(Tz,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel"),c(Mz,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Ez,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel"),c(Cz,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel"),c(wz,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Az,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel"),c(yz,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel"),c(Lz,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(xz,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel"),c($z,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model"),c(kz,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Sz,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Rz,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel"),c(Bz,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel"),c(Pz,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Iz,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qz,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel"),c(Nz,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model"),c(jz,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel"),c(Dz,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Gz,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel"),c(Oz,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Vz,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Xz,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel"),c(zz,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Qz,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.TFAutoModelForPreTraining"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Yz,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Zz,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tQ,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nQ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iQ,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fQ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mQ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hQ,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(uQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModelForCausalLM"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CQ,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yQ,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LQ,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xQ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($Q,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kQ,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r9,"id","transformers.TFAutoModelForImageClassification"),c(r9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r9,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NQ,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DQ,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d9,"id","transformers.TFAutoModelForMaskedLM"),c(d9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d9,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JQ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iW,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dW,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(cW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_W,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel"),c(vW,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z9,"id","transformers.TFAutoModelForSequenceClassification"),c(z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z9,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(EW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(qW,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VW,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(QW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(WW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HW,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForMultipleChoice"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(KW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(mH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(pH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(uH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_H,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(bH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(EH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForTokenClassification"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(yH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(BH,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PH,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DH,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(QH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(WH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForQuestionAnswering"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(JH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iU,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_U,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForVision2Seq"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(vU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(EU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.FlaxAutoModel"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(yU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kU,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel"),c(SU,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel"),c(RU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel"),c(BU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PU,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IU,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qU,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NU,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel"),c(DU,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GU,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VU,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel"),c(XU,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zU,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QU,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UU,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model"),c(JU,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YU,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel"),c(KU,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZU,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModelForCausalLM"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(sJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(lJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(iJ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(dJ,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(cJ,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(fJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(mJ,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.FlaxAutoModelForPreTraining"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_J,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(FJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(TJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForMaskedLM"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(SJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(BJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(PJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(HJ,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(sY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iY,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(mY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForTokenClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(wY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(RY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(PY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(IY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(VY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(XY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(QY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(WY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForImageClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(YY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(oK,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForVision2Seq"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(rK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,mf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Ww),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,yn),e(yn,Hw),e(Xe,Ln),e(Xe,xn),e(xn,Uw),e(Xe,mi),e(Xe,$n),e($n,Jw),e(Xe,gi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,h$),e(Ae,hi),e(hi,p$),e(Ae,u$),b(f,Eo,_),b(f,Ea,_),e(Ea,_$),e(Ea,pf),e(pf,b$),e(Ea,Jje),b(f,jPe,_),b(f,pi,_),e(pi,uf),e(uf,KZ),M(Yw,KZ,null),e(pi,Yje),e(pi,ZZ),e(ZZ,Kje),b(f,DPe,_),b(f,kn,_),e(kn,Zje),e(kn,eee),e(eee,eDe),e(kn,oDe),e(kn,oee),e(oee,rDe),e(kn,tDe),b(f,GPe,_),M(Kw,f,_),b(f,OPe,_),b(f,v$,_),e(v$,aDe),b(f,VPe,_),M(_f,f,_),b(f,XPe,_),b(f,ui,_),e(ui,bf),e(bf,ree),M(Zw,ree,null),e(ui,nDe),e(ui,tee),e(tee,sDe),b(f,zPe,_),b(f,Co,_),M(eA,Co,null),e(Co,lDe),e(Co,oA),e(oA,iDe),e(oA,F$),e(F$,dDe),e(oA,cDe),e(Co,fDe),e(Co,rA),e(rA,mDe),e(rA,aee),e(aee,gDe),e(rA,hDe),e(Co,pDe),e(Co,Er),M(tA,Er,null),e(Er,uDe),e(Er,nee),e(nee,_De),e(Er,bDe),e(Er,_i),e(_i,vDe),e(_i,see),e(see,FDe),e(_i,TDe),e(_i,lee),e(lee,MDe),e(_i,EDe),e(Er,CDe),e(Er,y),e(y,vf),e(vf,iee),e(iee,wDe),e(vf,ADe),e(vf,T$),e(T$,yDe),e(vf,LDe),e(y,xDe),e(y,Ff),e(Ff,dee),e(dee,$De),e(Ff,kDe),e(Ff,M$),e(M$,SDe),e(Ff,RDe),e(y,BDe),e(y,Tf),e(Tf,cee),e(cee,PDe),e(Tf,IDe),e(Tf,E$),e(E$,qDe),e(Tf,NDe),e(y,jDe),e(y,Mf),e(Mf,fee),e(fee,DDe),e(Mf,GDe),e(Mf,C$),e(C$,ODe),e(Mf,VDe),e(y,XDe),e(y,Ef),e(Ef,mee),e(mee,zDe),e(Ef,QDe),e(Ef,w$),e(w$,WDe),e(Ef,HDe),e(y,UDe),e(y,Cf),e(Cf,gee),e(gee,JDe),e(Cf,YDe),e(Cf,A$),e(A$,KDe),e(Cf,ZDe),e(y,eGe),e(y,wf),e(wf,hee),e(hee,oGe),e(wf,rGe),e(wf,y$),e(y$,tGe),e(wf,aGe),e(y,nGe),e(y,Af),e(Af,pee),e(pee,sGe),e(Af,lGe),e(Af,L$),e(L$,iGe),e(Af,dGe),e(y,cGe),e(y,yf),e(yf,uee),e(uee,fGe),e(yf,mGe),e(yf,x$),e(x$,gGe),e(yf,hGe),e(y,pGe),e(y,Lf),e(Lf,_ee),e(_ee,uGe),e(Lf,_Ge),e(Lf,$$),e($$,bGe),e(Lf,vGe),e(y,FGe),e(y,xf),e(xf,bee),e(bee,TGe),e(xf,MGe),e(xf,k$),e(k$,EGe),e(xf,CGe),e(y,wGe),e(y,$f),e($f,vee),e(vee,AGe),e($f,yGe),e($f,S$),e(S$,LGe),e($f,xGe),e(y,$Ge),e(y,kf),e(kf,Fee),e(Fee,kGe),e(kf,SGe),e(kf,R$),e(R$,RGe),e(kf,BGe),e(y,PGe),e(y,Sf),e(Sf,Tee),e(Tee,IGe),e(Sf,qGe),e(Sf,B$),e(B$,NGe),e(Sf,jGe),e(y,DGe),e(y,Rf),e(Rf,Mee),e(Mee,GGe),e(Rf,OGe),e(Rf,P$),e(P$,VGe),e(Rf,XGe),e(y,zGe),e(y,Bf),e(Bf,Eee),e(Eee,QGe),e(Bf,WGe),e(Bf,I$),e(I$,HGe),e(Bf,UGe),e(y,JGe),e(y,Pf),e(Pf,Cee),e(Cee,YGe),e(Pf,KGe),e(Pf,q$),e(q$,ZGe),e(Pf,eOe),e(y,oOe),e(y,If),e(If,wee),e(wee,rOe),e(If,tOe),e(If,N$),e(N$,aOe),e(If,nOe),e(y,sOe),e(y,qf),e(qf,Aee),e(Aee,lOe),e(qf,iOe),e(qf,j$),e(j$,dOe),e(qf,cOe),e(y,fOe),e(y,Nf),e(Nf,yee),e(yee,mOe),e(Nf,gOe),e(Nf,D$),e(D$,hOe),e(Nf,pOe),e(y,uOe),e(y,jf),e(jf,Lee),e(Lee,_Oe),e(jf,bOe),e(jf,G$),e(G$,vOe),e(jf,FOe),e(y,TOe),e(y,Df),e(Df,xee),e(xee,MOe),e(Df,EOe),e(Df,O$),e(O$,COe),e(Df,wOe),e(y,AOe),e(y,Gf),e(Gf,$ee),e($ee,yOe),e(Gf,LOe),e(Gf,V$),e(V$,xOe),e(Gf,$Oe),e(y,kOe),e(y,Of),e(Of,kee),e(kee,SOe),e(Of,ROe),e(Of,X$),e(X$,BOe),e(Of,POe),e(y,IOe),e(y,Vf),e(Vf,See),e(See,qOe),e(Vf,NOe),e(Vf,z$),e(z$,jOe),e(Vf,DOe),e(y,GOe),e(y,Xf),e(Xf,Ree),e(Ree,OOe),e(Xf,VOe),e(Xf,Q$),e(Q$,XOe),e(Xf,zOe),e(y,QOe),e(y,zf),e(zf,Bee),e(Bee,WOe),e(zf,HOe),e(zf,W$),e(W$,UOe),e(zf,JOe),e(y,YOe),e(y,Qf),e(Qf,Pee),e(Pee,KOe),e(Qf,ZOe),e(Qf,H$),e(H$,eVe),e(Qf,oVe),e(y,rVe),e(y,Wf),e(Wf,Iee),e(Iee,tVe),e(Wf,aVe),e(Wf,U$),e(U$,nVe),e(Wf,sVe),e(y,lVe),e(y,Hf),e(Hf,qee),e(qee,iVe),e(Hf,dVe),e(Hf,J$),e(J$,cVe),e(Hf,fVe),e(y,mVe),e(y,Uf),e(Uf,Nee),e(Nee,gVe),e(Uf,hVe),e(Uf,Y$),e(Y$,pVe),e(Uf,uVe),e(y,_Ve),e(y,Jf),e(Jf,jee),e(jee,bVe),e(Jf,vVe),e(Jf,K$),e(K$,FVe),e(Jf,TVe),e(y,MVe),e(y,Yf),e(Yf,Dee),e(Dee,EVe),e(Yf,CVe),e(Yf,Z$),e(Z$,wVe),e(Yf,AVe),e(y,yVe),e(y,Kf),e(Kf,Gee),e(Gee,LVe),e(Kf,xVe),e(Kf,ek),e(ek,$Ve),e(Kf,kVe),e(y,SVe),e(y,Zf),e(Zf,Oee),e(Oee,RVe),e(Zf,BVe),e(Zf,ok),e(ok,PVe),e(Zf,IVe),e(y,qVe),e(y,em),e(em,Vee),e(Vee,NVe),e(em,jVe),e(em,rk),e(rk,DVe),e(em,GVe),e(y,OVe),e(y,om),e(om,Xee),e(Xee,VVe),e(om,XVe),e(om,tk),e(tk,zVe),e(om,QVe),e(y,WVe),e(y,rm),e(rm,zee),e(zee,HVe),e(rm,UVe),e(rm,ak),e(ak,JVe),e(rm,YVe),e(y,KVe),e(y,tm),e(tm,Qee),e(Qee,ZVe),e(tm,eXe),e(tm,nk),e(nk,oXe),e(tm,rXe),e(y,tXe),e(y,am),e(am,Wee),e(Wee,aXe),e(am,nXe),e(am,sk),e(sk,sXe),e(am,lXe),e(y,iXe),e(y,nm),e(nm,Hee),e(Hee,dXe),e(nm,cXe),e(nm,lk),e(lk,fXe),e(nm,mXe),e(y,gXe),e(y,sm),e(sm,Uee),e(Uee,hXe),e(sm,pXe),e(sm,ik),e(ik,uXe),e(sm,_Xe),e(y,bXe),e(y,lm),e(lm,Jee),e(Jee,vXe),e(lm,FXe),e(lm,dk),e(dk,TXe),e(lm,MXe),e(y,EXe),e(y,im),e(im,Yee),e(Yee,CXe),e(im,wXe),e(im,ck),e(ck,AXe),e(im,yXe),e(y,LXe),e(y,dm),e(dm,Kee),e(Kee,xXe),e(dm,$Xe),e(dm,fk),e(fk,kXe),e(dm,SXe),e(y,RXe),e(y,cm),e(cm,Zee),e(Zee,BXe),e(cm,PXe),e(cm,mk),e(mk,IXe),e(cm,qXe),e(y,NXe),e(y,fm),e(fm,eoe),e(eoe,jXe),e(fm,DXe),e(fm,gk),e(gk,GXe),e(fm,OXe),e(y,VXe),e(y,mm),e(mm,ooe),e(ooe,XXe),e(mm,zXe),e(mm,hk),e(hk,QXe),e(mm,WXe),e(y,HXe),e(y,gm),e(gm,roe),e(roe,UXe),e(gm,JXe),e(gm,pk),e(pk,YXe),e(gm,KXe),e(y,ZXe),e(y,hm),e(hm,toe),e(toe,eze),e(hm,oze),e(hm,uk),e(uk,rze),e(hm,tze),e(y,aze),e(y,pm),e(pm,aoe),e(aoe,nze),e(pm,sze),e(pm,_k),e(_k,lze),e(pm,ize),e(y,dze),e(y,um),e(um,noe),e(noe,cze),e(um,fze),e(um,bk),e(bk,mze),e(um,gze),e(y,hze),e(y,_m),e(_m,soe),e(soe,pze),e(_m,uze),e(_m,vk),e(vk,_ze),e(_m,bze),e(y,vze),e(y,bm),e(bm,loe),e(loe,Fze),e(bm,Tze),e(bm,Fk),e(Fk,Mze),e(bm,Eze),e(y,Cze),e(y,vm),e(vm,ioe),e(ioe,wze),e(vm,Aze),e(vm,Tk),e(Tk,yze),e(vm,Lze),e(y,xze),e(y,Fm),e(Fm,doe),e(doe,$ze),e(Fm,kze),e(Fm,Mk),e(Mk,Sze),e(Fm,Rze),e(y,Bze),e(y,Tm),e(Tm,coe),e(coe,Pze),e(Tm,Ize),e(Tm,Ek),e(Ek,qze),e(Tm,Nze),e(y,jze),e(y,Mm),e(Mm,foe),e(foe,Dze),e(Mm,Gze),e(Mm,Ck),e(Ck,Oze),e(Mm,Vze),e(y,Xze),e(y,Em),e(Em,moe),e(moe,zze),e(Em,Qze),e(Em,wk),e(wk,Wze),e(Em,Hze),e(y,Uze),e(y,Cm),e(Cm,goe),e(goe,Jze),e(Cm,Yze),e(Cm,Ak),e(Ak,Kze),e(Cm,Zze),e(y,eQe),e(y,wm),e(wm,hoe),e(hoe,oQe),e(wm,rQe),e(wm,yk),e(yk,tQe),e(wm,aQe),e(y,nQe),e(y,Am),e(Am,poe),e(poe,sQe),e(Am,lQe),e(Am,Lk),e(Lk,iQe),e(Am,dQe),e(y,cQe),e(y,ym),e(ym,uoe),e(uoe,fQe),e(ym,mQe),e(ym,xk),e(xk,gQe),e(ym,hQe),e(y,pQe),e(y,Lm),e(Lm,_oe),e(_oe,uQe),e(Lm,_Qe),e(Lm,$k),e($k,bQe),e(Lm,vQe),e(y,FQe),e(y,xm),e(xm,boe),e(boe,TQe),e(xm,MQe),e(xm,kk),e(kk,EQe),e(xm,CQe),e(y,wQe),e(y,$m),e($m,voe),e(voe,AQe),e($m,yQe),e($m,Sk),e(Sk,LQe),e($m,xQe),e(y,$Qe),e(y,km),e(km,Foe),e(Foe,kQe),e(km,SQe),e(km,Rk),e(Rk,RQe),e(km,BQe),e(y,PQe),e(y,Sm),e(Sm,Toe),e(Toe,IQe),e(Sm,qQe),e(Sm,Bk),e(Bk,NQe),e(Sm,jQe),e(y,DQe),e(y,Rm),e(Rm,Moe),e(Moe,GQe),e(Rm,OQe),e(Rm,Pk),e(Pk,VQe),e(Rm,XQe),e(y,zQe),e(y,Bm),e(Bm,Eoe),e(Eoe,QQe),e(Bm,WQe),e(Bm,Ik),e(Ik,HQe),e(Bm,UQe),e(y,JQe),e(y,Pm),e(Pm,Coe),e(Coe,YQe),e(Pm,KQe),e(Pm,qk),e(qk,ZQe),e(Pm,eWe),e(y,oWe),e(y,Im),e(Im,woe),e(woe,rWe),e(Im,tWe),e(Im,Nk),e(Nk,aWe),e(Im,nWe),e(y,sWe),e(y,qm),e(qm,Aoe),e(Aoe,lWe),e(qm,iWe),e(qm,jk),e(jk,dWe),e(qm,cWe),e(y,fWe),e(y,Nm),e(Nm,yoe),e(yoe,mWe),e(Nm,gWe),e(Nm,Dk),e(Dk,hWe),e(Nm,pWe),e(y,uWe),e(y,jm),e(jm,Loe),e(Loe,_We),e(jm,bWe),e(jm,Gk),e(Gk,vWe),e(jm,FWe),e(y,TWe),e(y,Dm),e(Dm,xoe),e(xoe,MWe),e(Dm,EWe),e(Dm,Ok),e(Ok,CWe),e(Dm,wWe),e(y,AWe),e(y,Gm),e(Gm,$oe),e($oe,yWe),e(Gm,LWe),e(Gm,Vk),e(Vk,xWe),e(Gm,$We),e(y,kWe),e(y,Om),e(Om,koe),e(koe,SWe),e(Om,RWe),e(Om,Xk),e(Xk,BWe),e(Om,PWe),e(y,IWe),e(y,Vm),e(Vm,Soe),e(Soe,qWe),e(Vm,NWe),e(Vm,zk),e(zk,jWe),e(Vm,DWe),e(y,GWe),e(y,Xm),e(Xm,Roe),e(Roe,OWe),e(Xm,VWe),e(Xm,Qk),e(Qk,XWe),e(Xm,zWe),e(y,QWe),e(y,zm),e(zm,Boe),e(Boe,WWe),e(zm,HWe),e(zm,Wk),e(Wk,UWe),e(zm,JWe),e(y,YWe),e(y,Qm),e(Qm,Poe),e(Poe,KWe),e(Qm,ZWe),e(Qm,Hk),e(Hk,eHe),e(Qm,oHe),e(y,rHe),e(y,Wm),e(Wm,Ioe),e(Ioe,tHe),e(Wm,aHe),e(Wm,Uk),e(Uk,nHe),e(Wm,sHe),e(y,lHe),e(y,Hm),e(Hm,qoe),e(qoe,iHe),e(Hm,dHe),e(Hm,Jk),e(Jk,cHe),e(Hm,fHe),e(y,mHe),e(y,Um),e(Um,Noe),e(Noe,gHe),e(Um,hHe),e(Um,Yk),e(Yk,pHe),e(Um,uHe),e(y,_He),e(y,Jm),e(Jm,joe),e(joe,bHe),e(Jm,vHe),e(Jm,Kk),e(Kk,FHe),e(Jm,THe),e(y,MHe),e(y,Ym),e(Ym,Doe),e(Doe,EHe),e(Ym,CHe),e(Ym,Zk),e(Zk,wHe),e(Ym,AHe),e(y,yHe),e(y,Km),e(Km,Goe),e(Goe,LHe),e(Km,xHe),e(Km,eS),e(eS,$He),e(Km,kHe),e(y,SHe),e(y,Zm),e(Zm,Ooe),e(Ooe,RHe),e(Zm,BHe),e(Zm,oS),e(oS,PHe),e(Zm,IHe),e(y,qHe),e(y,eg),e(eg,Voe),e(Voe,NHe),e(eg,jHe),e(eg,rS),e(rS,DHe),e(eg,GHe),e(y,OHe),e(y,og),e(og,Xoe),e(Xoe,VHe),e(og,XHe),e(og,tS),e(tS,zHe),e(og,QHe),e(y,WHe),e(y,rg),e(rg,zoe),e(zoe,HHe),e(rg,UHe),e(rg,aS),e(aS,JHe),e(rg,YHe),e(y,KHe),e(y,tg),e(tg,Qoe),e(Qoe,ZHe),e(tg,eUe),e(tg,nS),e(nS,oUe),e(tg,rUe),e(y,tUe),e(y,ag),e(ag,Woe),e(Woe,aUe),e(ag,nUe),e(ag,sS),e(sS,sUe),e(ag,lUe),e(y,iUe),e(y,ng),e(ng,Hoe),e(Hoe,dUe),e(ng,cUe),e(ng,lS),e(lS,fUe),e(ng,mUe),e(y,gUe),e(y,sg),e(sg,Uoe),e(Uoe,hUe),e(sg,pUe),e(sg,iS),e(iS,uUe),e(sg,_Ue),e(y,bUe),e(y,lg),e(lg,Joe),e(Joe,vUe),e(lg,FUe),e(lg,dS),e(dS,TUe),e(lg,MUe),e(y,EUe),e(y,ig),e(ig,Yoe),e(Yoe,CUe),e(ig,wUe),e(ig,cS),e(cS,AUe),e(ig,yUe),e(y,LUe),e(y,dg),e(dg,Koe),e(Koe,xUe),e(dg,$Ue),e(dg,fS),e(fS,kUe),e(dg,SUe),e(y,RUe),e(y,cg),e(cg,Zoe),e(Zoe,BUe),e(cg,PUe),e(cg,mS),e(mS,IUe),e(cg,qUe),e(y,NUe),e(y,fg),e(fg,ere),e(ere,jUe),e(fg,DUe),e(fg,gS),e(gS,GUe),e(fg,OUe),e(y,VUe),e(y,mg),e(mg,ore),e(ore,XUe),e(mg,zUe),e(mg,hS),e(hS,QUe),e(mg,WUe),e(y,HUe),e(y,gg),e(gg,rre),e(rre,UUe),e(gg,JUe),e(gg,pS),e(pS,YUe),e(gg,KUe),e(y,ZUe),e(y,hg),e(hg,tre),e(tre,eJe),e(hg,oJe),e(hg,uS),e(uS,rJe),e(hg,tJe),e(Er,aJe),M(pg,Er,null),e(Co,nJe),e(Co,ug),M(aA,ug,null),e(ug,sJe),e(ug,are),e(are,lJe),b(f,QPe,_),b(f,bi,_),e(bi,_g),e(_g,nre),M(nA,nre,null),e(bi,iJe),e(bi,sre),e(sre,dJe),b(f,WPe,_),b(f,wo,_),M(sA,wo,null),e(wo,cJe),e(wo,lA),e(lA,fJe),e(lA,_S),e(_S,mJe),e(lA,gJe),e(wo,hJe),e(wo,iA),e(iA,pJe),e(iA,lre),e(lre,uJe),e(iA,_Je),e(wo,bJe),e(wo,Cr),M(dA,Cr,null),e(Cr,vJe),e(Cr,ire),e(ire,FJe),e(Cr,TJe),e(Cr,Ca),e(Ca,MJe),e(Ca,dre),e(dre,EJe),e(Ca,CJe),e(Ca,cre),e(cre,wJe),e(Ca,AJe),e(Ca,fre),e(fre,yJe),e(Ca,LJe),e(Cr,xJe),e(Cr,k),e(k,Sn),e(Sn,mre),e(mre,$Je),e(Sn,kJe),e(Sn,bS),e(bS,SJe),e(Sn,RJe),e(Sn,vS),e(vS,BJe),e(Sn,PJe),e(k,IJe),e(k,Rn),e(Rn,gre),e(gre,qJe),e(Rn,NJe),e(Rn,FS),e(FS,jJe),e(Rn,DJe),e(Rn,TS),e(TS,GJe),e(Rn,OJe),e(k,VJe),e(k,Bn),e(Bn,hre),e(hre,XJe),e(Bn,zJe),e(Bn,MS),e(MS,QJe),e(Bn,WJe),e(Bn,ES),e(ES,HJe),e(Bn,UJe),e(k,JJe),e(k,bg),e(bg,pre),e(pre,YJe),e(bg,KJe),e(bg,CS),e(CS,ZJe),e(bg,eYe),e(k,oYe),e(k,Pn),e(Pn,ure),e(ure,rYe),e(Pn,tYe),e(Pn,wS),e(wS,aYe),e(Pn,nYe),e(Pn,AS),e(AS,sYe),e(Pn,lYe),e(k,iYe),e(k,vg),e(vg,_re),e(_re,dYe),e(vg,cYe),e(vg,yS),e(yS,fYe),e(vg,mYe),e(k,gYe),e(k,Fg),e(Fg,bre),e(bre,hYe),e(Fg,pYe),e(Fg,LS),e(LS,uYe),e(Fg,_Ye),e(k,bYe),e(k,Tg),e(Tg,vre),e(vre,vYe),e(Tg,FYe),e(Tg,xS),e(xS,TYe),e(Tg,MYe),e(k,EYe),e(k,In),e(In,Fre),e(Fre,CYe),e(In,wYe),e(In,$S),e($S,AYe),e(In,yYe),e(In,kS),e(kS,LYe),e(In,xYe),e(k,$Ye),e(k,qn),e(qn,Tre),e(Tre,kYe),e(qn,SYe),e(qn,SS),e(SS,RYe),e(qn,BYe),e(qn,RS),e(RS,PYe),e(qn,IYe),e(k,qYe),e(k,Nn),e(Nn,Mre),e(Mre,NYe),e(Nn,jYe),e(Nn,BS),e(BS,DYe),e(Nn,GYe),e(Nn,PS),e(PS,OYe),e(Nn,VYe),e(k,XYe),e(k,Mg),e(Mg,Ere),e(Ere,zYe),e(Mg,QYe),e(Mg,IS),e(IS,WYe),e(Mg,HYe),e(k,UYe),e(k,Eg),e(Eg,Cre),e(Cre,JYe),e(Eg,YYe),e(Eg,qS),e(qS,KYe),e(Eg,ZYe),e(k,eKe),e(k,jn),e(jn,wre),e(wre,oKe),e(jn,rKe),e(jn,NS),e(NS,tKe),e(jn,aKe),e(jn,jS),e(jS,nKe),e(jn,sKe),e(k,lKe),e(k,Cg),e(Cg,Are),e(Are,iKe),e(Cg,dKe),e(Cg,DS),e(DS,cKe),e(Cg,fKe),e(k,mKe),e(k,Dn),e(Dn,yre),e(yre,gKe),e(Dn,hKe),e(Dn,GS),e(GS,pKe),e(Dn,uKe),e(Dn,OS),e(OS,_Ke),e(Dn,bKe),e(k,vKe),e(k,Gn),e(Gn,Lre),e(Lre,FKe),e(Gn,TKe),e(Gn,VS),e(VS,MKe),e(Gn,EKe),e(Gn,XS),e(XS,CKe),e(Gn,wKe),e(k,AKe),e(k,On),e(On,xre),e(xre,yKe),e(On,LKe),e(On,zS),e(zS,xKe),e(On,$Ke),e(On,QS),e(QS,kKe),e(On,SKe),e(k,RKe),e(k,wg),e(wg,$re),e($re,BKe),e(wg,PKe),e(wg,WS),e(WS,IKe),e(wg,qKe),e(k,NKe),e(k,Vn),e(Vn,kre),e(kre,jKe),e(Vn,DKe),e(Vn,HS),e(HS,GKe),e(Vn,OKe),e(Vn,US),e(US,VKe),e(Vn,XKe),e(k,zKe),e(k,Xn),e(Xn,Sre),e(Sre,QKe),e(Xn,WKe),e(Xn,JS),e(JS,HKe),e(Xn,UKe),e(Xn,YS),e(YS,JKe),e(Xn,YKe),e(k,KKe),e(k,zn),e(zn,Rre),e(Rre,ZKe),e(zn,eZe),e(zn,KS),e(KS,oZe),e(zn,rZe),e(zn,ZS),e(ZS,tZe),e(zn,aZe),e(k,nZe),e(k,Qn),e(Qn,Bre),e(Bre,sZe),e(Qn,lZe),e(Qn,eR),e(eR,iZe),e(Qn,dZe),e(Qn,oR),e(oR,cZe),e(Qn,fZe),e(k,mZe),e(k,Wn),e(Wn,Pre),e(Pre,gZe),e(Wn,hZe),e(Wn,rR),e(rR,pZe),e(Wn,uZe),e(Wn,tR),e(tR,_Ze),e(Wn,bZe),e(k,vZe),e(k,Hn),e(Hn,Ire),e(Ire,FZe),e(Hn,TZe),e(Hn,aR),e(aR,MZe),e(Hn,EZe),e(Hn,nR),e(nR,CZe),e(Hn,wZe),e(k,AZe),e(k,Ag),e(Ag,qre),e(qre,yZe),e(Ag,LZe),e(Ag,sR),e(sR,xZe),e(Ag,$Ze),e(k,kZe),e(k,Un),e(Un,Nre),e(Nre,SZe),e(Un,RZe),e(Un,lR),e(lR,BZe),e(Un,PZe),e(Un,iR),e(iR,IZe),e(Un,qZe),e(k,NZe),e(k,yg),e(yg,jre),e(jre,jZe),e(yg,DZe),e(yg,dR),e(dR,GZe),e(yg,OZe),e(k,VZe),e(k,Jn),e(Jn,Dre),e(Dre,XZe),e(Jn,zZe),e(Jn,cR),e(cR,QZe),e(Jn,WZe),e(Jn,fR),e(fR,HZe),e(Jn,UZe),e(k,JZe),e(k,Yn),e(Yn,Gre),e(Gre,YZe),e(Yn,KZe),e(Yn,mR),e(mR,ZZe),e(Yn,eeo),e(Yn,gR),e(gR,oeo),e(Yn,reo),e(k,teo),e(k,Kn),e(Kn,Ore),e(Ore,aeo),e(Kn,neo),e(Kn,hR),e(hR,seo),e(Kn,leo),e(Kn,pR),e(pR,ieo),e(Kn,deo),e(k,ceo),e(k,Zn),e(Zn,Vre),e(Vre,feo),e(Zn,meo),e(Zn,uR),e(uR,geo),e(Zn,heo),e(Zn,_R),e(_R,peo),e(Zn,ueo),e(k,_eo),e(k,es),e(es,Xre),e(Xre,beo),e(es,veo),e(es,bR),e(bR,Feo),e(es,Teo),e(es,vR),e(vR,Meo),e(es,Eeo),e(k,Ceo),e(k,Lg),e(Lg,zre),e(zre,weo),e(Lg,Aeo),e(Lg,FR),e(FR,yeo),e(Lg,Leo),e(k,xeo),e(k,os),e(os,Qre),e(Qre,$eo),e(os,keo),e(os,TR),e(TR,Seo),e(os,Reo),e(os,MR),e(MR,Beo),e(os,Peo),e(k,Ieo),e(k,rs),e(rs,Wre),e(Wre,qeo),e(rs,Neo),e(rs,ER),e(ER,jeo),e(rs,Deo),e(rs,CR),e(CR,Geo),e(rs,Oeo),e(k,Veo),e(k,ts),e(ts,Hre),e(Hre,Xeo),e(ts,zeo),e(ts,wR),e(wR,Qeo),e(ts,Weo),e(ts,AR),e(AR,Heo),e(ts,Ueo),e(k,Jeo),e(k,as),e(as,Ure),e(Ure,Yeo),e(as,Keo),e(as,yR),e(yR,Zeo),e(as,eoo),e(as,LR),e(LR,ooo),e(as,roo),e(k,too),e(k,ns),e(ns,Jre),e(Jre,aoo),e(ns,noo),e(ns,xR),e(xR,soo),e(ns,loo),e(ns,$R),e($R,ioo),e(ns,doo),e(k,coo),e(k,ss),e(ss,Yre),e(Yre,foo),e(ss,moo),e(ss,kR),e(kR,goo),e(ss,hoo),e(ss,SR),e(SR,poo),e(ss,uoo),e(k,_oo),e(k,xg),e(xg,Kre),e(Kre,boo),e(xg,voo),e(xg,RR),e(RR,Foo),e(xg,Too),e(k,Moo),e(k,ls),e(ls,Zre),e(Zre,Eoo),e(ls,Coo),e(ls,BR),e(BR,woo),e(ls,Aoo),e(ls,PR),e(PR,yoo),e(ls,Loo),e(k,xoo),e(k,$g),e($g,ete),e(ete,$oo),e($g,koo),e($g,IR),e(IR,Soo),e($g,Roo),e(k,Boo),e(k,kg),e(kg,ote),e(ote,Poo),e(kg,Ioo),e(kg,qR),e(qR,qoo),e(kg,Noo),e(k,joo),e(k,is),e(is,rte),e(rte,Doo),e(is,Goo),e(is,NR),e(NR,Ooo),e(is,Voo),e(is,jR),e(jR,Xoo),e(is,zoo),e(k,Qoo),e(k,ds),e(ds,tte),e(tte,Woo),e(ds,Hoo),e(ds,DR),e(DR,Uoo),e(ds,Joo),e(ds,GR),e(GR,Yoo),e(ds,Koo),e(k,Zoo),e(k,cs),e(cs,ate),e(ate,ero),e(cs,oro),e(cs,OR),e(OR,rro),e(cs,tro),e(cs,VR),e(VR,aro),e(cs,nro),e(k,sro),e(k,Sg),e(Sg,nte),e(nte,lro),e(Sg,iro),e(Sg,XR),e(XR,dro),e(Sg,cro),e(k,fro),e(k,fs),e(fs,ste),e(ste,mro),e(fs,gro),e(fs,zR),e(zR,hro),e(fs,pro),e(fs,QR),e(QR,uro),e(fs,_ro),e(k,bro),e(k,ms),e(ms,lte),e(lte,vro),e(ms,Fro),e(ms,WR),e(WR,Tro),e(ms,Mro),e(ms,HR),e(HR,Ero),e(ms,Cro),e(k,wro),e(k,gs),e(gs,ite),e(ite,Aro),e(gs,yro),e(gs,UR),e(UR,Lro),e(gs,xro),e(gs,JR),e(JR,$ro),e(gs,kro),e(k,Sro),e(k,hs),e(hs,dte),e(dte,Rro),e(hs,Bro),e(hs,YR),e(YR,Pro),e(hs,Iro),e(hs,KR),e(KR,qro),e(hs,Nro),e(k,jro),e(k,ps),e(ps,cte),e(cte,Dro),e(ps,Gro),e(ps,ZR),e(ZR,Oro),e(ps,Vro),e(ps,eB),e(eB,Xro),e(ps,zro),e(k,Qro),e(k,Rg),e(Rg,fte),e(fte,Wro),e(Rg,Hro),e(Rg,oB),e(oB,Uro),e(Rg,Jro),e(k,Yro),e(k,us),e(us,mte),e(mte,Kro),e(us,Zro),e(us,rB),e(rB,eto),e(us,oto),e(us,tB),e(tB,rto),e(us,tto),e(k,ato),e(k,Bg),e(Bg,gte),e(gte,nto),e(Bg,sto),e(Bg,aB),e(aB,lto),e(Bg,ito),e(k,dto),e(k,Pg),e(Pg,hte),e(hte,cto),e(Pg,fto),e(Pg,nB),e(nB,mto),e(Pg,gto),e(k,hto),e(k,Ig),e(Ig,pte),e(pte,pto),e(Ig,uto),e(Ig,sB),e(sB,_to),e(Ig,bto),e(k,vto),e(k,qg),e(qg,ute),e(ute,Fto),e(qg,Tto),e(qg,lB),e(lB,Mto),e(qg,Eto),e(k,Cto),e(k,_s),e(_s,_te),e(_te,wto),e(_s,Ato),e(_s,iB),e(iB,yto),e(_s,Lto),e(_s,dB),e(dB,xto),e(_s,$to),e(k,kto),e(k,Ng),e(Ng,bte),e(bte,Sto),e(Ng,Rto),e(Ng,cB),e(cB,Bto),e(Ng,Pto),e(k,Ito),e(k,bs),e(bs,vte),e(vte,qto),e(bs,Nto),e(bs,fB),e(fB,jto),e(bs,Dto),e(bs,mB),e(mB,Gto),e(bs,Oto),e(k,Vto),e(k,vs),e(vs,Fte),e(Fte,Xto),e(vs,zto),e(vs,gB),e(gB,Qto),e(vs,Wto),e(vs,hB),e(hB,Hto),e(vs,Uto),e(k,Jto),e(k,Fs),e(Fs,Tte),e(Tte,Yto),e(Fs,Kto),e(Fs,pB),e(pB,Zto),e(Fs,eao),e(Fs,uB),e(uB,oao),e(Fs,rao),e(k,tao),e(k,Ts),e(Ts,Mte),e(Mte,aao),e(Ts,nao),e(Ts,_B),e(_B,sao),e(Ts,lao),e(Ts,bB),e(bB,iao),e(Ts,dao),e(k,cao),e(k,Ms),e(Ms,Ete),e(Ete,fao),e(Ms,mao),e(Ms,vB),e(vB,gao),e(Ms,hao),e(Ms,FB),e(FB,pao),e(Ms,uao),e(k,_ao),e(k,Es),e(Es,Cte),e(Cte,bao),e(Es,vao),e(Es,TB),e(TB,Fao),e(Es,Tao),e(Es,MB),e(MB,Mao),e(Es,Eao),e(k,Cao),e(k,jg),e(jg,wte),e(wte,wao),e(jg,Aao),e(jg,EB),e(EB,yao),e(jg,Lao),e(k,xao),e(k,Dg),e(Dg,Ate),e(Ate,$ao),e(Dg,kao),e(Dg,CB),e(CB,Sao),e(Dg,Rao),e(k,Bao),e(k,Cs),e(Cs,yte),e(yte,Pao),e(Cs,Iao),e(Cs,wB),e(wB,qao),e(Cs,Nao),e(Cs,AB),e(AB,jao),e(Cs,Dao),e(k,Gao),e(k,ws),e(ws,Lte),e(Lte,Oao),e(ws,Vao),e(ws,yB),e(yB,Xao),e(ws,zao),e(ws,LB),e(LB,Qao),e(ws,Wao),e(k,Hao),e(k,As),e(As,xte),e(xte,Uao),e(As,Jao),e(As,xB),e(xB,Yao),e(As,Kao),e(As,$B),e($B,Zao),e(As,eno),e(k,ono),e(k,Gg),e(Gg,$te),e($te,rno),e(Gg,tno),e(Gg,kB),e(kB,ano),e(Gg,nno),e(k,sno),e(k,Og),e(Og,kte),e(kte,lno),e(Og,ino),e(Og,SB),e(SB,dno),e(Og,cno),e(k,fno),e(k,Vg),e(Vg,Ste),e(Ste,mno),e(Vg,gno),e(Vg,RB),e(RB,hno),e(Vg,pno),e(k,uno),e(k,ys),e(ys,Rte),e(Rte,_no),e(ys,bno),e(ys,BB),e(BB,vno),e(ys,Fno),e(ys,PB),e(PB,Tno),e(ys,Mno),e(k,Eno),e(k,Xg),e(Xg,Bte),e(Bte,Cno),e(Xg,wno),e(Xg,IB),e(IB,Ano),e(Xg,yno),e(k,Lno),e(k,zg),e(zg,Pte),e(Pte,xno),e(zg,$no),e(zg,qB),e(qB,kno),e(zg,Sno),e(k,Rno),e(k,Ls),e(Ls,Ite),e(Ite,Bno),e(Ls,Pno),e(Ls,NB),e(NB,Ino),e(Ls,qno),e(Ls,jB),e(jB,Nno),e(Ls,jno),e(k,Dno),e(k,Qg),e(Qg,qte),e(qte,Gno),e(Qg,Ono),e(Qg,DB),e(DB,Vno),e(Qg,Xno),e(k,zno),e(k,Wg),e(Wg,Nte),e(Nte,Qno),e(Wg,Wno),e(Wg,GB),e(GB,Hno),e(Wg,Uno),e(k,Jno),e(k,xs),e(xs,jte),e(jte,Yno),e(xs,Kno),e(xs,OB),e(OB,Zno),e(xs,eso),e(xs,VB),e(VB,oso),e(xs,rso),e(k,tso),e(k,$s),e($s,Dte),e(Dte,aso),e($s,nso),e($s,XB),e(XB,sso),e($s,lso),e($s,zB),e(zB,iso),e($s,dso),e(k,cso),e(k,ks),e(ks,Gte),e(Gte,fso),e(ks,mso),e(ks,QB),e(QB,gso),e(ks,hso),e(ks,WB),e(WB,pso),e(ks,uso),e(k,_so),e(k,Ss),e(Ss,Ote),e(Ote,bso),e(Ss,vso),e(Ss,HB),e(HB,Fso),e(Ss,Tso),e(Ss,UB),e(UB,Mso),e(Ss,Eso),e(Cr,Cso),M(Hg,Cr,null),e(wo,wso),e(wo,Ug),M(cA,Ug,null),e(Ug,Aso),e(Ug,Vte),e(Vte,yso),b(f,HPe,_),b(f,vi,_),e(vi,Jg),e(Jg,Xte),M(fA,Xte,null),e(vi,Lso),e(vi,zte),e(zte,xso),b(f,UPe,_),b(f,Ao,_),M(mA,Ao,null),e(Ao,$so),e(Ao,gA),e(gA,kso),e(gA,JB),e(JB,Sso),e(gA,Rso),e(Ao,Bso),e(Ao,hA),e(hA,Pso),e(hA,Qte),e(Qte,Iso),e(hA,qso),e(Ao,Nso),e(Ao,Qe),M(pA,Qe,null),e(Qe,jso),e(Qe,Wte),e(Wte,Dso),e(Qe,Gso),e(Qe,wa),e(wa,Oso),e(wa,Hte),e(Hte,Vso),e(wa,Xso),e(wa,Ute),e(Ute,zso),e(wa,Qso),e(wa,Jte),e(Jte,Wso),e(wa,Hso),e(Qe,Uso),e(Qe,oe),e(oe,Yg),e(Yg,Yte),e(Yte,Jso),e(Yg,Yso),e(Yg,YB),e(YB,Kso),e(Yg,Zso),e(oe,elo),e(oe,Kg),e(Kg,Kte),e(Kte,olo),e(Kg,rlo),e(Kg,KB),e(KB,tlo),e(Kg,alo),e(oe,nlo),e(oe,Zg),e(Zg,Zte),e(Zte,slo),e(Zg,llo),e(Zg,ZB),e(ZB,ilo),e(Zg,dlo),e(oe,clo),e(oe,eh),e(eh,eae),e(eae,flo),e(eh,mlo),e(eh,eP),e(eP,glo),e(eh,hlo),e(oe,plo),e(oe,oh),e(oh,oae),e(oae,ulo),e(oh,_lo),e(oh,oP),e(oP,blo),e(oh,vlo),e(oe,Flo),e(oe,rh),e(rh,rae),e(rae,Tlo),e(rh,Mlo),e(rh,rP),e(rP,Elo),e(rh,Clo),e(oe,wlo),e(oe,th),e(th,tae),e(tae,Alo),e(th,ylo),e(th,tP),e(tP,Llo),e(th,xlo),e(oe,$lo),e(oe,ah),e(ah,aae),e(aae,klo),e(ah,Slo),e(ah,aP),e(aP,Rlo),e(ah,Blo),e(oe,Plo),e(oe,nh),e(nh,nae),e(nae,Ilo),e(nh,qlo),e(nh,nP),e(nP,Nlo),e(nh,jlo),e(oe,Dlo),e(oe,sh),e(sh,sae),e(sae,Glo),e(sh,Olo),e(sh,sP),e(sP,Vlo),e(sh,Xlo),e(oe,zlo),e(oe,lh),e(lh,lae),e(lae,Qlo),e(lh,Wlo),e(lh,lP),e(lP,Hlo),e(lh,Ulo),e(oe,Jlo),e(oe,ih),e(ih,iae),e(iae,Ylo),e(ih,Klo),e(ih,iP),e(iP,Zlo),e(ih,eio),e(oe,oio),e(oe,dh),e(dh,dae),e(dae,rio),e(dh,tio),e(dh,dP),e(dP,aio),e(dh,nio),e(oe,sio),e(oe,ch),e(ch,cae),e(cae,lio),e(ch,iio),e(ch,cP),e(cP,dio),e(ch,cio),e(oe,fio),e(oe,fh),e(fh,fae),e(fae,mio),e(fh,gio),e(fh,fP),e(fP,hio),e(fh,pio),e(oe,uio),e(oe,mh),e(mh,mae),e(mae,_io),e(mh,bio),e(mh,mP),e(mP,vio),e(mh,Fio),e(oe,Tio),e(oe,gh),e(gh,gae),e(gae,Mio),e(gh,Eio),e(gh,gP),e(gP,Cio),e(gh,wio),e(oe,Aio),e(oe,hh),e(hh,hae),e(hae,yio),e(hh,Lio),e(hh,hP),e(hP,xio),e(hh,$io),e(oe,kio),e(oe,ph),e(ph,pae),e(pae,Sio),e(ph,Rio),e(ph,pP),e(pP,Bio),e(ph,Pio),e(oe,Iio),e(oe,uh),e(uh,uae),e(uae,qio),e(uh,Nio),e(uh,uP),e(uP,jio),e(uh,Dio),e(oe,Gio),e(oe,_h),e(_h,_ae),e(_ae,Oio),e(_h,Vio),e(_h,_P),e(_P,Xio),e(_h,zio),e(oe,Qio),e(oe,bh),e(bh,bae),e(bae,Wio),e(bh,Hio),e(bh,bP),e(bP,Uio),e(bh,Jio),e(oe,Yio),e(oe,vh),e(vh,vae),e(vae,Kio),e(vh,Zio),e(vh,vP),e(vP,edo),e(vh,odo),e(oe,rdo),e(oe,Fh),e(Fh,Fae),e(Fae,tdo),e(Fh,ado),e(Fh,FP),e(FP,ndo),e(Fh,sdo),e(oe,ldo),e(oe,Th),e(Th,Tae),e(Tae,ido),e(Th,ddo),e(Th,TP),e(TP,cdo),e(Th,fdo),e(Qe,mdo),M(Mh,Qe,null),e(Qe,gdo),M(Eh,Qe,null),e(Ao,hdo),e(Ao,Ch),M(uA,Ch,null),e(Ch,pdo),e(Ch,Mae),e(Mae,udo),b(f,JPe,_),b(f,Fi,_),e(Fi,wh),e(wh,Eae),M(_A,Eae,null),e(Fi,_do),e(Fi,Cae),e(Cae,bdo),b(f,YPe,_),b(f,yo,_),M(bA,yo,null),e(yo,vdo),e(yo,vA),e(vA,Fdo),e(vA,MP),e(MP,Tdo),e(vA,Mdo),e(yo,Edo),e(yo,FA),e(FA,Cdo),e(FA,wae),e(wae,wdo),e(FA,Ado),e(yo,ydo),e(yo,We),M(TA,We,null),e(We,Ldo),e(We,Aae),e(Aae,xdo),e(We,$do),e(We,Ti),e(Ti,kdo),e(Ti,yae),e(yae,Sdo),e(Ti,Rdo),e(Ti,Lae),e(Lae,Bdo),e(Ti,Pdo),e(We,Ido),e(We,_e),e(_e,Ah),e(Ah,xae),e(xae,qdo),e(Ah,Ndo),e(Ah,EP),e(EP,jdo),e(Ah,Ddo),e(_e,Gdo),e(_e,yh),e(yh,$ae),e($ae,Odo),e(yh,Vdo),e(yh,kae),e(kae,Xdo),e(yh,zdo),e(_e,Qdo),e(_e,Lh),e(Lh,Sae),e(Sae,Wdo),e(Lh,Hdo),e(Lh,CP),e(CP,Udo),e(Lh,Jdo),e(_e,Ydo),e(_e,xh),e(xh,Rae),e(Rae,Kdo),e(xh,Zdo),e(xh,wP),e(wP,eco),e(xh,oco),e(_e,rco),e(_e,$h),e($h,Bae),e(Bae,tco),e($h,aco),e($h,AP),e(AP,nco),e($h,sco),e(_e,lco),e(_e,kh),e(kh,Pae),e(Pae,ico),e(kh,dco),e(kh,yP),e(yP,cco),e(kh,fco),e(_e,mco),e(_e,Sh),e(Sh,Iae),e(Iae,gco),e(Sh,hco),e(Sh,LP),e(LP,pco),e(Sh,uco),e(_e,_co),e(_e,Rh),e(Rh,qae),e(qae,bco),e(Rh,vco),e(Rh,xP),e(xP,Fco),e(Rh,Tco),e(_e,Mco),e(_e,Bh),e(Bh,Nae),e(Nae,Eco),e(Bh,Cco),e(Bh,$P),e($P,wco),e(Bh,Aco),e(_e,yco),e(_e,Ph),e(Ph,jae),e(jae,Lco),e(Ph,xco),e(Ph,kP),e(kP,$co),e(Ph,kco),e(_e,Sco),e(_e,Ih),e(Ih,Dae),e(Dae,Rco),e(Ih,Bco),e(Ih,SP),e(SP,Pco),e(Ih,Ico),e(_e,qco),e(_e,qh),e(qh,Gae),e(Gae,Nco),e(qh,jco),e(qh,RP),e(RP,Dco),e(qh,Gco),e(_e,Oco),e(_e,Nh),e(Nh,Oae),e(Oae,Vco),e(Nh,Xco),e(Nh,BP),e(BP,zco),e(Nh,Qco),e(_e,Wco),e(_e,jh),e(jh,Vae),e(Vae,Hco),e(jh,Uco),e(jh,PP),e(PP,Jco),e(jh,Yco),e(_e,Kco),e(_e,Dh),e(Dh,Xae),e(Xae,Zco),e(Dh,efo),e(Dh,IP),e(IP,ofo),e(Dh,rfo),e(We,tfo),M(Gh,We,null),e(We,afo),M(Oh,We,null),e(yo,nfo),e(yo,Vh),M(MA,Vh,null),e(Vh,sfo),e(Vh,zae),e(zae,lfo),b(f,KPe,_),b(f,Mi,_),e(Mi,Xh),e(Xh,Qae),M(EA,Qae,null),e(Mi,ifo),e(Mi,Wae),e(Wae,dfo),b(f,ZPe,_),b(f,Lo,_),M(CA,Lo,null),e(Lo,cfo),e(Lo,Ei),e(Ei,ffo),e(Ei,qP),e(qP,mfo),e(Ei,gfo),e(Ei,NP),e(NP,hfo),e(Ei,pfo),e(Lo,ufo),e(Lo,wA),e(wA,_fo),e(wA,Hae),e(Hae,bfo),e(wA,vfo),e(Lo,Ffo),e(Lo,ot),M(AA,ot,null),e(ot,Tfo),e(ot,Uae),e(Uae,Mfo),e(ot,Efo),e(ot,Ci),e(Ci,Cfo),e(Ci,Jae),e(Jae,wfo),e(Ci,Afo),e(Ci,jP),e(jP,yfo),e(Ci,Lfo),e(ot,xfo),M(zh,ot,null),e(Lo,$fo),e(Lo,He),M(yA,He,null),e(He,kfo),e(He,Yae),e(Yae,Sfo),e(He,Rfo),e(He,Aa),e(Aa,Bfo),e(Aa,Kae),e(Kae,Pfo),e(Aa,Ifo),e(Aa,Zae),e(Zae,qfo),e(Aa,Nfo),e(Aa,ene),e(ene,jfo),e(Aa,Dfo),e(He,Gfo),e(He,x),e(x,Qh),e(Qh,one),e(one,Ofo),e(Qh,Vfo),e(Qh,DP),e(DP,Xfo),e(Qh,zfo),e(x,Qfo),e(x,Wh),e(Wh,rne),e(rne,Wfo),e(Wh,Hfo),e(Wh,GP),e(GP,Ufo),e(Wh,Jfo),e(x,Yfo),e(x,Hh),e(Hh,tne),e(tne,Kfo),e(Hh,Zfo),e(Hh,OP),e(OP,emo),e(Hh,omo),e(x,rmo),e(x,Uh),e(Uh,ane),e(ane,tmo),e(Uh,amo),e(Uh,VP),e(VP,nmo),e(Uh,smo),e(x,lmo),e(x,Jh),e(Jh,nne),e(nne,imo),e(Jh,dmo),e(Jh,XP),e(XP,cmo),e(Jh,fmo),e(x,mmo),e(x,Yh),e(Yh,sne),e(sne,gmo),e(Yh,hmo),e(Yh,zP),e(zP,pmo),e(Yh,umo),e(x,_mo),e(x,Kh),e(Kh,lne),e(lne,bmo),e(Kh,vmo),e(Kh,QP),e(QP,Fmo),e(Kh,Tmo),e(x,Mmo),e(x,Zh),e(Zh,ine),e(ine,Emo),e(Zh,Cmo),e(Zh,WP),e(WP,wmo),e(Zh,Amo),e(x,ymo),e(x,ep),e(ep,dne),e(dne,Lmo),e(ep,xmo),e(ep,HP),e(HP,$mo),e(ep,kmo),e(x,Smo),e(x,op),e(op,cne),e(cne,Rmo),e(op,Bmo),e(op,UP),e(UP,Pmo),e(op,Imo),e(x,qmo),e(x,rp),e(rp,fne),e(fne,Nmo),e(rp,jmo),e(rp,JP),e(JP,Dmo),e(rp,Gmo),e(x,Omo),e(x,tp),e(tp,mne),e(mne,Vmo),e(tp,Xmo),e(tp,YP),e(YP,zmo),e(tp,Qmo),e(x,Wmo),e(x,ap),e(ap,gne),e(gne,Hmo),e(ap,Umo),e(ap,KP),e(KP,Jmo),e(ap,Ymo),e(x,Kmo),e(x,np),e(np,hne),e(hne,Zmo),e(np,ego),e(np,ZP),e(ZP,ogo),e(np,rgo),e(x,tgo),e(x,sp),e(sp,pne),e(pne,ago),e(sp,ngo),e(sp,eI),e(eI,sgo),e(sp,lgo),e(x,igo),e(x,lp),e(lp,une),e(une,dgo),e(lp,cgo),e(lp,oI),e(oI,fgo),e(lp,mgo),e(x,ggo),e(x,ip),e(ip,_ne),e(_ne,hgo),e(ip,pgo),e(ip,rI),e(rI,ugo),e(ip,_go),e(x,bgo),e(x,dp),e(dp,bne),e(bne,vgo),e(dp,Fgo),e(dp,tI),e(tI,Tgo),e(dp,Mgo),e(x,Ego),e(x,cp),e(cp,vne),e(vne,Cgo),e(cp,wgo),e(cp,aI),e(aI,Ago),e(cp,ygo),e(x,Lgo),e(x,fp),e(fp,Fne),e(Fne,xgo),e(fp,$go),e(fp,nI),e(nI,kgo),e(fp,Sgo),e(x,Rgo),e(x,mp),e(mp,Tne),e(Tne,Bgo),e(mp,Pgo),e(mp,sI),e(sI,Igo),e(mp,qgo),e(x,Ngo),e(x,gp),e(gp,Mne),e(Mne,jgo),e(gp,Dgo),e(gp,lI),e(lI,Ggo),e(gp,Ogo),e(x,Vgo),e(x,hp),e(hp,Ene),e(Ene,Xgo),e(hp,zgo),e(hp,iI),e(iI,Qgo),e(hp,Wgo),e(x,Hgo),e(x,pp),e(pp,Cne),e(Cne,Ugo),e(pp,Jgo),e(pp,dI),e(dI,Ygo),e(pp,Kgo),e(x,Zgo),e(x,up),e(up,wne),e(wne,eho),e(up,oho),e(up,cI),e(cI,rho),e(up,tho),e(x,aho),e(x,_p),e(_p,Ane),e(Ane,nho),e(_p,sho),e(_p,fI),e(fI,lho),e(_p,iho),e(x,dho),e(x,bp),e(bp,yne),e(yne,cho),e(bp,fho),e(bp,mI),e(mI,mho),e(bp,gho),e(x,hho),e(x,vp),e(vp,Lne),e(Lne,pho),e(vp,uho),e(vp,gI),e(gI,_ho),e(vp,bho),e(x,vho),e(x,Fp),e(Fp,xne),e(xne,Fho),e(Fp,Tho),e(Fp,hI),e(hI,Mho),e(Fp,Eho),e(x,Cho),e(x,Tp),e(Tp,$ne),e($ne,who),e(Tp,Aho),e(Tp,pI),e(pI,yho),e(Tp,Lho),e(x,xho),e(x,Mp),e(Mp,kne),e(kne,$ho),e(Mp,kho),e(Mp,uI),e(uI,Sho),e(Mp,Rho),e(x,Bho),e(x,Rs),e(Rs,Sne),e(Sne,Pho),e(Rs,Iho),e(Rs,_I),e(_I,qho),e(Rs,Nho),e(Rs,bI),e(bI,jho),e(Rs,Dho),e(x,Gho),e(x,Ep),e(Ep,Rne),e(Rne,Oho),e(Ep,Vho),e(Ep,vI),e(vI,Xho),e(Ep,zho),e(x,Qho),e(x,Cp),e(Cp,Bne),e(Bne,Who),e(Cp,Hho),e(Cp,FI),e(FI,Uho),e(Cp,Jho),e(x,Yho),e(x,wp),e(wp,Pne),e(Pne,Kho),e(wp,Zho),e(wp,TI),e(TI,epo),e(wp,opo),e(x,rpo),e(x,Ap),e(Ap,Ine),e(Ine,tpo),e(Ap,apo),e(Ap,MI),e(MI,npo),e(Ap,spo),e(x,lpo),e(x,yp),e(yp,qne),e(qne,ipo),e(yp,dpo),e(yp,EI),e(EI,cpo),e(yp,fpo),e(x,mpo),e(x,Lp),e(Lp,Nne),e(Nne,gpo),e(Lp,hpo),e(Lp,CI),e(CI,ppo),e(Lp,upo),e(x,_po),e(x,xp),e(xp,jne),e(jne,bpo),e(xp,vpo),e(xp,wI),e(wI,Fpo),e(xp,Tpo),e(x,Mpo),e(x,$p),e($p,Dne),e(Dne,Epo),e($p,Cpo),e($p,AI),e(AI,wpo),e($p,Apo),e(x,ypo),e(x,kp),e(kp,Gne),e(Gne,Lpo),e(kp,xpo),e(kp,yI),e(yI,$po),e(kp,kpo),e(x,Spo),e(x,Sp),e(Sp,One),e(One,Rpo),e(Sp,Bpo),e(Sp,LI),e(LI,Ppo),e(Sp,Ipo),e(x,qpo),e(x,Rp),e(Rp,Vne),e(Vne,Npo),e(Rp,jpo),e(Rp,xI),e(xI,Dpo),e(Rp,Gpo),e(x,Opo),e(x,Bp),e(Bp,Xne),e(Xne,Vpo),e(Bp,Xpo),e(Bp,$I),e($I,zpo),e(Bp,Qpo),e(x,Wpo),e(x,Pp),e(Pp,zne),e(zne,Hpo),e(Pp,Upo),e(Pp,kI),e(kI,Jpo),e(Pp,Ypo),e(x,Kpo),e(x,Ip),e(Ip,Qne),e(Qne,Zpo),e(Ip,euo),e(Ip,SI),e(SI,ouo),e(Ip,ruo),e(x,tuo),e(x,qp),e(qp,Wne),e(Wne,auo),e(qp,nuo),e(qp,RI),e(RI,suo),e(qp,luo),e(x,iuo),e(x,Np),e(Np,Hne),e(Hne,duo),e(Np,cuo),e(Np,BI),e(BI,fuo),e(Np,muo),e(x,guo),e(x,jp),e(jp,Une),e(Une,huo),e(jp,puo),e(jp,PI),e(PI,uuo),e(jp,_uo),e(x,buo),e(x,Dp),e(Dp,Jne),e(Jne,vuo),e(Dp,Fuo),e(Dp,II),e(II,Tuo),e(Dp,Muo),e(x,Euo),e(x,Gp),e(Gp,Yne),e(Yne,Cuo),e(Gp,wuo),e(Gp,qI),e(qI,Auo),e(Gp,yuo),e(x,Luo),e(x,Op),e(Op,Kne),e(Kne,xuo),e(Op,$uo),e(Op,NI),e(NI,kuo),e(Op,Suo),e(x,Ruo),e(x,Vp),e(Vp,Zne),e(Zne,Buo),e(Vp,Puo),e(Vp,jI),e(jI,Iuo),e(Vp,quo),e(x,Nuo),e(x,Xp),e(Xp,ese),e(ese,juo),e(Xp,Duo),e(Xp,DI),e(DI,Guo),e(Xp,Ouo),e(x,Vuo),e(x,zp),e(zp,ose),e(ose,Xuo),e(zp,zuo),e(zp,GI),e(GI,Quo),e(zp,Wuo),e(x,Huo),e(x,Qp),e(Qp,rse),e(rse,Uuo),e(Qp,Juo),e(Qp,OI),e(OI,Yuo),e(Qp,Kuo),e(x,Zuo),e(x,Wp),e(Wp,tse),e(tse,e_o),e(Wp,o_o),e(Wp,VI),e(VI,r_o),e(Wp,t_o),e(x,a_o),e(x,Hp),e(Hp,ase),e(ase,n_o),e(Hp,s_o),e(Hp,XI),e(XI,l_o),e(Hp,i_o),e(x,d_o),e(x,Up),e(Up,nse),e(nse,c_o),e(Up,f_o),e(Up,zI),e(zI,m_o),e(Up,g_o),e(x,h_o),e(x,Jp),e(Jp,sse),e(sse,p_o),e(Jp,u_o),e(Jp,QI),e(QI,__o),e(Jp,b_o),e(x,v_o),e(x,Yp),e(Yp,lse),e(lse,F_o),e(Yp,T_o),e(Yp,WI),e(WI,M_o),e(Yp,E_o),e(x,C_o),e(x,Kp),e(Kp,ise),e(ise,w_o),e(Kp,A_o),e(Kp,HI),e(HI,y_o),e(Kp,L_o),e(x,x_o),e(x,Zp),e(Zp,dse),e(dse,$_o),e(Zp,k_o),e(Zp,UI),e(UI,S_o),e(Zp,R_o),e(x,B_o),e(x,eu),e(eu,cse),e(cse,P_o),e(eu,I_o),e(eu,JI),e(JI,q_o),e(eu,N_o),e(x,j_o),e(x,ou),e(ou,fse),e(fse,D_o),e(ou,G_o),e(ou,YI),e(YI,O_o),e(ou,V_o),e(x,X_o),e(x,ru),e(ru,mse),e(mse,z_o),e(ru,Q_o),e(ru,KI),e(KI,W_o),e(ru,H_o),e(x,U_o),e(x,tu),e(tu,gse),e(gse,J_o),e(tu,Y_o),e(tu,ZI),e(ZI,K_o),e(tu,Z_o),e(x,e1o),e(x,au),e(au,hse),e(hse,o1o),e(au,r1o),e(au,eq),e(eq,t1o),e(au,a1o),e(x,n1o),e(x,nu),e(nu,pse),e(pse,s1o),e(nu,l1o),e(nu,oq),e(oq,i1o),e(nu,d1o),e(x,c1o),e(x,su),e(su,use),e(use,f1o),e(su,m1o),e(su,rq),e(rq,g1o),e(su,h1o),e(x,p1o),e(x,lu),e(lu,_se),e(_se,u1o),e(lu,_1o),e(lu,tq),e(tq,b1o),e(lu,v1o),e(x,F1o),e(x,iu),e(iu,bse),e(bse,T1o),e(iu,M1o),e(iu,aq),e(aq,E1o),e(iu,C1o),e(x,w1o),e(x,du),e(du,vse),e(vse,A1o),e(du,y1o),e(du,nq),e(nq,L1o),e(du,x1o),e(x,$1o),e(x,cu),e(cu,Fse),e(Fse,k1o),e(cu,S1o),e(cu,sq),e(sq,R1o),e(cu,B1o),e(x,P1o),e(x,fu),e(fu,Tse),e(Tse,I1o),e(fu,q1o),e(fu,lq),e(lq,N1o),e(fu,j1o),e(x,D1o),e(x,mu),e(mu,Mse),e(Mse,G1o),e(mu,O1o),e(mu,iq),e(iq,V1o),e(mu,X1o),e(x,z1o),e(x,gu),e(gu,Ese),e(Ese,Q1o),e(gu,W1o),e(gu,dq),e(dq,H1o),e(gu,U1o),e(x,J1o),e(x,hu),e(hu,Cse),e(Cse,Y1o),e(hu,K1o),e(hu,cq),e(cq,Z1o),e(hu,e8o),e(x,o8o),e(x,pu),e(pu,wse),e(wse,r8o),e(pu,t8o),e(pu,fq),e(fq,a8o),e(pu,n8o),e(x,s8o),e(x,uu),e(uu,Ase),e(Ase,l8o),e(uu,i8o),e(uu,mq),e(mq,d8o),e(uu,c8o),e(x,f8o),e(x,_u),e(_u,yse),e(yse,m8o),e(_u,g8o),e(_u,gq),e(gq,h8o),e(_u,p8o),e(x,u8o),e(x,bu),e(bu,Lse),e(Lse,_8o),e(bu,b8o),e(bu,hq),e(hq,v8o),e(bu,F8o),e(x,T8o),e(x,vu),e(vu,xse),e(xse,M8o),e(vu,E8o),e(vu,pq),e(pq,C8o),e(vu,w8o),e(x,A8o),e(x,Fu),e(Fu,$se),e($se,y8o),e(Fu,L8o),e(Fu,uq),e(uq,x8o),e(Fu,$8o),e(x,k8o),e(x,Tu),e(Tu,kse),e(kse,S8o),e(Tu,R8o),e(Tu,_q),e(_q,B8o),e(Tu,P8o),e(x,I8o),e(x,Mu),e(Mu,Sse),e(Sse,q8o),e(Mu,N8o),e(Mu,bq),e(bq,j8o),e(Mu,D8o),e(x,G8o),e(x,Eu),e(Eu,Rse),e(Rse,O8o),e(Eu,V8o),e(Eu,vq),e(vq,X8o),e(Eu,z8o),e(x,Q8o),e(x,Cu),e(Cu,Bse),e(Bse,W8o),e(Cu,H8o),e(Cu,Fq),e(Fq,U8o),e(Cu,J8o),e(x,Y8o),e(x,wu),e(wu,Pse),e(Pse,K8o),e(wu,Z8o),e(wu,Tq),e(Tq,ebo),e(wu,obo),e(x,rbo),e(x,Au),e(Au,Ise),e(Ise,tbo),e(Au,abo),e(Au,Mq),e(Mq,nbo),e(Au,sbo),e(x,lbo),e(x,yu),e(yu,qse),e(qse,ibo),e(yu,dbo),e(yu,Eq),e(Eq,cbo),e(yu,fbo),e(x,mbo),e(x,Lu),e(Lu,Nse),e(Nse,gbo),e(Lu,hbo),e(Lu,Cq),e(Cq,pbo),e(Lu,ubo),e(x,_bo),e(x,xu),e(xu,jse),e(jse,bbo),e(xu,vbo),e(xu,wq),e(wq,Fbo),e(xu,Tbo),e(x,Mbo),e(x,$u),e($u,Dse),e(Dse,Ebo),e($u,Cbo),e($u,Aq),e(Aq,wbo),e($u,Abo),e(x,ybo),e(x,ku),e(ku,Gse),e(Gse,Lbo),e(ku,xbo),e(ku,yq),e(yq,$bo),e(ku,kbo),e(x,Sbo),e(x,Su),e(Su,Ose),e(Ose,Rbo),e(Su,Bbo),e(Su,Lq),e(Lq,Pbo),e(Su,Ibo),e(x,qbo),e(x,Ru),e(Ru,Vse),e(Vse,Nbo),e(Ru,jbo),e(Ru,xq),e(xq,Dbo),e(Ru,Gbo),e(He,Obo),e(He,Bu),e(Bu,Vbo),e(Bu,Xse),e(Xse,Xbo),e(Bu,zbo),e(Bu,zse),e(zse,Qbo),e(He,Wbo),M(Pu,He,null),b(f,eIe,_),b(f,wi,_),e(wi,Iu),e(Iu,Qse),M(LA,Qse,null),e(wi,Hbo),e(wi,Wse),e(Wse,Ubo),b(f,oIe,_),b(f,xo,_),M(xA,xo,null),e(xo,Jbo),e(xo,Ai),e(Ai,Ybo),e(Ai,$q),e($q,Kbo),e(Ai,Zbo),e(Ai,kq),e(kq,e2o),e(Ai,o2o),e(xo,r2o),e(xo,$A),e($A,t2o),e($A,Hse),e(Hse,a2o),e($A,n2o),e(xo,s2o),e(xo,rt),M(kA,rt,null),e(rt,l2o),e(rt,Use),e(Use,i2o),e(rt,d2o),e(rt,yi),e(yi,c2o),e(yi,Jse),e(Jse,f2o),e(yi,m2o),e(yi,Sq),e(Sq,g2o),e(yi,h2o),e(rt,p2o),M(qu,rt,null),e(xo,u2o),e(xo,Ue),M(SA,Ue,null),e(Ue,_2o),e(Ue,Yse),e(Yse,b2o),e(Ue,v2o),e(Ue,ya),e(ya,F2o),e(ya,Kse),e(Kse,T2o),e(ya,M2o),e(ya,Zse),e(Zse,E2o),e(ya,C2o),e(ya,ele),e(ele,w2o),e(ya,A2o),e(Ue,y2o),e(Ue,G),e(G,Nu),e(Nu,ole),e(ole,L2o),e(Nu,x2o),e(Nu,Rq),e(Rq,$2o),e(Nu,k2o),e(G,S2o),e(G,ju),e(ju,rle),e(rle,R2o),e(ju,B2o),e(ju,Bq),e(Bq,P2o),e(ju,I2o),e(G,q2o),e(G,Du),e(Du,tle),e(tle,N2o),e(Du,j2o),e(Du,Pq),e(Pq,D2o),e(Du,G2o),e(G,O2o),e(G,Gu),e(Gu,ale),e(ale,V2o),e(Gu,X2o),e(Gu,Iq),e(Iq,z2o),e(Gu,Q2o),e(G,W2o),e(G,Ou),e(Ou,nle),e(nle,H2o),e(Ou,U2o),e(Ou,qq),e(qq,J2o),e(Ou,Y2o),e(G,K2o),e(G,Vu),e(Vu,sle),e(sle,Z2o),e(Vu,evo),e(Vu,Nq),e(Nq,ovo),e(Vu,rvo),e(G,tvo),e(G,Xu),e(Xu,lle),e(lle,avo),e(Xu,nvo),e(Xu,jq),e(jq,svo),e(Xu,lvo),e(G,ivo),e(G,zu),e(zu,ile),e(ile,dvo),e(zu,cvo),e(zu,Dq),e(Dq,fvo),e(zu,mvo),e(G,gvo),e(G,Qu),e(Qu,dle),e(dle,hvo),e(Qu,pvo),e(Qu,Gq),e(Gq,uvo),e(Qu,_vo),e(G,bvo),e(G,Wu),e(Wu,cle),e(cle,vvo),e(Wu,Fvo),e(Wu,Oq),e(Oq,Tvo),e(Wu,Mvo),e(G,Evo),e(G,Hu),e(Hu,fle),e(fle,Cvo),e(Hu,wvo),e(Hu,Vq),e(Vq,Avo),e(Hu,yvo),e(G,Lvo),e(G,Uu),e(Uu,mle),e(mle,xvo),e(Uu,$vo),e(Uu,Xq),e(Xq,kvo),e(Uu,Svo),e(G,Rvo),e(G,Ju),e(Ju,gle),e(gle,Bvo),e(Ju,Pvo),e(Ju,zq),e(zq,Ivo),e(Ju,qvo),e(G,Nvo),e(G,Yu),e(Yu,hle),e(hle,jvo),e(Yu,Dvo),e(Yu,Qq),e(Qq,Gvo),e(Yu,Ovo),e(G,Vvo),e(G,Ku),e(Ku,ple),e(ple,Xvo),e(Ku,zvo),e(Ku,Wq),e(Wq,Qvo),e(Ku,Wvo),e(G,Hvo),e(G,Zu),e(Zu,ule),e(ule,Uvo),e(Zu,Jvo),e(Zu,Hq),e(Hq,Yvo),e(Zu,Kvo),e(G,Zvo),e(G,e_),e(e_,_le),e(_le,eFo),e(e_,oFo),e(e_,Uq),e(Uq,rFo),e(e_,tFo),e(G,aFo),e(G,o_),e(o_,ble),e(ble,nFo),e(o_,sFo),e(o_,Jq),e(Jq,lFo),e(o_,iFo),e(G,dFo),e(G,r_),e(r_,vle),e(vle,cFo),e(r_,fFo),e(r_,Yq),e(Yq,mFo),e(r_,gFo),e(G,hFo),e(G,t_),e(t_,Fle),e(Fle,pFo),e(t_,uFo),e(t_,Kq),e(Kq,_Fo),e(t_,bFo),e(G,vFo),e(G,a_),e(a_,Tle),e(Tle,FFo),e(a_,TFo),e(a_,Zq),e(Zq,MFo),e(a_,EFo),e(G,CFo),e(G,n_),e(n_,Mle),e(Mle,wFo),e(n_,AFo),e(n_,eN),e(eN,yFo),e(n_,LFo),e(G,xFo),e(G,s_),e(s_,Ele),e(Ele,$Fo),e(s_,kFo),e(s_,oN),e(oN,SFo),e(s_,RFo),e(G,BFo),e(G,l_),e(l_,Cle),e(Cle,PFo),e(l_,IFo),e(l_,rN),e(rN,qFo),e(l_,NFo),e(G,jFo),e(G,i_),e(i_,wle),e(wle,DFo),e(i_,GFo),e(i_,tN),e(tN,OFo),e(i_,VFo),e(G,XFo),e(G,d_),e(d_,Ale),e(Ale,zFo),e(d_,QFo),e(d_,aN),e(aN,WFo),e(d_,HFo),e(G,UFo),e(G,c_),e(c_,yle),e(yle,JFo),e(c_,YFo),e(c_,nN),e(nN,KFo),e(c_,ZFo),e(G,e6o),e(G,f_),e(f_,Lle),e(Lle,o6o),e(f_,r6o),e(f_,sN),e(sN,t6o),e(f_,a6o),e(G,n6o),e(G,m_),e(m_,xle),e(xle,s6o),e(m_,l6o),e(m_,lN),e(lN,i6o),e(m_,d6o),e(G,c6o),e(G,g_),e(g_,$le),e($le,f6o),e(g_,m6o),e(g_,iN),e(iN,g6o),e(g_,h6o),e(G,p6o),e(G,h_),e(h_,kle),e(kle,u6o),e(h_,_6o),e(h_,dN),e(dN,b6o),e(h_,v6o),e(G,F6o),e(G,p_),e(p_,Sle),e(Sle,T6o),e(p_,M6o),e(p_,cN),e(cN,E6o),e(p_,C6o),e(G,w6o),e(G,u_),e(u_,Rle),e(Rle,A6o),e(u_,y6o),e(u_,fN),e(fN,L6o),e(u_,x6o),e(G,$6o),e(G,__),e(__,Ble),e(Ble,k6o),e(__,S6o),e(__,mN),e(mN,R6o),e(__,B6o),e(G,P6o),e(G,b_),e(b_,Ple),e(Ple,I6o),e(b_,q6o),e(b_,gN),e(gN,N6o),e(b_,j6o),e(G,D6o),e(G,v_),e(v_,Ile),e(Ile,G6o),e(v_,O6o),e(v_,hN),e(hN,V6o),e(v_,X6o),e(G,z6o),e(G,F_),e(F_,qle),e(qle,Q6o),e(F_,W6o),e(F_,pN),e(pN,H6o),e(F_,U6o),e(G,J6o),e(G,T_),e(T_,Nle),e(Nle,Y6o),e(T_,K6o),e(T_,uN),e(uN,Z6o),e(T_,eTo),e(G,oTo),e(G,M_),e(M_,jle),e(jle,rTo),e(M_,tTo),e(M_,_N),e(_N,aTo),e(M_,nTo),e(G,sTo),e(G,E_),e(E_,Dle),e(Dle,lTo),e(E_,iTo),e(E_,bN),e(bN,dTo),e(E_,cTo),e(Ue,fTo),e(Ue,C_),e(C_,mTo),e(C_,Gle),e(Gle,gTo),e(C_,hTo),e(C_,Ole),e(Ole,pTo),e(Ue,uTo),M(w_,Ue,null),b(f,rIe,_),b(f,Li,_),e(Li,A_),e(A_,Vle),M(RA,Vle,null),e(Li,_To),e(Li,Xle),e(Xle,bTo),b(f,tIe,_),b(f,$o,_),M(BA,$o,null),e($o,vTo),e($o,xi),e(xi,FTo),e(xi,vN),e(vN,TTo),e(xi,MTo),e(xi,FN),e(FN,ETo),e(xi,CTo),e($o,wTo),e($o,PA),e(PA,ATo),e(PA,zle),e(zle,yTo),e(PA,LTo),e($o,xTo),e($o,tt),M(IA,tt,null),e(tt,$To),e(tt,Qle),e(Qle,kTo),e(tt,STo),e(tt,$i),e($i,RTo),e($i,Wle),e(Wle,BTo),e($i,PTo),e($i,TN),e(TN,ITo),e($i,qTo),e(tt,NTo),M(y_,tt,null),e($o,jTo),e($o,Je),M(qA,Je,null),e(Je,DTo),e(Je,Hle),e(Hle,GTo),e(Je,OTo),e(Je,La),e(La,VTo),e(La,Ule),e(Ule,XTo),e(La,zTo),e(La,Jle),e(Jle,QTo),e(La,WTo),e(La,Yle),e(Yle,HTo),e(La,UTo),e(Je,JTo),e(Je,z),e(z,L_),e(L_,Kle),e(Kle,YTo),e(L_,KTo),e(L_,MN),e(MN,ZTo),e(L_,e9o),e(z,o9o),e(z,x_),e(x_,Zle),e(Zle,r9o),e(x_,t9o),e(x_,EN),e(EN,a9o),e(x_,n9o),e(z,s9o),e(z,$_),e($_,eie),e(eie,l9o),e($_,i9o),e($_,CN),e(CN,d9o),e($_,c9o),e(z,f9o),e(z,k_),e(k_,oie),e(oie,m9o),e(k_,g9o),e(k_,wN),e(wN,h9o),e(k_,p9o),e(z,u9o),e(z,S_),e(S_,rie),e(rie,_9o),e(S_,b9o),e(S_,AN),e(AN,v9o),e(S_,F9o),e(z,T9o),e(z,R_),e(R_,tie),e(tie,M9o),e(R_,E9o),e(R_,yN),e(yN,C9o),e(R_,w9o),e(z,A9o),e(z,B_),e(B_,aie),e(aie,y9o),e(B_,L9o),e(B_,LN),e(LN,x9o),e(B_,$9o),e(z,k9o),e(z,P_),e(P_,nie),e(nie,S9o),e(P_,R9o),e(P_,xN),e(xN,B9o),e(P_,P9o),e(z,I9o),e(z,I_),e(I_,sie),e(sie,q9o),e(I_,N9o),e(I_,$N),e($N,j9o),e(I_,D9o),e(z,G9o),e(z,q_),e(q_,lie),e(lie,O9o),e(q_,V9o),e(q_,kN),e(kN,X9o),e(q_,z9o),e(z,Q9o),e(z,N_),e(N_,iie),e(iie,W9o),e(N_,H9o),e(N_,SN),e(SN,U9o),e(N_,J9o),e(z,Y9o),e(z,j_),e(j_,die),e(die,K9o),e(j_,Z9o),e(j_,RN),e(RN,eMo),e(j_,oMo),e(z,rMo),e(z,D_),e(D_,cie),e(cie,tMo),e(D_,aMo),e(D_,BN),e(BN,nMo),e(D_,sMo),e(z,lMo),e(z,G_),e(G_,fie),e(fie,iMo),e(G_,dMo),e(G_,PN),e(PN,cMo),e(G_,fMo),e(z,mMo),e(z,O_),e(O_,mie),e(mie,gMo),e(O_,hMo),e(O_,IN),e(IN,pMo),e(O_,uMo),e(z,_Mo),e(z,V_),e(V_,gie),e(gie,bMo),e(V_,vMo),e(V_,qN),e(qN,FMo),e(V_,TMo),e(z,MMo),e(z,X_),e(X_,hie),e(hie,EMo),e(X_,CMo),e(X_,NN),e(NN,wMo),e(X_,AMo),e(z,yMo),e(z,z_),e(z_,pie),e(pie,LMo),e(z_,xMo),e(z_,jN),e(jN,$Mo),e(z_,kMo),e(z,SMo),e(z,Q_),e(Q_,uie),e(uie,RMo),e(Q_,BMo),e(Q_,DN),e(DN,PMo),e(Q_,IMo),e(z,qMo),e(z,W_),e(W_,_ie),e(_ie,NMo),e(W_,jMo),e(W_,GN),e(GN,DMo),e(W_,GMo),e(z,OMo),e(z,H_),e(H_,bie),e(bie,VMo),e(H_,XMo),e(H_,ON),e(ON,zMo),e(H_,QMo),e(z,WMo),e(z,U_),e(U_,vie),e(vie,HMo),e(U_,UMo),e(U_,VN),e(VN,JMo),e(U_,YMo),e(z,KMo),e(z,J_),e(J_,Fie),e(Fie,ZMo),e(J_,e4o),e(J_,XN),e(XN,o4o),e(J_,r4o),e(z,t4o),e(z,Y_),e(Y_,Tie),e(Tie,a4o),e(Y_,n4o),e(Y_,zN),e(zN,s4o),e(Y_,l4o),e(z,i4o),e(z,K_),e(K_,Mie),e(Mie,d4o),e(K_,c4o),e(K_,QN),e(QN,f4o),e(K_,m4o),e(z,g4o),e(z,Z_),e(Z_,Eie),e(Eie,h4o),e(Z_,p4o),e(Z_,WN),e(WN,u4o),e(Z_,_4o),e(z,b4o),e(z,e1),e(e1,Cie),e(Cie,v4o),e(e1,F4o),e(e1,HN),e(HN,T4o),e(e1,M4o),e(z,E4o),e(z,o1),e(o1,wie),e(wie,C4o),e(o1,w4o),e(o1,UN),e(UN,A4o),e(o1,y4o),e(z,L4o),e(z,r1),e(r1,Aie),e(Aie,x4o),e(r1,$4o),e(r1,JN),e(JN,k4o),e(r1,S4o),e(z,R4o),e(z,t1),e(t1,yie),e(yie,B4o),e(t1,P4o),e(t1,YN),e(YN,I4o),e(t1,q4o),e(z,N4o),e(z,a1),e(a1,Lie),e(Lie,j4o),e(a1,D4o),e(a1,KN),e(KN,G4o),e(a1,O4o),e(z,V4o),e(z,n1),e(n1,xie),e(xie,X4o),e(n1,z4o),e(n1,ZN),e(ZN,Q4o),e(n1,W4o),e(z,H4o),e(z,s1),e(s1,$ie),e($ie,U4o),e(s1,J4o),e(s1,ej),e(ej,Y4o),e(s1,K4o),e(z,Z4o),e(z,l1),e(l1,kie),e(kie,eEo),e(l1,oEo),e(l1,oj),e(oj,rEo),e(l1,tEo),e(z,aEo),e(z,i1),e(i1,Sie),e(Sie,nEo),e(i1,sEo),e(i1,rj),e(rj,lEo),e(i1,iEo),e(z,dEo),e(z,d1),e(d1,Rie),e(Rie,cEo),e(d1,fEo),e(d1,tj),e(tj,mEo),e(d1,gEo),e(Je,hEo),e(Je,c1),e(c1,pEo),e(c1,Bie),e(Bie,uEo),e(c1,_Eo),e(c1,Pie),e(Pie,bEo),e(Je,vEo),M(f1,Je,null),b(f,aIe,_),b(f,ki,_),e(ki,m1),e(m1,Iie),M(NA,Iie,null),e(ki,FEo),e(ki,qie),e(qie,TEo),b(f,nIe,_),b(f,ko,_),M(jA,ko,null),e(ko,MEo),e(ko,Si),e(Si,EEo),e(Si,aj),e(aj,CEo),e(Si,wEo),e(Si,nj),e(nj,AEo),e(Si,yEo),e(ko,LEo),e(ko,DA),e(DA,xEo),e(DA,Nie),e(Nie,$Eo),e(DA,kEo),e(ko,SEo),e(ko,at),M(GA,at,null),e(at,REo),e(at,jie),e(jie,BEo),e(at,PEo),e(at,Ri),e(Ri,IEo),e(Ri,Die),e(Die,qEo),e(Ri,NEo),e(Ri,sj),e(sj,jEo),e(Ri,DEo),e(at,GEo),M(g1,at,null),e(ko,OEo),e(ko,Ye),M(OA,Ye,null),e(Ye,VEo),e(Ye,Gie),e(Gie,XEo),e(Ye,zEo),e(Ye,xa),e(xa,QEo),e(xa,Oie),e(Oie,WEo),e(xa,HEo),e(xa,Vie),e(Vie,UEo),e(xa,JEo),e(xa,Xie),e(Xie,YEo),e(xa,KEo),e(Ye,ZEo),e(Ye,Q),e(Q,h1),e(h1,zie),e(zie,e5o),e(h1,o5o),e(h1,lj),e(lj,r5o),e(h1,t5o),e(Q,a5o),e(Q,p1),e(p1,Qie),e(Qie,n5o),e(p1,s5o),e(p1,ij),e(ij,l5o),e(p1,i5o),e(Q,d5o),e(Q,u1),e(u1,Wie),e(Wie,c5o),e(u1,f5o),e(u1,dj),e(dj,m5o),e(u1,g5o),e(Q,h5o),e(Q,_1),e(_1,Hie),e(Hie,p5o),e(_1,u5o),e(_1,cj),e(cj,_5o),e(_1,b5o),e(Q,v5o),e(Q,b1),e(b1,Uie),e(Uie,F5o),e(b1,T5o),e(b1,fj),e(fj,M5o),e(b1,E5o),e(Q,C5o),e(Q,v1),e(v1,Jie),e(Jie,w5o),e(v1,A5o),e(v1,mj),e(mj,y5o),e(v1,L5o),e(Q,x5o),e(Q,F1),e(F1,Yie),e(Yie,$5o),e(F1,k5o),e(F1,gj),e(gj,S5o),e(F1,R5o),e(Q,B5o),e(Q,T1),e(T1,Kie),e(Kie,P5o),e(T1,I5o),e(T1,hj),e(hj,q5o),e(T1,N5o),e(Q,j5o),e(Q,M1),e(M1,Zie),e(Zie,D5o),e(M1,G5o),e(M1,pj),e(pj,O5o),e(M1,V5o),e(Q,X5o),e(Q,E1),e(E1,ede),e(ede,z5o),e(E1,Q5o),e(E1,uj),e(uj,W5o),e(E1,H5o),e(Q,U5o),e(Q,C1),e(C1,ode),e(ode,J5o),e(C1,Y5o),e(C1,_j),e(_j,K5o),e(C1,Z5o),e(Q,eCo),e(Q,w1),e(w1,rde),e(rde,oCo),e(w1,rCo),e(w1,bj),e(bj,tCo),e(w1,aCo),e(Q,nCo),e(Q,A1),e(A1,tde),e(tde,sCo),e(A1,lCo),e(A1,vj),e(vj,iCo),e(A1,dCo),e(Q,cCo),e(Q,y1),e(y1,ade),e(ade,fCo),e(y1,mCo),e(y1,Fj),e(Fj,gCo),e(y1,hCo),e(Q,pCo),e(Q,L1),e(L1,nde),e(nde,uCo),e(L1,_Co),e(L1,Tj),e(Tj,bCo),e(L1,vCo),e(Q,FCo),e(Q,x1),e(x1,sde),e(sde,TCo),e(x1,MCo),e(x1,Mj),e(Mj,ECo),e(x1,CCo),e(Q,wCo),e(Q,$1),e($1,lde),e(lde,ACo),e($1,yCo),e($1,Ej),e(Ej,LCo),e($1,xCo),e(Q,$Co),e(Q,k1),e(k1,ide),e(ide,kCo),e(k1,SCo),e(k1,Cj),e(Cj,RCo),e(k1,BCo),e(Q,PCo),e(Q,S1),e(S1,dde),e(dde,ICo),e(S1,qCo),e(S1,wj),e(wj,NCo),e(S1,jCo),e(Q,DCo),e(Q,R1),e(R1,cde),e(cde,GCo),e(R1,OCo),e(R1,Aj),e(Aj,VCo),e(R1,XCo),e(Q,zCo),e(Q,B1),e(B1,fde),e(fde,QCo),e(B1,WCo),e(B1,yj),e(yj,HCo),e(B1,UCo),e(Q,JCo),e(Q,P1),e(P1,mde),e(mde,YCo),e(P1,KCo),e(P1,Lj),e(Lj,ZCo),e(P1,e3o),e(Q,o3o),e(Q,I1),e(I1,gde),e(gde,r3o),e(I1,t3o),e(I1,xj),e(xj,a3o),e(I1,n3o),e(Q,s3o),e(Q,q1),e(q1,hde),e(hde,l3o),e(q1,i3o),e(q1,$j),e($j,d3o),e(q1,c3o),e(Q,f3o),e(Q,N1),e(N1,pde),e(pde,m3o),e(N1,g3o),e(N1,kj),e(kj,h3o),e(N1,p3o),e(Q,u3o),e(Q,j1),e(j1,ude),e(ude,_3o),e(j1,b3o),e(j1,Sj),e(Sj,v3o),e(j1,F3o),e(Q,T3o),e(Q,D1),e(D1,_de),e(_de,M3o),e(D1,E3o),e(D1,Rj),e(Rj,C3o),e(D1,w3o),e(Q,A3o),e(Q,G1),e(G1,bde),e(bde,y3o),e(G1,L3o),e(G1,Bj),e(Bj,x3o),e(G1,$3o),e(Q,k3o),e(Q,O1),e(O1,vde),e(vde,S3o),e(O1,R3o),e(O1,Pj),e(Pj,B3o),e(O1,P3o),e(Q,I3o),e(Q,V1),e(V1,Fde),e(Fde,q3o),e(V1,N3o),e(V1,Ij),e(Ij,j3o),e(V1,D3o),e(Q,G3o),e(Q,X1),e(X1,Tde),e(Tde,O3o),e(X1,V3o),e(X1,Mde),e(Mde,X3o),e(X1,z3o),e(Q,Q3o),e(Q,z1),e(z1,Ede),e(Ede,W3o),e(z1,H3o),e(z1,qj),e(qj,U3o),e(z1,J3o),e(Q,Y3o),e(Q,Q1),e(Q1,Cde),e(Cde,K3o),e(Q1,Z3o),e(Q1,Nj),e(Nj,ewo),e(Q1,owo),e(Q,rwo),e(Q,W1),e(W1,wde),e(wde,two),e(W1,awo),e(W1,jj),e(jj,nwo),e(W1,swo),e(Q,lwo),e(Q,H1),e(H1,Ade),e(Ade,iwo),e(H1,dwo),e(H1,Dj),e(Dj,cwo),e(H1,fwo),e(Ye,mwo),e(Ye,U1),e(U1,gwo),e(U1,yde),e(yde,hwo),e(U1,pwo),e(U1,Lde),e(Lde,uwo),e(Ye,_wo),M(J1,Ye,null),b(f,sIe,_),b(f,Bi,_),e(Bi,Y1),e(Y1,xde),M(VA,xde,null),e(Bi,bwo),e(Bi,$de),e($de,vwo),b(f,lIe,_),b(f,So,_),M(XA,So,null),e(So,Fwo),e(So,Pi),e(Pi,Two),e(Pi,Gj),e(Gj,Mwo),e(Pi,Ewo),e(Pi,Oj),e(Oj,Cwo),e(Pi,wwo),e(So,Awo),e(So,zA),e(zA,ywo),e(zA,kde),e(kde,Lwo),e(zA,xwo),e(So,$wo),e(So,nt),M(QA,nt,null),e(nt,kwo),e(nt,Sde),e(Sde,Swo),e(nt,Rwo),e(nt,Ii),e(Ii,Bwo),e(Ii,Rde),e(Rde,Pwo),e(Ii,Iwo),e(Ii,Vj),e(Vj,qwo),e(Ii,Nwo),e(nt,jwo),M(K1,nt,null),e(So,Dwo),e(So,Ke),M(WA,Ke,null),e(Ke,Gwo),e(Ke,Bde),e(Bde,Owo),e(Ke,Vwo),e(Ke,$a),e($a,Xwo),e($a,Pde),e(Pde,zwo),e($a,Qwo),e($a,Ide),e(Ide,Wwo),e($a,Hwo),e($a,qde),e(qde,Uwo),e($a,Jwo),e(Ke,Ywo),e(Ke,pe),e(pe,Z1),e(Z1,Nde),e(Nde,Kwo),e(Z1,Zwo),e(Z1,Xj),e(Xj,eAo),e(Z1,oAo),e(pe,rAo),e(pe,e8),e(e8,jde),e(jde,tAo),e(e8,aAo),e(e8,zj),e(zj,nAo),e(e8,sAo),e(pe,lAo),e(pe,o8),e(o8,Dde),e(Dde,iAo),e(o8,dAo),e(o8,Qj),e(Qj,cAo),e(o8,fAo),e(pe,mAo),e(pe,r8),e(r8,Gde),e(Gde,gAo),e(r8,hAo),e(r8,Wj),e(Wj,pAo),e(r8,uAo),e(pe,_Ao),e(pe,t8),e(t8,Ode),e(Ode,bAo),e(t8,vAo),e(t8,Hj),e(Hj,FAo),e(t8,TAo),e(pe,MAo),e(pe,a8),e(a8,Vde),e(Vde,EAo),e(a8,CAo),e(a8,Uj),e(Uj,wAo),e(a8,AAo),e(pe,yAo),e(pe,n8),e(n8,Xde),e(Xde,LAo),e(n8,xAo),e(n8,Jj),e(Jj,$Ao),e(n8,kAo),e(pe,SAo),e(pe,s8),e(s8,zde),e(zde,RAo),e(s8,BAo),e(s8,Yj),e(Yj,PAo),e(s8,IAo),e(pe,qAo),e(pe,l8),e(l8,Qde),e(Qde,NAo),e(l8,jAo),e(l8,Kj),e(Kj,DAo),e(l8,GAo),e(pe,OAo),e(pe,i8),e(i8,Wde),e(Wde,VAo),e(i8,XAo),e(i8,Zj),e(Zj,zAo),e(i8,QAo),e(pe,WAo),e(pe,d8),e(d8,Hde),e(Hde,HAo),e(d8,UAo),e(d8,eD),e(eD,JAo),e(d8,YAo),e(pe,KAo),e(pe,c8),e(c8,Ude),e(Ude,ZAo),e(c8,e0o),e(c8,oD),e(oD,o0o),e(c8,r0o),e(pe,t0o),e(pe,f8),e(f8,Jde),e(Jde,a0o),e(f8,n0o),e(f8,rD),e(rD,s0o),e(f8,l0o),e(pe,i0o),e(pe,m8),e(m8,Yde),e(Yde,d0o),e(m8,c0o),e(m8,tD),e(tD,f0o),e(m8,m0o),e(pe,g0o),e(pe,g8),e(g8,Kde),e(Kde,h0o),e(g8,p0o),e(g8,aD),e(aD,u0o),e(g8,_0o),e(pe,b0o),e(pe,h8),e(h8,Zde),e(Zde,v0o),e(h8,F0o),e(h8,nD),e(nD,T0o),e(h8,M0o),e(Ke,E0o),e(Ke,p8),e(p8,C0o),e(p8,ece),e(ece,w0o),e(p8,A0o),e(p8,oce),e(oce,y0o),e(Ke,L0o),M(u8,Ke,null),b(f,iIe,_),b(f,qi,_),e(qi,_8),e(_8,rce),M(HA,rce,null),e(qi,x0o),e(qi,tce),e(tce,$0o),b(f,dIe,_),b(f,Ro,_),M(UA,Ro,null),e(Ro,k0o),e(Ro,Ni),e(Ni,S0o),e(Ni,sD),e(sD,R0o),e(Ni,B0o),e(Ni,lD),e(lD,P0o),e(Ni,I0o),e(Ro,q0o),e(Ro,JA),e(JA,N0o),e(JA,ace),e(ace,j0o),e(JA,D0o),e(Ro,G0o),e(Ro,st),M(YA,st,null),e(st,O0o),e(st,nce),e(nce,V0o),e(st,X0o),e(st,ji),e(ji,z0o),e(ji,sce),e(sce,Q0o),e(ji,W0o),e(ji,iD),e(iD,H0o),e(ji,U0o),e(st,J0o),M(b8,st,null),e(Ro,Y0o),e(Ro,Ze),M(KA,Ze,null),e(Ze,K0o),e(Ze,lce),e(lce,Z0o),e(Ze,eyo),e(Ze,ka),e(ka,oyo),e(ka,ice),e(ice,ryo),e(ka,tyo),e(ka,dce),e(dce,ayo),e(ka,nyo),e(ka,cce),e(cce,syo),e(ka,lyo),e(Ze,iyo),e(Ze,q),e(q,v8),e(v8,fce),e(fce,dyo),e(v8,cyo),e(v8,dD),e(dD,fyo),e(v8,myo),e(q,gyo),e(q,F8),e(F8,mce),e(mce,hyo),e(F8,pyo),e(F8,cD),e(cD,uyo),e(F8,_yo),e(q,byo),e(q,T8),e(T8,gce),e(gce,vyo),e(T8,Fyo),e(T8,fD),e(fD,Tyo),e(T8,Myo),e(q,Eyo),e(q,M8),e(M8,hce),e(hce,Cyo),e(M8,wyo),e(M8,mD),e(mD,Ayo),e(M8,yyo),e(q,Lyo),e(q,E8),e(E8,pce),e(pce,xyo),e(E8,$yo),e(E8,gD),e(gD,kyo),e(E8,Syo),e(q,Ryo),e(q,C8),e(C8,uce),e(uce,Byo),e(C8,Pyo),e(C8,hD),e(hD,Iyo),e(C8,qyo),e(q,Nyo),e(q,w8),e(w8,_ce),e(_ce,jyo),e(w8,Dyo),e(w8,pD),e(pD,Gyo),e(w8,Oyo),e(q,Vyo),e(q,A8),e(A8,bce),e(bce,Xyo),e(A8,zyo),e(A8,uD),e(uD,Qyo),e(A8,Wyo),e(q,Hyo),e(q,y8),e(y8,vce),e(vce,Uyo),e(y8,Jyo),e(y8,_D),e(_D,Yyo),e(y8,Kyo),e(q,Zyo),e(q,L8),e(L8,Fce),e(Fce,eLo),e(L8,oLo),e(L8,bD),e(bD,rLo),e(L8,tLo),e(q,aLo),e(q,x8),e(x8,Tce),e(Tce,nLo),e(x8,sLo),e(x8,vD),e(vD,lLo),e(x8,iLo),e(q,dLo),e(q,$8),e($8,Mce),e(Mce,cLo),e($8,fLo),e($8,FD),e(FD,mLo),e($8,gLo),e(q,hLo),e(q,k8),e(k8,Ece),e(Ece,pLo),e(k8,uLo),e(k8,TD),e(TD,_Lo),e(k8,bLo),e(q,vLo),e(q,S8),e(S8,Cce),e(Cce,FLo),e(S8,TLo),e(S8,MD),e(MD,MLo),e(S8,ELo),e(q,CLo),e(q,R8),e(R8,wce),e(wce,wLo),e(R8,ALo),e(R8,ED),e(ED,yLo),e(R8,LLo),e(q,xLo),e(q,B8),e(B8,Ace),e(Ace,$Lo),e(B8,kLo),e(B8,CD),e(CD,SLo),e(B8,RLo),e(q,BLo),e(q,P8),e(P8,yce),e(yce,PLo),e(P8,ILo),e(P8,wD),e(wD,qLo),e(P8,NLo),e(q,jLo),e(q,I8),e(I8,Lce),e(Lce,DLo),e(I8,GLo),e(I8,AD),e(AD,OLo),e(I8,VLo),e(q,XLo),e(q,q8),e(q8,xce),e(xce,zLo),e(q8,QLo),e(q8,yD),e(yD,WLo),e(q8,HLo),e(q,ULo),e(q,N8),e(N8,$ce),e($ce,JLo),e(N8,YLo),e(N8,LD),e(LD,KLo),e(N8,ZLo),e(q,exo),e(q,j8),e(j8,kce),e(kce,oxo),e(j8,rxo),e(j8,xD),e(xD,txo),e(j8,axo),e(q,nxo),e(q,D8),e(D8,Sce),e(Sce,sxo),e(D8,lxo),e(D8,$D),e($D,ixo),e(D8,dxo),e(q,cxo),e(q,G8),e(G8,Rce),e(Rce,fxo),e(G8,mxo),e(G8,kD),e(kD,gxo),e(G8,hxo),e(q,pxo),e(q,O8),e(O8,Bce),e(Bce,uxo),e(O8,_xo),e(O8,SD),e(SD,bxo),e(O8,vxo),e(q,Fxo),e(q,V8),e(V8,Pce),e(Pce,Txo),e(V8,Mxo),e(V8,RD),e(RD,Exo),e(V8,Cxo),e(q,wxo),e(q,X8),e(X8,Ice),e(Ice,Axo),e(X8,yxo),e(X8,BD),e(BD,Lxo),e(X8,xxo),e(q,$xo),e(q,z8),e(z8,qce),e(qce,kxo),e(z8,Sxo),e(z8,PD),e(PD,Rxo),e(z8,Bxo),e(q,Pxo),e(q,Q8),e(Q8,Nce),e(Nce,Ixo),e(Q8,qxo),e(Q8,ID),e(ID,Nxo),e(Q8,jxo),e(q,Dxo),e(q,W8),e(W8,jce),e(jce,Gxo),e(W8,Oxo),e(W8,qD),e(qD,Vxo),e(W8,Xxo),e(q,zxo),e(q,H8),e(H8,Dce),e(Dce,Qxo),e(H8,Wxo),e(H8,ND),e(ND,Hxo),e(H8,Uxo),e(q,Jxo),e(q,U8),e(U8,Gce),e(Gce,Yxo),e(U8,Kxo),e(U8,jD),e(jD,Zxo),e(U8,e7o),e(q,o7o),e(q,J8),e(J8,Oce),e(Oce,r7o),e(J8,t7o),e(J8,DD),e(DD,a7o),e(J8,n7o),e(q,s7o),e(q,Y8),e(Y8,Vce),e(Vce,l7o),e(Y8,i7o),e(Y8,GD),e(GD,d7o),e(Y8,c7o),e(q,f7o),e(q,K8),e(K8,Xce),e(Xce,m7o),e(K8,g7o),e(K8,OD),e(OD,h7o),e(K8,p7o),e(q,u7o),e(q,Z8),e(Z8,zce),e(zce,_7o),e(Z8,b7o),e(Z8,VD),e(VD,v7o),e(Z8,F7o),e(q,T7o),e(q,eb),e(eb,Qce),e(Qce,M7o),e(eb,E7o),e(eb,XD),e(XD,C7o),e(eb,w7o),e(q,A7o),e(q,ob),e(ob,Wce),e(Wce,y7o),e(ob,L7o),e(ob,zD),e(zD,x7o),e(ob,$7o),e(q,k7o),e(q,rb),e(rb,Hce),e(Hce,S7o),e(rb,R7o),e(rb,QD),e(QD,B7o),e(rb,P7o),e(q,I7o),e(q,tb),e(tb,Uce),e(Uce,q7o),e(tb,N7o),e(tb,WD),e(WD,j7o),e(tb,D7o),e(q,G7o),e(q,ab),e(ab,Jce),e(Jce,O7o),e(ab,V7o),e(ab,HD),e(HD,X7o),e(ab,z7o),e(q,Q7o),e(q,nb),e(nb,Yce),e(Yce,W7o),e(nb,H7o),e(nb,UD),e(UD,U7o),e(nb,J7o),e(q,Y7o),e(q,sb),e(sb,Kce),e(Kce,K7o),e(sb,Z7o),e(sb,JD),e(JD,e$o),e(sb,o$o),e(q,r$o),e(q,lb),e(lb,Zce),e(Zce,t$o),e(lb,a$o),e(lb,YD),e(YD,n$o),e(lb,s$o),e(q,l$o),e(q,ib),e(ib,efe),e(efe,i$o),e(ib,d$o),e(ib,KD),e(KD,c$o),e(ib,f$o),e(q,m$o),e(q,db),e(db,ofe),e(ofe,g$o),e(db,h$o),e(db,ZD),e(ZD,p$o),e(db,u$o),e(q,_$o),e(q,cb),e(cb,rfe),e(rfe,b$o),e(cb,v$o),e(cb,eG),e(eG,F$o),e(cb,T$o),e(Ze,M$o),e(Ze,fb),e(fb,E$o),e(fb,tfe),e(tfe,C$o),e(fb,w$o),e(fb,afe),e(afe,A$o),e(Ze,y$o),M(mb,Ze,null),b(f,cIe,_),b(f,Di,_),e(Di,gb),e(gb,nfe),M(ZA,nfe,null),e(Di,L$o),e(Di,sfe),e(sfe,x$o),b(f,fIe,_),b(f,Bo,_),M(e0,Bo,null),e(Bo,$$o),e(Bo,Gi),e(Gi,k$o),e(Gi,oG),e(oG,S$o),e(Gi,R$o),e(Gi,rG),e(rG,B$o),e(Gi,P$o),e(Bo,I$o),e(Bo,o0),e(o0,q$o),e(o0,lfe),e(lfe,N$o),e(o0,j$o),e(Bo,D$o),e(Bo,lt),M(r0,lt,null),e(lt,G$o),e(lt,ife),e(ife,O$o),e(lt,V$o),e(lt,Oi),e(Oi,X$o),e(Oi,dfe),e(dfe,z$o),e(Oi,Q$o),e(Oi,tG),e(tG,W$o),e(Oi,H$o),e(lt,U$o),M(hb,lt,null),e(Bo,J$o),e(Bo,eo),M(t0,eo,null),e(eo,Y$o),e(eo,cfe),e(cfe,K$o),e(eo,Z$o),e(eo,Sa),e(Sa,eko),e(Sa,ffe),e(ffe,oko),e(Sa,rko),e(Sa,mfe),e(mfe,tko),e(Sa,ako),e(Sa,gfe),e(gfe,nko),e(Sa,sko),e(eo,lko),e(eo,Y),e(Y,pb),e(pb,hfe),e(hfe,iko),e(pb,dko),e(pb,aG),e(aG,cko),e(pb,fko),e(Y,mko),e(Y,ub),e(ub,pfe),e(pfe,gko),e(ub,hko),e(ub,nG),e(nG,pko),e(ub,uko),e(Y,_ko),e(Y,_b),e(_b,ufe),e(ufe,bko),e(_b,vko),e(_b,sG),e(sG,Fko),e(_b,Tko),e(Y,Mko),e(Y,bb),e(bb,_fe),e(_fe,Eko),e(bb,Cko),e(bb,lG),e(lG,wko),e(bb,Ako),e(Y,yko),e(Y,vb),e(vb,bfe),e(bfe,Lko),e(vb,xko),e(vb,iG),e(iG,$ko),e(vb,kko),e(Y,Sko),e(Y,Fb),e(Fb,vfe),e(vfe,Rko),e(Fb,Bko),e(Fb,dG),e(dG,Pko),e(Fb,Iko),e(Y,qko),e(Y,Tb),e(Tb,Ffe),e(Ffe,Nko),e(Tb,jko),e(Tb,cG),e(cG,Dko),e(Tb,Gko),e(Y,Oko),e(Y,Mb),e(Mb,Tfe),e(Tfe,Vko),e(Mb,Xko),e(Mb,fG),e(fG,zko),e(Mb,Qko),e(Y,Wko),e(Y,Eb),e(Eb,Mfe),e(Mfe,Hko),e(Eb,Uko),e(Eb,mG),e(mG,Jko),e(Eb,Yko),e(Y,Kko),e(Y,Cb),e(Cb,Efe),e(Efe,Zko),e(Cb,eSo),e(Cb,gG),e(gG,oSo),e(Cb,rSo),e(Y,tSo),e(Y,wb),e(wb,Cfe),e(Cfe,aSo),e(wb,nSo),e(wb,hG),e(hG,sSo),e(wb,lSo),e(Y,iSo),e(Y,Ab),e(Ab,wfe),e(wfe,dSo),e(Ab,cSo),e(Ab,pG),e(pG,fSo),e(Ab,mSo),e(Y,gSo),e(Y,yb),e(yb,Afe),e(Afe,hSo),e(yb,pSo),e(yb,uG),e(uG,uSo),e(yb,_So),e(Y,bSo),e(Y,Lb),e(Lb,yfe),e(yfe,vSo),e(Lb,FSo),e(Lb,_G),e(_G,TSo),e(Lb,MSo),e(Y,ESo),e(Y,xb),e(xb,Lfe),e(Lfe,CSo),e(xb,wSo),e(xb,bG),e(bG,ASo),e(xb,ySo),e(Y,LSo),e(Y,$b),e($b,xfe),e(xfe,xSo),e($b,$So),e($b,vG),e(vG,kSo),e($b,SSo),e(Y,RSo),e(Y,kb),e(kb,$fe),e($fe,BSo),e(kb,PSo),e(kb,FG),e(FG,ISo),e(kb,qSo),e(Y,NSo),e(Y,Sb),e(Sb,kfe),e(kfe,jSo),e(Sb,DSo),e(Sb,TG),e(TG,GSo),e(Sb,OSo),e(Y,VSo),e(Y,Rb),e(Rb,Sfe),e(Sfe,XSo),e(Rb,zSo),e(Rb,MG),e(MG,QSo),e(Rb,WSo),e(Y,HSo),e(Y,Bb),e(Bb,Rfe),e(Rfe,USo),e(Bb,JSo),e(Bb,EG),e(EG,YSo),e(Bb,KSo),e(Y,ZSo),e(Y,Pb),e(Pb,Bfe),e(Bfe,eRo),e(Pb,oRo),e(Pb,CG),e(CG,rRo),e(Pb,tRo),e(Y,aRo),e(Y,Ib),e(Ib,Pfe),e(Pfe,nRo),e(Ib,sRo),e(Ib,wG),e(wG,lRo),e(Ib,iRo),e(Y,dRo),e(Y,qb),e(qb,Ife),e(Ife,cRo),e(qb,fRo),e(qb,AG),e(AG,mRo),e(qb,gRo),e(Y,hRo),e(Y,Nb),e(Nb,qfe),e(qfe,pRo),e(Nb,uRo),e(Nb,yG),e(yG,_Ro),e(Nb,bRo),e(Y,vRo),e(Y,jb),e(jb,Nfe),e(Nfe,FRo),e(jb,TRo),e(jb,LG),e(LG,MRo),e(jb,ERo),e(Y,CRo),e(Y,Db),e(Db,jfe),e(jfe,wRo),e(Db,ARo),e(Db,xG),e(xG,yRo),e(Db,LRo),e(Y,xRo),e(Y,Gb),e(Gb,Dfe),e(Dfe,$Ro),e(Gb,kRo),e(Gb,$G),e($G,SRo),e(Gb,RRo),e(Y,BRo),e(Y,Ob),e(Ob,Gfe),e(Gfe,PRo),e(Ob,IRo),e(Ob,kG),e(kG,qRo),e(Ob,NRo),e(Y,jRo),e(Y,Vb),e(Vb,Ofe),e(Ofe,DRo),e(Vb,GRo),e(Vb,SG),e(SG,ORo),e(Vb,VRo),e(eo,XRo),e(eo,Xb),e(Xb,zRo),e(Xb,Vfe),e(Vfe,QRo),e(Xb,WRo),e(Xb,Xfe),e(Xfe,HRo),e(eo,URo),M(zb,eo,null),b(f,mIe,_),b(f,Vi,_),e(Vi,Qb),e(Qb,zfe),M(a0,zfe,null),e(Vi,JRo),e(Vi,Qfe),e(Qfe,YRo),b(f,gIe,_),b(f,Po,_),M(n0,Po,null),e(Po,KRo),e(Po,Xi),e(Xi,ZRo),e(Xi,RG),e(RG,eBo),e(Xi,oBo),e(Xi,BG),e(BG,rBo),e(Xi,tBo),e(Po,aBo),e(Po,s0),e(s0,nBo),e(s0,Wfe),e(Wfe,sBo),e(s0,lBo),e(Po,iBo),e(Po,it),M(l0,it,null),e(it,dBo),e(it,Hfe),e(Hfe,cBo),e(it,fBo),e(it,zi),e(zi,mBo),e(zi,Ufe),e(Ufe,gBo),e(zi,hBo),e(zi,PG),e(PG,pBo),e(zi,uBo),e(it,_Bo),M(Wb,it,null),e(Po,bBo),e(Po,oo),M(i0,oo,null),e(oo,vBo),e(oo,Jfe),e(Jfe,FBo),e(oo,TBo),e(oo,Ra),e(Ra,MBo),e(Ra,Yfe),e(Yfe,EBo),e(Ra,CBo),e(Ra,Kfe),e(Kfe,wBo),e(Ra,ABo),e(Ra,Zfe),e(Zfe,yBo),e(Ra,LBo),e(oo,xBo),e(oo,Yr),e(Yr,Hb),e(Hb,eme),e(eme,$Bo),e(Hb,kBo),e(Hb,IG),e(IG,SBo),e(Hb,RBo),e(Yr,BBo),e(Yr,Ub),e(Ub,ome),e(ome,PBo),e(Ub,IBo),e(Ub,qG),e(qG,qBo),e(Ub,NBo),e(Yr,jBo),e(Yr,Jb),e(Jb,rme),e(rme,DBo),e(Jb,GBo),e(Jb,NG),e(NG,OBo),e(Jb,VBo),e(Yr,XBo),e(Yr,Yb),e(Yb,tme),e(tme,zBo),e(Yb,QBo),e(Yb,jG),e(jG,WBo),e(Yb,HBo),e(Yr,UBo),e(Yr,Kb),e(Kb,ame),e(ame,JBo),e(Kb,YBo),e(Kb,DG),e(DG,KBo),e(Kb,ZBo),e(oo,ePo),e(oo,Zb),e(Zb,oPo),e(Zb,nme),e(nme,rPo),e(Zb,tPo),e(Zb,sme),e(sme,aPo),e(oo,nPo),M(e2,oo,null),b(f,hIe,_),b(f,Qi,_),e(Qi,o2),e(o2,lme),M(d0,lme,null),e(Qi,sPo),e(Qi,ime),e(ime,lPo),b(f,pIe,_),b(f,Io,_),M(c0,Io,null),e(Io,iPo),e(Io,Wi),e(Wi,dPo),e(Wi,GG),e(GG,cPo),e(Wi,fPo),e(Wi,OG),e(OG,mPo),e(Wi,gPo),e(Io,hPo),e(Io,f0),e(f0,pPo),e(f0,dme),e(dme,uPo),e(f0,_Po),e(Io,bPo),e(Io,dt),M(m0,dt,null),e(dt,vPo),e(dt,cme),e(cme,FPo),e(dt,TPo),e(dt,Hi),e(Hi,MPo),e(Hi,fme),e(fme,EPo),e(Hi,CPo),e(Hi,VG),e(VG,wPo),e(Hi,APo),e(dt,yPo),M(r2,dt,null),e(Io,LPo),e(Io,ro),M(g0,ro,null),e(ro,xPo),e(ro,mme),e(mme,$Po),e(ro,kPo),e(ro,Ba),e(Ba,SPo),e(Ba,gme),e(gme,RPo),e(Ba,BPo),e(Ba,hme),e(hme,PPo),e(Ba,IPo),e(Ba,pme),e(pme,qPo),e(Ba,NPo),e(ro,jPo),e(ro,U),e(U,t2),e(t2,ume),e(ume,DPo),e(t2,GPo),e(t2,XG),e(XG,OPo),e(t2,VPo),e(U,XPo),e(U,a2),e(a2,_me),e(_me,zPo),e(a2,QPo),e(a2,zG),e(zG,WPo),e(a2,HPo),e(U,UPo),e(U,n2),e(n2,bme),e(bme,JPo),e(n2,YPo),e(n2,QG),e(QG,KPo),e(n2,ZPo),e(U,eIo),e(U,s2),e(s2,vme),e(vme,oIo),e(s2,rIo),e(s2,WG),e(WG,tIo),e(s2,aIo),e(U,nIo),e(U,l2),e(l2,Fme),e(Fme,sIo),e(l2,lIo),e(l2,HG),e(HG,iIo),e(l2,dIo),e(U,cIo),e(U,i2),e(i2,Tme),e(Tme,fIo),e(i2,mIo),e(i2,UG),e(UG,gIo),e(i2,hIo),e(U,pIo),e(U,d2),e(d2,Mme),e(Mme,uIo),e(d2,_Io),e(d2,JG),e(JG,bIo),e(d2,vIo),e(U,FIo),e(U,c2),e(c2,Eme),e(Eme,TIo),e(c2,MIo),e(c2,YG),e(YG,EIo),e(c2,CIo),e(U,wIo),e(U,f2),e(f2,Cme),e(Cme,AIo),e(f2,yIo),e(f2,KG),e(KG,LIo),e(f2,xIo),e(U,$Io),e(U,m2),e(m2,wme),e(wme,kIo),e(m2,SIo),e(m2,ZG),e(ZG,RIo),e(m2,BIo),e(U,PIo),e(U,g2),e(g2,Ame),e(Ame,IIo),e(g2,qIo),e(g2,eO),e(eO,NIo),e(g2,jIo),e(U,DIo),e(U,h2),e(h2,yme),e(yme,GIo),e(h2,OIo),e(h2,oO),e(oO,VIo),e(h2,XIo),e(U,zIo),e(U,p2),e(p2,Lme),e(Lme,QIo),e(p2,WIo),e(p2,rO),e(rO,HIo),e(p2,UIo),e(U,JIo),e(U,u2),e(u2,xme),e(xme,YIo),e(u2,KIo),e(u2,tO),e(tO,ZIo),e(u2,eqo),e(U,oqo),e(U,_2),e(_2,$me),e($me,rqo),e(_2,tqo),e(_2,aO),e(aO,aqo),e(_2,nqo),e(U,sqo),e(U,b2),e(b2,kme),e(kme,lqo),e(b2,iqo),e(b2,nO),e(nO,dqo),e(b2,cqo),e(U,fqo),e(U,v2),e(v2,Sme),e(Sme,mqo),e(v2,gqo),e(v2,sO),e(sO,hqo),e(v2,pqo),e(U,uqo),e(U,F2),e(F2,Rme),e(Rme,_qo),e(F2,bqo),e(F2,lO),e(lO,vqo),e(F2,Fqo),e(U,Tqo),e(U,T2),e(T2,Bme),e(Bme,Mqo),e(T2,Eqo),e(T2,iO),e(iO,Cqo),e(T2,wqo),e(U,Aqo),e(U,M2),e(M2,Pme),e(Pme,yqo),e(M2,Lqo),e(M2,dO),e(dO,xqo),e(M2,$qo),e(U,kqo),e(U,E2),e(E2,Ime),e(Ime,Sqo),e(E2,Rqo),e(E2,cO),e(cO,Bqo),e(E2,Pqo),e(U,Iqo),e(U,C2),e(C2,qme),e(qme,qqo),e(C2,Nqo),e(C2,fO),e(fO,jqo),e(C2,Dqo),e(U,Gqo),e(U,w2),e(w2,Nme),e(Nme,Oqo),e(w2,Vqo),e(w2,mO),e(mO,Xqo),e(w2,zqo),e(U,Qqo),e(U,A2),e(A2,jme),e(jme,Wqo),e(A2,Hqo),e(A2,gO),e(gO,Uqo),e(A2,Jqo),e(U,Yqo),e(U,y2),e(y2,Dme),e(Dme,Kqo),e(y2,Zqo),e(y2,hO),e(hO,eNo),e(y2,oNo),e(U,rNo),e(U,L2),e(L2,Gme),e(Gme,tNo),e(L2,aNo),e(L2,pO),e(pO,nNo),e(L2,sNo),e(U,lNo),e(U,x2),e(x2,Ome),e(Ome,iNo),e(x2,dNo),e(x2,uO),e(uO,cNo),e(x2,fNo),e(U,mNo),e(U,$2),e($2,Vme),e(Vme,gNo),e($2,hNo),e($2,_O),e(_O,pNo),e($2,uNo),e(U,_No),e(U,k2),e(k2,Xme),e(Xme,bNo),e(k2,vNo),e(k2,bO),e(bO,FNo),e(k2,TNo),e(U,MNo),e(U,S2),e(S2,zme),e(zme,ENo),e(S2,CNo),e(S2,vO),e(vO,wNo),e(S2,ANo),e(U,yNo),e(U,R2),e(R2,Qme),e(Qme,LNo),e(R2,xNo),e(R2,FO),e(FO,$No),e(R2,kNo),e(U,SNo),e(U,B2),e(B2,Wme),e(Wme,RNo),e(B2,BNo),e(B2,TO),e(TO,PNo),e(B2,INo),e(U,qNo),e(U,P2),e(P2,Hme),e(Hme,NNo),e(P2,jNo),e(P2,MO),e(MO,DNo),e(P2,GNo),e(ro,ONo),e(ro,I2),e(I2,VNo),e(I2,Ume),e(Ume,XNo),e(I2,zNo),e(I2,Jme),e(Jme,QNo),e(ro,WNo),M(q2,ro,null),b(f,uIe,_),b(f,Ui,_),e(Ui,N2),e(N2,Yme),M(h0,Yme,null),e(Ui,HNo),e(Ui,Kme),e(Kme,UNo),b(f,_Ie,_),b(f,qo,_),M(p0,qo,null),e(qo,JNo),e(qo,Ji),e(Ji,YNo),e(Ji,EO),e(EO,KNo),e(Ji,ZNo),e(Ji,CO),e(CO,ejo),e(Ji,ojo),e(qo,rjo),e(qo,u0),e(u0,tjo),e(u0,Zme),e(Zme,ajo),e(u0,njo),e(qo,sjo),e(qo,ct),M(_0,ct,null),e(ct,ljo),e(ct,ege),e(ege,ijo),e(ct,djo),e(ct,Yi),e(Yi,cjo),e(Yi,oge),e(oge,fjo),e(Yi,mjo),e(Yi,wO),e(wO,gjo),e(Yi,hjo),e(ct,pjo),M(j2,ct,null),e(qo,ujo),e(qo,to),M(b0,to,null),e(to,_jo),e(to,rge),e(rge,bjo),e(to,vjo),e(to,Pa),e(Pa,Fjo),e(Pa,tge),e(tge,Tjo),e(Pa,Mjo),e(Pa,age),e(age,Ejo),e(Pa,Cjo),e(Pa,nge),e(nge,wjo),e(Pa,Ajo),e(to,yjo),e(to,O),e(O,D2),e(D2,sge),e(sge,Ljo),e(D2,xjo),e(D2,AO),e(AO,$jo),e(D2,kjo),e(O,Sjo),e(O,G2),e(G2,lge),e(lge,Rjo),e(G2,Bjo),e(G2,yO),e(yO,Pjo),e(G2,Ijo),e(O,qjo),e(O,O2),e(O2,ige),e(ige,Njo),e(O2,jjo),e(O2,LO),e(LO,Djo),e(O2,Gjo),e(O,Ojo),e(O,V2),e(V2,dge),e(dge,Vjo),e(V2,Xjo),e(V2,xO),e(xO,zjo),e(V2,Qjo),e(O,Wjo),e(O,X2),e(X2,cge),e(cge,Hjo),e(X2,Ujo),e(X2,$O),e($O,Jjo),e(X2,Yjo),e(O,Kjo),e(O,z2),e(z2,fge),e(fge,Zjo),e(z2,eDo),e(z2,kO),e(kO,oDo),e(z2,rDo),e(O,tDo),e(O,Q2),e(Q2,mge),e(mge,aDo),e(Q2,nDo),e(Q2,SO),e(SO,sDo),e(Q2,lDo),e(O,iDo),e(O,W2),e(W2,gge),e(gge,dDo),e(W2,cDo),e(W2,RO),e(RO,fDo),e(W2,mDo),e(O,gDo),e(O,H2),e(H2,hge),e(hge,hDo),e(H2,pDo),e(H2,BO),e(BO,uDo),e(H2,_Do),e(O,bDo),e(O,U2),e(U2,pge),e(pge,vDo),e(U2,FDo),e(U2,PO),e(PO,TDo),e(U2,MDo),e(O,EDo),e(O,J2),e(J2,uge),e(uge,CDo),e(J2,wDo),e(J2,IO),e(IO,ADo),e(J2,yDo),e(O,LDo),e(O,Y2),e(Y2,_ge),e(_ge,xDo),e(Y2,$Do),e(Y2,qO),e(qO,kDo),e(Y2,SDo),e(O,RDo),e(O,K2),e(K2,bge),e(bge,BDo),e(K2,PDo),e(K2,NO),e(NO,IDo),e(K2,qDo),e(O,NDo),e(O,Z2),e(Z2,vge),e(vge,jDo),e(Z2,DDo),e(Z2,jO),e(jO,GDo),e(Z2,ODo),e(O,VDo),e(O,ev),e(ev,Fge),e(Fge,XDo),e(ev,zDo),e(ev,DO),e(DO,QDo),e(ev,WDo),e(O,HDo),e(O,ov),e(ov,Tge),e(Tge,UDo),e(ov,JDo),e(ov,GO),e(GO,YDo),e(ov,KDo),e(O,ZDo),e(O,rv),e(rv,Mge),e(Mge,eGo),e(rv,oGo),e(rv,OO),e(OO,rGo),e(rv,tGo),e(O,aGo),e(O,tv),e(tv,Ege),e(Ege,nGo),e(tv,sGo),e(tv,VO),e(VO,lGo),e(tv,iGo),e(O,dGo),e(O,av),e(av,Cge),e(Cge,cGo),e(av,fGo),e(av,XO),e(XO,mGo),e(av,gGo),e(O,hGo),e(O,nv),e(nv,wge),e(wge,pGo),e(nv,uGo),e(nv,zO),e(zO,_Go),e(nv,bGo),e(O,vGo),e(O,sv),e(sv,Age),e(Age,FGo),e(sv,TGo),e(sv,QO),e(QO,MGo),e(sv,EGo),e(O,CGo),e(O,lv),e(lv,yge),e(yge,wGo),e(lv,AGo),e(lv,WO),e(WO,yGo),e(lv,LGo),e(O,xGo),e(O,iv),e(iv,Lge),e(Lge,$Go),e(iv,kGo),e(iv,HO),e(HO,SGo),e(iv,RGo),e(O,BGo),e(O,dv),e(dv,xge),e(xge,PGo),e(dv,IGo),e(dv,UO),e(UO,qGo),e(dv,NGo),e(O,jGo),e(O,cv),e(cv,$ge),e($ge,DGo),e(cv,GGo),e(cv,JO),e(JO,OGo),e(cv,VGo),e(O,XGo),e(O,fv),e(fv,kge),e(kge,zGo),e(fv,QGo),e(fv,YO),e(YO,WGo),e(fv,HGo),e(O,UGo),e(O,mv),e(mv,Sge),e(Sge,JGo),e(mv,YGo),e(mv,KO),e(KO,KGo),e(mv,ZGo),e(O,eOo),e(O,gv),e(gv,Rge),e(Rge,oOo),e(gv,rOo),e(gv,ZO),e(ZO,tOo),e(gv,aOo),e(O,nOo),e(O,hv),e(hv,Bge),e(Bge,sOo),e(hv,lOo),e(hv,eV),e(eV,iOo),e(hv,dOo),e(O,cOo),e(O,pv),e(pv,Pge),e(Pge,fOo),e(pv,mOo),e(pv,oV),e(oV,gOo),e(pv,hOo),e(O,pOo),e(O,uv),e(uv,Ige),e(Ige,uOo),e(uv,_Oo),e(uv,rV),e(rV,bOo),e(uv,vOo),e(O,FOo),e(O,_v),e(_v,qge),e(qge,TOo),e(_v,MOo),e(_v,tV),e(tV,EOo),e(_v,COo),e(O,wOo),e(O,bv),e(bv,Nge),e(Nge,AOo),e(bv,yOo),e(bv,aV),e(aV,LOo),e(bv,xOo),e(O,$Oo),e(O,vv),e(vv,jge),e(jge,kOo),e(vv,SOo),e(vv,nV),e(nV,ROo),e(vv,BOo),e(O,POo),e(O,Fv),e(Fv,Dge),e(Dge,IOo),e(Fv,qOo),e(Fv,sV),e(sV,NOo),e(Fv,jOo),e(O,DOo),e(O,Tv),e(Tv,Gge),e(Gge,GOo),e(Tv,OOo),e(Tv,lV),e(lV,VOo),e(Tv,XOo),e(O,zOo),e(O,Mv),e(Mv,Oge),e(Oge,QOo),e(Mv,WOo),e(Mv,iV),e(iV,HOo),e(Mv,UOo),e(O,JOo),e(O,Ev),e(Ev,Vge),e(Vge,YOo),e(Ev,KOo),e(Ev,dV),e(dV,ZOo),e(Ev,eVo),e(O,oVo),e(O,Cv),e(Cv,Xge),e(Xge,rVo),e(Cv,tVo),e(Cv,cV),e(cV,aVo),e(Cv,nVo),e(to,sVo),e(to,wv),e(wv,lVo),e(wv,zge),e(zge,iVo),e(wv,dVo),e(wv,Qge),e(Qge,cVo),e(to,fVo),M(Av,to,null),b(f,bIe,_),b(f,Ki,_),e(Ki,yv),e(yv,Wge),M(v0,Wge,null),e(Ki,mVo),e(Ki,Hge),e(Hge,gVo),b(f,vIe,_),b(f,No,_),M(F0,No,null),e(No,hVo),e(No,Zi),e(Zi,pVo),e(Zi,fV),e(fV,uVo),e(Zi,_Vo),e(Zi,mV),e(mV,bVo),e(Zi,vVo),e(No,FVo),e(No,T0),e(T0,TVo),e(T0,Uge),e(Uge,MVo),e(T0,EVo),e(No,CVo),e(No,ft),M(M0,ft,null),e(ft,wVo),e(ft,Jge),e(Jge,AVo),e(ft,yVo),e(ft,ed),e(ed,LVo),e(ed,Yge),e(Yge,xVo),e(ed,$Vo),e(ed,gV),e(gV,kVo),e(ed,SVo),e(ft,RVo),M(Lv,ft,null),e(No,BVo),e(No,ao),M(E0,ao,null),e(ao,PVo),e(ao,Kge),e(Kge,IVo),e(ao,qVo),e(ao,Ia),e(Ia,NVo),e(Ia,Zge),e(Zge,jVo),e(Ia,DVo),e(Ia,ehe),e(ehe,GVo),e(Ia,OVo),e(Ia,ohe),e(ohe,VVo),e(Ia,XVo),e(ao,zVo),e(ao,rhe),e(rhe,xv),e(xv,the),e(the,QVo),e(xv,WVo),e(xv,hV),e(hV,HVo),e(xv,UVo),e(ao,JVo),e(ao,$v),e($v,YVo),e($v,ahe),e(ahe,KVo),e($v,ZVo),e($v,nhe),e(nhe,eXo),e(ao,oXo),M(kv,ao,null),b(f,FIe,_),b(f,od,_),e(od,Sv),e(Sv,she),M(C0,she,null),e(od,rXo),e(od,lhe),e(lhe,tXo),b(f,TIe,_),b(f,jo,_),M(w0,jo,null),e(jo,aXo),e(jo,rd),e(rd,nXo),e(rd,pV),e(pV,sXo),e(rd,lXo),e(rd,uV),e(uV,iXo),e(rd,dXo),e(jo,cXo),e(jo,A0),e(A0,fXo),e(A0,ihe),e(ihe,mXo),e(A0,gXo),e(jo,hXo),e(jo,mt),M(y0,mt,null),e(mt,pXo),e(mt,dhe),e(dhe,uXo),e(mt,_Xo),e(mt,td),e(td,bXo),e(td,che),e(che,vXo),e(td,FXo),e(td,_V),e(_V,TXo),e(td,MXo),e(mt,EXo),M(Rv,mt,null),e(jo,CXo),e(jo,no),M(L0,no,null),e(no,wXo),e(no,fhe),e(fhe,AXo),e(no,yXo),e(no,qa),e(qa,LXo),e(qa,mhe),e(mhe,xXo),e(qa,$Xo),e(qa,ghe),e(ghe,kXo),e(qa,SXo),e(qa,hhe),e(hhe,RXo),e(qa,BXo),e(no,PXo),e(no,Fe),e(Fe,Bv),e(Bv,phe),e(phe,IXo),e(Bv,qXo),e(Bv,bV),e(bV,NXo),e(Bv,jXo),e(Fe,DXo),e(Fe,Pv),e(Pv,uhe),e(uhe,GXo),e(Pv,OXo),e(Pv,vV),e(vV,VXo),e(Pv,XXo),e(Fe,zXo),e(Fe,Iv),e(Iv,_he),e(_he,QXo),e(Iv,WXo),e(Iv,FV),e(FV,HXo),e(Iv,UXo),e(Fe,JXo),e(Fe,Bs),e(Bs,bhe),e(bhe,YXo),e(Bs,KXo),e(Bs,TV),e(TV,ZXo),e(Bs,ezo),e(Bs,MV),e(MV,ozo),e(Bs,rzo),e(Fe,tzo),e(Fe,qv),e(qv,vhe),e(vhe,azo),e(qv,nzo),e(qv,EV),e(EV,szo),e(qv,lzo),e(Fe,izo),e(Fe,gt),e(gt,Fhe),e(Fhe,dzo),e(gt,czo),e(gt,CV),e(CV,fzo),e(gt,mzo),e(gt,wV),e(wV,gzo),e(gt,hzo),e(gt,AV),e(AV,pzo),e(gt,uzo),e(Fe,_zo),e(Fe,Nv),e(Nv,The),e(The,bzo),e(Nv,vzo),e(Nv,yV),e(yV,Fzo),e(Nv,Tzo),e(Fe,Mzo),e(Fe,jv),e(jv,Mhe),e(Mhe,Ezo),e(jv,Czo),e(jv,LV),e(LV,wzo),e(jv,Azo),e(Fe,yzo),e(Fe,Dv),e(Dv,Ehe),e(Ehe,Lzo),e(Dv,xzo),e(Dv,xV),e(xV,$zo),e(Dv,kzo),e(Fe,Szo),e(Fe,Gv),e(Gv,Che),e(Che,Rzo),e(Gv,Bzo),e(Gv,$V),e($V,Pzo),e(Gv,Izo),e(Fe,qzo),e(Fe,Ov),e(Ov,whe),e(whe,Nzo),e(Ov,jzo),e(Ov,kV),e(kV,Dzo),e(Ov,Gzo),e(Fe,Ozo),e(Fe,Vv),e(Vv,Ahe),e(Ahe,Vzo),e(Vv,Xzo),e(Vv,SV),e(SV,zzo),e(Vv,Qzo),e(Fe,Wzo),e(Fe,Xv),e(Xv,yhe),e(yhe,Hzo),e(Xv,Uzo),e(Xv,RV),e(RV,Jzo),e(Xv,Yzo),e(no,Kzo),e(no,zv),e(zv,Zzo),e(zv,Lhe),e(Lhe,eQo),e(zv,oQo),e(zv,xhe),e(xhe,rQo),e(no,tQo),M(Qv,no,null),b(f,MIe,_),b(f,ad,_),e(ad,Wv),e(Wv,$he),M(x0,$he,null),e(ad,aQo),e(ad,khe),e(khe,nQo),b(f,EIe,_),b(f,Do,_),M($0,Do,null),e(Do,sQo),e(Do,nd),e(nd,lQo),e(nd,BV),e(BV,iQo),e(nd,dQo),e(nd,PV),e(PV,cQo),e(nd,fQo),e(Do,mQo),e(Do,k0),e(k0,gQo),e(k0,She),e(She,hQo),e(k0,pQo),e(Do,uQo),e(Do,ht),M(S0,ht,null),e(ht,_Qo),e(ht,Rhe),e(Rhe,bQo),e(ht,vQo),e(ht,sd),e(sd,FQo),e(sd,Bhe),e(Bhe,TQo),e(sd,MQo),e(sd,IV),e(IV,EQo),e(sd,CQo),e(ht,wQo),M(Hv,ht,null),e(Do,AQo),e(Do,so),M(R0,so,null),e(so,yQo),e(so,Phe),e(Phe,LQo),e(so,xQo),e(so,Na),e(Na,$Qo),e(Na,Ihe),e(Ihe,kQo),e(Na,SQo),e(Na,qhe),e(qhe,RQo),e(Na,BQo),e(Na,Nhe),e(Nhe,PQo),e(Na,IQo),e(so,qQo),e(so,jhe),e(jhe,Uv),e(Uv,Dhe),e(Dhe,NQo),e(Uv,jQo),e(Uv,qV),e(qV,DQo),e(Uv,GQo),e(so,OQo),e(so,Jv),e(Jv,VQo),e(Jv,Ghe),e(Ghe,XQo),e(Jv,zQo),e(Jv,Ohe),e(Ohe,QQo),e(so,WQo),M(Yv,so,null),b(f,CIe,_),b(f,ld,_),e(ld,Kv),e(Kv,Vhe),M(B0,Vhe,null),e(ld,HQo),e(ld,Xhe),e(Xhe,UQo),b(f,wIe,_),b(f,Go,_),M(P0,Go,null),e(Go,JQo),e(Go,id),e(id,YQo),e(id,NV),e(NV,KQo),e(id,ZQo),e(id,jV),e(jV,eWo),e(id,oWo),e(Go,rWo),e(Go,I0),e(I0,tWo),e(I0,zhe),e(zhe,aWo),e(I0,nWo),e(Go,sWo),e(Go,pt),M(q0,pt,null),e(pt,lWo),e(pt,Qhe),e(Qhe,iWo),e(pt,dWo),e(pt,dd),e(dd,cWo),e(dd,Whe),e(Whe,fWo),e(dd,mWo),e(dd,DV),e(DV,gWo),e(dd,hWo),e(pt,pWo),M(Zv,pt,null),e(Go,uWo),e(Go,lo),M(N0,lo,null),e(lo,_Wo),e(lo,Hhe),e(Hhe,bWo),e(lo,vWo),e(lo,ja),e(ja,FWo),e(ja,Uhe),e(Uhe,TWo),e(ja,MWo),e(ja,Jhe),e(Jhe,EWo),e(ja,CWo),e(ja,Yhe),e(Yhe,wWo),e(ja,AWo),e(lo,yWo),e(lo,Ne),e(Ne,eF),e(eF,Khe),e(Khe,LWo),e(eF,xWo),e(eF,GV),e(GV,$Wo),e(eF,kWo),e(Ne,SWo),e(Ne,oF),e(oF,Zhe),e(Zhe,RWo),e(oF,BWo),e(oF,OV),e(OV,PWo),e(oF,IWo),e(Ne,qWo),e(Ne,rF),e(rF,epe),e(epe,NWo),e(rF,jWo),e(rF,VV),e(VV,DWo),e(rF,GWo),e(Ne,OWo),e(Ne,tF),e(tF,ope),e(ope,VWo),e(tF,XWo),e(tF,XV),e(XV,zWo),e(tF,QWo),e(Ne,WWo),e(Ne,aF),e(aF,rpe),e(rpe,HWo),e(aF,UWo),e(aF,zV),e(zV,JWo),e(aF,YWo),e(Ne,KWo),e(Ne,nF),e(nF,tpe),e(tpe,ZWo),e(nF,eHo),e(nF,QV),e(QV,oHo),e(nF,rHo),e(Ne,tHo),e(Ne,sF),e(sF,ape),e(ape,aHo),e(sF,nHo),e(sF,WV),e(WV,sHo),e(sF,lHo),e(Ne,iHo),e(Ne,lF),e(lF,npe),e(npe,dHo),e(lF,cHo),e(lF,HV),e(HV,fHo),e(lF,mHo),e(lo,gHo),e(lo,iF),e(iF,hHo),e(iF,spe),e(spe,pHo),e(iF,uHo),e(iF,lpe),e(lpe,_Ho),e(lo,bHo),M(dF,lo,null),b(f,AIe,_),b(f,cd,_),e(cd,cF),e(cF,ipe),M(j0,ipe,null),e(cd,vHo),e(cd,dpe),e(dpe,FHo),b(f,yIe,_),b(f,Oo,_),M(D0,Oo,null),e(Oo,THo),e(Oo,fd),e(fd,MHo),e(fd,UV),e(UV,EHo),e(fd,CHo),e(fd,JV),e(JV,wHo),e(fd,AHo),e(Oo,yHo),e(Oo,G0),e(G0,LHo),e(G0,cpe),e(cpe,xHo),e(G0,$Ho),e(Oo,kHo),e(Oo,ut),M(O0,ut,null),e(ut,SHo),e(ut,fpe),e(fpe,RHo),e(ut,BHo),e(ut,md),e(md,PHo),e(md,mpe),e(mpe,IHo),e(md,qHo),e(md,YV),e(YV,NHo),e(md,jHo),e(ut,DHo),M(fF,ut,null),e(Oo,GHo),e(Oo,io),M(V0,io,null),e(io,OHo),e(io,gpe),e(gpe,VHo),e(io,XHo),e(io,Da),e(Da,zHo),e(Da,hpe),e(hpe,QHo),e(Da,WHo),e(Da,ppe),e(ppe,HHo),e(Da,UHo),e(Da,upe),e(upe,JHo),e(Da,YHo),e(io,KHo),e(io,Ga),e(Ga,mF),e(mF,_pe),e(_pe,ZHo),e(mF,eUo),e(mF,KV),e(KV,oUo),e(mF,rUo),e(Ga,tUo),e(Ga,gF),e(gF,bpe),e(bpe,aUo),e(gF,nUo),e(gF,ZV),e(ZV,sUo),e(gF,lUo),e(Ga,iUo),e(Ga,hF),e(hF,vpe),e(vpe,dUo),e(hF,cUo),e(hF,eX),e(eX,fUo),e(hF,mUo),e(Ga,gUo),e(Ga,pF),e(pF,Fpe),e(Fpe,hUo),e(pF,pUo),e(pF,oX),e(oX,uUo),e(pF,_Uo),e(io,bUo),e(io,uF),e(uF,vUo),e(uF,Tpe),e(Tpe,FUo),e(uF,TUo),e(uF,Mpe),e(Mpe,MUo),e(io,EUo),M(_F,io,null),b(f,LIe,_),b(f,gd,_),e(gd,bF),e(bF,Epe),M(X0,Epe,null),e(gd,CUo),e(gd,Cpe),e(Cpe,wUo),b(f,xIe,_),b(f,Vo,_),M(z0,Vo,null),e(Vo,AUo),e(Vo,hd),e(hd,yUo),e(hd,rX),e(rX,LUo),e(hd,xUo),e(hd,tX),e(tX,$Uo),e(hd,kUo),e(Vo,SUo),e(Vo,Q0),e(Q0,RUo),e(Q0,wpe),e(wpe,BUo),e(Q0,PUo),e(Vo,IUo),e(Vo,_t),M(W0,_t,null),e(_t,qUo),e(_t,Ape),e(Ape,NUo),e(_t,jUo),e(_t,pd),e(pd,DUo),e(pd,ype),e(ype,GUo),e(pd,OUo),e(pd,aX),e(aX,VUo),e(pd,XUo),e(_t,zUo),M(vF,_t,null),e(Vo,QUo),e(Vo,co),M(H0,co,null),e(co,WUo),e(co,Lpe),e(Lpe,HUo),e(co,UUo),e(co,Oa),e(Oa,JUo),e(Oa,xpe),e(xpe,YUo),e(Oa,KUo),e(Oa,$pe),e($pe,ZUo),e(Oa,eJo),e(Oa,kpe),e(kpe,oJo),e(Oa,rJo),e(co,tJo),e(co,je),e(je,FF),e(FF,Spe),e(Spe,aJo),e(FF,nJo),e(FF,nX),e(nX,sJo),e(FF,lJo),e(je,iJo),e(je,TF),e(TF,Rpe),e(Rpe,dJo),e(TF,cJo),e(TF,sX),e(sX,fJo),e(TF,mJo),e(je,gJo),e(je,MF),e(MF,Bpe),e(Bpe,hJo),e(MF,pJo),e(MF,lX),e(lX,uJo),e(MF,_Jo),e(je,bJo),e(je,EF),e(EF,Ppe),e(Ppe,vJo),e(EF,FJo),e(EF,iX),e(iX,TJo),e(EF,MJo),e(je,EJo),e(je,CF),e(CF,Ipe),e(Ipe,CJo),e(CF,wJo),e(CF,dX),e(dX,AJo),e(CF,yJo),e(je,LJo),e(je,wF),e(wF,qpe),e(qpe,xJo),e(wF,$Jo),e(wF,cX),e(cX,kJo),e(wF,SJo),e(je,RJo),e(je,AF),e(AF,Npe),e(Npe,BJo),e(AF,PJo),e(AF,fX),e(fX,IJo),e(AF,qJo),e(je,NJo),e(je,yF),e(yF,jpe),e(jpe,jJo),e(yF,DJo),e(yF,mX),e(mX,GJo),e(yF,OJo),e(co,VJo),e(co,LF),e(LF,XJo),e(LF,Dpe),e(Dpe,zJo),e(LF,QJo),e(LF,Gpe),e(Gpe,WJo),e(co,HJo),M(xF,co,null),b(f,$Ie,_),b(f,ud,_),e(ud,$F),e($F,Ope),M(U0,Ope,null),e(ud,UJo),e(ud,Vpe),e(Vpe,JJo),b(f,kIe,_),b(f,Xo,_),M(J0,Xo,null),e(Xo,YJo),e(Xo,_d),e(_d,KJo),e(_d,gX),e(gX,ZJo),e(_d,eYo),e(_d,hX),e(hX,oYo),e(_d,rYo),e(Xo,tYo),e(Xo,Y0),e(Y0,aYo),e(Y0,Xpe),e(Xpe,nYo),e(Y0,sYo),e(Xo,lYo),e(Xo,bt),M(K0,bt,null),e(bt,iYo),e(bt,zpe),e(zpe,dYo),e(bt,cYo),e(bt,bd),e(bd,fYo),e(bd,Qpe),e(Qpe,mYo),e(bd,gYo),e(bd,pX),e(pX,hYo),e(bd,pYo),e(bt,uYo),M(kF,bt,null),e(Xo,_Yo),e(Xo,fo),M(Z0,fo,null),e(fo,bYo),e(fo,Wpe),e(Wpe,vYo),e(fo,FYo),e(fo,Va),e(Va,TYo),e(Va,Hpe),e(Hpe,MYo),e(Va,EYo),e(Va,Upe),e(Upe,CYo),e(Va,wYo),e(Va,Jpe),e(Jpe,AYo),e(Va,yYo),e(fo,LYo),e(fo,ey),e(ey,SF),e(SF,Ype),e(Ype,xYo),e(SF,$Yo),e(SF,uX),e(uX,kYo),e(SF,SYo),e(ey,RYo),e(ey,RF),e(RF,Kpe),e(Kpe,BYo),e(RF,PYo),e(RF,_X),e(_X,IYo),e(RF,qYo),e(fo,NYo),e(fo,BF),e(BF,jYo),e(BF,Zpe),e(Zpe,DYo),e(BF,GYo),e(BF,eue),e(eue,OYo),e(fo,VYo),M(PF,fo,null),b(f,SIe,_),b(f,vd,_),e(vd,IF),e(IF,oue),M(oy,oue,null),e(vd,XYo),e(vd,rue),e(rue,zYo),b(f,RIe,_),b(f,zo,_),M(ry,zo,null),e(zo,QYo),e(zo,Fd),e(Fd,WYo),e(Fd,bX),e(bX,HYo),e(Fd,UYo),e(Fd,vX),e(vX,JYo),e(Fd,YYo),e(zo,KYo),e(zo,ty),e(ty,ZYo),e(ty,tue),e(tue,eKo),e(ty,oKo),e(zo,rKo),e(zo,vt),M(ay,vt,null),e(vt,tKo),e(vt,aue),e(aue,aKo),e(vt,nKo),e(vt,Td),e(Td,sKo),e(Td,nue),e(nue,lKo),e(Td,iKo),e(Td,FX),e(FX,dKo),e(Td,cKo),e(vt,fKo),M(qF,vt,null),e(zo,mKo),e(zo,mo),M(ny,mo,null),e(mo,gKo),e(mo,sue),e(sue,hKo),e(mo,pKo),e(mo,Xa),e(Xa,uKo),e(Xa,lue),e(lue,_Ko),e(Xa,bKo),e(Xa,iue),e(iue,vKo),e(Xa,FKo),e(Xa,due),e(due,TKo),e(Xa,MKo),e(mo,EKo),e(mo,za),e(za,NF),e(NF,cue),e(cue,CKo),e(NF,wKo),e(NF,TX),e(TX,AKo),e(NF,yKo),e(za,LKo),e(za,jF),e(jF,fue),e(fue,xKo),e(jF,$Ko),e(jF,MX),e(MX,kKo),e(jF,SKo),e(za,RKo),e(za,DF),e(DF,mue),e(mue,BKo),e(DF,PKo),e(DF,EX),e(EX,IKo),e(DF,qKo),e(za,NKo),e(za,GF),e(GF,gue),e(gue,jKo),e(GF,DKo),e(GF,CX),e(CX,GKo),e(GF,OKo),e(mo,VKo),e(mo,OF),e(OF,XKo),e(OF,hue),e(hue,zKo),e(OF,QKo),e(OF,pue),e(pue,WKo),e(mo,HKo),M(VF,mo,null),b(f,BIe,_),b(f,Md,_),e(Md,XF),e(XF,uue),M(sy,uue,null),e(Md,UKo),e(Md,_ue),e(_ue,JKo),b(f,PIe,_),b(f,Qo,_),M(ly,Qo,null),e(Qo,YKo),e(Qo,Ed),e(Ed,KKo),e(Ed,wX),e(wX,ZKo),e(Ed,eZo),e(Ed,AX),e(AX,oZo),e(Ed,rZo),e(Qo,tZo),e(Qo,iy),e(iy,aZo),e(iy,bue),e(bue,nZo),e(iy,sZo),e(Qo,lZo),e(Qo,Ft),M(dy,Ft,null),e(Ft,iZo),e(Ft,vue),e(vue,dZo),e(Ft,cZo),e(Ft,Cd),e(Cd,fZo),e(Cd,Fue),e(Fue,mZo),e(Cd,gZo),e(Cd,yX),e(yX,hZo),e(Cd,pZo),e(Ft,uZo),M(zF,Ft,null),e(Qo,_Zo),e(Qo,go),M(cy,go,null),e(go,bZo),e(go,Tue),e(Tue,vZo),e(go,FZo),e(go,Qa),e(Qa,TZo),e(Qa,Mue),e(Mue,MZo),e(Qa,EZo),e(Qa,Eue),e(Eue,CZo),e(Qa,wZo),e(Qa,Cue),e(Cue,AZo),e(Qa,yZo),e(go,LZo),e(go,wd),e(wd,QF),e(QF,wue),e(wue,xZo),e(QF,$Zo),e(QF,LX),e(LX,kZo),e(QF,SZo),e(wd,RZo),e(wd,WF),e(WF,Aue),e(Aue,BZo),e(WF,PZo),e(WF,xX),e(xX,IZo),e(WF,qZo),e(wd,NZo),e(wd,HF),e(HF,yue),e(yue,jZo),e(HF,DZo),e(HF,$X),e($X,GZo),e(HF,OZo),e(go,VZo),e(go,UF),e(UF,XZo),e(UF,Lue),e(Lue,zZo),e(UF,QZo),e(UF,xue),e(xue,WZo),e(go,HZo),M(JF,go,null),b(f,IIe,_),b(f,Ad,_),e(Ad,YF),e(YF,$ue),M(fy,$ue,null),e(Ad,UZo),e(Ad,kue),e(kue,JZo),b(f,qIe,_),b(f,Wo,_),M(my,Wo,null),e(Wo,YZo),e(Wo,yd),e(yd,KZo),e(yd,kX),e(kX,ZZo),e(yd,eer),e(yd,SX),e(SX,oer),e(yd,rer),e(Wo,ter),e(Wo,gy),e(gy,aer),e(gy,Sue),e(Sue,ner),e(gy,ser),e(Wo,ler),e(Wo,Tt),M(hy,Tt,null),e(Tt,ier),e(Tt,Rue),e(Rue,der),e(Tt,cer),e(Tt,Ld),e(Ld,fer),e(Ld,Bue),e(Bue,mer),e(Ld,ger),e(Ld,RX),e(RX,her),e(Ld,per),e(Tt,uer),M(KF,Tt,null),e(Wo,_er),e(Wo,ho),M(py,ho,null),e(ho,ber),e(ho,Pue),e(Pue,ver),e(ho,Fer),e(ho,Wa),e(Wa,Ter),e(Wa,Iue),e(Iue,Mer),e(Wa,Eer),e(Wa,que),e(que,Cer),e(Wa,wer),e(Wa,Nue),e(Nue,Aer),e(Wa,yer),e(ho,Ler),e(ho,uy),e(uy,ZF),e(ZF,jue),e(jue,xer),e(ZF,$er),e(ZF,BX),e(BX,ker),e(ZF,Ser),e(uy,Rer),e(uy,e6),e(e6,Due),e(Due,Ber),e(e6,Per),e(e6,PX),e(PX,Ier),e(e6,qer),e(ho,Ner),e(ho,o6),e(o6,jer),e(o6,Gue),e(Gue,Der),e(o6,Ger),e(o6,Oue),e(Oue,Oer),e(ho,Ver),M(r6,ho,null),b(f,NIe,_),b(f,xd,_),e(xd,t6),e(t6,Vue),M(_y,Vue,null),e(xd,Xer),e(xd,Xue),e(Xue,zer),b(f,jIe,_),b(f,Ho,_),M(by,Ho,null),e(Ho,Qer),e(Ho,$d),e($d,Wer),e($d,IX),e(IX,Her),e($d,Uer),e($d,qX),e(qX,Jer),e($d,Yer),e(Ho,Ker),e(Ho,vy),e(vy,Zer),e(vy,zue),e(zue,eor),e(vy,oor),e(Ho,ror),e(Ho,Mt),M(Fy,Mt,null),e(Mt,tor),e(Mt,Que),e(Que,aor),e(Mt,nor),e(Mt,kd),e(kd,sor),e(kd,Wue),e(Wue,lor),e(kd,ior),e(kd,NX),e(NX,dor),e(kd,cor),e(Mt,mor),M(a6,Mt,null),e(Ho,gor),e(Ho,po),M(Ty,po,null),e(po,hor),e(po,Hue),e(Hue,por),e(po,uor),e(po,Ha),e(Ha,_or),e(Ha,Uue),e(Uue,bor),e(Ha,vor),e(Ha,Jue),e(Jue,For),e(Ha,Tor),e(Ha,Yue),e(Yue,Mor),e(Ha,Eor),e(po,Cor),e(po,Kue),e(Kue,n6),e(n6,Zue),e(Zue,wor),e(n6,Aor),e(n6,jX),e(jX,yor),e(n6,Lor),e(po,xor),e(po,s6),e(s6,$or),e(s6,e_e),e(e_e,kor),e(s6,Sor),e(s6,o_e),e(o_e,Ror),e(po,Bor),M(l6,po,null),b(f,DIe,_),b(f,Sd,_),e(Sd,i6),e(i6,r_e),M(My,r_e,null),e(Sd,Por),e(Sd,t_e),e(t_e,Ior),b(f,GIe,_),b(f,Uo,_),M(Ey,Uo,null),e(Uo,qor),e(Uo,Rd),e(Rd,Nor),e(Rd,DX),e(DX,jor),e(Rd,Dor),e(Rd,GX),e(GX,Gor),e(Rd,Oor),e(Uo,Vor),e(Uo,Cy),e(Cy,Xor),e(Cy,a_e),e(a_e,zor),e(Cy,Qor),e(Uo,Wor),e(Uo,Et),M(wy,Et,null),e(Et,Hor),e(Et,n_e),e(n_e,Uor),e(Et,Jor),e(Et,Bd),e(Bd,Yor),e(Bd,s_e),e(s_e,Kor),e(Bd,Zor),e(Bd,OX),e(OX,err),e(Bd,orr),e(Et,rrr),M(d6,Et,null),e(Uo,trr),e(Uo,uo),M(Ay,uo,null),e(uo,arr),e(uo,l_e),e(l_e,nrr),e(uo,srr),e(uo,Ua),e(Ua,lrr),e(Ua,i_e),e(i_e,irr),e(Ua,drr),e(Ua,d_e),e(d_e,crr),e(Ua,frr),e(Ua,c_e),e(c_e,mrr),e(Ua,grr),e(uo,hrr),e(uo,Ja),e(Ja,c6),e(c6,f_e),e(f_e,prr),e(c6,urr),e(c6,VX),e(VX,_rr),e(c6,brr),e(Ja,vrr),e(Ja,f6),e(f6,m_e),e(m_e,Frr),e(f6,Trr),e(f6,XX),e(XX,Mrr),e(f6,Err),e(Ja,Crr),e(Ja,m6),e(m6,g_e),e(g_e,wrr),e(m6,Arr),e(m6,zX),e(zX,yrr),e(m6,Lrr),e(Ja,xrr),e(Ja,g6),e(g6,h_e),e(h_e,$rr),e(g6,krr),e(g6,QX),e(QX,Srr),e(g6,Rrr),e(uo,Brr),e(uo,h6),e(h6,Prr),e(h6,p_e),e(p_e,Irr),e(h6,qrr),e(h6,u_e),e(u_e,Nrr),e(uo,jrr),M(p6,uo,null),b(f,OIe,_),b(f,Pd,_),e(Pd,u6),e(u6,__e),M(yy,__e,null),e(Pd,Drr),e(Pd,b_e),e(b_e,Grr),b(f,VIe,_),b(f,Jo,_),M(Ly,Jo,null),e(Jo,Orr),e(Jo,Id),e(Id,Vrr),e(Id,WX),e(WX,Xrr),e(Id,zrr),e(Id,HX),e(HX,Qrr),e(Id,Wrr),e(Jo,Hrr),e(Jo,xy),e(xy,Urr),e(xy,v_e),e(v_e,Jrr),e(xy,Yrr),e(Jo,Krr),e(Jo,Ct),M($y,Ct,null),e(Ct,Zrr),e(Ct,F_e),e(F_e,etr),e(Ct,otr),e(Ct,qd),e(qd,rtr),e(qd,T_e),e(T_e,ttr),e(qd,atr),e(qd,UX),e(UX,ntr),e(qd,str),e(Ct,ltr),M(_6,Ct,null),e(Jo,itr),e(Jo,_o),M(ky,_o,null),e(_o,dtr),e(_o,M_e),e(M_e,ctr),e(_o,ftr),e(_o,Ya),e(Ya,mtr),e(Ya,E_e),e(E_e,gtr),e(Ya,htr),e(Ya,C_e),e(C_e,ptr),e(Ya,utr),e(Ya,w_e),e(w_e,_tr),e(Ya,btr),e(_o,vtr),e(_o,A_e),e(A_e,b6),e(b6,y_e),e(y_e,Ftr),e(b6,Ttr),e(b6,JX),e(JX,Mtr),e(b6,Etr),e(_o,Ctr),e(_o,v6),e(v6,wtr),e(v6,L_e),e(L_e,Atr),e(v6,ytr),e(v6,x_e),e(x_e,Ltr),e(_o,xtr),M(F6,_o,null),b(f,XIe,_),b(f,Nd,_),e(Nd,T6),e(T6,$_e),M(Sy,$_e,null),e(Nd,$tr),e(Nd,k_e),e(k_e,ktr),b(f,zIe,_),b(f,Yo,_),M(Ry,Yo,null),e(Yo,Str),e(Yo,jd),e(jd,Rtr),e(jd,YX),e(YX,Btr),e(jd,Ptr),e(jd,KX),e(KX,Itr),e(jd,qtr),e(Yo,Ntr),e(Yo,By),e(By,jtr),e(By,S_e),e(S_e,Dtr),e(By,Gtr),e(Yo,Otr),e(Yo,wt),M(Py,wt,null),e(wt,Vtr),e(wt,R_e),e(R_e,Xtr),e(wt,ztr),e(wt,Dd),e(Dd,Qtr),e(Dd,B_e),e(B_e,Wtr),e(Dd,Htr),e(Dd,ZX),e(ZX,Utr),e(Dd,Jtr),e(wt,Ytr),M(M6,wt,null),e(Yo,Ktr),e(Yo,wr),M(Iy,wr,null),e(wr,Ztr),e(wr,P_e),e(P_e,ear),e(wr,oar),e(wr,Ka),e(Ka,rar),e(Ka,I_e),e(I_e,tar),e(Ka,aar),e(Ka,q_e),e(q_e,nar),e(Ka,sar),e(Ka,N_e),e(N_e,lar),e(Ka,iar),e(wr,dar),e(wr,N),e(N,E6),e(E6,j_e),e(j_e,car),e(E6,far),e(E6,ez),e(ez,mar),e(E6,gar),e(N,har),e(N,C6),e(C6,D_e),e(D_e,par),e(C6,uar),e(C6,oz),e(oz,_ar),e(C6,bar),e(N,Far),e(N,w6),e(w6,G_e),e(G_e,Tar),e(w6,Mar),e(w6,rz),e(rz,Ear),e(w6,Car),e(N,war),e(N,A6),e(A6,O_e),e(O_e,Aar),e(A6,yar),e(A6,tz),e(tz,Lar),e(A6,xar),e(N,$ar),e(N,y6),e(y6,V_e),e(V_e,kar),e(y6,Sar),e(y6,az),e(az,Rar),e(y6,Bar),e(N,Par),e(N,L6),e(L6,X_e),e(X_e,Iar),e(L6,qar),e(L6,nz),e(nz,Nar),e(L6,jar),e(N,Dar),e(N,x6),e(x6,z_e),e(z_e,Gar),e(x6,Oar),e(x6,sz),e(sz,Var),e(x6,Xar),e(N,zar),e(N,$6),e($6,Q_e),e(Q_e,Qar),e($6,War),e($6,lz),e(lz,Har),e($6,Uar),e(N,Jar),e(N,k6),e(k6,W_e),e(W_e,Yar),e(k6,Kar),e(k6,iz),e(iz,Zar),e(k6,enr),e(N,onr),e(N,S6),e(S6,H_e),e(H_e,rnr),e(S6,tnr),e(S6,dz),e(dz,anr),e(S6,nnr),e(N,snr),e(N,R6),e(R6,U_e),e(U_e,lnr),e(R6,inr),e(R6,cz),e(cz,dnr),e(R6,cnr),e(N,fnr),e(N,B6),e(B6,J_e),e(J_e,mnr),e(B6,gnr),e(B6,fz),e(fz,hnr),e(B6,pnr),e(N,unr),e(N,P6),e(P6,Y_e),e(Y_e,_nr),e(P6,bnr),e(P6,mz),e(mz,vnr),e(P6,Fnr),e(N,Tnr),e(N,I6),e(I6,K_e),e(K_e,Mnr),e(I6,Enr),e(I6,gz),e(gz,Cnr),e(I6,wnr),e(N,Anr),e(N,q6),e(q6,Z_e),e(Z_e,ynr),e(q6,Lnr),e(q6,hz),e(hz,xnr),e(q6,$nr),e(N,knr),e(N,N6),e(N6,e1e),e(e1e,Snr),e(N6,Rnr),e(N6,pz),e(pz,Bnr),e(N6,Pnr),e(N,Inr),e(N,j6),e(j6,o1e),e(o1e,qnr),e(j6,Nnr),e(j6,uz),e(uz,jnr),e(j6,Dnr),e(N,Gnr),e(N,Ps),e(Ps,r1e),e(r1e,Onr),e(Ps,Vnr),e(Ps,_z),e(_z,Xnr),e(Ps,znr),e(Ps,bz),e(bz,Qnr),e(Ps,Wnr),e(N,Hnr),e(N,D6),e(D6,t1e),e(t1e,Unr),e(D6,Jnr),e(D6,vz),e(vz,Ynr),e(D6,Knr),e(N,Znr),e(N,G6),e(G6,a1e),e(a1e,esr),e(G6,osr),e(G6,Fz),e(Fz,rsr),e(G6,tsr),e(N,asr),e(N,O6),e(O6,n1e),e(n1e,nsr),e(O6,ssr),e(O6,Tz),e(Tz,lsr),e(O6,isr),e(N,dsr),e(N,V6),e(V6,s1e),e(s1e,csr),e(V6,fsr),e(V6,Mz),e(Mz,msr),e(V6,gsr),e(N,hsr),e(N,X6),e(X6,l1e),e(l1e,psr),e(X6,usr),e(X6,Ez),e(Ez,_sr),e(X6,bsr),e(N,vsr),e(N,z6),e(z6,i1e),e(i1e,Fsr),e(z6,Tsr),e(z6,Cz),e(Cz,Msr),e(z6,Esr),e(N,Csr),e(N,Q6),e(Q6,d1e),e(d1e,wsr),e(Q6,Asr),e(Q6,wz),e(wz,ysr),e(Q6,Lsr),e(N,xsr),e(N,W6),e(W6,c1e),e(c1e,$sr),e(W6,ksr),e(W6,Az),e(Az,Ssr),e(W6,Rsr),e(N,Bsr),e(N,H6),e(H6,f1e),e(f1e,Psr),e(H6,Isr),e(H6,yz),e(yz,qsr),e(H6,Nsr),e(N,jsr),e(N,U6),e(U6,m1e),e(m1e,Dsr),e(U6,Gsr),e(U6,Lz),e(Lz,Osr),e(U6,Vsr),e(N,Xsr),e(N,J6),e(J6,g1e),e(g1e,zsr),e(J6,Qsr),e(J6,xz),e(xz,Wsr),e(J6,Hsr),e(N,Usr),e(N,Y6),e(Y6,h1e),e(h1e,Jsr),e(Y6,Ysr),e(Y6,$z),e($z,Ksr),e(Y6,Zsr),e(N,elr),e(N,K6),e(K6,p1e),e(p1e,olr),e(K6,rlr),e(K6,kz),e(kz,tlr),e(K6,alr),e(N,nlr),e(N,Z6),e(Z6,u1e),e(u1e,slr),e(Z6,llr),e(Z6,Sz),e(Sz,ilr),e(Z6,dlr),e(N,clr),e(N,eT),e(eT,_1e),e(_1e,flr),e(eT,mlr),e(eT,Rz),e(Rz,glr),e(eT,hlr),e(N,plr),e(N,oT),e(oT,b1e),e(b1e,ulr),e(oT,_lr),e(oT,Bz),e(Bz,blr),e(oT,vlr),e(N,Flr),e(N,rT),e(rT,v1e),e(v1e,Tlr),e(rT,Mlr),e(rT,Pz),e(Pz,Elr),e(rT,Clr),e(N,wlr),e(N,tT),e(tT,F1e),e(F1e,Alr),e(tT,ylr),e(tT,Iz),e(Iz,Llr),e(tT,xlr),e(N,$lr),e(N,aT),e(aT,T1e),e(T1e,klr),e(aT,Slr),e(aT,qz),e(qz,Rlr),e(aT,Blr),e(N,Plr),e(N,nT),e(nT,M1e),e(M1e,Ilr),e(nT,qlr),e(nT,Nz),e(Nz,Nlr),e(nT,jlr),e(N,Dlr),e(N,sT),e(sT,E1e),e(E1e,Glr),e(sT,Olr),e(sT,jz),e(jz,Vlr),e(sT,Xlr),e(N,zlr),e(N,lT),e(lT,C1e),e(C1e,Qlr),e(lT,Wlr),e(lT,Dz),e(Dz,Hlr),e(lT,Ulr),e(N,Jlr),e(N,iT),e(iT,w1e),e(w1e,Ylr),e(iT,Klr),e(iT,Gz),e(Gz,Zlr),e(iT,eir),e(N,oir),e(N,dT),e(dT,A1e),e(A1e,rir),e(dT,tir),e(dT,Oz),e(Oz,air),e(dT,nir),e(N,sir),e(N,cT),e(cT,y1e),e(y1e,lir),e(cT,iir),e(cT,Vz),e(Vz,dir),e(cT,cir),e(N,fir),e(N,fT),e(fT,L1e),e(L1e,mir),e(fT,gir),e(fT,Xz),e(Xz,hir),e(fT,pir),e(N,uir),e(N,mT),e(mT,x1e),e(x1e,_ir),e(mT,bir),e(mT,zz),e(zz,vir),e(mT,Fir),e(N,Tir),e(N,gT),e(gT,$1e),e($1e,Mir),e(gT,Eir),e(gT,Qz),e(Qz,Cir),e(gT,wir),e(wr,Air),M(hT,wr,null),b(f,QIe,_),b(f,Gd,_),e(Gd,pT),e(pT,k1e),M(qy,k1e,null),e(Gd,yir),e(Gd,S1e),e(S1e,Lir),b(f,WIe,_),b(f,Ko,_),M(Ny,Ko,null),e(Ko,xir),e(Ko,Od),e(Od,$ir),e(Od,Wz),e(Wz,kir),e(Od,Sir),e(Od,Hz),e(Hz,Rir),e(Od,Bir),e(Ko,Pir),e(Ko,jy),e(jy,Iir),e(jy,R1e),e(R1e,qir),e(jy,Nir),e(Ko,jir),e(Ko,At),M(Dy,At,null),e(At,Dir),e(At,B1e),e(B1e,Gir),e(At,Oir),e(At,Vd),e(Vd,Vir),e(Vd,P1e),e(P1e,Xir),e(Vd,zir),e(Vd,Uz),e(Uz,Qir),e(Vd,Wir),e(At,Hir),M(uT,At,null),e(Ko,Uir),e(Ko,Ar),M(Gy,Ar,null),e(Ar,Jir),e(Ar,I1e),e(I1e,Yir),e(Ar,Kir),e(Ar,Za),e(Za,Zir),e(Za,q1e),e(q1e,edr),e(Za,odr),e(Za,N1e),e(N1e,rdr),e(Za,tdr),e(Za,j1e),e(j1e,adr),e(Za,ndr),e(Ar,sdr),e(Ar,se),e(se,_T),e(_T,D1e),e(D1e,ldr),e(_T,idr),e(_T,Jz),e(Jz,ddr),e(_T,cdr),e(se,fdr),e(se,bT),e(bT,G1e),e(G1e,mdr),e(bT,gdr),e(bT,Yz),e(Yz,hdr),e(bT,pdr),e(se,udr),e(se,vT),e(vT,O1e),e(O1e,_dr),e(vT,bdr),e(vT,Kz),e(Kz,vdr),e(vT,Fdr),e(se,Tdr),e(se,FT),e(FT,V1e),e(V1e,Mdr),e(FT,Edr),e(FT,Zz),e(Zz,Cdr),e(FT,wdr),e(se,Adr),e(se,TT),e(TT,X1e),e(X1e,ydr),e(TT,Ldr),e(TT,eQ),e(eQ,xdr),e(TT,$dr),e(se,kdr),e(se,MT),e(MT,z1e),e(z1e,Sdr),e(MT,Rdr),e(MT,oQ),e(oQ,Bdr),e(MT,Pdr),e(se,Idr),e(se,ET),e(ET,Q1e),e(Q1e,qdr),e(ET,Ndr),e(ET,rQ),e(rQ,jdr),e(ET,Ddr),e(se,Gdr),e(se,CT),e(CT,W1e),e(W1e,Odr),e(CT,Vdr),e(CT,tQ),e(tQ,Xdr),e(CT,zdr),e(se,Qdr),e(se,wT),e(wT,H1e),e(H1e,Wdr),e(wT,Hdr),e(wT,aQ),e(aQ,Udr),e(wT,Jdr),e(se,Ydr),e(se,AT),e(AT,U1e),e(U1e,Kdr),e(AT,Zdr),e(AT,nQ),e(nQ,ecr),e(AT,ocr),e(se,rcr),e(se,yT),e(yT,J1e),e(J1e,tcr),e(yT,acr),e(yT,sQ),e(sQ,ncr),e(yT,scr),e(se,lcr),e(se,LT),e(LT,Y1e),e(Y1e,icr),e(LT,dcr),e(LT,lQ),e(lQ,ccr),e(LT,fcr),e(se,mcr),e(se,xT),e(xT,K1e),e(K1e,gcr),e(xT,hcr),e(xT,iQ),e(iQ,pcr),e(xT,ucr),e(se,_cr),e(se,$T),e($T,Z1e),e(Z1e,bcr),e($T,vcr),e($T,dQ),e(dQ,Fcr),e($T,Tcr),e(se,Mcr),e(se,kT),e(kT,e8e),e(e8e,Ecr),e(kT,Ccr),e(kT,cQ),e(cQ,wcr),e(kT,Acr),e(se,ycr),e(se,ST),e(ST,o8e),e(o8e,Lcr),e(ST,xcr),e(ST,fQ),e(fQ,$cr),e(ST,kcr),e(se,Scr),e(se,RT),e(RT,r8e),e(r8e,Rcr),e(RT,Bcr),e(RT,mQ),e(mQ,Pcr),e(RT,Icr),e(se,qcr),e(se,BT),e(BT,t8e),e(t8e,Ncr),e(BT,jcr),e(BT,gQ),e(gQ,Dcr),e(BT,Gcr),e(se,Ocr),e(se,PT),e(PT,a8e),e(a8e,Vcr),e(PT,Xcr),e(PT,hQ),e(hQ,zcr),e(PT,Qcr),e(se,Wcr),e(se,IT),e(IT,n8e),e(n8e,Hcr),e(IT,Ucr),e(IT,pQ),e(pQ,Jcr),e(IT,Ycr),e(se,Kcr),e(se,qT),e(qT,s8e),e(s8e,Zcr),e(qT,efr),e(qT,uQ),e(uQ,ofr),e(qT,rfr),e(se,tfr),e(se,NT),e(NT,l8e),e(l8e,afr),e(NT,nfr),e(NT,_Q),e(_Q,sfr),e(NT,lfr),e(se,ifr),e(se,jT),e(jT,i8e),e(i8e,dfr),e(jT,cfr),e(jT,bQ),e(bQ,ffr),e(jT,mfr),e(Ar,gfr),M(DT,Ar,null),b(f,HIe,_),b(f,Xd,_),e(Xd,GT),e(GT,d8e),M(Oy,d8e,null),e(Xd,hfr),e(Xd,c8e),e(c8e,pfr),b(f,UIe,_),b(f,Zo,_),M(Vy,Zo,null),e(Zo,ufr),e(Zo,zd),e(zd,_fr),e(zd,vQ),e(vQ,bfr),e(zd,vfr),e(zd,FQ),e(FQ,Ffr),e(zd,Tfr),e(Zo,Mfr),e(Zo,Xy),e(Xy,Efr),e(Xy,f8e),e(f8e,Cfr),e(Xy,wfr),e(Zo,Afr),e(Zo,yt),M(zy,yt,null),e(yt,yfr),e(yt,m8e),e(m8e,Lfr),e(yt,xfr),e(yt,Qd),e(Qd,$fr),e(Qd,g8e),e(g8e,kfr),e(Qd,Sfr),e(Qd,TQ),e(TQ,Rfr),e(Qd,Bfr),e(yt,Pfr),M(OT,yt,null),e(Zo,Ifr),e(Zo,yr),M(Qy,yr,null),e(yr,qfr),e(yr,h8e),e(h8e,Nfr),e(yr,jfr),e(yr,en),e(en,Dfr),e(en,p8e),e(p8e,Gfr),e(en,Ofr),e(en,u8e),e(u8e,Vfr),e(en,Xfr),e(en,_8e),e(_8e,zfr),e(en,Qfr),e(yr,Wfr),e(yr,Te),e(Te,VT),e(VT,b8e),e(b8e,Hfr),e(VT,Ufr),e(VT,MQ),e(MQ,Jfr),e(VT,Yfr),e(Te,Kfr),e(Te,XT),e(XT,v8e),e(v8e,Zfr),e(XT,emr),e(XT,EQ),e(EQ,omr),e(XT,rmr),e(Te,tmr),e(Te,zT),e(zT,F8e),e(F8e,amr),e(zT,nmr),e(zT,CQ),e(CQ,smr),e(zT,lmr),e(Te,imr),e(Te,QT),e(QT,T8e),e(T8e,dmr),e(QT,cmr),e(QT,wQ),e(wQ,fmr),e(QT,mmr),e(Te,gmr),e(Te,WT),e(WT,M8e),e(M8e,hmr),e(WT,pmr),e(WT,AQ),e(AQ,umr),e(WT,_mr),e(Te,bmr),e(Te,HT),e(HT,E8e),e(E8e,vmr),e(HT,Fmr),e(HT,yQ),e(yQ,Tmr),e(HT,Mmr),e(Te,Emr),e(Te,UT),e(UT,C8e),e(C8e,Cmr),e(UT,wmr),e(UT,LQ),e(LQ,Amr),e(UT,ymr),e(Te,Lmr),e(Te,JT),e(JT,w8e),e(w8e,xmr),e(JT,$mr),e(JT,xQ),e(xQ,kmr),e(JT,Smr),e(Te,Rmr),e(Te,YT),e(YT,A8e),e(A8e,Bmr),e(YT,Pmr),e(YT,$Q),e($Q,Imr),e(YT,qmr),e(Te,Nmr),e(Te,KT),e(KT,y8e),e(y8e,jmr),e(KT,Dmr),e(KT,kQ),e(kQ,Gmr),e(KT,Omr),e(Te,Vmr),e(Te,ZT),e(ZT,L8e),e(L8e,Xmr),e(ZT,zmr),e(ZT,SQ),e(SQ,Qmr),e(ZT,Wmr),e(Te,Hmr),e(Te,e9),e(e9,x8e),e(x8e,Umr),e(e9,Jmr),e(e9,RQ),e(RQ,Ymr),e(e9,Kmr),e(yr,Zmr),M(o9,yr,null),b(f,JIe,_),b(f,Wd,_),e(Wd,r9),e(r9,$8e),M(Wy,$8e,null),e(Wd,egr),e(Wd,k8e),e(k8e,ogr),b(f,YIe,_),b(f,er,_),M(Hy,er,null),e(er,rgr),e(er,Hd),e(Hd,tgr),e(Hd,BQ),e(BQ,agr),e(Hd,ngr),e(Hd,PQ),e(PQ,sgr),e(Hd,lgr),e(er,igr),e(er,Uy),e(Uy,dgr),e(Uy,S8e),e(S8e,cgr),e(Uy,fgr),e(er,mgr),e(er,Lt),M(Jy,Lt,null),e(Lt,ggr),e(Lt,R8e),e(R8e,hgr),e(Lt,pgr),e(Lt,Ud),e(Ud,ugr),e(Ud,B8e),e(B8e,_gr),e(Ud,bgr),e(Ud,IQ),e(IQ,vgr),e(Ud,Fgr),e(Lt,Tgr),M(t9,Lt,null),e(er,Mgr),e(er,Lr),M(Yy,Lr,null),e(Lr,Egr),e(Lr,P8e),e(P8e,Cgr),e(Lr,wgr),e(Lr,on),e(on,Agr),e(on,I8e),e(I8e,ygr),e(on,Lgr),e(on,q8e),e(q8e,xgr),e(on,$gr),e(on,N8e),e(N8e,kgr),e(on,Sgr),e(Lr,Rgr),e(Lr,rn),e(rn,a9),e(a9,j8e),e(j8e,Bgr),e(a9,Pgr),e(a9,qQ),e(qQ,Igr),e(a9,qgr),e(rn,Ngr),e(rn,n9),e(n9,D8e),e(D8e,jgr),e(n9,Dgr),e(n9,NQ),e(NQ,Ggr),e(n9,Ogr),e(rn,Vgr),e(rn,s9),e(s9,G8e),e(G8e,Xgr),e(s9,zgr),e(s9,jQ),e(jQ,Qgr),e(s9,Wgr),e(rn,Hgr),e(rn,l9),e(l9,O8e),e(O8e,Ugr),e(l9,Jgr),e(l9,DQ),e(DQ,Ygr),e(l9,Kgr),e(Lr,Zgr),M(i9,Lr,null),b(f,KIe,_),b(f,Jd,_),e(Jd,d9),e(d9,V8e),M(Ky,V8e,null),e(Jd,ehr),e(Jd,X8e),e(X8e,ohr),b(f,ZIe,_),b(f,or,_),M(Zy,or,null),e(or,rhr),e(or,Yd),e(Yd,thr),e(Yd,GQ),e(GQ,ahr),e(Yd,nhr),e(Yd,OQ),e(OQ,shr),e(Yd,lhr),e(or,ihr),e(or,eL),e(eL,dhr),e(eL,z8e),e(z8e,chr),e(eL,fhr),e(or,mhr),e(or,xt),M(oL,xt,null),e(xt,ghr),e(xt,Q8e),e(Q8e,hhr),e(xt,phr),e(xt,Kd),e(Kd,uhr),e(Kd,W8e),e(W8e,_hr),e(Kd,bhr),e(Kd,VQ),e(VQ,vhr),e(Kd,Fhr),e(xt,Thr),M(c9,xt,null),e(or,Mhr),e(or,xr),M(rL,xr,null),e(xr,Ehr),e(xr,H8e),e(H8e,Chr),e(xr,whr),e(xr,tn),e(tn,Ahr),e(tn,U8e),e(U8e,yhr),e(tn,Lhr),e(tn,J8e),e(J8e,xhr),e(tn,$hr),e(tn,Y8e),e(Y8e,khr),e(tn,Shr),e(xr,Rhr),e(xr,ie),e(ie,f9),e(f9,K8e),e(K8e,Bhr),e(f9,Phr),e(f9,XQ),e(XQ,Ihr),e(f9,qhr),e(ie,Nhr),e(ie,m9),e(m9,Z8e),e(Z8e,jhr),e(m9,Dhr),e(m9,zQ),e(zQ,Ghr),e(m9,Ohr),e(ie,Vhr),e(ie,g9),e(g9,ebe),e(ebe,Xhr),e(g9,zhr),e(g9,QQ),e(QQ,Qhr),e(g9,Whr),e(ie,Hhr),e(ie,h9),e(h9,obe),e(obe,Uhr),e(h9,Jhr),e(h9,WQ),e(WQ,Yhr),e(h9,Khr),e(ie,Zhr),e(ie,p9),e(p9,rbe),e(rbe,epr),e(p9,opr),e(p9,HQ),e(HQ,rpr),e(p9,tpr),e(ie,apr),e(ie,u9),e(u9,tbe),e(tbe,npr),e(u9,spr),e(u9,UQ),e(UQ,lpr),e(u9,ipr),e(ie,dpr),e(ie,_9),e(_9,abe),e(abe,cpr),e(_9,fpr),e(_9,JQ),e(JQ,mpr),e(_9,gpr),e(ie,hpr),e(ie,b9),e(b9,nbe),e(nbe,ppr),e(b9,upr),e(b9,YQ),e(YQ,_pr),e(b9,bpr),e(ie,vpr),e(ie,v9),e(v9,sbe),e(sbe,Fpr),e(v9,Tpr),e(v9,KQ),e(KQ,Mpr),e(v9,Epr),e(ie,Cpr),e(ie,F9),e(F9,lbe),e(lbe,wpr),e(F9,Apr),e(F9,ZQ),e(ZQ,ypr),e(F9,Lpr),e(ie,xpr),e(ie,T9),e(T9,ibe),e(ibe,$pr),e(T9,kpr),e(T9,eW),e(eW,Spr),e(T9,Rpr),e(ie,Bpr),e(ie,M9),e(M9,dbe),e(dbe,Ppr),e(M9,Ipr),e(M9,oW),e(oW,qpr),e(M9,Npr),e(ie,jpr),e(ie,E9),e(E9,cbe),e(cbe,Dpr),e(E9,Gpr),e(E9,rW),e(rW,Opr),e(E9,Vpr),e(ie,Xpr),e(ie,C9),e(C9,fbe),e(fbe,zpr),e(C9,Qpr),e(C9,tW),e(tW,Wpr),e(C9,Hpr),e(ie,Upr),e(ie,w9),e(w9,mbe),e(mbe,Jpr),e(w9,Ypr),e(w9,aW),e(aW,Kpr),e(w9,Zpr),e(ie,eur),e(ie,A9),e(A9,gbe),e(gbe,our),e(A9,rur),e(A9,nW),e(nW,tur),e(A9,aur),e(ie,nur),e(ie,y9),e(y9,hbe),e(hbe,sur),e(y9,lur),e(y9,sW),e(sW,iur),e(y9,dur),e(ie,cur),e(ie,L9),e(L9,pbe),e(pbe,fur),e(L9,mur),e(L9,lW),e(lW,gur),e(L9,hur),e(ie,pur),e(ie,x9),e(x9,ube),e(ube,uur),e(x9,_ur),e(x9,iW),e(iW,bur),e(x9,vur),e(ie,Fur),e(ie,$9),e($9,_be),e(_be,Tur),e($9,Mur),e($9,dW),e(dW,Eur),e($9,Cur),e(xr,wur),M(k9,xr,null),b(f,eqe,_),b(f,Zd,_),e(Zd,S9),e(S9,bbe),M(tL,bbe,null),e(Zd,Aur),e(Zd,vbe),e(vbe,yur),b(f,oqe,_),b(f,rr,_),M(aL,rr,null),e(rr,Lur),e(rr,ec),e(ec,xur),e(ec,cW),e(cW,$ur),e(ec,kur),e(ec,fW),e(fW,Sur),e(ec,Rur),e(rr,Bur),e(rr,nL),e(nL,Pur),e(nL,Fbe),e(Fbe,Iur),e(nL,qur),e(rr,Nur),e(rr,$t),M(sL,$t,null),e($t,jur),e($t,Tbe),e(Tbe,Dur),e($t,Gur),e($t,oc),e(oc,Our),e(oc,Mbe),e(Mbe,Vur),e(oc,Xur),e(oc,mW),e(mW,zur),e(oc,Qur),e($t,Wur),M(R9,$t,null),e(rr,Hur),e(rr,$r),M(lL,$r,null),e($r,Uur),e($r,Ebe),e(Ebe,Jur),e($r,Yur),e($r,an),e(an,Kur),e(an,Cbe),e(Cbe,Zur),e(an,e_r),e(an,wbe),e(wbe,o_r),e(an,r_r),e(an,Abe),e(Abe,t_r),e(an,a_r),e($r,n_r),e($r,ye),e(ye,B9),e(B9,ybe),e(ybe,s_r),e(B9,l_r),e(B9,gW),e(gW,i_r),e(B9,d_r),e(ye,c_r),e(ye,P9),e(P9,Lbe),e(Lbe,f_r),e(P9,m_r),e(P9,hW),e(hW,g_r),e(P9,h_r),e(ye,p_r),e(ye,I9),e(I9,xbe),e(xbe,u_r),e(I9,__r),e(I9,pW),e(pW,b_r),e(I9,v_r),e(ye,F_r),e(ye,q9),e(q9,$be),e($be,T_r),e(q9,M_r),e(q9,uW),e(uW,E_r),e(q9,C_r),e(ye,w_r),e(ye,N9),e(N9,kbe),e(kbe,A_r),e(N9,y_r),e(N9,_W),e(_W,L_r),e(N9,x_r),e(ye,$_r),e(ye,j9),e(j9,Sbe),e(Sbe,k_r),e(j9,S_r),e(j9,bW),e(bW,R_r),e(j9,B_r),e(ye,P_r),e(ye,D9),e(D9,Rbe),e(Rbe,I_r),e(D9,q_r),e(D9,vW),e(vW,N_r),e(D9,j_r),e(ye,D_r),e(ye,G9),e(G9,Bbe),e(Bbe,G_r),e(G9,O_r),e(G9,FW),e(FW,V_r),e(G9,X_r),e(ye,z_r),e(ye,O9),e(O9,Pbe),e(Pbe,Q_r),e(O9,W_r),e(O9,TW),e(TW,H_r),e(O9,U_r),e(ye,J_r),e(ye,V9),e(V9,Ibe),e(Ibe,Y_r),e(V9,K_r),e(V9,MW),e(MW,Z_r),e(V9,e1r),e($r,o1r),M(X9,$r,null),b(f,rqe,_),b(f,rc,_),e(rc,z9),e(z9,qbe),M(iL,qbe,null),e(rc,r1r),e(rc,Nbe),e(Nbe,t1r),b(f,tqe,_),b(f,tr,_),M(dL,tr,null),e(tr,a1r),e(tr,tc),e(tc,n1r),e(tc,EW),e(EW,s1r),e(tc,l1r),e(tc,CW),e(CW,i1r),e(tc,d1r),e(tr,c1r),e(tr,cL),e(cL,f1r),e(cL,jbe),e(jbe,m1r),e(cL,g1r),e(tr,h1r),e(tr,kt),M(fL,kt,null),e(kt,p1r),e(kt,Dbe),e(Dbe,u1r),e(kt,_1r),e(kt,ac),e(ac,b1r),e(ac,Gbe),e(Gbe,v1r),e(ac,F1r),e(ac,wW),e(wW,T1r),e(ac,M1r),e(kt,E1r),M(Q9,kt,null),e(tr,C1r),e(tr,kr),M(mL,kr,null),e(kr,w1r),e(kr,Obe),e(Obe,A1r),e(kr,y1r),e(kr,nn),e(nn,L1r),e(nn,Vbe),e(Vbe,x1r),e(nn,$1r),e(nn,Xbe),e(Xbe,k1r),e(nn,S1r),e(nn,zbe),e(zbe,R1r),e(nn,B1r),e(kr,P1r),e(kr,Z),e(Z,W9),e(W9,Qbe),e(Qbe,I1r),e(W9,q1r),e(W9,AW),e(AW,N1r),e(W9,j1r),e(Z,D1r),e(Z,H9),e(H9,Wbe),e(Wbe,G1r),e(H9,O1r),e(H9,yW),e(yW,V1r),e(H9,X1r),e(Z,z1r),e(Z,U9),e(U9,Hbe),e(Hbe,Q1r),e(U9,W1r),e(U9,LW),e(LW,H1r),e(U9,U1r),e(Z,J1r),e(Z,J9),e(J9,Ube),e(Ube,Y1r),e(J9,K1r),e(J9,xW),e(xW,Z1r),e(J9,e8r),e(Z,o8r),e(Z,Y9),e(Y9,Jbe),e(Jbe,r8r),e(Y9,t8r),e(Y9,$W),e($W,a8r),e(Y9,n8r),e(Z,s8r),e(Z,K9),e(K9,Ybe),e(Ybe,l8r),e(K9,i8r),e(K9,kW),e(kW,d8r),e(K9,c8r),e(Z,f8r),e(Z,Z9),e(Z9,Kbe),e(Kbe,m8r),e(Z9,g8r),e(Z9,SW),e(SW,h8r),e(Z9,p8r),e(Z,u8r),e(Z,eM),e(eM,Zbe),e(Zbe,_8r),e(eM,b8r),e(eM,RW),e(RW,v8r),e(eM,F8r),e(Z,T8r),e(Z,oM),e(oM,e2e),e(e2e,M8r),e(oM,E8r),e(oM,BW),e(BW,C8r),e(oM,w8r),e(Z,A8r),e(Z,rM),e(rM,o2e),e(o2e,y8r),e(rM,L8r),e(rM,PW),e(PW,x8r),e(rM,$8r),e(Z,k8r),e(Z,tM),e(tM,r2e),e(r2e,S8r),e(tM,R8r),e(tM,IW),e(IW,B8r),e(tM,P8r),e(Z,I8r),e(Z,aM),e(aM,t2e),e(t2e,q8r),e(aM,N8r),e(aM,qW),e(qW,j8r),e(aM,D8r),e(Z,G8r),e(Z,nM),e(nM,a2e),e(a2e,O8r),e(nM,V8r),e(nM,NW),e(NW,X8r),e(nM,z8r),e(Z,Q8r),e(Z,sM),e(sM,n2e),e(n2e,W8r),e(sM,H8r),e(sM,jW),e(jW,U8r),e(sM,J8r),e(Z,Y8r),e(Z,lM),e(lM,s2e),e(s2e,K8r),e(lM,Z8r),e(lM,DW),e(DW,ebr),e(lM,obr),e(Z,rbr),e(Z,iM),e(iM,l2e),e(l2e,tbr),e(iM,abr),e(iM,GW),e(GW,nbr),e(iM,sbr),e(Z,lbr),e(Z,dM),e(dM,i2e),e(i2e,ibr),e(dM,dbr),e(dM,OW),e(OW,cbr),e(dM,fbr),e(Z,mbr),e(Z,cM),e(cM,d2e),e(d2e,gbr),e(cM,hbr),e(cM,VW),e(VW,pbr),e(cM,ubr),e(Z,_br),e(Z,fM),e(fM,c2e),e(c2e,bbr),e(fM,vbr),e(fM,XW),e(XW,Fbr),e(fM,Tbr),e(Z,Mbr),e(Z,mM),e(mM,f2e),e(f2e,Ebr),e(mM,Cbr),e(mM,zW),e(zW,wbr),e(mM,Abr),e(Z,ybr),e(Z,gM),e(gM,m2e),e(m2e,Lbr),e(gM,xbr),e(gM,QW),e(QW,$br),e(gM,kbr),e(Z,Sbr),e(Z,hM),e(hM,g2e),e(g2e,Rbr),e(hM,Bbr),e(hM,WW),e(WW,Pbr),e(hM,Ibr),e(Z,qbr),e(Z,pM),e(pM,h2e),e(h2e,Nbr),e(pM,jbr),e(pM,HW),e(HW,Dbr),e(pM,Gbr),e(Z,Obr),e(Z,uM),e(uM,p2e),e(p2e,Vbr),e(uM,Xbr),e(uM,UW),e(UW,zbr),e(uM,Qbr),e(Z,Wbr),e(Z,_M),e(_M,u2e),e(u2e,Hbr),e(_M,Ubr),e(_M,JW),e(JW,Jbr),e(_M,Ybr),e(Z,Kbr),e(Z,bM),e(bM,_2e),e(_2e,Zbr),e(bM,e2r),e(bM,YW),e(YW,o2r),e(bM,r2r),e(kr,t2r),M(vM,kr,null),b(f,aqe,_),b(f,nc,_),e(nc,FM),e(FM,b2e),M(gL,b2e,null),e(nc,a2r),e(nc,v2e),e(v2e,n2r),b(f,nqe,_),b(f,ar,_),M(hL,ar,null),e(ar,s2r),e(ar,sc),e(sc,l2r),e(sc,KW),e(KW,i2r),e(sc,d2r),e(sc,ZW),e(ZW,c2r),e(sc,f2r),e(ar,m2r),e(ar,pL),e(pL,g2r),e(pL,F2e),e(F2e,h2r),e(pL,p2r),e(ar,u2r),e(ar,St),M(uL,St,null),e(St,_2r),e(St,T2e),e(T2e,b2r),e(St,v2r),e(St,lc),e(lc,F2r),e(lc,M2e),e(M2e,T2r),e(lc,M2r),e(lc,eH),e(eH,E2r),e(lc,C2r),e(St,w2r),M(TM,St,null),e(ar,A2r),e(ar,Sr),M(_L,Sr,null),e(Sr,y2r),e(Sr,E2e),e(E2e,L2r),e(Sr,x2r),e(Sr,sn),e(sn,$2r),e(sn,C2e),e(C2e,k2r),e(sn,S2r),e(sn,w2e),e(w2e,R2r),e(sn,B2r),e(sn,A2e),e(A2e,P2r),e(sn,I2r),e(Sr,q2r),e(Sr,he),e(he,MM),e(MM,y2e),e(y2e,N2r),e(MM,j2r),e(MM,oH),e(oH,D2r),e(MM,G2r),e(he,O2r),e(he,EM),e(EM,L2e),e(L2e,V2r),e(EM,X2r),e(EM,rH),e(rH,z2r),e(EM,Q2r),e(he,W2r),e(he,CM),e(CM,x2e),e(x2e,H2r),e(CM,U2r),e(CM,tH),e(tH,J2r),e(CM,Y2r),e(he,K2r),e(he,wM),e(wM,$2e),e($2e,Z2r),e(wM,evr),e(wM,aH),e(aH,ovr),e(wM,rvr),e(he,tvr),e(he,AM),e(AM,k2e),e(k2e,avr),e(AM,nvr),e(AM,nH),e(nH,svr),e(AM,lvr),e(he,ivr),e(he,yM),e(yM,S2e),e(S2e,dvr),e(yM,cvr),e(yM,sH),e(sH,fvr),e(yM,mvr),e(he,gvr),e(he,LM),e(LM,R2e),e(R2e,hvr),e(LM,pvr),e(LM,lH),e(lH,uvr),e(LM,_vr),e(he,bvr),e(he,xM),e(xM,B2e),e(B2e,vvr),e(xM,Fvr),e(xM,iH),e(iH,Tvr),e(xM,Mvr),e(he,Evr),e(he,$M),e($M,P2e),e(P2e,Cvr),e($M,wvr),e($M,dH),e(dH,Avr),e($M,yvr),e(he,Lvr),e(he,kM),e(kM,I2e),e(I2e,xvr),e(kM,$vr),e(kM,cH),e(cH,kvr),e(kM,Svr),e(he,Rvr),e(he,SM),e(SM,q2e),e(q2e,Bvr),e(SM,Pvr),e(SM,fH),e(fH,Ivr),e(SM,qvr),e(he,Nvr),e(he,RM),e(RM,N2e),e(N2e,jvr),e(RM,Dvr),e(RM,mH),e(mH,Gvr),e(RM,Ovr),e(he,Vvr),e(he,BM),e(BM,j2e),e(j2e,Xvr),e(BM,zvr),e(BM,gH),e(gH,Qvr),e(BM,Wvr),e(he,Hvr),e(he,PM),e(PM,D2e),e(D2e,Uvr),e(PM,Jvr),e(PM,hH),e(hH,Yvr),e(PM,Kvr),e(he,Zvr),e(he,IM),e(IM,G2e),e(G2e,eFr),e(IM,oFr),e(IM,pH),e(pH,rFr),e(IM,tFr),e(he,aFr),e(he,qM),e(qM,O2e),e(O2e,nFr),e(qM,sFr),e(qM,uH),e(uH,lFr),e(qM,iFr),e(he,dFr),e(he,NM),e(NM,V2e),e(V2e,cFr),e(NM,fFr),e(NM,_H),e(_H,mFr),e(NM,gFr),e(Sr,hFr),M(jM,Sr,null),b(f,sqe,_),b(f,ic,_),e(ic,DM),e(DM,X2e),M(bL,X2e,null),e(ic,pFr),e(ic,z2e),e(z2e,uFr),b(f,lqe,_),b(f,nr,_),M(vL,nr,null),e(nr,_Fr),e(nr,dc),e(dc,bFr),e(dc,bH),e(bH,vFr),e(dc,FFr),e(dc,vH),e(vH,TFr),e(dc,MFr),e(nr,EFr),e(nr,FL),e(FL,CFr),e(FL,Q2e),e(Q2e,wFr),e(FL,AFr),e(nr,yFr),e(nr,Rt),M(TL,Rt,null),e(Rt,LFr),e(Rt,W2e),e(W2e,xFr),e(Rt,$Fr),e(Rt,cc),e(cc,kFr),e(cc,H2e),e(H2e,SFr),e(cc,RFr),e(cc,FH),e(FH,BFr),e(cc,PFr),e(Rt,IFr),M(GM,Rt,null),e(nr,qFr),e(nr,Rr),M(ML,Rr,null),e(Rr,NFr),e(Rr,U2e),e(U2e,jFr),e(Rr,DFr),e(Rr,ln),e(ln,GFr),e(ln,J2e),e(J2e,OFr),e(ln,VFr),e(ln,Y2e),e(Y2e,XFr),e(ln,zFr),e(ln,K2e),e(K2e,QFr),e(ln,WFr),e(Rr,HFr),e(Rr,EL),e(EL,OM),e(OM,Z2e),e(Z2e,UFr),e(OM,JFr),e(OM,TH),e(TH,YFr),e(OM,KFr),e(EL,ZFr),e(EL,VM),e(VM,eve),e(eve,e6r),e(VM,o6r),e(VM,MH),e(MH,r6r),e(VM,t6r),e(Rr,a6r),M(XM,Rr,null),b(f,iqe,_),b(f,fc,_),e(fc,zM),e(zM,ove),M(CL,ove,null),e(fc,n6r),e(fc,rve),e(rve,s6r),b(f,dqe,_),b(f,sr,_),M(wL,sr,null),e(sr,l6r),e(sr,mc),e(mc,i6r),e(mc,EH),e(EH,d6r),e(mc,c6r),e(mc,CH),e(CH,f6r),e(mc,m6r),e(sr,g6r),e(sr,AL),e(AL,h6r),e(AL,tve),e(tve,p6r),e(AL,u6r),e(sr,_6r),e(sr,Bt),M(yL,Bt,null),e(Bt,b6r),e(Bt,ave),e(ave,v6r),e(Bt,F6r),e(Bt,gc),e(gc,T6r),e(gc,nve),e(nve,M6r),e(gc,E6r),e(gc,wH),e(wH,C6r),e(gc,w6r),e(Bt,A6r),M(QM,Bt,null),e(sr,y6r),e(sr,Br),M(LL,Br,null),e(Br,L6r),e(Br,sve),e(sve,x6r),e(Br,$6r),e(Br,dn),e(dn,k6r),e(dn,lve),e(lve,S6r),e(dn,R6r),e(dn,ive),e(ive,B6r),e(dn,P6r),e(dn,dve),e(dve,I6r),e(dn,q6r),e(Br,N6r),e(Br,cve),e(cve,WM),e(WM,fve),e(fve,j6r),e(WM,D6r),e(WM,AH),e(AH,G6r),e(WM,O6r),e(Br,V6r),M(HM,Br,null),b(f,cqe,_),b(f,hc,_),e(hc,UM),e(UM,mve),M(xL,mve,null),e(hc,X6r),e(hc,gve),e(gve,z6r),b(f,fqe,_),b(f,lr,_),M($L,lr,null),e(lr,Q6r),e(lr,pc),e(pc,W6r),e(pc,yH),e(yH,H6r),e(pc,U6r),e(pc,LH),e(LH,J6r),e(pc,Y6r),e(lr,K6r),e(lr,kL),e(kL,Z6r),e(kL,hve),e(hve,eTr),e(kL,oTr),e(lr,rTr),e(lr,Pt),M(SL,Pt,null),e(Pt,tTr),e(Pt,pve),e(pve,aTr),e(Pt,nTr),e(Pt,uc),e(uc,sTr),e(uc,uve),e(uve,lTr),e(uc,iTr),e(uc,xH),e(xH,dTr),e(uc,cTr),e(Pt,fTr),M(JM,Pt,null),e(lr,mTr),e(lr,Pr),M(RL,Pr,null),e(Pr,gTr),e(Pr,_ve),e(_ve,hTr),e(Pr,pTr),e(Pr,cn),e(cn,uTr),e(cn,bve),e(bve,_Tr),e(cn,bTr),e(cn,vve),e(vve,vTr),e(cn,FTr),e(cn,Fve),e(Fve,TTr),e(cn,MTr),e(Pr,ETr),e(Pr,de),e(de,YM),e(YM,Tve),e(Tve,CTr),e(YM,wTr),e(YM,$H),e($H,ATr),e(YM,yTr),e(de,LTr),e(de,KM),e(KM,Mve),e(Mve,xTr),e(KM,$Tr),e(KM,kH),e(kH,kTr),e(KM,STr),e(de,RTr),e(de,ZM),e(ZM,Eve),e(Eve,BTr),e(ZM,PTr),e(ZM,SH),e(SH,ITr),e(ZM,qTr),e(de,NTr),e(de,e4),e(e4,Cve),e(Cve,jTr),e(e4,DTr),e(e4,RH),e(RH,GTr),e(e4,OTr),e(de,VTr),e(de,o4),e(o4,wve),e(wve,XTr),e(o4,zTr),e(o4,BH),e(BH,QTr),e(o4,WTr),e(de,HTr),e(de,r4),e(r4,Ave),e(Ave,UTr),e(r4,JTr),e(r4,PH),e(PH,YTr),e(r4,KTr),e(de,ZTr),e(de,t4),e(t4,yve),e(yve,e9r),e(t4,o9r),e(t4,IH),e(IH,r9r),e(t4,t9r),e(de,a9r),e(de,a4),e(a4,Lve),e(Lve,n9r),e(a4,s9r),e(a4,qH),e(qH,l9r),e(a4,i9r),e(de,d9r),e(de,n4),e(n4,xve),e(xve,c9r),e(n4,f9r),e(n4,NH),e(NH,m9r),e(n4,g9r),e(de,h9r),e(de,s4),e(s4,$ve),e($ve,p9r),e(s4,u9r),e(s4,jH),e(jH,_9r),e(s4,b9r),e(de,v9r),e(de,l4),e(l4,kve),e(kve,F9r),e(l4,T9r),e(l4,DH),e(DH,M9r),e(l4,E9r),e(de,C9r),e(de,i4),e(i4,Sve),e(Sve,w9r),e(i4,A9r),e(i4,GH),e(GH,y9r),e(i4,L9r),e(de,x9r),e(de,d4),e(d4,Rve),e(Rve,$9r),e(d4,k9r),e(d4,OH),e(OH,S9r),e(d4,R9r),e(de,B9r),e(de,c4),e(c4,Bve),e(Bve,P9r),e(c4,I9r),e(c4,VH),e(VH,q9r),e(c4,N9r),e(de,j9r),e(de,f4),e(f4,Pve),e(Pve,D9r),e(f4,G9r),e(f4,XH),e(XH,O9r),e(f4,V9r),e(de,X9r),e(de,m4),e(m4,Ive),e(Ive,z9r),e(m4,Q9r),e(m4,zH),e(zH,W9r),e(m4,H9r),e(de,U9r),e(de,g4),e(g4,qve),e(qve,J9r),e(g4,Y9r),e(g4,QH),e(QH,K9r),e(g4,Z9r),e(de,eMr),e(de,h4),e(h4,Nve),e(Nve,oMr),e(h4,rMr),e(h4,WH),e(WH,tMr),e(h4,aMr),e(de,nMr),e(de,p4),e(p4,jve),e(jve,sMr),e(p4,lMr),e(p4,HH),e(HH,iMr),e(p4,dMr),e(de,cMr),e(de,u4),e(u4,Dve),e(Dve,fMr),e(u4,mMr),e(u4,UH),e(UH,gMr),e(u4,hMr),e(Pr,pMr),M(_4,Pr,null),b(f,mqe,_),b(f,_c,_),e(_c,b4),e(b4,Gve),M(BL,Gve,null),e(_c,uMr),e(_c,Ove),e(Ove,_Mr),b(f,gqe,_),b(f,ir,_),M(PL,ir,null),e(ir,bMr),e(ir,bc),e(bc,vMr),e(bc,JH),e(JH,FMr),e(bc,TMr),e(bc,YH),e(YH,MMr),e(bc,EMr),e(ir,CMr),e(ir,IL),e(IL,wMr),e(IL,Vve),e(Vve,AMr),e(IL,yMr),e(ir,LMr),e(ir,It),M(qL,It,null),e(It,xMr),e(It,Xve),e(Xve,$Mr),e(It,kMr),e(It,vc),e(vc,SMr),e(vc,zve),e(zve,RMr),e(vc,BMr),e(vc,KH),e(KH,PMr),e(vc,IMr),e(It,qMr),M(v4,It,null),e(ir,NMr),e(ir,Ir),M(NL,Ir,null),e(Ir,jMr),e(Ir,Qve),e(Qve,DMr),e(Ir,GMr),e(Ir,fn),e(fn,OMr),e(fn,Wve),e(Wve,VMr),e(fn,XMr),e(fn,Hve),e(Hve,zMr),e(fn,QMr),e(fn,Uve),e(Uve,WMr),e(fn,HMr),e(Ir,UMr),e(Ir,ce),e(ce,F4),e(F4,Jve),e(Jve,JMr),e(F4,YMr),e(F4,ZH),e(ZH,KMr),e(F4,ZMr),e(ce,e4r),e(ce,T4),e(T4,Yve),e(Yve,o4r),e(T4,r4r),e(T4,eU),e(eU,t4r),e(T4,a4r),e(ce,n4r),e(ce,M4),e(M4,Kve),e(Kve,s4r),e(M4,l4r),e(M4,oU),e(oU,i4r),e(M4,d4r),e(ce,c4r),e(ce,E4),e(E4,Zve),e(Zve,f4r),e(E4,m4r),e(E4,rU),e(rU,g4r),e(E4,h4r),e(ce,p4r),e(ce,C4),e(C4,eFe),e(eFe,u4r),e(C4,_4r),e(C4,tU),e(tU,b4r),e(C4,v4r),e(ce,F4r),e(ce,w4),e(w4,oFe),e(oFe,T4r),e(w4,M4r),e(w4,aU),e(aU,E4r),e(w4,C4r),e(ce,w4r),e(ce,A4),e(A4,rFe),e(rFe,A4r),e(A4,y4r),e(A4,nU),e(nU,L4r),e(A4,x4r),e(ce,$4r),e(ce,y4),e(y4,tFe),e(tFe,k4r),e(y4,S4r),e(y4,sU),e(sU,R4r),e(y4,B4r),e(ce,P4r),e(ce,L4),e(L4,aFe),e(aFe,I4r),e(L4,q4r),e(L4,lU),e(lU,N4r),e(L4,j4r),e(ce,D4r),e(ce,x4),e(x4,nFe),e(nFe,G4r),e(x4,O4r),e(x4,iU),e(iU,V4r),e(x4,X4r),e(ce,z4r),e(ce,$4),e($4,sFe),e(sFe,Q4r),e($4,W4r),e($4,dU),e(dU,H4r),e($4,U4r),e(ce,J4r),e(ce,k4),e(k4,lFe),e(lFe,Y4r),e(k4,K4r),e(k4,cU),e(cU,Z4r),e(k4,eEr),e(ce,oEr),e(ce,S4),e(S4,iFe),e(iFe,rEr),e(S4,tEr),e(S4,fU),e(fU,aEr),e(S4,nEr),e(ce,sEr),e(ce,R4),e(R4,dFe),e(dFe,lEr),e(R4,iEr),e(R4,mU),e(mU,dEr),e(R4,cEr),e(ce,fEr),e(ce,B4),e(B4,cFe),e(cFe,mEr),e(B4,gEr),e(B4,gU),e(gU,hEr),e(B4,pEr),e(ce,uEr),e(ce,P4),e(P4,fFe),e(fFe,_Er),e(P4,bEr),e(P4,hU),e(hU,vEr),e(P4,FEr),e(ce,TEr),e(ce,I4),e(I4,mFe),e(mFe,MEr),e(I4,EEr),e(I4,pU),e(pU,CEr),e(I4,wEr),e(ce,AEr),e(ce,q4),e(q4,gFe),e(gFe,yEr),e(q4,LEr),e(q4,uU),e(uU,xEr),e(q4,$Er),e(ce,kEr),e(ce,N4),e(N4,hFe),e(hFe,SEr),e(N4,REr),e(N4,_U),e(_U,BEr),e(N4,PEr),e(ce,IEr),e(ce,j4),e(j4,pFe),e(pFe,qEr),e(j4,NEr),e(j4,bU),e(bU,jEr),e(j4,DEr),e(Ir,GEr),M(D4,Ir,null),b(f,hqe,_),b(f,Fc,_),e(Fc,G4),e(G4,uFe),M(jL,uFe,null),e(Fc,OEr),e(Fc,_Fe),e(_Fe,VEr),b(f,pqe,_),b(f,dr,_),M(DL,dr,null),e(dr,XEr),e(dr,Tc),e(Tc,zEr),e(Tc,vU),e(vU,QEr),e(Tc,WEr),e(Tc,FU),e(FU,HEr),e(Tc,UEr),e(dr,JEr),e(dr,GL),e(GL,YEr),e(GL,bFe),e(bFe,KEr),e(GL,ZEr),e(dr,e5r),e(dr,qt),M(OL,qt,null),e(qt,o5r),e(qt,vFe),e(vFe,r5r),e(qt,t5r),e(qt,Mc),e(Mc,a5r),e(Mc,FFe),e(FFe,n5r),e(Mc,s5r),e(Mc,TU),e(TU,l5r),e(Mc,i5r),e(qt,d5r),M(O4,qt,null),e(dr,c5r),e(dr,qr),M(VL,qr,null),e(qr,f5r),e(qr,TFe),e(TFe,m5r),e(qr,g5r),e(qr,mn),e(mn,h5r),e(mn,MFe),e(MFe,p5r),e(mn,u5r),e(mn,EFe),e(EFe,_5r),e(mn,b5r),e(mn,CFe),e(CFe,v5r),e(mn,F5r),e(qr,T5r),e(qr,wFe),e(wFe,V4),e(V4,AFe),e(AFe,M5r),e(V4,E5r),e(V4,MU),e(MU,C5r),e(V4,w5r),e(qr,A5r),M(X4,qr,null),b(f,uqe,_),b(f,Ec,_),e(Ec,z4),e(z4,yFe),M(XL,yFe,null),e(Ec,y5r),e(Ec,LFe),e(LFe,L5r),b(f,_qe,_),b(f,cr,_),M(zL,cr,null),e(cr,x5r),e(cr,Cc),e(Cc,$5r),e(Cc,EU),e(EU,k5r),e(Cc,S5r),e(Cc,CU),e(CU,R5r),e(Cc,B5r),e(cr,P5r),e(cr,QL),e(QL,I5r),e(QL,xFe),e(xFe,q5r),e(QL,N5r),e(cr,j5r),e(cr,Nt),M(WL,Nt,null),e(Nt,D5r),e(Nt,$Fe),e($Fe,G5r),e(Nt,O5r),e(Nt,wc),e(wc,V5r),e(wc,kFe),e(kFe,X5r),e(wc,z5r),e(wc,wU),e(wU,Q5r),e(wc,W5r),e(Nt,H5r),M(Q4,Nt,null),e(cr,U5r),e(cr,Nr),M(HL,Nr,null),e(Nr,J5r),e(Nr,SFe),e(SFe,Y5r),e(Nr,K5r),e(Nr,gn),e(gn,Z5r),e(gn,RFe),e(RFe,eCr),e(gn,oCr),e(gn,BFe),e(BFe,rCr),e(gn,tCr),e(gn,PFe),e(PFe,aCr),e(gn,nCr),e(Nr,sCr),e(Nr,IFe),e(IFe,W4),e(W4,qFe),e(qFe,lCr),e(W4,iCr),e(W4,AU),e(AU,dCr),e(W4,cCr),e(Nr,fCr),M(H4,Nr,null),b(f,bqe,_),b(f,Ac,_),e(Ac,U4),e(U4,NFe),M(UL,NFe,null),e(Ac,mCr),e(Ac,jFe),e(jFe,gCr),b(f,vqe,_),b(f,fr,_),M(JL,fr,null),e(fr,hCr),e(fr,yc),e(yc,pCr),e(yc,yU),e(yU,uCr),e(yc,_Cr),e(yc,LU),e(LU,bCr),e(yc,vCr),e(fr,FCr),e(fr,YL),e(YL,TCr),e(YL,DFe),e(DFe,MCr),e(YL,ECr),e(fr,CCr),e(fr,jt),M(KL,jt,null),e(jt,wCr),e(jt,GFe),e(GFe,ACr),e(jt,yCr),e(jt,Lc),e(Lc,LCr),e(Lc,OFe),e(OFe,xCr),e(Lc,$Cr),e(Lc,xU),e(xU,kCr),e(Lc,SCr),e(jt,RCr),M(J4,jt,null),e(fr,BCr),e(fr,jr),M(ZL,jr,null),e(jr,PCr),e(jr,VFe),e(VFe,ICr),e(jr,qCr),e(jr,hn),e(hn,NCr),e(hn,XFe),e(XFe,jCr),e(hn,DCr),e(hn,zFe),e(zFe,GCr),e(hn,OCr),e(hn,QFe),e(QFe,VCr),e(hn,XCr),e(jr,zCr),e(jr,re),e(re,Y4),e(Y4,WFe),e(WFe,QCr),e(Y4,WCr),e(Y4,$U),e($U,HCr),e(Y4,UCr),e(re,JCr),e(re,K4),e(K4,HFe),e(HFe,YCr),e(K4,KCr),e(K4,kU),e(kU,ZCr),e(K4,e3r),e(re,o3r),e(re,Z4),e(Z4,UFe),e(UFe,r3r),e(Z4,t3r),e(Z4,SU),e(SU,a3r),e(Z4,n3r),e(re,s3r),e(re,eE),e(eE,JFe),e(JFe,l3r),e(eE,i3r),e(eE,RU),e(RU,d3r),e(eE,c3r),e(re,f3r),e(re,oE),e(oE,YFe),e(YFe,m3r),e(oE,g3r),e(oE,BU),e(BU,h3r),e(oE,p3r),e(re,u3r),e(re,rE),e(rE,KFe),e(KFe,_3r),e(rE,b3r),e(rE,PU),e(PU,v3r),e(rE,F3r),e(re,T3r),e(re,tE),e(tE,ZFe),e(ZFe,M3r),e(tE,E3r),e(tE,IU),e(IU,C3r),e(tE,w3r),e(re,A3r),e(re,aE),e(aE,e6e),e(e6e,y3r),e(aE,L3r),e(aE,qU),e(qU,x3r),e(aE,$3r),e(re,k3r),e(re,nE),e(nE,o6e),e(o6e,S3r),e(nE,R3r),e(nE,NU),e(NU,B3r),e(nE,P3r),e(re,I3r),e(re,sE),e(sE,r6e),e(r6e,q3r),e(sE,N3r),e(sE,jU),e(jU,j3r),e(sE,D3r),e(re,G3r),e(re,lE),e(lE,t6e),e(t6e,O3r),e(lE,V3r),e(lE,DU),e(DU,X3r),e(lE,z3r),e(re,Q3r),e(re,iE),e(iE,a6e),e(a6e,W3r),e(iE,H3r),e(iE,GU),e(GU,U3r),e(iE,J3r),e(re,Y3r),e(re,dE),e(dE,n6e),e(n6e,K3r),e(dE,Z3r),e(dE,OU),e(OU,ewr),e(dE,owr),e(re,rwr),e(re,cE),e(cE,s6e),e(s6e,twr),e(cE,awr),e(cE,VU),e(VU,nwr),e(cE,swr),e(re,lwr),e(re,fE),e(fE,l6e),e(l6e,iwr),e(fE,dwr),e(fE,XU),e(XU,cwr),e(fE,fwr),e(re,mwr),e(re,mE),e(mE,i6e),e(i6e,gwr),e(mE,hwr),e(mE,zU),e(zU,pwr),e(mE,uwr),e(re,_wr),e(re,gE),e(gE,d6e),e(d6e,bwr),e(gE,vwr),e(gE,QU),e(QU,Fwr),e(gE,Twr),e(re,Mwr),e(re,hE),e(hE,c6e),e(c6e,Ewr),e(hE,Cwr),e(hE,WU),e(WU,wwr),e(hE,Awr),e(re,ywr),e(re,pE),e(pE,f6e),e(f6e,Lwr),e(pE,xwr),e(pE,HU),e(HU,$wr),e(pE,kwr),e(re,Swr),e(re,uE),e(uE,m6e),e(m6e,Rwr),e(uE,Bwr),e(uE,UU),e(UU,Pwr),e(uE,Iwr),e(re,qwr),e(re,_E),e(_E,g6e),e(g6e,Nwr),e(_E,jwr),e(_E,JU),e(JU,Dwr),e(_E,Gwr),e(re,Owr),e(re,bE),e(bE,h6e),e(h6e,Vwr),e(bE,Xwr),e(bE,YU),e(YU,zwr),e(bE,Qwr),e(re,Wwr),e(re,vE),e(vE,p6e),e(p6e,Hwr),e(vE,Uwr),e(vE,KU),e(KU,Jwr),e(vE,Ywr),e(re,Kwr),e(re,FE),e(FE,u6e),e(u6e,Zwr),e(FE,eAr),e(FE,ZU),e(ZU,oAr),e(FE,rAr),e(re,tAr),e(re,TE),e(TE,_6e),e(_6e,aAr),e(TE,nAr),e(TE,eJ),e(eJ,sAr),e(TE,lAr),e(jr,iAr),M(ME,jr,null),b(f,Fqe,_),b(f,xc,_),e(xc,EE),e(EE,b6e),M(ex,b6e,null),e(xc,dAr),e(xc,v6e),e(v6e,cAr),b(f,Tqe,_),b(f,mr,_),M(ox,mr,null),e(mr,fAr),e(mr,$c),e($c,mAr),e($c,oJ),e(oJ,gAr),e($c,hAr),e($c,rJ),e(rJ,pAr),e($c,uAr),e(mr,_Ar),e(mr,rx),e(rx,bAr),e(rx,F6e),e(F6e,vAr),e(rx,FAr),e(mr,TAr),e(mr,Dt),M(tx,Dt,null),e(Dt,MAr),e(Dt,T6e),e(T6e,EAr),e(Dt,CAr),e(Dt,kc),e(kc,wAr),e(kc,M6e),e(M6e,AAr),e(kc,yAr),e(kc,tJ),e(tJ,LAr),e(kc,xAr),e(Dt,$Ar),M(CE,Dt,null),e(mr,kAr),e(mr,Dr),M(ax,Dr,null),e(Dr,SAr),e(Dr,E6e),e(E6e,RAr),e(Dr,BAr),e(Dr,pn),e(pn,PAr),e(pn,C6e),e(C6e,IAr),e(pn,qAr),e(pn,w6e),e(w6e,NAr),e(pn,jAr),e(pn,A6e),e(A6e,DAr),e(pn,GAr),e(Dr,OAr),e(Dr,ke),e(ke,wE),e(wE,y6e),e(y6e,VAr),e(wE,XAr),e(wE,aJ),e(aJ,zAr),e(wE,QAr),e(ke,WAr),e(ke,AE),e(AE,L6e),e(L6e,HAr),e(AE,UAr),e(AE,nJ),e(nJ,JAr),e(AE,YAr),e(ke,KAr),e(ke,yE),e(yE,x6e),e(x6e,ZAr),e(yE,e0r),e(yE,sJ),e(sJ,o0r),e(yE,r0r),e(ke,t0r),e(ke,LE),e(LE,$6e),e($6e,a0r),e(LE,n0r),e(LE,lJ),e(lJ,s0r),e(LE,l0r),e(ke,i0r),e(ke,xE),e(xE,k6e),e(k6e,d0r),e(xE,c0r),e(xE,iJ),e(iJ,f0r),e(xE,m0r),e(ke,g0r),e(ke,$E),e($E,S6e),e(S6e,h0r),e($E,p0r),e($E,dJ),e(dJ,u0r),e($E,_0r),e(ke,b0r),e(ke,kE),e(kE,R6e),e(R6e,v0r),e(kE,F0r),e(kE,cJ),e(cJ,T0r),e(kE,M0r),e(ke,E0r),e(ke,SE),e(SE,B6e),e(B6e,C0r),e(SE,w0r),e(SE,fJ),e(fJ,A0r),e(SE,y0r),e(ke,L0r),e(ke,RE),e(RE,P6e),e(P6e,x0r),e(RE,$0r),e(RE,mJ),e(mJ,k0r),e(RE,S0r),e(Dr,R0r),M(BE,Dr,null),b(f,Mqe,_),b(f,Sc,_),e(Sc,PE),e(PE,I6e),M(nx,I6e,null),e(Sc,B0r),e(Sc,q6e),e(q6e,P0r),b(f,Eqe,_),b(f,gr,_),M(sx,gr,null),e(gr,I0r),e(gr,Rc),e(Rc,q0r),e(Rc,gJ),e(gJ,N0r),e(Rc,j0r),e(Rc,hJ),e(hJ,D0r),e(Rc,G0r),e(gr,O0r),e(gr,lx),e(lx,V0r),e(lx,N6e),e(N6e,X0r),e(lx,z0r),e(gr,Q0r),e(gr,Gt),M(ix,Gt,null),e(Gt,W0r),e(Gt,j6e),e(j6e,H0r),e(Gt,U0r),e(Gt,Bc),e(Bc,J0r),e(Bc,D6e),e(D6e,Y0r),e(Bc,K0r),e(Bc,pJ),e(pJ,Z0r),e(Bc,eyr),e(Gt,oyr),M(IE,Gt,null),e(gr,ryr),e(gr,Gr),M(dx,Gr,null),e(Gr,tyr),e(Gr,G6e),e(G6e,ayr),e(Gr,nyr),e(Gr,un),e(un,syr),e(un,O6e),e(O6e,lyr),e(un,iyr),e(un,V6e),e(V6e,dyr),e(un,cyr),e(un,X6e),e(X6e,fyr),e(un,myr),e(Gr,gyr),e(Gr,Me),e(Me,qE),e(qE,z6e),e(z6e,hyr),e(qE,pyr),e(qE,uJ),e(uJ,uyr),e(qE,_yr),e(Me,byr),e(Me,NE),e(NE,Q6e),e(Q6e,vyr),e(NE,Fyr),e(NE,_J),e(_J,Tyr),e(NE,Myr),e(Me,Eyr),e(Me,jE),e(jE,W6e),e(W6e,Cyr),e(jE,wyr),e(jE,bJ),e(bJ,Ayr),e(jE,yyr),e(Me,Lyr),e(Me,DE),e(DE,H6e),e(H6e,xyr),e(DE,$yr),e(DE,vJ),e(vJ,kyr),e(DE,Syr),e(Me,Ryr),e(Me,GE),e(GE,U6e),e(U6e,Byr),e(GE,Pyr),e(GE,FJ),e(FJ,Iyr),e(GE,qyr),e(Me,Nyr),e(Me,OE),e(OE,J6e),e(J6e,jyr),e(OE,Dyr),e(OE,TJ),e(TJ,Gyr),e(OE,Oyr),e(Me,Vyr),e(Me,VE),e(VE,Y6e),e(Y6e,Xyr),e(VE,zyr),e(VE,MJ),e(MJ,Qyr),e(VE,Wyr),e(Me,Hyr),e(Me,XE),e(XE,K6e),e(K6e,Uyr),e(XE,Jyr),e(XE,EJ),e(EJ,Yyr),e(XE,Kyr),e(Me,Zyr),e(Me,zE),e(zE,Z6e),e(Z6e,eLr),e(zE,oLr),e(zE,CJ),e(CJ,rLr),e(zE,tLr),e(Me,aLr),e(Me,QE),e(QE,eTe),e(eTe,nLr),e(QE,sLr),e(QE,wJ),e(wJ,lLr),e(QE,iLr),e(Me,dLr),e(Me,WE),e(WE,oTe),e(oTe,cLr),e(WE,fLr),e(WE,AJ),e(AJ,mLr),e(WE,gLr),e(Me,hLr),e(Me,HE),e(HE,rTe),e(rTe,pLr),e(HE,uLr),e(HE,yJ),e(yJ,_Lr),e(HE,bLr),e(Gr,vLr),M(UE,Gr,null),b(f,Cqe,_),b(f,Pc,_),e(Pc,JE),e(JE,tTe),M(cx,tTe,null),e(Pc,FLr),e(Pc,aTe),e(aTe,TLr),b(f,wqe,_),b(f,hr,_),M(fx,hr,null),e(hr,MLr),e(hr,Ic),e(Ic,ELr),e(Ic,LJ),e(LJ,CLr),e(Ic,wLr),e(Ic,xJ),e(xJ,ALr),e(Ic,yLr),e(hr,LLr),e(hr,mx),e(mx,xLr),e(mx,nTe),e(nTe,$Lr),e(mx,kLr),e(hr,SLr),e(hr,Ot),M(gx,Ot,null),e(Ot,RLr),e(Ot,sTe),e(sTe,BLr),e(Ot,PLr),e(Ot,qc),e(qc,ILr),e(qc,lTe),e(lTe,qLr),e(qc,NLr),e(qc,$J),e($J,jLr),e(qc,DLr),e(Ot,GLr),M(YE,Ot,null),e(hr,OLr),e(hr,Or),M(hx,Or,null),e(Or,VLr),e(Or,iTe),e(iTe,XLr),e(Or,zLr),e(Or,_n),e(_n,QLr),e(_n,dTe),e(dTe,WLr),e(_n,HLr),e(_n,cTe),e(cTe,ULr),e(_n,JLr),e(_n,fTe),e(fTe,YLr),e(_n,KLr),e(Or,ZLr),e(Or,Le),e(Le,KE),e(KE,mTe),e(mTe,exr),e(KE,oxr),e(KE,kJ),e(kJ,rxr),e(KE,txr),e(Le,axr),e(Le,ZE),e(ZE,gTe),e(gTe,nxr),e(ZE,sxr),e(ZE,SJ),e(SJ,lxr),e(ZE,ixr),e(Le,dxr),e(Le,e5),e(e5,hTe),e(hTe,cxr),e(e5,fxr),e(e5,RJ),e(RJ,mxr),e(e5,gxr),e(Le,hxr),e(Le,o5),e(o5,pTe),e(pTe,pxr),e(o5,uxr),e(o5,BJ),e(BJ,_xr),e(o5,bxr),e(Le,vxr),e(Le,r5),e(r5,uTe),e(uTe,Fxr),e(r5,Txr),e(r5,PJ),e(PJ,Mxr),e(r5,Exr),e(Le,Cxr),e(Le,t5),e(t5,_Te),e(_Te,wxr),e(t5,Axr),e(t5,IJ),e(IJ,yxr),e(t5,Lxr),e(Le,xxr),e(Le,a5),e(a5,bTe),e(bTe,$xr),e(a5,kxr),e(a5,qJ),e(qJ,Sxr),e(a5,Rxr),e(Le,Bxr),e(Le,n5),e(n5,vTe),e(vTe,Pxr),e(n5,Ixr),e(n5,NJ),e(NJ,qxr),e(n5,Nxr),e(Le,jxr),e(Le,s5),e(s5,FTe),e(FTe,Dxr),e(s5,Gxr),e(s5,jJ),e(jJ,Oxr),e(s5,Vxr),e(Le,Xxr),e(Le,l5),e(l5,TTe),e(TTe,zxr),e(l5,Qxr),e(l5,DJ),e(DJ,Wxr),e(l5,Hxr),e(Or,Uxr),M(i5,Or,null),b(f,Aqe,_),b(f,Nc,_),e(Nc,d5),e(d5,MTe),M(px,MTe,null),e(Nc,Jxr),e(Nc,ETe),e(ETe,Yxr),b(f,yqe,_),b(f,pr,_),M(ux,pr,null),e(pr,Kxr),e(pr,jc),e(jc,Zxr),e(jc,GJ),e(GJ,e7r),e(jc,o7r),e(jc,OJ),e(OJ,r7r),e(jc,t7r),e(pr,a7r),e(pr,_x),e(_x,n7r),e(_x,CTe),e(CTe,s7r),e(_x,l7r),e(pr,i7r),e(pr,Vt),M(bx,Vt,null),e(Vt,d7r),e(Vt,wTe),e(wTe,c7r),e(Vt,f7r),e(Vt,Dc),e(Dc,m7r),e(Dc,ATe),e(ATe,g7r),e(Dc,h7r),e(Dc,VJ),e(VJ,p7r),e(Dc,u7r),e(Vt,_7r),M(c5,Vt,null),e(pr,b7r),e(pr,Vr),M(vx,Vr,null),e(Vr,v7r),e(Vr,yTe),e(yTe,F7r),e(Vr,T7r),e(Vr,bn),e(bn,M7r),e(bn,LTe),e(LTe,E7r),e(bn,C7r),e(bn,xTe),e(xTe,w7r),e(bn,A7r),e(bn,$Te),e($Te,y7r),e(bn,L7r),e(Vr,x7r),e(Vr,Se),e(Se,f5),e(f5,kTe),e(kTe,$7r),e(f5,k7r),e(f5,XJ),e(XJ,S7r),e(f5,R7r),e(Se,B7r),e(Se,m5),e(m5,STe),e(STe,P7r),e(m5,I7r),e(m5,zJ),e(zJ,q7r),e(m5,N7r),e(Se,j7r),e(Se,g5),e(g5,RTe),e(RTe,D7r),e(g5,G7r),e(g5,QJ),e(QJ,O7r),e(g5,V7r),e(Se,X7r),e(Se,h5),e(h5,BTe),e(BTe,z7r),e(h5,Q7r),e(h5,WJ),e(WJ,W7r),e(h5,H7r),e(Se,U7r),e(Se,p5),e(p5,PTe),e(PTe,J7r),e(p5,Y7r),e(p5,HJ),e(HJ,K7r),e(p5,Z7r),e(Se,e$r),e(Se,u5),e(u5,ITe),e(ITe,o$r),e(u5,r$r),e(u5,UJ),e(UJ,t$r),e(u5,a$r),e(Se,n$r),e(Se,_5),e(_5,qTe),e(qTe,s$r),e(_5,l$r),e(_5,JJ),e(JJ,i$r),e(_5,d$r),e(Se,c$r),e(Se,b5),e(b5,NTe),e(NTe,f$r),e(b5,m$r),e(b5,YJ),e(YJ,g$r),e(b5,h$r),e(Se,p$r),e(Se,v5),e(v5,jTe),e(jTe,u$r),e(v5,_$r),e(v5,KJ),e(KJ,b$r),e(v5,v$r),e(Vr,F$r),M(F5,Vr,null),b(f,Lqe,_),b(f,Gc,_),e(Gc,T5),e(T5,DTe),M(Fx,DTe,null),e(Gc,T$r),e(Gc,GTe),e(GTe,M$r),b(f,xqe,_),b(f,ur,_),M(Tx,ur,null),e(ur,E$r),e(ur,Oc),e(Oc,C$r),e(Oc,ZJ),e(ZJ,w$r),e(Oc,A$r),e(Oc,eY),e(eY,y$r),e(Oc,L$r),e(ur,x$r),e(ur,Mx),e(Mx,$$r),e(Mx,OTe),e(OTe,k$r),e(Mx,S$r),e(ur,R$r),e(ur,Xt),M(Ex,Xt,null),e(Xt,B$r),e(Xt,VTe),e(VTe,P$r),e(Xt,I$r),e(Xt,Vc),e(Vc,q$r),e(Vc,XTe),e(XTe,N$r),e(Vc,j$r),e(Vc,oY),e(oY,D$r),e(Vc,G$r),e(Xt,O$r),M(M5,Xt,null),e(ur,V$r),e(ur,Xr),M(Cx,Xr,null),e(Xr,X$r),e(Xr,zTe),e(zTe,z$r),e(Xr,Q$r),e(Xr,vn),e(vn,W$r),e(vn,QTe),e(QTe,H$r),e(vn,U$r),e(vn,WTe),e(WTe,J$r),e(vn,Y$r),e(vn,HTe),e(HTe,K$r),e(vn,Z$r),e(Xr,ekr),e(Xr,xe),e(xe,E5),e(E5,UTe),e(UTe,okr),e(E5,rkr),e(E5,rY),e(rY,tkr),e(E5,akr),e(xe,nkr),e(xe,C5),e(C5,JTe),e(JTe,skr),e(C5,lkr),e(C5,tY),e(tY,ikr),e(C5,dkr),e(xe,ckr),e(xe,w5),e(w5,YTe),e(YTe,fkr),e(w5,mkr),e(w5,aY),e(aY,gkr),e(w5,hkr),e(xe,pkr),e(xe,A5),e(A5,KTe),e(KTe,ukr),e(A5,_kr),e(A5,nY),e(nY,bkr),e(A5,vkr),e(xe,Fkr),e(xe,y5),e(y5,ZTe),e(ZTe,Tkr),e(y5,Mkr),e(y5,sY),e(sY,Ekr),e(y5,Ckr),e(xe,wkr),e(xe,L5),e(L5,e9e),e(e9e,Akr),e(L5,ykr),e(L5,lY),e(lY,Lkr),e(L5,xkr),e(xe,$kr),e(xe,x5),e(x5,o9e),e(o9e,kkr),e(x5,Skr),e(x5,iY),e(iY,Rkr),e(x5,Bkr),e(xe,Pkr),e(xe,$5),e($5,r9e),e(r9e,Ikr),e($5,qkr),e($5,dY),e(dY,Nkr),e($5,jkr),e(xe,Dkr),e(xe,k5),e(k5,t9e),e(t9e,Gkr),e(k5,Okr),e(k5,cY),e(cY,Vkr),e(k5,Xkr),e(xe,zkr),e(xe,S5),e(S5,a9e),e(a9e,Qkr),e(S5,Wkr),e(S5,fY),e(fY,Hkr),e(S5,Ukr),e(Xr,Jkr),M(R5,Xr,null),b(f,$qe,_),b(f,Xc,_),e(Xc,B5),e(B5,n9e),M(wx,n9e,null),e(Xc,Ykr),e(Xc,s9e),e(s9e,Kkr),b(f,kqe,_),b(f,_r,_),M(Ax,_r,null),e(_r,Zkr),e(_r,zc),e(zc,eSr),e(zc,mY),e(mY,oSr),e(zc,rSr),e(zc,gY),e(gY,tSr),e(zc,aSr),e(_r,nSr),e(_r,yx),e(yx,sSr),e(yx,l9e),e(l9e,lSr),e(yx,iSr),e(_r,dSr),e(_r,zt),M(Lx,zt,null),e(zt,cSr),e(zt,i9e),e(i9e,fSr),e(zt,mSr),e(zt,Qc),e(Qc,gSr),e(Qc,d9e),e(d9e,hSr),e(Qc,pSr),e(Qc,hY),e(hY,uSr),e(Qc,_Sr),e(zt,bSr),M(P5,zt,null),e(_r,vSr),e(_r,zr),M(xx,zr,null),e(zr,FSr),e(zr,c9e),e(c9e,TSr),e(zr,MSr),e(zr,Fn),e(Fn,ESr),e(Fn,f9e),e(f9e,CSr),e(Fn,wSr),e(Fn,m9e),e(m9e,ASr),e(Fn,ySr),e(Fn,g9e),e(g9e,LSr),e(Fn,xSr),e(zr,$Sr),e(zr,$e),e($e,I5),e(I5,h9e),e(h9e,kSr),e(I5,SSr),e(I5,pY),e(pY,RSr),e(I5,BSr),e($e,PSr),e($e,q5),e(q5,p9e),e(p9e,ISr),e(q5,qSr),e(q5,uY),e(uY,NSr),e(q5,jSr),e($e,DSr),e($e,N5),e(N5,u9e),e(u9e,GSr),e(N5,OSr),e(N5,_Y),e(_Y,VSr),e(N5,XSr),e($e,zSr),e($e,j5),e(j5,_9e),e(_9e,QSr),e(j5,WSr),e(j5,bY),e(bY,HSr),e(j5,USr),e($e,JSr),e($e,D5),e(D5,b9e),e(b9e,YSr),e(D5,KSr),e(D5,vY),e(vY,ZSr),e(D5,eRr),e($e,oRr),e($e,G5),e(G5,v9e),e(v9e,rRr),e(G5,tRr),e(G5,FY),e(FY,aRr),e(G5,nRr),e($e,sRr),e($e,O5),e(O5,F9e),e(F9e,lRr),e(O5,iRr),e(O5,TY),e(TY,dRr),e(O5,cRr),e($e,fRr),e($e,V5),e(V5,T9e),e(T9e,mRr),e(V5,gRr),e(V5,MY),e(MY,hRr),e(V5,pRr),e($e,uRr),e($e,X5),e(X5,M9e),e(M9e,_Rr),e(X5,bRr),e(X5,EY),e(EY,vRr),e(X5,FRr),e($e,TRr),e($e,z5),e(z5,E9e),e(E9e,MRr),e(z5,ERr),e(z5,CY),e(CY,CRr),e(z5,wRr),e(zr,ARr),M(Q5,zr,null),b(f,Sqe,_),b(f,Wc,_),e(Wc,W5),e(W5,C9e),M($x,C9e,null),e(Wc,yRr),e(Wc,w9e),e(w9e,LRr),b(f,Rqe,_),b(f,br,_),M(kx,br,null),e(br,xRr),e(br,Hc),e(Hc,$Rr),e(Hc,wY),e(wY,kRr),e(Hc,SRr),e(Hc,AY),e(AY,RRr),e(Hc,BRr),e(br,PRr),e(br,Sx),e(Sx,IRr),e(Sx,A9e),e(A9e,qRr),e(Sx,NRr),e(br,jRr),e(br,Qt),M(Rx,Qt,null),e(Qt,DRr),e(Qt,y9e),e(y9e,GRr),e(Qt,ORr),e(Qt,Uc),e(Uc,VRr),e(Uc,L9e),e(L9e,XRr),e(Uc,zRr),e(Uc,yY),e(yY,QRr),e(Uc,WRr),e(Qt,HRr),M(H5,Qt,null),e(br,URr),e(br,Qr),M(Bx,Qr,null),e(Qr,JRr),e(Qr,x9e),e(x9e,YRr),e(Qr,KRr),e(Qr,Tn),e(Tn,ZRr),e(Tn,$9e),e($9e,eBr),e(Tn,oBr),e(Tn,k9e),e(k9e,rBr),e(Tn,tBr),e(Tn,S9e),e(S9e,aBr),e(Tn,nBr),e(Qr,sBr),e(Qr,De),e(De,U5),e(U5,R9e),e(R9e,lBr),e(U5,iBr),e(U5,LY),e(LY,dBr),e(U5,cBr),e(De,fBr),e(De,J5),e(J5,B9e),e(B9e,mBr),e(J5,gBr),e(J5,xY),e(xY,hBr),e(J5,pBr),e(De,uBr),e(De,Y5),e(Y5,P9e),e(P9e,_Br),e(Y5,bBr),e(Y5,$Y),e($Y,vBr),e(Y5,FBr),e(De,TBr),e(De,K5),e(K5,I9e),e(I9e,MBr),e(K5,EBr),e(K5,kY),e(kY,CBr),e(K5,wBr),e(De,ABr),e(De,Z5),e(Z5,q9e),e(q9e,yBr),e(Z5,LBr),e(Z5,SY),e(SY,xBr),e(Z5,$Br),e(De,kBr),e(De,eC),e(eC,N9e),e(N9e,SBr),e(eC,RBr),e(eC,RY),e(RY,BBr),e(eC,PBr),e(De,IBr),e(De,oC),e(oC,j9e),e(j9e,qBr),e(oC,NBr),e(oC,BY),e(BY,jBr),e(oC,DBr),e(De,GBr),e(De,rC),e(rC,D9e),e(D9e,OBr),e(rC,VBr),e(rC,PY),e(PY,XBr),e(rC,zBr),e(Qr,QBr),M(tC,Qr,null),b(f,Bqe,_),b(f,Jc,_),e(Jc,aC),e(aC,G9e),M(Px,G9e,null),e(Jc,WBr),e(Jc,O9e),e(O9e,HBr),b(f,Pqe,_),b(f,vr,_),M(Ix,vr,null),e(vr,UBr),e(vr,Yc),e(Yc,JBr),e(Yc,IY),e(IY,YBr),e(Yc,KBr),e(Yc,qY),e(qY,ZBr),e(Yc,ePr),e(vr,oPr),e(vr,qx),e(qx,rPr),e(qx,V9e),e(V9e,tPr),e(qx,aPr),e(vr,nPr),e(vr,Wt),M(Nx,Wt,null),e(Wt,sPr),e(Wt,X9e),e(X9e,lPr),e(Wt,iPr),e(Wt,Kc),e(Kc,dPr),e(Kc,z9e),e(z9e,cPr),e(Kc,fPr),e(Kc,NY),e(NY,mPr),e(Kc,gPr),e(Wt,hPr),M(nC,Wt,null),e(vr,pPr),e(vr,Wr),M(jx,Wr,null),e(Wr,uPr),e(Wr,Q9e),e(Q9e,_Pr),e(Wr,bPr),e(Wr,Mn),e(Mn,vPr),e(Mn,W9e),e(W9e,FPr),e(Mn,TPr),e(Mn,H9e),e(H9e,MPr),e(Mn,EPr),e(Mn,U9e),e(U9e,CPr),e(Mn,wPr),e(Wr,APr),e(Wr,Ge),e(Ge,sC),e(sC,J9e),e(J9e,yPr),e(sC,LPr),e(sC,jY),e(jY,xPr),e(sC,$Pr),e(Ge,kPr),e(Ge,lC),e(lC,Y9e),e(Y9e,SPr),e(lC,RPr),e(lC,DY),e(DY,BPr),e(lC,PPr),e(Ge,IPr),e(Ge,iC),e(iC,K9e),e(K9e,qPr),e(iC,NPr),e(iC,GY),e(GY,jPr),e(iC,DPr),e(Ge,GPr),e(Ge,dC),e(dC,Z9e),e(Z9e,OPr),e(dC,VPr),e(dC,OY),e(OY,XPr),e(dC,zPr),e(Ge,QPr),e(Ge,cC),e(cC,eMe),e(eMe,WPr),e(cC,HPr),e(cC,VY),e(VY,UPr),e(cC,JPr),e(Ge,YPr),e(Ge,fC),e(fC,oMe),e(oMe,KPr),e(fC,ZPr),e(fC,XY),e(XY,eIr),e(fC,oIr),e(Ge,rIr),e(Ge,mC),e(mC,rMe),e(rMe,tIr),e(mC,aIr),e(mC,zY),e(zY,nIr),e(mC,sIr),e(Ge,lIr),e(Ge,gC),e(gC,tMe),e(tMe,iIr),e(gC,dIr),e(gC,QY),e(QY,cIr),e(gC,fIr),e(Wr,mIr),M(hC,Wr,null),b(f,Iqe,_),b(f,Zc,_),e(Zc,pC),e(pC,aMe),M(Dx,aMe,null),e(Zc,gIr),e(Zc,nMe),e(nMe,hIr),b(f,qqe,_),b(f,Fr,_),M(Gx,Fr,null),e(Fr,pIr),e(Fr,ef),e(ef,uIr),e(ef,WY),e(WY,_Ir),e(ef,bIr),e(ef,HY),e(HY,vIr),e(ef,FIr),e(Fr,TIr),e(Fr,Ox),e(Ox,MIr),e(Ox,sMe),e(sMe,EIr),e(Ox,CIr),e(Fr,wIr),e(Fr,Ht),M(Vx,Ht,null),e(Ht,AIr),e(Ht,lMe),e(lMe,yIr),e(Ht,LIr),e(Ht,of),e(of,xIr),e(of,iMe),e(iMe,$Ir),e(of,kIr),e(of,UY),e(UY,SIr),e(of,RIr),e(Ht,BIr),M(uC,Ht,null),e(Fr,PIr),e(Fr,Hr),M(Xx,Hr,null),e(Hr,IIr),e(Hr,dMe),e(dMe,qIr),e(Hr,NIr),e(Hr,En),e(En,jIr),e(En,cMe),e(cMe,DIr),e(En,GIr),e(En,fMe),e(fMe,OIr),e(En,VIr),e(En,mMe),e(mMe,XIr),e(En,zIr),e(Hr,QIr),e(Hr,gMe),e(gMe,_C),e(_C,hMe),e(hMe,WIr),e(_C,HIr),e(_C,JY),e(JY,UIr),e(_C,JIr),e(Hr,YIr),M(bC,Hr,null),b(f,Nqe,_),b(f,rf,_),e(rf,vC),e(vC,pMe),M(zx,pMe,null),e(rf,KIr),e(rf,uMe),e(uMe,ZIr),b(f,jqe,_),b(f,Tr,_),M(Qx,Tr,null),e(Tr,eqr),e(Tr,tf),e(tf,oqr),e(tf,YY),e(YY,rqr),e(tf,tqr),e(tf,KY),e(KY,aqr),e(tf,nqr),e(Tr,sqr),e(Tr,Wx),e(Wx,lqr),e(Wx,_Me),e(_Me,iqr),e(Wx,dqr),e(Tr,cqr),e(Tr,Ut),M(Hx,Ut,null),e(Ut,fqr),e(Ut,bMe),e(bMe,mqr),e(Ut,gqr),e(Ut,af),e(af,hqr),e(af,vMe),e(vMe,pqr),e(af,uqr),e(af,ZY),e(ZY,_qr),e(af,bqr),e(Ut,vqr),M(FC,Ut,null),e(Tr,Fqr),e(Tr,Ur),M(Ux,Ur,null),e(Ur,Tqr),e(Ur,FMe),e(FMe,Mqr),e(Ur,Eqr),e(Ur,Cn),e(Cn,Cqr),e(Cn,TMe),e(TMe,wqr),e(Cn,Aqr),e(Cn,MMe),e(MMe,yqr),e(Cn,Lqr),e(Cn,EMe),e(EMe,xqr),e(Cn,$qr),e(Ur,kqr),e(Ur,Jx),e(Jx,TC),e(TC,CMe),e(CMe,Sqr),e(TC,Rqr),e(TC,eK),e(eK,Bqr),e(TC,Pqr),e(Jx,Iqr),e(Jx,MC),e(MC,wMe),e(wMe,qqr),e(MC,Nqr),e(MC,oK),e(oK,jqr),e(MC,Dqr),e(Ur,Gqr),M(EC,Ur,null),b(f,Dqe,_),b(f,nf,_),e(nf,CC),e(CC,AMe),M(Yx,AMe,null),e(nf,Oqr),e(nf,yMe),e(yMe,Vqr),b(f,Gqe,_),b(f,Mr,_),M(Kx,Mr,null),e(Mr,Xqr),e(Mr,sf),e(sf,zqr),e(sf,rK),e(rK,Qqr),e(sf,Wqr),e(sf,tK),e(tK,Hqr),e(sf,Uqr),e(Mr,Jqr),e(Mr,Zx),e(Zx,Yqr),e(Zx,LMe),e(LMe,Kqr),e(Zx,Zqr),e(Mr,eNr),e(Mr,Jt),M(e7,Jt,null),e(Jt,oNr),e(Jt,xMe),e(xMe,rNr),e(Jt,tNr),e(Jt,lf),e(lf,aNr),e(lf,$Me),e($Me,nNr),e(lf,sNr),e(lf,aK),e(aK,lNr),e(lf,iNr),e(Jt,dNr),M(wC,Jt,null),e(Mr,cNr),e(Mr,Jr),M(o7,Jr,null),e(Jr,fNr),e(Jr,kMe),e(kMe,mNr),e(Jr,gNr),e(Jr,wn),e(wn,hNr),e(wn,SMe),e(SMe,pNr),e(wn,uNr),e(wn,RMe),e(RMe,_Nr),e(wn,bNr),e(wn,BMe),e(BMe,vNr),e(wn,FNr),e(Jr,TNr),e(Jr,PMe),e(PMe,AC),e(AC,IMe),e(IMe,MNr),e(AC,ENr),e(AC,nK),e(nK,CNr),e(AC,wNr),e(Jr,ANr),M(yC,Jr,null),Oqe=!0},p(f,[_]){const r7={};_&2&&(r7.$$scope={dirty:_,ctx:f}),_f.$set(r7);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),pg.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),Hg.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),Mh.$set(jMe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:f}),Eh.$set(t7);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),Gh.$set(DMe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Oh.$set(An);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),zh.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Pu.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),qu.$set(VMe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:f}),w_.$set(a7);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),y_.$set(XMe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:f}),f1.$set(n7);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),g1.$set(zMe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:f}),J1.$set(s7);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),K1.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),u8.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),b8.$set(HMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),mb.$set(df);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),hb.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),zb.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),Wb.$set(YMe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:f}),e2.$set(l7);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),r2.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),q2.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),j2.$set(e4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Av.$set(Kr);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:f}),Lv.$set(i7);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),kv.$set(o4e);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:f}),Rv.$set(d7);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),Qv.$set(r4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Hv.$set(Zr);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),Yv.$set(t4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Zv.$set(cf);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),dF.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),fF.$set(n4e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),_F.$set(L);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),vF.$set(LC);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),xF.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),kF.$set(l4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),PF.$set(xC);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),qF.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),VF.$set(d4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),zF.$set($C);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),JF.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),KF.$set(f4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),r6.$set(kC);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),a6.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),l6.$set(g4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),d6.$set(SC);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),p6.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),_6.$set(p4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),F6.$set(RC);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),M6.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),hT.$set(_4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),uT.$set(BC);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),DT.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),OT.$set(v4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),o9.$set(PC);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),t9.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),i9.$set(T4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),c9.$set(IC);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),k9.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),R9.$set(E4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),X9.$set(qC);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),Q9.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),vM.$set(w4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),TM.$set(NC);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),jM.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),GM.$set(y4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),XM.$set(jC);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),QM.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),HM.$set(x4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),JM.$set(DC);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),_4.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),v4.$set(k4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),D4.$set(GC);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),O4.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),X4.$set(R4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),Q4.$set(OC);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),H4.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),J4.$set(P4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),ME.$set(VC);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),CE.$set(I4e);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),BE.$set(q4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),IE.$set(XC);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),UE.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),YE.$set(j4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),i5.$set(zC);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),c5.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),F5.$set(G4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),M5.$set(QC);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),R5.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),P5.$set(V4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),Q5.$set(WC);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),H5.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),tC.$set(z4e);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),nC.$set(HC);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),hC.$set(Q4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),uC.$set(W4e);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),bC.$set(UC);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),FC.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),EC.$set(U4e);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),wC.$set(JC);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),yC.$set(J4e)},i(f){Oqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(_f.$$.fragment,f),E(Zw.$$.fragment,f),E(eA.$$.fragment,f),E(tA.$$.fragment,f),E(pg.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(dA.$$.fragment,f),E(Hg.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(pA.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(TA.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(AA.$$.fragment,f),E(zh.$$.fragment,f),E(yA.$$.fragment,f),E(Pu.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(kA.$$.fragment,f),E(qu.$$.fragment,f),E(SA.$$.fragment,f),E(w_.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(y_.$$.fragment,f),E(qA.$$.fragment,f),E(f1.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(g1.$$.fragment,f),E(OA.$$.fragment,f),E(J1.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(K1.$$.fragment,f),E(WA.$$.fragment,f),E(u8.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(b8.$$.fragment,f),E(KA.$$.fragment,f),E(mb.$$.fragment,f),E(ZA.$$.fragment,f),E(e0.$$.fragment,f),E(r0.$$.fragment,f),E(hb.$$.fragment,f),E(t0.$$.fragment,f),E(zb.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(l0.$$.fragment,f),E(Wb.$$.fragment,f),E(i0.$$.fragment,f),E(e2.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(m0.$$.fragment,f),E(r2.$$.fragment,f),E(g0.$$.fragment,f),E(q2.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(_0.$$.fragment,f),E(j2.$$.fragment,f),E(b0.$$.fragment,f),E(Av.$$.fragment,f),E(v0.$$.fragment,f),E(F0.$$.fragment,f),E(M0.$$.fragment,f),E(Lv.$$.fragment,f),E(E0.$$.fragment,f),E(kv.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(y0.$$.fragment,f),E(Rv.$$.fragment,f),E(L0.$$.fragment,f),E(Qv.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(S0.$$.fragment,f),E(Hv.$$.fragment,f),E(R0.$$.fragment,f),E(Yv.$$.fragment,f),E(B0.$$.fragment,f),E(P0.$$.fragment,f),E(q0.$$.fragment,f),E(Zv.$$.fragment,f),E(N0.$$.fragment,f),E(dF.$$.fragment,f),E(j0.$$.fragment,f),E(D0.$$.fragment,f),E(O0.$$.fragment,f),E(fF.$$.fragment,f),E(V0.$$.fragment,f),E(_F.$$.fragment,f),E(X0.$$.fragment,f),E(z0.$$.fragment,f),E(W0.$$.fragment,f),E(vF.$$.fragment,f),E(H0.$$.fragment,f),E(xF.$$.fragment,f),E(U0.$$.fragment,f),E(J0.$$.fragment,f),E(K0.$$.fragment,f),E(kF.$$.fragment,f),E(Z0.$$.fragment,f),E(PF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(qF.$$.fragment,f),E(ny.$$.fragment,f),E(VF.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(zF.$$.fragment,f),E(cy.$$.fragment,f),E(JF.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(KF.$$.fragment,f),E(py.$$.fragment,f),E(r6.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(a6.$$.fragment,f),E(Ty.$$.fragment,f),E(l6.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(d6.$$.fragment,f),E(Ay.$$.fragment,f),E(p6.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(_6.$$.fragment,f),E(ky.$$.fragment,f),E(F6.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(M6.$$.fragment,f),E(Iy.$$.fragment,f),E(hT.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(uT.$$.fragment,f),E(Gy.$$.fragment,f),E(DT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(OT.$$.fragment,f),E(Qy.$$.fragment,f),E(o9.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(t9.$$.fragment,f),E(Yy.$$.fragment,f),E(i9.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(c9.$$.fragment,f),E(rL.$$.fragment,f),E(k9.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(R9.$$.fragment,f),E(lL.$$.fragment,f),E(X9.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(Q9.$$.fragment,f),E(mL.$$.fragment,f),E(vM.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(TM.$$.fragment,f),E(_L.$$.fragment,f),E(jM.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(GM.$$.fragment,f),E(ML.$$.fragment,f),E(XM.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(QM.$$.fragment,f),E(LL.$$.fragment,f),E(HM.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(JM.$$.fragment,f),E(RL.$$.fragment,f),E(_4.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(v4.$$.fragment,f),E(NL.$$.fragment,f),E(D4.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(O4.$$.fragment,f),E(VL.$$.fragment,f),E(X4.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(Q4.$$.fragment,f),E(HL.$$.fragment,f),E(H4.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(J4.$$.fragment,f),E(ZL.$$.fragment,f),E(ME.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(CE.$$.fragment,f),E(ax.$$.fragment,f),E(BE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(IE.$$.fragment,f),E(dx.$$.fragment,f),E(UE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(YE.$$.fragment,f),E(hx.$$.fragment,f),E(i5.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(c5.$$.fragment,f),E(vx.$$.fragment,f),E(F5.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(M5.$$.fragment,f),E(Cx.$$.fragment,f),E(R5.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(P5.$$.fragment,f),E(xx.$$.fragment,f),E(Q5.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(H5.$$.fragment,f),E(Bx.$$.fragment,f),E(tC.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(nC.$$.fragment,f),E(jx.$$.fragment,f),E(hC.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(uC.$$.fragment,f),E(Xx.$$.fragment,f),E(bC.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(FC.$$.fragment,f),E(Ux.$$.fragment,f),E(EC.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e7.$$.fragment,f),E(wC.$$.fragment,f),E(o7.$$.fragment,f),E(yC.$$.fragment,f),Oqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(_f.$$.fragment,f),C(Zw.$$.fragment,f),C(eA.$$.fragment,f),C(tA.$$.fragment,f),C(pg.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(dA.$$.fragment,f),C(Hg.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(pA.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(TA.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(AA.$$.fragment,f),C(zh.$$.fragment,f),C(yA.$$.fragment,f),C(Pu.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(kA.$$.fragment,f),C(qu.$$.fragment,f),C(SA.$$.fragment,f),C(w_.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(y_.$$.fragment,f),C(qA.$$.fragment,f),C(f1.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(g1.$$.fragment,f),C(OA.$$.fragment,f),C(J1.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(K1.$$.fragment,f),C(WA.$$.fragment,f),C(u8.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(b8.$$.fragment,f),C(KA.$$.fragment,f),C(mb.$$.fragment,f),C(ZA.$$.fragment,f),C(e0.$$.fragment,f),C(r0.$$.fragment,f),C(hb.$$.fragment,f),C(t0.$$.fragment,f),C(zb.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(l0.$$.fragment,f),C(Wb.$$.fragment,f),C(i0.$$.fragment,f),C(e2.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(m0.$$.fragment,f),C(r2.$$.fragment,f),C(g0.$$.fragment,f),C(q2.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(_0.$$.fragment,f),C(j2.$$.fragment,f),C(b0.$$.fragment,f),C(Av.$$.fragment,f),C(v0.$$.fragment,f),C(F0.$$.fragment,f),C(M0.$$.fragment,f),C(Lv.$$.fragment,f),C(E0.$$.fragment,f),C(kv.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(y0.$$.fragment,f),C(Rv.$$.fragment,f),C(L0.$$.fragment,f),C(Qv.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(S0.$$.fragment,f),C(Hv.$$.fragment,f),C(R0.$$.fragment,f),C(Yv.$$.fragment,f),C(B0.$$.fragment,f),C(P0.$$.fragment,f),C(q0.$$.fragment,f),C(Zv.$$.fragment,f),C(N0.$$.fragment,f),C(dF.$$.fragment,f),C(j0.$$.fragment,f),C(D0.$$.fragment,f),C(O0.$$.fragment,f),C(fF.$$.fragment,f),C(V0.$$.fragment,f),C(_F.$$.fragment,f),C(X0.$$.fragment,f),C(z0.$$.fragment,f),C(W0.$$.fragment,f),C(vF.$$.fragment,f),C(H0.$$.fragment,f),C(xF.$$.fragment,f),C(U0.$$.fragment,f),C(J0.$$.fragment,f),C(K0.$$.fragment,f),C(kF.$$.fragment,f),C(Z0.$$.fragment,f),C(PF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(qF.$$.fragment,f),C(ny.$$.fragment,f),C(VF.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(zF.$$.fragment,f),C(cy.$$.fragment,f),C(JF.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(KF.$$.fragment,f),C(py.$$.fragment,f),C(r6.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(a6.$$.fragment,f),C(Ty.$$.fragment,f),C(l6.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(d6.$$.fragment,f),C(Ay.$$.fragment,f),C(p6.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(_6.$$.fragment,f),C(ky.$$.fragment,f),C(F6.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(M6.$$.fragment,f),C(Iy.$$.fragment,f),C(hT.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(uT.$$.fragment,f),C(Gy.$$.fragment,f),C(DT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(OT.$$.fragment,f),C(Qy.$$.fragment,f),C(o9.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(t9.$$.fragment,f),C(Yy.$$.fragment,f),C(i9.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(c9.$$.fragment,f),C(rL.$$.fragment,f),C(k9.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(R9.$$.fragment,f),C(lL.$$.fragment,f),C(X9.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(Q9.$$.fragment,f),C(mL.$$.fragment,f),C(vM.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(TM.$$.fragment,f),C(_L.$$.fragment,f),C(jM.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(GM.$$.fragment,f),C(ML.$$.fragment,f),C(XM.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(QM.$$.fragment,f),C(LL.$$.fragment,f),C(HM.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(JM.$$.fragment,f),C(RL.$$.fragment,f),C(_4.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(v4.$$.fragment,f),C(NL.$$.fragment,f),C(D4.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(O4.$$.fragment,f),C(VL.$$.fragment,f),C(X4.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(Q4.$$.fragment,f),C(HL.$$.fragment,f),C(H4.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(J4.$$.fragment,f),C(ZL.$$.fragment,f),C(ME.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(CE.$$.fragment,f),C(ax.$$.fragment,f),C(BE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(IE.$$.fragment,f),C(dx.$$.fragment,f),C(UE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(YE.$$.fragment,f),C(hx.$$.fragment,f),C(i5.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(c5.$$.fragment,f),C(vx.$$.fragment,f),C(F5.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(M5.$$.fragment,f),C(Cx.$$.fragment,f),C(R5.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(P5.$$.fragment,f),C(xx.$$.fragment,f),C(Q5.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(H5.$$.fragment,f),C(Bx.$$.fragment,f),C(tC.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(nC.$$.fragment,f),C(jx.$$.fragment,f),C(hC.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(uC.$$.fragment,f),C(Xx.$$.fragment,f),C(bC.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(FC.$$.fragment,f),C(Ux.$$.fragment,f),C(EC.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e7.$$.fragment,f),C(wC.$$.fragment,f),C(o7.$$.fragment,f),C(yC.$$.fragment,f),Oqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(jPe),f&&t(pi),w(Yw),f&&t(DPe),f&&t(kn),f&&t(GPe),w(Kw,f),f&&t(OPe),f&&t(v$),f&&t(VPe),w(_f,f),f&&t(XPe),f&&t(ui),w(Zw),f&&t(zPe),f&&t(Co),w(eA),w(tA),w(pg),w(aA),f&&t(QPe),f&&t(bi),w(nA),f&&t(WPe),f&&t(wo),w(sA),w(dA),w(Hg),w(cA),f&&t(HPe),f&&t(vi),w(fA),f&&t(UPe),f&&t(Ao),w(mA),w(pA),w(Mh),w(Eh),w(uA),f&&t(JPe),f&&t(Fi),w(_A),f&&t(YPe),f&&t(yo),w(bA),w(TA),w(Gh),w(Oh),w(MA),f&&t(KPe),f&&t(Mi),w(EA),f&&t(ZPe),f&&t(Lo),w(CA),w(AA),w(zh),w(yA),w(Pu),f&&t(eIe),f&&t(wi),w(LA),f&&t(oIe),f&&t(xo),w(xA),w(kA),w(qu),w(SA),w(w_),f&&t(rIe),f&&t(Li),w(RA),f&&t(tIe),f&&t($o),w(BA),w(IA),w(y_),w(qA),w(f1),f&&t(aIe),f&&t(ki),w(NA),f&&t(nIe),f&&t(ko),w(jA),w(GA),w(g1),w(OA),w(J1),f&&t(sIe),f&&t(Bi),w(VA),f&&t(lIe),f&&t(So),w(XA),w(QA),w(K1),w(WA),w(u8),f&&t(iIe),f&&t(qi),w(HA),f&&t(dIe),f&&t(Ro),w(UA),w(YA),w(b8),w(KA),w(mb),f&&t(cIe),f&&t(Di),w(ZA),f&&t(fIe),f&&t(Bo),w(e0),w(r0),w(hb),w(t0),w(zb),f&&t(mIe),f&&t(Vi),w(a0),f&&t(gIe),f&&t(Po),w(n0),w(l0),w(Wb),w(i0),w(e2),f&&t(hIe),f&&t(Qi),w(d0),f&&t(pIe),f&&t(Io),w(c0),w(m0),w(r2),w(g0),w(q2),f&&t(uIe),f&&t(Ui),w(h0),f&&t(_Ie),f&&t(qo),w(p0),w(_0),w(j2),w(b0),w(Av),f&&t(bIe),f&&t(Ki),w(v0),f&&t(vIe),f&&t(No),w(F0),w(M0),w(Lv),w(E0),w(kv),f&&t(FIe),f&&t(od),w(C0),f&&t(TIe),f&&t(jo),w(w0),w(y0),w(Rv),w(L0),w(Qv),f&&t(MIe),f&&t(ad),w(x0),f&&t(EIe),f&&t(Do),w($0),w(S0),w(Hv),w(R0),w(Yv),f&&t(CIe),f&&t(ld),w(B0),f&&t(wIe),f&&t(Go),w(P0),w(q0),w(Zv),w(N0),w(dF),f&&t(AIe),f&&t(cd),w(j0),f&&t(yIe),f&&t(Oo),w(D0),w(O0),w(fF),w(V0),w(_F),f&&t(LIe),f&&t(gd),w(X0),f&&t(xIe),f&&t(Vo),w(z0),w(W0),w(vF),w(H0),w(xF),f&&t($Ie),f&&t(ud),w(U0),f&&t(kIe),f&&t(Xo),w(J0),w(K0),w(kF),w(Z0),w(PF),f&&t(SIe),f&&t(vd),w(oy),f&&t(RIe),f&&t(zo),w(ry),w(ay),w(qF),w(ny),w(VF),f&&t(BIe),f&&t(Md),w(sy),f&&t(PIe),f&&t(Qo),w(ly),w(dy),w(zF),w(cy),w(JF),f&&t(IIe),f&&t(Ad),w(fy),f&&t(qIe),f&&t(Wo),w(my),w(hy),w(KF),w(py),w(r6),f&&t(NIe),f&&t(xd),w(_y),f&&t(jIe),f&&t(Ho),w(by),w(Fy),w(a6),w(Ty),w(l6),f&&t(DIe),f&&t(Sd),w(My),f&&t(GIe),f&&t(Uo),w(Ey),w(wy),w(d6),w(Ay),w(p6),f&&t(OIe),f&&t(Pd),w(yy),f&&t(VIe),f&&t(Jo),w(Ly),w($y),w(_6),w(ky),w(F6),f&&t(XIe),f&&t(Nd),w(Sy),f&&t(zIe),f&&t(Yo),w(Ry),w(Py),w(M6),w(Iy),w(hT),f&&t(QIe),f&&t(Gd),w(qy),f&&t(WIe),f&&t(Ko),w(Ny),w(Dy),w(uT),w(Gy),w(DT),f&&t(HIe),f&&t(Xd),w(Oy),f&&t(UIe),f&&t(Zo),w(Vy),w(zy),w(OT),w(Qy),w(o9),f&&t(JIe),f&&t(Wd),w(Wy),f&&t(YIe),f&&t(er),w(Hy),w(Jy),w(t9),w(Yy),w(i9),f&&t(KIe),f&&t(Jd),w(Ky),f&&t(ZIe),f&&t(or),w(Zy),w(oL),w(c9),w(rL),w(k9),f&&t(eqe),f&&t(Zd),w(tL),f&&t(oqe),f&&t(rr),w(aL),w(sL),w(R9),w(lL),w(X9),f&&t(rqe),f&&t(rc),w(iL),f&&t(tqe),f&&t(tr),w(dL),w(fL),w(Q9),w(mL),w(vM),f&&t(aqe),f&&t(nc),w(gL),f&&t(nqe),f&&t(ar),w(hL),w(uL),w(TM),w(_L),w(jM),f&&t(sqe),f&&t(ic),w(bL),f&&t(lqe),f&&t(nr),w(vL),w(TL),w(GM),w(ML),w(XM),f&&t(iqe),f&&t(fc),w(CL),f&&t(dqe),f&&t(sr),w(wL),w(yL),w(QM),w(LL),w(HM),f&&t(cqe),f&&t(hc),w(xL),f&&t(fqe),f&&t(lr),w($L),w(SL),w(JM),w(RL),w(_4),f&&t(mqe),f&&t(_c),w(BL),f&&t(gqe),f&&t(ir),w(PL),w(qL),w(v4),w(NL),w(D4),f&&t(hqe),f&&t(Fc),w(jL),f&&t(pqe),f&&t(dr),w(DL),w(OL),w(O4),w(VL),w(X4),f&&t(uqe),f&&t(Ec),w(XL),f&&t(_qe),f&&t(cr),w(zL),w(WL),w(Q4),w(HL),w(H4),f&&t(bqe),f&&t(Ac),w(UL),f&&t(vqe),f&&t(fr),w(JL),w(KL),w(J4),w(ZL),w(ME),f&&t(Fqe),f&&t(xc),w(ex),f&&t(Tqe),f&&t(mr),w(ox),w(tx),w(CE),w(ax),w(BE),f&&t(Mqe),f&&t(Sc),w(nx),f&&t(Eqe),f&&t(gr),w(sx),w(ix),w(IE),w(dx),w(UE),f&&t(Cqe),f&&t(Pc),w(cx),f&&t(wqe),f&&t(hr),w(fx),w(gx),w(YE),w(hx),w(i5),f&&t(Aqe),f&&t(Nc),w(px),f&&t(yqe),f&&t(pr),w(ux),w(bx),w(c5),w(vx),w(F5),f&&t(Lqe),f&&t(Gc),w(Fx),f&&t(xqe),f&&t(ur),w(Tx),w(Ex),w(M5),w(Cx),w(R5),f&&t($qe),f&&t(Xc),w(wx),f&&t(kqe),f&&t(_r),w(Ax),w(Lx),w(P5),w(xx),w(Q5),f&&t(Sqe),f&&t(Wc),w($x),f&&t(Rqe),f&&t(br),w(kx),w(Rx),w(H5),w(Bx),w(tC),f&&t(Bqe),f&&t(Jc),w(Px),f&&t(Pqe),f&&t(vr),w(Ix),w(Nx),w(nC),w(jx),w(hC),f&&t(Iqe),f&&t(Zc),w(Dx),f&&t(qqe),f&&t(Fr),w(Gx),w(Vx),w(uC),w(Xx),w(bC),f&&t(Nqe),f&&t(rf),w(zx),f&&t(jqe),f&&t(Tr),w(Qx),w(Hx),w(FC),w(Ux),w(EC),f&&t(Dqe),f&&t(nf),w(Yx),f&&t(Gqe),f&&t(Mr),w(Kx),w(e7),w(wC),w(o7),w(yC)}}}const Z0t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eyt(A){return eAt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lyt extends Jwt{constructor(g){super();Ywt(this,g,eyt,K0t,Kwt,{})}}export{lyt as default,Z0t as metadata};
