import{S as kyt,i as Syt,s as Ryt,e as a,k as l,w as F,t as o,M as Pyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Byt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as IDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function Iyt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,s0,pf,je,We,gi,yn,l0,Ln,xn,i0,hi,$n,d0,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),s0=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),l0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),i0=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),d0=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var y$=s(p);m=r(y$,"NewModelConfig"),y$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var L$=s(ci);hf=r(L$,"model_type"),L$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var x$=s(fi);mi=r(x$,'"new-model"'),x$.forEach(t),s0=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),l0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var $$=s(Ln);xn=r($$,"PreTrainedModel"),$$.forEach(t),i0=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),d0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var k$=s(pi);_f=r(k$,"NewModelConfig"),k$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,s0),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,l0),e(je,Ln),e(Ln,xn),e(je,i0),e(je,hi),e(hi,$n),e(je,d0),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function qyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Dyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Oyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,s0,pf,je,We,gi,yn,l0,Ln,xn,i0,hi,$n,d0,pi,_f,Ca,Qe,Ae,y$,_i,L$,x$,Eo,wa,$$,uf,k$,HDe,qIe,ui,bf,Cee,c0,UDe,wee,JDe,NIe,kn,YDe,Aee,KDe,ZDe,yee,eGe,oGe,jIe,f0,DIe,S$,rGe,GIe,vf,OIe,bi,Ff,Lee,m0,tGe,xee,aGe,VIe,Co,g0,nGe,h0,sGe,R$,lGe,iGe,dGe,p0,cGe,$ee,fGe,mGe,gGe,Er,_0,hGe,kee,pGe,_Ge,vi,uGe,See,bGe,vGe,Ree,FGe,TGe,MGe,A,Tf,Pee,EGe,CGe,P$,wGe,AGe,yGe,Mf,Bee,LGe,xGe,B$,$Ge,kGe,SGe,Ef,Iee,RGe,PGe,I$,BGe,IGe,qGe,Cf,qee,NGe,jGe,q$,DGe,GGe,OGe,wf,Nee,VGe,XGe,N$,zGe,WGe,QGe,Af,jee,HGe,UGe,j$,JGe,YGe,KGe,yf,Dee,ZGe,eOe,D$,oOe,rOe,tOe,Lf,Gee,aOe,nOe,G$,sOe,lOe,iOe,xf,Oee,dOe,cOe,O$,fOe,mOe,gOe,$f,Vee,hOe,pOe,V$,_Oe,uOe,bOe,kf,Xee,vOe,FOe,X$,TOe,MOe,EOe,Sf,zee,COe,wOe,z$,AOe,yOe,LOe,Rf,Wee,xOe,$Oe,W$,kOe,SOe,ROe,Pf,Qee,POe,BOe,Q$,IOe,qOe,NOe,Bf,Hee,jOe,DOe,H$,GOe,OOe,VOe,If,Uee,XOe,zOe,U$,WOe,QOe,HOe,qf,Jee,UOe,JOe,J$,YOe,KOe,ZOe,Nf,Yee,eVe,oVe,Y$,rVe,tVe,aVe,jf,Kee,nVe,sVe,K$,lVe,iVe,dVe,Df,Zee,cVe,fVe,Z$,mVe,gVe,hVe,Gf,eoe,pVe,_Ve,ek,uVe,bVe,vVe,Of,ooe,FVe,TVe,ok,MVe,EVe,CVe,Vf,roe,wVe,AVe,rk,yVe,LVe,xVe,Xf,toe,$Ve,kVe,tk,SVe,RVe,PVe,zf,aoe,BVe,IVe,ak,qVe,NVe,jVe,Wf,noe,DVe,GVe,nk,OVe,VVe,XVe,Qf,soe,zVe,WVe,sk,QVe,HVe,UVe,Hf,loe,JVe,YVe,lk,KVe,ZVe,eXe,Uf,ioe,oXe,rXe,ik,tXe,aXe,nXe,Jf,doe,sXe,lXe,dk,iXe,dXe,cXe,Yf,coe,fXe,mXe,ck,gXe,hXe,pXe,Kf,foe,_Xe,uXe,fk,bXe,vXe,FXe,Zf,moe,TXe,MXe,mk,EXe,CXe,wXe,em,goe,AXe,yXe,gk,LXe,xXe,$Xe,om,hoe,kXe,SXe,hk,RXe,PXe,BXe,rm,poe,IXe,qXe,pk,NXe,jXe,DXe,tm,_oe,GXe,OXe,_k,VXe,XXe,zXe,am,uoe,WXe,QXe,uk,HXe,UXe,JXe,nm,boe,YXe,KXe,bk,ZXe,eze,oze,sm,voe,rze,tze,vk,aze,nze,sze,lm,Foe,lze,ize,Fk,dze,cze,fze,im,Toe,mze,gze,Tk,hze,pze,_ze,dm,Moe,uze,bze,Mk,vze,Fze,Tze,cm,Eoe,Mze,Eze,Ek,Cze,wze,Aze,fm,Coe,yze,Lze,Ck,xze,$ze,kze,mm,woe,Sze,Rze,wk,Pze,Bze,Ize,gm,Aoe,qze,Nze,Ak,jze,Dze,Gze,hm,yoe,Oze,Vze,yk,Xze,zze,Wze,pm,Loe,Qze,Hze,Lk,Uze,Jze,Yze,_m,xoe,Kze,Zze,xk,eWe,oWe,rWe,um,$oe,tWe,aWe,$k,nWe,sWe,lWe,bm,koe,iWe,dWe,kk,cWe,fWe,mWe,vm,Soe,gWe,hWe,Sk,pWe,_We,uWe,Fm,Roe,bWe,vWe,Rk,FWe,TWe,MWe,Tm,Poe,EWe,CWe,Pk,wWe,AWe,yWe,Mm,Boe,LWe,xWe,Bk,$We,kWe,SWe,Em,Ioe,RWe,PWe,Ik,BWe,IWe,qWe,Cm,qoe,NWe,jWe,qk,DWe,GWe,OWe,wm,Noe,VWe,XWe,Nk,zWe,WWe,QWe,Am,joe,HWe,UWe,jk,JWe,YWe,KWe,ym,Doe,ZWe,eQe,Dk,oQe,rQe,tQe,Lm,Goe,aQe,nQe,Gk,sQe,lQe,iQe,xm,Ooe,dQe,cQe,Ok,fQe,mQe,gQe,$m,Voe,hQe,pQe,Vk,_Qe,uQe,bQe,km,Xoe,vQe,FQe,Xk,TQe,MQe,EQe,Sm,zoe,CQe,wQe,zk,AQe,yQe,LQe,Rm,Woe,xQe,$Qe,Wk,kQe,SQe,RQe,Pm,Qoe,PQe,BQe,Qk,IQe,qQe,NQe,Bm,Hoe,jQe,DQe,Hk,GQe,OQe,VQe,Im,Uoe,XQe,zQe,Uk,WQe,QQe,HQe,qm,Joe,UQe,JQe,Jk,YQe,KQe,ZQe,Nm,Yoe,eHe,oHe,Yk,rHe,tHe,aHe,jm,Koe,nHe,sHe,Kk,lHe,iHe,dHe,Dm,Zoe,cHe,fHe,Zk,mHe,gHe,hHe,Gm,ere,pHe,_He,eS,uHe,bHe,vHe,Om,ore,FHe,THe,oS,MHe,EHe,CHe,Vm,rre,wHe,AHe,rS,yHe,LHe,xHe,Xm,tre,$He,kHe,tS,SHe,RHe,PHe,zm,are,BHe,IHe,aS,qHe,NHe,jHe,Wm,nre,DHe,GHe,nS,OHe,VHe,XHe,Qm,sre,zHe,WHe,sS,QHe,HHe,UHe,Hm,lre,JHe,YHe,lS,KHe,ZHe,eUe,Um,ire,oUe,rUe,iS,tUe,aUe,nUe,Jm,dre,sUe,lUe,dS,iUe,dUe,cUe,Ym,cre,fUe,mUe,cS,gUe,hUe,pUe,Km,fre,_Ue,uUe,fS,bUe,vUe,FUe,Zm,mre,TUe,MUe,mS,EUe,CUe,wUe,eg,gre,AUe,yUe,gS,LUe,xUe,$Ue,og,hre,kUe,SUe,hS,RUe,PUe,BUe,rg,pre,IUe,qUe,pS,NUe,jUe,DUe,tg,_re,GUe,OUe,_S,VUe,XUe,zUe,ag,ure,WUe,QUe,uS,HUe,UUe,JUe,ng,bre,YUe,KUe,bS,ZUe,eJe,oJe,sg,vre,rJe,tJe,vS,aJe,nJe,sJe,lg,Fre,lJe,iJe,FS,dJe,cJe,fJe,ig,Tre,mJe,gJe,TS,hJe,pJe,_Je,dg,Mre,uJe,bJe,MS,vJe,FJe,TJe,cg,Ere,MJe,EJe,ES,CJe,wJe,AJe,fg,Cre,yJe,LJe,CS,xJe,$Je,kJe,mg,wre,SJe,RJe,wS,PJe,BJe,IJe,gg,Are,qJe,NJe,AS,jJe,DJe,GJe,hg,yre,OJe,VJe,yS,XJe,zJe,WJe,pg,Lre,QJe,HJe,LS,UJe,JJe,YJe,_g,xre,KJe,ZJe,xS,eYe,oYe,rYe,ug,$re,tYe,aYe,$S,nYe,sYe,lYe,bg,kre,iYe,dYe,kS,cYe,fYe,mYe,vg,gYe,Fg,u0,hYe,Sre,pYe,XIe,Fi,Tg,Rre,b0,_Ye,Pre,uYe,zIe,wo,v0,bYe,F0,vYe,SS,FYe,TYe,MYe,T0,EYe,Bre,CYe,wYe,AYe,Cr,M0,yYe,Ire,LYe,xYe,Aa,$Ye,qre,kYe,SYe,Nre,RYe,PYe,jre,BYe,IYe,qYe,k,Sn,Dre,NYe,jYe,RS,DYe,GYe,PS,OYe,VYe,XYe,Rn,Gre,zYe,WYe,BS,QYe,HYe,IS,UYe,JYe,YYe,Pn,Ore,KYe,ZYe,qS,eKe,oKe,NS,rKe,tKe,aKe,Mg,Vre,nKe,sKe,jS,lKe,iKe,dKe,Bn,Xre,cKe,fKe,DS,mKe,gKe,GS,hKe,pKe,_Ke,Eg,zre,uKe,bKe,OS,vKe,FKe,TKe,Cg,Wre,MKe,EKe,VS,CKe,wKe,AKe,wg,Qre,yKe,LKe,XS,xKe,$Ke,kKe,In,Hre,SKe,RKe,zS,PKe,BKe,WS,IKe,qKe,NKe,qn,Ure,jKe,DKe,QS,GKe,OKe,HS,VKe,XKe,zKe,Nn,Jre,WKe,QKe,US,HKe,UKe,JS,JKe,YKe,KKe,Ag,Yre,ZKe,eZe,YS,oZe,rZe,tZe,yg,Kre,aZe,nZe,KS,sZe,lZe,iZe,jn,Zre,dZe,cZe,ZS,fZe,mZe,eR,gZe,hZe,pZe,Lg,ete,_Ze,uZe,oR,bZe,vZe,FZe,Dn,ote,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,Gn,rte,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,PZe,On,tte,BZe,IZe,sR,qZe,NZe,lR,jZe,DZe,GZe,xg,ate,OZe,VZe,iR,XZe,zZe,WZe,Vn,nte,QZe,HZe,dR,UZe,JZe,cR,YZe,KZe,ZZe,Xn,ste,eeo,oeo,fR,reo,teo,mR,aeo,neo,seo,zn,lte,leo,ieo,gR,deo,ceo,hR,feo,meo,geo,Wn,ite,heo,peo,pR,_eo,ueo,_R,beo,veo,Feo,Qn,dte,Teo,Meo,uR,Eeo,Ceo,bR,weo,Aeo,yeo,Hn,cte,Leo,xeo,vR,$eo,keo,FR,Seo,Reo,Peo,$g,fte,Beo,Ieo,TR,qeo,Neo,jeo,Un,mte,Deo,Geo,MR,Oeo,Veo,ER,Xeo,zeo,Weo,kg,gte,Qeo,Heo,CR,Ueo,Jeo,Yeo,Jn,hte,Keo,Zeo,wR,eoo,ooo,AR,roo,too,aoo,Yn,pte,noo,soo,yR,loo,ioo,LR,doo,coo,foo,Kn,_te,moo,goo,xR,hoo,poo,$R,_oo,uoo,boo,Zn,ute,voo,Foo,kR,Too,Moo,SR,Eoo,Coo,woo,es,bte,Aoo,yoo,RR,Loo,xoo,PR,$oo,koo,Soo,Sg,vte,Roo,Poo,BR,Boo,Ioo,qoo,os,Fte,Noo,joo,IR,Doo,Goo,qR,Ooo,Voo,Xoo,rs,Tte,zoo,Woo,NR,Qoo,Hoo,jR,Uoo,Joo,Yoo,ts,Mte,Koo,Zoo,DR,ero,oro,GR,rro,tro,aro,as,Ete,nro,sro,OR,lro,iro,VR,dro,cro,fro,ns,Cte,mro,gro,XR,hro,pro,zR,_ro,uro,bro,ss,wte,vro,Fro,WR,Tro,Mro,QR,Ero,Cro,wro,Rg,Ate,Aro,yro,HR,Lro,xro,$ro,ls,yte,kro,Sro,UR,Rro,Pro,JR,Bro,Iro,qro,Pg,Lte,Nro,jro,YR,Dro,Gro,Oro,Bg,xte,Vro,Xro,KR,zro,Wro,Qro,is,$te,Hro,Uro,ZR,Jro,Yro,eP,Kro,Zro,eto,ds,kte,oto,rto,oP,tto,ato,rP,nto,sto,lto,cs,Ste,ito,dto,tP,cto,fto,aP,mto,gto,hto,Ig,Rte,pto,_to,nP,uto,bto,vto,fs,Pte,Fto,Tto,sP,Mto,Eto,lP,Cto,wto,Ato,ms,Bte,yto,Lto,iP,xto,$to,dP,kto,Sto,Rto,gs,Ite,Pto,Bto,cP,Ito,qto,fP,Nto,jto,Dto,hs,qte,Gto,Oto,mP,Vto,Xto,gP,zto,Wto,Qto,ps,Nte,Hto,Uto,hP,Jto,Yto,pP,Kto,Zto,eao,qg,jte,oao,rao,_P,tao,aao,nao,_s,Dte,sao,lao,uP,iao,dao,bP,cao,fao,mao,Ng,Gte,gao,hao,vP,pao,_ao,uao,jg,Ote,bao,vao,FP,Fao,Tao,Mao,Dg,Vte,Eao,Cao,TP,wao,Aao,yao,Gg,Xte,Lao,xao,MP,$ao,kao,Sao,us,zte,Rao,Pao,EP,Bao,Iao,CP,qao,Nao,jao,Og,Wte,Dao,Gao,wP,Oao,Vao,Xao,bs,Qte,zao,Wao,AP,Qao,Hao,yP,Uao,Jao,Yao,vs,Hte,Kao,Zao,LP,eno,ono,xP,rno,tno,ano,Fs,Ute,nno,sno,$P,lno,ino,kP,dno,cno,fno,Ts,Jte,mno,gno,SP,hno,pno,RP,_no,uno,bno,Ms,Yte,vno,Fno,PP,Tno,Mno,BP,Eno,Cno,wno,Es,Kte,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,Vg,Zte,Rno,Pno,NP,Bno,Ino,qno,Xg,eae,Nno,jno,jP,Dno,Gno,Ono,Cs,oae,Vno,Xno,DP,zno,Wno,GP,Qno,Hno,Uno,ws,rae,Jno,Yno,OP,Kno,Zno,VP,eso,oso,rso,As,tae,tso,aso,XP,nso,sso,zP,lso,iso,dso,zg,aae,cso,fso,WP,mso,gso,hso,Wg,nae,pso,_so,QP,uso,bso,vso,Qg,sae,Fso,Tso,HP,Mso,Eso,Cso,ys,lae,wso,Aso,UP,yso,Lso,JP,xso,$so,kso,Hg,iae,Sso,Rso,YP,Pso,Bso,Iso,Ug,dae,qso,Nso,KP,jso,Dso,Gso,Jg,cae,Oso,Vso,ZP,Xso,zso,Wso,Ls,fae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,Yg,mae,elo,olo,rB,rlo,tlo,alo,Kg,gae,nlo,slo,tB,llo,ilo,dlo,xs,hae,clo,flo,aB,mlo,glo,nB,hlo,plo,_lo,$s,pae,ulo,blo,sB,vlo,Flo,lB,Tlo,Mlo,Elo,ks,_ae,Clo,wlo,iB,Alo,ylo,dB,Llo,xlo,$lo,Ss,uae,klo,Slo,cB,Rlo,Plo,fB,Blo,Ilo,qlo,Zg,Nlo,eh,E0,jlo,bae,Dlo,WIe,Ti,oh,vae,C0,Glo,Fae,Olo,QIe,Ao,w0,Vlo,A0,Xlo,mB,zlo,Wlo,Qlo,y0,Hlo,Tae,Ulo,Jlo,Ylo,He,L0,Klo,Mae,Zlo,eio,ya,oio,Eae,rio,tio,Cae,aio,nio,wae,sio,lio,iio,Z,rh,Aae,dio,cio,gB,fio,mio,gio,th,yae,hio,pio,hB,_io,uio,bio,ah,Lae,vio,Fio,pB,Tio,Mio,Eio,nh,xae,Cio,wio,_B,Aio,yio,Lio,sh,$ae,xio,$io,uB,kio,Sio,Rio,lh,kae,Pio,Bio,bB,Iio,qio,Nio,ih,Sae,jio,Dio,vB,Gio,Oio,Vio,dh,Rae,Xio,zio,FB,Wio,Qio,Hio,ch,Pae,Uio,Jio,TB,Yio,Kio,Zio,fh,Bae,edo,odo,MB,rdo,tdo,ado,mh,Iae,ndo,sdo,EB,ldo,ido,ddo,gh,qae,cdo,fdo,CB,mdo,gdo,hdo,hh,Nae,pdo,_do,wB,udo,bdo,vdo,ph,jae,Fdo,Tdo,AB,Mdo,Edo,Cdo,_h,Dae,wdo,Ado,yB,ydo,Ldo,xdo,uh,Gae,$do,kdo,LB,Sdo,Rdo,Pdo,bh,Oae,Bdo,Ido,xB,qdo,Ndo,jdo,vh,Vae,Ddo,Gdo,$B,Odo,Vdo,Xdo,Fh,Xae,zdo,Wdo,kB,Qdo,Hdo,Udo,Th,zae,Jdo,Ydo,SB,Kdo,Zdo,eco,Mh,Wae,oco,rco,RB,tco,aco,nco,Eh,Qae,sco,lco,PB,ico,dco,cco,Ch,Hae,fco,mco,BB,gco,hco,pco,wh,Uae,_co,uco,IB,bco,vco,Fco,Ah,Jae,Tco,Mco,qB,Eco,Cco,wco,yh,Yae,Aco,yco,NB,Lco,xco,$co,Lh,kco,xh,Sco,$h,x0,Rco,Kae,Pco,HIe,Mi,kh,Zae,$0,Bco,ene,Ico,UIe,yo,k0,qco,S0,Nco,jB,jco,Dco,Gco,R0,Oco,one,Vco,Xco,zco,Ue,P0,Wco,rne,Qco,Hco,Ei,Uco,tne,Jco,Yco,ane,Kco,Zco,efo,pe,Sh,nne,ofo,rfo,DB,tfo,afo,nfo,Rh,sne,sfo,lfo,lne,ifo,dfo,cfo,Ph,ine,ffo,mfo,GB,gfo,hfo,pfo,Bh,dne,_fo,ufo,OB,bfo,vfo,Ffo,Ih,cne,Tfo,Mfo,VB,Efo,Cfo,wfo,qh,fne,Afo,yfo,XB,Lfo,xfo,$fo,Nh,mne,kfo,Sfo,zB,Rfo,Pfo,Bfo,jh,gne,Ifo,qfo,WB,Nfo,jfo,Dfo,Dh,hne,Gfo,Ofo,QB,Vfo,Xfo,zfo,Gh,pne,Wfo,Qfo,HB,Hfo,Ufo,Jfo,Oh,_ne,Yfo,Kfo,UB,Zfo,emo,omo,Vh,une,rmo,tmo,JB,amo,nmo,smo,Xh,bne,lmo,imo,YB,dmo,cmo,fmo,zh,vne,mmo,gmo,KB,hmo,pmo,_mo,Wh,Fne,umo,bmo,ZB,vmo,Fmo,Tmo,Qh,Tne,Mmo,Emo,eI,Cmo,wmo,Amo,Hh,ymo,Uh,Lmo,Jh,B0,xmo,Mne,$mo,JIe,Ci,Yh,Ene,I0,kmo,Cne,Smo,YIe,Lo,q0,Rmo,wi,Pmo,oI,Bmo,Imo,rI,qmo,Nmo,jmo,N0,Dmo,wne,Gmo,Omo,Vmo,tt,j0,Xmo,Ane,zmo,Wmo,Ai,Qmo,yne,Hmo,Umo,tI,Jmo,Ymo,Kmo,Kh,Zmo,Je,D0,ego,Lne,ogo,rgo,La,tgo,xne,ago,ngo,$ne,sgo,lgo,kne,igo,dgo,cgo,x,Zh,Sne,fgo,mgo,aI,ggo,hgo,pgo,ep,Rne,_go,ugo,nI,bgo,vgo,Fgo,op,Pne,Tgo,Mgo,sI,Ego,Cgo,wgo,rp,Bne,Ago,ygo,lI,Lgo,xgo,$go,tp,Ine,kgo,Sgo,iI,Rgo,Pgo,Bgo,ap,qne,Igo,qgo,dI,Ngo,jgo,Dgo,np,Nne,Ggo,Ogo,cI,Vgo,Xgo,zgo,sp,jne,Wgo,Qgo,fI,Hgo,Ugo,Jgo,lp,Dne,Ygo,Kgo,mI,Zgo,eho,oho,ip,Gne,rho,tho,gI,aho,nho,sho,dp,One,lho,iho,hI,dho,cho,fho,cp,Vne,mho,gho,pI,hho,pho,_ho,fp,Xne,uho,bho,_I,vho,Fho,Tho,mp,zne,Mho,Eho,uI,Cho,who,Aho,gp,Wne,yho,Lho,bI,xho,$ho,kho,hp,Qne,Sho,Rho,vI,Pho,Bho,Iho,pp,Hne,qho,Nho,FI,jho,Dho,Gho,_p,Une,Oho,Vho,TI,Xho,zho,Who,up,Jne,Qho,Hho,MI,Uho,Jho,Yho,bp,Yne,Kho,Zho,EI,epo,opo,rpo,vp,Kne,tpo,apo,CI,npo,spo,lpo,Fp,Zne,ipo,dpo,wI,cpo,fpo,mpo,Tp,ese,gpo,hpo,AI,ppo,_po,upo,Mp,ose,bpo,vpo,yI,Fpo,Tpo,Mpo,Ep,rse,Epo,Cpo,LI,wpo,Apo,ypo,Cp,tse,Lpo,xpo,xI,$po,kpo,Spo,wp,ase,Rpo,Ppo,$I,Bpo,Ipo,qpo,Ap,nse,Npo,jpo,kI,Dpo,Gpo,Opo,yp,sse,Vpo,Xpo,SI,zpo,Wpo,Qpo,Lp,lse,Hpo,Upo,RI,Jpo,Ypo,Kpo,xp,ise,Zpo,e_o,PI,o_o,r_o,t_o,Rs,dse,a_o,n_o,BI,s_o,l_o,II,i_o,d_o,c_o,$p,cse,f_o,m_o,qI,g_o,h_o,p_o,kp,fse,__o,u_o,NI,b_o,v_o,F_o,Sp,mse,T_o,M_o,jI,E_o,C_o,w_o,Rp,gse,A_o,y_o,DI,L_o,x_o,$_o,Pp,hse,k_o,S_o,GI,R_o,P_o,B_o,Bp,pse,I_o,q_o,OI,N_o,j_o,D_o,Ip,_se,G_o,O_o,VI,V_o,X_o,z_o,qp,use,W_o,Q_o,XI,H_o,U_o,J_o,Np,bse,Y_o,K_o,zI,Z_o,euo,ouo,jp,vse,ruo,tuo,WI,auo,nuo,suo,Dp,Fse,luo,iuo,QI,duo,cuo,fuo,Gp,Tse,muo,guo,HI,huo,puo,_uo,Op,Mse,uuo,buo,UI,vuo,Fuo,Tuo,Vp,Ese,Muo,Euo,JI,Cuo,wuo,Auo,Xp,Cse,yuo,Luo,YI,xuo,$uo,kuo,zp,wse,Suo,Ruo,KI,Puo,Buo,Iuo,Wp,Ase,quo,Nuo,ZI,juo,Duo,Guo,Qp,yse,Ouo,Vuo,eq,Xuo,zuo,Wuo,Hp,Lse,Quo,Huo,oq,Uuo,Juo,Yuo,Up,xse,Kuo,Zuo,rq,e1o,o1o,r1o,Jp,$se,t1o,a1o,tq,n1o,s1o,l1o,Yp,kse,i1o,d1o,aq,c1o,f1o,m1o,Kp,Sse,g1o,h1o,nq,p1o,_1o,u1o,Zp,Rse,b1o,v1o,sq,F1o,T1o,M1o,e_,Pse,E1o,C1o,lq,w1o,A1o,y1o,o_,Bse,L1o,x1o,iq,$1o,k1o,S1o,r_,Ise,R1o,P1o,dq,B1o,I1o,q1o,t_,qse,N1o,j1o,cq,D1o,G1o,O1o,a_,Nse,V1o,X1o,fq,z1o,W1o,Q1o,n_,jse,H1o,U1o,mq,J1o,Y1o,K1o,s_,Dse,Z1o,ebo,gq,obo,rbo,tbo,l_,Gse,abo,nbo,hq,sbo,lbo,ibo,i_,Ose,dbo,cbo,pq,fbo,mbo,gbo,d_,Vse,hbo,pbo,_q,_bo,ubo,bbo,c_,Xse,vbo,Fbo,uq,Tbo,Mbo,Ebo,f_,zse,Cbo,wbo,bq,Abo,ybo,Lbo,m_,Wse,xbo,$bo,vq,kbo,Sbo,Rbo,g_,Qse,Pbo,Bbo,Fq,Ibo,qbo,Nbo,h_,Hse,jbo,Dbo,Tq,Gbo,Obo,Vbo,p_,Use,Xbo,zbo,Mq,Wbo,Qbo,Hbo,__,Jse,Ubo,Jbo,Eq,Ybo,Kbo,Zbo,u_,Yse,e2o,o2o,Cq,r2o,t2o,a2o,b_,Kse,n2o,s2o,wq,l2o,i2o,d2o,v_,Zse,c2o,f2o,Aq,m2o,g2o,h2o,F_,ele,p2o,_2o,yq,u2o,b2o,v2o,T_,ole,F2o,T2o,Lq,M2o,E2o,C2o,M_,rle,w2o,A2o,xq,y2o,L2o,x2o,E_,tle,$2o,k2o,$q,S2o,R2o,P2o,C_,ale,B2o,I2o,kq,q2o,N2o,j2o,w_,nle,D2o,G2o,Sq,O2o,V2o,X2o,A_,sle,z2o,W2o,Rq,Q2o,H2o,U2o,y_,lle,J2o,Y2o,Pq,K2o,Z2o,evo,L_,ile,ovo,rvo,Bq,tvo,avo,nvo,x_,dle,svo,lvo,Iq,ivo,dvo,cvo,$_,cle,fvo,mvo,qq,gvo,hvo,pvo,k_,fle,_vo,uvo,Nq,bvo,vvo,Fvo,S_,mle,Tvo,Mvo,jq,Evo,Cvo,wvo,R_,gle,Avo,yvo,Dq,Lvo,xvo,$vo,P_,hle,kvo,Svo,Gq,Rvo,Pvo,Bvo,B_,ple,Ivo,qvo,Oq,Nvo,jvo,Dvo,I_,_le,Gvo,Ovo,Vq,Vvo,Xvo,zvo,q_,ule,Wvo,Qvo,Xq,Hvo,Uvo,Jvo,N_,ble,Yvo,Kvo,zq,Zvo,e3o,o3o,j_,vle,r3o,t3o,Wq,a3o,n3o,s3o,D_,Fle,l3o,i3o,Qq,d3o,c3o,f3o,G_,Tle,m3o,g3o,Hq,h3o,p3o,_3o,O_,Mle,u3o,b3o,Uq,v3o,F3o,T3o,V_,M3o,Ele,E3o,C3o,Cle,w3o,A3o,X_,KIe,yi,z_,wle,G0,y3o,Ale,L3o,ZIe,xo,O0,x3o,Li,$3o,Jq,k3o,S3o,Yq,R3o,P3o,B3o,V0,I3o,yle,q3o,N3o,j3o,at,X0,D3o,Lle,G3o,O3o,xi,V3o,xle,X3o,z3o,Kq,W3o,Q3o,H3o,W_,U3o,Ye,z0,J3o,$le,Y3o,K3o,xa,Z3o,kle,eFo,oFo,Sle,rFo,tFo,Rle,aFo,nFo,sFo,G,Q_,Ple,lFo,iFo,Zq,dFo,cFo,fFo,H_,Ble,mFo,gFo,eN,hFo,pFo,_Fo,U_,Ile,uFo,bFo,oN,vFo,FFo,TFo,J_,qle,MFo,EFo,rN,CFo,wFo,AFo,Y_,Nle,yFo,LFo,tN,xFo,$Fo,kFo,K_,jle,SFo,RFo,aN,PFo,BFo,IFo,Z_,Dle,qFo,NFo,nN,jFo,DFo,GFo,eu,Gle,OFo,VFo,sN,XFo,zFo,WFo,ou,Ole,QFo,HFo,lN,UFo,JFo,YFo,ru,Vle,KFo,ZFo,iN,eTo,oTo,rTo,tu,Xle,tTo,aTo,dN,nTo,sTo,lTo,au,zle,iTo,dTo,cN,cTo,fTo,mTo,nu,Wle,gTo,hTo,fN,pTo,_To,uTo,su,Qle,bTo,vTo,mN,FTo,TTo,MTo,lu,Hle,ETo,CTo,gN,wTo,ATo,yTo,iu,Ule,LTo,xTo,hN,$To,kTo,STo,du,Jle,RTo,PTo,pN,BTo,ITo,qTo,cu,Yle,NTo,jTo,_N,DTo,GTo,OTo,fu,Kle,VTo,XTo,uN,zTo,WTo,QTo,mu,Zle,HTo,UTo,bN,JTo,YTo,KTo,gu,eie,ZTo,e8o,vN,o8o,r8o,t8o,hu,oie,a8o,n8o,FN,s8o,l8o,i8o,pu,rie,d8o,c8o,TN,f8o,m8o,g8o,_u,tie,h8o,p8o,MN,_8o,u8o,b8o,uu,aie,v8o,F8o,EN,T8o,M8o,E8o,bu,nie,C8o,w8o,CN,A8o,y8o,L8o,vu,sie,x8o,$8o,wN,k8o,S8o,R8o,Fu,lie,P8o,B8o,AN,I8o,q8o,N8o,Tu,iie,j8o,D8o,yN,G8o,O8o,V8o,Mu,die,X8o,z8o,LN,W8o,Q8o,H8o,Eu,cie,U8o,J8o,xN,Y8o,K8o,Z8o,Cu,fie,e7o,o7o,$N,r7o,t7o,a7o,wu,mie,n7o,s7o,kN,l7o,i7o,d7o,Au,gie,c7o,f7o,SN,m7o,g7o,h7o,yu,hie,p7o,_7o,RN,u7o,b7o,v7o,Lu,pie,F7o,T7o,PN,M7o,E7o,C7o,xu,_ie,w7o,A7o,BN,y7o,L7o,x7o,$u,uie,$7o,k7o,IN,S7o,R7o,P7o,ku,bie,B7o,I7o,qN,q7o,N7o,j7o,Su,vie,D7o,G7o,NN,O7o,V7o,X7o,Ru,Fie,z7o,W7o,jN,Q7o,H7o,U7o,Pu,Tie,J7o,Y7o,DN,K7o,Z7o,eMo,Bu,oMo,Mie,rMo,tMo,Eie,aMo,nMo,Iu,eqe,$i,qu,Cie,W0,sMo,wie,lMo,oqe,$o,Q0,iMo,ki,dMo,GN,cMo,fMo,ON,mMo,gMo,hMo,H0,pMo,Aie,_Mo,uMo,bMo,nt,U0,vMo,yie,FMo,TMo,Si,MMo,Lie,EMo,CMo,VN,wMo,AMo,yMo,Nu,LMo,Ke,J0,xMo,xie,$Mo,kMo,$a,SMo,$ie,RMo,PMo,kie,BMo,IMo,Sie,qMo,NMo,jMo,z,ju,Rie,DMo,GMo,XN,OMo,VMo,XMo,Du,Pie,zMo,WMo,zN,QMo,HMo,UMo,Gu,Bie,JMo,YMo,WN,KMo,ZMo,e4o,Ou,Iie,o4o,r4o,QN,t4o,a4o,n4o,Vu,qie,s4o,l4o,HN,i4o,d4o,c4o,Xu,Nie,f4o,m4o,UN,g4o,h4o,p4o,zu,jie,_4o,u4o,JN,b4o,v4o,F4o,Wu,Die,T4o,M4o,YN,E4o,C4o,w4o,Qu,Gie,A4o,y4o,KN,L4o,x4o,$4o,Hu,Oie,k4o,S4o,ZN,R4o,P4o,B4o,Uu,Vie,I4o,q4o,ej,N4o,j4o,D4o,Ju,Xie,G4o,O4o,oj,V4o,X4o,z4o,Yu,zie,W4o,Q4o,rj,H4o,U4o,J4o,Ku,Wie,Y4o,K4o,tj,Z4o,eEo,oEo,Zu,Qie,rEo,tEo,aj,aEo,nEo,sEo,e1,Hie,lEo,iEo,nj,dEo,cEo,fEo,o1,Uie,mEo,gEo,sj,hEo,pEo,_Eo,r1,Jie,uEo,bEo,lj,vEo,FEo,TEo,t1,Yie,MEo,EEo,ij,CEo,wEo,AEo,a1,Kie,yEo,LEo,dj,xEo,$Eo,kEo,n1,Zie,SEo,REo,cj,PEo,BEo,IEo,s1,ede,qEo,NEo,fj,jEo,DEo,GEo,l1,ode,OEo,VEo,mj,XEo,zEo,WEo,i1,rde,QEo,HEo,gj,UEo,JEo,YEo,d1,tde,KEo,ZEo,hj,eCo,oCo,rCo,c1,ade,tCo,aCo,pj,nCo,sCo,lCo,f1,nde,iCo,dCo,_j,cCo,fCo,mCo,m1,sde,gCo,hCo,uj,pCo,_Co,uCo,g1,lde,bCo,vCo,bj,FCo,TCo,MCo,h1,ide,ECo,CCo,vj,wCo,ACo,yCo,p1,dde,LCo,xCo,Fj,$Co,kCo,SCo,_1,cde,RCo,PCo,Tj,BCo,ICo,qCo,u1,fde,NCo,jCo,Mj,DCo,GCo,OCo,b1,mde,VCo,XCo,Ej,zCo,WCo,QCo,v1,gde,HCo,UCo,Cj,JCo,YCo,KCo,F1,hde,ZCo,e5o,wj,o5o,r5o,t5o,T1,a5o,pde,n5o,s5o,_de,l5o,i5o,M1,rqe,Ri,E1,ude,Y0,d5o,bde,c5o,tqe,ko,K0,f5o,Pi,m5o,Aj,g5o,h5o,yj,p5o,_5o,u5o,Z0,b5o,vde,v5o,F5o,T5o,st,e6,M5o,Fde,E5o,C5o,Bi,w5o,Tde,A5o,y5o,Lj,L5o,x5o,$5o,C1,k5o,Ze,o6,S5o,Mde,R5o,P5o,ka,B5o,Ede,I5o,q5o,Cde,N5o,j5o,wde,D5o,G5o,O5o,W,w1,Ade,V5o,X5o,xj,z5o,W5o,Q5o,A1,yde,H5o,U5o,$j,J5o,Y5o,K5o,y1,Lde,Z5o,ewo,kj,owo,rwo,two,L1,xde,awo,nwo,Sj,swo,lwo,iwo,x1,$de,dwo,cwo,Rj,fwo,mwo,gwo,$1,kde,hwo,pwo,Pj,_wo,uwo,bwo,k1,Sde,vwo,Fwo,Bj,Two,Mwo,Ewo,S1,Rde,Cwo,wwo,Ij,Awo,ywo,Lwo,R1,Pde,xwo,$wo,qj,kwo,Swo,Rwo,P1,Bde,Pwo,Bwo,Nj,Iwo,qwo,Nwo,B1,Ide,jwo,Dwo,jj,Gwo,Owo,Vwo,I1,qde,Xwo,zwo,Dj,Wwo,Qwo,Hwo,q1,Nde,Uwo,Jwo,Gj,Ywo,Kwo,Zwo,N1,jde,eAo,oAo,Oj,rAo,tAo,aAo,j1,Dde,nAo,sAo,Vj,lAo,iAo,dAo,D1,Gde,cAo,fAo,Xj,mAo,gAo,hAo,G1,Ode,pAo,_Ao,zj,uAo,bAo,vAo,O1,Vde,FAo,TAo,Wj,MAo,EAo,CAo,V1,Xde,wAo,AAo,Qj,yAo,LAo,xAo,X1,zde,$Ao,kAo,Hj,SAo,RAo,PAo,z1,Wde,BAo,IAo,Uj,qAo,NAo,jAo,W1,Qde,DAo,GAo,Jj,OAo,VAo,XAo,Q1,Hde,zAo,WAo,Yj,QAo,HAo,UAo,H1,Ude,JAo,YAo,Kj,KAo,ZAo,e0o,U1,Jde,o0o,r0o,Zj,t0o,a0o,n0o,J1,Yde,s0o,l0o,eD,i0o,d0o,c0o,Y1,Kde,f0o,m0o,oD,g0o,h0o,p0o,K1,Zde,_0o,u0o,rD,b0o,v0o,F0o,Z1,ece,T0o,M0o,tD,E0o,C0o,w0o,eb,oce,A0o,y0o,aD,L0o,x0o,$0o,ob,rce,k0o,S0o,tce,R0o,P0o,B0o,rb,ace,I0o,q0o,nD,N0o,j0o,D0o,tb,nce,G0o,O0o,sD,V0o,X0o,z0o,ab,sce,W0o,Q0o,lD,H0o,U0o,J0o,nb,lce,Y0o,K0o,iD,Z0o,e6o,o6o,sb,r6o,ice,t6o,a6o,dce,n6o,s6o,lb,aqe,Ii,ib,cce,r6,l6o,fce,i6o,nqe,So,t6,d6o,qi,c6o,dD,f6o,m6o,cD,g6o,h6o,p6o,a6,_6o,mce,u6o,b6o,v6o,lt,n6,F6o,gce,T6o,M6o,Ni,E6o,hce,C6o,w6o,fD,A6o,y6o,L6o,db,x6o,eo,s6,$6o,pce,k6o,S6o,Sa,R6o,_ce,P6o,B6o,uce,I6o,q6o,bce,N6o,j6o,D6o,_e,cb,vce,G6o,O6o,mD,V6o,X6o,z6o,fb,Fce,W6o,Q6o,gD,H6o,U6o,J6o,mb,Tce,Y6o,K6o,hD,Z6o,eyo,oyo,gb,Mce,ryo,tyo,pD,ayo,nyo,syo,hb,Ece,lyo,iyo,_D,dyo,cyo,fyo,pb,Cce,myo,gyo,uD,hyo,pyo,_yo,_b,wce,uyo,byo,bD,vyo,Fyo,Tyo,ub,Ace,Myo,Eyo,vD,Cyo,wyo,Ayo,bb,yce,yyo,Lyo,FD,xyo,$yo,kyo,vb,Lce,Syo,Ryo,TD,Pyo,Byo,Iyo,Fb,xce,qyo,Nyo,MD,jyo,Dyo,Gyo,Tb,$ce,Oyo,Vyo,ED,Xyo,zyo,Wyo,Mb,kce,Qyo,Hyo,CD,Uyo,Jyo,Yyo,Eb,Sce,Kyo,Zyo,wD,eLo,oLo,rLo,Cb,Rce,tLo,aLo,AD,nLo,sLo,lLo,wb,Pce,iLo,dLo,yD,cLo,fLo,mLo,Ab,gLo,Bce,hLo,pLo,Ice,_Lo,uLo,yb,sqe,ji,Lb,qce,l6,bLo,Nce,vLo,lqe,Ro,i6,FLo,Di,TLo,LD,MLo,ELo,xD,CLo,wLo,ALo,d6,yLo,jce,LLo,xLo,$Lo,it,c6,kLo,Dce,SLo,RLo,Gi,PLo,Gce,BLo,ILo,$D,qLo,NLo,jLo,xb,DLo,oo,f6,GLo,Oce,OLo,VLo,Ra,XLo,Vce,zLo,WLo,Xce,QLo,HLo,zce,ULo,JLo,YLo,q,$b,Wce,KLo,ZLo,kD,exo,oxo,rxo,kb,Qce,txo,axo,SD,nxo,sxo,lxo,Sb,Hce,ixo,dxo,RD,cxo,fxo,mxo,Rb,Uce,gxo,hxo,PD,pxo,_xo,uxo,Pb,Jce,bxo,vxo,BD,Fxo,Txo,Mxo,Bb,Yce,Exo,Cxo,ID,wxo,Axo,yxo,Ib,Kce,Lxo,xxo,qD,$xo,kxo,Sxo,qb,Zce,Rxo,Pxo,ND,Bxo,Ixo,qxo,Nb,efe,Nxo,jxo,jD,Dxo,Gxo,Oxo,jb,ofe,Vxo,Xxo,DD,zxo,Wxo,Qxo,Db,rfe,Hxo,Uxo,GD,Jxo,Yxo,Kxo,Gb,tfe,Zxo,e9o,OD,o9o,r9o,t9o,Ob,afe,a9o,n9o,VD,s9o,l9o,i9o,Vb,nfe,d9o,c9o,XD,f9o,m9o,g9o,Xb,sfe,h9o,p9o,zD,_9o,u9o,b9o,zb,lfe,v9o,F9o,WD,T9o,M9o,E9o,Wb,ife,C9o,w9o,QD,A9o,y9o,L9o,Qb,dfe,x9o,$9o,HD,k9o,S9o,R9o,Hb,cfe,P9o,B9o,UD,I9o,q9o,N9o,Ub,ffe,j9o,D9o,JD,G9o,O9o,V9o,Jb,mfe,X9o,z9o,YD,W9o,Q9o,H9o,Yb,gfe,U9o,J9o,KD,Y9o,K9o,Z9o,Kb,hfe,e$o,o$o,ZD,r$o,t$o,a$o,Zb,pfe,n$o,s$o,eG,l$o,i$o,d$o,e2,_fe,c$o,f$o,oG,m$o,g$o,h$o,o2,ufe,p$o,_$o,rG,u$o,b$o,v$o,r2,bfe,F$o,T$o,tG,M$o,E$o,C$o,t2,vfe,w$o,A$o,aG,y$o,L$o,x$o,a2,Ffe,$$o,k$o,nG,S$o,R$o,P$o,n2,Tfe,B$o,I$o,sG,q$o,N$o,j$o,s2,Mfe,D$o,G$o,lG,O$o,V$o,X$o,l2,Efe,z$o,W$o,iG,Q$o,H$o,U$o,i2,Cfe,J$o,Y$o,dG,K$o,Z$o,eko,d2,wfe,oko,rko,cG,tko,ako,nko,c2,Afe,sko,lko,fG,iko,dko,cko,f2,yfe,fko,mko,mG,gko,hko,pko,m2,Lfe,_ko,uko,gG,bko,vko,Fko,g2,xfe,Tko,Mko,hG,Eko,Cko,wko,h2,$fe,Ako,yko,pG,Lko,xko,$ko,p2,kfe,kko,Sko,_G,Rko,Pko,Bko,_2,Sfe,Iko,qko,uG,Nko,jko,Dko,u2,Rfe,Gko,Oko,bG,Vko,Xko,zko,b2,Pfe,Wko,Qko,vG,Hko,Uko,Jko,v2,Bfe,Yko,Kko,FG,Zko,eSo,oSo,F2,Ife,rSo,tSo,TG,aSo,nSo,sSo,T2,qfe,lSo,iSo,MG,dSo,cSo,fSo,M2,mSo,Nfe,gSo,hSo,jfe,pSo,_So,E2,iqe,Oi,C2,Dfe,m6,uSo,Gfe,bSo,dqe,Po,g6,vSo,Vi,FSo,EG,TSo,MSo,CG,ESo,CSo,wSo,h6,ASo,Ofe,ySo,LSo,xSo,dt,p6,$So,Vfe,kSo,SSo,Xi,RSo,Xfe,PSo,BSo,wG,ISo,qSo,NSo,w2,jSo,ro,_6,DSo,zfe,GSo,OSo,Pa,VSo,Wfe,XSo,zSo,Qfe,WSo,QSo,Hfe,HSo,USo,JSo,Y,A2,Ufe,YSo,KSo,AG,ZSo,eRo,oRo,y2,Jfe,rRo,tRo,yG,aRo,nRo,sRo,L2,Yfe,lRo,iRo,LG,dRo,cRo,fRo,x2,Kfe,mRo,gRo,xG,hRo,pRo,_Ro,$2,Zfe,uRo,bRo,$G,vRo,FRo,TRo,k2,eme,MRo,ERo,kG,CRo,wRo,ARo,S2,ome,yRo,LRo,SG,xRo,$Ro,kRo,R2,rme,SRo,RRo,RG,PRo,BRo,IRo,P2,tme,qRo,NRo,PG,jRo,DRo,GRo,B2,ame,ORo,VRo,BG,XRo,zRo,WRo,I2,nme,QRo,HRo,IG,URo,JRo,YRo,q2,sme,KRo,ZRo,qG,ePo,oPo,rPo,N2,lme,tPo,aPo,NG,nPo,sPo,lPo,j2,ime,iPo,dPo,jG,cPo,fPo,mPo,D2,dme,gPo,hPo,DG,pPo,_Po,uPo,G2,cme,bPo,vPo,GG,FPo,TPo,MPo,O2,fme,EPo,CPo,OG,wPo,APo,yPo,V2,mme,LPo,xPo,VG,$Po,kPo,SPo,X2,gme,RPo,PPo,XG,BPo,IPo,qPo,z2,hme,NPo,jPo,zG,DPo,GPo,OPo,W2,pme,VPo,XPo,WG,zPo,WPo,QPo,Q2,_me,HPo,UPo,QG,JPo,YPo,KPo,H2,ume,ZPo,eBo,HG,oBo,rBo,tBo,U2,bme,aBo,nBo,UG,sBo,lBo,iBo,J2,vme,dBo,cBo,JG,fBo,mBo,gBo,Y2,Fme,hBo,pBo,YG,_Bo,uBo,bBo,K2,Tme,vBo,FBo,KG,TBo,MBo,EBo,Z2,Mme,CBo,wBo,ZG,ABo,yBo,LBo,ev,Eme,xBo,$Bo,eO,kBo,SBo,RBo,ov,PBo,Cme,BBo,IBo,wme,qBo,NBo,rv,cqe,zi,tv,Ame,u6,jBo,yme,DBo,fqe,Bo,b6,GBo,Wi,OBo,oO,VBo,XBo,rO,zBo,WBo,QBo,v6,HBo,Lme,UBo,JBo,YBo,ct,F6,KBo,xme,ZBo,eIo,Qi,oIo,$me,rIo,tIo,tO,aIo,nIo,sIo,av,lIo,to,T6,iIo,kme,dIo,cIo,Ba,fIo,Sme,mIo,gIo,Rme,hIo,pIo,Pme,_Io,uIo,bIo,Yr,nv,Bme,vIo,FIo,aO,TIo,MIo,EIo,sv,Ime,CIo,wIo,nO,AIo,yIo,LIo,lv,qme,xIo,$Io,sO,kIo,SIo,RIo,iv,Nme,PIo,BIo,lO,IIo,qIo,NIo,dv,jme,jIo,DIo,iO,GIo,OIo,VIo,cv,XIo,Dme,zIo,WIo,Gme,QIo,HIo,fv,mqe,Hi,mv,Ome,M6,UIo,Vme,JIo,gqe,Io,E6,YIo,Ui,KIo,dO,ZIo,eqo,cO,oqo,rqo,tqo,C6,aqo,Xme,nqo,sqo,lqo,ft,w6,iqo,zme,dqo,cqo,Ji,fqo,Wme,mqo,gqo,fO,hqo,pqo,_qo,gv,uqo,ao,A6,bqo,Qme,vqo,Fqo,Ia,Tqo,Hme,Mqo,Eqo,Ume,Cqo,wqo,Jme,Aqo,yqo,Lqo,U,hv,Yme,xqo,$qo,mO,kqo,Sqo,Rqo,pv,Kme,Pqo,Bqo,gO,Iqo,qqo,Nqo,_v,Zme,jqo,Dqo,hO,Gqo,Oqo,Vqo,uv,ege,Xqo,zqo,pO,Wqo,Qqo,Hqo,bv,oge,Uqo,Jqo,_O,Yqo,Kqo,Zqo,vv,rge,eNo,oNo,uO,rNo,tNo,aNo,Fv,tge,nNo,sNo,bO,lNo,iNo,dNo,Tv,age,cNo,fNo,vO,mNo,gNo,hNo,Mv,nge,pNo,_No,FO,uNo,bNo,vNo,Ev,sge,FNo,TNo,TO,MNo,ENo,CNo,Cv,lge,wNo,ANo,MO,yNo,LNo,xNo,wv,ige,$No,kNo,EO,SNo,RNo,PNo,Av,dge,BNo,INo,CO,qNo,NNo,jNo,yv,cge,DNo,GNo,wO,ONo,VNo,XNo,Lv,fge,zNo,WNo,AO,QNo,HNo,UNo,xv,mge,JNo,YNo,yO,KNo,ZNo,ejo,$v,gge,ojo,rjo,LO,tjo,ajo,njo,kv,hge,sjo,ljo,xO,ijo,djo,cjo,Sv,pge,fjo,mjo,$O,gjo,hjo,pjo,Rv,_ge,_jo,ujo,kO,bjo,vjo,Fjo,Pv,uge,Tjo,Mjo,SO,Ejo,Cjo,wjo,Bv,bge,Ajo,yjo,RO,Ljo,xjo,$jo,Iv,vge,kjo,Sjo,PO,Rjo,Pjo,Bjo,qv,Fge,Ijo,qjo,BO,Njo,jjo,Djo,Nv,Tge,Gjo,Ojo,IO,Vjo,Xjo,zjo,jv,Mge,Wjo,Qjo,qO,Hjo,Ujo,Jjo,Dv,Ege,Yjo,Kjo,NO,Zjo,eDo,oDo,Gv,Cge,rDo,tDo,jO,aDo,nDo,sDo,Ov,wge,lDo,iDo,DO,dDo,cDo,fDo,Vv,Age,mDo,gDo,GO,hDo,pDo,_Do,Xv,yge,uDo,bDo,OO,vDo,FDo,TDo,zv,Lge,MDo,EDo,VO,CDo,wDo,ADo,Wv,xge,yDo,LDo,XO,xDo,$Do,kDo,Qv,SDo,$ge,RDo,PDo,kge,BDo,IDo,Hv,hqe,Yi,Uv,Sge,y6,qDo,Rge,NDo,pqe,qo,L6,jDo,Ki,DDo,zO,GDo,ODo,WO,VDo,XDo,zDo,x6,WDo,Pge,QDo,HDo,UDo,mt,$6,JDo,Bge,YDo,KDo,Zi,ZDo,Ige,eGo,oGo,QO,rGo,tGo,aGo,Jv,nGo,no,k6,sGo,qge,lGo,iGo,qa,dGo,Nge,cGo,fGo,jge,mGo,gGo,Dge,hGo,pGo,_Go,V,Yv,Gge,uGo,bGo,HO,vGo,FGo,TGo,Kv,Oge,MGo,EGo,UO,CGo,wGo,AGo,Zv,Vge,yGo,LGo,JO,xGo,$Go,kGo,e3,Xge,SGo,RGo,YO,PGo,BGo,IGo,o3,zge,qGo,NGo,KO,jGo,DGo,GGo,r3,Wge,OGo,VGo,ZO,XGo,zGo,WGo,t3,Qge,QGo,HGo,eV,UGo,JGo,YGo,a3,Hge,KGo,ZGo,oV,eOo,oOo,rOo,n3,Uge,tOo,aOo,rV,nOo,sOo,lOo,s3,Jge,iOo,dOo,tV,cOo,fOo,mOo,l3,Yge,gOo,hOo,aV,pOo,_Oo,uOo,i3,Kge,bOo,vOo,nV,FOo,TOo,MOo,d3,Zge,EOo,COo,sV,wOo,AOo,yOo,c3,ehe,LOo,xOo,lV,$Oo,kOo,SOo,f3,ohe,ROo,POo,iV,BOo,IOo,qOo,m3,rhe,NOo,jOo,dV,DOo,GOo,OOo,g3,the,VOo,XOo,cV,zOo,WOo,QOo,h3,ahe,HOo,UOo,fV,JOo,YOo,KOo,p3,nhe,ZOo,eVo,mV,oVo,rVo,tVo,_3,she,aVo,nVo,gV,sVo,lVo,iVo,u3,lhe,dVo,cVo,hV,fVo,mVo,gVo,b3,ihe,hVo,pVo,pV,_Vo,uVo,bVo,v3,dhe,vVo,FVo,_V,TVo,MVo,EVo,F3,che,CVo,wVo,uV,AVo,yVo,LVo,T3,fhe,xVo,$Vo,bV,kVo,SVo,RVo,M3,mhe,PVo,BVo,vV,IVo,qVo,NVo,E3,ghe,jVo,DVo,FV,GVo,OVo,VVo,C3,hhe,XVo,zVo,TV,WVo,QVo,HVo,w3,phe,UVo,JVo,MV,YVo,KVo,ZVo,A3,_he,eXo,oXo,EV,rXo,tXo,aXo,y3,uhe,nXo,sXo,CV,lXo,iXo,dXo,L3,bhe,cXo,fXo,wV,mXo,gXo,hXo,x3,vhe,pXo,_Xo,AV,uXo,bXo,vXo,$3,Fhe,FXo,TXo,yV,MXo,EXo,CXo,k3,The,wXo,AXo,LV,yXo,LXo,xXo,S3,Mhe,$Xo,kXo,xV,SXo,RXo,PXo,R3,Ehe,BXo,IXo,$V,qXo,NXo,jXo,P3,Che,DXo,GXo,kV,OXo,VXo,XXo,B3,whe,zXo,WXo,SV,QXo,HXo,UXo,I3,JXo,Ahe,YXo,KXo,yhe,ZXo,ezo,q3,_qe,ed,N3,Lhe,S6,ozo,xhe,rzo,uqe,No,R6,tzo,od,azo,RV,nzo,szo,PV,lzo,izo,dzo,P6,czo,$he,fzo,mzo,gzo,gt,B6,hzo,khe,pzo,_zo,rd,uzo,She,bzo,vzo,BV,Fzo,Tzo,Mzo,j3,Ezo,so,I6,Czo,Rhe,wzo,Azo,Na,yzo,Phe,Lzo,xzo,Bhe,$zo,kzo,Ihe,Szo,Rzo,Pzo,qhe,D3,Nhe,Bzo,Izo,IV,qzo,Nzo,jzo,G3,Dzo,jhe,Gzo,Ozo,Dhe,Vzo,Xzo,O3,bqe,td,V3,Ghe,q6,zzo,Ohe,Wzo,vqe,jo,N6,Qzo,ad,Hzo,qV,Uzo,Jzo,NV,Yzo,Kzo,Zzo,j6,eWo,Vhe,oWo,rWo,tWo,ht,D6,aWo,Xhe,nWo,sWo,nd,lWo,zhe,iWo,dWo,jV,cWo,fWo,mWo,X3,gWo,lo,G6,hWo,Whe,pWo,_Wo,ja,uWo,Qhe,bWo,vWo,Hhe,FWo,TWo,Uhe,MWo,EWo,CWo,Fe,z3,Jhe,wWo,AWo,DV,yWo,LWo,xWo,W3,Yhe,$Wo,kWo,GV,SWo,RWo,PWo,Q3,Khe,BWo,IWo,OV,qWo,NWo,jWo,Ps,Zhe,DWo,GWo,VV,OWo,VWo,XV,XWo,zWo,WWo,H3,epe,QWo,HWo,zV,UWo,JWo,YWo,pt,ope,KWo,ZWo,WV,eQo,oQo,QV,rQo,tQo,HV,aQo,nQo,sQo,U3,rpe,lQo,iQo,UV,dQo,cQo,fQo,J3,tpe,mQo,gQo,JV,hQo,pQo,_Qo,Y3,ape,uQo,bQo,YV,vQo,FQo,TQo,K3,npe,MQo,EQo,KV,CQo,wQo,AQo,Z3,spe,yQo,LQo,ZV,xQo,$Qo,kQo,eF,lpe,SQo,RQo,eX,PQo,BQo,IQo,oF,ipe,qQo,NQo,oX,jQo,DQo,GQo,rF,OQo,dpe,VQo,XQo,cpe,zQo,WQo,tF,Fqe,sd,aF,fpe,O6,QQo,mpe,HQo,Tqe,Do,V6,UQo,ld,JQo,rX,YQo,KQo,tX,ZQo,eHo,oHo,X6,rHo,gpe,tHo,aHo,nHo,_t,z6,sHo,hpe,lHo,iHo,id,dHo,ppe,cHo,fHo,aX,mHo,gHo,hHo,nF,pHo,io,W6,_Ho,_pe,uHo,bHo,Da,vHo,upe,FHo,THo,bpe,MHo,EHo,vpe,CHo,wHo,AHo,Fpe,sF,Tpe,yHo,LHo,nX,xHo,$Ho,kHo,lF,SHo,Mpe,RHo,PHo,Epe,BHo,IHo,iF,Mqe,dd,dF,Cpe,Q6,qHo,wpe,NHo,Eqe,Go,H6,jHo,cd,DHo,sX,GHo,OHo,lX,VHo,XHo,zHo,U6,WHo,Ape,QHo,HHo,UHo,ut,J6,JHo,ype,YHo,KHo,fd,ZHo,Lpe,eUo,oUo,iX,rUo,tUo,aUo,cF,nUo,co,Y6,sUo,xpe,lUo,iUo,Ga,dUo,$pe,cUo,fUo,kpe,mUo,gUo,Spe,hUo,pUo,_Uo,ke,fF,Rpe,uUo,bUo,dX,vUo,FUo,TUo,mF,Ppe,MUo,EUo,cX,CUo,wUo,AUo,gF,Bpe,yUo,LUo,fX,xUo,$Uo,kUo,hF,Ipe,SUo,RUo,mX,PUo,BUo,IUo,pF,qpe,qUo,NUo,gX,jUo,DUo,GUo,_F,Npe,OUo,VUo,hX,XUo,zUo,WUo,uF,jpe,QUo,HUo,pX,UUo,JUo,YUo,bF,Dpe,KUo,ZUo,_X,eJo,oJo,rJo,vF,Gpe,tJo,aJo,uX,nJo,sJo,lJo,FF,iJo,Ope,dJo,cJo,Vpe,fJo,mJo,TF,Cqe,md,MF,Xpe,K6,gJo,zpe,hJo,wqe,Oo,Z6,pJo,gd,_Jo,bX,uJo,bJo,vX,vJo,FJo,TJo,ey,MJo,Wpe,EJo,CJo,wJo,bt,oy,AJo,Qpe,yJo,LJo,hd,xJo,Hpe,$Jo,kJo,FX,SJo,RJo,PJo,EF,BJo,fo,ry,IJo,Upe,qJo,NJo,Oa,jJo,Jpe,DJo,GJo,Ype,OJo,VJo,Kpe,XJo,zJo,WJo,Kr,CF,Zpe,QJo,HJo,TX,UJo,JJo,YJo,wF,e_e,KJo,ZJo,MX,eYo,oYo,rYo,AF,o_e,tYo,aYo,EX,nYo,sYo,lYo,yF,r_e,iYo,dYo,CX,cYo,fYo,mYo,LF,t_e,gYo,hYo,wX,pYo,_Yo,uYo,xF,bYo,a_e,vYo,FYo,n_e,TYo,MYo,$F,Aqe,pd,kF,s_e,ty,EYo,l_e,CYo,yqe,Vo,ay,wYo,_d,AYo,AX,yYo,LYo,yX,xYo,$Yo,kYo,ny,SYo,i_e,RYo,PYo,BYo,vt,sy,IYo,d_e,qYo,NYo,ud,jYo,c_e,DYo,GYo,LX,OYo,VYo,XYo,SF,zYo,mo,ly,WYo,f_e,QYo,HYo,Va,UYo,m_e,JYo,YYo,g_e,KYo,ZYo,h_e,eKo,oKo,rKo,Se,RF,p_e,tKo,aKo,xX,nKo,sKo,lKo,PF,__e,iKo,dKo,$X,cKo,fKo,mKo,BF,u_e,gKo,hKo,kX,pKo,_Ko,uKo,IF,b_e,bKo,vKo,SX,FKo,TKo,MKo,qF,v_e,EKo,CKo,RX,wKo,AKo,yKo,NF,F_e,LKo,xKo,PX,$Ko,kKo,SKo,jF,T_e,RKo,PKo,BX,BKo,IKo,qKo,DF,M_e,NKo,jKo,IX,DKo,GKo,OKo,GF,E_e,VKo,XKo,qX,zKo,WKo,QKo,OF,HKo,C_e,UKo,JKo,w_e,YKo,KKo,VF,Lqe,bd,XF,A_e,iy,ZKo,y_e,eZo,xqe,Xo,dy,oZo,vd,rZo,NX,tZo,aZo,jX,nZo,sZo,lZo,cy,iZo,L_e,dZo,cZo,fZo,Ft,fy,mZo,x_e,gZo,hZo,Fd,pZo,$_e,_Zo,uZo,DX,bZo,vZo,FZo,zF,TZo,go,my,MZo,k_e,EZo,CZo,Xa,wZo,S_e,AZo,yZo,R_e,LZo,xZo,P_e,$Zo,kZo,SZo,gy,WF,B_e,RZo,PZo,GX,BZo,IZo,qZo,QF,I_e,NZo,jZo,OX,DZo,GZo,OZo,HF,VZo,q_e,XZo,zZo,N_e,WZo,QZo,UF,$qe,Td,JF,j_e,hy,HZo,D_e,UZo,kqe,zo,py,JZo,Md,YZo,VX,KZo,ZZo,XX,eer,oer,rer,_y,ter,G_e,aer,ner,ser,Tt,uy,ler,O_e,ier,der,Ed,cer,V_e,fer,mer,zX,ger,her,per,YF,_er,ho,by,uer,X_e,ber,ver,za,Fer,z_e,Ter,Mer,W_e,Eer,Cer,Q_e,wer,Aer,yer,Zr,KF,H_e,Ler,xer,WX,$er,ker,Ser,ZF,U_e,Rer,Per,QX,Ber,Ier,qer,eT,J_e,Ner,jer,HX,Der,Ger,Oer,oT,Y_e,Ver,Xer,UX,zer,Wer,Qer,rT,K_e,Her,Uer,JX,Jer,Yer,Ker,tT,Zer,Z_e,eor,oor,eue,ror,tor,aT,Sqe,Cd,nT,oue,vy,aor,rue,nor,Rqe,Wo,Fy,sor,wd,lor,YX,ior,dor,KX,cor,mor,gor,Ty,hor,tue,por,_or,uor,Mt,My,bor,aue,vor,For,Ad,Tor,nue,Mor,Eor,ZX,Cor,wor,Aor,sT,yor,po,Ey,Lor,sue,xor,$or,Wa,kor,lue,Sor,Ror,iue,Por,Bor,due,Ior,qor,Nor,yd,lT,cue,jor,Dor,ez,Gor,Oor,Vor,iT,fue,Xor,zor,oz,Wor,Qor,Hor,dT,mue,Uor,Jor,rz,Yor,Kor,Zor,cT,err,gue,orr,rrr,hue,trr,arr,fT,Pqe,Ld,mT,pue,Cy,nrr,_ue,srr,Bqe,Qo,wy,lrr,xd,irr,tz,drr,crr,az,frr,mrr,grr,Ay,hrr,uue,prr,_rr,urr,Et,yy,brr,bue,vrr,Frr,$d,Trr,vue,Mrr,Err,nz,Crr,wrr,Arr,gT,yrr,_o,Ly,Lrr,Fue,xrr,$rr,Qa,krr,Tue,Srr,Rrr,Mue,Prr,Brr,Eue,Irr,qrr,Nrr,xy,hT,Cue,jrr,Drr,sz,Grr,Orr,Vrr,pT,wue,Xrr,zrr,lz,Wrr,Qrr,Hrr,_T,Urr,Aue,Jrr,Yrr,yue,Krr,Zrr,uT,Iqe,kd,bT,Lue,$y,etr,xue,otr,qqe,Ho,ky,rtr,Sd,ttr,iz,atr,ntr,dz,str,ltr,itr,Sy,dtr,$ue,ctr,ftr,mtr,Ct,Ry,gtr,kue,htr,ptr,Rd,_tr,Sue,utr,btr,cz,vtr,Ftr,Ttr,vT,Mtr,uo,Py,Etr,Rue,Ctr,wtr,Ha,Atr,Pue,ytr,Ltr,Bue,xtr,$tr,Iue,ktr,Str,Rtr,que,FT,Nue,Ptr,Btr,fz,Itr,qtr,Ntr,TT,jtr,jue,Dtr,Gtr,Due,Otr,Vtr,MT,Nqe,Pd,ET,Gue,By,Xtr,Oue,ztr,jqe,Uo,Iy,Wtr,Bd,Qtr,mz,Htr,Utr,gz,Jtr,Ytr,Ktr,qy,Ztr,Vue,ear,oar,rar,wt,Ny,tar,Xue,aar,nar,Id,sar,zue,lar,iar,hz,dar,car,far,CT,mar,bo,jy,gar,Wue,har,par,Ua,_ar,Que,uar,bar,Hue,Far,Tar,Uue,Mar,Ear,Car,Ja,wT,Jue,war,Aar,pz,yar,Lar,xar,AT,Yue,$ar,kar,_z,Sar,Rar,Par,yT,Kue,Bar,Iar,uz,qar,Nar,jar,LT,Zue,Dar,Gar,bz,Oar,Var,Xar,xT,zar,e1e,War,Qar,o1e,Har,Uar,$T,Dqe,qd,kT,r1e,Dy,Jar,t1e,Yar,Gqe,Jo,Gy,Kar,Nd,Zar,vz,enr,onr,Fz,rnr,tnr,anr,Oy,nnr,a1e,snr,lnr,inr,At,Vy,dnr,n1e,cnr,fnr,jd,mnr,s1e,gnr,hnr,Tz,pnr,_nr,unr,ST,bnr,vo,Xy,vnr,l1e,Fnr,Tnr,Ya,Mnr,i1e,Enr,Cnr,d1e,wnr,Anr,c1e,ynr,Lnr,xnr,f1e,RT,m1e,$nr,knr,Mz,Snr,Rnr,Pnr,PT,Bnr,g1e,Inr,qnr,h1e,Nnr,jnr,BT,Oqe,Dd,IT,p1e,zy,Dnr,_1e,Gnr,Vqe,Yo,Wy,Onr,Gd,Vnr,Ez,Xnr,znr,Cz,Wnr,Qnr,Hnr,Qy,Unr,u1e,Jnr,Ynr,Knr,yt,Hy,Znr,b1e,esr,osr,Od,rsr,v1e,tsr,asr,wz,nsr,ssr,lsr,qT,isr,wr,Uy,dsr,F1e,csr,fsr,Ka,msr,T1e,gsr,hsr,M1e,psr,_sr,E1e,usr,bsr,vsr,N,NT,C1e,Fsr,Tsr,Az,Msr,Esr,Csr,jT,w1e,wsr,Asr,yz,ysr,Lsr,xsr,DT,A1e,$sr,ksr,Lz,Ssr,Rsr,Psr,GT,y1e,Bsr,Isr,xz,qsr,Nsr,jsr,OT,L1e,Dsr,Gsr,$z,Osr,Vsr,Xsr,VT,x1e,zsr,Wsr,kz,Qsr,Hsr,Usr,XT,$1e,Jsr,Ysr,Sz,Ksr,Zsr,elr,zT,k1e,olr,rlr,Rz,tlr,alr,nlr,WT,S1e,slr,llr,Pz,ilr,dlr,clr,QT,R1e,flr,mlr,Bz,glr,hlr,plr,HT,P1e,_lr,ulr,Iz,blr,vlr,Flr,UT,B1e,Tlr,Mlr,qz,Elr,Clr,wlr,JT,I1e,Alr,ylr,Nz,Llr,xlr,$lr,YT,q1e,klr,Slr,jz,Rlr,Plr,Blr,KT,N1e,Ilr,qlr,Dz,Nlr,jlr,Dlr,ZT,j1e,Glr,Olr,Gz,Vlr,Xlr,zlr,e8,D1e,Wlr,Qlr,Oz,Hlr,Ulr,Jlr,Bs,G1e,Ylr,Klr,Vz,Zlr,eir,Xz,oir,rir,tir,o8,O1e,air,nir,zz,sir,lir,iir,r8,V1e,dir,cir,Wz,fir,mir,gir,t8,X1e,hir,pir,Qz,_ir,uir,bir,a8,z1e,vir,Fir,Hz,Tir,Mir,Eir,n8,W1e,Cir,wir,Uz,Air,yir,Lir,s8,Q1e,xir,$ir,Jz,kir,Sir,Rir,l8,H1e,Pir,Bir,Yz,Iir,qir,Nir,i8,U1e,jir,Dir,Kz,Gir,Oir,Vir,d8,J1e,Xir,zir,Zz,Wir,Qir,Hir,c8,Y1e,Uir,Jir,eW,Yir,Kir,Zir,f8,K1e,edr,odr,oW,rdr,tdr,adr,m8,Z1e,ndr,sdr,rW,ldr,idr,ddr,g8,ebe,cdr,fdr,tW,mdr,gdr,hdr,h8,obe,pdr,_dr,aW,udr,bdr,vdr,p8,rbe,Fdr,Tdr,nW,Mdr,Edr,Cdr,_8,tbe,wdr,Adr,sW,ydr,Ldr,xdr,u8,abe,$dr,kdr,lW,Sdr,Rdr,Pdr,b8,nbe,Bdr,Idr,iW,qdr,Ndr,jdr,v8,sbe,Ddr,Gdr,dW,Odr,Vdr,Xdr,F8,lbe,zdr,Wdr,cW,Qdr,Hdr,Udr,T8,ibe,Jdr,Ydr,fW,Kdr,Zdr,ecr,M8,dbe,ocr,rcr,mW,tcr,acr,ncr,E8,cbe,scr,lcr,gW,icr,dcr,ccr,C8,fbe,fcr,mcr,hW,gcr,hcr,pcr,w8,mbe,_cr,ucr,pW,bcr,vcr,Fcr,A8,gbe,Tcr,Mcr,_W,Ecr,Ccr,wcr,y8,hbe,Acr,ycr,uW,Lcr,xcr,$cr,L8,pbe,kcr,Scr,bW,Rcr,Pcr,Bcr,x8,Xqe,Vd,$8,_be,Jy,Icr,ube,qcr,zqe,Ko,Yy,Ncr,Xd,jcr,vW,Dcr,Gcr,FW,Ocr,Vcr,Xcr,Ky,zcr,bbe,Wcr,Qcr,Hcr,Lt,Zy,Ucr,vbe,Jcr,Ycr,zd,Kcr,Fbe,Zcr,efr,TW,ofr,rfr,tfr,k8,afr,Ar,eL,nfr,Tbe,sfr,lfr,Za,ifr,Mbe,dfr,cfr,Ebe,ffr,mfr,Cbe,gfr,hfr,pfr,se,S8,wbe,_fr,ufr,MW,bfr,vfr,Ffr,R8,Abe,Tfr,Mfr,EW,Efr,Cfr,wfr,P8,ybe,Afr,yfr,CW,Lfr,xfr,$fr,B8,Lbe,kfr,Sfr,wW,Rfr,Pfr,Bfr,I8,xbe,Ifr,qfr,AW,Nfr,jfr,Dfr,q8,$be,Gfr,Ofr,yW,Vfr,Xfr,zfr,N8,kbe,Wfr,Qfr,LW,Hfr,Ufr,Jfr,j8,Sbe,Yfr,Kfr,xW,Zfr,emr,omr,D8,Rbe,rmr,tmr,$W,amr,nmr,smr,G8,Pbe,lmr,imr,kW,dmr,cmr,fmr,O8,Bbe,mmr,gmr,SW,hmr,pmr,_mr,V8,Ibe,umr,bmr,RW,vmr,Fmr,Tmr,X8,qbe,Mmr,Emr,PW,Cmr,wmr,Amr,z8,Nbe,ymr,Lmr,BW,xmr,$mr,kmr,W8,jbe,Smr,Rmr,IW,Pmr,Bmr,Imr,Q8,Dbe,qmr,Nmr,qW,jmr,Dmr,Gmr,H8,Gbe,Omr,Vmr,NW,Xmr,zmr,Wmr,U8,Obe,Qmr,Hmr,jW,Umr,Jmr,Ymr,J8,Vbe,Kmr,Zmr,DW,egr,ogr,rgr,Y8,Xbe,tgr,agr,GW,ngr,sgr,lgr,K8,zbe,igr,dgr,OW,cgr,fgr,mgr,Z8,Wbe,ggr,hgr,VW,pgr,_gr,ugr,e7,Qbe,bgr,vgr,XW,Fgr,Tgr,Mgr,o7,Wqe,Wd,r7,Hbe,oL,Egr,Ube,Cgr,Qqe,Zo,rL,wgr,Qd,Agr,zW,ygr,Lgr,WW,xgr,$gr,kgr,tL,Sgr,Jbe,Rgr,Pgr,Bgr,xt,aL,Igr,Ybe,qgr,Ngr,Hd,jgr,Kbe,Dgr,Ggr,QW,Ogr,Vgr,Xgr,t7,zgr,yr,nL,Wgr,Zbe,Qgr,Hgr,en,Ugr,e2e,Jgr,Ygr,o2e,Kgr,Zgr,r2e,ehr,ohr,rhr,Te,a7,t2e,thr,ahr,HW,nhr,shr,lhr,n7,a2e,ihr,dhr,UW,chr,fhr,mhr,s7,n2e,ghr,hhr,JW,phr,_hr,uhr,l7,s2e,bhr,vhr,YW,Fhr,Thr,Mhr,i7,l2e,Ehr,Chr,KW,whr,Ahr,yhr,d7,i2e,Lhr,xhr,ZW,$hr,khr,Shr,c7,d2e,Rhr,Phr,eQ,Bhr,Ihr,qhr,f7,c2e,Nhr,jhr,oQ,Dhr,Ghr,Ohr,m7,f2e,Vhr,Xhr,rQ,zhr,Whr,Qhr,g7,m2e,Hhr,Uhr,tQ,Jhr,Yhr,Khr,h7,g2e,Zhr,epr,aQ,opr,rpr,tpr,p7,h2e,apr,npr,nQ,spr,lpr,ipr,_7,Hqe,Ud,u7,p2e,sL,dpr,_2e,cpr,Uqe,er,lL,fpr,Jd,mpr,sQ,gpr,hpr,lQ,ppr,_pr,upr,iL,bpr,u2e,vpr,Fpr,Tpr,$t,dL,Mpr,b2e,Epr,Cpr,Yd,wpr,v2e,Apr,ypr,iQ,Lpr,xpr,$pr,b7,kpr,Lr,cL,Spr,F2e,Rpr,Ppr,on,Bpr,T2e,Ipr,qpr,M2e,Npr,jpr,E2e,Dpr,Gpr,Opr,rn,v7,C2e,Vpr,Xpr,dQ,zpr,Wpr,Qpr,F7,w2e,Hpr,Upr,cQ,Jpr,Ypr,Kpr,T7,A2e,Zpr,e_r,fQ,o_r,r_r,t_r,M7,y2e,a_r,n_r,mQ,s_r,l_r,i_r,E7,Jqe,Kd,C7,L2e,fL,d_r,x2e,c_r,Yqe,or,mL,f_r,Zd,m_r,gQ,g_r,h_r,hQ,p_r,__r,u_r,gL,b_r,$2e,v_r,F_r,T_r,kt,hL,M_r,k2e,E_r,C_r,ec,w_r,S2e,A_r,y_r,pQ,L_r,x_r,$_r,w7,k_r,xr,pL,S_r,R2e,R_r,P_r,tn,B_r,P2e,I_r,q_r,B2e,N_r,j_r,I2e,D_r,G_r,O_r,ie,A7,q2e,V_r,X_r,_Q,z_r,W_r,Q_r,y7,N2e,H_r,U_r,uQ,J_r,Y_r,K_r,L7,j2e,Z_r,eur,bQ,our,rur,tur,x7,D2e,aur,nur,vQ,sur,lur,iur,$7,G2e,dur,cur,FQ,fur,mur,gur,k7,O2e,hur,pur,TQ,_ur,uur,bur,S7,V2e,vur,Fur,MQ,Tur,Mur,Eur,R7,X2e,Cur,wur,EQ,Aur,yur,Lur,P7,z2e,xur,$ur,CQ,kur,Sur,Rur,B7,W2e,Pur,Bur,wQ,Iur,qur,Nur,I7,Q2e,jur,Dur,AQ,Gur,Our,Vur,q7,H2e,Xur,zur,yQ,Wur,Qur,Hur,N7,U2e,Uur,Jur,LQ,Yur,Kur,Zur,j7,J2e,e1r,o1r,xQ,r1r,t1r,a1r,D7,Y2e,n1r,s1r,$Q,l1r,i1r,d1r,G7,K2e,c1r,f1r,kQ,m1r,g1r,h1r,O7,Z2e,p1r,_1r,SQ,u1r,b1r,v1r,V7,eve,F1r,T1r,RQ,M1r,E1r,C1r,X7,ove,w1r,A1r,PQ,y1r,L1r,x1r,z7,rve,$1r,k1r,BQ,S1r,R1r,P1r,W7,Kqe,oc,Q7,tve,_L,B1r,ave,I1r,Zqe,rr,uL,q1r,rc,N1r,IQ,j1r,D1r,qQ,G1r,O1r,V1r,bL,X1r,nve,z1r,W1r,Q1r,St,vL,H1r,sve,U1r,J1r,tc,Y1r,lve,K1r,Z1r,NQ,ebr,obr,rbr,H7,tbr,$r,FL,abr,ive,nbr,sbr,an,lbr,dve,ibr,dbr,cve,cbr,fbr,fve,mbr,gbr,hbr,ye,U7,mve,pbr,_br,jQ,ubr,bbr,vbr,J7,gve,Fbr,Tbr,DQ,Mbr,Ebr,Cbr,Y7,hve,wbr,Abr,GQ,ybr,Lbr,xbr,K7,pve,$br,kbr,OQ,Sbr,Rbr,Pbr,Z7,_ve,Bbr,Ibr,VQ,qbr,Nbr,jbr,eM,uve,Dbr,Gbr,XQ,Obr,Vbr,Xbr,oM,bve,zbr,Wbr,zQ,Qbr,Hbr,Ubr,rM,vve,Jbr,Ybr,WQ,Kbr,Zbr,e2r,tM,Fve,o2r,r2r,QQ,t2r,a2r,n2r,aM,Tve,s2r,l2r,HQ,i2r,d2r,c2r,nM,eNe,ac,sM,Mve,TL,f2r,Eve,m2r,oNe,tr,ML,g2r,nc,h2r,UQ,p2r,_2r,JQ,u2r,b2r,v2r,EL,F2r,Cve,T2r,M2r,E2r,Rt,CL,C2r,wve,w2r,A2r,sc,y2r,Ave,L2r,x2r,YQ,$2r,k2r,S2r,lM,R2r,kr,wL,P2r,yve,B2r,I2r,nn,q2r,Lve,N2r,j2r,xve,D2r,G2r,$ve,O2r,V2r,X2r,ee,iM,kve,z2r,W2r,KQ,Q2r,H2r,U2r,dM,Sve,J2r,Y2r,ZQ,K2r,Z2r,evr,cM,Rve,ovr,rvr,eH,tvr,avr,nvr,fM,Pve,svr,lvr,oH,ivr,dvr,cvr,mM,Bve,fvr,mvr,rH,gvr,hvr,pvr,gM,Ive,_vr,uvr,tH,bvr,vvr,Fvr,hM,qve,Tvr,Mvr,aH,Evr,Cvr,wvr,pM,Nve,Avr,yvr,nH,Lvr,xvr,$vr,_M,jve,kvr,Svr,sH,Rvr,Pvr,Bvr,uM,Dve,Ivr,qvr,lH,Nvr,jvr,Dvr,bM,Gve,Gvr,Ovr,iH,Vvr,Xvr,zvr,vM,Ove,Wvr,Qvr,dH,Hvr,Uvr,Jvr,FM,Vve,Yvr,Kvr,cH,Zvr,e3r,o3r,TM,Xve,r3r,t3r,fH,a3r,n3r,s3r,MM,zve,l3r,i3r,mH,d3r,c3r,f3r,EM,Wve,m3r,g3r,gH,h3r,p3r,_3r,CM,Qve,u3r,b3r,hH,v3r,F3r,T3r,wM,Hve,M3r,E3r,pH,C3r,w3r,A3r,AM,Uve,y3r,L3r,_H,x3r,$3r,k3r,yM,Jve,S3r,R3r,uH,P3r,B3r,I3r,LM,Yve,q3r,N3r,bH,j3r,D3r,G3r,xM,Kve,O3r,V3r,vH,X3r,z3r,W3r,$M,Zve,Q3r,H3r,FH,U3r,J3r,Y3r,kM,e3e,K3r,Z3r,TH,eFr,oFr,rFr,SM,o3e,tFr,aFr,MH,nFr,sFr,lFr,RM,r3e,iFr,dFr,EH,cFr,fFr,mFr,PM,rNe,lc,BM,t3e,AL,gFr,a3e,hFr,tNe,ar,yL,pFr,ic,_Fr,CH,uFr,bFr,wH,vFr,FFr,TFr,LL,MFr,n3e,EFr,CFr,wFr,Pt,xL,AFr,s3e,yFr,LFr,dc,xFr,l3e,$Fr,kFr,AH,SFr,RFr,PFr,IM,BFr,Sr,$L,IFr,i3e,qFr,NFr,sn,jFr,d3e,DFr,GFr,c3e,OFr,VFr,f3e,XFr,zFr,WFr,he,qM,m3e,QFr,HFr,yH,UFr,JFr,YFr,NM,g3e,KFr,ZFr,LH,eTr,oTr,rTr,jM,h3e,tTr,aTr,xH,nTr,sTr,lTr,DM,p3e,iTr,dTr,$H,cTr,fTr,mTr,GM,_3e,gTr,hTr,kH,pTr,_Tr,uTr,OM,u3e,bTr,vTr,SH,FTr,TTr,MTr,VM,b3e,ETr,CTr,RH,wTr,ATr,yTr,XM,v3e,LTr,xTr,PH,$Tr,kTr,STr,zM,F3e,RTr,PTr,BH,BTr,ITr,qTr,WM,T3e,NTr,jTr,IH,DTr,GTr,OTr,QM,M3e,VTr,XTr,qH,zTr,WTr,QTr,HM,E3e,HTr,UTr,NH,JTr,YTr,KTr,UM,C3e,ZTr,e8r,jH,o8r,r8r,t8r,JM,w3e,a8r,n8r,DH,s8r,l8r,i8r,YM,A3e,d8r,c8r,GH,f8r,m8r,g8r,KM,y3e,h8r,p8r,OH,_8r,u8r,b8r,ZM,L3e,v8r,F8r,VH,T8r,M8r,E8r,e4,aNe,cc,o4,x3e,kL,C8r,$3e,w8r,nNe,nr,SL,A8r,fc,y8r,XH,L8r,x8r,zH,$8r,k8r,S8r,RL,R8r,k3e,P8r,B8r,I8r,Bt,PL,q8r,S3e,N8r,j8r,mc,D8r,R3e,G8r,O8r,WH,V8r,X8r,z8r,r4,W8r,Rr,BL,Q8r,P3e,H8r,U8r,ln,J8r,B3e,Y8r,K8r,I3e,Z8r,e7r,q3e,o7r,r7r,t7r,IL,t4,N3e,a7r,n7r,QH,s7r,l7r,i7r,a4,j3e,d7r,c7r,HH,f7r,m7r,g7r,n4,sNe,gc,s4,D3e,qL,h7r,G3e,p7r,lNe,sr,NL,_7r,hc,u7r,UH,b7r,v7r,JH,F7r,T7r,M7r,jL,E7r,O3e,C7r,w7r,A7r,It,DL,y7r,V3e,L7r,x7r,pc,$7r,X3e,k7r,S7r,YH,R7r,P7r,B7r,l4,I7r,Pr,GL,q7r,z3e,N7r,j7r,dn,D7r,W3e,G7r,O7r,Q3e,V7r,X7r,H3e,z7r,W7r,Q7r,U3e,i4,J3e,H7r,U7r,KH,J7r,Y7r,K7r,d4,iNe,_c,c4,Y3e,OL,Z7r,K3e,eMr,dNe,lr,VL,oMr,uc,rMr,ZH,tMr,aMr,eU,nMr,sMr,lMr,XL,iMr,Z3e,dMr,cMr,fMr,qt,zL,mMr,eFe,gMr,hMr,bc,pMr,oFe,_Mr,uMr,oU,bMr,vMr,FMr,f4,TMr,Br,WL,MMr,rFe,EMr,CMr,cn,wMr,tFe,AMr,yMr,aFe,LMr,xMr,nFe,$Mr,kMr,SMr,de,m4,sFe,RMr,PMr,rU,BMr,IMr,qMr,g4,lFe,NMr,jMr,tU,DMr,GMr,OMr,h4,iFe,VMr,XMr,aU,zMr,WMr,QMr,p4,dFe,HMr,UMr,nU,JMr,YMr,KMr,_4,cFe,ZMr,e4r,sU,o4r,r4r,t4r,u4,fFe,a4r,n4r,lU,s4r,l4r,i4r,b4,mFe,d4r,c4r,iU,f4r,m4r,g4r,v4,gFe,h4r,p4r,dU,_4r,u4r,b4r,F4,hFe,v4r,F4r,cU,T4r,M4r,E4r,T4,pFe,C4r,w4r,fU,A4r,y4r,L4r,M4,_Fe,x4r,$4r,mU,k4r,S4r,R4r,E4,uFe,P4r,B4r,gU,I4r,q4r,N4r,C4,bFe,j4r,D4r,hU,G4r,O4r,V4r,w4,vFe,X4r,z4r,pU,W4r,Q4r,H4r,A4,FFe,U4r,J4r,_U,Y4r,K4r,Z4r,y4,TFe,eEr,oEr,uU,rEr,tEr,aEr,L4,MFe,nEr,sEr,bU,lEr,iEr,dEr,x4,EFe,cEr,fEr,vU,mEr,gEr,hEr,$4,CFe,pEr,_Er,FU,uEr,bEr,vEr,k4,wFe,FEr,TEr,TU,MEr,EEr,CEr,S4,cNe,vc,R4,AFe,QL,wEr,yFe,AEr,fNe,ir,HL,yEr,Fc,LEr,MU,xEr,$Er,EU,kEr,SEr,REr,UL,PEr,LFe,BEr,IEr,qEr,Nt,JL,NEr,xFe,jEr,DEr,Tc,GEr,$Fe,OEr,VEr,CU,XEr,zEr,WEr,P4,QEr,Ir,YL,HEr,kFe,UEr,JEr,fn,YEr,SFe,KEr,ZEr,RFe,eCr,oCr,PFe,rCr,tCr,aCr,ce,B4,BFe,nCr,sCr,wU,lCr,iCr,dCr,I4,IFe,cCr,fCr,AU,mCr,gCr,hCr,q4,qFe,pCr,_Cr,yU,uCr,bCr,vCr,N4,NFe,FCr,TCr,LU,MCr,ECr,CCr,j4,jFe,wCr,ACr,xU,yCr,LCr,xCr,D4,DFe,$Cr,kCr,$U,SCr,RCr,PCr,G4,GFe,BCr,ICr,kU,qCr,NCr,jCr,O4,OFe,DCr,GCr,SU,OCr,VCr,XCr,V4,VFe,zCr,WCr,RU,QCr,HCr,UCr,X4,XFe,JCr,YCr,PU,KCr,ZCr,e5r,z4,zFe,o5r,r5r,BU,t5r,a5r,n5r,W4,WFe,s5r,l5r,IU,i5r,d5r,c5r,Q4,QFe,f5r,m5r,qU,g5r,h5r,p5r,H4,HFe,_5r,u5r,NU,b5r,v5r,F5r,U4,UFe,T5r,M5r,jU,E5r,C5r,w5r,J4,JFe,A5r,y5r,DU,L5r,x5r,$5r,Y4,YFe,k5r,S5r,GU,R5r,P5r,B5r,K4,KFe,I5r,q5r,OU,N5r,j5r,D5r,Z4,ZFe,G5r,O5r,VU,V5r,X5r,z5r,eE,eTe,W5r,Q5r,XU,H5r,U5r,J5r,oE,mNe,Mc,rE,oTe,KL,Y5r,rTe,K5r,gNe,dr,ZL,Z5r,Ec,ewr,zU,owr,rwr,WU,twr,awr,nwr,ex,swr,tTe,lwr,iwr,dwr,jt,ox,cwr,aTe,fwr,mwr,Cc,gwr,nTe,hwr,pwr,QU,_wr,uwr,bwr,tE,vwr,qr,rx,Fwr,sTe,Twr,Mwr,mn,Ewr,lTe,Cwr,wwr,iTe,Awr,ywr,dTe,Lwr,xwr,$wr,cTe,aE,fTe,kwr,Swr,HU,Rwr,Pwr,Bwr,nE,hNe,wc,sE,mTe,tx,Iwr,gTe,qwr,pNe,cr,ax,Nwr,Ac,jwr,UU,Dwr,Gwr,JU,Owr,Vwr,Xwr,nx,zwr,hTe,Wwr,Qwr,Hwr,Dt,sx,Uwr,pTe,Jwr,Ywr,yc,Kwr,_Te,Zwr,eAr,YU,oAr,rAr,tAr,lE,aAr,Nr,lx,nAr,uTe,sAr,lAr,gn,iAr,bTe,dAr,cAr,vTe,fAr,mAr,FTe,gAr,hAr,pAr,TTe,iE,MTe,_Ar,uAr,KU,bAr,vAr,FAr,dE,_Ne,Lc,cE,ETe,ix,TAr,CTe,MAr,uNe,fr,dx,EAr,xc,CAr,ZU,wAr,AAr,eJ,yAr,LAr,xAr,cx,$Ar,wTe,kAr,SAr,RAr,Gt,fx,PAr,ATe,BAr,IAr,$c,qAr,yTe,NAr,jAr,oJ,DAr,GAr,OAr,fE,VAr,jr,mx,XAr,LTe,zAr,WAr,hn,QAr,xTe,HAr,UAr,$Te,JAr,YAr,kTe,KAr,ZAr,e0r,re,mE,STe,o0r,r0r,rJ,t0r,a0r,n0r,gE,RTe,s0r,l0r,tJ,i0r,d0r,c0r,hE,PTe,f0r,m0r,aJ,g0r,h0r,p0r,pE,BTe,_0r,u0r,nJ,b0r,v0r,F0r,_E,ITe,T0r,M0r,sJ,E0r,C0r,w0r,uE,qTe,A0r,y0r,lJ,L0r,x0r,$0r,bE,NTe,k0r,S0r,iJ,R0r,P0r,B0r,vE,jTe,I0r,q0r,dJ,N0r,j0r,D0r,FE,DTe,G0r,O0r,cJ,V0r,X0r,z0r,TE,GTe,W0r,Q0r,fJ,H0r,U0r,J0r,ME,OTe,Y0r,K0r,mJ,Z0r,e6r,o6r,EE,VTe,r6r,t6r,gJ,a6r,n6r,s6r,CE,XTe,l6r,i6r,hJ,d6r,c6r,f6r,wE,zTe,m6r,g6r,pJ,h6r,p6r,_6r,AE,WTe,u6r,b6r,_J,v6r,F6r,T6r,yE,QTe,M6r,E6r,uJ,C6r,w6r,A6r,LE,HTe,y6r,L6r,bJ,x6r,$6r,k6r,xE,UTe,S6r,R6r,vJ,P6r,B6r,I6r,$E,JTe,q6r,N6r,FJ,j6r,D6r,G6r,kE,YTe,O6r,V6r,TJ,X6r,z6r,W6r,SE,KTe,Q6r,H6r,MJ,U6r,J6r,Y6r,RE,ZTe,K6r,Z6r,EJ,eyr,oyr,ryr,PE,e8e,tyr,ayr,CJ,nyr,syr,lyr,BE,o8e,iyr,dyr,wJ,cyr,fyr,myr,IE,r8e,gyr,hyr,AJ,pyr,_yr,uyr,qE,bNe,kc,NE,t8e,gx,byr,a8e,vyr,vNe,mr,hx,Fyr,Sc,Tyr,yJ,Myr,Eyr,LJ,Cyr,wyr,Ayr,px,yyr,n8e,Lyr,xyr,$yr,Ot,_x,kyr,s8e,Syr,Ryr,Rc,Pyr,l8e,Byr,Iyr,xJ,qyr,Nyr,jyr,jE,Dyr,Dr,ux,Gyr,i8e,Oyr,Vyr,pn,Xyr,d8e,zyr,Wyr,c8e,Qyr,Hyr,f8e,Uyr,Jyr,Yyr,Re,DE,m8e,Kyr,Zyr,$J,eLr,oLr,rLr,GE,g8e,tLr,aLr,kJ,nLr,sLr,lLr,OE,h8e,iLr,dLr,SJ,cLr,fLr,mLr,VE,p8e,gLr,hLr,RJ,pLr,_Lr,uLr,XE,_8e,bLr,vLr,PJ,FLr,TLr,MLr,zE,u8e,ELr,CLr,BJ,wLr,ALr,yLr,WE,b8e,LLr,xLr,IJ,$Lr,kLr,SLr,QE,v8e,RLr,PLr,qJ,BLr,ILr,qLr,HE,F8e,NLr,jLr,NJ,DLr,GLr,OLr,UE,FNe,Pc,JE,T8e,bx,VLr,M8e,XLr,TNe,gr,vx,zLr,Bc,WLr,jJ,QLr,HLr,DJ,ULr,JLr,YLr,Fx,KLr,E8e,ZLr,exr,oxr,Vt,Tx,rxr,C8e,txr,axr,Ic,nxr,w8e,sxr,lxr,GJ,ixr,dxr,cxr,YE,fxr,Gr,Mx,mxr,A8e,gxr,hxr,_n,pxr,y8e,_xr,uxr,L8e,bxr,vxr,x8e,Fxr,Txr,Mxr,Me,KE,$8e,Exr,Cxr,OJ,wxr,Axr,yxr,ZE,k8e,Lxr,xxr,VJ,$xr,kxr,Sxr,eC,S8e,Rxr,Pxr,XJ,Bxr,Ixr,qxr,oC,R8e,Nxr,jxr,zJ,Dxr,Gxr,Oxr,rC,P8e,Vxr,Xxr,WJ,zxr,Wxr,Qxr,tC,B8e,Hxr,Uxr,QJ,Jxr,Yxr,Kxr,aC,I8e,Zxr,e9r,HJ,o9r,r9r,t9r,nC,q8e,a9r,n9r,UJ,s9r,l9r,i9r,sC,N8e,d9r,c9r,JJ,f9r,m9r,g9r,lC,j8e,h9r,p9r,YJ,_9r,u9r,b9r,iC,D8e,v9r,F9r,KJ,T9r,M9r,E9r,dC,G8e,C9r,w9r,ZJ,A9r,y9r,L9r,cC,MNe,qc,fC,O8e,Ex,x9r,V8e,$9r,ENe,hr,Cx,k9r,Nc,S9r,eY,R9r,P9r,oY,B9r,I9r,q9r,wx,N9r,X8e,j9r,D9r,G9r,Xt,Ax,O9r,z8e,V9r,X9r,jc,z9r,W8e,W9r,Q9r,rY,H9r,U9r,J9r,mC,Y9r,Or,yx,K9r,Q8e,Z9r,e$r,un,o$r,H8e,r$r,t$r,U8e,a$r,n$r,J8e,s$r,l$r,i$r,Le,gC,Y8e,d$r,c$r,tY,f$r,m$r,g$r,hC,K8e,h$r,p$r,aY,_$r,u$r,b$r,pC,Z8e,v$r,F$r,nY,T$r,M$r,E$r,_C,e7e,C$r,w$r,sY,A$r,y$r,L$r,uC,o7e,x$r,$$r,lY,k$r,S$r,R$r,bC,r7e,P$r,B$r,iY,I$r,q$r,N$r,vC,t7e,j$r,D$r,dY,G$r,O$r,V$r,FC,a7e,X$r,z$r,cY,W$r,Q$r,H$r,TC,n7e,U$r,J$r,fY,Y$r,K$r,Z$r,MC,s7e,ekr,okr,mY,rkr,tkr,akr,EC,CNe,Dc,CC,l7e,Lx,nkr,i7e,skr,wNe,pr,xx,lkr,Gc,ikr,gY,dkr,ckr,hY,fkr,mkr,gkr,$x,hkr,d7e,pkr,_kr,ukr,zt,kx,bkr,c7e,vkr,Fkr,Oc,Tkr,f7e,Mkr,Ekr,pY,Ckr,wkr,Akr,wC,ykr,Vr,Sx,Lkr,m7e,xkr,$kr,bn,kkr,g7e,Skr,Rkr,h7e,Pkr,Bkr,p7e,Ikr,qkr,Nkr,Pe,AC,_7e,jkr,Dkr,_Y,Gkr,Okr,Vkr,yC,u7e,Xkr,zkr,uY,Wkr,Qkr,Hkr,LC,b7e,Ukr,Jkr,bY,Ykr,Kkr,Zkr,xC,v7e,eSr,oSr,vY,rSr,tSr,aSr,$C,F7e,nSr,sSr,FY,lSr,iSr,dSr,kC,T7e,cSr,fSr,TY,mSr,gSr,hSr,SC,M7e,pSr,_Sr,MY,uSr,bSr,vSr,RC,E7e,FSr,TSr,EY,MSr,ESr,CSr,PC,C7e,wSr,ASr,CY,ySr,LSr,xSr,BC,ANe,Vc,IC,w7e,Rx,$Sr,A7e,kSr,yNe,_r,Px,SSr,Xc,RSr,wY,PSr,BSr,AY,ISr,qSr,NSr,Bx,jSr,y7e,DSr,GSr,OSr,Wt,Ix,VSr,L7e,XSr,zSr,zc,WSr,x7e,QSr,HSr,yY,USr,JSr,YSr,qC,KSr,Xr,qx,ZSr,$7e,eRr,oRr,vn,rRr,k7e,tRr,aRr,S7e,nRr,sRr,R7e,lRr,iRr,dRr,xe,NC,P7e,cRr,fRr,LY,mRr,gRr,hRr,jC,B7e,pRr,_Rr,xY,uRr,bRr,vRr,DC,I7e,FRr,TRr,$Y,MRr,ERr,CRr,GC,q7e,wRr,ARr,kY,yRr,LRr,xRr,OC,N7e,$Rr,kRr,SY,SRr,RRr,PRr,VC,j7e,BRr,IRr,RY,qRr,NRr,jRr,XC,D7e,DRr,GRr,PY,ORr,VRr,XRr,zC,G7e,zRr,WRr,BY,QRr,HRr,URr,WC,O7e,JRr,YRr,IY,KRr,ZRr,ePr,QC,V7e,oPr,rPr,qY,tPr,aPr,nPr,HC,LNe,Wc,UC,X7e,Nx,sPr,z7e,lPr,xNe,ur,jx,iPr,Qc,dPr,NY,cPr,fPr,jY,mPr,gPr,hPr,Dx,pPr,W7e,_Pr,uPr,bPr,Qt,Gx,vPr,Q7e,FPr,TPr,Hc,MPr,H7e,EPr,CPr,DY,wPr,APr,yPr,JC,LPr,zr,Ox,xPr,U7e,$Pr,kPr,Fn,SPr,J7e,RPr,PPr,Y7e,BPr,IPr,K7e,qPr,NPr,jPr,$e,YC,Z7e,DPr,GPr,GY,OPr,VPr,XPr,KC,eMe,zPr,WPr,OY,QPr,HPr,UPr,ZC,oMe,JPr,YPr,VY,KPr,ZPr,eBr,e5,rMe,oBr,rBr,XY,tBr,aBr,nBr,o5,tMe,sBr,lBr,zY,iBr,dBr,cBr,r5,aMe,fBr,mBr,WY,gBr,hBr,pBr,t5,nMe,_Br,uBr,QY,bBr,vBr,FBr,a5,sMe,TBr,MBr,HY,EBr,CBr,wBr,n5,lMe,ABr,yBr,UY,LBr,xBr,$Br,s5,iMe,kBr,SBr,JY,RBr,PBr,BBr,l5,$Ne,Uc,i5,dMe,Vx,IBr,cMe,qBr,kNe,br,Xx,NBr,Jc,jBr,YY,DBr,GBr,KY,OBr,VBr,XBr,zx,zBr,fMe,WBr,QBr,HBr,Ht,Wx,UBr,mMe,JBr,YBr,Yc,KBr,gMe,ZBr,eIr,ZY,oIr,rIr,tIr,d5,aIr,Wr,Qx,nIr,hMe,sIr,lIr,Tn,iIr,pMe,dIr,cIr,_Me,fIr,mIr,uMe,gIr,hIr,pIr,De,c5,bMe,_Ir,uIr,eK,bIr,vIr,FIr,f5,vMe,TIr,MIr,oK,EIr,CIr,wIr,m5,FMe,AIr,yIr,rK,LIr,xIr,$Ir,g5,TMe,kIr,SIr,tK,RIr,PIr,BIr,h5,MMe,IIr,qIr,aK,NIr,jIr,DIr,p5,EMe,GIr,OIr,nK,VIr,XIr,zIr,_5,CMe,WIr,QIr,sK,HIr,UIr,JIr,u5,wMe,YIr,KIr,lK,ZIr,eqr,oqr,b5,SNe,Kc,v5,AMe,Hx,rqr,yMe,tqr,RNe,vr,Ux,aqr,Zc,nqr,iK,sqr,lqr,dK,iqr,dqr,cqr,Jx,fqr,LMe,mqr,gqr,hqr,Ut,Yx,pqr,xMe,_qr,uqr,ef,bqr,$Me,vqr,Fqr,cK,Tqr,Mqr,Eqr,F5,Cqr,Qr,Kx,wqr,kMe,Aqr,yqr,Mn,Lqr,SMe,xqr,$qr,RMe,kqr,Sqr,PMe,Rqr,Pqr,Bqr,Ge,T5,BMe,Iqr,qqr,fK,Nqr,jqr,Dqr,M5,IMe,Gqr,Oqr,mK,Vqr,Xqr,zqr,E5,qMe,Wqr,Qqr,gK,Hqr,Uqr,Jqr,C5,NMe,Yqr,Kqr,hK,Zqr,eNr,oNr,w5,jMe,rNr,tNr,pK,aNr,nNr,sNr,A5,DMe,lNr,iNr,_K,dNr,cNr,fNr,y5,GMe,mNr,gNr,uK,hNr,pNr,_Nr,L5,OMe,uNr,bNr,bK,vNr,FNr,TNr,x5,PNe,of,$5,VMe,Zx,MNr,XMe,ENr,BNe,Fr,e9,CNr,rf,wNr,vK,ANr,yNr,FK,LNr,xNr,$Nr,o9,kNr,zMe,SNr,RNr,PNr,Jt,r9,BNr,WMe,INr,qNr,tf,NNr,QMe,jNr,DNr,TK,GNr,ONr,VNr,k5,XNr,Hr,t9,zNr,HMe,WNr,QNr,En,HNr,UMe,UNr,JNr,JMe,YNr,KNr,YMe,ZNr,ejr,ojr,KMe,S5,ZMe,rjr,tjr,MK,ajr,njr,sjr,R5,INe,af,P5,e4e,a9,ljr,o4e,ijr,qNe,Tr,n9,djr,nf,cjr,EK,fjr,mjr,CK,gjr,hjr,pjr,s9,_jr,r4e,ujr,bjr,vjr,Yt,l9,Fjr,t4e,Tjr,Mjr,sf,Ejr,a4e,Cjr,wjr,wK,Ajr,yjr,Ljr,B5,xjr,Ur,i9,$jr,n4e,kjr,Sjr,Cn,Rjr,s4e,Pjr,Bjr,l4e,Ijr,qjr,i4e,Njr,jjr,Djr,d9,I5,d4e,Gjr,Ojr,AK,Vjr,Xjr,zjr,q5,c4e,Wjr,Qjr,yK,Hjr,Ujr,Jjr,N5,NNe,lf,j5,f4e,c9,Yjr,m4e,Kjr,jNe,Mr,f9,Zjr,df,eDr,LK,oDr,rDr,xK,tDr,aDr,nDr,m9,sDr,g4e,lDr,iDr,dDr,Kt,g9,cDr,h4e,fDr,mDr,cf,gDr,p4e,hDr,pDr,$K,_Dr,uDr,bDr,D5,vDr,Jr,h9,FDr,_4e,TDr,MDr,wn,EDr,u4e,CDr,wDr,b4e,ADr,yDr,v4e,LDr,xDr,$Dr,F4e,G5,T4e,kDr,SDr,kK,RDr,PDr,BDr,O5,DNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),c0=new oe({}),f0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new IDr({props:{warning:!0,$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),m0=new oe({}),g0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/configuration_auto.py#L575"}}),_0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/configuration_auto.py#L598"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),u0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/configuration_auto.py#L721"}}),b0=new oe({}),v0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/tokenization_auto.py#L388"}}),M0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17318/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/tokenization_auto.py#L402"}}),Zg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),E0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/tokenization_auto.py#L598"}}),C0=new oe({}),w0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17318/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),Lh=new IDr({props:{$$slots:{default:[jyt]},$$scope:{ctx:L}}}),xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),x0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),$0=new oe({}),k0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/processing_auto.py#L87"}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/processing_auto.py#L101"}}),Hh=new IDr({props:{$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),Uh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),B0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/processing_auto.py#L254"}}),I0=new oe({}),q0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L727"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),Kh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),G0=new oe({}),O0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L734"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),W0=new oe({}),Q0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L749"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),Y0=new oe({}),K0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L756"}}),e6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),o6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),lb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),r6=new oe({}),t6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L763"}}),n6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),yb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),l6=new oe({}),i6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L772"}}),c6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),f6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),m6=new oe({}),g6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L806"}}),p6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),_6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),u6=new oe({}),b6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L813"}}),F6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),fv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),M6=new oe({}),E6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L799"}}),w6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),gv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),y6=new oe({}),L6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L781"}}),$6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),S6=new oe({}),R6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L788"}}),B6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),q6=new oe({}),N6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L822"}}),D6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),O6=new oe({}),V6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L861"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),Q6=new oe({}),H6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L868"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),K6=new oe({}),Z6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L891"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L875"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L882"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L900"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L907"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L854"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L829"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L836"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_auto.py#L845"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),b7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),_L=new oe({}),uL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),xL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),Nx=new oe({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Hx=new oe({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Zx=new oe({}),e9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),r9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),a9=new oe({}),n9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),l9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),c9=new oe({}),f9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),g9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17318/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17318/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17318/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),s0=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),l0=o("AutoConfig"),Ln=o(", "),xn=a("a"),i0=o("AutoModel"),hi=o(`, and
`),$n=a("a"),d0=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),y$=o("will create a model that is an instance of "),_i=a("a"),L$=o("BertModel"),x$=o("."),Eo=l(),wa=a("p"),$$=o("There is one class of "),uf=a("code"),k$=o("AutoModel"),HDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qIe=l(),ui=a("h2"),bf=a("a"),Cee=a("span"),F(c0.$$.fragment),UDe=l(),wee=a("span"),JDe=o("Extending the Auto Classes"),NIe=l(),kn=a("p"),YDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aee=a("code"),KDe=o("NewModel"),ZDe=o(", make sure you have a "),yee=a("code"),eGe=o("NewModelConfig"),oGe=o(` then you can add those to the auto
classes like this:`),jIe=l(),F(f0.$$.fragment),DIe=l(),S$=a("p"),rGe=o("You will then be able to use the auto classes like you would usually do!"),GIe=l(),F(vf.$$.fragment),OIe=l(),bi=a("h2"),Ff=a("a"),Lee=a("span"),F(m0.$$.fragment),tGe=l(),xee=a("span"),aGe=o("AutoConfig"),VIe=l(),Co=a("div"),F(g0.$$.fragment),nGe=l(),h0=a("p"),sGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),R$=a("a"),lGe=o("from_pretrained()"),iGe=o(" class method."),dGe=l(),p0=a("p"),cGe=o("This class cannot be instantiated directly using "),$ee=a("code"),fGe=o("__init__()"),mGe=o(" (throws an error)."),gGe=l(),Er=a("div"),F(_0.$$.fragment),hGe=l(),kee=a("p"),pGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Ge=l(),vi=a("p"),uGe=o("The configuration class to instantiate is selected based on the "),See=a("code"),bGe=o("model_type"),vGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ree=a("code"),FGe=o("pretrained_model_name_or_path"),TGe=o(":"),MGe=l(),A=a("ul"),Tf=a("li"),Pee=a("strong"),EGe=o("albert"),CGe=o(" \u2014 "),P$=a("a"),wGe=o("AlbertConfig"),AGe=o(" (ALBERT model)"),yGe=l(),Mf=a("li"),Bee=a("strong"),LGe=o("bart"),xGe=o(" \u2014 "),B$=a("a"),$Ge=o("BartConfig"),kGe=o(" (BART model)"),SGe=l(),Ef=a("li"),Iee=a("strong"),RGe=o("beit"),PGe=o(" \u2014 "),I$=a("a"),BGe=o("BeitConfig"),IGe=o(" (BEiT model)"),qGe=l(),Cf=a("li"),qee=a("strong"),NGe=o("bert"),jGe=o(" \u2014 "),q$=a("a"),DGe=o("BertConfig"),GGe=o(" (BERT model)"),OGe=l(),wf=a("li"),Nee=a("strong"),VGe=o("bert-generation"),XGe=o(" \u2014 "),N$=a("a"),zGe=o("BertGenerationConfig"),WGe=o(" (Bert Generation model)"),QGe=l(),Af=a("li"),jee=a("strong"),HGe=o("big_bird"),UGe=o(" \u2014 "),j$=a("a"),JGe=o("BigBirdConfig"),YGe=o(" (BigBird model)"),KGe=l(),yf=a("li"),Dee=a("strong"),ZGe=o("bigbird_pegasus"),eOe=o(" \u2014 "),D$=a("a"),oOe=o("BigBirdPegasusConfig"),rOe=o(" (BigBirdPegasus model)"),tOe=l(),Lf=a("li"),Gee=a("strong"),aOe=o("blenderbot"),nOe=o(" \u2014 "),G$=a("a"),sOe=o("BlenderbotConfig"),lOe=o(" (Blenderbot model)"),iOe=l(),xf=a("li"),Oee=a("strong"),dOe=o("blenderbot-small"),cOe=o(" \u2014 "),O$=a("a"),fOe=o("BlenderbotSmallConfig"),mOe=o(" (BlenderbotSmall model)"),gOe=l(),$f=a("li"),Vee=a("strong"),hOe=o("camembert"),pOe=o(" \u2014 "),V$=a("a"),_Oe=o("CamembertConfig"),uOe=o(" (CamemBERT model)"),bOe=l(),kf=a("li"),Xee=a("strong"),vOe=o("canine"),FOe=o(" \u2014 "),X$=a("a"),TOe=o("CanineConfig"),MOe=o(" (Canine model)"),EOe=l(),Sf=a("li"),zee=a("strong"),COe=o("clip"),wOe=o(" \u2014 "),z$=a("a"),AOe=o("CLIPConfig"),yOe=o(" (CLIP model)"),LOe=l(),Rf=a("li"),Wee=a("strong"),xOe=o("convbert"),$Oe=o(" \u2014 "),W$=a("a"),kOe=o("ConvBertConfig"),SOe=o(" (ConvBERT model)"),ROe=l(),Pf=a("li"),Qee=a("strong"),POe=o("convnext"),BOe=o(" \u2014 "),Q$=a("a"),IOe=o("ConvNextConfig"),qOe=o(" (ConvNext model)"),NOe=l(),Bf=a("li"),Hee=a("strong"),jOe=o("ctrl"),DOe=o(" \u2014 "),H$=a("a"),GOe=o("CTRLConfig"),OOe=o(" (CTRL model)"),VOe=l(),If=a("li"),Uee=a("strong"),XOe=o("data2vec-audio"),zOe=o(" \u2014 "),U$=a("a"),WOe=o("Data2VecAudioConfig"),QOe=o(" (Data2VecAudio model)"),HOe=l(),qf=a("li"),Jee=a("strong"),UOe=o("data2vec-text"),JOe=o(" \u2014 "),J$=a("a"),YOe=o("Data2VecTextConfig"),KOe=o(" (Data2VecText model)"),ZOe=l(),Nf=a("li"),Yee=a("strong"),eVe=o("data2vec-vision"),oVe=o(" \u2014 "),Y$=a("a"),rVe=o("Data2VecVisionConfig"),tVe=o(" (Data2VecVision model)"),aVe=l(),jf=a("li"),Kee=a("strong"),nVe=o("deberta"),sVe=o(" \u2014 "),K$=a("a"),lVe=o("DebertaConfig"),iVe=o(" (DeBERTa model)"),dVe=l(),Df=a("li"),Zee=a("strong"),cVe=o("deberta-v2"),fVe=o(" \u2014 "),Z$=a("a"),mVe=o("DebertaV2Config"),gVe=o(" (DeBERTa-v2 model)"),hVe=l(),Gf=a("li"),eoe=a("strong"),pVe=o("decision_transformer"),_Ve=o(" \u2014 "),ek=a("a"),uVe=o("DecisionTransformerConfig"),bVe=o(" (Decision Transformer model)"),vVe=l(),Of=a("li"),ooe=a("strong"),FVe=o("deit"),TVe=o(" \u2014 "),ok=a("a"),MVe=o("DeiTConfig"),EVe=o(" (DeiT model)"),CVe=l(),Vf=a("li"),roe=a("strong"),wVe=o("detr"),AVe=o(" \u2014 "),rk=a("a"),yVe=o("DetrConfig"),LVe=o(" (DETR model)"),xVe=l(),Xf=a("li"),toe=a("strong"),$Ve=o("distilbert"),kVe=o(" \u2014 "),tk=a("a"),SVe=o("DistilBertConfig"),RVe=o(" (DistilBERT model)"),PVe=l(),zf=a("li"),aoe=a("strong"),BVe=o("dpr"),IVe=o(" \u2014 "),ak=a("a"),qVe=o("DPRConfig"),NVe=o(" (DPR model)"),jVe=l(),Wf=a("li"),noe=a("strong"),DVe=o("dpt"),GVe=o(" \u2014 "),nk=a("a"),OVe=o("DPTConfig"),VVe=o(" (DPT model)"),XVe=l(),Qf=a("li"),soe=a("strong"),zVe=o("electra"),WVe=o(" \u2014 "),sk=a("a"),QVe=o("ElectraConfig"),HVe=o(" (ELECTRA model)"),UVe=l(),Hf=a("li"),loe=a("strong"),JVe=o("encoder-decoder"),YVe=o(" \u2014 "),lk=a("a"),KVe=o("EncoderDecoderConfig"),ZVe=o(" (Encoder decoder model)"),eXe=l(),Uf=a("li"),ioe=a("strong"),oXe=o("flaubert"),rXe=o(" \u2014 "),ik=a("a"),tXe=o("FlaubertConfig"),aXe=o(" (FlauBERT model)"),nXe=l(),Jf=a("li"),doe=a("strong"),sXe=o("flava"),lXe=o(" \u2014 "),dk=a("a"),iXe=o("FlavaConfig"),dXe=o(" (Flava model)"),cXe=l(),Yf=a("li"),coe=a("strong"),fXe=o("fnet"),mXe=o(" \u2014 "),ck=a("a"),gXe=o("FNetConfig"),hXe=o(" (FNet model)"),pXe=l(),Kf=a("li"),foe=a("strong"),_Xe=o("fsmt"),uXe=o(" \u2014 "),fk=a("a"),bXe=o("FSMTConfig"),vXe=o(" (FairSeq Machine-Translation model)"),FXe=l(),Zf=a("li"),moe=a("strong"),TXe=o("funnel"),MXe=o(" \u2014 "),mk=a("a"),EXe=o("FunnelConfig"),CXe=o(" (Funnel Transformer model)"),wXe=l(),em=a("li"),goe=a("strong"),AXe=o("glpn"),yXe=o(" \u2014 "),gk=a("a"),LXe=o("GLPNConfig"),xXe=o(" (GLPN model)"),$Xe=l(),om=a("li"),hoe=a("strong"),kXe=o("gpt2"),SXe=o(" \u2014 "),hk=a("a"),RXe=o("GPT2Config"),PXe=o(" (OpenAI GPT-2 model)"),BXe=l(),rm=a("li"),poe=a("strong"),IXe=o("gpt_neo"),qXe=o(" \u2014 "),pk=a("a"),NXe=o("GPTNeoConfig"),jXe=o(" (GPT Neo model)"),DXe=l(),tm=a("li"),_oe=a("strong"),GXe=o("gptj"),OXe=o(" \u2014 "),_k=a("a"),VXe=o("GPTJConfig"),XXe=o(" (GPT-J model)"),zXe=l(),am=a("li"),uoe=a("strong"),WXe=o("hubert"),QXe=o(" \u2014 "),uk=a("a"),HXe=o("HubertConfig"),UXe=o(" (Hubert model)"),JXe=l(),nm=a("li"),boe=a("strong"),YXe=o("ibert"),KXe=o(" \u2014 "),bk=a("a"),ZXe=o("IBertConfig"),eze=o(" (I-BERT model)"),oze=l(),sm=a("li"),voe=a("strong"),rze=o("imagegpt"),tze=o(" \u2014 "),vk=a("a"),aze=o("ImageGPTConfig"),nze=o(" (ImageGPT model)"),sze=l(),lm=a("li"),Foe=a("strong"),lze=o("layoutlm"),ize=o(" \u2014 "),Fk=a("a"),dze=o("LayoutLMConfig"),cze=o(" (LayoutLM model)"),fze=l(),im=a("li"),Toe=a("strong"),mze=o("layoutlmv2"),gze=o(" \u2014 "),Tk=a("a"),hze=o("LayoutLMv2Config"),pze=o(" (LayoutLMv2 model)"),_ze=l(),dm=a("li"),Moe=a("strong"),uze=o("led"),bze=o(" \u2014 "),Mk=a("a"),vze=o("LEDConfig"),Fze=o(" (LED model)"),Tze=l(),cm=a("li"),Eoe=a("strong"),Mze=o("longformer"),Eze=o(" \u2014 "),Ek=a("a"),Cze=o("LongformerConfig"),wze=o(" (Longformer model)"),Aze=l(),fm=a("li"),Coe=a("strong"),yze=o("luke"),Lze=o(" \u2014 "),Ck=a("a"),xze=o("LukeConfig"),$ze=o(" (LUKE model)"),kze=l(),mm=a("li"),woe=a("strong"),Sze=o("lxmert"),Rze=o(" \u2014 "),wk=a("a"),Pze=o("LxmertConfig"),Bze=o(" (LXMERT model)"),Ize=l(),gm=a("li"),Aoe=a("strong"),qze=o("m2m_100"),Nze=o(" \u2014 "),Ak=a("a"),jze=o("M2M100Config"),Dze=o(" (M2M100 model)"),Gze=l(),hm=a("li"),yoe=a("strong"),Oze=o("marian"),Vze=o(" \u2014 "),yk=a("a"),Xze=o("MarianConfig"),zze=o(" (Marian model)"),Wze=l(),pm=a("li"),Loe=a("strong"),Qze=o("maskformer"),Hze=o(" \u2014 "),Lk=a("a"),Uze=o("MaskFormerConfig"),Jze=o(" (MaskFormer model)"),Yze=l(),_m=a("li"),xoe=a("strong"),Kze=o("mbart"),Zze=o(" \u2014 "),xk=a("a"),eWe=o("MBartConfig"),oWe=o(" (mBART model)"),rWe=l(),um=a("li"),$oe=a("strong"),tWe=o("megatron-bert"),aWe=o(" \u2014 "),$k=a("a"),nWe=o("MegatronBertConfig"),sWe=o(" (MegatronBert model)"),lWe=l(),bm=a("li"),koe=a("strong"),iWe=o("mobilebert"),dWe=o(" \u2014 "),kk=a("a"),cWe=o("MobileBertConfig"),fWe=o(" (MobileBERT model)"),mWe=l(),vm=a("li"),Soe=a("strong"),gWe=o("mpnet"),hWe=o(" \u2014 "),Sk=a("a"),pWe=o("MPNetConfig"),_We=o(" (MPNet model)"),uWe=l(),Fm=a("li"),Roe=a("strong"),bWe=o("mt5"),vWe=o(" \u2014 "),Rk=a("a"),FWe=o("MT5Config"),TWe=o(" (mT5 model)"),MWe=l(),Tm=a("li"),Poe=a("strong"),EWe=o("nystromformer"),CWe=o(" \u2014 "),Pk=a("a"),wWe=o("NystromformerConfig"),AWe=o(" (Nystromformer model)"),yWe=l(),Mm=a("li"),Boe=a("strong"),LWe=o("openai-gpt"),xWe=o(" \u2014 "),Bk=a("a"),$We=o("OpenAIGPTConfig"),kWe=o(" (OpenAI GPT model)"),SWe=l(),Em=a("li"),Ioe=a("strong"),RWe=o("opt"),PWe=o(" \u2014 "),Ik=a("a"),BWe=o("OPTConfig"),IWe=o(" (OPT model)"),qWe=l(),Cm=a("li"),qoe=a("strong"),NWe=o("pegasus"),jWe=o(" \u2014 "),qk=a("a"),DWe=o("PegasusConfig"),GWe=o(" (Pegasus model)"),OWe=l(),wm=a("li"),Noe=a("strong"),VWe=o("perceiver"),XWe=o(" \u2014 "),Nk=a("a"),zWe=o("PerceiverConfig"),WWe=o(" (Perceiver model)"),QWe=l(),Am=a("li"),joe=a("strong"),HWe=o("plbart"),UWe=o(" \u2014 "),jk=a("a"),JWe=o("PLBartConfig"),YWe=o(" (PLBart model)"),KWe=l(),ym=a("li"),Doe=a("strong"),ZWe=o("poolformer"),eQe=o(" \u2014 "),Dk=a("a"),oQe=o("PoolFormerConfig"),rQe=o(" (PoolFormer model)"),tQe=l(),Lm=a("li"),Goe=a("strong"),aQe=o("prophetnet"),nQe=o(" \u2014 "),Gk=a("a"),sQe=o("ProphetNetConfig"),lQe=o(" (ProphetNet model)"),iQe=l(),xm=a("li"),Ooe=a("strong"),dQe=o("qdqbert"),cQe=o(" \u2014 "),Ok=a("a"),fQe=o("QDQBertConfig"),mQe=o(" (QDQBert model)"),gQe=l(),$m=a("li"),Voe=a("strong"),hQe=o("rag"),pQe=o(" \u2014 "),Vk=a("a"),_Qe=o("RagConfig"),uQe=o(" (RAG model)"),bQe=l(),km=a("li"),Xoe=a("strong"),vQe=o("realm"),FQe=o(" \u2014 "),Xk=a("a"),TQe=o("RealmConfig"),MQe=o(" (Realm model)"),EQe=l(),Sm=a("li"),zoe=a("strong"),CQe=o("reformer"),wQe=o(" \u2014 "),zk=a("a"),AQe=o("ReformerConfig"),yQe=o(" (Reformer model)"),LQe=l(),Rm=a("li"),Woe=a("strong"),xQe=o("regnet"),$Qe=o(" \u2014 "),Wk=a("a"),kQe=o("RegNetConfig"),SQe=o(" (RegNet model)"),RQe=l(),Pm=a("li"),Qoe=a("strong"),PQe=o("rembert"),BQe=o(" \u2014 "),Qk=a("a"),IQe=o("RemBertConfig"),qQe=o(" (RemBERT model)"),NQe=l(),Bm=a("li"),Hoe=a("strong"),jQe=o("resnet"),DQe=o(" \u2014 "),Hk=a("a"),GQe=o("ResNetConfig"),OQe=o(" (ResNet model)"),VQe=l(),Im=a("li"),Uoe=a("strong"),XQe=o("retribert"),zQe=o(" \u2014 "),Uk=a("a"),WQe=o("RetriBertConfig"),QQe=o(" (RetriBERT model)"),HQe=l(),qm=a("li"),Joe=a("strong"),UQe=o("roberta"),JQe=o(" \u2014 "),Jk=a("a"),YQe=o("RobertaConfig"),KQe=o(" (RoBERTa model)"),ZQe=l(),Nm=a("li"),Yoe=a("strong"),eHe=o("roformer"),oHe=o(" \u2014 "),Yk=a("a"),rHe=o("RoFormerConfig"),tHe=o(" (RoFormer model)"),aHe=l(),jm=a("li"),Koe=a("strong"),nHe=o("segformer"),sHe=o(" \u2014 "),Kk=a("a"),lHe=o("SegformerConfig"),iHe=o(" (SegFormer model)"),dHe=l(),Dm=a("li"),Zoe=a("strong"),cHe=o("sew"),fHe=o(" \u2014 "),Zk=a("a"),mHe=o("SEWConfig"),gHe=o(" (SEW model)"),hHe=l(),Gm=a("li"),ere=a("strong"),pHe=o("sew-d"),_He=o(" \u2014 "),eS=a("a"),uHe=o("SEWDConfig"),bHe=o(" (SEW-D model)"),vHe=l(),Om=a("li"),ore=a("strong"),FHe=o("speech-encoder-decoder"),THe=o(" \u2014 "),oS=a("a"),MHe=o("SpeechEncoderDecoderConfig"),EHe=o(" (Speech Encoder decoder model)"),CHe=l(),Vm=a("li"),rre=a("strong"),wHe=o("speech_to_text"),AHe=o(" \u2014 "),rS=a("a"),yHe=o("Speech2TextConfig"),LHe=o(" (Speech2Text model)"),xHe=l(),Xm=a("li"),tre=a("strong"),$He=o("speech_to_text_2"),kHe=o(" \u2014 "),tS=a("a"),SHe=o("Speech2Text2Config"),RHe=o(" (Speech2Text2 model)"),PHe=l(),zm=a("li"),are=a("strong"),BHe=o("splinter"),IHe=o(" \u2014 "),aS=a("a"),qHe=o("SplinterConfig"),NHe=o(" (Splinter model)"),jHe=l(),Wm=a("li"),nre=a("strong"),DHe=o("squeezebert"),GHe=o(" \u2014 "),nS=a("a"),OHe=o("SqueezeBertConfig"),VHe=o(" (SqueezeBERT model)"),XHe=l(),Qm=a("li"),sre=a("strong"),zHe=o("swin"),WHe=o(" \u2014 "),sS=a("a"),QHe=o("SwinConfig"),HHe=o(" (Swin model)"),UHe=l(),Hm=a("li"),lre=a("strong"),JHe=o("t5"),YHe=o(" \u2014 "),lS=a("a"),KHe=o("T5Config"),ZHe=o(" (T5 model)"),eUe=l(),Um=a("li"),ire=a("strong"),oUe=o("tapas"),rUe=o(" \u2014 "),iS=a("a"),tUe=o("TapasConfig"),aUe=o(" (TAPAS model)"),nUe=l(),Jm=a("li"),dre=a("strong"),sUe=o("trajectory_transformer"),lUe=o(" \u2014 "),dS=a("a"),iUe=o("TrajectoryTransformerConfig"),dUe=o(" (Trajectory Transformer model)"),cUe=l(),Ym=a("li"),cre=a("strong"),fUe=o("transfo-xl"),mUe=o(" \u2014 "),cS=a("a"),gUe=o("TransfoXLConfig"),hUe=o(" (Transformer-XL model)"),pUe=l(),Km=a("li"),fre=a("strong"),_Ue=o("trocr"),uUe=o(" \u2014 "),fS=a("a"),bUe=o("TrOCRConfig"),vUe=o(" (TrOCR model)"),FUe=l(),Zm=a("li"),mre=a("strong"),TUe=o("unispeech"),MUe=o(" \u2014 "),mS=a("a"),EUe=o("UniSpeechConfig"),CUe=o(" (UniSpeech model)"),wUe=l(),eg=a("li"),gre=a("strong"),AUe=o("unispeech-sat"),yUe=o(" \u2014 "),gS=a("a"),LUe=o("UniSpeechSatConfig"),xUe=o(" (UniSpeechSat model)"),$Ue=l(),og=a("li"),hre=a("strong"),kUe=o("van"),SUe=o(" \u2014 "),hS=a("a"),RUe=o("VanConfig"),PUe=o(" (VAN model)"),BUe=l(),rg=a("li"),pre=a("strong"),IUe=o("vilt"),qUe=o(" \u2014 "),pS=a("a"),NUe=o("ViltConfig"),jUe=o(" (ViLT model)"),DUe=l(),tg=a("li"),_re=a("strong"),GUe=o("vision-encoder-decoder"),OUe=o(" \u2014 "),_S=a("a"),VUe=o("VisionEncoderDecoderConfig"),XUe=o(" (Vision Encoder decoder model)"),zUe=l(),ag=a("li"),ure=a("strong"),WUe=o("vision-text-dual-encoder"),QUe=o(" \u2014 "),uS=a("a"),HUe=o("VisionTextDualEncoderConfig"),UUe=o(" (VisionTextDualEncoder model)"),JUe=l(),ng=a("li"),bre=a("strong"),YUe=o("visual_bert"),KUe=o(" \u2014 "),bS=a("a"),ZUe=o("VisualBertConfig"),eJe=o(" (VisualBert model)"),oJe=l(),sg=a("li"),vre=a("strong"),rJe=o("vit"),tJe=o(" \u2014 "),vS=a("a"),aJe=o("ViTConfig"),nJe=o(" (ViT model)"),sJe=l(),lg=a("li"),Fre=a("strong"),lJe=o("vit_mae"),iJe=o(" \u2014 "),FS=a("a"),dJe=o("ViTMAEConfig"),cJe=o(" (ViTMAE model)"),fJe=l(),ig=a("li"),Tre=a("strong"),mJe=o("wav2vec2"),gJe=o(" \u2014 "),TS=a("a"),hJe=o("Wav2Vec2Config"),pJe=o(" (Wav2Vec2 model)"),_Je=l(),dg=a("li"),Mre=a("strong"),uJe=o("wav2vec2-conformer"),bJe=o(" \u2014 "),MS=a("a"),vJe=o("Wav2Vec2ConformerConfig"),FJe=o(" (Wav2Vec2-Conformer model)"),TJe=l(),cg=a("li"),Ere=a("strong"),MJe=o("wavlm"),EJe=o(" \u2014 "),ES=a("a"),CJe=o("WavLMConfig"),wJe=o(" (WavLM model)"),AJe=l(),fg=a("li"),Cre=a("strong"),yJe=o("xglm"),LJe=o(" \u2014 "),CS=a("a"),xJe=o("XGLMConfig"),$Je=o(" (XGLM model)"),kJe=l(),mg=a("li"),wre=a("strong"),SJe=o("xlm"),RJe=o(" \u2014 "),wS=a("a"),PJe=o("XLMConfig"),BJe=o(" (XLM model)"),IJe=l(),gg=a("li"),Are=a("strong"),qJe=o("xlm-prophetnet"),NJe=o(" \u2014 "),AS=a("a"),jJe=o("XLMProphetNetConfig"),DJe=o(" (XLMProphetNet model)"),GJe=l(),hg=a("li"),yre=a("strong"),OJe=o("xlm-roberta"),VJe=o(" \u2014 "),yS=a("a"),XJe=o("XLMRobertaConfig"),zJe=o(" (XLM-RoBERTa model)"),WJe=l(),pg=a("li"),Lre=a("strong"),QJe=o("xlm-roberta-xl"),HJe=o(" \u2014 "),LS=a("a"),UJe=o("XLMRobertaXLConfig"),JJe=o(" (XLM-RoBERTa-XL model)"),YJe=l(),_g=a("li"),xre=a("strong"),KJe=o("xlnet"),ZJe=o(" \u2014 "),xS=a("a"),eYe=o("XLNetConfig"),oYe=o(" (XLNet model)"),rYe=l(),ug=a("li"),$re=a("strong"),tYe=o("yolos"),aYe=o(" \u2014 "),$S=a("a"),nYe=o("YolosConfig"),sYe=o(" (YOLOS model)"),lYe=l(),bg=a("li"),kre=a("strong"),iYe=o("yoso"),dYe=o(" \u2014 "),kS=a("a"),cYe=o("YosoConfig"),fYe=o(" (YOSO model)"),mYe=l(),F(vg.$$.fragment),gYe=l(),Fg=a("div"),F(u0.$$.fragment),hYe=l(),Sre=a("p"),pYe=o("Register a new configuration for this class."),XIe=l(),Fi=a("h2"),Tg=a("a"),Rre=a("span"),F(b0.$$.fragment),_Ye=l(),Pre=a("span"),uYe=o("AutoTokenizer"),zIe=l(),wo=a("div"),F(v0.$$.fragment),bYe=l(),F0=a("p"),vYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SS=a("a"),FYe=o("AutoTokenizer.from_pretrained()"),TYe=o(" class method."),MYe=l(),T0=a("p"),EYe=o("This class cannot be instantiated directly using "),Bre=a("code"),CYe=o("__init__()"),wYe=o(" (throws an error)."),AYe=l(),Cr=a("div"),F(M0.$$.fragment),yYe=l(),Ire=a("p"),LYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xYe=l(),Aa=a("p"),$Ye=o("The tokenizer class to instantiate is selected based on the "),qre=a("code"),kYe=o("model_type"),SYe=o(` property of the config object (either
passed as an argument or loaded from `),Nre=a("code"),RYe=o("pretrained_model_name_or_path"),PYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jre=a("code"),BYe=o("pretrained_model_name_or_path"),IYe=o(":"),qYe=l(),k=a("ul"),Sn=a("li"),Dre=a("strong"),NYe=o("albert"),jYe=o(" \u2014 "),RS=a("a"),DYe=o("AlbertTokenizer"),GYe=o(" or "),PS=a("a"),OYe=o("AlbertTokenizerFast"),VYe=o(" (ALBERT model)"),XYe=l(),Rn=a("li"),Gre=a("strong"),zYe=o("bart"),WYe=o(" \u2014 "),BS=a("a"),QYe=o("BartTokenizer"),HYe=o(" or "),IS=a("a"),UYe=o("BartTokenizerFast"),JYe=o(" (BART model)"),YYe=l(),Pn=a("li"),Ore=a("strong"),KYe=o("barthez"),ZYe=o(" \u2014 "),qS=a("a"),eKe=o("BarthezTokenizer"),oKe=o(" or "),NS=a("a"),rKe=o("BarthezTokenizerFast"),tKe=o(" (BARThez model)"),aKe=l(),Mg=a("li"),Vre=a("strong"),nKe=o("bartpho"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("BartphoTokenizer"),iKe=o(" (BARTpho model)"),dKe=l(),Bn=a("li"),Xre=a("strong"),cKe=o("bert"),fKe=o(" \u2014 "),DS=a("a"),mKe=o("BertTokenizer"),gKe=o(" or "),GS=a("a"),hKe=o("BertTokenizerFast"),pKe=o(" (BERT model)"),_Ke=l(),Eg=a("li"),zre=a("strong"),uKe=o("bert-generation"),bKe=o(" \u2014 "),OS=a("a"),vKe=o("BertGenerationTokenizer"),FKe=o(" (Bert Generation model)"),TKe=l(),Cg=a("li"),Wre=a("strong"),MKe=o("bert-japanese"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("BertJapaneseTokenizer"),wKe=o(" (BertJapanese model)"),AKe=l(),wg=a("li"),Qre=a("strong"),yKe=o("bertweet"),LKe=o(" \u2014 "),XS=a("a"),xKe=o("BertweetTokenizer"),$Ke=o(" (Bertweet model)"),kKe=l(),In=a("li"),Hre=a("strong"),SKe=o("big_bird"),RKe=o(" \u2014 "),zS=a("a"),PKe=o("BigBirdTokenizer"),BKe=o(" or "),WS=a("a"),IKe=o("BigBirdTokenizerFast"),qKe=o(" (BigBird model)"),NKe=l(),qn=a("li"),Ure=a("strong"),jKe=o("bigbird_pegasus"),DKe=o(" \u2014 "),QS=a("a"),GKe=o("PegasusTokenizer"),OKe=o(" or "),HS=a("a"),VKe=o("PegasusTokenizerFast"),XKe=o(" (BigBirdPegasus model)"),zKe=l(),Nn=a("li"),Jre=a("strong"),WKe=o("blenderbot"),QKe=o(" \u2014 "),US=a("a"),HKe=o("BlenderbotTokenizer"),UKe=o(" or "),JS=a("a"),JKe=o("BlenderbotTokenizerFast"),YKe=o(" (Blenderbot model)"),KKe=l(),Ag=a("li"),Yre=a("strong"),ZKe=o("blenderbot-small"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("BlenderbotSmallTokenizer"),rZe=o(" (BlenderbotSmall model)"),tZe=l(),yg=a("li"),Kre=a("strong"),aZe=o("byt5"),nZe=o(" \u2014 "),KS=a("a"),sZe=o("ByT5Tokenizer"),lZe=o(" (ByT5 model)"),iZe=l(),jn=a("li"),Zre=a("strong"),dZe=o("camembert"),cZe=o(" \u2014 "),ZS=a("a"),fZe=o("CamembertTokenizer"),mZe=o(" or "),eR=a("a"),gZe=o("CamembertTokenizerFast"),hZe=o(" (CamemBERT model)"),pZe=l(),Lg=a("li"),ete=a("strong"),_Ze=o("canine"),uZe=o(" \u2014 "),oR=a("a"),bZe=o("CanineTokenizer"),vZe=o(" (Canine model)"),FZe=l(),Dn=a("li"),ote=a("strong"),TZe=o("clip"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("CLIPTokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("CLIPTokenizerFast"),AZe=o(" (CLIP model)"),yZe=l(),Gn=a("li"),rte=a("strong"),LZe=o("convbert"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("ConvBertTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("ConvBertTokenizerFast"),RZe=o(" (ConvBERT model)"),PZe=l(),On=a("li"),tte=a("strong"),BZe=o("cpm"),IZe=o(" \u2014 "),sR=a("a"),qZe=o("CpmTokenizer"),NZe=o(" or "),lR=a("a"),jZe=o("CpmTokenizerFast"),DZe=o(" (CPM model)"),GZe=l(),xg=a("li"),ate=a("strong"),OZe=o("ctrl"),VZe=o(" \u2014 "),iR=a("a"),XZe=o("CTRLTokenizer"),zZe=o(" (CTRL model)"),WZe=l(),Vn=a("li"),nte=a("strong"),QZe=o("data2vec-text"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("RobertaTokenizer"),JZe=o(" or "),cR=a("a"),YZe=o("RobertaTokenizerFast"),KZe=o(" (Data2VecText model)"),ZZe=l(),Xn=a("li"),ste=a("strong"),eeo=o("deberta"),oeo=o(" \u2014 "),fR=a("a"),reo=o("DebertaTokenizer"),teo=o(" or "),mR=a("a"),aeo=o("DebertaTokenizerFast"),neo=o(" (DeBERTa model)"),seo=l(),zn=a("li"),lte=a("strong"),leo=o("deberta-v2"),ieo=o(" \u2014 "),gR=a("a"),deo=o("DebertaV2Tokenizer"),ceo=o(" or "),hR=a("a"),feo=o("DebertaV2TokenizerFast"),meo=o(" (DeBERTa-v2 model)"),geo=l(),Wn=a("li"),ite=a("strong"),heo=o("distilbert"),peo=o(" \u2014 "),pR=a("a"),_eo=o("DistilBertTokenizer"),ueo=o(" or "),_R=a("a"),beo=o("DistilBertTokenizerFast"),veo=o(" (DistilBERT model)"),Feo=l(),Qn=a("li"),dte=a("strong"),Teo=o("dpr"),Meo=o(" \u2014 "),uR=a("a"),Eeo=o("DPRQuestionEncoderTokenizer"),Ceo=o(" or "),bR=a("a"),weo=o("DPRQuestionEncoderTokenizerFast"),Aeo=o(" (DPR model)"),yeo=l(),Hn=a("li"),cte=a("strong"),Leo=o("electra"),xeo=o(" \u2014 "),vR=a("a"),$eo=o("ElectraTokenizer"),keo=o(" or "),FR=a("a"),Seo=o("ElectraTokenizerFast"),Reo=o(" (ELECTRA model)"),Peo=l(),$g=a("li"),fte=a("strong"),Beo=o("flaubert"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("FlaubertTokenizer"),Neo=o(" (FlauBERT model)"),jeo=l(),Un=a("li"),mte=a("strong"),Deo=o("fnet"),Geo=o(" \u2014 "),MR=a("a"),Oeo=o("FNetTokenizer"),Veo=o(" or "),ER=a("a"),Xeo=o("FNetTokenizerFast"),zeo=o(" (FNet model)"),Weo=l(),kg=a("li"),gte=a("strong"),Qeo=o("fsmt"),Heo=o(" \u2014 "),CR=a("a"),Ueo=o("FSMTTokenizer"),Jeo=o(" (FairSeq Machine-Translation model)"),Yeo=l(),Jn=a("li"),hte=a("strong"),Keo=o("funnel"),Zeo=o(" \u2014 "),wR=a("a"),eoo=o("FunnelTokenizer"),ooo=o(" or "),AR=a("a"),roo=o("FunnelTokenizerFast"),too=o(" (Funnel Transformer model)"),aoo=l(),Yn=a("li"),pte=a("strong"),noo=o("gpt2"),soo=o(" \u2014 "),yR=a("a"),loo=o("GPT2Tokenizer"),ioo=o(" or "),LR=a("a"),doo=o("GPT2TokenizerFast"),coo=o(" (OpenAI GPT-2 model)"),foo=l(),Kn=a("li"),_te=a("strong"),moo=o("gpt_neo"),goo=o(" \u2014 "),xR=a("a"),hoo=o("GPT2Tokenizer"),poo=o(" or "),$R=a("a"),_oo=o("GPT2TokenizerFast"),uoo=o(" (GPT Neo model)"),boo=l(),Zn=a("li"),ute=a("strong"),voo=o("gptj"),Foo=o(" \u2014 "),kR=a("a"),Too=o("GPT2Tokenizer"),Moo=o(" or "),SR=a("a"),Eoo=o("GPT2TokenizerFast"),Coo=o(" (GPT-J model)"),woo=l(),es=a("li"),bte=a("strong"),Aoo=o("herbert"),yoo=o(" \u2014 "),RR=a("a"),Loo=o("HerbertTokenizer"),xoo=o(" or "),PR=a("a"),$oo=o("HerbertTokenizerFast"),koo=o(" (HerBERT model)"),Soo=l(),Sg=a("li"),vte=a("strong"),Roo=o("hubert"),Poo=o(" \u2014 "),BR=a("a"),Boo=o("Wav2Vec2CTCTokenizer"),Ioo=o(" (Hubert model)"),qoo=l(),os=a("li"),Fte=a("strong"),Noo=o("ibert"),joo=o(" \u2014 "),IR=a("a"),Doo=o("RobertaTokenizer"),Goo=o(" or "),qR=a("a"),Ooo=o("RobertaTokenizerFast"),Voo=o(" (I-BERT model)"),Xoo=l(),rs=a("li"),Tte=a("strong"),zoo=o("layoutlm"),Woo=o(" \u2014 "),NR=a("a"),Qoo=o("LayoutLMTokenizer"),Hoo=o(" or "),jR=a("a"),Uoo=o("LayoutLMTokenizerFast"),Joo=o(" (LayoutLM model)"),Yoo=l(),ts=a("li"),Mte=a("strong"),Koo=o("layoutlmv2"),Zoo=o(" \u2014 "),DR=a("a"),ero=o("LayoutLMv2Tokenizer"),oro=o(" or "),GR=a("a"),rro=o("LayoutLMv2TokenizerFast"),tro=o(" (LayoutLMv2 model)"),aro=l(),as=a("li"),Ete=a("strong"),nro=o("layoutxlm"),sro=o(" \u2014 "),OR=a("a"),lro=o("LayoutXLMTokenizer"),iro=o(" or "),VR=a("a"),dro=o("LayoutXLMTokenizerFast"),cro=o(" (LayoutXLM model)"),fro=l(),ns=a("li"),Cte=a("strong"),mro=o("led"),gro=o(" \u2014 "),XR=a("a"),hro=o("LEDTokenizer"),pro=o(" or "),zR=a("a"),_ro=o("LEDTokenizerFast"),uro=o(" (LED model)"),bro=l(),ss=a("li"),wte=a("strong"),vro=o("longformer"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("LongformerTokenizer"),Mro=o(" or "),QR=a("a"),Ero=o("LongformerTokenizerFast"),Cro=o(" (Longformer model)"),wro=l(),Rg=a("li"),Ate=a("strong"),Aro=o("luke"),yro=o(" \u2014 "),HR=a("a"),Lro=o("LukeTokenizer"),xro=o(" (LUKE model)"),$ro=l(),ls=a("li"),yte=a("strong"),kro=o("lxmert"),Sro=o(" \u2014 "),UR=a("a"),Rro=o("LxmertTokenizer"),Pro=o(" or "),JR=a("a"),Bro=o("LxmertTokenizerFast"),Iro=o(" (LXMERT model)"),qro=l(),Pg=a("li"),Lte=a("strong"),Nro=o("m2m_100"),jro=o(" \u2014 "),YR=a("a"),Dro=o("M2M100Tokenizer"),Gro=o(" (M2M100 model)"),Oro=l(),Bg=a("li"),xte=a("strong"),Vro=o("marian"),Xro=o(" \u2014 "),KR=a("a"),zro=o("MarianTokenizer"),Wro=o(" (Marian model)"),Qro=l(),is=a("li"),$te=a("strong"),Hro=o("mbart"),Uro=o(" \u2014 "),ZR=a("a"),Jro=o("MBartTokenizer"),Yro=o(" or "),eP=a("a"),Kro=o("MBartTokenizerFast"),Zro=o(" (mBART model)"),eto=l(),ds=a("li"),kte=a("strong"),oto=o("mbart50"),rto=o(" \u2014 "),oP=a("a"),tto=o("MBart50Tokenizer"),ato=o(" or "),rP=a("a"),nto=o("MBart50TokenizerFast"),sto=o(" (mBART-50 model)"),lto=l(),cs=a("li"),Ste=a("strong"),ito=o("megatron-bert"),dto=o(" \u2014 "),tP=a("a"),cto=o("BertTokenizer"),fto=o(" or "),aP=a("a"),mto=o("BertTokenizerFast"),gto=o(" (MegatronBert model)"),hto=l(),Ig=a("li"),Rte=a("strong"),pto=o("mluke"),_to=o(" \u2014 "),nP=a("a"),uto=o("MLukeTokenizer"),bto=o(" (mLUKE model)"),vto=l(),fs=a("li"),Pte=a("strong"),Fto=o("mobilebert"),Tto=o(" \u2014 "),sP=a("a"),Mto=o("MobileBertTokenizer"),Eto=o(" or "),lP=a("a"),Cto=o("MobileBertTokenizerFast"),wto=o(" (MobileBERT model)"),Ato=l(),ms=a("li"),Bte=a("strong"),yto=o("mpnet"),Lto=o(" \u2014 "),iP=a("a"),xto=o("MPNetTokenizer"),$to=o(" or "),dP=a("a"),kto=o("MPNetTokenizerFast"),Sto=o(" (MPNet model)"),Rto=l(),gs=a("li"),Ite=a("strong"),Pto=o("mt5"),Bto=o(" \u2014 "),cP=a("a"),Ito=o("MT5Tokenizer"),qto=o(" or "),fP=a("a"),Nto=o("MT5TokenizerFast"),jto=o(" (mT5 model)"),Dto=l(),hs=a("li"),qte=a("strong"),Gto=o("nystromformer"),Oto=o(" \u2014 "),mP=a("a"),Vto=o("AlbertTokenizer"),Xto=o(" or "),gP=a("a"),zto=o("AlbertTokenizerFast"),Wto=o(" (Nystromformer model)"),Qto=l(),ps=a("li"),Nte=a("strong"),Hto=o("openai-gpt"),Uto=o(" \u2014 "),hP=a("a"),Jto=o("OpenAIGPTTokenizer"),Yto=o(" or "),pP=a("a"),Kto=o("OpenAIGPTTokenizerFast"),Zto=o(" (OpenAI GPT model)"),eao=l(),qg=a("li"),jte=a("strong"),oao=o("opt"),rao=o(" \u2014 "),_P=a("a"),tao=o("GPT2Tokenizer"),aao=o(" (OPT model)"),nao=l(),_s=a("li"),Dte=a("strong"),sao=o("pegasus"),lao=o(" \u2014 "),uP=a("a"),iao=o("PegasusTokenizer"),dao=o(" or "),bP=a("a"),cao=o("PegasusTokenizerFast"),fao=o(" (Pegasus model)"),mao=l(),Ng=a("li"),Gte=a("strong"),gao=o("perceiver"),hao=o(" \u2014 "),vP=a("a"),pao=o("PerceiverTokenizer"),_ao=o(" (Perceiver model)"),uao=l(),jg=a("li"),Ote=a("strong"),bao=o("phobert"),vao=o(" \u2014 "),FP=a("a"),Fao=o("PhobertTokenizer"),Tao=o(" (PhoBERT model)"),Mao=l(),Dg=a("li"),Vte=a("strong"),Eao=o("plbart"),Cao=o(" \u2014 "),TP=a("a"),wao=o("PLBartTokenizer"),Aao=o(" (PLBart model)"),yao=l(),Gg=a("li"),Xte=a("strong"),Lao=o("prophetnet"),xao=o(" \u2014 "),MP=a("a"),$ao=o("ProphetNetTokenizer"),kao=o(" (ProphetNet model)"),Sao=l(),us=a("li"),zte=a("strong"),Rao=o("qdqbert"),Pao=o(" \u2014 "),EP=a("a"),Bao=o("BertTokenizer"),Iao=o(" or "),CP=a("a"),qao=o("BertTokenizerFast"),Nao=o(" (QDQBert model)"),jao=l(),Og=a("li"),Wte=a("strong"),Dao=o("rag"),Gao=o(" \u2014 "),wP=a("a"),Oao=o("RagTokenizer"),Vao=o(" (RAG model)"),Xao=l(),bs=a("li"),Qte=a("strong"),zao=o("realm"),Wao=o(" \u2014 "),AP=a("a"),Qao=o("RealmTokenizer"),Hao=o(" or "),yP=a("a"),Uao=o("RealmTokenizerFast"),Jao=o(" (Realm model)"),Yao=l(),vs=a("li"),Hte=a("strong"),Kao=o("reformer"),Zao=o(" \u2014 "),LP=a("a"),eno=o("ReformerTokenizer"),ono=o(" or "),xP=a("a"),rno=o("ReformerTokenizerFast"),tno=o(" (Reformer model)"),ano=l(),Fs=a("li"),Ute=a("strong"),nno=o("rembert"),sno=o(" \u2014 "),$P=a("a"),lno=o("RemBertTokenizer"),ino=o(" or "),kP=a("a"),dno=o("RemBertTokenizerFast"),cno=o(" (RemBERT model)"),fno=l(),Ts=a("li"),Jte=a("strong"),mno=o("retribert"),gno=o(" \u2014 "),SP=a("a"),hno=o("RetriBertTokenizer"),pno=o(" or "),RP=a("a"),_no=o("RetriBertTokenizerFast"),uno=o(" (RetriBERT model)"),bno=l(),Ms=a("li"),Yte=a("strong"),vno=o("roberta"),Fno=o(" \u2014 "),PP=a("a"),Tno=o("RobertaTokenizer"),Mno=o(" or "),BP=a("a"),Eno=o("RobertaTokenizerFast"),Cno=o(" (RoBERTa model)"),wno=l(),Es=a("li"),Kte=a("strong"),Ano=o("roformer"),yno=o(" \u2014 "),IP=a("a"),Lno=o("RoFormerTokenizer"),xno=o(" or "),qP=a("a"),$no=o("RoFormerTokenizerFast"),kno=o(" (RoFormer model)"),Sno=l(),Vg=a("li"),Zte=a("strong"),Rno=o("speech_to_text"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("Speech2TextTokenizer"),Ino=o(" (Speech2Text model)"),qno=l(),Xg=a("li"),eae=a("strong"),Nno=o("speech_to_text_2"),jno=o(" \u2014 "),jP=a("a"),Dno=o("Speech2Text2Tokenizer"),Gno=o(" (Speech2Text2 model)"),Ono=l(),Cs=a("li"),oae=a("strong"),Vno=o("splinter"),Xno=o(" \u2014 "),DP=a("a"),zno=o("SplinterTokenizer"),Wno=o(" or "),GP=a("a"),Qno=o("SplinterTokenizerFast"),Hno=o(" (Splinter model)"),Uno=l(),ws=a("li"),rae=a("strong"),Jno=o("squeezebert"),Yno=o(" \u2014 "),OP=a("a"),Kno=o("SqueezeBertTokenizer"),Zno=o(" or "),VP=a("a"),eso=o("SqueezeBertTokenizerFast"),oso=o(" (SqueezeBERT model)"),rso=l(),As=a("li"),tae=a("strong"),tso=o("t5"),aso=o(" \u2014 "),XP=a("a"),nso=o("T5Tokenizer"),sso=o(" or "),zP=a("a"),lso=o("T5TokenizerFast"),iso=o(" (T5 model)"),dso=l(),zg=a("li"),aae=a("strong"),cso=o("tapas"),fso=o(" \u2014 "),WP=a("a"),mso=o("TapasTokenizer"),gso=o(" (TAPAS model)"),hso=l(),Wg=a("li"),nae=a("strong"),pso=o("tapex"),_so=o(" \u2014 "),QP=a("a"),uso=o("TapexTokenizer"),bso=o(" (TAPEX model)"),vso=l(),Qg=a("li"),sae=a("strong"),Fso=o("transfo-xl"),Tso=o(" \u2014 "),HP=a("a"),Mso=o("TransfoXLTokenizer"),Eso=o(" (Transformer-XL model)"),Cso=l(),ys=a("li"),lae=a("strong"),wso=o("visual_bert"),Aso=o(" \u2014 "),UP=a("a"),yso=o("BertTokenizer"),Lso=o(" or "),JP=a("a"),xso=o("BertTokenizerFast"),$so=o(" (VisualBert model)"),kso=l(),Hg=a("li"),iae=a("strong"),Sso=o("wav2vec2"),Rso=o(" \u2014 "),YP=a("a"),Pso=o("Wav2Vec2CTCTokenizer"),Bso=o(" (Wav2Vec2 model)"),Iso=l(),Ug=a("li"),dae=a("strong"),qso=o("wav2vec2-conformer"),Nso=o(" \u2014 "),KP=a("a"),jso=o("Wav2Vec2CTCTokenizer"),Dso=o(" (Wav2Vec2-Conformer model)"),Gso=l(),Jg=a("li"),cae=a("strong"),Oso=o("wav2vec2_phoneme"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("Wav2Vec2PhonemeCTCTokenizer"),zso=o(" (Wav2Vec2Phoneme model)"),Wso=l(),Ls=a("li"),fae=a("strong"),Qso=o("xglm"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("XGLMTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("XGLMTokenizerFast"),Kso=o(" (XGLM model)"),Zso=l(),Yg=a("li"),mae=a("strong"),elo=o("xlm"),olo=o(" \u2014 "),rB=a("a"),rlo=o("XLMTokenizer"),tlo=o(" (XLM model)"),alo=l(),Kg=a("li"),gae=a("strong"),nlo=o("xlm-prophetnet"),slo=o(" \u2014 "),tB=a("a"),llo=o("XLMProphetNetTokenizer"),ilo=o(" (XLMProphetNet model)"),dlo=l(),xs=a("li"),hae=a("strong"),clo=o("xlm-roberta"),flo=o(" \u2014 "),aB=a("a"),mlo=o("XLMRobertaTokenizer"),glo=o(" or "),nB=a("a"),hlo=o("XLMRobertaTokenizerFast"),plo=o(" (XLM-RoBERTa model)"),_lo=l(),$s=a("li"),pae=a("strong"),ulo=o("xlm-roberta-xl"),blo=o(" \u2014 "),sB=a("a"),vlo=o("RobertaTokenizer"),Flo=o(" or "),lB=a("a"),Tlo=o("RobertaTokenizerFast"),Mlo=o(" (XLM-RoBERTa-XL model)"),Elo=l(),ks=a("li"),_ae=a("strong"),Clo=o("xlnet"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("XLNetTokenizer"),ylo=o(" or "),dB=a("a"),Llo=o("XLNetTokenizerFast"),xlo=o(" (XLNet model)"),$lo=l(),Ss=a("li"),uae=a("strong"),klo=o("yoso"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("AlbertTokenizer"),Plo=o(" or "),fB=a("a"),Blo=o("AlbertTokenizerFast"),Ilo=o(" (YOSO model)"),qlo=l(),F(Zg.$$.fragment),Nlo=l(),eh=a("div"),F(E0.$$.fragment),jlo=l(),bae=a("p"),Dlo=o("Register a new tokenizer in this mapping."),WIe=l(),Ti=a("h2"),oh=a("a"),vae=a("span"),F(C0.$$.fragment),Glo=l(),Fae=a("span"),Olo=o("AutoFeatureExtractor"),QIe=l(),Ao=a("div"),F(w0.$$.fragment),Vlo=l(),A0=a("p"),Xlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),mB=a("a"),zlo=o("AutoFeatureExtractor.from_pretrained()"),Wlo=o(" class method."),Qlo=l(),y0=a("p"),Hlo=o("This class cannot be instantiated directly using "),Tae=a("code"),Ulo=o("__init__()"),Jlo=o(" (throws an error)."),Ylo=l(),He=a("div"),F(L0.$$.fragment),Klo=l(),Mae=a("p"),Zlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eio=l(),ya=a("p"),oio=o("The feature extractor class to instantiate is selected based on the "),Eae=a("code"),rio=o("model_type"),tio=o(` property of the config object
(either passed as an argument or loaded from `),Cae=a("code"),aio=o("pretrained_model_name_or_path"),nio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wae=a("code"),sio=o("pretrained_model_name_or_path"),lio=o(":"),iio=l(),Z=a("ul"),rh=a("li"),Aae=a("strong"),dio=o("beit"),cio=o(" \u2014 "),gB=a("a"),fio=o("BeitFeatureExtractor"),mio=o(" (BEiT model)"),gio=l(),th=a("li"),yae=a("strong"),hio=o("clip"),pio=o(" \u2014 "),hB=a("a"),_io=o("CLIPFeatureExtractor"),uio=o(" (CLIP model)"),bio=l(),ah=a("li"),Lae=a("strong"),vio=o("convnext"),Fio=o(" \u2014 "),pB=a("a"),Tio=o("ConvNextFeatureExtractor"),Mio=o(" (ConvNext model)"),Eio=l(),nh=a("li"),xae=a("strong"),Cio=o("data2vec-audio"),wio=o(" \u2014 "),_B=a("a"),Aio=o("Wav2Vec2FeatureExtractor"),yio=o(" (Data2VecAudio model)"),Lio=l(),sh=a("li"),$ae=a("strong"),xio=o("data2vec-vision"),$io=o(" \u2014 "),uB=a("a"),kio=o("BeitFeatureExtractor"),Sio=o(" (Data2VecVision model)"),Rio=l(),lh=a("li"),kae=a("strong"),Pio=o("deit"),Bio=o(" \u2014 "),bB=a("a"),Iio=o("DeiTFeatureExtractor"),qio=o(" (DeiT model)"),Nio=l(),ih=a("li"),Sae=a("strong"),jio=o("detr"),Dio=o(" \u2014 "),vB=a("a"),Gio=o("DetrFeatureExtractor"),Oio=o(" (DETR model)"),Vio=l(),dh=a("li"),Rae=a("strong"),Xio=o("dpt"),zio=o(" \u2014 "),FB=a("a"),Wio=o("DPTFeatureExtractor"),Qio=o(" (DPT model)"),Hio=l(),ch=a("li"),Pae=a("strong"),Uio=o("flava"),Jio=o(" \u2014 "),TB=a("a"),Yio=o("FlavaFeatureExtractor"),Kio=o(" (Flava model)"),Zio=l(),fh=a("li"),Bae=a("strong"),edo=o("glpn"),odo=o(" \u2014 "),MB=a("a"),rdo=o("GLPNFeatureExtractor"),tdo=o(" (GLPN model)"),ado=l(),mh=a("li"),Iae=a("strong"),ndo=o("hubert"),sdo=o(" \u2014 "),EB=a("a"),ldo=o("Wav2Vec2FeatureExtractor"),ido=o(" (Hubert model)"),ddo=l(),gh=a("li"),qae=a("strong"),cdo=o("layoutlmv2"),fdo=o(" \u2014 "),CB=a("a"),mdo=o("LayoutLMv2FeatureExtractor"),gdo=o(" (LayoutLMv2 model)"),hdo=l(),hh=a("li"),Nae=a("strong"),pdo=o("maskformer"),_do=o(" \u2014 "),wB=a("a"),udo=o("MaskFormerFeatureExtractor"),bdo=o(" (MaskFormer model)"),vdo=l(),ph=a("li"),jae=a("strong"),Fdo=o("perceiver"),Tdo=o(" \u2014 "),AB=a("a"),Mdo=o("PerceiverFeatureExtractor"),Edo=o(" (Perceiver model)"),Cdo=l(),_h=a("li"),Dae=a("strong"),wdo=o("poolformer"),Ado=o(" \u2014 "),yB=a("a"),ydo=o("PoolFormerFeatureExtractor"),Ldo=o(" (PoolFormer model)"),xdo=l(),uh=a("li"),Gae=a("strong"),$do=o("regnet"),kdo=o(" \u2014 "),LB=a("a"),Sdo=o("ConvNextFeatureExtractor"),Rdo=o(" (RegNet model)"),Pdo=l(),bh=a("li"),Oae=a("strong"),Bdo=o("resnet"),Ido=o(" \u2014 "),xB=a("a"),qdo=o("ConvNextFeatureExtractor"),Ndo=o(" (ResNet model)"),jdo=l(),vh=a("li"),Vae=a("strong"),Ddo=o("segformer"),Gdo=o(" \u2014 "),$B=a("a"),Odo=o("SegformerFeatureExtractor"),Vdo=o(" (SegFormer model)"),Xdo=l(),Fh=a("li"),Xae=a("strong"),zdo=o("speech_to_text"),Wdo=o(" \u2014 "),kB=a("a"),Qdo=o("Speech2TextFeatureExtractor"),Hdo=o(" (Speech2Text model)"),Udo=l(),Th=a("li"),zae=a("strong"),Jdo=o("swin"),Ydo=o(" \u2014 "),SB=a("a"),Kdo=o("ViTFeatureExtractor"),Zdo=o(" (Swin model)"),eco=l(),Mh=a("li"),Wae=a("strong"),oco=o("van"),rco=o(" \u2014 "),RB=a("a"),tco=o("ConvNextFeatureExtractor"),aco=o(" (VAN model)"),nco=l(),Eh=a("li"),Qae=a("strong"),sco=o("vit"),lco=o(" \u2014 "),PB=a("a"),ico=o("ViTFeatureExtractor"),dco=o(" (ViT model)"),cco=l(),Ch=a("li"),Hae=a("strong"),fco=o("vit_mae"),mco=o(" \u2014 "),BB=a("a"),gco=o("ViTFeatureExtractor"),hco=o(" (ViTMAE model)"),pco=l(),wh=a("li"),Uae=a("strong"),_co=o("wav2vec2"),uco=o(" \u2014 "),IB=a("a"),bco=o("Wav2Vec2FeatureExtractor"),vco=o(" (Wav2Vec2 model)"),Fco=l(),Ah=a("li"),Jae=a("strong"),Tco=o("wav2vec2-conformer"),Mco=o(" \u2014 "),qB=a("a"),Eco=o("Wav2Vec2FeatureExtractor"),Cco=o(" (Wav2Vec2-Conformer model)"),wco=l(),yh=a("li"),Yae=a("strong"),Aco=o("yolos"),yco=o(" \u2014 "),NB=a("a"),Lco=o("YolosFeatureExtractor"),xco=o(" (YOLOS model)"),$co=l(),F(Lh.$$.fragment),kco=l(),F(xh.$$.fragment),Sco=l(),$h=a("div"),F(x0.$$.fragment),Rco=l(),Kae=a("p"),Pco=o("Register a new feature extractor for this class."),HIe=l(),Mi=a("h2"),kh=a("a"),Zae=a("span"),F($0.$$.fragment),Bco=l(),ene=a("span"),Ico=o("AutoProcessor"),UIe=l(),yo=a("div"),F(k0.$$.fragment),qco=l(),S0=a("p"),Nco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jB=a("a"),jco=o("AutoProcessor.from_pretrained()"),Dco=o(" class method."),Gco=l(),R0=a("p"),Oco=o("This class cannot be instantiated directly using "),one=a("code"),Vco=o("__init__()"),Xco=o(" (throws an error)."),zco=l(),Ue=a("div"),F(P0.$$.fragment),Wco=l(),rne=a("p"),Qco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Hco=l(),Ei=a("p"),Uco=o("The processor class to instantiate is selected based on the "),tne=a("code"),Jco=o("model_type"),Yco=o(` property of the config object (either
passed as an argument or loaded from `),ane=a("code"),Kco=o("pretrained_model_name_or_path"),Zco=o(" if possible):"),efo=l(),pe=a("ul"),Sh=a("li"),nne=a("strong"),ofo=o("clip"),rfo=o(" \u2014 "),DB=a("a"),tfo=o("CLIPProcessor"),afo=o(" (CLIP model)"),nfo=l(),Rh=a("li"),sne=a("strong"),sfo=o("flava"),lfo=o(" \u2014 "),lne=a("code"),ifo=o("FLAVAProcessor"),dfo=o(" (Flava model)"),cfo=l(),Ph=a("li"),ine=a("strong"),ffo=o("layoutlmv2"),mfo=o(" \u2014 "),GB=a("a"),gfo=o("LayoutLMv2Processor"),hfo=o(" (LayoutLMv2 model)"),pfo=l(),Bh=a("li"),dne=a("strong"),_fo=o("layoutxlm"),ufo=o(" \u2014 "),OB=a("a"),bfo=o("LayoutXLMProcessor"),vfo=o(" (LayoutXLM model)"),Ffo=l(),Ih=a("li"),cne=a("strong"),Tfo=o("sew"),Mfo=o(" \u2014 "),VB=a("a"),Efo=o("Wav2Vec2Processor"),Cfo=o(" (SEW model)"),wfo=l(),qh=a("li"),fne=a("strong"),Afo=o("sew-d"),yfo=o(" \u2014 "),XB=a("a"),Lfo=o("Wav2Vec2Processor"),xfo=o(" (SEW-D model)"),$fo=l(),Nh=a("li"),mne=a("strong"),kfo=o("speech_to_text"),Sfo=o(" \u2014 "),zB=a("a"),Rfo=o("Speech2TextProcessor"),Pfo=o(" (Speech2Text model)"),Bfo=l(),jh=a("li"),gne=a("strong"),Ifo=o("speech_to_text_2"),qfo=o(" \u2014 "),WB=a("a"),Nfo=o("Speech2Text2Processor"),jfo=o(" (Speech2Text2 model)"),Dfo=l(),Dh=a("li"),hne=a("strong"),Gfo=o("trocr"),Ofo=o(" \u2014 "),QB=a("a"),Vfo=o("TrOCRProcessor"),Xfo=o(" (TrOCR model)"),zfo=l(),Gh=a("li"),pne=a("strong"),Wfo=o("unispeech"),Qfo=o(" \u2014 "),HB=a("a"),Hfo=o("Wav2Vec2Processor"),Ufo=o(" (UniSpeech model)"),Jfo=l(),Oh=a("li"),_ne=a("strong"),Yfo=o("unispeech-sat"),Kfo=o(" \u2014 "),UB=a("a"),Zfo=o("Wav2Vec2Processor"),emo=o(" (UniSpeechSat model)"),omo=l(),Vh=a("li"),une=a("strong"),rmo=o("vilt"),tmo=o(" \u2014 "),JB=a("a"),amo=o("ViltProcessor"),nmo=o(" (ViLT model)"),smo=l(),Xh=a("li"),bne=a("strong"),lmo=o("vision-text-dual-encoder"),imo=o(" \u2014 "),YB=a("a"),dmo=o("VisionTextDualEncoderProcessor"),cmo=o(" (VisionTextDualEncoder model)"),fmo=l(),zh=a("li"),vne=a("strong"),mmo=o("wav2vec2"),gmo=o(" \u2014 "),KB=a("a"),hmo=o("Wav2Vec2Processor"),pmo=o(" (Wav2Vec2 model)"),_mo=l(),Wh=a("li"),Fne=a("strong"),umo=o("wav2vec2-conformer"),bmo=o(" \u2014 "),ZB=a("a"),vmo=o("Wav2Vec2Processor"),Fmo=o(" (Wav2Vec2-Conformer model)"),Tmo=l(),Qh=a("li"),Tne=a("strong"),Mmo=o("wavlm"),Emo=o(" \u2014 "),eI=a("a"),Cmo=o("Wav2Vec2Processor"),wmo=o(" (WavLM model)"),Amo=l(),F(Hh.$$.fragment),ymo=l(),F(Uh.$$.fragment),Lmo=l(),Jh=a("div"),F(B0.$$.fragment),xmo=l(),Mne=a("p"),$mo=o("Register a new processor for this class."),JIe=l(),Ci=a("h2"),Yh=a("a"),Ene=a("span"),F(I0.$$.fragment),kmo=l(),Cne=a("span"),Smo=o("AutoModel"),YIe=l(),Lo=a("div"),F(q0.$$.fragment),Rmo=l(),wi=a("p"),Pmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oI=a("a"),Bmo=o("from_pretrained()"),Imo=o(" class method or the "),rI=a("a"),qmo=o("from_config()"),Nmo=o(` class
method.`),jmo=l(),N0=a("p"),Dmo=o("This class cannot be instantiated directly using "),wne=a("code"),Gmo=o("__init__()"),Omo=o(" (throws an error)."),Vmo=l(),tt=a("div"),F(j0.$$.fragment),Xmo=l(),Ane=a("p"),zmo=o("Instantiates one of the base model classes of the library from a configuration."),Wmo=l(),Ai=a("p"),Qmo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),Hmo=o("not"),Umo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tI=a("a"),Jmo=o("from_pretrained()"),Ymo=o(" to load the model weights."),Kmo=l(),F(Kh.$$.fragment),Zmo=l(),Je=a("div"),F(D0.$$.fragment),ego=l(),Lne=a("p"),ogo=o("Instantiate one of the base model classes of the library from a pretrained model."),rgo=l(),La=a("p"),tgo=o("The model class to instantiate is selected based on the "),xne=a("code"),ago=o("model_type"),ngo=o(` property of the config object (either
passed as an argument or loaded from `),$ne=a("code"),sgo=o("pretrained_model_name_or_path"),lgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),igo=o("pretrained_model_name_or_path"),dgo=o(":"),cgo=l(),x=a("ul"),Zh=a("li"),Sne=a("strong"),fgo=o("albert"),mgo=o(" \u2014 "),aI=a("a"),ggo=o("AlbertModel"),hgo=o(" (ALBERT model)"),pgo=l(),ep=a("li"),Rne=a("strong"),_go=o("bart"),ugo=o(" \u2014 "),nI=a("a"),bgo=o("BartModel"),vgo=o(" (BART model)"),Fgo=l(),op=a("li"),Pne=a("strong"),Tgo=o("beit"),Mgo=o(" \u2014 "),sI=a("a"),Ego=o("BeitModel"),Cgo=o(" (BEiT model)"),wgo=l(),rp=a("li"),Bne=a("strong"),Ago=o("bert"),ygo=o(" \u2014 "),lI=a("a"),Lgo=o("BertModel"),xgo=o(" (BERT model)"),$go=l(),tp=a("li"),Ine=a("strong"),kgo=o("bert-generation"),Sgo=o(" \u2014 "),iI=a("a"),Rgo=o("BertGenerationEncoder"),Pgo=o(" (Bert Generation model)"),Bgo=l(),ap=a("li"),qne=a("strong"),Igo=o("big_bird"),qgo=o(" \u2014 "),dI=a("a"),Ngo=o("BigBirdModel"),jgo=o(" (BigBird model)"),Dgo=l(),np=a("li"),Nne=a("strong"),Ggo=o("bigbird_pegasus"),Ogo=o(" \u2014 "),cI=a("a"),Vgo=o("BigBirdPegasusModel"),Xgo=o(" (BigBirdPegasus model)"),zgo=l(),sp=a("li"),jne=a("strong"),Wgo=o("blenderbot"),Qgo=o(" \u2014 "),fI=a("a"),Hgo=o("BlenderbotModel"),Ugo=o(" (Blenderbot model)"),Jgo=l(),lp=a("li"),Dne=a("strong"),Ygo=o("blenderbot-small"),Kgo=o(" \u2014 "),mI=a("a"),Zgo=o("BlenderbotSmallModel"),eho=o(" (BlenderbotSmall model)"),oho=l(),ip=a("li"),Gne=a("strong"),rho=o("camembert"),tho=o(" \u2014 "),gI=a("a"),aho=o("CamembertModel"),nho=o(" (CamemBERT model)"),sho=l(),dp=a("li"),One=a("strong"),lho=o("canine"),iho=o(" \u2014 "),hI=a("a"),dho=o("CanineModel"),cho=o(" (Canine model)"),fho=l(),cp=a("li"),Vne=a("strong"),mho=o("clip"),gho=o(" \u2014 "),pI=a("a"),hho=o("CLIPModel"),pho=o(" (CLIP model)"),_ho=l(),fp=a("li"),Xne=a("strong"),uho=o("convbert"),bho=o(" \u2014 "),_I=a("a"),vho=o("ConvBertModel"),Fho=o(" (ConvBERT model)"),Tho=l(),mp=a("li"),zne=a("strong"),Mho=o("convnext"),Eho=o(" \u2014 "),uI=a("a"),Cho=o("ConvNextModel"),who=o(" (ConvNext model)"),Aho=l(),gp=a("li"),Wne=a("strong"),yho=o("ctrl"),Lho=o(" \u2014 "),bI=a("a"),xho=o("CTRLModel"),$ho=o(" (CTRL model)"),kho=l(),hp=a("li"),Qne=a("strong"),Sho=o("data2vec-audio"),Rho=o(" \u2014 "),vI=a("a"),Pho=o("Data2VecAudioModel"),Bho=o(" (Data2VecAudio model)"),Iho=l(),pp=a("li"),Hne=a("strong"),qho=o("data2vec-text"),Nho=o(" \u2014 "),FI=a("a"),jho=o("Data2VecTextModel"),Dho=o(" (Data2VecText model)"),Gho=l(),_p=a("li"),Une=a("strong"),Oho=o("data2vec-vision"),Vho=o(" \u2014 "),TI=a("a"),Xho=o("Data2VecVisionModel"),zho=o(" (Data2VecVision model)"),Who=l(),up=a("li"),Jne=a("strong"),Qho=o("deberta"),Hho=o(" \u2014 "),MI=a("a"),Uho=o("DebertaModel"),Jho=o(" (DeBERTa model)"),Yho=l(),bp=a("li"),Yne=a("strong"),Kho=o("deberta-v2"),Zho=o(" \u2014 "),EI=a("a"),epo=o("DebertaV2Model"),opo=o(" (DeBERTa-v2 model)"),rpo=l(),vp=a("li"),Kne=a("strong"),tpo=o("decision_transformer"),apo=o(" \u2014 "),CI=a("a"),npo=o("DecisionTransformerModel"),spo=o(" (Decision Transformer model)"),lpo=l(),Fp=a("li"),Zne=a("strong"),ipo=o("deit"),dpo=o(" \u2014 "),wI=a("a"),cpo=o("DeiTModel"),fpo=o(" (DeiT model)"),mpo=l(),Tp=a("li"),ese=a("strong"),gpo=o("detr"),hpo=o(" \u2014 "),AI=a("a"),ppo=o("DetrModel"),_po=o(" (DETR model)"),upo=l(),Mp=a("li"),ose=a("strong"),bpo=o("distilbert"),vpo=o(" \u2014 "),yI=a("a"),Fpo=o("DistilBertModel"),Tpo=o(" (DistilBERT model)"),Mpo=l(),Ep=a("li"),rse=a("strong"),Epo=o("dpr"),Cpo=o(" \u2014 "),LI=a("a"),wpo=o("DPRQuestionEncoder"),Apo=o(" (DPR model)"),ypo=l(),Cp=a("li"),tse=a("strong"),Lpo=o("dpt"),xpo=o(" \u2014 "),xI=a("a"),$po=o("DPTModel"),kpo=o(" (DPT model)"),Spo=l(),wp=a("li"),ase=a("strong"),Rpo=o("electra"),Ppo=o(" \u2014 "),$I=a("a"),Bpo=o("ElectraModel"),Ipo=o(" (ELECTRA model)"),qpo=l(),Ap=a("li"),nse=a("strong"),Npo=o("flaubert"),jpo=o(" \u2014 "),kI=a("a"),Dpo=o("FlaubertModel"),Gpo=o(" (FlauBERT model)"),Opo=l(),yp=a("li"),sse=a("strong"),Vpo=o("flava"),Xpo=o(" \u2014 "),SI=a("a"),zpo=o("FlavaModel"),Wpo=o(" (Flava model)"),Qpo=l(),Lp=a("li"),lse=a("strong"),Hpo=o("fnet"),Upo=o(" \u2014 "),RI=a("a"),Jpo=o("FNetModel"),Ypo=o(" (FNet model)"),Kpo=l(),xp=a("li"),ise=a("strong"),Zpo=o("fsmt"),e_o=o(" \u2014 "),PI=a("a"),o_o=o("FSMTModel"),r_o=o(" (FairSeq Machine-Translation model)"),t_o=l(),Rs=a("li"),dse=a("strong"),a_o=o("funnel"),n_o=o(" \u2014 "),BI=a("a"),s_o=o("FunnelModel"),l_o=o(" or "),II=a("a"),i_o=o("FunnelBaseModel"),d_o=o(" (Funnel Transformer model)"),c_o=l(),$p=a("li"),cse=a("strong"),f_o=o("glpn"),m_o=o(" \u2014 "),qI=a("a"),g_o=o("GLPNModel"),h_o=o(" (GLPN model)"),p_o=l(),kp=a("li"),fse=a("strong"),__o=o("gpt2"),u_o=o(" \u2014 "),NI=a("a"),b_o=o("GPT2Model"),v_o=o(" (OpenAI GPT-2 model)"),F_o=l(),Sp=a("li"),mse=a("strong"),T_o=o("gpt_neo"),M_o=o(" \u2014 "),jI=a("a"),E_o=o("GPTNeoModel"),C_o=o(" (GPT Neo model)"),w_o=l(),Rp=a("li"),gse=a("strong"),A_o=o("gptj"),y_o=o(" \u2014 "),DI=a("a"),L_o=o("GPTJModel"),x_o=o(" (GPT-J model)"),$_o=l(),Pp=a("li"),hse=a("strong"),k_o=o("hubert"),S_o=o(" \u2014 "),GI=a("a"),R_o=o("HubertModel"),P_o=o(" (Hubert model)"),B_o=l(),Bp=a("li"),pse=a("strong"),I_o=o("ibert"),q_o=o(" \u2014 "),OI=a("a"),N_o=o("IBertModel"),j_o=o(" (I-BERT model)"),D_o=l(),Ip=a("li"),_se=a("strong"),G_o=o("imagegpt"),O_o=o(" \u2014 "),VI=a("a"),V_o=o("ImageGPTModel"),X_o=o(" (ImageGPT model)"),z_o=l(),qp=a("li"),use=a("strong"),W_o=o("layoutlm"),Q_o=o(" \u2014 "),XI=a("a"),H_o=o("LayoutLMModel"),U_o=o(" (LayoutLM model)"),J_o=l(),Np=a("li"),bse=a("strong"),Y_o=o("layoutlmv2"),K_o=o(" \u2014 "),zI=a("a"),Z_o=o("LayoutLMv2Model"),euo=o(" (LayoutLMv2 model)"),ouo=l(),jp=a("li"),vse=a("strong"),ruo=o("led"),tuo=o(" \u2014 "),WI=a("a"),auo=o("LEDModel"),nuo=o(" (LED model)"),suo=l(),Dp=a("li"),Fse=a("strong"),luo=o("longformer"),iuo=o(" \u2014 "),QI=a("a"),duo=o("LongformerModel"),cuo=o(" (Longformer model)"),fuo=l(),Gp=a("li"),Tse=a("strong"),muo=o("luke"),guo=o(" \u2014 "),HI=a("a"),huo=o("LukeModel"),puo=o(" (LUKE model)"),_uo=l(),Op=a("li"),Mse=a("strong"),uuo=o("lxmert"),buo=o(" \u2014 "),UI=a("a"),vuo=o("LxmertModel"),Fuo=o(" (LXMERT model)"),Tuo=l(),Vp=a("li"),Ese=a("strong"),Muo=o("m2m_100"),Euo=o(" \u2014 "),JI=a("a"),Cuo=o("M2M100Model"),wuo=o(" (M2M100 model)"),Auo=l(),Xp=a("li"),Cse=a("strong"),yuo=o("marian"),Luo=o(" \u2014 "),YI=a("a"),xuo=o("MarianModel"),$uo=o(" (Marian model)"),kuo=l(),zp=a("li"),wse=a("strong"),Suo=o("maskformer"),Ruo=o(" \u2014 "),KI=a("a"),Puo=o("MaskFormerModel"),Buo=o(" (MaskFormer model)"),Iuo=l(),Wp=a("li"),Ase=a("strong"),quo=o("mbart"),Nuo=o(" \u2014 "),ZI=a("a"),juo=o("MBartModel"),Duo=o(" (mBART model)"),Guo=l(),Qp=a("li"),yse=a("strong"),Ouo=o("megatron-bert"),Vuo=o(" \u2014 "),eq=a("a"),Xuo=o("MegatronBertModel"),zuo=o(" (MegatronBert model)"),Wuo=l(),Hp=a("li"),Lse=a("strong"),Quo=o("mobilebert"),Huo=o(" \u2014 "),oq=a("a"),Uuo=o("MobileBertModel"),Juo=o(" (MobileBERT model)"),Yuo=l(),Up=a("li"),xse=a("strong"),Kuo=o("mpnet"),Zuo=o(" \u2014 "),rq=a("a"),e1o=o("MPNetModel"),o1o=o(" (MPNet model)"),r1o=l(),Jp=a("li"),$se=a("strong"),t1o=o("mt5"),a1o=o(" \u2014 "),tq=a("a"),n1o=o("MT5Model"),s1o=o(" (mT5 model)"),l1o=l(),Yp=a("li"),kse=a("strong"),i1o=o("nystromformer"),d1o=o(" \u2014 "),aq=a("a"),c1o=o("NystromformerModel"),f1o=o(" (Nystromformer model)"),m1o=l(),Kp=a("li"),Sse=a("strong"),g1o=o("openai-gpt"),h1o=o(" \u2014 "),nq=a("a"),p1o=o("OpenAIGPTModel"),_1o=o(" (OpenAI GPT model)"),u1o=l(),Zp=a("li"),Rse=a("strong"),b1o=o("opt"),v1o=o(" \u2014 "),sq=a("a"),F1o=o("OPTModel"),T1o=o(" (OPT model)"),M1o=l(),e_=a("li"),Pse=a("strong"),E1o=o("pegasus"),C1o=o(" \u2014 "),lq=a("a"),w1o=o("PegasusModel"),A1o=o(" (Pegasus model)"),y1o=l(),o_=a("li"),Bse=a("strong"),L1o=o("perceiver"),x1o=o(" \u2014 "),iq=a("a"),$1o=o("PerceiverModel"),k1o=o(" (Perceiver model)"),S1o=l(),r_=a("li"),Ise=a("strong"),R1o=o("plbart"),P1o=o(" \u2014 "),dq=a("a"),B1o=o("PLBartModel"),I1o=o(" (PLBart model)"),q1o=l(),t_=a("li"),qse=a("strong"),N1o=o("poolformer"),j1o=o(" \u2014 "),cq=a("a"),D1o=o("PoolFormerModel"),G1o=o(" (PoolFormer model)"),O1o=l(),a_=a("li"),Nse=a("strong"),V1o=o("prophetnet"),X1o=o(" \u2014 "),fq=a("a"),z1o=o("ProphetNetModel"),W1o=o(" (ProphetNet model)"),Q1o=l(),n_=a("li"),jse=a("strong"),H1o=o("qdqbert"),U1o=o(" \u2014 "),mq=a("a"),J1o=o("QDQBertModel"),Y1o=o(" (QDQBert model)"),K1o=l(),s_=a("li"),Dse=a("strong"),Z1o=o("reformer"),ebo=o(" \u2014 "),gq=a("a"),obo=o("ReformerModel"),rbo=o(" (Reformer model)"),tbo=l(),l_=a("li"),Gse=a("strong"),abo=o("regnet"),nbo=o(" \u2014 "),hq=a("a"),sbo=o("RegNetModel"),lbo=o(" (RegNet model)"),ibo=l(),i_=a("li"),Ose=a("strong"),dbo=o("rembert"),cbo=o(" \u2014 "),pq=a("a"),fbo=o("RemBertModel"),mbo=o(" (RemBERT model)"),gbo=l(),d_=a("li"),Vse=a("strong"),hbo=o("resnet"),pbo=o(" \u2014 "),_q=a("a"),_bo=o("ResNetModel"),ubo=o(" (ResNet model)"),bbo=l(),c_=a("li"),Xse=a("strong"),vbo=o("retribert"),Fbo=o(" \u2014 "),uq=a("a"),Tbo=o("RetriBertModel"),Mbo=o(" (RetriBERT model)"),Ebo=l(),f_=a("li"),zse=a("strong"),Cbo=o("roberta"),wbo=o(" \u2014 "),bq=a("a"),Abo=o("RobertaModel"),ybo=o(" (RoBERTa model)"),Lbo=l(),m_=a("li"),Wse=a("strong"),xbo=o("roformer"),$bo=o(" \u2014 "),vq=a("a"),kbo=o("RoFormerModel"),Sbo=o(" (RoFormer model)"),Rbo=l(),g_=a("li"),Qse=a("strong"),Pbo=o("segformer"),Bbo=o(" \u2014 "),Fq=a("a"),Ibo=o("SegformerModel"),qbo=o(" (SegFormer model)"),Nbo=l(),h_=a("li"),Hse=a("strong"),jbo=o("sew"),Dbo=o(" \u2014 "),Tq=a("a"),Gbo=o("SEWModel"),Obo=o(" (SEW model)"),Vbo=l(),p_=a("li"),Use=a("strong"),Xbo=o("sew-d"),zbo=o(" \u2014 "),Mq=a("a"),Wbo=o("SEWDModel"),Qbo=o(" (SEW-D model)"),Hbo=l(),__=a("li"),Jse=a("strong"),Ubo=o("speech_to_text"),Jbo=o(" \u2014 "),Eq=a("a"),Ybo=o("Speech2TextModel"),Kbo=o(" (Speech2Text model)"),Zbo=l(),u_=a("li"),Yse=a("strong"),e2o=o("splinter"),o2o=o(" \u2014 "),Cq=a("a"),r2o=o("SplinterModel"),t2o=o(" (Splinter model)"),a2o=l(),b_=a("li"),Kse=a("strong"),n2o=o("squeezebert"),s2o=o(" \u2014 "),wq=a("a"),l2o=o("SqueezeBertModel"),i2o=o(" (SqueezeBERT model)"),d2o=l(),v_=a("li"),Zse=a("strong"),c2o=o("swin"),f2o=o(" \u2014 "),Aq=a("a"),m2o=o("SwinModel"),g2o=o(" (Swin model)"),h2o=l(),F_=a("li"),ele=a("strong"),p2o=o("t5"),_2o=o(" \u2014 "),yq=a("a"),u2o=o("T5Model"),b2o=o(" (T5 model)"),v2o=l(),T_=a("li"),ole=a("strong"),F2o=o("tapas"),T2o=o(" \u2014 "),Lq=a("a"),M2o=o("TapasModel"),E2o=o(" (TAPAS model)"),C2o=l(),M_=a("li"),rle=a("strong"),w2o=o("trajectory_transformer"),A2o=o(" \u2014 "),xq=a("a"),y2o=o("TrajectoryTransformerModel"),L2o=o(" (Trajectory Transformer model)"),x2o=l(),E_=a("li"),tle=a("strong"),$2o=o("transfo-xl"),k2o=o(" \u2014 "),$q=a("a"),S2o=o("TransfoXLModel"),R2o=o(" (Transformer-XL model)"),P2o=l(),C_=a("li"),ale=a("strong"),B2o=o("unispeech"),I2o=o(" \u2014 "),kq=a("a"),q2o=o("UniSpeechModel"),N2o=o(" (UniSpeech model)"),j2o=l(),w_=a("li"),nle=a("strong"),D2o=o("unispeech-sat"),G2o=o(" \u2014 "),Sq=a("a"),O2o=o("UniSpeechSatModel"),V2o=o(" (UniSpeechSat model)"),X2o=l(),A_=a("li"),sle=a("strong"),z2o=o("van"),W2o=o(" \u2014 "),Rq=a("a"),Q2o=o("VanModel"),H2o=o(" (VAN model)"),U2o=l(),y_=a("li"),lle=a("strong"),J2o=o("vilt"),Y2o=o(" \u2014 "),Pq=a("a"),K2o=o("ViltModel"),Z2o=o(" (ViLT model)"),evo=l(),L_=a("li"),ile=a("strong"),ovo=o("vision-text-dual-encoder"),rvo=o(" \u2014 "),Bq=a("a"),tvo=o("VisionTextDualEncoderModel"),avo=o(" (VisionTextDualEncoder model)"),nvo=l(),x_=a("li"),dle=a("strong"),svo=o("visual_bert"),lvo=o(" \u2014 "),Iq=a("a"),ivo=o("VisualBertModel"),dvo=o(" (VisualBert model)"),cvo=l(),$_=a("li"),cle=a("strong"),fvo=o("vit"),mvo=o(" \u2014 "),qq=a("a"),gvo=o("ViTModel"),hvo=o(" (ViT model)"),pvo=l(),k_=a("li"),fle=a("strong"),_vo=o("vit_mae"),uvo=o(" \u2014 "),Nq=a("a"),bvo=o("ViTMAEModel"),vvo=o(" (ViTMAE model)"),Fvo=l(),S_=a("li"),mle=a("strong"),Tvo=o("wav2vec2"),Mvo=o(" \u2014 "),jq=a("a"),Evo=o("Wav2Vec2Model"),Cvo=o(" (Wav2Vec2 model)"),wvo=l(),R_=a("li"),gle=a("strong"),Avo=o("wav2vec2-conformer"),yvo=o(" \u2014 "),Dq=a("a"),Lvo=o("Wav2Vec2ConformerModel"),xvo=o(" (Wav2Vec2-Conformer model)"),$vo=l(),P_=a("li"),hle=a("strong"),kvo=o("wavlm"),Svo=o(" \u2014 "),Gq=a("a"),Rvo=o("WavLMModel"),Pvo=o(" (WavLM model)"),Bvo=l(),B_=a("li"),ple=a("strong"),Ivo=o("xglm"),qvo=o(" \u2014 "),Oq=a("a"),Nvo=o("XGLMModel"),jvo=o(" (XGLM model)"),Dvo=l(),I_=a("li"),_le=a("strong"),Gvo=o("xlm"),Ovo=o(" \u2014 "),Vq=a("a"),Vvo=o("XLMModel"),Xvo=o(" (XLM model)"),zvo=l(),q_=a("li"),ule=a("strong"),Wvo=o("xlm-prophetnet"),Qvo=o(" \u2014 "),Xq=a("a"),Hvo=o("XLMProphetNetModel"),Uvo=o(" (XLMProphetNet model)"),Jvo=l(),N_=a("li"),ble=a("strong"),Yvo=o("xlm-roberta"),Kvo=o(" \u2014 "),zq=a("a"),Zvo=o("XLMRobertaModel"),e3o=o(" (XLM-RoBERTa model)"),o3o=l(),j_=a("li"),vle=a("strong"),r3o=o("xlm-roberta-xl"),t3o=o(" \u2014 "),Wq=a("a"),a3o=o("XLMRobertaXLModel"),n3o=o(" (XLM-RoBERTa-XL model)"),s3o=l(),D_=a("li"),Fle=a("strong"),l3o=o("xlnet"),i3o=o(" \u2014 "),Qq=a("a"),d3o=o("XLNetModel"),c3o=o(" (XLNet model)"),f3o=l(),G_=a("li"),Tle=a("strong"),m3o=o("yolos"),g3o=o(" \u2014 "),Hq=a("a"),h3o=o("YolosModel"),p3o=o(" (YOLOS model)"),_3o=l(),O_=a("li"),Mle=a("strong"),u3o=o("yoso"),b3o=o(" \u2014 "),Uq=a("a"),v3o=o("YosoModel"),F3o=o(" (YOSO model)"),T3o=l(),V_=a("p"),M3o=o("The model is set in evaluation mode by default using "),Ele=a("code"),E3o=o("model.eval()"),C3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=a("code"),w3o=o("model.train()"),A3o=l(),F(X_.$$.fragment),KIe=l(),yi=a("h2"),z_=a("a"),wle=a("span"),F(G0.$$.fragment),y3o=l(),Ale=a("span"),L3o=o("AutoModelForPreTraining"),ZIe=l(),xo=a("div"),F(O0.$$.fragment),x3o=l(),Li=a("p"),$3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jq=a("a"),k3o=o("from_pretrained()"),S3o=o(" class method or the "),Yq=a("a"),R3o=o("from_config()"),P3o=o(` class
method.`),B3o=l(),V0=a("p"),I3o=o("This class cannot be instantiated directly using "),yle=a("code"),q3o=o("__init__()"),N3o=o(" (throws an error)."),j3o=l(),at=a("div"),F(X0.$$.fragment),D3o=l(),Lle=a("p"),G3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O3o=l(),xi=a("p"),V3o=o(`Note:
Loading a model from its configuration file does `),xle=a("strong"),X3o=o("not"),z3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kq=a("a"),W3o=o("from_pretrained()"),Q3o=o(" to load the model weights."),H3o=l(),F(W_.$$.fragment),U3o=l(),Ye=a("div"),F(z0.$$.fragment),J3o=l(),$le=a("p"),Y3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K3o=l(),xa=a("p"),Z3o=o("The model class to instantiate is selected based on the "),kle=a("code"),eFo=o("model_type"),oFo=o(` property of the config object (either
passed as an argument or loaded from `),Sle=a("code"),rFo=o("pretrained_model_name_or_path"),tFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),aFo=o("pretrained_model_name_or_path"),nFo=o(":"),sFo=l(),G=a("ul"),Q_=a("li"),Ple=a("strong"),lFo=o("albert"),iFo=o(" \u2014 "),Zq=a("a"),dFo=o("AlbertForPreTraining"),cFo=o(" (ALBERT model)"),fFo=l(),H_=a("li"),Ble=a("strong"),mFo=o("bart"),gFo=o(" \u2014 "),eN=a("a"),hFo=o("BartForConditionalGeneration"),pFo=o(" (BART model)"),_Fo=l(),U_=a("li"),Ile=a("strong"),uFo=o("bert"),bFo=o(" \u2014 "),oN=a("a"),vFo=o("BertForPreTraining"),FFo=o(" (BERT model)"),TFo=l(),J_=a("li"),qle=a("strong"),MFo=o("big_bird"),EFo=o(" \u2014 "),rN=a("a"),CFo=o("BigBirdForPreTraining"),wFo=o(" (BigBird model)"),AFo=l(),Y_=a("li"),Nle=a("strong"),yFo=o("camembert"),LFo=o(" \u2014 "),tN=a("a"),xFo=o("CamembertForMaskedLM"),$Fo=o(" (CamemBERT model)"),kFo=l(),K_=a("li"),jle=a("strong"),SFo=o("ctrl"),RFo=o(" \u2014 "),aN=a("a"),PFo=o("CTRLLMHeadModel"),BFo=o(" (CTRL model)"),IFo=l(),Z_=a("li"),Dle=a("strong"),qFo=o("data2vec-text"),NFo=o(" \u2014 "),nN=a("a"),jFo=o("Data2VecTextForMaskedLM"),DFo=o(" (Data2VecText model)"),GFo=l(),eu=a("li"),Gle=a("strong"),OFo=o("deberta"),VFo=o(" \u2014 "),sN=a("a"),XFo=o("DebertaForMaskedLM"),zFo=o(" (DeBERTa model)"),WFo=l(),ou=a("li"),Ole=a("strong"),QFo=o("deberta-v2"),HFo=o(" \u2014 "),lN=a("a"),UFo=o("DebertaV2ForMaskedLM"),JFo=o(" (DeBERTa-v2 model)"),YFo=l(),ru=a("li"),Vle=a("strong"),KFo=o("distilbert"),ZFo=o(" \u2014 "),iN=a("a"),eTo=o("DistilBertForMaskedLM"),oTo=o(" (DistilBERT model)"),rTo=l(),tu=a("li"),Xle=a("strong"),tTo=o("electra"),aTo=o(" \u2014 "),dN=a("a"),nTo=o("ElectraForPreTraining"),sTo=o(" (ELECTRA model)"),lTo=l(),au=a("li"),zle=a("strong"),iTo=o("flaubert"),dTo=o(" \u2014 "),cN=a("a"),cTo=o("FlaubertWithLMHeadModel"),fTo=o(" (FlauBERT model)"),mTo=l(),nu=a("li"),Wle=a("strong"),gTo=o("flava"),hTo=o(" \u2014 "),fN=a("a"),pTo=o("FlavaForPreTraining"),_To=o(" (Flava model)"),uTo=l(),su=a("li"),Qle=a("strong"),bTo=o("fnet"),vTo=o(" \u2014 "),mN=a("a"),FTo=o("FNetForPreTraining"),TTo=o(" (FNet model)"),MTo=l(),lu=a("li"),Hle=a("strong"),ETo=o("fsmt"),CTo=o(" \u2014 "),gN=a("a"),wTo=o("FSMTForConditionalGeneration"),ATo=o(" (FairSeq Machine-Translation model)"),yTo=l(),iu=a("li"),Ule=a("strong"),LTo=o("funnel"),xTo=o(" \u2014 "),hN=a("a"),$To=o("FunnelForPreTraining"),kTo=o(" (Funnel Transformer model)"),STo=l(),du=a("li"),Jle=a("strong"),RTo=o("gpt2"),PTo=o(" \u2014 "),pN=a("a"),BTo=o("GPT2LMHeadModel"),ITo=o(" (OpenAI GPT-2 model)"),qTo=l(),cu=a("li"),Yle=a("strong"),NTo=o("ibert"),jTo=o(" \u2014 "),_N=a("a"),DTo=o("IBertForMaskedLM"),GTo=o(" (I-BERT model)"),OTo=l(),fu=a("li"),Kle=a("strong"),VTo=o("layoutlm"),XTo=o(" \u2014 "),uN=a("a"),zTo=o("LayoutLMForMaskedLM"),WTo=o(" (LayoutLM model)"),QTo=l(),mu=a("li"),Zle=a("strong"),HTo=o("longformer"),UTo=o(" \u2014 "),bN=a("a"),JTo=o("LongformerForMaskedLM"),YTo=o(" (Longformer model)"),KTo=l(),gu=a("li"),eie=a("strong"),ZTo=o("lxmert"),e8o=o(" \u2014 "),vN=a("a"),o8o=o("LxmertForPreTraining"),r8o=o(" (LXMERT model)"),t8o=l(),hu=a("li"),oie=a("strong"),a8o=o("megatron-bert"),n8o=o(" \u2014 "),FN=a("a"),s8o=o("MegatronBertForPreTraining"),l8o=o(" (MegatronBert model)"),i8o=l(),pu=a("li"),rie=a("strong"),d8o=o("mobilebert"),c8o=o(" \u2014 "),TN=a("a"),f8o=o("MobileBertForPreTraining"),m8o=o(" (MobileBERT model)"),g8o=l(),_u=a("li"),tie=a("strong"),h8o=o("mpnet"),p8o=o(" \u2014 "),MN=a("a"),_8o=o("MPNetForMaskedLM"),u8o=o(" (MPNet model)"),b8o=l(),uu=a("li"),aie=a("strong"),v8o=o("openai-gpt"),F8o=o(" \u2014 "),EN=a("a"),T8o=o("OpenAIGPTLMHeadModel"),M8o=o(" (OpenAI GPT model)"),E8o=l(),bu=a("li"),nie=a("strong"),C8o=o("retribert"),w8o=o(" \u2014 "),CN=a("a"),A8o=o("RetriBertModel"),y8o=o(" (RetriBERT model)"),L8o=l(),vu=a("li"),sie=a("strong"),x8o=o("roberta"),$8o=o(" \u2014 "),wN=a("a"),k8o=o("RobertaForMaskedLM"),S8o=o(" (RoBERTa model)"),R8o=l(),Fu=a("li"),lie=a("strong"),P8o=o("splinter"),B8o=o(" \u2014 "),AN=a("a"),I8o=o("SplinterForPreTraining"),q8o=o(" (Splinter model)"),N8o=l(),Tu=a("li"),iie=a("strong"),j8o=o("squeezebert"),D8o=o(" \u2014 "),yN=a("a"),G8o=o("SqueezeBertForMaskedLM"),O8o=o(" (SqueezeBERT model)"),V8o=l(),Mu=a("li"),die=a("strong"),X8o=o("t5"),z8o=o(" \u2014 "),LN=a("a"),W8o=o("T5ForConditionalGeneration"),Q8o=o(" (T5 model)"),H8o=l(),Eu=a("li"),cie=a("strong"),U8o=o("tapas"),J8o=o(" \u2014 "),xN=a("a"),Y8o=o("TapasForMaskedLM"),K8o=o(" (TAPAS model)"),Z8o=l(),Cu=a("li"),fie=a("strong"),e7o=o("transfo-xl"),o7o=o(" \u2014 "),$N=a("a"),r7o=o("TransfoXLLMHeadModel"),t7o=o(" (Transformer-XL model)"),a7o=l(),wu=a("li"),mie=a("strong"),n7o=o("unispeech"),s7o=o(" \u2014 "),kN=a("a"),l7o=o("UniSpeechForPreTraining"),i7o=o(" (UniSpeech model)"),d7o=l(),Au=a("li"),gie=a("strong"),c7o=o("unispeech-sat"),f7o=o(" \u2014 "),SN=a("a"),m7o=o("UniSpeechSatForPreTraining"),g7o=o(" (UniSpeechSat model)"),h7o=l(),yu=a("li"),hie=a("strong"),p7o=o("visual_bert"),_7o=o(" \u2014 "),RN=a("a"),u7o=o("VisualBertForPreTraining"),b7o=o(" (VisualBert model)"),v7o=l(),Lu=a("li"),pie=a("strong"),F7o=o("vit_mae"),T7o=o(" \u2014 "),PN=a("a"),M7o=o("ViTMAEForPreTraining"),E7o=o(" (ViTMAE model)"),C7o=l(),xu=a("li"),_ie=a("strong"),w7o=o("wav2vec2"),A7o=o(" \u2014 "),BN=a("a"),y7o=o("Wav2Vec2ForPreTraining"),L7o=o(" (Wav2Vec2 model)"),x7o=l(),$u=a("li"),uie=a("strong"),$7o=o("wav2vec2-conformer"),k7o=o(" \u2014 "),IN=a("a"),S7o=o("Wav2Vec2ConformerForPreTraining"),R7o=o(" (Wav2Vec2-Conformer model)"),P7o=l(),ku=a("li"),bie=a("strong"),B7o=o("xlm"),I7o=o(" \u2014 "),qN=a("a"),q7o=o("XLMWithLMHeadModel"),N7o=o(" (XLM model)"),j7o=l(),Su=a("li"),vie=a("strong"),D7o=o("xlm-roberta"),G7o=o(" \u2014 "),NN=a("a"),O7o=o("XLMRobertaForMaskedLM"),V7o=o(" (XLM-RoBERTa model)"),X7o=l(),Ru=a("li"),Fie=a("strong"),z7o=o("xlm-roberta-xl"),W7o=o(" \u2014 "),jN=a("a"),Q7o=o("XLMRobertaXLForMaskedLM"),H7o=o(" (XLM-RoBERTa-XL model)"),U7o=l(),Pu=a("li"),Tie=a("strong"),J7o=o("xlnet"),Y7o=o(" \u2014 "),DN=a("a"),K7o=o("XLNetLMHeadModel"),Z7o=o(" (XLNet model)"),eMo=l(),Bu=a("p"),oMo=o("The model is set in evaluation mode by default using "),Mie=a("code"),rMo=o("model.eval()"),tMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=a("code"),aMo=o("model.train()"),nMo=l(),F(Iu.$$.fragment),eqe=l(),$i=a("h2"),qu=a("a"),Cie=a("span"),F(W0.$$.fragment),sMo=l(),wie=a("span"),lMo=o("AutoModelForCausalLM"),oqe=l(),$o=a("div"),F(Q0.$$.fragment),iMo=l(),ki=a("p"),dMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GN=a("a"),cMo=o("from_pretrained()"),fMo=o(" class method or the "),ON=a("a"),mMo=o("from_config()"),gMo=o(` class
method.`),hMo=l(),H0=a("p"),pMo=o("This class cannot be instantiated directly using "),Aie=a("code"),_Mo=o("__init__()"),uMo=o(" (throws an error)."),bMo=l(),nt=a("div"),F(U0.$$.fragment),vMo=l(),yie=a("p"),FMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TMo=l(),Si=a("p"),MMo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),EMo=o("not"),CMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),wMo=o("from_pretrained()"),AMo=o(" to load the model weights."),yMo=l(),F(Nu.$$.fragment),LMo=l(),Ke=a("div"),F(J0.$$.fragment),xMo=l(),xie=a("p"),$Mo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kMo=l(),$a=a("p"),SMo=o("The model class to instantiate is selected based on the "),$ie=a("code"),RMo=o("model_type"),PMo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),BMo=o("pretrained_model_name_or_path"),IMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),qMo=o("pretrained_model_name_or_path"),NMo=o(":"),jMo=l(),z=a("ul"),ju=a("li"),Rie=a("strong"),DMo=o("bart"),GMo=o(" \u2014 "),XN=a("a"),OMo=o("BartForCausalLM"),VMo=o(" (BART model)"),XMo=l(),Du=a("li"),Pie=a("strong"),zMo=o("bert"),WMo=o(" \u2014 "),zN=a("a"),QMo=o("BertLMHeadModel"),HMo=o(" (BERT model)"),UMo=l(),Gu=a("li"),Bie=a("strong"),JMo=o("bert-generation"),YMo=o(" \u2014 "),WN=a("a"),KMo=o("BertGenerationDecoder"),ZMo=o(" (Bert Generation model)"),e4o=l(),Ou=a("li"),Iie=a("strong"),o4o=o("big_bird"),r4o=o(" \u2014 "),QN=a("a"),t4o=o("BigBirdForCausalLM"),a4o=o(" (BigBird model)"),n4o=l(),Vu=a("li"),qie=a("strong"),s4o=o("bigbird_pegasus"),l4o=o(" \u2014 "),HN=a("a"),i4o=o("BigBirdPegasusForCausalLM"),d4o=o(" (BigBirdPegasus model)"),c4o=l(),Xu=a("li"),Nie=a("strong"),f4o=o("blenderbot"),m4o=o(" \u2014 "),UN=a("a"),g4o=o("BlenderbotForCausalLM"),h4o=o(" (Blenderbot model)"),p4o=l(),zu=a("li"),jie=a("strong"),_4o=o("blenderbot-small"),u4o=o(" \u2014 "),JN=a("a"),b4o=o("BlenderbotSmallForCausalLM"),v4o=o(" (BlenderbotSmall model)"),F4o=l(),Wu=a("li"),Die=a("strong"),T4o=o("camembert"),M4o=o(" \u2014 "),YN=a("a"),E4o=o("CamembertForCausalLM"),C4o=o(" (CamemBERT model)"),w4o=l(),Qu=a("li"),Gie=a("strong"),A4o=o("ctrl"),y4o=o(" \u2014 "),KN=a("a"),L4o=o("CTRLLMHeadModel"),x4o=o(" (CTRL model)"),$4o=l(),Hu=a("li"),Oie=a("strong"),k4o=o("data2vec-text"),S4o=o(" \u2014 "),ZN=a("a"),R4o=o("Data2VecTextForCausalLM"),P4o=o(" (Data2VecText model)"),B4o=l(),Uu=a("li"),Vie=a("strong"),I4o=o("electra"),q4o=o(" \u2014 "),ej=a("a"),N4o=o("ElectraForCausalLM"),j4o=o(" (ELECTRA model)"),D4o=l(),Ju=a("li"),Xie=a("strong"),G4o=o("gpt2"),O4o=o(" \u2014 "),oj=a("a"),V4o=o("GPT2LMHeadModel"),X4o=o(" (OpenAI GPT-2 model)"),z4o=l(),Yu=a("li"),zie=a("strong"),W4o=o("gpt_neo"),Q4o=o(" \u2014 "),rj=a("a"),H4o=o("GPTNeoForCausalLM"),U4o=o(" (GPT Neo model)"),J4o=l(),Ku=a("li"),Wie=a("strong"),Y4o=o("gptj"),K4o=o(" \u2014 "),tj=a("a"),Z4o=o("GPTJForCausalLM"),eEo=o(" (GPT-J model)"),oEo=l(),Zu=a("li"),Qie=a("strong"),rEo=o("marian"),tEo=o(" \u2014 "),aj=a("a"),aEo=o("MarianForCausalLM"),nEo=o(" (Marian model)"),sEo=l(),e1=a("li"),Hie=a("strong"),lEo=o("mbart"),iEo=o(" \u2014 "),nj=a("a"),dEo=o("MBartForCausalLM"),cEo=o(" (mBART model)"),fEo=l(),o1=a("li"),Uie=a("strong"),mEo=o("megatron-bert"),gEo=o(" \u2014 "),sj=a("a"),hEo=o("MegatronBertForCausalLM"),pEo=o(" (MegatronBert model)"),_Eo=l(),r1=a("li"),Jie=a("strong"),uEo=o("openai-gpt"),bEo=o(" \u2014 "),lj=a("a"),vEo=o("OpenAIGPTLMHeadModel"),FEo=o(" (OpenAI GPT model)"),TEo=l(),t1=a("li"),Yie=a("strong"),MEo=o("opt"),EEo=o(" \u2014 "),ij=a("a"),CEo=o("OPTForCausalLM"),wEo=o(" (OPT model)"),AEo=l(),a1=a("li"),Kie=a("strong"),yEo=o("pegasus"),LEo=o(" \u2014 "),dj=a("a"),xEo=o("PegasusForCausalLM"),$Eo=o(" (Pegasus model)"),kEo=l(),n1=a("li"),Zie=a("strong"),SEo=o("plbart"),REo=o(" \u2014 "),cj=a("a"),PEo=o("PLBartForCausalLM"),BEo=o(" (PLBart model)"),IEo=l(),s1=a("li"),ede=a("strong"),qEo=o("prophetnet"),NEo=o(" \u2014 "),fj=a("a"),jEo=o("ProphetNetForCausalLM"),DEo=o(" (ProphetNet model)"),GEo=l(),l1=a("li"),ode=a("strong"),OEo=o("qdqbert"),VEo=o(" \u2014 "),mj=a("a"),XEo=o("QDQBertLMHeadModel"),zEo=o(" (QDQBert model)"),WEo=l(),i1=a("li"),rde=a("strong"),QEo=o("reformer"),HEo=o(" \u2014 "),gj=a("a"),UEo=o("ReformerModelWithLMHead"),JEo=o(" (Reformer model)"),YEo=l(),d1=a("li"),tde=a("strong"),KEo=o("rembert"),ZEo=o(" \u2014 "),hj=a("a"),eCo=o("RemBertForCausalLM"),oCo=o(" (RemBERT model)"),rCo=l(),c1=a("li"),ade=a("strong"),tCo=o("roberta"),aCo=o(" \u2014 "),pj=a("a"),nCo=o("RobertaForCausalLM"),sCo=o(" (RoBERTa model)"),lCo=l(),f1=a("li"),nde=a("strong"),iCo=o("roformer"),dCo=o(" \u2014 "),_j=a("a"),cCo=o("RoFormerForCausalLM"),fCo=o(" (RoFormer model)"),mCo=l(),m1=a("li"),sde=a("strong"),gCo=o("speech_to_text_2"),hCo=o(" \u2014 "),uj=a("a"),pCo=o("Speech2Text2ForCausalLM"),_Co=o(" (Speech2Text2 model)"),uCo=l(),g1=a("li"),lde=a("strong"),bCo=o("transfo-xl"),vCo=o(" \u2014 "),bj=a("a"),FCo=o("TransfoXLLMHeadModel"),TCo=o(" (Transformer-XL model)"),MCo=l(),h1=a("li"),ide=a("strong"),ECo=o("trocr"),CCo=o(" \u2014 "),vj=a("a"),wCo=o("TrOCRForCausalLM"),ACo=o(" (TrOCR model)"),yCo=l(),p1=a("li"),dde=a("strong"),LCo=o("xglm"),xCo=o(" \u2014 "),Fj=a("a"),$Co=o("XGLMForCausalLM"),kCo=o(" (XGLM model)"),SCo=l(),_1=a("li"),cde=a("strong"),RCo=o("xlm"),PCo=o(" \u2014 "),Tj=a("a"),BCo=o("XLMWithLMHeadModel"),ICo=o(" (XLM model)"),qCo=l(),u1=a("li"),fde=a("strong"),NCo=o("xlm-prophetnet"),jCo=o(" \u2014 "),Mj=a("a"),DCo=o("XLMProphetNetForCausalLM"),GCo=o(" (XLMProphetNet model)"),OCo=l(),b1=a("li"),mde=a("strong"),VCo=o("xlm-roberta"),XCo=o(" \u2014 "),Ej=a("a"),zCo=o("XLMRobertaForCausalLM"),WCo=o(" (XLM-RoBERTa model)"),QCo=l(),v1=a("li"),gde=a("strong"),HCo=o("xlm-roberta-xl"),UCo=o(" \u2014 "),Cj=a("a"),JCo=o("XLMRobertaXLForCausalLM"),YCo=o(" (XLM-RoBERTa-XL model)"),KCo=l(),F1=a("li"),hde=a("strong"),ZCo=o("xlnet"),e5o=o(" \u2014 "),wj=a("a"),o5o=o("XLNetLMHeadModel"),r5o=o(" (XLNet model)"),t5o=l(),T1=a("p"),a5o=o("The model is set in evaluation mode by default using "),pde=a("code"),n5o=o("model.eval()"),s5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),l5o=o("model.train()"),i5o=l(),F(M1.$$.fragment),rqe=l(),Ri=a("h2"),E1=a("a"),ude=a("span"),F(Y0.$$.fragment),d5o=l(),bde=a("span"),c5o=o("AutoModelForMaskedLM"),tqe=l(),ko=a("div"),F(K0.$$.fragment),f5o=l(),Pi=a("p"),m5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aj=a("a"),g5o=o("from_pretrained()"),h5o=o(" class method or the "),yj=a("a"),p5o=o("from_config()"),_5o=o(` class
method.`),u5o=l(),Z0=a("p"),b5o=o("This class cannot be instantiated directly using "),vde=a("code"),v5o=o("__init__()"),F5o=o(" (throws an error)."),T5o=l(),st=a("div"),F(e6.$$.fragment),M5o=l(),Fde=a("p"),E5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C5o=l(),Bi=a("p"),w5o=o(`Note:
Loading a model from its configuration file does `),Tde=a("strong"),A5o=o("not"),y5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=a("a"),L5o=o("from_pretrained()"),x5o=o(" to load the model weights."),$5o=l(),F(C1.$$.fragment),k5o=l(),Ze=a("div"),F(o6.$$.fragment),S5o=l(),Mde=a("p"),R5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P5o=l(),ka=a("p"),B5o=o("The model class to instantiate is selected based on the "),Ede=a("code"),I5o=o("model_type"),q5o=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),N5o=o("pretrained_model_name_or_path"),j5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),D5o=o("pretrained_model_name_or_path"),G5o=o(":"),O5o=l(),W=a("ul"),w1=a("li"),Ade=a("strong"),V5o=o("albert"),X5o=o(" \u2014 "),xj=a("a"),z5o=o("AlbertForMaskedLM"),W5o=o(" (ALBERT model)"),Q5o=l(),A1=a("li"),yde=a("strong"),H5o=o("bart"),U5o=o(" \u2014 "),$j=a("a"),J5o=o("BartForConditionalGeneration"),Y5o=o(" (BART model)"),K5o=l(),y1=a("li"),Lde=a("strong"),Z5o=o("bert"),ewo=o(" \u2014 "),kj=a("a"),owo=o("BertForMaskedLM"),rwo=o(" (BERT model)"),two=l(),L1=a("li"),xde=a("strong"),awo=o("big_bird"),nwo=o(" \u2014 "),Sj=a("a"),swo=o("BigBirdForMaskedLM"),lwo=o(" (BigBird model)"),iwo=l(),x1=a("li"),$de=a("strong"),dwo=o("camembert"),cwo=o(" \u2014 "),Rj=a("a"),fwo=o("CamembertForMaskedLM"),mwo=o(" (CamemBERT model)"),gwo=l(),$1=a("li"),kde=a("strong"),hwo=o("convbert"),pwo=o(" \u2014 "),Pj=a("a"),_wo=o("ConvBertForMaskedLM"),uwo=o(" (ConvBERT model)"),bwo=l(),k1=a("li"),Sde=a("strong"),vwo=o("data2vec-text"),Fwo=o(" \u2014 "),Bj=a("a"),Two=o("Data2VecTextForMaskedLM"),Mwo=o(" (Data2VecText model)"),Ewo=l(),S1=a("li"),Rde=a("strong"),Cwo=o("deberta"),wwo=o(" \u2014 "),Ij=a("a"),Awo=o("DebertaForMaskedLM"),ywo=o(" (DeBERTa model)"),Lwo=l(),R1=a("li"),Pde=a("strong"),xwo=o("deberta-v2"),$wo=o(" \u2014 "),qj=a("a"),kwo=o("DebertaV2ForMaskedLM"),Swo=o(" (DeBERTa-v2 model)"),Rwo=l(),P1=a("li"),Bde=a("strong"),Pwo=o("distilbert"),Bwo=o(" \u2014 "),Nj=a("a"),Iwo=o("DistilBertForMaskedLM"),qwo=o(" (DistilBERT model)"),Nwo=l(),B1=a("li"),Ide=a("strong"),jwo=o("electra"),Dwo=o(" \u2014 "),jj=a("a"),Gwo=o("ElectraForMaskedLM"),Owo=o(" (ELECTRA model)"),Vwo=l(),I1=a("li"),qde=a("strong"),Xwo=o("flaubert"),zwo=o(" \u2014 "),Dj=a("a"),Wwo=o("FlaubertWithLMHeadModel"),Qwo=o(" (FlauBERT model)"),Hwo=l(),q1=a("li"),Nde=a("strong"),Uwo=o("fnet"),Jwo=o(" \u2014 "),Gj=a("a"),Ywo=o("FNetForMaskedLM"),Kwo=o(" (FNet model)"),Zwo=l(),N1=a("li"),jde=a("strong"),eAo=o("funnel"),oAo=o(" \u2014 "),Oj=a("a"),rAo=o("FunnelForMaskedLM"),tAo=o(" (Funnel Transformer model)"),aAo=l(),j1=a("li"),Dde=a("strong"),nAo=o("ibert"),sAo=o(" \u2014 "),Vj=a("a"),lAo=o("IBertForMaskedLM"),iAo=o(" (I-BERT model)"),dAo=l(),D1=a("li"),Gde=a("strong"),cAo=o("layoutlm"),fAo=o(" \u2014 "),Xj=a("a"),mAo=o("LayoutLMForMaskedLM"),gAo=o(" (LayoutLM model)"),hAo=l(),G1=a("li"),Ode=a("strong"),pAo=o("longformer"),_Ao=o(" \u2014 "),zj=a("a"),uAo=o("LongformerForMaskedLM"),bAo=o(" (Longformer model)"),vAo=l(),O1=a("li"),Vde=a("strong"),FAo=o("mbart"),TAo=o(" \u2014 "),Wj=a("a"),MAo=o("MBartForConditionalGeneration"),EAo=o(" (mBART model)"),CAo=l(),V1=a("li"),Xde=a("strong"),wAo=o("megatron-bert"),AAo=o(" \u2014 "),Qj=a("a"),yAo=o("MegatronBertForMaskedLM"),LAo=o(" (MegatronBert model)"),xAo=l(),X1=a("li"),zde=a("strong"),$Ao=o("mobilebert"),kAo=o(" \u2014 "),Hj=a("a"),SAo=o("MobileBertForMaskedLM"),RAo=o(" (MobileBERT model)"),PAo=l(),z1=a("li"),Wde=a("strong"),BAo=o("mpnet"),IAo=o(" \u2014 "),Uj=a("a"),qAo=o("MPNetForMaskedLM"),NAo=o(" (MPNet model)"),jAo=l(),W1=a("li"),Qde=a("strong"),DAo=o("nystromformer"),GAo=o(" \u2014 "),Jj=a("a"),OAo=o("NystromformerForMaskedLM"),VAo=o(" (Nystromformer model)"),XAo=l(),Q1=a("li"),Hde=a("strong"),zAo=o("perceiver"),WAo=o(" \u2014 "),Yj=a("a"),QAo=o("PerceiverForMaskedLM"),HAo=o(" (Perceiver model)"),UAo=l(),H1=a("li"),Ude=a("strong"),JAo=o("qdqbert"),YAo=o(" \u2014 "),Kj=a("a"),KAo=o("QDQBertForMaskedLM"),ZAo=o(" (QDQBert model)"),e0o=l(),U1=a("li"),Jde=a("strong"),o0o=o("reformer"),r0o=o(" \u2014 "),Zj=a("a"),t0o=o("ReformerForMaskedLM"),a0o=o(" (Reformer model)"),n0o=l(),J1=a("li"),Yde=a("strong"),s0o=o("rembert"),l0o=o(" \u2014 "),eD=a("a"),i0o=o("RemBertForMaskedLM"),d0o=o(" (RemBERT model)"),c0o=l(),Y1=a("li"),Kde=a("strong"),f0o=o("roberta"),m0o=o(" \u2014 "),oD=a("a"),g0o=o("RobertaForMaskedLM"),h0o=o(" (RoBERTa model)"),p0o=l(),K1=a("li"),Zde=a("strong"),_0o=o("roformer"),u0o=o(" \u2014 "),rD=a("a"),b0o=o("RoFormerForMaskedLM"),v0o=o(" (RoFormer model)"),F0o=l(),Z1=a("li"),ece=a("strong"),T0o=o("squeezebert"),M0o=o(" \u2014 "),tD=a("a"),E0o=o("SqueezeBertForMaskedLM"),C0o=o(" (SqueezeBERT model)"),w0o=l(),eb=a("li"),oce=a("strong"),A0o=o("tapas"),y0o=o(" \u2014 "),aD=a("a"),L0o=o("TapasForMaskedLM"),x0o=o(" (TAPAS model)"),$0o=l(),ob=a("li"),rce=a("strong"),k0o=o("wav2vec2"),S0o=o(" \u2014 "),tce=a("code"),R0o=o("Wav2Vec2ForMaskedLM"),P0o=o(" (Wav2Vec2 model)"),B0o=l(),rb=a("li"),ace=a("strong"),I0o=o("xlm"),q0o=o(" \u2014 "),nD=a("a"),N0o=o("XLMWithLMHeadModel"),j0o=o(" (XLM model)"),D0o=l(),tb=a("li"),nce=a("strong"),G0o=o("xlm-roberta"),O0o=o(" \u2014 "),sD=a("a"),V0o=o("XLMRobertaForMaskedLM"),X0o=o(" (XLM-RoBERTa model)"),z0o=l(),ab=a("li"),sce=a("strong"),W0o=o("xlm-roberta-xl"),Q0o=o(" \u2014 "),lD=a("a"),H0o=o("XLMRobertaXLForMaskedLM"),U0o=o(" (XLM-RoBERTa-XL model)"),J0o=l(),nb=a("li"),lce=a("strong"),Y0o=o("yoso"),K0o=o(" \u2014 "),iD=a("a"),Z0o=o("YosoForMaskedLM"),e6o=o(" (YOSO model)"),o6o=l(),sb=a("p"),r6o=o("The model is set in evaluation mode by default using "),ice=a("code"),t6o=o("model.eval()"),a6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),n6o=o("model.train()"),s6o=l(),F(lb.$$.fragment),aqe=l(),Ii=a("h2"),ib=a("a"),cce=a("span"),F(r6.$$.fragment),l6o=l(),fce=a("span"),i6o=o("AutoModelForSeq2SeqLM"),nqe=l(),So=a("div"),F(t6.$$.fragment),d6o=l(),qi=a("p"),c6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dD=a("a"),f6o=o("from_pretrained()"),m6o=o(" class method or the "),cD=a("a"),g6o=o("from_config()"),h6o=o(` class
method.`),p6o=l(),a6=a("p"),_6o=o("This class cannot be instantiated directly using "),mce=a("code"),u6o=o("__init__()"),b6o=o(" (throws an error)."),v6o=l(),lt=a("div"),F(n6.$$.fragment),F6o=l(),gce=a("p"),T6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M6o=l(),Ni=a("p"),E6o=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),C6o=o("not"),w6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=a("a"),A6o=o("from_pretrained()"),y6o=o(" to load the model weights."),L6o=l(),F(db.$$.fragment),x6o=l(),eo=a("div"),F(s6.$$.fragment),$6o=l(),pce=a("p"),k6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S6o=l(),Sa=a("p"),R6o=o("The model class to instantiate is selected based on the "),_ce=a("code"),P6o=o("model_type"),B6o=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),I6o=o("pretrained_model_name_or_path"),q6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),N6o=o("pretrained_model_name_or_path"),j6o=o(":"),D6o=l(),_e=a("ul"),cb=a("li"),vce=a("strong"),G6o=o("bart"),O6o=o(" \u2014 "),mD=a("a"),V6o=o("BartForConditionalGeneration"),X6o=o(" (BART model)"),z6o=l(),fb=a("li"),Fce=a("strong"),W6o=o("bigbird_pegasus"),Q6o=o(" \u2014 "),gD=a("a"),H6o=o("BigBirdPegasusForConditionalGeneration"),U6o=o(" (BigBirdPegasus model)"),J6o=l(),mb=a("li"),Tce=a("strong"),Y6o=o("blenderbot"),K6o=o(" \u2014 "),hD=a("a"),Z6o=o("BlenderbotForConditionalGeneration"),eyo=o(" (Blenderbot model)"),oyo=l(),gb=a("li"),Mce=a("strong"),ryo=o("blenderbot-small"),tyo=o(" \u2014 "),pD=a("a"),ayo=o("BlenderbotSmallForConditionalGeneration"),nyo=o(" (BlenderbotSmall model)"),syo=l(),hb=a("li"),Ece=a("strong"),lyo=o("encoder-decoder"),iyo=o(" \u2014 "),_D=a("a"),dyo=o("EncoderDecoderModel"),cyo=o(" (Encoder decoder model)"),fyo=l(),pb=a("li"),Cce=a("strong"),myo=o("fsmt"),gyo=o(" \u2014 "),uD=a("a"),hyo=o("FSMTForConditionalGeneration"),pyo=o(" (FairSeq Machine-Translation model)"),_yo=l(),_b=a("li"),wce=a("strong"),uyo=o("led"),byo=o(" \u2014 "),bD=a("a"),vyo=o("LEDForConditionalGeneration"),Fyo=o(" (LED model)"),Tyo=l(),ub=a("li"),Ace=a("strong"),Myo=o("m2m_100"),Eyo=o(" \u2014 "),vD=a("a"),Cyo=o("M2M100ForConditionalGeneration"),wyo=o(" (M2M100 model)"),Ayo=l(),bb=a("li"),yce=a("strong"),yyo=o("marian"),Lyo=o(" \u2014 "),FD=a("a"),xyo=o("MarianMTModel"),$yo=o(" (Marian model)"),kyo=l(),vb=a("li"),Lce=a("strong"),Syo=o("mbart"),Ryo=o(" \u2014 "),TD=a("a"),Pyo=o("MBartForConditionalGeneration"),Byo=o(" (mBART model)"),Iyo=l(),Fb=a("li"),xce=a("strong"),qyo=o("mt5"),Nyo=o(" \u2014 "),MD=a("a"),jyo=o("MT5ForConditionalGeneration"),Dyo=o(" (mT5 model)"),Gyo=l(),Tb=a("li"),$ce=a("strong"),Oyo=o("pegasus"),Vyo=o(" \u2014 "),ED=a("a"),Xyo=o("PegasusForConditionalGeneration"),zyo=o(" (Pegasus model)"),Wyo=l(),Mb=a("li"),kce=a("strong"),Qyo=o("plbart"),Hyo=o(" \u2014 "),CD=a("a"),Uyo=o("PLBartForConditionalGeneration"),Jyo=o(" (PLBart model)"),Yyo=l(),Eb=a("li"),Sce=a("strong"),Kyo=o("prophetnet"),Zyo=o(" \u2014 "),wD=a("a"),eLo=o("ProphetNetForConditionalGeneration"),oLo=o(" (ProphetNet model)"),rLo=l(),Cb=a("li"),Rce=a("strong"),tLo=o("t5"),aLo=o(" \u2014 "),AD=a("a"),nLo=o("T5ForConditionalGeneration"),sLo=o(" (T5 model)"),lLo=l(),wb=a("li"),Pce=a("strong"),iLo=o("xlm-prophetnet"),dLo=o(" \u2014 "),yD=a("a"),cLo=o("XLMProphetNetForConditionalGeneration"),fLo=o(" (XLMProphetNet model)"),mLo=l(),Ab=a("p"),gLo=o("The model is set in evaluation mode by default using "),Bce=a("code"),hLo=o("model.eval()"),pLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),_Lo=o("model.train()"),uLo=l(),F(yb.$$.fragment),sqe=l(),ji=a("h2"),Lb=a("a"),qce=a("span"),F(l6.$$.fragment),bLo=l(),Nce=a("span"),vLo=o("AutoModelForSequenceClassification"),lqe=l(),Ro=a("div"),F(i6.$$.fragment),FLo=l(),Di=a("p"),TLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LD=a("a"),MLo=o("from_pretrained()"),ELo=o(" class method or the "),xD=a("a"),CLo=o("from_config()"),wLo=o(` class
method.`),ALo=l(),d6=a("p"),yLo=o("This class cannot be instantiated directly using "),jce=a("code"),LLo=o("__init__()"),xLo=o(" (throws an error)."),$Lo=l(),it=a("div"),F(c6.$$.fragment),kLo=l(),Dce=a("p"),SLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),RLo=l(),Gi=a("p"),PLo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),BLo=o("not"),ILo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),qLo=o("from_pretrained()"),NLo=o(" to load the model weights."),jLo=l(),F(xb.$$.fragment),DLo=l(),oo=a("div"),F(f6.$$.fragment),GLo=l(),Oce=a("p"),OLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VLo=l(),Ra=a("p"),XLo=o("The model class to instantiate is selected based on the "),Vce=a("code"),zLo=o("model_type"),WLo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),QLo=o("pretrained_model_name_or_path"),HLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(":"),YLo=l(),q=a("ul"),$b=a("li"),Wce=a("strong"),KLo=o("albert"),ZLo=o(" \u2014 "),kD=a("a"),exo=o("AlbertForSequenceClassification"),oxo=o(" (ALBERT model)"),rxo=l(),kb=a("li"),Qce=a("strong"),txo=o("bart"),axo=o(" \u2014 "),SD=a("a"),nxo=o("BartForSequenceClassification"),sxo=o(" (BART model)"),lxo=l(),Sb=a("li"),Hce=a("strong"),ixo=o("bert"),dxo=o(" \u2014 "),RD=a("a"),cxo=o("BertForSequenceClassification"),fxo=o(" (BERT model)"),mxo=l(),Rb=a("li"),Uce=a("strong"),gxo=o("big_bird"),hxo=o(" \u2014 "),PD=a("a"),pxo=o("BigBirdForSequenceClassification"),_xo=o(" (BigBird model)"),uxo=l(),Pb=a("li"),Jce=a("strong"),bxo=o("bigbird_pegasus"),vxo=o(" \u2014 "),BD=a("a"),Fxo=o("BigBirdPegasusForSequenceClassification"),Txo=o(" (BigBirdPegasus model)"),Mxo=l(),Bb=a("li"),Yce=a("strong"),Exo=o("camembert"),Cxo=o(" \u2014 "),ID=a("a"),wxo=o("CamembertForSequenceClassification"),Axo=o(" (CamemBERT model)"),yxo=l(),Ib=a("li"),Kce=a("strong"),Lxo=o("canine"),xxo=o(" \u2014 "),qD=a("a"),$xo=o("CanineForSequenceClassification"),kxo=o(" (Canine model)"),Sxo=l(),qb=a("li"),Zce=a("strong"),Rxo=o("convbert"),Pxo=o(" \u2014 "),ND=a("a"),Bxo=o("ConvBertForSequenceClassification"),Ixo=o(" (ConvBERT model)"),qxo=l(),Nb=a("li"),efe=a("strong"),Nxo=o("ctrl"),jxo=o(" \u2014 "),jD=a("a"),Dxo=o("CTRLForSequenceClassification"),Gxo=o(" (CTRL model)"),Oxo=l(),jb=a("li"),ofe=a("strong"),Vxo=o("data2vec-text"),Xxo=o(" \u2014 "),DD=a("a"),zxo=o("Data2VecTextForSequenceClassification"),Wxo=o(" (Data2VecText model)"),Qxo=l(),Db=a("li"),rfe=a("strong"),Hxo=o("deberta"),Uxo=o(" \u2014 "),GD=a("a"),Jxo=o("DebertaForSequenceClassification"),Yxo=o(" (DeBERTa model)"),Kxo=l(),Gb=a("li"),tfe=a("strong"),Zxo=o("deberta-v2"),e9o=o(" \u2014 "),OD=a("a"),o9o=o("DebertaV2ForSequenceClassification"),r9o=o(" (DeBERTa-v2 model)"),t9o=l(),Ob=a("li"),afe=a("strong"),a9o=o("distilbert"),n9o=o(" \u2014 "),VD=a("a"),s9o=o("DistilBertForSequenceClassification"),l9o=o(" (DistilBERT model)"),i9o=l(),Vb=a("li"),nfe=a("strong"),d9o=o("electra"),c9o=o(" \u2014 "),XD=a("a"),f9o=o("ElectraForSequenceClassification"),m9o=o(" (ELECTRA model)"),g9o=l(),Xb=a("li"),sfe=a("strong"),h9o=o("flaubert"),p9o=o(" \u2014 "),zD=a("a"),_9o=o("FlaubertForSequenceClassification"),u9o=o(" (FlauBERT model)"),b9o=l(),zb=a("li"),lfe=a("strong"),v9o=o("fnet"),F9o=o(" \u2014 "),WD=a("a"),T9o=o("FNetForSequenceClassification"),M9o=o(" (FNet model)"),E9o=l(),Wb=a("li"),ife=a("strong"),C9o=o("funnel"),w9o=o(" \u2014 "),QD=a("a"),A9o=o("FunnelForSequenceClassification"),y9o=o(" (Funnel Transformer model)"),L9o=l(),Qb=a("li"),dfe=a("strong"),x9o=o("gpt2"),$9o=o(" \u2014 "),HD=a("a"),k9o=o("GPT2ForSequenceClassification"),S9o=o(" (OpenAI GPT-2 model)"),R9o=l(),Hb=a("li"),cfe=a("strong"),P9o=o("gpt_neo"),B9o=o(" \u2014 "),UD=a("a"),I9o=o("GPTNeoForSequenceClassification"),q9o=o(" (GPT Neo model)"),N9o=l(),Ub=a("li"),ffe=a("strong"),j9o=o("gptj"),D9o=o(" \u2014 "),JD=a("a"),G9o=o("GPTJForSequenceClassification"),O9o=o(" (GPT-J model)"),V9o=l(),Jb=a("li"),mfe=a("strong"),X9o=o("ibert"),z9o=o(" \u2014 "),YD=a("a"),W9o=o("IBertForSequenceClassification"),Q9o=o(" (I-BERT model)"),H9o=l(),Yb=a("li"),gfe=a("strong"),U9o=o("layoutlm"),J9o=o(" \u2014 "),KD=a("a"),Y9o=o("LayoutLMForSequenceClassification"),K9o=o(" (LayoutLM model)"),Z9o=l(),Kb=a("li"),hfe=a("strong"),e$o=o("layoutlmv2"),o$o=o(" \u2014 "),ZD=a("a"),r$o=o("LayoutLMv2ForSequenceClassification"),t$o=o(" (LayoutLMv2 model)"),a$o=l(),Zb=a("li"),pfe=a("strong"),n$o=o("led"),s$o=o(" \u2014 "),eG=a("a"),l$o=o("LEDForSequenceClassification"),i$o=o(" (LED model)"),d$o=l(),e2=a("li"),_fe=a("strong"),c$o=o("longformer"),f$o=o(" \u2014 "),oG=a("a"),m$o=o("LongformerForSequenceClassification"),g$o=o(" (Longformer model)"),h$o=l(),o2=a("li"),ufe=a("strong"),p$o=o("mbart"),_$o=o(" \u2014 "),rG=a("a"),u$o=o("MBartForSequenceClassification"),b$o=o(" (mBART model)"),v$o=l(),r2=a("li"),bfe=a("strong"),F$o=o("megatron-bert"),T$o=o(" \u2014 "),tG=a("a"),M$o=o("MegatronBertForSequenceClassification"),E$o=o(" (MegatronBert model)"),C$o=l(),t2=a("li"),vfe=a("strong"),w$o=o("mobilebert"),A$o=o(" \u2014 "),aG=a("a"),y$o=o("MobileBertForSequenceClassification"),L$o=o(" (MobileBERT model)"),x$o=l(),a2=a("li"),Ffe=a("strong"),$$o=o("mpnet"),k$o=o(" \u2014 "),nG=a("a"),S$o=o("MPNetForSequenceClassification"),R$o=o(" (MPNet model)"),P$o=l(),n2=a("li"),Tfe=a("strong"),B$o=o("nystromformer"),I$o=o(" \u2014 "),sG=a("a"),q$o=o("NystromformerForSequenceClassification"),N$o=o(" (Nystromformer model)"),j$o=l(),s2=a("li"),Mfe=a("strong"),D$o=o("openai-gpt"),G$o=o(" \u2014 "),lG=a("a"),O$o=o("OpenAIGPTForSequenceClassification"),V$o=o(" (OpenAI GPT model)"),X$o=l(),l2=a("li"),Efe=a("strong"),z$o=o("perceiver"),W$o=o(" \u2014 "),iG=a("a"),Q$o=o("PerceiverForSequenceClassification"),H$o=o(" (Perceiver model)"),U$o=l(),i2=a("li"),Cfe=a("strong"),J$o=o("plbart"),Y$o=o(" \u2014 "),dG=a("a"),K$o=o("PLBartForSequenceClassification"),Z$o=o(" (PLBart model)"),eko=l(),d2=a("li"),wfe=a("strong"),oko=o("qdqbert"),rko=o(" \u2014 "),cG=a("a"),tko=o("QDQBertForSequenceClassification"),ako=o(" (QDQBert model)"),nko=l(),c2=a("li"),Afe=a("strong"),sko=o("reformer"),lko=o(" \u2014 "),fG=a("a"),iko=o("ReformerForSequenceClassification"),dko=o(" (Reformer model)"),cko=l(),f2=a("li"),yfe=a("strong"),fko=o("rembert"),mko=o(" \u2014 "),mG=a("a"),gko=o("RemBertForSequenceClassification"),hko=o(" (RemBERT model)"),pko=l(),m2=a("li"),Lfe=a("strong"),_ko=o("roberta"),uko=o(" \u2014 "),gG=a("a"),bko=o("RobertaForSequenceClassification"),vko=o(" (RoBERTa model)"),Fko=l(),g2=a("li"),xfe=a("strong"),Tko=o("roformer"),Mko=o(" \u2014 "),hG=a("a"),Eko=o("RoFormerForSequenceClassification"),Cko=o(" (RoFormer model)"),wko=l(),h2=a("li"),$fe=a("strong"),Ako=o("squeezebert"),yko=o(" \u2014 "),pG=a("a"),Lko=o("SqueezeBertForSequenceClassification"),xko=o(" (SqueezeBERT model)"),$ko=l(),p2=a("li"),kfe=a("strong"),kko=o("tapas"),Sko=o(" \u2014 "),_G=a("a"),Rko=o("TapasForSequenceClassification"),Pko=o(" (TAPAS model)"),Bko=l(),_2=a("li"),Sfe=a("strong"),Iko=o("transfo-xl"),qko=o(" \u2014 "),uG=a("a"),Nko=o("TransfoXLForSequenceClassification"),jko=o(" (Transformer-XL model)"),Dko=l(),u2=a("li"),Rfe=a("strong"),Gko=o("xlm"),Oko=o(" \u2014 "),bG=a("a"),Vko=o("XLMForSequenceClassification"),Xko=o(" (XLM model)"),zko=l(),b2=a("li"),Pfe=a("strong"),Wko=o("xlm-roberta"),Qko=o(" \u2014 "),vG=a("a"),Hko=o("XLMRobertaForSequenceClassification"),Uko=o(" (XLM-RoBERTa model)"),Jko=l(),v2=a("li"),Bfe=a("strong"),Yko=o("xlm-roberta-xl"),Kko=o(" \u2014 "),FG=a("a"),Zko=o("XLMRobertaXLForSequenceClassification"),eSo=o(" (XLM-RoBERTa-XL model)"),oSo=l(),F2=a("li"),Ife=a("strong"),rSo=o("xlnet"),tSo=o(" \u2014 "),TG=a("a"),aSo=o("XLNetForSequenceClassification"),nSo=o(" (XLNet model)"),sSo=l(),T2=a("li"),qfe=a("strong"),lSo=o("yoso"),iSo=o(" \u2014 "),MG=a("a"),dSo=o("YosoForSequenceClassification"),cSo=o(" (YOSO model)"),fSo=l(),M2=a("p"),mSo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),gSo=o("model.eval()"),hSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),pSo=o("model.train()"),_So=l(),F(E2.$$.fragment),iqe=l(),Oi=a("h2"),C2=a("a"),Dfe=a("span"),F(m6.$$.fragment),uSo=l(),Gfe=a("span"),bSo=o("AutoModelForMultipleChoice"),dqe=l(),Po=a("div"),F(g6.$$.fragment),vSo=l(),Vi=a("p"),FSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EG=a("a"),TSo=o("from_pretrained()"),MSo=o(" class method or the "),CG=a("a"),ESo=o("from_config()"),CSo=o(` class
method.`),wSo=l(),h6=a("p"),ASo=o("This class cannot be instantiated directly using "),Ofe=a("code"),ySo=o("__init__()"),LSo=o(" (throws an error)."),xSo=l(),dt=a("div"),F(p6.$$.fragment),$So=l(),Vfe=a("p"),kSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SSo=l(),Xi=a("p"),RSo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),PSo=o("not"),BSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),ISo=o("from_pretrained()"),qSo=o(" to load the model weights."),NSo=l(),F(w2.$$.fragment),jSo=l(),ro=a("div"),F(_6.$$.fragment),DSo=l(),zfe=a("p"),GSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OSo=l(),Pa=a("p"),VSo=o("The model class to instantiate is selected based on the "),Wfe=a("code"),XSo=o("model_type"),zSo=o(` property of the config object (either
passed as an argument or loaded from `),Qfe=a("code"),WSo=o("pretrained_model_name_or_path"),QSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),HSo=o("pretrained_model_name_or_path"),USo=o(":"),JSo=l(),Y=a("ul"),A2=a("li"),Ufe=a("strong"),YSo=o("albert"),KSo=o(" \u2014 "),AG=a("a"),ZSo=o("AlbertForMultipleChoice"),eRo=o(" (ALBERT model)"),oRo=l(),y2=a("li"),Jfe=a("strong"),rRo=o("bert"),tRo=o(" \u2014 "),yG=a("a"),aRo=o("BertForMultipleChoice"),nRo=o(" (BERT model)"),sRo=l(),L2=a("li"),Yfe=a("strong"),lRo=o("big_bird"),iRo=o(" \u2014 "),LG=a("a"),dRo=o("BigBirdForMultipleChoice"),cRo=o(" (BigBird model)"),fRo=l(),x2=a("li"),Kfe=a("strong"),mRo=o("camembert"),gRo=o(" \u2014 "),xG=a("a"),hRo=o("CamembertForMultipleChoice"),pRo=o(" (CamemBERT model)"),_Ro=l(),$2=a("li"),Zfe=a("strong"),uRo=o("canine"),bRo=o(" \u2014 "),$G=a("a"),vRo=o("CanineForMultipleChoice"),FRo=o(" (Canine model)"),TRo=l(),k2=a("li"),eme=a("strong"),MRo=o("convbert"),ERo=o(" \u2014 "),kG=a("a"),CRo=o("ConvBertForMultipleChoice"),wRo=o(" (ConvBERT model)"),ARo=l(),S2=a("li"),ome=a("strong"),yRo=o("data2vec-text"),LRo=o(" \u2014 "),SG=a("a"),xRo=o("Data2VecTextForMultipleChoice"),$Ro=o(" (Data2VecText model)"),kRo=l(),R2=a("li"),rme=a("strong"),SRo=o("deberta-v2"),RRo=o(" \u2014 "),RG=a("a"),PRo=o("DebertaV2ForMultipleChoice"),BRo=o(" (DeBERTa-v2 model)"),IRo=l(),P2=a("li"),tme=a("strong"),qRo=o("distilbert"),NRo=o(" \u2014 "),PG=a("a"),jRo=o("DistilBertForMultipleChoice"),DRo=o(" (DistilBERT model)"),GRo=l(),B2=a("li"),ame=a("strong"),ORo=o("electra"),VRo=o(" \u2014 "),BG=a("a"),XRo=o("ElectraForMultipleChoice"),zRo=o(" (ELECTRA model)"),WRo=l(),I2=a("li"),nme=a("strong"),QRo=o("flaubert"),HRo=o(" \u2014 "),IG=a("a"),URo=o("FlaubertForMultipleChoice"),JRo=o(" (FlauBERT model)"),YRo=l(),q2=a("li"),sme=a("strong"),KRo=o("fnet"),ZRo=o(" \u2014 "),qG=a("a"),ePo=o("FNetForMultipleChoice"),oPo=o(" (FNet model)"),rPo=l(),N2=a("li"),lme=a("strong"),tPo=o("funnel"),aPo=o(" \u2014 "),NG=a("a"),nPo=o("FunnelForMultipleChoice"),sPo=o(" (Funnel Transformer model)"),lPo=l(),j2=a("li"),ime=a("strong"),iPo=o("ibert"),dPo=o(" \u2014 "),jG=a("a"),cPo=o("IBertForMultipleChoice"),fPo=o(" (I-BERT model)"),mPo=l(),D2=a("li"),dme=a("strong"),gPo=o("longformer"),hPo=o(" \u2014 "),DG=a("a"),pPo=o("LongformerForMultipleChoice"),_Po=o(" (Longformer model)"),uPo=l(),G2=a("li"),cme=a("strong"),bPo=o("megatron-bert"),vPo=o(" \u2014 "),GG=a("a"),FPo=o("MegatronBertForMultipleChoice"),TPo=o(" (MegatronBert model)"),MPo=l(),O2=a("li"),fme=a("strong"),EPo=o("mobilebert"),CPo=o(" \u2014 "),OG=a("a"),wPo=o("MobileBertForMultipleChoice"),APo=o(" (MobileBERT model)"),yPo=l(),V2=a("li"),mme=a("strong"),LPo=o("mpnet"),xPo=o(" \u2014 "),VG=a("a"),$Po=o("MPNetForMultipleChoice"),kPo=o(" (MPNet model)"),SPo=l(),X2=a("li"),gme=a("strong"),RPo=o("nystromformer"),PPo=o(" \u2014 "),XG=a("a"),BPo=o("NystromformerForMultipleChoice"),IPo=o(" (Nystromformer model)"),qPo=l(),z2=a("li"),hme=a("strong"),NPo=o("qdqbert"),jPo=o(" \u2014 "),zG=a("a"),DPo=o("QDQBertForMultipleChoice"),GPo=o(" (QDQBert model)"),OPo=l(),W2=a("li"),pme=a("strong"),VPo=o("rembert"),XPo=o(" \u2014 "),WG=a("a"),zPo=o("RemBertForMultipleChoice"),WPo=o(" (RemBERT model)"),QPo=l(),Q2=a("li"),_me=a("strong"),HPo=o("roberta"),UPo=o(" \u2014 "),QG=a("a"),JPo=o("RobertaForMultipleChoice"),YPo=o(" (RoBERTa model)"),KPo=l(),H2=a("li"),ume=a("strong"),ZPo=o("roformer"),eBo=o(" \u2014 "),HG=a("a"),oBo=o("RoFormerForMultipleChoice"),rBo=o(" (RoFormer model)"),tBo=l(),U2=a("li"),bme=a("strong"),aBo=o("squeezebert"),nBo=o(" \u2014 "),UG=a("a"),sBo=o("SqueezeBertForMultipleChoice"),lBo=o(" (SqueezeBERT model)"),iBo=l(),J2=a("li"),vme=a("strong"),dBo=o("xlm"),cBo=o(" \u2014 "),JG=a("a"),fBo=o("XLMForMultipleChoice"),mBo=o(" (XLM model)"),gBo=l(),Y2=a("li"),Fme=a("strong"),hBo=o("xlm-roberta"),pBo=o(" \u2014 "),YG=a("a"),_Bo=o("XLMRobertaForMultipleChoice"),uBo=o(" (XLM-RoBERTa model)"),bBo=l(),K2=a("li"),Tme=a("strong"),vBo=o("xlm-roberta-xl"),FBo=o(" \u2014 "),KG=a("a"),TBo=o("XLMRobertaXLForMultipleChoice"),MBo=o(" (XLM-RoBERTa-XL model)"),EBo=l(),Z2=a("li"),Mme=a("strong"),CBo=o("xlnet"),wBo=o(" \u2014 "),ZG=a("a"),ABo=o("XLNetForMultipleChoice"),yBo=o(" (XLNet model)"),LBo=l(),ev=a("li"),Eme=a("strong"),xBo=o("yoso"),$Bo=o(" \u2014 "),eO=a("a"),kBo=o("YosoForMultipleChoice"),SBo=o(" (YOSO model)"),RBo=l(),ov=a("p"),PBo=o("The model is set in evaluation mode by default using "),Cme=a("code"),BBo=o("model.eval()"),IBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),qBo=o("model.train()"),NBo=l(),F(rv.$$.fragment),cqe=l(),zi=a("h2"),tv=a("a"),Ame=a("span"),F(u6.$$.fragment),jBo=l(),yme=a("span"),DBo=o("AutoModelForNextSentencePrediction"),fqe=l(),Bo=a("div"),F(b6.$$.fragment),GBo=l(),Wi=a("p"),OBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oO=a("a"),VBo=o("from_pretrained()"),XBo=o(" class method or the "),rO=a("a"),zBo=o("from_config()"),WBo=o(` class
method.`),QBo=l(),v6=a("p"),HBo=o("This class cannot be instantiated directly using "),Lme=a("code"),UBo=o("__init__()"),JBo=o(" (throws an error)."),YBo=l(),ct=a("div"),F(F6.$$.fragment),KBo=l(),xme=a("p"),ZBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eIo=l(),Qi=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),aIo=o("from_pretrained()"),nIo=o(" to load the model weights."),sIo=l(),F(av.$$.fragment),lIo=l(),to=a("div"),F(T6.$$.fragment),iIo=l(),kme=a("p"),dIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cIo=l(),Ba=a("p"),fIo=o("The model class to instantiate is selected based on the "),Sme=a("code"),mIo=o("model_type"),gIo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),hIo=o("pretrained_model_name_or_path"),pIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),_Io=o("pretrained_model_name_or_path"),uIo=o(":"),bIo=l(),Yr=a("ul"),nv=a("li"),Bme=a("strong"),vIo=o("bert"),FIo=o(" \u2014 "),aO=a("a"),TIo=o("BertForNextSentencePrediction"),MIo=o(" (BERT model)"),EIo=l(),sv=a("li"),Ime=a("strong"),CIo=o("fnet"),wIo=o(" \u2014 "),nO=a("a"),AIo=o("FNetForNextSentencePrediction"),yIo=o(" (FNet model)"),LIo=l(),lv=a("li"),qme=a("strong"),xIo=o("megatron-bert"),$Io=o(" \u2014 "),sO=a("a"),kIo=o("MegatronBertForNextSentencePrediction"),SIo=o(" (MegatronBert model)"),RIo=l(),iv=a("li"),Nme=a("strong"),PIo=o("mobilebert"),BIo=o(" \u2014 "),lO=a("a"),IIo=o("MobileBertForNextSentencePrediction"),qIo=o(" (MobileBERT model)"),NIo=l(),dv=a("li"),jme=a("strong"),jIo=o("qdqbert"),DIo=o(" \u2014 "),iO=a("a"),GIo=o("QDQBertForNextSentencePrediction"),OIo=o(" (QDQBert model)"),VIo=l(),cv=a("p"),XIo=o("The model is set in evaluation mode by default using "),Dme=a("code"),zIo=o("model.eval()"),WIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=a("code"),QIo=o("model.train()"),HIo=l(),F(fv.$$.fragment),mqe=l(),Hi=a("h2"),mv=a("a"),Ome=a("span"),F(M6.$$.fragment),UIo=l(),Vme=a("span"),JIo=o("AutoModelForTokenClassification"),gqe=l(),Io=a("div"),F(E6.$$.fragment),YIo=l(),Ui=a("p"),KIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dO=a("a"),ZIo=o("from_pretrained()"),eqo=o(" class method or the "),cO=a("a"),oqo=o("from_config()"),rqo=o(` class
method.`),tqo=l(),C6=a("p"),aqo=o("This class cannot be instantiated directly using "),Xme=a("code"),nqo=o("__init__()"),sqo=o(" (throws an error)."),lqo=l(),ft=a("div"),F(w6.$$.fragment),iqo=l(),zme=a("p"),dqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cqo=l(),Ji=a("p"),fqo=o(`Note:
Loading a model from its configuration file does `),Wme=a("strong"),mqo=o("not"),gqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),hqo=o("from_pretrained()"),pqo=o(" to load the model weights."),_qo=l(),F(gv.$$.fragment),uqo=l(),ao=a("div"),F(A6.$$.fragment),bqo=l(),Qme=a("p"),vqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fqo=l(),Ia=a("p"),Tqo=o("The model class to instantiate is selected based on the "),Hme=a("code"),Mqo=o("model_type"),Eqo=o(` property of the config object (either
passed as an argument or loaded from `),Ume=a("code"),Cqo=o("pretrained_model_name_or_path"),wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=a("code"),Aqo=o("pretrained_model_name_or_path"),yqo=o(":"),Lqo=l(),U=a("ul"),hv=a("li"),Yme=a("strong"),xqo=o("albert"),$qo=o(" \u2014 "),mO=a("a"),kqo=o("AlbertForTokenClassification"),Sqo=o(" (ALBERT model)"),Rqo=l(),pv=a("li"),Kme=a("strong"),Pqo=o("bert"),Bqo=o(" \u2014 "),gO=a("a"),Iqo=o("BertForTokenClassification"),qqo=o(" (BERT model)"),Nqo=l(),_v=a("li"),Zme=a("strong"),jqo=o("big_bird"),Dqo=o(" \u2014 "),hO=a("a"),Gqo=o("BigBirdForTokenClassification"),Oqo=o(" (BigBird model)"),Vqo=l(),uv=a("li"),ege=a("strong"),Xqo=o("camembert"),zqo=o(" \u2014 "),pO=a("a"),Wqo=o("CamembertForTokenClassification"),Qqo=o(" (CamemBERT model)"),Hqo=l(),bv=a("li"),oge=a("strong"),Uqo=o("canine"),Jqo=o(" \u2014 "),_O=a("a"),Yqo=o("CanineForTokenClassification"),Kqo=o(" (Canine model)"),Zqo=l(),vv=a("li"),rge=a("strong"),eNo=o("convbert"),oNo=o(" \u2014 "),uO=a("a"),rNo=o("ConvBertForTokenClassification"),tNo=o(" (ConvBERT model)"),aNo=l(),Fv=a("li"),tge=a("strong"),nNo=o("data2vec-text"),sNo=o(" \u2014 "),bO=a("a"),lNo=o("Data2VecTextForTokenClassification"),iNo=o(" (Data2VecText model)"),dNo=l(),Tv=a("li"),age=a("strong"),cNo=o("deberta"),fNo=o(" \u2014 "),vO=a("a"),mNo=o("DebertaForTokenClassification"),gNo=o(" (DeBERTa model)"),hNo=l(),Mv=a("li"),nge=a("strong"),pNo=o("deberta-v2"),_No=o(" \u2014 "),FO=a("a"),uNo=o("DebertaV2ForTokenClassification"),bNo=o(" (DeBERTa-v2 model)"),vNo=l(),Ev=a("li"),sge=a("strong"),FNo=o("distilbert"),TNo=o(" \u2014 "),TO=a("a"),MNo=o("DistilBertForTokenClassification"),ENo=o(" (DistilBERT model)"),CNo=l(),Cv=a("li"),lge=a("strong"),wNo=o("electra"),ANo=o(" \u2014 "),MO=a("a"),yNo=o("ElectraForTokenClassification"),LNo=o(" (ELECTRA model)"),xNo=l(),wv=a("li"),ige=a("strong"),$No=o("flaubert"),kNo=o(" \u2014 "),EO=a("a"),SNo=o("FlaubertForTokenClassification"),RNo=o(" (FlauBERT model)"),PNo=l(),Av=a("li"),dge=a("strong"),BNo=o("fnet"),INo=o(" \u2014 "),CO=a("a"),qNo=o("FNetForTokenClassification"),NNo=o(" (FNet model)"),jNo=l(),yv=a("li"),cge=a("strong"),DNo=o("funnel"),GNo=o(" \u2014 "),wO=a("a"),ONo=o("FunnelForTokenClassification"),VNo=o(" (Funnel Transformer model)"),XNo=l(),Lv=a("li"),fge=a("strong"),zNo=o("gpt2"),WNo=o(" \u2014 "),AO=a("a"),QNo=o("GPT2ForTokenClassification"),HNo=o(" (OpenAI GPT-2 model)"),UNo=l(),xv=a("li"),mge=a("strong"),JNo=o("ibert"),YNo=o(" \u2014 "),yO=a("a"),KNo=o("IBertForTokenClassification"),ZNo=o(" (I-BERT model)"),ejo=l(),$v=a("li"),gge=a("strong"),ojo=o("layoutlm"),rjo=o(" \u2014 "),LO=a("a"),tjo=o("LayoutLMForTokenClassification"),ajo=o(" (LayoutLM model)"),njo=l(),kv=a("li"),hge=a("strong"),sjo=o("layoutlmv2"),ljo=o(" \u2014 "),xO=a("a"),ijo=o("LayoutLMv2ForTokenClassification"),djo=o(" (LayoutLMv2 model)"),cjo=l(),Sv=a("li"),pge=a("strong"),fjo=o("longformer"),mjo=o(" \u2014 "),$O=a("a"),gjo=o("LongformerForTokenClassification"),hjo=o(" (Longformer model)"),pjo=l(),Rv=a("li"),_ge=a("strong"),_jo=o("megatron-bert"),ujo=o(" \u2014 "),kO=a("a"),bjo=o("MegatronBertForTokenClassification"),vjo=o(" (MegatronBert model)"),Fjo=l(),Pv=a("li"),uge=a("strong"),Tjo=o("mobilebert"),Mjo=o(" \u2014 "),SO=a("a"),Ejo=o("MobileBertForTokenClassification"),Cjo=o(" (MobileBERT model)"),wjo=l(),Bv=a("li"),bge=a("strong"),Ajo=o("mpnet"),yjo=o(" \u2014 "),RO=a("a"),Ljo=o("MPNetForTokenClassification"),xjo=o(" (MPNet model)"),$jo=l(),Iv=a("li"),vge=a("strong"),kjo=o("nystromformer"),Sjo=o(" \u2014 "),PO=a("a"),Rjo=o("NystromformerForTokenClassification"),Pjo=o(" (Nystromformer model)"),Bjo=l(),qv=a("li"),Fge=a("strong"),Ijo=o("qdqbert"),qjo=o(" \u2014 "),BO=a("a"),Njo=o("QDQBertForTokenClassification"),jjo=o(" (QDQBert model)"),Djo=l(),Nv=a("li"),Tge=a("strong"),Gjo=o("rembert"),Ojo=o(" \u2014 "),IO=a("a"),Vjo=o("RemBertForTokenClassification"),Xjo=o(" (RemBERT model)"),zjo=l(),jv=a("li"),Mge=a("strong"),Wjo=o("roberta"),Qjo=o(" \u2014 "),qO=a("a"),Hjo=o("RobertaForTokenClassification"),Ujo=o(" (RoBERTa model)"),Jjo=l(),Dv=a("li"),Ege=a("strong"),Yjo=o("roformer"),Kjo=o(" \u2014 "),NO=a("a"),Zjo=o("RoFormerForTokenClassification"),eDo=o(" (RoFormer model)"),oDo=l(),Gv=a("li"),Cge=a("strong"),rDo=o("squeezebert"),tDo=o(" \u2014 "),jO=a("a"),aDo=o("SqueezeBertForTokenClassification"),nDo=o(" (SqueezeBERT model)"),sDo=l(),Ov=a("li"),wge=a("strong"),lDo=o("xlm"),iDo=o(" \u2014 "),DO=a("a"),dDo=o("XLMForTokenClassification"),cDo=o(" (XLM model)"),fDo=l(),Vv=a("li"),Age=a("strong"),mDo=o("xlm-roberta"),gDo=o(" \u2014 "),GO=a("a"),hDo=o("XLMRobertaForTokenClassification"),pDo=o(" (XLM-RoBERTa model)"),_Do=l(),Xv=a("li"),yge=a("strong"),uDo=o("xlm-roberta-xl"),bDo=o(" \u2014 "),OO=a("a"),vDo=o("XLMRobertaXLForTokenClassification"),FDo=o(" (XLM-RoBERTa-XL model)"),TDo=l(),zv=a("li"),Lge=a("strong"),MDo=o("xlnet"),EDo=o(" \u2014 "),VO=a("a"),CDo=o("XLNetForTokenClassification"),wDo=o(" (XLNet model)"),ADo=l(),Wv=a("li"),xge=a("strong"),yDo=o("yoso"),LDo=o(" \u2014 "),XO=a("a"),xDo=o("YosoForTokenClassification"),$Do=o(" (YOSO model)"),kDo=l(),Qv=a("p"),SDo=o("The model is set in evaluation mode by default using "),$ge=a("code"),RDo=o("model.eval()"),PDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),BDo=o("model.train()"),IDo=l(),F(Hv.$$.fragment),hqe=l(),Yi=a("h2"),Uv=a("a"),Sge=a("span"),F(y6.$$.fragment),qDo=l(),Rge=a("span"),NDo=o("AutoModelForQuestionAnswering"),pqe=l(),qo=a("div"),F(L6.$$.fragment),jDo=l(),Ki=a("p"),DDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zO=a("a"),GDo=o("from_pretrained()"),ODo=o(" class method or the "),WO=a("a"),VDo=o("from_config()"),XDo=o(` class
method.`),zDo=l(),x6=a("p"),WDo=o("This class cannot be instantiated directly using "),Pge=a("code"),QDo=o("__init__()"),HDo=o(" (throws an error)."),UDo=l(),mt=a("div"),F($6.$$.fragment),JDo=l(),Bge=a("p"),YDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KDo=l(),Zi=a("p"),ZDo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),eGo=o("not"),oGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),rGo=o("from_pretrained()"),tGo=o(" to load the model weights."),aGo=l(),F(Jv.$$.fragment),nGo=l(),no=a("div"),F(k6.$$.fragment),sGo=l(),qge=a("p"),lGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iGo=l(),qa=a("p"),dGo=o("The model class to instantiate is selected based on the "),Nge=a("code"),cGo=o("model_type"),fGo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(":"),_Go=l(),V=a("ul"),Yv=a("li"),Gge=a("strong"),uGo=o("albert"),bGo=o(" \u2014 "),HO=a("a"),vGo=o("AlbertForQuestionAnswering"),FGo=o(" (ALBERT model)"),TGo=l(),Kv=a("li"),Oge=a("strong"),MGo=o("bart"),EGo=o(" \u2014 "),UO=a("a"),CGo=o("BartForQuestionAnswering"),wGo=o(" (BART model)"),AGo=l(),Zv=a("li"),Vge=a("strong"),yGo=o("bert"),LGo=o(" \u2014 "),JO=a("a"),xGo=o("BertForQuestionAnswering"),$Go=o(" (BERT model)"),kGo=l(),e3=a("li"),Xge=a("strong"),SGo=o("big_bird"),RGo=o(" \u2014 "),YO=a("a"),PGo=o("BigBirdForQuestionAnswering"),BGo=o(" (BigBird model)"),IGo=l(),o3=a("li"),zge=a("strong"),qGo=o("bigbird_pegasus"),NGo=o(" \u2014 "),KO=a("a"),jGo=o("BigBirdPegasusForQuestionAnswering"),DGo=o(" (BigBirdPegasus model)"),GGo=l(),r3=a("li"),Wge=a("strong"),OGo=o("camembert"),VGo=o(" \u2014 "),ZO=a("a"),XGo=o("CamembertForQuestionAnswering"),zGo=o(" (CamemBERT model)"),WGo=l(),t3=a("li"),Qge=a("strong"),QGo=o("canine"),HGo=o(" \u2014 "),eV=a("a"),UGo=o("CanineForQuestionAnswering"),JGo=o(" (Canine model)"),YGo=l(),a3=a("li"),Hge=a("strong"),KGo=o("convbert"),ZGo=o(" \u2014 "),oV=a("a"),eOo=o("ConvBertForQuestionAnswering"),oOo=o(" (ConvBERT model)"),rOo=l(),n3=a("li"),Uge=a("strong"),tOo=o("data2vec-text"),aOo=o(" \u2014 "),rV=a("a"),nOo=o("Data2VecTextForQuestionAnswering"),sOo=o(" (Data2VecText model)"),lOo=l(),s3=a("li"),Jge=a("strong"),iOo=o("deberta"),dOo=o(" \u2014 "),tV=a("a"),cOo=o("DebertaForQuestionAnswering"),fOo=o(" (DeBERTa model)"),mOo=l(),l3=a("li"),Yge=a("strong"),gOo=o("deberta-v2"),hOo=o(" \u2014 "),aV=a("a"),pOo=o("DebertaV2ForQuestionAnswering"),_Oo=o(" (DeBERTa-v2 model)"),uOo=l(),i3=a("li"),Kge=a("strong"),bOo=o("distilbert"),vOo=o(" \u2014 "),nV=a("a"),FOo=o("DistilBertForQuestionAnswering"),TOo=o(" (DistilBERT model)"),MOo=l(),d3=a("li"),Zge=a("strong"),EOo=o("electra"),COo=o(" \u2014 "),sV=a("a"),wOo=o("ElectraForQuestionAnswering"),AOo=o(" (ELECTRA model)"),yOo=l(),c3=a("li"),ehe=a("strong"),LOo=o("flaubert"),xOo=o(" \u2014 "),lV=a("a"),$Oo=o("FlaubertForQuestionAnsweringSimple"),kOo=o(" (FlauBERT model)"),SOo=l(),f3=a("li"),ohe=a("strong"),ROo=o("fnet"),POo=o(" \u2014 "),iV=a("a"),BOo=o("FNetForQuestionAnswering"),IOo=o(" (FNet model)"),qOo=l(),m3=a("li"),rhe=a("strong"),NOo=o("funnel"),jOo=o(" \u2014 "),dV=a("a"),DOo=o("FunnelForQuestionAnswering"),GOo=o(" (Funnel Transformer model)"),OOo=l(),g3=a("li"),the=a("strong"),VOo=o("gptj"),XOo=o(" \u2014 "),cV=a("a"),zOo=o("GPTJForQuestionAnswering"),WOo=o(" (GPT-J model)"),QOo=l(),h3=a("li"),ahe=a("strong"),HOo=o("ibert"),UOo=o(" \u2014 "),fV=a("a"),JOo=o("IBertForQuestionAnswering"),YOo=o(" (I-BERT model)"),KOo=l(),p3=a("li"),nhe=a("strong"),ZOo=o("layoutlmv2"),eVo=o(" \u2014 "),mV=a("a"),oVo=o("LayoutLMv2ForQuestionAnswering"),rVo=o(" (LayoutLMv2 model)"),tVo=l(),_3=a("li"),she=a("strong"),aVo=o("led"),nVo=o(" \u2014 "),gV=a("a"),sVo=o("LEDForQuestionAnswering"),lVo=o(" (LED model)"),iVo=l(),u3=a("li"),lhe=a("strong"),dVo=o("longformer"),cVo=o(" \u2014 "),hV=a("a"),fVo=o("LongformerForQuestionAnswering"),mVo=o(" (Longformer model)"),gVo=l(),b3=a("li"),ihe=a("strong"),hVo=o("lxmert"),pVo=o(" \u2014 "),pV=a("a"),_Vo=o("LxmertForQuestionAnswering"),uVo=o(" (LXMERT model)"),bVo=l(),v3=a("li"),dhe=a("strong"),vVo=o("mbart"),FVo=o(" \u2014 "),_V=a("a"),TVo=o("MBartForQuestionAnswering"),MVo=o(" (mBART model)"),EVo=l(),F3=a("li"),che=a("strong"),CVo=o("megatron-bert"),wVo=o(" \u2014 "),uV=a("a"),AVo=o("MegatronBertForQuestionAnswering"),yVo=o(" (MegatronBert model)"),LVo=l(),T3=a("li"),fhe=a("strong"),xVo=o("mobilebert"),$Vo=o(" \u2014 "),bV=a("a"),kVo=o("MobileBertForQuestionAnswering"),SVo=o(" (MobileBERT model)"),RVo=l(),M3=a("li"),mhe=a("strong"),PVo=o("mpnet"),BVo=o(" \u2014 "),vV=a("a"),IVo=o("MPNetForQuestionAnswering"),qVo=o(" (MPNet model)"),NVo=l(),E3=a("li"),ghe=a("strong"),jVo=o("nystromformer"),DVo=o(" \u2014 "),FV=a("a"),GVo=o("NystromformerForQuestionAnswering"),OVo=o(" (Nystromformer model)"),VVo=l(),C3=a("li"),hhe=a("strong"),XVo=o("qdqbert"),zVo=o(" \u2014 "),TV=a("a"),WVo=o("QDQBertForQuestionAnswering"),QVo=o(" (QDQBert model)"),HVo=l(),w3=a("li"),phe=a("strong"),UVo=o("reformer"),JVo=o(" \u2014 "),MV=a("a"),YVo=o("ReformerForQuestionAnswering"),KVo=o(" (Reformer model)"),ZVo=l(),A3=a("li"),_he=a("strong"),eXo=o("rembert"),oXo=o(" \u2014 "),EV=a("a"),rXo=o("RemBertForQuestionAnswering"),tXo=o(" (RemBERT model)"),aXo=l(),y3=a("li"),uhe=a("strong"),nXo=o("roberta"),sXo=o(" \u2014 "),CV=a("a"),lXo=o("RobertaForQuestionAnswering"),iXo=o(" (RoBERTa model)"),dXo=l(),L3=a("li"),bhe=a("strong"),cXo=o("roformer"),fXo=o(" \u2014 "),wV=a("a"),mXo=o("RoFormerForQuestionAnswering"),gXo=o(" (RoFormer model)"),hXo=l(),x3=a("li"),vhe=a("strong"),pXo=o("splinter"),_Xo=o(" \u2014 "),AV=a("a"),uXo=o("SplinterForQuestionAnswering"),bXo=o(" (Splinter model)"),vXo=l(),$3=a("li"),Fhe=a("strong"),FXo=o("squeezebert"),TXo=o(" \u2014 "),yV=a("a"),MXo=o("SqueezeBertForQuestionAnswering"),EXo=o(" (SqueezeBERT model)"),CXo=l(),k3=a("li"),The=a("strong"),wXo=o("xlm"),AXo=o(" \u2014 "),LV=a("a"),yXo=o("XLMForQuestionAnsweringSimple"),LXo=o(" (XLM model)"),xXo=l(),S3=a("li"),Mhe=a("strong"),$Xo=o("xlm-roberta"),kXo=o(" \u2014 "),xV=a("a"),SXo=o("XLMRobertaForQuestionAnswering"),RXo=o(" (XLM-RoBERTa model)"),PXo=l(),R3=a("li"),Ehe=a("strong"),BXo=o("xlm-roberta-xl"),IXo=o(" \u2014 "),$V=a("a"),qXo=o("XLMRobertaXLForQuestionAnswering"),NXo=o(" (XLM-RoBERTa-XL model)"),jXo=l(),P3=a("li"),Che=a("strong"),DXo=o("xlnet"),GXo=o(" \u2014 "),kV=a("a"),OXo=o("XLNetForQuestionAnsweringSimple"),VXo=o(" (XLNet model)"),XXo=l(),B3=a("li"),whe=a("strong"),zXo=o("yoso"),WXo=o(" \u2014 "),SV=a("a"),QXo=o("YosoForQuestionAnswering"),HXo=o(" (YOSO model)"),UXo=l(),I3=a("p"),JXo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),YXo=o("model.eval()"),KXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),ZXo=o("model.train()"),ezo=l(),F(q3.$$.fragment),_qe=l(),ed=a("h2"),N3=a("a"),Lhe=a("span"),F(S6.$$.fragment),ozo=l(),xhe=a("span"),rzo=o("AutoModelForTableQuestionAnswering"),uqe=l(),No=a("div"),F(R6.$$.fragment),tzo=l(),od=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RV=a("a"),nzo=o("from_pretrained()"),szo=o(" class method or the "),PV=a("a"),lzo=o("from_config()"),izo=o(` class
method.`),dzo=l(),P6=a("p"),czo=o("This class cannot be instantiated directly using "),$he=a("code"),fzo=o("__init__()"),mzo=o(" (throws an error)."),gzo=l(),gt=a("div"),F(B6.$$.fragment),hzo=l(),khe=a("p"),pzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_zo=l(),rd=a("p"),uzo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),Fzo=o("from_pretrained()"),Tzo=o(" to load the model weights."),Mzo=l(),F(j3.$$.fragment),Ezo=l(),so=a("div"),F(I6.$$.fragment),Czo=l(),Rhe=a("p"),wzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Azo=l(),Na=a("p"),yzo=o("The model class to instantiate is selected based on the "),Phe=a("code"),Lzo=o("model_type"),xzo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),$zo=o("pretrained_model_name_or_path"),kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),Szo=o("pretrained_model_name_or_path"),Rzo=o(":"),Pzo=l(),qhe=a("ul"),D3=a("li"),Nhe=a("strong"),Bzo=o("tapas"),Izo=o(" \u2014 "),IV=a("a"),qzo=o("TapasForQuestionAnswering"),Nzo=o(" (TAPAS model)"),jzo=l(),G3=a("p"),Dzo=o("The model is set in evaluation mode by default using "),jhe=a("code"),Gzo=o("model.eval()"),Ozo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),Vzo=o("model.train()"),Xzo=l(),F(O3.$$.fragment),bqe=l(),td=a("h2"),V3=a("a"),Ghe=a("span"),F(q6.$$.fragment),zzo=l(),Ohe=a("span"),Wzo=o("AutoModelForImageClassification"),vqe=l(),jo=a("div"),F(N6.$$.fragment),Qzo=l(),ad=a("p"),Hzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qV=a("a"),Uzo=o("from_pretrained()"),Jzo=o(" class method or the "),NV=a("a"),Yzo=o("from_config()"),Kzo=o(` class
method.`),Zzo=l(),j6=a("p"),eWo=o("This class cannot be instantiated directly using "),Vhe=a("code"),oWo=o("__init__()"),rWo=o(" (throws an error)."),tWo=l(),ht=a("div"),F(D6.$$.fragment),aWo=l(),Xhe=a("p"),nWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sWo=l(),nd=a("p"),lWo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),iWo=o("not"),dWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),cWo=o("from_pretrained()"),fWo=o(" to load the model weights."),mWo=l(),F(X3.$$.fragment),gWo=l(),lo=a("div"),F(G6.$$.fragment),hWo=l(),Whe=a("p"),pWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Wo=l(),ja=a("p"),uWo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),bWo=o("model_type"),vWo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),FWo=o("pretrained_model_name_or_path"),TWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(":"),CWo=l(),Fe=a("ul"),z3=a("li"),Jhe=a("strong"),wWo=o("beit"),AWo=o(" \u2014 "),DV=a("a"),yWo=o("BeitForImageClassification"),LWo=o(" (BEiT model)"),xWo=l(),W3=a("li"),Yhe=a("strong"),$Wo=o("convnext"),kWo=o(" \u2014 "),GV=a("a"),SWo=o("ConvNextForImageClassification"),RWo=o(" (ConvNext model)"),PWo=l(),Q3=a("li"),Khe=a("strong"),BWo=o("data2vec-vision"),IWo=o(" \u2014 "),OV=a("a"),qWo=o("Data2VecVisionForImageClassification"),NWo=o(" (Data2VecVision model)"),jWo=l(),Ps=a("li"),Zhe=a("strong"),DWo=o("deit"),GWo=o(" \u2014 "),VV=a("a"),OWo=o("DeiTForImageClassification"),VWo=o(" or "),XV=a("a"),XWo=o("DeiTForImageClassificationWithTeacher"),zWo=o(" (DeiT model)"),WWo=l(),H3=a("li"),epe=a("strong"),QWo=o("imagegpt"),HWo=o(" \u2014 "),zV=a("a"),UWo=o("ImageGPTForImageClassification"),JWo=o(" (ImageGPT model)"),YWo=l(),pt=a("li"),ope=a("strong"),KWo=o("perceiver"),ZWo=o(" \u2014 "),WV=a("a"),eQo=o("PerceiverForImageClassificationLearned"),oQo=o(" or "),QV=a("a"),rQo=o("PerceiverForImageClassificationFourier"),tQo=o(" or "),HV=a("a"),aQo=o("PerceiverForImageClassificationConvProcessing"),nQo=o(" (Perceiver model)"),sQo=l(),U3=a("li"),rpe=a("strong"),lQo=o("poolformer"),iQo=o(" \u2014 "),UV=a("a"),dQo=o("PoolFormerForImageClassification"),cQo=o(" (PoolFormer model)"),fQo=l(),J3=a("li"),tpe=a("strong"),mQo=o("regnet"),gQo=o(" \u2014 "),JV=a("a"),hQo=o("RegNetForImageClassification"),pQo=o(" (RegNet model)"),_Qo=l(),Y3=a("li"),ape=a("strong"),uQo=o("resnet"),bQo=o(" \u2014 "),YV=a("a"),vQo=o("ResNetForImageClassification"),FQo=o(" (ResNet model)"),TQo=l(),K3=a("li"),npe=a("strong"),MQo=o("segformer"),EQo=o(" \u2014 "),KV=a("a"),CQo=o("SegformerForImageClassification"),wQo=o(" (SegFormer model)"),AQo=l(),Z3=a("li"),spe=a("strong"),yQo=o("swin"),LQo=o(" \u2014 "),ZV=a("a"),xQo=o("SwinForImageClassification"),$Qo=o(" (Swin model)"),kQo=l(),eF=a("li"),lpe=a("strong"),SQo=o("van"),RQo=o(" \u2014 "),eX=a("a"),PQo=o("VanForImageClassification"),BQo=o(" (VAN model)"),IQo=l(),oF=a("li"),ipe=a("strong"),qQo=o("vit"),NQo=o(" \u2014 "),oX=a("a"),jQo=o("ViTForImageClassification"),DQo=o(" (ViT model)"),GQo=l(),rF=a("p"),OQo=o("The model is set in evaluation mode by default using "),dpe=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),zQo=o("model.train()"),WQo=l(),F(tF.$$.fragment),Fqe=l(),sd=a("h2"),aF=a("a"),fpe=a("span"),F(O6.$$.fragment),QQo=l(),mpe=a("span"),HQo=o("AutoModelForVision2Seq"),Tqe=l(),Do=a("div"),F(V6.$$.fragment),UQo=l(),ld=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rX=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),tX=a("a"),ZQo=o("from_config()"),eHo=o(` class
method.`),oHo=l(),X6=a("p"),rHo=o("This class cannot be instantiated directly using "),gpe=a("code"),tHo=o("__init__()"),aHo=o(" (throws an error)."),nHo=l(),_t=a("div"),F(z6.$$.fragment),sHo=l(),hpe=a("p"),lHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iHo=l(),id=a("p"),dHo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),cHo=o("not"),fHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),mHo=o("from_pretrained()"),gHo=o(" to load the model weights."),hHo=l(),F(nF.$$.fragment),pHo=l(),io=a("div"),F(W6.$$.fragment),_Ho=l(),_pe=a("p"),uHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bHo=l(),Da=a("p"),vHo=o("The model class to instantiate is selected based on the "),upe=a("code"),FHo=o("model_type"),THo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),MHo=o("pretrained_model_name_or_path"),EHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(":"),AHo=l(),Fpe=a("ul"),sF=a("li"),Tpe=a("strong"),yHo=o("vision-encoder-decoder"),LHo=o(" \u2014 "),nX=a("a"),xHo=o("VisionEncoderDecoderModel"),$Ho=o(" (Vision Encoder decoder model)"),kHo=l(),lF=a("p"),SHo=o("The model is set in evaluation mode by default using "),Mpe=a("code"),RHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=a("code"),BHo=o("model.train()"),IHo=l(),F(iF.$$.fragment),Mqe=l(),dd=a("h2"),dF=a("a"),Cpe=a("span"),F(Q6.$$.fragment),qHo=l(),wpe=a("span"),NHo=o("AutoModelForAudioClassification"),Eqe=l(),Go=a("div"),F(H6.$$.fragment),jHo=l(),cd=a("p"),DHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sX=a("a"),GHo=o("from_pretrained()"),OHo=o(" class method or the "),lX=a("a"),VHo=o("from_config()"),XHo=o(` class
method.`),zHo=l(),U6=a("p"),WHo=o("This class cannot be instantiated directly using "),Ape=a("code"),QHo=o("__init__()"),HHo=o(" (throws an error)."),UHo=l(),ut=a("div"),F(J6.$$.fragment),JHo=l(),ype=a("p"),YHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KHo=l(),fd=a("p"),ZHo=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),eUo=o("not"),oUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),rUo=o("from_pretrained()"),tUo=o(" to load the model weights."),aUo=l(),F(cF.$$.fragment),nUo=l(),co=a("div"),F(Y6.$$.fragment),sUo=l(),xpe=a("p"),lUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iUo=l(),Ga=a("p"),dUo=o("The model class to instantiate is selected based on the "),$pe=a("code"),cUo=o("model_type"),fUo=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),hUo=o("pretrained_model_name_or_path"),pUo=o(":"),_Uo=l(),ke=a("ul"),fF=a("li"),Rpe=a("strong"),uUo=o("data2vec-audio"),bUo=o(" \u2014 "),dX=a("a"),vUo=o("Data2VecAudioForSequenceClassification"),FUo=o(" (Data2VecAudio model)"),TUo=l(),mF=a("li"),Ppe=a("strong"),MUo=o("hubert"),EUo=o(" \u2014 "),cX=a("a"),CUo=o("HubertForSequenceClassification"),wUo=o(" (Hubert model)"),AUo=l(),gF=a("li"),Bpe=a("strong"),yUo=o("sew"),LUo=o(" \u2014 "),fX=a("a"),xUo=o("SEWForSequenceClassification"),$Uo=o(" (SEW model)"),kUo=l(),hF=a("li"),Ipe=a("strong"),SUo=o("sew-d"),RUo=o(" \u2014 "),mX=a("a"),PUo=o("SEWDForSequenceClassification"),BUo=o(" (SEW-D model)"),IUo=l(),pF=a("li"),qpe=a("strong"),qUo=o("unispeech"),NUo=o(" \u2014 "),gX=a("a"),jUo=o("UniSpeechForSequenceClassification"),DUo=o(" (UniSpeech model)"),GUo=l(),_F=a("li"),Npe=a("strong"),OUo=o("unispeech-sat"),VUo=o(" \u2014 "),hX=a("a"),XUo=o("UniSpeechSatForSequenceClassification"),zUo=o(" (UniSpeechSat model)"),WUo=l(),uF=a("li"),jpe=a("strong"),QUo=o("wav2vec2"),HUo=o(" \u2014 "),pX=a("a"),UUo=o("Wav2Vec2ForSequenceClassification"),JUo=o(" (Wav2Vec2 model)"),YUo=l(),bF=a("li"),Dpe=a("strong"),KUo=o("wav2vec2-conformer"),ZUo=o(" \u2014 "),_X=a("a"),eJo=o("Wav2Vec2ConformerForSequenceClassification"),oJo=o(" (Wav2Vec2-Conformer model)"),rJo=l(),vF=a("li"),Gpe=a("strong"),tJo=o("wavlm"),aJo=o(" \u2014 "),uX=a("a"),nJo=o("WavLMForSequenceClassification"),sJo=o(" (WavLM model)"),lJo=l(),FF=a("p"),iJo=o("The model is set in evaluation mode by default using "),Ope=a("code"),dJo=o("model.eval()"),cJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),fJo=o("model.train()"),mJo=l(),F(TF.$$.fragment),Cqe=l(),md=a("h2"),MF=a("a"),Xpe=a("span"),F(K6.$$.fragment),gJo=l(),zpe=a("span"),hJo=o("AutoModelForAudioFrameClassification"),wqe=l(),Oo=a("div"),F(Z6.$$.fragment),pJo=l(),gd=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bX=a("a"),uJo=o("from_pretrained()"),bJo=o(" class method or the "),vX=a("a"),vJo=o("from_config()"),FJo=o(` class
method.`),TJo=l(),ey=a("p"),MJo=o("This class cannot be instantiated directly using "),Wpe=a("code"),EJo=o("__init__()"),CJo=o(" (throws an error)."),wJo=l(),bt=a("div"),F(oy.$$.fragment),AJo=l(),Qpe=a("p"),yJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),LJo=l(),hd=a("p"),xJo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),$Jo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),SJo=o("from_pretrained()"),RJo=o(" to load the model weights."),PJo=l(),F(EF.$$.fragment),BJo=l(),fo=a("div"),F(ry.$$.fragment),IJo=l(),Upe=a("p"),qJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),NJo=l(),Oa=a("p"),jJo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),DJo=o("model_type"),GJo=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),OJo=o("pretrained_model_name_or_path"),VJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(":"),WJo=l(),Kr=a("ul"),CF=a("li"),Zpe=a("strong"),QJo=o("data2vec-audio"),HJo=o(" \u2014 "),TX=a("a"),UJo=o("Data2VecAudioForAudioFrameClassification"),JJo=o(" (Data2VecAudio model)"),YJo=l(),wF=a("li"),e_e=a("strong"),KJo=o("unispeech-sat"),ZJo=o(" \u2014 "),MX=a("a"),eYo=o("UniSpeechSatForAudioFrameClassification"),oYo=o(" (UniSpeechSat model)"),rYo=l(),AF=a("li"),o_e=a("strong"),tYo=o("wav2vec2"),aYo=o(" \u2014 "),EX=a("a"),nYo=o("Wav2Vec2ForAudioFrameClassification"),sYo=o(" (Wav2Vec2 model)"),lYo=l(),yF=a("li"),r_e=a("strong"),iYo=o("wav2vec2-conformer"),dYo=o(" \u2014 "),CX=a("a"),cYo=o("Wav2Vec2ConformerForAudioFrameClassification"),fYo=o(" (Wav2Vec2-Conformer model)"),mYo=l(),LF=a("li"),t_e=a("strong"),gYo=o("wavlm"),hYo=o(" \u2014 "),wX=a("a"),pYo=o("WavLMForAudioFrameClassification"),_Yo=o(" (WavLM model)"),uYo=l(),xF=a("p"),bYo=o("The model is set in evaluation mode by default using "),a_e=a("code"),vYo=o("model.eval()"),FYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),TYo=o("model.train()"),MYo=l(),F($F.$$.fragment),Aqe=l(),pd=a("h2"),kF=a("a"),s_e=a("span"),F(ty.$$.fragment),EYo=l(),l_e=a("span"),CYo=o("AutoModelForCTC"),yqe=l(),Vo=a("div"),F(ay.$$.fragment),wYo=l(),_d=a("p"),AYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AX=a("a"),yYo=o("from_pretrained()"),LYo=o(" class method or the "),yX=a("a"),xYo=o("from_config()"),$Yo=o(` class
method.`),kYo=l(),ny=a("p"),SYo=o("This class cannot be instantiated directly using "),i_e=a("code"),RYo=o("__init__()"),PYo=o(" (throws an error)."),BYo=l(),vt=a("div"),F(sy.$$.fragment),IYo=l(),d_e=a("p"),qYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NYo=l(),ud=a("p"),jYo=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),DYo=o("not"),GYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),OYo=o("from_pretrained()"),VYo=o(" to load the model weights."),XYo=l(),F(SF.$$.fragment),zYo=l(),mo=a("div"),F(ly.$$.fragment),WYo=l(),f_e=a("p"),QYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),HYo=l(),Va=a("p"),UYo=o("The model class to instantiate is selected based on the "),m_e=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),Se=a("ul"),RF=a("li"),p_e=a("strong"),tKo=o("data2vec-audio"),aKo=o(" \u2014 "),xX=a("a"),nKo=o("Data2VecAudioForCTC"),sKo=o(" (Data2VecAudio model)"),lKo=l(),PF=a("li"),__e=a("strong"),iKo=o("hubert"),dKo=o(" \u2014 "),$X=a("a"),cKo=o("HubertForCTC"),fKo=o(" (Hubert model)"),mKo=l(),BF=a("li"),u_e=a("strong"),gKo=o("sew"),hKo=o(" \u2014 "),kX=a("a"),pKo=o("SEWForCTC"),_Ko=o(" (SEW model)"),uKo=l(),IF=a("li"),b_e=a("strong"),bKo=o("sew-d"),vKo=o(" \u2014 "),SX=a("a"),FKo=o("SEWDForCTC"),TKo=o(" (SEW-D model)"),MKo=l(),qF=a("li"),v_e=a("strong"),EKo=o("unispeech"),CKo=o(" \u2014 "),RX=a("a"),wKo=o("UniSpeechForCTC"),AKo=o(" (UniSpeech model)"),yKo=l(),NF=a("li"),F_e=a("strong"),LKo=o("unispeech-sat"),xKo=o(" \u2014 "),PX=a("a"),$Ko=o("UniSpeechSatForCTC"),kKo=o(" (UniSpeechSat model)"),SKo=l(),jF=a("li"),T_e=a("strong"),RKo=o("wav2vec2"),PKo=o(" \u2014 "),BX=a("a"),BKo=o("Wav2Vec2ForCTC"),IKo=o(" (Wav2Vec2 model)"),qKo=l(),DF=a("li"),M_e=a("strong"),NKo=o("wav2vec2-conformer"),jKo=o(" \u2014 "),IX=a("a"),DKo=o("Wav2Vec2ConformerForCTC"),GKo=o(" (Wav2Vec2-Conformer model)"),OKo=l(),GF=a("li"),E_e=a("strong"),VKo=o("wavlm"),XKo=o(" \u2014 "),qX=a("a"),zKo=o("WavLMForCTC"),WKo=o(" (WavLM model)"),QKo=l(),OF=a("p"),HKo=o("The model is set in evaluation mode by default using "),C_e=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),YKo=o("model.train()"),KKo=l(),F(VF.$$.fragment),Lqe=l(),bd=a("h2"),XF=a("a"),A_e=a("span"),F(iy.$$.fragment),ZKo=l(),y_e=a("span"),eZo=o("AutoModelForSpeechSeq2Seq"),xqe=l(),Xo=a("div"),F(dy.$$.fragment),oZo=l(),vd=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NX=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),jX=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),cy=a("p"),iZo=o("This class cannot be instantiated directly using "),L_e=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),Ft=a("div"),F(fy.$$.fragment),mZo=l(),x_e=a("p"),gZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hZo=l(),Fd=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),_Zo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),F(zF.$$.fragment),TZo=l(),go=a("div"),F(my.$$.fragment),MZo=l(),k_e=a("p"),EZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CZo=l(),Xa=a("p"),wZo=o("The model class to instantiate is selected based on the "),S_e=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),gy=a("ul"),WF=a("li"),B_e=a("strong"),RZo=o("speech-encoder-decoder"),PZo=o(" \u2014 "),GX=a("a"),BZo=o("SpeechEncoderDecoderModel"),IZo=o(" (Speech Encoder decoder model)"),qZo=l(),QF=a("li"),I_e=a("strong"),NZo=o("speech_to_text"),jZo=o(" \u2014 "),OX=a("a"),DZo=o("Speech2TextForConditionalGeneration"),GZo=o(" (Speech2Text model)"),OZo=l(),HF=a("p"),VZo=o("The model is set in evaluation mode by default using "),q_e=a("code"),XZo=o("model.eval()"),zZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),WZo=o("model.train()"),QZo=l(),F(UF.$$.fragment),$qe=l(),Td=a("h2"),JF=a("a"),j_e=a("span"),F(hy.$$.fragment),HZo=l(),D_e=a("span"),UZo=o("AutoModelForAudioXVector"),kqe=l(),zo=a("div"),F(py.$$.fragment),JZo=l(),Md=a("p"),YZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VX=a("a"),KZo=o("from_pretrained()"),ZZo=o(" class method or the "),XX=a("a"),eer=o("from_config()"),oer=o(` class
method.`),rer=l(),_y=a("p"),ter=o("This class cannot be instantiated directly using "),G_e=a("code"),aer=o("__init__()"),ner=o(" (throws an error)."),ser=l(),Tt=a("div"),F(uy.$$.fragment),ler=l(),O_e=a("p"),ier=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),der=l(),Ed=a("p"),cer=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),fer=o("not"),mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),ger=o("from_pretrained()"),her=o(" to load the model weights."),per=l(),F(YF.$$.fragment),_er=l(),ho=a("div"),F(by.$$.fragment),uer=l(),X_e=a("p"),ber=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ver=l(),za=a("p"),Fer=o("The model class to instantiate is selected based on the "),z_e=a("code"),Ter=o("model_type"),Mer=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),Eer=o("pretrained_model_name_or_path"),Cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(":"),yer=l(),Zr=a("ul"),KF=a("li"),H_e=a("strong"),Ler=o("data2vec-audio"),xer=o(" \u2014 "),WX=a("a"),$er=o("Data2VecAudioForXVector"),ker=o(" (Data2VecAudio model)"),Ser=l(),ZF=a("li"),U_e=a("strong"),Rer=o("unispeech-sat"),Per=o(" \u2014 "),QX=a("a"),Ber=o("UniSpeechSatForXVector"),Ier=o(" (UniSpeechSat model)"),qer=l(),eT=a("li"),J_e=a("strong"),Ner=o("wav2vec2"),jer=o(" \u2014 "),HX=a("a"),Der=o("Wav2Vec2ForXVector"),Ger=o(" (Wav2Vec2 model)"),Oer=l(),oT=a("li"),Y_e=a("strong"),Ver=o("wav2vec2-conformer"),Xer=o(" \u2014 "),UX=a("a"),zer=o("Wav2Vec2ConformerForXVector"),Wer=o(" (Wav2Vec2-Conformer model)"),Qer=l(),rT=a("li"),K_e=a("strong"),Her=o("wavlm"),Uer=o(" \u2014 "),JX=a("a"),Jer=o("WavLMForXVector"),Yer=o(" (WavLM model)"),Ker=l(),tT=a("p"),Zer=o("The model is set in evaluation mode by default using "),Z_e=a("code"),eor=o("model.eval()"),oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),ror=o("model.train()"),tor=l(),F(aT.$$.fragment),Sqe=l(),Cd=a("h2"),nT=a("a"),oue=a("span"),F(vy.$$.fragment),aor=l(),rue=a("span"),nor=o("AutoModelForMaskedImageModeling"),Rqe=l(),Wo=a("div"),F(Fy.$$.fragment),sor=l(),wd=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),YX=a("a"),ior=o("from_pretrained()"),dor=o(" class method or the "),KX=a("a"),cor=o("from_config()"),mor=o(` class
method.`),gor=l(),Ty=a("p"),hor=o("This class cannot be instantiated directly using "),tue=a("code"),por=o("__init__()"),_or=o(" (throws an error)."),uor=l(),Mt=a("div"),F(My.$$.fragment),bor=l(),aue=a("p"),vor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),For=l(),Ad=a("p"),Tor=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),Mor=o("not"),Eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Cor=o("from_pretrained()"),wor=o(" to load the model weights."),Aor=l(),F(sT.$$.fragment),yor=l(),po=a("div"),F(Ey.$$.fragment),Lor=l(),sue=a("p"),xor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$or=l(),Wa=a("p"),kor=o("The model class to instantiate is selected based on the "),lue=a("code"),Sor=o("model_type"),Ror=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),Ior=o("pretrained_model_name_or_path"),qor=o(":"),Nor=l(),yd=a("ul"),lT=a("li"),cue=a("strong"),jor=o("deit"),Dor=o(" \u2014 "),ez=a("a"),Gor=o("DeiTForMaskedImageModeling"),Oor=o(" (DeiT model)"),Vor=l(),iT=a("li"),fue=a("strong"),Xor=o("swin"),zor=o(" \u2014 "),oz=a("a"),Wor=o("SwinForMaskedImageModeling"),Qor=o(" (Swin model)"),Hor=l(),dT=a("li"),mue=a("strong"),Uor=o("vit"),Jor=o(" \u2014 "),rz=a("a"),Yor=o("ViTForMaskedImageModeling"),Kor=o(" (ViT model)"),Zor=l(),cT=a("p"),err=o("The model is set in evaluation mode by default using "),gue=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=a("code"),trr=o("model.train()"),arr=l(),F(fT.$$.fragment),Pqe=l(),Ld=a("h2"),mT=a("a"),pue=a("span"),F(Cy.$$.fragment),nrr=l(),_ue=a("span"),srr=o("AutoModelForObjectDetection"),Bqe=l(),Qo=a("div"),F(wy.$$.fragment),lrr=l(),xd=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tz=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),az=a("a"),frr=o("from_config()"),mrr=o(` class
method.`),grr=l(),Ay=a("p"),hrr=o("This class cannot be instantiated directly using "),uue=a("code"),prr=o("__init__()"),_rr=o(" (throws an error)."),urr=l(),Et=a("div"),F(yy.$$.fragment),brr=l(),bue=a("p"),vrr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Frr=l(),$d=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(gT.$$.fragment),yrr=l(),_o=a("div"),F(Ly.$$.fragment),Lrr=l(),Fue=a("p"),xrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$rr=l(),Qa=a("p"),krr=o("The model class to instantiate is selected based on the "),Tue=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),Irr=o("pretrained_model_name_or_path"),qrr=o(":"),Nrr=l(),xy=a("ul"),hT=a("li"),Cue=a("strong"),jrr=o("detr"),Drr=o(" \u2014 "),sz=a("a"),Grr=o("DetrForObjectDetection"),Orr=o(" (DETR model)"),Vrr=l(),pT=a("li"),wue=a("strong"),Xrr=o("yolos"),zrr=o(" \u2014 "),lz=a("a"),Wrr=o("YolosForObjectDetection"),Qrr=o(" (YOLOS model)"),Hrr=l(),_T=a("p"),Urr=o("The model is set in evaluation mode by default using "),Aue=a("code"),Jrr=o("model.eval()"),Yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),Krr=o("model.train()"),Zrr=l(),F(uT.$$.fragment),Iqe=l(),kd=a("h2"),bT=a("a"),Lue=a("span"),F($y.$$.fragment),etr=l(),xue=a("span"),otr=o("AutoModelForImageSegmentation"),qqe=l(),Ho=a("div"),F(ky.$$.fragment),rtr=l(),Sd=a("p"),ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iz=a("a"),atr=o("from_pretrained()"),ntr=o(" class method or the "),dz=a("a"),str=o("from_config()"),ltr=o(` class
method.`),itr=l(),Sy=a("p"),dtr=o("This class cannot be instantiated directly using "),$ue=a("code"),ctr=o("__init__()"),ftr=o(" (throws an error)."),mtr=l(),Ct=a("div"),F(Ry.$$.fragment),gtr=l(),kue=a("p"),htr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ptr=l(),Rd=a("p"),_tr=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),utr=o("not"),btr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),vtr=o("from_pretrained()"),Ftr=o(" to load the model weights."),Ttr=l(),F(vT.$$.fragment),Mtr=l(),uo=a("div"),F(Py.$$.fragment),Etr=l(),Rue=a("p"),Ctr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wtr=l(),Ha=a("p"),Atr=o("The model class to instantiate is selected based on the "),Pue=a("code"),ytr=o("model_type"),Ltr=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),xtr=o("pretrained_model_name_or_path"),$tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),ktr=o("pretrained_model_name_or_path"),Str=o(":"),Rtr=l(),que=a("ul"),FT=a("li"),Nue=a("strong"),Ptr=o("detr"),Btr=o(" \u2014 "),fz=a("a"),Itr=o("DetrForSegmentation"),qtr=o(" (DETR model)"),Ntr=l(),TT=a("p"),jtr=o("The model is set in evaluation mode by default using "),jue=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),Otr=o("model.train()"),Vtr=l(),F(MT.$$.fragment),Nqe=l(),Pd=a("h2"),ET=a("a"),Gue=a("span"),F(By.$$.fragment),Xtr=l(),Oue=a("span"),ztr=o("AutoModelForSemanticSegmentation"),jqe=l(),Uo=a("div"),F(Iy.$$.fragment),Wtr=l(),Bd=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mz=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),gz=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),qy=a("p"),Ztr=o("This class cannot be instantiated directly using "),Vue=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),wt=a("div"),F(Ny.$$.fragment),tar=l(),Xue=a("p"),aar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),nar=l(),Id=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),far=l(),F(CT.$$.fragment),mar=l(),bo=a("div"),F(jy.$$.fragment),gar=l(),Wue=a("p"),har=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),par=l(),Ua=a("p"),_ar=o("The model class to instantiate is selected based on the "),Que=a("code"),uar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),Ja=a("ul"),wT=a("li"),Jue=a("strong"),war=o("beit"),Aar=o(" \u2014 "),pz=a("a"),yar=o("BeitForSemanticSegmentation"),Lar=o(" (BEiT model)"),xar=l(),AT=a("li"),Yue=a("strong"),$ar=o("data2vec-vision"),kar=o(" \u2014 "),_z=a("a"),Sar=o("Data2VecVisionForSemanticSegmentation"),Rar=o(" (Data2VecVision model)"),Par=l(),yT=a("li"),Kue=a("strong"),Bar=o("dpt"),Iar=o(" \u2014 "),uz=a("a"),qar=o("DPTForSemanticSegmentation"),Nar=o(" (DPT model)"),jar=l(),LT=a("li"),Zue=a("strong"),Dar=o("segformer"),Gar=o(" \u2014 "),bz=a("a"),Oar=o("SegformerForSemanticSegmentation"),Var=o(" (SegFormer model)"),Xar=l(),xT=a("p"),zar=o("The model is set in evaluation mode by default using "),e1e=a("code"),War=o("model.eval()"),Qar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),Har=o("model.train()"),Uar=l(),F($T.$$.fragment),Dqe=l(),qd=a("h2"),kT=a("a"),r1e=a("span"),F(Dy.$$.fragment),Jar=l(),t1e=a("span"),Yar=o("AutoModelForInstanceSegmentation"),Gqe=l(),Jo=a("div"),F(Gy.$$.fragment),Kar=l(),Nd=a("p"),Zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vz=a("a"),enr=o("from_pretrained()"),onr=o(" class method or the "),Fz=a("a"),rnr=o("from_config()"),tnr=o(` class
method.`),anr=l(),Oy=a("p"),nnr=o("This class cannot be instantiated directly using "),a1e=a("code"),snr=o("__init__()"),lnr=o(" (throws an error)."),inr=l(),At=a("div"),F(Vy.$$.fragment),dnr=l(),n1e=a("p"),cnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fnr=l(),jd=a("p"),mnr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),gnr=o("not"),hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),pnr=o("from_pretrained()"),_nr=o(" to load the model weights."),unr=l(),F(ST.$$.fragment),bnr=l(),vo=a("div"),F(Xy.$$.fragment),vnr=l(),l1e=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Tnr=l(),Ya=a("p"),Mnr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Enr=o("model_type"),Cnr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),ynr=o("pretrained_model_name_or_path"),Lnr=o(":"),xnr=l(),f1e=a("ul"),RT=a("li"),m1e=a("strong"),$nr=o("maskformer"),knr=o(" \u2014 "),Mz=a("a"),Snr=o("MaskFormerForInstanceSegmentation"),Rnr=o(" (MaskFormer model)"),Pnr=l(),PT=a("p"),Bnr=o("The model is set in evaluation mode by default using "),g1e=a("code"),Inr=o("model.eval()"),qnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),Nnr=o("model.train()"),jnr=l(),F(BT.$$.fragment),Oqe=l(),Dd=a("h2"),IT=a("a"),p1e=a("span"),F(zy.$$.fragment),Dnr=l(),_1e=a("span"),Gnr=o("TFAutoModel"),Vqe=l(),Yo=a("div"),F(Wy.$$.fragment),Onr=l(),Gd=a("p"),Vnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ez=a("a"),Xnr=o("from_pretrained()"),znr=o(" class method or the "),Cz=a("a"),Wnr=o("from_config()"),Qnr=o(` class
method.`),Hnr=l(),Qy=a("p"),Unr=o("This class cannot be instantiated directly using "),u1e=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),yt=a("div"),F(Hy.$$.fragment),Znr=l(),b1e=a("p"),esr=o("Instantiates one of the base model classes of the library from a configuration."),osr=l(),Od=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),nsr=o("from_pretrained()"),ssr=o(" to load the model weights."),lsr=l(),F(qT.$$.fragment),isr=l(),wr=a("div"),F(Uy.$$.fragment),dsr=l(),F1e=a("p"),csr=o("Instantiate one of the base model classes of the library from a pretrained model."),fsr=l(),Ka=a("p"),msr=o("The model class to instantiate is selected based on the "),T1e=a("code"),gsr=o("model_type"),hsr=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),psr=o("pretrained_model_name_or_path"),_sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(":"),vsr=l(),N=a("ul"),NT=a("li"),C1e=a("strong"),Fsr=o("albert"),Tsr=o(" \u2014 "),Az=a("a"),Msr=o("TFAlbertModel"),Esr=o(" (ALBERT model)"),Csr=l(),jT=a("li"),w1e=a("strong"),wsr=o("bart"),Asr=o(" \u2014 "),yz=a("a"),ysr=o("TFBartModel"),Lsr=o(" (BART model)"),xsr=l(),DT=a("li"),A1e=a("strong"),$sr=o("bert"),ksr=o(" \u2014 "),Lz=a("a"),Ssr=o("TFBertModel"),Rsr=o(" (BERT model)"),Psr=l(),GT=a("li"),y1e=a("strong"),Bsr=o("blenderbot"),Isr=o(" \u2014 "),xz=a("a"),qsr=o("TFBlenderbotModel"),Nsr=o(" (Blenderbot model)"),jsr=l(),OT=a("li"),L1e=a("strong"),Dsr=o("blenderbot-small"),Gsr=o(" \u2014 "),$z=a("a"),Osr=o("TFBlenderbotSmallModel"),Vsr=o(" (BlenderbotSmall model)"),Xsr=l(),VT=a("li"),x1e=a("strong"),zsr=o("camembert"),Wsr=o(" \u2014 "),kz=a("a"),Qsr=o("TFCamembertModel"),Hsr=o(" (CamemBERT model)"),Usr=l(),XT=a("li"),$1e=a("strong"),Jsr=o("clip"),Ysr=o(" \u2014 "),Sz=a("a"),Ksr=o("TFCLIPModel"),Zsr=o(" (CLIP model)"),elr=l(),zT=a("li"),k1e=a("strong"),olr=o("convbert"),rlr=o(" \u2014 "),Rz=a("a"),tlr=o("TFConvBertModel"),alr=o(" (ConvBERT model)"),nlr=l(),WT=a("li"),S1e=a("strong"),slr=o("convnext"),llr=o(" \u2014 "),Pz=a("a"),ilr=o("TFConvNextModel"),dlr=o(" (ConvNext model)"),clr=l(),QT=a("li"),R1e=a("strong"),flr=o("ctrl"),mlr=o(" \u2014 "),Bz=a("a"),glr=o("TFCTRLModel"),hlr=o(" (CTRL model)"),plr=l(),HT=a("li"),P1e=a("strong"),_lr=o("data2vec-vision"),ulr=o(" \u2014 "),Iz=a("a"),blr=o("TFData2VecVisionModel"),vlr=o(" (Data2VecVision model)"),Flr=l(),UT=a("li"),B1e=a("strong"),Tlr=o("deberta"),Mlr=o(" \u2014 "),qz=a("a"),Elr=o("TFDebertaModel"),Clr=o(" (DeBERTa model)"),wlr=l(),JT=a("li"),I1e=a("strong"),Alr=o("deberta-v2"),ylr=o(" \u2014 "),Nz=a("a"),Llr=o("TFDebertaV2Model"),xlr=o(" (DeBERTa-v2 model)"),$lr=l(),YT=a("li"),q1e=a("strong"),klr=o("distilbert"),Slr=o(" \u2014 "),jz=a("a"),Rlr=o("TFDistilBertModel"),Plr=o(" (DistilBERT model)"),Blr=l(),KT=a("li"),N1e=a("strong"),Ilr=o("dpr"),qlr=o(" \u2014 "),Dz=a("a"),Nlr=o("TFDPRQuestionEncoder"),jlr=o(" (DPR model)"),Dlr=l(),ZT=a("li"),j1e=a("strong"),Glr=o("electra"),Olr=o(" \u2014 "),Gz=a("a"),Vlr=o("TFElectraModel"),Xlr=o(" (ELECTRA model)"),zlr=l(),e8=a("li"),D1e=a("strong"),Wlr=o("flaubert"),Qlr=o(" \u2014 "),Oz=a("a"),Hlr=o("TFFlaubertModel"),Ulr=o(" (FlauBERT model)"),Jlr=l(),Bs=a("li"),G1e=a("strong"),Ylr=o("funnel"),Klr=o(" \u2014 "),Vz=a("a"),Zlr=o("TFFunnelModel"),eir=o(" or "),Xz=a("a"),oir=o("TFFunnelBaseModel"),rir=o(" (Funnel Transformer model)"),tir=l(),o8=a("li"),O1e=a("strong"),air=o("gpt2"),nir=o(" \u2014 "),zz=a("a"),sir=o("TFGPT2Model"),lir=o(" (OpenAI GPT-2 model)"),iir=l(),r8=a("li"),V1e=a("strong"),dir=o("gptj"),cir=o(" \u2014 "),Wz=a("a"),fir=o("TFGPTJModel"),mir=o(" (GPT-J model)"),gir=l(),t8=a("li"),X1e=a("strong"),hir=o("hubert"),pir=o(" \u2014 "),Qz=a("a"),_ir=o("TFHubertModel"),uir=o(" (Hubert model)"),bir=l(),a8=a("li"),z1e=a("strong"),vir=o("layoutlm"),Fir=o(" \u2014 "),Hz=a("a"),Tir=o("TFLayoutLMModel"),Mir=o(" (LayoutLM model)"),Eir=l(),n8=a("li"),W1e=a("strong"),Cir=o("led"),wir=o(" \u2014 "),Uz=a("a"),Air=o("TFLEDModel"),yir=o(" (LED model)"),Lir=l(),s8=a("li"),Q1e=a("strong"),xir=o("longformer"),$ir=o(" \u2014 "),Jz=a("a"),kir=o("TFLongformerModel"),Sir=o(" (Longformer model)"),Rir=l(),l8=a("li"),H1e=a("strong"),Pir=o("lxmert"),Bir=o(" \u2014 "),Yz=a("a"),Iir=o("TFLxmertModel"),qir=o(" (LXMERT model)"),Nir=l(),i8=a("li"),U1e=a("strong"),jir=o("marian"),Dir=o(" \u2014 "),Kz=a("a"),Gir=o("TFMarianModel"),Oir=o(" (Marian model)"),Vir=l(),d8=a("li"),J1e=a("strong"),Xir=o("mbart"),zir=o(" \u2014 "),Zz=a("a"),Wir=o("TFMBartModel"),Qir=o(" (mBART model)"),Hir=l(),c8=a("li"),Y1e=a("strong"),Uir=o("mobilebert"),Jir=o(" \u2014 "),eW=a("a"),Yir=o("TFMobileBertModel"),Kir=o(" (MobileBERT model)"),Zir=l(),f8=a("li"),K1e=a("strong"),edr=o("mpnet"),odr=o(" \u2014 "),oW=a("a"),rdr=o("TFMPNetModel"),tdr=o(" (MPNet model)"),adr=l(),m8=a("li"),Z1e=a("strong"),ndr=o("mt5"),sdr=o(" \u2014 "),rW=a("a"),ldr=o("TFMT5Model"),idr=o(" (mT5 model)"),ddr=l(),g8=a("li"),ebe=a("strong"),cdr=o("openai-gpt"),fdr=o(" \u2014 "),tW=a("a"),mdr=o("TFOpenAIGPTModel"),gdr=o(" (OpenAI GPT model)"),hdr=l(),h8=a("li"),obe=a("strong"),pdr=o("pegasus"),_dr=o(" \u2014 "),aW=a("a"),udr=o("TFPegasusModel"),bdr=o(" (Pegasus model)"),vdr=l(),p8=a("li"),rbe=a("strong"),Fdr=o("rembert"),Tdr=o(" \u2014 "),nW=a("a"),Mdr=o("TFRemBertModel"),Edr=o(" (RemBERT model)"),Cdr=l(),_8=a("li"),tbe=a("strong"),wdr=o("roberta"),Adr=o(" \u2014 "),sW=a("a"),ydr=o("TFRobertaModel"),Ldr=o(" (RoBERTa model)"),xdr=l(),u8=a("li"),abe=a("strong"),$dr=o("roformer"),kdr=o(" \u2014 "),lW=a("a"),Sdr=o("TFRoFormerModel"),Rdr=o(" (RoFormer model)"),Pdr=l(),b8=a("li"),nbe=a("strong"),Bdr=o("speech_to_text"),Idr=o(" \u2014 "),iW=a("a"),qdr=o("TFSpeech2TextModel"),Ndr=o(" (Speech2Text model)"),jdr=l(),v8=a("li"),sbe=a("strong"),Ddr=o("swin"),Gdr=o(" \u2014 "),dW=a("a"),Odr=o("TFSwinModel"),Vdr=o(" (Swin model)"),Xdr=l(),F8=a("li"),lbe=a("strong"),zdr=o("t5"),Wdr=o(" \u2014 "),cW=a("a"),Qdr=o("TFT5Model"),Hdr=o(" (T5 model)"),Udr=l(),T8=a("li"),ibe=a("strong"),Jdr=o("tapas"),Ydr=o(" \u2014 "),fW=a("a"),Kdr=o("TFTapasModel"),Zdr=o(" (TAPAS model)"),ecr=l(),M8=a("li"),dbe=a("strong"),ocr=o("transfo-xl"),rcr=o(" \u2014 "),mW=a("a"),tcr=o("TFTransfoXLModel"),acr=o(" (Transformer-XL model)"),ncr=l(),E8=a("li"),cbe=a("strong"),scr=o("vit"),lcr=o(" \u2014 "),gW=a("a"),icr=o("TFViTModel"),dcr=o(" (ViT model)"),ccr=l(),C8=a("li"),fbe=a("strong"),fcr=o("vit_mae"),mcr=o(" \u2014 "),hW=a("a"),gcr=o("TFViTMAEModel"),hcr=o(" (ViTMAE model)"),pcr=l(),w8=a("li"),mbe=a("strong"),_cr=o("wav2vec2"),ucr=o(" \u2014 "),pW=a("a"),bcr=o("TFWav2Vec2Model"),vcr=o(" (Wav2Vec2 model)"),Fcr=l(),A8=a("li"),gbe=a("strong"),Tcr=o("xlm"),Mcr=o(" \u2014 "),_W=a("a"),Ecr=o("TFXLMModel"),Ccr=o(" (XLM model)"),wcr=l(),y8=a("li"),hbe=a("strong"),Acr=o("xlm-roberta"),ycr=o(" \u2014 "),uW=a("a"),Lcr=o("TFXLMRobertaModel"),xcr=o(" (XLM-RoBERTa model)"),$cr=l(),L8=a("li"),pbe=a("strong"),kcr=o("xlnet"),Scr=o(" \u2014 "),bW=a("a"),Rcr=o("TFXLNetModel"),Pcr=o(" (XLNet model)"),Bcr=l(),F(x8.$$.fragment),Xqe=l(),Vd=a("h2"),$8=a("a"),_be=a("span"),F(Jy.$$.fragment),Icr=l(),ube=a("span"),qcr=o("TFAutoModelForPreTraining"),zqe=l(),Ko=a("div"),F(Yy.$$.fragment),Ncr=l(),Xd=a("p"),jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vW=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" class method or the "),FW=a("a"),Ocr=o("from_config()"),Vcr=o(` class
method.`),Xcr=l(),Ky=a("p"),zcr=o("This class cannot be instantiated directly using "),bbe=a("code"),Wcr=o("__init__()"),Qcr=o(" (throws an error)."),Hcr=l(),Lt=a("div"),F(Zy.$$.fragment),Ucr=l(),vbe=a("p"),Jcr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ycr=l(),zd=a("p"),Kcr=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),Zcr=o("not"),efr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),ofr=o("from_pretrained()"),rfr=o(" to load the model weights."),tfr=l(),F(k8.$$.fragment),afr=l(),Ar=a("div"),F(eL.$$.fragment),nfr=l(),Tbe=a("p"),sfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lfr=l(),Za=a("p"),ifr=o("The model class to instantiate is selected based on the "),Mbe=a("code"),dfr=o("model_type"),cfr=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),ffr=o("pretrained_model_name_or_path"),mfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(":"),pfr=l(),se=a("ul"),S8=a("li"),wbe=a("strong"),_fr=o("albert"),ufr=o(" \u2014 "),MW=a("a"),bfr=o("TFAlbertForPreTraining"),vfr=o(" (ALBERT model)"),Ffr=l(),R8=a("li"),Abe=a("strong"),Tfr=o("bart"),Mfr=o(" \u2014 "),EW=a("a"),Efr=o("TFBartForConditionalGeneration"),Cfr=o(" (BART model)"),wfr=l(),P8=a("li"),ybe=a("strong"),Afr=o("bert"),yfr=o(" \u2014 "),CW=a("a"),Lfr=o("TFBertForPreTraining"),xfr=o(" (BERT model)"),$fr=l(),B8=a("li"),Lbe=a("strong"),kfr=o("camembert"),Sfr=o(" \u2014 "),wW=a("a"),Rfr=o("TFCamembertForMaskedLM"),Pfr=o(" (CamemBERT model)"),Bfr=l(),I8=a("li"),xbe=a("strong"),Ifr=o("ctrl"),qfr=o(" \u2014 "),AW=a("a"),Nfr=o("TFCTRLLMHeadModel"),jfr=o(" (CTRL model)"),Dfr=l(),q8=a("li"),$be=a("strong"),Gfr=o("distilbert"),Ofr=o(" \u2014 "),yW=a("a"),Vfr=o("TFDistilBertForMaskedLM"),Xfr=o(" (DistilBERT model)"),zfr=l(),N8=a("li"),kbe=a("strong"),Wfr=o("electra"),Qfr=o(" \u2014 "),LW=a("a"),Hfr=o("TFElectraForPreTraining"),Ufr=o(" (ELECTRA model)"),Jfr=l(),j8=a("li"),Sbe=a("strong"),Yfr=o("flaubert"),Kfr=o(" \u2014 "),xW=a("a"),Zfr=o("TFFlaubertWithLMHeadModel"),emr=o(" (FlauBERT model)"),omr=l(),D8=a("li"),Rbe=a("strong"),rmr=o("funnel"),tmr=o(" \u2014 "),$W=a("a"),amr=o("TFFunnelForPreTraining"),nmr=o(" (Funnel Transformer model)"),smr=l(),G8=a("li"),Pbe=a("strong"),lmr=o("gpt2"),imr=o(" \u2014 "),kW=a("a"),dmr=o("TFGPT2LMHeadModel"),cmr=o(" (OpenAI GPT-2 model)"),fmr=l(),O8=a("li"),Bbe=a("strong"),mmr=o("layoutlm"),gmr=o(" \u2014 "),SW=a("a"),hmr=o("TFLayoutLMForMaskedLM"),pmr=o(" (LayoutLM model)"),_mr=l(),V8=a("li"),Ibe=a("strong"),umr=o("lxmert"),bmr=o(" \u2014 "),RW=a("a"),vmr=o("TFLxmertForPreTraining"),Fmr=o(" (LXMERT model)"),Tmr=l(),X8=a("li"),qbe=a("strong"),Mmr=o("mobilebert"),Emr=o(" \u2014 "),PW=a("a"),Cmr=o("TFMobileBertForPreTraining"),wmr=o(" (MobileBERT model)"),Amr=l(),z8=a("li"),Nbe=a("strong"),ymr=o("mpnet"),Lmr=o(" \u2014 "),BW=a("a"),xmr=o("TFMPNetForMaskedLM"),$mr=o(" (MPNet model)"),kmr=l(),W8=a("li"),jbe=a("strong"),Smr=o("openai-gpt"),Rmr=o(" \u2014 "),IW=a("a"),Pmr=o("TFOpenAIGPTLMHeadModel"),Bmr=o(" (OpenAI GPT model)"),Imr=l(),Q8=a("li"),Dbe=a("strong"),qmr=o("roberta"),Nmr=o(" \u2014 "),qW=a("a"),jmr=o("TFRobertaForMaskedLM"),Dmr=o(" (RoBERTa model)"),Gmr=l(),H8=a("li"),Gbe=a("strong"),Omr=o("t5"),Vmr=o(" \u2014 "),NW=a("a"),Xmr=o("TFT5ForConditionalGeneration"),zmr=o(" (T5 model)"),Wmr=l(),U8=a("li"),Obe=a("strong"),Qmr=o("tapas"),Hmr=o(" \u2014 "),jW=a("a"),Umr=o("TFTapasForMaskedLM"),Jmr=o(" (TAPAS model)"),Ymr=l(),J8=a("li"),Vbe=a("strong"),Kmr=o("transfo-xl"),Zmr=o(" \u2014 "),DW=a("a"),egr=o("TFTransfoXLLMHeadModel"),ogr=o(" (Transformer-XL model)"),rgr=l(),Y8=a("li"),Xbe=a("strong"),tgr=o("vit_mae"),agr=o(" \u2014 "),GW=a("a"),ngr=o("TFViTMAEForPreTraining"),sgr=o(" (ViTMAE model)"),lgr=l(),K8=a("li"),zbe=a("strong"),igr=o("xlm"),dgr=o(" \u2014 "),OW=a("a"),cgr=o("TFXLMWithLMHeadModel"),fgr=o(" (XLM model)"),mgr=l(),Z8=a("li"),Wbe=a("strong"),ggr=o("xlm-roberta"),hgr=o(" \u2014 "),VW=a("a"),pgr=o("TFXLMRobertaForMaskedLM"),_gr=o(" (XLM-RoBERTa model)"),ugr=l(),e7=a("li"),Qbe=a("strong"),bgr=o("xlnet"),vgr=o(" \u2014 "),XW=a("a"),Fgr=o("TFXLNetLMHeadModel"),Tgr=o(" (XLNet model)"),Mgr=l(),F(o7.$$.fragment),Wqe=l(),Wd=a("h2"),r7=a("a"),Hbe=a("span"),F(oL.$$.fragment),Egr=l(),Ube=a("span"),Cgr=o("TFAutoModelForCausalLM"),Qqe=l(),Zo=a("div"),F(rL.$$.fragment),wgr=l(),Qd=a("p"),Agr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zW=a("a"),ygr=o("from_pretrained()"),Lgr=o(" class method or the "),WW=a("a"),xgr=o("from_config()"),$gr=o(` class
method.`),kgr=l(),tL=a("p"),Sgr=o("This class cannot be instantiated directly using "),Jbe=a("code"),Rgr=o("__init__()"),Pgr=o(" (throws an error)."),Bgr=l(),xt=a("div"),F(aL.$$.fragment),Igr=l(),Ybe=a("p"),qgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ngr=l(),Hd=a("p"),jgr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),Dgr=o("not"),Ggr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" to load the model weights."),Xgr=l(),F(t7.$$.fragment),zgr=l(),yr=a("div"),F(nL.$$.fragment),Wgr=l(),Zbe=a("p"),Qgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hgr=l(),en=a("p"),Ugr=o("The model class to instantiate is selected based on the "),e2e=a("code"),Jgr=o("model_type"),Ygr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(":"),rhr=l(),Te=a("ul"),a7=a("li"),t2e=a("strong"),thr=o("bert"),ahr=o(" \u2014 "),HW=a("a"),nhr=o("TFBertLMHeadModel"),shr=o(" (BERT model)"),lhr=l(),n7=a("li"),a2e=a("strong"),ihr=o("camembert"),dhr=o(" \u2014 "),UW=a("a"),chr=o("TFCamembertForCausalLM"),fhr=o(" (CamemBERT model)"),mhr=l(),s7=a("li"),n2e=a("strong"),ghr=o("ctrl"),hhr=o(" \u2014 "),JW=a("a"),phr=o("TFCTRLLMHeadModel"),_hr=o(" (CTRL model)"),uhr=l(),l7=a("li"),s2e=a("strong"),bhr=o("gpt2"),vhr=o(" \u2014 "),YW=a("a"),Fhr=o("TFGPT2LMHeadModel"),Thr=o(" (OpenAI GPT-2 model)"),Mhr=l(),i7=a("li"),l2e=a("strong"),Ehr=o("gptj"),Chr=o(" \u2014 "),KW=a("a"),whr=o("TFGPTJForCausalLM"),Ahr=o(" (GPT-J model)"),yhr=l(),d7=a("li"),i2e=a("strong"),Lhr=o("openai-gpt"),xhr=o(" \u2014 "),ZW=a("a"),$hr=o("TFOpenAIGPTLMHeadModel"),khr=o(" (OpenAI GPT model)"),Shr=l(),c7=a("li"),d2e=a("strong"),Rhr=o("rembert"),Phr=o(" \u2014 "),eQ=a("a"),Bhr=o("TFRemBertForCausalLM"),Ihr=o(" (RemBERT model)"),qhr=l(),f7=a("li"),c2e=a("strong"),Nhr=o("roberta"),jhr=o(" \u2014 "),oQ=a("a"),Dhr=o("TFRobertaForCausalLM"),Ghr=o(" (RoBERTa model)"),Ohr=l(),m7=a("li"),f2e=a("strong"),Vhr=o("roformer"),Xhr=o(" \u2014 "),rQ=a("a"),zhr=o("TFRoFormerForCausalLM"),Whr=o(" (RoFormer model)"),Qhr=l(),g7=a("li"),m2e=a("strong"),Hhr=o("transfo-xl"),Uhr=o(" \u2014 "),tQ=a("a"),Jhr=o("TFTransfoXLLMHeadModel"),Yhr=o(" (Transformer-XL model)"),Khr=l(),h7=a("li"),g2e=a("strong"),Zhr=o("xlm"),epr=o(" \u2014 "),aQ=a("a"),opr=o("TFXLMWithLMHeadModel"),rpr=o(" (XLM model)"),tpr=l(),p7=a("li"),h2e=a("strong"),apr=o("xlnet"),npr=o(" \u2014 "),nQ=a("a"),spr=o("TFXLNetLMHeadModel"),lpr=o(" (XLNet model)"),ipr=l(),F(_7.$$.fragment),Hqe=l(),Ud=a("h2"),u7=a("a"),p2e=a("span"),F(sL.$$.fragment),dpr=l(),_2e=a("span"),cpr=o("TFAutoModelForImageClassification"),Uqe=l(),er=a("div"),F(lL.$$.fragment),fpr=l(),Jd=a("p"),mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sQ=a("a"),gpr=o("from_pretrained()"),hpr=o(" class method or the "),lQ=a("a"),ppr=o("from_config()"),_pr=o(` class
method.`),upr=l(),iL=a("p"),bpr=o("This class cannot be instantiated directly using "),u2e=a("code"),vpr=o("__init__()"),Fpr=o(" (throws an error)."),Tpr=l(),$t=a("div"),F(dL.$$.fragment),Mpr=l(),b2e=a("p"),Epr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cpr=l(),Yd=a("p"),wpr=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),Apr=o("not"),ypr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),Lpr=o("from_pretrained()"),xpr=o(" to load the model weights."),$pr=l(),F(b7.$$.fragment),kpr=l(),Lr=a("div"),F(cL.$$.fragment),Spr=l(),F2e=a("p"),Rpr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ppr=l(),on=a("p"),Bpr=o("The model class to instantiate is selected based on the "),T2e=a("code"),Ipr=o("model_type"),qpr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),Npr=o("pretrained_model_name_or_path"),jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(":"),Opr=l(),rn=a("ul"),v7=a("li"),C2e=a("strong"),Vpr=o("convnext"),Xpr=o(" \u2014 "),dQ=a("a"),zpr=o("TFConvNextForImageClassification"),Wpr=o(" (ConvNext model)"),Qpr=l(),F7=a("li"),w2e=a("strong"),Hpr=o("data2vec-vision"),Upr=o(" \u2014 "),cQ=a("a"),Jpr=o("TFData2VecVisionForImageClassification"),Ypr=o(" (Data2VecVision model)"),Kpr=l(),T7=a("li"),A2e=a("strong"),Zpr=o("swin"),e_r=o(" \u2014 "),fQ=a("a"),o_r=o("TFSwinForImageClassification"),r_r=o(" (Swin model)"),t_r=l(),M7=a("li"),y2e=a("strong"),a_r=o("vit"),n_r=o(" \u2014 "),mQ=a("a"),s_r=o("TFViTForImageClassification"),l_r=o(" (ViT model)"),i_r=l(),F(E7.$$.fragment),Jqe=l(),Kd=a("h2"),C7=a("a"),L2e=a("span"),F(fL.$$.fragment),d_r=l(),x2e=a("span"),c_r=o("TFAutoModelForMaskedLM"),Yqe=l(),or=a("div"),F(mL.$$.fragment),f_r=l(),Zd=a("p"),m_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gQ=a("a"),g_r=o("from_pretrained()"),h_r=o(" class method or the "),hQ=a("a"),p_r=o("from_config()"),__r=o(` class
method.`),u_r=l(),gL=a("p"),b_r=o("This class cannot be instantiated directly using "),$2e=a("code"),v_r=o("__init__()"),F_r=o(" (throws an error)."),T_r=l(),kt=a("div"),F(hL.$$.fragment),M_r=l(),k2e=a("p"),E_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C_r=l(),ec=a("p"),w_r=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),A_r=o("not"),y_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),L_r=o("from_pretrained()"),x_r=o(" to load the model weights."),$_r=l(),F(w7.$$.fragment),k_r=l(),xr=a("div"),F(pL.$$.fragment),S_r=l(),R2e=a("p"),R_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P_r=l(),tn=a("p"),B_r=o("The model class to instantiate is selected based on the "),P2e=a("code"),I_r=o("model_type"),q_r=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),N_r=o("pretrained_model_name_or_path"),j_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),D_r=o("pretrained_model_name_or_path"),G_r=o(":"),O_r=l(),ie=a("ul"),A7=a("li"),q2e=a("strong"),V_r=o("albert"),X_r=o(" \u2014 "),_Q=a("a"),z_r=o("TFAlbertForMaskedLM"),W_r=o(" (ALBERT model)"),Q_r=l(),y7=a("li"),N2e=a("strong"),H_r=o("bert"),U_r=o(" \u2014 "),uQ=a("a"),J_r=o("TFBertForMaskedLM"),Y_r=o(" (BERT model)"),K_r=l(),L7=a("li"),j2e=a("strong"),Z_r=o("camembert"),eur=o(" \u2014 "),bQ=a("a"),our=o("TFCamembertForMaskedLM"),rur=o(" (CamemBERT model)"),tur=l(),x7=a("li"),D2e=a("strong"),aur=o("convbert"),nur=o(" \u2014 "),vQ=a("a"),sur=o("TFConvBertForMaskedLM"),lur=o(" (ConvBERT model)"),iur=l(),$7=a("li"),G2e=a("strong"),dur=o("deberta"),cur=o(" \u2014 "),FQ=a("a"),fur=o("TFDebertaForMaskedLM"),mur=o(" (DeBERTa model)"),gur=l(),k7=a("li"),O2e=a("strong"),hur=o("deberta-v2"),pur=o(" \u2014 "),TQ=a("a"),_ur=o("TFDebertaV2ForMaskedLM"),uur=o(" (DeBERTa-v2 model)"),bur=l(),S7=a("li"),V2e=a("strong"),vur=o("distilbert"),Fur=o(" \u2014 "),MQ=a("a"),Tur=o("TFDistilBertForMaskedLM"),Mur=o(" (DistilBERT model)"),Eur=l(),R7=a("li"),X2e=a("strong"),Cur=o("electra"),wur=o(" \u2014 "),EQ=a("a"),Aur=o("TFElectraForMaskedLM"),yur=o(" (ELECTRA model)"),Lur=l(),P7=a("li"),z2e=a("strong"),xur=o("flaubert"),$ur=o(" \u2014 "),CQ=a("a"),kur=o("TFFlaubertWithLMHeadModel"),Sur=o(" (FlauBERT model)"),Rur=l(),B7=a("li"),W2e=a("strong"),Pur=o("funnel"),Bur=o(" \u2014 "),wQ=a("a"),Iur=o("TFFunnelForMaskedLM"),qur=o(" (Funnel Transformer model)"),Nur=l(),I7=a("li"),Q2e=a("strong"),jur=o("layoutlm"),Dur=o(" \u2014 "),AQ=a("a"),Gur=o("TFLayoutLMForMaskedLM"),Our=o(" (LayoutLM model)"),Vur=l(),q7=a("li"),H2e=a("strong"),Xur=o("longformer"),zur=o(" \u2014 "),yQ=a("a"),Wur=o("TFLongformerForMaskedLM"),Qur=o(" (Longformer model)"),Hur=l(),N7=a("li"),U2e=a("strong"),Uur=o("mobilebert"),Jur=o(" \u2014 "),LQ=a("a"),Yur=o("TFMobileBertForMaskedLM"),Kur=o(" (MobileBERT model)"),Zur=l(),j7=a("li"),J2e=a("strong"),e1r=o("mpnet"),o1r=o(" \u2014 "),xQ=a("a"),r1r=o("TFMPNetForMaskedLM"),t1r=o(" (MPNet model)"),a1r=l(),D7=a("li"),Y2e=a("strong"),n1r=o("rembert"),s1r=o(" \u2014 "),$Q=a("a"),l1r=o("TFRemBertForMaskedLM"),i1r=o(" (RemBERT model)"),d1r=l(),G7=a("li"),K2e=a("strong"),c1r=o("roberta"),f1r=o(" \u2014 "),kQ=a("a"),m1r=o("TFRobertaForMaskedLM"),g1r=o(" (RoBERTa model)"),h1r=l(),O7=a("li"),Z2e=a("strong"),p1r=o("roformer"),_1r=o(" \u2014 "),SQ=a("a"),u1r=o("TFRoFormerForMaskedLM"),b1r=o(" (RoFormer model)"),v1r=l(),V7=a("li"),eve=a("strong"),F1r=o("tapas"),T1r=o(" \u2014 "),RQ=a("a"),M1r=o("TFTapasForMaskedLM"),E1r=o(" (TAPAS model)"),C1r=l(),X7=a("li"),ove=a("strong"),w1r=o("xlm"),A1r=o(" \u2014 "),PQ=a("a"),y1r=o("TFXLMWithLMHeadModel"),L1r=o(" (XLM model)"),x1r=l(),z7=a("li"),rve=a("strong"),$1r=o("xlm-roberta"),k1r=o(" \u2014 "),BQ=a("a"),S1r=o("TFXLMRobertaForMaskedLM"),R1r=o(" (XLM-RoBERTa model)"),P1r=l(),F(W7.$$.fragment),Kqe=l(),oc=a("h2"),Q7=a("a"),tve=a("span"),F(_L.$$.fragment),B1r=l(),ave=a("span"),I1r=o("TFAutoModelForSeq2SeqLM"),Zqe=l(),rr=a("div"),F(uL.$$.fragment),q1r=l(),rc=a("p"),N1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IQ=a("a"),j1r=o("from_pretrained()"),D1r=o(" class method or the "),qQ=a("a"),G1r=o("from_config()"),O1r=o(` class
method.`),V1r=l(),bL=a("p"),X1r=o("This class cannot be instantiated directly using "),nve=a("code"),z1r=o("__init__()"),W1r=o(" (throws an error)."),Q1r=l(),St=a("div"),F(vL.$$.fragment),H1r=l(),sve=a("p"),U1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J1r=l(),tc=a("p"),Y1r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),K1r=o("not"),Z1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),ebr=o("from_pretrained()"),obr=o(" to load the model weights."),rbr=l(),F(H7.$$.fragment),tbr=l(),$r=a("div"),F(FL.$$.fragment),abr=l(),ive=a("p"),nbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sbr=l(),an=a("p"),lbr=o("The model class to instantiate is selected based on the "),dve=a("code"),ibr=o("model_type"),dbr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(":"),hbr=l(),ye=a("ul"),U7=a("li"),mve=a("strong"),pbr=o("bart"),_br=o(" \u2014 "),jQ=a("a"),ubr=o("TFBartForConditionalGeneration"),bbr=o(" (BART model)"),vbr=l(),J7=a("li"),gve=a("strong"),Fbr=o("blenderbot"),Tbr=o(" \u2014 "),DQ=a("a"),Mbr=o("TFBlenderbotForConditionalGeneration"),Ebr=o(" (Blenderbot model)"),Cbr=l(),Y7=a("li"),hve=a("strong"),wbr=o("blenderbot-small"),Abr=o(" \u2014 "),GQ=a("a"),ybr=o("TFBlenderbotSmallForConditionalGeneration"),Lbr=o(" (BlenderbotSmall model)"),xbr=l(),K7=a("li"),pve=a("strong"),$br=o("encoder-decoder"),kbr=o(" \u2014 "),OQ=a("a"),Sbr=o("TFEncoderDecoderModel"),Rbr=o(" (Encoder decoder model)"),Pbr=l(),Z7=a("li"),_ve=a("strong"),Bbr=o("led"),Ibr=o(" \u2014 "),VQ=a("a"),qbr=o("TFLEDForConditionalGeneration"),Nbr=o(" (LED model)"),jbr=l(),eM=a("li"),uve=a("strong"),Dbr=o("marian"),Gbr=o(" \u2014 "),XQ=a("a"),Obr=o("TFMarianMTModel"),Vbr=o(" (Marian model)"),Xbr=l(),oM=a("li"),bve=a("strong"),zbr=o("mbart"),Wbr=o(" \u2014 "),zQ=a("a"),Qbr=o("TFMBartForConditionalGeneration"),Hbr=o(" (mBART model)"),Ubr=l(),rM=a("li"),vve=a("strong"),Jbr=o("mt5"),Ybr=o(" \u2014 "),WQ=a("a"),Kbr=o("TFMT5ForConditionalGeneration"),Zbr=o(" (mT5 model)"),e2r=l(),tM=a("li"),Fve=a("strong"),o2r=o("pegasus"),r2r=o(" \u2014 "),QQ=a("a"),t2r=o("TFPegasusForConditionalGeneration"),a2r=o(" (Pegasus model)"),n2r=l(),aM=a("li"),Tve=a("strong"),s2r=o("t5"),l2r=o(" \u2014 "),HQ=a("a"),i2r=o("TFT5ForConditionalGeneration"),d2r=o(" (T5 model)"),c2r=l(),F(nM.$$.fragment),eNe=l(),ac=a("h2"),sM=a("a"),Mve=a("span"),F(TL.$$.fragment),f2r=l(),Eve=a("span"),m2r=o("TFAutoModelForSequenceClassification"),oNe=l(),tr=a("div"),F(ML.$$.fragment),g2r=l(),nc=a("p"),h2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UQ=a("a"),p2r=o("from_pretrained()"),_2r=o(" class method or the "),JQ=a("a"),u2r=o("from_config()"),b2r=o(` class
method.`),v2r=l(),EL=a("p"),F2r=o("This class cannot be instantiated directly using "),Cve=a("code"),T2r=o("__init__()"),M2r=o(" (throws an error)."),E2r=l(),Rt=a("div"),F(CL.$$.fragment),C2r=l(),wve=a("p"),w2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A2r=l(),sc=a("p"),y2r=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),L2r=o("not"),x2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),$2r=o("from_pretrained()"),k2r=o(" to load the model weights."),S2r=l(),F(lM.$$.fragment),R2r=l(),kr=a("div"),F(wL.$$.fragment),P2r=l(),yve=a("p"),B2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I2r=l(),nn=a("p"),q2r=o("The model class to instantiate is selected based on the "),Lve=a("code"),N2r=o("model_type"),j2r=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),D2r=o("pretrained_model_name_or_path"),G2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),O2r=o("pretrained_model_name_or_path"),V2r=o(":"),X2r=l(),ee=a("ul"),iM=a("li"),kve=a("strong"),z2r=o("albert"),W2r=o(" \u2014 "),KQ=a("a"),Q2r=o("TFAlbertForSequenceClassification"),H2r=o(" (ALBERT model)"),U2r=l(),dM=a("li"),Sve=a("strong"),J2r=o("bert"),Y2r=o(" \u2014 "),ZQ=a("a"),K2r=o("TFBertForSequenceClassification"),Z2r=o(" (BERT model)"),evr=l(),cM=a("li"),Rve=a("strong"),ovr=o("camembert"),rvr=o(" \u2014 "),eH=a("a"),tvr=o("TFCamembertForSequenceClassification"),avr=o(" (CamemBERT model)"),nvr=l(),fM=a("li"),Pve=a("strong"),svr=o("convbert"),lvr=o(" \u2014 "),oH=a("a"),ivr=o("TFConvBertForSequenceClassification"),dvr=o(" (ConvBERT model)"),cvr=l(),mM=a("li"),Bve=a("strong"),fvr=o("ctrl"),mvr=o(" \u2014 "),rH=a("a"),gvr=o("TFCTRLForSequenceClassification"),hvr=o(" (CTRL model)"),pvr=l(),gM=a("li"),Ive=a("strong"),_vr=o("deberta"),uvr=o(" \u2014 "),tH=a("a"),bvr=o("TFDebertaForSequenceClassification"),vvr=o(" (DeBERTa model)"),Fvr=l(),hM=a("li"),qve=a("strong"),Tvr=o("deberta-v2"),Mvr=o(" \u2014 "),aH=a("a"),Evr=o("TFDebertaV2ForSequenceClassification"),Cvr=o(" (DeBERTa-v2 model)"),wvr=l(),pM=a("li"),Nve=a("strong"),Avr=o("distilbert"),yvr=o(" \u2014 "),nH=a("a"),Lvr=o("TFDistilBertForSequenceClassification"),xvr=o(" (DistilBERT model)"),$vr=l(),_M=a("li"),jve=a("strong"),kvr=o("electra"),Svr=o(" \u2014 "),sH=a("a"),Rvr=o("TFElectraForSequenceClassification"),Pvr=o(" (ELECTRA model)"),Bvr=l(),uM=a("li"),Dve=a("strong"),Ivr=o("flaubert"),qvr=o(" \u2014 "),lH=a("a"),Nvr=o("TFFlaubertForSequenceClassification"),jvr=o(" (FlauBERT model)"),Dvr=l(),bM=a("li"),Gve=a("strong"),Gvr=o("funnel"),Ovr=o(" \u2014 "),iH=a("a"),Vvr=o("TFFunnelForSequenceClassification"),Xvr=o(" (Funnel Transformer model)"),zvr=l(),vM=a("li"),Ove=a("strong"),Wvr=o("gpt2"),Qvr=o(" \u2014 "),dH=a("a"),Hvr=o("TFGPT2ForSequenceClassification"),Uvr=o(" (OpenAI GPT-2 model)"),Jvr=l(),FM=a("li"),Vve=a("strong"),Yvr=o("gptj"),Kvr=o(" \u2014 "),cH=a("a"),Zvr=o("TFGPTJForSequenceClassification"),e3r=o(" (GPT-J model)"),o3r=l(),TM=a("li"),Xve=a("strong"),r3r=o("layoutlm"),t3r=o(" \u2014 "),fH=a("a"),a3r=o("TFLayoutLMForSequenceClassification"),n3r=o(" (LayoutLM model)"),s3r=l(),MM=a("li"),zve=a("strong"),l3r=o("longformer"),i3r=o(" \u2014 "),mH=a("a"),d3r=o("TFLongformerForSequenceClassification"),c3r=o(" (Longformer model)"),f3r=l(),EM=a("li"),Wve=a("strong"),m3r=o("mobilebert"),g3r=o(" \u2014 "),gH=a("a"),h3r=o("TFMobileBertForSequenceClassification"),p3r=o(" (MobileBERT model)"),_3r=l(),CM=a("li"),Qve=a("strong"),u3r=o("mpnet"),b3r=o(" \u2014 "),hH=a("a"),v3r=o("TFMPNetForSequenceClassification"),F3r=o(" (MPNet model)"),T3r=l(),wM=a("li"),Hve=a("strong"),M3r=o("openai-gpt"),E3r=o(" \u2014 "),pH=a("a"),C3r=o("TFOpenAIGPTForSequenceClassification"),w3r=o(" (OpenAI GPT model)"),A3r=l(),AM=a("li"),Uve=a("strong"),y3r=o("rembert"),L3r=o(" \u2014 "),_H=a("a"),x3r=o("TFRemBertForSequenceClassification"),$3r=o(" (RemBERT model)"),k3r=l(),yM=a("li"),Jve=a("strong"),S3r=o("roberta"),R3r=o(" \u2014 "),uH=a("a"),P3r=o("TFRobertaForSequenceClassification"),B3r=o(" (RoBERTa model)"),I3r=l(),LM=a("li"),Yve=a("strong"),q3r=o("roformer"),N3r=o(" \u2014 "),bH=a("a"),j3r=o("TFRoFormerForSequenceClassification"),D3r=o(" (RoFormer model)"),G3r=l(),xM=a("li"),Kve=a("strong"),O3r=o("tapas"),V3r=o(" \u2014 "),vH=a("a"),X3r=o("TFTapasForSequenceClassification"),z3r=o(" (TAPAS model)"),W3r=l(),$M=a("li"),Zve=a("strong"),Q3r=o("transfo-xl"),H3r=o(" \u2014 "),FH=a("a"),U3r=o("TFTransfoXLForSequenceClassification"),J3r=o(" (Transformer-XL model)"),Y3r=l(),kM=a("li"),e3e=a("strong"),K3r=o("xlm"),Z3r=o(" \u2014 "),TH=a("a"),eFr=o("TFXLMForSequenceClassification"),oFr=o(" (XLM model)"),rFr=l(),SM=a("li"),o3e=a("strong"),tFr=o("xlm-roberta"),aFr=o(" \u2014 "),MH=a("a"),nFr=o("TFXLMRobertaForSequenceClassification"),sFr=o(" (XLM-RoBERTa model)"),lFr=l(),RM=a("li"),r3e=a("strong"),iFr=o("xlnet"),dFr=o(" \u2014 "),EH=a("a"),cFr=o("TFXLNetForSequenceClassification"),fFr=o(" (XLNet model)"),mFr=l(),F(PM.$$.fragment),rNe=l(),lc=a("h2"),BM=a("a"),t3e=a("span"),F(AL.$$.fragment),gFr=l(),a3e=a("span"),hFr=o("TFAutoModelForMultipleChoice"),tNe=l(),ar=a("div"),F(yL.$$.fragment),pFr=l(),ic=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CH=a("a"),uFr=o("from_pretrained()"),bFr=o(" class method or the "),wH=a("a"),vFr=o("from_config()"),FFr=o(` class
method.`),TFr=l(),LL=a("p"),MFr=o("This class cannot be instantiated directly using "),n3e=a("code"),EFr=o("__init__()"),CFr=o(" (throws an error)."),wFr=l(),Pt=a("div"),F(xL.$$.fragment),AFr=l(),s3e=a("p"),yFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LFr=l(),dc=a("p"),xFr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),$Fr=o("not"),kFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),SFr=o("from_pretrained()"),RFr=o(" to load the model weights."),PFr=l(),F(IM.$$.fragment),BFr=l(),Sr=a("div"),F($L.$$.fragment),IFr=l(),i3e=a("p"),qFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NFr=l(),sn=a("p"),jFr=o("The model class to instantiate is selected based on the "),d3e=a("code"),DFr=o("model_type"),GFr=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),OFr=o("pretrained_model_name_or_path"),VFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(":"),WFr=l(),he=a("ul"),qM=a("li"),m3e=a("strong"),QFr=o("albert"),HFr=o(" \u2014 "),yH=a("a"),UFr=o("TFAlbertForMultipleChoice"),JFr=o(" (ALBERT model)"),YFr=l(),NM=a("li"),g3e=a("strong"),KFr=o("bert"),ZFr=o(" \u2014 "),LH=a("a"),eTr=o("TFBertForMultipleChoice"),oTr=o(" (BERT model)"),rTr=l(),jM=a("li"),h3e=a("strong"),tTr=o("camembert"),aTr=o(" \u2014 "),xH=a("a"),nTr=o("TFCamembertForMultipleChoice"),sTr=o(" (CamemBERT model)"),lTr=l(),DM=a("li"),p3e=a("strong"),iTr=o("convbert"),dTr=o(" \u2014 "),$H=a("a"),cTr=o("TFConvBertForMultipleChoice"),fTr=o(" (ConvBERT model)"),mTr=l(),GM=a("li"),_3e=a("strong"),gTr=o("distilbert"),hTr=o(" \u2014 "),kH=a("a"),pTr=o("TFDistilBertForMultipleChoice"),_Tr=o(" (DistilBERT model)"),uTr=l(),OM=a("li"),u3e=a("strong"),bTr=o("electra"),vTr=o(" \u2014 "),SH=a("a"),FTr=o("TFElectraForMultipleChoice"),TTr=o(" (ELECTRA model)"),MTr=l(),VM=a("li"),b3e=a("strong"),ETr=o("flaubert"),CTr=o(" \u2014 "),RH=a("a"),wTr=o("TFFlaubertForMultipleChoice"),ATr=o(" (FlauBERT model)"),yTr=l(),XM=a("li"),v3e=a("strong"),LTr=o("funnel"),xTr=o(" \u2014 "),PH=a("a"),$Tr=o("TFFunnelForMultipleChoice"),kTr=o(" (Funnel Transformer model)"),STr=l(),zM=a("li"),F3e=a("strong"),RTr=o("longformer"),PTr=o(" \u2014 "),BH=a("a"),BTr=o("TFLongformerForMultipleChoice"),ITr=o(" (Longformer model)"),qTr=l(),WM=a("li"),T3e=a("strong"),NTr=o("mobilebert"),jTr=o(" \u2014 "),IH=a("a"),DTr=o("TFMobileBertForMultipleChoice"),GTr=o(" (MobileBERT model)"),OTr=l(),QM=a("li"),M3e=a("strong"),VTr=o("mpnet"),XTr=o(" \u2014 "),qH=a("a"),zTr=o("TFMPNetForMultipleChoice"),WTr=o(" (MPNet model)"),QTr=l(),HM=a("li"),E3e=a("strong"),HTr=o("rembert"),UTr=o(" \u2014 "),NH=a("a"),JTr=o("TFRemBertForMultipleChoice"),YTr=o(" (RemBERT model)"),KTr=l(),UM=a("li"),C3e=a("strong"),ZTr=o("roberta"),e8r=o(" \u2014 "),jH=a("a"),o8r=o("TFRobertaForMultipleChoice"),r8r=o(" (RoBERTa model)"),t8r=l(),JM=a("li"),w3e=a("strong"),a8r=o("roformer"),n8r=o(" \u2014 "),DH=a("a"),s8r=o("TFRoFormerForMultipleChoice"),l8r=o(" (RoFormer model)"),i8r=l(),YM=a("li"),A3e=a("strong"),d8r=o("xlm"),c8r=o(" \u2014 "),GH=a("a"),f8r=o("TFXLMForMultipleChoice"),m8r=o(" (XLM model)"),g8r=l(),KM=a("li"),y3e=a("strong"),h8r=o("xlm-roberta"),p8r=o(" \u2014 "),OH=a("a"),_8r=o("TFXLMRobertaForMultipleChoice"),u8r=o(" (XLM-RoBERTa model)"),b8r=l(),ZM=a("li"),L3e=a("strong"),v8r=o("xlnet"),F8r=o(" \u2014 "),VH=a("a"),T8r=o("TFXLNetForMultipleChoice"),M8r=o(" (XLNet model)"),E8r=l(),F(e4.$$.fragment),aNe=l(),cc=a("h2"),o4=a("a"),x3e=a("span"),F(kL.$$.fragment),C8r=l(),$3e=a("span"),w8r=o("TFAutoModelForNextSentencePrediction"),nNe=l(),nr=a("div"),F(SL.$$.fragment),A8r=l(),fc=a("p"),y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XH=a("a"),L8r=o("from_pretrained()"),x8r=o(" class method or the "),zH=a("a"),$8r=o("from_config()"),k8r=o(` class
method.`),S8r=l(),RL=a("p"),R8r=o("This class cannot be instantiated directly using "),k3e=a("code"),P8r=o("__init__()"),B8r=o(" (throws an error)."),I8r=l(),Bt=a("div"),F(PL.$$.fragment),q8r=l(),S3e=a("p"),N8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j8r=l(),mc=a("p"),D8r=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),G8r=o("not"),O8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),V8r=o("from_pretrained()"),X8r=o(" to load the model weights."),z8r=l(),F(r4.$$.fragment),W8r=l(),Rr=a("div"),F(BL.$$.fragment),Q8r=l(),P3e=a("p"),H8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),U8r=l(),ln=a("p"),J8r=o("The model class to instantiate is selected based on the "),B3e=a("code"),Y8r=o("model_type"),K8r=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),Z8r=o("pretrained_model_name_or_path"),e7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(":"),t7r=l(),IL=a("ul"),t4=a("li"),N3e=a("strong"),a7r=o("bert"),n7r=o(" \u2014 "),QH=a("a"),s7r=o("TFBertForNextSentencePrediction"),l7r=o(" (BERT model)"),i7r=l(),a4=a("li"),j3e=a("strong"),d7r=o("mobilebert"),c7r=o(" \u2014 "),HH=a("a"),f7r=o("TFMobileBertForNextSentencePrediction"),m7r=o(" (MobileBERT model)"),g7r=l(),F(n4.$$.fragment),sNe=l(),gc=a("h2"),s4=a("a"),D3e=a("span"),F(qL.$$.fragment),h7r=l(),G3e=a("span"),p7r=o("TFAutoModelForTableQuestionAnswering"),lNe=l(),sr=a("div"),F(NL.$$.fragment),_7r=l(),hc=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UH=a("a"),b7r=o("from_pretrained()"),v7r=o(" class method or the "),JH=a("a"),F7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),jL=a("p"),E7r=o("This class cannot be instantiated directly using "),O3e=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),It=a("div"),F(DL.$$.fragment),y7r=l(),V3e=a("p"),L7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x7r=l(),pc=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),X3e=a("strong"),k7r=o("not"),S7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),R7r=o("from_pretrained()"),P7r=o(" to load the model weights."),B7r=l(),F(l4.$$.fragment),I7r=l(),Pr=a("div"),F(GL.$$.fragment),q7r=l(),z3e=a("p"),N7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),j7r=l(),dn=a("p"),D7r=o("The model class to instantiate is selected based on the "),W3e=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(":"),Q7r=l(),U3e=a("ul"),i4=a("li"),J3e=a("strong"),H7r=o("tapas"),U7r=o(" \u2014 "),KH=a("a"),J7r=o("TFTapasForQuestionAnswering"),Y7r=o(" (TAPAS model)"),K7r=l(),F(d4.$$.fragment),iNe=l(),_c=a("h2"),c4=a("a"),Y3e=a("span"),F(OL.$$.fragment),Z7r=l(),K3e=a("span"),eMr=o("TFAutoModelForTokenClassification"),dNe=l(),lr=a("div"),F(VL.$$.fragment),oMr=l(),uc=a("p"),rMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZH=a("a"),tMr=o("from_pretrained()"),aMr=o(" class method or the "),eU=a("a"),nMr=o("from_config()"),sMr=o(` class
method.`),lMr=l(),XL=a("p"),iMr=o("This class cannot be instantiated directly using "),Z3e=a("code"),dMr=o("__init__()"),cMr=o(" (throws an error)."),fMr=l(),qt=a("div"),F(zL.$$.fragment),mMr=l(),eFe=a("p"),gMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hMr=l(),bc=a("p"),pMr=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),_Mr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),bMr=o("from_pretrained()"),vMr=o(" to load the model weights."),FMr=l(),F(f4.$$.fragment),TMr=l(),Br=a("div"),F(WL.$$.fragment),MMr=l(),rFe=a("p"),EMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CMr=l(),cn=a("p"),wMr=o("The model class to instantiate is selected based on the "),tFe=a("code"),AMr=o("model_type"),yMr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),LMr=o("pretrained_model_name_or_path"),xMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),$Mr=o("pretrained_model_name_or_path"),kMr=o(":"),SMr=l(),de=a("ul"),m4=a("li"),sFe=a("strong"),RMr=o("albert"),PMr=o(" \u2014 "),rU=a("a"),BMr=o("TFAlbertForTokenClassification"),IMr=o(" (ALBERT model)"),qMr=l(),g4=a("li"),lFe=a("strong"),NMr=o("bert"),jMr=o(" \u2014 "),tU=a("a"),DMr=o("TFBertForTokenClassification"),GMr=o(" (BERT model)"),OMr=l(),h4=a("li"),iFe=a("strong"),VMr=o("camembert"),XMr=o(" \u2014 "),aU=a("a"),zMr=o("TFCamembertForTokenClassification"),WMr=o(" (CamemBERT model)"),QMr=l(),p4=a("li"),dFe=a("strong"),HMr=o("convbert"),UMr=o(" \u2014 "),nU=a("a"),JMr=o("TFConvBertForTokenClassification"),YMr=o(" (ConvBERT model)"),KMr=l(),_4=a("li"),cFe=a("strong"),ZMr=o("deberta"),e4r=o(" \u2014 "),sU=a("a"),o4r=o("TFDebertaForTokenClassification"),r4r=o(" (DeBERTa model)"),t4r=l(),u4=a("li"),fFe=a("strong"),a4r=o("deberta-v2"),n4r=o(" \u2014 "),lU=a("a"),s4r=o("TFDebertaV2ForTokenClassification"),l4r=o(" (DeBERTa-v2 model)"),i4r=l(),b4=a("li"),mFe=a("strong"),d4r=o("distilbert"),c4r=o(" \u2014 "),iU=a("a"),f4r=o("TFDistilBertForTokenClassification"),m4r=o(" (DistilBERT model)"),g4r=l(),v4=a("li"),gFe=a("strong"),h4r=o("electra"),p4r=o(" \u2014 "),dU=a("a"),_4r=o("TFElectraForTokenClassification"),u4r=o(" (ELECTRA model)"),b4r=l(),F4=a("li"),hFe=a("strong"),v4r=o("flaubert"),F4r=o(" \u2014 "),cU=a("a"),T4r=o("TFFlaubertForTokenClassification"),M4r=o(" (FlauBERT model)"),E4r=l(),T4=a("li"),pFe=a("strong"),C4r=o("funnel"),w4r=o(" \u2014 "),fU=a("a"),A4r=o("TFFunnelForTokenClassification"),y4r=o(" (Funnel Transformer model)"),L4r=l(),M4=a("li"),_Fe=a("strong"),x4r=o("layoutlm"),$4r=o(" \u2014 "),mU=a("a"),k4r=o("TFLayoutLMForTokenClassification"),S4r=o(" (LayoutLM model)"),R4r=l(),E4=a("li"),uFe=a("strong"),P4r=o("longformer"),B4r=o(" \u2014 "),gU=a("a"),I4r=o("TFLongformerForTokenClassification"),q4r=o(" (Longformer model)"),N4r=l(),C4=a("li"),bFe=a("strong"),j4r=o("mobilebert"),D4r=o(" \u2014 "),hU=a("a"),G4r=o("TFMobileBertForTokenClassification"),O4r=o(" (MobileBERT model)"),V4r=l(),w4=a("li"),vFe=a("strong"),X4r=o("mpnet"),z4r=o(" \u2014 "),pU=a("a"),W4r=o("TFMPNetForTokenClassification"),Q4r=o(" (MPNet model)"),H4r=l(),A4=a("li"),FFe=a("strong"),U4r=o("rembert"),J4r=o(" \u2014 "),_U=a("a"),Y4r=o("TFRemBertForTokenClassification"),K4r=o(" (RemBERT model)"),Z4r=l(),y4=a("li"),TFe=a("strong"),eEr=o("roberta"),oEr=o(" \u2014 "),uU=a("a"),rEr=o("TFRobertaForTokenClassification"),tEr=o(" (RoBERTa model)"),aEr=l(),L4=a("li"),MFe=a("strong"),nEr=o("roformer"),sEr=o(" \u2014 "),bU=a("a"),lEr=o("TFRoFormerForTokenClassification"),iEr=o(" (RoFormer model)"),dEr=l(),x4=a("li"),EFe=a("strong"),cEr=o("xlm"),fEr=o(" \u2014 "),vU=a("a"),mEr=o("TFXLMForTokenClassification"),gEr=o(" (XLM model)"),hEr=l(),$4=a("li"),CFe=a("strong"),pEr=o("xlm-roberta"),_Er=o(" \u2014 "),FU=a("a"),uEr=o("TFXLMRobertaForTokenClassification"),bEr=o(" (XLM-RoBERTa model)"),vEr=l(),k4=a("li"),wFe=a("strong"),FEr=o("xlnet"),TEr=o(" \u2014 "),TU=a("a"),MEr=o("TFXLNetForTokenClassification"),EEr=o(" (XLNet model)"),CEr=l(),F(S4.$$.fragment),cNe=l(),vc=a("h2"),R4=a("a"),AFe=a("span"),F(QL.$$.fragment),wEr=l(),yFe=a("span"),AEr=o("TFAutoModelForQuestionAnswering"),fNe=l(),ir=a("div"),F(HL.$$.fragment),yEr=l(),Fc=a("p"),LEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MU=a("a"),xEr=o("from_pretrained()"),$Er=o(" class method or the "),EU=a("a"),kEr=o("from_config()"),SEr=o(` class
method.`),REr=l(),UL=a("p"),PEr=o("This class cannot be instantiated directly using "),LFe=a("code"),BEr=o("__init__()"),IEr=o(" (throws an error)."),qEr=l(),Nt=a("div"),F(JL.$$.fragment),NEr=l(),xFe=a("p"),jEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DEr=l(),Tc=a("p"),GEr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),OEr=o("not"),VEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),XEr=o("from_pretrained()"),zEr=o(" to load the model weights."),WEr=l(),F(P4.$$.fragment),QEr=l(),Ir=a("div"),F(YL.$$.fragment),HEr=l(),kFe=a("p"),UEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JEr=l(),fn=a("p"),YEr=o("The model class to instantiate is selected based on the "),SFe=a("code"),KEr=o("model_type"),ZEr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(":"),aCr=l(),ce=a("ul"),B4=a("li"),BFe=a("strong"),nCr=o("albert"),sCr=o(" \u2014 "),wU=a("a"),lCr=o("TFAlbertForQuestionAnswering"),iCr=o(" (ALBERT model)"),dCr=l(),I4=a("li"),IFe=a("strong"),cCr=o("bert"),fCr=o(" \u2014 "),AU=a("a"),mCr=o("TFBertForQuestionAnswering"),gCr=o(" (BERT model)"),hCr=l(),q4=a("li"),qFe=a("strong"),pCr=o("camembert"),_Cr=o(" \u2014 "),yU=a("a"),uCr=o("TFCamembertForQuestionAnswering"),bCr=o(" (CamemBERT model)"),vCr=l(),N4=a("li"),NFe=a("strong"),FCr=o("convbert"),TCr=o(" \u2014 "),LU=a("a"),MCr=o("TFConvBertForQuestionAnswering"),ECr=o(" (ConvBERT model)"),CCr=l(),j4=a("li"),jFe=a("strong"),wCr=o("deberta"),ACr=o(" \u2014 "),xU=a("a"),yCr=o("TFDebertaForQuestionAnswering"),LCr=o(" (DeBERTa model)"),xCr=l(),D4=a("li"),DFe=a("strong"),$Cr=o("deberta-v2"),kCr=o(" \u2014 "),$U=a("a"),SCr=o("TFDebertaV2ForQuestionAnswering"),RCr=o(" (DeBERTa-v2 model)"),PCr=l(),G4=a("li"),GFe=a("strong"),BCr=o("distilbert"),ICr=o(" \u2014 "),kU=a("a"),qCr=o("TFDistilBertForQuestionAnswering"),NCr=o(" (DistilBERT model)"),jCr=l(),O4=a("li"),OFe=a("strong"),DCr=o("electra"),GCr=o(" \u2014 "),SU=a("a"),OCr=o("TFElectraForQuestionAnswering"),VCr=o(" (ELECTRA model)"),XCr=l(),V4=a("li"),VFe=a("strong"),zCr=o("flaubert"),WCr=o(" \u2014 "),RU=a("a"),QCr=o("TFFlaubertForQuestionAnsweringSimple"),HCr=o(" (FlauBERT model)"),UCr=l(),X4=a("li"),XFe=a("strong"),JCr=o("funnel"),YCr=o(" \u2014 "),PU=a("a"),KCr=o("TFFunnelForQuestionAnswering"),ZCr=o(" (Funnel Transformer model)"),e5r=l(),z4=a("li"),zFe=a("strong"),o5r=o("gptj"),r5r=o(" \u2014 "),BU=a("a"),t5r=o("TFGPTJForQuestionAnswering"),a5r=o(" (GPT-J model)"),n5r=l(),W4=a("li"),WFe=a("strong"),s5r=o("longformer"),l5r=o(" \u2014 "),IU=a("a"),i5r=o("TFLongformerForQuestionAnswering"),d5r=o(" (Longformer model)"),c5r=l(),Q4=a("li"),QFe=a("strong"),f5r=o("mobilebert"),m5r=o(" \u2014 "),qU=a("a"),g5r=o("TFMobileBertForQuestionAnswering"),h5r=o(" (MobileBERT model)"),p5r=l(),H4=a("li"),HFe=a("strong"),_5r=o("mpnet"),u5r=o(" \u2014 "),NU=a("a"),b5r=o("TFMPNetForQuestionAnswering"),v5r=o(" (MPNet model)"),F5r=l(),U4=a("li"),UFe=a("strong"),T5r=o("rembert"),M5r=o(" \u2014 "),jU=a("a"),E5r=o("TFRemBertForQuestionAnswering"),C5r=o(" (RemBERT model)"),w5r=l(),J4=a("li"),JFe=a("strong"),A5r=o("roberta"),y5r=o(" \u2014 "),DU=a("a"),L5r=o("TFRobertaForQuestionAnswering"),x5r=o(" (RoBERTa model)"),$5r=l(),Y4=a("li"),YFe=a("strong"),k5r=o("roformer"),S5r=o(" \u2014 "),GU=a("a"),R5r=o("TFRoFormerForQuestionAnswering"),P5r=o(" (RoFormer model)"),B5r=l(),K4=a("li"),KFe=a("strong"),I5r=o("xlm"),q5r=o(" \u2014 "),OU=a("a"),N5r=o("TFXLMForQuestionAnsweringSimple"),j5r=o(" (XLM model)"),D5r=l(),Z4=a("li"),ZFe=a("strong"),G5r=o("xlm-roberta"),O5r=o(" \u2014 "),VU=a("a"),V5r=o("TFXLMRobertaForQuestionAnswering"),X5r=o(" (XLM-RoBERTa model)"),z5r=l(),eE=a("li"),eTe=a("strong"),W5r=o("xlnet"),Q5r=o(" \u2014 "),XU=a("a"),H5r=o("TFXLNetForQuestionAnsweringSimple"),U5r=o(" (XLNet model)"),J5r=l(),F(oE.$$.fragment),mNe=l(),Mc=a("h2"),rE=a("a"),oTe=a("span"),F(KL.$$.fragment),Y5r=l(),rTe=a("span"),K5r=o("TFAutoModelForVision2Seq"),gNe=l(),dr=a("div"),F(ZL.$$.fragment),Z5r=l(),Ec=a("p"),ewr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zU=a("a"),owr=o("from_pretrained()"),rwr=o(" class method or the "),WU=a("a"),twr=o("from_config()"),awr=o(` class
method.`),nwr=l(),ex=a("p"),swr=o("This class cannot be instantiated directly using "),tTe=a("code"),lwr=o("__init__()"),iwr=o(" (throws an error)."),dwr=l(),jt=a("div"),F(ox.$$.fragment),cwr=l(),aTe=a("p"),fwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mwr=l(),Cc=a("p"),gwr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),hwr=o("not"),pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),_wr=o("from_pretrained()"),uwr=o(" to load the model weights."),bwr=l(),F(tE.$$.fragment),vwr=l(),qr=a("div"),F(rx.$$.fragment),Fwr=l(),sTe=a("p"),Twr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mwr=l(),mn=a("p"),Ewr=o("The model class to instantiate is selected based on the "),lTe=a("code"),Cwr=o("model_type"),wwr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),Awr=o("pretrained_model_name_or_path"),ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),Lwr=o("pretrained_model_name_or_path"),xwr=o(":"),$wr=l(),cTe=a("ul"),aE=a("li"),fTe=a("strong"),kwr=o("vision-encoder-decoder"),Swr=o(" \u2014 "),HU=a("a"),Rwr=o("TFVisionEncoderDecoderModel"),Pwr=o(" (Vision Encoder decoder model)"),Bwr=l(),F(nE.$$.fragment),hNe=l(),wc=a("h2"),sE=a("a"),mTe=a("span"),F(tx.$$.fragment),Iwr=l(),gTe=a("span"),qwr=o("TFAutoModelForSpeechSeq2Seq"),pNe=l(),cr=a("div"),F(ax.$$.fragment),Nwr=l(),Ac=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UU=a("a"),Dwr=o("from_pretrained()"),Gwr=o(" class method or the "),JU=a("a"),Owr=o("from_config()"),Vwr=o(` class
method.`),Xwr=l(),nx=a("p"),zwr=o("This class cannot be instantiated directly using "),hTe=a("code"),Wwr=o("__init__()"),Qwr=o(" (throws an error)."),Hwr=l(),Dt=a("div"),F(sx.$$.fragment),Uwr=l(),pTe=a("p"),Jwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ywr=l(),yc=a("p"),Kwr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),Zwr=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(lE.$$.fragment),aAr=l(),Nr=a("div"),F(lx.$$.fragment),nAr=l(),uTe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lAr=l(),gn=a("p"),iAr=o("The model class to instantiate is selected based on the "),bTe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),TTe=a("ul"),iE=a("li"),MTe=a("strong"),_Ar=o("speech_to_text"),uAr=o(" \u2014 "),KU=a("a"),bAr=o("TFSpeech2TextForConditionalGeneration"),vAr=o(" (Speech2Text model)"),FAr=l(),F(dE.$$.fragment),_Ne=l(),Lc=a("h2"),cE=a("a"),ETe=a("span"),F(ix.$$.fragment),TAr=l(),CTe=a("span"),MAr=o("FlaxAutoModel"),uNe=l(),fr=a("div"),F(dx.$$.fragment),EAr=l(),xc=a("p"),CAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=a("a"),wAr=o("from_pretrained()"),AAr=o(" class method or the "),eJ=a("a"),yAr=o("from_config()"),LAr=o(` class
method.`),xAr=l(),cx=a("p"),$Ar=o("This class cannot be instantiated directly using "),wTe=a("code"),kAr=o("__init__()"),SAr=o(" (throws an error)."),RAr=l(),Gt=a("div"),F(fx.$$.fragment),PAr=l(),ATe=a("p"),BAr=o("Instantiates one of the base model classes of the library from a configuration."),IAr=l(),$c=a("p"),qAr=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),NAr=o("not"),jAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),DAr=o("from_pretrained()"),GAr=o(" to load the model weights."),OAr=l(),F(fE.$$.fragment),VAr=l(),jr=a("div"),F(mx.$$.fragment),XAr=l(),LTe=a("p"),zAr=o("Instantiate one of the base model classes of the library from a pretrained model."),WAr=l(),hn=a("p"),QAr=o("The model class to instantiate is selected based on the "),xTe=a("code"),HAr=o("model_type"),UAr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(":"),e0r=l(),re=a("ul"),mE=a("li"),STe=a("strong"),o0r=o("albert"),r0r=o(" \u2014 "),rJ=a("a"),t0r=o("FlaxAlbertModel"),a0r=o(" (ALBERT model)"),n0r=l(),gE=a("li"),RTe=a("strong"),s0r=o("bart"),l0r=o(" \u2014 "),tJ=a("a"),i0r=o("FlaxBartModel"),d0r=o(" (BART model)"),c0r=l(),hE=a("li"),PTe=a("strong"),f0r=o("beit"),m0r=o(" \u2014 "),aJ=a("a"),g0r=o("FlaxBeitModel"),h0r=o(" (BEiT model)"),p0r=l(),pE=a("li"),BTe=a("strong"),_0r=o("bert"),u0r=o(" \u2014 "),nJ=a("a"),b0r=o("FlaxBertModel"),v0r=o(" (BERT model)"),F0r=l(),_E=a("li"),ITe=a("strong"),T0r=o("big_bird"),M0r=o(" \u2014 "),sJ=a("a"),E0r=o("FlaxBigBirdModel"),C0r=o(" (BigBird model)"),w0r=l(),uE=a("li"),qTe=a("strong"),A0r=o("blenderbot"),y0r=o(" \u2014 "),lJ=a("a"),L0r=o("FlaxBlenderbotModel"),x0r=o(" (Blenderbot model)"),$0r=l(),bE=a("li"),NTe=a("strong"),k0r=o("blenderbot-small"),S0r=o(" \u2014 "),iJ=a("a"),R0r=o("FlaxBlenderbotSmallModel"),P0r=o(" (BlenderbotSmall model)"),B0r=l(),vE=a("li"),jTe=a("strong"),I0r=o("clip"),q0r=o(" \u2014 "),dJ=a("a"),N0r=o("FlaxCLIPModel"),j0r=o(" (CLIP model)"),D0r=l(),FE=a("li"),DTe=a("strong"),G0r=o("distilbert"),O0r=o(" \u2014 "),cJ=a("a"),V0r=o("FlaxDistilBertModel"),X0r=o(" (DistilBERT model)"),z0r=l(),TE=a("li"),GTe=a("strong"),W0r=o("electra"),Q0r=o(" \u2014 "),fJ=a("a"),H0r=o("FlaxElectraModel"),U0r=o(" (ELECTRA model)"),J0r=l(),ME=a("li"),OTe=a("strong"),Y0r=o("gpt2"),K0r=o(" \u2014 "),mJ=a("a"),Z0r=o("FlaxGPT2Model"),e6r=o(" (OpenAI GPT-2 model)"),o6r=l(),EE=a("li"),VTe=a("strong"),r6r=o("gpt_neo"),t6r=o(" \u2014 "),gJ=a("a"),a6r=o("FlaxGPTNeoModel"),n6r=o(" (GPT Neo model)"),s6r=l(),CE=a("li"),XTe=a("strong"),l6r=o("gptj"),i6r=o(" \u2014 "),hJ=a("a"),d6r=o("FlaxGPTJModel"),c6r=o(" (GPT-J model)"),f6r=l(),wE=a("li"),zTe=a("strong"),m6r=o("marian"),g6r=o(" \u2014 "),pJ=a("a"),h6r=o("FlaxMarianModel"),p6r=o(" (Marian model)"),_6r=l(),AE=a("li"),WTe=a("strong"),u6r=o("mbart"),b6r=o(" \u2014 "),_J=a("a"),v6r=o("FlaxMBartModel"),F6r=o(" (mBART model)"),T6r=l(),yE=a("li"),QTe=a("strong"),M6r=o("mt5"),E6r=o(" \u2014 "),uJ=a("a"),C6r=o("FlaxMT5Model"),w6r=o(" (mT5 model)"),A6r=l(),LE=a("li"),HTe=a("strong"),y6r=o("pegasus"),L6r=o(" \u2014 "),bJ=a("a"),x6r=o("FlaxPegasusModel"),$6r=o(" (Pegasus model)"),k6r=l(),xE=a("li"),UTe=a("strong"),S6r=o("roberta"),R6r=o(" \u2014 "),vJ=a("a"),P6r=o("FlaxRobertaModel"),B6r=o(" (RoBERTa model)"),I6r=l(),$E=a("li"),JTe=a("strong"),q6r=o("roformer"),N6r=o(" \u2014 "),FJ=a("a"),j6r=o("FlaxRoFormerModel"),D6r=o(" (RoFormer model)"),G6r=l(),kE=a("li"),YTe=a("strong"),O6r=o("t5"),V6r=o(" \u2014 "),TJ=a("a"),X6r=o("FlaxT5Model"),z6r=o(" (T5 model)"),W6r=l(),SE=a("li"),KTe=a("strong"),Q6r=o("vision-text-dual-encoder"),H6r=o(" \u2014 "),MJ=a("a"),U6r=o("FlaxVisionTextDualEncoderModel"),J6r=o(" (VisionTextDualEncoder model)"),Y6r=l(),RE=a("li"),ZTe=a("strong"),K6r=o("vit"),Z6r=o(" \u2014 "),EJ=a("a"),eyr=o("FlaxViTModel"),oyr=o(" (ViT model)"),ryr=l(),PE=a("li"),e8e=a("strong"),tyr=o("wav2vec2"),ayr=o(" \u2014 "),CJ=a("a"),nyr=o("FlaxWav2Vec2Model"),syr=o(" (Wav2Vec2 model)"),lyr=l(),BE=a("li"),o8e=a("strong"),iyr=o("xglm"),dyr=o(" \u2014 "),wJ=a("a"),cyr=o("FlaxXGLMModel"),fyr=o(" (XGLM model)"),myr=l(),IE=a("li"),r8e=a("strong"),gyr=o("xlm-roberta"),hyr=o(" \u2014 "),AJ=a("a"),pyr=o("FlaxXLMRobertaModel"),_yr=o(" (XLM-RoBERTa model)"),uyr=l(),F(qE.$$.fragment),bNe=l(),kc=a("h2"),NE=a("a"),t8e=a("span"),F(gx.$$.fragment),byr=l(),a8e=a("span"),vyr=o("FlaxAutoModelForCausalLM"),vNe=l(),mr=a("div"),F(hx.$$.fragment),Fyr=l(),Sc=a("p"),Tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yJ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" class method or the "),LJ=a("a"),Cyr=o("from_config()"),wyr=o(` class
method.`),Ayr=l(),px=a("p"),yyr=o("This class cannot be instantiated directly using "),n8e=a("code"),Lyr=o("__init__()"),xyr=o(" (throws an error)."),$yr=l(),Ot=a("div"),F(_x.$$.fragment),kyr=l(),s8e=a("p"),Syr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ryr=l(),Rc=a("p"),Pyr=o(`Note:
Loading a model from its configuration file does `),l8e=a("strong"),Byr=o("not"),Iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),qyr=o("from_pretrained()"),Nyr=o(" to load the model weights."),jyr=l(),F(jE.$$.fragment),Dyr=l(),Dr=a("div"),F(ux.$$.fragment),Gyr=l(),i8e=a("p"),Oyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vyr=l(),pn=a("p"),Xyr=o("The model class to instantiate is selected based on the "),d8e=a("code"),zyr=o("model_type"),Wyr=o(` property of the config object (either
passed as an argument or loaded from `),c8e=a("code"),Qyr=o("pretrained_model_name_or_path"),Hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=a("code"),Uyr=o("pretrained_model_name_or_path"),Jyr=o(":"),Yyr=l(),Re=a("ul"),DE=a("li"),m8e=a("strong"),Kyr=o("bart"),Zyr=o(" \u2014 "),$J=a("a"),eLr=o("FlaxBartForCausalLM"),oLr=o(" (BART model)"),rLr=l(),GE=a("li"),g8e=a("strong"),tLr=o("bert"),aLr=o(" \u2014 "),kJ=a("a"),nLr=o("FlaxBertForCausalLM"),sLr=o(" (BERT model)"),lLr=l(),OE=a("li"),h8e=a("strong"),iLr=o("big_bird"),dLr=o(" \u2014 "),SJ=a("a"),cLr=o("FlaxBigBirdForCausalLM"),fLr=o(" (BigBird model)"),mLr=l(),VE=a("li"),p8e=a("strong"),gLr=o("electra"),hLr=o(" \u2014 "),RJ=a("a"),pLr=o("FlaxElectraForCausalLM"),_Lr=o(" (ELECTRA model)"),uLr=l(),XE=a("li"),_8e=a("strong"),bLr=o("gpt2"),vLr=o(" \u2014 "),PJ=a("a"),FLr=o("FlaxGPT2LMHeadModel"),TLr=o(" (OpenAI GPT-2 model)"),MLr=l(),zE=a("li"),u8e=a("strong"),ELr=o("gpt_neo"),CLr=o(" \u2014 "),BJ=a("a"),wLr=o("FlaxGPTNeoForCausalLM"),ALr=o(" (GPT Neo model)"),yLr=l(),WE=a("li"),b8e=a("strong"),LLr=o("gptj"),xLr=o(" \u2014 "),IJ=a("a"),$Lr=o("FlaxGPTJForCausalLM"),kLr=o(" (GPT-J model)"),SLr=l(),QE=a("li"),v8e=a("strong"),RLr=o("roberta"),PLr=o(" \u2014 "),qJ=a("a"),BLr=o("FlaxRobertaForCausalLM"),ILr=o(" (RoBERTa model)"),qLr=l(),HE=a("li"),F8e=a("strong"),NLr=o("xglm"),jLr=o(" \u2014 "),NJ=a("a"),DLr=o("FlaxXGLMForCausalLM"),GLr=o(" (XGLM model)"),OLr=l(),F(UE.$$.fragment),FNe=l(),Pc=a("h2"),JE=a("a"),T8e=a("span"),F(bx.$$.fragment),VLr=l(),M8e=a("span"),XLr=o("FlaxAutoModelForPreTraining"),TNe=l(),gr=a("div"),F(vx.$$.fragment),zLr=l(),Bc=a("p"),WLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jJ=a("a"),QLr=o("from_pretrained()"),HLr=o(" class method or the "),DJ=a("a"),ULr=o("from_config()"),JLr=o(` class
method.`),YLr=l(),Fx=a("p"),KLr=o("This class cannot be instantiated directly using "),E8e=a("code"),ZLr=o("__init__()"),exr=o(" (throws an error)."),oxr=l(),Vt=a("div"),F(Tx.$$.fragment),rxr=l(),C8e=a("p"),txr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),axr=l(),Ic=a("p"),nxr=o(`Note:
Loading a model from its configuration file does `),w8e=a("strong"),sxr=o("not"),lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),ixr=o("from_pretrained()"),dxr=o(" to load the model weights."),cxr=l(),F(YE.$$.fragment),fxr=l(),Gr=a("div"),F(Mx.$$.fragment),mxr=l(),A8e=a("p"),gxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hxr=l(),_n=a("p"),pxr=o("The model class to instantiate is selected based on the "),y8e=a("code"),_xr=o("model_type"),uxr=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=a("code"),Fxr=o("pretrained_model_name_or_path"),Txr=o(":"),Mxr=l(),Me=a("ul"),KE=a("li"),$8e=a("strong"),Exr=o("albert"),Cxr=o(" \u2014 "),OJ=a("a"),wxr=o("FlaxAlbertForPreTraining"),Axr=o(" (ALBERT model)"),yxr=l(),ZE=a("li"),k8e=a("strong"),Lxr=o("bart"),xxr=o(" \u2014 "),VJ=a("a"),$xr=o("FlaxBartForConditionalGeneration"),kxr=o(" (BART model)"),Sxr=l(),eC=a("li"),S8e=a("strong"),Rxr=o("bert"),Pxr=o(" \u2014 "),XJ=a("a"),Bxr=o("FlaxBertForPreTraining"),Ixr=o(" (BERT model)"),qxr=l(),oC=a("li"),R8e=a("strong"),Nxr=o("big_bird"),jxr=o(" \u2014 "),zJ=a("a"),Dxr=o("FlaxBigBirdForPreTraining"),Gxr=o(" (BigBird model)"),Oxr=l(),rC=a("li"),P8e=a("strong"),Vxr=o("electra"),Xxr=o(" \u2014 "),WJ=a("a"),zxr=o("FlaxElectraForPreTraining"),Wxr=o(" (ELECTRA model)"),Qxr=l(),tC=a("li"),B8e=a("strong"),Hxr=o("mbart"),Uxr=o(" \u2014 "),QJ=a("a"),Jxr=o("FlaxMBartForConditionalGeneration"),Yxr=o(" (mBART model)"),Kxr=l(),aC=a("li"),I8e=a("strong"),Zxr=o("mt5"),e9r=o(" \u2014 "),HJ=a("a"),o9r=o("FlaxMT5ForConditionalGeneration"),r9r=o(" (mT5 model)"),t9r=l(),nC=a("li"),q8e=a("strong"),a9r=o("roberta"),n9r=o(" \u2014 "),UJ=a("a"),s9r=o("FlaxRobertaForMaskedLM"),l9r=o(" (RoBERTa model)"),i9r=l(),sC=a("li"),N8e=a("strong"),d9r=o("roformer"),c9r=o(" \u2014 "),JJ=a("a"),f9r=o("FlaxRoFormerForMaskedLM"),m9r=o(" (RoFormer model)"),g9r=l(),lC=a("li"),j8e=a("strong"),h9r=o("t5"),p9r=o(" \u2014 "),YJ=a("a"),_9r=o("FlaxT5ForConditionalGeneration"),u9r=o(" (T5 model)"),b9r=l(),iC=a("li"),D8e=a("strong"),v9r=o("wav2vec2"),F9r=o(" \u2014 "),KJ=a("a"),T9r=o("FlaxWav2Vec2ForPreTraining"),M9r=o(" (Wav2Vec2 model)"),E9r=l(),dC=a("li"),G8e=a("strong"),C9r=o("xlm-roberta"),w9r=o(" \u2014 "),ZJ=a("a"),A9r=o("FlaxXLMRobertaForMaskedLM"),y9r=o(" (XLM-RoBERTa model)"),L9r=l(),F(cC.$$.fragment),MNe=l(),qc=a("h2"),fC=a("a"),O8e=a("span"),F(Ex.$$.fragment),x9r=l(),V8e=a("span"),$9r=o("FlaxAutoModelForMaskedLM"),ENe=l(),hr=a("div"),F(Cx.$$.fragment),k9r=l(),Nc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),oY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),q9r=l(),wx=a("p"),N9r=o("This class cannot be instantiated directly using "),X8e=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Xt=a("div"),F(Ax.$$.fragment),O9r=l(),z8e=a("p"),V9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X9r=l(),jc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),W9r=o("not"),Q9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(mC.$$.fragment),Y9r=l(),Or=a("div"),F(yx.$$.fragment),K9r=l(),Q8e=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e$r=l(),un=a("p"),o$r=o("The model class to instantiate is selected based on the "),H8e=a("code"),r$r=o("model_type"),t$r=o(` property of the config object (either
passed as an argument or loaded from `),U8e=a("code"),a$r=o("pretrained_model_name_or_path"),n$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=a("code"),s$r=o("pretrained_model_name_or_path"),l$r=o(":"),i$r=l(),Le=a("ul"),gC=a("li"),Y8e=a("strong"),d$r=o("albert"),c$r=o(" \u2014 "),tY=a("a"),f$r=o("FlaxAlbertForMaskedLM"),m$r=o(" (ALBERT model)"),g$r=l(),hC=a("li"),K8e=a("strong"),h$r=o("bart"),p$r=o(" \u2014 "),aY=a("a"),_$r=o("FlaxBartForConditionalGeneration"),u$r=o(" (BART model)"),b$r=l(),pC=a("li"),Z8e=a("strong"),v$r=o("bert"),F$r=o(" \u2014 "),nY=a("a"),T$r=o("FlaxBertForMaskedLM"),M$r=o(" (BERT model)"),E$r=l(),_C=a("li"),e7e=a("strong"),C$r=o("big_bird"),w$r=o(" \u2014 "),sY=a("a"),A$r=o("FlaxBigBirdForMaskedLM"),y$r=o(" (BigBird model)"),L$r=l(),uC=a("li"),o7e=a("strong"),x$r=o("distilbert"),$$r=o(" \u2014 "),lY=a("a"),k$r=o("FlaxDistilBertForMaskedLM"),S$r=o(" (DistilBERT model)"),R$r=l(),bC=a("li"),r7e=a("strong"),P$r=o("electra"),B$r=o(" \u2014 "),iY=a("a"),I$r=o("FlaxElectraForMaskedLM"),q$r=o(" (ELECTRA model)"),N$r=l(),vC=a("li"),t7e=a("strong"),j$r=o("mbart"),D$r=o(" \u2014 "),dY=a("a"),G$r=o("FlaxMBartForConditionalGeneration"),O$r=o(" (mBART model)"),V$r=l(),FC=a("li"),a7e=a("strong"),X$r=o("roberta"),z$r=o(" \u2014 "),cY=a("a"),W$r=o("FlaxRobertaForMaskedLM"),Q$r=o(" (RoBERTa model)"),H$r=l(),TC=a("li"),n7e=a("strong"),U$r=o("roformer"),J$r=o(" \u2014 "),fY=a("a"),Y$r=o("FlaxRoFormerForMaskedLM"),K$r=o(" (RoFormer model)"),Z$r=l(),MC=a("li"),s7e=a("strong"),ekr=o("xlm-roberta"),okr=o(" \u2014 "),mY=a("a"),rkr=o("FlaxXLMRobertaForMaskedLM"),tkr=o(" (XLM-RoBERTa model)"),akr=l(),F(EC.$$.fragment),CNe=l(),Dc=a("h2"),CC=a("a"),l7e=a("span"),F(Lx.$$.fragment),nkr=l(),i7e=a("span"),skr=o("FlaxAutoModelForSeq2SeqLM"),wNe=l(),pr=a("div"),F(xx.$$.fragment),lkr=l(),Gc=a("p"),ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gY=a("a"),dkr=o("from_pretrained()"),ckr=o(" class method or the "),hY=a("a"),fkr=o("from_config()"),mkr=o(` class
method.`),gkr=l(),$x=a("p"),hkr=o("This class cannot be instantiated directly using "),d7e=a("code"),pkr=o("__init__()"),_kr=o(" (throws an error)."),ukr=l(),zt=a("div"),F(kx.$$.fragment),bkr=l(),c7e=a("p"),vkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fkr=l(),Oc=a("p"),Tkr=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),Mkr=o("not"),Ekr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),Ckr=o("from_pretrained()"),wkr=o(" to load the model weights."),Akr=l(),F(wC.$$.fragment),ykr=l(),Vr=a("div"),F(Sx.$$.fragment),Lkr=l(),m7e=a("p"),xkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$kr=l(),bn=a("p"),kkr=o("The model class to instantiate is selected based on the "),g7e=a("code"),Skr=o("model_type"),Rkr=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(":"),Nkr=l(),Pe=a("ul"),AC=a("li"),_7e=a("strong"),jkr=o("bart"),Dkr=o(" \u2014 "),_Y=a("a"),Gkr=o("FlaxBartForConditionalGeneration"),Okr=o(" (BART model)"),Vkr=l(),yC=a("li"),u7e=a("strong"),Xkr=o("blenderbot"),zkr=o(" \u2014 "),uY=a("a"),Wkr=o("FlaxBlenderbotForConditionalGeneration"),Qkr=o(" (Blenderbot model)"),Hkr=l(),LC=a("li"),b7e=a("strong"),Ukr=o("blenderbot-small"),Jkr=o(" \u2014 "),bY=a("a"),Ykr=o("FlaxBlenderbotSmallForConditionalGeneration"),Kkr=o(" (BlenderbotSmall model)"),Zkr=l(),xC=a("li"),v7e=a("strong"),eSr=o("encoder-decoder"),oSr=o(" \u2014 "),vY=a("a"),rSr=o("FlaxEncoderDecoderModel"),tSr=o(" (Encoder decoder model)"),aSr=l(),$C=a("li"),F7e=a("strong"),nSr=o("marian"),sSr=o(" \u2014 "),FY=a("a"),lSr=o("FlaxMarianMTModel"),iSr=o(" (Marian model)"),dSr=l(),kC=a("li"),T7e=a("strong"),cSr=o("mbart"),fSr=o(" \u2014 "),TY=a("a"),mSr=o("FlaxMBartForConditionalGeneration"),gSr=o(" (mBART model)"),hSr=l(),SC=a("li"),M7e=a("strong"),pSr=o("mt5"),_Sr=o(" \u2014 "),MY=a("a"),uSr=o("FlaxMT5ForConditionalGeneration"),bSr=o(" (mT5 model)"),vSr=l(),RC=a("li"),E7e=a("strong"),FSr=o("pegasus"),TSr=o(" \u2014 "),EY=a("a"),MSr=o("FlaxPegasusForConditionalGeneration"),ESr=o(" (Pegasus model)"),CSr=l(),PC=a("li"),C7e=a("strong"),wSr=o("t5"),ASr=o(" \u2014 "),CY=a("a"),ySr=o("FlaxT5ForConditionalGeneration"),LSr=o(" (T5 model)"),xSr=l(),F(BC.$$.fragment),ANe=l(),Vc=a("h2"),IC=a("a"),w7e=a("span"),F(Rx.$$.fragment),$Sr=l(),A7e=a("span"),kSr=o("FlaxAutoModelForSequenceClassification"),yNe=l(),_r=a("div"),F(Px.$$.fragment),SSr=l(),Xc=a("p"),RSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wY=a("a"),PSr=o("from_pretrained()"),BSr=o(" class method or the "),AY=a("a"),ISr=o("from_config()"),qSr=o(` class
method.`),NSr=l(),Bx=a("p"),jSr=o("This class cannot be instantiated directly using "),y7e=a("code"),DSr=o("__init__()"),GSr=o(" (throws an error)."),OSr=l(),Wt=a("div"),F(Ix.$$.fragment),VSr=l(),L7e=a("p"),XSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zSr=l(),zc=a("p"),WSr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),QSr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),USr=o("from_pretrained()"),JSr=o(" to load the model weights."),YSr=l(),F(qC.$$.fragment),KSr=l(),Xr=a("div"),F(qx.$$.fragment),ZSr=l(),$7e=a("p"),eRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oRr=l(),vn=a("p"),rRr=o("The model class to instantiate is selected based on the "),k7e=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),xe=a("ul"),NC=a("li"),P7e=a("strong"),cRr=o("albert"),fRr=o(" \u2014 "),LY=a("a"),mRr=o("FlaxAlbertForSequenceClassification"),gRr=o(" (ALBERT model)"),hRr=l(),jC=a("li"),B7e=a("strong"),pRr=o("bart"),_Rr=o(" \u2014 "),xY=a("a"),uRr=o("FlaxBartForSequenceClassification"),bRr=o(" (BART model)"),vRr=l(),DC=a("li"),I7e=a("strong"),FRr=o("bert"),TRr=o(" \u2014 "),$Y=a("a"),MRr=o("FlaxBertForSequenceClassification"),ERr=o(" (BERT model)"),CRr=l(),GC=a("li"),q7e=a("strong"),wRr=o("big_bird"),ARr=o(" \u2014 "),kY=a("a"),yRr=o("FlaxBigBirdForSequenceClassification"),LRr=o(" (BigBird model)"),xRr=l(),OC=a("li"),N7e=a("strong"),$Rr=o("distilbert"),kRr=o(" \u2014 "),SY=a("a"),SRr=o("FlaxDistilBertForSequenceClassification"),RRr=o(" (DistilBERT model)"),PRr=l(),VC=a("li"),j7e=a("strong"),BRr=o("electra"),IRr=o(" \u2014 "),RY=a("a"),qRr=o("FlaxElectraForSequenceClassification"),NRr=o(" (ELECTRA model)"),jRr=l(),XC=a("li"),D7e=a("strong"),DRr=o("mbart"),GRr=o(" \u2014 "),PY=a("a"),ORr=o("FlaxMBartForSequenceClassification"),VRr=o(" (mBART model)"),XRr=l(),zC=a("li"),G7e=a("strong"),zRr=o("roberta"),WRr=o(" \u2014 "),BY=a("a"),QRr=o("FlaxRobertaForSequenceClassification"),HRr=o(" (RoBERTa model)"),URr=l(),WC=a("li"),O7e=a("strong"),JRr=o("roformer"),YRr=o(" \u2014 "),IY=a("a"),KRr=o("FlaxRoFormerForSequenceClassification"),ZRr=o(" (RoFormer model)"),ePr=l(),QC=a("li"),V7e=a("strong"),oPr=o("xlm-roberta"),rPr=o(" \u2014 "),qY=a("a"),tPr=o("FlaxXLMRobertaForSequenceClassification"),aPr=o(" (XLM-RoBERTa model)"),nPr=l(),F(HC.$$.fragment),LNe=l(),Wc=a("h2"),UC=a("a"),X7e=a("span"),F(Nx.$$.fragment),sPr=l(),z7e=a("span"),lPr=o("FlaxAutoModelForQuestionAnswering"),xNe=l(),ur=a("div"),F(jx.$$.fragment),iPr=l(),Qc=a("p"),dPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NY=a("a"),cPr=o("from_pretrained()"),fPr=o(" class method or the "),jY=a("a"),mPr=o("from_config()"),gPr=o(` class
method.`),hPr=l(),Dx=a("p"),pPr=o("This class cannot be instantiated directly using "),W7e=a("code"),_Pr=o("__init__()"),uPr=o(" (throws an error)."),bPr=l(),Qt=a("div"),F(Gx.$$.fragment),vPr=l(),Q7e=a("p"),FPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TPr=l(),Hc=a("p"),MPr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),EPr=o("not"),CPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),wPr=o("from_pretrained()"),APr=o(" to load the model weights."),yPr=l(),F(JC.$$.fragment),LPr=l(),zr=a("div"),F(Ox.$$.fragment),xPr=l(),U7e=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kPr=l(),Fn=a("p"),SPr=o("The model class to instantiate is selected based on the "),J7e=a("code"),RPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(":"),jPr=l(),$e=a("ul"),YC=a("li"),Z7e=a("strong"),DPr=o("albert"),GPr=o(" \u2014 "),GY=a("a"),OPr=o("FlaxAlbertForQuestionAnswering"),VPr=o(" (ALBERT model)"),XPr=l(),KC=a("li"),eMe=a("strong"),zPr=o("bart"),WPr=o(" \u2014 "),OY=a("a"),QPr=o("FlaxBartForQuestionAnswering"),HPr=o(" (BART model)"),UPr=l(),ZC=a("li"),oMe=a("strong"),JPr=o("bert"),YPr=o(" \u2014 "),VY=a("a"),KPr=o("FlaxBertForQuestionAnswering"),ZPr=o(" (BERT model)"),eBr=l(),e5=a("li"),rMe=a("strong"),oBr=o("big_bird"),rBr=o(" \u2014 "),XY=a("a"),tBr=o("FlaxBigBirdForQuestionAnswering"),aBr=o(" (BigBird model)"),nBr=l(),o5=a("li"),tMe=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),zY=a("a"),iBr=o("FlaxDistilBertForQuestionAnswering"),dBr=o(" (DistilBERT model)"),cBr=l(),r5=a("li"),aMe=a("strong"),fBr=o("electra"),mBr=o(" \u2014 "),WY=a("a"),gBr=o("FlaxElectraForQuestionAnswering"),hBr=o(" (ELECTRA model)"),pBr=l(),t5=a("li"),nMe=a("strong"),_Br=o("mbart"),uBr=o(" \u2014 "),QY=a("a"),bBr=o("FlaxMBartForQuestionAnswering"),vBr=o(" (mBART model)"),FBr=l(),a5=a("li"),sMe=a("strong"),TBr=o("roberta"),MBr=o(" \u2014 "),HY=a("a"),EBr=o("FlaxRobertaForQuestionAnswering"),CBr=o(" (RoBERTa model)"),wBr=l(),n5=a("li"),lMe=a("strong"),ABr=o("roformer"),yBr=o(" \u2014 "),UY=a("a"),LBr=o("FlaxRoFormerForQuestionAnswering"),xBr=o(" (RoFormer model)"),$Br=l(),s5=a("li"),iMe=a("strong"),kBr=o("xlm-roberta"),SBr=o(" \u2014 "),JY=a("a"),RBr=o("FlaxXLMRobertaForQuestionAnswering"),PBr=o(" (XLM-RoBERTa model)"),BBr=l(),F(l5.$$.fragment),$Ne=l(),Uc=a("h2"),i5=a("a"),dMe=a("span"),F(Vx.$$.fragment),IBr=l(),cMe=a("span"),qBr=o("FlaxAutoModelForTokenClassification"),kNe=l(),br=a("div"),F(Xx.$$.fragment),NBr=l(),Jc=a("p"),jBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YY=a("a"),DBr=o("from_pretrained()"),GBr=o(" class method or the "),KY=a("a"),OBr=o("from_config()"),VBr=o(` class
method.`),XBr=l(),zx=a("p"),zBr=o("This class cannot be instantiated directly using "),fMe=a("code"),WBr=o("__init__()"),QBr=o(" (throws an error)."),HBr=l(),Ht=a("div"),F(Wx.$$.fragment),UBr=l(),mMe=a("p"),JBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YBr=l(),Yc=a("p"),KBr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),ZBr=o("not"),eIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),oIr=o("from_pretrained()"),rIr=o(" to load the model weights."),tIr=l(),F(d5.$$.fragment),aIr=l(),Wr=a("div"),F(Qx.$$.fragment),nIr=l(),hMe=a("p"),sIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lIr=l(),Tn=a("p"),iIr=o("The model class to instantiate is selected based on the "),pMe=a("code"),dIr=o("model_type"),cIr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),gIr=o("pretrained_model_name_or_path"),hIr=o(":"),pIr=l(),De=a("ul"),c5=a("li"),bMe=a("strong"),_Ir=o("albert"),uIr=o(" \u2014 "),eK=a("a"),bIr=o("FlaxAlbertForTokenClassification"),vIr=o(" (ALBERT model)"),FIr=l(),f5=a("li"),vMe=a("strong"),TIr=o("bert"),MIr=o(" \u2014 "),oK=a("a"),EIr=o("FlaxBertForTokenClassification"),CIr=o(" (BERT model)"),wIr=l(),m5=a("li"),FMe=a("strong"),AIr=o("big_bird"),yIr=o(" \u2014 "),rK=a("a"),LIr=o("FlaxBigBirdForTokenClassification"),xIr=o(" (BigBird model)"),$Ir=l(),g5=a("li"),TMe=a("strong"),kIr=o("distilbert"),SIr=o(" \u2014 "),tK=a("a"),RIr=o("FlaxDistilBertForTokenClassification"),PIr=o(" (DistilBERT model)"),BIr=l(),h5=a("li"),MMe=a("strong"),IIr=o("electra"),qIr=o(" \u2014 "),aK=a("a"),NIr=o("FlaxElectraForTokenClassification"),jIr=o(" (ELECTRA model)"),DIr=l(),p5=a("li"),EMe=a("strong"),GIr=o("roberta"),OIr=o(" \u2014 "),nK=a("a"),VIr=o("FlaxRobertaForTokenClassification"),XIr=o(" (RoBERTa model)"),zIr=l(),_5=a("li"),CMe=a("strong"),WIr=o("roformer"),QIr=o(" \u2014 "),sK=a("a"),HIr=o("FlaxRoFormerForTokenClassification"),UIr=o(" (RoFormer model)"),JIr=l(),u5=a("li"),wMe=a("strong"),YIr=o("xlm-roberta"),KIr=o(" \u2014 "),lK=a("a"),ZIr=o("FlaxXLMRobertaForTokenClassification"),eqr=o(" (XLM-RoBERTa model)"),oqr=l(),F(b5.$$.fragment),SNe=l(),Kc=a("h2"),v5=a("a"),AMe=a("span"),F(Hx.$$.fragment),rqr=l(),yMe=a("span"),tqr=o("FlaxAutoModelForMultipleChoice"),RNe=l(),vr=a("div"),F(Ux.$$.fragment),aqr=l(),Zc=a("p"),nqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iK=a("a"),sqr=o("from_pretrained()"),lqr=o(" class method or the "),dK=a("a"),iqr=o("from_config()"),dqr=o(` class
method.`),cqr=l(),Jx=a("p"),fqr=o("This class cannot be instantiated directly using "),LMe=a("code"),mqr=o("__init__()"),gqr=o(" (throws an error)."),hqr=l(),Ut=a("div"),F(Yx.$$.fragment),pqr=l(),xMe=a("p"),_qr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uqr=l(),ef=a("p"),bqr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),vqr=o("not"),Fqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),Tqr=o("from_pretrained()"),Mqr=o(" to load the model weights."),Eqr=l(),F(F5.$$.fragment),Cqr=l(),Qr=a("div"),F(Kx.$$.fragment),wqr=l(),kMe=a("p"),Aqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yqr=l(),Mn=a("p"),Lqr=o("The model class to instantiate is selected based on the "),SMe=a("code"),xqr=o("model_type"),$qr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),Rqr=o("pretrained_model_name_or_path"),Pqr=o(":"),Bqr=l(),Ge=a("ul"),T5=a("li"),BMe=a("strong"),Iqr=o("albert"),qqr=o(" \u2014 "),fK=a("a"),Nqr=o("FlaxAlbertForMultipleChoice"),jqr=o(" (ALBERT model)"),Dqr=l(),M5=a("li"),IMe=a("strong"),Gqr=o("bert"),Oqr=o(" \u2014 "),mK=a("a"),Vqr=o("FlaxBertForMultipleChoice"),Xqr=o(" (BERT model)"),zqr=l(),E5=a("li"),qMe=a("strong"),Wqr=o("big_bird"),Qqr=o(" \u2014 "),gK=a("a"),Hqr=o("FlaxBigBirdForMultipleChoice"),Uqr=o(" (BigBird model)"),Jqr=l(),C5=a("li"),NMe=a("strong"),Yqr=o("distilbert"),Kqr=o(" \u2014 "),hK=a("a"),Zqr=o("FlaxDistilBertForMultipleChoice"),eNr=o(" (DistilBERT model)"),oNr=l(),w5=a("li"),jMe=a("strong"),rNr=o("electra"),tNr=o(" \u2014 "),pK=a("a"),aNr=o("FlaxElectraForMultipleChoice"),nNr=o(" (ELECTRA model)"),sNr=l(),A5=a("li"),DMe=a("strong"),lNr=o("roberta"),iNr=o(" \u2014 "),_K=a("a"),dNr=o("FlaxRobertaForMultipleChoice"),cNr=o(" (RoBERTa model)"),fNr=l(),y5=a("li"),GMe=a("strong"),mNr=o("roformer"),gNr=o(" \u2014 "),uK=a("a"),hNr=o("FlaxRoFormerForMultipleChoice"),pNr=o(" (RoFormer model)"),_Nr=l(),L5=a("li"),OMe=a("strong"),uNr=o("xlm-roberta"),bNr=o(" \u2014 "),bK=a("a"),vNr=o("FlaxXLMRobertaForMultipleChoice"),FNr=o(" (XLM-RoBERTa model)"),TNr=l(),F(x5.$$.fragment),PNe=l(),of=a("h2"),$5=a("a"),VMe=a("span"),F(Zx.$$.fragment),MNr=l(),XMe=a("span"),ENr=o("FlaxAutoModelForNextSentencePrediction"),BNe=l(),Fr=a("div"),F(e9.$$.fragment),CNr=l(),rf=a("p"),wNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vK=a("a"),ANr=o("from_pretrained()"),yNr=o(" class method or the "),FK=a("a"),LNr=o("from_config()"),xNr=o(` class
method.`),$Nr=l(),o9=a("p"),kNr=o("This class cannot be instantiated directly using "),zMe=a("code"),SNr=o("__init__()"),RNr=o(" (throws an error)."),PNr=l(),Jt=a("div"),F(r9.$$.fragment),BNr=l(),WMe=a("p"),INr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qNr=l(),tf=a("p"),NNr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),jNr=o("not"),DNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),GNr=o("from_pretrained()"),ONr=o(" to load the model weights."),VNr=l(),F(k5.$$.fragment),XNr=l(),Hr=a("div"),F(t9.$$.fragment),zNr=l(),HMe=a("p"),WNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QNr=l(),En=a("p"),HNr=o("The model class to instantiate is selected based on the "),UMe=a("code"),UNr=o("model_type"),JNr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),ZNr=o("pretrained_model_name_or_path"),ejr=o(":"),ojr=l(),KMe=a("ul"),S5=a("li"),ZMe=a("strong"),rjr=o("bert"),tjr=o(" \u2014 "),MK=a("a"),ajr=o("FlaxBertForNextSentencePrediction"),njr=o(" (BERT model)"),sjr=l(),F(R5.$$.fragment),INe=l(),af=a("h2"),P5=a("a"),e4e=a("span"),F(a9.$$.fragment),ljr=l(),o4e=a("span"),ijr=o("FlaxAutoModelForImageClassification"),qNe=l(),Tr=a("div"),F(n9.$$.fragment),djr=l(),nf=a("p"),cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EK=a("a"),fjr=o("from_pretrained()"),mjr=o(" class method or the "),CK=a("a"),gjr=o("from_config()"),hjr=o(` class
method.`),pjr=l(),s9=a("p"),_jr=o("This class cannot be instantiated directly using "),r4e=a("code"),ujr=o("__init__()"),bjr=o(" (throws an error)."),vjr=l(),Yt=a("div"),F(l9.$$.fragment),Fjr=l(),t4e=a("p"),Tjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mjr=l(),sf=a("p"),Ejr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),Cjr=o("not"),wjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),Ajr=o("from_pretrained()"),yjr=o(" to load the model weights."),Ljr=l(),F(B5.$$.fragment),xjr=l(),Ur=a("div"),F(i9.$$.fragment),$jr=l(),n4e=a("p"),kjr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Sjr=l(),Cn=a("p"),Rjr=o("The model class to instantiate is selected based on the "),s4e=a("code"),Pjr=o("model_type"),Bjr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),Njr=o("pretrained_model_name_or_path"),jjr=o(":"),Djr=l(),d9=a("ul"),I5=a("li"),d4e=a("strong"),Gjr=o("beit"),Ojr=o(" \u2014 "),AK=a("a"),Vjr=o("FlaxBeitForImageClassification"),Xjr=o(" (BEiT model)"),zjr=l(),q5=a("li"),c4e=a("strong"),Wjr=o("vit"),Qjr=o(" \u2014 "),yK=a("a"),Hjr=o("FlaxViTForImageClassification"),Ujr=o(" (ViT model)"),Jjr=l(),F(N5.$$.fragment),NNe=l(),lf=a("h2"),j5=a("a"),f4e=a("span"),F(c9.$$.fragment),Yjr=l(),m4e=a("span"),Kjr=o("FlaxAutoModelForVision2Seq"),jNe=l(),Mr=a("div"),F(f9.$$.fragment),Zjr=l(),df=a("p"),eDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LK=a("a"),oDr=o("from_pretrained()"),rDr=o(" class method or the "),xK=a("a"),tDr=o("from_config()"),aDr=o(` class
method.`),nDr=l(),m9=a("p"),sDr=o("This class cannot be instantiated directly using "),g4e=a("code"),lDr=o("__init__()"),iDr=o(" (throws an error)."),dDr=l(),Kt=a("div"),F(g9.$$.fragment),cDr=l(),h4e=a("p"),fDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mDr=l(),cf=a("p"),gDr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),hDr=o("not"),pDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),_Dr=o("from_pretrained()"),uDr=o(" to load the model weights."),bDr=l(),F(D5.$$.fragment),vDr=l(),Jr=a("div"),F(h9.$$.fragment),FDr=l(),_4e=a("p"),TDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MDr=l(),wn=a("p"),EDr=o("The model class to instantiate is selected based on the "),u4e=a("code"),CDr=o("model_type"),wDr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),ADr=o("pretrained_model_name_or_path"),yDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),LDr=o("pretrained_model_name_or_path"),xDr=o(":"),$Dr=l(),F4e=a("ul"),G5=a("li"),T4e=a("strong"),kDr=o("vision-encoder-decoder"),SDr=o(" \u2014 "),kK=a("a"),RDr=o("FlaxVisionEncoderDecoderModel"),PDr=o(" (Vision Encoder decoder model)"),BDr=l(),F(O5.$$.fragment),this.h()},l(f){const u=Pyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var p9=s(p);m=n(p9,"A",{id:!0,class:!0,href:!0});var M4e=s(m);_=n(M4e,"SPAN",{});var E4e=s(_);T(d.$$.fragment,E4e),E4e.forEach(t),M4e.forEach(t),h=i(p9),Mo=n(p9,"SPAN",{});var C4e=s(Mo);ci=r(C4e,"Auto Classes"),C4e.forEach(t),p9.forEach(t),hf=i(f),rt=n(f,"P",{});var _9=s(rt);fi=r(_9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(_9,"CODE",{});var w4e=s(mi);s0=r(w4e,"from_pretrained()"),w4e.forEach(t),pf=r(_9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var A4e=s(yn);l0=r(A4e,"AutoConfig"),A4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var y4e=s(xn);i0=r(y4e,"AutoModel"),y4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var L4e=s($n);d0=r(L4e,"AutoTokenizer"),L4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var u9=s(Ae);y$=r(u9,"will create a model that is an instance of "),_i=n(u9,"A",{href:!0});var x4e=s(_i);L$=r(x4e,"BertModel"),x4e.forEach(t),x$=r(u9,"."),u9.forEach(t),Eo=i(f),wa=n(f,"P",{});var b9=s(wa);$$=r(b9,"There is one class of "),uf=n(b9,"CODE",{});var $4e=s(uf);k$=r($4e,"AutoModel"),$4e.forEach(t),HDe=r(b9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),b9.forEach(t),qIe=i(f),ui=n(f,"H2",{class:!0});var v9=s(ui);bf=n(v9,"A",{id:!0,class:!0,href:!0});var k4e=s(bf);Cee=n(k4e,"SPAN",{});var S4e=s(Cee);T(c0.$$.fragment,S4e),S4e.forEach(t),k4e.forEach(t),UDe=i(v9),wee=n(v9,"SPAN",{});var R4e=s(wee);JDe=r(R4e,"Extending the Auto Classes"),R4e.forEach(t),v9.forEach(t),NIe=i(f),kn=n(f,"P",{});var ff=s(kn);YDe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aee=n(ff,"CODE",{});var P4e=s(Aee);KDe=r(P4e,"NewModel"),P4e.forEach(t),ZDe=r(ff,", make sure you have a "),yee=n(ff,"CODE",{});var B4e=s(yee);eGe=r(B4e,"NewModelConfig"),B4e.forEach(t),oGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),jIe=i(f),T(f0.$$.fragment,f),DIe=i(f),S$=n(f,"P",{});var I4e=s(S$);rGe=r(I4e,"You will then be able to use the auto classes like you would usually do!"),I4e.forEach(t),GIe=i(f),T(vf.$$.fragment,f),OIe=i(f),bi=n(f,"H2",{class:!0});var F9=s(bi);Ff=n(F9,"A",{id:!0,class:!0,href:!0});var q4e=s(Ff);Lee=n(q4e,"SPAN",{});var N4e=s(Lee);T(m0.$$.fragment,N4e),N4e.forEach(t),q4e.forEach(t),tGe=i(F9),xee=n(F9,"SPAN",{});var j4e=s(xee);aGe=r(j4e,"AutoConfig"),j4e.forEach(t),F9.forEach(t),VIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(g0.$$.fragment,et),nGe=i(et),h0=n(et,"P",{});var T9=s(h0);sGe=r(T9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),R$=n(T9,"A",{href:!0});var D4e=s(R$);lGe=r(D4e,"from_pretrained()"),D4e.forEach(t),iGe=r(T9," class method."),T9.forEach(t),dGe=i(et),p0=n(et,"P",{});var M9=s(p0);cGe=r(M9,"This class cannot be instantiated directly using "),$ee=n(M9,"CODE",{});var G4e=s($ee);fGe=r(G4e,"__init__()"),G4e.forEach(t),mGe=r(M9," (throws an error)."),M9.forEach(t),gGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(_0.$$.fragment,ot),hGe=i(ot),kee=n(ot,"P",{});var O4e=s(kee);pGe=r(O4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),O4e.forEach(t),_Ge=i(ot),vi=n(ot,"P",{});var mf=s(vi);uGe=r(mf,"The configuration class to instantiate is selected based on the "),See=n(mf,"CODE",{});var V4e=s(See);bGe=r(V4e,"model_type"),V4e.forEach(t),vGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ree=n(mf,"CODE",{});var X4e=s(Ree);FGe=r(X4e,"pretrained_model_name_or_path"),X4e.forEach(t),TGe=r(mf,":"),mf.forEach(t),MGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var V5=s(Tf);Pee=n(V5,"STRONG",{});var z4e=s(Pee);EGe=r(z4e,"albert"),z4e.forEach(t),CGe=r(V5," \u2014 "),P$=n(V5,"A",{href:!0});var W4e=s(P$);wGe=r(W4e,"AlbertConfig"),W4e.forEach(t),AGe=r(V5," (ALBERT model)"),V5.forEach(t),yGe=i(y),Mf=n(y,"LI",{});var X5=s(Mf);Bee=n(X5,"STRONG",{});var Q4e=s(Bee);LGe=r(Q4e,"bart"),Q4e.forEach(t),xGe=r(X5," \u2014 "),B$=n(X5,"A",{href:!0});var H4e=s(B$);$Ge=r(H4e,"BartConfig"),H4e.forEach(t),kGe=r(X5," (BART model)"),X5.forEach(t),SGe=i(y),Ef=n(y,"LI",{});var z5=s(Ef);Iee=n(z5,"STRONG",{});var U4e=s(Iee);RGe=r(U4e,"beit"),U4e.forEach(t),PGe=r(z5," \u2014 "),I$=n(z5,"A",{href:!0});var J4e=s(I$);BGe=r(J4e,"BeitConfig"),J4e.forEach(t),IGe=r(z5," (BEiT model)"),z5.forEach(t),qGe=i(y),Cf=n(y,"LI",{});var W5=s(Cf);qee=n(W5,"STRONG",{});var Y4e=s(qee);NGe=r(Y4e,"bert"),Y4e.forEach(t),jGe=r(W5," \u2014 "),q$=n(W5,"A",{href:!0});var K4e=s(q$);DGe=r(K4e,"BertConfig"),K4e.forEach(t),GGe=r(W5," (BERT model)"),W5.forEach(t),OGe=i(y),wf=n(y,"LI",{});var Q5=s(wf);Nee=n(Q5,"STRONG",{});var Z4e=s(Nee);VGe=r(Z4e,"bert-generation"),Z4e.forEach(t),XGe=r(Q5," \u2014 "),N$=n(Q5,"A",{href:!0});var eEe=s(N$);zGe=r(eEe,"BertGenerationConfig"),eEe.forEach(t),WGe=r(Q5," (Bert Generation model)"),Q5.forEach(t),QGe=i(y),Af=n(y,"LI",{});var H5=s(Af);jee=n(H5,"STRONG",{});var oEe=s(jee);HGe=r(oEe,"big_bird"),oEe.forEach(t),UGe=r(H5," \u2014 "),j$=n(H5,"A",{href:!0});var rEe=s(j$);JGe=r(rEe,"BigBirdConfig"),rEe.forEach(t),YGe=r(H5," (BigBird model)"),H5.forEach(t),KGe=i(y),yf=n(y,"LI",{});var U5=s(yf);Dee=n(U5,"STRONG",{});var tEe=s(Dee);ZGe=r(tEe,"bigbird_pegasus"),tEe.forEach(t),eOe=r(U5," \u2014 "),D$=n(U5,"A",{href:!0});var aEe=s(D$);oOe=r(aEe,"BigBirdPegasusConfig"),aEe.forEach(t),rOe=r(U5," (BigBirdPegasus model)"),U5.forEach(t),tOe=i(y),Lf=n(y,"LI",{});var J5=s(Lf);Gee=n(J5,"STRONG",{});var nEe=s(Gee);aOe=r(nEe,"blenderbot"),nEe.forEach(t),nOe=r(J5," \u2014 "),G$=n(J5,"A",{href:!0});var sEe=s(G$);sOe=r(sEe,"BlenderbotConfig"),sEe.forEach(t),lOe=r(J5," (Blenderbot model)"),J5.forEach(t),iOe=i(y),xf=n(y,"LI",{});var Y5=s(xf);Oee=n(Y5,"STRONG",{});var lEe=s(Oee);dOe=r(lEe,"blenderbot-small"),lEe.forEach(t),cOe=r(Y5," \u2014 "),O$=n(Y5,"A",{href:!0});var iEe=s(O$);fOe=r(iEe,"BlenderbotSmallConfig"),iEe.forEach(t),mOe=r(Y5," (BlenderbotSmall model)"),Y5.forEach(t),gOe=i(y),$f=n(y,"LI",{});var K5=s($f);Vee=n(K5,"STRONG",{});var dEe=s(Vee);hOe=r(dEe,"camembert"),dEe.forEach(t),pOe=r(K5," \u2014 "),V$=n(K5,"A",{href:!0});var cEe=s(V$);_Oe=r(cEe,"CamembertConfig"),cEe.forEach(t),uOe=r(K5," (CamemBERT model)"),K5.forEach(t),bOe=i(y),kf=n(y,"LI",{});var Z5=s(kf);Xee=n(Z5,"STRONG",{});var fEe=s(Xee);vOe=r(fEe,"canine"),fEe.forEach(t),FOe=r(Z5," \u2014 "),X$=n(Z5,"A",{href:!0});var mEe=s(X$);TOe=r(mEe,"CanineConfig"),mEe.forEach(t),MOe=r(Z5," (Canine model)"),Z5.forEach(t),EOe=i(y),Sf=n(y,"LI",{});var ew=s(Sf);zee=n(ew,"STRONG",{});var gEe=s(zee);COe=r(gEe,"clip"),gEe.forEach(t),wOe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var hEe=s(z$);AOe=r(hEe,"CLIPConfig"),hEe.forEach(t),yOe=r(ew," (CLIP model)"),ew.forEach(t),LOe=i(y),Rf=n(y,"LI",{});var ow=s(Rf);Wee=n(ow,"STRONG",{});var pEe=s(Wee);xOe=r(pEe,"convbert"),pEe.forEach(t),$Oe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var _Ee=s(W$);kOe=r(_Ee,"ConvBertConfig"),_Ee.forEach(t),SOe=r(ow," (ConvBERT model)"),ow.forEach(t),ROe=i(y),Pf=n(y,"LI",{});var rw=s(Pf);Qee=n(rw,"STRONG",{});var uEe=s(Qee);POe=r(uEe,"convnext"),uEe.forEach(t),BOe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var bEe=s(Q$);IOe=r(bEe,"ConvNextConfig"),bEe.forEach(t),qOe=r(rw," (ConvNext model)"),rw.forEach(t),NOe=i(y),Bf=n(y,"LI",{});var tw=s(Bf);Hee=n(tw,"STRONG",{});var vEe=s(Hee);jOe=r(vEe,"ctrl"),vEe.forEach(t),DOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var FEe=s(H$);GOe=r(FEe,"CTRLConfig"),FEe.forEach(t),OOe=r(tw," (CTRL model)"),tw.forEach(t),VOe=i(y),If=n(y,"LI",{});var aw=s(If);Uee=n(aw,"STRONG",{});var TEe=s(Uee);XOe=r(TEe,"data2vec-audio"),TEe.forEach(t),zOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var MEe=s(U$);WOe=r(MEe,"Data2VecAudioConfig"),MEe.forEach(t),QOe=r(aw," (Data2VecAudio model)"),aw.forEach(t),HOe=i(y),qf=n(y,"LI",{});var nw=s(qf);Jee=n(nw,"STRONG",{});var EEe=s(Jee);UOe=r(EEe,"data2vec-text"),EEe.forEach(t),JOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var CEe=s(J$);YOe=r(CEe,"Data2VecTextConfig"),CEe.forEach(t),KOe=r(nw," (Data2VecText model)"),nw.forEach(t),ZOe=i(y),Nf=n(y,"LI",{});var sw=s(Nf);Yee=n(sw,"STRONG",{});var wEe=s(Yee);eVe=r(wEe,"data2vec-vision"),wEe.forEach(t),oVe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var AEe=s(Y$);rVe=r(AEe,"Data2VecVisionConfig"),AEe.forEach(t),tVe=r(sw," (Data2VecVision model)"),sw.forEach(t),aVe=i(y),jf=n(y,"LI",{});var lw=s(jf);Kee=n(lw,"STRONG",{});var yEe=s(Kee);nVe=r(yEe,"deberta"),yEe.forEach(t),sVe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var LEe=s(K$);lVe=r(LEe,"DebertaConfig"),LEe.forEach(t),iVe=r(lw," (DeBERTa model)"),lw.forEach(t),dVe=i(y),Df=n(y,"LI",{});var iw=s(Df);Zee=n(iw,"STRONG",{});var xEe=s(Zee);cVe=r(xEe,"deberta-v2"),xEe.forEach(t),fVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var $Ee=s(Z$);mVe=r($Ee,"DebertaV2Config"),$Ee.forEach(t),gVe=r(iw," (DeBERTa-v2 model)"),iw.forEach(t),hVe=i(y),Gf=n(y,"LI",{});var dw=s(Gf);eoe=n(dw,"STRONG",{});var kEe=s(eoe);pVe=r(kEe,"decision_transformer"),kEe.forEach(t),_Ve=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var SEe=s(ek);uVe=r(SEe,"DecisionTransformerConfig"),SEe.forEach(t),bVe=r(dw," (Decision Transformer model)"),dw.forEach(t),vVe=i(y),Of=n(y,"LI",{});var cw=s(Of);ooe=n(cw,"STRONG",{});var REe=s(ooe);FVe=r(REe,"deit"),REe.forEach(t),TVe=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var PEe=s(ok);MVe=r(PEe,"DeiTConfig"),PEe.forEach(t),EVe=r(cw," (DeiT model)"),cw.forEach(t),CVe=i(y),Vf=n(y,"LI",{});var fw=s(Vf);roe=n(fw,"STRONG",{});var BEe=s(roe);wVe=r(BEe,"detr"),BEe.forEach(t),AVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var qDr=s(rk);yVe=r(qDr,"DetrConfig"),qDr.forEach(t),LVe=r(fw," (DETR model)"),fw.forEach(t),xVe=i(y),Xf=n(y,"LI",{});var IEe=s(Xf);toe=n(IEe,"STRONG",{});var NDr=s(toe);$Ve=r(NDr,"distilbert"),NDr.forEach(t),kVe=r(IEe," \u2014 "),tk=n(IEe,"A",{href:!0});var jDr=s(tk);SVe=r(jDr,"DistilBertConfig"),jDr.forEach(t),RVe=r(IEe," (DistilBERT model)"),IEe.forEach(t),PVe=i(y),zf=n(y,"LI",{});var qEe=s(zf);aoe=n(qEe,"STRONG",{});var DDr=s(aoe);BVe=r(DDr,"dpr"),DDr.forEach(t),IVe=r(qEe," \u2014 "),ak=n(qEe,"A",{href:!0});var GDr=s(ak);qVe=r(GDr,"DPRConfig"),GDr.forEach(t),NVe=r(qEe," (DPR model)"),qEe.forEach(t),jVe=i(y),Wf=n(y,"LI",{});var NEe=s(Wf);noe=n(NEe,"STRONG",{});var ODr=s(noe);DVe=r(ODr,"dpt"),ODr.forEach(t),GVe=r(NEe," \u2014 "),nk=n(NEe,"A",{href:!0});var VDr=s(nk);OVe=r(VDr,"DPTConfig"),VDr.forEach(t),VVe=r(NEe," (DPT model)"),NEe.forEach(t),XVe=i(y),Qf=n(y,"LI",{});var jEe=s(Qf);soe=n(jEe,"STRONG",{});var XDr=s(soe);zVe=r(XDr,"electra"),XDr.forEach(t),WVe=r(jEe," \u2014 "),sk=n(jEe,"A",{href:!0});var zDr=s(sk);QVe=r(zDr,"ElectraConfig"),zDr.forEach(t),HVe=r(jEe," (ELECTRA model)"),jEe.forEach(t),UVe=i(y),Hf=n(y,"LI",{});var DEe=s(Hf);loe=n(DEe,"STRONG",{});var WDr=s(loe);JVe=r(WDr,"encoder-decoder"),WDr.forEach(t),YVe=r(DEe," \u2014 "),lk=n(DEe,"A",{href:!0});var QDr=s(lk);KVe=r(QDr,"EncoderDecoderConfig"),QDr.forEach(t),ZVe=r(DEe," (Encoder decoder model)"),DEe.forEach(t),eXe=i(y),Uf=n(y,"LI",{});var GEe=s(Uf);ioe=n(GEe,"STRONG",{});var HDr=s(ioe);oXe=r(HDr,"flaubert"),HDr.forEach(t),rXe=r(GEe," \u2014 "),ik=n(GEe,"A",{href:!0});var UDr=s(ik);tXe=r(UDr,"FlaubertConfig"),UDr.forEach(t),aXe=r(GEe," (FlauBERT model)"),GEe.forEach(t),nXe=i(y),Jf=n(y,"LI",{});var OEe=s(Jf);doe=n(OEe,"STRONG",{});var JDr=s(doe);sXe=r(JDr,"flava"),JDr.forEach(t),lXe=r(OEe," \u2014 "),dk=n(OEe,"A",{href:!0});var YDr=s(dk);iXe=r(YDr,"FlavaConfig"),YDr.forEach(t),dXe=r(OEe," (Flava model)"),OEe.forEach(t),cXe=i(y),Yf=n(y,"LI",{});var VEe=s(Yf);coe=n(VEe,"STRONG",{});var KDr=s(coe);fXe=r(KDr,"fnet"),KDr.forEach(t),mXe=r(VEe," \u2014 "),ck=n(VEe,"A",{href:!0});var ZDr=s(ck);gXe=r(ZDr,"FNetConfig"),ZDr.forEach(t),hXe=r(VEe," (FNet model)"),VEe.forEach(t),pXe=i(y),Kf=n(y,"LI",{});var XEe=s(Kf);foe=n(XEe,"STRONG",{});var eGr=s(foe);_Xe=r(eGr,"fsmt"),eGr.forEach(t),uXe=r(XEe," \u2014 "),fk=n(XEe,"A",{href:!0});var oGr=s(fk);bXe=r(oGr,"FSMTConfig"),oGr.forEach(t),vXe=r(XEe," (FairSeq Machine-Translation model)"),XEe.forEach(t),FXe=i(y),Zf=n(y,"LI",{});var zEe=s(Zf);moe=n(zEe,"STRONG",{});var rGr=s(moe);TXe=r(rGr,"funnel"),rGr.forEach(t),MXe=r(zEe," \u2014 "),mk=n(zEe,"A",{href:!0});var tGr=s(mk);EXe=r(tGr,"FunnelConfig"),tGr.forEach(t),CXe=r(zEe," (Funnel Transformer model)"),zEe.forEach(t),wXe=i(y),em=n(y,"LI",{});var WEe=s(em);goe=n(WEe,"STRONG",{});var aGr=s(goe);AXe=r(aGr,"glpn"),aGr.forEach(t),yXe=r(WEe," \u2014 "),gk=n(WEe,"A",{href:!0});var nGr=s(gk);LXe=r(nGr,"GLPNConfig"),nGr.forEach(t),xXe=r(WEe," (GLPN model)"),WEe.forEach(t),$Xe=i(y),om=n(y,"LI",{});var QEe=s(om);hoe=n(QEe,"STRONG",{});var sGr=s(hoe);kXe=r(sGr,"gpt2"),sGr.forEach(t),SXe=r(QEe," \u2014 "),hk=n(QEe,"A",{href:!0});var lGr=s(hk);RXe=r(lGr,"GPT2Config"),lGr.forEach(t),PXe=r(QEe," (OpenAI GPT-2 model)"),QEe.forEach(t),BXe=i(y),rm=n(y,"LI",{});var HEe=s(rm);poe=n(HEe,"STRONG",{});var iGr=s(poe);IXe=r(iGr,"gpt_neo"),iGr.forEach(t),qXe=r(HEe," \u2014 "),pk=n(HEe,"A",{href:!0});var dGr=s(pk);NXe=r(dGr,"GPTNeoConfig"),dGr.forEach(t),jXe=r(HEe," (GPT Neo model)"),HEe.forEach(t),DXe=i(y),tm=n(y,"LI",{});var UEe=s(tm);_oe=n(UEe,"STRONG",{});var cGr=s(_oe);GXe=r(cGr,"gptj"),cGr.forEach(t),OXe=r(UEe," \u2014 "),_k=n(UEe,"A",{href:!0});var fGr=s(_k);VXe=r(fGr,"GPTJConfig"),fGr.forEach(t),XXe=r(UEe," (GPT-J model)"),UEe.forEach(t),zXe=i(y),am=n(y,"LI",{});var JEe=s(am);uoe=n(JEe,"STRONG",{});var mGr=s(uoe);WXe=r(mGr,"hubert"),mGr.forEach(t),QXe=r(JEe," \u2014 "),uk=n(JEe,"A",{href:!0});var gGr=s(uk);HXe=r(gGr,"HubertConfig"),gGr.forEach(t),UXe=r(JEe," (Hubert model)"),JEe.forEach(t),JXe=i(y),nm=n(y,"LI",{});var YEe=s(nm);boe=n(YEe,"STRONG",{});var hGr=s(boe);YXe=r(hGr,"ibert"),hGr.forEach(t),KXe=r(YEe," \u2014 "),bk=n(YEe,"A",{href:!0});var pGr=s(bk);ZXe=r(pGr,"IBertConfig"),pGr.forEach(t),eze=r(YEe," (I-BERT model)"),YEe.forEach(t),oze=i(y),sm=n(y,"LI",{});var KEe=s(sm);voe=n(KEe,"STRONG",{});var _Gr=s(voe);rze=r(_Gr,"imagegpt"),_Gr.forEach(t),tze=r(KEe," \u2014 "),vk=n(KEe,"A",{href:!0});var uGr=s(vk);aze=r(uGr,"ImageGPTConfig"),uGr.forEach(t),nze=r(KEe," (ImageGPT model)"),KEe.forEach(t),sze=i(y),lm=n(y,"LI",{});var ZEe=s(lm);Foe=n(ZEe,"STRONG",{});var bGr=s(Foe);lze=r(bGr,"layoutlm"),bGr.forEach(t),ize=r(ZEe," \u2014 "),Fk=n(ZEe,"A",{href:!0});var vGr=s(Fk);dze=r(vGr,"LayoutLMConfig"),vGr.forEach(t),cze=r(ZEe," (LayoutLM model)"),ZEe.forEach(t),fze=i(y),im=n(y,"LI",{});var eCe=s(im);Toe=n(eCe,"STRONG",{});var FGr=s(Toe);mze=r(FGr,"layoutlmv2"),FGr.forEach(t),gze=r(eCe," \u2014 "),Tk=n(eCe,"A",{href:!0});var TGr=s(Tk);hze=r(TGr,"LayoutLMv2Config"),TGr.forEach(t),pze=r(eCe," (LayoutLMv2 model)"),eCe.forEach(t),_ze=i(y),dm=n(y,"LI",{});var oCe=s(dm);Moe=n(oCe,"STRONG",{});var MGr=s(Moe);uze=r(MGr,"led"),MGr.forEach(t),bze=r(oCe," \u2014 "),Mk=n(oCe,"A",{href:!0});var EGr=s(Mk);vze=r(EGr,"LEDConfig"),EGr.forEach(t),Fze=r(oCe," (LED model)"),oCe.forEach(t),Tze=i(y),cm=n(y,"LI",{});var rCe=s(cm);Eoe=n(rCe,"STRONG",{});var CGr=s(Eoe);Mze=r(CGr,"longformer"),CGr.forEach(t),Eze=r(rCe," \u2014 "),Ek=n(rCe,"A",{href:!0});var wGr=s(Ek);Cze=r(wGr,"LongformerConfig"),wGr.forEach(t),wze=r(rCe," (Longformer model)"),rCe.forEach(t),Aze=i(y),fm=n(y,"LI",{});var tCe=s(fm);Coe=n(tCe,"STRONG",{});var AGr=s(Coe);yze=r(AGr,"luke"),AGr.forEach(t),Lze=r(tCe," \u2014 "),Ck=n(tCe,"A",{href:!0});var yGr=s(Ck);xze=r(yGr,"LukeConfig"),yGr.forEach(t),$ze=r(tCe," (LUKE model)"),tCe.forEach(t),kze=i(y),mm=n(y,"LI",{});var aCe=s(mm);woe=n(aCe,"STRONG",{});var LGr=s(woe);Sze=r(LGr,"lxmert"),LGr.forEach(t),Rze=r(aCe," \u2014 "),wk=n(aCe,"A",{href:!0});var xGr=s(wk);Pze=r(xGr,"LxmertConfig"),xGr.forEach(t),Bze=r(aCe," (LXMERT model)"),aCe.forEach(t),Ize=i(y),gm=n(y,"LI",{});var nCe=s(gm);Aoe=n(nCe,"STRONG",{});var $Gr=s(Aoe);qze=r($Gr,"m2m_100"),$Gr.forEach(t),Nze=r(nCe," \u2014 "),Ak=n(nCe,"A",{href:!0});var kGr=s(Ak);jze=r(kGr,"M2M100Config"),kGr.forEach(t),Dze=r(nCe," (M2M100 model)"),nCe.forEach(t),Gze=i(y),hm=n(y,"LI",{});var sCe=s(hm);yoe=n(sCe,"STRONG",{});var SGr=s(yoe);Oze=r(SGr,"marian"),SGr.forEach(t),Vze=r(sCe," \u2014 "),yk=n(sCe,"A",{href:!0});var RGr=s(yk);Xze=r(RGr,"MarianConfig"),RGr.forEach(t),zze=r(sCe," (Marian model)"),sCe.forEach(t),Wze=i(y),pm=n(y,"LI",{});var lCe=s(pm);Loe=n(lCe,"STRONG",{});var PGr=s(Loe);Qze=r(PGr,"maskformer"),PGr.forEach(t),Hze=r(lCe," \u2014 "),Lk=n(lCe,"A",{href:!0});var BGr=s(Lk);Uze=r(BGr,"MaskFormerConfig"),BGr.forEach(t),Jze=r(lCe," (MaskFormer model)"),lCe.forEach(t),Yze=i(y),_m=n(y,"LI",{});var iCe=s(_m);xoe=n(iCe,"STRONG",{});var IGr=s(xoe);Kze=r(IGr,"mbart"),IGr.forEach(t),Zze=r(iCe," \u2014 "),xk=n(iCe,"A",{href:!0});var qGr=s(xk);eWe=r(qGr,"MBartConfig"),qGr.forEach(t),oWe=r(iCe," (mBART model)"),iCe.forEach(t),rWe=i(y),um=n(y,"LI",{});var dCe=s(um);$oe=n(dCe,"STRONG",{});var NGr=s($oe);tWe=r(NGr,"megatron-bert"),NGr.forEach(t),aWe=r(dCe," \u2014 "),$k=n(dCe,"A",{href:!0});var jGr=s($k);nWe=r(jGr,"MegatronBertConfig"),jGr.forEach(t),sWe=r(dCe," (MegatronBert model)"),dCe.forEach(t),lWe=i(y),bm=n(y,"LI",{});var cCe=s(bm);koe=n(cCe,"STRONG",{});var DGr=s(koe);iWe=r(DGr,"mobilebert"),DGr.forEach(t),dWe=r(cCe," \u2014 "),kk=n(cCe,"A",{href:!0});var GGr=s(kk);cWe=r(GGr,"MobileBertConfig"),GGr.forEach(t),fWe=r(cCe," (MobileBERT model)"),cCe.forEach(t),mWe=i(y),vm=n(y,"LI",{});var fCe=s(vm);Soe=n(fCe,"STRONG",{});var OGr=s(Soe);gWe=r(OGr,"mpnet"),OGr.forEach(t),hWe=r(fCe," \u2014 "),Sk=n(fCe,"A",{href:!0});var VGr=s(Sk);pWe=r(VGr,"MPNetConfig"),VGr.forEach(t),_We=r(fCe," (MPNet model)"),fCe.forEach(t),uWe=i(y),Fm=n(y,"LI",{});var mCe=s(Fm);Roe=n(mCe,"STRONG",{});var XGr=s(Roe);bWe=r(XGr,"mt5"),XGr.forEach(t),vWe=r(mCe," \u2014 "),Rk=n(mCe,"A",{href:!0});var zGr=s(Rk);FWe=r(zGr,"MT5Config"),zGr.forEach(t),TWe=r(mCe," (mT5 model)"),mCe.forEach(t),MWe=i(y),Tm=n(y,"LI",{});var gCe=s(Tm);Poe=n(gCe,"STRONG",{});var WGr=s(Poe);EWe=r(WGr,"nystromformer"),WGr.forEach(t),CWe=r(gCe," \u2014 "),Pk=n(gCe,"A",{href:!0});var QGr=s(Pk);wWe=r(QGr,"NystromformerConfig"),QGr.forEach(t),AWe=r(gCe," (Nystromformer model)"),gCe.forEach(t),yWe=i(y),Mm=n(y,"LI",{});var hCe=s(Mm);Boe=n(hCe,"STRONG",{});var HGr=s(Boe);LWe=r(HGr,"openai-gpt"),HGr.forEach(t),xWe=r(hCe," \u2014 "),Bk=n(hCe,"A",{href:!0});var UGr=s(Bk);$We=r(UGr,"OpenAIGPTConfig"),UGr.forEach(t),kWe=r(hCe," (OpenAI GPT model)"),hCe.forEach(t),SWe=i(y),Em=n(y,"LI",{});var pCe=s(Em);Ioe=n(pCe,"STRONG",{});var JGr=s(Ioe);RWe=r(JGr,"opt"),JGr.forEach(t),PWe=r(pCe," \u2014 "),Ik=n(pCe,"A",{href:!0});var YGr=s(Ik);BWe=r(YGr,"OPTConfig"),YGr.forEach(t),IWe=r(pCe," (OPT model)"),pCe.forEach(t),qWe=i(y),Cm=n(y,"LI",{});var _Ce=s(Cm);qoe=n(_Ce,"STRONG",{});var KGr=s(qoe);NWe=r(KGr,"pegasus"),KGr.forEach(t),jWe=r(_Ce," \u2014 "),qk=n(_Ce,"A",{href:!0});var ZGr=s(qk);DWe=r(ZGr,"PegasusConfig"),ZGr.forEach(t),GWe=r(_Ce," (Pegasus model)"),_Ce.forEach(t),OWe=i(y),wm=n(y,"LI",{});var uCe=s(wm);Noe=n(uCe,"STRONG",{});var eOr=s(Noe);VWe=r(eOr,"perceiver"),eOr.forEach(t),XWe=r(uCe," \u2014 "),Nk=n(uCe,"A",{href:!0});var oOr=s(Nk);zWe=r(oOr,"PerceiverConfig"),oOr.forEach(t),WWe=r(uCe," (Perceiver model)"),uCe.forEach(t),QWe=i(y),Am=n(y,"LI",{});var bCe=s(Am);joe=n(bCe,"STRONG",{});var rOr=s(joe);HWe=r(rOr,"plbart"),rOr.forEach(t),UWe=r(bCe," \u2014 "),jk=n(bCe,"A",{href:!0});var tOr=s(jk);JWe=r(tOr,"PLBartConfig"),tOr.forEach(t),YWe=r(bCe," (PLBart model)"),bCe.forEach(t),KWe=i(y),ym=n(y,"LI",{});var vCe=s(ym);Doe=n(vCe,"STRONG",{});var aOr=s(Doe);ZWe=r(aOr,"poolformer"),aOr.forEach(t),eQe=r(vCe," \u2014 "),Dk=n(vCe,"A",{href:!0});var nOr=s(Dk);oQe=r(nOr,"PoolFormerConfig"),nOr.forEach(t),rQe=r(vCe," (PoolFormer model)"),vCe.forEach(t),tQe=i(y),Lm=n(y,"LI",{});var FCe=s(Lm);Goe=n(FCe,"STRONG",{});var sOr=s(Goe);aQe=r(sOr,"prophetnet"),sOr.forEach(t),nQe=r(FCe," \u2014 "),Gk=n(FCe,"A",{href:!0});var lOr=s(Gk);sQe=r(lOr,"ProphetNetConfig"),lOr.forEach(t),lQe=r(FCe," (ProphetNet model)"),FCe.forEach(t),iQe=i(y),xm=n(y,"LI",{});var TCe=s(xm);Ooe=n(TCe,"STRONG",{});var iOr=s(Ooe);dQe=r(iOr,"qdqbert"),iOr.forEach(t),cQe=r(TCe," \u2014 "),Ok=n(TCe,"A",{href:!0});var dOr=s(Ok);fQe=r(dOr,"QDQBertConfig"),dOr.forEach(t),mQe=r(TCe," (QDQBert model)"),TCe.forEach(t),gQe=i(y),$m=n(y,"LI",{});var MCe=s($m);Voe=n(MCe,"STRONG",{});var cOr=s(Voe);hQe=r(cOr,"rag"),cOr.forEach(t),pQe=r(MCe," \u2014 "),Vk=n(MCe,"A",{href:!0});var fOr=s(Vk);_Qe=r(fOr,"RagConfig"),fOr.forEach(t),uQe=r(MCe," (RAG model)"),MCe.forEach(t),bQe=i(y),km=n(y,"LI",{});var ECe=s(km);Xoe=n(ECe,"STRONG",{});var mOr=s(Xoe);vQe=r(mOr,"realm"),mOr.forEach(t),FQe=r(ECe," \u2014 "),Xk=n(ECe,"A",{href:!0});var gOr=s(Xk);TQe=r(gOr,"RealmConfig"),gOr.forEach(t),MQe=r(ECe," (Realm model)"),ECe.forEach(t),EQe=i(y),Sm=n(y,"LI",{});var CCe=s(Sm);zoe=n(CCe,"STRONG",{});var hOr=s(zoe);CQe=r(hOr,"reformer"),hOr.forEach(t),wQe=r(CCe," \u2014 "),zk=n(CCe,"A",{href:!0});var pOr=s(zk);AQe=r(pOr,"ReformerConfig"),pOr.forEach(t),yQe=r(CCe," (Reformer model)"),CCe.forEach(t),LQe=i(y),Rm=n(y,"LI",{});var wCe=s(Rm);Woe=n(wCe,"STRONG",{});var _Or=s(Woe);xQe=r(_Or,"regnet"),_Or.forEach(t),$Qe=r(wCe," \u2014 "),Wk=n(wCe,"A",{href:!0});var uOr=s(Wk);kQe=r(uOr,"RegNetConfig"),uOr.forEach(t),SQe=r(wCe," (RegNet model)"),wCe.forEach(t),RQe=i(y),Pm=n(y,"LI",{});var ACe=s(Pm);Qoe=n(ACe,"STRONG",{});var bOr=s(Qoe);PQe=r(bOr,"rembert"),bOr.forEach(t),BQe=r(ACe," \u2014 "),Qk=n(ACe,"A",{href:!0});var vOr=s(Qk);IQe=r(vOr,"RemBertConfig"),vOr.forEach(t),qQe=r(ACe," (RemBERT model)"),ACe.forEach(t),NQe=i(y),Bm=n(y,"LI",{});var yCe=s(Bm);Hoe=n(yCe,"STRONG",{});var FOr=s(Hoe);jQe=r(FOr,"resnet"),FOr.forEach(t),DQe=r(yCe," \u2014 "),Hk=n(yCe,"A",{href:!0});var TOr=s(Hk);GQe=r(TOr,"ResNetConfig"),TOr.forEach(t),OQe=r(yCe," (ResNet model)"),yCe.forEach(t),VQe=i(y),Im=n(y,"LI",{});var LCe=s(Im);Uoe=n(LCe,"STRONG",{});var MOr=s(Uoe);XQe=r(MOr,"retribert"),MOr.forEach(t),zQe=r(LCe," \u2014 "),Uk=n(LCe,"A",{href:!0});var EOr=s(Uk);WQe=r(EOr,"RetriBertConfig"),EOr.forEach(t),QQe=r(LCe," (RetriBERT model)"),LCe.forEach(t),HQe=i(y),qm=n(y,"LI",{});var xCe=s(qm);Joe=n(xCe,"STRONG",{});var COr=s(Joe);UQe=r(COr,"roberta"),COr.forEach(t),JQe=r(xCe," \u2014 "),Jk=n(xCe,"A",{href:!0});var wOr=s(Jk);YQe=r(wOr,"RobertaConfig"),wOr.forEach(t),KQe=r(xCe," (RoBERTa model)"),xCe.forEach(t),ZQe=i(y),Nm=n(y,"LI",{});var $Ce=s(Nm);Yoe=n($Ce,"STRONG",{});var AOr=s(Yoe);eHe=r(AOr,"roformer"),AOr.forEach(t),oHe=r($Ce," \u2014 "),Yk=n($Ce,"A",{href:!0});var yOr=s(Yk);rHe=r(yOr,"RoFormerConfig"),yOr.forEach(t),tHe=r($Ce," (RoFormer model)"),$Ce.forEach(t),aHe=i(y),jm=n(y,"LI",{});var kCe=s(jm);Koe=n(kCe,"STRONG",{});var LOr=s(Koe);nHe=r(LOr,"segformer"),LOr.forEach(t),sHe=r(kCe," \u2014 "),Kk=n(kCe,"A",{href:!0});var xOr=s(Kk);lHe=r(xOr,"SegformerConfig"),xOr.forEach(t),iHe=r(kCe," (SegFormer model)"),kCe.forEach(t),dHe=i(y),Dm=n(y,"LI",{});var SCe=s(Dm);Zoe=n(SCe,"STRONG",{});var $Or=s(Zoe);cHe=r($Or,"sew"),$Or.forEach(t),fHe=r(SCe," \u2014 "),Zk=n(SCe,"A",{href:!0});var kOr=s(Zk);mHe=r(kOr,"SEWConfig"),kOr.forEach(t),gHe=r(SCe," (SEW model)"),SCe.forEach(t),hHe=i(y),Gm=n(y,"LI",{});var RCe=s(Gm);ere=n(RCe,"STRONG",{});var SOr=s(ere);pHe=r(SOr,"sew-d"),SOr.forEach(t),_He=r(RCe," \u2014 "),eS=n(RCe,"A",{href:!0});var ROr=s(eS);uHe=r(ROr,"SEWDConfig"),ROr.forEach(t),bHe=r(RCe," (SEW-D model)"),RCe.forEach(t),vHe=i(y),Om=n(y,"LI",{});var PCe=s(Om);ore=n(PCe,"STRONG",{});var POr=s(ore);FHe=r(POr,"speech-encoder-decoder"),POr.forEach(t),THe=r(PCe," \u2014 "),oS=n(PCe,"A",{href:!0});var BOr=s(oS);MHe=r(BOr,"SpeechEncoderDecoderConfig"),BOr.forEach(t),EHe=r(PCe," (Speech Encoder decoder model)"),PCe.forEach(t),CHe=i(y),Vm=n(y,"LI",{});var BCe=s(Vm);rre=n(BCe,"STRONG",{});var IOr=s(rre);wHe=r(IOr,"speech_to_text"),IOr.forEach(t),AHe=r(BCe," \u2014 "),rS=n(BCe,"A",{href:!0});var qOr=s(rS);yHe=r(qOr,"Speech2TextConfig"),qOr.forEach(t),LHe=r(BCe," (Speech2Text model)"),BCe.forEach(t),xHe=i(y),Xm=n(y,"LI",{});var ICe=s(Xm);tre=n(ICe,"STRONG",{});var NOr=s(tre);$He=r(NOr,"speech_to_text_2"),NOr.forEach(t),kHe=r(ICe," \u2014 "),tS=n(ICe,"A",{href:!0});var jOr=s(tS);SHe=r(jOr,"Speech2Text2Config"),jOr.forEach(t),RHe=r(ICe," (Speech2Text2 model)"),ICe.forEach(t),PHe=i(y),zm=n(y,"LI",{});var qCe=s(zm);are=n(qCe,"STRONG",{});var DOr=s(are);BHe=r(DOr,"splinter"),DOr.forEach(t),IHe=r(qCe," \u2014 "),aS=n(qCe,"A",{href:!0});var GOr=s(aS);qHe=r(GOr,"SplinterConfig"),GOr.forEach(t),NHe=r(qCe," (Splinter model)"),qCe.forEach(t),jHe=i(y),Wm=n(y,"LI",{});var NCe=s(Wm);nre=n(NCe,"STRONG",{});var OOr=s(nre);DHe=r(OOr,"squeezebert"),OOr.forEach(t),GHe=r(NCe," \u2014 "),nS=n(NCe,"A",{href:!0});var VOr=s(nS);OHe=r(VOr,"SqueezeBertConfig"),VOr.forEach(t),VHe=r(NCe," (SqueezeBERT model)"),NCe.forEach(t),XHe=i(y),Qm=n(y,"LI",{});var jCe=s(Qm);sre=n(jCe,"STRONG",{});var XOr=s(sre);zHe=r(XOr,"swin"),XOr.forEach(t),WHe=r(jCe," \u2014 "),sS=n(jCe,"A",{href:!0});var zOr=s(sS);QHe=r(zOr,"SwinConfig"),zOr.forEach(t),HHe=r(jCe," (Swin model)"),jCe.forEach(t),UHe=i(y),Hm=n(y,"LI",{});var DCe=s(Hm);lre=n(DCe,"STRONG",{});var WOr=s(lre);JHe=r(WOr,"t5"),WOr.forEach(t),YHe=r(DCe," \u2014 "),lS=n(DCe,"A",{href:!0});var QOr=s(lS);KHe=r(QOr,"T5Config"),QOr.forEach(t),ZHe=r(DCe," (T5 model)"),DCe.forEach(t),eUe=i(y),Um=n(y,"LI",{});var GCe=s(Um);ire=n(GCe,"STRONG",{});var HOr=s(ire);oUe=r(HOr,"tapas"),HOr.forEach(t),rUe=r(GCe," \u2014 "),iS=n(GCe,"A",{href:!0});var UOr=s(iS);tUe=r(UOr,"TapasConfig"),UOr.forEach(t),aUe=r(GCe," (TAPAS model)"),GCe.forEach(t),nUe=i(y),Jm=n(y,"LI",{});var OCe=s(Jm);dre=n(OCe,"STRONG",{});var JOr=s(dre);sUe=r(JOr,"trajectory_transformer"),JOr.forEach(t),lUe=r(OCe," \u2014 "),dS=n(OCe,"A",{href:!0});var YOr=s(dS);iUe=r(YOr,"TrajectoryTransformerConfig"),YOr.forEach(t),dUe=r(OCe," (Trajectory Transformer model)"),OCe.forEach(t),cUe=i(y),Ym=n(y,"LI",{});var VCe=s(Ym);cre=n(VCe,"STRONG",{});var KOr=s(cre);fUe=r(KOr,"transfo-xl"),KOr.forEach(t),mUe=r(VCe," \u2014 "),cS=n(VCe,"A",{href:!0});var ZOr=s(cS);gUe=r(ZOr,"TransfoXLConfig"),ZOr.forEach(t),hUe=r(VCe," (Transformer-XL model)"),VCe.forEach(t),pUe=i(y),Km=n(y,"LI",{});var XCe=s(Km);fre=n(XCe,"STRONG",{});var eVr=s(fre);_Ue=r(eVr,"trocr"),eVr.forEach(t),uUe=r(XCe," \u2014 "),fS=n(XCe,"A",{href:!0});var oVr=s(fS);bUe=r(oVr,"TrOCRConfig"),oVr.forEach(t),vUe=r(XCe," (TrOCR model)"),XCe.forEach(t),FUe=i(y),Zm=n(y,"LI",{});var zCe=s(Zm);mre=n(zCe,"STRONG",{});var rVr=s(mre);TUe=r(rVr,"unispeech"),rVr.forEach(t),MUe=r(zCe," \u2014 "),mS=n(zCe,"A",{href:!0});var tVr=s(mS);EUe=r(tVr,"UniSpeechConfig"),tVr.forEach(t),CUe=r(zCe," (UniSpeech model)"),zCe.forEach(t),wUe=i(y),eg=n(y,"LI",{});var WCe=s(eg);gre=n(WCe,"STRONG",{});var aVr=s(gre);AUe=r(aVr,"unispeech-sat"),aVr.forEach(t),yUe=r(WCe," \u2014 "),gS=n(WCe,"A",{href:!0});var nVr=s(gS);LUe=r(nVr,"UniSpeechSatConfig"),nVr.forEach(t),xUe=r(WCe," (UniSpeechSat model)"),WCe.forEach(t),$Ue=i(y),og=n(y,"LI",{});var QCe=s(og);hre=n(QCe,"STRONG",{});var sVr=s(hre);kUe=r(sVr,"van"),sVr.forEach(t),SUe=r(QCe," \u2014 "),hS=n(QCe,"A",{href:!0});var lVr=s(hS);RUe=r(lVr,"VanConfig"),lVr.forEach(t),PUe=r(QCe," (VAN model)"),QCe.forEach(t),BUe=i(y),rg=n(y,"LI",{});var HCe=s(rg);pre=n(HCe,"STRONG",{});var iVr=s(pre);IUe=r(iVr,"vilt"),iVr.forEach(t),qUe=r(HCe," \u2014 "),pS=n(HCe,"A",{href:!0});var dVr=s(pS);NUe=r(dVr,"ViltConfig"),dVr.forEach(t),jUe=r(HCe," (ViLT model)"),HCe.forEach(t),DUe=i(y),tg=n(y,"LI",{});var UCe=s(tg);_re=n(UCe,"STRONG",{});var cVr=s(_re);GUe=r(cVr,"vision-encoder-decoder"),cVr.forEach(t),OUe=r(UCe," \u2014 "),_S=n(UCe,"A",{href:!0});var fVr=s(_S);VUe=r(fVr,"VisionEncoderDecoderConfig"),fVr.forEach(t),XUe=r(UCe," (Vision Encoder decoder model)"),UCe.forEach(t),zUe=i(y),ag=n(y,"LI",{});var JCe=s(ag);ure=n(JCe,"STRONG",{});var mVr=s(ure);WUe=r(mVr,"vision-text-dual-encoder"),mVr.forEach(t),QUe=r(JCe," \u2014 "),uS=n(JCe,"A",{href:!0});var gVr=s(uS);HUe=r(gVr,"VisionTextDualEncoderConfig"),gVr.forEach(t),UUe=r(JCe," (VisionTextDualEncoder model)"),JCe.forEach(t),JUe=i(y),ng=n(y,"LI",{});var YCe=s(ng);bre=n(YCe,"STRONG",{});var hVr=s(bre);YUe=r(hVr,"visual_bert"),hVr.forEach(t),KUe=r(YCe," \u2014 "),bS=n(YCe,"A",{href:!0});var pVr=s(bS);ZUe=r(pVr,"VisualBertConfig"),pVr.forEach(t),eJe=r(YCe," (VisualBert model)"),YCe.forEach(t),oJe=i(y),sg=n(y,"LI",{});var KCe=s(sg);vre=n(KCe,"STRONG",{});var _Vr=s(vre);rJe=r(_Vr,"vit"),_Vr.forEach(t),tJe=r(KCe," \u2014 "),vS=n(KCe,"A",{href:!0});var uVr=s(vS);aJe=r(uVr,"ViTConfig"),uVr.forEach(t),nJe=r(KCe," (ViT model)"),KCe.forEach(t),sJe=i(y),lg=n(y,"LI",{});var ZCe=s(lg);Fre=n(ZCe,"STRONG",{});var bVr=s(Fre);lJe=r(bVr,"vit_mae"),bVr.forEach(t),iJe=r(ZCe," \u2014 "),FS=n(ZCe,"A",{href:!0});var vVr=s(FS);dJe=r(vVr,"ViTMAEConfig"),vVr.forEach(t),cJe=r(ZCe," (ViTMAE model)"),ZCe.forEach(t),fJe=i(y),ig=n(y,"LI",{});var e5e=s(ig);Tre=n(e5e,"STRONG",{});var FVr=s(Tre);mJe=r(FVr,"wav2vec2"),FVr.forEach(t),gJe=r(e5e," \u2014 "),TS=n(e5e,"A",{href:!0});var TVr=s(TS);hJe=r(TVr,"Wav2Vec2Config"),TVr.forEach(t),pJe=r(e5e," (Wav2Vec2 model)"),e5e.forEach(t),_Je=i(y),dg=n(y,"LI",{});var o5e=s(dg);Mre=n(o5e,"STRONG",{});var MVr=s(Mre);uJe=r(MVr,"wav2vec2-conformer"),MVr.forEach(t),bJe=r(o5e," \u2014 "),MS=n(o5e,"A",{href:!0});var EVr=s(MS);vJe=r(EVr,"Wav2Vec2ConformerConfig"),EVr.forEach(t),FJe=r(o5e," (Wav2Vec2-Conformer model)"),o5e.forEach(t),TJe=i(y),cg=n(y,"LI",{});var r5e=s(cg);Ere=n(r5e,"STRONG",{});var CVr=s(Ere);MJe=r(CVr,"wavlm"),CVr.forEach(t),EJe=r(r5e," \u2014 "),ES=n(r5e,"A",{href:!0});var wVr=s(ES);CJe=r(wVr,"WavLMConfig"),wVr.forEach(t),wJe=r(r5e," (WavLM model)"),r5e.forEach(t),AJe=i(y),fg=n(y,"LI",{});var t5e=s(fg);Cre=n(t5e,"STRONG",{});var AVr=s(Cre);yJe=r(AVr,"xglm"),AVr.forEach(t),LJe=r(t5e," \u2014 "),CS=n(t5e,"A",{href:!0});var yVr=s(CS);xJe=r(yVr,"XGLMConfig"),yVr.forEach(t),$Je=r(t5e," (XGLM model)"),t5e.forEach(t),kJe=i(y),mg=n(y,"LI",{});var a5e=s(mg);wre=n(a5e,"STRONG",{});var LVr=s(wre);SJe=r(LVr,"xlm"),LVr.forEach(t),RJe=r(a5e," \u2014 "),wS=n(a5e,"A",{href:!0});var xVr=s(wS);PJe=r(xVr,"XLMConfig"),xVr.forEach(t),BJe=r(a5e," (XLM model)"),a5e.forEach(t),IJe=i(y),gg=n(y,"LI",{});var n5e=s(gg);Are=n(n5e,"STRONG",{});var $Vr=s(Are);qJe=r($Vr,"xlm-prophetnet"),$Vr.forEach(t),NJe=r(n5e," \u2014 "),AS=n(n5e,"A",{href:!0});var kVr=s(AS);jJe=r(kVr,"XLMProphetNetConfig"),kVr.forEach(t),DJe=r(n5e," (XLMProphetNet model)"),n5e.forEach(t),GJe=i(y),hg=n(y,"LI",{});var s5e=s(hg);yre=n(s5e,"STRONG",{});var SVr=s(yre);OJe=r(SVr,"xlm-roberta"),SVr.forEach(t),VJe=r(s5e," \u2014 "),yS=n(s5e,"A",{href:!0});var RVr=s(yS);XJe=r(RVr,"XLMRobertaConfig"),RVr.forEach(t),zJe=r(s5e," (XLM-RoBERTa model)"),s5e.forEach(t),WJe=i(y),pg=n(y,"LI",{});var l5e=s(pg);Lre=n(l5e,"STRONG",{});var PVr=s(Lre);QJe=r(PVr,"xlm-roberta-xl"),PVr.forEach(t),HJe=r(l5e," \u2014 "),LS=n(l5e,"A",{href:!0});var BVr=s(LS);UJe=r(BVr,"XLMRobertaXLConfig"),BVr.forEach(t),JJe=r(l5e," (XLM-RoBERTa-XL model)"),l5e.forEach(t),YJe=i(y),_g=n(y,"LI",{});var i5e=s(_g);xre=n(i5e,"STRONG",{});var IVr=s(xre);KJe=r(IVr,"xlnet"),IVr.forEach(t),ZJe=r(i5e," \u2014 "),xS=n(i5e,"A",{href:!0});var qVr=s(xS);eYe=r(qVr,"XLNetConfig"),qVr.forEach(t),oYe=r(i5e," (XLNet model)"),i5e.forEach(t),rYe=i(y),ug=n(y,"LI",{});var d5e=s(ug);$re=n(d5e,"STRONG",{});var NVr=s($re);tYe=r(NVr,"yolos"),NVr.forEach(t),aYe=r(d5e," \u2014 "),$S=n(d5e,"A",{href:!0});var jVr=s($S);nYe=r(jVr,"YolosConfig"),jVr.forEach(t),sYe=r(d5e," (YOLOS model)"),d5e.forEach(t),lYe=i(y),bg=n(y,"LI",{});var c5e=s(bg);kre=n(c5e,"STRONG",{});var DVr=s(kre);iYe=r(DVr,"yoso"),DVr.forEach(t),dYe=r(c5e," \u2014 "),kS=n(c5e,"A",{href:!0});var GVr=s(kS);cYe=r(GVr,"YosoConfig"),GVr.forEach(t),fYe=r(c5e," (YOSO model)"),c5e.forEach(t),y.forEach(t),mYe=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),gYe=i(et),Fg=n(et,"DIV",{class:!0});var GNe=s(Fg);T(u0.$$.fragment,GNe),hYe=i(GNe),Sre=n(GNe,"P",{});var OVr=s(Sre);pYe=r(OVr,"Register a new configuration for this class."),OVr.forEach(t),GNe.forEach(t),et.forEach(t),XIe=i(f),Fi=n(f,"H2",{class:!0});var ONe=s(Fi);Tg=n(ONe,"A",{id:!0,class:!0,href:!0});var VVr=s(Tg);Rre=n(VVr,"SPAN",{});var XVr=s(Rre);T(b0.$$.fragment,XVr),XVr.forEach(t),VVr.forEach(t),_Ye=i(ONe),Pre=n(ONe,"SPAN",{});var zVr=s(Pre);uYe=r(zVr,"AutoTokenizer"),zVr.forEach(t),ONe.forEach(t),zIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(v0.$$.fragment,Is),bYe=i(Is),F0=n(Is,"P",{});var VNe=s(F0);vYe=r(VNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SS=n(VNe,"A",{href:!0});var WVr=s(SS);FYe=r(WVr,"AutoTokenizer.from_pretrained()"),WVr.forEach(t),TYe=r(VNe," class method."),VNe.forEach(t),MYe=i(Is),T0=n(Is,"P",{});var XNe=s(T0);EYe=r(XNe,"This class cannot be instantiated directly using "),Bre=n(XNe,"CODE",{});var QVr=s(Bre);CYe=r(QVr,"__init__()"),QVr.forEach(t),wYe=r(XNe," (throws an error)."),XNe.forEach(t),AYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(M0.$$.fragment,qs),yYe=i(qs),Ire=n(qs,"P",{});var HVr=s(Ire);LYe=r(HVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HVr.forEach(t),xYe=i(qs),Aa=n(qs,"P",{});var mw=s(Aa);$Ye=r(mw,"The tokenizer class to instantiate is selected based on the "),qre=n(mw,"CODE",{});var UVr=s(qre);kYe=r(UVr,"model_type"),UVr.forEach(t),SYe=r(mw,` property of the config object (either
passed as an argument or loaded from `),Nre=n(mw,"CODE",{});var JVr=s(Nre);RYe=r(JVr,"pretrained_model_name_or_path"),JVr.forEach(t),PYe=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jre=n(mw,"CODE",{});var YVr=s(jre);BYe=r(YVr,"pretrained_model_name_or_path"),YVr.forEach(t),IYe=r(mw,":"),mw.forEach(t),qYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var E9=s(Sn);Dre=n(E9,"STRONG",{});var KVr=s(Dre);NYe=r(KVr,"albert"),KVr.forEach(t),jYe=r(E9," \u2014 "),RS=n(E9,"A",{href:!0});var ZVr=s(RS);DYe=r(ZVr,"AlbertTokenizer"),ZVr.forEach(t),GYe=r(E9," or "),PS=n(E9,"A",{href:!0});var eXr=s(PS);OYe=r(eXr,"AlbertTokenizerFast"),eXr.forEach(t),VYe=r(E9," (ALBERT model)"),E9.forEach(t),XYe=i(S),Rn=n(S,"LI",{});var C9=s(Rn);Gre=n(C9,"STRONG",{});var oXr=s(Gre);zYe=r(oXr,"bart"),oXr.forEach(t),WYe=r(C9," \u2014 "),BS=n(C9,"A",{href:!0});var rXr=s(BS);QYe=r(rXr,"BartTokenizer"),rXr.forEach(t),HYe=r(C9," or "),IS=n(C9,"A",{href:!0});var tXr=s(IS);UYe=r(tXr,"BartTokenizerFast"),tXr.forEach(t),JYe=r(C9," (BART model)"),C9.forEach(t),YYe=i(S),Pn=n(S,"LI",{});var w9=s(Pn);Ore=n(w9,"STRONG",{});var aXr=s(Ore);KYe=r(aXr,"barthez"),aXr.forEach(t),ZYe=r(w9," \u2014 "),qS=n(w9,"A",{href:!0});var nXr=s(qS);eKe=r(nXr,"BarthezTokenizer"),nXr.forEach(t),oKe=r(w9," or "),NS=n(w9,"A",{href:!0});var sXr=s(NS);rKe=r(sXr,"BarthezTokenizerFast"),sXr.forEach(t),tKe=r(w9," (BARThez model)"),w9.forEach(t),aKe=i(S),Mg=n(S,"LI",{});var f5e=s(Mg);Vre=n(f5e,"STRONG",{});var lXr=s(Vre);nKe=r(lXr,"bartpho"),lXr.forEach(t),sKe=r(f5e," \u2014 "),jS=n(f5e,"A",{href:!0});var iXr=s(jS);lKe=r(iXr,"BartphoTokenizer"),iXr.forEach(t),iKe=r(f5e," (BARTpho model)"),f5e.forEach(t),dKe=i(S),Bn=n(S,"LI",{});var A9=s(Bn);Xre=n(A9,"STRONG",{});var dXr=s(Xre);cKe=r(dXr,"bert"),dXr.forEach(t),fKe=r(A9," \u2014 "),DS=n(A9,"A",{href:!0});var cXr=s(DS);mKe=r(cXr,"BertTokenizer"),cXr.forEach(t),gKe=r(A9," or "),GS=n(A9,"A",{href:!0});var fXr=s(GS);hKe=r(fXr,"BertTokenizerFast"),fXr.forEach(t),pKe=r(A9," (BERT model)"),A9.forEach(t),_Ke=i(S),Eg=n(S,"LI",{});var m5e=s(Eg);zre=n(m5e,"STRONG",{});var mXr=s(zre);uKe=r(mXr,"bert-generation"),mXr.forEach(t),bKe=r(m5e," \u2014 "),OS=n(m5e,"A",{href:!0});var gXr=s(OS);vKe=r(gXr,"BertGenerationTokenizer"),gXr.forEach(t),FKe=r(m5e," (Bert Generation model)"),m5e.forEach(t),TKe=i(S),Cg=n(S,"LI",{});var g5e=s(Cg);Wre=n(g5e,"STRONG",{});var hXr=s(Wre);MKe=r(hXr,"bert-japanese"),hXr.forEach(t),EKe=r(g5e," \u2014 "),VS=n(g5e,"A",{href:!0});var pXr=s(VS);CKe=r(pXr,"BertJapaneseTokenizer"),pXr.forEach(t),wKe=r(g5e," (BertJapanese model)"),g5e.forEach(t),AKe=i(S),wg=n(S,"LI",{});var h5e=s(wg);Qre=n(h5e,"STRONG",{});var _Xr=s(Qre);yKe=r(_Xr,"bertweet"),_Xr.forEach(t),LKe=r(h5e," \u2014 "),XS=n(h5e,"A",{href:!0});var uXr=s(XS);xKe=r(uXr,"BertweetTokenizer"),uXr.forEach(t),$Ke=r(h5e," (Bertweet model)"),h5e.forEach(t),kKe=i(S),In=n(S,"LI",{});var y9=s(In);Hre=n(y9,"STRONG",{});var bXr=s(Hre);SKe=r(bXr,"big_bird"),bXr.forEach(t),RKe=r(y9," \u2014 "),zS=n(y9,"A",{href:!0});var vXr=s(zS);PKe=r(vXr,"BigBirdTokenizer"),vXr.forEach(t),BKe=r(y9," or "),WS=n(y9,"A",{href:!0});var FXr=s(WS);IKe=r(FXr,"BigBirdTokenizerFast"),FXr.forEach(t),qKe=r(y9," (BigBird model)"),y9.forEach(t),NKe=i(S),qn=n(S,"LI",{});var L9=s(qn);Ure=n(L9,"STRONG",{});var TXr=s(Ure);jKe=r(TXr,"bigbird_pegasus"),TXr.forEach(t),DKe=r(L9," \u2014 "),QS=n(L9,"A",{href:!0});var MXr=s(QS);GKe=r(MXr,"PegasusTokenizer"),MXr.forEach(t),OKe=r(L9," or "),HS=n(L9,"A",{href:!0});var EXr=s(HS);VKe=r(EXr,"PegasusTokenizerFast"),EXr.forEach(t),XKe=r(L9," (BigBirdPegasus model)"),L9.forEach(t),zKe=i(S),Nn=n(S,"LI",{});var x9=s(Nn);Jre=n(x9,"STRONG",{});var CXr=s(Jre);WKe=r(CXr,"blenderbot"),CXr.forEach(t),QKe=r(x9," \u2014 "),US=n(x9,"A",{href:!0});var wXr=s(US);HKe=r(wXr,"BlenderbotTokenizer"),wXr.forEach(t),UKe=r(x9," or "),JS=n(x9,"A",{href:!0});var AXr=s(JS);JKe=r(AXr,"BlenderbotTokenizerFast"),AXr.forEach(t),YKe=r(x9," (Blenderbot model)"),x9.forEach(t),KKe=i(S),Ag=n(S,"LI",{});var p5e=s(Ag);Yre=n(p5e,"STRONG",{});var yXr=s(Yre);ZKe=r(yXr,"blenderbot-small"),yXr.forEach(t),eZe=r(p5e," \u2014 "),YS=n(p5e,"A",{href:!0});var LXr=s(YS);oZe=r(LXr,"BlenderbotSmallTokenizer"),LXr.forEach(t),rZe=r(p5e," (BlenderbotSmall model)"),p5e.forEach(t),tZe=i(S),yg=n(S,"LI",{});var _5e=s(yg);Kre=n(_5e,"STRONG",{});var xXr=s(Kre);aZe=r(xXr,"byt5"),xXr.forEach(t),nZe=r(_5e," \u2014 "),KS=n(_5e,"A",{href:!0});var $Xr=s(KS);sZe=r($Xr,"ByT5Tokenizer"),$Xr.forEach(t),lZe=r(_5e," (ByT5 model)"),_5e.forEach(t),iZe=i(S),jn=n(S,"LI",{});var $9=s(jn);Zre=n($9,"STRONG",{});var kXr=s(Zre);dZe=r(kXr,"camembert"),kXr.forEach(t),cZe=r($9," \u2014 "),ZS=n($9,"A",{href:!0});var SXr=s(ZS);fZe=r(SXr,"CamembertTokenizer"),SXr.forEach(t),mZe=r($9," or "),eR=n($9,"A",{href:!0});var RXr=s(eR);gZe=r(RXr,"CamembertTokenizerFast"),RXr.forEach(t),hZe=r($9," (CamemBERT model)"),$9.forEach(t),pZe=i(S),Lg=n(S,"LI",{});var u5e=s(Lg);ete=n(u5e,"STRONG",{});var PXr=s(ete);_Ze=r(PXr,"canine"),PXr.forEach(t),uZe=r(u5e," \u2014 "),oR=n(u5e,"A",{href:!0});var BXr=s(oR);bZe=r(BXr,"CanineTokenizer"),BXr.forEach(t),vZe=r(u5e," (Canine model)"),u5e.forEach(t),FZe=i(S),Dn=n(S,"LI",{});var k9=s(Dn);ote=n(k9,"STRONG",{});var IXr=s(ote);TZe=r(IXr,"clip"),IXr.forEach(t),MZe=r(k9," \u2014 "),rR=n(k9,"A",{href:!0});var qXr=s(rR);EZe=r(qXr,"CLIPTokenizer"),qXr.forEach(t),CZe=r(k9," or "),tR=n(k9,"A",{href:!0});var NXr=s(tR);wZe=r(NXr,"CLIPTokenizerFast"),NXr.forEach(t),AZe=r(k9," (CLIP model)"),k9.forEach(t),yZe=i(S),Gn=n(S,"LI",{});var S9=s(Gn);rte=n(S9,"STRONG",{});var jXr=s(rte);LZe=r(jXr,"convbert"),jXr.forEach(t),xZe=r(S9," \u2014 "),aR=n(S9,"A",{href:!0});var DXr=s(aR);$Ze=r(DXr,"ConvBertTokenizer"),DXr.forEach(t),kZe=r(S9," or "),nR=n(S9,"A",{href:!0});var GXr=s(nR);SZe=r(GXr,"ConvBertTokenizerFast"),GXr.forEach(t),RZe=r(S9," (ConvBERT model)"),S9.forEach(t),PZe=i(S),On=n(S,"LI",{});var R9=s(On);tte=n(R9,"STRONG",{});var OXr=s(tte);BZe=r(OXr,"cpm"),OXr.forEach(t),IZe=r(R9," \u2014 "),sR=n(R9,"A",{href:!0});var VXr=s(sR);qZe=r(VXr,"CpmTokenizer"),VXr.forEach(t),NZe=r(R9," or "),lR=n(R9,"A",{href:!0});var XXr=s(lR);jZe=r(XXr,"CpmTokenizerFast"),XXr.forEach(t),DZe=r(R9," (CPM model)"),R9.forEach(t),GZe=i(S),xg=n(S,"LI",{});var b5e=s(xg);ate=n(b5e,"STRONG",{});var zXr=s(ate);OZe=r(zXr,"ctrl"),zXr.forEach(t),VZe=r(b5e," \u2014 "),iR=n(b5e,"A",{href:!0});var WXr=s(iR);XZe=r(WXr,"CTRLTokenizer"),WXr.forEach(t),zZe=r(b5e," (CTRL model)"),b5e.forEach(t),WZe=i(S),Vn=n(S,"LI",{});var P9=s(Vn);nte=n(P9,"STRONG",{});var QXr=s(nte);QZe=r(QXr,"data2vec-text"),QXr.forEach(t),HZe=r(P9," \u2014 "),dR=n(P9,"A",{href:!0});var HXr=s(dR);UZe=r(HXr,"RobertaTokenizer"),HXr.forEach(t),JZe=r(P9," or "),cR=n(P9,"A",{href:!0});var UXr=s(cR);YZe=r(UXr,"RobertaTokenizerFast"),UXr.forEach(t),KZe=r(P9," (Data2VecText model)"),P9.forEach(t),ZZe=i(S),Xn=n(S,"LI",{});var B9=s(Xn);ste=n(B9,"STRONG",{});var JXr=s(ste);eeo=r(JXr,"deberta"),JXr.forEach(t),oeo=r(B9," \u2014 "),fR=n(B9,"A",{href:!0});var YXr=s(fR);reo=r(YXr,"DebertaTokenizer"),YXr.forEach(t),teo=r(B9," or "),mR=n(B9,"A",{href:!0});var KXr=s(mR);aeo=r(KXr,"DebertaTokenizerFast"),KXr.forEach(t),neo=r(B9," (DeBERTa model)"),B9.forEach(t),seo=i(S),zn=n(S,"LI",{});var I9=s(zn);lte=n(I9,"STRONG",{});var ZXr=s(lte);leo=r(ZXr,"deberta-v2"),ZXr.forEach(t),ieo=r(I9," \u2014 "),gR=n(I9,"A",{href:!0});var ezr=s(gR);deo=r(ezr,"DebertaV2Tokenizer"),ezr.forEach(t),ceo=r(I9," or "),hR=n(I9,"A",{href:!0});var ozr=s(hR);feo=r(ozr,"DebertaV2TokenizerFast"),ozr.forEach(t),meo=r(I9," (DeBERTa-v2 model)"),I9.forEach(t),geo=i(S),Wn=n(S,"LI",{});var q9=s(Wn);ite=n(q9,"STRONG",{});var rzr=s(ite);heo=r(rzr,"distilbert"),rzr.forEach(t),peo=r(q9," \u2014 "),pR=n(q9,"A",{href:!0});var tzr=s(pR);_eo=r(tzr,"DistilBertTokenizer"),tzr.forEach(t),ueo=r(q9," or "),_R=n(q9,"A",{href:!0});var azr=s(_R);beo=r(azr,"DistilBertTokenizerFast"),azr.forEach(t),veo=r(q9," (DistilBERT model)"),q9.forEach(t),Feo=i(S),Qn=n(S,"LI",{});var N9=s(Qn);dte=n(N9,"STRONG",{});var nzr=s(dte);Teo=r(nzr,"dpr"),nzr.forEach(t),Meo=r(N9," \u2014 "),uR=n(N9,"A",{href:!0});var szr=s(uR);Eeo=r(szr,"DPRQuestionEncoderTokenizer"),szr.forEach(t),Ceo=r(N9," or "),bR=n(N9,"A",{href:!0});var lzr=s(bR);weo=r(lzr,"DPRQuestionEncoderTokenizerFast"),lzr.forEach(t),Aeo=r(N9," (DPR model)"),N9.forEach(t),yeo=i(S),Hn=n(S,"LI",{});var j9=s(Hn);cte=n(j9,"STRONG",{});var izr=s(cte);Leo=r(izr,"electra"),izr.forEach(t),xeo=r(j9," \u2014 "),vR=n(j9,"A",{href:!0});var dzr=s(vR);$eo=r(dzr,"ElectraTokenizer"),dzr.forEach(t),keo=r(j9," or "),FR=n(j9,"A",{href:!0});var czr=s(FR);Seo=r(czr,"ElectraTokenizerFast"),czr.forEach(t),Reo=r(j9," (ELECTRA model)"),j9.forEach(t),Peo=i(S),$g=n(S,"LI",{});var v5e=s($g);fte=n(v5e,"STRONG",{});var fzr=s(fte);Beo=r(fzr,"flaubert"),fzr.forEach(t),Ieo=r(v5e," \u2014 "),TR=n(v5e,"A",{href:!0});var mzr=s(TR);qeo=r(mzr,"FlaubertTokenizer"),mzr.forEach(t),Neo=r(v5e," (FlauBERT model)"),v5e.forEach(t),jeo=i(S),Un=n(S,"LI",{});var D9=s(Un);mte=n(D9,"STRONG",{});var gzr=s(mte);Deo=r(gzr,"fnet"),gzr.forEach(t),Geo=r(D9," \u2014 "),MR=n(D9,"A",{href:!0});var hzr=s(MR);Oeo=r(hzr,"FNetTokenizer"),hzr.forEach(t),Veo=r(D9," or "),ER=n(D9,"A",{href:!0});var pzr=s(ER);Xeo=r(pzr,"FNetTokenizerFast"),pzr.forEach(t),zeo=r(D9," (FNet model)"),D9.forEach(t),Weo=i(S),kg=n(S,"LI",{});var F5e=s(kg);gte=n(F5e,"STRONG",{});var _zr=s(gte);Qeo=r(_zr,"fsmt"),_zr.forEach(t),Heo=r(F5e," \u2014 "),CR=n(F5e,"A",{href:!0});var uzr=s(CR);Ueo=r(uzr,"FSMTTokenizer"),uzr.forEach(t),Jeo=r(F5e," (FairSeq Machine-Translation model)"),F5e.forEach(t),Yeo=i(S),Jn=n(S,"LI",{});var G9=s(Jn);hte=n(G9,"STRONG",{});var bzr=s(hte);Keo=r(bzr,"funnel"),bzr.forEach(t),Zeo=r(G9," \u2014 "),wR=n(G9,"A",{href:!0});var vzr=s(wR);eoo=r(vzr,"FunnelTokenizer"),vzr.forEach(t),ooo=r(G9," or "),AR=n(G9,"A",{href:!0});var Fzr=s(AR);roo=r(Fzr,"FunnelTokenizerFast"),Fzr.forEach(t),too=r(G9," (Funnel Transformer model)"),G9.forEach(t),aoo=i(S),Yn=n(S,"LI",{});var O9=s(Yn);pte=n(O9,"STRONG",{});var Tzr=s(pte);noo=r(Tzr,"gpt2"),Tzr.forEach(t),soo=r(O9," \u2014 "),yR=n(O9,"A",{href:!0});var Mzr=s(yR);loo=r(Mzr,"GPT2Tokenizer"),Mzr.forEach(t),ioo=r(O9," or "),LR=n(O9,"A",{href:!0});var Ezr=s(LR);doo=r(Ezr,"GPT2TokenizerFast"),Ezr.forEach(t),coo=r(O9," (OpenAI GPT-2 model)"),O9.forEach(t),foo=i(S),Kn=n(S,"LI",{});var V9=s(Kn);_te=n(V9,"STRONG",{});var Czr=s(_te);moo=r(Czr,"gpt_neo"),Czr.forEach(t),goo=r(V9," \u2014 "),xR=n(V9,"A",{href:!0});var wzr=s(xR);hoo=r(wzr,"GPT2Tokenizer"),wzr.forEach(t),poo=r(V9," or "),$R=n(V9,"A",{href:!0});var Azr=s($R);_oo=r(Azr,"GPT2TokenizerFast"),Azr.forEach(t),uoo=r(V9," (GPT Neo model)"),V9.forEach(t),boo=i(S),Zn=n(S,"LI",{});var X9=s(Zn);ute=n(X9,"STRONG",{});var yzr=s(ute);voo=r(yzr,"gptj"),yzr.forEach(t),Foo=r(X9," \u2014 "),kR=n(X9,"A",{href:!0});var Lzr=s(kR);Too=r(Lzr,"GPT2Tokenizer"),Lzr.forEach(t),Moo=r(X9," or "),SR=n(X9,"A",{href:!0});var xzr=s(SR);Eoo=r(xzr,"GPT2TokenizerFast"),xzr.forEach(t),Coo=r(X9," (GPT-J model)"),X9.forEach(t),woo=i(S),es=n(S,"LI",{});var z9=s(es);bte=n(z9,"STRONG",{});var $zr=s(bte);Aoo=r($zr,"herbert"),$zr.forEach(t),yoo=r(z9," \u2014 "),RR=n(z9,"A",{href:!0});var kzr=s(RR);Loo=r(kzr,"HerbertTokenizer"),kzr.forEach(t),xoo=r(z9," or "),PR=n(z9,"A",{href:!0});var Szr=s(PR);$oo=r(Szr,"HerbertTokenizerFast"),Szr.forEach(t),koo=r(z9," (HerBERT model)"),z9.forEach(t),Soo=i(S),Sg=n(S,"LI",{});var T5e=s(Sg);vte=n(T5e,"STRONG",{});var Rzr=s(vte);Roo=r(Rzr,"hubert"),Rzr.forEach(t),Poo=r(T5e," \u2014 "),BR=n(T5e,"A",{href:!0});var Pzr=s(BR);Boo=r(Pzr,"Wav2Vec2CTCTokenizer"),Pzr.forEach(t),Ioo=r(T5e," (Hubert model)"),T5e.forEach(t),qoo=i(S),os=n(S,"LI",{});var W9=s(os);Fte=n(W9,"STRONG",{});var Bzr=s(Fte);Noo=r(Bzr,"ibert"),Bzr.forEach(t),joo=r(W9," \u2014 "),IR=n(W9,"A",{href:!0});var Izr=s(IR);Doo=r(Izr,"RobertaTokenizer"),Izr.forEach(t),Goo=r(W9," or "),qR=n(W9,"A",{href:!0});var qzr=s(qR);Ooo=r(qzr,"RobertaTokenizerFast"),qzr.forEach(t),Voo=r(W9," (I-BERT model)"),W9.forEach(t),Xoo=i(S),rs=n(S,"LI",{});var Q9=s(rs);Tte=n(Q9,"STRONG",{});var Nzr=s(Tte);zoo=r(Nzr,"layoutlm"),Nzr.forEach(t),Woo=r(Q9," \u2014 "),NR=n(Q9,"A",{href:!0});var jzr=s(NR);Qoo=r(jzr,"LayoutLMTokenizer"),jzr.forEach(t),Hoo=r(Q9," or "),jR=n(Q9,"A",{href:!0});var Dzr=s(jR);Uoo=r(Dzr,"LayoutLMTokenizerFast"),Dzr.forEach(t),Joo=r(Q9," (LayoutLM model)"),Q9.forEach(t),Yoo=i(S),ts=n(S,"LI",{});var H9=s(ts);Mte=n(H9,"STRONG",{});var Gzr=s(Mte);Koo=r(Gzr,"layoutlmv2"),Gzr.forEach(t),Zoo=r(H9," \u2014 "),DR=n(H9,"A",{href:!0});var Ozr=s(DR);ero=r(Ozr,"LayoutLMv2Tokenizer"),Ozr.forEach(t),oro=r(H9," or "),GR=n(H9,"A",{href:!0});var Vzr=s(GR);rro=r(Vzr,"LayoutLMv2TokenizerFast"),Vzr.forEach(t),tro=r(H9," (LayoutLMv2 model)"),H9.forEach(t),aro=i(S),as=n(S,"LI",{});var U9=s(as);Ete=n(U9,"STRONG",{});var Xzr=s(Ete);nro=r(Xzr,"layoutxlm"),Xzr.forEach(t),sro=r(U9," \u2014 "),OR=n(U9,"A",{href:!0});var zzr=s(OR);lro=r(zzr,"LayoutXLMTokenizer"),zzr.forEach(t),iro=r(U9," or "),VR=n(U9,"A",{href:!0});var Wzr=s(VR);dro=r(Wzr,"LayoutXLMTokenizerFast"),Wzr.forEach(t),cro=r(U9," (LayoutXLM model)"),U9.forEach(t),fro=i(S),ns=n(S,"LI",{});var J9=s(ns);Cte=n(J9,"STRONG",{});var Qzr=s(Cte);mro=r(Qzr,"led"),Qzr.forEach(t),gro=r(J9," \u2014 "),XR=n(J9,"A",{href:!0});var Hzr=s(XR);hro=r(Hzr,"LEDTokenizer"),Hzr.forEach(t),pro=r(J9," or "),zR=n(J9,"A",{href:!0});var Uzr=s(zR);_ro=r(Uzr,"LEDTokenizerFast"),Uzr.forEach(t),uro=r(J9," (LED model)"),J9.forEach(t),bro=i(S),ss=n(S,"LI",{});var Y9=s(ss);wte=n(Y9,"STRONG",{});var Jzr=s(wte);vro=r(Jzr,"longformer"),Jzr.forEach(t),Fro=r(Y9," \u2014 "),WR=n(Y9,"A",{href:!0});var Yzr=s(WR);Tro=r(Yzr,"LongformerTokenizer"),Yzr.forEach(t),Mro=r(Y9," or "),QR=n(Y9,"A",{href:!0});var Kzr=s(QR);Ero=r(Kzr,"LongformerTokenizerFast"),Kzr.forEach(t),Cro=r(Y9," (Longformer model)"),Y9.forEach(t),wro=i(S),Rg=n(S,"LI",{});var M5e=s(Rg);Ate=n(M5e,"STRONG",{});var Zzr=s(Ate);Aro=r(Zzr,"luke"),Zzr.forEach(t),yro=r(M5e," \u2014 "),HR=n(M5e,"A",{href:!0});var eWr=s(HR);Lro=r(eWr,"LukeTokenizer"),eWr.forEach(t),xro=r(M5e," (LUKE model)"),M5e.forEach(t),$ro=i(S),ls=n(S,"LI",{});var K9=s(ls);yte=n(K9,"STRONG",{});var oWr=s(yte);kro=r(oWr,"lxmert"),oWr.forEach(t),Sro=r(K9," \u2014 "),UR=n(K9,"A",{href:!0});var rWr=s(UR);Rro=r(rWr,"LxmertTokenizer"),rWr.forEach(t),Pro=r(K9," or "),JR=n(K9,"A",{href:!0});var tWr=s(JR);Bro=r(tWr,"LxmertTokenizerFast"),tWr.forEach(t),Iro=r(K9," (LXMERT model)"),K9.forEach(t),qro=i(S),Pg=n(S,"LI",{});var E5e=s(Pg);Lte=n(E5e,"STRONG",{});var aWr=s(Lte);Nro=r(aWr,"m2m_100"),aWr.forEach(t),jro=r(E5e," \u2014 "),YR=n(E5e,"A",{href:!0});var nWr=s(YR);Dro=r(nWr,"M2M100Tokenizer"),nWr.forEach(t),Gro=r(E5e," (M2M100 model)"),E5e.forEach(t),Oro=i(S),Bg=n(S,"LI",{});var C5e=s(Bg);xte=n(C5e,"STRONG",{});var sWr=s(xte);Vro=r(sWr,"marian"),sWr.forEach(t),Xro=r(C5e," \u2014 "),KR=n(C5e,"A",{href:!0});var lWr=s(KR);zro=r(lWr,"MarianTokenizer"),lWr.forEach(t),Wro=r(C5e," (Marian model)"),C5e.forEach(t),Qro=i(S),is=n(S,"LI",{});var Z9=s(is);$te=n(Z9,"STRONG",{});var iWr=s($te);Hro=r(iWr,"mbart"),iWr.forEach(t),Uro=r(Z9," \u2014 "),ZR=n(Z9,"A",{href:!0});var dWr=s(ZR);Jro=r(dWr,"MBartTokenizer"),dWr.forEach(t),Yro=r(Z9," or "),eP=n(Z9,"A",{href:!0});var cWr=s(eP);Kro=r(cWr,"MBartTokenizerFast"),cWr.forEach(t),Zro=r(Z9," (mBART model)"),Z9.forEach(t),eto=i(S),ds=n(S,"LI",{});var e$=s(ds);kte=n(e$,"STRONG",{});var fWr=s(kte);oto=r(fWr,"mbart50"),fWr.forEach(t),rto=r(e$," \u2014 "),oP=n(e$,"A",{href:!0});var mWr=s(oP);tto=r(mWr,"MBart50Tokenizer"),mWr.forEach(t),ato=r(e$," or "),rP=n(e$,"A",{href:!0});var gWr=s(rP);nto=r(gWr,"MBart50TokenizerFast"),gWr.forEach(t),sto=r(e$," (mBART-50 model)"),e$.forEach(t),lto=i(S),cs=n(S,"LI",{});var o$=s(cs);Ste=n(o$,"STRONG",{});var hWr=s(Ste);ito=r(hWr,"megatron-bert"),hWr.forEach(t),dto=r(o$," \u2014 "),tP=n(o$,"A",{href:!0});var pWr=s(tP);cto=r(pWr,"BertTokenizer"),pWr.forEach(t),fto=r(o$," or "),aP=n(o$,"A",{href:!0});var _Wr=s(aP);mto=r(_Wr,"BertTokenizerFast"),_Wr.forEach(t),gto=r(o$," (MegatronBert model)"),o$.forEach(t),hto=i(S),Ig=n(S,"LI",{});var w5e=s(Ig);Rte=n(w5e,"STRONG",{});var uWr=s(Rte);pto=r(uWr,"mluke"),uWr.forEach(t),_to=r(w5e," \u2014 "),nP=n(w5e,"A",{href:!0});var bWr=s(nP);uto=r(bWr,"MLukeTokenizer"),bWr.forEach(t),bto=r(w5e," (mLUKE model)"),w5e.forEach(t),vto=i(S),fs=n(S,"LI",{});var r$=s(fs);Pte=n(r$,"STRONG",{});var vWr=s(Pte);Fto=r(vWr,"mobilebert"),vWr.forEach(t),Tto=r(r$," \u2014 "),sP=n(r$,"A",{href:!0});var FWr=s(sP);Mto=r(FWr,"MobileBertTokenizer"),FWr.forEach(t),Eto=r(r$," or "),lP=n(r$,"A",{href:!0});var TWr=s(lP);Cto=r(TWr,"MobileBertTokenizerFast"),TWr.forEach(t),wto=r(r$," (MobileBERT model)"),r$.forEach(t),Ato=i(S),ms=n(S,"LI",{});var t$=s(ms);Bte=n(t$,"STRONG",{});var MWr=s(Bte);yto=r(MWr,"mpnet"),MWr.forEach(t),Lto=r(t$," \u2014 "),iP=n(t$,"A",{href:!0});var EWr=s(iP);xto=r(EWr,"MPNetTokenizer"),EWr.forEach(t),$to=r(t$," or "),dP=n(t$,"A",{href:!0});var CWr=s(dP);kto=r(CWr,"MPNetTokenizerFast"),CWr.forEach(t),Sto=r(t$," (MPNet model)"),t$.forEach(t),Rto=i(S),gs=n(S,"LI",{});var a$=s(gs);Ite=n(a$,"STRONG",{});var wWr=s(Ite);Pto=r(wWr,"mt5"),wWr.forEach(t),Bto=r(a$," \u2014 "),cP=n(a$,"A",{href:!0});var AWr=s(cP);Ito=r(AWr,"MT5Tokenizer"),AWr.forEach(t),qto=r(a$," or "),fP=n(a$,"A",{href:!0});var yWr=s(fP);Nto=r(yWr,"MT5TokenizerFast"),yWr.forEach(t),jto=r(a$," (mT5 model)"),a$.forEach(t),Dto=i(S),hs=n(S,"LI",{});var n$=s(hs);qte=n(n$,"STRONG",{});var LWr=s(qte);Gto=r(LWr,"nystromformer"),LWr.forEach(t),Oto=r(n$," \u2014 "),mP=n(n$,"A",{href:!0});var xWr=s(mP);Vto=r(xWr,"AlbertTokenizer"),xWr.forEach(t),Xto=r(n$," or "),gP=n(n$,"A",{href:!0});var $Wr=s(gP);zto=r($Wr,"AlbertTokenizerFast"),$Wr.forEach(t),Wto=r(n$," (Nystromformer model)"),n$.forEach(t),Qto=i(S),ps=n(S,"LI",{});var s$=s(ps);Nte=n(s$,"STRONG",{});var kWr=s(Nte);Hto=r(kWr,"openai-gpt"),kWr.forEach(t),Uto=r(s$," \u2014 "),hP=n(s$,"A",{href:!0});var SWr=s(hP);Jto=r(SWr,"OpenAIGPTTokenizer"),SWr.forEach(t),Yto=r(s$," or "),pP=n(s$,"A",{href:!0});var RWr=s(pP);Kto=r(RWr,"OpenAIGPTTokenizerFast"),RWr.forEach(t),Zto=r(s$," (OpenAI GPT model)"),s$.forEach(t),eao=i(S),qg=n(S,"LI",{});var A5e=s(qg);jte=n(A5e,"STRONG",{});var PWr=s(jte);oao=r(PWr,"opt"),PWr.forEach(t),rao=r(A5e," \u2014 "),_P=n(A5e,"A",{href:!0});var BWr=s(_P);tao=r(BWr,"GPT2Tokenizer"),BWr.forEach(t),aao=r(A5e," (OPT model)"),A5e.forEach(t),nao=i(S),_s=n(S,"LI",{});var l$=s(_s);Dte=n(l$,"STRONG",{});var IWr=s(Dte);sao=r(IWr,"pegasus"),IWr.forEach(t),lao=r(l$," \u2014 "),uP=n(l$,"A",{href:!0});var qWr=s(uP);iao=r(qWr,"PegasusTokenizer"),qWr.forEach(t),dao=r(l$," or "),bP=n(l$,"A",{href:!0});var NWr=s(bP);cao=r(NWr,"PegasusTokenizerFast"),NWr.forEach(t),fao=r(l$," (Pegasus model)"),l$.forEach(t),mao=i(S),Ng=n(S,"LI",{});var y5e=s(Ng);Gte=n(y5e,"STRONG",{});var jWr=s(Gte);gao=r(jWr,"perceiver"),jWr.forEach(t),hao=r(y5e," \u2014 "),vP=n(y5e,"A",{href:!0});var DWr=s(vP);pao=r(DWr,"PerceiverTokenizer"),DWr.forEach(t),_ao=r(y5e," (Perceiver model)"),y5e.forEach(t),uao=i(S),jg=n(S,"LI",{});var L5e=s(jg);Ote=n(L5e,"STRONG",{});var GWr=s(Ote);bao=r(GWr,"phobert"),GWr.forEach(t),vao=r(L5e," \u2014 "),FP=n(L5e,"A",{href:!0});var OWr=s(FP);Fao=r(OWr,"PhobertTokenizer"),OWr.forEach(t),Tao=r(L5e," (PhoBERT model)"),L5e.forEach(t),Mao=i(S),Dg=n(S,"LI",{});var x5e=s(Dg);Vte=n(x5e,"STRONG",{});var VWr=s(Vte);Eao=r(VWr,"plbart"),VWr.forEach(t),Cao=r(x5e," \u2014 "),TP=n(x5e,"A",{href:!0});var XWr=s(TP);wao=r(XWr,"PLBartTokenizer"),XWr.forEach(t),Aao=r(x5e," (PLBart model)"),x5e.forEach(t),yao=i(S),Gg=n(S,"LI",{});var $5e=s(Gg);Xte=n($5e,"STRONG",{});var zWr=s(Xte);Lao=r(zWr,"prophetnet"),zWr.forEach(t),xao=r($5e," \u2014 "),MP=n($5e,"A",{href:!0});var WWr=s(MP);$ao=r(WWr,"ProphetNetTokenizer"),WWr.forEach(t),kao=r($5e," (ProphetNet model)"),$5e.forEach(t),Sao=i(S),us=n(S,"LI",{});var i$=s(us);zte=n(i$,"STRONG",{});var QWr=s(zte);Rao=r(QWr,"qdqbert"),QWr.forEach(t),Pao=r(i$," \u2014 "),EP=n(i$,"A",{href:!0});var HWr=s(EP);Bao=r(HWr,"BertTokenizer"),HWr.forEach(t),Iao=r(i$," or "),CP=n(i$,"A",{href:!0});var UWr=s(CP);qao=r(UWr,"BertTokenizerFast"),UWr.forEach(t),Nao=r(i$," (QDQBert model)"),i$.forEach(t),jao=i(S),Og=n(S,"LI",{});var k5e=s(Og);Wte=n(k5e,"STRONG",{});var JWr=s(Wte);Dao=r(JWr,"rag"),JWr.forEach(t),Gao=r(k5e," \u2014 "),wP=n(k5e,"A",{href:!0});var YWr=s(wP);Oao=r(YWr,"RagTokenizer"),YWr.forEach(t),Vao=r(k5e," (RAG model)"),k5e.forEach(t),Xao=i(S),bs=n(S,"LI",{});var d$=s(bs);Qte=n(d$,"STRONG",{});var KWr=s(Qte);zao=r(KWr,"realm"),KWr.forEach(t),Wao=r(d$," \u2014 "),AP=n(d$,"A",{href:!0});var ZWr=s(AP);Qao=r(ZWr,"RealmTokenizer"),ZWr.forEach(t),Hao=r(d$," or "),yP=n(d$,"A",{href:!0});var eQr=s(yP);Uao=r(eQr,"RealmTokenizerFast"),eQr.forEach(t),Jao=r(d$," (Realm model)"),d$.forEach(t),Yao=i(S),vs=n(S,"LI",{});var c$=s(vs);Hte=n(c$,"STRONG",{});var oQr=s(Hte);Kao=r(oQr,"reformer"),oQr.forEach(t),Zao=r(c$," \u2014 "),LP=n(c$,"A",{href:!0});var rQr=s(LP);eno=r(rQr,"ReformerTokenizer"),rQr.forEach(t),ono=r(c$," or "),xP=n(c$,"A",{href:!0});var tQr=s(xP);rno=r(tQr,"ReformerTokenizerFast"),tQr.forEach(t),tno=r(c$," (Reformer model)"),c$.forEach(t),ano=i(S),Fs=n(S,"LI",{});var f$=s(Fs);Ute=n(f$,"STRONG",{});var aQr=s(Ute);nno=r(aQr,"rembert"),aQr.forEach(t),sno=r(f$," \u2014 "),$P=n(f$,"A",{href:!0});var nQr=s($P);lno=r(nQr,"RemBertTokenizer"),nQr.forEach(t),ino=r(f$," or "),kP=n(f$,"A",{href:!0});var sQr=s(kP);dno=r(sQr,"RemBertTokenizerFast"),sQr.forEach(t),cno=r(f$," (RemBERT model)"),f$.forEach(t),fno=i(S),Ts=n(S,"LI",{});var m$=s(Ts);Jte=n(m$,"STRONG",{});var lQr=s(Jte);mno=r(lQr,"retribert"),lQr.forEach(t),gno=r(m$," \u2014 "),SP=n(m$,"A",{href:!0});var iQr=s(SP);hno=r(iQr,"RetriBertTokenizer"),iQr.forEach(t),pno=r(m$," or "),RP=n(m$,"A",{href:!0});var dQr=s(RP);_no=r(dQr,"RetriBertTokenizerFast"),dQr.forEach(t),uno=r(m$," (RetriBERT model)"),m$.forEach(t),bno=i(S),Ms=n(S,"LI",{});var g$=s(Ms);Yte=n(g$,"STRONG",{});var cQr=s(Yte);vno=r(cQr,"roberta"),cQr.forEach(t),Fno=r(g$," \u2014 "),PP=n(g$,"A",{href:!0});var fQr=s(PP);Tno=r(fQr,"RobertaTokenizer"),fQr.forEach(t),Mno=r(g$," or "),BP=n(g$,"A",{href:!0});var mQr=s(BP);Eno=r(mQr,"RobertaTokenizerFast"),mQr.forEach(t),Cno=r(g$," (RoBERTa model)"),g$.forEach(t),wno=i(S),Es=n(S,"LI",{});var h$=s(Es);Kte=n(h$,"STRONG",{});var gQr=s(Kte);Ano=r(gQr,"roformer"),gQr.forEach(t),yno=r(h$," \u2014 "),IP=n(h$,"A",{href:!0});var hQr=s(IP);Lno=r(hQr,"RoFormerTokenizer"),hQr.forEach(t),xno=r(h$," or "),qP=n(h$,"A",{href:!0});var pQr=s(qP);$no=r(pQr,"RoFormerTokenizerFast"),pQr.forEach(t),kno=r(h$," (RoFormer model)"),h$.forEach(t),Sno=i(S),Vg=n(S,"LI",{});var S5e=s(Vg);Zte=n(S5e,"STRONG",{});var _Qr=s(Zte);Rno=r(_Qr,"speech_to_text"),_Qr.forEach(t),Pno=r(S5e," \u2014 "),NP=n(S5e,"A",{href:!0});var uQr=s(NP);Bno=r(uQr,"Speech2TextTokenizer"),uQr.forEach(t),Ino=r(S5e," (Speech2Text model)"),S5e.forEach(t),qno=i(S),Xg=n(S,"LI",{});var R5e=s(Xg);eae=n(R5e,"STRONG",{});var bQr=s(eae);Nno=r(bQr,"speech_to_text_2"),bQr.forEach(t),jno=r(R5e," \u2014 "),jP=n(R5e,"A",{href:!0});var vQr=s(jP);Dno=r(vQr,"Speech2Text2Tokenizer"),vQr.forEach(t),Gno=r(R5e," (Speech2Text2 model)"),R5e.forEach(t),Ono=i(S),Cs=n(S,"LI",{});var p$=s(Cs);oae=n(p$,"STRONG",{});var FQr=s(oae);Vno=r(FQr,"splinter"),FQr.forEach(t),Xno=r(p$," \u2014 "),DP=n(p$,"A",{href:!0});var TQr=s(DP);zno=r(TQr,"SplinterTokenizer"),TQr.forEach(t),Wno=r(p$," or "),GP=n(p$,"A",{href:!0});var MQr=s(GP);Qno=r(MQr,"SplinterTokenizerFast"),MQr.forEach(t),Hno=r(p$," (Splinter model)"),p$.forEach(t),Uno=i(S),ws=n(S,"LI",{});var _$=s(ws);rae=n(_$,"STRONG",{});var EQr=s(rae);Jno=r(EQr,"squeezebert"),EQr.forEach(t),Yno=r(_$," \u2014 "),OP=n(_$,"A",{href:!0});var CQr=s(OP);Kno=r(CQr,"SqueezeBertTokenizer"),CQr.forEach(t),Zno=r(_$," or "),VP=n(_$,"A",{href:!0});var wQr=s(VP);eso=r(wQr,"SqueezeBertTokenizerFast"),wQr.forEach(t),oso=r(_$," (SqueezeBERT model)"),_$.forEach(t),rso=i(S),As=n(S,"LI",{});var u$=s(As);tae=n(u$,"STRONG",{});var AQr=s(tae);tso=r(AQr,"t5"),AQr.forEach(t),aso=r(u$," \u2014 "),XP=n(u$,"A",{href:!0});var yQr=s(XP);nso=r(yQr,"T5Tokenizer"),yQr.forEach(t),sso=r(u$," or "),zP=n(u$,"A",{href:!0});var LQr=s(zP);lso=r(LQr,"T5TokenizerFast"),LQr.forEach(t),iso=r(u$," (T5 model)"),u$.forEach(t),dso=i(S),zg=n(S,"LI",{});var P5e=s(zg);aae=n(P5e,"STRONG",{});var xQr=s(aae);cso=r(xQr,"tapas"),xQr.forEach(t),fso=r(P5e," \u2014 "),WP=n(P5e,"A",{href:!0});var $Qr=s(WP);mso=r($Qr,"TapasTokenizer"),$Qr.forEach(t),gso=r(P5e," (TAPAS model)"),P5e.forEach(t),hso=i(S),Wg=n(S,"LI",{});var B5e=s(Wg);nae=n(B5e,"STRONG",{});var kQr=s(nae);pso=r(kQr,"tapex"),kQr.forEach(t),_so=r(B5e," \u2014 "),QP=n(B5e,"A",{href:!0});var SQr=s(QP);uso=r(SQr,"TapexTokenizer"),SQr.forEach(t),bso=r(B5e," (TAPEX model)"),B5e.forEach(t),vso=i(S),Qg=n(S,"LI",{});var I5e=s(Qg);sae=n(I5e,"STRONG",{});var RQr=s(sae);Fso=r(RQr,"transfo-xl"),RQr.forEach(t),Tso=r(I5e," \u2014 "),HP=n(I5e,"A",{href:!0});var PQr=s(HP);Mso=r(PQr,"TransfoXLTokenizer"),PQr.forEach(t),Eso=r(I5e," (Transformer-XL model)"),I5e.forEach(t),Cso=i(S),ys=n(S,"LI",{});var b$=s(ys);lae=n(b$,"STRONG",{});var BQr=s(lae);wso=r(BQr,"visual_bert"),BQr.forEach(t),Aso=r(b$," \u2014 "),UP=n(b$,"A",{href:!0});var IQr=s(UP);yso=r(IQr,"BertTokenizer"),IQr.forEach(t),Lso=r(b$," or "),JP=n(b$,"A",{href:!0});var qQr=s(JP);xso=r(qQr,"BertTokenizerFast"),qQr.forEach(t),$so=r(b$," (VisualBert model)"),b$.forEach(t),kso=i(S),Hg=n(S,"LI",{});var q5e=s(Hg);iae=n(q5e,"STRONG",{});var NQr=s(iae);Sso=r(NQr,"wav2vec2"),NQr.forEach(t),Rso=r(q5e," \u2014 "),YP=n(q5e,"A",{href:!0});var jQr=s(YP);Pso=r(jQr,"Wav2Vec2CTCTokenizer"),jQr.forEach(t),Bso=r(q5e," (Wav2Vec2 model)"),q5e.forEach(t),Iso=i(S),Ug=n(S,"LI",{});var N5e=s(Ug);dae=n(N5e,"STRONG",{});var DQr=s(dae);qso=r(DQr,"wav2vec2-conformer"),DQr.forEach(t),Nso=r(N5e," \u2014 "),KP=n(N5e,"A",{href:!0});var GQr=s(KP);jso=r(GQr,"Wav2Vec2CTCTokenizer"),GQr.forEach(t),Dso=r(N5e," (Wav2Vec2-Conformer model)"),N5e.forEach(t),Gso=i(S),Jg=n(S,"LI",{});var j5e=s(Jg);cae=n(j5e,"STRONG",{});var OQr=s(cae);Oso=r(OQr,"wav2vec2_phoneme"),OQr.forEach(t),Vso=r(j5e," \u2014 "),ZP=n(j5e,"A",{href:!0});var VQr=s(ZP);Xso=r(VQr,"Wav2Vec2PhonemeCTCTokenizer"),VQr.forEach(t),zso=r(j5e," (Wav2Vec2Phoneme model)"),j5e.forEach(t),Wso=i(S),Ls=n(S,"LI",{});var v$=s(Ls);fae=n(v$,"STRONG",{});var XQr=s(fae);Qso=r(XQr,"xglm"),XQr.forEach(t),Hso=r(v$," \u2014 "),eB=n(v$,"A",{href:!0});var zQr=s(eB);Uso=r(zQr,"XGLMTokenizer"),zQr.forEach(t),Jso=r(v$," or "),oB=n(v$,"A",{href:!0});var WQr=s(oB);Yso=r(WQr,"XGLMTokenizerFast"),WQr.forEach(t),Kso=r(v$," (XGLM model)"),v$.forEach(t),Zso=i(S),Yg=n(S,"LI",{});var D5e=s(Yg);mae=n(D5e,"STRONG",{});var QQr=s(mae);elo=r(QQr,"xlm"),QQr.forEach(t),olo=r(D5e," \u2014 "),rB=n(D5e,"A",{href:!0});var HQr=s(rB);rlo=r(HQr,"XLMTokenizer"),HQr.forEach(t),tlo=r(D5e," (XLM model)"),D5e.forEach(t),alo=i(S),Kg=n(S,"LI",{});var G5e=s(Kg);gae=n(G5e,"STRONG",{});var UQr=s(gae);nlo=r(UQr,"xlm-prophetnet"),UQr.forEach(t),slo=r(G5e," \u2014 "),tB=n(G5e,"A",{href:!0});var JQr=s(tB);llo=r(JQr,"XLMProphetNetTokenizer"),JQr.forEach(t),ilo=r(G5e," (XLMProphetNet model)"),G5e.forEach(t),dlo=i(S),xs=n(S,"LI",{});var F$=s(xs);hae=n(F$,"STRONG",{});var YQr=s(hae);clo=r(YQr,"xlm-roberta"),YQr.forEach(t),flo=r(F$," \u2014 "),aB=n(F$,"A",{href:!0});var KQr=s(aB);mlo=r(KQr,"XLMRobertaTokenizer"),KQr.forEach(t),glo=r(F$," or "),nB=n(F$,"A",{href:!0});var ZQr=s(nB);hlo=r(ZQr,"XLMRobertaTokenizerFast"),ZQr.forEach(t),plo=r(F$," (XLM-RoBERTa model)"),F$.forEach(t),_lo=i(S),$s=n(S,"LI",{});var T$=s($s);pae=n(T$,"STRONG",{});var eHr=s(pae);ulo=r(eHr,"xlm-roberta-xl"),eHr.forEach(t),blo=r(T$," \u2014 "),sB=n(T$,"A",{href:!0});var oHr=s(sB);vlo=r(oHr,"RobertaTokenizer"),oHr.forEach(t),Flo=r(T$," or "),lB=n(T$,"A",{href:!0});var rHr=s(lB);Tlo=r(rHr,"RobertaTokenizerFast"),rHr.forEach(t),Mlo=r(T$," (XLM-RoBERTa-XL model)"),T$.forEach(t),Elo=i(S),ks=n(S,"LI",{});var M$=s(ks);_ae=n(M$,"STRONG",{});var tHr=s(_ae);Clo=r(tHr,"xlnet"),tHr.forEach(t),wlo=r(M$," \u2014 "),iB=n(M$,"A",{href:!0});var aHr=s(iB);Alo=r(aHr,"XLNetTokenizer"),aHr.forEach(t),ylo=r(M$," or "),dB=n(M$,"A",{href:!0});var nHr=s(dB);Llo=r(nHr,"XLNetTokenizerFast"),nHr.forEach(t),xlo=r(M$," (XLNet model)"),M$.forEach(t),$lo=i(S),Ss=n(S,"LI",{});var E$=s(Ss);uae=n(E$,"STRONG",{});var sHr=s(uae);klo=r(sHr,"yoso"),sHr.forEach(t),Slo=r(E$," \u2014 "),cB=n(E$,"A",{href:!0});var lHr=s(cB);Rlo=r(lHr,"AlbertTokenizer"),lHr.forEach(t),Plo=r(E$," or "),fB=n(E$,"A",{href:!0});var iHr=s(fB);Blo=r(iHr,"AlbertTokenizerFast"),iHr.forEach(t),Ilo=r(E$," (YOSO model)"),E$.forEach(t),S.forEach(t),qlo=i(qs),T(Zg.$$.fragment,qs),qs.forEach(t),Nlo=i(Is),eh=n(Is,"DIV",{class:!0});var zNe=s(eh);T(E0.$$.fragment,zNe),jlo=i(zNe),bae=n(zNe,"P",{});var dHr=s(bae);Dlo=r(dHr,"Register a new tokenizer in this mapping."),dHr.forEach(t),zNe.forEach(t),Is.forEach(t),WIe=i(f),Ti=n(f,"H2",{class:!0});var WNe=s(Ti);oh=n(WNe,"A",{id:!0,class:!0,href:!0});var cHr=s(oh);vae=n(cHr,"SPAN",{});var fHr=s(vae);T(C0.$$.fragment,fHr),fHr.forEach(t),cHr.forEach(t),Glo=i(WNe),Fae=n(WNe,"SPAN",{});var mHr=s(Fae);Olo=r(mHr,"AutoFeatureExtractor"),mHr.forEach(t),WNe.forEach(t),QIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(w0.$$.fragment,Ns),Vlo=i(Ns),A0=n(Ns,"P",{});var QNe=s(A0);Xlo=r(QNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),mB=n(QNe,"A",{href:!0});var gHr=s(mB);zlo=r(gHr,"AutoFeatureExtractor.from_pretrained()"),gHr.forEach(t),Wlo=r(QNe," class method."),QNe.forEach(t),Qlo=i(Ns),y0=n(Ns,"P",{});var HNe=s(y0);Hlo=r(HNe,"This class cannot be instantiated directly using "),Tae=n(HNe,"CODE",{});var hHr=s(Tae);Ulo=r(hHr,"__init__()"),hHr.forEach(t),Jlo=r(HNe," (throws an error)."),HNe.forEach(t),Ylo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(L0.$$.fragment,Zt),Klo=i(Zt),Mae=n(Zt,"P",{});var pHr=s(Mae);Zlo=r(pHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pHr.forEach(t),eio=i(Zt),ya=n(Zt,"P",{});var gw=s(ya);oio=r(gw,"The feature extractor class to instantiate is selected based on the "),Eae=n(gw,"CODE",{});var _Hr=s(Eae);rio=r(_Hr,"model_type"),_Hr.forEach(t),tio=r(gw,` property of the config object
(either passed as an argument or loaded from `),Cae=n(gw,"CODE",{});var uHr=s(Cae);aio=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),nio=r(gw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wae=n(gw,"CODE",{});var bHr=s(wae);sio=r(bHr,"pretrained_model_name_or_path"),bHr.forEach(t),lio=r(gw,":"),gw.forEach(t),iio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);rh=n(te,"LI",{});var O5e=s(rh);Aae=n(O5e,"STRONG",{});var vHr=s(Aae);dio=r(vHr,"beit"),vHr.forEach(t),cio=r(O5e," \u2014 "),gB=n(O5e,"A",{href:!0});var FHr=s(gB);fio=r(FHr,"BeitFeatureExtractor"),FHr.forEach(t),mio=r(O5e," (BEiT model)"),O5e.forEach(t),gio=i(te),th=n(te,"LI",{});var V5e=s(th);yae=n(V5e,"STRONG",{});var THr=s(yae);hio=r(THr,"clip"),THr.forEach(t),pio=r(V5e," \u2014 "),hB=n(V5e,"A",{href:!0});var MHr=s(hB);_io=r(MHr,"CLIPFeatureExtractor"),MHr.forEach(t),uio=r(V5e," (CLIP model)"),V5e.forEach(t),bio=i(te),ah=n(te,"LI",{});var X5e=s(ah);Lae=n(X5e,"STRONG",{});var EHr=s(Lae);vio=r(EHr,"convnext"),EHr.forEach(t),Fio=r(X5e," \u2014 "),pB=n(X5e,"A",{href:!0});var CHr=s(pB);Tio=r(CHr,"ConvNextFeatureExtractor"),CHr.forEach(t),Mio=r(X5e," (ConvNext model)"),X5e.forEach(t),Eio=i(te),nh=n(te,"LI",{});var z5e=s(nh);xae=n(z5e,"STRONG",{});var wHr=s(xae);Cio=r(wHr,"data2vec-audio"),wHr.forEach(t),wio=r(z5e," \u2014 "),_B=n(z5e,"A",{href:!0});var AHr=s(_B);Aio=r(AHr,"Wav2Vec2FeatureExtractor"),AHr.forEach(t),yio=r(z5e," (Data2VecAudio model)"),z5e.forEach(t),Lio=i(te),sh=n(te,"LI",{});var W5e=s(sh);$ae=n(W5e,"STRONG",{});var yHr=s($ae);xio=r(yHr,"data2vec-vision"),yHr.forEach(t),$io=r(W5e," \u2014 "),uB=n(W5e,"A",{href:!0});var LHr=s(uB);kio=r(LHr,"BeitFeatureExtractor"),LHr.forEach(t),Sio=r(W5e," (Data2VecVision model)"),W5e.forEach(t),Rio=i(te),lh=n(te,"LI",{});var Q5e=s(lh);kae=n(Q5e,"STRONG",{});var xHr=s(kae);Pio=r(xHr,"deit"),xHr.forEach(t),Bio=r(Q5e," \u2014 "),bB=n(Q5e,"A",{href:!0});var $Hr=s(bB);Iio=r($Hr,"DeiTFeatureExtractor"),$Hr.forEach(t),qio=r(Q5e," (DeiT model)"),Q5e.forEach(t),Nio=i(te),ih=n(te,"LI",{});var H5e=s(ih);Sae=n(H5e,"STRONG",{});var kHr=s(Sae);jio=r(kHr,"detr"),kHr.forEach(t),Dio=r(H5e," \u2014 "),vB=n(H5e,"A",{href:!0});var SHr=s(vB);Gio=r(SHr,"DetrFeatureExtractor"),SHr.forEach(t),Oio=r(H5e," (DETR model)"),H5e.forEach(t),Vio=i(te),dh=n(te,"LI",{});var U5e=s(dh);Rae=n(U5e,"STRONG",{});var RHr=s(Rae);Xio=r(RHr,"dpt"),RHr.forEach(t),zio=r(U5e," \u2014 "),FB=n(U5e,"A",{href:!0});var PHr=s(FB);Wio=r(PHr,"DPTFeatureExtractor"),PHr.forEach(t),Qio=r(U5e," (DPT model)"),U5e.forEach(t),Hio=i(te),ch=n(te,"LI",{});var J5e=s(ch);Pae=n(J5e,"STRONG",{});var BHr=s(Pae);Uio=r(BHr,"flava"),BHr.forEach(t),Jio=r(J5e," \u2014 "),TB=n(J5e,"A",{href:!0});var IHr=s(TB);Yio=r(IHr,"FlavaFeatureExtractor"),IHr.forEach(t),Kio=r(J5e," (Flava model)"),J5e.forEach(t),Zio=i(te),fh=n(te,"LI",{});var Y5e=s(fh);Bae=n(Y5e,"STRONG",{});var qHr=s(Bae);edo=r(qHr,"glpn"),qHr.forEach(t),odo=r(Y5e," \u2014 "),MB=n(Y5e,"A",{href:!0});var NHr=s(MB);rdo=r(NHr,"GLPNFeatureExtractor"),NHr.forEach(t),tdo=r(Y5e," (GLPN model)"),Y5e.forEach(t),ado=i(te),mh=n(te,"LI",{});var K5e=s(mh);Iae=n(K5e,"STRONG",{});var jHr=s(Iae);ndo=r(jHr,"hubert"),jHr.forEach(t),sdo=r(K5e," \u2014 "),EB=n(K5e,"A",{href:!0});var DHr=s(EB);ldo=r(DHr,"Wav2Vec2FeatureExtractor"),DHr.forEach(t),ido=r(K5e," (Hubert model)"),K5e.forEach(t),ddo=i(te),gh=n(te,"LI",{});var Z5e=s(gh);qae=n(Z5e,"STRONG",{});var GHr=s(qae);cdo=r(GHr,"layoutlmv2"),GHr.forEach(t),fdo=r(Z5e," \u2014 "),CB=n(Z5e,"A",{href:!0});var OHr=s(CB);mdo=r(OHr,"LayoutLMv2FeatureExtractor"),OHr.forEach(t),gdo=r(Z5e," (LayoutLMv2 model)"),Z5e.forEach(t),hdo=i(te),hh=n(te,"LI",{});var ewe=s(hh);Nae=n(ewe,"STRONG",{});var VHr=s(Nae);pdo=r(VHr,"maskformer"),VHr.forEach(t),_do=r(ewe," \u2014 "),wB=n(ewe,"A",{href:!0});var XHr=s(wB);udo=r(XHr,"MaskFormerFeatureExtractor"),XHr.forEach(t),bdo=r(ewe," (MaskFormer model)"),ewe.forEach(t),vdo=i(te),ph=n(te,"LI",{});var owe=s(ph);jae=n(owe,"STRONG",{});var zHr=s(jae);Fdo=r(zHr,"perceiver"),zHr.forEach(t),Tdo=r(owe," \u2014 "),AB=n(owe,"A",{href:!0});var WHr=s(AB);Mdo=r(WHr,"PerceiverFeatureExtractor"),WHr.forEach(t),Edo=r(owe," (Perceiver model)"),owe.forEach(t),Cdo=i(te),_h=n(te,"LI",{});var rwe=s(_h);Dae=n(rwe,"STRONG",{});var QHr=s(Dae);wdo=r(QHr,"poolformer"),QHr.forEach(t),Ado=r(rwe," \u2014 "),yB=n(rwe,"A",{href:!0});var HHr=s(yB);ydo=r(HHr,"PoolFormerFeatureExtractor"),HHr.forEach(t),Ldo=r(rwe," (PoolFormer model)"),rwe.forEach(t),xdo=i(te),uh=n(te,"LI",{});var twe=s(uh);Gae=n(twe,"STRONG",{});var UHr=s(Gae);$do=r(UHr,"regnet"),UHr.forEach(t),kdo=r(twe," \u2014 "),LB=n(twe,"A",{href:!0});var JHr=s(LB);Sdo=r(JHr,"ConvNextFeatureExtractor"),JHr.forEach(t),Rdo=r(twe," (RegNet model)"),twe.forEach(t),Pdo=i(te),bh=n(te,"LI",{});var awe=s(bh);Oae=n(awe,"STRONG",{});var YHr=s(Oae);Bdo=r(YHr,"resnet"),YHr.forEach(t),Ido=r(awe," \u2014 "),xB=n(awe,"A",{href:!0});var KHr=s(xB);qdo=r(KHr,"ConvNextFeatureExtractor"),KHr.forEach(t),Ndo=r(awe," (ResNet model)"),awe.forEach(t),jdo=i(te),vh=n(te,"LI",{});var nwe=s(vh);Vae=n(nwe,"STRONG",{});var ZHr=s(Vae);Ddo=r(ZHr,"segformer"),ZHr.forEach(t),Gdo=r(nwe," \u2014 "),$B=n(nwe,"A",{href:!0});var eUr=s($B);Odo=r(eUr,"SegformerFeatureExtractor"),eUr.forEach(t),Vdo=r(nwe," (SegFormer model)"),nwe.forEach(t),Xdo=i(te),Fh=n(te,"LI",{});var swe=s(Fh);Xae=n(swe,"STRONG",{});var oUr=s(Xae);zdo=r(oUr,"speech_to_text"),oUr.forEach(t),Wdo=r(swe," \u2014 "),kB=n(swe,"A",{href:!0});var rUr=s(kB);Qdo=r(rUr,"Speech2TextFeatureExtractor"),rUr.forEach(t),Hdo=r(swe," (Speech2Text model)"),swe.forEach(t),Udo=i(te),Th=n(te,"LI",{});var lwe=s(Th);zae=n(lwe,"STRONG",{});var tUr=s(zae);Jdo=r(tUr,"swin"),tUr.forEach(t),Ydo=r(lwe," \u2014 "),SB=n(lwe,"A",{href:!0});var aUr=s(SB);Kdo=r(aUr,"ViTFeatureExtractor"),aUr.forEach(t),Zdo=r(lwe," (Swin model)"),lwe.forEach(t),eco=i(te),Mh=n(te,"LI",{});var iwe=s(Mh);Wae=n(iwe,"STRONG",{});var nUr=s(Wae);oco=r(nUr,"van"),nUr.forEach(t),rco=r(iwe," \u2014 "),RB=n(iwe,"A",{href:!0});var sUr=s(RB);tco=r(sUr,"ConvNextFeatureExtractor"),sUr.forEach(t),aco=r(iwe," (VAN model)"),iwe.forEach(t),nco=i(te),Eh=n(te,"LI",{});var dwe=s(Eh);Qae=n(dwe,"STRONG",{});var lUr=s(Qae);sco=r(lUr,"vit"),lUr.forEach(t),lco=r(dwe," \u2014 "),PB=n(dwe,"A",{href:!0});var iUr=s(PB);ico=r(iUr,"ViTFeatureExtractor"),iUr.forEach(t),dco=r(dwe," (ViT model)"),dwe.forEach(t),cco=i(te),Ch=n(te,"LI",{});var cwe=s(Ch);Hae=n(cwe,"STRONG",{});var dUr=s(Hae);fco=r(dUr,"vit_mae"),dUr.forEach(t),mco=r(cwe," \u2014 "),BB=n(cwe,"A",{href:!0});var cUr=s(BB);gco=r(cUr,"ViTFeatureExtractor"),cUr.forEach(t),hco=r(cwe," (ViTMAE model)"),cwe.forEach(t),pco=i(te),wh=n(te,"LI",{});var fwe=s(wh);Uae=n(fwe,"STRONG",{});var fUr=s(Uae);_co=r(fUr,"wav2vec2"),fUr.forEach(t),uco=r(fwe," \u2014 "),IB=n(fwe,"A",{href:!0});var mUr=s(IB);bco=r(mUr,"Wav2Vec2FeatureExtractor"),mUr.forEach(t),vco=r(fwe," (Wav2Vec2 model)"),fwe.forEach(t),Fco=i(te),Ah=n(te,"LI",{});var mwe=s(Ah);Jae=n(mwe,"STRONG",{});var gUr=s(Jae);Tco=r(gUr,"wav2vec2-conformer"),gUr.forEach(t),Mco=r(mwe," \u2014 "),qB=n(mwe,"A",{href:!0});var hUr=s(qB);Eco=r(hUr,"Wav2Vec2FeatureExtractor"),hUr.forEach(t),Cco=r(mwe," (Wav2Vec2-Conformer model)"),mwe.forEach(t),wco=i(te),yh=n(te,"LI",{});var gwe=s(yh);Yae=n(gwe,"STRONG",{});var pUr=s(Yae);Aco=r(pUr,"yolos"),pUr.forEach(t),yco=r(gwe," \u2014 "),NB=n(gwe,"A",{href:!0});var _Ur=s(NB);Lco=r(_Ur,"YolosFeatureExtractor"),_Ur.forEach(t),xco=r(gwe," (YOLOS model)"),gwe.forEach(t),te.forEach(t),$co=i(Zt),T(Lh.$$.fragment,Zt),kco=i(Zt),T(xh.$$.fragment,Zt),Zt.forEach(t),Sco=i(Ns),$h=n(Ns,"DIV",{class:!0});var UNe=s($h);T(x0.$$.fragment,UNe),Rco=i(UNe),Kae=n(UNe,"P",{});var uUr=s(Kae);Pco=r(uUr,"Register a new feature extractor for this class."),uUr.forEach(t),UNe.forEach(t),Ns.forEach(t),HIe=i(f),Mi=n(f,"H2",{class:!0});var JNe=s(Mi);kh=n(JNe,"A",{id:!0,class:!0,href:!0});var bUr=s(kh);Zae=n(bUr,"SPAN",{});var vUr=s(Zae);T($0.$$.fragment,vUr),vUr.forEach(t),bUr.forEach(t),Bco=i(JNe),ene=n(JNe,"SPAN",{});var FUr=s(ene);Ico=r(FUr,"AutoProcessor"),FUr.forEach(t),JNe.forEach(t),UIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(k0.$$.fragment,js),qco=i(js),S0=n(js,"P",{});var YNe=s(S0);Nco=r(YNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jB=n(YNe,"A",{href:!0});var TUr=s(jB);jco=r(TUr,"AutoProcessor.from_pretrained()"),TUr.forEach(t),Dco=r(YNe," class method."),YNe.forEach(t),Gco=i(js),R0=n(js,"P",{});var KNe=s(R0);Oco=r(KNe,"This class cannot be instantiated directly using "),one=n(KNe,"CODE",{});var MUr=s(one);Vco=r(MUr,"__init__()"),MUr.forEach(t),Xco=r(KNe," (throws an error)."),KNe.forEach(t),zco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(P0.$$.fragment,ea),Wco=i(ea),rne=n(ea,"P",{});var EUr=s(rne);Qco=r(EUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),EUr.forEach(t),Hco=i(ea),Ei=n(ea,"P",{});var SK=s(Ei);Uco=r(SK,"The processor class to instantiate is selected based on the "),tne=n(SK,"CODE",{});var CUr=s(tne);Jco=r(CUr,"model_type"),CUr.forEach(t),Yco=r(SK,` property of the config object (either
passed as an argument or loaded from `),ane=n(SK,"CODE",{});var wUr=s(ane);Kco=r(wUr,"pretrained_model_name_or_path"),wUr.forEach(t),Zco=r(SK," if possible):"),SK.forEach(t),efo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Sh=n(be,"LI",{});var hwe=s(Sh);nne=n(hwe,"STRONG",{});var AUr=s(nne);ofo=r(AUr,"clip"),AUr.forEach(t),rfo=r(hwe," \u2014 "),DB=n(hwe,"A",{href:!0});var yUr=s(DB);tfo=r(yUr,"CLIPProcessor"),yUr.forEach(t),afo=r(hwe," (CLIP model)"),hwe.forEach(t),nfo=i(be),Rh=n(be,"LI",{});var pwe=s(Rh);sne=n(pwe,"STRONG",{});var LUr=s(sne);sfo=r(LUr,"flava"),LUr.forEach(t),lfo=r(pwe," \u2014 "),lne=n(pwe,"CODE",{});var xUr=s(lne);ifo=r(xUr,"FLAVAProcessor"),xUr.forEach(t),dfo=r(pwe," (Flava model)"),pwe.forEach(t),cfo=i(be),Ph=n(be,"LI",{});var _we=s(Ph);ine=n(_we,"STRONG",{});var $Ur=s(ine);ffo=r($Ur,"layoutlmv2"),$Ur.forEach(t),mfo=r(_we," \u2014 "),GB=n(_we,"A",{href:!0});var kUr=s(GB);gfo=r(kUr,"LayoutLMv2Processor"),kUr.forEach(t),hfo=r(_we," (LayoutLMv2 model)"),_we.forEach(t),pfo=i(be),Bh=n(be,"LI",{});var uwe=s(Bh);dne=n(uwe,"STRONG",{});var SUr=s(dne);_fo=r(SUr,"layoutxlm"),SUr.forEach(t),ufo=r(uwe," \u2014 "),OB=n(uwe,"A",{href:!0});var RUr=s(OB);bfo=r(RUr,"LayoutXLMProcessor"),RUr.forEach(t),vfo=r(uwe," (LayoutXLM model)"),uwe.forEach(t),Ffo=i(be),Ih=n(be,"LI",{});var bwe=s(Ih);cne=n(bwe,"STRONG",{});var PUr=s(cne);Tfo=r(PUr,"sew"),PUr.forEach(t),Mfo=r(bwe," \u2014 "),VB=n(bwe,"A",{href:!0});var BUr=s(VB);Efo=r(BUr,"Wav2Vec2Processor"),BUr.forEach(t),Cfo=r(bwe," (SEW model)"),bwe.forEach(t),wfo=i(be),qh=n(be,"LI",{});var vwe=s(qh);fne=n(vwe,"STRONG",{});var IUr=s(fne);Afo=r(IUr,"sew-d"),IUr.forEach(t),yfo=r(vwe," \u2014 "),XB=n(vwe,"A",{href:!0});var qUr=s(XB);Lfo=r(qUr,"Wav2Vec2Processor"),qUr.forEach(t),xfo=r(vwe," (SEW-D model)"),vwe.forEach(t),$fo=i(be),Nh=n(be,"LI",{});var Fwe=s(Nh);mne=n(Fwe,"STRONG",{});var NUr=s(mne);kfo=r(NUr,"speech_to_text"),NUr.forEach(t),Sfo=r(Fwe," \u2014 "),zB=n(Fwe,"A",{href:!0});var jUr=s(zB);Rfo=r(jUr,"Speech2TextProcessor"),jUr.forEach(t),Pfo=r(Fwe," (Speech2Text model)"),Fwe.forEach(t),Bfo=i(be),jh=n(be,"LI",{});var Twe=s(jh);gne=n(Twe,"STRONG",{});var DUr=s(gne);Ifo=r(DUr,"speech_to_text_2"),DUr.forEach(t),qfo=r(Twe," \u2014 "),WB=n(Twe,"A",{href:!0});var GUr=s(WB);Nfo=r(GUr,"Speech2Text2Processor"),GUr.forEach(t),jfo=r(Twe," (Speech2Text2 model)"),Twe.forEach(t),Dfo=i(be),Dh=n(be,"LI",{});var Mwe=s(Dh);hne=n(Mwe,"STRONG",{});var OUr=s(hne);Gfo=r(OUr,"trocr"),OUr.forEach(t),Ofo=r(Mwe," \u2014 "),QB=n(Mwe,"A",{href:!0});var VUr=s(QB);Vfo=r(VUr,"TrOCRProcessor"),VUr.forEach(t),Xfo=r(Mwe," (TrOCR model)"),Mwe.forEach(t),zfo=i(be),Gh=n(be,"LI",{});var Ewe=s(Gh);pne=n(Ewe,"STRONG",{});var XUr=s(pne);Wfo=r(XUr,"unispeech"),XUr.forEach(t),Qfo=r(Ewe," \u2014 "),HB=n(Ewe,"A",{href:!0});var zUr=s(HB);Hfo=r(zUr,"Wav2Vec2Processor"),zUr.forEach(t),Ufo=r(Ewe," (UniSpeech model)"),Ewe.forEach(t),Jfo=i(be),Oh=n(be,"LI",{});var Cwe=s(Oh);_ne=n(Cwe,"STRONG",{});var WUr=s(_ne);Yfo=r(WUr,"unispeech-sat"),WUr.forEach(t),Kfo=r(Cwe," \u2014 "),UB=n(Cwe,"A",{href:!0});var QUr=s(UB);Zfo=r(QUr,"Wav2Vec2Processor"),QUr.forEach(t),emo=r(Cwe," (UniSpeechSat model)"),Cwe.forEach(t),omo=i(be),Vh=n(be,"LI",{});var wwe=s(Vh);une=n(wwe,"STRONG",{});var HUr=s(une);rmo=r(HUr,"vilt"),HUr.forEach(t),tmo=r(wwe," \u2014 "),JB=n(wwe,"A",{href:!0});var UUr=s(JB);amo=r(UUr,"ViltProcessor"),UUr.forEach(t),nmo=r(wwe," (ViLT model)"),wwe.forEach(t),smo=i(be),Xh=n(be,"LI",{});var Awe=s(Xh);bne=n(Awe,"STRONG",{});var JUr=s(bne);lmo=r(JUr,"vision-text-dual-encoder"),JUr.forEach(t),imo=r(Awe," \u2014 "),YB=n(Awe,"A",{href:!0});var YUr=s(YB);dmo=r(YUr,"VisionTextDualEncoderProcessor"),YUr.forEach(t),cmo=r(Awe," (VisionTextDualEncoder model)"),Awe.forEach(t),fmo=i(be),zh=n(be,"LI",{});var ywe=s(zh);vne=n(ywe,"STRONG",{});var KUr=s(vne);mmo=r(KUr,"wav2vec2"),KUr.forEach(t),gmo=r(ywe," \u2014 "),KB=n(ywe,"A",{href:!0});var ZUr=s(KB);hmo=r(ZUr,"Wav2Vec2Processor"),ZUr.forEach(t),pmo=r(ywe," (Wav2Vec2 model)"),ywe.forEach(t),_mo=i(be),Wh=n(be,"LI",{});var Lwe=s(Wh);Fne=n(Lwe,"STRONG",{});var eJr=s(Fne);umo=r(eJr,"wav2vec2-conformer"),eJr.forEach(t),bmo=r(Lwe," \u2014 "),ZB=n(Lwe,"A",{href:!0});var oJr=s(ZB);vmo=r(oJr,"Wav2Vec2Processor"),oJr.forEach(t),Fmo=r(Lwe," (Wav2Vec2-Conformer model)"),Lwe.forEach(t),Tmo=i(be),Qh=n(be,"LI",{});var xwe=s(Qh);Tne=n(xwe,"STRONG",{});var rJr=s(Tne);Mmo=r(rJr,"wavlm"),rJr.forEach(t),Emo=r(xwe," \u2014 "),eI=n(xwe,"A",{href:!0});var tJr=s(eI);Cmo=r(tJr,"Wav2Vec2Processor"),tJr.forEach(t),wmo=r(xwe," (WavLM model)"),xwe.forEach(t),be.forEach(t),Amo=i(ea),T(Hh.$$.fragment,ea),ymo=i(ea),T(Uh.$$.fragment,ea),ea.forEach(t),Lmo=i(js),Jh=n(js,"DIV",{class:!0});var ZNe=s(Jh);T(B0.$$.fragment,ZNe),xmo=i(ZNe),Mne=n(ZNe,"P",{});var aJr=s(Mne);$mo=r(aJr,"Register a new processor for this class."),aJr.forEach(t),ZNe.forEach(t),js.forEach(t),JIe=i(f),Ci=n(f,"H2",{class:!0});var eje=s(Ci);Yh=n(eje,"A",{id:!0,class:!0,href:!0});var nJr=s(Yh);Ene=n(nJr,"SPAN",{});var sJr=s(Ene);T(I0.$$.fragment,sJr),sJr.forEach(t),nJr.forEach(t),kmo=i(eje),Cne=n(eje,"SPAN",{});var lJr=s(Cne);Smo=r(lJr,"AutoModel"),lJr.forEach(t),eje.forEach(t),YIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(q0.$$.fragment,Ds),Rmo=i(Ds),wi=n(Ds,"P",{});var RK=s(wi);Pmo=r(RK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oI=n(RK,"A",{href:!0});var iJr=s(oI);Bmo=r(iJr,"from_pretrained()"),iJr.forEach(t),Imo=r(RK," class method or the "),rI=n(RK,"A",{href:!0});var dJr=s(rI);qmo=r(dJr,"from_config()"),dJr.forEach(t),Nmo=r(RK,` class
method.`),RK.forEach(t),jmo=i(Ds),N0=n(Ds,"P",{});var oje=s(N0);Dmo=r(oje,"This class cannot be instantiated directly using "),wne=n(oje,"CODE",{});var cJr=s(wne);Gmo=r(cJr,"__init__()"),cJr.forEach(t),Omo=r(oje," (throws an error)."),oje.forEach(t),Vmo=i(Ds),tt=n(Ds,"DIV",{class:!0});var hw=s(tt);T(j0.$$.fragment,hw),Xmo=i(hw),Ane=n(hw,"P",{});var fJr=s(Ane);zmo=r(fJr,"Instantiates one of the base model classes of the library from a configuration."),fJr.forEach(t),Wmo=i(hw),Ai=n(hw,"P",{});var PK=s(Ai);Qmo=r(PK,`Note:
Loading a model from its configuration file does `),yne=n(PK,"STRONG",{});var mJr=s(yne);Hmo=r(mJr,"not"),mJr.forEach(t),Umo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tI=n(PK,"A",{href:!0});var gJr=s(tI);Jmo=r(gJr,"from_pretrained()"),gJr.forEach(t),Ymo=r(PK," to load the model weights."),PK.forEach(t),Kmo=i(hw),T(Kh.$$.fragment,hw),hw.forEach(t),Zmo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(D0.$$.fragment,oa),ego=i(oa),Lne=n(oa,"P",{});var hJr=s(Lne);ogo=r(hJr,"Instantiate one of the base model classes of the library from a pretrained model."),hJr.forEach(t),rgo=i(oa),La=n(oa,"P",{});var pw=s(La);tgo=r(pw,"The model class to instantiate is selected based on the "),xne=n(pw,"CODE",{});var pJr=s(xne);ago=r(pJr,"model_type"),pJr.forEach(t),ngo=r(pw,` property of the config object (either
passed as an argument or loaded from `),$ne=n(pw,"CODE",{});var _Jr=s($ne);sgo=r(_Jr,"pretrained_model_name_or_path"),_Jr.forEach(t),lgo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(pw,"CODE",{});var uJr=s(kne);igo=r(uJr,"pretrained_model_name_or_path"),uJr.forEach(t),dgo=r(pw,":"),pw.forEach(t),cgo=i(oa),x=n(oa,"UL",{});var $=s(x);Zh=n($,"LI",{});var $we=s(Zh);Sne=n($we,"STRONG",{});var bJr=s(Sne);fgo=r(bJr,"albert"),bJr.forEach(t),mgo=r($we," \u2014 "),aI=n($we,"A",{href:!0});var vJr=s(aI);ggo=r(vJr,"AlbertModel"),vJr.forEach(t),hgo=r($we," (ALBERT model)"),$we.forEach(t),pgo=i($),ep=n($,"LI",{});var kwe=s(ep);Rne=n(kwe,"STRONG",{});var FJr=s(Rne);_go=r(FJr,"bart"),FJr.forEach(t),ugo=r(kwe," \u2014 "),nI=n(kwe,"A",{href:!0});var TJr=s(nI);bgo=r(TJr,"BartModel"),TJr.forEach(t),vgo=r(kwe," (BART model)"),kwe.forEach(t),Fgo=i($),op=n($,"LI",{});var Swe=s(op);Pne=n(Swe,"STRONG",{});var MJr=s(Pne);Tgo=r(MJr,"beit"),MJr.forEach(t),Mgo=r(Swe," \u2014 "),sI=n(Swe,"A",{href:!0});var EJr=s(sI);Ego=r(EJr,"BeitModel"),EJr.forEach(t),Cgo=r(Swe," (BEiT model)"),Swe.forEach(t),wgo=i($),rp=n($,"LI",{});var Rwe=s(rp);Bne=n(Rwe,"STRONG",{});var CJr=s(Bne);Ago=r(CJr,"bert"),CJr.forEach(t),ygo=r(Rwe," \u2014 "),lI=n(Rwe,"A",{href:!0});var wJr=s(lI);Lgo=r(wJr,"BertModel"),wJr.forEach(t),xgo=r(Rwe," (BERT model)"),Rwe.forEach(t),$go=i($),tp=n($,"LI",{});var Pwe=s(tp);Ine=n(Pwe,"STRONG",{});var AJr=s(Ine);kgo=r(AJr,"bert-generation"),AJr.forEach(t),Sgo=r(Pwe," \u2014 "),iI=n(Pwe,"A",{href:!0});var yJr=s(iI);Rgo=r(yJr,"BertGenerationEncoder"),yJr.forEach(t),Pgo=r(Pwe," (Bert Generation model)"),Pwe.forEach(t),Bgo=i($),ap=n($,"LI",{});var Bwe=s(ap);qne=n(Bwe,"STRONG",{});var LJr=s(qne);Igo=r(LJr,"big_bird"),LJr.forEach(t),qgo=r(Bwe," \u2014 "),dI=n(Bwe,"A",{href:!0});var xJr=s(dI);Ngo=r(xJr,"BigBirdModel"),xJr.forEach(t),jgo=r(Bwe," (BigBird model)"),Bwe.forEach(t),Dgo=i($),np=n($,"LI",{});var Iwe=s(np);Nne=n(Iwe,"STRONG",{});var $Jr=s(Nne);Ggo=r($Jr,"bigbird_pegasus"),$Jr.forEach(t),Ogo=r(Iwe," \u2014 "),cI=n(Iwe,"A",{href:!0});var kJr=s(cI);Vgo=r(kJr,"BigBirdPegasusModel"),kJr.forEach(t),Xgo=r(Iwe," (BigBirdPegasus model)"),Iwe.forEach(t),zgo=i($),sp=n($,"LI",{});var qwe=s(sp);jne=n(qwe,"STRONG",{});var SJr=s(jne);Wgo=r(SJr,"blenderbot"),SJr.forEach(t),Qgo=r(qwe," \u2014 "),fI=n(qwe,"A",{href:!0});var RJr=s(fI);Hgo=r(RJr,"BlenderbotModel"),RJr.forEach(t),Ugo=r(qwe," (Blenderbot model)"),qwe.forEach(t),Jgo=i($),lp=n($,"LI",{});var Nwe=s(lp);Dne=n(Nwe,"STRONG",{});var PJr=s(Dne);Ygo=r(PJr,"blenderbot-small"),PJr.forEach(t),Kgo=r(Nwe," \u2014 "),mI=n(Nwe,"A",{href:!0});var BJr=s(mI);Zgo=r(BJr,"BlenderbotSmallModel"),BJr.forEach(t),eho=r(Nwe," (BlenderbotSmall model)"),Nwe.forEach(t),oho=i($),ip=n($,"LI",{});var jwe=s(ip);Gne=n(jwe,"STRONG",{});var IJr=s(Gne);rho=r(IJr,"camembert"),IJr.forEach(t),tho=r(jwe," \u2014 "),gI=n(jwe,"A",{href:!0});var qJr=s(gI);aho=r(qJr,"CamembertModel"),qJr.forEach(t),nho=r(jwe," (CamemBERT model)"),jwe.forEach(t),sho=i($),dp=n($,"LI",{});var Dwe=s(dp);One=n(Dwe,"STRONG",{});var NJr=s(One);lho=r(NJr,"canine"),NJr.forEach(t),iho=r(Dwe," \u2014 "),hI=n(Dwe,"A",{href:!0});var jJr=s(hI);dho=r(jJr,"CanineModel"),jJr.forEach(t),cho=r(Dwe," (Canine model)"),Dwe.forEach(t),fho=i($),cp=n($,"LI",{});var Gwe=s(cp);Vne=n(Gwe,"STRONG",{});var DJr=s(Vne);mho=r(DJr,"clip"),DJr.forEach(t),gho=r(Gwe," \u2014 "),pI=n(Gwe,"A",{href:!0});var GJr=s(pI);hho=r(GJr,"CLIPModel"),GJr.forEach(t),pho=r(Gwe," (CLIP model)"),Gwe.forEach(t),_ho=i($),fp=n($,"LI",{});var Owe=s(fp);Xne=n(Owe,"STRONG",{});var OJr=s(Xne);uho=r(OJr,"convbert"),OJr.forEach(t),bho=r(Owe," \u2014 "),_I=n(Owe,"A",{href:!0});var VJr=s(_I);vho=r(VJr,"ConvBertModel"),VJr.forEach(t),Fho=r(Owe," (ConvBERT model)"),Owe.forEach(t),Tho=i($),mp=n($,"LI",{});var Vwe=s(mp);zne=n(Vwe,"STRONG",{});var XJr=s(zne);Mho=r(XJr,"convnext"),XJr.forEach(t),Eho=r(Vwe," \u2014 "),uI=n(Vwe,"A",{href:!0});var zJr=s(uI);Cho=r(zJr,"ConvNextModel"),zJr.forEach(t),who=r(Vwe," (ConvNext model)"),Vwe.forEach(t),Aho=i($),gp=n($,"LI",{});var Xwe=s(gp);Wne=n(Xwe,"STRONG",{});var WJr=s(Wne);yho=r(WJr,"ctrl"),WJr.forEach(t),Lho=r(Xwe," \u2014 "),bI=n(Xwe,"A",{href:!0});var QJr=s(bI);xho=r(QJr,"CTRLModel"),QJr.forEach(t),$ho=r(Xwe," (CTRL model)"),Xwe.forEach(t),kho=i($),hp=n($,"LI",{});var zwe=s(hp);Qne=n(zwe,"STRONG",{});var HJr=s(Qne);Sho=r(HJr,"data2vec-audio"),HJr.forEach(t),Rho=r(zwe," \u2014 "),vI=n(zwe,"A",{href:!0});var UJr=s(vI);Pho=r(UJr,"Data2VecAudioModel"),UJr.forEach(t),Bho=r(zwe," (Data2VecAudio model)"),zwe.forEach(t),Iho=i($),pp=n($,"LI",{});var Wwe=s(pp);Hne=n(Wwe,"STRONG",{});var JJr=s(Hne);qho=r(JJr,"data2vec-text"),JJr.forEach(t),Nho=r(Wwe," \u2014 "),FI=n(Wwe,"A",{href:!0});var YJr=s(FI);jho=r(YJr,"Data2VecTextModel"),YJr.forEach(t),Dho=r(Wwe," (Data2VecText model)"),Wwe.forEach(t),Gho=i($),_p=n($,"LI",{});var Qwe=s(_p);Une=n(Qwe,"STRONG",{});var KJr=s(Une);Oho=r(KJr,"data2vec-vision"),KJr.forEach(t),Vho=r(Qwe," \u2014 "),TI=n(Qwe,"A",{href:!0});var ZJr=s(TI);Xho=r(ZJr,"Data2VecVisionModel"),ZJr.forEach(t),zho=r(Qwe," (Data2VecVision model)"),Qwe.forEach(t),Who=i($),up=n($,"LI",{});var Hwe=s(up);Jne=n(Hwe,"STRONG",{});var eYr=s(Jne);Qho=r(eYr,"deberta"),eYr.forEach(t),Hho=r(Hwe," \u2014 "),MI=n(Hwe,"A",{href:!0});var oYr=s(MI);Uho=r(oYr,"DebertaModel"),oYr.forEach(t),Jho=r(Hwe," (DeBERTa model)"),Hwe.forEach(t),Yho=i($),bp=n($,"LI",{});var Uwe=s(bp);Yne=n(Uwe,"STRONG",{});var rYr=s(Yne);Kho=r(rYr,"deberta-v2"),rYr.forEach(t),Zho=r(Uwe," \u2014 "),EI=n(Uwe,"A",{href:!0});var tYr=s(EI);epo=r(tYr,"DebertaV2Model"),tYr.forEach(t),opo=r(Uwe," (DeBERTa-v2 model)"),Uwe.forEach(t),rpo=i($),vp=n($,"LI",{});var Jwe=s(vp);Kne=n(Jwe,"STRONG",{});var aYr=s(Kne);tpo=r(aYr,"decision_transformer"),aYr.forEach(t),apo=r(Jwe," \u2014 "),CI=n(Jwe,"A",{href:!0});var nYr=s(CI);npo=r(nYr,"DecisionTransformerModel"),nYr.forEach(t),spo=r(Jwe," (Decision Transformer model)"),Jwe.forEach(t),lpo=i($),Fp=n($,"LI",{});var Ywe=s(Fp);Zne=n(Ywe,"STRONG",{});var sYr=s(Zne);ipo=r(sYr,"deit"),sYr.forEach(t),dpo=r(Ywe," \u2014 "),wI=n(Ywe,"A",{href:!0});var lYr=s(wI);cpo=r(lYr,"DeiTModel"),lYr.forEach(t),fpo=r(Ywe," (DeiT model)"),Ywe.forEach(t),mpo=i($),Tp=n($,"LI",{});var Kwe=s(Tp);ese=n(Kwe,"STRONG",{});var iYr=s(ese);gpo=r(iYr,"detr"),iYr.forEach(t),hpo=r(Kwe," \u2014 "),AI=n(Kwe,"A",{href:!0});var dYr=s(AI);ppo=r(dYr,"DetrModel"),dYr.forEach(t),_po=r(Kwe," (DETR model)"),Kwe.forEach(t),upo=i($),Mp=n($,"LI",{});var Zwe=s(Mp);ose=n(Zwe,"STRONG",{});var cYr=s(ose);bpo=r(cYr,"distilbert"),cYr.forEach(t),vpo=r(Zwe," \u2014 "),yI=n(Zwe,"A",{href:!0});var fYr=s(yI);Fpo=r(fYr,"DistilBertModel"),fYr.forEach(t),Tpo=r(Zwe," (DistilBERT model)"),Zwe.forEach(t),Mpo=i($),Ep=n($,"LI",{});var eAe=s(Ep);rse=n(eAe,"STRONG",{});var mYr=s(rse);Epo=r(mYr,"dpr"),mYr.forEach(t),Cpo=r(eAe," \u2014 "),LI=n(eAe,"A",{href:!0});var gYr=s(LI);wpo=r(gYr,"DPRQuestionEncoder"),gYr.forEach(t),Apo=r(eAe," (DPR model)"),eAe.forEach(t),ypo=i($),Cp=n($,"LI",{});var oAe=s(Cp);tse=n(oAe,"STRONG",{});var hYr=s(tse);Lpo=r(hYr,"dpt"),hYr.forEach(t),xpo=r(oAe," \u2014 "),xI=n(oAe,"A",{href:!0});var pYr=s(xI);$po=r(pYr,"DPTModel"),pYr.forEach(t),kpo=r(oAe," (DPT model)"),oAe.forEach(t),Spo=i($),wp=n($,"LI",{});var rAe=s(wp);ase=n(rAe,"STRONG",{});var _Yr=s(ase);Rpo=r(_Yr,"electra"),_Yr.forEach(t),Ppo=r(rAe," \u2014 "),$I=n(rAe,"A",{href:!0});var uYr=s($I);Bpo=r(uYr,"ElectraModel"),uYr.forEach(t),Ipo=r(rAe," (ELECTRA model)"),rAe.forEach(t),qpo=i($),Ap=n($,"LI",{});var tAe=s(Ap);nse=n(tAe,"STRONG",{});var bYr=s(nse);Npo=r(bYr,"flaubert"),bYr.forEach(t),jpo=r(tAe," \u2014 "),kI=n(tAe,"A",{href:!0});var vYr=s(kI);Dpo=r(vYr,"FlaubertModel"),vYr.forEach(t),Gpo=r(tAe," (FlauBERT model)"),tAe.forEach(t),Opo=i($),yp=n($,"LI",{});var aAe=s(yp);sse=n(aAe,"STRONG",{});var FYr=s(sse);Vpo=r(FYr,"flava"),FYr.forEach(t),Xpo=r(aAe," \u2014 "),SI=n(aAe,"A",{href:!0});var TYr=s(SI);zpo=r(TYr,"FlavaModel"),TYr.forEach(t),Wpo=r(aAe," (Flava model)"),aAe.forEach(t),Qpo=i($),Lp=n($,"LI",{});var nAe=s(Lp);lse=n(nAe,"STRONG",{});var MYr=s(lse);Hpo=r(MYr,"fnet"),MYr.forEach(t),Upo=r(nAe," \u2014 "),RI=n(nAe,"A",{href:!0});var EYr=s(RI);Jpo=r(EYr,"FNetModel"),EYr.forEach(t),Ypo=r(nAe," (FNet model)"),nAe.forEach(t),Kpo=i($),xp=n($,"LI",{});var sAe=s(xp);ise=n(sAe,"STRONG",{});var CYr=s(ise);Zpo=r(CYr,"fsmt"),CYr.forEach(t),e_o=r(sAe," \u2014 "),PI=n(sAe,"A",{href:!0});var wYr=s(PI);o_o=r(wYr,"FSMTModel"),wYr.forEach(t),r_o=r(sAe," (FairSeq Machine-Translation model)"),sAe.forEach(t),t_o=i($),Rs=n($,"LI",{});var C$=s(Rs);dse=n(C$,"STRONG",{});var AYr=s(dse);a_o=r(AYr,"funnel"),AYr.forEach(t),n_o=r(C$," \u2014 "),BI=n(C$,"A",{href:!0});var yYr=s(BI);s_o=r(yYr,"FunnelModel"),yYr.forEach(t),l_o=r(C$," or "),II=n(C$,"A",{href:!0});var LYr=s(II);i_o=r(LYr,"FunnelBaseModel"),LYr.forEach(t),d_o=r(C$," (Funnel Transformer model)"),C$.forEach(t),c_o=i($),$p=n($,"LI",{});var lAe=s($p);cse=n(lAe,"STRONG",{});var xYr=s(cse);f_o=r(xYr,"glpn"),xYr.forEach(t),m_o=r(lAe," \u2014 "),qI=n(lAe,"A",{href:!0});var $Yr=s(qI);g_o=r($Yr,"GLPNModel"),$Yr.forEach(t),h_o=r(lAe," (GLPN model)"),lAe.forEach(t),p_o=i($),kp=n($,"LI",{});var iAe=s(kp);fse=n(iAe,"STRONG",{});var kYr=s(fse);__o=r(kYr,"gpt2"),kYr.forEach(t),u_o=r(iAe," \u2014 "),NI=n(iAe,"A",{href:!0});var SYr=s(NI);b_o=r(SYr,"GPT2Model"),SYr.forEach(t),v_o=r(iAe," (OpenAI GPT-2 model)"),iAe.forEach(t),F_o=i($),Sp=n($,"LI",{});var dAe=s(Sp);mse=n(dAe,"STRONG",{});var RYr=s(mse);T_o=r(RYr,"gpt_neo"),RYr.forEach(t),M_o=r(dAe," \u2014 "),jI=n(dAe,"A",{href:!0});var PYr=s(jI);E_o=r(PYr,"GPTNeoModel"),PYr.forEach(t),C_o=r(dAe," (GPT Neo model)"),dAe.forEach(t),w_o=i($),Rp=n($,"LI",{});var cAe=s(Rp);gse=n(cAe,"STRONG",{});var BYr=s(gse);A_o=r(BYr,"gptj"),BYr.forEach(t),y_o=r(cAe," \u2014 "),DI=n(cAe,"A",{href:!0});var IYr=s(DI);L_o=r(IYr,"GPTJModel"),IYr.forEach(t),x_o=r(cAe," (GPT-J model)"),cAe.forEach(t),$_o=i($),Pp=n($,"LI",{});var fAe=s(Pp);hse=n(fAe,"STRONG",{});var qYr=s(hse);k_o=r(qYr,"hubert"),qYr.forEach(t),S_o=r(fAe," \u2014 "),GI=n(fAe,"A",{href:!0});var NYr=s(GI);R_o=r(NYr,"HubertModel"),NYr.forEach(t),P_o=r(fAe," (Hubert model)"),fAe.forEach(t),B_o=i($),Bp=n($,"LI",{});var mAe=s(Bp);pse=n(mAe,"STRONG",{});var jYr=s(pse);I_o=r(jYr,"ibert"),jYr.forEach(t),q_o=r(mAe," \u2014 "),OI=n(mAe,"A",{href:!0});var DYr=s(OI);N_o=r(DYr,"IBertModel"),DYr.forEach(t),j_o=r(mAe," (I-BERT model)"),mAe.forEach(t),D_o=i($),Ip=n($,"LI",{});var gAe=s(Ip);_se=n(gAe,"STRONG",{});var GYr=s(_se);G_o=r(GYr,"imagegpt"),GYr.forEach(t),O_o=r(gAe," \u2014 "),VI=n(gAe,"A",{href:!0});var OYr=s(VI);V_o=r(OYr,"ImageGPTModel"),OYr.forEach(t),X_o=r(gAe," (ImageGPT model)"),gAe.forEach(t),z_o=i($),qp=n($,"LI",{});var hAe=s(qp);use=n(hAe,"STRONG",{});var VYr=s(use);W_o=r(VYr,"layoutlm"),VYr.forEach(t),Q_o=r(hAe," \u2014 "),XI=n(hAe,"A",{href:!0});var XYr=s(XI);H_o=r(XYr,"LayoutLMModel"),XYr.forEach(t),U_o=r(hAe," (LayoutLM model)"),hAe.forEach(t),J_o=i($),Np=n($,"LI",{});var pAe=s(Np);bse=n(pAe,"STRONG",{});var zYr=s(bse);Y_o=r(zYr,"layoutlmv2"),zYr.forEach(t),K_o=r(pAe," \u2014 "),zI=n(pAe,"A",{href:!0});var WYr=s(zI);Z_o=r(WYr,"LayoutLMv2Model"),WYr.forEach(t),euo=r(pAe," (LayoutLMv2 model)"),pAe.forEach(t),ouo=i($),jp=n($,"LI",{});var _Ae=s(jp);vse=n(_Ae,"STRONG",{});var QYr=s(vse);ruo=r(QYr,"led"),QYr.forEach(t),tuo=r(_Ae," \u2014 "),WI=n(_Ae,"A",{href:!0});var HYr=s(WI);auo=r(HYr,"LEDModel"),HYr.forEach(t),nuo=r(_Ae," (LED model)"),_Ae.forEach(t),suo=i($),Dp=n($,"LI",{});var uAe=s(Dp);Fse=n(uAe,"STRONG",{});var UYr=s(Fse);luo=r(UYr,"longformer"),UYr.forEach(t),iuo=r(uAe," \u2014 "),QI=n(uAe,"A",{href:!0});var JYr=s(QI);duo=r(JYr,"LongformerModel"),JYr.forEach(t),cuo=r(uAe," (Longformer model)"),uAe.forEach(t),fuo=i($),Gp=n($,"LI",{});var bAe=s(Gp);Tse=n(bAe,"STRONG",{});var YYr=s(Tse);muo=r(YYr,"luke"),YYr.forEach(t),guo=r(bAe," \u2014 "),HI=n(bAe,"A",{href:!0});var KYr=s(HI);huo=r(KYr,"LukeModel"),KYr.forEach(t),puo=r(bAe," (LUKE model)"),bAe.forEach(t),_uo=i($),Op=n($,"LI",{});var vAe=s(Op);Mse=n(vAe,"STRONG",{});var ZYr=s(Mse);uuo=r(ZYr,"lxmert"),ZYr.forEach(t),buo=r(vAe," \u2014 "),UI=n(vAe,"A",{href:!0});var eKr=s(UI);vuo=r(eKr,"LxmertModel"),eKr.forEach(t),Fuo=r(vAe," (LXMERT model)"),vAe.forEach(t),Tuo=i($),Vp=n($,"LI",{});var FAe=s(Vp);Ese=n(FAe,"STRONG",{});var oKr=s(Ese);Muo=r(oKr,"m2m_100"),oKr.forEach(t),Euo=r(FAe," \u2014 "),JI=n(FAe,"A",{href:!0});var rKr=s(JI);Cuo=r(rKr,"M2M100Model"),rKr.forEach(t),wuo=r(FAe," (M2M100 model)"),FAe.forEach(t),Auo=i($),Xp=n($,"LI",{});var TAe=s(Xp);Cse=n(TAe,"STRONG",{});var tKr=s(Cse);yuo=r(tKr,"marian"),tKr.forEach(t),Luo=r(TAe," \u2014 "),YI=n(TAe,"A",{href:!0});var aKr=s(YI);xuo=r(aKr,"MarianModel"),aKr.forEach(t),$uo=r(TAe," (Marian model)"),TAe.forEach(t),kuo=i($),zp=n($,"LI",{});var MAe=s(zp);wse=n(MAe,"STRONG",{});var nKr=s(wse);Suo=r(nKr,"maskformer"),nKr.forEach(t),Ruo=r(MAe," \u2014 "),KI=n(MAe,"A",{href:!0});var sKr=s(KI);Puo=r(sKr,"MaskFormerModel"),sKr.forEach(t),Buo=r(MAe," (MaskFormer model)"),MAe.forEach(t),Iuo=i($),Wp=n($,"LI",{});var EAe=s(Wp);Ase=n(EAe,"STRONG",{});var lKr=s(Ase);quo=r(lKr,"mbart"),lKr.forEach(t),Nuo=r(EAe," \u2014 "),ZI=n(EAe,"A",{href:!0});var iKr=s(ZI);juo=r(iKr,"MBartModel"),iKr.forEach(t),Duo=r(EAe," (mBART model)"),EAe.forEach(t),Guo=i($),Qp=n($,"LI",{});var CAe=s(Qp);yse=n(CAe,"STRONG",{});var dKr=s(yse);Ouo=r(dKr,"megatron-bert"),dKr.forEach(t),Vuo=r(CAe," \u2014 "),eq=n(CAe,"A",{href:!0});var cKr=s(eq);Xuo=r(cKr,"MegatronBertModel"),cKr.forEach(t),zuo=r(CAe," (MegatronBert model)"),CAe.forEach(t),Wuo=i($),Hp=n($,"LI",{});var wAe=s(Hp);Lse=n(wAe,"STRONG",{});var fKr=s(Lse);Quo=r(fKr,"mobilebert"),fKr.forEach(t),Huo=r(wAe," \u2014 "),oq=n(wAe,"A",{href:!0});var mKr=s(oq);Uuo=r(mKr,"MobileBertModel"),mKr.forEach(t),Juo=r(wAe," (MobileBERT model)"),wAe.forEach(t),Yuo=i($),Up=n($,"LI",{});var AAe=s(Up);xse=n(AAe,"STRONG",{});var gKr=s(xse);Kuo=r(gKr,"mpnet"),gKr.forEach(t),Zuo=r(AAe," \u2014 "),rq=n(AAe,"A",{href:!0});var hKr=s(rq);e1o=r(hKr,"MPNetModel"),hKr.forEach(t),o1o=r(AAe," (MPNet model)"),AAe.forEach(t),r1o=i($),Jp=n($,"LI",{});var yAe=s(Jp);$se=n(yAe,"STRONG",{});var pKr=s($se);t1o=r(pKr,"mt5"),pKr.forEach(t),a1o=r(yAe," \u2014 "),tq=n(yAe,"A",{href:!0});var _Kr=s(tq);n1o=r(_Kr,"MT5Model"),_Kr.forEach(t),s1o=r(yAe," (mT5 model)"),yAe.forEach(t),l1o=i($),Yp=n($,"LI",{});var LAe=s(Yp);kse=n(LAe,"STRONG",{});var uKr=s(kse);i1o=r(uKr,"nystromformer"),uKr.forEach(t),d1o=r(LAe," \u2014 "),aq=n(LAe,"A",{href:!0});var bKr=s(aq);c1o=r(bKr,"NystromformerModel"),bKr.forEach(t),f1o=r(LAe," (Nystromformer model)"),LAe.forEach(t),m1o=i($),Kp=n($,"LI",{});var xAe=s(Kp);Sse=n(xAe,"STRONG",{});var vKr=s(Sse);g1o=r(vKr,"openai-gpt"),vKr.forEach(t),h1o=r(xAe," \u2014 "),nq=n(xAe,"A",{href:!0});var FKr=s(nq);p1o=r(FKr,"OpenAIGPTModel"),FKr.forEach(t),_1o=r(xAe," (OpenAI GPT model)"),xAe.forEach(t),u1o=i($),Zp=n($,"LI",{});var $Ae=s(Zp);Rse=n($Ae,"STRONG",{});var TKr=s(Rse);b1o=r(TKr,"opt"),TKr.forEach(t),v1o=r($Ae," \u2014 "),sq=n($Ae,"A",{href:!0});var MKr=s(sq);F1o=r(MKr,"OPTModel"),MKr.forEach(t),T1o=r($Ae," (OPT model)"),$Ae.forEach(t),M1o=i($),e_=n($,"LI",{});var kAe=s(e_);Pse=n(kAe,"STRONG",{});var EKr=s(Pse);E1o=r(EKr,"pegasus"),EKr.forEach(t),C1o=r(kAe," \u2014 "),lq=n(kAe,"A",{href:!0});var CKr=s(lq);w1o=r(CKr,"PegasusModel"),CKr.forEach(t),A1o=r(kAe," (Pegasus model)"),kAe.forEach(t),y1o=i($),o_=n($,"LI",{});var SAe=s(o_);Bse=n(SAe,"STRONG",{});var wKr=s(Bse);L1o=r(wKr,"perceiver"),wKr.forEach(t),x1o=r(SAe," \u2014 "),iq=n(SAe,"A",{href:!0});var AKr=s(iq);$1o=r(AKr,"PerceiverModel"),AKr.forEach(t),k1o=r(SAe," (Perceiver model)"),SAe.forEach(t),S1o=i($),r_=n($,"LI",{});var RAe=s(r_);Ise=n(RAe,"STRONG",{});var yKr=s(Ise);R1o=r(yKr,"plbart"),yKr.forEach(t),P1o=r(RAe," \u2014 "),dq=n(RAe,"A",{href:!0});var LKr=s(dq);B1o=r(LKr,"PLBartModel"),LKr.forEach(t),I1o=r(RAe," (PLBart model)"),RAe.forEach(t),q1o=i($),t_=n($,"LI",{});var PAe=s(t_);qse=n(PAe,"STRONG",{});var xKr=s(qse);N1o=r(xKr,"poolformer"),xKr.forEach(t),j1o=r(PAe," \u2014 "),cq=n(PAe,"A",{href:!0});var $Kr=s(cq);D1o=r($Kr,"PoolFormerModel"),$Kr.forEach(t),G1o=r(PAe," (PoolFormer model)"),PAe.forEach(t),O1o=i($),a_=n($,"LI",{});var BAe=s(a_);Nse=n(BAe,"STRONG",{});var kKr=s(Nse);V1o=r(kKr,"prophetnet"),kKr.forEach(t),X1o=r(BAe," \u2014 "),fq=n(BAe,"A",{href:!0});var SKr=s(fq);z1o=r(SKr,"ProphetNetModel"),SKr.forEach(t),W1o=r(BAe," (ProphetNet model)"),BAe.forEach(t),Q1o=i($),n_=n($,"LI",{});var IAe=s(n_);jse=n(IAe,"STRONG",{});var RKr=s(jse);H1o=r(RKr,"qdqbert"),RKr.forEach(t),U1o=r(IAe," \u2014 "),mq=n(IAe,"A",{href:!0});var PKr=s(mq);J1o=r(PKr,"QDQBertModel"),PKr.forEach(t),Y1o=r(IAe," (QDQBert model)"),IAe.forEach(t),K1o=i($),s_=n($,"LI",{});var qAe=s(s_);Dse=n(qAe,"STRONG",{});var BKr=s(Dse);Z1o=r(BKr,"reformer"),BKr.forEach(t),ebo=r(qAe," \u2014 "),gq=n(qAe,"A",{href:!0});var IKr=s(gq);obo=r(IKr,"ReformerModel"),IKr.forEach(t),rbo=r(qAe," (Reformer model)"),qAe.forEach(t),tbo=i($),l_=n($,"LI",{});var NAe=s(l_);Gse=n(NAe,"STRONG",{});var qKr=s(Gse);abo=r(qKr,"regnet"),qKr.forEach(t),nbo=r(NAe," \u2014 "),hq=n(NAe,"A",{href:!0});var NKr=s(hq);sbo=r(NKr,"RegNetModel"),NKr.forEach(t),lbo=r(NAe," (RegNet model)"),NAe.forEach(t),ibo=i($),i_=n($,"LI",{});var jAe=s(i_);Ose=n(jAe,"STRONG",{});var jKr=s(Ose);dbo=r(jKr,"rembert"),jKr.forEach(t),cbo=r(jAe," \u2014 "),pq=n(jAe,"A",{href:!0});var DKr=s(pq);fbo=r(DKr,"RemBertModel"),DKr.forEach(t),mbo=r(jAe," (RemBERT model)"),jAe.forEach(t),gbo=i($),d_=n($,"LI",{});var DAe=s(d_);Vse=n(DAe,"STRONG",{});var GKr=s(Vse);hbo=r(GKr,"resnet"),GKr.forEach(t),pbo=r(DAe," \u2014 "),_q=n(DAe,"A",{href:!0});var OKr=s(_q);_bo=r(OKr,"ResNetModel"),OKr.forEach(t),ubo=r(DAe," (ResNet model)"),DAe.forEach(t),bbo=i($),c_=n($,"LI",{});var GAe=s(c_);Xse=n(GAe,"STRONG",{});var VKr=s(Xse);vbo=r(VKr,"retribert"),VKr.forEach(t),Fbo=r(GAe," \u2014 "),uq=n(GAe,"A",{href:!0});var XKr=s(uq);Tbo=r(XKr,"RetriBertModel"),XKr.forEach(t),Mbo=r(GAe," (RetriBERT model)"),GAe.forEach(t),Ebo=i($),f_=n($,"LI",{});var OAe=s(f_);zse=n(OAe,"STRONG",{});var zKr=s(zse);Cbo=r(zKr,"roberta"),zKr.forEach(t),wbo=r(OAe," \u2014 "),bq=n(OAe,"A",{href:!0});var WKr=s(bq);Abo=r(WKr,"RobertaModel"),WKr.forEach(t),ybo=r(OAe," (RoBERTa model)"),OAe.forEach(t),Lbo=i($),m_=n($,"LI",{});var VAe=s(m_);Wse=n(VAe,"STRONG",{});var QKr=s(Wse);xbo=r(QKr,"roformer"),QKr.forEach(t),$bo=r(VAe," \u2014 "),vq=n(VAe,"A",{href:!0});var HKr=s(vq);kbo=r(HKr,"RoFormerModel"),HKr.forEach(t),Sbo=r(VAe," (RoFormer model)"),VAe.forEach(t),Rbo=i($),g_=n($,"LI",{});var XAe=s(g_);Qse=n(XAe,"STRONG",{});var UKr=s(Qse);Pbo=r(UKr,"segformer"),UKr.forEach(t),Bbo=r(XAe," \u2014 "),Fq=n(XAe,"A",{href:!0});var JKr=s(Fq);Ibo=r(JKr,"SegformerModel"),JKr.forEach(t),qbo=r(XAe," (SegFormer model)"),XAe.forEach(t),Nbo=i($),h_=n($,"LI",{});var zAe=s(h_);Hse=n(zAe,"STRONG",{});var YKr=s(Hse);jbo=r(YKr,"sew"),YKr.forEach(t),Dbo=r(zAe," \u2014 "),Tq=n(zAe,"A",{href:!0});var KKr=s(Tq);Gbo=r(KKr,"SEWModel"),KKr.forEach(t),Obo=r(zAe," (SEW model)"),zAe.forEach(t),Vbo=i($),p_=n($,"LI",{});var WAe=s(p_);Use=n(WAe,"STRONG",{});var ZKr=s(Use);Xbo=r(ZKr,"sew-d"),ZKr.forEach(t),zbo=r(WAe," \u2014 "),Mq=n(WAe,"A",{href:!0});var eZr=s(Mq);Wbo=r(eZr,"SEWDModel"),eZr.forEach(t),Qbo=r(WAe," (SEW-D model)"),WAe.forEach(t),Hbo=i($),__=n($,"LI",{});var QAe=s(__);Jse=n(QAe,"STRONG",{});var oZr=s(Jse);Ubo=r(oZr,"speech_to_text"),oZr.forEach(t),Jbo=r(QAe," \u2014 "),Eq=n(QAe,"A",{href:!0});var rZr=s(Eq);Ybo=r(rZr,"Speech2TextModel"),rZr.forEach(t),Kbo=r(QAe," (Speech2Text model)"),QAe.forEach(t),Zbo=i($),u_=n($,"LI",{});var HAe=s(u_);Yse=n(HAe,"STRONG",{});var tZr=s(Yse);e2o=r(tZr,"splinter"),tZr.forEach(t),o2o=r(HAe," \u2014 "),Cq=n(HAe,"A",{href:!0});var aZr=s(Cq);r2o=r(aZr,"SplinterModel"),aZr.forEach(t),t2o=r(HAe," (Splinter model)"),HAe.forEach(t),a2o=i($),b_=n($,"LI",{});var UAe=s(b_);Kse=n(UAe,"STRONG",{});var nZr=s(Kse);n2o=r(nZr,"squeezebert"),nZr.forEach(t),s2o=r(UAe," \u2014 "),wq=n(UAe,"A",{href:!0});var sZr=s(wq);l2o=r(sZr,"SqueezeBertModel"),sZr.forEach(t),i2o=r(UAe," (SqueezeBERT model)"),UAe.forEach(t),d2o=i($),v_=n($,"LI",{});var JAe=s(v_);Zse=n(JAe,"STRONG",{});var lZr=s(Zse);c2o=r(lZr,"swin"),lZr.forEach(t),f2o=r(JAe," \u2014 "),Aq=n(JAe,"A",{href:!0});var iZr=s(Aq);m2o=r(iZr,"SwinModel"),iZr.forEach(t),g2o=r(JAe," (Swin model)"),JAe.forEach(t),h2o=i($),F_=n($,"LI",{});var YAe=s(F_);ele=n(YAe,"STRONG",{});var dZr=s(ele);p2o=r(dZr,"t5"),dZr.forEach(t),_2o=r(YAe," \u2014 "),yq=n(YAe,"A",{href:!0});var cZr=s(yq);u2o=r(cZr,"T5Model"),cZr.forEach(t),b2o=r(YAe," (T5 model)"),YAe.forEach(t),v2o=i($),T_=n($,"LI",{});var KAe=s(T_);ole=n(KAe,"STRONG",{});var fZr=s(ole);F2o=r(fZr,"tapas"),fZr.forEach(t),T2o=r(KAe," \u2014 "),Lq=n(KAe,"A",{href:!0});var mZr=s(Lq);M2o=r(mZr,"TapasModel"),mZr.forEach(t),E2o=r(KAe," (TAPAS model)"),KAe.forEach(t),C2o=i($),M_=n($,"LI",{});var ZAe=s(M_);rle=n(ZAe,"STRONG",{});var gZr=s(rle);w2o=r(gZr,"trajectory_transformer"),gZr.forEach(t),A2o=r(ZAe," \u2014 "),xq=n(ZAe,"A",{href:!0});var hZr=s(xq);y2o=r(hZr,"TrajectoryTransformerModel"),hZr.forEach(t),L2o=r(ZAe," (Trajectory Transformer model)"),ZAe.forEach(t),x2o=i($),E_=n($,"LI",{});var e0e=s(E_);tle=n(e0e,"STRONG",{});var pZr=s(tle);$2o=r(pZr,"transfo-xl"),pZr.forEach(t),k2o=r(e0e," \u2014 "),$q=n(e0e,"A",{href:!0});var _Zr=s($q);S2o=r(_Zr,"TransfoXLModel"),_Zr.forEach(t),R2o=r(e0e," (Transformer-XL model)"),e0e.forEach(t),P2o=i($),C_=n($,"LI",{});var o0e=s(C_);ale=n(o0e,"STRONG",{});var uZr=s(ale);B2o=r(uZr,"unispeech"),uZr.forEach(t),I2o=r(o0e," \u2014 "),kq=n(o0e,"A",{href:!0});var bZr=s(kq);q2o=r(bZr,"UniSpeechModel"),bZr.forEach(t),N2o=r(o0e," (UniSpeech model)"),o0e.forEach(t),j2o=i($),w_=n($,"LI",{});var r0e=s(w_);nle=n(r0e,"STRONG",{});var vZr=s(nle);D2o=r(vZr,"unispeech-sat"),vZr.forEach(t),G2o=r(r0e," \u2014 "),Sq=n(r0e,"A",{href:!0});var FZr=s(Sq);O2o=r(FZr,"UniSpeechSatModel"),FZr.forEach(t),V2o=r(r0e," (UniSpeechSat model)"),r0e.forEach(t),X2o=i($),A_=n($,"LI",{});var t0e=s(A_);sle=n(t0e,"STRONG",{});var TZr=s(sle);z2o=r(TZr,"van"),TZr.forEach(t),W2o=r(t0e," \u2014 "),Rq=n(t0e,"A",{href:!0});var MZr=s(Rq);Q2o=r(MZr,"VanModel"),MZr.forEach(t),H2o=r(t0e," (VAN model)"),t0e.forEach(t),U2o=i($),y_=n($,"LI",{});var a0e=s(y_);lle=n(a0e,"STRONG",{});var EZr=s(lle);J2o=r(EZr,"vilt"),EZr.forEach(t),Y2o=r(a0e," \u2014 "),Pq=n(a0e,"A",{href:!0});var CZr=s(Pq);K2o=r(CZr,"ViltModel"),CZr.forEach(t),Z2o=r(a0e," (ViLT model)"),a0e.forEach(t),evo=i($),L_=n($,"LI",{});var n0e=s(L_);ile=n(n0e,"STRONG",{});var wZr=s(ile);ovo=r(wZr,"vision-text-dual-encoder"),wZr.forEach(t),rvo=r(n0e," \u2014 "),Bq=n(n0e,"A",{href:!0});var AZr=s(Bq);tvo=r(AZr,"VisionTextDualEncoderModel"),AZr.forEach(t),avo=r(n0e," (VisionTextDualEncoder model)"),n0e.forEach(t),nvo=i($),x_=n($,"LI",{});var s0e=s(x_);dle=n(s0e,"STRONG",{});var yZr=s(dle);svo=r(yZr,"visual_bert"),yZr.forEach(t),lvo=r(s0e," \u2014 "),Iq=n(s0e,"A",{href:!0});var LZr=s(Iq);ivo=r(LZr,"VisualBertModel"),LZr.forEach(t),dvo=r(s0e," (VisualBert model)"),s0e.forEach(t),cvo=i($),$_=n($,"LI",{});var l0e=s($_);cle=n(l0e,"STRONG",{});var xZr=s(cle);fvo=r(xZr,"vit"),xZr.forEach(t),mvo=r(l0e," \u2014 "),qq=n(l0e,"A",{href:!0});var $Zr=s(qq);gvo=r($Zr,"ViTModel"),$Zr.forEach(t),hvo=r(l0e," (ViT model)"),l0e.forEach(t),pvo=i($),k_=n($,"LI",{});var i0e=s(k_);fle=n(i0e,"STRONG",{});var kZr=s(fle);_vo=r(kZr,"vit_mae"),kZr.forEach(t),uvo=r(i0e," \u2014 "),Nq=n(i0e,"A",{href:!0});var SZr=s(Nq);bvo=r(SZr,"ViTMAEModel"),SZr.forEach(t),vvo=r(i0e," (ViTMAE model)"),i0e.forEach(t),Fvo=i($),S_=n($,"LI",{});var d0e=s(S_);mle=n(d0e,"STRONG",{});var RZr=s(mle);Tvo=r(RZr,"wav2vec2"),RZr.forEach(t),Mvo=r(d0e," \u2014 "),jq=n(d0e,"A",{href:!0});var PZr=s(jq);Evo=r(PZr,"Wav2Vec2Model"),PZr.forEach(t),Cvo=r(d0e," (Wav2Vec2 model)"),d0e.forEach(t),wvo=i($),R_=n($,"LI",{});var c0e=s(R_);gle=n(c0e,"STRONG",{});var BZr=s(gle);Avo=r(BZr,"wav2vec2-conformer"),BZr.forEach(t),yvo=r(c0e," \u2014 "),Dq=n(c0e,"A",{href:!0});var IZr=s(Dq);Lvo=r(IZr,"Wav2Vec2ConformerModel"),IZr.forEach(t),xvo=r(c0e," (Wav2Vec2-Conformer model)"),c0e.forEach(t),$vo=i($),P_=n($,"LI",{});var f0e=s(P_);hle=n(f0e,"STRONG",{});var qZr=s(hle);kvo=r(qZr,"wavlm"),qZr.forEach(t),Svo=r(f0e," \u2014 "),Gq=n(f0e,"A",{href:!0});var NZr=s(Gq);Rvo=r(NZr,"WavLMModel"),NZr.forEach(t),Pvo=r(f0e," (WavLM model)"),f0e.forEach(t),Bvo=i($),B_=n($,"LI",{});var m0e=s(B_);ple=n(m0e,"STRONG",{});var jZr=s(ple);Ivo=r(jZr,"xglm"),jZr.forEach(t),qvo=r(m0e," \u2014 "),Oq=n(m0e,"A",{href:!0});var DZr=s(Oq);Nvo=r(DZr,"XGLMModel"),DZr.forEach(t),jvo=r(m0e," (XGLM model)"),m0e.forEach(t),Dvo=i($),I_=n($,"LI",{});var g0e=s(I_);_le=n(g0e,"STRONG",{});var GZr=s(_le);Gvo=r(GZr,"xlm"),GZr.forEach(t),Ovo=r(g0e," \u2014 "),Vq=n(g0e,"A",{href:!0});var OZr=s(Vq);Vvo=r(OZr,"XLMModel"),OZr.forEach(t),Xvo=r(g0e," (XLM model)"),g0e.forEach(t),zvo=i($),q_=n($,"LI",{});var h0e=s(q_);ule=n(h0e,"STRONG",{});var VZr=s(ule);Wvo=r(VZr,"xlm-prophetnet"),VZr.forEach(t),Qvo=r(h0e," \u2014 "),Xq=n(h0e,"A",{href:!0});var XZr=s(Xq);Hvo=r(XZr,"XLMProphetNetModel"),XZr.forEach(t),Uvo=r(h0e," (XLMProphetNet model)"),h0e.forEach(t),Jvo=i($),N_=n($,"LI",{});var p0e=s(N_);ble=n(p0e,"STRONG",{});var zZr=s(ble);Yvo=r(zZr,"xlm-roberta"),zZr.forEach(t),Kvo=r(p0e," \u2014 "),zq=n(p0e,"A",{href:!0});var WZr=s(zq);Zvo=r(WZr,"XLMRobertaModel"),WZr.forEach(t),e3o=r(p0e," (XLM-RoBERTa model)"),p0e.forEach(t),o3o=i($),j_=n($,"LI",{});var _0e=s(j_);vle=n(_0e,"STRONG",{});var QZr=s(vle);r3o=r(QZr,"xlm-roberta-xl"),QZr.forEach(t),t3o=r(_0e," \u2014 "),Wq=n(_0e,"A",{href:!0});var HZr=s(Wq);a3o=r(HZr,"XLMRobertaXLModel"),HZr.forEach(t),n3o=r(_0e," (XLM-RoBERTa-XL model)"),_0e.forEach(t),s3o=i($),D_=n($,"LI",{});var u0e=s(D_);Fle=n(u0e,"STRONG",{});var UZr=s(Fle);l3o=r(UZr,"xlnet"),UZr.forEach(t),i3o=r(u0e," \u2014 "),Qq=n(u0e,"A",{href:!0});var JZr=s(Qq);d3o=r(JZr,"XLNetModel"),JZr.forEach(t),c3o=r(u0e," (XLNet model)"),u0e.forEach(t),f3o=i($),G_=n($,"LI",{});var b0e=s(G_);Tle=n(b0e,"STRONG",{});var YZr=s(Tle);m3o=r(YZr,"yolos"),YZr.forEach(t),g3o=r(b0e," \u2014 "),Hq=n(b0e,"A",{href:!0});var KZr=s(Hq);h3o=r(KZr,"YolosModel"),KZr.forEach(t),p3o=r(b0e," (YOLOS model)"),b0e.forEach(t),_3o=i($),O_=n($,"LI",{});var v0e=s(O_);Mle=n(v0e,"STRONG",{});var ZZr=s(Mle);u3o=r(ZZr,"yoso"),ZZr.forEach(t),b3o=r(v0e," \u2014 "),Uq=n(v0e,"A",{href:!0});var eet=s(Uq);v3o=r(eet,"YosoModel"),eet.forEach(t),F3o=r(v0e," (YOSO model)"),v0e.forEach(t),$.forEach(t),T3o=i(oa),V_=n(oa,"P",{});var F0e=s(V_);M3o=r(F0e,"The model is set in evaluation mode by default using "),Ele=n(F0e,"CODE",{});var oet=s(Ele);E3o=r(oet,"model.eval()"),oet.forEach(t),C3o=r(F0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=n(F0e,"CODE",{});var ret=s(Cle);w3o=r(ret,"model.train()"),ret.forEach(t),F0e.forEach(t),A3o=i(oa),T(X_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),KIe=i(f),yi=n(f,"H2",{class:!0});var rje=s(yi);z_=n(rje,"A",{id:!0,class:!0,href:!0});var tet=s(z_);wle=n(tet,"SPAN",{});var aet=s(wle);T(G0.$$.fragment,aet),aet.forEach(t),tet.forEach(t),y3o=i(rje),Ale=n(rje,"SPAN",{});var net=s(Ale);L3o=r(net,"AutoModelForPreTraining"),net.forEach(t),rje.forEach(t),ZIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(O0.$$.fragment,Gs),x3o=i(Gs),Li=n(Gs,"P",{});var BK=s(Li);$3o=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jq=n(BK,"A",{href:!0});var set=s(Jq);k3o=r(set,"from_pretrained()"),set.forEach(t),S3o=r(BK," class method or the "),Yq=n(BK,"A",{href:!0});var iet=s(Yq);R3o=r(iet,"from_config()"),iet.forEach(t),P3o=r(BK,` class
method.`),BK.forEach(t),B3o=i(Gs),V0=n(Gs,"P",{});var tje=s(V0);I3o=r(tje,"This class cannot be instantiated directly using "),yle=n(tje,"CODE",{});var det=s(yle);q3o=r(det,"__init__()"),det.forEach(t),N3o=r(tje," (throws an error)."),tje.forEach(t),j3o=i(Gs),at=n(Gs,"DIV",{class:!0});var _w=s(at);T(X0.$$.fragment,_w),D3o=i(_w),Lle=n(_w,"P",{});var cet=s(Lle);G3o=r(cet,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cet.forEach(t),O3o=i(_w),xi=n(_w,"P",{});var IK=s(xi);V3o=r(IK,`Note:
Loading a model from its configuration file does `),xle=n(IK,"STRONG",{});var fet=s(xle);X3o=r(fet,"not"),fet.forEach(t),z3o=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kq=n(IK,"A",{href:!0});var met=s(Kq);W3o=r(met,"from_pretrained()"),met.forEach(t),Q3o=r(IK," to load the model weights."),IK.forEach(t),H3o=i(_w),T(W_.$$.fragment,_w),_w.forEach(t),U3o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(z0.$$.fragment,ra),J3o=i(ra),$le=n(ra,"P",{});var get=s($le);Y3o=r(get,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),get.forEach(t),K3o=i(ra),xa=n(ra,"P",{});var uw=s(xa);Z3o=r(uw,"The model class to instantiate is selected based on the "),kle=n(uw,"CODE",{});var het=s(kle);eFo=r(het,"model_type"),het.forEach(t),oFo=r(uw,` property of the config object (either
passed as an argument or loaded from `),Sle=n(uw,"CODE",{});var pet=s(Sle);rFo=r(pet,"pretrained_model_name_or_path"),pet.forEach(t),tFo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(uw,"CODE",{});var _et=s(Rle);aFo=r(_et,"pretrained_model_name_or_path"),_et.forEach(t),nFo=r(uw,":"),uw.forEach(t),sFo=i(ra),G=n(ra,"UL",{});var O=s(G);Q_=n(O,"LI",{});var T0e=s(Q_);Ple=n(T0e,"STRONG",{});var uet=s(Ple);lFo=r(uet,"albert"),uet.forEach(t),iFo=r(T0e," \u2014 "),Zq=n(T0e,"A",{href:!0});var bet=s(Zq);dFo=r(bet,"AlbertForPreTraining"),bet.forEach(t),cFo=r(T0e," (ALBERT model)"),T0e.forEach(t),fFo=i(O),H_=n(O,"LI",{});var M0e=s(H_);Ble=n(M0e,"STRONG",{});var vet=s(Ble);mFo=r(vet,"bart"),vet.forEach(t),gFo=r(M0e," \u2014 "),eN=n(M0e,"A",{href:!0});var Fet=s(eN);hFo=r(Fet,"BartForConditionalGeneration"),Fet.forEach(t),pFo=r(M0e," (BART model)"),M0e.forEach(t),_Fo=i(O),U_=n(O,"LI",{});var E0e=s(U_);Ile=n(E0e,"STRONG",{});var Tet=s(Ile);uFo=r(Tet,"bert"),Tet.forEach(t),bFo=r(E0e," \u2014 "),oN=n(E0e,"A",{href:!0});var Met=s(oN);vFo=r(Met,"BertForPreTraining"),Met.forEach(t),FFo=r(E0e," (BERT model)"),E0e.forEach(t),TFo=i(O),J_=n(O,"LI",{});var C0e=s(J_);qle=n(C0e,"STRONG",{});var Eet=s(qle);MFo=r(Eet,"big_bird"),Eet.forEach(t),EFo=r(C0e," \u2014 "),rN=n(C0e,"A",{href:!0});var Cet=s(rN);CFo=r(Cet,"BigBirdForPreTraining"),Cet.forEach(t),wFo=r(C0e," (BigBird model)"),C0e.forEach(t),AFo=i(O),Y_=n(O,"LI",{});var w0e=s(Y_);Nle=n(w0e,"STRONG",{});var wet=s(Nle);yFo=r(wet,"camembert"),wet.forEach(t),LFo=r(w0e," \u2014 "),tN=n(w0e,"A",{href:!0});var Aet=s(tN);xFo=r(Aet,"CamembertForMaskedLM"),Aet.forEach(t),$Fo=r(w0e," (CamemBERT model)"),w0e.forEach(t),kFo=i(O),K_=n(O,"LI",{});var A0e=s(K_);jle=n(A0e,"STRONG",{});var yet=s(jle);SFo=r(yet,"ctrl"),yet.forEach(t),RFo=r(A0e," \u2014 "),aN=n(A0e,"A",{href:!0});var Let=s(aN);PFo=r(Let,"CTRLLMHeadModel"),Let.forEach(t),BFo=r(A0e," (CTRL model)"),A0e.forEach(t),IFo=i(O),Z_=n(O,"LI",{});var y0e=s(Z_);Dle=n(y0e,"STRONG",{});var xet=s(Dle);qFo=r(xet,"data2vec-text"),xet.forEach(t),NFo=r(y0e," \u2014 "),nN=n(y0e,"A",{href:!0});var $et=s(nN);jFo=r($et,"Data2VecTextForMaskedLM"),$et.forEach(t),DFo=r(y0e," (Data2VecText model)"),y0e.forEach(t),GFo=i(O),eu=n(O,"LI",{});var L0e=s(eu);Gle=n(L0e,"STRONG",{});var ket=s(Gle);OFo=r(ket,"deberta"),ket.forEach(t),VFo=r(L0e," \u2014 "),sN=n(L0e,"A",{href:!0});var Set=s(sN);XFo=r(Set,"DebertaForMaskedLM"),Set.forEach(t),zFo=r(L0e," (DeBERTa model)"),L0e.forEach(t),WFo=i(O),ou=n(O,"LI",{});var x0e=s(ou);Ole=n(x0e,"STRONG",{});var Ret=s(Ole);QFo=r(Ret,"deberta-v2"),Ret.forEach(t),HFo=r(x0e," \u2014 "),lN=n(x0e,"A",{href:!0});var Pet=s(lN);UFo=r(Pet,"DebertaV2ForMaskedLM"),Pet.forEach(t),JFo=r(x0e," (DeBERTa-v2 model)"),x0e.forEach(t),YFo=i(O),ru=n(O,"LI",{});var $0e=s(ru);Vle=n($0e,"STRONG",{});var Bet=s(Vle);KFo=r(Bet,"distilbert"),Bet.forEach(t),ZFo=r($0e," \u2014 "),iN=n($0e,"A",{href:!0});var Iet=s(iN);eTo=r(Iet,"DistilBertForMaskedLM"),Iet.forEach(t),oTo=r($0e," (DistilBERT model)"),$0e.forEach(t),rTo=i(O),tu=n(O,"LI",{});var k0e=s(tu);Xle=n(k0e,"STRONG",{});var qet=s(Xle);tTo=r(qet,"electra"),qet.forEach(t),aTo=r(k0e," \u2014 "),dN=n(k0e,"A",{href:!0});var Net=s(dN);nTo=r(Net,"ElectraForPreTraining"),Net.forEach(t),sTo=r(k0e," (ELECTRA model)"),k0e.forEach(t),lTo=i(O),au=n(O,"LI",{});var S0e=s(au);zle=n(S0e,"STRONG",{});var jet=s(zle);iTo=r(jet,"flaubert"),jet.forEach(t),dTo=r(S0e," \u2014 "),cN=n(S0e,"A",{href:!0});var Det=s(cN);cTo=r(Det,"FlaubertWithLMHeadModel"),Det.forEach(t),fTo=r(S0e," (FlauBERT model)"),S0e.forEach(t),mTo=i(O),nu=n(O,"LI",{});var R0e=s(nu);Wle=n(R0e,"STRONG",{});var Get=s(Wle);gTo=r(Get,"flava"),Get.forEach(t),hTo=r(R0e," \u2014 "),fN=n(R0e,"A",{href:!0});var Oet=s(fN);pTo=r(Oet,"FlavaForPreTraining"),Oet.forEach(t),_To=r(R0e," (Flava model)"),R0e.forEach(t),uTo=i(O),su=n(O,"LI",{});var P0e=s(su);Qle=n(P0e,"STRONG",{});var Vet=s(Qle);bTo=r(Vet,"fnet"),Vet.forEach(t),vTo=r(P0e," \u2014 "),mN=n(P0e,"A",{href:!0});var Xet=s(mN);FTo=r(Xet,"FNetForPreTraining"),Xet.forEach(t),TTo=r(P0e," (FNet model)"),P0e.forEach(t),MTo=i(O),lu=n(O,"LI",{});var B0e=s(lu);Hle=n(B0e,"STRONG",{});var zet=s(Hle);ETo=r(zet,"fsmt"),zet.forEach(t),CTo=r(B0e," \u2014 "),gN=n(B0e,"A",{href:!0});var Wet=s(gN);wTo=r(Wet,"FSMTForConditionalGeneration"),Wet.forEach(t),ATo=r(B0e," (FairSeq Machine-Translation model)"),B0e.forEach(t),yTo=i(O),iu=n(O,"LI",{});var I0e=s(iu);Ule=n(I0e,"STRONG",{});var Qet=s(Ule);LTo=r(Qet,"funnel"),Qet.forEach(t),xTo=r(I0e," \u2014 "),hN=n(I0e,"A",{href:!0});var Het=s(hN);$To=r(Het,"FunnelForPreTraining"),Het.forEach(t),kTo=r(I0e," (Funnel Transformer model)"),I0e.forEach(t),STo=i(O),du=n(O,"LI",{});var q0e=s(du);Jle=n(q0e,"STRONG",{});var Uet=s(Jle);RTo=r(Uet,"gpt2"),Uet.forEach(t),PTo=r(q0e," \u2014 "),pN=n(q0e,"A",{href:!0});var Jet=s(pN);BTo=r(Jet,"GPT2LMHeadModel"),Jet.forEach(t),ITo=r(q0e," (OpenAI GPT-2 model)"),q0e.forEach(t),qTo=i(O),cu=n(O,"LI",{});var N0e=s(cu);Yle=n(N0e,"STRONG",{});var Yet=s(Yle);NTo=r(Yet,"ibert"),Yet.forEach(t),jTo=r(N0e," \u2014 "),_N=n(N0e,"A",{href:!0});var Ket=s(_N);DTo=r(Ket,"IBertForMaskedLM"),Ket.forEach(t),GTo=r(N0e," (I-BERT model)"),N0e.forEach(t),OTo=i(O),fu=n(O,"LI",{});var j0e=s(fu);Kle=n(j0e,"STRONG",{});var Zet=s(Kle);VTo=r(Zet,"layoutlm"),Zet.forEach(t),XTo=r(j0e," \u2014 "),uN=n(j0e,"A",{href:!0});var eot=s(uN);zTo=r(eot,"LayoutLMForMaskedLM"),eot.forEach(t),WTo=r(j0e," (LayoutLM model)"),j0e.forEach(t),QTo=i(O),mu=n(O,"LI",{});var D0e=s(mu);Zle=n(D0e,"STRONG",{});var oot=s(Zle);HTo=r(oot,"longformer"),oot.forEach(t),UTo=r(D0e," \u2014 "),bN=n(D0e,"A",{href:!0});var rot=s(bN);JTo=r(rot,"LongformerForMaskedLM"),rot.forEach(t),YTo=r(D0e," (Longformer model)"),D0e.forEach(t),KTo=i(O),gu=n(O,"LI",{});var G0e=s(gu);eie=n(G0e,"STRONG",{});var tot=s(eie);ZTo=r(tot,"lxmert"),tot.forEach(t),e8o=r(G0e," \u2014 "),vN=n(G0e,"A",{href:!0});var aot=s(vN);o8o=r(aot,"LxmertForPreTraining"),aot.forEach(t),r8o=r(G0e," (LXMERT model)"),G0e.forEach(t),t8o=i(O),hu=n(O,"LI",{});var O0e=s(hu);oie=n(O0e,"STRONG",{});var not=s(oie);a8o=r(not,"megatron-bert"),not.forEach(t),n8o=r(O0e," \u2014 "),FN=n(O0e,"A",{href:!0});var sot=s(FN);s8o=r(sot,"MegatronBertForPreTraining"),sot.forEach(t),l8o=r(O0e," (MegatronBert model)"),O0e.forEach(t),i8o=i(O),pu=n(O,"LI",{});var V0e=s(pu);rie=n(V0e,"STRONG",{});var lot=s(rie);d8o=r(lot,"mobilebert"),lot.forEach(t),c8o=r(V0e," \u2014 "),TN=n(V0e,"A",{href:!0});var iot=s(TN);f8o=r(iot,"MobileBertForPreTraining"),iot.forEach(t),m8o=r(V0e," (MobileBERT model)"),V0e.forEach(t),g8o=i(O),_u=n(O,"LI",{});var X0e=s(_u);tie=n(X0e,"STRONG",{});var dot=s(tie);h8o=r(dot,"mpnet"),dot.forEach(t),p8o=r(X0e," \u2014 "),MN=n(X0e,"A",{href:!0});var cot=s(MN);_8o=r(cot,"MPNetForMaskedLM"),cot.forEach(t),u8o=r(X0e," (MPNet model)"),X0e.forEach(t),b8o=i(O),uu=n(O,"LI",{});var z0e=s(uu);aie=n(z0e,"STRONG",{});var fot=s(aie);v8o=r(fot,"openai-gpt"),fot.forEach(t),F8o=r(z0e," \u2014 "),EN=n(z0e,"A",{href:!0});var mot=s(EN);T8o=r(mot,"OpenAIGPTLMHeadModel"),mot.forEach(t),M8o=r(z0e," (OpenAI GPT model)"),z0e.forEach(t),E8o=i(O),bu=n(O,"LI",{});var W0e=s(bu);nie=n(W0e,"STRONG",{});var got=s(nie);C8o=r(got,"retribert"),got.forEach(t),w8o=r(W0e," \u2014 "),CN=n(W0e,"A",{href:!0});var hot=s(CN);A8o=r(hot,"RetriBertModel"),hot.forEach(t),y8o=r(W0e," (RetriBERT model)"),W0e.forEach(t),L8o=i(O),vu=n(O,"LI",{});var Q0e=s(vu);sie=n(Q0e,"STRONG",{});var pot=s(sie);x8o=r(pot,"roberta"),pot.forEach(t),$8o=r(Q0e," \u2014 "),wN=n(Q0e,"A",{href:!0});var _ot=s(wN);k8o=r(_ot,"RobertaForMaskedLM"),_ot.forEach(t),S8o=r(Q0e," (RoBERTa model)"),Q0e.forEach(t),R8o=i(O),Fu=n(O,"LI",{});var H0e=s(Fu);lie=n(H0e,"STRONG",{});var uot=s(lie);P8o=r(uot,"splinter"),uot.forEach(t),B8o=r(H0e," \u2014 "),AN=n(H0e,"A",{href:!0});var bot=s(AN);I8o=r(bot,"SplinterForPreTraining"),bot.forEach(t),q8o=r(H0e," (Splinter model)"),H0e.forEach(t),N8o=i(O),Tu=n(O,"LI",{});var U0e=s(Tu);iie=n(U0e,"STRONG",{});var vot=s(iie);j8o=r(vot,"squeezebert"),vot.forEach(t),D8o=r(U0e," \u2014 "),yN=n(U0e,"A",{href:!0});var Fot=s(yN);G8o=r(Fot,"SqueezeBertForMaskedLM"),Fot.forEach(t),O8o=r(U0e," (SqueezeBERT model)"),U0e.forEach(t),V8o=i(O),Mu=n(O,"LI",{});var J0e=s(Mu);die=n(J0e,"STRONG",{});var Tot=s(die);X8o=r(Tot,"t5"),Tot.forEach(t),z8o=r(J0e," \u2014 "),LN=n(J0e,"A",{href:!0});var Mot=s(LN);W8o=r(Mot,"T5ForConditionalGeneration"),Mot.forEach(t),Q8o=r(J0e," (T5 model)"),J0e.forEach(t),H8o=i(O),Eu=n(O,"LI",{});var Y0e=s(Eu);cie=n(Y0e,"STRONG",{});var Eot=s(cie);U8o=r(Eot,"tapas"),Eot.forEach(t),J8o=r(Y0e," \u2014 "),xN=n(Y0e,"A",{href:!0});var Cot=s(xN);Y8o=r(Cot,"TapasForMaskedLM"),Cot.forEach(t),K8o=r(Y0e," (TAPAS model)"),Y0e.forEach(t),Z8o=i(O),Cu=n(O,"LI",{});var K0e=s(Cu);fie=n(K0e,"STRONG",{});var wot=s(fie);e7o=r(wot,"transfo-xl"),wot.forEach(t),o7o=r(K0e," \u2014 "),$N=n(K0e,"A",{href:!0});var Aot=s($N);r7o=r(Aot,"TransfoXLLMHeadModel"),Aot.forEach(t),t7o=r(K0e," (Transformer-XL model)"),K0e.forEach(t),a7o=i(O),wu=n(O,"LI",{});var Z0e=s(wu);mie=n(Z0e,"STRONG",{});var yot=s(mie);n7o=r(yot,"unispeech"),yot.forEach(t),s7o=r(Z0e," \u2014 "),kN=n(Z0e,"A",{href:!0});var Lot=s(kN);l7o=r(Lot,"UniSpeechForPreTraining"),Lot.forEach(t),i7o=r(Z0e," (UniSpeech model)"),Z0e.forEach(t),d7o=i(O),Au=n(O,"LI",{});var e6e=s(Au);gie=n(e6e,"STRONG",{});var xot=s(gie);c7o=r(xot,"unispeech-sat"),xot.forEach(t),f7o=r(e6e," \u2014 "),SN=n(e6e,"A",{href:!0});var $ot=s(SN);m7o=r($ot,"UniSpeechSatForPreTraining"),$ot.forEach(t),g7o=r(e6e," (UniSpeechSat model)"),e6e.forEach(t),h7o=i(O),yu=n(O,"LI",{});var o6e=s(yu);hie=n(o6e,"STRONG",{});var kot=s(hie);p7o=r(kot,"visual_bert"),kot.forEach(t),_7o=r(o6e," \u2014 "),RN=n(o6e,"A",{href:!0});var Sot=s(RN);u7o=r(Sot,"VisualBertForPreTraining"),Sot.forEach(t),b7o=r(o6e," (VisualBert model)"),o6e.forEach(t),v7o=i(O),Lu=n(O,"LI",{});var r6e=s(Lu);pie=n(r6e,"STRONG",{});var Rot=s(pie);F7o=r(Rot,"vit_mae"),Rot.forEach(t),T7o=r(r6e," \u2014 "),PN=n(r6e,"A",{href:!0});var Pot=s(PN);M7o=r(Pot,"ViTMAEForPreTraining"),Pot.forEach(t),E7o=r(r6e," (ViTMAE model)"),r6e.forEach(t),C7o=i(O),xu=n(O,"LI",{});var t6e=s(xu);_ie=n(t6e,"STRONG",{});var Bot=s(_ie);w7o=r(Bot,"wav2vec2"),Bot.forEach(t),A7o=r(t6e," \u2014 "),BN=n(t6e,"A",{href:!0});var Iot=s(BN);y7o=r(Iot,"Wav2Vec2ForPreTraining"),Iot.forEach(t),L7o=r(t6e," (Wav2Vec2 model)"),t6e.forEach(t),x7o=i(O),$u=n(O,"LI",{});var a6e=s($u);uie=n(a6e,"STRONG",{});var qot=s(uie);$7o=r(qot,"wav2vec2-conformer"),qot.forEach(t),k7o=r(a6e," \u2014 "),IN=n(a6e,"A",{href:!0});var Not=s(IN);S7o=r(Not,"Wav2Vec2ConformerForPreTraining"),Not.forEach(t),R7o=r(a6e," (Wav2Vec2-Conformer model)"),a6e.forEach(t),P7o=i(O),ku=n(O,"LI",{});var n6e=s(ku);bie=n(n6e,"STRONG",{});var jot=s(bie);B7o=r(jot,"xlm"),jot.forEach(t),I7o=r(n6e," \u2014 "),qN=n(n6e,"A",{href:!0});var Dot=s(qN);q7o=r(Dot,"XLMWithLMHeadModel"),Dot.forEach(t),N7o=r(n6e," (XLM model)"),n6e.forEach(t),j7o=i(O),Su=n(O,"LI",{});var s6e=s(Su);vie=n(s6e,"STRONG",{});var Got=s(vie);D7o=r(Got,"xlm-roberta"),Got.forEach(t),G7o=r(s6e," \u2014 "),NN=n(s6e,"A",{href:!0});var Oot=s(NN);O7o=r(Oot,"XLMRobertaForMaskedLM"),Oot.forEach(t),V7o=r(s6e," (XLM-RoBERTa model)"),s6e.forEach(t),X7o=i(O),Ru=n(O,"LI",{});var l6e=s(Ru);Fie=n(l6e,"STRONG",{});var Vot=s(Fie);z7o=r(Vot,"xlm-roberta-xl"),Vot.forEach(t),W7o=r(l6e," \u2014 "),jN=n(l6e,"A",{href:!0});var Xot=s(jN);Q7o=r(Xot,"XLMRobertaXLForMaskedLM"),Xot.forEach(t),H7o=r(l6e," (XLM-RoBERTa-XL model)"),l6e.forEach(t),U7o=i(O),Pu=n(O,"LI",{});var i6e=s(Pu);Tie=n(i6e,"STRONG",{});var zot=s(Tie);J7o=r(zot,"xlnet"),zot.forEach(t),Y7o=r(i6e," \u2014 "),DN=n(i6e,"A",{href:!0});var Wot=s(DN);K7o=r(Wot,"XLNetLMHeadModel"),Wot.forEach(t),Z7o=r(i6e," (XLNet model)"),i6e.forEach(t),O.forEach(t),eMo=i(ra),Bu=n(ra,"P",{});var d6e=s(Bu);oMo=r(d6e,"The model is set in evaluation mode by default using "),Mie=n(d6e,"CODE",{});var Qot=s(Mie);rMo=r(Qot,"model.eval()"),Qot.forEach(t),tMo=r(d6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=n(d6e,"CODE",{});var Hot=s(Eie);aMo=r(Hot,"model.train()"),Hot.forEach(t),d6e.forEach(t),nMo=i(ra),T(Iu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),eqe=i(f),$i=n(f,"H2",{class:!0});var aje=s($i);qu=n(aje,"A",{id:!0,class:!0,href:!0});var Uot=s(qu);Cie=n(Uot,"SPAN",{});var Jot=s(Cie);T(W0.$$.fragment,Jot),Jot.forEach(t),Uot.forEach(t),sMo=i(aje),wie=n(aje,"SPAN",{});var Yot=s(wie);lMo=r(Yot,"AutoModelForCausalLM"),Yot.forEach(t),aje.forEach(t),oqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(Q0.$$.fragment,Os),iMo=i(Os),ki=n(Os,"P",{});var qK=s(ki);dMo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GN=n(qK,"A",{href:!0});var Kot=s(GN);cMo=r(Kot,"from_pretrained()"),Kot.forEach(t),fMo=r(qK," class method or the "),ON=n(qK,"A",{href:!0});var Zot=s(ON);mMo=r(Zot,"from_config()"),Zot.forEach(t),gMo=r(qK,` class
method.`),qK.forEach(t),hMo=i(Os),H0=n(Os,"P",{});var nje=s(H0);pMo=r(nje,"This class cannot be instantiated directly using "),Aie=n(nje,"CODE",{});var ert=s(Aie);_Mo=r(ert,"__init__()"),ert.forEach(t),uMo=r(nje," (throws an error)."),nje.forEach(t),bMo=i(Os),nt=n(Os,"DIV",{class:!0});var bw=s(nt);T(U0.$$.fragment,bw),vMo=i(bw),yie=n(bw,"P",{});var ort=s(yie);FMo=r(ort,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ort.forEach(t),TMo=i(bw),Si=n(bw,"P",{});var NK=s(Si);MMo=r(NK,`Note:
Loading a model from its configuration file does `),Lie=n(NK,"STRONG",{});var rrt=s(Lie);EMo=r(rrt,"not"),rrt.forEach(t),CMo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(NK,"A",{href:!0});var trt=s(VN);wMo=r(trt,"from_pretrained()"),trt.forEach(t),AMo=r(NK," to load the model weights."),NK.forEach(t),yMo=i(bw),T(Nu.$$.fragment,bw),bw.forEach(t),LMo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(J0.$$.fragment,ta),xMo=i(ta),xie=n(ta,"P",{});var art=s(xie);$Mo=r(art,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),art.forEach(t),kMo=i(ta),$a=n(ta,"P",{});var vw=s($a);SMo=r(vw,"The model class to instantiate is selected based on the "),$ie=n(vw,"CODE",{});var nrt=s($ie);RMo=r(nrt,"model_type"),nrt.forEach(t),PMo=r(vw,` property of the config object (either
passed as an argument or loaded from `),kie=n(vw,"CODE",{});var srt=s(kie);BMo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),IMo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n(vw,"CODE",{});var lrt=s(Sie);qMo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),NMo=r(vw,":"),vw.forEach(t),jMo=i(ta),z=n(ta,"UL",{});var Q=s(z);ju=n(Q,"LI",{});var c6e=s(ju);Rie=n(c6e,"STRONG",{});var irt=s(Rie);DMo=r(irt,"bart"),irt.forEach(t),GMo=r(c6e," \u2014 "),XN=n(c6e,"A",{href:!0});var drt=s(XN);OMo=r(drt,"BartForCausalLM"),drt.forEach(t),VMo=r(c6e," (BART model)"),c6e.forEach(t),XMo=i(Q),Du=n(Q,"LI",{});var f6e=s(Du);Pie=n(f6e,"STRONG",{});var crt=s(Pie);zMo=r(crt,"bert"),crt.forEach(t),WMo=r(f6e," \u2014 "),zN=n(f6e,"A",{href:!0});var frt=s(zN);QMo=r(frt,"BertLMHeadModel"),frt.forEach(t),HMo=r(f6e," (BERT model)"),f6e.forEach(t),UMo=i(Q),Gu=n(Q,"LI",{});var m6e=s(Gu);Bie=n(m6e,"STRONG",{});var mrt=s(Bie);JMo=r(mrt,"bert-generation"),mrt.forEach(t),YMo=r(m6e," \u2014 "),WN=n(m6e,"A",{href:!0});var grt=s(WN);KMo=r(grt,"BertGenerationDecoder"),grt.forEach(t),ZMo=r(m6e," (Bert Generation model)"),m6e.forEach(t),e4o=i(Q),Ou=n(Q,"LI",{});var g6e=s(Ou);Iie=n(g6e,"STRONG",{});var hrt=s(Iie);o4o=r(hrt,"big_bird"),hrt.forEach(t),r4o=r(g6e," \u2014 "),QN=n(g6e,"A",{href:!0});var prt=s(QN);t4o=r(prt,"BigBirdForCausalLM"),prt.forEach(t),a4o=r(g6e," (BigBird model)"),g6e.forEach(t),n4o=i(Q),Vu=n(Q,"LI",{});var h6e=s(Vu);qie=n(h6e,"STRONG",{});var _rt=s(qie);s4o=r(_rt,"bigbird_pegasus"),_rt.forEach(t),l4o=r(h6e," \u2014 "),HN=n(h6e,"A",{href:!0});var urt=s(HN);i4o=r(urt,"BigBirdPegasusForCausalLM"),urt.forEach(t),d4o=r(h6e," (BigBirdPegasus model)"),h6e.forEach(t),c4o=i(Q),Xu=n(Q,"LI",{});var p6e=s(Xu);Nie=n(p6e,"STRONG",{});var brt=s(Nie);f4o=r(brt,"blenderbot"),brt.forEach(t),m4o=r(p6e," \u2014 "),UN=n(p6e,"A",{href:!0});var vrt=s(UN);g4o=r(vrt,"BlenderbotForCausalLM"),vrt.forEach(t),h4o=r(p6e," (Blenderbot model)"),p6e.forEach(t),p4o=i(Q),zu=n(Q,"LI",{});var _6e=s(zu);jie=n(_6e,"STRONG",{});var Frt=s(jie);_4o=r(Frt,"blenderbot-small"),Frt.forEach(t),u4o=r(_6e," \u2014 "),JN=n(_6e,"A",{href:!0});var Trt=s(JN);b4o=r(Trt,"BlenderbotSmallForCausalLM"),Trt.forEach(t),v4o=r(_6e," (BlenderbotSmall model)"),_6e.forEach(t),F4o=i(Q),Wu=n(Q,"LI",{});var u6e=s(Wu);Die=n(u6e,"STRONG",{});var Mrt=s(Die);T4o=r(Mrt,"camembert"),Mrt.forEach(t),M4o=r(u6e," \u2014 "),YN=n(u6e,"A",{href:!0});var Ert=s(YN);E4o=r(Ert,"CamembertForCausalLM"),Ert.forEach(t),C4o=r(u6e," (CamemBERT model)"),u6e.forEach(t),w4o=i(Q),Qu=n(Q,"LI",{});var b6e=s(Qu);Gie=n(b6e,"STRONG",{});var Crt=s(Gie);A4o=r(Crt,"ctrl"),Crt.forEach(t),y4o=r(b6e," \u2014 "),KN=n(b6e,"A",{href:!0});var wrt=s(KN);L4o=r(wrt,"CTRLLMHeadModel"),wrt.forEach(t),x4o=r(b6e," (CTRL model)"),b6e.forEach(t),$4o=i(Q),Hu=n(Q,"LI",{});var v6e=s(Hu);Oie=n(v6e,"STRONG",{});var Art=s(Oie);k4o=r(Art,"data2vec-text"),Art.forEach(t),S4o=r(v6e," \u2014 "),ZN=n(v6e,"A",{href:!0});var yrt=s(ZN);R4o=r(yrt,"Data2VecTextForCausalLM"),yrt.forEach(t),P4o=r(v6e," (Data2VecText model)"),v6e.forEach(t),B4o=i(Q),Uu=n(Q,"LI",{});var F6e=s(Uu);Vie=n(F6e,"STRONG",{});var Lrt=s(Vie);I4o=r(Lrt,"electra"),Lrt.forEach(t),q4o=r(F6e," \u2014 "),ej=n(F6e,"A",{href:!0});var xrt=s(ej);N4o=r(xrt,"ElectraForCausalLM"),xrt.forEach(t),j4o=r(F6e," (ELECTRA model)"),F6e.forEach(t),D4o=i(Q),Ju=n(Q,"LI",{});var T6e=s(Ju);Xie=n(T6e,"STRONG",{});var $rt=s(Xie);G4o=r($rt,"gpt2"),$rt.forEach(t),O4o=r(T6e," \u2014 "),oj=n(T6e,"A",{href:!0});var krt=s(oj);V4o=r(krt,"GPT2LMHeadModel"),krt.forEach(t),X4o=r(T6e," (OpenAI GPT-2 model)"),T6e.forEach(t),z4o=i(Q),Yu=n(Q,"LI",{});var M6e=s(Yu);zie=n(M6e,"STRONG",{});var Srt=s(zie);W4o=r(Srt,"gpt_neo"),Srt.forEach(t),Q4o=r(M6e," \u2014 "),rj=n(M6e,"A",{href:!0});var Rrt=s(rj);H4o=r(Rrt,"GPTNeoForCausalLM"),Rrt.forEach(t),U4o=r(M6e," (GPT Neo model)"),M6e.forEach(t),J4o=i(Q),Ku=n(Q,"LI",{});var E6e=s(Ku);Wie=n(E6e,"STRONG",{});var Prt=s(Wie);Y4o=r(Prt,"gptj"),Prt.forEach(t),K4o=r(E6e," \u2014 "),tj=n(E6e,"A",{href:!0});var Brt=s(tj);Z4o=r(Brt,"GPTJForCausalLM"),Brt.forEach(t),eEo=r(E6e," (GPT-J model)"),E6e.forEach(t),oEo=i(Q),Zu=n(Q,"LI",{});var C6e=s(Zu);Qie=n(C6e,"STRONG",{});var Irt=s(Qie);rEo=r(Irt,"marian"),Irt.forEach(t),tEo=r(C6e," \u2014 "),aj=n(C6e,"A",{href:!0});var qrt=s(aj);aEo=r(qrt,"MarianForCausalLM"),qrt.forEach(t),nEo=r(C6e," (Marian model)"),C6e.forEach(t),sEo=i(Q),e1=n(Q,"LI",{});var w6e=s(e1);Hie=n(w6e,"STRONG",{});var Nrt=s(Hie);lEo=r(Nrt,"mbart"),Nrt.forEach(t),iEo=r(w6e," \u2014 "),nj=n(w6e,"A",{href:!0});var jrt=s(nj);dEo=r(jrt,"MBartForCausalLM"),jrt.forEach(t),cEo=r(w6e," (mBART model)"),w6e.forEach(t),fEo=i(Q),o1=n(Q,"LI",{});var A6e=s(o1);Uie=n(A6e,"STRONG",{});var Drt=s(Uie);mEo=r(Drt,"megatron-bert"),Drt.forEach(t),gEo=r(A6e," \u2014 "),sj=n(A6e,"A",{href:!0});var Grt=s(sj);hEo=r(Grt,"MegatronBertForCausalLM"),Grt.forEach(t),pEo=r(A6e," (MegatronBert model)"),A6e.forEach(t),_Eo=i(Q),r1=n(Q,"LI",{});var y6e=s(r1);Jie=n(y6e,"STRONG",{});var Ort=s(Jie);uEo=r(Ort,"openai-gpt"),Ort.forEach(t),bEo=r(y6e," \u2014 "),lj=n(y6e,"A",{href:!0});var Vrt=s(lj);vEo=r(Vrt,"OpenAIGPTLMHeadModel"),Vrt.forEach(t),FEo=r(y6e," (OpenAI GPT model)"),y6e.forEach(t),TEo=i(Q),t1=n(Q,"LI",{});var L6e=s(t1);Yie=n(L6e,"STRONG",{});var Xrt=s(Yie);MEo=r(Xrt,"opt"),Xrt.forEach(t),EEo=r(L6e," \u2014 "),ij=n(L6e,"A",{href:!0});var zrt=s(ij);CEo=r(zrt,"OPTForCausalLM"),zrt.forEach(t),wEo=r(L6e," (OPT model)"),L6e.forEach(t),AEo=i(Q),a1=n(Q,"LI",{});var x6e=s(a1);Kie=n(x6e,"STRONG",{});var Wrt=s(Kie);yEo=r(Wrt,"pegasus"),Wrt.forEach(t),LEo=r(x6e," \u2014 "),dj=n(x6e,"A",{href:!0});var Qrt=s(dj);xEo=r(Qrt,"PegasusForCausalLM"),Qrt.forEach(t),$Eo=r(x6e," (Pegasus model)"),x6e.forEach(t),kEo=i(Q),n1=n(Q,"LI",{});var $6e=s(n1);Zie=n($6e,"STRONG",{});var Hrt=s(Zie);SEo=r(Hrt,"plbart"),Hrt.forEach(t),REo=r($6e," \u2014 "),cj=n($6e,"A",{href:!0});var Urt=s(cj);PEo=r(Urt,"PLBartForCausalLM"),Urt.forEach(t),BEo=r($6e," (PLBart model)"),$6e.forEach(t),IEo=i(Q),s1=n(Q,"LI",{});var k6e=s(s1);ede=n(k6e,"STRONG",{});var Jrt=s(ede);qEo=r(Jrt,"prophetnet"),Jrt.forEach(t),NEo=r(k6e," \u2014 "),fj=n(k6e,"A",{href:!0});var Yrt=s(fj);jEo=r(Yrt,"ProphetNetForCausalLM"),Yrt.forEach(t),DEo=r(k6e," (ProphetNet model)"),k6e.forEach(t),GEo=i(Q),l1=n(Q,"LI",{});var S6e=s(l1);ode=n(S6e,"STRONG",{});var Krt=s(ode);OEo=r(Krt,"qdqbert"),Krt.forEach(t),VEo=r(S6e," \u2014 "),mj=n(S6e,"A",{href:!0});var Zrt=s(mj);XEo=r(Zrt,"QDQBertLMHeadModel"),Zrt.forEach(t),zEo=r(S6e," (QDQBert model)"),S6e.forEach(t),WEo=i(Q),i1=n(Q,"LI",{});var R6e=s(i1);rde=n(R6e,"STRONG",{});var ett=s(rde);QEo=r(ett,"reformer"),ett.forEach(t),HEo=r(R6e," \u2014 "),gj=n(R6e,"A",{href:!0});var ott=s(gj);UEo=r(ott,"ReformerModelWithLMHead"),ott.forEach(t),JEo=r(R6e," (Reformer model)"),R6e.forEach(t),YEo=i(Q),d1=n(Q,"LI",{});var P6e=s(d1);tde=n(P6e,"STRONG",{});var rtt=s(tde);KEo=r(rtt,"rembert"),rtt.forEach(t),ZEo=r(P6e," \u2014 "),hj=n(P6e,"A",{href:!0});var ttt=s(hj);eCo=r(ttt,"RemBertForCausalLM"),ttt.forEach(t),oCo=r(P6e," (RemBERT model)"),P6e.forEach(t),rCo=i(Q),c1=n(Q,"LI",{});var B6e=s(c1);ade=n(B6e,"STRONG",{});var att=s(ade);tCo=r(att,"roberta"),att.forEach(t),aCo=r(B6e," \u2014 "),pj=n(B6e,"A",{href:!0});var ntt=s(pj);nCo=r(ntt,"RobertaForCausalLM"),ntt.forEach(t),sCo=r(B6e," (RoBERTa model)"),B6e.forEach(t),lCo=i(Q),f1=n(Q,"LI",{});var I6e=s(f1);nde=n(I6e,"STRONG",{});var stt=s(nde);iCo=r(stt,"roformer"),stt.forEach(t),dCo=r(I6e," \u2014 "),_j=n(I6e,"A",{href:!0});var ltt=s(_j);cCo=r(ltt,"RoFormerForCausalLM"),ltt.forEach(t),fCo=r(I6e," (RoFormer model)"),I6e.forEach(t),mCo=i(Q),m1=n(Q,"LI",{});var q6e=s(m1);sde=n(q6e,"STRONG",{});var itt=s(sde);gCo=r(itt,"speech_to_text_2"),itt.forEach(t),hCo=r(q6e," \u2014 "),uj=n(q6e,"A",{href:!0});var dtt=s(uj);pCo=r(dtt,"Speech2Text2ForCausalLM"),dtt.forEach(t),_Co=r(q6e," (Speech2Text2 model)"),q6e.forEach(t),uCo=i(Q),g1=n(Q,"LI",{});var N6e=s(g1);lde=n(N6e,"STRONG",{});var ctt=s(lde);bCo=r(ctt,"transfo-xl"),ctt.forEach(t),vCo=r(N6e," \u2014 "),bj=n(N6e,"A",{href:!0});var ftt=s(bj);FCo=r(ftt,"TransfoXLLMHeadModel"),ftt.forEach(t),TCo=r(N6e," (Transformer-XL model)"),N6e.forEach(t),MCo=i(Q),h1=n(Q,"LI",{});var j6e=s(h1);ide=n(j6e,"STRONG",{});var mtt=s(ide);ECo=r(mtt,"trocr"),mtt.forEach(t),CCo=r(j6e," \u2014 "),vj=n(j6e,"A",{href:!0});var gtt=s(vj);wCo=r(gtt,"TrOCRForCausalLM"),gtt.forEach(t),ACo=r(j6e," (TrOCR model)"),j6e.forEach(t),yCo=i(Q),p1=n(Q,"LI",{});var D6e=s(p1);dde=n(D6e,"STRONG",{});var htt=s(dde);LCo=r(htt,"xglm"),htt.forEach(t),xCo=r(D6e," \u2014 "),Fj=n(D6e,"A",{href:!0});var ptt=s(Fj);$Co=r(ptt,"XGLMForCausalLM"),ptt.forEach(t),kCo=r(D6e," (XGLM model)"),D6e.forEach(t),SCo=i(Q),_1=n(Q,"LI",{});var G6e=s(_1);cde=n(G6e,"STRONG",{});var _tt=s(cde);RCo=r(_tt,"xlm"),_tt.forEach(t),PCo=r(G6e," \u2014 "),Tj=n(G6e,"A",{href:!0});var utt=s(Tj);BCo=r(utt,"XLMWithLMHeadModel"),utt.forEach(t),ICo=r(G6e," (XLM model)"),G6e.forEach(t),qCo=i(Q),u1=n(Q,"LI",{});var O6e=s(u1);fde=n(O6e,"STRONG",{});var btt=s(fde);NCo=r(btt,"xlm-prophetnet"),btt.forEach(t),jCo=r(O6e," \u2014 "),Mj=n(O6e,"A",{href:!0});var vtt=s(Mj);DCo=r(vtt,"XLMProphetNetForCausalLM"),vtt.forEach(t),GCo=r(O6e," (XLMProphetNet model)"),O6e.forEach(t),OCo=i(Q),b1=n(Q,"LI",{});var V6e=s(b1);mde=n(V6e,"STRONG",{});var Ftt=s(mde);VCo=r(Ftt,"xlm-roberta"),Ftt.forEach(t),XCo=r(V6e," \u2014 "),Ej=n(V6e,"A",{href:!0});var Ttt=s(Ej);zCo=r(Ttt,"XLMRobertaForCausalLM"),Ttt.forEach(t),WCo=r(V6e," (XLM-RoBERTa model)"),V6e.forEach(t),QCo=i(Q),v1=n(Q,"LI",{});var X6e=s(v1);gde=n(X6e,"STRONG",{});var Mtt=s(gde);HCo=r(Mtt,"xlm-roberta-xl"),Mtt.forEach(t),UCo=r(X6e," \u2014 "),Cj=n(X6e,"A",{href:!0});var Ett=s(Cj);JCo=r(Ett,"XLMRobertaXLForCausalLM"),Ett.forEach(t),YCo=r(X6e," (XLM-RoBERTa-XL model)"),X6e.forEach(t),KCo=i(Q),F1=n(Q,"LI",{});var z6e=s(F1);hde=n(z6e,"STRONG",{});var Ctt=s(hde);ZCo=r(Ctt,"xlnet"),Ctt.forEach(t),e5o=r(z6e," \u2014 "),wj=n(z6e,"A",{href:!0});var wtt=s(wj);o5o=r(wtt,"XLNetLMHeadModel"),wtt.forEach(t),r5o=r(z6e," (XLNet model)"),z6e.forEach(t),Q.forEach(t),t5o=i(ta),T1=n(ta,"P",{});var W6e=s(T1);a5o=r(W6e,"The model is set in evaluation mode by default using "),pde=n(W6e,"CODE",{});var Att=s(pde);n5o=r(Att,"model.eval()"),Att.forEach(t),s5o=r(W6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(W6e,"CODE",{});var ytt=s(_de);l5o=r(ytt,"model.train()"),ytt.forEach(t),W6e.forEach(t),i5o=i(ta),T(M1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),rqe=i(f),Ri=n(f,"H2",{class:!0});var sje=s(Ri);E1=n(sje,"A",{id:!0,class:!0,href:!0});var Ltt=s(E1);ude=n(Ltt,"SPAN",{});var xtt=s(ude);T(Y0.$$.fragment,xtt),xtt.forEach(t),Ltt.forEach(t),d5o=i(sje),bde=n(sje,"SPAN",{});var $tt=s(bde);c5o=r($tt,"AutoModelForMaskedLM"),$tt.forEach(t),sje.forEach(t),tqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(K0.$$.fragment,Vs),f5o=i(Vs),Pi=n(Vs,"P",{});var jK=s(Pi);m5o=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aj=n(jK,"A",{href:!0});var ktt=s(Aj);g5o=r(ktt,"from_pretrained()"),ktt.forEach(t),h5o=r(jK," class method or the "),yj=n(jK,"A",{href:!0});var Stt=s(yj);p5o=r(Stt,"from_config()"),Stt.forEach(t),_5o=r(jK,` class
method.`),jK.forEach(t),u5o=i(Vs),Z0=n(Vs,"P",{});var lje=s(Z0);b5o=r(lje,"This class cannot be instantiated directly using "),vde=n(lje,"CODE",{});var Rtt=s(vde);v5o=r(Rtt,"__init__()"),Rtt.forEach(t),F5o=r(lje," (throws an error)."),lje.forEach(t),T5o=i(Vs),st=n(Vs,"DIV",{class:!0});var Fw=s(st);T(e6.$$.fragment,Fw),M5o=i(Fw),Fde=n(Fw,"P",{});var Ptt=s(Fde);E5o=r(Ptt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ptt.forEach(t),C5o=i(Fw),Bi=n(Fw,"P",{});var DK=s(Bi);w5o=r(DK,`Note:
Loading a model from its configuration file does `),Tde=n(DK,"STRONG",{});var Btt=s(Tde);A5o=r(Btt,"not"),Btt.forEach(t),y5o=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=n(DK,"A",{href:!0});var Itt=s(Lj);L5o=r(Itt,"from_pretrained()"),Itt.forEach(t),x5o=r(DK," to load the model weights."),DK.forEach(t),$5o=i(Fw),T(C1.$$.fragment,Fw),Fw.forEach(t),k5o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(o6.$$.fragment,aa),S5o=i(aa),Mde=n(aa,"P",{});var qtt=s(Mde);R5o=r(qtt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qtt.forEach(t),P5o=i(aa),ka=n(aa,"P",{});var Tw=s(ka);B5o=r(Tw,"The model class to instantiate is selected based on the "),Ede=n(Tw,"CODE",{});var Ntt=s(Ede);I5o=r(Ntt,"model_type"),Ntt.forEach(t),q5o=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Cde=n(Tw,"CODE",{});var jtt=s(Cde);N5o=r(jtt,"pretrained_model_name_or_path"),jtt.forEach(t),j5o=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(Tw,"CODE",{});var Dtt=s(wde);D5o=r(Dtt,"pretrained_model_name_or_path"),Dtt.forEach(t),G5o=r(Tw,":"),Tw.forEach(t),O5o=i(aa),W=n(aa,"UL",{});var H=s(W);w1=n(H,"LI",{});var Q6e=s(w1);Ade=n(Q6e,"STRONG",{});var Gtt=s(Ade);V5o=r(Gtt,"albert"),Gtt.forEach(t),X5o=r(Q6e," \u2014 "),xj=n(Q6e,"A",{href:!0});var Ott=s(xj);z5o=r(Ott,"AlbertForMaskedLM"),Ott.forEach(t),W5o=r(Q6e," (ALBERT model)"),Q6e.forEach(t),Q5o=i(H),A1=n(H,"LI",{});var H6e=s(A1);yde=n(H6e,"STRONG",{});var Vtt=s(yde);H5o=r(Vtt,"bart"),Vtt.forEach(t),U5o=r(H6e," \u2014 "),$j=n(H6e,"A",{href:!0});var Xtt=s($j);J5o=r(Xtt,"BartForConditionalGeneration"),Xtt.forEach(t),Y5o=r(H6e," (BART model)"),H6e.forEach(t),K5o=i(H),y1=n(H,"LI",{});var U6e=s(y1);Lde=n(U6e,"STRONG",{});var ztt=s(Lde);Z5o=r(ztt,"bert"),ztt.forEach(t),ewo=r(U6e," \u2014 "),kj=n(U6e,"A",{href:!0});var Wtt=s(kj);owo=r(Wtt,"BertForMaskedLM"),Wtt.forEach(t),rwo=r(U6e," (BERT model)"),U6e.forEach(t),two=i(H),L1=n(H,"LI",{});var J6e=s(L1);xde=n(J6e,"STRONG",{});var Qtt=s(xde);awo=r(Qtt,"big_bird"),Qtt.forEach(t),nwo=r(J6e," \u2014 "),Sj=n(J6e,"A",{href:!0});var Htt=s(Sj);swo=r(Htt,"BigBirdForMaskedLM"),Htt.forEach(t),lwo=r(J6e," (BigBird model)"),J6e.forEach(t),iwo=i(H),x1=n(H,"LI",{});var Y6e=s(x1);$de=n(Y6e,"STRONG",{});var Utt=s($de);dwo=r(Utt,"camembert"),Utt.forEach(t),cwo=r(Y6e," \u2014 "),Rj=n(Y6e,"A",{href:!0});var Jtt=s(Rj);fwo=r(Jtt,"CamembertForMaskedLM"),Jtt.forEach(t),mwo=r(Y6e," (CamemBERT model)"),Y6e.forEach(t),gwo=i(H),$1=n(H,"LI",{});var K6e=s($1);kde=n(K6e,"STRONG",{});var Ytt=s(kde);hwo=r(Ytt,"convbert"),Ytt.forEach(t),pwo=r(K6e," \u2014 "),Pj=n(K6e,"A",{href:!0});var Ktt=s(Pj);_wo=r(Ktt,"ConvBertForMaskedLM"),Ktt.forEach(t),uwo=r(K6e," (ConvBERT model)"),K6e.forEach(t),bwo=i(H),k1=n(H,"LI",{});var Z6e=s(k1);Sde=n(Z6e,"STRONG",{});var Ztt=s(Sde);vwo=r(Ztt,"data2vec-text"),Ztt.forEach(t),Fwo=r(Z6e," \u2014 "),Bj=n(Z6e,"A",{href:!0});var eat=s(Bj);Two=r(eat,"Data2VecTextForMaskedLM"),eat.forEach(t),Mwo=r(Z6e," (Data2VecText model)"),Z6e.forEach(t),Ewo=i(H),S1=n(H,"LI",{});var eye=s(S1);Rde=n(eye,"STRONG",{});var oat=s(Rde);Cwo=r(oat,"deberta"),oat.forEach(t),wwo=r(eye," \u2014 "),Ij=n(eye,"A",{href:!0});var rat=s(Ij);Awo=r(rat,"DebertaForMaskedLM"),rat.forEach(t),ywo=r(eye," (DeBERTa model)"),eye.forEach(t),Lwo=i(H),R1=n(H,"LI",{});var oye=s(R1);Pde=n(oye,"STRONG",{});var tat=s(Pde);xwo=r(tat,"deberta-v2"),tat.forEach(t),$wo=r(oye," \u2014 "),qj=n(oye,"A",{href:!0});var aat=s(qj);kwo=r(aat,"DebertaV2ForMaskedLM"),aat.forEach(t),Swo=r(oye," (DeBERTa-v2 model)"),oye.forEach(t),Rwo=i(H),P1=n(H,"LI",{});var rye=s(P1);Bde=n(rye,"STRONG",{});var nat=s(Bde);Pwo=r(nat,"distilbert"),nat.forEach(t),Bwo=r(rye," \u2014 "),Nj=n(rye,"A",{href:!0});var sat=s(Nj);Iwo=r(sat,"DistilBertForMaskedLM"),sat.forEach(t),qwo=r(rye," (DistilBERT model)"),rye.forEach(t),Nwo=i(H),B1=n(H,"LI",{});var tye=s(B1);Ide=n(tye,"STRONG",{});var lat=s(Ide);jwo=r(lat,"electra"),lat.forEach(t),Dwo=r(tye," \u2014 "),jj=n(tye,"A",{href:!0});var iat=s(jj);Gwo=r(iat,"ElectraForMaskedLM"),iat.forEach(t),Owo=r(tye," (ELECTRA model)"),tye.forEach(t),Vwo=i(H),I1=n(H,"LI",{});var aye=s(I1);qde=n(aye,"STRONG",{});var dat=s(qde);Xwo=r(dat,"flaubert"),dat.forEach(t),zwo=r(aye," \u2014 "),Dj=n(aye,"A",{href:!0});var cat=s(Dj);Wwo=r(cat,"FlaubertWithLMHeadModel"),cat.forEach(t),Qwo=r(aye," (FlauBERT model)"),aye.forEach(t),Hwo=i(H),q1=n(H,"LI",{});var nye=s(q1);Nde=n(nye,"STRONG",{});var fat=s(Nde);Uwo=r(fat,"fnet"),fat.forEach(t),Jwo=r(nye," \u2014 "),Gj=n(nye,"A",{href:!0});var mat=s(Gj);Ywo=r(mat,"FNetForMaskedLM"),mat.forEach(t),Kwo=r(nye," (FNet model)"),nye.forEach(t),Zwo=i(H),N1=n(H,"LI",{});var sye=s(N1);jde=n(sye,"STRONG",{});var gat=s(jde);eAo=r(gat,"funnel"),gat.forEach(t),oAo=r(sye," \u2014 "),Oj=n(sye,"A",{href:!0});var hat=s(Oj);rAo=r(hat,"FunnelForMaskedLM"),hat.forEach(t),tAo=r(sye," (Funnel Transformer model)"),sye.forEach(t),aAo=i(H),j1=n(H,"LI",{});var lye=s(j1);Dde=n(lye,"STRONG",{});var pat=s(Dde);nAo=r(pat,"ibert"),pat.forEach(t),sAo=r(lye," \u2014 "),Vj=n(lye,"A",{href:!0});var _at=s(Vj);lAo=r(_at,"IBertForMaskedLM"),_at.forEach(t),iAo=r(lye," (I-BERT model)"),lye.forEach(t),dAo=i(H),D1=n(H,"LI",{});var iye=s(D1);Gde=n(iye,"STRONG",{});var uat=s(Gde);cAo=r(uat,"layoutlm"),uat.forEach(t),fAo=r(iye," \u2014 "),Xj=n(iye,"A",{href:!0});var bat=s(Xj);mAo=r(bat,"LayoutLMForMaskedLM"),bat.forEach(t),gAo=r(iye," (LayoutLM model)"),iye.forEach(t),hAo=i(H),G1=n(H,"LI",{});var dye=s(G1);Ode=n(dye,"STRONG",{});var vat=s(Ode);pAo=r(vat,"longformer"),vat.forEach(t),_Ao=r(dye," \u2014 "),zj=n(dye,"A",{href:!0});var Fat=s(zj);uAo=r(Fat,"LongformerForMaskedLM"),Fat.forEach(t),bAo=r(dye," (Longformer model)"),dye.forEach(t),vAo=i(H),O1=n(H,"LI",{});var cye=s(O1);Vde=n(cye,"STRONG",{});var Tat=s(Vde);FAo=r(Tat,"mbart"),Tat.forEach(t),TAo=r(cye," \u2014 "),Wj=n(cye,"A",{href:!0});var Mat=s(Wj);MAo=r(Mat,"MBartForConditionalGeneration"),Mat.forEach(t),EAo=r(cye," (mBART model)"),cye.forEach(t),CAo=i(H),V1=n(H,"LI",{});var fye=s(V1);Xde=n(fye,"STRONG",{});var Eat=s(Xde);wAo=r(Eat,"megatron-bert"),Eat.forEach(t),AAo=r(fye," \u2014 "),Qj=n(fye,"A",{href:!0});var Cat=s(Qj);yAo=r(Cat,"MegatronBertForMaskedLM"),Cat.forEach(t),LAo=r(fye," (MegatronBert model)"),fye.forEach(t),xAo=i(H),X1=n(H,"LI",{});var mye=s(X1);zde=n(mye,"STRONG",{});var wat=s(zde);$Ao=r(wat,"mobilebert"),wat.forEach(t),kAo=r(mye," \u2014 "),Hj=n(mye,"A",{href:!0});var Aat=s(Hj);SAo=r(Aat,"MobileBertForMaskedLM"),Aat.forEach(t),RAo=r(mye," (MobileBERT model)"),mye.forEach(t),PAo=i(H),z1=n(H,"LI",{});var gye=s(z1);Wde=n(gye,"STRONG",{});var yat=s(Wde);BAo=r(yat,"mpnet"),yat.forEach(t),IAo=r(gye," \u2014 "),Uj=n(gye,"A",{href:!0});var Lat=s(Uj);qAo=r(Lat,"MPNetForMaskedLM"),Lat.forEach(t),NAo=r(gye," (MPNet model)"),gye.forEach(t),jAo=i(H),W1=n(H,"LI",{});var hye=s(W1);Qde=n(hye,"STRONG",{});var xat=s(Qde);DAo=r(xat,"nystromformer"),xat.forEach(t),GAo=r(hye," \u2014 "),Jj=n(hye,"A",{href:!0});var $at=s(Jj);OAo=r($at,"NystromformerForMaskedLM"),$at.forEach(t),VAo=r(hye," (Nystromformer model)"),hye.forEach(t),XAo=i(H),Q1=n(H,"LI",{});var pye=s(Q1);Hde=n(pye,"STRONG",{});var kat=s(Hde);zAo=r(kat,"perceiver"),kat.forEach(t),WAo=r(pye," \u2014 "),Yj=n(pye,"A",{href:!0});var Sat=s(Yj);QAo=r(Sat,"PerceiverForMaskedLM"),Sat.forEach(t),HAo=r(pye," (Perceiver model)"),pye.forEach(t),UAo=i(H),H1=n(H,"LI",{});var _ye=s(H1);Ude=n(_ye,"STRONG",{});var Rat=s(Ude);JAo=r(Rat,"qdqbert"),Rat.forEach(t),YAo=r(_ye," \u2014 "),Kj=n(_ye,"A",{href:!0});var Pat=s(Kj);KAo=r(Pat,"QDQBertForMaskedLM"),Pat.forEach(t),ZAo=r(_ye," (QDQBert model)"),_ye.forEach(t),e0o=i(H),U1=n(H,"LI",{});var uye=s(U1);Jde=n(uye,"STRONG",{});var Bat=s(Jde);o0o=r(Bat,"reformer"),Bat.forEach(t),r0o=r(uye," \u2014 "),Zj=n(uye,"A",{href:!0});var Iat=s(Zj);t0o=r(Iat,"ReformerForMaskedLM"),Iat.forEach(t),a0o=r(uye," (Reformer model)"),uye.forEach(t),n0o=i(H),J1=n(H,"LI",{});var bye=s(J1);Yde=n(bye,"STRONG",{});var qat=s(Yde);s0o=r(qat,"rembert"),qat.forEach(t),l0o=r(bye," \u2014 "),eD=n(bye,"A",{href:!0});var Nat=s(eD);i0o=r(Nat,"RemBertForMaskedLM"),Nat.forEach(t),d0o=r(bye," (RemBERT model)"),bye.forEach(t),c0o=i(H),Y1=n(H,"LI",{});var vye=s(Y1);Kde=n(vye,"STRONG",{});var jat=s(Kde);f0o=r(jat,"roberta"),jat.forEach(t),m0o=r(vye," \u2014 "),oD=n(vye,"A",{href:!0});var Dat=s(oD);g0o=r(Dat,"RobertaForMaskedLM"),Dat.forEach(t),h0o=r(vye," (RoBERTa model)"),vye.forEach(t),p0o=i(H),K1=n(H,"LI",{});var Fye=s(K1);Zde=n(Fye,"STRONG",{});var Gat=s(Zde);_0o=r(Gat,"roformer"),Gat.forEach(t),u0o=r(Fye," \u2014 "),rD=n(Fye,"A",{href:!0});var Oat=s(rD);b0o=r(Oat,"RoFormerForMaskedLM"),Oat.forEach(t),v0o=r(Fye," (RoFormer model)"),Fye.forEach(t),F0o=i(H),Z1=n(H,"LI",{});var Tye=s(Z1);ece=n(Tye,"STRONG",{});var Vat=s(ece);T0o=r(Vat,"squeezebert"),Vat.forEach(t),M0o=r(Tye," \u2014 "),tD=n(Tye,"A",{href:!0});var Xat=s(tD);E0o=r(Xat,"SqueezeBertForMaskedLM"),Xat.forEach(t),C0o=r(Tye," (SqueezeBERT model)"),Tye.forEach(t),w0o=i(H),eb=n(H,"LI",{});var Mye=s(eb);oce=n(Mye,"STRONG",{});var zat=s(oce);A0o=r(zat,"tapas"),zat.forEach(t),y0o=r(Mye," \u2014 "),aD=n(Mye,"A",{href:!0});var Wat=s(aD);L0o=r(Wat,"TapasForMaskedLM"),Wat.forEach(t),x0o=r(Mye," (TAPAS model)"),Mye.forEach(t),$0o=i(H),ob=n(H,"LI",{});var Eye=s(ob);rce=n(Eye,"STRONG",{});var Qat=s(rce);k0o=r(Qat,"wav2vec2"),Qat.forEach(t),S0o=r(Eye," \u2014 "),tce=n(Eye,"CODE",{});var Hat=s(tce);R0o=r(Hat,"Wav2Vec2ForMaskedLM"),Hat.forEach(t),P0o=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),B0o=i(H),rb=n(H,"LI",{});var Cye=s(rb);ace=n(Cye,"STRONG",{});var Uat=s(ace);I0o=r(Uat,"xlm"),Uat.forEach(t),q0o=r(Cye," \u2014 "),nD=n(Cye,"A",{href:!0});var Jat=s(nD);N0o=r(Jat,"XLMWithLMHeadModel"),Jat.forEach(t),j0o=r(Cye," (XLM model)"),Cye.forEach(t),D0o=i(H),tb=n(H,"LI",{});var wye=s(tb);nce=n(wye,"STRONG",{});var Yat=s(nce);G0o=r(Yat,"xlm-roberta"),Yat.forEach(t),O0o=r(wye," \u2014 "),sD=n(wye,"A",{href:!0});var Kat=s(sD);V0o=r(Kat,"XLMRobertaForMaskedLM"),Kat.forEach(t),X0o=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),z0o=i(H),ab=n(H,"LI",{});var Aye=s(ab);sce=n(Aye,"STRONG",{});var Zat=s(sce);W0o=r(Zat,"xlm-roberta-xl"),Zat.forEach(t),Q0o=r(Aye," \u2014 "),lD=n(Aye,"A",{href:!0});var ent=s(lD);H0o=r(ent,"XLMRobertaXLForMaskedLM"),ent.forEach(t),U0o=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),J0o=i(H),nb=n(H,"LI",{});var yye=s(nb);lce=n(yye,"STRONG",{});var ont=s(lce);Y0o=r(ont,"yoso"),ont.forEach(t),K0o=r(yye," \u2014 "),iD=n(yye,"A",{href:!0});var rnt=s(iD);Z0o=r(rnt,"YosoForMaskedLM"),rnt.forEach(t),e6o=r(yye," (YOSO model)"),yye.forEach(t),H.forEach(t),o6o=i(aa),sb=n(aa,"P",{});var Lye=s(sb);r6o=r(Lye,"The model is set in evaluation mode by default using "),ice=n(Lye,"CODE",{});var tnt=s(ice);t6o=r(tnt,"model.eval()"),tnt.forEach(t),a6o=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(Lye,"CODE",{});var ant=s(dce);n6o=r(ant,"model.train()"),ant.forEach(t),Lye.forEach(t),s6o=i(aa),T(lb.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),aqe=i(f),Ii=n(f,"H2",{class:!0});var ije=s(Ii);ib=n(ije,"A",{id:!0,class:!0,href:!0});var nnt=s(ib);cce=n(nnt,"SPAN",{});var snt=s(cce);T(r6.$$.fragment,snt),snt.forEach(t),nnt.forEach(t),l6o=i(ije),fce=n(ije,"SPAN",{});var lnt=s(fce);i6o=r(lnt,"AutoModelForSeq2SeqLM"),lnt.forEach(t),ije.forEach(t),nqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(t6.$$.fragment,Xs),d6o=i(Xs),qi=n(Xs,"P",{});var GK=s(qi);c6o=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dD=n(GK,"A",{href:!0});var int=s(dD);f6o=r(int,"from_pretrained()"),int.forEach(t),m6o=r(GK," class method or the "),cD=n(GK,"A",{href:!0});var dnt=s(cD);g6o=r(dnt,"from_config()"),dnt.forEach(t),h6o=r(GK,` class
method.`),GK.forEach(t),p6o=i(Xs),a6=n(Xs,"P",{});var dje=s(a6);_6o=r(dje,"This class cannot be instantiated directly using "),mce=n(dje,"CODE",{});var cnt=s(mce);u6o=r(cnt,"__init__()"),cnt.forEach(t),b6o=r(dje," (throws an error)."),dje.forEach(t),v6o=i(Xs),lt=n(Xs,"DIV",{class:!0});var Mw=s(lt);T(n6.$$.fragment,Mw),F6o=i(Mw),gce=n(Mw,"P",{});var fnt=s(gce);T6o=r(fnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fnt.forEach(t),M6o=i(Mw),Ni=n(Mw,"P",{});var OK=s(Ni);E6o=r(OK,`Note:
Loading a model from its configuration file does `),hce=n(OK,"STRONG",{});var mnt=s(hce);C6o=r(mnt,"not"),mnt.forEach(t),w6o=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=n(OK,"A",{href:!0});var gnt=s(fD);A6o=r(gnt,"from_pretrained()"),gnt.forEach(t),y6o=r(OK," to load the model weights."),OK.forEach(t),L6o=i(Mw),T(db.$$.fragment,Mw),Mw.forEach(t),x6o=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(s6.$$.fragment,na),$6o=i(na),pce=n(na,"P",{});var hnt=s(pce);k6o=r(hnt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hnt.forEach(t),S6o=i(na),Sa=n(na,"P",{});var Ew=s(Sa);R6o=r(Ew,"The model class to instantiate is selected based on the "),_ce=n(Ew,"CODE",{});var pnt=s(_ce);P6o=r(pnt,"model_type"),pnt.forEach(t),B6o=r(Ew,` property of the config object (either
passed as an argument or loaded from `),uce=n(Ew,"CODE",{});var _nt=s(uce);I6o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),q6o=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(Ew,"CODE",{});var unt=s(bce);N6o=r(unt,"pretrained_model_name_or_path"),unt.forEach(t),j6o=r(Ew,":"),Ew.forEach(t),D6o=i(na),_e=n(na,"UL",{});var ve=s(_e);cb=n(ve,"LI",{});var xye=s(cb);vce=n(xye,"STRONG",{});var bnt=s(vce);G6o=r(bnt,"bart"),bnt.forEach(t),O6o=r(xye," \u2014 "),mD=n(xye,"A",{href:!0});var vnt=s(mD);V6o=r(vnt,"BartForConditionalGeneration"),vnt.forEach(t),X6o=r(xye," (BART model)"),xye.forEach(t),z6o=i(ve),fb=n(ve,"LI",{});var $ye=s(fb);Fce=n($ye,"STRONG",{});var Fnt=s(Fce);W6o=r(Fnt,"bigbird_pegasus"),Fnt.forEach(t),Q6o=r($ye," \u2014 "),gD=n($ye,"A",{href:!0});var Tnt=s(gD);H6o=r(Tnt,"BigBirdPegasusForConditionalGeneration"),Tnt.forEach(t),U6o=r($ye," (BigBirdPegasus model)"),$ye.forEach(t),J6o=i(ve),mb=n(ve,"LI",{});var kye=s(mb);Tce=n(kye,"STRONG",{});var Mnt=s(Tce);Y6o=r(Mnt,"blenderbot"),Mnt.forEach(t),K6o=r(kye," \u2014 "),hD=n(kye,"A",{href:!0});var Ent=s(hD);Z6o=r(Ent,"BlenderbotForConditionalGeneration"),Ent.forEach(t),eyo=r(kye," (Blenderbot model)"),kye.forEach(t),oyo=i(ve),gb=n(ve,"LI",{});var Sye=s(gb);Mce=n(Sye,"STRONG",{});var Cnt=s(Mce);ryo=r(Cnt,"blenderbot-small"),Cnt.forEach(t),tyo=r(Sye," \u2014 "),pD=n(Sye,"A",{href:!0});var wnt=s(pD);ayo=r(wnt,"BlenderbotSmallForConditionalGeneration"),wnt.forEach(t),nyo=r(Sye," (BlenderbotSmall model)"),Sye.forEach(t),syo=i(ve),hb=n(ve,"LI",{});var Rye=s(hb);Ece=n(Rye,"STRONG",{});var Ant=s(Ece);lyo=r(Ant,"encoder-decoder"),Ant.forEach(t),iyo=r(Rye," \u2014 "),_D=n(Rye,"A",{href:!0});var ynt=s(_D);dyo=r(ynt,"EncoderDecoderModel"),ynt.forEach(t),cyo=r(Rye," (Encoder decoder model)"),Rye.forEach(t),fyo=i(ve),pb=n(ve,"LI",{});var Pye=s(pb);Cce=n(Pye,"STRONG",{});var Lnt=s(Cce);myo=r(Lnt,"fsmt"),Lnt.forEach(t),gyo=r(Pye," \u2014 "),uD=n(Pye,"A",{href:!0});var xnt=s(uD);hyo=r(xnt,"FSMTForConditionalGeneration"),xnt.forEach(t),pyo=r(Pye," (FairSeq Machine-Translation model)"),Pye.forEach(t),_yo=i(ve),_b=n(ve,"LI",{});var Bye=s(_b);wce=n(Bye,"STRONG",{});var $nt=s(wce);uyo=r($nt,"led"),$nt.forEach(t),byo=r(Bye," \u2014 "),bD=n(Bye,"A",{href:!0});var knt=s(bD);vyo=r(knt,"LEDForConditionalGeneration"),knt.forEach(t),Fyo=r(Bye," (LED model)"),Bye.forEach(t),Tyo=i(ve),ub=n(ve,"LI",{});var Iye=s(ub);Ace=n(Iye,"STRONG",{});var Snt=s(Ace);Myo=r(Snt,"m2m_100"),Snt.forEach(t),Eyo=r(Iye," \u2014 "),vD=n(Iye,"A",{href:!0});var Rnt=s(vD);Cyo=r(Rnt,"M2M100ForConditionalGeneration"),Rnt.forEach(t),wyo=r(Iye," (M2M100 model)"),Iye.forEach(t),Ayo=i(ve),bb=n(ve,"LI",{});var qye=s(bb);yce=n(qye,"STRONG",{});var Pnt=s(yce);yyo=r(Pnt,"marian"),Pnt.forEach(t),Lyo=r(qye," \u2014 "),FD=n(qye,"A",{href:!0});var Bnt=s(FD);xyo=r(Bnt,"MarianMTModel"),Bnt.forEach(t),$yo=r(qye," (Marian model)"),qye.forEach(t),kyo=i(ve),vb=n(ve,"LI",{});var Nye=s(vb);Lce=n(Nye,"STRONG",{});var Int=s(Lce);Syo=r(Int,"mbart"),Int.forEach(t),Ryo=r(Nye," \u2014 "),TD=n(Nye,"A",{href:!0});var qnt=s(TD);Pyo=r(qnt,"MBartForConditionalGeneration"),qnt.forEach(t),Byo=r(Nye," (mBART model)"),Nye.forEach(t),Iyo=i(ve),Fb=n(ve,"LI",{});var jye=s(Fb);xce=n(jye,"STRONG",{});var Nnt=s(xce);qyo=r(Nnt,"mt5"),Nnt.forEach(t),Nyo=r(jye," \u2014 "),MD=n(jye,"A",{href:!0});var jnt=s(MD);jyo=r(jnt,"MT5ForConditionalGeneration"),jnt.forEach(t),Dyo=r(jye," (mT5 model)"),jye.forEach(t),Gyo=i(ve),Tb=n(ve,"LI",{});var Dye=s(Tb);$ce=n(Dye,"STRONG",{});var Dnt=s($ce);Oyo=r(Dnt,"pegasus"),Dnt.forEach(t),Vyo=r(Dye," \u2014 "),ED=n(Dye,"A",{href:!0});var Gnt=s(ED);Xyo=r(Gnt,"PegasusForConditionalGeneration"),Gnt.forEach(t),zyo=r(Dye," (Pegasus model)"),Dye.forEach(t),Wyo=i(ve),Mb=n(ve,"LI",{});var Gye=s(Mb);kce=n(Gye,"STRONG",{});var Ont=s(kce);Qyo=r(Ont,"plbart"),Ont.forEach(t),Hyo=r(Gye," \u2014 "),CD=n(Gye,"A",{href:!0});var Vnt=s(CD);Uyo=r(Vnt,"PLBartForConditionalGeneration"),Vnt.forEach(t),Jyo=r(Gye," (PLBart model)"),Gye.forEach(t),Yyo=i(ve),Eb=n(ve,"LI",{});var Oye=s(Eb);Sce=n(Oye,"STRONG",{});var Xnt=s(Sce);Kyo=r(Xnt,"prophetnet"),Xnt.forEach(t),Zyo=r(Oye," \u2014 "),wD=n(Oye,"A",{href:!0});var znt=s(wD);eLo=r(znt,"ProphetNetForConditionalGeneration"),znt.forEach(t),oLo=r(Oye," (ProphetNet model)"),Oye.forEach(t),rLo=i(ve),Cb=n(ve,"LI",{});var Vye=s(Cb);Rce=n(Vye,"STRONG",{});var Wnt=s(Rce);tLo=r(Wnt,"t5"),Wnt.forEach(t),aLo=r(Vye," \u2014 "),AD=n(Vye,"A",{href:!0});var Qnt=s(AD);nLo=r(Qnt,"T5ForConditionalGeneration"),Qnt.forEach(t),sLo=r(Vye," (T5 model)"),Vye.forEach(t),lLo=i(ve),wb=n(ve,"LI",{});var Xye=s(wb);Pce=n(Xye,"STRONG",{});var Hnt=s(Pce);iLo=r(Hnt,"xlm-prophetnet"),Hnt.forEach(t),dLo=r(Xye," \u2014 "),yD=n(Xye,"A",{href:!0});var Unt=s(yD);cLo=r(Unt,"XLMProphetNetForConditionalGeneration"),Unt.forEach(t),fLo=r(Xye," (XLMProphetNet model)"),Xye.forEach(t),ve.forEach(t),mLo=i(na),Ab=n(na,"P",{});var zye=s(Ab);gLo=r(zye,"The model is set in evaluation mode by default using "),Bce=n(zye,"CODE",{});var Jnt=s(Bce);hLo=r(Jnt,"model.eval()"),Jnt.forEach(t),pLo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(zye,"CODE",{});var Ynt=s(Ice);_Lo=r(Ynt,"model.train()"),Ynt.forEach(t),zye.forEach(t),uLo=i(na),T(yb.$$.fragment,na),na.forEach(t),Xs.forEach(t),sqe=i(f),ji=n(f,"H2",{class:!0});var cje=s(ji);Lb=n(cje,"A",{id:!0,class:!0,href:!0});var Knt=s(Lb);qce=n(Knt,"SPAN",{});var Znt=s(qce);T(l6.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),bLo=i(cje),Nce=n(cje,"SPAN",{});var est=s(Nce);vLo=r(est,"AutoModelForSequenceClassification"),est.forEach(t),cje.forEach(t),lqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(i6.$$.fragment,zs),FLo=i(zs),Di=n(zs,"P",{});var VK=s(Di);TLo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LD=n(VK,"A",{href:!0});var ost=s(LD);MLo=r(ost,"from_pretrained()"),ost.forEach(t),ELo=r(VK," class method or the "),xD=n(VK,"A",{href:!0});var rst=s(xD);CLo=r(rst,"from_config()"),rst.forEach(t),wLo=r(VK,` class
method.`),VK.forEach(t),ALo=i(zs),d6=n(zs,"P",{});var fje=s(d6);yLo=r(fje,"This class cannot be instantiated directly using "),jce=n(fje,"CODE",{});var tst=s(jce);LLo=r(tst,"__init__()"),tst.forEach(t),xLo=r(fje," (throws an error)."),fje.forEach(t),$Lo=i(zs),it=n(zs,"DIV",{class:!0});var Cw=s(it);T(c6.$$.fragment,Cw),kLo=i(Cw),Dce=n(Cw,"P",{});var ast=s(Dce);SLo=r(ast,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ast.forEach(t),RLo=i(Cw),Gi=n(Cw,"P",{});var XK=s(Gi);PLo=r(XK,`Note:
Loading a model from its configuration file does `),Gce=n(XK,"STRONG",{});var nst=s(Gce);BLo=r(nst,"not"),nst.forEach(t),ILo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(XK,"A",{href:!0});var sst=s($D);qLo=r(sst,"from_pretrained()"),sst.forEach(t),NLo=r(XK," to load the model weights."),XK.forEach(t),jLo=i(Cw),T(xb.$$.fragment,Cw),Cw.forEach(t),DLo=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(f6.$$.fragment,sa),GLo=i(sa),Oce=n(sa,"P",{});var lst=s(Oce);OLo=r(lst,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lst.forEach(t),VLo=i(sa),Ra=n(sa,"P",{});var ww=s(Ra);XLo=r(ww,"The model class to instantiate is selected based on the "),Vce=n(ww,"CODE",{});var ist=s(Vce);zLo=r(ist,"model_type"),ist.forEach(t),WLo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Xce=n(ww,"CODE",{});var dst=s(Xce);QLo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),HLo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(ww,"CODE",{});var cst=s(zce);ULo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),JLo=r(ww,":"),ww.forEach(t),YLo=i(sa),q=n(sa,"UL",{});var j=s(q);$b=n(j,"LI",{});var Wye=s($b);Wce=n(Wye,"STRONG",{});var fst=s(Wce);KLo=r(fst,"albert"),fst.forEach(t),ZLo=r(Wye," \u2014 "),kD=n(Wye,"A",{href:!0});var mst=s(kD);exo=r(mst,"AlbertForSequenceClassification"),mst.forEach(t),oxo=r(Wye," (ALBERT model)"),Wye.forEach(t),rxo=i(j),kb=n(j,"LI",{});var Qye=s(kb);Qce=n(Qye,"STRONG",{});var gst=s(Qce);txo=r(gst,"bart"),gst.forEach(t),axo=r(Qye," \u2014 "),SD=n(Qye,"A",{href:!0});var hst=s(SD);nxo=r(hst,"BartForSequenceClassification"),hst.forEach(t),sxo=r(Qye," (BART model)"),Qye.forEach(t),lxo=i(j),Sb=n(j,"LI",{});var Hye=s(Sb);Hce=n(Hye,"STRONG",{});var pst=s(Hce);ixo=r(pst,"bert"),pst.forEach(t),dxo=r(Hye," \u2014 "),RD=n(Hye,"A",{href:!0});var _st=s(RD);cxo=r(_st,"BertForSequenceClassification"),_st.forEach(t),fxo=r(Hye," (BERT model)"),Hye.forEach(t),mxo=i(j),Rb=n(j,"LI",{});var Uye=s(Rb);Uce=n(Uye,"STRONG",{});var ust=s(Uce);gxo=r(ust,"big_bird"),ust.forEach(t),hxo=r(Uye," \u2014 "),PD=n(Uye,"A",{href:!0});var bst=s(PD);pxo=r(bst,"BigBirdForSequenceClassification"),bst.forEach(t),_xo=r(Uye," (BigBird model)"),Uye.forEach(t),uxo=i(j),Pb=n(j,"LI",{});var Jye=s(Pb);Jce=n(Jye,"STRONG",{});var vst=s(Jce);bxo=r(vst,"bigbird_pegasus"),vst.forEach(t),vxo=r(Jye," \u2014 "),BD=n(Jye,"A",{href:!0});var Fst=s(BD);Fxo=r(Fst,"BigBirdPegasusForSequenceClassification"),Fst.forEach(t),Txo=r(Jye," (BigBirdPegasus model)"),Jye.forEach(t),Mxo=i(j),Bb=n(j,"LI",{});var Yye=s(Bb);Yce=n(Yye,"STRONG",{});var Tst=s(Yce);Exo=r(Tst,"camembert"),Tst.forEach(t),Cxo=r(Yye," \u2014 "),ID=n(Yye,"A",{href:!0});var Mst=s(ID);wxo=r(Mst,"CamembertForSequenceClassification"),Mst.forEach(t),Axo=r(Yye," (CamemBERT model)"),Yye.forEach(t),yxo=i(j),Ib=n(j,"LI",{});var Kye=s(Ib);Kce=n(Kye,"STRONG",{});var Est=s(Kce);Lxo=r(Est,"canine"),Est.forEach(t),xxo=r(Kye," \u2014 "),qD=n(Kye,"A",{href:!0});var Cst=s(qD);$xo=r(Cst,"CanineForSequenceClassification"),Cst.forEach(t),kxo=r(Kye," (Canine model)"),Kye.forEach(t),Sxo=i(j),qb=n(j,"LI",{});var Zye=s(qb);Zce=n(Zye,"STRONG",{});var wst=s(Zce);Rxo=r(wst,"convbert"),wst.forEach(t),Pxo=r(Zye," \u2014 "),ND=n(Zye,"A",{href:!0});var Ast=s(ND);Bxo=r(Ast,"ConvBertForSequenceClassification"),Ast.forEach(t),Ixo=r(Zye," (ConvBERT model)"),Zye.forEach(t),qxo=i(j),Nb=n(j,"LI",{});var eLe=s(Nb);efe=n(eLe,"STRONG",{});var yst=s(efe);Nxo=r(yst,"ctrl"),yst.forEach(t),jxo=r(eLe," \u2014 "),jD=n(eLe,"A",{href:!0});var Lst=s(jD);Dxo=r(Lst,"CTRLForSequenceClassification"),Lst.forEach(t),Gxo=r(eLe," (CTRL model)"),eLe.forEach(t),Oxo=i(j),jb=n(j,"LI",{});var oLe=s(jb);ofe=n(oLe,"STRONG",{});var xst=s(ofe);Vxo=r(xst,"data2vec-text"),xst.forEach(t),Xxo=r(oLe," \u2014 "),DD=n(oLe,"A",{href:!0});var $st=s(DD);zxo=r($st,"Data2VecTextForSequenceClassification"),$st.forEach(t),Wxo=r(oLe," (Data2VecText model)"),oLe.forEach(t),Qxo=i(j),Db=n(j,"LI",{});var rLe=s(Db);rfe=n(rLe,"STRONG",{});var kst=s(rfe);Hxo=r(kst,"deberta"),kst.forEach(t),Uxo=r(rLe," \u2014 "),GD=n(rLe,"A",{href:!0});var Sst=s(GD);Jxo=r(Sst,"DebertaForSequenceClassification"),Sst.forEach(t),Yxo=r(rLe," (DeBERTa model)"),rLe.forEach(t),Kxo=i(j),Gb=n(j,"LI",{});var tLe=s(Gb);tfe=n(tLe,"STRONG",{});var Rst=s(tfe);Zxo=r(Rst,"deberta-v2"),Rst.forEach(t),e9o=r(tLe," \u2014 "),OD=n(tLe,"A",{href:!0});var Pst=s(OD);o9o=r(Pst,"DebertaV2ForSequenceClassification"),Pst.forEach(t),r9o=r(tLe," (DeBERTa-v2 model)"),tLe.forEach(t),t9o=i(j),Ob=n(j,"LI",{});var aLe=s(Ob);afe=n(aLe,"STRONG",{});var Bst=s(afe);a9o=r(Bst,"distilbert"),Bst.forEach(t),n9o=r(aLe," \u2014 "),VD=n(aLe,"A",{href:!0});var Ist=s(VD);s9o=r(Ist,"DistilBertForSequenceClassification"),Ist.forEach(t),l9o=r(aLe," (DistilBERT model)"),aLe.forEach(t),i9o=i(j),Vb=n(j,"LI",{});var nLe=s(Vb);nfe=n(nLe,"STRONG",{});var qst=s(nfe);d9o=r(qst,"electra"),qst.forEach(t),c9o=r(nLe," \u2014 "),XD=n(nLe,"A",{href:!0});var Nst=s(XD);f9o=r(Nst,"ElectraForSequenceClassification"),Nst.forEach(t),m9o=r(nLe," (ELECTRA model)"),nLe.forEach(t),g9o=i(j),Xb=n(j,"LI",{});var sLe=s(Xb);sfe=n(sLe,"STRONG",{});var jst=s(sfe);h9o=r(jst,"flaubert"),jst.forEach(t),p9o=r(sLe," \u2014 "),zD=n(sLe,"A",{href:!0});var Dst=s(zD);_9o=r(Dst,"FlaubertForSequenceClassification"),Dst.forEach(t),u9o=r(sLe," (FlauBERT model)"),sLe.forEach(t),b9o=i(j),zb=n(j,"LI",{});var lLe=s(zb);lfe=n(lLe,"STRONG",{});var Gst=s(lfe);v9o=r(Gst,"fnet"),Gst.forEach(t),F9o=r(lLe," \u2014 "),WD=n(lLe,"A",{href:!0});var Ost=s(WD);T9o=r(Ost,"FNetForSequenceClassification"),Ost.forEach(t),M9o=r(lLe," (FNet model)"),lLe.forEach(t),E9o=i(j),Wb=n(j,"LI",{});var iLe=s(Wb);ife=n(iLe,"STRONG",{});var Vst=s(ife);C9o=r(Vst,"funnel"),Vst.forEach(t),w9o=r(iLe," \u2014 "),QD=n(iLe,"A",{href:!0});var Xst=s(QD);A9o=r(Xst,"FunnelForSequenceClassification"),Xst.forEach(t),y9o=r(iLe," (Funnel Transformer model)"),iLe.forEach(t),L9o=i(j),Qb=n(j,"LI",{});var dLe=s(Qb);dfe=n(dLe,"STRONG",{});var zst=s(dfe);x9o=r(zst,"gpt2"),zst.forEach(t),$9o=r(dLe," \u2014 "),HD=n(dLe,"A",{href:!0});var Wst=s(HD);k9o=r(Wst,"GPT2ForSequenceClassification"),Wst.forEach(t),S9o=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),R9o=i(j),Hb=n(j,"LI",{});var cLe=s(Hb);cfe=n(cLe,"STRONG",{});var Qst=s(cfe);P9o=r(Qst,"gpt_neo"),Qst.forEach(t),B9o=r(cLe," \u2014 "),UD=n(cLe,"A",{href:!0});var Hst=s(UD);I9o=r(Hst,"GPTNeoForSequenceClassification"),Hst.forEach(t),q9o=r(cLe," (GPT Neo model)"),cLe.forEach(t),N9o=i(j),Ub=n(j,"LI",{});var fLe=s(Ub);ffe=n(fLe,"STRONG",{});var Ust=s(ffe);j9o=r(Ust,"gptj"),Ust.forEach(t),D9o=r(fLe," \u2014 "),JD=n(fLe,"A",{href:!0});var Jst=s(JD);G9o=r(Jst,"GPTJForSequenceClassification"),Jst.forEach(t),O9o=r(fLe," (GPT-J model)"),fLe.forEach(t),V9o=i(j),Jb=n(j,"LI",{});var mLe=s(Jb);mfe=n(mLe,"STRONG",{});var Yst=s(mfe);X9o=r(Yst,"ibert"),Yst.forEach(t),z9o=r(mLe," \u2014 "),YD=n(mLe,"A",{href:!0});var Kst=s(YD);W9o=r(Kst,"IBertForSequenceClassification"),Kst.forEach(t),Q9o=r(mLe," (I-BERT model)"),mLe.forEach(t),H9o=i(j),Yb=n(j,"LI",{});var gLe=s(Yb);gfe=n(gLe,"STRONG",{});var Zst=s(gfe);U9o=r(Zst,"layoutlm"),Zst.forEach(t),J9o=r(gLe," \u2014 "),KD=n(gLe,"A",{href:!0});var elt=s(KD);Y9o=r(elt,"LayoutLMForSequenceClassification"),elt.forEach(t),K9o=r(gLe," (LayoutLM model)"),gLe.forEach(t),Z9o=i(j),Kb=n(j,"LI",{});var hLe=s(Kb);hfe=n(hLe,"STRONG",{});var olt=s(hfe);e$o=r(olt,"layoutlmv2"),olt.forEach(t),o$o=r(hLe," \u2014 "),ZD=n(hLe,"A",{href:!0});var rlt=s(ZD);r$o=r(rlt,"LayoutLMv2ForSequenceClassification"),rlt.forEach(t),t$o=r(hLe," (LayoutLMv2 model)"),hLe.forEach(t),a$o=i(j),Zb=n(j,"LI",{});var pLe=s(Zb);pfe=n(pLe,"STRONG",{});var tlt=s(pfe);n$o=r(tlt,"led"),tlt.forEach(t),s$o=r(pLe," \u2014 "),eG=n(pLe,"A",{href:!0});var alt=s(eG);l$o=r(alt,"LEDForSequenceClassification"),alt.forEach(t),i$o=r(pLe," (LED model)"),pLe.forEach(t),d$o=i(j),e2=n(j,"LI",{});var _Le=s(e2);_fe=n(_Le,"STRONG",{});var nlt=s(_fe);c$o=r(nlt,"longformer"),nlt.forEach(t),f$o=r(_Le," \u2014 "),oG=n(_Le,"A",{href:!0});var slt=s(oG);m$o=r(slt,"LongformerForSequenceClassification"),slt.forEach(t),g$o=r(_Le," (Longformer model)"),_Le.forEach(t),h$o=i(j),o2=n(j,"LI",{});var uLe=s(o2);ufe=n(uLe,"STRONG",{});var llt=s(ufe);p$o=r(llt,"mbart"),llt.forEach(t),_$o=r(uLe," \u2014 "),rG=n(uLe,"A",{href:!0});var ilt=s(rG);u$o=r(ilt,"MBartForSequenceClassification"),ilt.forEach(t),b$o=r(uLe," (mBART model)"),uLe.forEach(t),v$o=i(j),r2=n(j,"LI",{});var bLe=s(r2);bfe=n(bLe,"STRONG",{});var dlt=s(bfe);F$o=r(dlt,"megatron-bert"),dlt.forEach(t),T$o=r(bLe," \u2014 "),tG=n(bLe,"A",{href:!0});var clt=s(tG);M$o=r(clt,"MegatronBertForSequenceClassification"),clt.forEach(t),E$o=r(bLe," (MegatronBert model)"),bLe.forEach(t),C$o=i(j),t2=n(j,"LI",{});var vLe=s(t2);vfe=n(vLe,"STRONG",{});var flt=s(vfe);w$o=r(flt,"mobilebert"),flt.forEach(t),A$o=r(vLe," \u2014 "),aG=n(vLe,"A",{href:!0});var mlt=s(aG);y$o=r(mlt,"MobileBertForSequenceClassification"),mlt.forEach(t),L$o=r(vLe," (MobileBERT model)"),vLe.forEach(t),x$o=i(j),a2=n(j,"LI",{});var FLe=s(a2);Ffe=n(FLe,"STRONG",{});var glt=s(Ffe);$$o=r(glt,"mpnet"),glt.forEach(t),k$o=r(FLe," \u2014 "),nG=n(FLe,"A",{href:!0});var hlt=s(nG);S$o=r(hlt,"MPNetForSequenceClassification"),hlt.forEach(t),R$o=r(FLe," (MPNet model)"),FLe.forEach(t),P$o=i(j),n2=n(j,"LI",{});var TLe=s(n2);Tfe=n(TLe,"STRONG",{});var plt=s(Tfe);B$o=r(plt,"nystromformer"),plt.forEach(t),I$o=r(TLe," \u2014 "),sG=n(TLe,"A",{href:!0});var _lt=s(sG);q$o=r(_lt,"NystromformerForSequenceClassification"),_lt.forEach(t),N$o=r(TLe," (Nystromformer model)"),TLe.forEach(t),j$o=i(j),s2=n(j,"LI",{});var MLe=s(s2);Mfe=n(MLe,"STRONG",{});var ult=s(Mfe);D$o=r(ult,"openai-gpt"),ult.forEach(t),G$o=r(MLe," \u2014 "),lG=n(MLe,"A",{href:!0});var blt=s(lG);O$o=r(blt,"OpenAIGPTForSequenceClassification"),blt.forEach(t),V$o=r(MLe," (OpenAI GPT model)"),MLe.forEach(t),X$o=i(j),l2=n(j,"LI",{});var ELe=s(l2);Efe=n(ELe,"STRONG",{});var vlt=s(Efe);z$o=r(vlt,"perceiver"),vlt.forEach(t),W$o=r(ELe," \u2014 "),iG=n(ELe,"A",{href:!0});var Flt=s(iG);Q$o=r(Flt,"PerceiverForSequenceClassification"),Flt.forEach(t),H$o=r(ELe," (Perceiver model)"),ELe.forEach(t),U$o=i(j),i2=n(j,"LI",{});var CLe=s(i2);Cfe=n(CLe,"STRONG",{});var Tlt=s(Cfe);J$o=r(Tlt,"plbart"),Tlt.forEach(t),Y$o=r(CLe," \u2014 "),dG=n(CLe,"A",{href:!0});var Mlt=s(dG);K$o=r(Mlt,"PLBartForSequenceClassification"),Mlt.forEach(t),Z$o=r(CLe," (PLBart model)"),CLe.forEach(t),eko=i(j),d2=n(j,"LI",{});var wLe=s(d2);wfe=n(wLe,"STRONG",{});var Elt=s(wfe);oko=r(Elt,"qdqbert"),Elt.forEach(t),rko=r(wLe," \u2014 "),cG=n(wLe,"A",{href:!0});var Clt=s(cG);tko=r(Clt,"QDQBertForSequenceClassification"),Clt.forEach(t),ako=r(wLe," (QDQBert model)"),wLe.forEach(t),nko=i(j),c2=n(j,"LI",{});var ALe=s(c2);Afe=n(ALe,"STRONG",{});var wlt=s(Afe);sko=r(wlt,"reformer"),wlt.forEach(t),lko=r(ALe," \u2014 "),fG=n(ALe,"A",{href:!0});var Alt=s(fG);iko=r(Alt,"ReformerForSequenceClassification"),Alt.forEach(t),dko=r(ALe," (Reformer model)"),ALe.forEach(t),cko=i(j),f2=n(j,"LI",{});var yLe=s(f2);yfe=n(yLe,"STRONG",{});var ylt=s(yfe);fko=r(ylt,"rembert"),ylt.forEach(t),mko=r(yLe," \u2014 "),mG=n(yLe,"A",{href:!0});var Llt=s(mG);gko=r(Llt,"RemBertForSequenceClassification"),Llt.forEach(t),hko=r(yLe," (RemBERT model)"),yLe.forEach(t),pko=i(j),m2=n(j,"LI",{});var LLe=s(m2);Lfe=n(LLe,"STRONG",{});var xlt=s(Lfe);_ko=r(xlt,"roberta"),xlt.forEach(t),uko=r(LLe," \u2014 "),gG=n(LLe,"A",{href:!0});var $lt=s(gG);bko=r($lt,"RobertaForSequenceClassification"),$lt.forEach(t),vko=r(LLe," (RoBERTa model)"),LLe.forEach(t),Fko=i(j),g2=n(j,"LI",{});var xLe=s(g2);xfe=n(xLe,"STRONG",{});var klt=s(xfe);Tko=r(klt,"roformer"),klt.forEach(t),Mko=r(xLe," \u2014 "),hG=n(xLe,"A",{href:!0});var Slt=s(hG);Eko=r(Slt,"RoFormerForSequenceClassification"),Slt.forEach(t),Cko=r(xLe," (RoFormer model)"),xLe.forEach(t),wko=i(j),h2=n(j,"LI",{});var $Le=s(h2);$fe=n($Le,"STRONG",{});var Rlt=s($fe);Ako=r(Rlt,"squeezebert"),Rlt.forEach(t),yko=r($Le," \u2014 "),pG=n($Le,"A",{href:!0});var Plt=s(pG);Lko=r(Plt,"SqueezeBertForSequenceClassification"),Plt.forEach(t),xko=r($Le," (SqueezeBERT model)"),$Le.forEach(t),$ko=i(j),p2=n(j,"LI",{});var kLe=s(p2);kfe=n(kLe,"STRONG",{});var Blt=s(kfe);kko=r(Blt,"tapas"),Blt.forEach(t),Sko=r(kLe," \u2014 "),_G=n(kLe,"A",{href:!0});var Ilt=s(_G);Rko=r(Ilt,"TapasForSequenceClassification"),Ilt.forEach(t),Pko=r(kLe," (TAPAS model)"),kLe.forEach(t),Bko=i(j),_2=n(j,"LI",{});var SLe=s(_2);Sfe=n(SLe,"STRONG",{});var qlt=s(Sfe);Iko=r(qlt,"transfo-xl"),qlt.forEach(t),qko=r(SLe," \u2014 "),uG=n(SLe,"A",{href:!0});var Nlt=s(uG);Nko=r(Nlt,"TransfoXLForSequenceClassification"),Nlt.forEach(t),jko=r(SLe," (Transformer-XL model)"),SLe.forEach(t),Dko=i(j),u2=n(j,"LI",{});var RLe=s(u2);Rfe=n(RLe,"STRONG",{});var jlt=s(Rfe);Gko=r(jlt,"xlm"),jlt.forEach(t),Oko=r(RLe," \u2014 "),bG=n(RLe,"A",{href:!0});var Dlt=s(bG);Vko=r(Dlt,"XLMForSequenceClassification"),Dlt.forEach(t),Xko=r(RLe," (XLM model)"),RLe.forEach(t),zko=i(j),b2=n(j,"LI",{});var PLe=s(b2);Pfe=n(PLe,"STRONG",{});var Glt=s(Pfe);Wko=r(Glt,"xlm-roberta"),Glt.forEach(t),Qko=r(PLe," \u2014 "),vG=n(PLe,"A",{href:!0});var Olt=s(vG);Hko=r(Olt,"XLMRobertaForSequenceClassification"),Olt.forEach(t),Uko=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),Jko=i(j),v2=n(j,"LI",{});var BLe=s(v2);Bfe=n(BLe,"STRONG",{});var Vlt=s(Bfe);Yko=r(Vlt,"xlm-roberta-xl"),Vlt.forEach(t),Kko=r(BLe," \u2014 "),FG=n(BLe,"A",{href:!0});var Xlt=s(FG);Zko=r(Xlt,"XLMRobertaXLForSequenceClassification"),Xlt.forEach(t),eSo=r(BLe," (XLM-RoBERTa-XL model)"),BLe.forEach(t),oSo=i(j),F2=n(j,"LI",{});var ILe=s(F2);Ife=n(ILe,"STRONG",{});var zlt=s(Ife);rSo=r(zlt,"xlnet"),zlt.forEach(t),tSo=r(ILe," \u2014 "),TG=n(ILe,"A",{href:!0});var Wlt=s(TG);aSo=r(Wlt,"XLNetForSequenceClassification"),Wlt.forEach(t),nSo=r(ILe," (XLNet model)"),ILe.forEach(t),sSo=i(j),T2=n(j,"LI",{});var qLe=s(T2);qfe=n(qLe,"STRONG",{});var Qlt=s(qfe);lSo=r(Qlt,"yoso"),Qlt.forEach(t),iSo=r(qLe," \u2014 "),MG=n(qLe,"A",{href:!0});var Hlt=s(MG);dSo=r(Hlt,"YosoForSequenceClassification"),Hlt.forEach(t),cSo=r(qLe," (YOSO model)"),qLe.forEach(t),j.forEach(t),fSo=i(sa),M2=n(sa,"P",{});var NLe=s(M2);mSo=r(NLe,"The model is set in evaluation mode by default using "),Nfe=n(NLe,"CODE",{});var Ult=s(Nfe);gSo=r(Ult,"model.eval()"),Ult.forEach(t),hSo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(NLe,"CODE",{});var Jlt=s(jfe);pSo=r(Jlt,"model.train()"),Jlt.forEach(t),NLe.forEach(t),_So=i(sa),T(E2.$$.fragment,sa),sa.forEach(t),zs.forEach(t),iqe=i(f),Oi=n(f,"H2",{class:!0});var mje=s(Oi);C2=n(mje,"A",{id:!0,class:!0,href:!0});var Ylt=s(C2);Dfe=n(Ylt,"SPAN",{});var Klt=s(Dfe);T(m6.$$.fragment,Klt),Klt.forEach(t),Ylt.forEach(t),uSo=i(mje),Gfe=n(mje,"SPAN",{});var Zlt=s(Gfe);bSo=r(Zlt,"AutoModelForMultipleChoice"),Zlt.forEach(t),mje.forEach(t),dqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(g6.$$.fragment,Ws),vSo=i(Ws),Vi=n(Ws,"P",{});var zK=s(Vi);FSo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EG=n(zK,"A",{href:!0});var eit=s(EG);TSo=r(eit,"from_pretrained()"),eit.forEach(t),MSo=r(zK," class method or the "),CG=n(zK,"A",{href:!0});var oit=s(CG);ESo=r(oit,"from_config()"),oit.forEach(t),CSo=r(zK,` class
method.`),zK.forEach(t),wSo=i(Ws),h6=n(Ws,"P",{});var gje=s(h6);ASo=r(gje,"This class cannot be instantiated directly using "),Ofe=n(gje,"CODE",{});var rit=s(Ofe);ySo=r(rit,"__init__()"),rit.forEach(t),LSo=r(gje," (throws an error)."),gje.forEach(t),xSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var Aw=s(dt);T(p6.$$.fragment,Aw),$So=i(Aw),Vfe=n(Aw,"P",{});var tit=s(Vfe);kSo=r(tit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tit.forEach(t),SSo=i(Aw),Xi=n(Aw,"P",{});var WK=s(Xi);RSo=r(WK,`Note:
Loading a model from its configuration file does `),Xfe=n(WK,"STRONG",{});var ait=s(Xfe);PSo=r(ait,"not"),ait.forEach(t),BSo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(WK,"A",{href:!0});var nit=s(wG);ISo=r(nit,"from_pretrained()"),nit.forEach(t),qSo=r(WK," to load the model weights."),WK.forEach(t),NSo=i(Aw),T(w2.$$.fragment,Aw),Aw.forEach(t),jSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(_6.$$.fragment,la),DSo=i(la),zfe=n(la,"P",{});var sit=s(zfe);GSo=r(sit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sit.forEach(t),OSo=i(la),Pa=n(la,"P",{});var yw=s(Pa);VSo=r(yw,"The model class to instantiate is selected based on the "),Wfe=n(yw,"CODE",{});var lit=s(Wfe);XSo=r(lit,"model_type"),lit.forEach(t),zSo=r(yw,` property of the config object (either
passed as an argument or loaded from `),Qfe=n(yw,"CODE",{});var iit=s(Qfe);WSo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),QSo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(yw,"CODE",{});var dit=s(Hfe);HSo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),USo=r(yw,":"),yw.forEach(t),JSo=i(la),Y=n(la,"UL",{});var K=s(Y);A2=n(K,"LI",{});var jLe=s(A2);Ufe=n(jLe,"STRONG",{});var cit=s(Ufe);YSo=r(cit,"albert"),cit.forEach(t),KSo=r(jLe," \u2014 "),AG=n(jLe,"A",{href:!0});var fit=s(AG);ZSo=r(fit,"AlbertForMultipleChoice"),fit.forEach(t),eRo=r(jLe," (ALBERT model)"),jLe.forEach(t),oRo=i(K),y2=n(K,"LI",{});var DLe=s(y2);Jfe=n(DLe,"STRONG",{});var mit=s(Jfe);rRo=r(mit,"bert"),mit.forEach(t),tRo=r(DLe," \u2014 "),yG=n(DLe,"A",{href:!0});var git=s(yG);aRo=r(git,"BertForMultipleChoice"),git.forEach(t),nRo=r(DLe," (BERT model)"),DLe.forEach(t),sRo=i(K),L2=n(K,"LI",{});var GLe=s(L2);Yfe=n(GLe,"STRONG",{});var hit=s(Yfe);lRo=r(hit,"big_bird"),hit.forEach(t),iRo=r(GLe," \u2014 "),LG=n(GLe,"A",{href:!0});var pit=s(LG);dRo=r(pit,"BigBirdForMultipleChoice"),pit.forEach(t),cRo=r(GLe," (BigBird model)"),GLe.forEach(t),fRo=i(K),x2=n(K,"LI",{});var OLe=s(x2);Kfe=n(OLe,"STRONG",{});var _it=s(Kfe);mRo=r(_it,"camembert"),_it.forEach(t),gRo=r(OLe," \u2014 "),xG=n(OLe,"A",{href:!0});var uit=s(xG);hRo=r(uit,"CamembertForMultipleChoice"),uit.forEach(t),pRo=r(OLe," (CamemBERT model)"),OLe.forEach(t),_Ro=i(K),$2=n(K,"LI",{});var VLe=s($2);Zfe=n(VLe,"STRONG",{});var bit=s(Zfe);uRo=r(bit,"canine"),bit.forEach(t),bRo=r(VLe," \u2014 "),$G=n(VLe,"A",{href:!0});var vit=s($G);vRo=r(vit,"CanineForMultipleChoice"),vit.forEach(t),FRo=r(VLe," (Canine model)"),VLe.forEach(t),TRo=i(K),k2=n(K,"LI",{});var XLe=s(k2);eme=n(XLe,"STRONG",{});var Fit=s(eme);MRo=r(Fit,"convbert"),Fit.forEach(t),ERo=r(XLe," \u2014 "),kG=n(XLe,"A",{href:!0});var Tit=s(kG);CRo=r(Tit,"ConvBertForMultipleChoice"),Tit.forEach(t),wRo=r(XLe," (ConvBERT model)"),XLe.forEach(t),ARo=i(K),S2=n(K,"LI",{});var zLe=s(S2);ome=n(zLe,"STRONG",{});var Mit=s(ome);yRo=r(Mit,"data2vec-text"),Mit.forEach(t),LRo=r(zLe," \u2014 "),SG=n(zLe,"A",{href:!0});var Eit=s(SG);xRo=r(Eit,"Data2VecTextForMultipleChoice"),Eit.forEach(t),$Ro=r(zLe," (Data2VecText model)"),zLe.forEach(t),kRo=i(K),R2=n(K,"LI",{});var WLe=s(R2);rme=n(WLe,"STRONG",{});var Cit=s(rme);SRo=r(Cit,"deberta-v2"),Cit.forEach(t),RRo=r(WLe," \u2014 "),RG=n(WLe,"A",{href:!0});var wit=s(RG);PRo=r(wit,"DebertaV2ForMultipleChoice"),wit.forEach(t),BRo=r(WLe," (DeBERTa-v2 model)"),WLe.forEach(t),IRo=i(K),P2=n(K,"LI",{});var QLe=s(P2);tme=n(QLe,"STRONG",{});var Ait=s(tme);qRo=r(Ait,"distilbert"),Ait.forEach(t),NRo=r(QLe," \u2014 "),PG=n(QLe,"A",{href:!0});var yit=s(PG);jRo=r(yit,"DistilBertForMultipleChoice"),yit.forEach(t),DRo=r(QLe," (DistilBERT model)"),QLe.forEach(t),GRo=i(K),B2=n(K,"LI",{});var HLe=s(B2);ame=n(HLe,"STRONG",{});var Lit=s(ame);ORo=r(Lit,"electra"),Lit.forEach(t),VRo=r(HLe," \u2014 "),BG=n(HLe,"A",{href:!0});var xit=s(BG);XRo=r(xit,"ElectraForMultipleChoice"),xit.forEach(t),zRo=r(HLe," (ELECTRA model)"),HLe.forEach(t),WRo=i(K),I2=n(K,"LI",{});var ULe=s(I2);nme=n(ULe,"STRONG",{});var $it=s(nme);QRo=r($it,"flaubert"),$it.forEach(t),HRo=r(ULe," \u2014 "),IG=n(ULe,"A",{href:!0});var kit=s(IG);URo=r(kit,"FlaubertForMultipleChoice"),kit.forEach(t),JRo=r(ULe," (FlauBERT model)"),ULe.forEach(t),YRo=i(K),q2=n(K,"LI",{});var JLe=s(q2);sme=n(JLe,"STRONG",{});var Sit=s(sme);KRo=r(Sit,"fnet"),Sit.forEach(t),ZRo=r(JLe," \u2014 "),qG=n(JLe,"A",{href:!0});var Rit=s(qG);ePo=r(Rit,"FNetForMultipleChoice"),Rit.forEach(t),oPo=r(JLe," (FNet model)"),JLe.forEach(t),rPo=i(K),N2=n(K,"LI",{});var YLe=s(N2);lme=n(YLe,"STRONG",{});var Pit=s(lme);tPo=r(Pit,"funnel"),Pit.forEach(t),aPo=r(YLe," \u2014 "),NG=n(YLe,"A",{href:!0});var Bit=s(NG);nPo=r(Bit,"FunnelForMultipleChoice"),Bit.forEach(t),sPo=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),lPo=i(K),j2=n(K,"LI",{});var KLe=s(j2);ime=n(KLe,"STRONG",{});var Iit=s(ime);iPo=r(Iit,"ibert"),Iit.forEach(t),dPo=r(KLe," \u2014 "),jG=n(KLe,"A",{href:!0});var qit=s(jG);cPo=r(qit,"IBertForMultipleChoice"),qit.forEach(t),fPo=r(KLe," (I-BERT model)"),KLe.forEach(t),mPo=i(K),D2=n(K,"LI",{});var ZLe=s(D2);dme=n(ZLe,"STRONG",{});var Nit=s(dme);gPo=r(Nit,"longformer"),Nit.forEach(t),hPo=r(ZLe," \u2014 "),DG=n(ZLe,"A",{href:!0});var jit=s(DG);pPo=r(jit,"LongformerForMultipleChoice"),jit.forEach(t),_Po=r(ZLe," (Longformer model)"),ZLe.forEach(t),uPo=i(K),G2=n(K,"LI",{});var exe=s(G2);cme=n(exe,"STRONG",{});var Dit=s(cme);bPo=r(Dit,"megatron-bert"),Dit.forEach(t),vPo=r(exe," \u2014 "),GG=n(exe,"A",{href:!0});var Git=s(GG);FPo=r(Git,"MegatronBertForMultipleChoice"),Git.forEach(t),TPo=r(exe," (MegatronBert model)"),exe.forEach(t),MPo=i(K),O2=n(K,"LI",{});var oxe=s(O2);fme=n(oxe,"STRONG",{});var Oit=s(fme);EPo=r(Oit,"mobilebert"),Oit.forEach(t),CPo=r(oxe," \u2014 "),OG=n(oxe,"A",{href:!0});var Vit=s(OG);wPo=r(Vit,"MobileBertForMultipleChoice"),Vit.forEach(t),APo=r(oxe," (MobileBERT model)"),oxe.forEach(t),yPo=i(K),V2=n(K,"LI",{});var rxe=s(V2);mme=n(rxe,"STRONG",{});var Xit=s(mme);LPo=r(Xit,"mpnet"),Xit.forEach(t),xPo=r(rxe," \u2014 "),VG=n(rxe,"A",{href:!0});var zit=s(VG);$Po=r(zit,"MPNetForMultipleChoice"),zit.forEach(t),kPo=r(rxe," (MPNet model)"),rxe.forEach(t),SPo=i(K),X2=n(K,"LI",{});var txe=s(X2);gme=n(txe,"STRONG",{});var Wit=s(gme);RPo=r(Wit,"nystromformer"),Wit.forEach(t),PPo=r(txe," \u2014 "),XG=n(txe,"A",{href:!0});var Qit=s(XG);BPo=r(Qit,"NystromformerForMultipleChoice"),Qit.forEach(t),IPo=r(txe," (Nystromformer model)"),txe.forEach(t),qPo=i(K),z2=n(K,"LI",{});var axe=s(z2);hme=n(axe,"STRONG",{});var Hit=s(hme);NPo=r(Hit,"qdqbert"),Hit.forEach(t),jPo=r(axe," \u2014 "),zG=n(axe,"A",{href:!0});var Uit=s(zG);DPo=r(Uit,"QDQBertForMultipleChoice"),Uit.forEach(t),GPo=r(axe," (QDQBert model)"),axe.forEach(t),OPo=i(K),W2=n(K,"LI",{});var nxe=s(W2);pme=n(nxe,"STRONG",{});var Jit=s(pme);VPo=r(Jit,"rembert"),Jit.forEach(t),XPo=r(nxe," \u2014 "),WG=n(nxe,"A",{href:!0});var Yit=s(WG);zPo=r(Yit,"RemBertForMultipleChoice"),Yit.forEach(t),WPo=r(nxe," (RemBERT model)"),nxe.forEach(t),QPo=i(K),Q2=n(K,"LI",{});var sxe=s(Q2);_me=n(sxe,"STRONG",{});var Kit=s(_me);HPo=r(Kit,"roberta"),Kit.forEach(t),UPo=r(sxe," \u2014 "),QG=n(sxe,"A",{href:!0});var Zit=s(QG);JPo=r(Zit,"RobertaForMultipleChoice"),Zit.forEach(t),YPo=r(sxe," (RoBERTa model)"),sxe.forEach(t),KPo=i(K),H2=n(K,"LI",{});var lxe=s(H2);ume=n(lxe,"STRONG",{});var edt=s(ume);ZPo=r(edt,"roformer"),edt.forEach(t),eBo=r(lxe," \u2014 "),HG=n(lxe,"A",{href:!0});var odt=s(HG);oBo=r(odt,"RoFormerForMultipleChoice"),odt.forEach(t),rBo=r(lxe," (RoFormer model)"),lxe.forEach(t),tBo=i(K),U2=n(K,"LI",{});var ixe=s(U2);bme=n(ixe,"STRONG",{});var rdt=s(bme);aBo=r(rdt,"squeezebert"),rdt.forEach(t),nBo=r(ixe," \u2014 "),UG=n(ixe,"A",{href:!0});var tdt=s(UG);sBo=r(tdt,"SqueezeBertForMultipleChoice"),tdt.forEach(t),lBo=r(ixe," (SqueezeBERT model)"),ixe.forEach(t),iBo=i(K),J2=n(K,"LI",{});var dxe=s(J2);vme=n(dxe,"STRONG",{});var adt=s(vme);dBo=r(adt,"xlm"),adt.forEach(t),cBo=r(dxe," \u2014 "),JG=n(dxe,"A",{href:!0});var ndt=s(JG);fBo=r(ndt,"XLMForMultipleChoice"),ndt.forEach(t),mBo=r(dxe," (XLM model)"),dxe.forEach(t),gBo=i(K),Y2=n(K,"LI",{});var cxe=s(Y2);Fme=n(cxe,"STRONG",{});var sdt=s(Fme);hBo=r(sdt,"xlm-roberta"),sdt.forEach(t),pBo=r(cxe," \u2014 "),YG=n(cxe,"A",{href:!0});var ldt=s(YG);_Bo=r(ldt,"XLMRobertaForMultipleChoice"),ldt.forEach(t),uBo=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),bBo=i(K),K2=n(K,"LI",{});var fxe=s(K2);Tme=n(fxe,"STRONG",{});var idt=s(Tme);vBo=r(idt,"xlm-roberta-xl"),idt.forEach(t),FBo=r(fxe," \u2014 "),KG=n(fxe,"A",{href:!0});var ddt=s(KG);TBo=r(ddt,"XLMRobertaXLForMultipleChoice"),ddt.forEach(t),MBo=r(fxe," (XLM-RoBERTa-XL model)"),fxe.forEach(t),EBo=i(K),Z2=n(K,"LI",{});var mxe=s(Z2);Mme=n(mxe,"STRONG",{});var cdt=s(Mme);CBo=r(cdt,"xlnet"),cdt.forEach(t),wBo=r(mxe," \u2014 "),ZG=n(mxe,"A",{href:!0});var fdt=s(ZG);ABo=r(fdt,"XLNetForMultipleChoice"),fdt.forEach(t),yBo=r(mxe," (XLNet model)"),mxe.forEach(t),LBo=i(K),ev=n(K,"LI",{});var gxe=s(ev);Eme=n(gxe,"STRONG",{});var mdt=s(Eme);xBo=r(mdt,"yoso"),mdt.forEach(t),$Bo=r(gxe," \u2014 "),eO=n(gxe,"A",{href:!0});var gdt=s(eO);kBo=r(gdt,"YosoForMultipleChoice"),gdt.forEach(t),SBo=r(gxe," (YOSO model)"),gxe.forEach(t),K.forEach(t),RBo=i(la),ov=n(la,"P",{});var hxe=s(ov);PBo=r(hxe,"The model is set in evaluation mode by default using "),Cme=n(hxe,"CODE",{});var hdt=s(Cme);BBo=r(hdt,"model.eval()"),hdt.forEach(t),IBo=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(hxe,"CODE",{});var pdt=s(wme);qBo=r(pdt,"model.train()"),pdt.forEach(t),hxe.forEach(t),NBo=i(la),T(rv.$$.fragment,la),la.forEach(t),Ws.forEach(t),cqe=i(f),zi=n(f,"H2",{class:!0});var hje=s(zi);tv=n(hje,"A",{id:!0,class:!0,href:!0});var _dt=s(tv);Ame=n(_dt,"SPAN",{});var udt=s(Ame);T(u6.$$.fragment,udt),udt.forEach(t),_dt.forEach(t),jBo=i(hje),yme=n(hje,"SPAN",{});var bdt=s(yme);DBo=r(bdt,"AutoModelForNextSentencePrediction"),bdt.forEach(t),hje.forEach(t),fqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(b6.$$.fragment,Qs),GBo=i(Qs),Wi=n(Qs,"P",{});var QK=s(Wi);OBo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oO=n(QK,"A",{href:!0});var vdt=s(oO);VBo=r(vdt,"from_pretrained()"),vdt.forEach(t),XBo=r(QK," class method or the "),rO=n(QK,"A",{href:!0});var Fdt=s(rO);zBo=r(Fdt,"from_config()"),Fdt.forEach(t),WBo=r(QK,` class
method.`),QK.forEach(t),QBo=i(Qs),v6=n(Qs,"P",{});var pje=s(v6);HBo=r(pje,"This class cannot be instantiated directly using "),Lme=n(pje,"CODE",{});var Tdt=s(Lme);UBo=r(Tdt,"__init__()"),Tdt.forEach(t),JBo=r(pje," (throws an error)."),pje.forEach(t),YBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var Lw=s(ct);T(F6.$$.fragment,Lw),KBo=i(Lw),xme=n(Lw,"P",{});var Mdt=s(xme);ZBo=r(Mdt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mdt.forEach(t),eIo=i(Lw),Qi=n(Lw,"P",{});var HK=s(Qi);oIo=r(HK,`Note:
Loading a model from its configuration file does `),$me=n(HK,"STRONG",{});var Edt=s($me);rIo=r(Edt,"not"),Edt.forEach(t),tIo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(HK,"A",{href:!0});var Cdt=s(tO);aIo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),nIo=r(HK," to load the model weights."),HK.forEach(t),sIo=i(Lw),T(av.$$.fragment,Lw),Lw.forEach(t),lIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(T6.$$.fragment,ia),iIo=i(ia),kme=n(ia,"P",{});var wdt=s(kme);dIo=r(wdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wdt.forEach(t),cIo=i(ia),Ba=n(ia,"P",{});var xw=s(Ba);fIo=r(xw,"The model class to instantiate is selected based on the "),Sme=n(xw,"CODE",{});var Adt=s(Sme);mIo=r(Adt,"model_type"),Adt.forEach(t),gIo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Rme=n(xw,"CODE",{});var ydt=s(Rme);hIo=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),pIo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(xw,"CODE",{});var Ldt=s(Pme);_Io=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),uIo=r(xw,":"),xw.forEach(t),bIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);nv=n(Hs,"LI",{});var pxe=s(nv);Bme=n(pxe,"STRONG",{});var xdt=s(Bme);vIo=r(xdt,"bert"),xdt.forEach(t),FIo=r(pxe," \u2014 "),aO=n(pxe,"A",{href:!0});var $dt=s(aO);TIo=r($dt,"BertForNextSentencePrediction"),$dt.forEach(t),MIo=r(pxe," (BERT model)"),pxe.forEach(t),EIo=i(Hs),sv=n(Hs,"LI",{});var _xe=s(sv);Ime=n(_xe,"STRONG",{});var kdt=s(Ime);CIo=r(kdt,"fnet"),kdt.forEach(t),wIo=r(_xe," \u2014 "),nO=n(_xe,"A",{href:!0});var Sdt=s(nO);AIo=r(Sdt,"FNetForNextSentencePrediction"),Sdt.forEach(t),yIo=r(_xe," (FNet model)"),_xe.forEach(t),LIo=i(Hs),lv=n(Hs,"LI",{});var uxe=s(lv);qme=n(uxe,"STRONG",{});var Rdt=s(qme);xIo=r(Rdt,"megatron-bert"),Rdt.forEach(t),$Io=r(uxe," \u2014 "),sO=n(uxe,"A",{href:!0});var Pdt=s(sO);kIo=r(Pdt,"MegatronBertForNextSentencePrediction"),Pdt.forEach(t),SIo=r(uxe," (MegatronBert model)"),uxe.forEach(t),RIo=i(Hs),iv=n(Hs,"LI",{});var bxe=s(iv);Nme=n(bxe,"STRONG",{});var Bdt=s(Nme);PIo=r(Bdt,"mobilebert"),Bdt.forEach(t),BIo=r(bxe," \u2014 "),lO=n(bxe,"A",{href:!0});var Idt=s(lO);IIo=r(Idt,"MobileBertForNextSentencePrediction"),Idt.forEach(t),qIo=r(bxe," (MobileBERT model)"),bxe.forEach(t),NIo=i(Hs),dv=n(Hs,"LI",{});var vxe=s(dv);jme=n(vxe,"STRONG",{});var qdt=s(jme);jIo=r(qdt,"qdqbert"),qdt.forEach(t),DIo=r(vxe," \u2014 "),iO=n(vxe,"A",{href:!0});var Ndt=s(iO);GIo=r(Ndt,"QDQBertForNextSentencePrediction"),Ndt.forEach(t),OIo=r(vxe," (QDQBert model)"),vxe.forEach(t),Hs.forEach(t),VIo=i(ia),cv=n(ia,"P",{});var Fxe=s(cv);XIo=r(Fxe,"The model is set in evaluation mode by default using "),Dme=n(Fxe,"CODE",{});var jdt=s(Dme);zIo=r(jdt,"model.eval()"),jdt.forEach(t),WIo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=n(Fxe,"CODE",{});var Ddt=s(Gme);QIo=r(Ddt,"model.train()"),Ddt.forEach(t),Fxe.forEach(t),HIo=i(ia),T(fv.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),mqe=i(f),Hi=n(f,"H2",{class:!0});var _je=s(Hi);mv=n(_je,"A",{id:!0,class:!0,href:!0});var Gdt=s(mv);Ome=n(Gdt,"SPAN",{});var Odt=s(Ome);T(M6.$$.fragment,Odt),Odt.forEach(t),Gdt.forEach(t),UIo=i(_je),Vme=n(_je,"SPAN",{});var Vdt=s(Vme);JIo=r(Vdt,"AutoModelForTokenClassification"),Vdt.forEach(t),_je.forEach(t),gqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(E6.$$.fragment,Us),YIo=i(Us),Ui=n(Us,"P",{});var UK=s(Ui);KIo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dO=n(UK,"A",{href:!0});var Xdt=s(dO);ZIo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),eqo=r(UK," class method or the "),cO=n(UK,"A",{href:!0});var zdt=s(cO);oqo=r(zdt,"from_config()"),zdt.forEach(t),rqo=r(UK,` class
method.`),UK.forEach(t),tqo=i(Us),C6=n(Us,"P",{});var uje=s(C6);aqo=r(uje,"This class cannot be instantiated directly using "),Xme=n(uje,"CODE",{});var Wdt=s(Xme);nqo=r(Wdt,"__init__()"),Wdt.forEach(t),sqo=r(uje," (throws an error)."),uje.forEach(t),lqo=i(Us),ft=n(Us,"DIV",{class:!0});var $w=s(ft);T(w6.$$.fragment,$w),iqo=i($w),zme=n($w,"P",{});var Qdt=s(zme);dqo=r(Qdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qdt.forEach(t),cqo=i($w),Ji=n($w,"P",{});var JK=s(Ji);fqo=r(JK,`Note:
Loading a model from its configuration file does `),Wme=n(JK,"STRONG",{});var Hdt=s(Wme);mqo=r(Hdt,"not"),Hdt.forEach(t),gqo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(JK,"A",{href:!0});var Udt=s(fO);hqo=r(Udt,"from_pretrained()"),Udt.forEach(t),pqo=r(JK," to load the model weights."),JK.forEach(t),_qo=i($w),T(gv.$$.fragment,$w),$w.forEach(t),uqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(A6.$$.fragment,da),bqo=i(da),Qme=n(da,"P",{});var Jdt=s(Qme);vqo=r(Jdt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jdt.forEach(t),Fqo=i(da),Ia=n(da,"P",{});var kw=s(Ia);Tqo=r(kw,"The model class to instantiate is selected based on the "),Hme=n(kw,"CODE",{});var Ydt=s(Hme);Mqo=r(Ydt,"model_type"),Ydt.forEach(t),Eqo=r(kw,` property of the config object (either
passed as an argument or loaded from `),Ume=n(kw,"CODE",{});var Kdt=s(Ume);Cqo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),wqo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=n(kw,"CODE",{});var Zdt=s(Jme);Aqo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),yqo=r(kw,":"),kw.forEach(t),Lqo=i(da),U=n(da,"UL",{});var J=s(U);hv=n(J,"LI",{});var Txe=s(hv);Yme=n(Txe,"STRONG",{});var ect=s(Yme);xqo=r(ect,"albert"),ect.forEach(t),$qo=r(Txe," \u2014 "),mO=n(Txe,"A",{href:!0});var oct=s(mO);kqo=r(oct,"AlbertForTokenClassification"),oct.forEach(t),Sqo=r(Txe," (ALBERT model)"),Txe.forEach(t),Rqo=i(J),pv=n(J,"LI",{});var Mxe=s(pv);Kme=n(Mxe,"STRONG",{});var rct=s(Kme);Pqo=r(rct,"bert"),rct.forEach(t),Bqo=r(Mxe," \u2014 "),gO=n(Mxe,"A",{href:!0});var tct=s(gO);Iqo=r(tct,"BertForTokenClassification"),tct.forEach(t),qqo=r(Mxe," (BERT model)"),Mxe.forEach(t),Nqo=i(J),_v=n(J,"LI",{});var Exe=s(_v);Zme=n(Exe,"STRONG",{});var act=s(Zme);jqo=r(act,"big_bird"),act.forEach(t),Dqo=r(Exe," \u2014 "),hO=n(Exe,"A",{href:!0});var nct=s(hO);Gqo=r(nct,"BigBirdForTokenClassification"),nct.forEach(t),Oqo=r(Exe," (BigBird model)"),Exe.forEach(t),Vqo=i(J),uv=n(J,"LI",{});var Cxe=s(uv);ege=n(Cxe,"STRONG",{});var sct=s(ege);Xqo=r(sct,"camembert"),sct.forEach(t),zqo=r(Cxe," \u2014 "),pO=n(Cxe,"A",{href:!0});var lct=s(pO);Wqo=r(lct,"CamembertForTokenClassification"),lct.forEach(t),Qqo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),Hqo=i(J),bv=n(J,"LI",{});var wxe=s(bv);oge=n(wxe,"STRONG",{});var ict=s(oge);Uqo=r(ict,"canine"),ict.forEach(t),Jqo=r(wxe," \u2014 "),_O=n(wxe,"A",{href:!0});var dct=s(_O);Yqo=r(dct,"CanineForTokenClassification"),dct.forEach(t),Kqo=r(wxe," (Canine model)"),wxe.forEach(t),Zqo=i(J),vv=n(J,"LI",{});var Axe=s(vv);rge=n(Axe,"STRONG",{});var cct=s(rge);eNo=r(cct,"convbert"),cct.forEach(t),oNo=r(Axe," \u2014 "),uO=n(Axe,"A",{href:!0});var fct=s(uO);rNo=r(fct,"ConvBertForTokenClassification"),fct.forEach(t),tNo=r(Axe," (ConvBERT model)"),Axe.forEach(t),aNo=i(J),Fv=n(J,"LI",{});var yxe=s(Fv);tge=n(yxe,"STRONG",{});var mct=s(tge);nNo=r(mct,"data2vec-text"),mct.forEach(t),sNo=r(yxe," \u2014 "),bO=n(yxe,"A",{href:!0});var gct=s(bO);lNo=r(gct,"Data2VecTextForTokenClassification"),gct.forEach(t),iNo=r(yxe," (Data2VecText model)"),yxe.forEach(t),dNo=i(J),Tv=n(J,"LI",{});var Lxe=s(Tv);age=n(Lxe,"STRONG",{});var hct=s(age);cNo=r(hct,"deberta"),hct.forEach(t),fNo=r(Lxe," \u2014 "),vO=n(Lxe,"A",{href:!0});var pct=s(vO);mNo=r(pct,"DebertaForTokenClassification"),pct.forEach(t),gNo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),hNo=i(J),Mv=n(J,"LI",{});var xxe=s(Mv);nge=n(xxe,"STRONG",{});var _ct=s(nge);pNo=r(_ct,"deberta-v2"),_ct.forEach(t),_No=r(xxe," \u2014 "),FO=n(xxe,"A",{href:!0});var uct=s(FO);uNo=r(uct,"DebertaV2ForTokenClassification"),uct.forEach(t),bNo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),vNo=i(J),Ev=n(J,"LI",{});var $xe=s(Ev);sge=n($xe,"STRONG",{});var bct=s(sge);FNo=r(bct,"distilbert"),bct.forEach(t),TNo=r($xe," \u2014 "),TO=n($xe,"A",{href:!0});var vct=s(TO);MNo=r(vct,"DistilBertForTokenClassification"),vct.forEach(t),ENo=r($xe," (DistilBERT model)"),$xe.forEach(t),CNo=i(J),Cv=n(J,"LI",{});var kxe=s(Cv);lge=n(kxe,"STRONG",{});var Fct=s(lge);wNo=r(Fct,"electra"),Fct.forEach(t),ANo=r(kxe," \u2014 "),MO=n(kxe,"A",{href:!0});var Tct=s(MO);yNo=r(Tct,"ElectraForTokenClassification"),Tct.forEach(t),LNo=r(kxe," (ELECTRA model)"),kxe.forEach(t),xNo=i(J),wv=n(J,"LI",{});var Sxe=s(wv);ige=n(Sxe,"STRONG",{});var Mct=s(ige);$No=r(Mct,"flaubert"),Mct.forEach(t),kNo=r(Sxe," \u2014 "),EO=n(Sxe,"A",{href:!0});var Ect=s(EO);SNo=r(Ect,"FlaubertForTokenClassification"),Ect.forEach(t),RNo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),PNo=i(J),Av=n(J,"LI",{});var Rxe=s(Av);dge=n(Rxe,"STRONG",{});var Cct=s(dge);BNo=r(Cct,"fnet"),Cct.forEach(t),INo=r(Rxe," \u2014 "),CO=n(Rxe,"A",{href:!0});var wct=s(CO);qNo=r(wct,"FNetForTokenClassification"),wct.forEach(t),NNo=r(Rxe," (FNet model)"),Rxe.forEach(t),jNo=i(J),yv=n(J,"LI",{});var Pxe=s(yv);cge=n(Pxe,"STRONG",{});var Act=s(cge);DNo=r(Act,"funnel"),Act.forEach(t),GNo=r(Pxe," \u2014 "),wO=n(Pxe,"A",{href:!0});var yct=s(wO);ONo=r(yct,"FunnelForTokenClassification"),yct.forEach(t),VNo=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),XNo=i(J),Lv=n(J,"LI",{});var Bxe=s(Lv);fge=n(Bxe,"STRONG",{});var Lct=s(fge);zNo=r(Lct,"gpt2"),Lct.forEach(t),WNo=r(Bxe," \u2014 "),AO=n(Bxe,"A",{href:!0});var xct=s(AO);QNo=r(xct,"GPT2ForTokenClassification"),xct.forEach(t),HNo=r(Bxe," (OpenAI GPT-2 model)"),Bxe.forEach(t),UNo=i(J),xv=n(J,"LI",{});var Ixe=s(xv);mge=n(Ixe,"STRONG",{});var $ct=s(mge);JNo=r($ct,"ibert"),$ct.forEach(t),YNo=r(Ixe," \u2014 "),yO=n(Ixe,"A",{href:!0});var kct=s(yO);KNo=r(kct,"IBertForTokenClassification"),kct.forEach(t),ZNo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),ejo=i(J),$v=n(J,"LI",{});var qxe=s($v);gge=n(qxe,"STRONG",{});var Sct=s(gge);ojo=r(Sct,"layoutlm"),Sct.forEach(t),rjo=r(qxe," \u2014 "),LO=n(qxe,"A",{href:!0});var Rct=s(LO);tjo=r(Rct,"LayoutLMForTokenClassification"),Rct.forEach(t),ajo=r(qxe," (LayoutLM model)"),qxe.forEach(t),njo=i(J),kv=n(J,"LI",{});var Nxe=s(kv);hge=n(Nxe,"STRONG",{});var Pct=s(hge);sjo=r(Pct,"layoutlmv2"),Pct.forEach(t),ljo=r(Nxe," \u2014 "),xO=n(Nxe,"A",{href:!0});var Bct=s(xO);ijo=r(Bct,"LayoutLMv2ForTokenClassification"),Bct.forEach(t),djo=r(Nxe," (LayoutLMv2 model)"),Nxe.forEach(t),cjo=i(J),Sv=n(J,"LI",{});var jxe=s(Sv);pge=n(jxe,"STRONG",{});var Ict=s(pge);fjo=r(Ict,"longformer"),Ict.forEach(t),mjo=r(jxe," \u2014 "),$O=n(jxe,"A",{href:!0});var qct=s($O);gjo=r(qct,"LongformerForTokenClassification"),qct.forEach(t),hjo=r(jxe," (Longformer model)"),jxe.forEach(t),pjo=i(J),Rv=n(J,"LI",{});var Dxe=s(Rv);_ge=n(Dxe,"STRONG",{});var Nct=s(_ge);_jo=r(Nct,"megatron-bert"),Nct.forEach(t),ujo=r(Dxe," \u2014 "),kO=n(Dxe,"A",{href:!0});var jct=s(kO);bjo=r(jct,"MegatronBertForTokenClassification"),jct.forEach(t),vjo=r(Dxe," (MegatronBert model)"),Dxe.forEach(t),Fjo=i(J),Pv=n(J,"LI",{});var Gxe=s(Pv);uge=n(Gxe,"STRONG",{});var Dct=s(uge);Tjo=r(Dct,"mobilebert"),Dct.forEach(t),Mjo=r(Gxe," \u2014 "),SO=n(Gxe,"A",{href:!0});var Gct=s(SO);Ejo=r(Gct,"MobileBertForTokenClassification"),Gct.forEach(t),Cjo=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),wjo=i(J),Bv=n(J,"LI",{});var Oxe=s(Bv);bge=n(Oxe,"STRONG",{});var Oct=s(bge);Ajo=r(Oct,"mpnet"),Oct.forEach(t),yjo=r(Oxe," \u2014 "),RO=n(Oxe,"A",{href:!0});var Vct=s(RO);Ljo=r(Vct,"MPNetForTokenClassification"),Vct.forEach(t),xjo=r(Oxe," (MPNet model)"),Oxe.forEach(t),$jo=i(J),Iv=n(J,"LI",{});var Vxe=s(Iv);vge=n(Vxe,"STRONG",{});var Xct=s(vge);kjo=r(Xct,"nystromformer"),Xct.forEach(t),Sjo=r(Vxe," \u2014 "),PO=n(Vxe,"A",{href:!0});var zct=s(PO);Rjo=r(zct,"NystromformerForTokenClassification"),zct.forEach(t),Pjo=r(Vxe," (Nystromformer model)"),Vxe.forEach(t),Bjo=i(J),qv=n(J,"LI",{});var Xxe=s(qv);Fge=n(Xxe,"STRONG",{});var Wct=s(Fge);Ijo=r(Wct,"qdqbert"),Wct.forEach(t),qjo=r(Xxe," \u2014 "),BO=n(Xxe,"A",{href:!0});var Qct=s(BO);Njo=r(Qct,"QDQBertForTokenClassification"),Qct.forEach(t),jjo=r(Xxe," (QDQBert model)"),Xxe.forEach(t),Djo=i(J),Nv=n(J,"LI",{});var zxe=s(Nv);Tge=n(zxe,"STRONG",{});var Hct=s(Tge);Gjo=r(Hct,"rembert"),Hct.forEach(t),Ojo=r(zxe," \u2014 "),IO=n(zxe,"A",{href:!0});var Uct=s(IO);Vjo=r(Uct,"RemBertForTokenClassification"),Uct.forEach(t),Xjo=r(zxe," (RemBERT model)"),zxe.forEach(t),zjo=i(J),jv=n(J,"LI",{});var Wxe=s(jv);Mge=n(Wxe,"STRONG",{});var Jct=s(Mge);Wjo=r(Jct,"roberta"),Jct.forEach(t),Qjo=r(Wxe," \u2014 "),qO=n(Wxe,"A",{href:!0});var Yct=s(qO);Hjo=r(Yct,"RobertaForTokenClassification"),Yct.forEach(t),Ujo=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),Jjo=i(J),Dv=n(J,"LI",{});var Qxe=s(Dv);Ege=n(Qxe,"STRONG",{});var Kct=s(Ege);Yjo=r(Kct,"roformer"),Kct.forEach(t),Kjo=r(Qxe," \u2014 "),NO=n(Qxe,"A",{href:!0});var Zct=s(NO);Zjo=r(Zct,"RoFormerForTokenClassification"),Zct.forEach(t),eDo=r(Qxe," (RoFormer model)"),Qxe.forEach(t),oDo=i(J),Gv=n(J,"LI",{});var Hxe=s(Gv);Cge=n(Hxe,"STRONG",{});var eft=s(Cge);rDo=r(eft,"squeezebert"),eft.forEach(t),tDo=r(Hxe," \u2014 "),jO=n(Hxe,"A",{href:!0});var oft=s(jO);aDo=r(oft,"SqueezeBertForTokenClassification"),oft.forEach(t),nDo=r(Hxe," (SqueezeBERT model)"),Hxe.forEach(t),sDo=i(J),Ov=n(J,"LI",{});var Uxe=s(Ov);wge=n(Uxe,"STRONG",{});var rft=s(wge);lDo=r(rft,"xlm"),rft.forEach(t),iDo=r(Uxe," \u2014 "),DO=n(Uxe,"A",{href:!0});var tft=s(DO);dDo=r(tft,"XLMForTokenClassification"),tft.forEach(t),cDo=r(Uxe," (XLM model)"),Uxe.forEach(t),fDo=i(J),Vv=n(J,"LI",{});var Jxe=s(Vv);Age=n(Jxe,"STRONG",{});var aft=s(Age);mDo=r(aft,"xlm-roberta"),aft.forEach(t),gDo=r(Jxe," \u2014 "),GO=n(Jxe,"A",{href:!0});var nft=s(GO);hDo=r(nft,"XLMRobertaForTokenClassification"),nft.forEach(t),pDo=r(Jxe," (XLM-RoBERTa model)"),Jxe.forEach(t),_Do=i(J),Xv=n(J,"LI",{});var Yxe=s(Xv);yge=n(Yxe,"STRONG",{});var sft=s(yge);uDo=r(sft,"xlm-roberta-xl"),sft.forEach(t),bDo=r(Yxe," \u2014 "),OO=n(Yxe,"A",{href:!0});var lft=s(OO);vDo=r(lft,"XLMRobertaXLForTokenClassification"),lft.forEach(t),FDo=r(Yxe," (XLM-RoBERTa-XL model)"),Yxe.forEach(t),TDo=i(J),zv=n(J,"LI",{});var Kxe=s(zv);Lge=n(Kxe,"STRONG",{});var ift=s(Lge);MDo=r(ift,"xlnet"),ift.forEach(t),EDo=r(Kxe," \u2014 "),VO=n(Kxe,"A",{href:!0});var dft=s(VO);CDo=r(dft,"XLNetForTokenClassification"),dft.forEach(t),wDo=r(Kxe," (XLNet model)"),Kxe.forEach(t),ADo=i(J),Wv=n(J,"LI",{});var Zxe=s(Wv);xge=n(Zxe,"STRONG",{});var cft=s(xge);yDo=r(cft,"yoso"),cft.forEach(t),LDo=r(Zxe," \u2014 "),XO=n(Zxe,"A",{href:!0});var fft=s(XO);xDo=r(fft,"YosoForTokenClassification"),fft.forEach(t),$Do=r(Zxe," (YOSO model)"),Zxe.forEach(t),J.forEach(t),kDo=i(da),Qv=n(da,"P",{});var e9e=s(Qv);SDo=r(e9e,"The model is set in evaluation mode by default using "),$ge=n(e9e,"CODE",{});var mft=s($ge);RDo=r(mft,"model.eval()"),mft.forEach(t),PDo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(e9e,"CODE",{});var gft=s(kge);BDo=r(gft,"model.train()"),gft.forEach(t),e9e.forEach(t),IDo=i(da),T(Hv.$$.fragment,da),da.forEach(t),Us.forEach(t),hqe=i(f),Yi=n(f,"H2",{class:!0});var bje=s(Yi);Uv=n(bje,"A",{id:!0,class:!0,href:!0});var hft=s(Uv);Sge=n(hft,"SPAN",{});var pft=s(Sge);T(y6.$$.fragment,pft),pft.forEach(t),hft.forEach(t),qDo=i(bje),Rge=n(bje,"SPAN",{});var _ft=s(Rge);NDo=r(_ft,"AutoModelForQuestionAnswering"),_ft.forEach(t),bje.forEach(t),pqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(L6.$$.fragment,Js),jDo=i(Js),Ki=n(Js,"P",{});var YK=s(Ki);DDo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zO=n(YK,"A",{href:!0});var uft=s(zO);GDo=r(uft,"from_pretrained()"),uft.forEach(t),ODo=r(YK," class method or the "),WO=n(YK,"A",{href:!0});var bft=s(WO);VDo=r(bft,"from_config()"),bft.forEach(t),XDo=r(YK,` class
method.`),YK.forEach(t),zDo=i(Js),x6=n(Js,"P",{});var vje=s(x6);WDo=r(vje,"This class cannot be instantiated directly using "),Pge=n(vje,"CODE",{});var vft=s(Pge);QDo=r(vft,"__init__()"),vft.forEach(t),HDo=r(vje," (throws an error)."),vje.forEach(t),UDo=i(Js),mt=n(Js,"DIV",{class:!0});var Sw=s(mt);T($6.$$.fragment,Sw),JDo=i(Sw),Bge=n(Sw,"P",{});var Fft=s(Bge);YDo=r(Fft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fft.forEach(t),KDo=i(Sw),Zi=n(Sw,"P",{});var KK=s(Zi);ZDo=r(KK,`Note:
Loading a model from its configuration file does `),Ige=n(KK,"STRONG",{});var Tft=s(Ige);eGo=r(Tft,"not"),Tft.forEach(t),oGo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(KK,"A",{href:!0});var Mft=s(QO);rGo=r(Mft,"from_pretrained()"),Mft.forEach(t),tGo=r(KK," to load the model weights."),KK.forEach(t),aGo=i(Sw),T(Jv.$$.fragment,Sw),Sw.forEach(t),nGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(k6.$$.fragment,ca),sGo=i(ca),qge=n(ca,"P",{});var Eft=s(qge);lGo=r(Eft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Eft.forEach(t),iGo=i(ca),qa=n(ca,"P",{});var Rw=s(qa);dGo=r(Rw,"The model class to instantiate is selected based on the "),Nge=n(Rw,"CODE",{});var Cft=s(Nge);cGo=r(Cft,"model_type"),Cft.forEach(t),fGo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),jge=n(Rw,"CODE",{});var wft=s(jge);mGo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),gGo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(Rw,"CODE",{});var Aft=s(Dge);hGo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),pGo=r(Rw,":"),Rw.forEach(t),_Go=i(ca),V=n(ca,"UL",{});var X=s(V);Yv=n(X,"LI",{});var o9e=s(Yv);Gge=n(o9e,"STRONG",{});var yft=s(Gge);uGo=r(yft,"albert"),yft.forEach(t),bGo=r(o9e," \u2014 "),HO=n(o9e,"A",{href:!0});var Lft=s(HO);vGo=r(Lft,"AlbertForQuestionAnswering"),Lft.forEach(t),FGo=r(o9e," (ALBERT model)"),o9e.forEach(t),TGo=i(X),Kv=n(X,"LI",{});var r9e=s(Kv);Oge=n(r9e,"STRONG",{});var xft=s(Oge);MGo=r(xft,"bart"),xft.forEach(t),EGo=r(r9e," \u2014 "),UO=n(r9e,"A",{href:!0});var $ft=s(UO);CGo=r($ft,"BartForQuestionAnswering"),$ft.forEach(t),wGo=r(r9e," (BART model)"),r9e.forEach(t),AGo=i(X),Zv=n(X,"LI",{});var t9e=s(Zv);Vge=n(t9e,"STRONG",{});var kft=s(Vge);yGo=r(kft,"bert"),kft.forEach(t),LGo=r(t9e," \u2014 "),JO=n(t9e,"A",{href:!0});var Sft=s(JO);xGo=r(Sft,"BertForQuestionAnswering"),Sft.forEach(t),$Go=r(t9e," (BERT model)"),t9e.forEach(t),kGo=i(X),e3=n(X,"LI",{});var a9e=s(e3);Xge=n(a9e,"STRONG",{});var Rft=s(Xge);SGo=r(Rft,"big_bird"),Rft.forEach(t),RGo=r(a9e," \u2014 "),YO=n(a9e,"A",{href:!0});var Pft=s(YO);PGo=r(Pft,"BigBirdForQuestionAnswering"),Pft.forEach(t),BGo=r(a9e," (BigBird model)"),a9e.forEach(t),IGo=i(X),o3=n(X,"LI",{});var n9e=s(o3);zge=n(n9e,"STRONG",{});var Bft=s(zge);qGo=r(Bft,"bigbird_pegasus"),Bft.forEach(t),NGo=r(n9e," \u2014 "),KO=n(n9e,"A",{href:!0});var Ift=s(KO);jGo=r(Ift,"BigBirdPegasusForQuestionAnswering"),Ift.forEach(t),DGo=r(n9e," (BigBirdPegasus model)"),n9e.forEach(t),GGo=i(X),r3=n(X,"LI",{});var s9e=s(r3);Wge=n(s9e,"STRONG",{});var qft=s(Wge);OGo=r(qft,"camembert"),qft.forEach(t),VGo=r(s9e," \u2014 "),ZO=n(s9e,"A",{href:!0});var Nft=s(ZO);XGo=r(Nft,"CamembertForQuestionAnswering"),Nft.forEach(t),zGo=r(s9e," (CamemBERT model)"),s9e.forEach(t),WGo=i(X),t3=n(X,"LI",{});var l9e=s(t3);Qge=n(l9e,"STRONG",{});var jft=s(Qge);QGo=r(jft,"canine"),jft.forEach(t),HGo=r(l9e," \u2014 "),eV=n(l9e,"A",{href:!0});var Dft=s(eV);UGo=r(Dft,"CanineForQuestionAnswering"),Dft.forEach(t),JGo=r(l9e," (Canine model)"),l9e.forEach(t),YGo=i(X),a3=n(X,"LI",{});var i9e=s(a3);Hge=n(i9e,"STRONG",{});var Gft=s(Hge);KGo=r(Gft,"convbert"),Gft.forEach(t),ZGo=r(i9e," \u2014 "),oV=n(i9e,"A",{href:!0});var Oft=s(oV);eOo=r(Oft,"ConvBertForQuestionAnswering"),Oft.forEach(t),oOo=r(i9e," (ConvBERT model)"),i9e.forEach(t),rOo=i(X),n3=n(X,"LI",{});var d9e=s(n3);Uge=n(d9e,"STRONG",{});var Vft=s(Uge);tOo=r(Vft,"data2vec-text"),Vft.forEach(t),aOo=r(d9e," \u2014 "),rV=n(d9e,"A",{href:!0});var Xft=s(rV);nOo=r(Xft,"Data2VecTextForQuestionAnswering"),Xft.forEach(t),sOo=r(d9e," (Data2VecText model)"),d9e.forEach(t),lOo=i(X),s3=n(X,"LI",{});var c9e=s(s3);Jge=n(c9e,"STRONG",{});var zft=s(Jge);iOo=r(zft,"deberta"),zft.forEach(t),dOo=r(c9e," \u2014 "),tV=n(c9e,"A",{href:!0});var Wft=s(tV);cOo=r(Wft,"DebertaForQuestionAnswering"),Wft.forEach(t),fOo=r(c9e," (DeBERTa model)"),c9e.forEach(t),mOo=i(X),l3=n(X,"LI",{});var f9e=s(l3);Yge=n(f9e,"STRONG",{});var Qft=s(Yge);gOo=r(Qft,"deberta-v2"),Qft.forEach(t),hOo=r(f9e," \u2014 "),aV=n(f9e,"A",{href:!0});var Hft=s(aV);pOo=r(Hft,"DebertaV2ForQuestionAnswering"),Hft.forEach(t),_Oo=r(f9e," (DeBERTa-v2 model)"),f9e.forEach(t),uOo=i(X),i3=n(X,"LI",{});var m9e=s(i3);Kge=n(m9e,"STRONG",{});var Uft=s(Kge);bOo=r(Uft,"distilbert"),Uft.forEach(t),vOo=r(m9e," \u2014 "),nV=n(m9e,"A",{href:!0});var Jft=s(nV);FOo=r(Jft,"DistilBertForQuestionAnswering"),Jft.forEach(t),TOo=r(m9e," (DistilBERT model)"),m9e.forEach(t),MOo=i(X),d3=n(X,"LI",{});var g9e=s(d3);Zge=n(g9e,"STRONG",{});var Yft=s(Zge);EOo=r(Yft,"electra"),Yft.forEach(t),COo=r(g9e," \u2014 "),sV=n(g9e,"A",{href:!0});var Kft=s(sV);wOo=r(Kft,"ElectraForQuestionAnswering"),Kft.forEach(t),AOo=r(g9e," (ELECTRA model)"),g9e.forEach(t),yOo=i(X),c3=n(X,"LI",{});var h9e=s(c3);ehe=n(h9e,"STRONG",{});var Zft=s(ehe);LOo=r(Zft,"flaubert"),Zft.forEach(t),xOo=r(h9e," \u2014 "),lV=n(h9e,"A",{href:!0});var emt=s(lV);$Oo=r(emt,"FlaubertForQuestionAnsweringSimple"),emt.forEach(t),kOo=r(h9e," (FlauBERT model)"),h9e.forEach(t),SOo=i(X),f3=n(X,"LI",{});var p9e=s(f3);ohe=n(p9e,"STRONG",{});var omt=s(ohe);ROo=r(omt,"fnet"),omt.forEach(t),POo=r(p9e," \u2014 "),iV=n(p9e,"A",{href:!0});var rmt=s(iV);BOo=r(rmt,"FNetForQuestionAnswering"),rmt.forEach(t),IOo=r(p9e," (FNet model)"),p9e.forEach(t),qOo=i(X),m3=n(X,"LI",{});var _9e=s(m3);rhe=n(_9e,"STRONG",{});var tmt=s(rhe);NOo=r(tmt,"funnel"),tmt.forEach(t),jOo=r(_9e," \u2014 "),dV=n(_9e,"A",{href:!0});var amt=s(dV);DOo=r(amt,"FunnelForQuestionAnswering"),amt.forEach(t),GOo=r(_9e," (Funnel Transformer model)"),_9e.forEach(t),OOo=i(X),g3=n(X,"LI",{});var u9e=s(g3);the=n(u9e,"STRONG",{});var nmt=s(the);VOo=r(nmt,"gptj"),nmt.forEach(t),XOo=r(u9e," \u2014 "),cV=n(u9e,"A",{href:!0});var smt=s(cV);zOo=r(smt,"GPTJForQuestionAnswering"),smt.forEach(t),WOo=r(u9e," (GPT-J model)"),u9e.forEach(t),QOo=i(X),h3=n(X,"LI",{});var b9e=s(h3);ahe=n(b9e,"STRONG",{});var lmt=s(ahe);HOo=r(lmt,"ibert"),lmt.forEach(t),UOo=r(b9e," \u2014 "),fV=n(b9e,"A",{href:!0});var imt=s(fV);JOo=r(imt,"IBertForQuestionAnswering"),imt.forEach(t),YOo=r(b9e," (I-BERT model)"),b9e.forEach(t),KOo=i(X),p3=n(X,"LI",{});var v9e=s(p3);nhe=n(v9e,"STRONG",{});var dmt=s(nhe);ZOo=r(dmt,"layoutlmv2"),dmt.forEach(t),eVo=r(v9e," \u2014 "),mV=n(v9e,"A",{href:!0});var cmt=s(mV);oVo=r(cmt,"LayoutLMv2ForQuestionAnswering"),cmt.forEach(t),rVo=r(v9e," (LayoutLMv2 model)"),v9e.forEach(t),tVo=i(X),_3=n(X,"LI",{});var F9e=s(_3);she=n(F9e,"STRONG",{});var fmt=s(she);aVo=r(fmt,"led"),fmt.forEach(t),nVo=r(F9e," \u2014 "),gV=n(F9e,"A",{href:!0});var mmt=s(gV);sVo=r(mmt,"LEDForQuestionAnswering"),mmt.forEach(t),lVo=r(F9e," (LED model)"),F9e.forEach(t),iVo=i(X),u3=n(X,"LI",{});var T9e=s(u3);lhe=n(T9e,"STRONG",{});var gmt=s(lhe);dVo=r(gmt,"longformer"),gmt.forEach(t),cVo=r(T9e," \u2014 "),hV=n(T9e,"A",{href:!0});var hmt=s(hV);fVo=r(hmt,"LongformerForQuestionAnswering"),hmt.forEach(t),mVo=r(T9e," (Longformer model)"),T9e.forEach(t),gVo=i(X),b3=n(X,"LI",{});var M9e=s(b3);ihe=n(M9e,"STRONG",{});var pmt=s(ihe);hVo=r(pmt,"lxmert"),pmt.forEach(t),pVo=r(M9e," \u2014 "),pV=n(M9e,"A",{href:!0});var _mt=s(pV);_Vo=r(_mt,"LxmertForQuestionAnswering"),_mt.forEach(t),uVo=r(M9e," (LXMERT model)"),M9e.forEach(t),bVo=i(X),v3=n(X,"LI",{});var E9e=s(v3);dhe=n(E9e,"STRONG",{});var umt=s(dhe);vVo=r(umt,"mbart"),umt.forEach(t),FVo=r(E9e," \u2014 "),_V=n(E9e,"A",{href:!0});var bmt=s(_V);TVo=r(bmt,"MBartForQuestionAnswering"),bmt.forEach(t),MVo=r(E9e," (mBART model)"),E9e.forEach(t),EVo=i(X),F3=n(X,"LI",{});var C9e=s(F3);che=n(C9e,"STRONG",{});var vmt=s(che);CVo=r(vmt,"megatron-bert"),vmt.forEach(t),wVo=r(C9e," \u2014 "),uV=n(C9e,"A",{href:!0});var Fmt=s(uV);AVo=r(Fmt,"MegatronBertForQuestionAnswering"),Fmt.forEach(t),yVo=r(C9e," (MegatronBert model)"),C9e.forEach(t),LVo=i(X),T3=n(X,"LI",{});var w9e=s(T3);fhe=n(w9e,"STRONG",{});var Tmt=s(fhe);xVo=r(Tmt,"mobilebert"),Tmt.forEach(t),$Vo=r(w9e," \u2014 "),bV=n(w9e,"A",{href:!0});var Mmt=s(bV);kVo=r(Mmt,"MobileBertForQuestionAnswering"),Mmt.forEach(t),SVo=r(w9e," (MobileBERT model)"),w9e.forEach(t),RVo=i(X),M3=n(X,"LI",{});var A9e=s(M3);mhe=n(A9e,"STRONG",{});var Emt=s(mhe);PVo=r(Emt,"mpnet"),Emt.forEach(t),BVo=r(A9e," \u2014 "),vV=n(A9e,"A",{href:!0});var Cmt=s(vV);IVo=r(Cmt,"MPNetForQuestionAnswering"),Cmt.forEach(t),qVo=r(A9e," (MPNet model)"),A9e.forEach(t),NVo=i(X),E3=n(X,"LI",{});var y9e=s(E3);ghe=n(y9e,"STRONG",{});var wmt=s(ghe);jVo=r(wmt,"nystromformer"),wmt.forEach(t),DVo=r(y9e," \u2014 "),FV=n(y9e,"A",{href:!0});var Amt=s(FV);GVo=r(Amt,"NystromformerForQuestionAnswering"),Amt.forEach(t),OVo=r(y9e," (Nystromformer model)"),y9e.forEach(t),VVo=i(X),C3=n(X,"LI",{});var L9e=s(C3);hhe=n(L9e,"STRONG",{});var ymt=s(hhe);XVo=r(ymt,"qdqbert"),ymt.forEach(t),zVo=r(L9e," \u2014 "),TV=n(L9e,"A",{href:!0});var Lmt=s(TV);WVo=r(Lmt,"QDQBertForQuestionAnswering"),Lmt.forEach(t),QVo=r(L9e," (QDQBert model)"),L9e.forEach(t),HVo=i(X),w3=n(X,"LI",{});var x9e=s(w3);phe=n(x9e,"STRONG",{});var xmt=s(phe);UVo=r(xmt,"reformer"),xmt.forEach(t),JVo=r(x9e," \u2014 "),MV=n(x9e,"A",{href:!0});var $mt=s(MV);YVo=r($mt,"ReformerForQuestionAnswering"),$mt.forEach(t),KVo=r(x9e," (Reformer model)"),x9e.forEach(t),ZVo=i(X),A3=n(X,"LI",{});var $9e=s(A3);_he=n($9e,"STRONG",{});var kmt=s(_he);eXo=r(kmt,"rembert"),kmt.forEach(t),oXo=r($9e," \u2014 "),EV=n($9e,"A",{href:!0});var Smt=s(EV);rXo=r(Smt,"RemBertForQuestionAnswering"),Smt.forEach(t),tXo=r($9e," (RemBERT model)"),$9e.forEach(t),aXo=i(X),y3=n(X,"LI",{});var k9e=s(y3);uhe=n(k9e,"STRONG",{});var Rmt=s(uhe);nXo=r(Rmt,"roberta"),Rmt.forEach(t),sXo=r(k9e," \u2014 "),CV=n(k9e,"A",{href:!0});var Pmt=s(CV);lXo=r(Pmt,"RobertaForQuestionAnswering"),Pmt.forEach(t),iXo=r(k9e," (RoBERTa model)"),k9e.forEach(t),dXo=i(X),L3=n(X,"LI",{});var S9e=s(L3);bhe=n(S9e,"STRONG",{});var Bmt=s(bhe);cXo=r(Bmt,"roformer"),Bmt.forEach(t),fXo=r(S9e," \u2014 "),wV=n(S9e,"A",{href:!0});var Imt=s(wV);mXo=r(Imt,"RoFormerForQuestionAnswering"),Imt.forEach(t),gXo=r(S9e," (RoFormer model)"),S9e.forEach(t),hXo=i(X),x3=n(X,"LI",{});var R9e=s(x3);vhe=n(R9e,"STRONG",{});var qmt=s(vhe);pXo=r(qmt,"splinter"),qmt.forEach(t),_Xo=r(R9e," \u2014 "),AV=n(R9e,"A",{href:!0});var Nmt=s(AV);uXo=r(Nmt,"SplinterForQuestionAnswering"),Nmt.forEach(t),bXo=r(R9e," (Splinter model)"),R9e.forEach(t),vXo=i(X),$3=n(X,"LI",{});var P9e=s($3);Fhe=n(P9e,"STRONG",{});var jmt=s(Fhe);FXo=r(jmt,"squeezebert"),jmt.forEach(t),TXo=r(P9e," \u2014 "),yV=n(P9e,"A",{href:!0});var Dmt=s(yV);MXo=r(Dmt,"SqueezeBertForQuestionAnswering"),Dmt.forEach(t),EXo=r(P9e," (SqueezeBERT model)"),P9e.forEach(t),CXo=i(X),k3=n(X,"LI",{});var B9e=s(k3);The=n(B9e,"STRONG",{});var Gmt=s(The);wXo=r(Gmt,"xlm"),Gmt.forEach(t),AXo=r(B9e," \u2014 "),LV=n(B9e,"A",{href:!0});var Omt=s(LV);yXo=r(Omt,"XLMForQuestionAnsweringSimple"),Omt.forEach(t),LXo=r(B9e," (XLM model)"),B9e.forEach(t),xXo=i(X),S3=n(X,"LI",{});var I9e=s(S3);Mhe=n(I9e,"STRONG",{});var Vmt=s(Mhe);$Xo=r(Vmt,"xlm-roberta"),Vmt.forEach(t),kXo=r(I9e," \u2014 "),xV=n(I9e,"A",{href:!0});var Xmt=s(xV);SXo=r(Xmt,"XLMRobertaForQuestionAnswering"),Xmt.forEach(t),RXo=r(I9e," (XLM-RoBERTa model)"),I9e.forEach(t),PXo=i(X),R3=n(X,"LI",{});var q9e=s(R3);Ehe=n(q9e,"STRONG",{});var zmt=s(Ehe);BXo=r(zmt,"xlm-roberta-xl"),zmt.forEach(t),IXo=r(q9e," \u2014 "),$V=n(q9e,"A",{href:!0});var Wmt=s($V);qXo=r(Wmt,"XLMRobertaXLForQuestionAnswering"),Wmt.forEach(t),NXo=r(q9e," (XLM-RoBERTa-XL model)"),q9e.forEach(t),jXo=i(X),P3=n(X,"LI",{});var N9e=s(P3);Che=n(N9e,"STRONG",{});var Qmt=s(Che);DXo=r(Qmt,"xlnet"),Qmt.forEach(t),GXo=r(N9e," \u2014 "),kV=n(N9e,"A",{href:!0});var Hmt=s(kV);OXo=r(Hmt,"XLNetForQuestionAnsweringSimple"),Hmt.forEach(t),VXo=r(N9e," (XLNet model)"),N9e.forEach(t),XXo=i(X),B3=n(X,"LI",{});var j9e=s(B3);whe=n(j9e,"STRONG",{});var Umt=s(whe);zXo=r(Umt,"yoso"),Umt.forEach(t),WXo=r(j9e," \u2014 "),SV=n(j9e,"A",{href:!0});var Jmt=s(SV);QXo=r(Jmt,"YosoForQuestionAnswering"),Jmt.forEach(t),HXo=r(j9e," (YOSO model)"),j9e.forEach(t),X.forEach(t),UXo=i(ca),I3=n(ca,"P",{});var D9e=s(I3);JXo=r(D9e,"The model is set in evaluation mode by default using "),Ahe=n(D9e,"CODE",{});var Ymt=s(Ahe);YXo=r(Ymt,"model.eval()"),Ymt.forEach(t),KXo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(D9e,"CODE",{});var Kmt=s(yhe);ZXo=r(Kmt,"model.train()"),Kmt.forEach(t),D9e.forEach(t),ezo=i(ca),T(q3.$$.fragment,ca),ca.forEach(t),Js.forEach(t),_qe=i(f),ed=n(f,"H2",{class:!0});var Fje=s(ed);N3=n(Fje,"A",{id:!0,class:!0,href:!0});var Zmt=s(N3);Lhe=n(Zmt,"SPAN",{});var egt=s(Lhe);T(S6.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),ozo=i(Fje),xhe=n(Fje,"SPAN",{});var ogt=s(xhe);rzo=r(ogt,"AutoModelForTableQuestionAnswering"),ogt.forEach(t),Fje.forEach(t),uqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(R6.$$.fragment,Ys),tzo=i(Ys),od=n(Ys,"P",{});var ZK=s(od);azo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RV=n(ZK,"A",{href:!0});var rgt=s(RV);nzo=r(rgt,"from_pretrained()"),rgt.forEach(t),szo=r(ZK," class method or the "),PV=n(ZK,"A",{href:!0});var tgt=s(PV);lzo=r(tgt,"from_config()"),tgt.forEach(t),izo=r(ZK,` class
method.`),ZK.forEach(t),dzo=i(Ys),P6=n(Ys,"P",{});var Tje=s(P6);czo=r(Tje,"This class cannot be instantiated directly using "),$he=n(Tje,"CODE",{});var agt=s($he);fzo=r(agt,"__init__()"),agt.forEach(t),mzo=r(Tje," (throws an error)."),Tje.forEach(t),gzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Pw=s(gt);T(B6.$$.fragment,Pw),hzo=i(Pw),khe=n(Pw,"P",{});var ngt=s(khe);pzo=r(ngt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ngt.forEach(t),_zo=i(Pw),rd=n(Pw,"P",{});var eZ=s(rd);uzo=r(eZ,`Note:
Loading a model from its configuration file does `),She=n(eZ,"STRONG",{});var sgt=s(She);bzo=r(sgt,"not"),sgt.forEach(t),vzo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(eZ,"A",{href:!0});var lgt=s(BV);Fzo=r(lgt,"from_pretrained()"),lgt.forEach(t),Tzo=r(eZ," to load the model weights."),eZ.forEach(t),Mzo=i(Pw),T(j3.$$.fragment,Pw),Pw.forEach(t),Ezo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(I6.$$.fragment,fa),Czo=i(fa),Rhe=n(fa,"P",{});var igt=s(Rhe);wzo=r(igt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),igt.forEach(t),Azo=i(fa),Na=n(fa,"P",{});var Bw=s(Na);yzo=r(Bw,"The model class to instantiate is selected based on the "),Phe=n(Bw,"CODE",{});var dgt=s(Phe);Lzo=r(dgt,"model_type"),dgt.forEach(t),xzo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(Bw,"CODE",{});var cgt=s(Bhe);$zo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),kzo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(Bw,"CODE",{});var fgt=s(Ihe);Szo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Rzo=r(Bw,":"),Bw.forEach(t),Pzo=i(fa),qhe=n(fa,"UL",{});var mgt=s(qhe);D3=n(mgt,"LI",{});var G9e=s(D3);Nhe=n(G9e,"STRONG",{});var ggt=s(Nhe);Bzo=r(ggt,"tapas"),ggt.forEach(t),Izo=r(G9e," \u2014 "),IV=n(G9e,"A",{href:!0});var hgt=s(IV);qzo=r(hgt,"TapasForQuestionAnswering"),hgt.forEach(t),Nzo=r(G9e," (TAPAS model)"),G9e.forEach(t),mgt.forEach(t),jzo=i(fa),G3=n(fa,"P",{});var O9e=s(G3);Dzo=r(O9e,"The model is set in evaluation mode by default using "),jhe=n(O9e,"CODE",{});var pgt=s(jhe);Gzo=r(pgt,"model.eval()"),pgt.forEach(t),Ozo=r(O9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(O9e,"CODE",{});var _gt=s(Dhe);Vzo=r(_gt,"model.train()"),_gt.forEach(t),O9e.forEach(t),Xzo=i(fa),T(O3.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),bqe=i(f),td=n(f,"H2",{class:!0});var Mje=s(td);V3=n(Mje,"A",{id:!0,class:!0,href:!0});var ugt=s(V3);Ghe=n(ugt,"SPAN",{});var bgt=s(Ghe);T(q6.$$.fragment,bgt),bgt.forEach(t),ugt.forEach(t),zzo=i(Mje),Ohe=n(Mje,"SPAN",{});var vgt=s(Ohe);Wzo=r(vgt,"AutoModelForImageClassification"),vgt.forEach(t),Mje.forEach(t),vqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(N6.$$.fragment,Ks),Qzo=i(Ks),ad=n(Ks,"P",{});var oZ=s(ad);Hzo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qV=n(oZ,"A",{href:!0});var Fgt=s(qV);Uzo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),Jzo=r(oZ," class method or the "),NV=n(oZ,"A",{href:!0});var Tgt=s(NV);Yzo=r(Tgt,"from_config()"),Tgt.forEach(t),Kzo=r(oZ,` class
method.`),oZ.forEach(t),Zzo=i(Ks),j6=n(Ks,"P",{});var Eje=s(j6);eWo=r(Eje,"This class cannot be instantiated directly using "),Vhe=n(Eje,"CODE",{});var Mgt=s(Vhe);oWo=r(Mgt,"__init__()"),Mgt.forEach(t),rWo=r(Eje," (throws an error)."),Eje.forEach(t),tWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Iw=s(ht);T(D6.$$.fragment,Iw),aWo=i(Iw),Xhe=n(Iw,"P",{});var Egt=s(Xhe);nWo=r(Egt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Egt.forEach(t),sWo=i(Iw),nd=n(Iw,"P",{});var rZ=s(nd);lWo=r(rZ,`Note:
Loading a model from its configuration file does `),zhe=n(rZ,"STRONG",{});var Cgt=s(zhe);iWo=r(Cgt,"not"),Cgt.forEach(t),dWo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(rZ,"A",{href:!0});var wgt=s(jV);cWo=r(wgt,"from_pretrained()"),wgt.forEach(t),fWo=r(rZ," to load the model weights."),rZ.forEach(t),mWo=i(Iw),T(X3.$$.fragment,Iw),Iw.forEach(t),gWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(G6.$$.fragment,ma),hWo=i(ma),Whe=n(ma,"P",{});var Agt=s(Whe);pWo=r(Agt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Agt.forEach(t),_Wo=i(ma),ja=n(ma,"P",{});var qw=s(ja);uWo=r(qw,"The model class to instantiate is selected based on the "),Qhe=n(qw,"CODE",{});var ygt=s(Qhe);bWo=r(ygt,"model_type"),ygt.forEach(t),vWo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(qw,"CODE",{});var Lgt=s(Hhe);FWo=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),TWo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(qw,"CODE",{});var xgt=s(Uhe);MWo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),EWo=r(qw,":"),qw.forEach(t),CWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);z3=n(Ee,"LI",{});var V9e=s(z3);Jhe=n(V9e,"STRONG",{});var $gt=s(Jhe);wWo=r($gt,"beit"),$gt.forEach(t),AWo=r(V9e," \u2014 "),DV=n(V9e,"A",{href:!0});var kgt=s(DV);yWo=r(kgt,"BeitForImageClassification"),kgt.forEach(t),LWo=r(V9e," (BEiT model)"),V9e.forEach(t),xWo=i(Ee),W3=n(Ee,"LI",{});var X9e=s(W3);Yhe=n(X9e,"STRONG",{});var Sgt=s(Yhe);$Wo=r(Sgt,"convnext"),Sgt.forEach(t),kWo=r(X9e," \u2014 "),GV=n(X9e,"A",{href:!0});var Rgt=s(GV);SWo=r(Rgt,"ConvNextForImageClassification"),Rgt.forEach(t),RWo=r(X9e," (ConvNext model)"),X9e.forEach(t),PWo=i(Ee),Q3=n(Ee,"LI",{});var z9e=s(Q3);Khe=n(z9e,"STRONG",{});var Pgt=s(Khe);BWo=r(Pgt,"data2vec-vision"),Pgt.forEach(t),IWo=r(z9e," \u2014 "),OV=n(z9e,"A",{href:!0});var Bgt=s(OV);qWo=r(Bgt,"Data2VecVisionForImageClassification"),Bgt.forEach(t),NWo=r(z9e," (Data2VecVision model)"),z9e.forEach(t),jWo=i(Ee),Ps=n(Ee,"LI",{});var w$=s(Ps);Zhe=n(w$,"STRONG",{});var Igt=s(Zhe);DWo=r(Igt,"deit"),Igt.forEach(t),GWo=r(w$," \u2014 "),VV=n(w$,"A",{href:!0});var qgt=s(VV);OWo=r(qgt,"DeiTForImageClassification"),qgt.forEach(t),VWo=r(w$," or "),XV=n(w$,"A",{href:!0});var Ngt=s(XV);XWo=r(Ngt,"DeiTForImageClassificationWithTeacher"),Ngt.forEach(t),zWo=r(w$," (DeiT model)"),w$.forEach(t),WWo=i(Ee),H3=n(Ee,"LI",{});var W9e=s(H3);epe=n(W9e,"STRONG",{});var jgt=s(epe);QWo=r(jgt,"imagegpt"),jgt.forEach(t),HWo=r(W9e," \u2014 "),zV=n(W9e,"A",{href:!0});var Dgt=s(zV);UWo=r(Dgt,"ImageGPTForImageClassification"),Dgt.forEach(t),JWo=r(W9e," (ImageGPT model)"),W9e.forEach(t),YWo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);ope=n(gf,"STRONG",{});var Ggt=s(ope);KWo=r(Ggt,"perceiver"),Ggt.forEach(t),ZWo=r(gf," \u2014 "),WV=n(gf,"A",{href:!0});var Ogt=s(WV);eQo=r(Ogt,"PerceiverForImageClassificationLearned"),Ogt.forEach(t),oQo=r(gf," or "),QV=n(gf,"A",{href:!0});var Vgt=s(QV);rQo=r(Vgt,"PerceiverForImageClassificationFourier"),Vgt.forEach(t),tQo=r(gf," or "),HV=n(gf,"A",{href:!0});var Xgt=s(HV);aQo=r(Xgt,"PerceiverForImageClassificationConvProcessing"),Xgt.forEach(t),nQo=r(gf," (Perceiver model)"),gf.forEach(t),sQo=i(Ee),U3=n(Ee,"LI",{});var Q9e=s(U3);rpe=n(Q9e,"STRONG",{});var zgt=s(rpe);lQo=r(zgt,"poolformer"),zgt.forEach(t),iQo=r(Q9e," \u2014 "),UV=n(Q9e,"A",{href:!0});var Wgt=s(UV);dQo=r(Wgt,"PoolFormerForImageClassification"),Wgt.forEach(t),cQo=r(Q9e," (PoolFormer model)"),Q9e.forEach(t),fQo=i(Ee),J3=n(Ee,"LI",{});var H9e=s(J3);tpe=n(H9e,"STRONG",{});var Qgt=s(tpe);mQo=r(Qgt,"regnet"),Qgt.forEach(t),gQo=r(H9e," \u2014 "),JV=n(H9e,"A",{href:!0});var Hgt=s(JV);hQo=r(Hgt,"RegNetForImageClassification"),Hgt.forEach(t),pQo=r(H9e," (RegNet model)"),H9e.forEach(t),_Qo=i(Ee),Y3=n(Ee,"LI",{});var U9e=s(Y3);ape=n(U9e,"STRONG",{});var Ugt=s(ape);uQo=r(Ugt,"resnet"),Ugt.forEach(t),bQo=r(U9e," \u2014 "),YV=n(U9e,"A",{href:!0});var Jgt=s(YV);vQo=r(Jgt,"ResNetForImageClassification"),Jgt.forEach(t),FQo=r(U9e," (ResNet model)"),U9e.forEach(t),TQo=i(Ee),K3=n(Ee,"LI",{});var J9e=s(K3);npe=n(J9e,"STRONG",{});var Ygt=s(npe);MQo=r(Ygt,"segformer"),Ygt.forEach(t),EQo=r(J9e," \u2014 "),KV=n(J9e,"A",{href:!0});var Kgt=s(KV);CQo=r(Kgt,"SegformerForImageClassification"),Kgt.forEach(t),wQo=r(J9e," (SegFormer model)"),J9e.forEach(t),AQo=i(Ee),Z3=n(Ee,"LI",{});var Y9e=s(Z3);spe=n(Y9e,"STRONG",{});var Zgt=s(spe);yQo=r(Zgt,"swin"),Zgt.forEach(t),LQo=r(Y9e," \u2014 "),ZV=n(Y9e,"A",{href:!0});var eht=s(ZV);xQo=r(eht,"SwinForImageClassification"),eht.forEach(t),$Qo=r(Y9e," (Swin model)"),Y9e.forEach(t),kQo=i(Ee),eF=n(Ee,"LI",{});var K9e=s(eF);lpe=n(K9e,"STRONG",{});var oht=s(lpe);SQo=r(oht,"van"),oht.forEach(t),RQo=r(K9e," \u2014 "),eX=n(K9e,"A",{href:!0});var rht=s(eX);PQo=r(rht,"VanForImageClassification"),rht.forEach(t),BQo=r(K9e," (VAN model)"),K9e.forEach(t),IQo=i(Ee),oF=n(Ee,"LI",{});var Z9e=s(oF);ipe=n(Z9e,"STRONG",{});var tht=s(ipe);qQo=r(tht,"vit"),tht.forEach(t),NQo=r(Z9e," \u2014 "),oX=n(Z9e,"A",{href:!0});var aht=s(oX);jQo=r(aht,"ViTForImageClassification"),aht.forEach(t),DQo=r(Z9e," (ViT model)"),Z9e.forEach(t),Ee.forEach(t),GQo=i(ma),rF=n(ma,"P",{});var e$e=s(rF);OQo=r(e$e,"The model is set in evaluation mode by default using "),dpe=n(e$e,"CODE",{});var nht=s(dpe);VQo=r(nht,"model.eval()"),nht.forEach(t),XQo=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(e$e,"CODE",{});var sht=s(cpe);zQo=r(sht,"model.train()"),sht.forEach(t),e$e.forEach(t),WQo=i(ma),T(tF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Fqe=i(f),sd=n(f,"H2",{class:!0});var Cje=s(sd);aF=n(Cje,"A",{id:!0,class:!0,href:!0});var lht=s(aF);fpe=n(lht,"SPAN",{});var iht=s(fpe);T(O6.$$.fragment,iht),iht.forEach(t),lht.forEach(t),QQo=i(Cje),mpe=n(Cje,"SPAN",{});var dht=s(mpe);HQo=r(dht,"AutoModelForVision2Seq"),dht.forEach(t),Cje.forEach(t),Tqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(V6.$$.fragment,Zs),UQo=i(Zs),ld=n(Zs,"P",{});var tZ=s(ld);JQo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rX=n(tZ,"A",{href:!0});var cht=s(rX);YQo=r(cht,"from_pretrained()"),cht.forEach(t),KQo=r(tZ," class method or the "),tX=n(tZ,"A",{href:!0});var fht=s(tX);ZQo=r(fht,"from_config()"),fht.forEach(t),eHo=r(tZ,` class
method.`),tZ.forEach(t),oHo=i(Zs),X6=n(Zs,"P",{});var wje=s(X6);rHo=r(wje,"This class cannot be instantiated directly using "),gpe=n(wje,"CODE",{});var mht=s(gpe);tHo=r(mht,"__init__()"),mht.forEach(t),aHo=r(wje," (throws an error)."),wje.forEach(t),nHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Nw=s(_t);T(z6.$$.fragment,Nw),sHo=i(Nw),hpe=n(Nw,"P",{});var ght=s(hpe);lHo=r(ght,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ght.forEach(t),iHo=i(Nw),id=n(Nw,"P",{});var aZ=s(id);dHo=r(aZ,`Note:
Loading a model from its configuration file does `),ppe=n(aZ,"STRONG",{});var hht=s(ppe);cHo=r(hht,"not"),hht.forEach(t),fHo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(aZ,"A",{href:!0});var pht=s(aX);mHo=r(pht,"from_pretrained()"),pht.forEach(t),gHo=r(aZ," to load the model weights."),aZ.forEach(t),hHo=i(Nw),T(nF.$$.fragment,Nw),Nw.forEach(t),pHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(W6.$$.fragment,ga),_Ho=i(ga),_pe=n(ga,"P",{});var _ht=s(_pe);uHo=r(_ht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_ht.forEach(t),bHo=i(ga),Da=n(ga,"P",{});var jw=s(Da);vHo=r(jw,"The model class to instantiate is selected based on the "),upe=n(jw,"CODE",{});var uht=s(upe);FHo=r(uht,"model_type"),uht.forEach(t),THo=r(jw,` property of the config object (either
passed as an argument or loaded from `),bpe=n(jw,"CODE",{});var bht=s(bpe);MHo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),EHo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(jw,"CODE",{});var vht=s(vpe);CHo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),wHo=r(jw,":"),jw.forEach(t),AHo=i(ga),Fpe=n(ga,"UL",{});var Fht=s(Fpe);sF=n(Fht,"LI",{});var o$e=s(sF);Tpe=n(o$e,"STRONG",{});var Tht=s(Tpe);yHo=r(Tht,"vision-encoder-decoder"),Tht.forEach(t),LHo=r(o$e," \u2014 "),nX=n(o$e,"A",{href:!0});var Mht=s(nX);xHo=r(Mht,"VisionEncoderDecoderModel"),Mht.forEach(t),$Ho=r(o$e," (Vision Encoder decoder model)"),o$e.forEach(t),Fht.forEach(t),kHo=i(ga),lF=n(ga,"P",{});var r$e=s(lF);SHo=r(r$e,"The model is set in evaluation mode by default using "),Mpe=n(r$e,"CODE",{});var Eht=s(Mpe);RHo=r(Eht,"model.eval()"),Eht.forEach(t),PHo=r(r$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=n(r$e,"CODE",{});var Cht=s(Epe);BHo=r(Cht,"model.train()"),Cht.forEach(t),r$e.forEach(t),IHo=i(ga),T(iF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Mqe=i(f),dd=n(f,"H2",{class:!0});var Aje=s(dd);dF=n(Aje,"A",{id:!0,class:!0,href:!0});var wht=s(dF);Cpe=n(wht,"SPAN",{});var Aht=s(Cpe);T(Q6.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),qHo=i(Aje),wpe=n(Aje,"SPAN",{});var yht=s(wpe);NHo=r(yht,"AutoModelForAudioClassification"),yht.forEach(t),Aje.forEach(t),Eqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(H6.$$.fragment,el),jHo=i(el),cd=n(el,"P",{});var nZ=s(cd);DHo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sX=n(nZ,"A",{href:!0});var Lht=s(sX);GHo=r(Lht,"from_pretrained()"),Lht.forEach(t),OHo=r(nZ," class method or the "),lX=n(nZ,"A",{href:!0});var xht=s(lX);VHo=r(xht,"from_config()"),xht.forEach(t),XHo=r(nZ,` class
method.`),nZ.forEach(t),zHo=i(el),U6=n(el,"P",{});var yje=s(U6);WHo=r(yje,"This class cannot be instantiated directly using "),Ape=n(yje,"CODE",{});var $ht=s(Ape);QHo=r($ht,"__init__()"),$ht.forEach(t),HHo=r(yje," (throws an error)."),yje.forEach(t),UHo=i(el),ut=n(el,"DIV",{class:!0});var Dw=s(ut);T(J6.$$.fragment,Dw),JHo=i(Dw),ype=n(Dw,"P",{});var kht=s(ype);YHo=r(kht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),kht.forEach(t),KHo=i(Dw),fd=n(Dw,"P",{});var sZ=s(fd);ZHo=r(sZ,`Note:
Loading a model from its configuration file does `),Lpe=n(sZ,"STRONG",{});var Sht=s(Lpe);eUo=r(Sht,"not"),Sht.forEach(t),oUo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(sZ,"A",{href:!0});var Rht=s(iX);rUo=r(Rht,"from_pretrained()"),Rht.forEach(t),tUo=r(sZ," to load the model weights."),sZ.forEach(t),aUo=i(Dw),T(cF.$$.fragment,Dw),Dw.forEach(t),nUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(Y6.$$.fragment,ha),sUo=i(ha),xpe=n(ha,"P",{});var Pht=s(xpe);lUo=r(Pht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Pht.forEach(t),iUo=i(ha),Ga=n(ha,"P",{});var Gw=s(Ga);dUo=r(Gw,"The model class to instantiate is selected based on the "),$pe=n(Gw,"CODE",{});var Bht=s($pe);cUo=r(Bht,"model_type"),Bht.forEach(t),fUo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),kpe=n(Gw,"CODE",{});var Iht=s(kpe);mUo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),gUo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(Gw,"CODE",{});var qht=s(Spe);hUo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),pUo=r(Gw,":"),Gw.forEach(t),_Uo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);fF=n(Oe,"LI",{});var t$e=s(fF);Rpe=n(t$e,"STRONG",{});var Nht=s(Rpe);uUo=r(Nht,"data2vec-audio"),Nht.forEach(t),bUo=r(t$e," \u2014 "),dX=n(t$e,"A",{href:!0});var jht=s(dX);vUo=r(jht,"Data2VecAudioForSequenceClassification"),jht.forEach(t),FUo=r(t$e," (Data2VecAudio model)"),t$e.forEach(t),TUo=i(Oe),mF=n(Oe,"LI",{});var a$e=s(mF);Ppe=n(a$e,"STRONG",{});var Dht=s(Ppe);MUo=r(Dht,"hubert"),Dht.forEach(t),EUo=r(a$e," \u2014 "),cX=n(a$e,"A",{href:!0});var Ght=s(cX);CUo=r(Ght,"HubertForSequenceClassification"),Ght.forEach(t),wUo=r(a$e," (Hubert model)"),a$e.forEach(t),AUo=i(Oe),gF=n(Oe,"LI",{});var n$e=s(gF);Bpe=n(n$e,"STRONG",{});var Oht=s(Bpe);yUo=r(Oht,"sew"),Oht.forEach(t),LUo=r(n$e," \u2014 "),fX=n(n$e,"A",{href:!0});var Vht=s(fX);xUo=r(Vht,"SEWForSequenceClassification"),Vht.forEach(t),$Uo=r(n$e," (SEW model)"),n$e.forEach(t),kUo=i(Oe),hF=n(Oe,"LI",{});var s$e=s(hF);Ipe=n(s$e,"STRONG",{});var Xht=s(Ipe);SUo=r(Xht,"sew-d"),Xht.forEach(t),RUo=r(s$e," \u2014 "),mX=n(s$e,"A",{href:!0});var zht=s(mX);PUo=r(zht,"SEWDForSequenceClassification"),zht.forEach(t),BUo=r(s$e," (SEW-D model)"),s$e.forEach(t),IUo=i(Oe),pF=n(Oe,"LI",{});var l$e=s(pF);qpe=n(l$e,"STRONG",{});var Wht=s(qpe);qUo=r(Wht,"unispeech"),Wht.forEach(t),NUo=r(l$e," \u2014 "),gX=n(l$e,"A",{href:!0});var Qht=s(gX);jUo=r(Qht,"UniSpeechForSequenceClassification"),Qht.forEach(t),DUo=r(l$e," (UniSpeech model)"),l$e.forEach(t),GUo=i(Oe),_F=n(Oe,"LI",{});var i$e=s(_F);Npe=n(i$e,"STRONG",{});var Hht=s(Npe);OUo=r(Hht,"unispeech-sat"),Hht.forEach(t),VUo=r(i$e," \u2014 "),hX=n(i$e,"A",{href:!0});var Uht=s(hX);XUo=r(Uht,"UniSpeechSatForSequenceClassification"),Uht.forEach(t),zUo=r(i$e," (UniSpeechSat model)"),i$e.forEach(t),WUo=i(Oe),uF=n(Oe,"LI",{});var d$e=s(uF);jpe=n(d$e,"STRONG",{});var Jht=s(jpe);QUo=r(Jht,"wav2vec2"),Jht.forEach(t),HUo=r(d$e," \u2014 "),pX=n(d$e,"A",{href:!0});var Yht=s(pX);UUo=r(Yht,"Wav2Vec2ForSequenceClassification"),Yht.forEach(t),JUo=r(d$e," (Wav2Vec2 model)"),d$e.forEach(t),YUo=i(Oe),bF=n(Oe,"LI",{});var c$e=s(bF);Dpe=n(c$e,"STRONG",{});var Kht=s(Dpe);KUo=r(Kht,"wav2vec2-conformer"),Kht.forEach(t),ZUo=r(c$e," \u2014 "),_X=n(c$e,"A",{href:!0});var Zht=s(_X);eJo=r(Zht,"Wav2Vec2ConformerForSequenceClassification"),Zht.forEach(t),oJo=r(c$e," (Wav2Vec2-Conformer model)"),c$e.forEach(t),rJo=i(Oe),vF=n(Oe,"LI",{});var f$e=s(vF);Gpe=n(f$e,"STRONG",{});var ept=s(Gpe);tJo=r(ept,"wavlm"),ept.forEach(t),aJo=r(f$e," \u2014 "),uX=n(f$e,"A",{href:!0});var opt=s(uX);nJo=r(opt,"WavLMForSequenceClassification"),opt.forEach(t),sJo=r(f$e," (WavLM model)"),f$e.forEach(t),Oe.forEach(t),lJo=i(ha),FF=n(ha,"P",{});var m$e=s(FF);iJo=r(m$e,"The model is set in evaluation mode by default using "),Ope=n(m$e,"CODE",{});var rpt=s(Ope);dJo=r(rpt,"model.eval()"),rpt.forEach(t),cJo=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(m$e,"CODE",{});var tpt=s(Vpe);fJo=r(tpt,"model.train()"),tpt.forEach(t),m$e.forEach(t),mJo=i(ha),T(TF.$$.fragment,ha),ha.forEach(t),el.forEach(t),Cqe=i(f),md=n(f,"H2",{class:!0});var Lje=s(md);MF=n(Lje,"A",{id:!0,class:!0,href:!0});var apt=s(MF);Xpe=n(apt,"SPAN",{});var npt=s(Xpe);T(K6.$$.fragment,npt),npt.forEach(t),apt.forEach(t),gJo=i(Lje),zpe=n(Lje,"SPAN",{});var spt=s(zpe);hJo=r(spt,"AutoModelForAudioFrameClassification"),spt.forEach(t),Lje.forEach(t),wqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(Z6.$$.fragment,ol),pJo=i(ol),gd=n(ol,"P",{});var lZ=s(gd);_Jo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bX=n(lZ,"A",{href:!0});var lpt=s(bX);uJo=r(lpt,"from_pretrained()"),lpt.forEach(t),bJo=r(lZ," class method or the "),vX=n(lZ,"A",{href:!0});var ipt=s(vX);vJo=r(ipt,"from_config()"),ipt.forEach(t),FJo=r(lZ,` class
method.`),lZ.forEach(t),TJo=i(ol),ey=n(ol,"P",{});var xje=s(ey);MJo=r(xje,"This class cannot be instantiated directly using "),Wpe=n(xje,"CODE",{});var dpt=s(Wpe);EJo=r(dpt,"__init__()"),dpt.forEach(t),CJo=r(xje," (throws an error)."),xje.forEach(t),wJo=i(ol),bt=n(ol,"DIV",{class:!0});var Ow=s(bt);T(oy.$$.fragment,Ow),AJo=i(Ow),Qpe=n(Ow,"P",{});var cpt=s(Qpe);yJo=r(cpt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cpt.forEach(t),LJo=i(Ow),hd=n(Ow,"P",{});var iZ=s(hd);xJo=r(iZ,`Note:
Loading a model from its configuration file does `),Hpe=n(iZ,"STRONG",{});var fpt=s(Hpe);$Jo=r(fpt,"not"),fpt.forEach(t),kJo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(iZ,"A",{href:!0});var mpt=s(FX);SJo=r(mpt,"from_pretrained()"),mpt.forEach(t),RJo=r(iZ," to load the model weights."),iZ.forEach(t),PJo=i(Ow),T(EF.$$.fragment,Ow),Ow.forEach(t),BJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(ry.$$.fragment,pa),IJo=i(pa),Upe=n(pa,"P",{});var gpt=s(Upe);qJo=r(gpt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gpt.forEach(t),NJo=i(pa),Oa=n(pa,"P",{});var Vw=s(Oa);jJo=r(Vw,"The model class to instantiate is selected based on the "),Jpe=n(Vw,"CODE",{});var hpt=s(Jpe);DJo=r(hpt,"model_type"),hpt.forEach(t),GJo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Ype=n(Vw,"CODE",{});var ppt=s(Ype);OJo=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),VJo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(Vw,"CODE",{});var _pt=s(Kpe);XJo=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),zJo=r(Vw,":"),Vw.forEach(t),WJo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);CF=n(rl,"LI",{});var g$e=s(CF);Zpe=n(g$e,"STRONG",{});var upt=s(Zpe);QJo=r(upt,"data2vec-audio"),upt.forEach(t),HJo=r(g$e," \u2014 "),TX=n(g$e,"A",{href:!0});var bpt=s(TX);UJo=r(bpt,"Data2VecAudioForAudioFrameClassification"),bpt.forEach(t),JJo=r(g$e," (Data2VecAudio model)"),g$e.forEach(t),YJo=i(rl),wF=n(rl,"LI",{});var h$e=s(wF);e_e=n(h$e,"STRONG",{});var vpt=s(e_e);KJo=r(vpt,"unispeech-sat"),vpt.forEach(t),ZJo=r(h$e," \u2014 "),MX=n(h$e,"A",{href:!0});var Fpt=s(MX);eYo=r(Fpt,"UniSpeechSatForAudioFrameClassification"),Fpt.forEach(t),oYo=r(h$e," (UniSpeechSat model)"),h$e.forEach(t),rYo=i(rl),AF=n(rl,"LI",{});var p$e=s(AF);o_e=n(p$e,"STRONG",{});var Tpt=s(o_e);tYo=r(Tpt,"wav2vec2"),Tpt.forEach(t),aYo=r(p$e," \u2014 "),EX=n(p$e,"A",{href:!0});var Mpt=s(EX);nYo=r(Mpt,"Wav2Vec2ForAudioFrameClassification"),Mpt.forEach(t),sYo=r(p$e," (Wav2Vec2 model)"),p$e.forEach(t),lYo=i(rl),yF=n(rl,"LI",{});var _$e=s(yF);r_e=n(_$e,"STRONG",{});var Ept=s(r_e);iYo=r(Ept,"wav2vec2-conformer"),Ept.forEach(t),dYo=r(_$e," \u2014 "),CX=n(_$e,"A",{href:!0});var Cpt=s(CX);cYo=r(Cpt,"Wav2Vec2ConformerForAudioFrameClassification"),Cpt.forEach(t),fYo=r(_$e," (Wav2Vec2-Conformer model)"),_$e.forEach(t),mYo=i(rl),LF=n(rl,"LI",{});var u$e=s(LF);t_e=n(u$e,"STRONG",{});var wpt=s(t_e);gYo=r(wpt,"wavlm"),wpt.forEach(t),hYo=r(u$e," \u2014 "),wX=n(u$e,"A",{href:!0});var Apt=s(wX);pYo=r(Apt,"WavLMForAudioFrameClassification"),Apt.forEach(t),_Yo=r(u$e," (WavLM model)"),u$e.forEach(t),rl.forEach(t),uYo=i(pa),xF=n(pa,"P",{});var b$e=s(xF);bYo=r(b$e,"The model is set in evaluation mode by default using "),a_e=n(b$e,"CODE",{});var ypt=s(a_e);vYo=r(ypt,"model.eval()"),ypt.forEach(t),FYo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(b$e,"CODE",{});var Lpt=s(n_e);TYo=r(Lpt,"model.train()"),Lpt.forEach(t),b$e.forEach(t),MYo=i(pa),T($F.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Aqe=i(f),pd=n(f,"H2",{class:!0});var $je=s(pd);kF=n($je,"A",{id:!0,class:!0,href:!0});var xpt=s(kF);s_e=n(xpt,"SPAN",{});var $pt=s(s_e);T(ty.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),EYo=i($je),l_e=n($je,"SPAN",{});var kpt=s(l_e);CYo=r(kpt,"AutoModelForCTC"),kpt.forEach(t),$je.forEach(t),yqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(ay.$$.fragment,tl),wYo=i(tl),_d=n(tl,"P",{});var dZ=s(_d);AYo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AX=n(dZ,"A",{href:!0});var Spt=s(AX);yYo=r(Spt,"from_pretrained()"),Spt.forEach(t),LYo=r(dZ," class method or the "),yX=n(dZ,"A",{href:!0});var Rpt=s(yX);xYo=r(Rpt,"from_config()"),Rpt.forEach(t),$Yo=r(dZ,` class
method.`),dZ.forEach(t),kYo=i(tl),ny=n(tl,"P",{});var kje=s(ny);SYo=r(kje,"This class cannot be instantiated directly using "),i_e=n(kje,"CODE",{});var Ppt=s(i_e);RYo=r(Ppt,"__init__()"),Ppt.forEach(t),PYo=r(kje," (throws an error)."),kje.forEach(t),BYo=i(tl),vt=n(tl,"DIV",{class:!0});var Xw=s(vt);T(sy.$$.fragment,Xw),IYo=i(Xw),d_e=n(Xw,"P",{});var Bpt=s(d_e);qYo=r(Bpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bpt.forEach(t),NYo=i(Xw),ud=n(Xw,"P",{});var cZ=s(ud);jYo=r(cZ,`Note:
Loading a model from its configuration file does `),c_e=n(cZ,"STRONG",{});var Ipt=s(c_e);DYo=r(Ipt,"not"),Ipt.forEach(t),GYo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(cZ,"A",{href:!0});var qpt=s(LX);OYo=r(qpt,"from_pretrained()"),qpt.forEach(t),VYo=r(cZ," to load the model weights."),cZ.forEach(t),XYo=i(Xw),T(SF.$$.fragment,Xw),Xw.forEach(t),zYo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(ly.$$.fragment,_a),WYo=i(_a),f_e=n(_a,"P",{});var Npt=s(f_e);QYo=r(Npt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Npt.forEach(t),HYo=i(_a),Va=n(_a,"P",{});var zw=s(Va);UYo=r(zw,"The model class to instantiate is selected based on the "),m_e=n(zw,"CODE",{});var jpt=s(m_e);JYo=r(jpt,"model_type"),jpt.forEach(t),YYo=r(zw,` property of the config object (either
passed as an argument or loaded from `),g_e=n(zw,"CODE",{});var Dpt=s(g_e);KYo=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),ZYo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(zw,"CODE",{});var Gpt=s(h_e);eKo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),oKo=r(zw,":"),zw.forEach(t),rKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);RF=n(Ve,"LI",{});var v$e=s(RF);p_e=n(v$e,"STRONG",{});var Opt=s(p_e);tKo=r(Opt,"data2vec-audio"),Opt.forEach(t),aKo=r(v$e," \u2014 "),xX=n(v$e,"A",{href:!0});var Vpt=s(xX);nKo=r(Vpt,"Data2VecAudioForCTC"),Vpt.forEach(t),sKo=r(v$e," (Data2VecAudio model)"),v$e.forEach(t),lKo=i(Ve),PF=n(Ve,"LI",{});var F$e=s(PF);__e=n(F$e,"STRONG",{});var Xpt=s(__e);iKo=r(Xpt,"hubert"),Xpt.forEach(t),dKo=r(F$e," \u2014 "),$X=n(F$e,"A",{href:!0});var zpt=s($X);cKo=r(zpt,"HubertForCTC"),zpt.forEach(t),fKo=r(F$e," (Hubert model)"),F$e.forEach(t),mKo=i(Ve),BF=n(Ve,"LI",{});var T$e=s(BF);u_e=n(T$e,"STRONG",{});var Wpt=s(u_e);gKo=r(Wpt,"sew"),Wpt.forEach(t),hKo=r(T$e," \u2014 "),kX=n(T$e,"A",{href:!0});var Qpt=s(kX);pKo=r(Qpt,"SEWForCTC"),Qpt.forEach(t),_Ko=r(T$e," (SEW model)"),T$e.forEach(t),uKo=i(Ve),IF=n(Ve,"LI",{});var M$e=s(IF);b_e=n(M$e,"STRONG",{});var Hpt=s(b_e);bKo=r(Hpt,"sew-d"),Hpt.forEach(t),vKo=r(M$e," \u2014 "),SX=n(M$e,"A",{href:!0});var Upt=s(SX);FKo=r(Upt,"SEWDForCTC"),Upt.forEach(t),TKo=r(M$e," (SEW-D model)"),M$e.forEach(t),MKo=i(Ve),qF=n(Ve,"LI",{});var E$e=s(qF);v_e=n(E$e,"STRONG",{});var Jpt=s(v_e);EKo=r(Jpt,"unispeech"),Jpt.forEach(t),CKo=r(E$e," \u2014 "),RX=n(E$e,"A",{href:!0});var Ypt=s(RX);wKo=r(Ypt,"UniSpeechForCTC"),Ypt.forEach(t),AKo=r(E$e," (UniSpeech model)"),E$e.forEach(t),yKo=i(Ve),NF=n(Ve,"LI",{});var C$e=s(NF);F_e=n(C$e,"STRONG",{});var Kpt=s(F_e);LKo=r(Kpt,"unispeech-sat"),Kpt.forEach(t),xKo=r(C$e," \u2014 "),PX=n(C$e,"A",{href:!0});var Zpt=s(PX);$Ko=r(Zpt,"UniSpeechSatForCTC"),Zpt.forEach(t),kKo=r(C$e," (UniSpeechSat model)"),C$e.forEach(t),SKo=i(Ve),jF=n(Ve,"LI",{});var w$e=s(jF);T_e=n(w$e,"STRONG",{});var e_t=s(T_e);RKo=r(e_t,"wav2vec2"),e_t.forEach(t),PKo=r(w$e," \u2014 "),BX=n(w$e,"A",{href:!0});var o_t=s(BX);BKo=r(o_t,"Wav2Vec2ForCTC"),o_t.forEach(t),IKo=r(w$e," (Wav2Vec2 model)"),w$e.forEach(t),qKo=i(Ve),DF=n(Ve,"LI",{});var A$e=s(DF);M_e=n(A$e,"STRONG",{});var r_t=s(M_e);NKo=r(r_t,"wav2vec2-conformer"),r_t.forEach(t),jKo=r(A$e," \u2014 "),IX=n(A$e,"A",{href:!0});var t_t=s(IX);DKo=r(t_t,"Wav2Vec2ConformerForCTC"),t_t.forEach(t),GKo=r(A$e," (Wav2Vec2-Conformer model)"),A$e.forEach(t),OKo=i(Ve),GF=n(Ve,"LI",{});var y$e=s(GF);E_e=n(y$e,"STRONG",{});var a_t=s(E_e);VKo=r(a_t,"wavlm"),a_t.forEach(t),XKo=r(y$e," \u2014 "),qX=n(y$e,"A",{href:!0});var n_t=s(qX);zKo=r(n_t,"WavLMForCTC"),n_t.forEach(t),WKo=r(y$e," (WavLM model)"),y$e.forEach(t),Ve.forEach(t),QKo=i(_a),OF=n(_a,"P",{});var L$e=s(OF);HKo=r(L$e,"The model is set in evaluation mode by default using "),C_e=n(L$e,"CODE",{});var s_t=s(C_e);UKo=r(s_t,"model.eval()"),s_t.forEach(t),JKo=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(L$e,"CODE",{});var l_t=s(w_e);YKo=r(l_t,"model.train()"),l_t.forEach(t),L$e.forEach(t),KKo=i(_a),T(VF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Lqe=i(f),bd=n(f,"H2",{class:!0});var Sje=s(bd);XF=n(Sje,"A",{id:!0,class:!0,href:!0});var i_t=s(XF);A_e=n(i_t,"SPAN",{});var d_t=s(A_e);T(iy.$$.fragment,d_t),d_t.forEach(t),i_t.forEach(t),ZKo=i(Sje),y_e=n(Sje,"SPAN",{});var c_t=s(y_e);eZo=r(c_t,"AutoModelForSpeechSeq2Seq"),c_t.forEach(t),Sje.forEach(t),xqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(dy.$$.fragment,al),oZo=i(al),vd=n(al,"P",{});var fZ=s(vd);rZo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NX=n(fZ,"A",{href:!0});var f_t=s(NX);tZo=r(f_t,"from_pretrained()"),f_t.forEach(t),aZo=r(fZ," class method or the "),jX=n(fZ,"A",{href:!0});var m_t=s(jX);nZo=r(m_t,"from_config()"),m_t.forEach(t),sZo=r(fZ,` class
method.`),fZ.forEach(t),lZo=i(al),cy=n(al,"P",{});var Rje=s(cy);iZo=r(Rje,"This class cannot be instantiated directly using "),L_e=n(Rje,"CODE",{});var g_t=s(L_e);dZo=r(g_t,"__init__()"),g_t.forEach(t),cZo=r(Rje," (throws an error)."),Rje.forEach(t),fZo=i(al),Ft=n(al,"DIV",{class:!0});var Ww=s(Ft);T(fy.$$.fragment,Ww),mZo=i(Ww),x_e=n(Ww,"P",{});var h_t=s(x_e);gZo=r(h_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),h_t.forEach(t),hZo=i(Ww),Fd=n(Ww,"P",{});var mZ=s(Fd);pZo=r(mZ,`Note:
Loading a model from its configuration file does `),$_e=n(mZ,"STRONG",{});var p_t=s($_e);_Zo=r(p_t,"not"),p_t.forEach(t),uZo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(mZ,"A",{href:!0});var __t=s(DX);bZo=r(__t,"from_pretrained()"),__t.forEach(t),vZo=r(mZ," to load the model weights."),mZ.forEach(t),FZo=i(Ww),T(zF.$$.fragment,Ww),Ww.forEach(t),TZo=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(my.$$.fragment,ua),MZo=i(ua),k_e=n(ua,"P",{});var u_t=s(k_e);EZo=r(u_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),u_t.forEach(t),CZo=i(ua),Xa=n(ua,"P",{});var Qw=s(Xa);wZo=r(Qw,"The model class to instantiate is selected based on the "),S_e=n(Qw,"CODE",{});var b_t=s(S_e);AZo=r(b_t,"model_type"),b_t.forEach(t),yZo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),R_e=n(Qw,"CODE",{});var v_t=s(R_e);LZo=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),xZo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(Qw,"CODE",{});var F_t=s(P_e);$Zo=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),kZo=r(Qw,":"),Qw.forEach(t),SZo=i(ua),gy=n(ua,"UL",{});var Pje=s(gy);WF=n(Pje,"LI",{});var x$e=s(WF);B_e=n(x$e,"STRONG",{});var T_t=s(B_e);RZo=r(T_t,"speech-encoder-decoder"),T_t.forEach(t),PZo=r(x$e," \u2014 "),GX=n(x$e,"A",{href:!0});var M_t=s(GX);BZo=r(M_t,"SpeechEncoderDecoderModel"),M_t.forEach(t),IZo=r(x$e," (Speech Encoder decoder model)"),x$e.forEach(t),qZo=i(Pje),QF=n(Pje,"LI",{});var $$e=s(QF);I_e=n($$e,"STRONG",{});var E_t=s(I_e);NZo=r(E_t,"speech_to_text"),E_t.forEach(t),jZo=r($$e," \u2014 "),OX=n($$e,"A",{href:!0});var C_t=s(OX);DZo=r(C_t,"Speech2TextForConditionalGeneration"),C_t.forEach(t),GZo=r($$e," (Speech2Text model)"),$$e.forEach(t),Pje.forEach(t),OZo=i(ua),HF=n(ua,"P",{});var k$e=s(HF);VZo=r(k$e,"The model is set in evaluation mode by default using "),q_e=n(k$e,"CODE",{});var w_t=s(q_e);XZo=r(w_t,"model.eval()"),w_t.forEach(t),zZo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(k$e,"CODE",{});var A_t=s(N_e);WZo=r(A_t,"model.train()"),A_t.forEach(t),k$e.forEach(t),QZo=i(ua),T(UF.$$.fragment,ua),ua.forEach(t),al.forEach(t),$qe=i(f),Td=n(f,"H2",{class:!0});var Bje=s(Td);JF=n(Bje,"A",{id:!0,class:!0,href:!0});var y_t=s(JF);j_e=n(y_t,"SPAN",{});var L_t=s(j_e);T(hy.$$.fragment,L_t),L_t.forEach(t),y_t.forEach(t),HZo=i(Bje),D_e=n(Bje,"SPAN",{});var x_t=s(D_e);UZo=r(x_t,"AutoModelForAudioXVector"),x_t.forEach(t),Bje.forEach(t),kqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(py.$$.fragment,nl),JZo=i(nl),Md=n(nl,"P",{});var gZ=s(Md);YZo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VX=n(gZ,"A",{href:!0});var $_t=s(VX);KZo=r($_t,"from_pretrained()"),$_t.forEach(t),ZZo=r(gZ," class method or the "),XX=n(gZ,"A",{href:!0});var k_t=s(XX);eer=r(k_t,"from_config()"),k_t.forEach(t),oer=r(gZ,` class
method.`),gZ.forEach(t),rer=i(nl),_y=n(nl,"P",{});var Ije=s(_y);ter=r(Ije,"This class cannot be instantiated directly using "),G_e=n(Ije,"CODE",{});var S_t=s(G_e);aer=r(S_t,"__init__()"),S_t.forEach(t),ner=r(Ije," (throws an error)."),Ije.forEach(t),ser=i(nl),Tt=n(nl,"DIV",{class:!0});var Hw=s(Tt);T(uy.$$.fragment,Hw),ler=i(Hw),O_e=n(Hw,"P",{});var R_t=s(O_e);ier=r(R_t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),R_t.forEach(t),der=i(Hw),Ed=n(Hw,"P",{});var hZ=s(Ed);cer=r(hZ,`Note:
Loading a model from its configuration file does `),V_e=n(hZ,"STRONG",{});var P_t=s(V_e);fer=r(P_t,"not"),P_t.forEach(t),mer=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(hZ,"A",{href:!0});var B_t=s(zX);ger=r(B_t,"from_pretrained()"),B_t.forEach(t),her=r(hZ," to load the model weights."),hZ.forEach(t),per=i(Hw),T(YF.$$.fragment,Hw),Hw.forEach(t),_er=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(by.$$.fragment,ba),uer=i(ba),X_e=n(ba,"P",{});var I_t=s(X_e);ber=r(I_t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),I_t.forEach(t),ver=i(ba),za=n(ba,"P",{});var Uw=s(za);Fer=r(Uw,"The model class to instantiate is selected based on the "),z_e=n(Uw,"CODE",{});var q_t=s(z_e);Ter=r(q_t,"model_type"),q_t.forEach(t),Mer=r(Uw,` property of the config object (either
passed as an argument or loaded from `),W_e=n(Uw,"CODE",{});var N_t=s(W_e);Eer=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),Cer=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(Uw,"CODE",{});var j_t=s(Q_e);wer=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),Aer=r(Uw,":"),Uw.forEach(t),yer=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);KF=n(sl,"LI",{});var S$e=s(KF);H_e=n(S$e,"STRONG",{});var D_t=s(H_e);Ler=r(D_t,"data2vec-audio"),D_t.forEach(t),xer=r(S$e," \u2014 "),WX=n(S$e,"A",{href:!0});var G_t=s(WX);$er=r(G_t,"Data2VecAudioForXVector"),G_t.forEach(t),ker=r(S$e," (Data2VecAudio model)"),S$e.forEach(t),Ser=i(sl),ZF=n(sl,"LI",{});var R$e=s(ZF);U_e=n(R$e,"STRONG",{});var O_t=s(U_e);Rer=r(O_t,"unispeech-sat"),O_t.forEach(t),Per=r(R$e," \u2014 "),QX=n(R$e,"A",{href:!0});var V_t=s(QX);Ber=r(V_t,"UniSpeechSatForXVector"),V_t.forEach(t),Ier=r(R$e," (UniSpeechSat model)"),R$e.forEach(t),qer=i(sl),eT=n(sl,"LI",{});var P$e=s(eT);J_e=n(P$e,"STRONG",{});var X_t=s(J_e);Ner=r(X_t,"wav2vec2"),X_t.forEach(t),jer=r(P$e," \u2014 "),HX=n(P$e,"A",{href:!0});var z_t=s(HX);Der=r(z_t,"Wav2Vec2ForXVector"),z_t.forEach(t),Ger=r(P$e," (Wav2Vec2 model)"),P$e.forEach(t),Oer=i(sl),oT=n(sl,"LI",{});var B$e=s(oT);Y_e=n(B$e,"STRONG",{});var W_t=s(Y_e);Ver=r(W_t,"wav2vec2-conformer"),W_t.forEach(t),Xer=r(B$e," \u2014 "),UX=n(B$e,"A",{href:!0});var Q_t=s(UX);zer=r(Q_t,"Wav2Vec2ConformerForXVector"),Q_t.forEach(t),Wer=r(B$e," (Wav2Vec2-Conformer model)"),B$e.forEach(t),Qer=i(sl),rT=n(sl,"LI",{});var I$e=s(rT);K_e=n(I$e,"STRONG",{});var H_t=s(K_e);Her=r(H_t,"wavlm"),H_t.forEach(t),Uer=r(I$e," \u2014 "),JX=n(I$e,"A",{href:!0});var U_t=s(JX);Jer=r(U_t,"WavLMForXVector"),U_t.forEach(t),Yer=r(I$e," (WavLM model)"),I$e.forEach(t),sl.forEach(t),Ker=i(ba),tT=n(ba,"P",{});var q$e=s(tT);Zer=r(q$e,"The model is set in evaluation mode by default using "),Z_e=n(q$e,"CODE",{});var J_t=s(Z_e);eor=r(J_t,"model.eval()"),J_t.forEach(t),oor=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(q$e,"CODE",{});var Y_t=s(eue);ror=r(Y_t,"model.train()"),Y_t.forEach(t),q$e.forEach(t),tor=i(ba),T(aT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Sqe=i(f),Cd=n(f,"H2",{class:!0});var qje=s(Cd);nT=n(qje,"A",{id:!0,class:!0,href:!0});var K_t=s(nT);oue=n(K_t,"SPAN",{});var Z_t=s(oue);T(vy.$$.fragment,Z_t),Z_t.forEach(t),K_t.forEach(t),aor=i(qje),rue=n(qje,"SPAN",{});var eut=s(rue);nor=r(eut,"AutoModelForMaskedImageModeling"),eut.forEach(t),qje.forEach(t),Rqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(Fy.$$.fragment,ll),sor=i(ll),wd=n(ll,"P",{});var pZ=s(wd);lor=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),YX=n(pZ,"A",{href:!0});var out=s(YX);ior=r(out,"from_pretrained()"),out.forEach(t),dor=r(pZ," class method or the "),KX=n(pZ,"A",{href:!0});var rut=s(KX);cor=r(rut,"from_config()"),rut.forEach(t),mor=r(pZ,` class
method.`),pZ.forEach(t),gor=i(ll),Ty=n(ll,"P",{});var Nje=s(Ty);hor=r(Nje,"This class cannot be instantiated directly using "),tue=n(Nje,"CODE",{});var tut=s(tue);por=r(tut,"__init__()"),tut.forEach(t),_or=r(Nje," (throws an error)."),Nje.forEach(t),uor=i(ll),Mt=n(ll,"DIV",{class:!0});var Jw=s(Mt);T(My.$$.fragment,Jw),bor=i(Jw),aue=n(Jw,"P",{});var aut=s(aue);vor=r(aut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),aut.forEach(t),For=i(Jw),Ad=n(Jw,"P",{});var _Z=s(Ad);Tor=r(_Z,`Note:
Loading a model from its configuration file does `),nue=n(_Z,"STRONG",{});var nut=s(nue);Mor=r(nut,"not"),nut.forEach(t),Eor=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(_Z,"A",{href:!0});var sut=s(ZX);Cor=r(sut,"from_pretrained()"),sut.forEach(t),wor=r(_Z," to load the model weights."),_Z.forEach(t),Aor=i(Jw),T(sT.$$.fragment,Jw),Jw.forEach(t),yor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(Ey.$$.fragment,va),Lor=i(va),sue=n(va,"P",{});var lut=s(sue);xor=r(lut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),lut.forEach(t),$or=i(va),Wa=n(va,"P",{});var Yw=s(Wa);kor=r(Yw,"The model class to instantiate is selected based on the "),lue=n(Yw,"CODE",{});var iut=s(lue);Sor=r(iut,"model_type"),iut.forEach(t),Ror=r(Yw,` property of the config object (either
passed as an argument or loaded from `),iue=n(Yw,"CODE",{});var dut=s(iue);Por=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),Bor=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(Yw,"CODE",{});var cut=s(due);Ior=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),qor=r(Yw,":"),Yw.forEach(t),Nor=i(va),yd=n(va,"UL",{});var uZ=s(yd);lT=n(uZ,"LI",{});var N$e=s(lT);cue=n(N$e,"STRONG",{});var fut=s(cue);jor=r(fut,"deit"),fut.forEach(t),Dor=r(N$e," \u2014 "),ez=n(N$e,"A",{href:!0});var mut=s(ez);Gor=r(mut,"DeiTForMaskedImageModeling"),mut.forEach(t),Oor=r(N$e," (DeiT model)"),N$e.forEach(t),Vor=i(uZ),iT=n(uZ,"LI",{});var j$e=s(iT);fue=n(j$e,"STRONG",{});var gut=s(fue);Xor=r(gut,"swin"),gut.forEach(t),zor=r(j$e," \u2014 "),oz=n(j$e,"A",{href:!0});var hut=s(oz);Wor=r(hut,"SwinForMaskedImageModeling"),hut.forEach(t),Qor=r(j$e," (Swin model)"),j$e.forEach(t),Hor=i(uZ),dT=n(uZ,"LI",{});var D$e=s(dT);mue=n(D$e,"STRONG",{});var put=s(mue);Uor=r(put,"vit"),put.forEach(t),Jor=r(D$e," \u2014 "),rz=n(D$e,"A",{href:!0});var _ut=s(rz);Yor=r(_ut,"ViTForMaskedImageModeling"),_ut.forEach(t),Kor=r(D$e," (ViT model)"),D$e.forEach(t),uZ.forEach(t),Zor=i(va),cT=n(va,"P",{});var G$e=s(cT);err=r(G$e,"The model is set in evaluation mode by default using "),gue=n(G$e,"CODE",{});var uut=s(gue);orr=r(uut,"model.eval()"),uut.forEach(t),rrr=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hue=n(G$e,"CODE",{});var but=s(hue);trr=r(but,"model.train()"),but.forEach(t),G$e.forEach(t),arr=i(va),T(fT.$$.fragment,va),va.forEach(t),ll.forEach(t),Pqe=i(f),Ld=n(f,"H2",{class:!0});var jje=s(Ld);mT=n(jje,"A",{id:!0,class:!0,href:!0});var vut=s(mT);pue=n(vut,"SPAN",{});var Fut=s(pue);T(Cy.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),nrr=i(jje),_ue=n(jje,"SPAN",{});var Tut=s(_ue);srr=r(Tut,"AutoModelForObjectDetection"),Tut.forEach(t),jje.forEach(t),Bqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(wy.$$.fragment,il),lrr=i(il),xd=n(il,"P",{});var bZ=s(xd);irr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tz=n(bZ,"A",{href:!0});var Mut=s(tz);drr=r(Mut,"from_pretrained()"),Mut.forEach(t),crr=r(bZ," class method or the "),az=n(bZ,"A",{href:!0});var Eut=s(az);frr=r(Eut,"from_config()"),Eut.forEach(t),mrr=r(bZ,` class
method.`),bZ.forEach(t),grr=i(il),Ay=n(il,"P",{});var Dje=s(Ay);hrr=r(Dje,"This class cannot be instantiated directly using "),uue=n(Dje,"CODE",{});var Cut=s(uue);prr=r(Cut,"__init__()"),Cut.forEach(t),_rr=r(Dje," (throws an error)."),Dje.forEach(t),urr=i(il),Et=n(il,"DIV",{class:!0});var Kw=s(Et);T(yy.$$.fragment,Kw),brr=i(Kw),bue=n(Kw,"P",{});var wut=s(bue);vrr=r(wut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),wut.forEach(t),Frr=i(Kw),$d=n(Kw,"P",{});var vZ=s($d);Trr=r(vZ,`Note:
Loading a model from its configuration file does `),vue=n(vZ,"STRONG",{});var Aut=s(vue);Mrr=r(Aut,"not"),Aut.forEach(t),Err=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(vZ,"A",{href:!0});var yut=s(nz);Crr=r(yut,"from_pretrained()"),yut.forEach(t),wrr=r(vZ," to load the model weights."),vZ.forEach(t),Arr=i(Kw),T(gT.$$.fragment,Kw),Kw.forEach(t),yrr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(Ly.$$.fragment,Fa),Lrr=i(Fa),Fue=n(Fa,"P",{});var Lut=s(Fue);xrr=r(Lut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lut.forEach(t),$rr=i(Fa),Qa=n(Fa,"P",{});var Zw=s(Qa);krr=r(Zw,"The model class to instantiate is selected based on the "),Tue=n(Zw,"CODE",{});var xut=s(Tue);Srr=r(xut,"model_type"),xut.forEach(t),Rrr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Mue=n(Zw,"CODE",{});var $ut=s(Mue);Prr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),Brr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(Zw,"CODE",{});var kut=s(Eue);Irr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),qrr=r(Zw,":"),Zw.forEach(t),Nrr=i(Fa),xy=n(Fa,"UL",{});var Gje=s(xy);hT=n(Gje,"LI",{});var O$e=s(hT);Cue=n(O$e,"STRONG",{});var Sut=s(Cue);jrr=r(Sut,"detr"),Sut.forEach(t),Drr=r(O$e," \u2014 "),sz=n(O$e,"A",{href:!0});var Rut=s(sz);Grr=r(Rut,"DetrForObjectDetection"),Rut.forEach(t),Orr=r(O$e," (DETR model)"),O$e.forEach(t),Vrr=i(Gje),pT=n(Gje,"LI",{});var V$e=s(pT);wue=n(V$e,"STRONG",{});var Put=s(wue);Xrr=r(Put,"yolos"),Put.forEach(t),zrr=r(V$e," \u2014 "),lz=n(V$e,"A",{href:!0});var But=s(lz);Wrr=r(But,"YolosForObjectDetection"),But.forEach(t),Qrr=r(V$e," (YOLOS model)"),V$e.forEach(t),Gje.forEach(t),Hrr=i(Fa),_T=n(Fa,"P",{});var X$e=s(_T);Urr=r(X$e,"The model is set in evaluation mode by default using "),Aue=n(X$e,"CODE",{});var Iut=s(Aue);Jrr=r(Iut,"model.eval()"),Iut.forEach(t),Yrr=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(X$e,"CODE",{});var qut=s(yue);Krr=r(qut,"model.train()"),qut.forEach(t),X$e.forEach(t),Zrr=i(Fa),T(uT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Iqe=i(f),kd=n(f,"H2",{class:!0});var Oje=s(kd);bT=n(Oje,"A",{id:!0,class:!0,href:!0});var Nut=s(bT);Lue=n(Nut,"SPAN",{});var jut=s(Lue);T($y.$$.fragment,jut),jut.forEach(t),Nut.forEach(t),etr=i(Oje),xue=n(Oje,"SPAN",{});var Dut=s(xue);otr=r(Dut,"AutoModelForImageSegmentation"),Dut.forEach(t),Oje.forEach(t),qqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(ky.$$.fragment,dl),rtr=i(dl),Sd=n(dl,"P",{});var FZ=s(Sd);ttr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iz=n(FZ,"A",{href:!0});var Gut=s(iz);atr=r(Gut,"from_pretrained()"),Gut.forEach(t),ntr=r(FZ," class method or the "),dz=n(FZ,"A",{href:!0});var Out=s(dz);str=r(Out,"from_config()"),Out.forEach(t),ltr=r(FZ,` class
method.`),FZ.forEach(t),itr=i(dl),Sy=n(dl,"P",{});var Vje=s(Sy);dtr=r(Vje,"This class cannot be instantiated directly using "),$ue=n(Vje,"CODE",{});var Vut=s($ue);ctr=r(Vut,"__init__()"),Vut.forEach(t),ftr=r(Vje," (throws an error)."),Vje.forEach(t),mtr=i(dl),Ct=n(dl,"DIV",{class:!0});var eA=s(Ct);T(Ry.$$.fragment,eA),gtr=i(eA),kue=n(eA,"P",{});var Xut=s(kue);htr=r(Xut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Xut.forEach(t),ptr=i(eA),Rd=n(eA,"P",{});var TZ=s(Rd);_tr=r(TZ,`Note:
Loading a model from its configuration file does `),Sue=n(TZ,"STRONG",{});var zut=s(Sue);utr=r(zut,"not"),zut.forEach(t),btr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(TZ,"A",{href:!0});var Wut=s(cz);vtr=r(Wut,"from_pretrained()"),Wut.forEach(t),Ftr=r(TZ," to load the model weights."),TZ.forEach(t),Ttr=i(eA),T(vT.$$.fragment,eA),eA.forEach(t),Mtr=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(Py.$$.fragment,Ta),Etr=i(Ta),Rue=n(Ta,"P",{});var Qut=s(Rue);Ctr=r(Qut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qut.forEach(t),wtr=i(Ta),Ha=n(Ta,"P",{});var oA=s(Ha);Atr=r(oA,"The model class to instantiate is selected based on the "),Pue=n(oA,"CODE",{});var Hut=s(Pue);ytr=r(Hut,"model_type"),Hut.forEach(t),Ltr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Bue=n(oA,"CODE",{});var Uut=s(Bue);xtr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),$tr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(oA,"CODE",{});var Jut=s(Iue);ktr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),Str=r(oA,":"),oA.forEach(t),Rtr=i(Ta),que=n(Ta,"UL",{});var Yut=s(que);FT=n(Yut,"LI",{});var z$e=s(FT);Nue=n(z$e,"STRONG",{});var Kut=s(Nue);Ptr=r(Kut,"detr"),Kut.forEach(t),Btr=r(z$e," \u2014 "),fz=n(z$e,"A",{href:!0});var Zut=s(fz);Itr=r(Zut,"DetrForSegmentation"),Zut.forEach(t),qtr=r(z$e," (DETR model)"),z$e.forEach(t),Yut.forEach(t),Ntr=i(Ta),TT=n(Ta,"P",{});var W$e=s(TT);jtr=r(W$e,"The model is set in evaluation mode by default using "),jue=n(W$e,"CODE",{});var e1t=s(jue);Dtr=r(e1t,"model.eval()"),e1t.forEach(t),Gtr=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(W$e,"CODE",{});var o1t=s(Due);Otr=r(o1t,"model.train()"),o1t.forEach(t),W$e.forEach(t),Vtr=i(Ta),T(MT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Nqe=i(f),Pd=n(f,"H2",{class:!0});var Xje=s(Pd);ET=n(Xje,"A",{id:!0,class:!0,href:!0});var r1t=s(ET);Gue=n(r1t,"SPAN",{});var t1t=s(Gue);T(By.$$.fragment,t1t),t1t.forEach(t),r1t.forEach(t),Xtr=i(Xje),Oue=n(Xje,"SPAN",{});var a1t=s(Oue);ztr=r(a1t,"AutoModelForSemanticSegmentation"),a1t.forEach(t),Xje.forEach(t),jqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(Iy.$$.fragment,cl),Wtr=i(cl),Bd=n(cl,"P",{});var MZ=s(Bd);Qtr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mz=n(MZ,"A",{href:!0});var n1t=s(mz);Htr=r(n1t,"from_pretrained()"),n1t.forEach(t),Utr=r(MZ," class method or the "),gz=n(MZ,"A",{href:!0});var s1t=s(gz);Jtr=r(s1t,"from_config()"),s1t.forEach(t),Ytr=r(MZ,` class
method.`),MZ.forEach(t),Ktr=i(cl),qy=n(cl,"P",{});var zje=s(qy);Ztr=r(zje,"This class cannot be instantiated directly using "),Vue=n(zje,"CODE",{});var l1t=s(Vue);ear=r(l1t,"__init__()"),l1t.forEach(t),oar=r(zje," (throws an error)."),zje.forEach(t),rar=i(cl),wt=n(cl,"DIV",{class:!0});var rA=s(wt);T(Ny.$$.fragment,rA),tar=i(rA),Xue=n(rA,"P",{});var i1t=s(Xue);aar=r(i1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),i1t.forEach(t),nar=i(rA),Id=n(rA,"P",{});var EZ=s(Id);sar=r(EZ,`Note:
Loading a model from its configuration file does `),zue=n(EZ,"STRONG",{});var d1t=s(zue);lar=r(d1t,"not"),d1t.forEach(t),iar=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(EZ,"A",{href:!0});var c1t=s(hz);dar=r(c1t,"from_pretrained()"),c1t.forEach(t),car=r(EZ," to load the model weights."),EZ.forEach(t),far=i(rA),T(CT.$$.fragment,rA),rA.forEach(t),mar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(jy.$$.fragment,Ma),gar=i(Ma),Wue=n(Ma,"P",{});var f1t=s(Wue);har=r(f1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),f1t.forEach(t),par=i(Ma),Ua=n(Ma,"P",{});var tA=s(Ua);_ar=r(tA,"The model class to instantiate is selected based on the "),Que=n(tA,"CODE",{});var m1t=s(Que);uar=r(m1t,"model_type"),m1t.forEach(t),bar=r(tA,` property of the config object (either
passed as an argument or loaded from `),Hue=n(tA,"CODE",{});var g1t=s(Hue);Far=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Tar=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(tA,"CODE",{});var h1t=s(Uue);Mar=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Ear=r(tA,":"),tA.forEach(t),Car=i(Ma),Ja=n(Ma,"UL",{});var aA=s(Ja);wT=n(aA,"LI",{});var Q$e=s(wT);Jue=n(Q$e,"STRONG",{});var p1t=s(Jue);war=r(p1t,"beit"),p1t.forEach(t),Aar=r(Q$e," \u2014 "),pz=n(Q$e,"A",{href:!0});var _1t=s(pz);yar=r(_1t,"BeitForSemanticSegmentation"),_1t.forEach(t),Lar=r(Q$e," (BEiT model)"),Q$e.forEach(t),xar=i(aA),AT=n(aA,"LI",{});var H$e=s(AT);Yue=n(H$e,"STRONG",{});var u1t=s(Yue);$ar=r(u1t,"data2vec-vision"),u1t.forEach(t),kar=r(H$e," \u2014 "),_z=n(H$e,"A",{href:!0});var b1t=s(_z);Sar=r(b1t,"Data2VecVisionForSemanticSegmentation"),b1t.forEach(t),Rar=r(H$e," (Data2VecVision model)"),H$e.forEach(t),Par=i(aA),yT=n(aA,"LI",{});var U$e=s(yT);Kue=n(U$e,"STRONG",{});var v1t=s(Kue);Bar=r(v1t,"dpt"),v1t.forEach(t),Iar=r(U$e," \u2014 "),uz=n(U$e,"A",{href:!0});var F1t=s(uz);qar=r(F1t,"DPTForSemanticSegmentation"),F1t.forEach(t),Nar=r(U$e," (DPT model)"),U$e.forEach(t),jar=i(aA),LT=n(aA,"LI",{});var J$e=s(LT);Zue=n(J$e,"STRONG",{});var T1t=s(Zue);Dar=r(T1t,"segformer"),T1t.forEach(t),Gar=r(J$e," \u2014 "),bz=n(J$e,"A",{href:!0});var M1t=s(bz);Oar=r(M1t,"SegformerForSemanticSegmentation"),M1t.forEach(t),Var=r(J$e," (SegFormer model)"),J$e.forEach(t),aA.forEach(t),Xar=i(Ma),xT=n(Ma,"P",{});var Y$e=s(xT);zar=r(Y$e,"The model is set in evaluation mode by default using "),e1e=n(Y$e,"CODE",{});var E1t=s(e1e);War=r(E1t,"model.eval()"),E1t.forEach(t),Qar=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(Y$e,"CODE",{});var C1t=s(o1e);Har=r(C1t,"model.train()"),C1t.forEach(t),Y$e.forEach(t),Uar=i(Ma),T($T.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Dqe=i(f),qd=n(f,"H2",{class:!0});var Wje=s(qd);kT=n(Wje,"A",{id:!0,class:!0,href:!0});var w1t=s(kT);r1e=n(w1t,"SPAN",{});var A1t=s(r1e);T(Dy.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),Jar=i(Wje),t1e=n(Wje,"SPAN",{});var y1t=s(t1e);Yar=r(y1t,"AutoModelForInstanceSegmentation"),y1t.forEach(t),Wje.forEach(t),Gqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(Gy.$$.fragment,fl),Kar=i(fl),Nd=n(fl,"P",{});var CZ=s(Nd);Zar=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vz=n(CZ,"A",{href:!0});var L1t=s(vz);enr=r(L1t,"from_pretrained()"),L1t.forEach(t),onr=r(CZ," class method or the "),Fz=n(CZ,"A",{href:!0});var x1t=s(Fz);rnr=r(x1t,"from_config()"),x1t.forEach(t),tnr=r(CZ,` class
method.`),CZ.forEach(t),anr=i(fl),Oy=n(fl,"P",{});var Qje=s(Oy);nnr=r(Qje,"This class cannot be instantiated directly using "),a1e=n(Qje,"CODE",{});var $1t=s(a1e);snr=r($1t,"__init__()"),$1t.forEach(t),lnr=r(Qje," (throws an error)."),Qje.forEach(t),inr=i(fl),At=n(fl,"DIV",{class:!0});var nA=s(At);T(Vy.$$.fragment,nA),dnr=i(nA),n1e=n(nA,"P",{});var k1t=s(n1e);cnr=r(k1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),k1t.forEach(t),fnr=i(nA),jd=n(nA,"P",{});var wZ=s(jd);mnr=r(wZ,`Note:
Loading a model from its configuration file does `),s1e=n(wZ,"STRONG",{});var S1t=s(s1e);gnr=r(S1t,"not"),S1t.forEach(t),hnr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(wZ,"A",{href:!0});var R1t=s(Tz);pnr=r(R1t,"from_pretrained()"),R1t.forEach(t),_nr=r(wZ," to load the model weights."),wZ.forEach(t),unr=i(nA),T(ST.$$.fragment,nA),nA.forEach(t),bnr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(Xy.$$.fragment,Ea),vnr=i(Ea),l1e=n(Ea,"P",{});var P1t=s(l1e);Fnr=r(P1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),P1t.forEach(t),Tnr=i(Ea),Ya=n(Ea,"P",{});var sA=s(Ya);Mnr=r(sA,"The model class to instantiate is selected based on the "),i1e=n(sA,"CODE",{});var B1t=s(i1e);Enr=r(B1t,"model_type"),B1t.forEach(t),Cnr=r(sA,` property of the config object (either
passed as an argument or loaded from `),d1e=n(sA,"CODE",{});var I1t=s(d1e);wnr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Anr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(sA,"CODE",{});var q1t=s(c1e);ynr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Lnr=r(sA,":"),sA.forEach(t),xnr=i(Ea),f1e=n(Ea,"UL",{});var N1t=s(f1e);RT=n(N1t,"LI",{});var K$e=s(RT);m1e=n(K$e,"STRONG",{});var j1t=s(m1e);$nr=r(j1t,"maskformer"),j1t.forEach(t),knr=r(K$e," \u2014 "),Mz=n(K$e,"A",{href:!0});var D1t=s(Mz);Snr=r(D1t,"MaskFormerForInstanceSegmentation"),D1t.forEach(t),Rnr=r(K$e," (MaskFormer model)"),K$e.forEach(t),N1t.forEach(t),Pnr=i(Ea),PT=n(Ea,"P",{});var Z$e=s(PT);Bnr=r(Z$e,"The model is set in evaluation mode by default using "),g1e=n(Z$e,"CODE",{});var G1t=s(g1e);Inr=r(G1t,"model.eval()"),G1t.forEach(t),qnr=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(Z$e,"CODE",{});var O1t=s(h1e);Nnr=r(O1t,"model.train()"),O1t.forEach(t),Z$e.forEach(t),jnr=i(Ea),T(BT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Oqe=i(f),Dd=n(f,"H2",{class:!0});var Hje=s(Dd);IT=n(Hje,"A",{id:!0,class:!0,href:!0});var V1t=s(IT);p1e=n(V1t,"SPAN",{});var X1t=s(p1e);T(zy.$$.fragment,X1t),X1t.forEach(t),V1t.forEach(t),Dnr=i(Hje),_1e=n(Hje,"SPAN",{});var z1t=s(_1e);Gnr=r(z1t,"TFAutoModel"),z1t.forEach(t),Hje.forEach(t),Vqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(Wy.$$.fragment,ml),Onr=i(ml),Gd=n(ml,"P",{});var AZ=s(Gd);Vnr=r(AZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ez=n(AZ,"A",{href:!0});var W1t=s(Ez);Xnr=r(W1t,"from_pretrained()"),W1t.forEach(t),znr=r(AZ," class method or the "),Cz=n(AZ,"A",{href:!0});var Q1t=s(Cz);Wnr=r(Q1t,"from_config()"),Q1t.forEach(t),Qnr=r(AZ,` class
method.`),AZ.forEach(t),Hnr=i(ml),Qy=n(ml,"P",{});var Uje=s(Qy);Unr=r(Uje,"This class cannot be instantiated directly using "),u1e=n(Uje,"CODE",{});var H1t=s(u1e);Jnr=r(H1t,"__init__()"),H1t.forEach(t),Ynr=r(Uje," (throws an error)."),Uje.forEach(t),Knr=i(ml),yt=n(ml,"DIV",{class:!0});var lA=s(yt);T(Hy.$$.fragment,lA),Znr=i(lA),b1e=n(lA,"P",{});var U1t=s(b1e);esr=r(U1t,"Instantiates one of the base model classes of the library from a configuration."),U1t.forEach(t),osr=i(lA),Od=n(lA,"P",{});var yZ=s(Od);rsr=r(yZ,`Note:
Loading a model from its configuration file does `),v1e=n(yZ,"STRONG",{});var J1t=s(v1e);tsr=r(J1t,"not"),J1t.forEach(t),asr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(yZ,"A",{href:!0});var Y1t=s(wz);nsr=r(Y1t,"from_pretrained()"),Y1t.forEach(t),ssr=r(yZ," to load the model weights."),yZ.forEach(t),lsr=i(lA),T(qT.$$.fragment,lA),lA.forEach(t),isr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(Uy.$$.fragment,gl),dsr=i(gl),F1e=n(gl,"P",{});var K1t=s(F1e);csr=r(K1t,"Instantiate one of the base model classes of the library from a pretrained model."),K1t.forEach(t),fsr=i(gl),Ka=n(gl,"P",{});var iA=s(Ka);msr=r(iA,"The model class to instantiate is selected based on the "),T1e=n(iA,"CODE",{});var Z1t=s(T1e);gsr=r(Z1t,"model_type"),Z1t.forEach(t),hsr=r(iA,` property of the config object (either
passed as an argument or loaded from `),M1e=n(iA,"CODE",{});var ebt=s(M1e);psr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),_sr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(iA,"CODE",{});var obt=s(E1e);usr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),bsr=r(iA,":"),iA.forEach(t),vsr=i(gl),N=n(gl,"UL",{});var D=s(N);NT=n(D,"LI",{});var eke=s(NT);C1e=n(eke,"STRONG",{});var rbt=s(C1e);Fsr=r(rbt,"albert"),rbt.forEach(t),Tsr=r(eke," \u2014 "),Az=n(eke,"A",{href:!0});var tbt=s(Az);Msr=r(tbt,"TFAlbertModel"),tbt.forEach(t),Esr=r(eke," (ALBERT model)"),eke.forEach(t),Csr=i(D),jT=n(D,"LI",{});var oke=s(jT);w1e=n(oke,"STRONG",{});var abt=s(w1e);wsr=r(abt,"bart"),abt.forEach(t),Asr=r(oke," \u2014 "),yz=n(oke,"A",{href:!0});var nbt=s(yz);ysr=r(nbt,"TFBartModel"),nbt.forEach(t),Lsr=r(oke," (BART model)"),oke.forEach(t),xsr=i(D),DT=n(D,"LI",{});var rke=s(DT);A1e=n(rke,"STRONG",{});var sbt=s(A1e);$sr=r(sbt,"bert"),sbt.forEach(t),ksr=r(rke," \u2014 "),Lz=n(rke,"A",{href:!0});var lbt=s(Lz);Ssr=r(lbt,"TFBertModel"),lbt.forEach(t),Rsr=r(rke," (BERT model)"),rke.forEach(t),Psr=i(D),GT=n(D,"LI",{});var tke=s(GT);y1e=n(tke,"STRONG",{});var ibt=s(y1e);Bsr=r(ibt,"blenderbot"),ibt.forEach(t),Isr=r(tke," \u2014 "),xz=n(tke,"A",{href:!0});var dbt=s(xz);qsr=r(dbt,"TFBlenderbotModel"),dbt.forEach(t),Nsr=r(tke," (Blenderbot model)"),tke.forEach(t),jsr=i(D),OT=n(D,"LI",{});var ake=s(OT);L1e=n(ake,"STRONG",{});var cbt=s(L1e);Dsr=r(cbt,"blenderbot-small"),cbt.forEach(t),Gsr=r(ake," \u2014 "),$z=n(ake,"A",{href:!0});var fbt=s($z);Osr=r(fbt,"TFBlenderbotSmallModel"),fbt.forEach(t),Vsr=r(ake," (BlenderbotSmall model)"),ake.forEach(t),Xsr=i(D),VT=n(D,"LI",{});var nke=s(VT);x1e=n(nke,"STRONG",{});var mbt=s(x1e);zsr=r(mbt,"camembert"),mbt.forEach(t),Wsr=r(nke," \u2014 "),kz=n(nke,"A",{href:!0});var gbt=s(kz);Qsr=r(gbt,"TFCamembertModel"),gbt.forEach(t),Hsr=r(nke," (CamemBERT model)"),nke.forEach(t),Usr=i(D),XT=n(D,"LI",{});var ske=s(XT);$1e=n(ske,"STRONG",{});var hbt=s($1e);Jsr=r(hbt,"clip"),hbt.forEach(t),Ysr=r(ske," \u2014 "),Sz=n(ske,"A",{href:!0});var pbt=s(Sz);Ksr=r(pbt,"TFCLIPModel"),pbt.forEach(t),Zsr=r(ske," (CLIP model)"),ske.forEach(t),elr=i(D),zT=n(D,"LI",{});var lke=s(zT);k1e=n(lke,"STRONG",{});var _bt=s(k1e);olr=r(_bt,"convbert"),_bt.forEach(t),rlr=r(lke," \u2014 "),Rz=n(lke,"A",{href:!0});var ubt=s(Rz);tlr=r(ubt,"TFConvBertModel"),ubt.forEach(t),alr=r(lke," (ConvBERT model)"),lke.forEach(t),nlr=i(D),WT=n(D,"LI",{});var ike=s(WT);S1e=n(ike,"STRONG",{});var bbt=s(S1e);slr=r(bbt,"convnext"),bbt.forEach(t),llr=r(ike," \u2014 "),Pz=n(ike,"A",{href:!0});var vbt=s(Pz);ilr=r(vbt,"TFConvNextModel"),vbt.forEach(t),dlr=r(ike," (ConvNext model)"),ike.forEach(t),clr=i(D),QT=n(D,"LI",{});var dke=s(QT);R1e=n(dke,"STRONG",{});var Fbt=s(R1e);flr=r(Fbt,"ctrl"),Fbt.forEach(t),mlr=r(dke," \u2014 "),Bz=n(dke,"A",{href:!0});var Tbt=s(Bz);glr=r(Tbt,"TFCTRLModel"),Tbt.forEach(t),hlr=r(dke," (CTRL model)"),dke.forEach(t),plr=i(D),HT=n(D,"LI",{});var cke=s(HT);P1e=n(cke,"STRONG",{});var Mbt=s(P1e);_lr=r(Mbt,"data2vec-vision"),Mbt.forEach(t),ulr=r(cke," \u2014 "),Iz=n(cke,"A",{href:!0});var Ebt=s(Iz);blr=r(Ebt,"TFData2VecVisionModel"),Ebt.forEach(t),vlr=r(cke," (Data2VecVision model)"),cke.forEach(t),Flr=i(D),UT=n(D,"LI",{});var fke=s(UT);B1e=n(fke,"STRONG",{});var Cbt=s(B1e);Tlr=r(Cbt,"deberta"),Cbt.forEach(t),Mlr=r(fke," \u2014 "),qz=n(fke,"A",{href:!0});var wbt=s(qz);Elr=r(wbt,"TFDebertaModel"),wbt.forEach(t),Clr=r(fke," (DeBERTa model)"),fke.forEach(t),wlr=i(D),JT=n(D,"LI",{});var mke=s(JT);I1e=n(mke,"STRONG",{});var Abt=s(I1e);Alr=r(Abt,"deberta-v2"),Abt.forEach(t),ylr=r(mke," \u2014 "),Nz=n(mke,"A",{href:!0});var ybt=s(Nz);Llr=r(ybt,"TFDebertaV2Model"),ybt.forEach(t),xlr=r(mke," (DeBERTa-v2 model)"),mke.forEach(t),$lr=i(D),YT=n(D,"LI",{});var gke=s(YT);q1e=n(gke,"STRONG",{});var Lbt=s(q1e);klr=r(Lbt,"distilbert"),Lbt.forEach(t),Slr=r(gke," \u2014 "),jz=n(gke,"A",{href:!0});var xbt=s(jz);Rlr=r(xbt,"TFDistilBertModel"),xbt.forEach(t),Plr=r(gke," (DistilBERT model)"),gke.forEach(t),Blr=i(D),KT=n(D,"LI",{});var hke=s(KT);N1e=n(hke,"STRONG",{});var $bt=s(N1e);Ilr=r($bt,"dpr"),$bt.forEach(t),qlr=r(hke," \u2014 "),Dz=n(hke,"A",{href:!0});var kbt=s(Dz);Nlr=r(kbt,"TFDPRQuestionEncoder"),kbt.forEach(t),jlr=r(hke," (DPR model)"),hke.forEach(t),Dlr=i(D),ZT=n(D,"LI",{});var pke=s(ZT);j1e=n(pke,"STRONG",{});var Sbt=s(j1e);Glr=r(Sbt,"electra"),Sbt.forEach(t),Olr=r(pke," \u2014 "),Gz=n(pke,"A",{href:!0});var Rbt=s(Gz);Vlr=r(Rbt,"TFElectraModel"),Rbt.forEach(t),Xlr=r(pke," (ELECTRA model)"),pke.forEach(t),zlr=i(D),e8=n(D,"LI",{});var _ke=s(e8);D1e=n(_ke,"STRONG",{});var Pbt=s(D1e);Wlr=r(Pbt,"flaubert"),Pbt.forEach(t),Qlr=r(_ke," \u2014 "),Oz=n(_ke,"A",{href:!0});var Bbt=s(Oz);Hlr=r(Bbt,"TFFlaubertModel"),Bbt.forEach(t),Ulr=r(_ke," (FlauBERT model)"),_ke.forEach(t),Jlr=i(D),Bs=n(D,"LI",{});var A$=s(Bs);G1e=n(A$,"STRONG",{});var Ibt=s(G1e);Ylr=r(Ibt,"funnel"),Ibt.forEach(t),Klr=r(A$," \u2014 "),Vz=n(A$,"A",{href:!0});var qbt=s(Vz);Zlr=r(qbt,"TFFunnelModel"),qbt.forEach(t),eir=r(A$," or "),Xz=n(A$,"A",{href:!0});var Nbt=s(Xz);oir=r(Nbt,"TFFunnelBaseModel"),Nbt.forEach(t),rir=r(A$," (Funnel Transformer model)"),A$.forEach(t),tir=i(D),o8=n(D,"LI",{});var uke=s(o8);O1e=n(uke,"STRONG",{});var jbt=s(O1e);air=r(jbt,"gpt2"),jbt.forEach(t),nir=r(uke," \u2014 "),zz=n(uke,"A",{href:!0});var Dbt=s(zz);sir=r(Dbt,"TFGPT2Model"),Dbt.forEach(t),lir=r(uke," (OpenAI GPT-2 model)"),uke.forEach(t),iir=i(D),r8=n(D,"LI",{});var bke=s(r8);V1e=n(bke,"STRONG",{});var Gbt=s(V1e);dir=r(Gbt,"gptj"),Gbt.forEach(t),cir=r(bke," \u2014 "),Wz=n(bke,"A",{href:!0});var Obt=s(Wz);fir=r(Obt,"TFGPTJModel"),Obt.forEach(t),mir=r(bke," (GPT-J model)"),bke.forEach(t),gir=i(D),t8=n(D,"LI",{});var vke=s(t8);X1e=n(vke,"STRONG",{});var Vbt=s(X1e);hir=r(Vbt,"hubert"),Vbt.forEach(t),pir=r(vke," \u2014 "),Qz=n(vke,"A",{href:!0});var Xbt=s(Qz);_ir=r(Xbt,"TFHubertModel"),Xbt.forEach(t),uir=r(vke," (Hubert model)"),vke.forEach(t),bir=i(D),a8=n(D,"LI",{});var Fke=s(a8);z1e=n(Fke,"STRONG",{});var zbt=s(z1e);vir=r(zbt,"layoutlm"),zbt.forEach(t),Fir=r(Fke," \u2014 "),Hz=n(Fke,"A",{href:!0});var Wbt=s(Hz);Tir=r(Wbt,"TFLayoutLMModel"),Wbt.forEach(t),Mir=r(Fke," (LayoutLM model)"),Fke.forEach(t),Eir=i(D),n8=n(D,"LI",{});var Tke=s(n8);W1e=n(Tke,"STRONG",{});var Qbt=s(W1e);Cir=r(Qbt,"led"),Qbt.forEach(t),wir=r(Tke," \u2014 "),Uz=n(Tke,"A",{href:!0});var Hbt=s(Uz);Air=r(Hbt,"TFLEDModel"),Hbt.forEach(t),yir=r(Tke," (LED model)"),Tke.forEach(t),Lir=i(D),s8=n(D,"LI",{});var Mke=s(s8);Q1e=n(Mke,"STRONG",{});var Ubt=s(Q1e);xir=r(Ubt,"longformer"),Ubt.forEach(t),$ir=r(Mke," \u2014 "),Jz=n(Mke,"A",{href:!0});var Jbt=s(Jz);kir=r(Jbt,"TFLongformerModel"),Jbt.forEach(t),Sir=r(Mke," (Longformer model)"),Mke.forEach(t),Rir=i(D),l8=n(D,"LI",{});var Eke=s(l8);H1e=n(Eke,"STRONG",{});var Ybt=s(H1e);Pir=r(Ybt,"lxmert"),Ybt.forEach(t),Bir=r(Eke," \u2014 "),Yz=n(Eke,"A",{href:!0});var Kbt=s(Yz);Iir=r(Kbt,"TFLxmertModel"),Kbt.forEach(t),qir=r(Eke," (LXMERT model)"),Eke.forEach(t),Nir=i(D),i8=n(D,"LI",{});var Cke=s(i8);U1e=n(Cke,"STRONG",{});var Zbt=s(U1e);jir=r(Zbt,"marian"),Zbt.forEach(t),Dir=r(Cke," \u2014 "),Kz=n(Cke,"A",{href:!0});var e2t=s(Kz);Gir=r(e2t,"TFMarianModel"),e2t.forEach(t),Oir=r(Cke," (Marian model)"),Cke.forEach(t),Vir=i(D),d8=n(D,"LI",{});var wke=s(d8);J1e=n(wke,"STRONG",{});var o2t=s(J1e);Xir=r(o2t,"mbart"),o2t.forEach(t),zir=r(wke," \u2014 "),Zz=n(wke,"A",{href:!0});var r2t=s(Zz);Wir=r(r2t,"TFMBartModel"),r2t.forEach(t),Qir=r(wke," (mBART model)"),wke.forEach(t),Hir=i(D),c8=n(D,"LI",{});var Ake=s(c8);Y1e=n(Ake,"STRONG",{});var t2t=s(Y1e);Uir=r(t2t,"mobilebert"),t2t.forEach(t),Jir=r(Ake," \u2014 "),eW=n(Ake,"A",{href:!0});var a2t=s(eW);Yir=r(a2t,"TFMobileBertModel"),a2t.forEach(t),Kir=r(Ake," (MobileBERT model)"),Ake.forEach(t),Zir=i(D),f8=n(D,"LI",{});var yke=s(f8);K1e=n(yke,"STRONG",{});var n2t=s(K1e);edr=r(n2t,"mpnet"),n2t.forEach(t),odr=r(yke," \u2014 "),oW=n(yke,"A",{href:!0});var s2t=s(oW);rdr=r(s2t,"TFMPNetModel"),s2t.forEach(t),tdr=r(yke," (MPNet model)"),yke.forEach(t),adr=i(D),m8=n(D,"LI",{});var Lke=s(m8);Z1e=n(Lke,"STRONG",{});var l2t=s(Z1e);ndr=r(l2t,"mt5"),l2t.forEach(t),sdr=r(Lke," \u2014 "),rW=n(Lke,"A",{href:!0});var i2t=s(rW);ldr=r(i2t,"TFMT5Model"),i2t.forEach(t),idr=r(Lke," (mT5 model)"),Lke.forEach(t),ddr=i(D),g8=n(D,"LI",{});var xke=s(g8);ebe=n(xke,"STRONG",{});var d2t=s(ebe);cdr=r(d2t,"openai-gpt"),d2t.forEach(t),fdr=r(xke," \u2014 "),tW=n(xke,"A",{href:!0});var c2t=s(tW);mdr=r(c2t,"TFOpenAIGPTModel"),c2t.forEach(t),gdr=r(xke," (OpenAI GPT model)"),xke.forEach(t),hdr=i(D),h8=n(D,"LI",{});var $ke=s(h8);obe=n($ke,"STRONG",{});var f2t=s(obe);pdr=r(f2t,"pegasus"),f2t.forEach(t),_dr=r($ke," \u2014 "),aW=n($ke,"A",{href:!0});var m2t=s(aW);udr=r(m2t,"TFPegasusModel"),m2t.forEach(t),bdr=r($ke," (Pegasus model)"),$ke.forEach(t),vdr=i(D),p8=n(D,"LI",{});var kke=s(p8);rbe=n(kke,"STRONG",{});var g2t=s(rbe);Fdr=r(g2t,"rembert"),g2t.forEach(t),Tdr=r(kke," \u2014 "),nW=n(kke,"A",{href:!0});var h2t=s(nW);Mdr=r(h2t,"TFRemBertModel"),h2t.forEach(t),Edr=r(kke," (RemBERT model)"),kke.forEach(t),Cdr=i(D),_8=n(D,"LI",{});var Ske=s(_8);tbe=n(Ske,"STRONG",{});var p2t=s(tbe);wdr=r(p2t,"roberta"),p2t.forEach(t),Adr=r(Ske," \u2014 "),sW=n(Ske,"A",{href:!0});var _2t=s(sW);ydr=r(_2t,"TFRobertaModel"),_2t.forEach(t),Ldr=r(Ske," (RoBERTa model)"),Ske.forEach(t),xdr=i(D),u8=n(D,"LI",{});var Rke=s(u8);abe=n(Rke,"STRONG",{});var u2t=s(abe);$dr=r(u2t,"roformer"),u2t.forEach(t),kdr=r(Rke," \u2014 "),lW=n(Rke,"A",{href:!0});var b2t=s(lW);Sdr=r(b2t,"TFRoFormerModel"),b2t.forEach(t),Rdr=r(Rke," (RoFormer model)"),Rke.forEach(t),Pdr=i(D),b8=n(D,"LI",{});var Pke=s(b8);nbe=n(Pke,"STRONG",{});var v2t=s(nbe);Bdr=r(v2t,"speech_to_text"),v2t.forEach(t),Idr=r(Pke," \u2014 "),iW=n(Pke,"A",{href:!0});var F2t=s(iW);qdr=r(F2t,"TFSpeech2TextModel"),F2t.forEach(t),Ndr=r(Pke," (Speech2Text model)"),Pke.forEach(t),jdr=i(D),v8=n(D,"LI",{});var Bke=s(v8);sbe=n(Bke,"STRONG",{});var T2t=s(sbe);Ddr=r(T2t,"swin"),T2t.forEach(t),Gdr=r(Bke," \u2014 "),dW=n(Bke,"A",{href:!0});var M2t=s(dW);Odr=r(M2t,"TFSwinModel"),M2t.forEach(t),Vdr=r(Bke," (Swin model)"),Bke.forEach(t),Xdr=i(D),F8=n(D,"LI",{});var Ike=s(F8);lbe=n(Ike,"STRONG",{});var E2t=s(lbe);zdr=r(E2t,"t5"),E2t.forEach(t),Wdr=r(Ike," \u2014 "),cW=n(Ike,"A",{href:!0});var C2t=s(cW);Qdr=r(C2t,"TFT5Model"),C2t.forEach(t),Hdr=r(Ike," (T5 model)"),Ike.forEach(t),Udr=i(D),T8=n(D,"LI",{});var qke=s(T8);ibe=n(qke,"STRONG",{});var w2t=s(ibe);Jdr=r(w2t,"tapas"),w2t.forEach(t),Ydr=r(qke," \u2014 "),fW=n(qke,"A",{href:!0});var A2t=s(fW);Kdr=r(A2t,"TFTapasModel"),A2t.forEach(t),Zdr=r(qke," (TAPAS model)"),qke.forEach(t),ecr=i(D),M8=n(D,"LI",{});var Nke=s(M8);dbe=n(Nke,"STRONG",{});var y2t=s(dbe);ocr=r(y2t,"transfo-xl"),y2t.forEach(t),rcr=r(Nke," \u2014 "),mW=n(Nke,"A",{href:!0});var L2t=s(mW);tcr=r(L2t,"TFTransfoXLModel"),L2t.forEach(t),acr=r(Nke," (Transformer-XL model)"),Nke.forEach(t),ncr=i(D),E8=n(D,"LI",{});var jke=s(E8);cbe=n(jke,"STRONG",{});var x2t=s(cbe);scr=r(x2t,"vit"),x2t.forEach(t),lcr=r(jke," \u2014 "),gW=n(jke,"A",{href:!0});var $2t=s(gW);icr=r($2t,"TFViTModel"),$2t.forEach(t),dcr=r(jke," (ViT model)"),jke.forEach(t),ccr=i(D),C8=n(D,"LI",{});var Dke=s(C8);fbe=n(Dke,"STRONG",{});var k2t=s(fbe);fcr=r(k2t,"vit_mae"),k2t.forEach(t),mcr=r(Dke," \u2014 "),hW=n(Dke,"A",{href:!0});var S2t=s(hW);gcr=r(S2t,"TFViTMAEModel"),S2t.forEach(t),hcr=r(Dke," (ViTMAE model)"),Dke.forEach(t),pcr=i(D),w8=n(D,"LI",{});var Gke=s(w8);mbe=n(Gke,"STRONG",{});var R2t=s(mbe);_cr=r(R2t,"wav2vec2"),R2t.forEach(t),ucr=r(Gke," \u2014 "),pW=n(Gke,"A",{href:!0});var P2t=s(pW);bcr=r(P2t,"TFWav2Vec2Model"),P2t.forEach(t),vcr=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),Fcr=i(D),A8=n(D,"LI",{});var Oke=s(A8);gbe=n(Oke,"STRONG",{});var B2t=s(gbe);Tcr=r(B2t,"xlm"),B2t.forEach(t),Mcr=r(Oke," \u2014 "),_W=n(Oke,"A",{href:!0});var I2t=s(_W);Ecr=r(I2t,"TFXLMModel"),I2t.forEach(t),Ccr=r(Oke," (XLM model)"),Oke.forEach(t),wcr=i(D),y8=n(D,"LI",{});var Vke=s(y8);hbe=n(Vke,"STRONG",{});var q2t=s(hbe);Acr=r(q2t,"xlm-roberta"),q2t.forEach(t),ycr=r(Vke," \u2014 "),uW=n(Vke,"A",{href:!0});var N2t=s(uW);Lcr=r(N2t,"TFXLMRobertaModel"),N2t.forEach(t),xcr=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),$cr=i(D),L8=n(D,"LI",{});var Xke=s(L8);pbe=n(Xke,"STRONG",{});var j2t=s(pbe);kcr=r(j2t,"xlnet"),j2t.forEach(t),Scr=r(Xke," \u2014 "),bW=n(Xke,"A",{href:!0});var D2t=s(bW);Rcr=r(D2t,"TFXLNetModel"),D2t.forEach(t),Pcr=r(Xke," (XLNet model)"),Xke.forEach(t),D.forEach(t),Bcr=i(gl),T(x8.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Xqe=i(f),Vd=n(f,"H2",{class:!0});var Jje=s(Vd);$8=n(Jje,"A",{id:!0,class:!0,href:!0});var G2t=s($8);_be=n(G2t,"SPAN",{});var O2t=s(_be);T(Jy.$$.fragment,O2t),O2t.forEach(t),G2t.forEach(t),Icr=i(Jje),ube=n(Jje,"SPAN",{});var V2t=s(ube);qcr=r(V2t,"TFAutoModelForPreTraining"),V2t.forEach(t),Jje.forEach(t),zqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(Yy.$$.fragment,hl),Ncr=i(hl),Xd=n(hl,"P",{});var LZ=s(Xd);jcr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vW=n(LZ,"A",{href:!0});var X2t=s(vW);Dcr=r(X2t,"from_pretrained()"),X2t.forEach(t),Gcr=r(LZ," class method or the "),FW=n(LZ,"A",{href:!0});var z2t=s(FW);Ocr=r(z2t,"from_config()"),z2t.forEach(t),Vcr=r(LZ,` class
method.`),LZ.forEach(t),Xcr=i(hl),Ky=n(hl,"P",{});var Yje=s(Ky);zcr=r(Yje,"This class cannot be instantiated directly using "),bbe=n(Yje,"CODE",{});var W2t=s(bbe);Wcr=r(W2t,"__init__()"),W2t.forEach(t),Qcr=r(Yje," (throws an error)."),Yje.forEach(t),Hcr=i(hl),Lt=n(hl,"DIV",{class:!0});var dA=s(Lt);T(Zy.$$.fragment,dA),Ucr=i(dA),vbe=n(dA,"P",{});var Q2t=s(vbe);Jcr=r(Q2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q2t.forEach(t),Ycr=i(dA),zd=n(dA,"P",{});var xZ=s(zd);Kcr=r(xZ,`Note:
Loading a model from its configuration file does `),Fbe=n(xZ,"STRONG",{});var H2t=s(Fbe);Zcr=r(H2t,"not"),H2t.forEach(t),efr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(xZ,"A",{href:!0});var U2t=s(TW);ofr=r(U2t,"from_pretrained()"),U2t.forEach(t),rfr=r(xZ," to load the model weights."),xZ.forEach(t),tfr=i(dA),T(k8.$$.fragment,dA),dA.forEach(t),afr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(eL.$$.fragment,pl),nfr=i(pl),Tbe=n(pl,"P",{});var J2t=s(Tbe);sfr=r(J2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J2t.forEach(t),lfr=i(pl),Za=n(pl,"P",{});var cA=s(Za);ifr=r(cA,"The model class to instantiate is selected based on the "),Mbe=n(cA,"CODE",{});var Y2t=s(Mbe);dfr=r(Y2t,"model_type"),Y2t.forEach(t),cfr=r(cA,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(cA,"CODE",{});var K2t=s(Ebe);ffr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),mfr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(cA,"CODE",{});var Z2t=s(Cbe);gfr=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),hfr=r(cA,":"),cA.forEach(t),pfr=i(pl),se=n(pl,"UL",{});var le=s(se);S8=n(le,"LI",{});var zke=s(S8);wbe=n(zke,"STRONG",{});var evt=s(wbe);_fr=r(evt,"albert"),evt.forEach(t),ufr=r(zke," \u2014 "),MW=n(zke,"A",{href:!0});var ovt=s(MW);bfr=r(ovt,"TFAlbertForPreTraining"),ovt.forEach(t),vfr=r(zke," (ALBERT model)"),zke.forEach(t),Ffr=i(le),R8=n(le,"LI",{});var Wke=s(R8);Abe=n(Wke,"STRONG",{});var rvt=s(Abe);Tfr=r(rvt,"bart"),rvt.forEach(t),Mfr=r(Wke," \u2014 "),EW=n(Wke,"A",{href:!0});var tvt=s(EW);Efr=r(tvt,"TFBartForConditionalGeneration"),tvt.forEach(t),Cfr=r(Wke," (BART model)"),Wke.forEach(t),wfr=i(le),P8=n(le,"LI",{});var Qke=s(P8);ybe=n(Qke,"STRONG",{});var avt=s(ybe);Afr=r(avt,"bert"),avt.forEach(t),yfr=r(Qke," \u2014 "),CW=n(Qke,"A",{href:!0});var nvt=s(CW);Lfr=r(nvt,"TFBertForPreTraining"),nvt.forEach(t),xfr=r(Qke," (BERT model)"),Qke.forEach(t),$fr=i(le),B8=n(le,"LI",{});var Hke=s(B8);Lbe=n(Hke,"STRONG",{});var svt=s(Lbe);kfr=r(svt,"camembert"),svt.forEach(t),Sfr=r(Hke," \u2014 "),wW=n(Hke,"A",{href:!0});var lvt=s(wW);Rfr=r(lvt,"TFCamembertForMaskedLM"),lvt.forEach(t),Pfr=r(Hke," (CamemBERT model)"),Hke.forEach(t),Bfr=i(le),I8=n(le,"LI",{});var Uke=s(I8);xbe=n(Uke,"STRONG",{});var ivt=s(xbe);Ifr=r(ivt,"ctrl"),ivt.forEach(t),qfr=r(Uke," \u2014 "),AW=n(Uke,"A",{href:!0});var dvt=s(AW);Nfr=r(dvt,"TFCTRLLMHeadModel"),dvt.forEach(t),jfr=r(Uke," (CTRL model)"),Uke.forEach(t),Dfr=i(le),q8=n(le,"LI",{});var Jke=s(q8);$be=n(Jke,"STRONG",{});var cvt=s($be);Gfr=r(cvt,"distilbert"),cvt.forEach(t),Ofr=r(Jke," \u2014 "),yW=n(Jke,"A",{href:!0});var fvt=s(yW);Vfr=r(fvt,"TFDistilBertForMaskedLM"),fvt.forEach(t),Xfr=r(Jke," (DistilBERT model)"),Jke.forEach(t),zfr=i(le),N8=n(le,"LI",{});var Yke=s(N8);kbe=n(Yke,"STRONG",{});var mvt=s(kbe);Wfr=r(mvt,"electra"),mvt.forEach(t),Qfr=r(Yke," \u2014 "),LW=n(Yke,"A",{href:!0});var gvt=s(LW);Hfr=r(gvt,"TFElectraForPreTraining"),gvt.forEach(t),Ufr=r(Yke," (ELECTRA model)"),Yke.forEach(t),Jfr=i(le),j8=n(le,"LI",{});var Kke=s(j8);Sbe=n(Kke,"STRONG",{});var hvt=s(Sbe);Yfr=r(hvt,"flaubert"),hvt.forEach(t),Kfr=r(Kke," \u2014 "),xW=n(Kke,"A",{href:!0});var pvt=s(xW);Zfr=r(pvt,"TFFlaubertWithLMHeadModel"),pvt.forEach(t),emr=r(Kke," (FlauBERT model)"),Kke.forEach(t),omr=i(le),D8=n(le,"LI",{});var Zke=s(D8);Rbe=n(Zke,"STRONG",{});var _vt=s(Rbe);rmr=r(_vt,"funnel"),_vt.forEach(t),tmr=r(Zke," \u2014 "),$W=n(Zke,"A",{href:!0});var uvt=s($W);amr=r(uvt,"TFFunnelForPreTraining"),uvt.forEach(t),nmr=r(Zke," (Funnel Transformer model)"),Zke.forEach(t),smr=i(le),G8=n(le,"LI",{});var eSe=s(G8);Pbe=n(eSe,"STRONG",{});var bvt=s(Pbe);lmr=r(bvt,"gpt2"),bvt.forEach(t),imr=r(eSe," \u2014 "),kW=n(eSe,"A",{href:!0});var vvt=s(kW);dmr=r(vvt,"TFGPT2LMHeadModel"),vvt.forEach(t),cmr=r(eSe," (OpenAI GPT-2 model)"),eSe.forEach(t),fmr=i(le),O8=n(le,"LI",{});var oSe=s(O8);Bbe=n(oSe,"STRONG",{});var Fvt=s(Bbe);mmr=r(Fvt,"layoutlm"),Fvt.forEach(t),gmr=r(oSe," \u2014 "),SW=n(oSe,"A",{href:!0});var Tvt=s(SW);hmr=r(Tvt,"TFLayoutLMForMaskedLM"),Tvt.forEach(t),pmr=r(oSe," (LayoutLM model)"),oSe.forEach(t),_mr=i(le),V8=n(le,"LI",{});var rSe=s(V8);Ibe=n(rSe,"STRONG",{});var Mvt=s(Ibe);umr=r(Mvt,"lxmert"),Mvt.forEach(t),bmr=r(rSe," \u2014 "),RW=n(rSe,"A",{href:!0});var Evt=s(RW);vmr=r(Evt,"TFLxmertForPreTraining"),Evt.forEach(t),Fmr=r(rSe," (LXMERT model)"),rSe.forEach(t),Tmr=i(le),X8=n(le,"LI",{});var tSe=s(X8);qbe=n(tSe,"STRONG",{});var Cvt=s(qbe);Mmr=r(Cvt,"mobilebert"),Cvt.forEach(t),Emr=r(tSe," \u2014 "),PW=n(tSe,"A",{href:!0});var wvt=s(PW);Cmr=r(wvt,"TFMobileBertForPreTraining"),wvt.forEach(t),wmr=r(tSe," (MobileBERT model)"),tSe.forEach(t),Amr=i(le),z8=n(le,"LI",{});var aSe=s(z8);Nbe=n(aSe,"STRONG",{});var Avt=s(Nbe);ymr=r(Avt,"mpnet"),Avt.forEach(t),Lmr=r(aSe," \u2014 "),BW=n(aSe,"A",{href:!0});var yvt=s(BW);xmr=r(yvt,"TFMPNetForMaskedLM"),yvt.forEach(t),$mr=r(aSe," (MPNet model)"),aSe.forEach(t),kmr=i(le),W8=n(le,"LI",{});var nSe=s(W8);jbe=n(nSe,"STRONG",{});var Lvt=s(jbe);Smr=r(Lvt,"openai-gpt"),Lvt.forEach(t),Rmr=r(nSe," \u2014 "),IW=n(nSe,"A",{href:!0});var xvt=s(IW);Pmr=r(xvt,"TFOpenAIGPTLMHeadModel"),xvt.forEach(t),Bmr=r(nSe," (OpenAI GPT model)"),nSe.forEach(t),Imr=i(le),Q8=n(le,"LI",{});var sSe=s(Q8);Dbe=n(sSe,"STRONG",{});var $vt=s(Dbe);qmr=r($vt,"roberta"),$vt.forEach(t),Nmr=r(sSe," \u2014 "),qW=n(sSe,"A",{href:!0});var kvt=s(qW);jmr=r(kvt,"TFRobertaForMaskedLM"),kvt.forEach(t),Dmr=r(sSe," (RoBERTa model)"),sSe.forEach(t),Gmr=i(le),H8=n(le,"LI",{});var lSe=s(H8);Gbe=n(lSe,"STRONG",{});var Svt=s(Gbe);Omr=r(Svt,"t5"),Svt.forEach(t),Vmr=r(lSe," \u2014 "),NW=n(lSe,"A",{href:!0});var Rvt=s(NW);Xmr=r(Rvt,"TFT5ForConditionalGeneration"),Rvt.forEach(t),zmr=r(lSe," (T5 model)"),lSe.forEach(t),Wmr=i(le),U8=n(le,"LI",{});var iSe=s(U8);Obe=n(iSe,"STRONG",{});var Pvt=s(Obe);Qmr=r(Pvt,"tapas"),Pvt.forEach(t),Hmr=r(iSe," \u2014 "),jW=n(iSe,"A",{href:!0});var Bvt=s(jW);Umr=r(Bvt,"TFTapasForMaskedLM"),Bvt.forEach(t),Jmr=r(iSe," (TAPAS model)"),iSe.forEach(t),Ymr=i(le),J8=n(le,"LI",{});var dSe=s(J8);Vbe=n(dSe,"STRONG",{});var Ivt=s(Vbe);Kmr=r(Ivt,"transfo-xl"),Ivt.forEach(t),Zmr=r(dSe," \u2014 "),DW=n(dSe,"A",{href:!0});var qvt=s(DW);egr=r(qvt,"TFTransfoXLLMHeadModel"),qvt.forEach(t),ogr=r(dSe," (Transformer-XL model)"),dSe.forEach(t),rgr=i(le),Y8=n(le,"LI",{});var cSe=s(Y8);Xbe=n(cSe,"STRONG",{});var Nvt=s(Xbe);tgr=r(Nvt,"vit_mae"),Nvt.forEach(t),agr=r(cSe," \u2014 "),GW=n(cSe,"A",{href:!0});var jvt=s(GW);ngr=r(jvt,"TFViTMAEForPreTraining"),jvt.forEach(t),sgr=r(cSe," (ViTMAE model)"),cSe.forEach(t),lgr=i(le),K8=n(le,"LI",{});var fSe=s(K8);zbe=n(fSe,"STRONG",{});var Dvt=s(zbe);igr=r(Dvt,"xlm"),Dvt.forEach(t),dgr=r(fSe," \u2014 "),OW=n(fSe,"A",{href:!0});var Gvt=s(OW);cgr=r(Gvt,"TFXLMWithLMHeadModel"),Gvt.forEach(t),fgr=r(fSe," (XLM model)"),fSe.forEach(t),mgr=i(le),Z8=n(le,"LI",{});var mSe=s(Z8);Wbe=n(mSe,"STRONG",{});var Ovt=s(Wbe);ggr=r(Ovt,"xlm-roberta"),Ovt.forEach(t),hgr=r(mSe," \u2014 "),VW=n(mSe,"A",{href:!0});var Vvt=s(VW);pgr=r(Vvt,"TFXLMRobertaForMaskedLM"),Vvt.forEach(t),_gr=r(mSe," (XLM-RoBERTa model)"),mSe.forEach(t),ugr=i(le),e7=n(le,"LI",{});var gSe=s(e7);Qbe=n(gSe,"STRONG",{});var Xvt=s(Qbe);bgr=r(Xvt,"xlnet"),Xvt.forEach(t),vgr=r(gSe," \u2014 "),XW=n(gSe,"A",{href:!0});var zvt=s(XW);Fgr=r(zvt,"TFXLNetLMHeadModel"),zvt.forEach(t),Tgr=r(gSe," (XLNet model)"),gSe.forEach(t),le.forEach(t),Mgr=i(pl),T(o7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Wqe=i(f),Wd=n(f,"H2",{class:!0});var Kje=s(Wd);r7=n(Kje,"A",{id:!0,class:!0,href:!0});var Wvt=s(r7);Hbe=n(Wvt,"SPAN",{});var Qvt=s(Hbe);T(oL.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),Egr=i(Kje),Ube=n(Kje,"SPAN",{});var Hvt=s(Ube);Cgr=r(Hvt,"TFAutoModelForCausalLM"),Hvt.forEach(t),Kje.forEach(t),Qqe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(rL.$$.fragment,_l),wgr=i(_l),Qd=n(_l,"P",{});var $Z=s(Qd);Agr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zW=n($Z,"A",{href:!0});var Uvt=s(zW);ygr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),Lgr=r($Z," class method or the "),WW=n($Z,"A",{href:!0});var Jvt=s(WW);xgr=r(Jvt,"from_config()"),Jvt.forEach(t),$gr=r($Z,` class
method.`),$Z.forEach(t),kgr=i(_l),tL=n(_l,"P",{});var Zje=s(tL);Sgr=r(Zje,"This class cannot be instantiated directly using "),Jbe=n(Zje,"CODE",{});var Yvt=s(Jbe);Rgr=r(Yvt,"__init__()"),Yvt.forEach(t),Pgr=r(Zje," (throws an error)."),Zje.forEach(t),Bgr=i(_l),xt=n(_l,"DIV",{class:!0});var fA=s(xt);T(aL.$$.fragment,fA),Igr=i(fA),Ybe=n(fA,"P",{});var Kvt=s(Ybe);qgr=r(Kvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kvt.forEach(t),Ngr=i(fA),Hd=n(fA,"P",{});var kZ=s(Hd);jgr=r(kZ,`Note:
Loading a model from its configuration file does `),Kbe=n(kZ,"STRONG",{});var Zvt=s(Kbe);Dgr=r(Zvt,"not"),Zvt.forEach(t),Ggr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(kZ,"A",{href:!0});var e3t=s(QW);Ogr=r(e3t,"from_pretrained()"),e3t.forEach(t),Vgr=r(kZ," to load the model weights."),kZ.forEach(t),Xgr=i(fA),T(t7.$$.fragment,fA),fA.forEach(t),zgr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(nL.$$.fragment,ul),Wgr=i(ul),Zbe=n(ul,"P",{});var o3t=s(Zbe);Qgr=r(o3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o3t.forEach(t),Hgr=i(ul),en=n(ul,"P",{});var mA=s(en);Ugr=r(mA,"The model class to instantiate is selected based on the "),e2e=n(mA,"CODE",{});var r3t=s(e2e);Jgr=r(r3t,"model_type"),r3t.forEach(t),Ygr=r(mA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(mA,"CODE",{});var t3t=s(o2e);Kgr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),Zgr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(mA,"CODE",{});var a3t=s(r2e);ehr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),ohr=r(mA,":"),mA.forEach(t),rhr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);a7=n(Ce,"LI",{});var hSe=s(a7);t2e=n(hSe,"STRONG",{});var n3t=s(t2e);thr=r(n3t,"bert"),n3t.forEach(t),ahr=r(hSe," \u2014 "),HW=n(hSe,"A",{href:!0});var s3t=s(HW);nhr=r(s3t,"TFBertLMHeadModel"),s3t.forEach(t),shr=r(hSe," (BERT model)"),hSe.forEach(t),lhr=i(Ce),n7=n(Ce,"LI",{});var pSe=s(n7);a2e=n(pSe,"STRONG",{});var l3t=s(a2e);ihr=r(l3t,"camembert"),l3t.forEach(t),dhr=r(pSe," \u2014 "),UW=n(pSe,"A",{href:!0});var i3t=s(UW);chr=r(i3t,"TFCamembertForCausalLM"),i3t.forEach(t),fhr=r(pSe," (CamemBERT model)"),pSe.forEach(t),mhr=i(Ce),s7=n(Ce,"LI",{});var _Se=s(s7);n2e=n(_Se,"STRONG",{});var d3t=s(n2e);ghr=r(d3t,"ctrl"),d3t.forEach(t),hhr=r(_Se," \u2014 "),JW=n(_Se,"A",{href:!0});var c3t=s(JW);phr=r(c3t,"TFCTRLLMHeadModel"),c3t.forEach(t),_hr=r(_Se," (CTRL model)"),_Se.forEach(t),uhr=i(Ce),l7=n(Ce,"LI",{});var uSe=s(l7);s2e=n(uSe,"STRONG",{});var f3t=s(s2e);bhr=r(f3t,"gpt2"),f3t.forEach(t),vhr=r(uSe," \u2014 "),YW=n(uSe,"A",{href:!0});var m3t=s(YW);Fhr=r(m3t,"TFGPT2LMHeadModel"),m3t.forEach(t),Thr=r(uSe," (OpenAI GPT-2 model)"),uSe.forEach(t),Mhr=i(Ce),i7=n(Ce,"LI",{});var bSe=s(i7);l2e=n(bSe,"STRONG",{});var g3t=s(l2e);Ehr=r(g3t,"gptj"),g3t.forEach(t),Chr=r(bSe," \u2014 "),KW=n(bSe,"A",{href:!0});var h3t=s(KW);whr=r(h3t,"TFGPTJForCausalLM"),h3t.forEach(t),Ahr=r(bSe," (GPT-J model)"),bSe.forEach(t),yhr=i(Ce),d7=n(Ce,"LI",{});var vSe=s(d7);i2e=n(vSe,"STRONG",{});var p3t=s(i2e);Lhr=r(p3t,"openai-gpt"),p3t.forEach(t),xhr=r(vSe," \u2014 "),ZW=n(vSe,"A",{href:!0});var _3t=s(ZW);$hr=r(_3t,"TFOpenAIGPTLMHeadModel"),_3t.forEach(t),khr=r(vSe," (OpenAI GPT model)"),vSe.forEach(t),Shr=i(Ce),c7=n(Ce,"LI",{});var FSe=s(c7);d2e=n(FSe,"STRONG",{});var u3t=s(d2e);Rhr=r(u3t,"rembert"),u3t.forEach(t),Phr=r(FSe," \u2014 "),eQ=n(FSe,"A",{href:!0});var b3t=s(eQ);Bhr=r(b3t,"TFRemBertForCausalLM"),b3t.forEach(t),Ihr=r(FSe," (RemBERT model)"),FSe.forEach(t),qhr=i(Ce),f7=n(Ce,"LI",{});var TSe=s(f7);c2e=n(TSe,"STRONG",{});var v3t=s(c2e);Nhr=r(v3t,"roberta"),v3t.forEach(t),jhr=r(TSe," \u2014 "),oQ=n(TSe,"A",{href:!0});var F3t=s(oQ);Dhr=r(F3t,"TFRobertaForCausalLM"),F3t.forEach(t),Ghr=r(TSe," (RoBERTa model)"),TSe.forEach(t),Ohr=i(Ce),m7=n(Ce,"LI",{});var MSe=s(m7);f2e=n(MSe,"STRONG",{});var T3t=s(f2e);Vhr=r(T3t,"roformer"),T3t.forEach(t),Xhr=r(MSe," \u2014 "),rQ=n(MSe,"A",{href:!0});var M3t=s(rQ);zhr=r(M3t,"TFRoFormerForCausalLM"),M3t.forEach(t),Whr=r(MSe," (RoFormer model)"),MSe.forEach(t),Qhr=i(Ce),g7=n(Ce,"LI",{});var ESe=s(g7);m2e=n(ESe,"STRONG",{});var E3t=s(m2e);Hhr=r(E3t,"transfo-xl"),E3t.forEach(t),Uhr=r(ESe," \u2014 "),tQ=n(ESe,"A",{href:!0});var C3t=s(tQ);Jhr=r(C3t,"TFTransfoXLLMHeadModel"),C3t.forEach(t),Yhr=r(ESe," (Transformer-XL model)"),ESe.forEach(t),Khr=i(Ce),h7=n(Ce,"LI",{});var CSe=s(h7);g2e=n(CSe,"STRONG",{});var w3t=s(g2e);Zhr=r(w3t,"xlm"),w3t.forEach(t),epr=r(CSe," \u2014 "),aQ=n(CSe,"A",{href:!0});var A3t=s(aQ);opr=r(A3t,"TFXLMWithLMHeadModel"),A3t.forEach(t),rpr=r(CSe," (XLM model)"),CSe.forEach(t),tpr=i(Ce),p7=n(Ce,"LI",{});var wSe=s(p7);h2e=n(wSe,"STRONG",{});var y3t=s(h2e);apr=r(y3t,"xlnet"),y3t.forEach(t),npr=r(wSe," \u2014 "),nQ=n(wSe,"A",{href:!0});var L3t=s(nQ);spr=r(L3t,"TFXLNetLMHeadModel"),L3t.forEach(t),lpr=r(wSe," (XLNet model)"),wSe.forEach(t),Ce.forEach(t),ipr=i(ul),T(_7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Hqe=i(f),Ud=n(f,"H2",{class:!0});var eDe=s(Ud);u7=n(eDe,"A",{id:!0,class:!0,href:!0});var x3t=s(u7);p2e=n(x3t,"SPAN",{});var $3t=s(p2e);T(sL.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),dpr=i(eDe),_2e=n(eDe,"SPAN",{});var k3t=s(_2e);cpr=r(k3t,"TFAutoModelForImageClassification"),k3t.forEach(t),eDe.forEach(t),Uqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(lL.$$.fragment,bl),fpr=i(bl),Jd=n(bl,"P",{});var SZ=s(Jd);mpr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sQ=n(SZ,"A",{href:!0});var S3t=s(sQ);gpr=r(S3t,"from_pretrained()"),S3t.forEach(t),hpr=r(SZ," class method or the "),lQ=n(SZ,"A",{href:!0});var R3t=s(lQ);ppr=r(R3t,"from_config()"),R3t.forEach(t),_pr=r(SZ,` class
method.`),SZ.forEach(t),upr=i(bl),iL=n(bl,"P",{});var oDe=s(iL);bpr=r(oDe,"This class cannot be instantiated directly using "),u2e=n(oDe,"CODE",{});var P3t=s(u2e);vpr=r(P3t,"__init__()"),P3t.forEach(t),Fpr=r(oDe," (throws an error)."),oDe.forEach(t),Tpr=i(bl),$t=n(bl,"DIV",{class:!0});var gA=s($t);T(dL.$$.fragment,gA),Mpr=i(gA),b2e=n(gA,"P",{});var B3t=s(b2e);Epr=r(B3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B3t.forEach(t),Cpr=i(gA),Yd=n(gA,"P",{});var RZ=s(Yd);wpr=r(RZ,`Note:
Loading a model from its configuration file does `),v2e=n(RZ,"STRONG",{});var I3t=s(v2e);Apr=r(I3t,"not"),I3t.forEach(t),ypr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(RZ,"A",{href:!0});var q3t=s(iQ);Lpr=r(q3t,"from_pretrained()"),q3t.forEach(t),xpr=r(RZ," to load the model weights."),RZ.forEach(t),$pr=i(gA),T(b7.$$.fragment,gA),gA.forEach(t),kpr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(cL.$$.fragment,vl),Spr=i(vl),F2e=n(vl,"P",{});var N3t=s(F2e);Rpr=r(N3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N3t.forEach(t),Ppr=i(vl),on=n(vl,"P",{});var hA=s(on);Bpr=r(hA,"The model class to instantiate is selected based on the "),T2e=n(hA,"CODE",{});var j3t=s(T2e);Ipr=r(j3t,"model_type"),j3t.forEach(t),qpr=r(hA,` property of the config object (either
passed as an argument or loaded from `),M2e=n(hA,"CODE",{});var D3t=s(M2e);Npr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),jpr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(hA,"CODE",{});var G3t=s(E2e);Dpr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),Gpr=r(hA,":"),hA.forEach(t),Opr=i(vl),rn=n(vl,"UL",{});var pA=s(rn);v7=n(pA,"LI",{});var ASe=s(v7);C2e=n(ASe,"STRONG",{});var O3t=s(C2e);Vpr=r(O3t,"convnext"),O3t.forEach(t),Xpr=r(ASe," \u2014 "),dQ=n(ASe,"A",{href:!0});var V3t=s(dQ);zpr=r(V3t,"TFConvNextForImageClassification"),V3t.forEach(t),Wpr=r(ASe," (ConvNext model)"),ASe.forEach(t),Qpr=i(pA),F7=n(pA,"LI",{});var ySe=s(F7);w2e=n(ySe,"STRONG",{});var X3t=s(w2e);Hpr=r(X3t,"data2vec-vision"),X3t.forEach(t),Upr=r(ySe," \u2014 "),cQ=n(ySe,"A",{href:!0});var z3t=s(cQ);Jpr=r(z3t,"TFData2VecVisionForImageClassification"),z3t.forEach(t),Ypr=r(ySe," (Data2VecVision model)"),ySe.forEach(t),Kpr=i(pA),T7=n(pA,"LI",{});var LSe=s(T7);A2e=n(LSe,"STRONG",{});var W3t=s(A2e);Zpr=r(W3t,"swin"),W3t.forEach(t),e_r=r(LSe," \u2014 "),fQ=n(LSe,"A",{href:!0});var Q3t=s(fQ);o_r=r(Q3t,"TFSwinForImageClassification"),Q3t.forEach(t),r_r=r(LSe," (Swin model)"),LSe.forEach(t),t_r=i(pA),M7=n(pA,"LI",{});var xSe=s(M7);y2e=n(xSe,"STRONG",{});var H3t=s(y2e);a_r=r(H3t,"vit"),H3t.forEach(t),n_r=r(xSe," \u2014 "),mQ=n(xSe,"A",{href:!0});var U3t=s(mQ);s_r=r(U3t,"TFViTForImageClassification"),U3t.forEach(t),l_r=r(xSe," (ViT model)"),xSe.forEach(t),pA.forEach(t),i_r=i(vl),T(E7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Jqe=i(f),Kd=n(f,"H2",{class:!0});var rDe=s(Kd);C7=n(rDe,"A",{id:!0,class:!0,href:!0});var J3t=s(C7);L2e=n(J3t,"SPAN",{});var Y3t=s(L2e);T(fL.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),d_r=i(rDe),x2e=n(rDe,"SPAN",{});var K3t=s(x2e);c_r=r(K3t,"TFAutoModelForMaskedLM"),K3t.forEach(t),rDe.forEach(t),Yqe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(mL.$$.fragment,Fl),f_r=i(Fl),Zd=n(Fl,"P",{});var PZ=s(Zd);m_r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gQ=n(PZ,"A",{href:!0});var Z3t=s(gQ);g_r=r(Z3t,"from_pretrained()"),Z3t.forEach(t),h_r=r(PZ," class method or the "),hQ=n(PZ,"A",{href:!0});var eFt=s(hQ);p_r=r(eFt,"from_config()"),eFt.forEach(t),__r=r(PZ,` class
method.`),PZ.forEach(t),u_r=i(Fl),gL=n(Fl,"P",{});var tDe=s(gL);b_r=r(tDe,"This class cannot be instantiated directly using "),$2e=n(tDe,"CODE",{});var oFt=s($2e);v_r=r(oFt,"__init__()"),oFt.forEach(t),F_r=r(tDe," (throws an error)."),tDe.forEach(t),T_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var _A=s(kt);T(hL.$$.fragment,_A),M_r=i(_A),k2e=n(_A,"P",{});var rFt=s(k2e);E_r=r(rFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rFt.forEach(t),C_r=i(_A),ec=n(_A,"P",{});var BZ=s(ec);w_r=r(BZ,`Note:
Loading a model from its configuration file does `),S2e=n(BZ,"STRONG",{});var tFt=s(S2e);A_r=r(tFt,"not"),tFt.forEach(t),y_r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(BZ,"A",{href:!0});var aFt=s(pQ);L_r=r(aFt,"from_pretrained()"),aFt.forEach(t),x_r=r(BZ," to load the model weights."),BZ.forEach(t),$_r=i(_A),T(w7.$$.fragment,_A),_A.forEach(t),k_r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(pL.$$.fragment,Tl),S_r=i(Tl),R2e=n(Tl,"P",{});var nFt=s(R2e);R_r=r(nFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nFt.forEach(t),P_r=i(Tl),tn=n(Tl,"P",{});var uA=s(tn);B_r=r(uA,"The model class to instantiate is selected based on the "),P2e=n(uA,"CODE",{});var sFt=s(P2e);I_r=r(sFt,"model_type"),sFt.forEach(t),q_r=r(uA,` property of the config object (either
passed as an argument or loaded from `),B2e=n(uA,"CODE",{});var lFt=s(B2e);N_r=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),j_r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(uA,"CODE",{});var iFt=s(I2e);D_r=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),G_r=r(uA,":"),uA.forEach(t),O_r=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);A7=n(fe,"LI",{});var $Se=s(A7);q2e=n($Se,"STRONG",{});var dFt=s(q2e);V_r=r(dFt,"albert"),dFt.forEach(t),X_r=r($Se," \u2014 "),_Q=n($Se,"A",{href:!0});var cFt=s(_Q);z_r=r(cFt,"TFAlbertForMaskedLM"),cFt.forEach(t),W_r=r($Se," (ALBERT model)"),$Se.forEach(t),Q_r=i(fe),y7=n(fe,"LI",{});var kSe=s(y7);N2e=n(kSe,"STRONG",{});var fFt=s(N2e);H_r=r(fFt,"bert"),fFt.forEach(t),U_r=r(kSe," \u2014 "),uQ=n(kSe,"A",{href:!0});var mFt=s(uQ);J_r=r(mFt,"TFBertForMaskedLM"),mFt.forEach(t),Y_r=r(kSe," (BERT model)"),kSe.forEach(t),K_r=i(fe),L7=n(fe,"LI",{});var SSe=s(L7);j2e=n(SSe,"STRONG",{});var gFt=s(j2e);Z_r=r(gFt,"camembert"),gFt.forEach(t),eur=r(SSe," \u2014 "),bQ=n(SSe,"A",{href:!0});var hFt=s(bQ);our=r(hFt,"TFCamembertForMaskedLM"),hFt.forEach(t),rur=r(SSe," (CamemBERT model)"),SSe.forEach(t),tur=i(fe),x7=n(fe,"LI",{});var RSe=s(x7);D2e=n(RSe,"STRONG",{});var pFt=s(D2e);aur=r(pFt,"convbert"),pFt.forEach(t),nur=r(RSe," \u2014 "),vQ=n(RSe,"A",{href:!0});var _Ft=s(vQ);sur=r(_Ft,"TFConvBertForMaskedLM"),_Ft.forEach(t),lur=r(RSe," (ConvBERT model)"),RSe.forEach(t),iur=i(fe),$7=n(fe,"LI",{});var PSe=s($7);G2e=n(PSe,"STRONG",{});var uFt=s(G2e);dur=r(uFt,"deberta"),uFt.forEach(t),cur=r(PSe," \u2014 "),FQ=n(PSe,"A",{href:!0});var bFt=s(FQ);fur=r(bFt,"TFDebertaForMaskedLM"),bFt.forEach(t),mur=r(PSe," (DeBERTa model)"),PSe.forEach(t),gur=i(fe),k7=n(fe,"LI",{});var BSe=s(k7);O2e=n(BSe,"STRONG",{});var vFt=s(O2e);hur=r(vFt,"deberta-v2"),vFt.forEach(t),pur=r(BSe," \u2014 "),TQ=n(BSe,"A",{href:!0});var FFt=s(TQ);_ur=r(FFt,"TFDebertaV2ForMaskedLM"),FFt.forEach(t),uur=r(BSe," (DeBERTa-v2 model)"),BSe.forEach(t),bur=i(fe),S7=n(fe,"LI",{});var ISe=s(S7);V2e=n(ISe,"STRONG",{});var TFt=s(V2e);vur=r(TFt,"distilbert"),TFt.forEach(t),Fur=r(ISe," \u2014 "),MQ=n(ISe,"A",{href:!0});var MFt=s(MQ);Tur=r(MFt,"TFDistilBertForMaskedLM"),MFt.forEach(t),Mur=r(ISe," (DistilBERT model)"),ISe.forEach(t),Eur=i(fe),R7=n(fe,"LI",{});var qSe=s(R7);X2e=n(qSe,"STRONG",{});var EFt=s(X2e);Cur=r(EFt,"electra"),EFt.forEach(t),wur=r(qSe," \u2014 "),EQ=n(qSe,"A",{href:!0});var CFt=s(EQ);Aur=r(CFt,"TFElectraForMaskedLM"),CFt.forEach(t),yur=r(qSe," (ELECTRA model)"),qSe.forEach(t),Lur=i(fe),P7=n(fe,"LI",{});var NSe=s(P7);z2e=n(NSe,"STRONG",{});var wFt=s(z2e);xur=r(wFt,"flaubert"),wFt.forEach(t),$ur=r(NSe," \u2014 "),CQ=n(NSe,"A",{href:!0});var AFt=s(CQ);kur=r(AFt,"TFFlaubertWithLMHeadModel"),AFt.forEach(t),Sur=r(NSe," (FlauBERT model)"),NSe.forEach(t),Rur=i(fe),B7=n(fe,"LI",{});var jSe=s(B7);W2e=n(jSe,"STRONG",{});var yFt=s(W2e);Pur=r(yFt,"funnel"),yFt.forEach(t),Bur=r(jSe," \u2014 "),wQ=n(jSe,"A",{href:!0});var LFt=s(wQ);Iur=r(LFt,"TFFunnelForMaskedLM"),LFt.forEach(t),qur=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),Nur=i(fe),I7=n(fe,"LI",{});var DSe=s(I7);Q2e=n(DSe,"STRONG",{});var xFt=s(Q2e);jur=r(xFt,"layoutlm"),xFt.forEach(t),Dur=r(DSe," \u2014 "),AQ=n(DSe,"A",{href:!0});var $Ft=s(AQ);Gur=r($Ft,"TFLayoutLMForMaskedLM"),$Ft.forEach(t),Our=r(DSe," (LayoutLM model)"),DSe.forEach(t),Vur=i(fe),q7=n(fe,"LI",{});var GSe=s(q7);H2e=n(GSe,"STRONG",{});var kFt=s(H2e);Xur=r(kFt,"longformer"),kFt.forEach(t),zur=r(GSe," \u2014 "),yQ=n(GSe,"A",{href:!0});var SFt=s(yQ);Wur=r(SFt,"TFLongformerForMaskedLM"),SFt.forEach(t),Qur=r(GSe," (Longformer model)"),GSe.forEach(t),Hur=i(fe),N7=n(fe,"LI",{});var OSe=s(N7);U2e=n(OSe,"STRONG",{});var RFt=s(U2e);Uur=r(RFt,"mobilebert"),RFt.forEach(t),Jur=r(OSe," \u2014 "),LQ=n(OSe,"A",{href:!0});var PFt=s(LQ);Yur=r(PFt,"TFMobileBertForMaskedLM"),PFt.forEach(t),Kur=r(OSe," (MobileBERT model)"),OSe.forEach(t),Zur=i(fe),j7=n(fe,"LI",{});var VSe=s(j7);J2e=n(VSe,"STRONG",{});var BFt=s(J2e);e1r=r(BFt,"mpnet"),BFt.forEach(t),o1r=r(VSe," \u2014 "),xQ=n(VSe,"A",{href:!0});var IFt=s(xQ);r1r=r(IFt,"TFMPNetForMaskedLM"),IFt.forEach(t),t1r=r(VSe," (MPNet model)"),VSe.forEach(t),a1r=i(fe),D7=n(fe,"LI",{});var XSe=s(D7);Y2e=n(XSe,"STRONG",{});var qFt=s(Y2e);n1r=r(qFt,"rembert"),qFt.forEach(t),s1r=r(XSe," \u2014 "),$Q=n(XSe,"A",{href:!0});var NFt=s($Q);l1r=r(NFt,"TFRemBertForMaskedLM"),NFt.forEach(t),i1r=r(XSe," (RemBERT model)"),XSe.forEach(t),d1r=i(fe),G7=n(fe,"LI",{});var zSe=s(G7);K2e=n(zSe,"STRONG",{});var jFt=s(K2e);c1r=r(jFt,"roberta"),jFt.forEach(t),f1r=r(zSe," \u2014 "),kQ=n(zSe,"A",{href:!0});var DFt=s(kQ);m1r=r(DFt,"TFRobertaForMaskedLM"),DFt.forEach(t),g1r=r(zSe," (RoBERTa model)"),zSe.forEach(t),h1r=i(fe),O7=n(fe,"LI",{});var WSe=s(O7);Z2e=n(WSe,"STRONG",{});var GFt=s(Z2e);p1r=r(GFt,"roformer"),GFt.forEach(t),_1r=r(WSe," \u2014 "),SQ=n(WSe,"A",{href:!0});var OFt=s(SQ);u1r=r(OFt,"TFRoFormerForMaskedLM"),OFt.forEach(t),b1r=r(WSe," (RoFormer model)"),WSe.forEach(t),v1r=i(fe),V7=n(fe,"LI",{});var QSe=s(V7);eve=n(QSe,"STRONG",{});var VFt=s(eve);F1r=r(VFt,"tapas"),VFt.forEach(t),T1r=r(QSe," \u2014 "),RQ=n(QSe,"A",{href:!0});var XFt=s(RQ);M1r=r(XFt,"TFTapasForMaskedLM"),XFt.forEach(t),E1r=r(QSe," (TAPAS model)"),QSe.forEach(t),C1r=i(fe),X7=n(fe,"LI",{});var HSe=s(X7);ove=n(HSe,"STRONG",{});var zFt=s(ove);w1r=r(zFt,"xlm"),zFt.forEach(t),A1r=r(HSe," \u2014 "),PQ=n(HSe,"A",{href:!0});var WFt=s(PQ);y1r=r(WFt,"TFXLMWithLMHeadModel"),WFt.forEach(t),L1r=r(HSe," (XLM model)"),HSe.forEach(t),x1r=i(fe),z7=n(fe,"LI",{});var USe=s(z7);rve=n(USe,"STRONG",{});var QFt=s(rve);$1r=r(QFt,"xlm-roberta"),QFt.forEach(t),k1r=r(USe," \u2014 "),BQ=n(USe,"A",{href:!0});var HFt=s(BQ);S1r=r(HFt,"TFXLMRobertaForMaskedLM"),HFt.forEach(t),R1r=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),fe.forEach(t),P1r=i(Tl),T(W7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Kqe=i(f),oc=n(f,"H2",{class:!0});var aDe=s(oc);Q7=n(aDe,"A",{id:!0,class:!0,href:!0});var UFt=s(Q7);tve=n(UFt,"SPAN",{});var JFt=s(tve);T(_L.$$.fragment,JFt),JFt.forEach(t),UFt.forEach(t),B1r=i(aDe),ave=n(aDe,"SPAN",{});var YFt=s(ave);I1r=r(YFt,"TFAutoModelForSeq2SeqLM"),YFt.forEach(t),aDe.forEach(t),Zqe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(uL.$$.fragment,Ml),q1r=i(Ml),rc=n(Ml,"P",{});var IZ=s(rc);N1r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IQ=n(IZ,"A",{href:!0});var KFt=s(IQ);j1r=r(KFt,"from_pretrained()"),KFt.forEach(t),D1r=r(IZ," class method or the "),qQ=n(IZ,"A",{href:!0});var ZFt=s(qQ);G1r=r(ZFt,"from_config()"),ZFt.forEach(t),O1r=r(IZ,` class
method.`),IZ.forEach(t),V1r=i(Ml),bL=n(Ml,"P",{});var nDe=s(bL);X1r=r(nDe,"This class cannot be instantiated directly using "),nve=n(nDe,"CODE",{});var eTt=s(nve);z1r=r(eTt,"__init__()"),eTt.forEach(t),W1r=r(nDe," (throws an error)."),nDe.forEach(t),Q1r=i(Ml),St=n(Ml,"DIV",{class:!0});var bA=s(St);T(vL.$$.fragment,bA),H1r=i(bA),sve=n(bA,"P",{});var oTt=s(sve);U1r=r(oTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oTt.forEach(t),J1r=i(bA),tc=n(bA,"P",{});var qZ=s(tc);Y1r=r(qZ,`Note:
Loading a model from its configuration file does `),lve=n(qZ,"STRONG",{});var rTt=s(lve);K1r=r(rTt,"not"),rTt.forEach(t),Z1r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(qZ,"A",{href:!0});var tTt=s(NQ);ebr=r(tTt,"from_pretrained()"),tTt.forEach(t),obr=r(qZ," to load the model weights."),qZ.forEach(t),rbr=i(bA),T(H7.$$.fragment,bA),bA.forEach(t),tbr=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(FL.$$.fragment,El),abr=i(El),ive=n(El,"P",{});var aTt=s(ive);nbr=r(aTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aTt.forEach(t),sbr=i(El),an=n(El,"P",{});var vA=s(an);lbr=r(vA,"The model class to instantiate is selected based on the "),dve=n(vA,"CODE",{});var nTt=s(dve);ibr=r(nTt,"model_type"),nTt.forEach(t),dbr=r(vA,` property of the config object (either
passed as an argument or loaded from `),cve=n(vA,"CODE",{});var sTt=s(cve);cbr=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),fbr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(vA,"CODE",{});var lTt=s(fve);mbr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),gbr=r(vA,":"),vA.forEach(t),hbr=i(El),ye=n(El,"UL",{});var Be=s(ye);U7=n(Be,"LI",{});var JSe=s(U7);mve=n(JSe,"STRONG",{});var iTt=s(mve);pbr=r(iTt,"bart"),iTt.forEach(t),_br=r(JSe," \u2014 "),jQ=n(JSe,"A",{href:!0});var dTt=s(jQ);ubr=r(dTt,"TFBartForConditionalGeneration"),dTt.forEach(t),bbr=r(JSe," (BART model)"),JSe.forEach(t),vbr=i(Be),J7=n(Be,"LI",{});var YSe=s(J7);gve=n(YSe,"STRONG",{});var cTt=s(gve);Fbr=r(cTt,"blenderbot"),cTt.forEach(t),Tbr=r(YSe," \u2014 "),DQ=n(YSe,"A",{href:!0});var fTt=s(DQ);Mbr=r(fTt,"TFBlenderbotForConditionalGeneration"),fTt.forEach(t),Ebr=r(YSe," (Blenderbot model)"),YSe.forEach(t),Cbr=i(Be),Y7=n(Be,"LI",{});var KSe=s(Y7);hve=n(KSe,"STRONG",{});var mTt=s(hve);wbr=r(mTt,"blenderbot-small"),mTt.forEach(t),Abr=r(KSe," \u2014 "),GQ=n(KSe,"A",{href:!0});var gTt=s(GQ);ybr=r(gTt,"TFBlenderbotSmallForConditionalGeneration"),gTt.forEach(t),Lbr=r(KSe," (BlenderbotSmall model)"),KSe.forEach(t),xbr=i(Be),K7=n(Be,"LI",{});var ZSe=s(K7);pve=n(ZSe,"STRONG",{});var hTt=s(pve);$br=r(hTt,"encoder-decoder"),hTt.forEach(t),kbr=r(ZSe," \u2014 "),OQ=n(ZSe,"A",{href:!0});var pTt=s(OQ);Sbr=r(pTt,"TFEncoderDecoderModel"),pTt.forEach(t),Rbr=r(ZSe," (Encoder decoder model)"),ZSe.forEach(t),Pbr=i(Be),Z7=n(Be,"LI",{});var eRe=s(Z7);_ve=n(eRe,"STRONG",{});var _Tt=s(_ve);Bbr=r(_Tt,"led"),_Tt.forEach(t),Ibr=r(eRe," \u2014 "),VQ=n(eRe,"A",{href:!0});var uTt=s(VQ);qbr=r(uTt,"TFLEDForConditionalGeneration"),uTt.forEach(t),Nbr=r(eRe," (LED model)"),eRe.forEach(t),jbr=i(Be),eM=n(Be,"LI",{});var oRe=s(eM);uve=n(oRe,"STRONG",{});var bTt=s(uve);Dbr=r(bTt,"marian"),bTt.forEach(t),Gbr=r(oRe," \u2014 "),XQ=n(oRe,"A",{href:!0});var vTt=s(XQ);Obr=r(vTt,"TFMarianMTModel"),vTt.forEach(t),Vbr=r(oRe," (Marian model)"),oRe.forEach(t),Xbr=i(Be),oM=n(Be,"LI",{});var rRe=s(oM);bve=n(rRe,"STRONG",{});var FTt=s(bve);zbr=r(FTt,"mbart"),FTt.forEach(t),Wbr=r(rRe," \u2014 "),zQ=n(rRe,"A",{href:!0});var TTt=s(zQ);Qbr=r(TTt,"TFMBartForConditionalGeneration"),TTt.forEach(t),Hbr=r(rRe," (mBART model)"),rRe.forEach(t),Ubr=i(Be),rM=n(Be,"LI",{});var tRe=s(rM);vve=n(tRe,"STRONG",{});var MTt=s(vve);Jbr=r(MTt,"mt5"),MTt.forEach(t),Ybr=r(tRe," \u2014 "),WQ=n(tRe,"A",{href:!0});var ETt=s(WQ);Kbr=r(ETt,"TFMT5ForConditionalGeneration"),ETt.forEach(t),Zbr=r(tRe," (mT5 model)"),tRe.forEach(t),e2r=i(Be),tM=n(Be,"LI",{});var aRe=s(tM);Fve=n(aRe,"STRONG",{});var CTt=s(Fve);o2r=r(CTt,"pegasus"),CTt.forEach(t),r2r=r(aRe," \u2014 "),QQ=n(aRe,"A",{href:!0});var wTt=s(QQ);t2r=r(wTt,"TFPegasusForConditionalGeneration"),wTt.forEach(t),a2r=r(aRe," (Pegasus model)"),aRe.forEach(t),n2r=i(Be),aM=n(Be,"LI",{});var nRe=s(aM);Tve=n(nRe,"STRONG",{});var ATt=s(Tve);s2r=r(ATt,"t5"),ATt.forEach(t),l2r=r(nRe," \u2014 "),HQ=n(nRe,"A",{href:!0});var yTt=s(HQ);i2r=r(yTt,"TFT5ForConditionalGeneration"),yTt.forEach(t),d2r=r(nRe," (T5 model)"),nRe.forEach(t),Be.forEach(t),c2r=i(El),T(nM.$$.fragment,El),El.forEach(t),Ml.forEach(t),eNe=i(f),ac=n(f,"H2",{class:!0});var sDe=s(ac);sM=n(sDe,"A",{id:!0,class:!0,href:!0});var LTt=s(sM);Mve=n(LTt,"SPAN",{});var xTt=s(Mve);T(TL.$$.fragment,xTt),xTt.forEach(t),LTt.forEach(t),f2r=i(sDe),Eve=n(sDe,"SPAN",{});var $Tt=s(Eve);m2r=r($Tt,"TFAutoModelForSequenceClassification"),$Tt.forEach(t),sDe.forEach(t),oNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(ML.$$.fragment,Cl),g2r=i(Cl),nc=n(Cl,"P",{});var NZ=s(nc);h2r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UQ=n(NZ,"A",{href:!0});var kTt=s(UQ);p2r=r(kTt,"from_pretrained()"),kTt.forEach(t),_2r=r(NZ," class method or the "),JQ=n(NZ,"A",{href:!0});var STt=s(JQ);u2r=r(STt,"from_config()"),STt.forEach(t),b2r=r(NZ,` class
method.`),NZ.forEach(t),v2r=i(Cl),EL=n(Cl,"P",{});var lDe=s(EL);F2r=r(lDe,"This class cannot be instantiated directly using "),Cve=n(lDe,"CODE",{});var RTt=s(Cve);T2r=r(RTt,"__init__()"),RTt.forEach(t),M2r=r(lDe," (throws an error)."),lDe.forEach(t),E2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var FA=s(Rt);T(CL.$$.fragment,FA),C2r=i(FA),wve=n(FA,"P",{});var PTt=s(wve);w2r=r(PTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PTt.forEach(t),A2r=i(FA),sc=n(FA,"P",{});var jZ=s(sc);y2r=r(jZ,`Note:
Loading a model from its configuration file does `),Ave=n(jZ,"STRONG",{});var BTt=s(Ave);L2r=r(BTt,"not"),BTt.forEach(t),x2r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(jZ,"A",{href:!0});var ITt=s(YQ);$2r=r(ITt,"from_pretrained()"),ITt.forEach(t),k2r=r(jZ," to load the model weights."),jZ.forEach(t),S2r=i(FA),T(lM.$$.fragment,FA),FA.forEach(t),R2r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(wL.$$.fragment,wl),P2r=i(wl),yve=n(wl,"P",{});var qTt=s(yve);B2r=r(qTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qTt.forEach(t),I2r=i(wl),nn=n(wl,"P",{});var TA=s(nn);q2r=r(TA,"The model class to instantiate is selected based on the "),Lve=n(TA,"CODE",{});var NTt=s(Lve);N2r=r(NTt,"model_type"),NTt.forEach(t),j2r=r(TA,` property of the config object (either
passed as an argument or loaded from `),xve=n(TA,"CODE",{});var jTt=s(xve);D2r=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),G2r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(TA,"CODE",{});var DTt=s($ve);O2r=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),V2r=r(TA,":"),TA.forEach(t),X2r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);iM=n(ae,"LI",{});var sRe=s(iM);kve=n(sRe,"STRONG",{});var GTt=s(kve);z2r=r(GTt,"albert"),GTt.forEach(t),W2r=r(sRe," \u2014 "),KQ=n(sRe,"A",{href:!0});var OTt=s(KQ);Q2r=r(OTt,"TFAlbertForSequenceClassification"),OTt.forEach(t),H2r=r(sRe," (ALBERT model)"),sRe.forEach(t),U2r=i(ae),dM=n(ae,"LI",{});var lRe=s(dM);Sve=n(lRe,"STRONG",{});var VTt=s(Sve);J2r=r(VTt,"bert"),VTt.forEach(t),Y2r=r(lRe," \u2014 "),ZQ=n(lRe,"A",{href:!0});var XTt=s(ZQ);K2r=r(XTt,"TFBertForSequenceClassification"),XTt.forEach(t),Z2r=r(lRe," (BERT model)"),lRe.forEach(t),evr=i(ae),cM=n(ae,"LI",{});var iRe=s(cM);Rve=n(iRe,"STRONG",{});var zTt=s(Rve);ovr=r(zTt,"camembert"),zTt.forEach(t),rvr=r(iRe," \u2014 "),eH=n(iRe,"A",{href:!0});var WTt=s(eH);tvr=r(WTt,"TFCamembertForSequenceClassification"),WTt.forEach(t),avr=r(iRe," (CamemBERT model)"),iRe.forEach(t),nvr=i(ae),fM=n(ae,"LI",{});var dRe=s(fM);Pve=n(dRe,"STRONG",{});var QTt=s(Pve);svr=r(QTt,"convbert"),QTt.forEach(t),lvr=r(dRe," \u2014 "),oH=n(dRe,"A",{href:!0});var HTt=s(oH);ivr=r(HTt,"TFConvBertForSequenceClassification"),HTt.forEach(t),dvr=r(dRe," (ConvBERT model)"),dRe.forEach(t),cvr=i(ae),mM=n(ae,"LI",{});var cRe=s(mM);Bve=n(cRe,"STRONG",{});var UTt=s(Bve);fvr=r(UTt,"ctrl"),UTt.forEach(t),mvr=r(cRe," \u2014 "),rH=n(cRe,"A",{href:!0});var JTt=s(rH);gvr=r(JTt,"TFCTRLForSequenceClassification"),JTt.forEach(t),hvr=r(cRe," (CTRL model)"),cRe.forEach(t),pvr=i(ae),gM=n(ae,"LI",{});var fRe=s(gM);Ive=n(fRe,"STRONG",{});var YTt=s(Ive);_vr=r(YTt,"deberta"),YTt.forEach(t),uvr=r(fRe," \u2014 "),tH=n(fRe,"A",{href:!0});var KTt=s(tH);bvr=r(KTt,"TFDebertaForSequenceClassification"),KTt.forEach(t),vvr=r(fRe," (DeBERTa model)"),fRe.forEach(t),Fvr=i(ae),hM=n(ae,"LI",{});var mRe=s(hM);qve=n(mRe,"STRONG",{});var ZTt=s(qve);Tvr=r(ZTt,"deberta-v2"),ZTt.forEach(t),Mvr=r(mRe," \u2014 "),aH=n(mRe,"A",{href:!0});var e8t=s(aH);Evr=r(e8t,"TFDebertaV2ForSequenceClassification"),e8t.forEach(t),Cvr=r(mRe," (DeBERTa-v2 model)"),mRe.forEach(t),wvr=i(ae),pM=n(ae,"LI",{});var gRe=s(pM);Nve=n(gRe,"STRONG",{});var o8t=s(Nve);Avr=r(o8t,"distilbert"),o8t.forEach(t),yvr=r(gRe," \u2014 "),nH=n(gRe,"A",{href:!0});var r8t=s(nH);Lvr=r(r8t,"TFDistilBertForSequenceClassification"),r8t.forEach(t),xvr=r(gRe," (DistilBERT model)"),gRe.forEach(t),$vr=i(ae),_M=n(ae,"LI",{});var hRe=s(_M);jve=n(hRe,"STRONG",{});var t8t=s(jve);kvr=r(t8t,"electra"),t8t.forEach(t),Svr=r(hRe," \u2014 "),sH=n(hRe,"A",{href:!0});var a8t=s(sH);Rvr=r(a8t,"TFElectraForSequenceClassification"),a8t.forEach(t),Pvr=r(hRe," (ELECTRA model)"),hRe.forEach(t),Bvr=i(ae),uM=n(ae,"LI",{});var pRe=s(uM);Dve=n(pRe,"STRONG",{});var n8t=s(Dve);Ivr=r(n8t,"flaubert"),n8t.forEach(t),qvr=r(pRe," \u2014 "),lH=n(pRe,"A",{href:!0});var s8t=s(lH);Nvr=r(s8t,"TFFlaubertForSequenceClassification"),s8t.forEach(t),jvr=r(pRe," (FlauBERT model)"),pRe.forEach(t),Dvr=i(ae),bM=n(ae,"LI",{});var _Re=s(bM);Gve=n(_Re,"STRONG",{});var l8t=s(Gve);Gvr=r(l8t,"funnel"),l8t.forEach(t),Ovr=r(_Re," \u2014 "),iH=n(_Re,"A",{href:!0});var i8t=s(iH);Vvr=r(i8t,"TFFunnelForSequenceClassification"),i8t.forEach(t),Xvr=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),zvr=i(ae),vM=n(ae,"LI",{});var uRe=s(vM);Ove=n(uRe,"STRONG",{});var d8t=s(Ove);Wvr=r(d8t,"gpt2"),d8t.forEach(t),Qvr=r(uRe," \u2014 "),dH=n(uRe,"A",{href:!0});var c8t=s(dH);Hvr=r(c8t,"TFGPT2ForSequenceClassification"),c8t.forEach(t),Uvr=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),Jvr=i(ae),FM=n(ae,"LI",{});var bRe=s(FM);Vve=n(bRe,"STRONG",{});var f8t=s(Vve);Yvr=r(f8t,"gptj"),f8t.forEach(t),Kvr=r(bRe," \u2014 "),cH=n(bRe,"A",{href:!0});var m8t=s(cH);Zvr=r(m8t,"TFGPTJForSequenceClassification"),m8t.forEach(t),e3r=r(bRe," (GPT-J model)"),bRe.forEach(t),o3r=i(ae),TM=n(ae,"LI",{});var vRe=s(TM);Xve=n(vRe,"STRONG",{});var g8t=s(Xve);r3r=r(g8t,"layoutlm"),g8t.forEach(t),t3r=r(vRe," \u2014 "),fH=n(vRe,"A",{href:!0});var h8t=s(fH);a3r=r(h8t,"TFLayoutLMForSequenceClassification"),h8t.forEach(t),n3r=r(vRe," (LayoutLM model)"),vRe.forEach(t),s3r=i(ae),MM=n(ae,"LI",{});var FRe=s(MM);zve=n(FRe,"STRONG",{});var p8t=s(zve);l3r=r(p8t,"longformer"),p8t.forEach(t),i3r=r(FRe," \u2014 "),mH=n(FRe,"A",{href:!0});var _8t=s(mH);d3r=r(_8t,"TFLongformerForSequenceClassification"),_8t.forEach(t),c3r=r(FRe," (Longformer model)"),FRe.forEach(t),f3r=i(ae),EM=n(ae,"LI",{});var TRe=s(EM);Wve=n(TRe,"STRONG",{});var u8t=s(Wve);m3r=r(u8t,"mobilebert"),u8t.forEach(t),g3r=r(TRe," \u2014 "),gH=n(TRe,"A",{href:!0});var b8t=s(gH);h3r=r(b8t,"TFMobileBertForSequenceClassification"),b8t.forEach(t),p3r=r(TRe," (MobileBERT model)"),TRe.forEach(t),_3r=i(ae),CM=n(ae,"LI",{});var MRe=s(CM);Qve=n(MRe,"STRONG",{});var v8t=s(Qve);u3r=r(v8t,"mpnet"),v8t.forEach(t),b3r=r(MRe," \u2014 "),hH=n(MRe,"A",{href:!0});var F8t=s(hH);v3r=r(F8t,"TFMPNetForSequenceClassification"),F8t.forEach(t),F3r=r(MRe," (MPNet model)"),MRe.forEach(t),T3r=i(ae),wM=n(ae,"LI",{});var ERe=s(wM);Hve=n(ERe,"STRONG",{});var T8t=s(Hve);M3r=r(T8t,"openai-gpt"),T8t.forEach(t),E3r=r(ERe," \u2014 "),pH=n(ERe,"A",{href:!0});var M8t=s(pH);C3r=r(M8t,"TFOpenAIGPTForSequenceClassification"),M8t.forEach(t),w3r=r(ERe," (OpenAI GPT model)"),ERe.forEach(t),A3r=i(ae),AM=n(ae,"LI",{});var CRe=s(AM);Uve=n(CRe,"STRONG",{});var E8t=s(Uve);y3r=r(E8t,"rembert"),E8t.forEach(t),L3r=r(CRe," \u2014 "),_H=n(CRe,"A",{href:!0});var C8t=s(_H);x3r=r(C8t,"TFRemBertForSequenceClassification"),C8t.forEach(t),$3r=r(CRe," (RemBERT model)"),CRe.forEach(t),k3r=i(ae),yM=n(ae,"LI",{});var wRe=s(yM);Jve=n(wRe,"STRONG",{});var w8t=s(Jve);S3r=r(w8t,"roberta"),w8t.forEach(t),R3r=r(wRe," \u2014 "),uH=n(wRe,"A",{href:!0});var A8t=s(uH);P3r=r(A8t,"TFRobertaForSequenceClassification"),A8t.forEach(t),B3r=r(wRe," (RoBERTa model)"),wRe.forEach(t),I3r=i(ae),LM=n(ae,"LI",{});var ARe=s(LM);Yve=n(ARe,"STRONG",{});var y8t=s(Yve);q3r=r(y8t,"roformer"),y8t.forEach(t),N3r=r(ARe," \u2014 "),bH=n(ARe,"A",{href:!0});var L8t=s(bH);j3r=r(L8t,"TFRoFormerForSequenceClassification"),L8t.forEach(t),D3r=r(ARe," (RoFormer model)"),ARe.forEach(t),G3r=i(ae),xM=n(ae,"LI",{});var yRe=s(xM);Kve=n(yRe,"STRONG",{});var x8t=s(Kve);O3r=r(x8t,"tapas"),x8t.forEach(t),V3r=r(yRe," \u2014 "),vH=n(yRe,"A",{href:!0});var $8t=s(vH);X3r=r($8t,"TFTapasForSequenceClassification"),$8t.forEach(t),z3r=r(yRe," (TAPAS model)"),yRe.forEach(t),W3r=i(ae),$M=n(ae,"LI",{});var LRe=s($M);Zve=n(LRe,"STRONG",{});var k8t=s(Zve);Q3r=r(k8t,"transfo-xl"),k8t.forEach(t),H3r=r(LRe," \u2014 "),FH=n(LRe,"A",{href:!0});var S8t=s(FH);U3r=r(S8t,"TFTransfoXLForSequenceClassification"),S8t.forEach(t),J3r=r(LRe," (Transformer-XL model)"),LRe.forEach(t),Y3r=i(ae),kM=n(ae,"LI",{});var xRe=s(kM);e3e=n(xRe,"STRONG",{});var R8t=s(e3e);K3r=r(R8t,"xlm"),R8t.forEach(t),Z3r=r(xRe," \u2014 "),TH=n(xRe,"A",{href:!0});var P8t=s(TH);eFr=r(P8t,"TFXLMForSequenceClassification"),P8t.forEach(t),oFr=r(xRe," (XLM model)"),xRe.forEach(t),rFr=i(ae),SM=n(ae,"LI",{});var $Re=s(SM);o3e=n($Re,"STRONG",{});var B8t=s(o3e);tFr=r(B8t,"xlm-roberta"),B8t.forEach(t),aFr=r($Re," \u2014 "),MH=n($Re,"A",{href:!0});var I8t=s(MH);nFr=r(I8t,"TFXLMRobertaForSequenceClassification"),I8t.forEach(t),sFr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),lFr=i(ae),RM=n(ae,"LI",{});var kRe=s(RM);r3e=n(kRe,"STRONG",{});var q8t=s(r3e);iFr=r(q8t,"xlnet"),q8t.forEach(t),dFr=r(kRe," \u2014 "),EH=n(kRe,"A",{href:!0});var N8t=s(EH);cFr=r(N8t,"TFXLNetForSequenceClassification"),N8t.forEach(t),fFr=r(kRe," (XLNet model)"),kRe.forEach(t),ae.forEach(t),mFr=i(wl),T(PM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),rNe=i(f),lc=n(f,"H2",{class:!0});var iDe=s(lc);BM=n(iDe,"A",{id:!0,class:!0,href:!0});var j8t=s(BM);t3e=n(j8t,"SPAN",{});var D8t=s(t3e);T(AL.$$.fragment,D8t),D8t.forEach(t),j8t.forEach(t),gFr=i(iDe),a3e=n(iDe,"SPAN",{});var G8t=s(a3e);hFr=r(G8t,"TFAutoModelForMultipleChoice"),G8t.forEach(t),iDe.forEach(t),tNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(yL.$$.fragment,Al),pFr=i(Al),ic=n(Al,"P",{});var DZ=s(ic);_Fr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CH=n(DZ,"A",{href:!0});var O8t=s(CH);uFr=r(O8t,"from_pretrained()"),O8t.forEach(t),bFr=r(DZ," class method or the "),wH=n(DZ,"A",{href:!0});var V8t=s(wH);vFr=r(V8t,"from_config()"),V8t.forEach(t),FFr=r(DZ,` class
method.`),DZ.forEach(t),TFr=i(Al),LL=n(Al,"P",{});var dDe=s(LL);MFr=r(dDe,"This class cannot be instantiated directly using "),n3e=n(dDe,"CODE",{});var X8t=s(n3e);EFr=r(X8t,"__init__()"),X8t.forEach(t),CFr=r(dDe," (throws an error)."),dDe.forEach(t),wFr=i(Al),Pt=n(Al,"DIV",{class:!0});var MA=s(Pt);T(xL.$$.fragment,MA),AFr=i(MA),s3e=n(MA,"P",{});var z8t=s(s3e);yFr=r(z8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z8t.forEach(t),LFr=i(MA),dc=n(MA,"P",{});var GZ=s(dc);xFr=r(GZ,`Note:
Loading a model from its configuration file does `),l3e=n(GZ,"STRONG",{});var W8t=s(l3e);$Fr=r(W8t,"not"),W8t.forEach(t),kFr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(GZ,"A",{href:!0});var Q8t=s(AH);SFr=r(Q8t,"from_pretrained()"),Q8t.forEach(t),RFr=r(GZ," to load the model weights."),GZ.forEach(t),PFr=i(MA),T(IM.$$.fragment,MA),MA.forEach(t),BFr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T($L.$$.fragment,yl),IFr=i(yl),i3e=n(yl,"P",{});var H8t=s(i3e);qFr=r(H8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H8t.forEach(t),NFr=i(yl),sn=n(yl,"P",{});var EA=s(sn);jFr=r(EA,"The model class to instantiate is selected based on the "),d3e=n(EA,"CODE",{});var U8t=s(d3e);DFr=r(U8t,"model_type"),U8t.forEach(t),GFr=r(EA,` property of the config object (either
passed as an argument or loaded from `),c3e=n(EA,"CODE",{});var J8t=s(c3e);OFr=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),VFr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(EA,"CODE",{});var Y8t=s(f3e);XFr=r(Y8t,"pretrained_model_name_or_path"),Y8t.forEach(t),zFr=r(EA,":"),EA.forEach(t),WFr=i(yl),he=n(yl,"UL",{});var ue=s(he);qM=n(ue,"LI",{});var SRe=s(qM);m3e=n(SRe,"STRONG",{});var K8t=s(m3e);QFr=r(K8t,"albert"),K8t.forEach(t),HFr=r(SRe," \u2014 "),yH=n(SRe,"A",{href:!0});var Z8t=s(yH);UFr=r(Z8t,"TFAlbertForMultipleChoice"),Z8t.forEach(t),JFr=r(SRe," (ALBERT model)"),SRe.forEach(t),YFr=i(ue),NM=n(ue,"LI",{});var RRe=s(NM);g3e=n(RRe,"STRONG",{});var e7t=s(g3e);KFr=r(e7t,"bert"),e7t.forEach(t),ZFr=r(RRe," \u2014 "),LH=n(RRe,"A",{href:!0});var o7t=s(LH);eTr=r(o7t,"TFBertForMultipleChoice"),o7t.forEach(t),oTr=r(RRe," (BERT model)"),RRe.forEach(t),rTr=i(ue),jM=n(ue,"LI",{});var PRe=s(jM);h3e=n(PRe,"STRONG",{});var r7t=s(h3e);tTr=r(r7t,"camembert"),r7t.forEach(t),aTr=r(PRe," \u2014 "),xH=n(PRe,"A",{href:!0});var t7t=s(xH);nTr=r(t7t,"TFCamembertForMultipleChoice"),t7t.forEach(t),sTr=r(PRe," (CamemBERT model)"),PRe.forEach(t),lTr=i(ue),DM=n(ue,"LI",{});var BRe=s(DM);p3e=n(BRe,"STRONG",{});var a7t=s(p3e);iTr=r(a7t,"convbert"),a7t.forEach(t),dTr=r(BRe," \u2014 "),$H=n(BRe,"A",{href:!0});var n7t=s($H);cTr=r(n7t,"TFConvBertForMultipleChoice"),n7t.forEach(t),fTr=r(BRe," (ConvBERT model)"),BRe.forEach(t),mTr=i(ue),GM=n(ue,"LI",{});var IRe=s(GM);_3e=n(IRe,"STRONG",{});var s7t=s(_3e);gTr=r(s7t,"distilbert"),s7t.forEach(t),hTr=r(IRe," \u2014 "),kH=n(IRe,"A",{href:!0});var l7t=s(kH);pTr=r(l7t,"TFDistilBertForMultipleChoice"),l7t.forEach(t),_Tr=r(IRe," (DistilBERT model)"),IRe.forEach(t),uTr=i(ue),OM=n(ue,"LI",{});var qRe=s(OM);u3e=n(qRe,"STRONG",{});var i7t=s(u3e);bTr=r(i7t,"electra"),i7t.forEach(t),vTr=r(qRe," \u2014 "),SH=n(qRe,"A",{href:!0});var d7t=s(SH);FTr=r(d7t,"TFElectraForMultipleChoice"),d7t.forEach(t),TTr=r(qRe," (ELECTRA model)"),qRe.forEach(t),MTr=i(ue),VM=n(ue,"LI",{});var NRe=s(VM);b3e=n(NRe,"STRONG",{});var c7t=s(b3e);ETr=r(c7t,"flaubert"),c7t.forEach(t),CTr=r(NRe," \u2014 "),RH=n(NRe,"A",{href:!0});var f7t=s(RH);wTr=r(f7t,"TFFlaubertForMultipleChoice"),f7t.forEach(t),ATr=r(NRe," (FlauBERT model)"),NRe.forEach(t),yTr=i(ue),XM=n(ue,"LI",{});var jRe=s(XM);v3e=n(jRe,"STRONG",{});var m7t=s(v3e);LTr=r(m7t,"funnel"),m7t.forEach(t),xTr=r(jRe," \u2014 "),PH=n(jRe,"A",{href:!0});var g7t=s(PH);$Tr=r(g7t,"TFFunnelForMultipleChoice"),g7t.forEach(t),kTr=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),STr=i(ue),zM=n(ue,"LI",{});var DRe=s(zM);F3e=n(DRe,"STRONG",{});var h7t=s(F3e);RTr=r(h7t,"longformer"),h7t.forEach(t),PTr=r(DRe," \u2014 "),BH=n(DRe,"A",{href:!0});var p7t=s(BH);BTr=r(p7t,"TFLongformerForMultipleChoice"),p7t.forEach(t),ITr=r(DRe," (Longformer model)"),DRe.forEach(t),qTr=i(ue),WM=n(ue,"LI",{});var GRe=s(WM);T3e=n(GRe,"STRONG",{});var _7t=s(T3e);NTr=r(_7t,"mobilebert"),_7t.forEach(t),jTr=r(GRe," \u2014 "),IH=n(GRe,"A",{href:!0});var u7t=s(IH);DTr=r(u7t,"TFMobileBertForMultipleChoice"),u7t.forEach(t),GTr=r(GRe," (MobileBERT model)"),GRe.forEach(t),OTr=i(ue),QM=n(ue,"LI",{});var ORe=s(QM);M3e=n(ORe,"STRONG",{});var b7t=s(M3e);VTr=r(b7t,"mpnet"),b7t.forEach(t),XTr=r(ORe," \u2014 "),qH=n(ORe,"A",{href:!0});var v7t=s(qH);zTr=r(v7t,"TFMPNetForMultipleChoice"),v7t.forEach(t),WTr=r(ORe," (MPNet model)"),ORe.forEach(t),QTr=i(ue),HM=n(ue,"LI",{});var VRe=s(HM);E3e=n(VRe,"STRONG",{});var F7t=s(E3e);HTr=r(F7t,"rembert"),F7t.forEach(t),UTr=r(VRe," \u2014 "),NH=n(VRe,"A",{href:!0});var T7t=s(NH);JTr=r(T7t,"TFRemBertForMultipleChoice"),T7t.forEach(t),YTr=r(VRe," (RemBERT model)"),VRe.forEach(t),KTr=i(ue),UM=n(ue,"LI",{});var XRe=s(UM);C3e=n(XRe,"STRONG",{});var M7t=s(C3e);ZTr=r(M7t,"roberta"),M7t.forEach(t),e8r=r(XRe," \u2014 "),jH=n(XRe,"A",{href:!0});var E7t=s(jH);o8r=r(E7t,"TFRobertaForMultipleChoice"),E7t.forEach(t),r8r=r(XRe," (RoBERTa model)"),XRe.forEach(t),t8r=i(ue),JM=n(ue,"LI",{});var zRe=s(JM);w3e=n(zRe,"STRONG",{});var C7t=s(w3e);a8r=r(C7t,"roformer"),C7t.forEach(t),n8r=r(zRe," \u2014 "),DH=n(zRe,"A",{href:!0});var w7t=s(DH);s8r=r(w7t,"TFRoFormerForMultipleChoice"),w7t.forEach(t),l8r=r(zRe," (RoFormer model)"),zRe.forEach(t),i8r=i(ue),YM=n(ue,"LI",{});var WRe=s(YM);A3e=n(WRe,"STRONG",{});var A7t=s(A3e);d8r=r(A7t,"xlm"),A7t.forEach(t),c8r=r(WRe," \u2014 "),GH=n(WRe,"A",{href:!0});var y7t=s(GH);f8r=r(y7t,"TFXLMForMultipleChoice"),y7t.forEach(t),m8r=r(WRe," (XLM model)"),WRe.forEach(t),g8r=i(ue),KM=n(ue,"LI",{});var QRe=s(KM);y3e=n(QRe,"STRONG",{});var L7t=s(y3e);h8r=r(L7t,"xlm-roberta"),L7t.forEach(t),p8r=r(QRe," \u2014 "),OH=n(QRe,"A",{href:!0});var x7t=s(OH);_8r=r(x7t,"TFXLMRobertaForMultipleChoice"),x7t.forEach(t),u8r=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),b8r=i(ue),ZM=n(ue,"LI",{});var HRe=s(ZM);L3e=n(HRe,"STRONG",{});var $7t=s(L3e);v8r=r($7t,"xlnet"),$7t.forEach(t),F8r=r(HRe," \u2014 "),VH=n(HRe,"A",{href:!0});var k7t=s(VH);T8r=r(k7t,"TFXLNetForMultipleChoice"),k7t.forEach(t),M8r=r(HRe," (XLNet model)"),HRe.forEach(t),ue.forEach(t),E8r=i(yl),T(e4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),aNe=i(f),cc=n(f,"H2",{class:!0});var cDe=s(cc);o4=n(cDe,"A",{id:!0,class:!0,href:!0});var S7t=s(o4);x3e=n(S7t,"SPAN",{});var R7t=s(x3e);T(kL.$$.fragment,R7t),R7t.forEach(t),S7t.forEach(t),C8r=i(cDe),$3e=n(cDe,"SPAN",{});var P7t=s($3e);w8r=r(P7t,"TFAutoModelForNextSentencePrediction"),P7t.forEach(t),cDe.forEach(t),nNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(SL.$$.fragment,Ll),A8r=i(Ll),fc=n(Ll,"P",{});var OZ=s(fc);y8r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XH=n(OZ,"A",{href:!0});var B7t=s(XH);L8r=r(B7t,"from_pretrained()"),B7t.forEach(t),x8r=r(OZ," class method or the "),zH=n(OZ,"A",{href:!0});var I7t=s(zH);$8r=r(I7t,"from_config()"),I7t.forEach(t),k8r=r(OZ,` class
method.`),OZ.forEach(t),S8r=i(Ll),RL=n(Ll,"P",{});var fDe=s(RL);R8r=r(fDe,"This class cannot be instantiated directly using "),k3e=n(fDe,"CODE",{});var q7t=s(k3e);P8r=r(q7t,"__init__()"),q7t.forEach(t),B8r=r(fDe," (throws an error)."),fDe.forEach(t),I8r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var CA=s(Bt);T(PL.$$.fragment,CA),q8r=i(CA),S3e=n(CA,"P",{});var N7t=s(S3e);N8r=r(N7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),N7t.forEach(t),j8r=i(CA),mc=n(CA,"P",{});var VZ=s(mc);D8r=r(VZ,`Note:
Loading a model from its configuration file does `),R3e=n(VZ,"STRONG",{});var j7t=s(R3e);G8r=r(j7t,"not"),j7t.forEach(t),O8r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(VZ,"A",{href:!0});var D7t=s(WH);V8r=r(D7t,"from_pretrained()"),D7t.forEach(t),X8r=r(VZ," to load the model weights."),VZ.forEach(t),z8r=i(CA),T(r4.$$.fragment,CA),CA.forEach(t),W8r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(BL.$$.fragment,xl),Q8r=i(xl),P3e=n(xl,"P",{});var G7t=s(P3e);H8r=r(G7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),G7t.forEach(t),U8r=i(xl),ln=n(xl,"P",{});var wA=s(ln);J8r=r(wA,"The model class to instantiate is selected based on the "),B3e=n(wA,"CODE",{});var O7t=s(B3e);Y8r=r(O7t,"model_type"),O7t.forEach(t),K8r=r(wA,` property of the config object (either
passed as an argument or loaded from `),I3e=n(wA,"CODE",{});var V7t=s(I3e);Z8r=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),e7r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(wA,"CODE",{});var X7t=s(q3e);o7r=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),r7r=r(wA,":"),wA.forEach(t),t7r=i(xl),IL=n(xl,"UL",{});var mDe=s(IL);t4=n(mDe,"LI",{});var URe=s(t4);N3e=n(URe,"STRONG",{});var z7t=s(N3e);a7r=r(z7t,"bert"),z7t.forEach(t),n7r=r(URe," \u2014 "),QH=n(URe,"A",{href:!0});var W7t=s(QH);s7r=r(W7t,"TFBertForNextSentencePrediction"),W7t.forEach(t),l7r=r(URe," (BERT model)"),URe.forEach(t),i7r=i(mDe),a4=n(mDe,"LI",{});var JRe=s(a4);j3e=n(JRe,"STRONG",{});var Q7t=s(j3e);d7r=r(Q7t,"mobilebert"),Q7t.forEach(t),c7r=r(JRe," \u2014 "),HH=n(JRe,"A",{href:!0});var H7t=s(HH);f7r=r(H7t,"TFMobileBertForNextSentencePrediction"),H7t.forEach(t),m7r=r(JRe," (MobileBERT model)"),JRe.forEach(t),mDe.forEach(t),g7r=i(xl),T(n4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),sNe=i(f),gc=n(f,"H2",{class:!0});var gDe=s(gc);s4=n(gDe,"A",{id:!0,class:!0,href:!0});var U7t=s(s4);D3e=n(U7t,"SPAN",{});var J7t=s(D3e);T(qL.$$.fragment,J7t),J7t.forEach(t),U7t.forEach(t),h7r=i(gDe),G3e=n(gDe,"SPAN",{});var Y7t=s(G3e);p7r=r(Y7t,"TFAutoModelForTableQuestionAnswering"),Y7t.forEach(t),gDe.forEach(t),lNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(NL.$$.fragment,$l),_7r=i($l),hc=n($l,"P",{});var XZ=s(hc);u7r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UH=n(XZ,"A",{href:!0});var K7t=s(UH);b7r=r(K7t,"from_pretrained()"),K7t.forEach(t),v7r=r(XZ," class method or the "),JH=n(XZ,"A",{href:!0});var Z7t=s(JH);F7r=r(Z7t,"from_config()"),Z7t.forEach(t),T7r=r(XZ,` class
method.`),XZ.forEach(t),M7r=i($l),jL=n($l,"P",{});var hDe=s(jL);E7r=r(hDe,"This class cannot be instantiated directly using "),O3e=n(hDe,"CODE",{});var eMt=s(O3e);C7r=r(eMt,"__init__()"),eMt.forEach(t),w7r=r(hDe," (throws an error)."),hDe.forEach(t),A7r=i($l),It=n($l,"DIV",{class:!0});var AA=s(It);T(DL.$$.fragment,AA),y7r=i(AA),V3e=n(AA,"P",{});var oMt=s(V3e);L7r=r(oMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oMt.forEach(t),x7r=i(AA),pc=n(AA,"P",{});var zZ=s(pc);$7r=r(zZ,`Note:
Loading a model from its configuration file does `),X3e=n(zZ,"STRONG",{});var rMt=s(X3e);k7r=r(rMt,"not"),rMt.forEach(t),S7r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(zZ,"A",{href:!0});var tMt=s(YH);R7r=r(tMt,"from_pretrained()"),tMt.forEach(t),P7r=r(zZ," to load the model weights."),zZ.forEach(t),B7r=i(AA),T(l4.$$.fragment,AA),AA.forEach(t),I7r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(GL.$$.fragment,kl),q7r=i(kl),z3e=n(kl,"P",{});var aMt=s(z3e);N7r=r(aMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aMt.forEach(t),j7r=i(kl),dn=n(kl,"P",{});var yA=s(dn);D7r=r(yA,"The model class to instantiate is selected based on the "),W3e=n(yA,"CODE",{});var nMt=s(W3e);G7r=r(nMt,"model_type"),nMt.forEach(t),O7r=r(yA,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(yA,"CODE",{});var sMt=s(Q3e);V7r=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),X7r=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(yA,"CODE",{});var lMt=s(H3e);z7r=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),W7r=r(yA,":"),yA.forEach(t),Q7r=i(kl),U3e=n(kl,"UL",{});var iMt=s(U3e);i4=n(iMt,"LI",{});var YRe=s(i4);J3e=n(YRe,"STRONG",{});var dMt=s(J3e);H7r=r(dMt,"tapas"),dMt.forEach(t),U7r=r(YRe," \u2014 "),KH=n(YRe,"A",{href:!0});var cMt=s(KH);J7r=r(cMt,"TFTapasForQuestionAnswering"),cMt.forEach(t),Y7r=r(YRe," (TAPAS model)"),YRe.forEach(t),iMt.forEach(t),K7r=i(kl),T(d4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),iNe=i(f),_c=n(f,"H2",{class:!0});var pDe=s(_c);c4=n(pDe,"A",{id:!0,class:!0,href:!0});var fMt=s(c4);Y3e=n(fMt,"SPAN",{});var mMt=s(Y3e);T(OL.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),Z7r=i(pDe),K3e=n(pDe,"SPAN",{});var gMt=s(K3e);eMr=r(gMt,"TFAutoModelForTokenClassification"),gMt.forEach(t),pDe.forEach(t),dNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(VL.$$.fragment,Sl),oMr=i(Sl),uc=n(Sl,"P",{});var WZ=s(uc);rMr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZH=n(WZ,"A",{href:!0});var hMt=s(ZH);tMr=r(hMt,"from_pretrained()"),hMt.forEach(t),aMr=r(WZ," class method or the "),eU=n(WZ,"A",{href:!0});var pMt=s(eU);nMr=r(pMt,"from_config()"),pMt.forEach(t),sMr=r(WZ,` class
method.`),WZ.forEach(t),lMr=i(Sl),XL=n(Sl,"P",{});var _De=s(XL);iMr=r(_De,"This class cannot be instantiated directly using "),Z3e=n(_De,"CODE",{});var _Mt=s(Z3e);dMr=r(_Mt,"__init__()"),_Mt.forEach(t),cMr=r(_De," (throws an error)."),_De.forEach(t),fMr=i(Sl),qt=n(Sl,"DIV",{class:!0});var LA=s(qt);T(zL.$$.fragment,LA),mMr=i(LA),eFe=n(LA,"P",{});var uMt=s(eFe);gMr=r(uMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uMt.forEach(t),hMr=i(LA),bc=n(LA,"P",{});var QZ=s(bc);pMr=r(QZ,`Note:
Loading a model from its configuration file does `),oFe=n(QZ,"STRONG",{});var bMt=s(oFe);_Mr=r(bMt,"not"),bMt.forEach(t),uMr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(QZ,"A",{href:!0});var vMt=s(oU);bMr=r(vMt,"from_pretrained()"),vMt.forEach(t),vMr=r(QZ," to load the model weights."),QZ.forEach(t),FMr=i(LA),T(f4.$$.fragment,LA),LA.forEach(t),TMr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(WL.$$.fragment,Rl),MMr=i(Rl),rFe=n(Rl,"P",{});var FMt=s(rFe);EMr=r(FMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FMt.forEach(t),CMr=i(Rl),cn=n(Rl,"P",{});var xA=s(cn);wMr=r(xA,"The model class to instantiate is selected based on the "),tFe=n(xA,"CODE",{});var TMt=s(tFe);AMr=r(TMt,"model_type"),TMt.forEach(t),yMr=r(xA,` property of the config object (either
passed as an argument or loaded from `),aFe=n(xA,"CODE",{});var MMt=s(aFe);LMr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),xMr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(xA,"CODE",{});var EMt=s(nFe);$Mr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),kMr=r(xA,":"),xA.forEach(t),SMr=i(Rl),de=n(Rl,"UL",{});var me=s(de);m4=n(me,"LI",{});var KRe=s(m4);sFe=n(KRe,"STRONG",{});var CMt=s(sFe);RMr=r(CMt,"albert"),CMt.forEach(t),PMr=r(KRe," \u2014 "),rU=n(KRe,"A",{href:!0});var wMt=s(rU);BMr=r(wMt,"TFAlbertForTokenClassification"),wMt.forEach(t),IMr=r(KRe," (ALBERT model)"),KRe.forEach(t),qMr=i(me),g4=n(me,"LI",{});var ZRe=s(g4);lFe=n(ZRe,"STRONG",{});var AMt=s(lFe);NMr=r(AMt,"bert"),AMt.forEach(t),jMr=r(ZRe," \u2014 "),tU=n(ZRe,"A",{href:!0});var yMt=s(tU);DMr=r(yMt,"TFBertForTokenClassification"),yMt.forEach(t),GMr=r(ZRe," (BERT model)"),ZRe.forEach(t),OMr=i(me),h4=n(me,"LI",{});var ePe=s(h4);iFe=n(ePe,"STRONG",{});var LMt=s(iFe);VMr=r(LMt,"camembert"),LMt.forEach(t),XMr=r(ePe," \u2014 "),aU=n(ePe,"A",{href:!0});var xMt=s(aU);zMr=r(xMt,"TFCamembertForTokenClassification"),xMt.forEach(t),WMr=r(ePe," (CamemBERT model)"),ePe.forEach(t),QMr=i(me),p4=n(me,"LI",{});var oPe=s(p4);dFe=n(oPe,"STRONG",{});var $Mt=s(dFe);HMr=r($Mt,"convbert"),$Mt.forEach(t),UMr=r(oPe," \u2014 "),nU=n(oPe,"A",{href:!0});var kMt=s(nU);JMr=r(kMt,"TFConvBertForTokenClassification"),kMt.forEach(t),YMr=r(oPe," (ConvBERT model)"),oPe.forEach(t),KMr=i(me),_4=n(me,"LI",{});var rPe=s(_4);cFe=n(rPe,"STRONG",{});var SMt=s(cFe);ZMr=r(SMt,"deberta"),SMt.forEach(t),e4r=r(rPe," \u2014 "),sU=n(rPe,"A",{href:!0});var RMt=s(sU);o4r=r(RMt,"TFDebertaForTokenClassification"),RMt.forEach(t),r4r=r(rPe," (DeBERTa model)"),rPe.forEach(t),t4r=i(me),u4=n(me,"LI",{});var tPe=s(u4);fFe=n(tPe,"STRONG",{});var PMt=s(fFe);a4r=r(PMt,"deberta-v2"),PMt.forEach(t),n4r=r(tPe," \u2014 "),lU=n(tPe,"A",{href:!0});var BMt=s(lU);s4r=r(BMt,"TFDebertaV2ForTokenClassification"),BMt.forEach(t),l4r=r(tPe," (DeBERTa-v2 model)"),tPe.forEach(t),i4r=i(me),b4=n(me,"LI",{});var aPe=s(b4);mFe=n(aPe,"STRONG",{});var IMt=s(mFe);d4r=r(IMt,"distilbert"),IMt.forEach(t),c4r=r(aPe," \u2014 "),iU=n(aPe,"A",{href:!0});var qMt=s(iU);f4r=r(qMt,"TFDistilBertForTokenClassification"),qMt.forEach(t),m4r=r(aPe," (DistilBERT model)"),aPe.forEach(t),g4r=i(me),v4=n(me,"LI",{});var nPe=s(v4);gFe=n(nPe,"STRONG",{});var NMt=s(gFe);h4r=r(NMt,"electra"),NMt.forEach(t),p4r=r(nPe," \u2014 "),dU=n(nPe,"A",{href:!0});var jMt=s(dU);_4r=r(jMt,"TFElectraForTokenClassification"),jMt.forEach(t),u4r=r(nPe," (ELECTRA model)"),nPe.forEach(t),b4r=i(me),F4=n(me,"LI",{});var sPe=s(F4);hFe=n(sPe,"STRONG",{});var DMt=s(hFe);v4r=r(DMt,"flaubert"),DMt.forEach(t),F4r=r(sPe," \u2014 "),cU=n(sPe,"A",{href:!0});var GMt=s(cU);T4r=r(GMt,"TFFlaubertForTokenClassification"),GMt.forEach(t),M4r=r(sPe," (FlauBERT model)"),sPe.forEach(t),E4r=i(me),T4=n(me,"LI",{});var lPe=s(T4);pFe=n(lPe,"STRONG",{});var OMt=s(pFe);C4r=r(OMt,"funnel"),OMt.forEach(t),w4r=r(lPe," \u2014 "),fU=n(lPe,"A",{href:!0});var VMt=s(fU);A4r=r(VMt,"TFFunnelForTokenClassification"),VMt.forEach(t),y4r=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),L4r=i(me),M4=n(me,"LI",{});var iPe=s(M4);_Fe=n(iPe,"STRONG",{});var XMt=s(_Fe);x4r=r(XMt,"layoutlm"),XMt.forEach(t),$4r=r(iPe," \u2014 "),mU=n(iPe,"A",{href:!0});var zMt=s(mU);k4r=r(zMt,"TFLayoutLMForTokenClassification"),zMt.forEach(t),S4r=r(iPe," (LayoutLM model)"),iPe.forEach(t),R4r=i(me),E4=n(me,"LI",{});var dPe=s(E4);uFe=n(dPe,"STRONG",{});var WMt=s(uFe);P4r=r(WMt,"longformer"),WMt.forEach(t),B4r=r(dPe," \u2014 "),gU=n(dPe,"A",{href:!0});var QMt=s(gU);I4r=r(QMt,"TFLongformerForTokenClassification"),QMt.forEach(t),q4r=r(dPe," (Longformer model)"),dPe.forEach(t),N4r=i(me),C4=n(me,"LI",{});var cPe=s(C4);bFe=n(cPe,"STRONG",{});var HMt=s(bFe);j4r=r(HMt,"mobilebert"),HMt.forEach(t),D4r=r(cPe," \u2014 "),hU=n(cPe,"A",{href:!0});var UMt=s(hU);G4r=r(UMt,"TFMobileBertForTokenClassification"),UMt.forEach(t),O4r=r(cPe," (MobileBERT model)"),cPe.forEach(t),V4r=i(me),w4=n(me,"LI",{});var fPe=s(w4);vFe=n(fPe,"STRONG",{});var JMt=s(vFe);X4r=r(JMt,"mpnet"),JMt.forEach(t),z4r=r(fPe," \u2014 "),pU=n(fPe,"A",{href:!0});var YMt=s(pU);W4r=r(YMt,"TFMPNetForTokenClassification"),YMt.forEach(t),Q4r=r(fPe," (MPNet model)"),fPe.forEach(t),H4r=i(me),A4=n(me,"LI",{});var mPe=s(A4);FFe=n(mPe,"STRONG",{});var KMt=s(FFe);U4r=r(KMt,"rembert"),KMt.forEach(t),J4r=r(mPe," \u2014 "),_U=n(mPe,"A",{href:!0});var ZMt=s(_U);Y4r=r(ZMt,"TFRemBertForTokenClassification"),ZMt.forEach(t),K4r=r(mPe," (RemBERT model)"),mPe.forEach(t),Z4r=i(me),y4=n(me,"LI",{});var gPe=s(y4);TFe=n(gPe,"STRONG",{});var e4t=s(TFe);eEr=r(e4t,"roberta"),e4t.forEach(t),oEr=r(gPe," \u2014 "),uU=n(gPe,"A",{href:!0});var o4t=s(uU);rEr=r(o4t,"TFRobertaForTokenClassification"),o4t.forEach(t),tEr=r(gPe," (RoBERTa model)"),gPe.forEach(t),aEr=i(me),L4=n(me,"LI",{});var hPe=s(L4);MFe=n(hPe,"STRONG",{});var r4t=s(MFe);nEr=r(r4t,"roformer"),r4t.forEach(t),sEr=r(hPe," \u2014 "),bU=n(hPe,"A",{href:!0});var t4t=s(bU);lEr=r(t4t,"TFRoFormerForTokenClassification"),t4t.forEach(t),iEr=r(hPe," (RoFormer model)"),hPe.forEach(t),dEr=i(me),x4=n(me,"LI",{});var pPe=s(x4);EFe=n(pPe,"STRONG",{});var a4t=s(EFe);cEr=r(a4t,"xlm"),a4t.forEach(t),fEr=r(pPe," \u2014 "),vU=n(pPe,"A",{href:!0});var n4t=s(vU);mEr=r(n4t,"TFXLMForTokenClassification"),n4t.forEach(t),gEr=r(pPe," (XLM model)"),pPe.forEach(t),hEr=i(me),$4=n(me,"LI",{});var _Pe=s($4);CFe=n(_Pe,"STRONG",{});var s4t=s(CFe);pEr=r(s4t,"xlm-roberta"),s4t.forEach(t),_Er=r(_Pe," \u2014 "),FU=n(_Pe,"A",{href:!0});var l4t=s(FU);uEr=r(l4t,"TFXLMRobertaForTokenClassification"),l4t.forEach(t),bEr=r(_Pe," (XLM-RoBERTa model)"),_Pe.forEach(t),vEr=i(me),k4=n(me,"LI",{});var uPe=s(k4);wFe=n(uPe,"STRONG",{});var i4t=s(wFe);FEr=r(i4t,"xlnet"),i4t.forEach(t),TEr=r(uPe," \u2014 "),TU=n(uPe,"A",{href:!0});var d4t=s(TU);MEr=r(d4t,"TFXLNetForTokenClassification"),d4t.forEach(t),EEr=r(uPe," (XLNet model)"),uPe.forEach(t),me.forEach(t),CEr=i(Rl),T(S4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),cNe=i(f),vc=n(f,"H2",{class:!0});var uDe=s(vc);R4=n(uDe,"A",{id:!0,class:!0,href:!0});var c4t=s(R4);AFe=n(c4t,"SPAN",{});var f4t=s(AFe);T(QL.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),wEr=i(uDe),yFe=n(uDe,"SPAN",{});var m4t=s(yFe);AEr=r(m4t,"TFAutoModelForQuestionAnswering"),m4t.forEach(t),uDe.forEach(t),fNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(HL.$$.fragment,Pl),yEr=i(Pl),Fc=n(Pl,"P",{});var HZ=s(Fc);LEr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MU=n(HZ,"A",{href:!0});var g4t=s(MU);xEr=r(g4t,"from_pretrained()"),g4t.forEach(t),$Er=r(HZ," class method or the "),EU=n(HZ,"A",{href:!0});var h4t=s(EU);kEr=r(h4t,"from_config()"),h4t.forEach(t),SEr=r(HZ,` class
method.`),HZ.forEach(t),REr=i(Pl),UL=n(Pl,"P",{});var bDe=s(UL);PEr=r(bDe,"This class cannot be instantiated directly using "),LFe=n(bDe,"CODE",{});var p4t=s(LFe);BEr=r(p4t,"__init__()"),p4t.forEach(t),IEr=r(bDe," (throws an error)."),bDe.forEach(t),qEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var $A=s(Nt);T(JL.$$.fragment,$A),NEr=i($A),xFe=n($A,"P",{});var _4t=s(xFe);jEr=r(_4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_4t.forEach(t),DEr=i($A),Tc=n($A,"P",{});var UZ=s(Tc);GEr=r(UZ,`Note:
Loading a model from its configuration file does `),$Fe=n(UZ,"STRONG",{});var u4t=s($Fe);OEr=r(u4t,"not"),u4t.forEach(t),VEr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(UZ,"A",{href:!0});var b4t=s(CU);XEr=r(b4t,"from_pretrained()"),b4t.forEach(t),zEr=r(UZ," to load the model weights."),UZ.forEach(t),WEr=i($A),T(P4.$$.fragment,$A),$A.forEach(t),QEr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(YL.$$.fragment,Bl),HEr=i(Bl),kFe=n(Bl,"P",{});var v4t=s(kFe);UEr=r(v4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v4t.forEach(t),JEr=i(Bl),fn=n(Bl,"P",{});var kA=s(fn);YEr=r(kA,"The model class to instantiate is selected based on the "),SFe=n(kA,"CODE",{});var F4t=s(SFe);KEr=r(F4t,"model_type"),F4t.forEach(t),ZEr=r(kA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(kA,"CODE",{});var T4t=s(RFe);eCr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),oCr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(kA,"CODE",{});var M4t=s(PFe);rCr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),tCr=r(kA,":"),kA.forEach(t),aCr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);B4=n(ge,"LI",{});var bPe=s(B4);BFe=n(bPe,"STRONG",{});var E4t=s(BFe);nCr=r(E4t,"albert"),E4t.forEach(t),sCr=r(bPe," \u2014 "),wU=n(bPe,"A",{href:!0});var C4t=s(wU);lCr=r(C4t,"TFAlbertForQuestionAnswering"),C4t.forEach(t),iCr=r(bPe," (ALBERT model)"),bPe.forEach(t),dCr=i(ge),I4=n(ge,"LI",{});var vPe=s(I4);IFe=n(vPe,"STRONG",{});var w4t=s(IFe);cCr=r(w4t,"bert"),w4t.forEach(t),fCr=r(vPe," \u2014 "),AU=n(vPe,"A",{href:!0});var A4t=s(AU);mCr=r(A4t,"TFBertForQuestionAnswering"),A4t.forEach(t),gCr=r(vPe," (BERT model)"),vPe.forEach(t),hCr=i(ge),q4=n(ge,"LI",{});var FPe=s(q4);qFe=n(FPe,"STRONG",{});var y4t=s(qFe);pCr=r(y4t,"camembert"),y4t.forEach(t),_Cr=r(FPe," \u2014 "),yU=n(FPe,"A",{href:!0});var L4t=s(yU);uCr=r(L4t,"TFCamembertForQuestionAnswering"),L4t.forEach(t),bCr=r(FPe," (CamemBERT model)"),FPe.forEach(t),vCr=i(ge),N4=n(ge,"LI",{});var TPe=s(N4);NFe=n(TPe,"STRONG",{});var x4t=s(NFe);FCr=r(x4t,"convbert"),x4t.forEach(t),TCr=r(TPe," \u2014 "),LU=n(TPe,"A",{href:!0});var $4t=s(LU);MCr=r($4t,"TFConvBertForQuestionAnswering"),$4t.forEach(t),ECr=r(TPe," (ConvBERT model)"),TPe.forEach(t),CCr=i(ge),j4=n(ge,"LI",{});var MPe=s(j4);jFe=n(MPe,"STRONG",{});var k4t=s(jFe);wCr=r(k4t,"deberta"),k4t.forEach(t),ACr=r(MPe," \u2014 "),xU=n(MPe,"A",{href:!0});var S4t=s(xU);yCr=r(S4t,"TFDebertaForQuestionAnswering"),S4t.forEach(t),LCr=r(MPe," (DeBERTa model)"),MPe.forEach(t),xCr=i(ge),D4=n(ge,"LI",{});var EPe=s(D4);DFe=n(EPe,"STRONG",{});var R4t=s(DFe);$Cr=r(R4t,"deberta-v2"),R4t.forEach(t),kCr=r(EPe," \u2014 "),$U=n(EPe,"A",{href:!0});var P4t=s($U);SCr=r(P4t,"TFDebertaV2ForQuestionAnswering"),P4t.forEach(t),RCr=r(EPe," (DeBERTa-v2 model)"),EPe.forEach(t),PCr=i(ge),G4=n(ge,"LI",{});var CPe=s(G4);GFe=n(CPe,"STRONG",{});var B4t=s(GFe);BCr=r(B4t,"distilbert"),B4t.forEach(t),ICr=r(CPe," \u2014 "),kU=n(CPe,"A",{href:!0});var I4t=s(kU);qCr=r(I4t,"TFDistilBertForQuestionAnswering"),I4t.forEach(t),NCr=r(CPe," (DistilBERT model)"),CPe.forEach(t),jCr=i(ge),O4=n(ge,"LI",{});var wPe=s(O4);OFe=n(wPe,"STRONG",{});var q4t=s(OFe);DCr=r(q4t,"electra"),q4t.forEach(t),GCr=r(wPe," \u2014 "),SU=n(wPe,"A",{href:!0});var N4t=s(SU);OCr=r(N4t,"TFElectraForQuestionAnswering"),N4t.forEach(t),VCr=r(wPe," (ELECTRA model)"),wPe.forEach(t),XCr=i(ge),V4=n(ge,"LI",{});var APe=s(V4);VFe=n(APe,"STRONG",{});var j4t=s(VFe);zCr=r(j4t,"flaubert"),j4t.forEach(t),WCr=r(APe," \u2014 "),RU=n(APe,"A",{href:!0});var D4t=s(RU);QCr=r(D4t,"TFFlaubertForQuestionAnsweringSimple"),D4t.forEach(t),HCr=r(APe," (FlauBERT model)"),APe.forEach(t),UCr=i(ge),X4=n(ge,"LI",{});var yPe=s(X4);XFe=n(yPe,"STRONG",{});var G4t=s(XFe);JCr=r(G4t,"funnel"),G4t.forEach(t),YCr=r(yPe," \u2014 "),PU=n(yPe,"A",{href:!0});var O4t=s(PU);KCr=r(O4t,"TFFunnelForQuestionAnswering"),O4t.forEach(t),ZCr=r(yPe," (Funnel Transformer model)"),yPe.forEach(t),e5r=i(ge),z4=n(ge,"LI",{});var LPe=s(z4);zFe=n(LPe,"STRONG",{});var V4t=s(zFe);o5r=r(V4t,"gptj"),V4t.forEach(t),r5r=r(LPe," \u2014 "),BU=n(LPe,"A",{href:!0});var X4t=s(BU);t5r=r(X4t,"TFGPTJForQuestionAnswering"),X4t.forEach(t),a5r=r(LPe," (GPT-J model)"),LPe.forEach(t),n5r=i(ge),W4=n(ge,"LI",{});var xPe=s(W4);WFe=n(xPe,"STRONG",{});var z4t=s(WFe);s5r=r(z4t,"longformer"),z4t.forEach(t),l5r=r(xPe," \u2014 "),IU=n(xPe,"A",{href:!0});var W4t=s(IU);i5r=r(W4t,"TFLongformerForQuestionAnswering"),W4t.forEach(t),d5r=r(xPe," (Longformer model)"),xPe.forEach(t),c5r=i(ge),Q4=n(ge,"LI",{});var $Pe=s(Q4);QFe=n($Pe,"STRONG",{});var Q4t=s(QFe);f5r=r(Q4t,"mobilebert"),Q4t.forEach(t),m5r=r($Pe," \u2014 "),qU=n($Pe,"A",{href:!0});var H4t=s(qU);g5r=r(H4t,"TFMobileBertForQuestionAnswering"),H4t.forEach(t),h5r=r($Pe," (MobileBERT model)"),$Pe.forEach(t),p5r=i(ge),H4=n(ge,"LI",{});var kPe=s(H4);HFe=n(kPe,"STRONG",{});var U4t=s(HFe);_5r=r(U4t,"mpnet"),U4t.forEach(t),u5r=r(kPe," \u2014 "),NU=n(kPe,"A",{href:!0});var J4t=s(NU);b5r=r(J4t,"TFMPNetForQuestionAnswering"),J4t.forEach(t),v5r=r(kPe," (MPNet model)"),kPe.forEach(t),F5r=i(ge),U4=n(ge,"LI",{});var SPe=s(U4);UFe=n(SPe,"STRONG",{});var Y4t=s(UFe);T5r=r(Y4t,"rembert"),Y4t.forEach(t),M5r=r(SPe," \u2014 "),jU=n(SPe,"A",{href:!0});var K4t=s(jU);E5r=r(K4t,"TFRemBertForQuestionAnswering"),K4t.forEach(t),C5r=r(SPe," (RemBERT model)"),SPe.forEach(t),w5r=i(ge),J4=n(ge,"LI",{});var RPe=s(J4);JFe=n(RPe,"STRONG",{});var Z4t=s(JFe);A5r=r(Z4t,"roberta"),Z4t.forEach(t),y5r=r(RPe," \u2014 "),DU=n(RPe,"A",{href:!0});var eEt=s(DU);L5r=r(eEt,"TFRobertaForQuestionAnswering"),eEt.forEach(t),x5r=r(RPe," (RoBERTa model)"),RPe.forEach(t),$5r=i(ge),Y4=n(ge,"LI",{});var PPe=s(Y4);YFe=n(PPe,"STRONG",{});var oEt=s(YFe);k5r=r(oEt,"roformer"),oEt.forEach(t),S5r=r(PPe," \u2014 "),GU=n(PPe,"A",{href:!0});var rEt=s(GU);R5r=r(rEt,"TFRoFormerForQuestionAnswering"),rEt.forEach(t),P5r=r(PPe," (RoFormer model)"),PPe.forEach(t),B5r=i(ge),K4=n(ge,"LI",{});var BPe=s(K4);KFe=n(BPe,"STRONG",{});var tEt=s(KFe);I5r=r(tEt,"xlm"),tEt.forEach(t),q5r=r(BPe," \u2014 "),OU=n(BPe,"A",{href:!0});var aEt=s(OU);N5r=r(aEt,"TFXLMForQuestionAnsweringSimple"),aEt.forEach(t),j5r=r(BPe," (XLM model)"),BPe.forEach(t),D5r=i(ge),Z4=n(ge,"LI",{});var IPe=s(Z4);ZFe=n(IPe,"STRONG",{});var nEt=s(ZFe);G5r=r(nEt,"xlm-roberta"),nEt.forEach(t),O5r=r(IPe," \u2014 "),VU=n(IPe,"A",{href:!0});var sEt=s(VU);V5r=r(sEt,"TFXLMRobertaForQuestionAnswering"),sEt.forEach(t),X5r=r(IPe," (XLM-RoBERTa model)"),IPe.forEach(t),z5r=i(ge),eE=n(ge,"LI",{});var qPe=s(eE);eTe=n(qPe,"STRONG",{});var lEt=s(eTe);W5r=r(lEt,"xlnet"),lEt.forEach(t),Q5r=r(qPe," \u2014 "),XU=n(qPe,"A",{href:!0});var iEt=s(XU);H5r=r(iEt,"TFXLNetForQuestionAnsweringSimple"),iEt.forEach(t),U5r=r(qPe," (XLNet model)"),qPe.forEach(t),ge.forEach(t),J5r=i(Bl),T(oE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),mNe=i(f),Mc=n(f,"H2",{class:!0});var vDe=s(Mc);rE=n(vDe,"A",{id:!0,class:!0,href:!0});var dEt=s(rE);oTe=n(dEt,"SPAN",{});var cEt=s(oTe);T(KL.$$.fragment,cEt),cEt.forEach(t),dEt.forEach(t),Y5r=i(vDe),rTe=n(vDe,"SPAN",{});var fEt=s(rTe);K5r=r(fEt,"TFAutoModelForVision2Seq"),fEt.forEach(t),vDe.forEach(t),gNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(ZL.$$.fragment,Il),Z5r=i(Il),Ec=n(Il,"P",{});var JZ=s(Ec);ewr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zU=n(JZ,"A",{href:!0});var mEt=s(zU);owr=r(mEt,"from_pretrained()"),mEt.forEach(t),rwr=r(JZ," class method or the "),WU=n(JZ,"A",{href:!0});var gEt=s(WU);twr=r(gEt,"from_config()"),gEt.forEach(t),awr=r(JZ,` class
method.`),JZ.forEach(t),nwr=i(Il),ex=n(Il,"P",{});var FDe=s(ex);swr=r(FDe,"This class cannot be instantiated directly using "),tTe=n(FDe,"CODE",{});var hEt=s(tTe);lwr=r(hEt,"__init__()"),hEt.forEach(t),iwr=r(FDe," (throws an error)."),FDe.forEach(t),dwr=i(Il),jt=n(Il,"DIV",{class:!0});var SA=s(jt);T(ox.$$.fragment,SA),cwr=i(SA),aTe=n(SA,"P",{});var pEt=s(aTe);fwr=r(pEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pEt.forEach(t),mwr=i(SA),Cc=n(SA,"P",{});var YZ=s(Cc);gwr=r(YZ,`Note:
Loading a model from its configuration file does `),nTe=n(YZ,"STRONG",{});var _Et=s(nTe);hwr=r(_Et,"not"),_Et.forEach(t),pwr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(YZ,"A",{href:!0});var uEt=s(QU);_wr=r(uEt,"from_pretrained()"),uEt.forEach(t),uwr=r(YZ," to load the model weights."),YZ.forEach(t),bwr=i(SA),T(tE.$$.fragment,SA),SA.forEach(t),vwr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(rx.$$.fragment,ql),Fwr=i(ql),sTe=n(ql,"P",{});var bEt=s(sTe);Twr=r(bEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bEt.forEach(t),Mwr=i(ql),mn=n(ql,"P",{});var RA=s(mn);Ewr=r(RA,"The model class to instantiate is selected based on the "),lTe=n(RA,"CODE",{});var vEt=s(lTe);Cwr=r(vEt,"model_type"),vEt.forEach(t),wwr=r(RA,` property of the config object (either
passed as an argument or loaded from `),iTe=n(RA,"CODE",{});var FEt=s(iTe);Awr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),ywr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(RA,"CODE",{});var TEt=s(dTe);Lwr=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),xwr=r(RA,":"),RA.forEach(t),$wr=i(ql),cTe=n(ql,"UL",{});var MEt=s(cTe);aE=n(MEt,"LI",{});var NPe=s(aE);fTe=n(NPe,"STRONG",{});var EEt=s(fTe);kwr=r(EEt,"vision-encoder-decoder"),EEt.forEach(t),Swr=r(NPe," \u2014 "),HU=n(NPe,"A",{href:!0});var CEt=s(HU);Rwr=r(CEt,"TFVisionEncoderDecoderModel"),CEt.forEach(t),Pwr=r(NPe," (Vision Encoder decoder model)"),NPe.forEach(t),MEt.forEach(t),Bwr=i(ql),T(nE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),hNe=i(f),wc=n(f,"H2",{class:!0});var TDe=s(wc);sE=n(TDe,"A",{id:!0,class:!0,href:!0});var wEt=s(sE);mTe=n(wEt,"SPAN",{});var AEt=s(mTe);T(tx.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),Iwr=i(TDe),gTe=n(TDe,"SPAN",{});var yEt=s(gTe);qwr=r(yEt,"TFAutoModelForSpeechSeq2Seq"),yEt.forEach(t),TDe.forEach(t),pNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(ax.$$.fragment,Nl),Nwr=i(Nl),Ac=n(Nl,"P",{});var KZ=s(Ac);jwr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UU=n(KZ,"A",{href:!0});var LEt=s(UU);Dwr=r(LEt,"from_pretrained()"),LEt.forEach(t),Gwr=r(KZ," class method or the "),JU=n(KZ,"A",{href:!0});var xEt=s(JU);Owr=r(xEt,"from_config()"),xEt.forEach(t),Vwr=r(KZ,` class
method.`),KZ.forEach(t),Xwr=i(Nl),nx=n(Nl,"P",{});var MDe=s(nx);zwr=r(MDe,"This class cannot be instantiated directly using "),hTe=n(MDe,"CODE",{});var $Et=s(hTe);Wwr=r($Et,"__init__()"),$Et.forEach(t),Qwr=r(MDe," (throws an error)."),MDe.forEach(t),Hwr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var PA=s(Dt);T(sx.$$.fragment,PA),Uwr=i(PA),pTe=n(PA,"P",{});var kEt=s(pTe);Jwr=r(kEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kEt.forEach(t),Ywr=i(PA),yc=n(PA,"P",{});var ZZ=s(yc);Kwr=r(ZZ,`Note:
Loading a model from its configuration file does `),_Te=n(ZZ,"STRONG",{});var SEt=s(_Te);Zwr=r(SEt,"not"),SEt.forEach(t),eAr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(ZZ,"A",{href:!0});var REt=s(YU);oAr=r(REt,"from_pretrained()"),REt.forEach(t),rAr=r(ZZ," to load the model weights."),ZZ.forEach(t),tAr=i(PA),T(lE.$$.fragment,PA),PA.forEach(t),aAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(lx.$$.fragment,jl),nAr=i(jl),uTe=n(jl,"P",{});var PEt=s(uTe);sAr=r(PEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PEt.forEach(t),lAr=i(jl),gn=n(jl,"P",{});var BA=s(gn);iAr=r(BA,"The model class to instantiate is selected based on the "),bTe=n(BA,"CODE",{});var BEt=s(bTe);dAr=r(BEt,"model_type"),BEt.forEach(t),cAr=r(BA,` property of the config object (either
passed as an argument or loaded from `),vTe=n(BA,"CODE",{});var IEt=s(vTe);fAr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),mAr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(BA,"CODE",{});var qEt=s(FTe);gAr=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),hAr=r(BA,":"),BA.forEach(t),pAr=i(jl),TTe=n(jl,"UL",{});var NEt=s(TTe);iE=n(NEt,"LI",{});var jPe=s(iE);MTe=n(jPe,"STRONG",{});var jEt=s(MTe);_Ar=r(jEt,"speech_to_text"),jEt.forEach(t),uAr=r(jPe," \u2014 "),KU=n(jPe,"A",{href:!0});var DEt=s(KU);bAr=r(DEt,"TFSpeech2TextForConditionalGeneration"),DEt.forEach(t),vAr=r(jPe," (Speech2Text model)"),jPe.forEach(t),NEt.forEach(t),FAr=i(jl),T(dE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),_Ne=i(f),Lc=n(f,"H2",{class:!0});var EDe=s(Lc);cE=n(EDe,"A",{id:!0,class:!0,href:!0});var GEt=s(cE);ETe=n(GEt,"SPAN",{});var OEt=s(ETe);T(ix.$$.fragment,OEt),OEt.forEach(t),GEt.forEach(t),TAr=i(EDe),CTe=n(EDe,"SPAN",{});var VEt=s(CTe);MAr=r(VEt,"FlaxAutoModel"),VEt.forEach(t),EDe.forEach(t),uNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(dx.$$.fragment,Dl),EAr=i(Dl),xc=n(Dl,"P",{});var eee=s(xc);CAr=r(eee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=n(eee,"A",{href:!0});var XEt=s(ZU);wAr=r(XEt,"from_pretrained()"),XEt.forEach(t),AAr=r(eee," class method or the "),eJ=n(eee,"A",{href:!0});var zEt=s(eJ);yAr=r(zEt,"from_config()"),zEt.forEach(t),LAr=r(eee,` class
method.`),eee.forEach(t),xAr=i(Dl),cx=n(Dl,"P",{});var CDe=s(cx);$Ar=r(CDe,"This class cannot be instantiated directly using "),wTe=n(CDe,"CODE",{});var WEt=s(wTe);kAr=r(WEt,"__init__()"),WEt.forEach(t),SAr=r(CDe," (throws an error)."),CDe.forEach(t),RAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var IA=s(Gt);T(fx.$$.fragment,IA),PAr=i(IA),ATe=n(IA,"P",{});var QEt=s(ATe);BAr=r(QEt,"Instantiates one of the base model classes of the library from a configuration."),QEt.forEach(t),IAr=i(IA),$c=n(IA,"P",{});var oee=s($c);qAr=r(oee,`Note:
Loading a model from its configuration file does `),yTe=n(oee,"STRONG",{});var HEt=s(yTe);NAr=r(HEt,"not"),HEt.forEach(t),jAr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(oee,"A",{href:!0});var UEt=s(oJ);DAr=r(UEt,"from_pretrained()"),UEt.forEach(t),GAr=r(oee," to load the model weights."),oee.forEach(t),OAr=i(IA),T(fE.$$.fragment,IA),IA.forEach(t),VAr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(mx.$$.fragment,Gl),XAr=i(Gl),LTe=n(Gl,"P",{});var JEt=s(LTe);zAr=r(JEt,"Instantiate one of the base model classes of the library from a pretrained model."),JEt.forEach(t),WAr=i(Gl),hn=n(Gl,"P",{});var qA=s(hn);QAr=r(qA,"The model class to instantiate is selected based on the "),xTe=n(qA,"CODE",{});var YEt=s(xTe);HAr=r(YEt,"model_type"),YEt.forEach(t),UAr=r(qA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(qA,"CODE",{});var KEt=s($Te);JAr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),YAr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(qA,"CODE",{});var ZEt=s(kTe);KAr=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),ZAr=r(qA,":"),qA.forEach(t),e0r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);mE=n(ne,"LI",{});var DPe=s(mE);STe=n(DPe,"STRONG",{});var eCt=s(STe);o0r=r(eCt,"albert"),eCt.forEach(t),r0r=r(DPe," \u2014 "),rJ=n(DPe,"A",{href:!0});var oCt=s(rJ);t0r=r(oCt,"FlaxAlbertModel"),oCt.forEach(t),a0r=r(DPe," (ALBERT model)"),DPe.forEach(t),n0r=i(ne),gE=n(ne,"LI",{});var GPe=s(gE);RTe=n(GPe,"STRONG",{});var rCt=s(RTe);s0r=r(rCt,"bart"),rCt.forEach(t),l0r=r(GPe," \u2014 "),tJ=n(GPe,"A",{href:!0});var tCt=s(tJ);i0r=r(tCt,"FlaxBartModel"),tCt.forEach(t),d0r=r(GPe," (BART model)"),GPe.forEach(t),c0r=i(ne),hE=n(ne,"LI",{});var OPe=s(hE);PTe=n(OPe,"STRONG",{});var aCt=s(PTe);f0r=r(aCt,"beit"),aCt.forEach(t),m0r=r(OPe," \u2014 "),aJ=n(OPe,"A",{href:!0});var nCt=s(aJ);g0r=r(nCt,"FlaxBeitModel"),nCt.forEach(t),h0r=r(OPe," (BEiT model)"),OPe.forEach(t),p0r=i(ne),pE=n(ne,"LI",{});var VPe=s(pE);BTe=n(VPe,"STRONG",{});var sCt=s(BTe);_0r=r(sCt,"bert"),sCt.forEach(t),u0r=r(VPe," \u2014 "),nJ=n(VPe,"A",{href:!0});var lCt=s(nJ);b0r=r(lCt,"FlaxBertModel"),lCt.forEach(t),v0r=r(VPe," (BERT model)"),VPe.forEach(t),F0r=i(ne),_E=n(ne,"LI",{});var XPe=s(_E);ITe=n(XPe,"STRONG",{});var iCt=s(ITe);T0r=r(iCt,"big_bird"),iCt.forEach(t),M0r=r(XPe," \u2014 "),sJ=n(XPe,"A",{href:!0});var dCt=s(sJ);E0r=r(dCt,"FlaxBigBirdModel"),dCt.forEach(t),C0r=r(XPe," (BigBird model)"),XPe.forEach(t),w0r=i(ne),uE=n(ne,"LI",{});var zPe=s(uE);qTe=n(zPe,"STRONG",{});var cCt=s(qTe);A0r=r(cCt,"blenderbot"),cCt.forEach(t),y0r=r(zPe," \u2014 "),lJ=n(zPe,"A",{href:!0});var fCt=s(lJ);L0r=r(fCt,"FlaxBlenderbotModel"),fCt.forEach(t),x0r=r(zPe," (Blenderbot model)"),zPe.forEach(t),$0r=i(ne),bE=n(ne,"LI",{});var WPe=s(bE);NTe=n(WPe,"STRONG",{});var mCt=s(NTe);k0r=r(mCt,"blenderbot-small"),mCt.forEach(t),S0r=r(WPe," \u2014 "),iJ=n(WPe,"A",{href:!0});var gCt=s(iJ);R0r=r(gCt,"FlaxBlenderbotSmallModel"),gCt.forEach(t),P0r=r(WPe," (BlenderbotSmall model)"),WPe.forEach(t),B0r=i(ne),vE=n(ne,"LI",{});var QPe=s(vE);jTe=n(QPe,"STRONG",{});var hCt=s(jTe);I0r=r(hCt,"clip"),hCt.forEach(t),q0r=r(QPe," \u2014 "),dJ=n(QPe,"A",{href:!0});var pCt=s(dJ);N0r=r(pCt,"FlaxCLIPModel"),pCt.forEach(t),j0r=r(QPe," (CLIP model)"),QPe.forEach(t),D0r=i(ne),FE=n(ne,"LI",{});var HPe=s(FE);DTe=n(HPe,"STRONG",{});var _Ct=s(DTe);G0r=r(_Ct,"distilbert"),_Ct.forEach(t),O0r=r(HPe," \u2014 "),cJ=n(HPe,"A",{href:!0});var uCt=s(cJ);V0r=r(uCt,"FlaxDistilBertModel"),uCt.forEach(t),X0r=r(HPe," (DistilBERT model)"),HPe.forEach(t),z0r=i(ne),TE=n(ne,"LI",{});var UPe=s(TE);GTe=n(UPe,"STRONG",{});var bCt=s(GTe);W0r=r(bCt,"electra"),bCt.forEach(t),Q0r=r(UPe," \u2014 "),fJ=n(UPe,"A",{href:!0});var vCt=s(fJ);H0r=r(vCt,"FlaxElectraModel"),vCt.forEach(t),U0r=r(UPe," (ELECTRA model)"),UPe.forEach(t),J0r=i(ne),ME=n(ne,"LI",{});var JPe=s(ME);OTe=n(JPe,"STRONG",{});var FCt=s(OTe);Y0r=r(FCt,"gpt2"),FCt.forEach(t),K0r=r(JPe," \u2014 "),mJ=n(JPe,"A",{href:!0});var TCt=s(mJ);Z0r=r(TCt,"FlaxGPT2Model"),TCt.forEach(t),e6r=r(JPe," (OpenAI GPT-2 model)"),JPe.forEach(t),o6r=i(ne),EE=n(ne,"LI",{});var YPe=s(EE);VTe=n(YPe,"STRONG",{});var MCt=s(VTe);r6r=r(MCt,"gpt_neo"),MCt.forEach(t),t6r=r(YPe," \u2014 "),gJ=n(YPe,"A",{href:!0});var ECt=s(gJ);a6r=r(ECt,"FlaxGPTNeoModel"),ECt.forEach(t),n6r=r(YPe," (GPT Neo model)"),YPe.forEach(t),s6r=i(ne),CE=n(ne,"LI",{});var KPe=s(CE);XTe=n(KPe,"STRONG",{});var CCt=s(XTe);l6r=r(CCt,"gptj"),CCt.forEach(t),i6r=r(KPe," \u2014 "),hJ=n(KPe,"A",{href:!0});var wCt=s(hJ);d6r=r(wCt,"FlaxGPTJModel"),wCt.forEach(t),c6r=r(KPe," (GPT-J model)"),KPe.forEach(t),f6r=i(ne),wE=n(ne,"LI",{});var ZPe=s(wE);zTe=n(ZPe,"STRONG",{});var ACt=s(zTe);m6r=r(ACt,"marian"),ACt.forEach(t),g6r=r(ZPe," \u2014 "),pJ=n(ZPe,"A",{href:!0});var yCt=s(pJ);h6r=r(yCt,"FlaxMarianModel"),yCt.forEach(t),p6r=r(ZPe," (Marian model)"),ZPe.forEach(t),_6r=i(ne),AE=n(ne,"LI",{});var eBe=s(AE);WTe=n(eBe,"STRONG",{});var LCt=s(WTe);u6r=r(LCt,"mbart"),LCt.forEach(t),b6r=r(eBe," \u2014 "),_J=n(eBe,"A",{href:!0});var xCt=s(_J);v6r=r(xCt,"FlaxMBartModel"),xCt.forEach(t),F6r=r(eBe," (mBART model)"),eBe.forEach(t),T6r=i(ne),yE=n(ne,"LI",{});var oBe=s(yE);QTe=n(oBe,"STRONG",{});var $Ct=s(QTe);M6r=r($Ct,"mt5"),$Ct.forEach(t),E6r=r(oBe," \u2014 "),uJ=n(oBe,"A",{href:!0});var kCt=s(uJ);C6r=r(kCt,"FlaxMT5Model"),kCt.forEach(t),w6r=r(oBe," (mT5 model)"),oBe.forEach(t),A6r=i(ne),LE=n(ne,"LI",{});var rBe=s(LE);HTe=n(rBe,"STRONG",{});var SCt=s(HTe);y6r=r(SCt,"pegasus"),SCt.forEach(t),L6r=r(rBe," \u2014 "),bJ=n(rBe,"A",{href:!0});var RCt=s(bJ);x6r=r(RCt,"FlaxPegasusModel"),RCt.forEach(t),$6r=r(rBe," (Pegasus model)"),rBe.forEach(t),k6r=i(ne),xE=n(ne,"LI",{});var tBe=s(xE);UTe=n(tBe,"STRONG",{});var PCt=s(UTe);S6r=r(PCt,"roberta"),PCt.forEach(t),R6r=r(tBe," \u2014 "),vJ=n(tBe,"A",{href:!0});var BCt=s(vJ);P6r=r(BCt,"FlaxRobertaModel"),BCt.forEach(t),B6r=r(tBe," (RoBERTa model)"),tBe.forEach(t),I6r=i(ne),$E=n(ne,"LI",{});var aBe=s($E);JTe=n(aBe,"STRONG",{});var ICt=s(JTe);q6r=r(ICt,"roformer"),ICt.forEach(t),N6r=r(aBe," \u2014 "),FJ=n(aBe,"A",{href:!0});var qCt=s(FJ);j6r=r(qCt,"FlaxRoFormerModel"),qCt.forEach(t),D6r=r(aBe," (RoFormer model)"),aBe.forEach(t),G6r=i(ne),kE=n(ne,"LI",{});var nBe=s(kE);YTe=n(nBe,"STRONG",{});var NCt=s(YTe);O6r=r(NCt,"t5"),NCt.forEach(t),V6r=r(nBe," \u2014 "),TJ=n(nBe,"A",{href:!0});var jCt=s(TJ);X6r=r(jCt,"FlaxT5Model"),jCt.forEach(t),z6r=r(nBe," (T5 model)"),nBe.forEach(t),W6r=i(ne),SE=n(ne,"LI",{});var sBe=s(SE);KTe=n(sBe,"STRONG",{});var DCt=s(KTe);Q6r=r(DCt,"vision-text-dual-encoder"),DCt.forEach(t),H6r=r(sBe," \u2014 "),MJ=n(sBe,"A",{href:!0});var GCt=s(MJ);U6r=r(GCt,"FlaxVisionTextDualEncoderModel"),GCt.forEach(t),J6r=r(sBe," (VisionTextDualEncoder model)"),sBe.forEach(t),Y6r=i(ne),RE=n(ne,"LI",{});var lBe=s(RE);ZTe=n(lBe,"STRONG",{});var OCt=s(ZTe);K6r=r(OCt,"vit"),OCt.forEach(t),Z6r=r(lBe," \u2014 "),EJ=n(lBe,"A",{href:!0});var VCt=s(EJ);eyr=r(VCt,"FlaxViTModel"),VCt.forEach(t),oyr=r(lBe," (ViT model)"),lBe.forEach(t),ryr=i(ne),PE=n(ne,"LI",{});var iBe=s(PE);e8e=n(iBe,"STRONG",{});var XCt=s(e8e);tyr=r(XCt,"wav2vec2"),XCt.forEach(t),ayr=r(iBe," \u2014 "),CJ=n(iBe,"A",{href:!0});var zCt=s(CJ);nyr=r(zCt,"FlaxWav2Vec2Model"),zCt.forEach(t),syr=r(iBe," (Wav2Vec2 model)"),iBe.forEach(t),lyr=i(ne),BE=n(ne,"LI",{});var dBe=s(BE);o8e=n(dBe,"STRONG",{});var WCt=s(o8e);iyr=r(WCt,"xglm"),WCt.forEach(t),dyr=r(dBe," \u2014 "),wJ=n(dBe,"A",{href:!0});var QCt=s(wJ);cyr=r(QCt,"FlaxXGLMModel"),QCt.forEach(t),fyr=r(dBe," (XGLM model)"),dBe.forEach(t),myr=i(ne),IE=n(ne,"LI",{});var cBe=s(IE);r8e=n(cBe,"STRONG",{});var HCt=s(r8e);gyr=r(HCt,"xlm-roberta"),HCt.forEach(t),hyr=r(cBe," \u2014 "),AJ=n(cBe,"A",{href:!0});var UCt=s(AJ);pyr=r(UCt,"FlaxXLMRobertaModel"),UCt.forEach(t),_yr=r(cBe," (XLM-RoBERTa model)"),cBe.forEach(t),ne.forEach(t),uyr=i(Gl),T(qE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),bNe=i(f),kc=n(f,"H2",{class:!0});var wDe=s(kc);NE=n(wDe,"A",{id:!0,class:!0,href:!0});var JCt=s(NE);t8e=n(JCt,"SPAN",{});var YCt=s(t8e);T(gx.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),byr=i(wDe),a8e=n(wDe,"SPAN",{});var KCt=s(a8e);vyr=r(KCt,"FlaxAutoModelForCausalLM"),KCt.forEach(t),wDe.forEach(t),vNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(hx.$$.fragment,Ol),Fyr=i(Ol),Sc=n(Ol,"P",{});var ree=s(Sc);Tyr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yJ=n(ree,"A",{href:!0});var ZCt=s(yJ);Myr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),Eyr=r(ree," class method or the "),LJ=n(ree,"A",{href:!0});var e5t=s(LJ);Cyr=r(e5t,"from_config()"),e5t.forEach(t),wyr=r(ree,` class
method.`),ree.forEach(t),Ayr=i(Ol),px=n(Ol,"P",{});var ADe=s(px);yyr=r(ADe,"This class cannot be instantiated directly using "),n8e=n(ADe,"CODE",{});var o5t=s(n8e);Lyr=r(o5t,"__init__()"),o5t.forEach(t),xyr=r(ADe," (throws an error)."),ADe.forEach(t),$yr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var NA=s(Ot);T(_x.$$.fragment,NA),kyr=i(NA),s8e=n(NA,"P",{});var r5t=s(s8e);Syr=r(r5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r5t.forEach(t),Ryr=i(NA),Rc=n(NA,"P",{});var tee=s(Rc);Pyr=r(tee,`Note:
Loading a model from its configuration file does `),l8e=n(tee,"STRONG",{});var t5t=s(l8e);Byr=r(t5t,"not"),t5t.forEach(t),Iyr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(tee,"A",{href:!0});var a5t=s(xJ);qyr=r(a5t,"from_pretrained()"),a5t.forEach(t),Nyr=r(tee," to load the model weights."),tee.forEach(t),jyr=i(NA),T(jE.$$.fragment,NA),NA.forEach(t),Dyr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(ux.$$.fragment,Vl),Gyr=i(Vl),i8e=n(Vl,"P",{});var n5t=s(i8e);Oyr=r(n5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n5t.forEach(t),Vyr=i(Vl),pn=n(Vl,"P",{});var jA=s(pn);Xyr=r(jA,"The model class to instantiate is selected based on the "),d8e=n(jA,"CODE",{});var s5t=s(d8e);zyr=r(s5t,"model_type"),s5t.forEach(t),Wyr=r(jA,` property of the config object (either
passed as an argument or loaded from `),c8e=n(jA,"CODE",{});var l5t=s(c8e);Qyr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Hyr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=n(jA,"CODE",{});var i5t=s(f8e);Uyr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Jyr=r(jA,":"),jA.forEach(t),Yyr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);DE=n(Xe,"LI",{});var fBe=s(DE);m8e=n(fBe,"STRONG",{});var d5t=s(m8e);Kyr=r(d5t,"bart"),d5t.forEach(t),Zyr=r(fBe," \u2014 "),$J=n(fBe,"A",{href:!0});var c5t=s($J);eLr=r(c5t,"FlaxBartForCausalLM"),c5t.forEach(t),oLr=r(fBe," (BART model)"),fBe.forEach(t),rLr=i(Xe),GE=n(Xe,"LI",{});var mBe=s(GE);g8e=n(mBe,"STRONG",{});var f5t=s(g8e);tLr=r(f5t,"bert"),f5t.forEach(t),aLr=r(mBe," \u2014 "),kJ=n(mBe,"A",{href:!0});var m5t=s(kJ);nLr=r(m5t,"FlaxBertForCausalLM"),m5t.forEach(t),sLr=r(mBe," (BERT model)"),mBe.forEach(t),lLr=i(Xe),OE=n(Xe,"LI",{});var gBe=s(OE);h8e=n(gBe,"STRONG",{});var g5t=s(h8e);iLr=r(g5t,"big_bird"),g5t.forEach(t),dLr=r(gBe," \u2014 "),SJ=n(gBe,"A",{href:!0});var h5t=s(SJ);cLr=r(h5t,"FlaxBigBirdForCausalLM"),h5t.forEach(t),fLr=r(gBe," (BigBird model)"),gBe.forEach(t),mLr=i(Xe),VE=n(Xe,"LI",{});var hBe=s(VE);p8e=n(hBe,"STRONG",{});var p5t=s(p8e);gLr=r(p5t,"electra"),p5t.forEach(t),hLr=r(hBe," \u2014 "),RJ=n(hBe,"A",{href:!0});var _5t=s(RJ);pLr=r(_5t,"FlaxElectraForCausalLM"),_5t.forEach(t),_Lr=r(hBe," (ELECTRA model)"),hBe.forEach(t),uLr=i(Xe),XE=n(Xe,"LI",{});var pBe=s(XE);_8e=n(pBe,"STRONG",{});var u5t=s(_8e);bLr=r(u5t,"gpt2"),u5t.forEach(t),vLr=r(pBe," \u2014 "),PJ=n(pBe,"A",{href:!0});var b5t=s(PJ);FLr=r(b5t,"FlaxGPT2LMHeadModel"),b5t.forEach(t),TLr=r(pBe," (OpenAI GPT-2 model)"),pBe.forEach(t),MLr=i(Xe),zE=n(Xe,"LI",{});var _Be=s(zE);u8e=n(_Be,"STRONG",{});var v5t=s(u8e);ELr=r(v5t,"gpt_neo"),v5t.forEach(t),CLr=r(_Be," \u2014 "),BJ=n(_Be,"A",{href:!0});var F5t=s(BJ);wLr=r(F5t,"FlaxGPTNeoForCausalLM"),F5t.forEach(t),ALr=r(_Be," (GPT Neo model)"),_Be.forEach(t),yLr=i(Xe),WE=n(Xe,"LI",{});var uBe=s(WE);b8e=n(uBe,"STRONG",{});var T5t=s(b8e);LLr=r(T5t,"gptj"),T5t.forEach(t),xLr=r(uBe," \u2014 "),IJ=n(uBe,"A",{href:!0});var M5t=s(IJ);$Lr=r(M5t,"FlaxGPTJForCausalLM"),M5t.forEach(t),kLr=r(uBe," (GPT-J model)"),uBe.forEach(t),SLr=i(Xe),QE=n(Xe,"LI",{});var bBe=s(QE);v8e=n(bBe,"STRONG",{});var E5t=s(v8e);RLr=r(E5t,"roberta"),E5t.forEach(t),PLr=r(bBe," \u2014 "),qJ=n(bBe,"A",{href:!0});var C5t=s(qJ);BLr=r(C5t,"FlaxRobertaForCausalLM"),C5t.forEach(t),ILr=r(bBe," (RoBERTa model)"),bBe.forEach(t),qLr=i(Xe),HE=n(Xe,"LI",{});var vBe=s(HE);F8e=n(vBe,"STRONG",{});var w5t=s(F8e);NLr=r(w5t,"xglm"),w5t.forEach(t),jLr=r(vBe," \u2014 "),NJ=n(vBe,"A",{href:!0});var A5t=s(NJ);DLr=r(A5t,"FlaxXGLMForCausalLM"),A5t.forEach(t),GLr=r(vBe," (XGLM model)"),vBe.forEach(t),Xe.forEach(t),OLr=i(Vl),T(UE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),FNe=i(f),Pc=n(f,"H2",{class:!0});var yDe=s(Pc);JE=n(yDe,"A",{id:!0,class:!0,href:!0});var y5t=s(JE);T8e=n(y5t,"SPAN",{});var L5t=s(T8e);T(bx.$$.fragment,L5t),L5t.forEach(t),y5t.forEach(t),VLr=i(yDe),M8e=n(yDe,"SPAN",{});var x5t=s(M8e);XLr=r(x5t,"FlaxAutoModelForPreTraining"),x5t.forEach(t),yDe.forEach(t),TNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(vx.$$.fragment,Xl),zLr=i(Xl),Bc=n(Xl,"P",{});var aee=s(Bc);WLr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jJ=n(aee,"A",{href:!0});var $5t=s(jJ);QLr=r($5t,"from_pretrained()"),$5t.forEach(t),HLr=r(aee," class method or the "),DJ=n(aee,"A",{href:!0});var k5t=s(DJ);ULr=r(k5t,"from_config()"),k5t.forEach(t),JLr=r(aee,` class
method.`),aee.forEach(t),YLr=i(Xl),Fx=n(Xl,"P",{});var LDe=s(Fx);KLr=r(LDe,"This class cannot be instantiated directly using "),E8e=n(LDe,"CODE",{});var S5t=s(E8e);ZLr=r(S5t,"__init__()"),S5t.forEach(t),exr=r(LDe," (throws an error)."),LDe.forEach(t),oxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var DA=s(Vt);T(Tx.$$.fragment,DA),rxr=i(DA),C8e=n(DA,"P",{});var R5t=s(C8e);txr=r(R5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R5t.forEach(t),axr=i(DA),Ic=n(DA,"P",{});var nee=s(Ic);nxr=r(nee,`Note:
Loading a model from its configuration file does `),w8e=n(nee,"STRONG",{});var P5t=s(w8e);sxr=r(P5t,"not"),P5t.forEach(t),lxr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(nee,"A",{href:!0});var B5t=s(GJ);ixr=r(B5t,"from_pretrained()"),B5t.forEach(t),dxr=r(nee," to load the model weights."),nee.forEach(t),cxr=i(DA),T(YE.$$.fragment,DA),DA.forEach(t),fxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(Mx.$$.fragment,zl),mxr=i(zl),A8e=n(zl,"P",{});var I5t=s(A8e);gxr=r(I5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),I5t.forEach(t),hxr=i(zl),_n=n(zl,"P",{});var GA=s(_n);pxr=r(GA,"The model class to instantiate is selected based on the "),y8e=n(GA,"CODE",{});var q5t=s(y8e);_xr=r(q5t,"model_type"),q5t.forEach(t),uxr=r(GA,` property of the config object (either
passed as an argument or loaded from `),L8e=n(GA,"CODE",{});var N5t=s(L8e);bxr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),vxr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=n(GA,"CODE",{});var j5t=s(x8e);Fxr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),Txr=r(GA,":"),GA.forEach(t),Mxr=i(zl),Me=n(zl,"UL",{});var we=s(Me);KE=n(we,"LI",{});var FBe=s(KE);$8e=n(FBe,"STRONG",{});var D5t=s($8e);Exr=r(D5t,"albert"),D5t.forEach(t),Cxr=r(FBe," \u2014 "),OJ=n(FBe,"A",{href:!0});var G5t=s(OJ);wxr=r(G5t,"FlaxAlbertForPreTraining"),G5t.forEach(t),Axr=r(FBe," (ALBERT model)"),FBe.forEach(t),yxr=i(we),ZE=n(we,"LI",{});var TBe=s(ZE);k8e=n(TBe,"STRONG",{});var O5t=s(k8e);Lxr=r(O5t,"bart"),O5t.forEach(t),xxr=r(TBe," \u2014 "),VJ=n(TBe,"A",{href:!0});var V5t=s(VJ);$xr=r(V5t,"FlaxBartForConditionalGeneration"),V5t.forEach(t),kxr=r(TBe," (BART model)"),TBe.forEach(t),Sxr=i(we),eC=n(we,"LI",{});var MBe=s(eC);S8e=n(MBe,"STRONG",{});var X5t=s(S8e);Rxr=r(X5t,"bert"),X5t.forEach(t),Pxr=r(MBe," \u2014 "),XJ=n(MBe,"A",{href:!0});var z5t=s(XJ);Bxr=r(z5t,"FlaxBertForPreTraining"),z5t.forEach(t),Ixr=r(MBe," (BERT model)"),MBe.forEach(t),qxr=i(we),oC=n(we,"LI",{});var EBe=s(oC);R8e=n(EBe,"STRONG",{});var W5t=s(R8e);Nxr=r(W5t,"big_bird"),W5t.forEach(t),jxr=r(EBe," \u2014 "),zJ=n(EBe,"A",{href:!0});var Q5t=s(zJ);Dxr=r(Q5t,"FlaxBigBirdForPreTraining"),Q5t.forEach(t),Gxr=r(EBe," (BigBird model)"),EBe.forEach(t),Oxr=i(we),rC=n(we,"LI",{});var CBe=s(rC);P8e=n(CBe,"STRONG",{});var H5t=s(P8e);Vxr=r(H5t,"electra"),H5t.forEach(t),Xxr=r(CBe," \u2014 "),WJ=n(CBe,"A",{href:!0});var U5t=s(WJ);zxr=r(U5t,"FlaxElectraForPreTraining"),U5t.forEach(t),Wxr=r(CBe," (ELECTRA model)"),CBe.forEach(t),Qxr=i(we),tC=n(we,"LI",{});var wBe=s(tC);B8e=n(wBe,"STRONG",{});var J5t=s(B8e);Hxr=r(J5t,"mbart"),J5t.forEach(t),Uxr=r(wBe," \u2014 "),QJ=n(wBe,"A",{href:!0});var Y5t=s(QJ);Jxr=r(Y5t,"FlaxMBartForConditionalGeneration"),Y5t.forEach(t),Yxr=r(wBe," (mBART model)"),wBe.forEach(t),Kxr=i(we),aC=n(we,"LI",{});var ABe=s(aC);I8e=n(ABe,"STRONG",{});var K5t=s(I8e);Zxr=r(K5t,"mt5"),K5t.forEach(t),e9r=r(ABe," \u2014 "),HJ=n(ABe,"A",{href:!0});var Z5t=s(HJ);o9r=r(Z5t,"FlaxMT5ForConditionalGeneration"),Z5t.forEach(t),r9r=r(ABe," (mT5 model)"),ABe.forEach(t),t9r=i(we),nC=n(we,"LI",{});var yBe=s(nC);q8e=n(yBe,"STRONG",{});var ewt=s(q8e);a9r=r(ewt,"roberta"),ewt.forEach(t),n9r=r(yBe," \u2014 "),UJ=n(yBe,"A",{href:!0});var owt=s(UJ);s9r=r(owt,"FlaxRobertaForMaskedLM"),owt.forEach(t),l9r=r(yBe," (RoBERTa model)"),yBe.forEach(t),i9r=i(we),sC=n(we,"LI",{});var LBe=s(sC);N8e=n(LBe,"STRONG",{});var rwt=s(N8e);d9r=r(rwt,"roformer"),rwt.forEach(t),c9r=r(LBe," \u2014 "),JJ=n(LBe,"A",{href:!0});var twt=s(JJ);f9r=r(twt,"FlaxRoFormerForMaskedLM"),twt.forEach(t),m9r=r(LBe," (RoFormer model)"),LBe.forEach(t),g9r=i(we),lC=n(we,"LI",{});var xBe=s(lC);j8e=n(xBe,"STRONG",{});var awt=s(j8e);h9r=r(awt,"t5"),awt.forEach(t),p9r=r(xBe," \u2014 "),YJ=n(xBe,"A",{href:!0});var nwt=s(YJ);_9r=r(nwt,"FlaxT5ForConditionalGeneration"),nwt.forEach(t),u9r=r(xBe," (T5 model)"),xBe.forEach(t),b9r=i(we),iC=n(we,"LI",{});var $Be=s(iC);D8e=n($Be,"STRONG",{});var swt=s(D8e);v9r=r(swt,"wav2vec2"),swt.forEach(t),F9r=r($Be," \u2014 "),KJ=n($Be,"A",{href:!0});var lwt=s(KJ);T9r=r(lwt,"FlaxWav2Vec2ForPreTraining"),lwt.forEach(t),M9r=r($Be," (Wav2Vec2 model)"),$Be.forEach(t),E9r=i(we),dC=n(we,"LI",{});var kBe=s(dC);G8e=n(kBe,"STRONG",{});var iwt=s(G8e);C9r=r(iwt,"xlm-roberta"),iwt.forEach(t),w9r=r(kBe," \u2014 "),ZJ=n(kBe,"A",{href:!0});var dwt=s(ZJ);A9r=r(dwt,"FlaxXLMRobertaForMaskedLM"),dwt.forEach(t),y9r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),we.forEach(t),L9r=i(zl),T(cC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),MNe=i(f),qc=n(f,"H2",{class:!0});var xDe=s(qc);fC=n(xDe,"A",{id:!0,class:!0,href:!0});var cwt=s(fC);O8e=n(cwt,"SPAN",{});var fwt=s(O8e);T(Ex.$$.fragment,fwt),fwt.forEach(t),cwt.forEach(t),x9r=i(xDe),V8e=n(xDe,"SPAN",{});var mwt=s(V8e);$9r=r(mwt,"FlaxAutoModelForMaskedLM"),mwt.forEach(t),xDe.forEach(t),ENe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(Cx.$$.fragment,Wl),k9r=i(Wl),Nc=n(Wl,"P",{});var see=s(Nc);S9r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=n(see,"A",{href:!0});var gwt=s(eY);R9r=r(gwt,"from_pretrained()"),gwt.forEach(t),P9r=r(see," class method or the "),oY=n(see,"A",{href:!0});var hwt=s(oY);B9r=r(hwt,"from_config()"),hwt.forEach(t),I9r=r(see,` class
method.`),see.forEach(t),q9r=i(Wl),wx=n(Wl,"P",{});var $De=s(wx);N9r=r($De,"This class cannot be instantiated directly using "),X8e=n($De,"CODE",{});var pwt=s(X8e);j9r=r(pwt,"__init__()"),pwt.forEach(t),D9r=r($De," (throws an error)."),$De.forEach(t),G9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var OA=s(Xt);T(Ax.$$.fragment,OA),O9r=i(OA),z8e=n(OA,"P",{});var _wt=s(z8e);V9r=r(_wt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_wt.forEach(t),X9r=i(OA),jc=n(OA,"P",{});var lee=s(jc);z9r=r(lee,`Note:
Loading a model from its configuration file does `),W8e=n(lee,"STRONG",{});var uwt=s(W8e);W9r=r(uwt,"not"),uwt.forEach(t),Q9r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(lee,"A",{href:!0});var bwt=s(rY);H9r=r(bwt,"from_pretrained()"),bwt.forEach(t),U9r=r(lee," to load the model weights."),lee.forEach(t),J9r=i(OA),T(mC.$$.fragment,OA),OA.forEach(t),Y9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(yx.$$.fragment,Ql),K9r=i(Ql),Q8e=n(Ql,"P",{});var vwt=s(Q8e);Z9r=r(vwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vwt.forEach(t),e$r=i(Ql),un=n(Ql,"P",{});var VA=s(un);o$r=r(VA,"The model class to instantiate is selected based on the "),H8e=n(VA,"CODE",{});var Fwt=s(H8e);r$r=r(Fwt,"model_type"),Fwt.forEach(t),t$r=r(VA,` property of the config object (either
passed as an argument or loaded from `),U8e=n(VA,"CODE",{});var Twt=s(U8e);a$r=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),n$r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=n(VA,"CODE",{});var Mwt=s(J8e);s$r=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),l$r=r(VA,":"),VA.forEach(t),i$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);gC=n(Ie,"LI",{});var SBe=s(gC);Y8e=n(SBe,"STRONG",{});var Ewt=s(Y8e);d$r=r(Ewt,"albert"),Ewt.forEach(t),c$r=r(SBe," \u2014 "),tY=n(SBe,"A",{href:!0});var Cwt=s(tY);f$r=r(Cwt,"FlaxAlbertForMaskedLM"),Cwt.forEach(t),m$r=r(SBe," (ALBERT model)"),SBe.forEach(t),g$r=i(Ie),hC=n(Ie,"LI",{});var RBe=s(hC);K8e=n(RBe,"STRONG",{});var wwt=s(K8e);h$r=r(wwt,"bart"),wwt.forEach(t),p$r=r(RBe," \u2014 "),aY=n(RBe,"A",{href:!0});var Awt=s(aY);_$r=r(Awt,"FlaxBartForConditionalGeneration"),Awt.forEach(t),u$r=r(RBe," (BART model)"),RBe.forEach(t),b$r=i(Ie),pC=n(Ie,"LI",{});var PBe=s(pC);Z8e=n(PBe,"STRONG",{});var ywt=s(Z8e);v$r=r(ywt,"bert"),ywt.forEach(t),F$r=r(PBe," \u2014 "),nY=n(PBe,"A",{href:!0});var Lwt=s(nY);T$r=r(Lwt,"FlaxBertForMaskedLM"),Lwt.forEach(t),M$r=r(PBe," (BERT model)"),PBe.forEach(t),E$r=i(Ie),_C=n(Ie,"LI",{});var BBe=s(_C);e7e=n(BBe,"STRONG",{});var xwt=s(e7e);C$r=r(xwt,"big_bird"),xwt.forEach(t),w$r=r(BBe," \u2014 "),sY=n(BBe,"A",{href:!0});var $wt=s(sY);A$r=r($wt,"FlaxBigBirdForMaskedLM"),$wt.forEach(t),y$r=r(BBe," (BigBird model)"),BBe.forEach(t),L$r=i(Ie),uC=n(Ie,"LI",{});var IBe=s(uC);o7e=n(IBe,"STRONG",{});var kwt=s(o7e);x$r=r(kwt,"distilbert"),kwt.forEach(t),$$r=r(IBe," \u2014 "),lY=n(IBe,"A",{href:!0});var Swt=s(lY);k$r=r(Swt,"FlaxDistilBertForMaskedLM"),Swt.forEach(t),S$r=r(IBe," (DistilBERT model)"),IBe.forEach(t),R$r=i(Ie),bC=n(Ie,"LI",{});var qBe=s(bC);r7e=n(qBe,"STRONG",{});var Rwt=s(r7e);P$r=r(Rwt,"electra"),Rwt.forEach(t),B$r=r(qBe," \u2014 "),iY=n(qBe,"A",{href:!0});var Pwt=s(iY);I$r=r(Pwt,"FlaxElectraForMaskedLM"),Pwt.forEach(t),q$r=r(qBe," (ELECTRA model)"),qBe.forEach(t),N$r=i(Ie),vC=n(Ie,"LI",{});var NBe=s(vC);t7e=n(NBe,"STRONG",{});var Bwt=s(t7e);j$r=r(Bwt,"mbart"),Bwt.forEach(t),D$r=r(NBe," \u2014 "),dY=n(NBe,"A",{href:!0});var Iwt=s(dY);G$r=r(Iwt,"FlaxMBartForConditionalGeneration"),Iwt.forEach(t),O$r=r(NBe," (mBART model)"),NBe.forEach(t),V$r=i(Ie),FC=n(Ie,"LI",{});var jBe=s(FC);a7e=n(jBe,"STRONG",{});var qwt=s(a7e);X$r=r(qwt,"roberta"),qwt.forEach(t),z$r=r(jBe," \u2014 "),cY=n(jBe,"A",{href:!0});var Nwt=s(cY);W$r=r(Nwt,"FlaxRobertaForMaskedLM"),Nwt.forEach(t),Q$r=r(jBe," (RoBERTa model)"),jBe.forEach(t),H$r=i(Ie),TC=n(Ie,"LI",{});var DBe=s(TC);n7e=n(DBe,"STRONG",{});var jwt=s(n7e);U$r=r(jwt,"roformer"),jwt.forEach(t),J$r=r(DBe," \u2014 "),fY=n(DBe,"A",{href:!0});var Dwt=s(fY);Y$r=r(Dwt,"FlaxRoFormerForMaskedLM"),Dwt.forEach(t),K$r=r(DBe," (RoFormer model)"),DBe.forEach(t),Z$r=i(Ie),MC=n(Ie,"LI",{});var GBe=s(MC);s7e=n(GBe,"STRONG",{});var Gwt=s(s7e);ekr=r(Gwt,"xlm-roberta"),Gwt.forEach(t),okr=r(GBe," \u2014 "),mY=n(GBe,"A",{href:!0});var Owt=s(mY);rkr=r(Owt,"FlaxXLMRobertaForMaskedLM"),Owt.forEach(t),tkr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),Ie.forEach(t),akr=i(Ql),T(EC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),CNe=i(f),Dc=n(f,"H2",{class:!0});var kDe=s(Dc);CC=n(kDe,"A",{id:!0,class:!0,href:!0});var Vwt=s(CC);l7e=n(Vwt,"SPAN",{});var Xwt=s(l7e);T(Lx.$$.fragment,Xwt),Xwt.forEach(t),Vwt.forEach(t),nkr=i(kDe),i7e=n(kDe,"SPAN",{});var zwt=s(i7e);skr=r(zwt,"FlaxAutoModelForSeq2SeqLM"),zwt.forEach(t),kDe.forEach(t),wNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(xx.$$.fragment,Hl),lkr=i(Hl),Gc=n(Hl,"P",{});var iee=s(Gc);ikr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gY=n(iee,"A",{href:!0});var Wwt=s(gY);dkr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),ckr=r(iee," class method or the "),hY=n(iee,"A",{href:!0});var Qwt=s(hY);fkr=r(Qwt,"from_config()"),Qwt.forEach(t),mkr=r(iee,` class
method.`),iee.forEach(t),gkr=i(Hl),$x=n(Hl,"P",{});var SDe=s($x);hkr=r(SDe,"This class cannot be instantiated directly using "),d7e=n(SDe,"CODE",{});var Hwt=s(d7e);pkr=r(Hwt,"__init__()"),Hwt.forEach(t),_kr=r(SDe," (throws an error)."),SDe.forEach(t),ukr=i(Hl),zt=n(Hl,"DIV",{class:!0});var XA=s(zt);T(kx.$$.fragment,XA),bkr=i(XA),c7e=n(XA,"P",{});var Uwt=s(c7e);vkr=r(Uwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uwt.forEach(t),Fkr=i(XA),Oc=n(XA,"P",{});var dee=s(Oc);Tkr=r(dee,`Note:
Loading a model from its configuration file does `),f7e=n(dee,"STRONG",{});var Jwt=s(f7e);Mkr=r(Jwt,"not"),Jwt.forEach(t),Ekr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(dee,"A",{href:!0});var Ywt=s(pY);Ckr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),wkr=r(dee," to load the model weights."),dee.forEach(t),Akr=i(XA),T(wC.$$.fragment,XA),XA.forEach(t),ykr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(Sx.$$.fragment,Ul),Lkr=i(Ul),m7e=n(Ul,"P",{});var Kwt=s(m7e);xkr=r(Kwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kwt.forEach(t),$kr=i(Ul),bn=n(Ul,"P",{});var zA=s(bn);kkr=r(zA,"The model class to instantiate is selected based on the "),g7e=n(zA,"CODE",{});var Zwt=s(g7e);Skr=r(Zwt,"model_type"),Zwt.forEach(t),Rkr=r(zA,` property of the config object (either
passed as an argument or loaded from `),h7e=n(zA,"CODE",{});var eAt=s(h7e);Pkr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),Bkr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(zA,"CODE",{});var oAt=s(p7e);Ikr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),qkr=r(zA,":"),zA.forEach(t),Nkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);AC=n(ze,"LI",{});var OBe=s(AC);_7e=n(OBe,"STRONG",{});var rAt=s(_7e);jkr=r(rAt,"bart"),rAt.forEach(t),Dkr=r(OBe," \u2014 "),_Y=n(OBe,"A",{href:!0});var tAt=s(_Y);Gkr=r(tAt,"FlaxBartForConditionalGeneration"),tAt.forEach(t),Okr=r(OBe," (BART model)"),OBe.forEach(t),Vkr=i(ze),yC=n(ze,"LI",{});var VBe=s(yC);u7e=n(VBe,"STRONG",{});var aAt=s(u7e);Xkr=r(aAt,"blenderbot"),aAt.forEach(t),zkr=r(VBe," \u2014 "),uY=n(VBe,"A",{href:!0});var nAt=s(uY);Wkr=r(nAt,"FlaxBlenderbotForConditionalGeneration"),nAt.forEach(t),Qkr=r(VBe," (Blenderbot model)"),VBe.forEach(t),Hkr=i(ze),LC=n(ze,"LI",{});var XBe=s(LC);b7e=n(XBe,"STRONG",{});var sAt=s(b7e);Ukr=r(sAt,"blenderbot-small"),sAt.forEach(t),Jkr=r(XBe," \u2014 "),bY=n(XBe,"A",{href:!0});var lAt=s(bY);Ykr=r(lAt,"FlaxBlenderbotSmallForConditionalGeneration"),lAt.forEach(t),Kkr=r(XBe," (BlenderbotSmall model)"),XBe.forEach(t),Zkr=i(ze),xC=n(ze,"LI",{});var zBe=s(xC);v7e=n(zBe,"STRONG",{});var iAt=s(v7e);eSr=r(iAt,"encoder-decoder"),iAt.forEach(t),oSr=r(zBe," \u2014 "),vY=n(zBe,"A",{href:!0});var dAt=s(vY);rSr=r(dAt,"FlaxEncoderDecoderModel"),dAt.forEach(t),tSr=r(zBe," (Encoder decoder model)"),zBe.forEach(t),aSr=i(ze),$C=n(ze,"LI",{});var WBe=s($C);F7e=n(WBe,"STRONG",{});var cAt=s(F7e);nSr=r(cAt,"marian"),cAt.forEach(t),sSr=r(WBe," \u2014 "),FY=n(WBe,"A",{href:!0});var fAt=s(FY);lSr=r(fAt,"FlaxMarianMTModel"),fAt.forEach(t),iSr=r(WBe," (Marian model)"),WBe.forEach(t),dSr=i(ze),kC=n(ze,"LI",{});var QBe=s(kC);T7e=n(QBe,"STRONG",{});var mAt=s(T7e);cSr=r(mAt,"mbart"),mAt.forEach(t),fSr=r(QBe," \u2014 "),TY=n(QBe,"A",{href:!0});var gAt=s(TY);mSr=r(gAt,"FlaxMBartForConditionalGeneration"),gAt.forEach(t),gSr=r(QBe," (mBART model)"),QBe.forEach(t),hSr=i(ze),SC=n(ze,"LI",{});var HBe=s(SC);M7e=n(HBe,"STRONG",{});var hAt=s(M7e);pSr=r(hAt,"mt5"),hAt.forEach(t),_Sr=r(HBe," \u2014 "),MY=n(HBe,"A",{href:!0});var pAt=s(MY);uSr=r(pAt,"FlaxMT5ForConditionalGeneration"),pAt.forEach(t),bSr=r(HBe," (mT5 model)"),HBe.forEach(t),vSr=i(ze),RC=n(ze,"LI",{});var UBe=s(RC);E7e=n(UBe,"STRONG",{});var _At=s(E7e);FSr=r(_At,"pegasus"),_At.forEach(t),TSr=r(UBe," \u2014 "),EY=n(UBe,"A",{href:!0});var uAt=s(EY);MSr=r(uAt,"FlaxPegasusForConditionalGeneration"),uAt.forEach(t),ESr=r(UBe," (Pegasus model)"),UBe.forEach(t),CSr=i(ze),PC=n(ze,"LI",{});var JBe=s(PC);C7e=n(JBe,"STRONG",{});var bAt=s(C7e);wSr=r(bAt,"t5"),bAt.forEach(t),ASr=r(JBe," \u2014 "),CY=n(JBe,"A",{href:!0});var vAt=s(CY);ySr=r(vAt,"FlaxT5ForConditionalGeneration"),vAt.forEach(t),LSr=r(JBe," (T5 model)"),JBe.forEach(t),ze.forEach(t),xSr=i(Ul),T(BC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ANe=i(f),Vc=n(f,"H2",{class:!0});var RDe=s(Vc);IC=n(RDe,"A",{id:!0,class:!0,href:!0});var FAt=s(IC);w7e=n(FAt,"SPAN",{});var TAt=s(w7e);T(Rx.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),$Sr=i(RDe),A7e=n(RDe,"SPAN",{});var MAt=s(A7e);kSr=r(MAt,"FlaxAutoModelForSequenceClassification"),MAt.forEach(t),RDe.forEach(t),yNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Px.$$.fragment,Jl),SSr=i(Jl),Xc=n(Jl,"P",{});var cee=s(Xc);RSr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wY=n(cee,"A",{href:!0});var EAt=s(wY);PSr=r(EAt,"from_pretrained()"),EAt.forEach(t),BSr=r(cee," class method or the "),AY=n(cee,"A",{href:!0});var CAt=s(AY);ISr=r(CAt,"from_config()"),CAt.forEach(t),qSr=r(cee,` class
method.`),cee.forEach(t),NSr=i(Jl),Bx=n(Jl,"P",{});var PDe=s(Bx);jSr=r(PDe,"This class cannot be instantiated directly using "),y7e=n(PDe,"CODE",{});var wAt=s(y7e);DSr=r(wAt,"__init__()"),wAt.forEach(t),GSr=r(PDe," (throws an error)."),PDe.forEach(t),OSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var WA=s(Wt);T(Ix.$$.fragment,WA),VSr=i(WA),L7e=n(WA,"P",{});var AAt=s(L7e);XSr=r(AAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AAt.forEach(t),zSr=i(WA),zc=n(WA,"P",{});var fee=s(zc);WSr=r(fee,`Note:
Loading a model from its configuration file does `),x7e=n(fee,"STRONG",{});var yAt=s(x7e);QSr=r(yAt,"not"),yAt.forEach(t),HSr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(fee,"A",{href:!0});var LAt=s(yY);USr=r(LAt,"from_pretrained()"),LAt.forEach(t),JSr=r(fee," to load the model weights."),fee.forEach(t),YSr=i(WA),T(qC.$$.fragment,WA),WA.forEach(t),KSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(qx.$$.fragment,Yl),ZSr=i(Yl),$7e=n(Yl,"P",{});var xAt=s($7e);eRr=r(xAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xAt.forEach(t),oRr=i(Yl),vn=n(Yl,"P",{});var QA=s(vn);rRr=r(QA,"The model class to instantiate is selected based on the "),k7e=n(QA,"CODE",{});var $At=s(k7e);tRr=r($At,"model_type"),$At.forEach(t),aRr=r(QA,` property of the config object (either
passed as an argument or loaded from `),S7e=n(QA,"CODE",{});var kAt=s(S7e);nRr=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),sRr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(QA,"CODE",{});var SAt=s(R7e);lRr=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),iRr=r(QA,":"),QA.forEach(t),dRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);NC=n(qe,"LI",{});var YBe=s(NC);P7e=n(YBe,"STRONG",{});var RAt=s(P7e);cRr=r(RAt,"albert"),RAt.forEach(t),fRr=r(YBe," \u2014 "),LY=n(YBe,"A",{href:!0});var PAt=s(LY);mRr=r(PAt,"FlaxAlbertForSequenceClassification"),PAt.forEach(t),gRr=r(YBe," (ALBERT model)"),YBe.forEach(t),hRr=i(qe),jC=n(qe,"LI",{});var KBe=s(jC);B7e=n(KBe,"STRONG",{});var BAt=s(B7e);pRr=r(BAt,"bart"),BAt.forEach(t),_Rr=r(KBe," \u2014 "),xY=n(KBe,"A",{href:!0});var IAt=s(xY);uRr=r(IAt,"FlaxBartForSequenceClassification"),IAt.forEach(t),bRr=r(KBe," (BART model)"),KBe.forEach(t),vRr=i(qe),DC=n(qe,"LI",{});var ZBe=s(DC);I7e=n(ZBe,"STRONG",{});var qAt=s(I7e);FRr=r(qAt,"bert"),qAt.forEach(t),TRr=r(ZBe," \u2014 "),$Y=n(ZBe,"A",{href:!0});var NAt=s($Y);MRr=r(NAt,"FlaxBertForSequenceClassification"),NAt.forEach(t),ERr=r(ZBe," (BERT model)"),ZBe.forEach(t),CRr=i(qe),GC=n(qe,"LI",{});var eIe=s(GC);q7e=n(eIe,"STRONG",{});var jAt=s(q7e);wRr=r(jAt,"big_bird"),jAt.forEach(t),ARr=r(eIe," \u2014 "),kY=n(eIe,"A",{href:!0});var DAt=s(kY);yRr=r(DAt,"FlaxBigBirdForSequenceClassification"),DAt.forEach(t),LRr=r(eIe," (BigBird model)"),eIe.forEach(t),xRr=i(qe),OC=n(qe,"LI",{});var oIe=s(OC);N7e=n(oIe,"STRONG",{});var GAt=s(N7e);$Rr=r(GAt,"distilbert"),GAt.forEach(t),kRr=r(oIe," \u2014 "),SY=n(oIe,"A",{href:!0});var OAt=s(SY);SRr=r(OAt,"FlaxDistilBertForSequenceClassification"),OAt.forEach(t),RRr=r(oIe," (DistilBERT model)"),oIe.forEach(t),PRr=i(qe),VC=n(qe,"LI",{});var rIe=s(VC);j7e=n(rIe,"STRONG",{});var VAt=s(j7e);BRr=r(VAt,"electra"),VAt.forEach(t),IRr=r(rIe," \u2014 "),RY=n(rIe,"A",{href:!0});var XAt=s(RY);qRr=r(XAt,"FlaxElectraForSequenceClassification"),XAt.forEach(t),NRr=r(rIe," (ELECTRA model)"),rIe.forEach(t),jRr=i(qe),XC=n(qe,"LI",{});var tIe=s(XC);D7e=n(tIe,"STRONG",{});var zAt=s(D7e);DRr=r(zAt,"mbart"),zAt.forEach(t),GRr=r(tIe," \u2014 "),PY=n(tIe,"A",{href:!0});var WAt=s(PY);ORr=r(WAt,"FlaxMBartForSequenceClassification"),WAt.forEach(t),VRr=r(tIe," (mBART model)"),tIe.forEach(t),XRr=i(qe),zC=n(qe,"LI",{});var aIe=s(zC);G7e=n(aIe,"STRONG",{});var QAt=s(G7e);zRr=r(QAt,"roberta"),QAt.forEach(t),WRr=r(aIe," \u2014 "),BY=n(aIe,"A",{href:!0});var HAt=s(BY);QRr=r(HAt,"FlaxRobertaForSequenceClassification"),HAt.forEach(t),HRr=r(aIe," (RoBERTa model)"),aIe.forEach(t),URr=i(qe),WC=n(qe,"LI",{});var nIe=s(WC);O7e=n(nIe,"STRONG",{});var UAt=s(O7e);JRr=r(UAt,"roformer"),UAt.forEach(t),YRr=r(nIe," \u2014 "),IY=n(nIe,"A",{href:!0});var JAt=s(IY);KRr=r(JAt,"FlaxRoFormerForSequenceClassification"),JAt.forEach(t),ZRr=r(nIe," (RoFormer model)"),nIe.forEach(t),ePr=i(qe),QC=n(qe,"LI",{});var sIe=s(QC);V7e=n(sIe,"STRONG",{});var YAt=s(V7e);oPr=r(YAt,"xlm-roberta"),YAt.forEach(t),rPr=r(sIe," \u2014 "),qY=n(sIe,"A",{href:!0});var KAt=s(qY);tPr=r(KAt,"FlaxXLMRobertaForSequenceClassification"),KAt.forEach(t),aPr=r(sIe," (XLM-RoBERTa model)"),sIe.forEach(t),qe.forEach(t),nPr=i(Yl),T(HC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),LNe=i(f),Wc=n(f,"H2",{class:!0});var BDe=s(Wc);UC=n(BDe,"A",{id:!0,class:!0,href:!0});var ZAt=s(UC);X7e=n(ZAt,"SPAN",{});var e0t=s(X7e);T(Nx.$$.fragment,e0t),e0t.forEach(t),ZAt.forEach(t),sPr=i(BDe),z7e=n(BDe,"SPAN",{});var o0t=s(z7e);lPr=r(o0t,"FlaxAutoModelForQuestionAnswering"),o0t.forEach(t),BDe.forEach(t),xNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(jx.$$.fragment,Kl),iPr=i(Kl),Qc=n(Kl,"P",{});var mee=s(Qc);dPr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NY=n(mee,"A",{href:!0});var r0t=s(NY);cPr=r(r0t,"from_pretrained()"),r0t.forEach(t),fPr=r(mee," class method or the "),jY=n(mee,"A",{href:!0});var t0t=s(jY);mPr=r(t0t,"from_config()"),t0t.forEach(t),gPr=r(mee,` class
method.`),mee.forEach(t),hPr=i(Kl),Dx=n(Kl,"P",{});var IDe=s(Dx);pPr=r(IDe,"This class cannot be instantiated directly using "),W7e=n(IDe,"CODE",{});var a0t=s(W7e);_Pr=r(a0t,"__init__()"),a0t.forEach(t),uPr=r(IDe," (throws an error)."),IDe.forEach(t),bPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var HA=s(Qt);T(Gx.$$.fragment,HA),vPr=i(HA),Q7e=n(HA,"P",{});var n0t=s(Q7e);FPr=r(n0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),n0t.forEach(t),TPr=i(HA),Hc=n(HA,"P",{});var gee=s(Hc);MPr=r(gee,`Note:
Loading a model from its configuration file does `),H7e=n(gee,"STRONG",{});var s0t=s(H7e);EPr=r(s0t,"not"),s0t.forEach(t),CPr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(gee,"A",{href:!0});var l0t=s(DY);wPr=r(l0t,"from_pretrained()"),l0t.forEach(t),APr=r(gee," to load the model weights."),gee.forEach(t),yPr=i(HA),T(JC.$$.fragment,HA),HA.forEach(t),LPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Ox.$$.fragment,Zl),xPr=i(Zl),U7e=n(Zl,"P",{});var i0t=s(U7e);$Pr=r(i0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i0t.forEach(t),kPr=i(Zl),Fn=n(Zl,"P",{});var UA=s(Fn);SPr=r(UA,"The model class to instantiate is selected based on the "),J7e=n(UA,"CODE",{});var d0t=s(J7e);RPr=r(d0t,"model_type"),d0t.forEach(t),PPr=r(UA,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(UA,"CODE",{});var c0t=s(Y7e);BPr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),IPr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(UA,"CODE",{});var f0t=s(K7e);qPr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),NPr=r(UA,":"),UA.forEach(t),jPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);YC=n(Ne,"LI",{});var lIe=s(YC);Z7e=n(lIe,"STRONG",{});var m0t=s(Z7e);DPr=r(m0t,"albert"),m0t.forEach(t),GPr=r(lIe," \u2014 "),GY=n(lIe,"A",{href:!0});var g0t=s(GY);OPr=r(g0t,"FlaxAlbertForQuestionAnswering"),g0t.forEach(t),VPr=r(lIe," (ALBERT model)"),lIe.forEach(t),XPr=i(Ne),KC=n(Ne,"LI",{});var iIe=s(KC);eMe=n(iIe,"STRONG",{});var h0t=s(eMe);zPr=r(h0t,"bart"),h0t.forEach(t),WPr=r(iIe," \u2014 "),OY=n(iIe,"A",{href:!0});var p0t=s(OY);QPr=r(p0t,"FlaxBartForQuestionAnswering"),p0t.forEach(t),HPr=r(iIe," (BART model)"),iIe.forEach(t),UPr=i(Ne),ZC=n(Ne,"LI",{});var dIe=s(ZC);oMe=n(dIe,"STRONG",{});var _0t=s(oMe);JPr=r(_0t,"bert"),_0t.forEach(t),YPr=r(dIe," \u2014 "),VY=n(dIe,"A",{href:!0});var u0t=s(VY);KPr=r(u0t,"FlaxBertForQuestionAnswering"),u0t.forEach(t),ZPr=r(dIe," (BERT model)"),dIe.forEach(t),eBr=i(Ne),e5=n(Ne,"LI",{});var cIe=s(e5);rMe=n(cIe,"STRONG",{});var b0t=s(rMe);oBr=r(b0t,"big_bird"),b0t.forEach(t),rBr=r(cIe," \u2014 "),XY=n(cIe,"A",{href:!0});var v0t=s(XY);tBr=r(v0t,"FlaxBigBirdForQuestionAnswering"),v0t.forEach(t),aBr=r(cIe," (BigBird model)"),cIe.forEach(t),nBr=i(Ne),o5=n(Ne,"LI",{});var fIe=s(o5);tMe=n(fIe,"STRONG",{});var F0t=s(tMe);sBr=r(F0t,"distilbert"),F0t.forEach(t),lBr=r(fIe," \u2014 "),zY=n(fIe,"A",{href:!0});var T0t=s(zY);iBr=r(T0t,"FlaxDistilBertForQuestionAnswering"),T0t.forEach(t),dBr=r(fIe," (DistilBERT model)"),fIe.forEach(t),cBr=i(Ne),r5=n(Ne,"LI",{});var mIe=s(r5);aMe=n(mIe,"STRONG",{});var M0t=s(aMe);fBr=r(M0t,"electra"),M0t.forEach(t),mBr=r(mIe," \u2014 "),WY=n(mIe,"A",{href:!0});var E0t=s(WY);gBr=r(E0t,"FlaxElectraForQuestionAnswering"),E0t.forEach(t),hBr=r(mIe," (ELECTRA model)"),mIe.forEach(t),pBr=i(Ne),t5=n(Ne,"LI",{});var gIe=s(t5);nMe=n(gIe,"STRONG",{});var C0t=s(nMe);_Br=r(C0t,"mbart"),C0t.forEach(t),uBr=r(gIe," \u2014 "),QY=n(gIe,"A",{href:!0});var w0t=s(QY);bBr=r(w0t,"FlaxMBartForQuestionAnswering"),w0t.forEach(t),vBr=r(gIe," (mBART model)"),gIe.forEach(t),FBr=i(Ne),a5=n(Ne,"LI",{});var hIe=s(a5);sMe=n(hIe,"STRONG",{});var A0t=s(sMe);TBr=r(A0t,"roberta"),A0t.forEach(t),MBr=r(hIe," \u2014 "),HY=n(hIe,"A",{href:!0});var y0t=s(HY);EBr=r(y0t,"FlaxRobertaForQuestionAnswering"),y0t.forEach(t),CBr=r(hIe," (RoBERTa model)"),hIe.forEach(t),wBr=i(Ne),n5=n(Ne,"LI",{});var pIe=s(n5);lMe=n(pIe,"STRONG",{});var L0t=s(lMe);ABr=r(L0t,"roformer"),L0t.forEach(t),yBr=r(pIe," \u2014 "),UY=n(pIe,"A",{href:!0});var x0t=s(UY);LBr=r(x0t,"FlaxRoFormerForQuestionAnswering"),x0t.forEach(t),xBr=r(pIe," (RoFormer model)"),pIe.forEach(t),$Br=i(Ne),s5=n(Ne,"LI",{});var _Ie=s(s5);iMe=n(_Ie,"STRONG",{});var $0t=s(iMe);kBr=r($0t,"xlm-roberta"),$0t.forEach(t),SBr=r(_Ie," \u2014 "),JY=n(_Ie,"A",{href:!0});var k0t=s(JY);RBr=r(k0t,"FlaxXLMRobertaForQuestionAnswering"),k0t.forEach(t),PBr=r(_Ie," (XLM-RoBERTa model)"),_Ie.forEach(t),Ne.forEach(t),BBr=i(Zl),T(l5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),$Ne=i(f),Uc=n(f,"H2",{class:!0});var qDe=s(Uc);i5=n(qDe,"A",{id:!0,class:!0,href:!0});var S0t=s(i5);dMe=n(S0t,"SPAN",{});var R0t=s(dMe);T(Vx.$$.fragment,R0t),R0t.forEach(t),S0t.forEach(t),IBr=i(qDe),cMe=n(qDe,"SPAN",{});var P0t=s(cMe);qBr=r(P0t,"FlaxAutoModelForTokenClassification"),P0t.forEach(t),qDe.forEach(t),kNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(Xx.$$.fragment,ei),NBr=i(ei),Jc=n(ei,"P",{});var hee=s(Jc);jBr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YY=n(hee,"A",{href:!0});var B0t=s(YY);DBr=r(B0t,"from_pretrained()"),B0t.forEach(t),GBr=r(hee," class method or the "),KY=n(hee,"A",{href:!0});var I0t=s(KY);OBr=r(I0t,"from_config()"),I0t.forEach(t),VBr=r(hee,` class
method.`),hee.forEach(t),XBr=i(ei),zx=n(ei,"P",{});var NDe=s(zx);zBr=r(NDe,"This class cannot be instantiated directly using "),fMe=n(NDe,"CODE",{});var q0t=s(fMe);WBr=r(q0t,"__init__()"),q0t.forEach(t),QBr=r(NDe," (throws an error)."),NDe.forEach(t),HBr=i(ei),Ht=n(ei,"DIV",{class:!0});var JA=s(Ht);T(Wx.$$.fragment,JA),UBr=i(JA),mMe=n(JA,"P",{});var N0t=s(mMe);JBr=r(N0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N0t.forEach(t),YBr=i(JA),Yc=n(JA,"P",{});var pee=s(Yc);KBr=r(pee,`Note:
Loading a model from its configuration file does `),gMe=n(pee,"STRONG",{});var j0t=s(gMe);ZBr=r(j0t,"not"),j0t.forEach(t),eIr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(pee,"A",{href:!0});var D0t=s(ZY);oIr=r(D0t,"from_pretrained()"),D0t.forEach(t),rIr=r(pee," to load the model weights."),pee.forEach(t),tIr=i(JA),T(d5.$$.fragment,JA),JA.forEach(t),aIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Qx.$$.fragment,oi),nIr=i(oi),hMe=n(oi,"P",{});var G0t=s(hMe);sIr=r(G0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G0t.forEach(t),lIr=i(oi),Tn=n(oi,"P",{});var YA=s(Tn);iIr=r(YA,"The model class to instantiate is selected based on the "),pMe=n(YA,"CODE",{});var O0t=s(pMe);dIr=r(O0t,"model_type"),O0t.forEach(t),cIr=r(YA,` property of the config object (either
passed as an argument or loaded from `),_Me=n(YA,"CODE",{});var V0t=s(_Me);fIr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),mIr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(YA,"CODE",{});var X0t=s(uMe);gIr=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),hIr=r(YA,":"),YA.forEach(t),pIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);c5=n(Fo,"LI",{});var uIe=s(c5);bMe=n(uIe,"STRONG",{});var z0t=s(bMe);_Ir=r(z0t,"albert"),z0t.forEach(t),uIr=r(uIe," \u2014 "),eK=n(uIe,"A",{href:!0});var W0t=s(eK);bIr=r(W0t,"FlaxAlbertForTokenClassification"),W0t.forEach(t),vIr=r(uIe," (ALBERT model)"),uIe.forEach(t),FIr=i(Fo),f5=n(Fo,"LI",{});var bIe=s(f5);vMe=n(bIe,"STRONG",{});var Q0t=s(vMe);TIr=r(Q0t,"bert"),Q0t.forEach(t),MIr=r(bIe," \u2014 "),oK=n(bIe,"A",{href:!0});var H0t=s(oK);EIr=r(H0t,"FlaxBertForTokenClassification"),H0t.forEach(t),CIr=r(bIe," (BERT model)"),bIe.forEach(t),wIr=i(Fo),m5=n(Fo,"LI",{});var vIe=s(m5);FMe=n(vIe,"STRONG",{});var U0t=s(FMe);AIr=r(U0t,"big_bird"),U0t.forEach(t),yIr=r(vIe," \u2014 "),rK=n(vIe,"A",{href:!0});var J0t=s(rK);LIr=r(J0t,"FlaxBigBirdForTokenClassification"),J0t.forEach(t),xIr=r(vIe," (BigBird model)"),vIe.forEach(t),$Ir=i(Fo),g5=n(Fo,"LI",{});var FIe=s(g5);TMe=n(FIe,"STRONG",{});var Y0t=s(TMe);kIr=r(Y0t,"distilbert"),Y0t.forEach(t),SIr=r(FIe," \u2014 "),tK=n(FIe,"A",{href:!0});var K0t=s(tK);RIr=r(K0t,"FlaxDistilBertForTokenClassification"),K0t.forEach(t),PIr=r(FIe," (DistilBERT model)"),FIe.forEach(t),BIr=i(Fo),h5=n(Fo,"LI",{});var TIe=s(h5);MMe=n(TIe,"STRONG",{});var Z0t=s(MMe);IIr=r(Z0t,"electra"),Z0t.forEach(t),qIr=r(TIe," \u2014 "),aK=n(TIe,"A",{href:!0});var e6t=s(aK);NIr=r(e6t,"FlaxElectraForTokenClassification"),e6t.forEach(t),jIr=r(TIe," (ELECTRA model)"),TIe.forEach(t),DIr=i(Fo),p5=n(Fo,"LI",{});var MIe=s(p5);EMe=n(MIe,"STRONG",{});var o6t=s(EMe);GIr=r(o6t,"roberta"),o6t.forEach(t),OIr=r(MIe," \u2014 "),nK=n(MIe,"A",{href:!0});var r6t=s(nK);VIr=r(r6t,"FlaxRobertaForTokenClassification"),r6t.forEach(t),XIr=r(MIe," (RoBERTa model)"),MIe.forEach(t),zIr=i(Fo),_5=n(Fo,"LI",{});var EIe=s(_5);CMe=n(EIe,"STRONG",{});var t6t=s(CMe);WIr=r(t6t,"roformer"),t6t.forEach(t),QIr=r(EIe," \u2014 "),sK=n(EIe,"A",{href:!0});var a6t=s(sK);HIr=r(a6t,"FlaxRoFormerForTokenClassification"),a6t.forEach(t),UIr=r(EIe," (RoFormer model)"),EIe.forEach(t),JIr=i(Fo),u5=n(Fo,"LI",{});var CIe=s(u5);wMe=n(CIe,"STRONG",{});var n6t=s(wMe);YIr=r(n6t,"xlm-roberta"),n6t.forEach(t),KIr=r(CIe," \u2014 "),lK=n(CIe,"A",{href:!0});var s6t=s(lK);ZIr=r(s6t,"FlaxXLMRobertaForTokenClassification"),s6t.forEach(t),eqr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),Fo.forEach(t),oqr=i(oi),T(b5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),SNe=i(f),Kc=n(f,"H2",{class:!0});var jDe=s(Kc);v5=n(jDe,"A",{id:!0,class:!0,href:!0});var l6t=s(v5);AMe=n(l6t,"SPAN",{});var i6t=s(AMe);T(Hx.$$.fragment,i6t),i6t.forEach(t),l6t.forEach(t),rqr=i(jDe),yMe=n(jDe,"SPAN",{});var d6t=s(yMe);tqr=r(d6t,"FlaxAutoModelForMultipleChoice"),d6t.forEach(t),jDe.forEach(t),RNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Ux.$$.fragment,ri),aqr=i(ri),Zc=n(ri,"P",{});var _ee=s(Zc);nqr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iK=n(_ee,"A",{href:!0});var c6t=s(iK);sqr=r(c6t,"from_pretrained()"),c6t.forEach(t),lqr=r(_ee," class method or the "),dK=n(_ee,"A",{href:!0});var f6t=s(dK);iqr=r(f6t,"from_config()"),f6t.forEach(t),dqr=r(_ee,` class
method.`),_ee.forEach(t),cqr=i(ri),Jx=n(ri,"P",{});var DDe=s(Jx);fqr=r(DDe,"This class cannot be instantiated directly using "),LMe=n(DDe,"CODE",{});var m6t=s(LMe);mqr=r(m6t,"__init__()"),m6t.forEach(t),gqr=r(DDe," (throws an error)."),DDe.forEach(t),hqr=i(ri),Ut=n(ri,"DIV",{class:!0});var KA=s(Ut);T(Yx.$$.fragment,KA),pqr=i(KA),xMe=n(KA,"P",{});var g6t=s(xMe);_qr=r(g6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g6t.forEach(t),uqr=i(KA),ef=n(KA,"P",{});var uee=s(ef);bqr=r(uee,`Note:
Loading a model from its configuration file does `),$Me=n(uee,"STRONG",{});var h6t=s($Me);vqr=r(h6t,"not"),h6t.forEach(t),Fqr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(uee,"A",{href:!0});var p6t=s(cK);Tqr=r(p6t,"from_pretrained()"),p6t.forEach(t),Mqr=r(uee," to load the model weights."),uee.forEach(t),Eqr=i(KA),T(F5.$$.fragment,KA),KA.forEach(t),Cqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Kx.$$.fragment,ti),wqr=i(ti),kMe=n(ti,"P",{});var _6t=s(kMe);Aqr=r(_6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_6t.forEach(t),yqr=i(ti),Mn=n(ti,"P",{});var ZA=s(Mn);Lqr=r(ZA,"The model class to instantiate is selected based on the "),SMe=n(ZA,"CODE",{});var u6t=s(SMe);xqr=r(u6t,"model_type"),u6t.forEach(t),$qr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(ZA,"CODE",{});var b6t=s(RMe);kqr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),Sqr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(ZA,"CODE",{});var v6t=s(PMe);Rqr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),Pqr=r(ZA,":"),ZA.forEach(t),Bqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);T5=n(To,"LI",{});var wIe=s(T5);BMe=n(wIe,"STRONG",{});var F6t=s(BMe);Iqr=r(F6t,"albert"),F6t.forEach(t),qqr=r(wIe," \u2014 "),fK=n(wIe,"A",{href:!0});var T6t=s(fK);Nqr=r(T6t,"FlaxAlbertForMultipleChoice"),T6t.forEach(t),jqr=r(wIe," (ALBERT model)"),wIe.forEach(t),Dqr=i(To),M5=n(To,"LI",{});var AIe=s(M5);IMe=n(AIe,"STRONG",{});var M6t=s(IMe);Gqr=r(M6t,"bert"),M6t.forEach(t),Oqr=r(AIe," \u2014 "),mK=n(AIe,"A",{href:!0});var E6t=s(mK);Vqr=r(E6t,"FlaxBertForMultipleChoice"),E6t.forEach(t),Xqr=r(AIe," (BERT model)"),AIe.forEach(t),zqr=i(To),E5=n(To,"LI",{});var yIe=s(E5);qMe=n(yIe,"STRONG",{});var C6t=s(qMe);Wqr=r(C6t,"big_bird"),C6t.forEach(t),Qqr=r(yIe," \u2014 "),gK=n(yIe,"A",{href:!0});var w6t=s(gK);Hqr=r(w6t,"FlaxBigBirdForMultipleChoice"),w6t.forEach(t),Uqr=r(yIe," (BigBird model)"),yIe.forEach(t),Jqr=i(To),C5=n(To,"LI",{});var LIe=s(C5);NMe=n(LIe,"STRONG",{});var A6t=s(NMe);Yqr=r(A6t,"distilbert"),A6t.forEach(t),Kqr=r(LIe," \u2014 "),hK=n(LIe,"A",{href:!0});var y6t=s(hK);Zqr=r(y6t,"FlaxDistilBertForMultipleChoice"),y6t.forEach(t),eNr=r(LIe," (DistilBERT model)"),LIe.forEach(t),oNr=i(To),w5=n(To,"LI",{});var xIe=s(w5);jMe=n(xIe,"STRONG",{});var L6t=s(jMe);rNr=r(L6t,"electra"),L6t.forEach(t),tNr=r(xIe," \u2014 "),pK=n(xIe,"A",{href:!0});var x6t=s(pK);aNr=r(x6t,"FlaxElectraForMultipleChoice"),x6t.forEach(t),nNr=r(xIe," (ELECTRA model)"),xIe.forEach(t),sNr=i(To),A5=n(To,"LI",{});var $Ie=s(A5);DMe=n($Ie,"STRONG",{});var $6t=s(DMe);lNr=r($6t,"roberta"),$6t.forEach(t),iNr=r($Ie," \u2014 "),_K=n($Ie,"A",{href:!0});var k6t=s(_K);dNr=r(k6t,"FlaxRobertaForMultipleChoice"),k6t.forEach(t),cNr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),fNr=i(To),y5=n(To,"LI",{});var kIe=s(y5);GMe=n(kIe,"STRONG",{});var S6t=s(GMe);mNr=r(S6t,"roformer"),S6t.forEach(t),gNr=r(kIe," \u2014 "),uK=n(kIe,"A",{href:!0});var R6t=s(uK);hNr=r(R6t,"FlaxRoFormerForMultipleChoice"),R6t.forEach(t),pNr=r(kIe," (RoFormer model)"),kIe.forEach(t),_Nr=i(To),L5=n(To,"LI",{});var SIe=s(L5);OMe=n(SIe,"STRONG",{});var P6t=s(OMe);uNr=r(P6t,"xlm-roberta"),P6t.forEach(t),bNr=r(SIe," \u2014 "),bK=n(SIe,"A",{href:!0});var B6t=s(bK);vNr=r(B6t,"FlaxXLMRobertaForMultipleChoice"),B6t.forEach(t),FNr=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),To.forEach(t),TNr=i(ti),T(x5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),PNe=i(f),of=n(f,"H2",{class:!0});var GDe=s(of);$5=n(GDe,"A",{id:!0,class:!0,href:!0});var I6t=s($5);VMe=n(I6t,"SPAN",{});var q6t=s(VMe);T(Zx.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),MNr=i(GDe),XMe=n(GDe,"SPAN",{});var N6t=s(XMe);ENr=r(N6t,"FlaxAutoModelForNextSentencePrediction"),N6t.forEach(t),GDe.forEach(t),BNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(e9.$$.fragment,ai),CNr=i(ai),rf=n(ai,"P",{});var bee=s(rf);wNr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vK=n(bee,"A",{href:!0});var j6t=s(vK);ANr=r(j6t,"from_pretrained()"),j6t.forEach(t),yNr=r(bee," class method or the "),FK=n(bee,"A",{href:!0});var D6t=s(FK);LNr=r(D6t,"from_config()"),D6t.forEach(t),xNr=r(bee,` class
method.`),bee.forEach(t),$Nr=i(ai),o9=n(ai,"P",{});var ODe=s(o9);kNr=r(ODe,"This class cannot be instantiated directly using "),zMe=n(ODe,"CODE",{});var G6t=s(zMe);SNr=r(G6t,"__init__()"),G6t.forEach(t),RNr=r(ODe," (throws an error)."),ODe.forEach(t),PNr=i(ai),Jt=n(ai,"DIV",{class:!0});var e0=s(Jt);T(r9.$$.fragment,e0),BNr=i(e0),WMe=n(e0,"P",{});var O6t=s(WMe);INr=r(O6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O6t.forEach(t),qNr=i(e0),tf=n(e0,"P",{});var vee=s(tf);NNr=r(vee,`Note:
Loading a model from its configuration file does `),QMe=n(vee,"STRONG",{});var V6t=s(QMe);jNr=r(V6t,"not"),V6t.forEach(t),DNr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(vee,"A",{href:!0});var X6t=s(TK);GNr=r(X6t,"from_pretrained()"),X6t.forEach(t),ONr=r(vee," to load the model weights."),vee.forEach(t),VNr=i(e0),T(k5.$$.fragment,e0),e0.forEach(t),XNr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(t9.$$.fragment,ni),zNr=i(ni),HMe=n(ni,"P",{});var z6t=s(HMe);WNr=r(z6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z6t.forEach(t),QNr=i(ni),En=n(ni,"P",{});var o0=s(En);HNr=r(o0,"The model class to instantiate is selected based on the "),UMe=n(o0,"CODE",{});var W6t=s(UMe);UNr=r(W6t,"model_type"),W6t.forEach(t),JNr=r(o0,` property of the config object (either
passed as an argument or loaded from `),JMe=n(o0,"CODE",{});var Q6t=s(JMe);YNr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),KNr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(o0,"CODE",{});var H6t=s(YMe);ZNr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),ejr=r(o0,":"),o0.forEach(t),ojr=i(ni),KMe=n(ni,"UL",{});var U6t=s(KMe);S5=n(U6t,"LI",{});var RIe=s(S5);ZMe=n(RIe,"STRONG",{});var J6t=s(ZMe);rjr=r(J6t,"bert"),J6t.forEach(t),tjr=r(RIe," \u2014 "),MK=n(RIe,"A",{href:!0});var Y6t=s(MK);ajr=r(Y6t,"FlaxBertForNextSentencePrediction"),Y6t.forEach(t),njr=r(RIe," (BERT model)"),RIe.forEach(t),U6t.forEach(t),sjr=i(ni),T(R5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),INe=i(f),af=n(f,"H2",{class:!0});var VDe=s(af);P5=n(VDe,"A",{id:!0,class:!0,href:!0});var K6t=s(P5);e4e=n(K6t,"SPAN",{});var Z6t=s(e4e);T(a9.$$.fragment,Z6t),Z6t.forEach(t),K6t.forEach(t),ljr=i(VDe),o4e=n(VDe,"SPAN",{});var eyt=s(o4e);ijr=r(eyt,"FlaxAutoModelForImageClassification"),eyt.forEach(t),VDe.forEach(t),qNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(n9.$$.fragment,si),djr=i(si),nf=n(si,"P",{});var Fee=s(nf);cjr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EK=n(Fee,"A",{href:!0});var oyt=s(EK);fjr=r(oyt,"from_pretrained()"),oyt.forEach(t),mjr=r(Fee," class method or the "),CK=n(Fee,"A",{href:!0});var ryt=s(CK);gjr=r(ryt,"from_config()"),ryt.forEach(t),hjr=r(Fee,` class
method.`),Fee.forEach(t),pjr=i(si),s9=n(si,"P",{});var XDe=s(s9);_jr=r(XDe,"This class cannot be instantiated directly using "),r4e=n(XDe,"CODE",{});var tyt=s(r4e);ujr=r(tyt,"__init__()"),tyt.forEach(t),bjr=r(XDe," (throws an error)."),XDe.forEach(t),vjr=i(si),Yt=n(si,"DIV",{class:!0});var r0=s(Yt);T(l9.$$.fragment,r0),Fjr=i(r0),t4e=n(r0,"P",{});var ayt=s(t4e);Tjr=r(ayt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ayt.forEach(t),Mjr=i(r0),sf=n(r0,"P",{});var Tee=s(sf);Ejr=r(Tee,`Note:
Loading a model from its configuration file does `),a4e=n(Tee,"STRONG",{});var nyt=s(a4e);Cjr=r(nyt,"not"),nyt.forEach(t),wjr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Tee,"A",{href:!0});var syt=s(wK);Ajr=r(syt,"from_pretrained()"),syt.forEach(t),yjr=r(Tee," to load the model weights."),Tee.forEach(t),Ljr=i(r0),T(B5.$$.fragment,r0),r0.forEach(t),xjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(i9.$$.fragment,li),$jr=i(li),n4e=n(li,"P",{});var lyt=s(n4e);kjr=r(lyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lyt.forEach(t),Sjr=i(li),Cn=n(li,"P",{});var t0=s(Cn);Rjr=r(t0,"The model class to instantiate is selected based on the "),s4e=n(t0,"CODE",{});var iyt=s(s4e);Pjr=r(iyt,"model_type"),iyt.forEach(t),Bjr=r(t0,` property of the config object (either
passed as an argument or loaded from `),l4e=n(t0,"CODE",{});var dyt=s(l4e);Ijr=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),qjr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(t0,"CODE",{});var cyt=s(i4e);Njr=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),jjr=r(t0,":"),t0.forEach(t),Djr=i(li),d9=n(li,"UL",{});var zDe=s(d9);I5=n(zDe,"LI",{});var PIe=s(I5);d4e=n(PIe,"STRONG",{});var fyt=s(d4e);Gjr=r(fyt,"beit"),fyt.forEach(t),Ojr=r(PIe," \u2014 "),AK=n(PIe,"A",{href:!0});var myt=s(AK);Vjr=r(myt,"FlaxBeitForImageClassification"),myt.forEach(t),Xjr=r(PIe," (BEiT model)"),PIe.forEach(t),zjr=i(zDe),q5=n(zDe,"LI",{});var BIe=s(q5);c4e=n(BIe,"STRONG",{});var gyt=s(c4e);Wjr=r(gyt,"vit"),gyt.forEach(t),Qjr=r(BIe," \u2014 "),yK=n(BIe,"A",{href:!0});var hyt=s(yK);Hjr=r(hyt,"FlaxViTForImageClassification"),hyt.forEach(t),Ujr=r(BIe," (ViT model)"),BIe.forEach(t),zDe.forEach(t),Jjr=i(li),T(N5.$$.fragment,li),li.forEach(t),si.forEach(t),NNe=i(f),lf=n(f,"H2",{class:!0});var WDe=s(lf);j5=n(WDe,"A",{id:!0,class:!0,href:!0});var pyt=s(j5);f4e=n(pyt,"SPAN",{});var _yt=s(f4e);T(c9.$$.fragment,_yt),_yt.forEach(t),pyt.forEach(t),Yjr=i(WDe),m4e=n(WDe,"SPAN",{});var uyt=s(m4e);Kjr=r(uyt,"FlaxAutoModelForVision2Seq"),uyt.forEach(t),WDe.forEach(t),jNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(f9.$$.fragment,ii),Zjr=i(ii),df=n(ii,"P",{});var Mee=s(df);eDr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LK=n(Mee,"A",{href:!0});var byt=s(LK);oDr=r(byt,"from_pretrained()"),byt.forEach(t),rDr=r(Mee," class method or the "),xK=n(Mee,"A",{href:!0});var vyt=s(xK);tDr=r(vyt,"from_config()"),vyt.forEach(t),aDr=r(Mee,` class
method.`),Mee.forEach(t),nDr=i(ii),m9=n(ii,"P",{});var QDe=s(m9);sDr=r(QDe,"This class cannot be instantiated directly using "),g4e=n(QDe,"CODE",{});var Fyt=s(g4e);lDr=r(Fyt,"__init__()"),Fyt.forEach(t),iDr=r(QDe," (throws an error)."),QDe.forEach(t),dDr=i(ii),Kt=n(ii,"DIV",{class:!0});var a0=s(Kt);T(g9.$$.fragment,a0),cDr=i(a0),h4e=n(a0,"P",{});var Tyt=s(h4e);fDr=r(Tyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tyt.forEach(t),mDr=i(a0),cf=n(a0,"P",{});var Eee=s(cf);gDr=r(Eee,`Note:
Loading a model from its configuration file does `),p4e=n(Eee,"STRONG",{});var Myt=s(p4e);hDr=r(Myt,"not"),Myt.forEach(t),pDr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(Eee,"A",{href:!0});var Eyt=s($K);_Dr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),uDr=r(Eee," to load the model weights."),Eee.forEach(t),bDr=i(a0),T(D5.$$.fragment,a0),a0.forEach(t),vDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(h9.$$.fragment,di),FDr=i(di),_4e=n(di,"P",{});var Cyt=s(_4e);TDr=r(Cyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Cyt.forEach(t),MDr=i(di),wn=n(di,"P",{});var n0=s(wn);EDr=r(n0,"The model class to instantiate is selected based on the "),u4e=n(n0,"CODE",{});var wyt=s(u4e);CDr=r(wyt,"model_type"),wyt.forEach(t),wDr=r(n0,` property of the config object (either
passed as an argument or loaded from `),b4e=n(n0,"CODE",{});var Ayt=s(b4e);ADr=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),yDr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(n0,"CODE",{});var yyt=s(v4e);LDr=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),xDr=r(n0,":"),n0.forEach(t),$Dr=i(di),F4e=n(di,"UL",{});var Lyt=s(F4e);G5=n(Lyt,"LI",{});var IIe=s(G5);T4e=n(IIe,"STRONG",{});var xyt=s(T4e);kDr=r(xyt,"vision-encoder-decoder"),xyt.forEach(t),SDr=r(IIe," \u2014 "),kK=n(IIe,"A",{href:!0});var $yt=s(kK);RDr=r($yt,"FlaxVisionEncoderDecoderModel"),$yt.forEach(t),PDr=r(IIe," (Vision Encoder decoder model)"),IIe.forEach(t),Lyt.forEach(t),BDr=i(di),T(O5.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Pxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(R$,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(P$,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertConfig"),c(B$,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartConfig"),c(I$,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitConfig"),c(q$,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertConfig"),c(N$,"href","/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(j$,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdConfig"),c(D$,"href","/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(G$,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(O$,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(V$,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertConfig"),c(X$,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineConfig"),c(z$,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPConfig"),c(W$,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertConfig"),c(Q$,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextConfig"),c(H$,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLConfig"),c(U$,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(J$,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Y$,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(K$,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaConfig"),c(Z$,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ek,"href","/docs/transformers/pr_17318/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ok,"href","/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTConfig"),c(rk,"href","/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrConfig"),c(tk,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ak,"href","/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRConfig"),c(nk,"href","/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTConfig"),c(sk,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraConfig"),c(lk,"href","/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ik,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertConfig"),c(dk,"href","/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaConfig"),c(ck,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetConfig"),c(fk,"href","/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTConfig"),c(mk,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelConfig"),c(gk,"href","/docs/transformers/pr_17318/en/model_doc/glpn#transformers.GLPNConfig"),c(hk,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Config"),c(pk,"href","/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(_k,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJConfig"),c(uk,"href","/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertConfig"),c(bk,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertConfig"),c(vk,"href","/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Fk,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Tk,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Mk,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDConfig"),c(Ek,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerConfig"),c(Ck,"href","/docs/transformers/pr_17318/en/model_doc/luke#transformers.LukeConfig"),c(wk,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ak,"href","/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100Config"),c(yk,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianConfig"),c(Lk,"href","/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(xk,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartConfig"),c($k,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(kk,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Sk,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetConfig"),c(Rk,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Config"),c(Pk,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Bk,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ik,"href","/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTConfig"),c(qk,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusConfig"),c(Nk,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverConfig"),c(jk,"href","/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartConfig"),c(Dk,"href","/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Gk,"href","/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ok,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Vk,"href","/docs/transformers/pr_17318/en/model_doc/rag#transformers.RagConfig"),c(Xk,"href","/docs/transformers/pr_17318/en/model_doc/realm#transformers.RealmConfig"),c(zk,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerConfig"),c(Wk,"href","/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetConfig"),c(Qk,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertConfig"),c(Hk,"href","/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetConfig"),c(Uk,"href","/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertConfig"),c(Jk,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaConfig"),c(Yk,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerConfig"),c(Kk,"href","/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerConfig"),c(Zk,"href","/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWConfig"),c(eS,"href","/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDConfig"),c(oS,"href","/docs/transformers/pr_17318/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rS,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tS,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(aS,"href","/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterConfig"),c(nS,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sS,"href","/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinConfig"),c(lS,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Config"),c(iS,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasConfig"),c(dS,"href","/docs/transformers/pr_17318/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(cS,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(fS,"href","/docs/transformers/pr_17318/en/model_doc/trocr#transformers.TrOCRConfig"),c(mS,"href","/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gS,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hS,"href","/docs/transformers/pr_17318/en/model_doc/van#transformers.VanConfig"),c(pS,"href","/docs/transformers/pr_17318/en/model_doc/vilt#transformers.ViltConfig"),c(_S,"href","/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(uS,"href","/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bS,"href","/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(vS,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTConfig"),c(FS,"href","/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(TS,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(MS,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ES,"href","/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMConfig"),c(CS,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMConfig"),c(wS,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMConfig"),c(AS,"href","/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(yS,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(LS,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(xS,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetConfig"),c($S,"href","/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosConfig"),c(kS,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(SS,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(RS,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertTokenizer"),c(PS,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(BS,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartTokenizer"),c(IS,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartTokenizerFast"),c(qS,"href","/docs/transformers/pr_17318/en/model_doc/barthez#transformers.BarthezTokenizer"),c(NS,"href","/docs/transformers/pr_17318/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(jS,"href","/docs/transformers/pr_17318/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(DS,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizer"),c(GS,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizerFast"),c(OS,"href","/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(VS,"href","/docs/transformers/pr_17318/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(XS,"href","/docs/transformers/pr_17318/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(zS,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(WS,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(QS,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HS,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(US,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(JS,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(YS,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(KS,"href","/docs/transformers/pr_17318/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ZS,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertTokenizer"),c(eR,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(oR,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineTokenizer"),c(rR,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPTokenizer"),c(tR,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aR,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nR,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sR,"href","/docs/transformers/pr_17318/en/model_doc/cpm#transformers.CpmTokenizer"),c(lR,"href","/docs/transformers/pr_17318/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(iR,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(dR,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cR,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fR,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaTokenizer"),c(mR,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(gR,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(hR,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(pR,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(_R,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(bR,"href","/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(vR,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraTokenizer"),c(FR,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(TR,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(MR,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetTokenizer"),c(ER,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(CR,"href","/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(wR,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelTokenizer"),c(AR,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yR,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($R,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kR,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SR,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RR,"href","/docs/transformers/pr_17318/en/model_doc/herbert#transformers.HerbertTokenizer"),c(PR,"href","/docs/transformers/pr_17318/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IR,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(jR,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(DR,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(GR,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(OR,"href","/docs/transformers/pr_17318/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(VR,"href","/docs/transformers/pr_17318/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(XR,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDTokenizer"),c(zR,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDTokenizerFast"),c(WR,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QR,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(HR,"href","/docs/transformers/pr_17318/en/model_doc/luke#transformers.LukeTokenizer"),c(UR,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(JR,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(KR,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianTokenizer"),c(ZR,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartTokenizer"),c(eP,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(oP,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(rP,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(tP,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizer"),c(aP,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizerFast"),c(nP,"href","/docs/transformers/pr_17318/en/model_doc/mluke#transformers.MLukeTokenizer"),c(sP,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(lP,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(iP,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(dP,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(cP,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Tokenizer"),c(fP,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5TokenizerFast"),c(mP,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertTokenizer"),c(gP,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(pP,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(_P,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uP,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bP,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vP,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(FP,"href","/docs/transformers/pr_17318/en/model_doc/phobert#transformers.PhobertTokenizer"),c(TP,"href","/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartTokenizer"),c(MP,"href","/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EP,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizer"),c(CP,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17318/en/model_doc/rag#transformers.RagTokenizer"),c(AP,"href","/docs/transformers/pr_17318/en/model_doc/realm#transformers.RealmTokenizer"),c(yP,"href","/docs/transformers/pr_17318/en/model_doc/realm#transformers.RealmTokenizerFast"),c(LP,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerTokenizer"),c(xP,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c($P,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertTokenizer"),c(kP,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RP,"href","/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BP,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IP,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(qP,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(NP,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(jP,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DP,"href","/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterTokenizer"),c(GP,"href","/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(OP,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(VP,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Tokenizer"),c(zP,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5TokenizerFast"),c(WP,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasTokenizer"),c(QP,"href","/docs/transformers/pr_17318/en/model_doc/tapex#transformers.TapexTokenizer"),c(HP,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(UP,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KP,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZP,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(eB,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMTokenizer"),c(oB,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(rB,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMTokenizer"),c(tB,"href","/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(aB,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(nB,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lB,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(dB,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(cB,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertTokenizer"),c(fB,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoFeatureExtractor"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(mB,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(gB,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hB,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uB,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17318/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CB,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(wB,"href","/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NB,"href","/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoProcessor"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(jB,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(DB,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPProcessor"),c(GB,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(OB,"href","/docs/transformers/pr_17318/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(VB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(WB,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QB,"href","/docs/transformers/pr_17318/en/model_doc/trocr#transformers.TrOCRProcessor"),c(HB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_17318/en/model_doc/vilt#transformers.ViltProcessor"),c(YB,"href","/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(KB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eI,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"id","transformers.AutoModel"),c(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(oI,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rI,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tI,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aI,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertModel"),c(nI,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartModel"),c(sI,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitModel"),c(lI,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertModel"),c(iI,"href","/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dI,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdModel"),c(cI,"href","/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fI,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mI,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gI,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertModel"),c(hI,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineModel"),c(pI,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.CLIPModel"),c(_I,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertModel"),c(uI,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextModel"),c(bI,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLModel"),c(vI,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(FI,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(TI,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(MI,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaModel"),c(EI,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(CI,"href","/docs/transformers/pr_17318/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(wI,"href","/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTModel"),c(AI,"href","/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrModel"),c(yI,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertModel"),c(LI,"href","/docs/transformers/pr_17318/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(xI,"href","/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTModel"),c($I,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraModel"),c(kI,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertModel"),c(SI,"href","/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaModel"),c(RI,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetModel"),c(PI,"href","/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTModel"),c(BI,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelModel"),c(II,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qI,"href","/docs/transformers/pr_17318/en/model_doc/glpn#transformers.GLPNModel"),c(NI,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2Model"),c(jI,"href","/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(DI,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJModel"),c(GI,"href","/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertModel"),c(OI,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertModel"),c(VI,"href","/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(XI,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(zI,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(WI,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDModel"),c(QI,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerModel"),c(HI,"href","/docs/transformers/pr_17318/en/model_doc/luke#transformers.LukeModel"),c(UI,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertModel"),c(JI,"href","/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100Model"),c(YI,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianModel"),c(KI,"href","/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ZI,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartModel"),c(eq,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oq,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rq,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetModel"),c(tq,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5Model"),c(aq,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerModel"),c(nq,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(sq,"href","/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTModel"),c(lq,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusModel"),c(iq,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverModel"),c(dq,"href","/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartModel"),c(cq,"href","/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerModel"),c(fq,"href","/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(mq,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertModel"),c(gq,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerModel"),c(hq,"href","/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetModel"),c(pq,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertModel"),c(_q,"href","/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetModel"),c(uq,"href","/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertModel"),c(bq,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaModel"),c(vq,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerModel"),c(Fq,"href","/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerModel"),c(Tq,"href","/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWModel"),c(Mq,"href","/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDModel"),c(Eq,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Cq,"href","/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterModel"),c(wq,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Aq,"href","/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinModel"),c(yq,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5Model"),c(Lq,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasModel"),c(xq,"href","/docs/transformers/pr_17318/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c($q,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kq,"href","/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Sq,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Rq,"href","/docs/transformers/pr_17318/en/model_doc/van#transformers.VanModel"),c(Pq,"href","/docs/transformers/pr_17318/en/model_doc/vilt#transformers.ViltModel"),c(Bq,"href","/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Iq,"href","/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qq,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTModel"),c(Nq,"href","/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(jq,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Dq,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Gq,"href","/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMModel"),c(Oq,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMModel"),c(Vq,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMModel"),c(Xq,"href","/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(zq,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Wq,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Qq,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetModel"),c(Hq,"href","/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosModel"),c(Uq,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForPreTraining"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Jq,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yq,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kq,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zq,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForPreTraining"),c(eN,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oN,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForPreTraining"),c(rN,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tN,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aN,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nN,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sN,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lN,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iN,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dN,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForPreTraining"),c(cN,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fN,"href","/docs/transformers/pr_17318/en/model_doc/flava#transformers.FlavaForPreTraining"),c(mN,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gN,"href","/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hN,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(pN,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_N,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uN,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bN,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vN,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FN,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TN,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MN,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EN,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CN,"href","/docs/transformers/pr_17318/en/model_doc/retribert#transformers.RetriBertModel"),c(wN,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AN,"href","/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(yN,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xN,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($N,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kN,"href","/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(SN,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RN,"href","/docs/transformers/pr_17318/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PN,"href","/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(BN,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(IN,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(qN,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NN,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jN,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DN,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForCausalLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(GN,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForCausalLM"),c(zN,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertLMHeadModel"),c(WN,"href","/docs/transformers/pr_17318/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(QN,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(HN,"href","/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(UN,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(JN,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(YN,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(KN,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ej,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oj,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rj,"href","/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tj,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aj,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianForCausalLM"),c(nj,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sj,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lj,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ij,"href","/docs/transformers/pr_17318/en/model_doc/opt#transformers.OPTForCausalLM"),c(dj,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(cj,"href","/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(fj,"href","/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(mj,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(gj,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(hj,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(pj,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(_j,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(uj,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(bj,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vj,"href","/docs/transformers/pr_17318/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Fj,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Tj,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Mj,"href","/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Ej,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Cj,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(wj,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForMaskedLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Aj,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yj,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lj,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xj,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForMaskedLM"),c($j,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qj,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(zj,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(eD,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oD,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rD,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tD,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nD,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sD,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lD,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iD,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ib,"id","transformers.AutoModelForSeq2SeqLM"),c(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ib,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(dD,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cD,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fD,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mD,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(uD,"href","/docs/transformers/pr_17318/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17318/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.MarianMTModel"),c(TD,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17318/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17318/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForSequenceClassification"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(LD,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xD,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($D,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kD,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17318/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForMultipleChoice"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(EG,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CG,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wG,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AG,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c($G,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForNextSentencePrediction"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(oO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(nO,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(sO,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(lO,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(iO,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForTokenClassification"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(dO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(pO,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForTokenClassification"),c(uO,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(vO,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(FO,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(TO,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(EO,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(wO,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(AO,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yO,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(xO,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c($O,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(kO,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(PO,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(BO,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(NO,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(jO,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(GO,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(OO,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(VO,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(XO,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForQuestionAnswering"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(zO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17318/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17318/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(iV,"href","/docs/transformers/pr_17318/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17318/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17318/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17318/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17318/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17318/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17318/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17318/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17318/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(xV,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(SV,"href","/docs/transformers/pr_17318/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.AutoModelForTableQuestionAnswering"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(RV,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.AutoModelForImageClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(qV,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitForImageClassification"),c(GV,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(OV,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(VV,"href","/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTForImageClassification"),c(XV,"href","/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(zV,"href","/docs/transformers/pr_17318/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(WV,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(QV,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(HV,"href","/docs/transformers/pr_17318/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(UV,"href","/docs/transformers/pr_17318/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(JV,"href","/docs/transformers/pr_17318/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(YV,"href","/docs/transformers/pr_17318/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(KV,"href","/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(ZV,"href","/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinForImageClassification"),c(eX,"href","/docs/transformers/pr_17318/en/model_doc/van#transformers.VanForImageClassification"),c(oX,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForVision2Seq"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(rX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForAudioClassification"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForAudioFrameClassification"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(bX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MX,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(wX,"href","/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForCTC"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c($X,"href","/docs/transformers/pr_17318/en/model_doc/hubert#transformers.HubertForCTC"),c(kX,"href","/docs/transformers/pr_17318/en/model_doc/sew#transformers.SEWForCTC"),c(SX,"href","/docs/transformers/pr_17318/en/model_doc/sew-d#transformers.SEWDForCTC"),c(RX,"href","/docs/transformers/pr_17318/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(PX,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(BX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(IX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(qX,"href","/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(NX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17318/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(OX,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForAudioXVector"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(VX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(QX,"href","/docs/transformers/pr_17318/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(HX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(UX,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(JX,"href","/docs/transformers/pr_17318/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForMaskedImageModeling"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17318/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(oz,"href","/docs/transformers/pr_17318/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(rz,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForObjectDetection"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(tz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrForObjectDetection"),c(lz,"href","/docs/transformers/pr_17318/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForImageSegmentation"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(iz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17318/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForSemanticSegmentation"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(_z,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(uz,"href","/docs/transformers/pr_17318/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(bz,"href","/docs/transformers/pr_17318/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForInstanceSegmentation"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(vz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17318/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.TFAutoModel"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertModel"),c(yz,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.TFBartModel"),c(Lz,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertModel"),c(xz,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c($z,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(kz,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertModel"),c(Sz,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.TFCLIPModel"),c(Rz,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertModel"),c(Pz,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.TFConvNextModel"),c(Bz,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Iz,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(qz,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaModel"),c(Nz,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(jz,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Dz,"href","/docs/transformers/pr_17318/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Gz,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraModel"),c(Oz,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Vz,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelModel"),c(Xz,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(zz,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Wz,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJModel"),c(Qz,"href","/docs/transformers/pr_17318/en/model_doc/hubert#transformers.TFHubertModel"),c(Hz,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Uz,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.TFLEDModel"),c(Jz,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerModel"),c(Yz,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Kz,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.TFMarianModel"),c(Zz,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.TFMBartModel"),c(eW,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(oW,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetModel"),c(rW,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.TFMT5Model"),c(tW,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(aW,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.TFPegasusModel"),c(nW,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertModel"),c(sW,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaModel"),c(lW,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerModel"),c(iW,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(dW,"href","/docs/transformers/pr_17318/en/model_doc/swin#transformers.TFSwinModel"),c(cW,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.TFT5Model"),c(fW,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasModel"),c(mW,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(gW,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.TFViTModel"),c(hW,"href","/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(pW,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(_W,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMModel"),c(uW,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(bW,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($8,"id","transformers.TFAutoModelForPreTraining"),c($8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($8,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(EW,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wW,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AW,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(yW,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LW,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xW,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($W,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(kW,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SW,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RW,"href","/docs/transformers/pr_17318/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(PW,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(BW,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IW,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qW,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NW,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jW,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DW,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(GW,"href","/docs/transformers/pr_17318/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(OW,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VW,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(XW,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.TFAutoModelForCausalLM"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(zW,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(UW,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(JW,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(YW,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KW,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(ZW,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(oQ,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(rQ,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(tQ,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.TFAutoModelForImageClassification"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(sQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_17318/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(cQ,"href","/docs/transformers/pr_17318/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(fQ,"href","/docs/transformers/pr_17318/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(mQ,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.TFAutoModelForMaskedLM"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($Q,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VQ,"href","/docs/transformers/pr_17318/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.TFMarianMTModel"),c(zQ,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QQ,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForSequenceClassification"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(UQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17318/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17318/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17318/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForMultipleChoice"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(CH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xH,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($H,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(XH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(HH,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17318/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForTokenClassification"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tU,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lU,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iU,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cU,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(mU,"href","/docs/transformers/pr_17318/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gU,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hU,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pU,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(_U,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bU,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vU,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FU,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TU,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.TFAutoModelForQuestionAnswering"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(MU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17318/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17318/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17318/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17318/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17318/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PU,"href","/docs/transformers/pr_17318/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17318/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17318/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17318/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17318/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17318/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VU,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17318/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForVision2Seq"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17318/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.FlaxAutoModel"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tJ,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartModel"),c(aJ,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.FlaxBeitModel"),c(nJ,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertModel"),c(sJ,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lJ,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iJ,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dJ,"href","/docs/transformers/pr_17318/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cJ,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fJ,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraModel"),c(mJ,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gJ,"href","/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hJ,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pJ,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.FlaxMarianModel"),c(_J,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartModel"),c(uJ,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bJ,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(vJ,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(FJ,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(TJ,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.FlaxT5Model"),c(MJ,"href","/docs/transformers/pr_17318/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(EJ,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.FlaxViTModel"),c(CJ,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(wJ,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(AJ,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.FlaxAutoModelForCausalLM"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(kJ,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(SJ,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(RJ,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(PJ,"href","/docs/transformers/pr_17318/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(BJ,"href","/docs/transformers/pr_17318/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(IJ,"href","/docs/transformers/pr_17318/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qJ,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(NJ,"href","/docs/transformers/pr_17318/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForPreTraining"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(VJ,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(zJ,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(WJ,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(QJ,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YJ,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17318/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ZJ,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForMaskedLM"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(eY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(sY,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(lY,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(iY,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(dY,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fY,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mY,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17318/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17318/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(FY,"href","/docs/transformers/pr_17318/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TY,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_17318/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17318/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17318/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(BY,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(NY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17318/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17318/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForTokenClassification"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oK,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rK,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tK,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nK,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sK,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lK,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(iK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17318/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gK,"href","/docs/transformers/pr_17318/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17318/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17318/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17318/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17318/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17318/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(vK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17318/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForImageClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(EK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17318/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yK,"href","/docs/transformers/pr_17318/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForVision2Seq"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(LK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_17318/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_17318/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,s0),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,l0),e(We,Ln),e(We,xn),e(xn,i0),e(We,hi),e(We,$n),e($n,d0),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,y$),e(Ae,_i),e(_i,L$),e(Ae,x$),b(f,Eo,u),b(f,wa,u),e(wa,$$),e(wa,uf),e(uf,k$),e(wa,HDe),b(f,qIe,u),b(f,ui,u),e(ui,bf),e(bf,Cee),M(c0,Cee,null),e(ui,UDe),e(ui,wee),e(wee,JDe),b(f,NIe,u),b(f,kn,u),e(kn,YDe),e(kn,Aee),e(Aee,KDe),e(kn,ZDe),e(kn,yee),e(yee,eGe),e(kn,oGe),b(f,jIe,u),M(f0,f,u),b(f,DIe,u),b(f,S$,u),e(S$,rGe),b(f,GIe,u),M(vf,f,u),b(f,OIe,u),b(f,bi,u),e(bi,Ff),e(Ff,Lee),M(m0,Lee,null),e(bi,tGe),e(bi,xee),e(xee,aGe),b(f,VIe,u),b(f,Co,u),M(g0,Co,null),e(Co,nGe),e(Co,h0),e(h0,sGe),e(h0,R$),e(R$,lGe),e(h0,iGe),e(Co,dGe),e(Co,p0),e(p0,cGe),e(p0,$ee),e($ee,fGe),e(p0,mGe),e(Co,gGe),e(Co,Er),M(_0,Er,null),e(Er,hGe),e(Er,kee),e(kee,pGe),e(Er,_Ge),e(Er,vi),e(vi,uGe),e(vi,See),e(See,bGe),e(vi,vGe),e(vi,Ree),e(Ree,FGe),e(vi,TGe),e(Er,MGe),e(Er,A),e(A,Tf),e(Tf,Pee),e(Pee,EGe),e(Tf,CGe),e(Tf,P$),e(P$,wGe),e(Tf,AGe),e(A,yGe),e(A,Mf),e(Mf,Bee),e(Bee,LGe),e(Mf,xGe),e(Mf,B$),e(B$,$Ge),e(Mf,kGe),e(A,SGe),e(A,Ef),e(Ef,Iee),e(Iee,RGe),e(Ef,PGe),e(Ef,I$),e(I$,BGe),e(Ef,IGe),e(A,qGe),e(A,Cf),e(Cf,qee),e(qee,NGe),e(Cf,jGe),e(Cf,q$),e(q$,DGe),e(Cf,GGe),e(A,OGe),e(A,wf),e(wf,Nee),e(Nee,VGe),e(wf,XGe),e(wf,N$),e(N$,zGe),e(wf,WGe),e(A,QGe),e(A,Af),e(Af,jee),e(jee,HGe),e(Af,UGe),e(Af,j$),e(j$,JGe),e(Af,YGe),e(A,KGe),e(A,yf),e(yf,Dee),e(Dee,ZGe),e(yf,eOe),e(yf,D$),e(D$,oOe),e(yf,rOe),e(A,tOe),e(A,Lf),e(Lf,Gee),e(Gee,aOe),e(Lf,nOe),e(Lf,G$),e(G$,sOe),e(Lf,lOe),e(A,iOe),e(A,xf),e(xf,Oee),e(Oee,dOe),e(xf,cOe),e(xf,O$),e(O$,fOe),e(xf,mOe),e(A,gOe),e(A,$f),e($f,Vee),e(Vee,hOe),e($f,pOe),e($f,V$),e(V$,_Oe),e($f,uOe),e(A,bOe),e(A,kf),e(kf,Xee),e(Xee,vOe),e(kf,FOe),e(kf,X$),e(X$,TOe),e(kf,MOe),e(A,EOe),e(A,Sf),e(Sf,zee),e(zee,COe),e(Sf,wOe),e(Sf,z$),e(z$,AOe),e(Sf,yOe),e(A,LOe),e(A,Rf),e(Rf,Wee),e(Wee,xOe),e(Rf,$Oe),e(Rf,W$),e(W$,kOe),e(Rf,SOe),e(A,ROe),e(A,Pf),e(Pf,Qee),e(Qee,POe),e(Pf,BOe),e(Pf,Q$),e(Q$,IOe),e(Pf,qOe),e(A,NOe),e(A,Bf),e(Bf,Hee),e(Hee,jOe),e(Bf,DOe),e(Bf,H$),e(H$,GOe),e(Bf,OOe),e(A,VOe),e(A,If),e(If,Uee),e(Uee,XOe),e(If,zOe),e(If,U$),e(U$,WOe),e(If,QOe),e(A,HOe),e(A,qf),e(qf,Jee),e(Jee,UOe),e(qf,JOe),e(qf,J$),e(J$,YOe),e(qf,KOe),e(A,ZOe),e(A,Nf),e(Nf,Yee),e(Yee,eVe),e(Nf,oVe),e(Nf,Y$),e(Y$,rVe),e(Nf,tVe),e(A,aVe),e(A,jf),e(jf,Kee),e(Kee,nVe),e(jf,sVe),e(jf,K$),e(K$,lVe),e(jf,iVe),e(A,dVe),e(A,Df),e(Df,Zee),e(Zee,cVe),e(Df,fVe),e(Df,Z$),e(Z$,mVe),e(Df,gVe),e(A,hVe),e(A,Gf),e(Gf,eoe),e(eoe,pVe),e(Gf,_Ve),e(Gf,ek),e(ek,uVe),e(Gf,bVe),e(A,vVe),e(A,Of),e(Of,ooe),e(ooe,FVe),e(Of,TVe),e(Of,ok),e(ok,MVe),e(Of,EVe),e(A,CVe),e(A,Vf),e(Vf,roe),e(roe,wVe),e(Vf,AVe),e(Vf,rk),e(rk,yVe),e(Vf,LVe),e(A,xVe),e(A,Xf),e(Xf,toe),e(toe,$Ve),e(Xf,kVe),e(Xf,tk),e(tk,SVe),e(Xf,RVe),e(A,PVe),e(A,zf),e(zf,aoe),e(aoe,BVe),e(zf,IVe),e(zf,ak),e(ak,qVe),e(zf,NVe),e(A,jVe),e(A,Wf),e(Wf,noe),e(noe,DVe),e(Wf,GVe),e(Wf,nk),e(nk,OVe),e(Wf,VVe),e(A,XVe),e(A,Qf),e(Qf,soe),e(soe,zVe),e(Qf,WVe),e(Qf,sk),e(sk,QVe),e(Qf,HVe),e(A,UVe),e(A,Hf),e(Hf,loe),e(loe,JVe),e(Hf,YVe),e(Hf,lk),e(lk,KVe),e(Hf,ZVe),e(A,eXe),e(A,Uf),e(Uf,ioe),e(ioe,oXe),e(Uf,rXe),e(Uf,ik),e(ik,tXe),e(Uf,aXe),e(A,nXe),e(A,Jf),e(Jf,doe),e(doe,sXe),e(Jf,lXe),e(Jf,dk),e(dk,iXe),e(Jf,dXe),e(A,cXe),e(A,Yf),e(Yf,coe),e(coe,fXe),e(Yf,mXe),e(Yf,ck),e(ck,gXe),e(Yf,hXe),e(A,pXe),e(A,Kf),e(Kf,foe),e(foe,_Xe),e(Kf,uXe),e(Kf,fk),e(fk,bXe),e(Kf,vXe),e(A,FXe),e(A,Zf),e(Zf,moe),e(moe,TXe),e(Zf,MXe),e(Zf,mk),e(mk,EXe),e(Zf,CXe),e(A,wXe),e(A,em),e(em,goe),e(goe,AXe),e(em,yXe),e(em,gk),e(gk,LXe),e(em,xXe),e(A,$Xe),e(A,om),e(om,hoe),e(hoe,kXe),e(om,SXe),e(om,hk),e(hk,RXe),e(om,PXe),e(A,BXe),e(A,rm),e(rm,poe),e(poe,IXe),e(rm,qXe),e(rm,pk),e(pk,NXe),e(rm,jXe),e(A,DXe),e(A,tm),e(tm,_oe),e(_oe,GXe),e(tm,OXe),e(tm,_k),e(_k,VXe),e(tm,XXe),e(A,zXe),e(A,am),e(am,uoe),e(uoe,WXe),e(am,QXe),e(am,uk),e(uk,HXe),e(am,UXe),e(A,JXe),e(A,nm),e(nm,boe),e(boe,YXe),e(nm,KXe),e(nm,bk),e(bk,ZXe),e(nm,eze),e(A,oze),e(A,sm),e(sm,voe),e(voe,rze),e(sm,tze),e(sm,vk),e(vk,aze),e(sm,nze),e(A,sze),e(A,lm),e(lm,Foe),e(Foe,lze),e(lm,ize),e(lm,Fk),e(Fk,dze),e(lm,cze),e(A,fze),e(A,im),e(im,Toe),e(Toe,mze),e(im,gze),e(im,Tk),e(Tk,hze),e(im,pze),e(A,_ze),e(A,dm),e(dm,Moe),e(Moe,uze),e(dm,bze),e(dm,Mk),e(Mk,vze),e(dm,Fze),e(A,Tze),e(A,cm),e(cm,Eoe),e(Eoe,Mze),e(cm,Eze),e(cm,Ek),e(Ek,Cze),e(cm,wze),e(A,Aze),e(A,fm),e(fm,Coe),e(Coe,yze),e(fm,Lze),e(fm,Ck),e(Ck,xze),e(fm,$ze),e(A,kze),e(A,mm),e(mm,woe),e(woe,Sze),e(mm,Rze),e(mm,wk),e(wk,Pze),e(mm,Bze),e(A,Ize),e(A,gm),e(gm,Aoe),e(Aoe,qze),e(gm,Nze),e(gm,Ak),e(Ak,jze),e(gm,Dze),e(A,Gze),e(A,hm),e(hm,yoe),e(yoe,Oze),e(hm,Vze),e(hm,yk),e(yk,Xze),e(hm,zze),e(A,Wze),e(A,pm),e(pm,Loe),e(Loe,Qze),e(pm,Hze),e(pm,Lk),e(Lk,Uze),e(pm,Jze),e(A,Yze),e(A,_m),e(_m,xoe),e(xoe,Kze),e(_m,Zze),e(_m,xk),e(xk,eWe),e(_m,oWe),e(A,rWe),e(A,um),e(um,$oe),e($oe,tWe),e(um,aWe),e(um,$k),e($k,nWe),e(um,sWe),e(A,lWe),e(A,bm),e(bm,koe),e(koe,iWe),e(bm,dWe),e(bm,kk),e(kk,cWe),e(bm,fWe),e(A,mWe),e(A,vm),e(vm,Soe),e(Soe,gWe),e(vm,hWe),e(vm,Sk),e(Sk,pWe),e(vm,_We),e(A,uWe),e(A,Fm),e(Fm,Roe),e(Roe,bWe),e(Fm,vWe),e(Fm,Rk),e(Rk,FWe),e(Fm,TWe),e(A,MWe),e(A,Tm),e(Tm,Poe),e(Poe,EWe),e(Tm,CWe),e(Tm,Pk),e(Pk,wWe),e(Tm,AWe),e(A,yWe),e(A,Mm),e(Mm,Boe),e(Boe,LWe),e(Mm,xWe),e(Mm,Bk),e(Bk,$We),e(Mm,kWe),e(A,SWe),e(A,Em),e(Em,Ioe),e(Ioe,RWe),e(Em,PWe),e(Em,Ik),e(Ik,BWe),e(Em,IWe),e(A,qWe),e(A,Cm),e(Cm,qoe),e(qoe,NWe),e(Cm,jWe),e(Cm,qk),e(qk,DWe),e(Cm,GWe),e(A,OWe),e(A,wm),e(wm,Noe),e(Noe,VWe),e(wm,XWe),e(wm,Nk),e(Nk,zWe),e(wm,WWe),e(A,QWe),e(A,Am),e(Am,joe),e(joe,HWe),e(Am,UWe),e(Am,jk),e(jk,JWe),e(Am,YWe),e(A,KWe),e(A,ym),e(ym,Doe),e(Doe,ZWe),e(ym,eQe),e(ym,Dk),e(Dk,oQe),e(ym,rQe),e(A,tQe),e(A,Lm),e(Lm,Goe),e(Goe,aQe),e(Lm,nQe),e(Lm,Gk),e(Gk,sQe),e(Lm,lQe),e(A,iQe),e(A,xm),e(xm,Ooe),e(Ooe,dQe),e(xm,cQe),e(xm,Ok),e(Ok,fQe),e(xm,mQe),e(A,gQe),e(A,$m),e($m,Voe),e(Voe,hQe),e($m,pQe),e($m,Vk),e(Vk,_Qe),e($m,uQe),e(A,bQe),e(A,km),e(km,Xoe),e(Xoe,vQe),e(km,FQe),e(km,Xk),e(Xk,TQe),e(km,MQe),e(A,EQe),e(A,Sm),e(Sm,zoe),e(zoe,CQe),e(Sm,wQe),e(Sm,zk),e(zk,AQe),e(Sm,yQe),e(A,LQe),e(A,Rm),e(Rm,Woe),e(Woe,xQe),e(Rm,$Qe),e(Rm,Wk),e(Wk,kQe),e(Rm,SQe),e(A,RQe),e(A,Pm),e(Pm,Qoe),e(Qoe,PQe),e(Pm,BQe),e(Pm,Qk),e(Qk,IQe),e(Pm,qQe),e(A,NQe),e(A,Bm),e(Bm,Hoe),e(Hoe,jQe),e(Bm,DQe),e(Bm,Hk),e(Hk,GQe),e(Bm,OQe),e(A,VQe),e(A,Im),e(Im,Uoe),e(Uoe,XQe),e(Im,zQe),e(Im,Uk),e(Uk,WQe),e(Im,QQe),e(A,HQe),e(A,qm),e(qm,Joe),e(Joe,UQe),e(qm,JQe),e(qm,Jk),e(Jk,YQe),e(qm,KQe),e(A,ZQe),e(A,Nm),e(Nm,Yoe),e(Yoe,eHe),e(Nm,oHe),e(Nm,Yk),e(Yk,rHe),e(Nm,tHe),e(A,aHe),e(A,jm),e(jm,Koe),e(Koe,nHe),e(jm,sHe),e(jm,Kk),e(Kk,lHe),e(jm,iHe),e(A,dHe),e(A,Dm),e(Dm,Zoe),e(Zoe,cHe),e(Dm,fHe),e(Dm,Zk),e(Zk,mHe),e(Dm,gHe),e(A,hHe),e(A,Gm),e(Gm,ere),e(ere,pHe),e(Gm,_He),e(Gm,eS),e(eS,uHe),e(Gm,bHe),e(A,vHe),e(A,Om),e(Om,ore),e(ore,FHe),e(Om,THe),e(Om,oS),e(oS,MHe),e(Om,EHe),e(A,CHe),e(A,Vm),e(Vm,rre),e(rre,wHe),e(Vm,AHe),e(Vm,rS),e(rS,yHe),e(Vm,LHe),e(A,xHe),e(A,Xm),e(Xm,tre),e(tre,$He),e(Xm,kHe),e(Xm,tS),e(tS,SHe),e(Xm,RHe),e(A,PHe),e(A,zm),e(zm,are),e(are,BHe),e(zm,IHe),e(zm,aS),e(aS,qHe),e(zm,NHe),e(A,jHe),e(A,Wm),e(Wm,nre),e(nre,DHe),e(Wm,GHe),e(Wm,nS),e(nS,OHe),e(Wm,VHe),e(A,XHe),e(A,Qm),e(Qm,sre),e(sre,zHe),e(Qm,WHe),e(Qm,sS),e(sS,QHe),e(Qm,HHe),e(A,UHe),e(A,Hm),e(Hm,lre),e(lre,JHe),e(Hm,YHe),e(Hm,lS),e(lS,KHe),e(Hm,ZHe),e(A,eUe),e(A,Um),e(Um,ire),e(ire,oUe),e(Um,rUe),e(Um,iS),e(iS,tUe),e(Um,aUe),e(A,nUe),e(A,Jm),e(Jm,dre),e(dre,sUe),e(Jm,lUe),e(Jm,dS),e(dS,iUe),e(Jm,dUe),e(A,cUe),e(A,Ym),e(Ym,cre),e(cre,fUe),e(Ym,mUe),e(Ym,cS),e(cS,gUe),e(Ym,hUe),e(A,pUe),e(A,Km),e(Km,fre),e(fre,_Ue),e(Km,uUe),e(Km,fS),e(fS,bUe),e(Km,vUe),e(A,FUe),e(A,Zm),e(Zm,mre),e(mre,TUe),e(Zm,MUe),e(Zm,mS),e(mS,EUe),e(Zm,CUe),e(A,wUe),e(A,eg),e(eg,gre),e(gre,AUe),e(eg,yUe),e(eg,gS),e(gS,LUe),e(eg,xUe),e(A,$Ue),e(A,og),e(og,hre),e(hre,kUe),e(og,SUe),e(og,hS),e(hS,RUe),e(og,PUe),e(A,BUe),e(A,rg),e(rg,pre),e(pre,IUe),e(rg,qUe),e(rg,pS),e(pS,NUe),e(rg,jUe),e(A,DUe),e(A,tg),e(tg,_re),e(_re,GUe),e(tg,OUe),e(tg,_S),e(_S,VUe),e(tg,XUe),e(A,zUe),e(A,ag),e(ag,ure),e(ure,WUe),e(ag,QUe),e(ag,uS),e(uS,HUe),e(ag,UUe),e(A,JUe),e(A,ng),e(ng,bre),e(bre,YUe),e(ng,KUe),e(ng,bS),e(bS,ZUe),e(ng,eJe),e(A,oJe),e(A,sg),e(sg,vre),e(vre,rJe),e(sg,tJe),e(sg,vS),e(vS,aJe),e(sg,nJe),e(A,sJe),e(A,lg),e(lg,Fre),e(Fre,lJe),e(lg,iJe),e(lg,FS),e(FS,dJe),e(lg,cJe),e(A,fJe),e(A,ig),e(ig,Tre),e(Tre,mJe),e(ig,gJe),e(ig,TS),e(TS,hJe),e(ig,pJe),e(A,_Je),e(A,dg),e(dg,Mre),e(Mre,uJe),e(dg,bJe),e(dg,MS),e(MS,vJe),e(dg,FJe),e(A,TJe),e(A,cg),e(cg,Ere),e(Ere,MJe),e(cg,EJe),e(cg,ES),e(ES,CJe),e(cg,wJe),e(A,AJe),e(A,fg),e(fg,Cre),e(Cre,yJe),e(fg,LJe),e(fg,CS),e(CS,xJe),e(fg,$Je),e(A,kJe),e(A,mg),e(mg,wre),e(wre,SJe),e(mg,RJe),e(mg,wS),e(wS,PJe),e(mg,BJe),e(A,IJe),e(A,gg),e(gg,Are),e(Are,qJe),e(gg,NJe),e(gg,AS),e(AS,jJe),e(gg,DJe),e(A,GJe),e(A,hg),e(hg,yre),e(yre,OJe),e(hg,VJe),e(hg,yS),e(yS,XJe),e(hg,zJe),e(A,WJe),e(A,pg),e(pg,Lre),e(Lre,QJe),e(pg,HJe),e(pg,LS),e(LS,UJe),e(pg,JJe),e(A,YJe),e(A,_g),e(_g,xre),e(xre,KJe),e(_g,ZJe),e(_g,xS),e(xS,eYe),e(_g,oYe),e(A,rYe),e(A,ug),e(ug,$re),e($re,tYe),e(ug,aYe),e(ug,$S),e($S,nYe),e(ug,sYe),e(A,lYe),e(A,bg),e(bg,kre),e(kre,iYe),e(bg,dYe),e(bg,kS),e(kS,cYe),e(bg,fYe),e(Er,mYe),M(vg,Er,null),e(Co,gYe),e(Co,Fg),M(u0,Fg,null),e(Fg,hYe),e(Fg,Sre),e(Sre,pYe),b(f,XIe,u),b(f,Fi,u),e(Fi,Tg),e(Tg,Rre),M(b0,Rre,null),e(Fi,_Ye),e(Fi,Pre),e(Pre,uYe),b(f,zIe,u),b(f,wo,u),M(v0,wo,null),e(wo,bYe),e(wo,F0),e(F0,vYe),e(F0,SS),e(SS,FYe),e(F0,TYe),e(wo,MYe),e(wo,T0),e(T0,EYe),e(T0,Bre),e(Bre,CYe),e(T0,wYe),e(wo,AYe),e(wo,Cr),M(M0,Cr,null),e(Cr,yYe),e(Cr,Ire),e(Ire,LYe),e(Cr,xYe),e(Cr,Aa),e(Aa,$Ye),e(Aa,qre),e(qre,kYe),e(Aa,SYe),e(Aa,Nre),e(Nre,RYe),e(Aa,PYe),e(Aa,jre),e(jre,BYe),e(Aa,IYe),e(Cr,qYe),e(Cr,k),e(k,Sn),e(Sn,Dre),e(Dre,NYe),e(Sn,jYe),e(Sn,RS),e(RS,DYe),e(Sn,GYe),e(Sn,PS),e(PS,OYe),e(Sn,VYe),e(k,XYe),e(k,Rn),e(Rn,Gre),e(Gre,zYe),e(Rn,WYe),e(Rn,BS),e(BS,QYe),e(Rn,HYe),e(Rn,IS),e(IS,UYe),e(Rn,JYe),e(k,YYe),e(k,Pn),e(Pn,Ore),e(Ore,KYe),e(Pn,ZYe),e(Pn,qS),e(qS,eKe),e(Pn,oKe),e(Pn,NS),e(NS,rKe),e(Pn,tKe),e(k,aKe),e(k,Mg),e(Mg,Vre),e(Vre,nKe),e(Mg,sKe),e(Mg,jS),e(jS,lKe),e(Mg,iKe),e(k,dKe),e(k,Bn),e(Bn,Xre),e(Xre,cKe),e(Bn,fKe),e(Bn,DS),e(DS,mKe),e(Bn,gKe),e(Bn,GS),e(GS,hKe),e(Bn,pKe),e(k,_Ke),e(k,Eg),e(Eg,zre),e(zre,uKe),e(Eg,bKe),e(Eg,OS),e(OS,vKe),e(Eg,FKe),e(k,TKe),e(k,Cg),e(Cg,Wre),e(Wre,MKe),e(Cg,EKe),e(Cg,VS),e(VS,CKe),e(Cg,wKe),e(k,AKe),e(k,wg),e(wg,Qre),e(Qre,yKe),e(wg,LKe),e(wg,XS),e(XS,xKe),e(wg,$Ke),e(k,kKe),e(k,In),e(In,Hre),e(Hre,SKe),e(In,RKe),e(In,zS),e(zS,PKe),e(In,BKe),e(In,WS),e(WS,IKe),e(In,qKe),e(k,NKe),e(k,qn),e(qn,Ure),e(Ure,jKe),e(qn,DKe),e(qn,QS),e(QS,GKe),e(qn,OKe),e(qn,HS),e(HS,VKe),e(qn,XKe),e(k,zKe),e(k,Nn),e(Nn,Jre),e(Jre,WKe),e(Nn,QKe),e(Nn,US),e(US,HKe),e(Nn,UKe),e(Nn,JS),e(JS,JKe),e(Nn,YKe),e(k,KKe),e(k,Ag),e(Ag,Yre),e(Yre,ZKe),e(Ag,eZe),e(Ag,YS),e(YS,oZe),e(Ag,rZe),e(k,tZe),e(k,yg),e(yg,Kre),e(Kre,aZe),e(yg,nZe),e(yg,KS),e(KS,sZe),e(yg,lZe),e(k,iZe),e(k,jn),e(jn,Zre),e(Zre,dZe),e(jn,cZe),e(jn,ZS),e(ZS,fZe),e(jn,mZe),e(jn,eR),e(eR,gZe),e(jn,hZe),e(k,pZe),e(k,Lg),e(Lg,ete),e(ete,_Ze),e(Lg,uZe),e(Lg,oR),e(oR,bZe),e(Lg,vZe),e(k,FZe),e(k,Dn),e(Dn,ote),e(ote,TZe),e(Dn,MZe),e(Dn,rR),e(rR,EZe),e(Dn,CZe),e(Dn,tR),e(tR,wZe),e(Dn,AZe),e(k,yZe),e(k,Gn),e(Gn,rte),e(rte,LZe),e(Gn,xZe),e(Gn,aR),e(aR,$Ze),e(Gn,kZe),e(Gn,nR),e(nR,SZe),e(Gn,RZe),e(k,PZe),e(k,On),e(On,tte),e(tte,BZe),e(On,IZe),e(On,sR),e(sR,qZe),e(On,NZe),e(On,lR),e(lR,jZe),e(On,DZe),e(k,GZe),e(k,xg),e(xg,ate),e(ate,OZe),e(xg,VZe),e(xg,iR),e(iR,XZe),e(xg,zZe),e(k,WZe),e(k,Vn),e(Vn,nte),e(nte,QZe),e(Vn,HZe),e(Vn,dR),e(dR,UZe),e(Vn,JZe),e(Vn,cR),e(cR,YZe),e(Vn,KZe),e(k,ZZe),e(k,Xn),e(Xn,ste),e(ste,eeo),e(Xn,oeo),e(Xn,fR),e(fR,reo),e(Xn,teo),e(Xn,mR),e(mR,aeo),e(Xn,neo),e(k,seo),e(k,zn),e(zn,lte),e(lte,leo),e(zn,ieo),e(zn,gR),e(gR,deo),e(zn,ceo),e(zn,hR),e(hR,feo),e(zn,meo),e(k,geo),e(k,Wn),e(Wn,ite),e(ite,heo),e(Wn,peo),e(Wn,pR),e(pR,_eo),e(Wn,ueo),e(Wn,_R),e(_R,beo),e(Wn,veo),e(k,Feo),e(k,Qn),e(Qn,dte),e(dte,Teo),e(Qn,Meo),e(Qn,uR),e(uR,Eeo),e(Qn,Ceo),e(Qn,bR),e(bR,weo),e(Qn,Aeo),e(k,yeo),e(k,Hn),e(Hn,cte),e(cte,Leo),e(Hn,xeo),e(Hn,vR),e(vR,$eo),e(Hn,keo),e(Hn,FR),e(FR,Seo),e(Hn,Reo),e(k,Peo),e(k,$g),e($g,fte),e(fte,Beo),e($g,Ieo),e($g,TR),e(TR,qeo),e($g,Neo),e(k,jeo),e(k,Un),e(Un,mte),e(mte,Deo),e(Un,Geo),e(Un,MR),e(MR,Oeo),e(Un,Veo),e(Un,ER),e(ER,Xeo),e(Un,zeo),e(k,Weo),e(k,kg),e(kg,gte),e(gte,Qeo),e(kg,Heo),e(kg,CR),e(CR,Ueo),e(kg,Jeo),e(k,Yeo),e(k,Jn),e(Jn,hte),e(hte,Keo),e(Jn,Zeo),e(Jn,wR),e(wR,eoo),e(Jn,ooo),e(Jn,AR),e(AR,roo),e(Jn,too),e(k,aoo),e(k,Yn),e(Yn,pte),e(pte,noo),e(Yn,soo),e(Yn,yR),e(yR,loo),e(Yn,ioo),e(Yn,LR),e(LR,doo),e(Yn,coo),e(k,foo),e(k,Kn),e(Kn,_te),e(_te,moo),e(Kn,goo),e(Kn,xR),e(xR,hoo),e(Kn,poo),e(Kn,$R),e($R,_oo),e(Kn,uoo),e(k,boo),e(k,Zn),e(Zn,ute),e(ute,voo),e(Zn,Foo),e(Zn,kR),e(kR,Too),e(Zn,Moo),e(Zn,SR),e(SR,Eoo),e(Zn,Coo),e(k,woo),e(k,es),e(es,bte),e(bte,Aoo),e(es,yoo),e(es,RR),e(RR,Loo),e(es,xoo),e(es,PR),e(PR,$oo),e(es,koo),e(k,Soo),e(k,Sg),e(Sg,vte),e(vte,Roo),e(Sg,Poo),e(Sg,BR),e(BR,Boo),e(Sg,Ioo),e(k,qoo),e(k,os),e(os,Fte),e(Fte,Noo),e(os,joo),e(os,IR),e(IR,Doo),e(os,Goo),e(os,qR),e(qR,Ooo),e(os,Voo),e(k,Xoo),e(k,rs),e(rs,Tte),e(Tte,zoo),e(rs,Woo),e(rs,NR),e(NR,Qoo),e(rs,Hoo),e(rs,jR),e(jR,Uoo),e(rs,Joo),e(k,Yoo),e(k,ts),e(ts,Mte),e(Mte,Koo),e(ts,Zoo),e(ts,DR),e(DR,ero),e(ts,oro),e(ts,GR),e(GR,rro),e(ts,tro),e(k,aro),e(k,as),e(as,Ete),e(Ete,nro),e(as,sro),e(as,OR),e(OR,lro),e(as,iro),e(as,VR),e(VR,dro),e(as,cro),e(k,fro),e(k,ns),e(ns,Cte),e(Cte,mro),e(ns,gro),e(ns,XR),e(XR,hro),e(ns,pro),e(ns,zR),e(zR,_ro),e(ns,uro),e(k,bro),e(k,ss),e(ss,wte),e(wte,vro),e(ss,Fro),e(ss,WR),e(WR,Tro),e(ss,Mro),e(ss,QR),e(QR,Ero),e(ss,Cro),e(k,wro),e(k,Rg),e(Rg,Ate),e(Ate,Aro),e(Rg,yro),e(Rg,HR),e(HR,Lro),e(Rg,xro),e(k,$ro),e(k,ls),e(ls,yte),e(yte,kro),e(ls,Sro),e(ls,UR),e(UR,Rro),e(ls,Pro),e(ls,JR),e(JR,Bro),e(ls,Iro),e(k,qro),e(k,Pg),e(Pg,Lte),e(Lte,Nro),e(Pg,jro),e(Pg,YR),e(YR,Dro),e(Pg,Gro),e(k,Oro),e(k,Bg),e(Bg,xte),e(xte,Vro),e(Bg,Xro),e(Bg,KR),e(KR,zro),e(Bg,Wro),e(k,Qro),e(k,is),e(is,$te),e($te,Hro),e(is,Uro),e(is,ZR),e(ZR,Jro),e(is,Yro),e(is,eP),e(eP,Kro),e(is,Zro),e(k,eto),e(k,ds),e(ds,kte),e(kte,oto),e(ds,rto),e(ds,oP),e(oP,tto),e(ds,ato),e(ds,rP),e(rP,nto),e(ds,sto),e(k,lto),e(k,cs),e(cs,Ste),e(Ste,ito),e(cs,dto),e(cs,tP),e(tP,cto),e(cs,fto),e(cs,aP),e(aP,mto),e(cs,gto),e(k,hto),e(k,Ig),e(Ig,Rte),e(Rte,pto),e(Ig,_to),e(Ig,nP),e(nP,uto),e(Ig,bto),e(k,vto),e(k,fs),e(fs,Pte),e(Pte,Fto),e(fs,Tto),e(fs,sP),e(sP,Mto),e(fs,Eto),e(fs,lP),e(lP,Cto),e(fs,wto),e(k,Ato),e(k,ms),e(ms,Bte),e(Bte,yto),e(ms,Lto),e(ms,iP),e(iP,xto),e(ms,$to),e(ms,dP),e(dP,kto),e(ms,Sto),e(k,Rto),e(k,gs),e(gs,Ite),e(Ite,Pto),e(gs,Bto),e(gs,cP),e(cP,Ito),e(gs,qto),e(gs,fP),e(fP,Nto),e(gs,jto),e(k,Dto),e(k,hs),e(hs,qte),e(qte,Gto),e(hs,Oto),e(hs,mP),e(mP,Vto),e(hs,Xto),e(hs,gP),e(gP,zto),e(hs,Wto),e(k,Qto),e(k,ps),e(ps,Nte),e(Nte,Hto),e(ps,Uto),e(ps,hP),e(hP,Jto),e(ps,Yto),e(ps,pP),e(pP,Kto),e(ps,Zto),e(k,eao),e(k,qg),e(qg,jte),e(jte,oao),e(qg,rao),e(qg,_P),e(_P,tao),e(qg,aao),e(k,nao),e(k,_s),e(_s,Dte),e(Dte,sao),e(_s,lao),e(_s,uP),e(uP,iao),e(_s,dao),e(_s,bP),e(bP,cao),e(_s,fao),e(k,mao),e(k,Ng),e(Ng,Gte),e(Gte,gao),e(Ng,hao),e(Ng,vP),e(vP,pao),e(Ng,_ao),e(k,uao),e(k,jg),e(jg,Ote),e(Ote,bao),e(jg,vao),e(jg,FP),e(FP,Fao),e(jg,Tao),e(k,Mao),e(k,Dg),e(Dg,Vte),e(Vte,Eao),e(Dg,Cao),e(Dg,TP),e(TP,wao),e(Dg,Aao),e(k,yao),e(k,Gg),e(Gg,Xte),e(Xte,Lao),e(Gg,xao),e(Gg,MP),e(MP,$ao),e(Gg,kao),e(k,Sao),e(k,us),e(us,zte),e(zte,Rao),e(us,Pao),e(us,EP),e(EP,Bao),e(us,Iao),e(us,CP),e(CP,qao),e(us,Nao),e(k,jao),e(k,Og),e(Og,Wte),e(Wte,Dao),e(Og,Gao),e(Og,wP),e(wP,Oao),e(Og,Vao),e(k,Xao),e(k,bs),e(bs,Qte),e(Qte,zao),e(bs,Wao),e(bs,AP),e(AP,Qao),e(bs,Hao),e(bs,yP),e(yP,Uao),e(bs,Jao),e(k,Yao),e(k,vs),e(vs,Hte),e(Hte,Kao),e(vs,Zao),e(vs,LP),e(LP,eno),e(vs,ono),e(vs,xP),e(xP,rno),e(vs,tno),e(k,ano),e(k,Fs),e(Fs,Ute),e(Ute,nno),e(Fs,sno),e(Fs,$P),e($P,lno),e(Fs,ino),e(Fs,kP),e(kP,dno),e(Fs,cno),e(k,fno),e(k,Ts),e(Ts,Jte),e(Jte,mno),e(Ts,gno),e(Ts,SP),e(SP,hno),e(Ts,pno),e(Ts,RP),e(RP,_no),e(Ts,uno),e(k,bno),e(k,Ms),e(Ms,Yte),e(Yte,vno),e(Ms,Fno),e(Ms,PP),e(PP,Tno),e(Ms,Mno),e(Ms,BP),e(BP,Eno),e(Ms,Cno),e(k,wno),e(k,Es),e(Es,Kte),e(Kte,Ano),e(Es,yno),e(Es,IP),e(IP,Lno),e(Es,xno),e(Es,qP),e(qP,$no),e(Es,kno),e(k,Sno),e(k,Vg),e(Vg,Zte),e(Zte,Rno),e(Vg,Pno),e(Vg,NP),e(NP,Bno),e(Vg,Ino),e(k,qno),e(k,Xg),e(Xg,eae),e(eae,Nno),e(Xg,jno),e(Xg,jP),e(jP,Dno),e(Xg,Gno),e(k,Ono),e(k,Cs),e(Cs,oae),e(oae,Vno),e(Cs,Xno),e(Cs,DP),e(DP,zno),e(Cs,Wno),e(Cs,GP),e(GP,Qno),e(Cs,Hno),e(k,Uno),e(k,ws),e(ws,rae),e(rae,Jno),e(ws,Yno),e(ws,OP),e(OP,Kno),e(ws,Zno),e(ws,VP),e(VP,eso),e(ws,oso),e(k,rso),e(k,As),e(As,tae),e(tae,tso),e(As,aso),e(As,XP),e(XP,nso),e(As,sso),e(As,zP),e(zP,lso),e(As,iso),e(k,dso),e(k,zg),e(zg,aae),e(aae,cso),e(zg,fso),e(zg,WP),e(WP,mso),e(zg,gso),e(k,hso),e(k,Wg),e(Wg,nae),e(nae,pso),e(Wg,_so),e(Wg,QP),e(QP,uso),e(Wg,bso),e(k,vso),e(k,Qg),e(Qg,sae),e(sae,Fso),e(Qg,Tso),e(Qg,HP),e(HP,Mso),e(Qg,Eso),e(k,Cso),e(k,ys),e(ys,lae),e(lae,wso),e(ys,Aso),e(ys,UP),e(UP,yso),e(ys,Lso),e(ys,JP),e(JP,xso),e(ys,$so),e(k,kso),e(k,Hg),e(Hg,iae),e(iae,Sso),e(Hg,Rso),e(Hg,YP),e(YP,Pso),e(Hg,Bso),e(k,Iso),e(k,Ug),e(Ug,dae),e(dae,qso),e(Ug,Nso),e(Ug,KP),e(KP,jso),e(Ug,Dso),e(k,Gso),e(k,Jg),e(Jg,cae),e(cae,Oso),e(Jg,Vso),e(Jg,ZP),e(ZP,Xso),e(Jg,zso),e(k,Wso),e(k,Ls),e(Ls,fae),e(fae,Qso),e(Ls,Hso),e(Ls,eB),e(eB,Uso),e(Ls,Jso),e(Ls,oB),e(oB,Yso),e(Ls,Kso),e(k,Zso),e(k,Yg),e(Yg,mae),e(mae,elo),e(Yg,olo),e(Yg,rB),e(rB,rlo),e(Yg,tlo),e(k,alo),e(k,Kg),e(Kg,gae),e(gae,nlo),e(Kg,slo),e(Kg,tB),e(tB,llo),e(Kg,ilo),e(k,dlo),e(k,xs),e(xs,hae),e(hae,clo),e(xs,flo),e(xs,aB),e(aB,mlo),e(xs,glo),e(xs,nB),e(nB,hlo),e(xs,plo),e(k,_lo),e(k,$s),e($s,pae),e(pae,ulo),e($s,blo),e($s,sB),e(sB,vlo),e($s,Flo),e($s,lB),e(lB,Tlo),e($s,Mlo),e(k,Elo),e(k,ks),e(ks,_ae),e(_ae,Clo),e(ks,wlo),e(ks,iB),e(iB,Alo),e(ks,ylo),e(ks,dB),e(dB,Llo),e(ks,xlo),e(k,$lo),e(k,Ss),e(Ss,uae),e(uae,klo),e(Ss,Slo),e(Ss,cB),e(cB,Rlo),e(Ss,Plo),e(Ss,fB),e(fB,Blo),e(Ss,Ilo),e(Cr,qlo),M(Zg,Cr,null),e(wo,Nlo),e(wo,eh),M(E0,eh,null),e(eh,jlo),e(eh,bae),e(bae,Dlo),b(f,WIe,u),b(f,Ti,u),e(Ti,oh),e(oh,vae),M(C0,vae,null),e(Ti,Glo),e(Ti,Fae),e(Fae,Olo),b(f,QIe,u),b(f,Ao,u),M(w0,Ao,null),e(Ao,Vlo),e(Ao,A0),e(A0,Xlo),e(A0,mB),e(mB,zlo),e(A0,Wlo),e(Ao,Qlo),e(Ao,y0),e(y0,Hlo),e(y0,Tae),e(Tae,Ulo),e(y0,Jlo),e(Ao,Ylo),e(Ao,He),M(L0,He,null),e(He,Klo),e(He,Mae),e(Mae,Zlo),e(He,eio),e(He,ya),e(ya,oio),e(ya,Eae),e(Eae,rio),e(ya,tio),e(ya,Cae),e(Cae,aio),e(ya,nio),e(ya,wae),e(wae,sio),e(ya,lio),e(He,iio),e(He,Z),e(Z,rh),e(rh,Aae),e(Aae,dio),e(rh,cio),e(rh,gB),e(gB,fio),e(rh,mio),e(Z,gio),e(Z,th),e(th,yae),e(yae,hio),e(th,pio),e(th,hB),e(hB,_io),e(th,uio),e(Z,bio),e(Z,ah),e(ah,Lae),e(Lae,vio),e(ah,Fio),e(ah,pB),e(pB,Tio),e(ah,Mio),e(Z,Eio),e(Z,nh),e(nh,xae),e(xae,Cio),e(nh,wio),e(nh,_B),e(_B,Aio),e(nh,yio),e(Z,Lio),e(Z,sh),e(sh,$ae),e($ae,xio),e(sh,$io),e(sh,uB),e(uB,kio),e(sh,Sio),e(Z,Rio),e(Z,lh),e(lh,kae),e(kae,Pio),e(lh,Bio),e(lh,bB),e(bB,Iio),e(lh,qio),e(Z,Nio),e(Z,ih),e(ih,Sae),e(Sae,jio),e(ih,Dio),e(ih,vB),e(vB,Gio),e(ih,Oio),e(Z,Vio),e(Z,dh),e(dh,Rae),e(Rae,Xio),e(dh,zio),e(dh,FB),e(FB,Wio),e(dh,Qio),e(Z,Hio),e(Z,ch),e(ch,Pae),e(Pae,Uio),e(ch,Jio),e(ch,TB),e(TB,Yio),e(ch,Kio),e(Z,Zio),e(Z,fh),e(fh,Bae),e(Bae,edo),e(fh,odo),e(fh,MB),e(MB,rdo),e(fh,tdo),e(Z,ado),e(Z,mh),e(mh,Iae),e(Iae,ndo),e(mh,sdo),e(mh,EB),e(EB,ldo),e(mh,ido),e(Z,ddo),e(Z,gh),e(gh,qae),e(qae,cdo),e(gh,fdo),e(gh,CB),e(CB,mdo),e(gh,gdo),e(Z,hdo),e(Z,hh),e(hh,Nae),e(Nae,pdo),e(hh,_do),e(hh,wB),e(wB,udo),e(hh,bdo),e(Z,vdo),e(Z,ph),e(ph,jae),e(jae,Fdo),e(ph,Tdo),e(ph,AB),e(AB,Mdo),e(ph,Edo),e(Z,Cdo),e(Z,_h),e(_h,Dae),e(Dae,wdo),e(_h,Ado),e(_h,yB),e(yB,ydo),e(_h,Ldo),e(Z,xdo),e(Z,uh),e(uh,Gae),e(Gae,$do),e(uh,kdo),e(uh,LB),e(LB,Sdo),e(uh,Rdo),e(Z,Pdo),e(Z,bh),e(bh,Oae),e(Oae,Bdo),e(bh,Ido),e(bh,xB),e(xB,qdo),e(bh,Ndo),e(Z,jdo),e(Z,vh),e(vh,Vae),e(Vae,Ddo),e(vh,Gdo),e(vh,$B),e($B,Odo),e(vh,Vdo),e(Z,Xdo),e(Z,Fh),e(Fh,Xae),e(Xae,zdo),e(Fh,Wdo),e(Fh,kB),e(kB,Qdo),e(Fh,Hdo),e(Z,Udo),e(Z,Th),e(Th,zae),e(zae,Jdo),e(Th,Ydo),e(Th,SB),e(SB,Kdo),e(Th,Zdo),e(Z,eco),e(Z,Mh),e(Mh,Wae),e(Wae,oco),e(Mh,rco),e(Mh,RB),e(RB,tco),e(Mh,aco),e(Z,nco),e(Z,Eh),e(Eh,Qae),e(Qae,sco),e(Eh,lco),e(Eh,PB),e(PB,ico),e(Eh,dco),e(Z,cco),e(Z,Ch),e(Ch,Hae),e(Hae,fco),e(Ch,mco),e(Ch,BB),e(BB,gco),e(Ch,hco),e(Z,pco),e(Z,wh),e(wh,Uae),e(Uae,_co),e(wh,uco),e(wh,IB),e(IB,bco),e(wh,vco),e(Z,Fco),e(Z,Ah),e(Ah,Jae),e(Jae,Tco),e(Ah,Mco),e(Ah,qB),e(qB,Eco),e(Ah,Cco),e(Z,wco),e(Z,yh),e(yh,Yae),e(Yae,Aco),e(yh,yco),e(yh,NB),e(NB,Lco),e(yh,xco),e(He,$co),M(Lh,He,null),e(He,kco),M(xh,He,null),e(Ao,Sco),e(Ao,$h),M(x0,$h,null),e($h,Rco),e($h,Kae),e(Kae,Pco),b(f,HIe,u),b(f,Mi,u),e(Mi,kh),e(kh,Zae),M($0,Zae,null),e(Mi,Bco),e(Mi,ene),e(ene,Ico),b(f,UIe,u),b(f,yo,u),M(k0,yo,null),e(yo,qco),e(yo,S0),e(S0,Nco),e(S0,jB),e(jB,jco),e(S0,Dco),e(yo,Gco),e(yo,R0),e(R0,Oco),e(R0,one),e(one,Vco),e(R0,Xco),e(yo,zco),e(yo,Ue),M(P0,Ue,null),e(Ue,Wco),e(Ue,rne),e(rne,Qco),e(Ue,Hco),e(Ue,Ei),e(Ei,Uco),e(Ei,tne),e(tne,Jco),e(Ei,Yco),e(Ei,ane),e(ane,Kco),e(Ei,Zco),e(Ue,efo),e(Ue,pe),e(pe,Sh),e(Sh,nne),e(nne,ofo),e(Sh,rfo),e(Sh,DB),e(DB,tfo),e(Sh,afo),e(pe,nfo),e(pe,Rh),e(Rh,sne),e(sne,sfo),e(Rh,lfo),e(Rh,lne),e(lne,ifo),e(Rh,dfo),e(pe,cfo),e(pe,Ph),e(Ph,ine),e(ine,ffo),e(Ph,mfo),e(Ph,GB),e(GB,gfo),e(Ph,hfo),e(pe,pfo),e(pe,Bh),e(Bh,dne),e(dne,_fo),e(Bh,ufo),e(Bh,OB),e(OB,bfo),e(Bh,vfo),e(pe,Ffo),e(pe,Ih),e(Ih,cne),e(cne,Tfo),e(Ih,Mfo),e(Ih,VB),e(VB,Efo),e(Ih,Cfo),e(pe,wfo),e(pe,qh),e(qh,fne),e(fne,Afo),e(qh,yfo),e(qh,XB),e(XB,Lfo),e(qh,xfo),e(pe,$fo),e(pe,Nh),e(Nh,mne),e(mne,kfo),e(Nh,Sfo),e(Nh,zB),e(zB,Rfo),e(Nh,Pfo),e(pe,Bfo),e(pe,jh),e(jh,gne),e(gne,Ifo),e(jh,qfo),e(jh,WB),e(WB,Nfo),e(jh,jfo),e(pe,Dfo),e(pe,Dh),e(Dh,hne),e(hne,Gfo),e(Dh,Ofo),e(Dh,QB),e(QB,Vfo),e(Dh,Xfo),e(pe,zfo),e(pe,Gh),e(Gh,pne),e(pne,Wfo),e(Gh,Qfo),e(Gh,HB),e(HB,Hfo),e(Gh,Ufo),e(pe,Jfo),e(pe,Oh),e(Oh,_ne),e(_ne,Yfo),e(Oh,Kfo),e(Oh,UB),e(UB,Zfo),e(Oh,emo),e(pe,omo),e(pe,Vh),e(Vh,une),e(une,rmo),e(Vh,tmo),e(Vh,JB),e(JB,amo),e(Vh,nmo),e(pe,smo),e(pe,Xh),e(Xh,bne),e(bne,lmo),e(Xh,imo),e(Xh,YB),e(YB,dmo),e(Xh,cmo),e(pe,fmo),e(pe,zh),e(zh,vne),e(vne,mmo),e(zh,gmo),e(zh,KB),e(KB,hmo),e(zh,pmo),e(pe,_mo),e(pe,Wh),e(Wh,Fne),e(Fne,umo),e(Wh,bmo),e(Wh,ZB),e(ZB,vmo),e(Wh,Fmo),e(pe,Tmo),e(pe,Qh),e(Qh,Tne),e(Tne,Mmo),e(Qh,Emo),e(Qh,eI),e(eI,Cmo),e(Qh,wmo),e(Ue,Amo),M(Hh,Ue,null),e(Ue,ymo),M(Uh,Ue,null),e(yo,Lmo),e(yo,Jh),M(B0,Jh,null),e(Jh,xmo),e(Jh,Mne),e(Mne,$mo),b(f,JIe,u),b(f,Ci,u),e(Ci,Yh),e(Yh,Ene),M(I0,Ene,null),e(Ci,kmo),e(Ci,Cne),e(Cne,Smo),b(f,YIe,u),b(f,Lo,u),M(q0,Lo,null),e(Lo,Rmo),e(Lo,wi),e(wi,Pmo),e(wi,oI),e(oI,Bmo),e(wi,Imo),e(wi,rI),e(rI,qmo),e(wi,Nmo),e(Lo,jmo),e(Lo,N0),e(N0,Dmo),e(N0,wne),e(wne,Gmo),e(N0,Omo),e(Lo,Vmo),e(Lo,tt),M(j0,tt,null),e(tt,Xmo),e(tt,Ane),e(Ane,zmo),e(tt,Wmo),e(tt,Ai),e(Ai,Qmo),e(Ai,yne),e(yne,Hmo),e(Ai,Umo),e(Ai,tI),e(tI,Jmo),e(Ai,Ymo),e(tt,Kmo),M(Kh,tt,null),e(Lo,Zmo),e(Lo,Je),M(D0,Je,null),e(Je,ego),e(Je,Lne),e(Lne,ogo),e(Je,rgo),e(Je,La),e(La,tgo),e(La,xne),e(xne,ago),e(La,ngo),e(La,$ne),e($ne,sgo),e(La,lgo),e(La,kne),e(kne,igo),e(La,dgo),e(Je,cgo),e(Je,x),e(x,Zh),e(Zh,Sne),e(Sne,fgo),e(Zh,mgo),e(Zh,aI),e(aI,ggo),e(Zh,hgo),e(x,pgo),e(x,ep),e(ep,Rne),e(Rne,_go),e(ep,ugo),e(ep,nI),e(nI,bgo),e(ep,vgo),e(x,Fgo),e(x,op),e(op,Pne),e(Pne,Tgo),e(op,Mgo),e(op,sI),e(sI,Ego),e(op,Cgo),e(x,wgo),e(x,rp),e(rp,Bne),e(Bne,Ago),e(rp,ygo),e(rp,lI),e(lI,Lgo),e(rp,xgo),e(x,$go),e(x,tp),e(tp,Ine),e(Ine,kgo),e(tp,Sgo),e(tp,iI),e(iI,Rgo),e(tp,Pgo),e(x,Bgo),e(x,ap),e(ap,qne),e(qne,Igo),e(ap,qgo),e(ap,dI),e(dI,Ngo),e(ap,jgo),e(x,Dgo),e(x,np),e(np,Nne),e(Nne,Ggo),e(np,Ogo),e(np,cI),e(cI,Vgo),e(np,Xgo),e(x,zgo),e(x,sp),e(sp,jne),e(jne,Wgo),e(sp,Qgo),e(sp,fI),e(fI,Hgo),e(sp,Ugo),e(x,Jgo),e(x,lp),e(lp,Dne),e(Dne,Ygo),e(lp,Kgo),e(lp,mI),e(mI,Zgo),e(lp,eho),e(x,oho),e(x,ip),e(ip,Gne),e(Gne,rho),e(ip,tho),e(ip,gI),e(gI,aho),e(ip,nho),e(x,sho),e(x,dp),e(dp,One),e(One,lho),e(dp,iho),e(dp,hI),e(hI,dho),e(dp,cho),e(x,fho),e(x,cp),e(cp,Vne),e(Vne,mho),e(cp,gho),e(cp,pI),e(pI,hho),e(cp,pho),e(x,_ho),e(x,fp),e(fp,Xne),e(Xne,uho),e(fp,bho),e(fp,_I),e(_I,vho),e(fp,Fho),e(x,Tho),e(x,mp),e(mp,zne),e(zne,Mho),e(mp,Eho),e(mp,uI),e(uI,Cho),e(mp,who),e(x,Aho),e(x,gp),e(gp,Wne),e(Wne,yho),e(gp,Lho),e(gp,bI),e(bI,xho),e(gp,$ho),e(x,kho),e(x,hp),e(hp,Qne),e(Qne,Sho),e(hp,Rho),e(hp,vI),e(vI,Pho),e(hp,Bho),e(x,Iho),e(x,pp),e(pp,Hne),e(Hne,qho),e(pp,Nho),e(pp,FI),e(FI,jho),e(pp,Dho),e(x,Gho),e(x,_p),e(_p,Une),e(Une,Oho),e(_p,Vho),e(_p,TI),e(TI,Xho),e(_p,zho),e(x,Who),e(x,up),e(up,Jne),e(Jne,Qho),e(up,Hho),e(up,MI),e(MI,Uho),e(up,Jho),e(x,Yho),e(x,bp),e(bp,Yne),e(Yne,Kho),e(bp,Zho),e(bp,EI),e(EI,epo),e(bp,opo),e(x,rpo),e(x,vp),e(vp,Kne),e(Kne,tpo),e(vp,apo),e(vp,CI),e(CI,npo),e(vp,spo),e(x,lpo),e(x,Fp),e(Fp,Zne),e(Zne,ipo),e(Fp,dpo),e(Fp,wI),e(wI,cpo),e(Fp,fpo),e(x,mpo),e(x,Tp),e(Tp,ese),e(ese,gpo),e(Tp,hpo),e(Tp,AI),e(AI,ppo),e(Tp,_po),e(x,upo),e(x,Mp),e(Mp,ose),e(ose,bpo),e(Mp,vpo),e(Mp,yI),e(yI,Fpo),e(Mp,Tpo),e(x,Mpo),e(x,Ep),e(Ep,rse),e(rse,Epo),e(Ep,Cpo),e(Ep,LI),e(LI,wpo),e(Ep,Apo),e(x,ypo),e(x,Cp),e(Cp,tse),e(tse,Lpo),e(Cp,xpo),e(Cp,xI),e(xI,$po),e(Cp,kpo),e(x,Spo),e(x,wp),e(wp,ase),e(ase,Rpo),e(wp,Ppo),e(wp,$I),e($I,Bpo),e(wp,Ipo),e(x,qpo),e(x,Ap),e(Ap,nse),e(nse,Npo),e(Ap,jpo),e(Ap,kI),e(kI,Dpo),e(Ap,Gpo),e(x,Opo),e(x,yp),e(yp,sse),e(sse,Vpo),e(yp,Xpo),e(yp,SI),e(SI,zpo),e(yp,Wpo),e(x,Qpo),e(x,Lp),e(Lp,lse),e(lse,Hpo),e(Lp,Upo),e(Lp,RI),e(RI,Jpo),e(Lp,Ypo),e(x,Kpo),e(x,xp),e(xp,ise),e(ise,Zpo),e(xp,e_o),e(xp,PI),e(PI,o_o),e(xp,r_o),e(x,t_o),e(x,Rs),e(Rs,dse),e(dse,a_o),e(Rs,n_o),e(Rs,BI),e(BI,s_o),e(Rs,l_o),e(Rs,II),e(II,i_o),e(Rs,d_o),e(x,c_o),e(x,$p),e($p,cse),e(cse,f_o),e($p,m_o),e($p,qI),e(qI,g_o),e($p,h_o),e(x,p_o),e(x,kp),e(kp,fse),e(fse,__o),e(kp,u_o),e(kp,NI),e(NI,b_o),e(kp,v_o),e(x,F_o),e(x,Sp),e(Sp,mse),e(mse,T_o),e(Sp,M_o),e(Sp,jI),e(jI,E_o),e(Sp,C_o),e(x,w_o),e(x,Rp),e(Rp,gse),e(gse,A_o),e(Rp,y_o),e(Rp,DI),e(DI,L_o),e(Rp,x_o),e(x,$_o),e(x,Pp),e(Pp,hse),e(hse,k_o),e(Pp,S_o),e(Pp,GI),e(GI,R_o),e(Pp,P_o),e(x,B_o),e(x,Bp),e(Bp,pse),e(pse,I_o),e(Bp,q_o),e(Bp,OI),e(OI,N_o),e(Bp,j_o),e(x,D_o),e(x,Ip),e(Ip,_se),e(_se,G_o),e(Ip,O_o),e(Ip,VI),e(VI,V_o),e(Ip,X_o),e(x,z_o),e(x,qp),e(qp,use),e(use,W_o),e(qp,Q_o),e(qp,XI),e(XI,H_o),e(qp,U_o),e(x,J_o),e(x,Np),e(Np,bse),e(bse,Y_o),e(Np,K_o),e(Np,zI),e(zI,Z_o),e(Np,euo),e(x,ouo),e(x,jp),e(jp,vse),e(vse,ruo),e(jp,tuo),e(jp,WI),e(WI,auo),e(jp,nuo),e(x,suo),e(x,Dp),e(Dp,Fse),e(Fse,luo),e(Dp,iuo),e(Dp,QI),e(QI,duo),e(Dp,cuo),e(x,fuo),e(x,Gp),e(Gp,Tse),e(Tse,muo),e(Gp,guo),e(Gp,HI),e(HI,huo),e(Gp,puo),e(x,_uo),e(x,Op),e(Op,Mse),e(Mse,uuo),e(Op,buo),e(Op,UI),e(UI,vuo),e(Op,Fuo),e(x,Tuo),e(x,Vp),e(Vp,Ese),e(Ese,Muo),e(Vp,Euo),e(Vp,JI),e(JI,Cuo),e(Vp,wuo),e(x,Auo),e(x,Xp),e(Xp,Cse),e(Cse,yuo),e(Xp,Luo),e(Xp,YI),e(YI,xuo),e(Xp,$uo),e(x,kuo),e(x,zp),e(zp,wse),e(wse,Suo),e(zp,Ruo),e(zp,KI),e(KI,Puo),e(zp,Buo),e(x,Iuo),e(x,Wp),e(Wp,Ase),e(Ase,quo),e(Wp,Nuo),e(Wp,ZI),e(ZI,juo),e(Wp,Duo),e(x,Guo),e(x,Qp),e(Qp,yse),e(yse,Ouo),e(Qp,Vuo),e(Qp,eq),e(eq,Xuo),e(Qp,zuo),e(x,Wuo),e(x,Hp),e(Hp,Lse),e(Lse,Quo),e(Hp,Huo),e(Hp,oq),e(oq,Uuo),e(Hp,Juo),e(x,Yuo),e(x,Up),e(Up,xse),e(xse,Kuo),e(Up,Zuo),e(Up,rq),e(rq,e1o),e(Up,o1o),e(x,r1o),e(x,Jp),e(Jp,$se),e($se,t1o),e(Jp,a1o),e(Jp,tq),e(tq,n1o),e(Jp,s1o),e(x,l1o),e(x,Yp),e(Yp,kse),e(kse,i1o),e(Yp,d1o),e(Yp,aq),e(aq,c1o),e(Yp,f1o),e(x,m1o),e(x,Kp),e(Kp,Sse),e(Sse,g1o),e(Kp,h1o),e(Kp,nq),e(nq,p1o),e(Kp,_1o),e(x,u1o),e(x,Zp),e(Zp,Rse),e(Rse,b1o),e(Zp,v1o),e(Zp,sq),e(sq,F1o),e(Zp,T1o),e(x,M1o),e(x,e_),e(e_,Pse),e(Pse,E1o),e(e_,C1o),e(e_,lq),e(lq,w1o),e(e_,A1o),e(x,y1o),e(x,o_),e(o_,Bse),e(Bse,L1o),e(o_,x1o),e(o_,iq),e(iq,$1o),e(o_,k1o),e(x,S1o),e(x,r_),e(r_,Ise),e(Ise,R1o),e(r_,P1o),e(r_,dq),e(dq,B1o),e(r_,I1o),e(x,q1o),e(x,t_),e(t_,qse),e(qse,N1o),e(t_,j1o),e(t_,cq),e(cq,D1o),e(t_,G1o),e(x,O1o),e(x,a_),e(a_,Nse),e(Nse,V1o),e(a_,X1o),e(a_,fq),e(fq,z1o),e(a_,W1o),e(x,Q1o),e(x,n_),e(n_,jse),e(jse,H1o),e(n_,U1o),e(n_,mq),e(mq,J1o),e(n_,Y1o),e(x,K1o),e(x,s_),e(s_,Dse),e(Dse,Z1o),e(s_,ebo),e(s_,gq),e(gq,obo),e(s_,rbo),e(x,tbo),e(x,l_),e(l_,Gse),e(Gse,abo),e(l_,nbo),e(l_,hq),e(hq,sbo),e(l_,lbo),e(x,ibo),e(x,i_),e(i_,Ose),e(Ose,dbo),e(i_,cbo),e(i_,pq),e(pq,fbo),e(i_,mbo),e(x,gbo),e(x,d_),e(d_,Vse),e(Vse,hbo),e(d_,pbo),e(d_,_q),e(_q,_bo),e(d_,ubo),e(x,bbo),e(x,c_),e(c_,Xse),e(Xse,vbo),e(c_,Fbo),e(c_,uq),e(uq,Tbo),e(c_,Mbo),e(x,Ebo),e(x,f_),e(f_,zse),e(zse,Cbo),e(f_,wbo),e(f_,bq),e(bq,Abo),e(f_,ybo),e(x,Lbo),e(x,m_),e(m_,Wse),e(Wse,xbo),e(m_,$bo),e(m_,vq),e(vq,kbo),e(m_,Sbo),e(x,Rbo),e(x,g_),e(g_,Qse),e(Qse,Pbo),e(g_,Bbo),e(g_,Fq),e(Fq,Ibo),e(g_,qbo),e(x,Nbo),e(x,h_),e(h_,Hse),e(Hse,jbo),e(h_,Dbo),e(h_,Tq),e(Tq,Gbo),e(h_,Obo),e(x,Vbo),e(x,p_),e(p_,Use),e(Use,Xbo),e(p_,zbo),e(p_,Mq),e(Mq,Wbo),e(p_,Qbo),e(x,Hbo),e(x,__),e(__,Jse),e(Jse,Ubo),e(__,Jbo),e(__,Eq),e(Eq,Ybo),e(__,Kbo),e(x,Zbo),e(x,u_),e(u_,Yse),e(Yse,e2o),e(u_,o2o),e(u_,Cq),e(Cq,r2o),e(u_,t2o),e(x,a2o),e(x,b_),e(b_,Kse),e(Kse,n2o),e(b_,s2o),e(b_,wq),e(wq,l2o),e(b_,i2o),e(x,d2o),e(x,v_),e(v_,Zse),e(Zse,c2o),e(v_,f2o),e(v_,Aq),e(Aq,m2o),e(v_,g2o),e(x,h2o),e(x,F_),e(F_,ele),e(ele,p2o),e(F_,_2o),e(F_,yq),e(yq,u2o),e(F_,b2o),e(x,v2o),e(x,T_),e(T_,ole),e(ole,F2o),e(T_,T2o),e(T_,Lq),e(Lq,M2o),e(T_,E2o),e(x,C2o),e(x,M_),e(M_,rle),e(rle,w2o),e(M_,A2o),e(M_,xq),e(xq,y2o),e(M_,L2o),e(x,x2o),e(x,E_),e(E_,tle),e(tle,$2o),e(E_,k2o),e(E_,$q),e($q,S2o),e(E_,R2o),e(x,P2o),e(x,C_),e(C_,ale),e(ale,B2o),e(C_,I2o),e(C_,kq),e(kq,q2o),e(C_,N2o),e(x,j2o),e(x,w_),e(w_,nle),e(nle,D2o),e(w_,G2o),e(w_,Sq),e(Sq,O2o),e(w_,V2o),e(x,X2o),e(x,A_),e(A_,sle),e(sle,z2o),e(A_,W2o),e(A_,Rq),e(Rq,Q2o),e(A_,H2o),e(x,U2o),e(x,y_),e(y_,lle),e(lle,J2o),e(y_,Y2o),e(y_,Pq),e(Pq,K2o),e(y_,Z2o),e(x,evo),e(x,L_),e(L_,ile),e(ile,ovo),e(L_,rvo),e(L_,Bq),e(Bq,tvo),e(L_,avo),e(x,nvo),e(x,x_),e(x_,dle),e(dle,svo),e(x_,lvo),e(x_,Iq),e(Iq,ivo),e(x_,dvo),e(x,cvo),e(x,$_),e($_,cle),e(cle,fvo),e($_,mvo),e($_,qq),e(qq,gvo),e($_,hvo),e(x,pvo),e(x,k_),e(k_,fle),e(fle,_vo),e(k_,uvo),e(k_,Nq),e(Nq,bvo),e(k_,vvo),e(x,Fvo),e(x,S_),e(S_,mle),e(mle,Tvo),e(S_,Mvo),e(S_,jq),e(jq,Evo),e(S_,Cvo),e(x,wvo),e(x,R_),e(R_,gle),e(gle,Avo),e(R_,yvo),e(R_,Dq),e(Dq,Lvo),e(R_,xvo),e(x,$vo),e(x,P_),e(P_,hle),e(hle,kvo),e(P_,Svo),e(P_,Gq),e(Gq,Rvo),e(P_,Pvo),e(x,Bvo),e(x,B_),e(B_,ple),e(ple,Ivo),e(B_,qvo),e(B_,Oq),e(Oq,Nvo),e(B_,jvo),e(x,Dvo),e(x,I_),e(I_,_le),e(_le,Gvo),e(I_,Ovo),e(I_,Vq),e(Vq,Vvo),e(I_,Xvo),e(x,zvo),e(x,q_),e(q_,ule),e(ule,Wvo),e(q_,Qvo),e(q_,Xq),e(Xq,Hvo),e(q_,Uvo),e(x,Jvo),e(x,N_),e(N_,ble),e(ble,Yvo),e(N_,Kvo),e(N_,zq),e(zq,Zvo),e(N_,e3o),e(x,o3o),e(x,j_),e(j_,vle),e(vle,r3o),e(j_,t3o),e(j_,Wq),e(Wq,a3o),e(j_,n3o),e(x,s3o),e(x,D_),e(D_,Fle),e(Fle,l3o),e(D_,i3o),e(D_,Qq),e(Qq,d3o),e(D_,c3o),e(x,f3o),e(x,G_),e(G_,Tle),e(Tle,m3o),e(G_,g3o),e(G_,Hq),e(Hq,h3o),e(G_,p3o),e(x,_3o),e(x,O_),e(O_,Mle),e(Mle,u3o),e(O_,b3o),e(O_,Uq),e(Uq,v3o),e(O_,F3o),e(Je,T3o),e(Je,V_),e(V_,M3o),e(V_,Ele),e(Ele,E3o),e(V_,C3o),e(V_,Cle),e(Cle,w3o),e(Je,A3o),M(X_,Je,null),b(f,KIe,u),b(f,yi,u),e(yi,z_),e(z_,wle),M(G0,wle,null),e(yi,y3o),e(yi,Ale),e(Ale,L3o),b(f,ZIe,u),b(f,xo,u),M(O0,xo,null),e(xo,x3o),e(xo,Li),e(Li,$3o),e(Li,Jq),e(Jq,k3o),e(Li,S3o),e(Li,Yq),e(Yq,R3o),e(Li,P3o),e(xo,B3o),e(xo,V0),e(V0,I3o),e(V0,yle),e(yle,q3o),e(V0,N3o),e(xo,j3o),e(xo,at),M(X0,at,null),e(at,D3o),e(at,Lle),e(Lle,G3o),e(at,O3o),e(at,xi),e(xi,V3o),e(xi,xle),e(xle,X3o),e(xi,z3o),e(xi,Kq),e(Kq,W3o),e(xi,Q3o),e(at,H3o),M(W_,at,null),e(xo,U3o),e(xo,Ye),M(z0,Ye,null),e(Ye,J3o),e(Ye,$le),e($le,Y3o),e(Ye,K3o),e(Ye,xa),e(xa,Z3o),e(xa,kle),e(kle,eFo),e(xa,oFo),e(xa,Sle),e(Sle,rFo),e(xa,tFo),e(xa,Rle),e(Rle,aFo),e(xa,nFo),e(Ye,sFo),e(Ye,G),e(G,Q_),e(Q_,Ple),e(Ple,lFo),e(Q_,iFo),e(Q_,Zq),e(Zq,dFo),e(Q_,cFo),e(G,fFo),e(G,H_),e(H_,Ble),e(Ble,mFo),e(H_,gFo),e(H_,eN),e(eN,hFo),e(H_,pFo),e(G,_Fo),e(G,U_),e(U_,Ile),e(Ile,uFo),e(U_,bFo),e(U_,oN),e(oN,vFo),e(U_,FFo),e(G,TFo),e(G,J_),e(J_,qle),e(qle,MFo),e(J_,EFo),e(J_,rN),e(rN,CFo),e(J_,wFo),e(G,AFo),e(G,Y_),e(Y_,Nle),e(Nle,yFo),e(Y_,LFo),e(Y_,tN),e(tN,xFo),e(Y_,$Fo),e(G,kFo),e(G,K_),e(K_,jle),e(jle,SFo),e(K_,RFo),e(K_,aN),e(aN,PFo),e(K_,BFo),e(G,IFo),e(G,Z_),e(Z_,Dle),e(Dle,qFo),e(Z_,NFo),e(Z_,nN),e(nN,jFo),e(Z_,DFo),e(G,GFo),e(G,eu),e(eu,Gle),e(Gle,OFo),e(eu,VFo),e(eu,sN),e(sN,XFo),e(eu,zFo),e(G,WFo),e(G,ou),e(ou,Ole),e(Ole,QFo),e(ou,HFo),e(ou,lN),e(lN,UFo),e(ou,JFo),e(G,YFo),e(G,ru),e(ru,Vle),e(Vle,KFo),e(ru,ZFo),e(ru,iN),e(iN,eTo),e(ru,oTo),e(G,rTo),e(G,tu),e(tu,Xle),e(Xle,tTo),e(tu,aTo),e(tu,dN),e(dN,nTo),e(tu,sTo),e(G,lTo),e(G,au),e(au,zle),e(zle,iTo),e(au,dTo),e(au,cN),e(cN,cTo),e(au,fTo),e(G,mTo),e(G,nu),e(nu,Wle),e(Wle,gTo),e(nu,hTo),e(nu,fN),e(fN,pTo),e(nu,_To),e(G,uTo),e(G,su),e(su,Qle),e(Qle,bTo),e(su,vTo),e(su,mN),e(mN,FTo),e(su,TTo),e(G,MTo),e(G,lu),e(lu,Hle),e(Hle,ETo),e(lu,CTo),e(lu,gN),e(gN,wTo),e(lu,ATo),e(G,yTo),e(G,iu),e(iu,Ule),e(Ule,LTo),e(iu,xTo),e(iu,hN),e(hN,$To),e(iu,kTo),e(G,STo),e(G,du),e(du,Jle),e(Jle,RTo),e(du,PTo),e(du,pN),e(pN,BTo),e(du,ITo),e(G,qTo),e(G,cu),e(cu,Yle),e(Yle,NTo),e(cu,jTo),e(cu,_N),e(_N,DTo),e(cu,GTo),e(G,OTo),e(G,fu),e(fu,Kle),e(Kle,VTo),e(fu,XTo),e(fu,uN),e(uN,zTo),e(fu,WTo),e(G,QTo),e(G,mu),e(mu,Zle),e(Zle,HTo),e(mu,UTo),e(mu,bN),e(bN,JTo),e(mu,YTo),e(G,KTo),e(G,gu),e(gu,eie),e(eie,ZTo),e(gu,e8o),e(gu,vN),e(vN,o8o),e(gu,r8o),e(G,t8o),e(G,hu),e(hu,oie),e(oie,a8o),e(hu,n8o),e(hu,FN),e(FN,s8o),e(hu,l8o),e(G,i8o),e(G,pu),e(pu,rie),e(rie,d8o),e(pu,c8o),e(pu,TN),e(TN,f8o),e(pu,m8o),e(G,g8o),e(G,_u),e(_u,tie),e(tie,h8o),e(_u,p8o),e(_u,MN),e(MN,_8o),e(_u,u8o),e(G,b8o),e(G,uu),e(uu,aie),e(aie,v8o),e(uu,F8o),e(uu,EN),e(EN,T8o),e(uu,M8o),e(G,E8o),e(G,bu),e(bu,nie),e(nie,C8o),e(bu,w8o),e(bu,CN),e(CN,A8o),e(bu,y8o),e(G,L8o),e(G,vu),e(vu,sie),e(sie,x8o),e(vu,$8o),e(vu,wN),e(wN,k8o),e(vu,S8o),e(G,R8o),e(G,Fu),e(Fu,lie),e(lie,P8o),e(Fu,B8o),e(Fu,AN),e(AN,I8o),e(Fu,q8o),e(G,N8o),e(G,Tu),e(Tu,iie),e(iie,j8o),e(Tu,D8o),e(Tu,yN),e(yN,G8o),e(Tu,O8o),e(G,V8o),e(G,Mu),e(Mu,die),e(die,X8o),e(Mu,z8o),e(Mu,LN),e(LN,W8o),e(Mu,Q8o),e(G,H8o),e(G,Eu),e(Eu,cie),e(cie,U8o),e(Eu,J8o),e(Eu,xN),e(xN,Y8o),e(Eu,K8o),e(G,Z8o),e(G,Cu),e(Cu,fie),e(fie,e7o),e(Cu,o7o),e(Cu,$N),e($N,r7o),e(Cu,t7o),e(G,a7o),e(G,wu),e(wu,mie),e(mie,n7o),e(wu,s7o),e(wu,kN),e(kN,l7o),e(wu,i7o),e(G,d7o),e(G,Au),e(Au,gie),e(gie,c7o),e(Au,f7o),e(Au,SN),e(SN,m7o),e(Au,g7o),e(G,h7o),e(G,yu),e(yu,hie),e(hie,p7o),e(yu,_7o),e(yu,RN),e(RN,u7o),e(yu,b7o),e(G,v7o),e(G,Lu),e(Lu,pie),e(pie,F7o),e(Lu,T7o),e(Lu,PN),e(PN,M7o),e(Lu,E7o),e(G,C7o),e(G,xu),e(xu,_ie),e(_ie,w7o),e(xu,A7o),e(xu,BN),e(BN,y7o),e(xu,L7o),e(G,x7o),e(G,$u),e($u,uie),e(uie,$7o),e($u,k7o),e($u,IN),e(IN,S7o),e($u,R7o),e(G,P7o),e(G,ku),e(ku,bie),e(bie,B7o),e(ku,I7o),e(ku,qN),e(qN,q7o),e(ku,N7o),e(G,j7o),e(G,Su),e(Su,vie),e(vie,D7o),e(Su,G7o),e(Su,NN),e(NN,O7o),e(Su,V7o),e(G,X7o),e(G,Ru),e(Ru,Fie),e(Fie,z7o),e(Ru,W7o),e(Ru,jN),e(jN,Q7o),e(Ru,H7o),e(G,U7o),e(G,Pu),e(Pu,Tie),e(Tie,J7o),e(Pu,Y7o),e(Pu,DN),e(DN,K7o),e(Pu,Z7o),e(Ye,eMo),e(Ye,Bu),e(Bu,oMo),e(Bu,Mie),e(Mie,rMo),e(Bu,tMo),e(Bu,Eie),e(Eie,aMo),e(Ye,nMo),M(Iu,Ye,null),b(f,eqe,u),b(f,$i,u),e($i,qu),e(qu,Cie),M(W0,Cie,null),e($i,sMo),e($i,wie),e(wie,lMo),b(f,oqe,u),b(f,$o,u),M(Q0,$o,null),e($o,iMo),e($o,ki),e(ki,dMo),e(ki,GN),e(GN,cMo),e(ki,fMo),e(ki,ON),e(ON,mMo),e(ki,gMo),e($o,hMo),e($o,H0),e(H0,pMo),e(H0,Aie),e(Aie,_Mo),e(H0,uMo),e($o,bMo),e($o,nt),M(U0,nt,null),e(nt,vMo),e(nt,yie),e(yie,FMo),e(nt,TMo),e(nt,Si),e(Si,MMo),e(Si,Lie),e(Lie,EMo),e(Si,CMo),e(Si,VN),e(VN,wMo),e(Si,AMo),e(nt,yMo),M(Nu,nt,null),e($o,LMo),e($o,Ke),M(J0,Ke,null),e(Ke,xMo),e(Ke,xie),e(xie,$Mo),e(Ke,kMo),e(Ke,$a),e($a,SMo),e($a,$ie),e($ie,RMo),e($a,PMo),e($a,kie),e(kie,BMo),e($a,IMo),e($a,Sie),e(Sie,qMo),e($a,NMo),e(Ke,jMo),e(Ke,z),e(z,ju),e(ju,Rie),e(Rie,DMo),e(ju,GMo),e(ju,XN),e(XN,OMo),e(ju,VMo),e(z,XMo),e(z,Du),e(Du,Pie),e(Pie,zMo),e(Du,WMo),e(Du,zN),e(zN,QMo),e(Du,HMo),e(z,UMo),e(z,Gu),e(Gu,Bie),e(Bie,JMo),e(Gu,YMo),e(Gu,WN),e(WN,KMo),e(Gu,ZMo),e(z,e4o),e(z,Ou),e(Ou,Iie),e(Iie,o4o),e(Ou,r4o),e(Ou,QN),e(QN,t4o),e(Ou,a4o),e(z,n4o),e(z,Vu),e(Vu,qie),e(qie,s4o),e(Vu,l4o),e(Vu,HN),e(HN,i4o),e(Vu,d4o),e(z,c4o),e(z,Xu),e(Xu,Nie),e(Nie,f4o),e(Xu,m4o),e(Xu,UN),e(UN,g4o),e(Xu,h4o),e(z,p4o),e(z,zu),e(zu,jie),e(jie,_4o),e(zu,u4o),e(zu,JN),e(JN,b4o),e(zu,v4o),e(z,F4o),e(z,Wu),e(Wu,Die),e(Die,T4o),e(Wu,M4o),e(Wu,YN),e(YN,E4o),e(Wu,C4o),e(z,w4o),e(z,Qu),e(Qu,Gie),e(Gie,A4o),e(Qu,y4o),e(Qu,KN),e(KN,L4o),e(Qu,x4o),e(z,$4o),e(z,Hu),e(Hu,Oie),e(Oie,k4o),e(Hu,S4o),e(Hu,ZN),e(ZN,R4o),e(Hu,P4o),e(z,B4o),e(z,Uu),e(Uu,Vie),e(Vie,I4o),e(Uu,q4o),e(Uu,ej),e(ej,N4o),e(Uu,j4o),e(z,D4o),e(z,Ju),e(Ju,Xie),e(Xie,G4o),e(Ju,O4o),e(Ju,oj),e(oj,V4o),e(Ju,X4o),e(z,z4o),e(z,Yu),e(Yu,zie),e(zie,W4o),e(Yu,Q4o),e(Yu,rj),e(rj,H4o),e(Yu,U4o),e(z,J4o),e(z,Ku),e(Ku,Wie),e(Wie,Y4o),e(Ku,K4o),e(Ku,tj),e(tj,Z4o),e(Ku,eEo),e(z,oEo),e(z,Zu),e(Zu,Qie),e(Qie,rEo),e(Zu,tEo),e(Zu,aj),e(aj,aEo),e(Zu,nEo),e(z,sEo),e(z,e1),e(e1,Hie),e(Hie,lEo),e(e1,iEo),e(e1,nj),e(nj,dEo),e(e1,cEo),e(z,fEo),e(z,o1),e(o1,Uie),e(Uie,mEo),e(o1,gEo),e(o1,sj),e(sj,hEo),e(o1,pEo),e(z,_Eo),e(z,r1),e(r1,Jie),e(Jie,uEo),e(r1,bEo),e(r1,lj),e(lj,vEo),e(r1,FEo),e(z,TEo),e(z,t1),e(t1,Yie),e(Yie,MEo),e(t1,EEo),e(t1,ij),e(ij,CEo),e(t1,wEo),e(z,AEo),e(z,a1),e(a1,Kie),e(Kie,yEo),e(a1,LEo),e(a1,dj),e(dj,xEo),e(a1,$Eo),e(z,kEo),e(z,n1),e(n1,Zie),e(Zie,SEo),e(n1,REo),e(n1,cj),e(cj,PEo),e(n1,BEo),e(z,IEo),e(z,s1),e(s1,ede),e(ede,qEo),e(s1,NEo),e(s1,fj),e(fj,jEo),e(s1,DEo),e(z,GEo),e(z,l1),e(l1,ode),e(ode,OEo),e(l1,VEo),e(l1,mj),e(mj,XEo),e(l1,zEo),e(z,WEo),e(z,i1),e(i1,rde),e(rde,QEo),e(i1,HEo),e(i1,gj),e(gj,UEo),e(i1,JEo),e(z,YEo),e(z,d1),e(d1,tde),e(tde,KEo),e(d1,ZEo),e(d1,hj),e(hj,eCo),e(d1,oCo),e(z,rCo),e(z,c1),e(c1,ade),e(ade,tCo),e(c1,aCo),e(c1,pj),e(pj,nCo),e(c1,sCo),e(z,lCo),e(z,f1),e(f1,nde),e(nde,iCo),e(f1,dCo),e(f1,_j),e(_j,cCo),e(f1,fCo),e(z,mCo),e(z,m1),e(m1,sde),e(sde,gCo),e(m1,hCo),e(m1,uj),e(uj,pCo),e(m1,_Co),e(z,uCo),e(z,g1),e(g1,lde),e(lde,bCo),e(g1,vCo),e(g1,bj),e(bj,FCo),e(g1,TCo),e(z,MCo),e(z,h1),e(h1,ide),e(ide,ECo),e(h1,CCo),e(h1,vj),e(vj,wCo),e(h1,ACo),e(z,yCo),e(z,p1),e(p1,dde),e(dde,LCo),e(p1,xCo),e(p1,Fj),e(Fj,$Co),e(p1,kCo),e(z,SCo),e(z,_1),e(_1,cde),e(cde,RCo),e(_1,PCo),e(_1,Tj),e(Tj,BCo),e(_1,ICo),e(z,qCo),e(z,u1),e(u1,fde),e(fde,NCo),e(u1,jCo),e(u1,Mj),e(Mj,DCo),e(u1,GCo),e(z,OCo),e(z,b1),e(b1,mde),e(mde,VCo),e(b1,XCo),e(b1,Ej),e(Ej,zCo),e(b1,WCo),e(z,QCo),e(z,v1),e(v1,gde),e(gde,HCo),e(v1,UCo),e(v1,Cj),e(Cj,JCo),e(v1,YCo),e(z,KCo),e(z,F1),e(F1,hde),e(hde,ZCo),e(F1,e5o),e(F1,wj),e(wj,o5o),e(F1,r5o),e(Ke,t5o),e(Ke,T1),e(T1,a5o),e(T1,pde),e(pde,n5o),e(T1,s5o),e(T1,_de),e(_de,l5o),e(Ke,i5o),M(M1,Ke,null),b(f,rqe,u),b(f,Ri,u),e(Ri,E1),e(E1,ude),M(Y0,ude,null),e(Ri,d5o),e(Ri,bde),e(bde,c5o),b(f,tqe,u),b(f,ko,u),M(K0,ko,null),e(ko,f5o),e(ko,Pi),e(Pi,m5o),e(Pi,Aj),e(Aj,g5o),e(Pi,h5o),e(Pi,yj),e(yj,p5o),e(Pi,_5o),e(ko,u5o),e(ko,Z0),e(Z0,b5o),e(Z0,vde),e(vde,v5o),e(Z0,F5o),e(ko,T5o),e(ko,st),M(e6,st,null),e(st,M5o),e(st,Fde),e(Fde,E5o),e(st,C5o),e(st,Bi),e(Bi,w5o),e(Bi,Tde),e(Tde,A5o),e(Bi,y5o),e(Bi,Lj),e(Lj,L5o),e(Bi,x5o),e(st,$5o),M(C1,st,null),e(ko,k5o),e(ko,Ze),M(o6,Ze,null),e(Ze,S5o),e(Ze,Mde),e(Mde,R5o),e(Ze,P5o),e(Ze,ka),e(ka,B5o),e(ka,Ede),e(Ede,I5o),e(ka,q5o),e(ka,Cde),e(Cde,N5o),e(ka,j5o),e(ka,wde),e(wde,D5o),e(ka,G5o),e(Ze,O5o),e(Ze,W),e(W,w1),e(w1,Ade),e(Ade,V5o),e(w1,X5o),e(w1,xj),e(xj,z5o),e(w1,W5o),e(W,Q5o),e(W,A1),e(A1,yde),e(yde,H5o),e(A1,U5o),e(A1,$j),e($j,J5o),e(A1,Y5o),e(W,K5o),e(W,y1),e(y1,Lde),e(Lde,Z5o),e(y1,ewo),e(y1,kj),e(kj,owo),e(y1,rwo),e(W,two),e(W,L1),e(L1,xde),e(xde,awo),e(L1,nwo),e(L1,Sj),e(Sj,swo),e(L1,lwo),e(W,iwo),e(W,x1),e(x1,$de),e($de,dwo),e(x1,cwo),e(x1,Rj),e(Rj,fwo),e(x1,mwo),e(W,gwo),e(W,$1),e($1,kde),e(kde,hwo),e($1,pwo),e($1,Pj),e(Pj,_wo),e($1,uwo),e(W,bwo),e(W,k1),e(k1,Sde),e(Sde,vwo),e(k1,Fwo),e(k1,Bj),e(Bj,Two),e(k1,Mwo),e(W,Ewo),e(W,S1),e(S1,Rde),e(Rde,Cwo),e(S1,wwo),e(S1,Ij),e(Ij,Awo),e(S1,ywo),e(W,Lwo),e(W,R1),e(R1,Pde),e(Pde,xwo),e(R1,$wo),e(R1,qj),e(qj,kwo),e(R1,Swo),e(W,Rwo),e(W,P1),e(P1,Bde),e(Bde,Pwo),e(P1,Bwo),e(P1,Nj),e(Nj,Iwo),e(P1,qwo),e(W,Nwo),e(W,B1),e(B1,Ide),e(Ide,jwo),e(B1,Dwo),e(B1,jj),e(jj,Gwo),e(B1,Owo),e(W,Vwo),e(W,I1),e(I1,qde),e(qde,Xwo),e(I1,zwo),e(I1,Dj),e(Dj,Wwo),e(I1,Qwo),e(W,Hwo),e(W,q1),e(q1,Nde),e(Nde,Uwo),e(q1,Jwo),e(q1,Gj),e(Gj,Ywo),e(q1,Kwo),e(W,Zwo),e(W,N1),e(N1,jde),e(jde,eAo),e(N1,oAo),e(N1,Oj),e(Oj,rAo),e(N1,tAo),e(W,aAo),e(W,j1),e(j1,Dde),e(Dde,nAo),e(j1,sAo),e(j1,Vj),e(Vj,lAo),e(j1,iAo),e(W,dAo),e(W,D1),e(D1,Gde),e(Gde,cAo),e(D1,fAo),e(D1,Xj),e(Xj,mAo),e(D1,gAo),e(W,hAo),e(W,G1),e(G1,Ode),e(Ode,pAo),e(G1,_Ao),e(G1,zj),e(zj,uAo),e(G1,bAo),e(W,vAo),e(W,O1),e(O1,Vde),e(Vde,FAo),e(O1,TAo),e(O1,Wj),e(Wj,MAo),e(O1,EAo),e(W,CAo),e(W,V1),e(V1,Xde),e(Xde,wAo),e(V1,AAo),e(V1,Qj),e(Qj,yAo),e(V1,LAo),e(W,xAo),e(W,X1),e(X1,zde),e(zde,$Ao),e(X1,kAo),e(X1,Hj),e(Hj,SAo),e(X1,RAo),e(W,PAo),e(W,z1),e(z1,Wde),e(Wde,BAo),e(z1,IAo),e(z1,Uj),e(Uj,qAo),e(z1,NAo),e(W,jAo),e(W,W1),e(W1,Qde),e(Qde,DAo),e(W1,GAo),e(W1,Jj),e(Jj,OAo),e(W1,VAo),e(W,XAo),e(W,Q1),e(Q1,Hde),e(Hde,zAo),e(Q1,WAo),e(Q1,Yj),e(Yj,QAo),e(Q1,HAo),e(W,UAo),e(W,H1),e(H1,Ude),e(Ude,JAo),e(H1,YAo),e(H1,Kj),e(Kj,KAo),e(H1,ZAo),e(W,e0o),e(W,U1),e(U1,Jde),e(Jde,o0o),e(U1,r0o),e(U1,Zj),e(Zj,t0o),e(U1,a0o),e(W,n0o),e(W,J1),e(J1,Yde),e(Yde,s0o),e(J1,l0o),e(J1,eD),e(eD,i0o),e(J1,d0o),e(W,c0o),e(W,Y1),e(Y1,Kde),e(Kde,f0o),e(Y1,m0o),e(Y1,oD),e(oD,g0o),e(Y1,h0o),e(W,p0o),e(W,K1),e(K1,Zde),e(Zde,_0o),e(K1,u0o),e(K1,rD),e(rD,b0o),e(K1,v0o),e(W,F0o),e(W,Z1),e(Z1,ece),e(ece,T0o),e(Z1,M0o),e(Z1,tD),e(tD,E0o),e(Z1,C0o),e(W,w0o),e(W,eb),e(eb,oce),e(oce,A0o),e(eb,y0o),e(eb,aD),e(aD,L0o),e(eb,x0o),e(W,$0o),e(W,ob),e(ob,rce),e(rce,k0o),e(ob,S0o),e(ob,tce),e(tce,R0o),e(ob,P0o),e(W,B0o),e(W,rb),e(rb,ace),e(ace,I0o),e(rb,q0o),e(rb,nD),e(nD,N0o),e(rb,j0o),e(W,D0o),e(W,tb),e(tb,nce),e(nce,G0o),e(tb,O0o),e(tb,sD),e(sD,V0o),e(tb,X0o),e(W,z0o),e(W,ab),e(ab,sce),e(sce,W0o),e(ab,Q0o),e(ab,lD),e(lD,H0o),e(ab,U0o),e(W,J0o),e(W,nb),e(nb,lce),e(lce,Y0o),e(nb,K0o),e(nb,iD),e(iD,Z0o),e(nb,e6o),e(Ze,o6o),e(Ze,sb),e(sb,r6o),e(sb,ice),e(ice,t6o),e(sb,a6o),e(sb,dce),e(dce,n6o),e(Ze,s6o),M(lb,Ze,null),b(f,aqe,u),b(f,Ii,u),e(Ii,ib),e(ib,cce),M(r6,cce,null),e(Ii,l6o),e(Ii,fce),e(fce,i6o),b(f,nqe,u),b(f,So,u),M(t6,So,null),e(So,d6o),e(So,qi),e(qi,c6o),e(qi,dD),e(dD,f6o),e(qi,m6o),e(qi,cD),e(cD,g6o),e(qi,h6o),e(So,p6o),e(So,a6),e(a6,_6o),e(a6,mce),e(mce,u6o),e(a6,b6o),e(So,v6o),e(So,lt),M(n6,lt,null),e(lt,F6o),e(lt,gce),e(gce,T6o),e(lt,M6o),e(lt,Ni),e(Ni,E6o),e(Ni,hce),e(hce,C6o),e(Ni,w6o),e(Ni,fD),e(fD,A6o),e(Ni,y6o),e(lt,L6o),M(db,lt,null),e(So,x6o),e(So,eo),M(s6,eo,null),e(eo,$6o),e(eo,pce),e(pce,k6o),e(eo,S6o),e(eo,Sa),e(Sa,R6o),e(Sa,_ce),e(_ce,P6o),e(Sa,B6o),e(Sa,uce),e(uce,I6o),e(Sa,q6o),e(Sa,bce),e(bce,N6o),e(Sa,j6o),e(eo,D6o),e(eo,_e),e(_e,cb),e(cb,vce),e(vce,G6o),e(cb,O6o),e(cb,mD),e(mD,V6o),e(cb,X6o),e(_e,z6o),e(_e,fb),e(fb,Fce),e(Fce,W6o),e(fb,Q6o),e(fb,gD),e(gD,H6o),e(fb,U6o),e(_e,J6o),e(_e,mb),e(mb,Tce),e(Tce,Y6o),e(mb,K6o),e(mb,hD),e(hD,Z6o),e(mb,eyo),e(_e,oyo),e(_e,gb),e(gb,Mce),e(Mce,ryo),e(gb,tyo),e(gb,pD),e(pD,ayo),e(gb,nyo),e(_e,syo),e(_e,hb),e(hb,Ece),e(Ece,lyo),e(hb,iyo),e(hb,_D),e(_D,dyo),e(hb,cyo),e(_e,fyo),e(_e,pb),e(pb,Cce),e(Cce,myo),e(pb,gyo),e(pb,uD),e(uD,hyo),e(pb,pyo),e(_e,_yo),e(_e,_b),e(_b,wce),e(wce,uyo),e(_b,byo),e(_b,bD),e(bD,vyo),e(_b,Fyo),e(_e,Tyo),e(_e,ub),e(ub,Ace),e(Ace,Myo),e(ub,Eyo),e(ub,vD),e(vD,Cyo),e(ub,wyo),e(_e,Ayo),e(_e,bb),e(bb,yce),e(yce,yyo),e(bb,Lyo),e(bb,FD),e(FD,xyo),e(bb,$yo),e(_e,kyo),e(_e,vb),e(vb,Lce),e(Lce,Syo),e(vb,Ryo),e(vb,TD),e(TD,Pyo),e(vb,Byo),e(_e,Iyo),e(_e,Fb),e(Fb,xce),e(xce,qyo),e(Fb,Nyo),e(Fb,MD),e(MD,jyo),e(Fb,Dyo),e(_e,Gyo),e(_e,Tb),e(Tb,$ce),e($ce,Oyo),e(Tb,Vyo),e(Tb,ED),e(ED,Xyo),e(Tb,zyo),e(_e,Wyo),e(_e,Mb),e(Mb,kce),e(kce,Qyo),e(Mb,Hyo),e(Mb,CD),e(CD,Uyo),e(Mb,Jyo),e(_e,Yyo),e(_e,Eb),e(Eb,Sce),e(Sce,Kyo),e(Eb,Zyo),e(Eb,wD),e(wD,eLo),e(Eb,oLo),e(_e,rLo),e(_e,Cb),e(Cb,Rce),e(Rce,tLo),e(Cb,aLo),e(Cb,AD),e(AD,nLo),e(Cb,sLo),e(_e,lLo),e(_e,wb),e(wb,Pce),e(Pce,iLo),e(wb,dLo),e(wb,yD),e(yD,cLo),e(wb,fLo),e(eo,mLo),e(eo,Ab),e(Ab,gLo),e(Ab,Bce),e(Bce,hLo),e(Ab,pLo),e(Ab,Ice),e(Ice,_Lo),e(eo,uLo),M(yb,eo,null),b(f,sqe,u),b(f,ji,u),e(ji,Lb),e(Lb,qce),M(l6,qce,null),e(ji,bLo),e(ji,Nce),e(Nce,vLo),b(f,lqe,u),b(f,Ro,u),M(i6,Ro,null),e(Ro,FLo),e(Ro,Di),e(Di,TLo),e(Di,LD),e(LD,MLo),e(Di,ELo),e(Di,xD),e(xD,CLo),e(Di,wLo),e(Ro,ALo),e(Ro,d6),e(d6,yLo),e(d6,jce),e(jce,LLo),e(d6,xLo),e(Ro,$Lo),e(Ro,it),M(c6,it,null),e(it,kLo),e(it,Dce),e(Dce,SLo),e(it,RLo),e(it,Gi),e(Gi,PLo),e(Gi,Gce),e(Gce,BLo),e(Gi,ILo),e(Gi,$D),e($D,qLo),e(Gi,NLo),e(it,jLo),M(xb,it,null),e(Ro,DLo),e(Ro,oo),M(f6,oo,null),e(oo,GLo),e(oo,Oce),e(Oce,OLo),e(oo,VLo),e(oo,Ra),e(Ra,XLo),e(Ra,Vce),e(Vce,zLo),e(Ra,WLo),e(Ra,Xce),e(Xce,QLo),e(Ra,HLo),e(Ra,zce),e(zce,ULo),e(Ra,JLo),e(oo,YLo),e(oo,q),e(q,$b),e($b,Wce),e(Wce,KLo),e($b,ZLo),e($b,kD),e(kD,exo),e($b,oxo),e(q,rxo),e(q,kb),e(kb,Qce),e(Qce,txo),e(kb,axo),e(kb,SD),e(SD,nxo),e(kb,sxo),e(q,lxo),e(q,Sb),e(Sb,Hce),e(Hce,ixo),e(Sb,dxo),e(Sb,RD),e(RD,cxo),e(Sb,fxo),e(q,mxo),e(q,Rb),e(Rb,Uce),e(Uce,gxo),e(Rb,hxo),e(Rb,PD),e(PD,pxo),e(Rb,_xo),e(q,uxo),e(q,Pb),e(Pb,Jce),e(Jce,bxo),e(Pb,vxo),e(Pb,BD),e(BD,Fxo),e(Pb,Txo),e(q,Mxo),e(q,Bb),e(Bb,Yce),e(Yce,Exo),e(Bb,Cxo),e(Bb,ID),e(ID,wxo),e(Bb,Axo),e(q,yxo),e(q,Ib),e(Ib,Kce),e(Kce,Lxo),e(Ib,xxo),e(Ib,qD),e(qD,$xo),e(Ib,kxo),e(q,Sxo),e(q,qb),e(qb,Zce),e(Zce,Rxo),e(qb,Pxo),e(qb,ND),e(ND,Bxo),e(qb,Ixo),e(q,qxo),e(q,Nb),e(Nb,efe),e(efe,Nxo),e(Nb,jxo),e(Nb,jD),e(jD,Dxo),e(Nb,Gxo),e(q,Oxo),e(q,jb),e(jb,ofe),e(ofe,Vxo),e(jb,Xxo),e(jb,DD),e(DD,zxo),e(jb,Wxo),e(q,Qxo),e(q,Db),e(Db,rfe),e(rfe,Hxo),e(Db,Uxo),e(Db,GD),e(GD,Jxo),e(Db,Yxo),e(q,Kxo),e(q,Gb),e(Gb,tfe),e(tfe,Zxo),e(Gb,e9o),e(Gb,OD),e(OD,o9o),e(Gb,r9o),e(q,t9o),e(q,Ob),e(Ob,afe),e(afe,a9o),e(Ob,n9o),e(Ob,VD),e(VD,s9o),e(Ob,l9o),e(q,i9o),e(q,Vb),e(Vb,nfe),e(nfe,d9o),e(Vb,c9o),e(Vb,XD),e(XD,f9o),e(Vb,m9o),e(q,g9o),e(q,Xb),e(Xb,sfe),e(sfe,h9o),e(Xb,p9o),e(Xb,zD),e(zD,_9o),e(Xb,u9o),e(q,b9o),e(q,zb),e(zb,lfe),e(lfe,v9o),e(zb,F9o),e(zb,WD),e(WD,T9o),e(zb,M9o),e(q,E9o),e(q,Wb),e(Wb,ife),e(ife,C9o),e(Wb,w9o),e(Wb,QD),e(QD,A9o),e(Wb,y9o),e(q,L9o),e(q,Qb),e(Qb,dfe),e(dfe,x9o),e(Qb,$9o),e(Qb,HD),e(HD,k9o),e(Qb,S9o),e(q,R9o),e(q,Hb),e(Hb,cfe),e(cfe,P9o),e(Hb,B9o),e(Hb,UD),e(UD,I9o),e(Hb,q9o),e(q,N9o),e(q,Ub),e(Ub,ffe),e(ffe,j9o),e(Ub,D9o),e(Ub,JD),e(JD,G9o),e(Ub,O9o),e(q,V9o),e(q,Jb),e(Jb,mfe),e(mfe,X9o),e(Jb,z9o),e(Jb,YD),e(YD,W9o),e(Jb,Q9o),e(q,H9o),e(q,Yb),e(Yb,gfe),e(gfe,U9o),e(Yb,J9o),e(Yb,KD),e(KD,Y9o),e(Yb,K9o),e(q,Z9o),e(q,Kb),e(Kb,hfe),e(hfe,e$o),e(Kb,o$o),e(Kb,ZD),e(ZD,r$o),e(Kb,t$o),e(q,a$o),e(q,Zb),e(Zb,pfe),e(pfe,n$o),e(Zb,s$o),e(Zb,eG),e(eG,l$o),e(Zb,i$o),e(q,d$o),e(q,e2),e(e2,_fe),e(_fe,c$o),e(e2,f$o),e(e2,oG),e(oG,m$o),e(e2,g$o),e(q,h$o),e(q,o2),e(o2,ufe),e(ufe,p$o),e(o2,_$o),e(o2,rG),e(rG,u$o),e(o2,b$o),e(q,v$o),e(q,r2),e(r2,bfe),e(bfe,F$o),e(r2,T$o),e(r2,tG),e(tG,M$o),e(r2,E$o),e(q,C$o),e(q,t2),e(t2,vfe),e(vfe,w$o),e(t2,A$o),e(t2,aG),e(aG,y$o),e(t2,L$o),e(q,x$o),e(q,a2),e(a2,Ffe),e(Ffe,$$o),e(a2,k$o),e(a2,nG),e(nG,S$o),e(a2,R$o),e(q,P$o),e(q,n2),e(n2,Tfe),e(Tfe,B$o),e(n2,I$o),e(n2,sG),e(sG,q$o),e(n2,N$o),e(q,j$o),e(q,s2),e(s2,Mfe),e(Mfe,D$o),e(s2,G$o),e(s2,lG),e(lG,O$o),e(s2,V$o),e(q,X$o),e(q,l2),e(l2,Efe),e(Efe,z$o),e(l2,W$o),e(l2,iG),e(iG,Q$o),e(l2,H$o),e(q,U$o),e(q,i2),e(i2,Cfe),e(Cfe,J$o),e(i2,Y$o),e(i2,dG),e(dG,K$o),e(i2,Z$o),e(q,eko),e(q,d2),e(d2,wfe),e(wfe,oko),e(d2,rko),e(d2,cG),e(cG,tko),e(d2,ako),e(q,nko),e(q,c2),e(c2,Afe),e(Afe,sko),e(c2,lko),e(c2,fG),e(fG,iko),e(c2,dko),e(q,cko),e(q,f2),e(f2,yfe),e(yfe,fko),e(f2,mko),e(f2,mG),e(mG,gko),e(f2,hko),e(q,pko),e(q,m2),e(m2,Lfe),e(Lfe,_ko),e(m2,uko),e(m2,gG),e(gG,bko),e(m2,vko),e(q,Fko),e(q,g2),e(g2,xfe),e(xfe,Tko),e(g2,Mko),e(g2,hG),e(hG,Eko),e(g2,Cko),e(q,wko),e(q,h2),e(h2,$fe),e($fe,Ako),e(h2,yko),e(h2,pG),e(pG,Lko),e(h2,xko),e(q,$ko),e(q,p2),e(p2,kfe),e(kfe,kko),e(p2,Sko),e(p2,_G),e(_G,Rko),e(p2,Pko),e(q,Bko),e(q,_2),e(_2,Sfe),e(Sfe,Iko),e(_2,qko),e(_2,uG),e(uG,Nko),e(_2,jko),e(q,Dko),e(q,u2),e(u2,Rfe),e(Rfe,Gko),e(u2,Oko),e(u2,bG),e(bG,Vko),e(u2,Xko),e(q,zko),e(q,b2),e(b2,Pfe),e(Pfe,Wko),e(b2,Qko),e(b2,vG),e(vG,Hko),e(b2,Uko),e(q,Jko),e(q,v2),e(v2,Bfe),e(Bfe,Yko),e(v2,Kko),e(v2,FG),e(FG,Zko),e(v2,eSo),e(q,oSo),e(q,F2),e(F2,Ife),e(Ife,rSo),e(F2,tSo),e(F2,TG),e(TG,aSo),e(F2,nSo),e(q,sSo),e(q,T2),e(T2,qfe),e(qfe,lSo),e(T2,iSo),e(T2,MG),e(MG,dSo),e(T2,cSo),e(oo,fSo),e(oo,M2),e(M2,mSo),e(M2,Nfe),e(Nfe,gSo),e(M2,hSo),e(M2,jfe),e(jfe,pSo),e(oo,_So),M(E2,oo,null),b(f,iqe,u),b(f,Oi,u),e(Oi,C2),e(C2,Dfe),M(m6,Dfe,null),e(Oi,uSo),e(Oi,Gfe),e(Gfe,bSo),b(f,dqe,u),b(f,Po,u),M(g6,Po,null),e(Po,vSo),e(Po,Vi),e(Vi,FSo),e(Vi,EG),e(EG,TSo),e(Vi,MSo),e(Vi,CG),e(CG,ESo),e(Vi,CSo),e(Po,wSo),e(Po,h6),e(h6,ASo),e(h6,Ofe),e(Ofe,ySo),e(h6,LSo),e(Po,xSo),e(Po,dt),M(p6,dt,null),e(dt,$So),e(dt,Vfe),e(Vfe,kSo),e(dt,SSo),e(dt,Xi),e(Xi,RSo),e(Xi,Xfe),e(Xfe,PSo),e(Xi,BSo),e(Xi,wG),e(wG,ISo),e(Xi,qSo),e(dt,NSo),M(w2,dt,null),e(Po,jSo),e(Po,ro),M(_6,ro,null),e(ro,DSo),e(ro,zfe),e(zfe,GSo),e(ro,OSo),e(ro,Pa),e(Pa,VSo),e(Pa,Wfe),e(Wfe,XSo),e(Pa,zSo),e(Pa,Qfe),e(Qfe,WSo),e(Pa,QSo),e(Pa,Hfe),e(Hfe,HSo),e(Pa,USo),e(ro,JSo),e(ro,Y),e(Y,A2),e(A2,Ufe),e(Ufe,YSo),e(A2,KSo),e(A2,AG),e(AG,ZSo),e(A2,eRo),e(Y,oRo),e(Y,y2),e(y2,Jfe),e(Jfe,rRo),e(y2,tRo),e(y2,yG),e(yG,aRo),e(y2,nRo),e(Y,sRo),e(Y,L2),e(L2,Yfe),e(Yfe,lRo),e(L2,iRo),e(L2,LG),e(LG,dRo),e(L2,cRo),e(Y,fRo),e(Y,x2),e(x2,Kfe),e(Kfe,mRo),e(x2,gRo),e(x2,xG),e(xG,hRo),e(x2,pRo),e(Y,_Ro),e(Y,$2),e($2,Zfe),e(Zfe,uRo),e($2,bRo),e($2,$G),e($G,vRo),e($2,FRo),e(Y,TRo),e(Y,k2),e(k2,eme),e(eme,MRo),e(k2,ERo),e(k2,kG),e(kG,CRo),e(k2,wRo),e(Y,ARo),e(Y,S2),e(S2,ome),e(ome,yRo),e(S2,LRo),e(S2,SG),e(SG,xRo),e(S2,$Ro),e(Y,kRo),e(Y,R2),e(R2,rme),e(rme,SRo),e(R2,RRo),e(R2,RG),e(RG,PRo),e(R2,BRo),e(Y,IRo),e(Y,P2),e(P2,tme),e(tme,qRo),e(P2,NRo),e(P2,PG),e(PG,jRo),e(P2,DRo),e(Y,GRo),e(Y,B2),e(B2,ame),e(ame,ORo),e(B2,VRo),e(B2,BG),e(BG,XRo),e(B2,zRo),e(Y,WRo),e(Y,I2),e(I2,nme),e(nme,QRo),e(I2,HRo),e(I2,IG),e(IG,URo),e(I2,JRo),e(Y,YRo),e(Y,q2),e(q2,sme),e(sme,KRo),e(q2,ZRo),e(q2,qG),e(qG,ePo),e(q2,oPo),e(Y,rPo),e(Y,N2),e(N2,lme),e(lme,tPo),e(N2,aPo),e(N2,NG),e(NG,nPo),e(N2,sPo),e(Y,lPo),e(Y,j2),e(j2,ime),e(ime,iPo),e(j2,dPo),e(j2,jG),e(jG,cPo),e(j2,fPo),e(Y,mPo),e(Y,D2),e(D2,dme),e(dme,gPo),e(D2,hPo),e(D2,DG),e(DG,pPo),e(D2,_Po),e(Y,uPo),e(Y,G2),e(G2,cme),e(cme,bPo),e(G2,vPo),e(G2,GG),e(GG,FPo),e(G2,TPo),e(Y,MPo),e(Y,O2),e(O2,fme),e(fme,EPo),e(O2,CPo),e(O2,OG),e(OG,wPo),e(O2,APo),e(Y,yPo),e(Y,V2),e(V2,mme),e(mme,LPo),e(V2,xPo),e(V2,VG),e(VG,$Po),e(V2,kPo),e(Y,SPo),e(Y,X2),e(X2,gme),e(gme,RPo),e(X2,PPo),e(X2,XG),e(XG,BPo),e(X2,IPo),e(Y,qPo),e(Y,z2),e(z2,hme),e(hme,NPo),e(z2,jPo),e(z2,zG),e(zG,DPo),e(z2,GPo),e(Y,OPo),e(Y,W2),e(W2,pme),e(pme,VPo),e(W2,XPo),e(W2,WG),e(WG,zPo),e(W2,WPo),e(Y,QPo),e(Y,Q2),e(Q2,_me),e(_me,HPo),e(Q2,UPo),e(Q2,QG),e(QG,JPo),e(Q2,YPo),e(Y,KPo),e(Y,H2),e(H2,ume),e(ume,ZPo),e(H2,eBo),e(H2,HG),e(HG,oBo),e(H2,rBo),e(Y,tBo),e(Y,U2),e(U2,bme),e(bme,aBo),e(U2,nBo),e(U2,UG),e(UG,sBo),e(U2,lBo),e(Y,iBo),e(Y,J2),e(J2,vme),e(vme,dBo),e(J2,cBo),e(J2,JG),e(JG,fBo),e(J2,mBo),e(Y,gBo),e(Y,Y2),e(Y2,Fme),e(Fme,hBo),e(Y2,pBo),e(Y2,YG),e(YG,_Bo),e(Y2,uBo),e(Y,bBo),e(Y,K2),e(K2,Tme),e(Tme,vBo),e(K2,FBo),e(K2,KG),e(KG,TBo),e(K2,MBo),e(Y,EBo),e(Y,Z2),e(Z2,Mme),e(Mme,CBo),e(Z2,wBo),e(Z2,ZG),e(ZG,ABo),e(Z2,yBo),e(Y,LBo),e(Y,ev),e(ev,Eme),e(Eme,xBo),e(ev,$Bo),e(ev,eO),e(eO,kBo),e(ev,SBo),e(ro,RBo),e(ro,ov),e(ov,PBo),e(ov,Cme),e(Cme,BBo),e(ov,IBo),e(ov,wme),e(wme,qBo),e(ro,NBo),M(rv,ro,null),b(f,cqe,u),b(f,zi,u),e(zi,tv),e(tv,Ame),M(u6,Ame,null),e(zi,jBo),e(zi,yme),e(yme,DBo),b(f,fqe,u),b(f,Bo,u),M(b6,Bo,null),e(Bo,GBo),e(Bo,Wi),e(Wi,OBo),e(Wi,oO),e(oO,VBo),e(Wi,XBo),e(Wi,rO),e(rO,zBo),e(Wi,WBo),e(Bo,QBo),e(Bo,v6),e(v6,HBo),e(v6,Lme),e(Lme,UBo),e(v6,JBo),e(Bo,YBo),e(Bo,ct),M(F6,ct,null),e(ct,KBo),e(ct,xme),e(xme,ZBo),e(ct,eIo),e(ct,Qi),e(Qi,oIo),e(Qi,$me),e($me,rIo),e(Qi,tIo),e(Qi,tO),e(tO,aIo),e(Qi,nIo),e(ct,sIo),M(av,ct,null),e(Bo,lIo),e(Bo,to),M(T6,to,null),e(to,iIo),e(to,kme),e(kme,dIo),e(to,cIo),e(to,Ba),e(Ba,fIo),e(Ba,Sme),e(Sme,mIo),e(Ba,gIo),e(Ba,Rme),e(Rme,hIo),e(Ba,pIo),e(Ba,Pme),e(Pme,_Io),e(Ba,uIo),e(to,bIo),e(to,Yr),e(Yr,nv),e(nv,Bme),e(Bme,vIo),e(nv,FIo),e(nv,aO),e(aO,TIo),e(nv,MIo),e(Yr,EIo),e(Yr,sv),e(sv,Ime),e(Ime,CIo),e(sv,wIo),e(sv,nO),e(nO,AIo),e(sv,yIo),e(Yr,LIo),e(Yr,lv),e(lv,qme),e(qme,xIo),e(lv,$Io),e(lv,sO),e(sO,kIo),e(lv,SIo),e(Yr,RIo),e(Yr,iv),e(iv,Nme),e(Nme,PIo),e(iv,BIo),e(iv,lO),e(lO,IIo),e(iv,qIo),e(Yr,NIo),e(Yr,dv),e(dv,jme),e(jme,jIo),e(dv,DIo),e(dv,iO),e(iO,GIo),e(dv,OIo),e(to,VIo),e(to,cv),e(cv,XIo),e(cv,Dme),e(Dme,zIo),e(cv,WIo),e(cv,Gme),e(Gme,QIo),e(to,HIo),M(fv,to,null),b(f,mqe,u),b(f,Hi,u),e(Hi,mv),e(mv,Ome),M(M6,Ome,null),e(Hi,UIo),e(Hi,Vme),e(Vme,JIo),b(f,gqe,u),b(f,Io,u),M(E6,Io,null),e(Io,YIo),e(Io,Ui),e(Ui,KIo),e(Ui,dO),e(dO,ZIo),e(Ui,eqo),e(Ui,cO),e(cO,oqo),e(Ui,rqo),e(Io,tqo),e(Io,C6),e(C6,aqo),e(C6,Xme),e(Xme,nqo),e(C6,sqo),e(Io,lqo),e(Io,ft),M(w6,ft,null),e(ft,iqo),e(ft,zme),e(zme,dqo),e(ft,cqo),e(ft,Ji),e(Ji,fqo),e(Ji,Wme),e(Wme,mqo),e(Ji,gqo),e(Ji,fO),e(fO,hqo),e(Ji,pqo),e(ft,_qo),M(gv,ft,null),e(Io,uqo),e(Io,ao),M(A6,ao,null),e(ao,bqo),e(ao,Qme),e(Qme,vqo),e(ao,Fqo),e(ao,Ia),e(Ia,Tqo),e(Ia,Hme),e(Hme,Mqo),e(Ia,Eqo),e(Ia,Ume),e(Ume,Cqo),e(Ia,wqo),e(Ia,Jme),e(Jme,Aqo),e(Ia,yqo),e(ao,Lqo),e(ao,U),e(U,hv),e(hv,Yme),e(Yme,xqo),e(hv,$qo),e(hv,mO),e(mO,kqo),e(hv,Sqo),e(U,Rqo),e(U,pv),e(pv,Kme),e(Kme,Pqo),e(pv,Bqo),e(pv,gO),e(gO,Iqo),e(pv,qqo),e(U,Nqo),e(U,_v),e(_v,Zme),e(Zme,jqo),e(_v,Dqo),e(_v,hO),e(hO,Gqo),e(_v,Oqo),e(U,Vqo),e(U,uv),e(uv,ege),e(ege,Xqo),e(uv,zqo),e(uv,pO),e(pO,Wqo),e(uv,Qqo),e(U,Hqo),e(U,bv),e(bv,oge),e(oge,Uqo),e(bv,Jqo),e(bv,_O),e(_O,Yqo),e(bv,Kqo),e(U,Zqo),e(U,vv),e(vv,rge),e(rge,eNo),e(vv,oNo),e(vv,uO),e(uO,rNo),e(vv,tNo),e(U,aNo),e(U,Fv),e(Fv,tge),e(tge,nNo),e(Fv,sNo),e(Fv,bO),e(bO,lNo),e(Fv,iNo),e(U,dNo),e(U,Tv),e(Tv,age),e(age,cNo),e(Tv,fNo),e(Tv,vO),e(vO,mNo),e(Tv,gNo),e(U,hNo),e(U,Mv),e(Mv,nge),e(nge,pNo),e(Mv,_No),e(Mv,FO),e(FO,uNo),e(Mv,bNo),e(U,vNo),e(U,Ev),e(Ev,sge),e(sge,FNo),e(Ev,TNo),e(Ev,TO),e(TO,MNo),e(Ev,ENo),e(U,CNo),e(U,Cv),e(Cv,lge),e(lge,wNo),e(Cv,ANo),e(Cv,MO),e(MO,yNo),e(Cv,LNo),e(U,xNo),e(U,wv),e(wv,ige),e(ige,$No),e(wv,kNo),e(wv,EO),e(EO,SNo),e(wv,RNo),e(U,PNo),e(U,Av),e(Av,dge),e(dge,BNo),e(Av,INo),e(Av,CO),e(CO,qNo),e(Av,NNo),e(U,jNo),e(U,yv),e(yv,cge),e(cge,DNo),e(yv,GNo),e(yv,wO),e(wO,ONo),e(yv,VNo),e(U,XNo),e(U,Lv),e(Lv,fge),e(fge,zNo),e(Lv,WNo),e(Lv,AO),e(AO,QNo),e(Lv,HNo),e(U,UNo),e(U,xv),e(xv,mge),e(mge,JNo),e(xv,YNo),e(xv,yO),e(yO,KNo),e(xv,ZNo),e(U,ejo),e(U,$v),e($v,gge),e(gge,ojo),e($v,rjo),e($v,LO),e(LO,tjo),e($v,ajo),e(U,njo),e(U,kv),e(kv,hge),e(hge,sjo),e(kv,ljo),e(kv,xO),e(xO,ijo),e(kv,djo),e(U,cjo),e(U,Sv),e(Sv,pge),e(pge,fjo),e(Sv,mjo),e(Sv,$O),e($O,gjo),e(Sv,hjo),e(U,pjo),e(U,Rv),e(Rv,_ge),e(_ge,_jo),e(Rv,ujo),e(Rv,kO),e(kO,bjo),e(Rv,vjo),e(U,Fjo),e(U,Pv),e(Pv,uge),e(uge,Tjo),e(Pv,Mjo),e(Pv,SO),e(SO,Ejo),e(Pv,Cjo),e(U,wjo),e(U,Bv),e(Bv,bge),e(bge,Ajo),e(Bv,yjo),e(Bv,RO),e(RO,Ljo),e(Bv,xjo),e(U,$jo),e(U,Iv),e(Iv,vge),e(vge,kjo),e(Iv,Sjo),e(Iv,PO),e(PO,Rjo),e(Iv,Pjo),e(U,Bjo),e(U,qv),e(qv,Fge),e(Fge,Ijo),e(qv,qjo),e(qv,BO),e(BO,Njo),e(qv,jjo),e(U,Djo),e(U,Nv),e(Nv,Tge),e(Tge,Gjo),e(Nv,Ojo),e(Nv,IO),e(IO,Vjo),e(Nv,Xjo),e(U,zjo),e(U,jv),e(jv,Mge),e(Mge,Wjo),e(jv,Qjo),e(jv,qO),e(qO,Hjo),e(jv,Ujo),e(U,Jjo),e(U,Dv),e(Dv,Ege),e(Ege,Yjo),e(Dv,Kjo),e(Dv,NO),e(NO,Zjo),e(Dv,eDo),e(U,oDo),e(U,Gv),e(Gv,Cge),e(Cge,rDo),e(Gv,tDo),e(Gv,jO),e(jO,aDo),e(Gv,nDo),e(U,sDo),e(U,Ov),e(Ov,wge),e(wge,lDo),e(Ov,iDo),e(Ov,DO),e(DO,dDo),e(Ov,cDo),e(U,fDo),e(U,Vv),e(Vv,Age),e(Age,mDo),e(Vv,gDo),e(Vv,GO),e(GO,hDo),e(Vv,pDo),e(U,_Do),e(U,Xv),e(Xv,yge),e(yge,uDo),e(Xv,bDo),e(Xv,OO),e(OO,vDo),e(Xv,FDo),e(U,TDo),e(U,zv),e(zv,Lge),e(Lge,MDo),e(zv,EDo),e(zv,VO),e(VO,CDo),e(zv,wDo),e(U,ADo),e(U,Wv),e(Wv,xge),e(xge,yDo),e(Wv,LDo),e(Wv,XO),e(XO,xDo),e(Wv,$Do),e(ao,kDo),e(ao,Qv),e(Qv,SDo),e(Qv,$ge),e($ge,RDo),e(Qv,PDo),e(Qv,kge),e(kge,BDo),e(ao,IDo),M(Hv,ao,null),b(f,hqe,u),b(f,Yi,u),e(Yi,Uv),e(Uv,Sge),M(y6,Sge,null),e(Yi,qDo),e(Yi,Rge),e(Rge,NDo),b(f,pqe,u),b(f,qo,u),M(L6,qo,null),e(qo,jDo),e(qo,Ki),e(Ki,DDo),e(Ki,zO),e(zO,GDo),e(Ki,ODo),e(Ki,WO),e(WO,VDo),e(Ki,XDo),e(qo,zDo),e(qo,x6),e(x6,WDo),e(x6,Pge),e(Pge,QDo),e(x6,HDo),e(qo,UDo),e(qo,mt),M($6,mt,null),e(mt,JDo),e(mt,Bge),e(Bge,YDo),e(mt,KDo),e(mt,Zi),e(Zi,ZDo),e(Zi,Ige),e(Ige,eGo),e(Zi,oGo),e(Zi,QO),e(QO,rGo),e(Zi,tGo),e(mt,aGo),M(Jv,mt,null),e(qo,nGo),e(qo,no),M(k6,no,null),e(no,sGo),e(no,qge),e(qge,lGo),e(no,iGo),e(no,qa),e(qa,dGo),e(qa,Nge),e(Nge,cGo),e(qa,fGo),e(qa,jge),e(jge,mGo),e(qa,gGo),e(qa,Dge),e(Dge,hGo),e(qa,pGo),e(no,_Go),e(no,V),e(V,Yv),e(Yv,Gge),e(Gge,uGo),e(Yv,bGo),e(Yv,HO),e(HO,vGo),e(Yv,FGo),e(V,TGo),e(V,Kv),e(Kv,Oge),e(Oge,MGo),e(Kv,EGo),e(Kv,UO),e(UO,CGo),e(Kv,wGo),e(V,AGo),e(V,Zv),e(Zv,Vge),e(Vge,yGo),e(Zv,LGo),e(Zv,JO),e(JO,xGo),e(Zv,$Go),e(V,kGo),e(V,e3),e(e3,Xge),e(Xge,SGo),e(e3,RGo),e(e3,YO),e(YO,PGo),e(e3,BGo),e(V,IGo),e(V,o3),e(o3,zge),e(zge,qGo),e(o3,NGo),e(o3,KO),e(KO,jGo),e(o3,DGo),e(V,GGo),e(V,r3),e(r3,Wge),e(Wge,OGo),e(r3,VGo),e(r3,ZO),e(ZO,XGo),e(r3,zGo),e(V,WGo),e(V,t3),e(t3,Qge),e(Qge,QGo),e(t3,HGo),e(t3,eV),e(eV,UGo),e(t3,JGo),e(V,YGo),e(V,a3),e(a3,Hge),e(Hge,KGo),e(a3,ZGo),e(a3,oV),e(oV,eOo),e(a3,oOo),e(V,rOo),e(V,n3),e(n3,Uge),e(Uge,tOo),e(n3,aOo),e(n3,rV),e(rV,nOo),e(n3,sOo),e(V,lOo),e(V,s3),e(s3,Jge),e(Jge,iOo),e(s3,dOo),e(s3,tV),e(tV,cOo),e(s3,fOo),e(V,mOo),e(V,l3),e(l3,Yge),e(Yge,gOo),e(l3,hOo),e(l3,aV),e(aV,pOo),e(l3,_Oo),e(V,uOo),e(V,i3),e(i3,Kge),e(Kge,bOo),e(i3,vOo),e(i3,nV),e(nV,FOo),e(i3,TOo),e(V,MOo),e(V,d3),e(d3,Zge),e(Zge,EOo),e(d3,COo),e(d3,sV),e(sV,wOo),e(d3,AOo),e(V,yOo),e(V,c3),e(c3,ehe),e(ehe,LOo),e(c3,xOo),e(c3,lV),e(lV,$Oo),e(c3,kOo),e(V,SOo),e(V,f3),e(f3,ohe),e(ohe,ROo),e(f3,POo),e(f3,iV),e(iV,BOo),e(f3,IOo),e(V,qOo),e(V,m3),e(m3,rhe),e(rhe,NOo),e(m3,jOo),e(m3,dV),e(dV,DOo),e(m3,GOo),e(V,OOo),e(V,g3),e(g3,the),e(the,VOo),e(g3,XOo),e(g3,cV),e(cV,zOo),e(g3,WOo),e(V,QOo),e(V,h3),e(h3,ahe),e(ahe,HOo),e(h3,UOo),e(h3,fV),e(fV,JOo),e(h3,YOo),e(V,KOo),e(V,p3),e(p3,nhe),e(nhe,ZOo),e(p3,eVo),e(p3,mV),e(mV,oVo),e(p3,rVo),e(V,tVo),e(V,_3),e(_3,she),e(she,aVo),e(_3,nVo),e(_3,gV),e(gV,sVo),e(_3,lVo),e(V,iVo),e(V,u3),e(u3,lhe),e(lhe,dVo),e(u3,cVo),e(u3,hV),e(hV,fVo),e(u3,mVo),e(V,gVo),e(V,b3),e(b3,ihe),e(ihe,hVo),e(b3,pVo),e(b3,pV),e(pV,_Vo),e(b3,uVo),e(V,bVo),e(V,v3),e(v3,dhe),e(dhe,vVo),e(v3,FVo),e(v3,_V),e(_V,TVo),e(v3,MVo),e(V,EVo),e(V,F3),e(F3,che),e(che,CVo),e(F3,wVo),e(F3,uV),e(uV,AVo),e(F3,yVo),e(V,LVo),e(V,T3),e(T3,fhe),e(fhe,xVo),e(T3,$Vo),e(T3,bV),e(bV,kVo),e(T3,SVo),e(V,RVo),e(V,M3),e(M3,mhe),e(mhe,PVo),e(M3,BVo),e(M3,vV),e(vV,IVo),e(M3,qVo),e(V,NVo),e(V,E3),e(E3,ghe),e(ghe,jVo),e(E3,DVo),e(E3,FV),e(FV,GVo),e(E3,OVo),e(V,VVo),e(V,C3),e(C3,hhe),e(hhe,XVo),e(C3,zVo),e(C3,TV),e(TV,WVo),e(C3,QVo),e(V,HVo),e(V,w3),e(w3,phe),e(phe,UVo),e(w3,JVo),e(w3,MV),e(MV,YVo),e(w3,KVo),e(V,ZVo),e(V,A3),e(A3,_he),e(_he,eXo),e(A3,oXo),e(A3,EV),e(EV,rXo),e(A3,tXo),e(V,aXo),e(V,y3),e(y3,uhe),e(uhe,nXo),e(y3,sXo),e(y3,CV),e(CV,lXo),e(y3,iXo),e(V,dXo),e(V,L3),e(L3,bhe),e(bhe,cXo),e(L3,fXo),e(L3,wV),e(wV,mXo),e(L3,gXo),e(V,hXo),e(V,x3),e(x3,vhe),e(vhe,pXo),e(x3,_Xo),e(x3,AV),e(AV,uXo),e(x3,bXo),e(V,vXo),e(V,$3),e($3,Fhe),e(Fhe,FXo),e($3,TXo),e($3,yV),e(yV,MXo),e($3,EXo),e(V,CXo),e(V,k3),e(k3,The),e(The,wXo),e(k3,AXo),e(k3,LV),e(LV,yXo),e(k3,LXo),e(V,xXo),e(V,S3),e(S3,Mhe),e(Mhe,$Xo),e(S3,kXo),e(S3,xV),e(xV,SXo),e(S3,RXo),e(V,PXo),e(V,R3),e(R3,Ehe),e(Ehe,BXo),e(R3,IXo),e(R3,$V),e($V,qXo),e(R3,NXo),e(V,jXo),e(V,P3),e(P3,Che),e(Che,DXo),e(P3,GXo),e(P3,kV),e(kV,OXo),e(P3,VXo),e(V,XXo),e(V,B3),e(B3,whe),e(whe,zXo),e(B3,WXo),e(B3,SV),e(SV,QXo),e(B3,HXo),e(no,UXo),e(no,I3),e(I3,JXo),e(I3,Ahe),e(Ahe,YXo),e(I3,KXo),e(I3,yhe),e(yhe,ZXo),e(no,ezo),M(q3,no,null),b(f,_qe,u),b(f,ed,u),e(ed,N3),e(N3,Lhe),M(S6,Lhe,null),e(ed,ozo),e(ed,xhe),e(xhe,rzo),b(f,uqe,u),b(f,No,u),M(R6,No,null),e(No,tzo),e(No,od),e(od,azo),e(od,RV),e(RV,nzo),e(od,szo),e(od,PV),e(PV,lzo),e(od,izo),e(No,dzo),e(No,P6),e(P6,czo),e(P6,$he),e($he,fzo),e(P6,mzo),e(No,gzo),e(No,gt),M(B6,gt,null),e(gt,hzo),e(gt,khe),e(khe,pzo),e(gt,_zo),e(gt,rd),e(rd,uzo),e(rd,She),e(She,bzo),e(rd,vzo),e(rd,BV),e(BV,Fzo),e(rd,Tzo),e(gt,Mzo),M(j3,gt,null),e(No,Ezo),e(No,so),M(I6,so,null),e(so,Czo),e(so,Rhe),e(Rhe,wzo),e(so,Azo),e(so,Na),e(Na,yzo),e(Na,Phe),e(Phe,Lzo),e(Na,xzo),e(Na,Bhe),e(Bhe,$zo),e(Na,kzo),e(Na,Ihe),e(Ihe,Szo),e(Na,Rzo),e(so,Pzo),e(so,qhe),e(qhe,D3),e(D3,Nhe),e(Nhe,Bzo),e(D3,Izo),e(D3,IV),e(IV,qzo),e(D3,Nzo),e(so,jzo),e(so,G3),e(G3,Dzo),e(G3,jhe),e(jhe,Gzo),e(G3,Ozo),e(G3,Dhe),e(Dhe,Vzo),e(so,Xzo),M(O3,so,null),b(f,bqe,u),b(f,td,u),e(td,V3),e(V3,Ghe),M(q6,Ghe,null),e(td,zzo),e(td,Ohe),e(Ohe,Wzo),b(f,vqe,u),b(f,jo,u),M(N6,jo,null),e(jo,Qzo),e(jo,ad),e(ad,Hzo),e(ad,qV),e(qV,Uzo),e(ad,Jzo),e(ad,NV),e(NV,Yzo),e(ad,Kzo),e(jo,Zzo),e(jo,j6),e(j6,eWo),e(j6,Vhe),e(Vhe,oWo),e(j6,rWo),e(jo,tWo),e(jo,ht),M(D6,ht,null),e(ht,aWo),e(ht,Xhe),e(Xhe,nWo),e(ht,sWo),e(ht,nd),e(nd,lWo),e(nd,zhe),e(zhe,iWo),e(nd,dWo),e(nd,jV),e(jV,cWo),e(nd,fWo),e(ht,mWo),M(X3,ht,null),e(jo,gWo),e(jo,lo),M(G6,lo,null),e(lo,hWo),e(lo,Whe),e(Whe,pWo),e(lo,_Wo),e(lo,ja),e(ja,uWo),e(ja,Qhe),e(Qhe,bWo),e(ja,vWo),e(ja,Hhe),e(Hhe,FWo),e(ja,TWo),e(ja,Uhe),e(Uhe,MWo),e(ja,EWo),e(lo,CWo),e(lo,Fe),e(Fe,z3),e(z3,Jhe),e(Jhe,wWo),e(z3,AWo),e(z3,DV),e(DV,yWo),e(z3,LWo),e(Fe,xWo),e(Fe,W3),e(W3,Yhe),e(Yhe,$Wo),e(W3,kWo),e(W3,GV),e(GV,SWo),e(W3,RWo),e(Fe,PWo),e(Fe,Q3),e(Q3,Khe),e(Khe,BWo),e(Q3,IWo),e(Q3,OV),e(OV,qWo),e(Q3,NWo),e(Fe,jWo),e(Fe,Ps),e(Ps,Zhe),e(Zhe,DWo),e(Ps,GWo),e(Ps,VV),e(VV,OWo),e(Ps,VWo),e(Ps,XV),e(XV,XWo),e(Ps,zWo),e(Fe,WWo),e(Fe,H3),e(H3,epe),e(epe,QWo),e(H3,HWo),e(H3,zV),e(zV,UWo),e(H3,JWo),e(Fe,YWo),e(Fe,pt),e(pt,ope),e(ope,KWo),e(pt,ZWo),e(pt,WV),e(WV,eQo),e(pt,oQo),e(pt,QV),e(QV,rQo),e(pt,tQo),e(pt,HV),e(HV,aQo),e(pt,nQo),e(Fe,sQo),e(Fe,U3),e(U3,rpe),e(rpe,lQo),e(U3,iQo),e(U3,UV),e(UV,dQo),e(U3,cQo),e(Fe,fQo),e(Fe,J3),e(J3,tpe),e(tpe,mQo),e(J3,gQo),e(J3,JV),e(JV,hQo),e(J3,pQo),e(Fe,_Qo),e(Fe,Y3),e(Y3,ape),e(ape,uQo),e(Y3,bQo),e(Y3,YV),e(YV,vQo),e(Y3,FQo),e(Fe,TQo),e(Fe,K3),e(K3,npe),e(npe,MQo),e(K3,EQo),e(K3,KV),e(KV,CQo),e(K3,wQo),e(Fe,AQo),e(Fe,Z3),e(Z3,spe),e(spe,yQo),e(Z3,LQo),e(Z3,ZV),e(ZV,xQo),e(Z3,$Qo),e(Fe,kQo),e(Fe,eF),e(eF,lpe),e(lpe,SQo),e(eF,RQo),e(eF,eX),e(eX,PQo),e(eF,BQo),e(Fe,IQo),e(Fe,oF),e(oF,ipe),e(ipe,qQo),e(oF,NQo),e(oF,oX),e(oX,jQo),e(oF,DQo),e(lo,GQo),e(lo,rF),e(rF,OQo),e(rF,dpe),e(dpe,VQo),e(rF,XQo),e(rF,cpe),e(cpe,zQo),e(lo,WQo),M(tF,lo,null),b(f,Fqe,u),b(f,sd,u),e(sd,aF),e(aF,fpe),M(O6,fpe,null),e(sd,QQo),e(sd,mpe),e(mpe,HQo),b(f,Tqe,u),b(f,Do,u),M(V6,Do,null),e(Do,UQo),e(Do,ld),e(ld,JQo),e(ld,rX),e(rX,YQo),e(ld,KQo),e(ld,tX),e(tX,ZQo),e(ld,eHo),e(Do,oHo),e(Do,X6),e(X6,rHo),e(X6,gpe),e(gpe,tHo),e(X6,aHo),e(Do,nHo),e(Do,_t),M(z6,_t,null),e(_t,sHo),e(_t,hpe),e(hpe,lHo),e(_t,iHo),e(_t,id),e(id,dHo),e(id,ppe),e(ppe,cHo),e(id,fHo),e(id,aX),e(aX,mHo),e(id,gHo),e(_t,hHo),M(nF,_t,null),e(Do,pHo),e(Do,io),M(W6,io,null),e(io,_Ho),e(io,_pe),e(_pe,uHo),e(io,bHo),e(io,Da),e(Da,vHo),e(Da,upe),e(upe,FHo),e(Da,THo),e(Da,bpe),e(bpe,MHo),e(Da,EHo),e(Da,vpe),e(vpe,CHo),e(Da,wHo),e(io,AHo),e(io,Fpe),e(Fpe,sF),e(sF,Tpe),e(Tpe,yHo),e(sF,LHo),e(sF,nX),e(nX,xHo),e(sF,$Ho),e(io,kHo),e(io,lF),e(lF,SHo),e(lF,Mpe),e(Mpe,RHo),e(lF,PHo),e(lF,Epe),e(Epe,BHo),e(io,IHo),M(iF,io,null),b(f,Mqe,u),b(f,dd,u),e(dd,dF),e(dF,Cpe),M(Q6,Cpe,null),e(dd,qHo),e(dd,wpe),e(wpe,NHo),b(f,Eqe,u),b(f,Go,u),M(H6,Go,null),e(Go,jHo),e(Go,cd),e(cd,DHo),e(cd,sX),e(sX,GHo),e(cd,OHo),e(cd,lX),e(lX,VHo),e(cd,XHo),e(Go,zHo),e(Go,U6),e(U6,WHo),e(U6,Ape),e(Ape,QHo),e(U6,HHo),e(Go,UHo),e(Go,ut),M(J6,ut,null),e(ut,JHo),e(ut,ype),e(ype,YHo),e(ut,KHo),e(ut,fd),e(fd,ZHo),e(fd,Lpe),e(Lpe,eUo),e(fd,oUo),e(fd,iX),e(iX,rUo),e(fd,tUo),e(ut,aUo),M(cF,ut,null),e(Go,nUo),e(Go,co),M(Y6,co,null),e(co,sUo),e(co,xpe),e(xpe,lUo),e(co,iUo),e(co,Ga),e(Ga,dUo),e(Ga,$pe),e($pe,cUo),e(Ga,fUo),e(Ga,kpe),e(kpe,mUo),e(Ga,gUo),e(Ga,Spe),e(Spe,hUo),e(Ga,pUo),e(co,_Uo),e(co,ke),e(ke,fF),e(fF,Rpe),e(Rpe,uUo),e(fF,bUo),e(fF,dX),e(dX,vUo),e(fF,FUo),e(ke,TUo),e(ke,mF),e(mF,Ppe),e(Ppe,MUo),e(mF,EUo),e(mF,cX),e(cX,CUo),e(mF,wUo),e(ke,AUo),e(ke,gF),e(gF,Bpe),e(Bpe,yUo),e(gF,LUo),e(gF,fX),e(fX,xUo),e(gF,$Uo),e(ke,kUo),e(ke,hF),e(hF,Ipe),e(Ipe,SUo),e(hF,RUo),e(hF,mX),e(mX,PUo),e(hF,BUo),e(ke,IUo),e(ke,pF),e(pF,qpe),e(qpe,qUo),e(pF,NUo),e(pF,gX),e(gX,jUo),e(pF,DUo),e(ke,GUo),e(ke,_F),e(_F,Npe),e(Npe,OUo),e(_F,VUo),e(_F,hX),e(hX,XUo),e(_F,zUo),e(ke,WUo),e(ke,uF),e(uF,jpe),e(jpe,QUo),e(uF,HUo),e(uF,pX),e(pX,UUo),e(uF,JUo),e(ke,YUo),e(ke,bF),e(bF,Dpe),e(Dpe,KUo),e(bF,ZUo),e(bF,_X),e(_X,eJo),e(bF,oJo),e(ke,rJo),e(ke,vF),e(vF,Gpe),e(Gpe,tJo),e(vF,aJo),e(vF,uX),e(uX,nJo),e(vF,sJo),e(co,lJo),e(co,FF),e(FF,iJo),e(FF,Ope),e(Ope,dJo),e(FF,cJo),e(FF,Vpe),e(Vpe,fJo),e(co,mJo),M(TF,co,null),b(f,Cqe,u),b(f,md,u),e(md,MF),e(MF,Xpe),M(K6,Xpe,null),e(md,gJo),e(md,zpe),e(zpe,hJo),b(f,wqe,u),b(f,Oo,u),M(Z6,Oo,null),e(Oo,pJo),e(Oo,gd),e(gd,_Jo),e(gd,bX),e(bX,uJo),e(gd,bJo),e(gd,vX),e(vX,vJo),e(gd,FJo),e(Oo,TJo),e(Oo,ey),e(ey,MJo),e(ey,Wpe),e(Wpe,EJo),e(ey,CJo),e(Oo,wJo),e(Oo,bt),M(oy,bt,null),e(bt,AJo),e(bt,Qpe),e(Qpe,yJo),e(bt,LJo),e(bt,hd),e(hd,xJo),e(hd,Hpe),e(Hpe,$Jo),e(hd,kJo),e(hd,FX),e(FX,SJo),e(hd,RJo),e(bt,PJo),M(EF,bt,null),e(Oo,BJo),e(Oo,fo),M(ry,fo,null),e(fo,IJo),e(fo,Upe),e(Upe,qJo),e(fo,NJo),e(fo,Oa),e(Oa,jJo),e(Oa,Jpe),e(Jpe,DJo),e(Oa,GJo),e(Oa,Ype),e(Ype,OJo),e(Oa,VJo),e(Oa,Kpe),e(Kpe,XJo),e(Oa,zJo),e(fo,WJo),e(fo,Kr),e(Kr,CF),e(CF,Zpe),e(Zpe,QJo),e(CF,HJo),e(CF,TX),e(TX,UJo),e(CF,JJo),e(Kr,YJo),e(Kr,wF),e(wF,e_e),e(e_e,KJo),e(wF,ZJo),e(wF,MX),e(MX,eYo),e(wF,oYo),e(Kr,rYo),e(Kr,AF),e(AF,o_e),e(o_e,tYo),e(AF,aYo),e(AF,EX),e(EX,nYo),e(AF,sYo),e(Kr,lYo),e(Kr,yF),e(yF,r_e),e(r_e,iYo),e(yF,dYo),e(yF,CX),e(CX,cYo),e(yF,fYo),e(Kr,mYo),e(Kr,LF),e(LF,t_e),e(t_e,gYo),e(LF,hYo),e(LF,wX),e(wX,pYo),e(LF,_Yo),e(fo,uYo),e(fo,xF),e(xF,bYo),e(xF,a_e),e(a_e,vYo),e(xF,FYo),e(xF,n_e),e(n_e,TYo),e(fo,MYo),M($F,fo,null),b(f,Aqe,u),b(f,pd,u),e(pd,kF),e(kF,s_e),M(ty,s_e,null),e(pd,EYo),e(pd,l_e),e(l_e,CYo),b(f,yqe,u),b(f,Vo,u),M(ay,Vo,null),e(Vo,wYo),e(Vo,_d),e(_d,AYo),e(_d,AX),e(AX,yYo),e(_d,LYo),e(_d,yX),e(yX,xYo),e(_d,$Yo),e(Vo,kYo),e(Vo,ny),e(ny,SYo),e(ny,i_e),e(i_e,RYo),e(ny,PYo),e(Vo,BYo),e(Vo,vt),M(sy,vt,null),e(vt,IYo),e(vt,d_e),e(d_e,qYo),e(vt,NYo),e(vt,ud),e(ud,jYo),e(ud,c_e),e(c_e,DYo),e(ud,GYo),e(ud,LX),e(LX,OYo),e(ud,VYo),e(vt,XYo),M(SF,vt,null),e(Vo,zYo),e(Vo,mo),M(ly,mo,null),e(mo,WYo),e(mo,f_e),e(f_e,QYo),e(mo,HYo),e(mo,Va),e(Va,UYo),e(Va,m_e),e(m_e,JYo),e(Va,YYo),e(Va,g_e),e(g_e,KYo),e(Va,ZYo),e(Va,h_e),e(h_e,eKo),e(Va,oKo),e(mo,rKo),e(mo,Se),e(Se,RF),e(RF,p_e),e(p_e,tKo),e(RF,aKo),e(RF,xX),e(xX,nKo),e(RF,sKo),e(Se,lKo),e(Se,PF),e(PF,__e),e(__e,iKo),e(PF,dKo),e(PF,$X),e($X,cKo),e(PF,fKo),e(Se,mKo),e(Se,BF),e(BF,u_e),e(u_e,gKo),e(BF,hKo),e(BF,kX),e(kX,pKo),e(BF,_Ko),e(Se,uKo),e(Se,IF),e(IF,b_e),e(b_e,bKo),e(IF,vKo),e(IF,SX),e(SX,FKo),e(IF,TKo),e(Se,MKo),e(Se,qF),e(qF,v_e),e(v_e,EKo),e(qF,CKo),e(qF,RX),e(RX,wKo),e(qF,AKo),e(Se,yKo),e(Se,NF),e(NF,F_e),e(F_e,LKo),e(NF,xKo),e(NF,PX),e(PX,$Ko),e(NF,kKo),e(Se,SKo),e(Se,jF),e(jF,T_e),e(T_e,RKo),e(jF,PKo),e(jF,BX),e(BX,BKo),e(jF,IKo),e(Se,qKo),e(Se,DF),e(DF,M_e),e(M_e,NKo),e(DF,jKo),e(DF,IX),e(IX,DKo),e(DF,GKo),e(Se,OKo),e(Se,GF),e(GF,E_e),e(E_e,VKo),e(GF,XKo),e(GF,qX),e(qX,zKo),e(GF,WKo),e(mo,QKo),e(mo,OF),e(OF,HKo),e(OF,C_e),e(C_e,UKo),e(OF,JKo),e(OF,w_e),e(w_e,YKo),e(mo,KKo),M(VF,mo,null),b(f,Lqe,u),b(f,bd,u),e(bd,XF),e(XF,A_e),M(iy,A_e,null),e(bd,ZKo),e(bd,y_e),e(y_e,eZo),b(f,xqe,u),b(f,Xo,u),M(dy,Xo,null),e(Xo,oZo),e(Xo,vd),e(vd,rZo),e(vd,NX),e(NX,tZo),e(vd,aZo),e(vd,jX),e(jX,nZo),e(vd,sZo),e(Xo,lZo),e(Xo,cy),e(cy,iZo),e(cy,L_e),e(L_e,dZo),e(cy,cZo),e(Xo,fZo),e(Xo,Ft),M(fy,Ft,null),e(Ft,mZo),e(Ft,x_e),e(x_e,gZo),e(Ft,hZo),e(Ft,Fd),e(Fd,pZo),e(Fd,$_e),e($_e,_Zo),e(Fd,uZo),e(Fd,DX),e(DX,bZo),e(Fd,vZo),e(Ft,FZo),M(zF,Ft,null),e(Xo,TZo),e(Xo,go),M(my,go,null),e(go,MZo),e(go,k_e),e(k_e,EZo),e(go,CZo),e(go,Xa),e(Xa,wZo),e(Xa,S_e),e(S_e,AZo),e(Xa,yZo),e(Xa,R_e),e(R_e,LZo),e(Xa,xZo),e(Xa,P_e),e(P_e,$Zo),e(Xa,kZo),e(go,SZo),e(go,gy),e(gy,WF),e(WF,B_e),e(B_e,RZo),e(WF,PZo),e(WF,GX),e(GX,BZo),e(WF,IZo),e(gy,qZo),e(gy,QF),e(QF,I_e),e(I_e,NZo),e(QF,jZo),e(QF,OX),e(OX,DZo),e(QF,GZo),e(go,OZo),e(go,HF),e(HF,VZo),e(HF,q_e),e(q_e,XZo),e(HF,zZo),e(HF,N_e),e(N_e,WZo),e(go,QZo),M(UF,go,null),b(f,$qe,u),b(f,Td,u),e(Td,JF),e(JF,j_e),M(hy,j_e,null),e(Td,HZo),e(Td,D_e),e(D_e,UZo),b(f,kqe,u),b(f,zo,u),M(py,zo,null),e(zo,JZo),e(zo,Md),e(Md,YZo),e(Md,VX),e(VX,KZo),e(Md,ZZo),e(Md,XX),e(XX,eer),e(Md,oer),e(zo,rer),e(zo,_y),e(_y,ter),e(_y,G_e),e(G_e,aer),e(_y,ner),e(zo,ser),e(zo,Tt),M(uy,Tt,null),e(Tt,ler),e(Tt,O_e),e(O_e,ier),e(Tt,der),e(Tt,Ed),e(Ed,cer),e(Ed,V_e),e(V_e,fer),e(Ed,mer),e(Ed,zX),e(zX,ger),e(Ed,her),e(Tt,per),M(YF,Tt,null),e(zo,_er),e(zo,ho),M(by,ho,null),e(ho,uer),e(ho,X_e),e(X_e,ber),e(ho,ver),e(ho,za),e(za,Fer),e(za,z_e),e(z_e,Ter),e(za,Mer),e(za,W_e),e(W_e,Eer),e(za,Cer),e(za,Q_e),e(Q_e,wer),e(za,Aer),e(ho,yer),e(ho,Zr),e(Zr,KF),e(KF,H_e),e(H_e,Ler),e(KF,xer),e(KF,WX),e(WX,$er),e(KF,ker),e(Zr,Ser),e(Zr,ZF),e(ZF,U_e),e(U_e,Rer),e(ZF,Per),e(ZF,QX),e(QX,Ber),e(ZF,Ier),e(Zr,qer),e(Zr,eT),e(eT,J_e),e(J_e,Ner),e(eT,jer),e(eT,HX),e(HX,Der),e(eT,Ger),e(Zr,Oer),e(Zr,oT),e(oT,Y_e),e(Y_e,Ver),e(oT,Xer),e(oT,UX),e(UX,zer),e(oT,Wer),e(Zr,Qer),e(Zr,rT),e(rT,K_e),e(K_e,Her),e(rT,Uer),e(rT,JX),e(JX,Jer),e(rT,Yer),e(ho,Ker),e(ho,tT),e(tT,Zer),e(tT,Z_e),e(Z_e,eor),e(tT,oor),e(tT,eue),e(eue,ror),e(ho,tor),M(aT,ho,null),b(f,Sqe,u),b(f,Cd,u),e(Cd,nT),e(nT,oue),M(vy,oue,null),e(Cd,aor),e(Cd,rue),e(rue,nor),b(f,Rqe,u),b(f,Wo,u),M(Fy,Wo,null),e(Wo,sor),e(Wo,wd),e(wd,lor),e(wd,YX),e(YX,ior),e(wd,dor),e(wd,KX),e(KX,cor),e(wd,mor),e(Wo,gor),e(Wo,Ty),e(Ty,hor),e(Ty,tue),e(tue,por),e(Ty,_or),e(Wo,uor),e(Wo,Mt),M(My,Mt,null),e(Mt,bor),e(Mt,aue),e(aue,vor),e(Mt,For),e(Mt,Ad),e(Ad,Tor),e(Ad,nue),e(nue,Mor),e(Ad,Eor),e(Ad,ZX),e(ZX,Cor),e(Ad,wor),e(Mt,Aor),M(sT,Mt,null),e(Wo,yor),e(Wo,po),M(Ey,po,null),e(po,Lor),e(po,sue),e(sue,xor),e(po,$or),e(po,Wa),e(Wa,kor),e(Wa,lue),e(lue,Sor),e(Wa,Ror),e(Wa,iue),e(iue,Por),e(Wa,Bor),e(Wa,due),e(due,Ior),e(Wa,qor),e(po,Nor),e(po,yd),e(yd,lT),e(lT,cue),e(cue,jor),e(lT,Dor),e(lT,ez),e(ez,Gor),e(lT,Oor),e(yd,Vor),e(yd,iT),e(iT,fue),e(fue,Xor),e(iT,zor),e(iT,oz),e(oz,Wor),e(iT,Qor),e(yd,Hor),e(yd,dT),e(dT,mue),e(mue,Uor),e(dT,Jor),e(dT,rz),e(rz,Yor),e(dT,Kor),e(po,Zor),e(po,cT),e(cT,err),e(cT,gue),e(gue,orr),e(cT,rrr),e(cT,hue),e(hue,trr),e(po,arr),M(fT,po,null),b(f,Pqe,u),b(f,Ld,u),e(Ld,mT),e(mT,pue),M(Cy,pue,null),e(Ld,nrr),e(Ld,_ue),e(_ue,srr),b(f,Bqe,u),b(f,Qo,u),M(wy,Qo,null),e(Qo,lrr),e(Qo,xd),e(xd,irr),e(xd,tz),e(tz,drr),e(xd,crr),e(xd,az),e(az,frr),e(xd,mrr),e(Qo,grr),e(Qo,Ay),e(Ay,hrr),e(Ay,uue),e(uue,prr),e(Ay,_rr),e(Qo,urr),e(Qo,Et),M(yy,Et,null),e(Et,brr),e(Et,bue),e(bue,vrr),e(Et,Frr),e(Et,$d),e($d,Trr),e($d,vue),e(vue,Mrr),e($d,Err),e($d,nz),e(nz,Crr),e($d,wrr),e(Et,Arr),M(gT,Et,null),e(Qo,yrr),e(Qo,_o),M(Ly,_o,null),e(_o,Lrr),e(_o,Fue),e(Fue,xrr),e(_o,$rr),e(_o,Qa),e(Qa,krr),e(Qa,Tue),e(Tue,Srr),e(Qa,Rrr),e(Qa,Mue),e(Mue,Prr),e(Qa,Brr),e(Qa,Eue),e(Eue,Irr),e(Qa,qrr),e(_o,Nrr),e(_o,xy),e(xy,hT),e(hT,Cue),e(Cue,jrr),e(hT,Drr),e(hT,sz),e(sz,Grr),e(hT,Orr),e(xy,Vrr),e(xy,pT),e(pT,wue),e(wue,Xrr),e(pT,zrr),e(pT,lz),e(lz,Wrr),e(pT,Qrr),e(_o,Hrr),e(_o,_T),e(_T,Urr),e(_T,Aue),e(Aue,Jrr),e(_T,Yrr),e(_T,yue),e(yue,Krr),e(_o,Zrr),M(uT,_o,null),b(f,Iqe,u),b(f,kd,u),e(kd,bT),e(bT,Lue),M($y,Lue,null),e(kd,etr),e(kd,xue),e(xue,otr),b(f,qqe,u),b(f,Ho,u),M(ky,Ho,null),e(Ho,rtr),e(Ho,Sd),e(Sd,ttr),e(Sd,iz),e(iz,atr),e(Sd,ntr),e(Sd,dz),e(dz,str),e(Sd,ltr),e(Ho,itr),e(Ho,Sy),e(Sy,dtr),e(Sy,$ue),e($ue,ctr),e(Sy,ftr),e(Ho,mtr),e(Ho,Ct),M(Ry,Ct,null),e(Ct,gtr),e(Ct,kue),e(kue,htr),e(Ct,ptr),e(Ct,Rd),e(Rd,_tr),e(Rd,Sue),e(Sue,utr),e(Rd,btr),e(Rd,cz),e(cz,vtr),e(Rd,Ftr),e(Ct,Ttr),M(vT,Ct,null),e(Ho,Mtr),e(Ho,uo),M(Py,uo,null),e(uo,Etr),e(uo,Rue),e(Rue,Ctr),e(uo,wtr),e(uo,Ha),e(Ha,Atr),e(Ha,Pue),e(Pue,ytr),e(Ha,Ltr),e(Ha,Bue),e(Bue,xtr),e(Ha,$tr),e(Ha,Iue),e(Iue,ktr),e(Ha,Str),e(uo,Rtr),e(uo,que),e(que,FT),e(FT,Nue),e(Nue,Ptr),e(FT,Btr),e(FT,fz),e(fz,Itr),e(FT,qtr),e(uo,Ntr),e(uo,TT),e(TT,jtr),e(TT,jue),e(jue,Dtr),e(TT,Gtr),e(TT,Due),e(Due,Otr),e(uo,Vtr),M(MT,uo,null),b(f,Nqe,u),b(f,Pd,u),e(Pd,ET),e(ET,Gue),M(By,Gue,null),e(Pd,Xtr),e(Pd,Oue),e(Oue,ztr),b(f,jqe,u),b(f,Uo,u),M(Iy,Uo,null),e(Uo,Wtr),e(Uo,Bd),e(Bd,Qtr),e(Bd,mz),e(mz,Htr),e(Bd,Utr),e(Bd,gz),e(gz,Jtr),e(Bd,Ytr),e(Uo,Ktr),e(Uo,qy),e(qy,Ztr),e(qy,Vue),e(Vue,ear),e(qy,oar),e(Uo,rar),e(Uo,wt),M(Ny,wt,null),e(wt,tar),e(wt,Xue),e(Xue,aar),e(wt,nar),e(wt,Id),e(Id,sar),e(Id,zue),e(zue,lar),e(Id,iar),e(Id,hz),e(hz,dar),e(Id,car),e(wt,far),M(CT,wt,null),e(Uo,mar),e(Uo,bo),M(jy,bo,null),e(bo,gar),e(bo,Wue),e(Wue,har),e(bo,par),e(bo,Ua),e(Ua,_ar),e(Ua,Que),e(Que,uar),e(Ua,bar),e(Ua,Hue),e(Hue,Far),e(Ua,Tar),e(Ua,Uue),e(Uue,Mar),e(Ua,Ear),e(bo,Car),e(bo,Ja),e(Ja,wT),e(wT,Jue),e(Jue,war),e(wT,Aar),e(wT,pz),e(pz,yar),e(wT,Lar),e(Ja,xar),e(Ja,AT),e(AT,Yue),e(Yue,$ar),e(AT,kar),e(AT,_z),e(_z,Sar),e(AT,Rar),e(Ja,Par),e(Ja,yT),e(yT,Kue),e(Kue,Bar),e(yT,Iar),e(yT,uz),e(uz,qar),e(yT,Nar),e(Ja,jar),e(Ja,LT),e(LT,Zue),e(Zue,Dar),e(LT,Gar),e(LT,bz),e(bz,Oar),e(LT,Var),e(bo,Xar),e(bo,xT),e(xT,zar),e(xT,e1e),e(e1e,War),e(xT,Qar),e(xT,o1e),e(o1e,Har),e(bo,Uar),M($T,bo,null),b(f,Dqe,u),b(f,qd,u),e(qd,kT),e(kT,r1e),M(Dy,r1e,null),e(qd,Jar),e(qd,t1e),e(t1e,Yar),b(f,Gqe,u),b(f,Jo,u),M(Gy,Jo,null),e(Jo,Kar),e(Jo,Nd),e(Nd,Zar),e(Nd,vz),e(vz,enr),e(Nd,onr),e(Nd,Fz),e(Fz,rnr),e(Nd,tnr),e(Jo,anr),e(Jo,Oy),e(Oy,nnr),e(Oy,a1e),e(a1e,snr),e(Oy,lnr),e(Jo,inr),e(Jo,At),M(Vy,At,null),e(At,dnr),e(At,n1e),e(n1e,cnr),e(At,fnr),e(At,jd),e(jd,mnr),e(jd,s1e),e(s1e,gnr),e(jd,hnr),e(jd,Tz),e(Tz,pnr),e(jd,_nr),e(At,unr),M(ST,At,null),e(Jo,bnr),e(Jo,vo),M(Xy,vo,null),e(vo,vnr),e(vo,l1e),e(l1e,Fnr),e(vo,Tnr),e(vo,Ya),e(Ya,Mnr),e(Ya,i1e),e(i1e,Enr),e(Ya,Cnr),e(Ya,d1e),e(d1e,wnr),e(Ya,Anr),e(Ya,c1e),e(c1e,ynr),e(Ya,Lnr),e(vo,xnr),e(vo,f1e),e(f1e,RT),e(RT,m1e),e(m1e,$nr),e(RT,knr),e(RT,Mz),e(Mz,Snr),e(RT,Rnr),e(vo,Pnr),e(vo,PT),e(PT,Bnr),e(PT,g1e),e(g1e,Inr),e(PT,qnr),e(PT,h1e),e(h1e,Nnr),e(vo,jnr),M(BT,vo,null),b(f,Oqe,u),b(f,Dd,u),e(Dd,IT),e(IT,p1e),M(zy,p1e,null),e(Dd,Dnr),e(Dd,_1e),e(_1e,Gnr),b(f,Vqe,u),b(f,Yo,u),M(Wy,Yo,null),e(Yo,Onr),e(Yo,Gd),e(Gd,Vnr),e(Gd,Ez),e(Ez,Xnr),e(Gd,znr),e(Gd,Cz),e(Cz,Wnr),e(Gd,Qnr),e(Yo,Hnr),e(Yo,Qy),e(Qy,Unr),e(Qy,u1e),e(u1e,Jnr),e(Qy,Ynr),e(Yo,Knr),e(Yo,yt),M(Hy,yt,null),e(yt,Znr),e(yt,b1e),e(b1e,esr),e(yt,osr),e(yt,Od),e(Od,rsr),e(Od,v1e),e(v1e,tsr),e(Od,asr),e(Od,wz),e(wz,nsr),e(Od,ssr),e(yt,lsr),M(qT,yt,null),e(Yo,isr),e(Yo,wr),M(Uy,wr,null),e(wr,dsr),e(wr,F1e),e(F1e,csr),e(wr,fsr),e(wr,Ka),e(Ka,msr),e(Ka,T1e),e(T1e,gsr),e(Ka,hsr),e(Ka,M1e),e(M1e,psr),e(Ka,_sr),e(Ka,E1e),e(E1e,usr),e(Ka,bsr),e(wr,vsr),e(wr,N),e(N,NT),e(NT,C1e),e(C1e,Fsr),e(NT,Tsr),e(NT,Az),e(Az,Msr),e(NT,Esr),e(N,Csr),e(N,jT),e(jT,w1e),e(w1e,wsr),e(jT,Asr),e(jT,yz),e(yz,ysr),e(jT,Lsr),e(N,xsr),e(N,DT),e(DT,A1e),e(A1e,$sr),e(DT,ksr),e(DT,Lz),e(Lz,Ssr),e(DT,Rsr),e(N,Psr),e(N,GT),e(GT,y1e),e(y1e,Bsr),e(GT,Isr),e(GT,xz),e(xz,qsr),e(GT,Nsr),e(N,jsr),e(N,OT),e(OT,L1e),e(L1e,Dsr),e(OT,Gsr),e(OT,$z),e($z,Osr),e(OT,Vsr),e(N,Xsr),e(N,VT),e(VT,x1e),e(x1e,zsr),e(VT,Wsr),e(VT,kz),e(kz,Qsr),e(VT,Hsr),e(N,Usr),e(N,XT),e(XT,$1e),e($1e,Jsr),e(XT,Ysr),e(XT,Sz),e(Sz,Ksr),e(XT,Zsr),e(N,elr),e(N,zT),e(zT,k1e),e(k1e,olr),e(zT,rlr),e(zT,Rz),e(Rz,tlr),e(zT,alr),e(N,nlr),e(N,WT),e(WT,S1e),e(S1e,slr),e(WT,llr),e(WT,Pz),e(Pz,ilr),e(WT,dlr),e(N,clr),e(N,QT),e(QT,R1e),e(R1e,flr),e(QT,mlr),e(QT,Bz),e(Bz,glr),e(QT,hlr),e(N,plr),e(N,HT),e(HT,P1e),e(P1e,_lr),e(HT,ulr),e(HT,Iz),e(Iz,blr),e(HT,vlr),e(N,Flr),e(N,UT),e(UT,B1e),e(B1e,Tlr),e(UT,Mlr),e(UT,qz),e(qz,Elr),e(UT,Clr),e(N,wlr),e(N,JT),e(JT,I1e),e(I1e,Alr),e(JT,ylr),e(JT,Nz),e(Nz,Llr),e(JT,xlr),e(N,$lr),e(N,YT),e(YT,q1e),e(q1e,klr),e(YT,Slr),e(YT,jz),e(jz,Rlr),e(YT,Plr),e(N,Blr),e(N,KT),e(KT,N1e),e(N1e,Ilr),e(KT,qlr),e(KT,Dz),e(Dz,Nlr),e(KT,jlr),e(N,Dlr),e(N,ZT),e(ZT,j1e),e(j1e,Glr),e(ZT,Olr),e(ZT,Gz),e(Gz,Vlr),e(ZT,Xlr),e(N,zlr),e(N,e8),e(e8,D1e),e(D1e,Wlr),e(e8,Qlr),e(e8,Oz),e(Oz,Hlr),e(e8,Ulr),e(N,Jlr),e(N,Bs),e(Bs,G1e),e(G1e,Ylr),e(Bs,Klr),e(Bs,Vz),e(Vz,Zlr),e(Bs,eir),e(Bs,Xz),e(Xz,oir),e(Bs,rir),e(N,tir),e(N,o8),e(o8,O1e),e(O1e,air),e(o8,nir),e(o8,zz),e(zz,sir),e(o8,lir),e(N,iir),e(N,r8),e(r8,V1e),e(V1e,dir),e(r8,cir),e(r8,Wz),e(Wz,fir),e(r8,mir),e(N,gir),e(N,t8),e(t8,X1e),e(X1e,hir),e(t8,pir),e(t8,Qz),e(Qz,_ir),e(t8,uir),e(N,bir),e(N,a8),e(a8,z1e),e(z1e,vir),e(a8,Fir),e(a8,Hz),e(Hz,Tir),e(a8,Mir),e(N,Eir),e(N,n8),e(n8,W1e),e(W1e,Cir),e(n8,wir),e(n8,Uz),e(Uz,Air),e(n8,yir),e(N,Lir),e(N,s8),e(s8,Q1e),e(Q1e,xir),e(s8,$ir),e(s8,Jz),e(Jz,kir),e(s8,Sir),e(N,Rir),e(N,l8),e(l8,H1e),e(H1e,Pir),e(l8,Bir),e(l8,Yz),e(Yz,Iir),e(l8,qir),e(N,Nir),e(N,i8),e(i8,U1e),e(U1e,jir),e(i8,Dir),e(i8,Kz),e(Kz,Gir),e(i8,Oir),e(N,Vir),e(N,d8),e(d8,J1e),e(J1e,Xir),e(d8,zir),e(d8,Zz),e(Zz,Wir),e(d8,Qir),e(N,Hir),e(N,c8),e(c8,Y1e),e(Y1e,Uir),e(c8,Jir),e(c8,eW),e(eW,Yir),e(c8,Kir),e(N,Zir),e(N,f8),e(f8,K1e),e(K1e,edr),e(f8,odr),e(f8,oW),e(oW,rdr),e(f8,tdr),e(N,adr),e(N,m8),e(m8,Z1e),e(Z1e,ndr),e(m8,sdr),e(m8,rW),e(rW,ldr),e(m8,idr),e(N,ddr),e(N,g8),e(g8,ebe),e(ebe,cdr),e(g8,fdr),e(g8,tW),e(tW,mdr),e(g8,gdr),e(N,hdr),e(N,h8),e(h8,obe),e(obe,pdr),e(h8,_dr),e(h8,aW),e(aW,udr),e(h8,bdr),e(N,vdr),e(N,p8),e(p8,rbe),e(rbe,Fdr),e(p8,Tdr),e(p8,nW),e(nW,Mdr),e(p8,Edr),e(N,Cdr),e(N,_8),e(_8,tbe),e(tbe,wdr),e(_8,Adr),e(_8,sW),e(sW,ydr),e(_8,Ldr),e(N,xdr),e(N,u8),e(u8,abe),e(abe,$dr),e(u8,kdr),e(u8,lW),e(lW,Sdr),e(u8,Rdr),e(N,Pdr),e(N,b8),e(b8,nbe),e(nbe,Bdr),e(b8,Idr),e(b8,iW),e(iW,qdr),e(b8,Ndr),e(N,jdr),e(N,v8),e(v8,sbe),e(sbe,Ddr),e(v8,Gdr),e(v8,dW),e(dW,Odr),e(v8,Vdr),e(N,Xdr),e(N,F8),e(F8,lbe),e(lbe,zdr),e(F8,Wdr),e(F8,cW),e(cW,Qdr),e(F8,Hdr),e(N,Udr),e(N,T8),e(T8,ibe),e(ibe,Jdr),e(T8,Ydr),e(T8,fW),e(fW,Kdr),e(T8,Zdr),e(N,ecr),e(N,M8),e(M8,dbe),e(dbe,ocr),e(M8,rcr),e(M8,mW),e(mW,tcr),e(M8,acr),e(N,ncr),e(N,E8),e(E8,cbe),e(cbe,scr),e(E8,lcr),e(E8,gW),e(gW,icr),e(E8,dcr),e(N,ccr),e(N,C8),e(C8,fbe),e(fbe,fcr),e(C8,mcr),e(C8,hW),e(hW,gcr),e(C8,hcr),e(N,pcr),e(N,w8),e(w8,mbe),e(mbe,_cr),e(w8,ucr),e(w8,pW),e(pW,bcr),e(w8,vcr),e(N,Fcr),e(N,A8),e(A8,gbe),e(gbe,Tcr),e(A8,Mcr),e(A8,_W),e(_W,Ecr),e(A8,Ccr),e(N,wcr),e(N,y8),e(y8,hbe),e(hbe,Acr),e(y8,ycr),e(y8,uW),e(uW,Lcr),e(y8,xcr),e(N,$cr),e(N,L8),e(L8,pbe),e(pbe,kcr),e(L8,Scr),e(L8,bW),e(bW,Rcr),e(L8,Pcr),e(wr,Bcr),M(x8,wr,null),b(f,Xqe,u),b(f,Vd,u),e(Vd,$8),e($8,_be),M(Jy,_be,null),e(Vd,Icr),e(Vd,ube),e(ube,qcr),b(f,zqe,u),b(f,Ko,u),M(Yy,Ko,null),e(Ko,Ncr),e(Ko,Xd),e(Xd,jcr),e(Xd,vW),e(vW,Dcr),e(Xd,Gcr),e(Xd,FW),e(FW,Ocr),e(Xd,Vcr),e(Ko,Xcr),e(Ko,Ky),e(Ky,zcr),e(Ky,bbe),e(bbe,Wcr),e(Ky,Qcr),e(Ko,Hcr),e(Ko,Lt),M(Zy,Lt,null),e(Lt,Ucr),e(Lt,vbe),e(vbe,Jcr),e(Lt,Ycr),e(Lt,zd),e(zd,Kcr),e(zd,Fbe),e(Fbe,Zcr),e(zd,efr),e(zd,TW),e(TW,ofr),e(zd,rfr),e(Lt,tfr),M(k8,Lt,null),e(Ko,afr),e(Ko,Ar),M(eL,Ar,null),e(Ar,nfr),e(Ar,Tbe),e(Tbe,sfr),e(Ar,lfr),e(Ar,Za),e(Za,ifr),e(Za,Mbe),e(Mbe,dfr),e(Za,cfr),e(Za,Ebe),e(Ebe,ffr),e(Za,mfr),e(Za,Cbe),e(Cbe,gfr),e(Za,hfr),e(Ar,pfr),e(Ar,se),e(se,S8),e(S8,wbe),e(wbe,_fr),e(S8,ufr),e(S8,MW),e(MW,bfr),e(S8,vfr),e(se,Ffr),e(se,R8),e(R8,Abe),e(Abe,Tfr),e(R8,Mfr),e(R8,EW),e(EW,Efr),e(R8,Cfr),e(se,wfr),e(se,P8),e(P8,ybe),e(ybe,Afr),e(P8,yfr),e(P8,CW),e(CW,Lfr),e(P8,xfr),e(se,$fr),e(se,B8),e(B8,Lbe),e(Lbe,kfr),e(B8,Sfr),e(B8,wW),e(wW,Rfr),e(B8,Pfr),e(se,Bfr),e(se,I8),e(I8,xbe),e(xbe,Ifr),e(I8,qfr),e(I8,AW),e(AW,Nfr),e(I8,jfr),e(se,Dfr),e(se,q8),e(q8,$be),e($be,Gfr),e(q8,Ofr),e(q8,yW),e(yW,Vfr),e(q8,Xfr),e(se,zfr),e(se,N8),e(N8,kbe),e(kbe,Wfr),e(N8,Qfr),e(N8,LW),e(LW,Hfr),e(N8,Ufr),e(se,Jfr),e(se,j8),e(j8,Sbe),e(Sbe,Yfr),e(j8,Kfr),e(j8,xW),e(xW,Zfr),e(j8,emr),e(se,omr),e(se,D8),e(D8,Rbe),e(Rbe,rmr),e(D8,tmr),e(D8,$W),e($W,amr),e(D8,nmr),e(se,smr),e(se,G8),e(G8,Pbe),e(Pbe,lmr),e(G8,imr),e(G8,kW),e(kW,dmr),e(G8,cmr),e(se,fmr),e(se,O8),e(O8,Bbe),e(Bbe,mmr),e(O8,gmr),e(O8,SW),e(SW,hmr),e(O8,pmr),e(se,_mr),e(se,V8),e(V8,Ibe),e(Ibe,umr),e(V8,bmr),e(V8,RW),e(RW,vmr),e(V8,Fmr),e(se,Tmr),e(se,X8),e(X8,qbe),e(qbe,Mmr),e(X8,Emr),e(X8,PW),e(PW,Cmr),e(X8,wmr),e(se,Amr),e(se,z8),e(z8,Nbe),e(Nbe,ymr),e(z8,Lmr),e(z8,BW),e(BW,xmr),e(z8,$mr),e(se,kmr),e(se,W8),e(W8,jbe),e(jbe,Smr),e(W8,Rmr),e(W8,IW),e(IW,Pmr),e(W8,Bmr),e(se,Imr),e(se,Q8),e(Q8,Dbe),e(Dbe,qmr),e(Q8,Nmr),e(Q8,qW),e(qW,jmr),e(Q8,Dmr),e(se,Gmr),e(se,H8),e(H8,Gbe),e(Gbe,Omr),e(H8,Vmr),e(H8,NW),e(NW,Xmr),e(H8,zmr),e(se,Wmr),e(se,U8),e(U8,Obe),e(Obe,Qmr),e(U8,Hmr),e(U8,jW),e(jW,Umr),e(U8,Jmr),e(se,Ymr),e(se,J8),e(J8,Vbe),e(Vbe,Kmr),e(J8,Zmr),e(J8,DW),e(DW,egr),e(J8,ogr),e(se,rgr),e(se,Y8),e(Y8,Xbe),e(Xbe,tgr),e(Y8,agr),e(Y8,GW),e(GW,ngr),e(Y8,sgr),e(se,lgr),e(se,K8),e(K8,zbe),e(zbe,igr),e(K8,dgr),e(K8,OW),e(OW,cgr),e(K8,fgr),e(se,mgr),e(se,Z8),e(Z8,Wbe),e(Wbe,ggr),e(Z8,hgr),e(Z8,VW),e(VW,pgr),e(Z8,_gr),e(se,ugr),e(se,e7),e(e7,Qbe),e(Qbe,bgr),e(e7,vgr),e(e7,XW),e(XW,Fgr),e(e7,Tgr),e(Ar,Mgr),M(o7,Ar,null),b(f,Wqe,u),b(f,Wd,u),e(Wd,r7),e(r7,Hbe),M(oL,Hbe,null),e(Wd,Egr),e(Wd,Ube),e(Ube,Cgr),b(f,Qqe,u),b(f,Zo,u),M(rL,Zo,null),e(Zo,wgr),e(Zo,Qd),e(Qd,Agr),e(Qd,zW),e(zW,ygr),e(Qd,Lgr),e(Qd,WW),e(WW,xgr),e(Qd,$gr),e(Zo,kgr),e(Zo,tL),e(tL,Sgr),e(tL,Jbe),e(Jbe,Rgr),e(tL,Pgr),e(Zo,Bgr),e(Zo,xt),M(aL,xt,null),e(xt,Igr),e(xt,Ybe),e(Ybe,qgr),e(xt,Ngr),e(xt,Hd),e(Hd,jgr),e(Hd,Kbe),e(Kbe,Dgr),e(Hd,Ggr),e(Hd,QW),e(QW,Ogr),e(Hd,Vgr),e(xt,Xgr),M(t7,xt,null),e(Zo,zgr),e(Zo,yr),M(nL,yr,null),e(yr,Wgr),e(yr,Zbe),e(Zbe,Qgr),e(yr,Hgr),e(yr,en),e(en,Ugr),e(en,e2e),e(e2e,Jgr),e(en,Ygr),e(en,o2e),e(o2e,Kgr),e(en,Zgr),e(en,r2e),e(r2e,ehr),e(en,ohr),e(yr,rhr),e(yr,Te),e(Te,a7),e(a7,t2e),e(t2e,thr),e(a7,ahr),e(a7,HW),e(HW,nhr),e(a7,shr),e(Te,lhr),e(Te,n7),e(n7,a2e),e(a2e,ihr),e(n7,dhr),e(n7,UW),e(UW,chr),e(n7,fhr),e(Te,mhr),e(Te,s7),e(s7,n2e),e(n2e,ghr),e(s7,hhr),e(s7,JW),e(JW,phr),e(s7,_hr),e(Te,uhr),e(Te,l7),e(l7,s2e),e(s2e,bhr),e(l7,vhr),e(l7,YW),e(YW,Fhr),e(l7,Thr),e(Te,Mhr),e(Te,i7),e(i7,l2e),e(l2e,Ehr),e(i7,Chr),e(i7,KW),e(KW,whr),e(i7,Ahr),e(Te,yhr),e(Te,d7),e(d7,i2e),e(i2e,Lhr),e(d7,xhr),e(d7,ZW),e(ZW,$hr),e(d7,khr),e(Te,Shr),e(Te,c7),e(c7,d2e),e(d2e,Rhr),e(c7,Phr),e(c7,eQ),e(eQ,Bhr),e(c7,Ihr),e(Te,qhr),e(Te,f7),e(f7,c2e),e(c2e,Nhr),e(f7,jhr),e(f7,oQ),e(oQ,Dhr),e(f7,Ghr),e(Te,Ohr),e(Te,m7),e(m7,f2e),e(f2e,Vhr),e(m7,Xhr),e(m7,rQ),e(rQ,zhr),e(m7,Whr),e(Te,Qhr),e(Te,g7),e(g7,m2e),e(m2e,Hhr),e(g7,Uhr),e(g7,tQ),e(tQ,Jhr),e(g7,Yhr),e(Te,Khr),e(Te,h7),e(h7,g2e),e(g2e,Zhr),e(h7,epr),e(h7,aQ),e(aQ,opr),e(h7,rpr),e(Te,tpr),e(Te,p7),e(p7,h2e),e(h2e,apr),e(p7,npr),e(p7,nQ),e(nQ,spr),e(p7,lpr),e(yr,ipr),M(_7,yr,null),b(f,Hqe,u),b(f,Ud,u),e(Ud,u7),e(u7,p2e),M(sL,p2e,null),e(Ud,dpr),e(Ud,_2e),e(_2e,cpr),b(f,Uqe,u),b(f,er,u),M(lL,er,null),e(er,fpr),e(er,Jd),e(Jd,mpr),e(Jd,sQ),e(sQ,gpr),e(Jd,hpr),e(Jd,lQ),e(lQ,ppr),e(Jd,_pr),e(er,upr),e(er,iL),e(iL,bpr),e(iL,u2e),e(u2e,vpr),e(iL,Fpr),e(er,Tpr),e(er,$t),M(dL,$t,null),e($t,Mpr),e($t,b2e),e(b2e,Epr),e($t,Cpr),e($t,Yd),e(Yd,wpr),e(Yd,v2e),e(v2e,Apr),e(Yd,ypr),e(Yd,iQ),e(iQ,Lpr),e(Yd,xpr),e($t,$pr),M(b7,$t,null),e(er,kpr),e(er,Lr),M(cL,Lr,null),e(Lr,Spr),e(Lr,F2e),e(F2e,Rpr),e(Lr,Ppr),e(Lr,on),e(on,Bpr),e(on,T2e),e(T2e,Ipr),e(on,qpr),e(on,M2e),e(M2e,Npr),e(on,jpr),e(on,E2e),e(E2e,Dpr),e(on,Gpr),e(Lr,Opr),e(Lr,rn),e(rn,v7),e(v7,C2e),e(C2e,Vpr),e(v7,Xpr),e(v7,dQ),e(dQ,zpr),e(v7,Wpr),e(rn,Qpr),e(rn,F7),e(F7,w2e),e(w2e,Hpr),e(F7,Upr),e(F7,cQ),e(cQ,Jpr),e(F7,Ypr),e(rn,Kpr),e(rn,T7),e(T7,A2e),e(A2e,Zpr),e(T7,e_r),e(T7,fQ),e(fQ,o_r),e(T7,r_r),e(rn,t_r),e(rn,M7),e(M7,y2e),e(y2e,a_r),e(M7,n_r),e(M7,mQ),e(mQ,s_r),e(M7,l_r),e(Lr,i_r),M(E7,Lr,null),b(f,Jqe,u),b(f,Kd,u),e(Kd,C7),e(C7,L2e),M(fL,L2e,null),e(Kd,d_r),e(Kd,x2e),e(x2e,c_r),b(f,Yqe,u),b(f,or,u),M(mL,or,null),e(or,f_r),e(or,Zd),e(Zd,m_r),e(Zd,gQ),e(gQ,g_r),e(Zd,h_r),e(Zd,hQ),e(hQ,p_r),e(Zd,__r),e(or,u_r),e(or,gL),e(gL,b_r),e(gL,$2e),e($2e,v_r),e(gL,F_r),e(or,T_r),e(or,kt),M(hL,kt,null),e(kt,M_r),e(kt,k2e),e(k2e,E_r),e(kt,C_r),e(kt,ec),e(ec,w_r),e(ec,S2e),e(S2e,A_r),e(ec,y_r),e(ec,pQ),e(pQ,L_r),e(ec,x_r),e(kt,$_r),M(w7,kt,null),e(or,k_r),e(or,xr),M(pL,xr,null),e(xr,S_r),e(xr,R2e),e(R2e,R_r),e(xr,P_r),e(xr,tn),e(tn,B_r),e(tn,P2e),e(P2e,I_r),e(tn,q_r),e(tn,B2e),e(B2e,N_r),e(tn,j_r),e(tn,I2e),e(I2e,D_r),e(tn,G_r),e(xr,O_r),e(xr,ie),e(ie,A7),e(A7,q2e),e(q2e,V_r),e(A7,X_r),e(A7,_Q),e(_Q,z_r),e(A7,W_r),e(ie,Q_r),e(ie,y7),e(y7,N2e),e(N2e,H_r),e(y7,U_r),e(y7,uQ),e(uQ,J_r),e(y7,Y_r),e(ie,K_r),e(ie,L7),e(L7,j2e),e(j2e,Z_r),e(L7,eur),e(L7,bQ),e(bQ,our),e(L7,rur),e(ie,tur),e(ie,x7),e(x7,D2e),e(D2e,aur),e(x7,nur),e(x7,vQ),e(vQ,sur),e(x7,lur),e(ie,iur),e(ie,$7),e($7,G2e),e(G2e,dur),e($7,cur),e($7,FQ),e(FQ,fur),e($7,mur),e(ie,gur),e(ie,k7),e(k7,O2e),e(O2e,hur),e(k7,pur),e(k7,TQ),e(TQ,_ur),e(k7,uur),e(ie,bur),e(ie,S7),e(S7,V2e),e(V2e,vur),e(S7,Fur),e(S7,MQ),e(MQ,Tur),e(S7,Mur),e(ie,Eur),e(ie,R7),e(R7,X2e),e(X2e,Cur),e(R7,wur),e(R7,EQ),e(EQ,Aur),e(R7,yur),e(ie,Lur),e(ie,P7),e(P7,z2e),e(z2e,xur),e(P7,$ur),e(P7,CQ),e(CQ,kur),e(P7,Sur),e(ie,Rur),e(ie,B7),e(B7,W2e),e(W2e,Pur),e(B7,Bur),e(B7,wQ),e(wQ,Iur),e(B7,qur),e(ie,Nur),e(ie,I7),e(I7,Q2e),e(Q2e,jur),e(I7,Dur),e(I7,AQ),e(AQ,Gur),e(I7,Our),e(ie,Vur),e(ie,q7),e(q7,H2e),e(H2e,Xur),e(q7,zur),e(q7,yQ),e(yQ,Wur),e(q7,Qur),e(ie,Hur),e(ie,N7),e(N7,U2e),e(U2e,Uur),e(N7,Jur),e(N7,LQ),e(LQ,Yur),e(N7,Kur),e(ie,Zur),e(ie,j7),e(j7,J2e),e(J2e,e1r),e(j7,o1r),e(j7,xQ),e(xQ,r1r),e(j7,t1r),e(ie,a1r),e(ie,D7),e(D7,Y2e),e(Y2e,n1r),e(D7,s1r),e(D7,$Q),e($Q,l1r),e(D7,i1r),e(ie,d1r),e(ie,G7),e(G7,K2e),e(K2e,c1r),e(G7,f1r),e(G7,kQ),e(kQ,m1r),e(G7,g1r),e(ie,h1r),e(ie,O7),e(O7,Z2e),e(Z2e,p1r),e(O7,_1r),e(O7,SQ),e(SQ,u1r),e(O7,b1r),e(ie,v1r),e(ie,V7),e(V7,eve),e(eve,F1r),e(V7,T1r),e(V7,RQ),e(RQ,M1r),e(V7,E1r),e(ie,C1r),e(ie,X7),e(X7,ove),e(ove,w1r),e(X7,A1r),e(X7,PQ),e(PQ,y1r),e(X7,L1r),e(ie,x1r),e(ie,z7),e(z7,rve),e(rve,$1r),e(z7,k1r),e(z7,BQ),e(BQ,S1r),e(z7,R1r),e(xr,P1r),M(W7,xr,null),b(f,Kqe,u),b(f,oc,u),e(oc,Q7),e(Q7,tve),M(_L,tve,null),e(oc,B1r),e(oc,ave),e(ave,I1r),b(f,Zqe,u),b(f,rr,u),M(uL,rr,null),e(rr,q1r),e(rr,rc),e(rc,N1r),e(rc,IQ),e(IQ,j1r),e(rc,D1r),e(rc,qQ),e(qQ,G1r),e(rc,O1r),e(rr,V1r),e(rr,bL),e(bL,X1r),e(bL,nve),e(nve,z1r),e(bL,W1r),e(rr,Q1r),e(rr,St),M(vL,St,null),e(St,H1r),e(St,sve),e(sve,U1r),e(St,J1r),e(St,tc),e(tc,Y1r),e(tc,lve),e(lve,K1r),e(tc,Z1r),e(tc,NQ),e(NQ,ebr),e(tc,obr),e(St,rbr),M(H7,St,null),e(rr,tbr),e(rr,$r),M(FL,$r,null),e($r,abr),e($r,ive),e(ive,nbr),e($r,sbr),e($r,an),e(an,lbr),e(an,dve),e(dve,ibr),e(an,dbr),e(an,cve),e(cve,cbr),e(an,fbr),e(an,fve),e(fve,mbr),e(an,gbr),e($r,hbr),e($r,ye),e(ye,U7),e(U7,mve),e(mve,pbr),e(U7,_br),e(U7,jQ),e(jQ,ubr),e(U7,bbr),e(ye,vbr),e(ye,J7),e(J7,gve),e(gve,Fbr),e(J7,Tbr),e(J7,DQ),e(DQ,Mbr),e(J7,Ebr),e(ye,Cbr),e(ye,Y7),e(Y7,hve),e(hve,wbr),e(Y7,Abr),e(Y7,GQ),e(GQ,ybr),e(Y7,Lbr),e(ye,xbr),e(ye,K7),e(K7,pve),e(pve,$br),e(K7,kbr),e(K7,OQ),e(OQ,Sbr),e(K7,Rbr),e(ye,Pbr),e(ye,Z7),e(Z7,_ve),e(_ve,Bbr),e(Z7,Ibr),e(Z7,VQ),e(VQ,qbr),e(Z7,Nbr),e(ye,jbr),e(ye,eM),e(eM,uve),e(uve,Dbr),e(eM,Gbr),e(eM,XQ),e(XQ,Obr),e(eM,Vbr),e(ye,Xbr),e(ye,oM),e(oM,bve),e(bve,zbr),e(oM,Wbr),e(oM,zQ),e(zQ,Qbr),e(oM,Hbr),e(ye,Ubr),e(ye,rM),e(rM,vve),e(vve,Jbr),e(rM,Ybr),e(rM,WQ),e(WQ,Kbr),e(rM,Zbr),e(ye,e2r),e(ye,tM),e(tM,Fve),e(Fve,o2r),e(tM,r2r),e(tM,QQ),e(QQ,t2r),e(tM,a2r),e(ye,n2r),e(ye,aM),e(aM,Tve),e(Tve,s2r),e(aM,l2r),e(aM,HQ),e(HQ,i2r),e(aM,d2r),e($r,c2r),M(nM,$r,null),b(f,eNe,u),b(f,ac,u),e(ac,sM),e(sM,Mve),M(TL,Mve,null),e(ac,f2r),e(ac,Eve),e(Eve,m2r),b(f,oNe,u),b(f,tr,u),M(ML,tr,null),e(tr,g2r),e(tr,nc),e(nc,h2r),e(nc,UQ),e(UQ,p2r),e(nc,_2r),e(nc,JQ),e(JQ,u2r),e(nc,b2r),e(tr,v2r),e(tr,EL),e(EL,F2r),e(EL,Cve),e(Cve,T2r),e(EL,M2r),e(tr,E2r),e(tr,Rt),M(CL,Rt,null),e(Rt,C2r),e(Rt,wve),e(wve,w2r),e(Rt,A2r),e(Rt,sc),e(sc,y2r),e(sc,Ave),e(Ave,L2r),e(sc,x2r),e(sc,YQ),e(YQ,$2r),e(sc,k2r),e(Rt,S2r),M(lM,Rt,null),e(tr,R2r),e(tr,kr),M(wL,kr,null),e(kr,P2r),e(kr,yve),e(yve,B2r),e(kr,I2r),e(kr,nn),e(nn,q2r),e(nn,Lve),e(Lve,N2r),e(nn,j2r),e(nn,xve),e(xve,D2r),e(nn,G2r),e(nn,$ve),e($ve,O2r),e(nn,V2r),e(kr,X2r),e(kr,ee),e(ee,iM),e(iM,kve),e(kve,z2r),e(iM,W2r),e(iM,KQ),e(KQ,Q2r),e(iM,H2r),e(ee,U2r),e(ee,dM),e(dM,Sve),e(Sve,J2r),e(dM,Y2r),e(dM,ZQ),e(ZQ,K2r),e(dM,Z2r),e(ee,evr),e(ee,cM),e(cM,Rve),e(Rve,ovr),e(cM,rvr),e(cM,eH),e(eH,tvr),e(cM,avr),e(ee,nvr),e(ee,fM),e(fM,Pve),e(Pve,svr),e(fM,lvr),e(fM,oH),e(oH,ivr),e(fM,dvr),e(ee,cvr),e(ee,mM),e(mM,Bve),e(Bve,fvr),e(mM,mvr),e(mM,rH),e(rH,gvr),e(mM,hvr),e(ee,pvr),e(ee,gM),e(gM,Ive),e(Ive,_vr),e(gM,uvr),e(gM,tH),e(tH,bvr),e(gM,vvr),e(ee,Fvr),e(ee,hM),e(hM,qve),e(qve,Tvr),e(hM,Mvr),e(hM,aH),e(aH,Evr),e(hM,Cvr),e(ee,wvr),e(ee,pM),e(pM,Nve),e(Nve,Avr),e(pM,yvr),e(pM,nH),e(nH,Lvr),e(pM,xvr),e(ee,$vr),e(ee,_M),e(_M,jve),e(jve,kvr),e(_M,Svr),e(_M,sH),e(sH,Rvr),e(_M,Pvr),e(ee,Bvr),e(ee,uM),e(uM,Dve),e(Dve,Ivr),e(uM,qvr),e(uM,lH),e(lH,Nvr),e(uM,jvr),e(ee,Dvr),e(ee,bM),e(bM,Gve),e(Gve,Gvr),e(bM,Ovr),e(bM,iH),e(iH,Vvr),e(bM,Xvr),e(ee,zvr),e(ee,vM),e(vM,Ove),e(Ove,Wvr),e(vM,Qvr),e(vM,dH),e(dH,Hvr),e(vM,Uvr),e(ee,Jvr),e(ee,FM),e(FM,Vve),e(Vve,Yvr),e(FM,Kvr),e(FM,cH),e(cH,Zvr),e(FM,e3r),e(ee,o3r),e(ee,TM),e(TM,Xve),e(Xve,r3r),e(TM,t3r),e(TM,fH),e(fH,a3r),e(TM,n3r),e(ee,s3r),e(ee,MM),e(MM,zve),e(zve,l3r),e(MM,i3r),e(MM,mH),e(mH,d3r),e(MM,c3r),e(ee,f3r),e(ee,EM),e(EM,Wve),e(Wve,m3r),e(EM,g3r),e(EM,gH),e(gH,h3r),e(EM,p3r),e(ee,_3r),e(ee,CM),e(CM,Qve),e(Qve,u3r),e(CM,b3r),e(CM,hH),e(hH,v3r),e(CM,F3r),e(ee,T3r),e(ee,wM),e(wM,Hve),e(Hve,M3r),e(wM,E3r),e(wM,pH),e(pH,C3r),e(wM,w3r),e(ee,A3r),e(ee,AM),e(AM,Uve),e(Uve,y3r),e(AM,L3r),e(AM,_H),e(_H,x3r),e(AM,$3r),e(ee,k3r),e(ee,yM),e(yM,Jve),e(Jve,S3r),e(yM,R3r),e(yM,uH),e(uH,P3r),e(yM,B3r),e(ee,I3r),e(ee,LM),e(LM,Yve),e(Yve,q3r),e(LM,N3r),e(LM,bH),e(bH,j3r),e(LM,D3r),e(ee,G3r),e(ee,xM),e(xM,Kve),e(Kve,O3r),e(xM,V3r),e(xM,vH),e(vH,X3r),e(xM,z3r),e(ee,W3r),e(ee,$M),e($M,Zve),e(Zve,Q3r),e($M,H3r),e($M,FH),e(FH,U3r),e($M,J3r),e(ee,Y3r),e(ee,kM),e(kM,e3e),e(e3e,K3r),e(kM,Z3r),e(kM,TH),e(TH,eFr),e(kM,oFr),e(ee,rFr),e(ee,SM),e(SM,o3e),e(o3e,tFr),e(SM,aFr),e(SM,MH),e(MH,nFr),e(SM,sFr),e(ee,lFr),e(ee,RM),e(RM,r3e),e(r3e,iFr),e(RM,dFr),e(RM,EH),e(EH,cFr),e(RM,fFr),e(kr,mFr),M(PM,kr,null),b(f,rNe,u),b(f,lc,u),e(lc,BM),e(BM,t3e),M(AL,t3e,null),e(lc,gFr),e(lc,a3e),e(a3e,hFr),b(f,tNe,u),b(f,ar,u),M(yL,ar,null),e(ar,pFr),e(ar,ic),e(ic,_Fr),e(ic,CH),e(CH,uFr),e(ic,bFr),e(ic,wH),e(wH,vFr),e(ic,FFr),e(ar,TFr),e(ar,LL),e(LL,MFr),e(LL,n3e),e(n3e,EFr),e(LL,CFr),e(ar,wFr),e(ar,Pt),M(xL,Pt,null),e(Pt,AFr),e(Pt,s3e),e(s3e,yFr),e(Pt,LFr),e(Pt,dc),e(dc,xFr),e(dc,l3e),e(l3e,$Fr),e(dc,kFr),e(dc,AH),e(AH,SFr),e(dc,RFr),e(Pt,PFr),M(IM,Pt,null),e(ar,BFr),e(ar,Sr),M($L,Sr,null),e(Sr,IFr),e(Sr,i3e),e(i3e,qFr),e(Sr,NFr),e(Sr,sn),e(sn,jFr),e(sn,d3e),e(d3e,DFr),e(sn,GFr),e(sn,c3e),e(c3e,OFr),e(sn,VFr),e(sn,f3e),e(f3e,XFr),e(sn,zFr),e(Sr,WFr),e(Sr,he),e(he,qM),e(qM,m3e),e(m3e,QFr),e(qM,HFr),e(qM,yH),e(yH,UFr),e(qM,JFr),e(he,YFr),e(he,NM),e(NM,g3e),e(g3e,KFr),e(NM,ZFr),e(NM,LH),e(LH,eTr),e(NM,oTr),e(he,rTr),e(he,jM),e(jM,h3e),e(h3e,tTr),e(jM,aTr),e(jM,xH),e(xH,nTr),e(jM,sTr),e(he,lTr),e(he,DM),e(DM,p3e),e(p3e,iTr),e(DM,dTr),e(DM,$H),e($H,cTr),e(DM,fTr),e(he,mTr),e(he,GM),e(GM,_3e),e(_3e,gTr),e(GM,hTr),e(GM,kH),e(kH,pTr),e(GM,_Tr),e(he,uTr),e(he,OM),e(OM,u3e),e(u3e,bTr),e(OM,vTr),e(OM,SH),e(SH,FTr),e(OM,TTr),e(he,MTr),e(he,VM),e(VM,b3e),e(b3e,ETr),e(VM,CTr),e(VM,RH),e(RH,wTr),e(VM,ATr),e(he,yTr),e(he,XM),e(XM,v3e),e(v3e,LTr),e(XM,xTr),e(XM,PH),e(PH,$Tr),e(XM,kTr),e(he,STr),e(he,zM),e(zM,F3e),e(F3e,RTr),e(zM,PTr),e(zM,BH),e(BH,BTr),e(zM,ITr),e(he,qTr),e(he,WM),e(WM,T3e),e(T3e,NTr),e(WM,jTr),e(WM,IH),e(IH,DTr),e(WM,GTr),e(he,OTr),e(he,QM),e(QM,M3e),e(M3e,VTr),e(QM,XTr),e(QM,qH),e(qH,zTr),e(QM,WTr),e(he,QTr),e(he,HM),e(HM,E3e),e(E3e,HTr),e(HM,UTr),e(HM,NH),e(NH,JTr),e(HM,YTr),e(he,KTr),e(he,UM),e(UM,C3e),e(C3e,ZTr),e(UM,e8r),e(UM,jH),e(jH,o8r),e(UM,r8r),e(he,t8r),e(he,JM),e(JM,w3e),e(w3e,a8r),e(JM,n8r),e(JM,DH),e(DH,s8r),e(JM,l8r),e(he,i8r),e(he,YM),e(YM,A3e),e(A3e,d8r),e(YM,c8r),e(YM,GH),e(GH,f8r),e(YM,m8r),e(he,g8r),e(he,KM),e(KM,y3e),e(y3e,h8r),e(KM,p8r),e(KM,OH),e(OH,_8r),e(KM,u8r),e(he,b8r),e(he,ZM),e(ZM,L3e),e(L3e,v8r),e(ZM,F8r),e(ZM,VH),e(VH,T8r),e(ZM,M8r),e(Sr,E8r),M(e4,Sr,null),b(f,aNe,u),b(f,cc,u),e(cc,o4),e(o4,x3e),M(kL,x3e,null),e(cc,C8r),e(cc,$3e),e($3e,w8r),b(f,nNe,u),b(f,nr,u),M(SL,nr,null),e(nr,A8r),e(nr,fc),e(fc,y8r),e(fc,XH),e(XH,L8r),e(fc,x8r),e(fc,zH),e(zH,$8r),e(fc,k8r),e(nr,S8r),e(nr,RL),e(RL,R8r),e(RL,k3e),e(k3e,P8r),e(RL,B8r),e(nr,I8r),e(nr,Bt),M(PL,Bt,null),e(Bt,q8r),e(Bt,S3e),e(S3e,N8r),e(Bt,j8r),e(Bt,mc),e(mc,D8r),e(mc,R3e),e(R3e,G8r),e(mc,O8r),e(mc,WH),e(WH,V8r),e(mc,X8r),e(Bt,z8r),M(r4,Bt,null),e(nr,W8r),e(nr,Rr),M(BL,Rr,null),e(Rr,Q8r),e(Rr,P3e),e(P3e,H8r),e(Rr,U8r),e(Rr,ln),e(ln,J8r),e(ln,B3e),e(B3e,Y8r),e(ln,K8r),e(ln,I3e),e(I3e,Z8r),e(ln,e7r),e(ln,q3e),e(q3e,o7r),e(ln,r7r),e(Rr,t7r),e(Rr,IL),e(IL,t4),e(t4,N3e),e(N3e,a7r),e(t4,n7r),e(t4,QH),e(QH,s7r),e(t4,l7r),e(IL,i7r),e(IL,a4),e(a4,j3e),e(j3e,d7r),e(a4,c7r),e(a4,HH),e(HH,f7r),e(a4,m7r),e(Rr,g7r),M(n4,Rr,null),b(f,sNe,u),b(f,gc,u),e(gc,s4),e(s4,D3e),M(qL,D3e,null),e(gc,h7r),e(gc,G3e),e(G3e,p7r),b(f,lNe,u),b(f,sr,u),M(NL,sr,null),e(sr,_7r),e(sr,hc),e(hc,u7r),e(hc,UH),e(UH,b7r),e(hc,v7r),e(hc,JH),e(JH,F7r),e(hc,T7r),e(sr,M7r),e(sr,jL),e(jL,E7r),e(jL,O3e),e(O3e,C7r),e(jL,w7r),e(sr,A7r),e(sr,It),M(DL,It,null),e(It,y7r),e(It,V3e),e(V3e,L7r),e(It,x7r),e(It,pc),e(pc,$7r),e(pc,X3e),e(X3e,k7r),e(pc,S7r),e(pc,YH),e(YH,R7r),e(pc,P7r),e(It,B7r),M(l4,It,null),e(sr,I7r),e(sr,Pr),M(GL,Pr,null),e(Pr,q7r),e(Pr,z3e),e(z3e,N7r),e(Pr,j7r),e(Pr,dn),e(dn,D7r),e(dn,W3e),e(W3e,G7r),e(dn,O7r),e(dn,Q3e),e(Q3e,V7r),e(dn,X7r),e(dn,H3e),e(H3e,z7r),e(dn,W7r),e(Pr,Q7r),e(Pr,U3e),e(U3e,i4),e(i4,J3e),e(J3e,H7r),e(i4,U7r),e(i4,KH),e(KH,J7r),e(i4,Y7r),e(Pr,K7r),M(d4,Pr,null),b(f,iNe,u),b(f,_c,u),e(_c,c4),e(c4,Y3e),M(OL,Y3e,null),e(_c,Z7r),e(_c,K3e),e(K3e,eMr),b(f,dNe,u),b(f,lr,u),M(VL,lr,null),e(lr,oMr),e(lr,uc),e(uc,rMr),e(uc,ZH),e(ZH,tMr),e(uc,aMr),e(uc,eU),e(eU,nMr),e(uc,sMr),e(lr,lMr),e(lr,XL),e(XL,iMr),e(XL,Z3e),e(Z3e,dMr),e(XL,cMr),e(lr,fMr),e(lr,qt),M(zL,qt,null),e(qt,mMr),e(qt,eFe),e(eFe,gMr),e(qt,hMr),e(qt,bc),e(bc,pMr),e(bc,oFe),e(oFe,_Mr),e(bc,uMr),e(bc,oU),e(oU,bMr),e(bc,vMr),e(qt,FMr),M(f4,qt,null),e(lr,TMr),e(lr,Br),M(WL,Br,null),e(Br,MMr),e(Br,rFe),e(rFe,EMr),e(Br,CMr),e(Br,cn),e(cn,wMr),e(cn,tFe),e(tFe,AMr),e(cn,yMr),e(cn,aFe),e(aFe,LMr),e(cn,xMr),e(cn,nFe),e(nFe,$Mr),e(cn,kMr),e(Br,SMr),e(Br,de),e(de,m4),e(m4,sFe),e(sFe,RMr),e(m4,PMr),e(m4,rU),e(rU,BMr),e(m4,IMr),e(de,qMr),e(de,g4),e(g4,lFe),e(lFe,NMr),e(g4,jMr),e(g4,tU),e(tU,DMr),e(g4,GMr),e(de,OMr),e(de,h4),e(h4,iFe),e(iFe,VMr),e(h4,XMr),e(h4,aU),e(aU,zMr),e(h4,WMr),e(de,QMr),e(de,p4),e(p4,dFe),e(dFe,HMr),e(p4,UMr),e(p4,nU),e(nU,JMr),e(p4,YMr),e(de,KMr),e(de,_4),e(_4,cFe),e(cFe,ZMr),e(_4,e4r),e(_4,sU),e(sU,o4r),e(_4,r4r),e(de,t4r),e(de,u4),e(u4,fFe),e(fFe,a4r),e(u4,n4r),e(u4,lU),e(lU,s4r),e(u4,l4r),e(de,i4r),e(de,b4),e(b4,mFe),e(mFe,d4r),e(b4,c4r),e(b4,iU),e(iU,f4r),e(b4,m4r),e(de,g4r),e(de,v4),e(v4,gFe),e(gFe,h4r),e(v4,p4r),e(v4,dU),e(dU,_4r),e(v4,u4r),e(de,b4r),e(de,F4),e(F4,hFe),e(hFe,v4r),e(F4,F4r),e(F4,cU),e(cU,T4r),e(F4,M4r),e(de,E4r),e(de,T4),e(T4,pFe),e(pFe,C4r),e(T4,w4r),e(T4,fU),e(fU,A4r),e(T4,y4r),e(de,L4r),e(de,M4),e(M4,_Fe),e(_Fe,x4r),e(M4,$4r),e(M4,mU),e(mU,k4r),e(M4,S4r),e(de,R4r),e(de,E4),e(E4,uFe),e(uFe,P4r),e(E4,B4r),e(E4,gU),e(gU,I4r),e(E4,q4r),e(de,N4r),e(de,C4),e(C4,bFe),e(bFe,j4r),e(C4,D4r),e(C4,hU),e(hU,G4r),e(C4,O4r),e(de,V4r),e(de,w4),e(w4,vFe),e(vFe,X4r),e(w4,z4r),e(w4,pU),e(pU,W4r),e(w4,Q4r),e(de,H4r),e(de,A4),e(A4,FFe),e(FFe,U4r),e(A4,J4r),e(A4,_U),e(_U,Y4r),e(A4,K4r),e(de,Z4r),e(de,y4),e(y4,TFe),e(TFe,eEr),e(y4,oEr),e(y4,uU),e(uU,rEr),e(y4,tEr),e(de,aEr),e(de,L4),e(L4,MFe),e(MFe,nEr),e(L4,sEr),e(L4,bU),e(bU,lEr),e(L4,iEr),e(de,dEr),e(de,x4),e(x4,EFe),e(EFe,cEr),e(x4,fEr),e(x4,vU),e(vU,mEr),e(x4,gEr),e(de,hEr),e(de,$4),e($4,CFe),e(CFe,pEr),e($4,_Er),e($4,FU),e(FU,uEr),e($4,bEr),e(de,vEr),e(de,k4),e(k4,wFe),e(wFe,FEr),e(k4,TEr),e(k4,TU),e(TU,MEr),e(k4,EEr),e(Br,CEr),M(S4,Br,null),b(f,cNe,u),b(f,vc,u),e(vc,R4),e(R4,AFe),M(QL,AFe,null),e(vc,wEr),e(vc,yFe),e(yFe,AEr),b(f,fNe,u),b(f,ir,u),M(HL,ir,null),e(ir,yEr),e(ir,Fc),e(Fc,LEr),e(Fc,MU),e(MU,xEr),e(Fc,$Er),e(Fc,EU),e(EU,kEr),e(Fc,SEr),e(ir,REr),e(ir,UL),e(UL,PEr),e(UL,LFe),e(LFe,BEr),e(UL,IEr),e(ir,qEr),e(ir,Nt),M(JL,Nt,null),e(Nt,NEr),e(Nt,xFe),e(xFe,jEr),e(Nt,DEr),e(Nt,Tc),e(Tc,GEr),e(Tc,$Fe),e($Fe,OEr),e(Tc,VEr),e(Tc,CU),e(CU,XEr),e(Tc,zEr),e(Nt,WEr),M(P4,Nt,null),e(ir,QEr),e(ir,Ir),M(YL,Ir,null),e(Ir,HEr),e(Ir,kFe),e(kFe,UEr),e(Ir,JEr),e(Ir,fn),e(fn,YEr),e(fn,SFe),e(SFe,KEr),e(fn,ZEr),e(fn,RFe),e(RFe,eCr),e(fn,oCr),e(fn,PFe),e(PFe,rCr),e(fn,tCr),e(Ir,aCr),e(Ir,ce),e(ce,B4),e(B4,BFe),e(BFe,nCr),e(B4,sCr),e(B4,wU),e(wU,lCr),e(B4,iCr),e(ce,dCr),e(ce,I4),e(I4,IFe),e(IFe,cCr),e(I4,fCr),e(I4,AU),e(AU,mCr),e(I4,gCr),e(ce,hCr),e(ce,q4),e(q4,qFe),e(qFe,pCr),e(q4,_Cr),e(q4,yU),e(yU,uCr),e(q4,bCr),e(ce,vCr),e(ce,N4),e(N4,NFe),e(NFe,FCr),e(N4,TCr),e(N4,LU),e(LU,MCr),e(N4,ECr),e(ce,CCr),e(ce,j4),e(j4,jFe),e(jFe,wCr),e(j4,ACr),e(j4,xU),e(xU,yCr),e(j4,LCr),e(ce,xCr),e(ce,D4),e(D4,DFe),e(DFe,$Cr),e(D4,kCr),e(D4,$U),e($U,SCr),e(D4,RCr),e(ce,PCr),e(ce,G4),e(G4,GFe),e(GFe,BCr),e(G4,ICr),e(G4,kU),e(kU,qCr),e(G4,NCr),e(ce,jCr),e(ce,O4),e(O4,OFe),e(OFe,DCr),e(O4,GCr),e(O4,SU),e(SU,OCr),e(O4,VCr),e(ce,XCr),e(ce,V4),e(V4,VFe),e(VFe,zCr),e(V4,WCr),e(V4,RU),e(RU,QCr),e(V4,HCr),e(ce,UCr),e(ce,X4),e(X4,XFe),e(XFe,JCr),e(X4,YCr),e(X4,PU),e(PU,KCr),e(X4,ZCr),e(ce,e5r),e(ce,z4),e(z4,zFe),e(zFe,o5r),e(z4,r5r),e(z4,BU),e(BU,t5r),e(z4,a5r),e(ce,n5r),e(ce,W4),e(W4,WFe),e(WFe,s5r),e(W4,l5r),e(W4,IU),e(IU,i5r),e(W4,d5r),e(ce,c5r),e(ce,Q4),e(Q4,QFe),e(QFe,f5r),e(Q4,m5r),e(Q4,qU),e(qU,g5r),e(Q4,h5r),e(ce,p5r),e(ce,H4),e(H4,HFe),e(HFe,_5r),e(H4,u5r),e(H4,NU),e(NU,b5r),e(H4,v5r),e(ce,F5r),e(ce,U4),e(U4,UFe),e(UFe,T5r),e(U4,M5r),e(U4,jU),e(jU,E5r),e(U4,C5r),e(ce,w5r),e(ce,J4),e(J4,JFe),e(JFe,A5r),e(J4,y5r),e(J4,DU),e(DU,L5r),e(J4,x5r),e(ce,$5r),e(ce,Y4),e(Y4,YFe),e(YFe,k5r),e(Y4,S5r),e(Y4,GU),e(GU,R5r),e(Y4,P5r),e(ce,B5r),e(ce,K4),e(K4,KFe),e(KFe,I5r),e(K4,q5r),e(K4,OU),e(OU,N5r),e(K4,j5r),e(ce,D5r),e(ce,Z4),e(Z4,ZFe),e(ZFe,G5r),e(Z4,O5r),e(Z4,VU),e(VU,V5r),e(Z4,X5r),e(ce,z5r),e(ce,eE),e(eE,eTe),e(eTe,W5r),e(eE,Q5r),e(eE,XU),e(XU,H5r),e(eE,U5r),e(Ir,J5r),M(oE,Ir,null),b(f,mNe,u),b(f,Mc,u),e(Mc,rE),e(rE,oTe),M(KL,oTe,null),e(Mc,Y5r),e(Mc,rTe),e(rTe,K5r),b(f,gNe,u),b(f,dr,u),M(ZL,dr,null),e(dr,Z5r),e(dr,Ec),e(Ec,ewr),e(Ec,zU),e(zU,owr),e(Ec,rwr),e(Ec,WU),e(WU,twr),e(Ec,awr),e(dr,nwr),e(dr,ex),e(ex,swr),e(ex,tTe),e(tTe,lwr),e(ex,iwr),e(dr,dwr),e(dr,jt),M(ox,jt,null),e(jt,cwr),e(jt,aTe),e(aTe,fwr),e(jt,mwr),e(jt,Cc),e(Cc,gwr),e(Cc,nTe),e(nTe,hwr),e(Cc,pwr),e(Cc,QU),e(QU,_wr),e(Cc,uwr),e(jt,bwr),M(tE,jt,null),e(dr,vwr),e(dr,qr),M(rx,qr,null),e(qr,Fwr),e(qr,sTe),e(sTe,Twr),e(qr,Mwr),e(qr,mn),e(mn,Ewr),e(mn,lTe),e(lTe,Cwr),e(mn,wwr),e(mn,iTe),e(iTe,Awr),e(mn,ywr),e(mn,dTe),e(dTe,Lwr),e(mn,xwr),e(qr,$wr),e(qr,cTe),e(cTe,aE),e(aE,fTe),e(fTe,kwr),e(aE,Swr),e(aE,HU),e(HU,Rwr),e(aE,Pwr),e(qr,Bwr),M(nE,qr,null),b(f,hNe,u),b(f,wc,u),e(wc,sE),e(sE,mTe),M(tx,mTe,null),e(wc,Iwr),e(wc,gTe),e(gTe,qwr),b(f,pNe,u),b(f,cr,u),M(ax,cr,null),e(cr,Nwr),e(cr,Ac),e(Ac,jwr),e(Ac,UU),e(UU,Dwr),e(Ac,Gwr),e(Ac,JU),e(JU,Owr),e(Ac,Vwr),e(cr,Xwr),e(cr,nx),e(nx,zwr),e(nx,hTe),e(hTe,Wwr),e(nx,Qwr),e(cr,Hwr),e(cr,Dt),M(sx,Dt,null),e(Dt,Uwr),e(Dt,pTe),e(pTe,Jwr),e(Dt,Ywr),e(Dt,yc),e(yc,Kwr),e(yc,_Te),e(_Te,Zwr),e(yc,eAr),e(yc,YU),e(YU,oAr),e(yc,rAr),e(Dt,tAr),M(lE,Dt,null),e(cr,aAr),e(cr,Nr),M(lx,Nr,null),e(Nr,nAr),e(Nr,uTe),e(uTe,sAr),e(Nr,lAr),e(Nr,gn),e(gn,iAr),e(gn,bTe),e(bTe,dAr),e(gn,cAr),e(gn,vTe),e(vTe,fAr),e(gn,mAr),e(gn,FTe),e(FTe,gAr),e(gn,hAr),e(Nr,pAr),e(Nr,TTe),e(TTe,iE),e(iE,MTe),e(MTe,_Ar),e(iE,uAr),e(iE,KU),e(KU,bAr),e(iE,vAr),e(Nr,FAr),M(dE,Nr,null),b(f,_Ne,u),b(f,Lc,u),e(Lc,cE),e(cE,ETe),M(ix,ETe,null),e(Lc,TAr),e(Lc,CTe),e(CTe,MAr),b(f,uNe,u),b(f,fr,u),M(dx,fr,null),e(fr,EAr),e(fr,xc),e(xc,CAr),e(xc,ZU),e(ZU,wAr),e(xc,AAr),e(xc,eJ),e(eJ,yAr),e(xc,LAr),e(fr,xAr),e(fr,cx),e(cx,$Ar),e(cx,wTe),e(wTe,kAr),e(cx,SAr),e(fr,RAr),e(fr,Gt),M(fx,Gt,null),e(Gt,PAr),e(Gt,ATe),e(ATe,BAr),e(Gt,IAr),e(Gt,$c),e($c,qAr),e($c,yTe),e(yTe,NAr),e($c,jAr),e($c,oJ),e(oJ,DAr),e($c,GAr),e(Gt,OAr),M(fE,Gt,null),e(fr,VAr),e(fr,jr),M(mx,jr,null),e(jr,XAr),e(jr,LTe),e(LTe,zAr),e(jr,WAr),e(jr,hn),e(hn,QAr),e(hn,xTe),e(xTe,HAr),e(hn,UAr),e(hn,$Te),e($Te,JAr),e(hn,YAr),e(hn,kTe),e(kTe,KAr),e(hn,ZAr),e(jr,e0r),e(jr,re),e(re,mE),e(mE,STe),e(STe,o0r),e(mE,r0r),e(mE,rJ),e(rJ,t0r),e(mE,a0r),e(re,n0r),e(re,gE),e(gE,RTe),e(RTe,s0r),e(gE,l0r),e(gE,tJ),e(tJ,i0r),e(gE,d0r),e(re,c0r),e(re,hE),e(hE,PTe),e(PTe,f0r),e(hE,m0r),e(hE,aJ),e(aJ,g0r),e(hE,h0r),e(re,p0r),e(re,pE),e(pE,BTe),e(BTe,_0r),e(pE,u0r),e(pE,nJ),e(nJ,b0r),e(pE,v0r),e(re,F0r),e(re,_E),e(_E,ITe),e(ITe,T0r),e(_E,M0r),e(_E,sJ),e(sJ,E0r),e(_E,C0r),e(re,w0r),e(re,uE),e(uE,qTe),e(qTe,A0r),e(uE,y0r),e(uE,lJ),e(lJ,L0r),e(uE,x0r),e(re,$0r),e(re,bE),e(bE,NTe),e(NTe,k0r),e(bE,S0r),e(bE,iJ),e(iJ,R0r),e(bE,P0r),e(re,B0r),e(re,vE),e(vE,jTe),e(jTe,I0r),e(vE,q0r),e(vE,dJ),e(dJ,N0r),e(vE,j0r),e(re,D0r),e(re,FE),e(FE,DTe),e(DTe,G0r),e(FE,O0r),e(FE,cJ),e(cJ,V0r),e(FE,X0r),e(re,z0r),e(re,TE),e(TE,GTe),e(GTe,W0r),e(TE,Q0r),e(TE,fJ),e(fJ,H0r),e(TE,U0r),e(re,J0r),e(re,ME),e(ME,OTe),e(OTe,Y0r),e(ME,K0r),e(ME,mJ),e(mJ,Z0r),e(ME,e6r),e(re,o6r),e(re,EE),e(EE,VTe),e(VTe,r6r),e(EE,t6r),e(EE,gJ),e(gJ,a6r),e(EE,n6r),e(re,s6r),e(re,CE),e(CE,XTe),e(XTe,l6r),e(CE,i6r),e(CE,hJ),e(hJ,d6r),e(CE,c6r),e(re,f6r),e(re,wE),e(wE,zTe),e(zTe,m6r),e(wE,g6r),e(wE,pJ),e(pJ,h6r),e(wE,p6r),e(re,_6r),e(re,AE),e(AE,WTe),e(WTe,u6r),e(AE,b6r),e(AE,_J),e(_J,v6r),e(AE,F6r),e(re,T6r),e(re,yE),e(yE,QTe),e(QTe,M6r),e(yE,E6r),e(yE,uJ),e(uJ,C6r),e(yE,w6r),e(re,A6r),e(re,LE),e(LE,HTe),e(HTe,y6r),e(LE,L6r),e(LE,bJ),e(bJ,x6r),e(LE,$6r),e(re,k6r),e(re,xE),e(xE,UTe),e(UTe,S6r),e(xE,R6r),e(xE,vJ),e(vJ,P6r),e(xE,B6r),e(re,I6r),e(re,$E),e($E,JTe),e(JTe,q6r),e($E,N6r),e($E,FJ),e(FJ,j6r),e($E,D6r),e(re,G6r),e(re,kE),e(kE,YTe),e(YTe,O6r),e(kE,V6r),e(kE,TJ),e(TJ,X6r),e(kE,z6r),e(re,W6r),e(re,SE),e(SE,KTe),e(KTe,Q6r),e(SE,H6r),e(SE,MJ),e(MJ,U6r),e(SE,J6r),e(re,Y6r),e(re,RE),e(RE,ZTe),e(ZTe,K6r),e(RE,Z6r),e(RE,EJ),e(EJ,eyr),e(RE,oyr),e(re,ryr),e(re,PE),e(PE,e8e),e(e8e,tyr),e(PE,ayr),e(PE,CJ),e(CJ,nyr),e(PE,syr),e(re,lyr),e(re,BE),e(BE,o8e),e(o8e,iyr),e(BE,dyr),e(BE,wJ),e(wJ,cyr),e(BE,fyr),e(re,myr),e(re,IE),e(IE,r8e),e(r8e,gyr),e(IE,hyr),e(IE,AJ),e(AJ,pyr),e(IE,_yr),e(jr,uyr),M(qE,jr,null),b(f,bNe,u),b(f,kc,u),e(kc,NE),e(NE,t8e),M(gx,t8e,null),e(kc,byr),e(kc,a8e),e(a8e,vyr),b(f,vNe,u),b(f,mr,u),M(hx,mr,null),e(mr,Fyr),e(mr,Sc),e(Sc,Tyr),e(Sc,yJ),e(yJ,Myr),e(Sc,Eyr),e(Sc,LJ),e(LJ,Cyr),e(Sc,wyr),e(mr,Ayr),e(mr,px),e(px,yyr),e(px,n8e),e(n8e,Lyr),e(px,xyr),e(mr,$yr),e(mr,Ot),M(_x,Ot,null),e(Ot,kyr),e(Ot,s8e),e(s8e,Syr),e(Ot,Ryr),e(Ot,Rc),e(Rc,Pyr),e(Rc,l8e),e(l8e,Byr),e(Rc,Iyr),e(Rc,xJ),e(xJ,qyr),e(Rc,Nyr),e(Ot,jyr),M(jE,Ot,null),e(mr,Dyr),e(mr,Dr),M(ux,Dr,null),e(Dr,Gyr),e(Dr,i8e),e(i8e,Oyr),e(Dr,Vyr),e(Dr,pn),e(pn,Xyr),e(pn,d8e),e(d8e,zyr),e(pn,Wyr),e(pn,c8e),e(c8e,Qyr),e(pn,Hyr),e(pn,f8e),e(f8e,Uyr),e(pn,Jyr),e(Dr,Yyr),e(Dr,Re),e(Re,DE),e(DE,m8e),e(m8e,Kyr),e(DE,Zyr),e(DE,$J),e($J,eLr),e(DE,oLr),e(Re,rLr),e(Re,GE),e(GE,g8e),e(g8e,tLr),e(GE,aLr),e(GE,kJ),e(kJ,nLr),e(GE,sLr),e(Re,lLr),e(Re,OE),e(OE,h8e),e(h8e,iLr),e(OE,dLr),e(OE,SJ),e(SJ,cLr),e(OE,fLr),e(Re,mLr),e(Re,VE),e(VE,p8e),e(p8e,gLr),e(VE,hLr),e(VE,RJ),e(RJ,pLr),e(VE,_Lr),e(Re,uLr),e(Re,XE),e(XE,_8e),e(_8e,bLr),e(XE,vLr),e(XE,PJ),e(PJ,FLr),e(XE,TLr),e(Re,MLr),e(Re,zE),e(zE,u8e),e(u8e,ELr),e(zE,CLr),e(zE,BJ),e(BJ,wLr),e(zE,ALr),e(Re,yLr),e(Re,WE),e(WE,b8e),e(b8e,LLr),e(WE,xLr),e(WE,IJ),e(IJ,$Lr),e(WE,kLr),e(Re,SLr),e(Re,QE),e(QE,v8e),e(v8e,RLr),e(QE,PLr),e(QE,qJ),e(qJ,BLr),e(QE,ILr),e(Re,qLr),e(Re,HE),e(HE,F8e),e(F8e,NLr),e(HE,jLr),e(HE,NJ),e(NJ,DLr),e(HE,GLr),e(Dr,OLr),M(UE,Dr,null),b(f,FNe,u),b(f,Pc,u),e(Pc,JE),e(JE,T8e),M(bx,T8e,null),e(Pc,VLr),e(Pc,M8e),e(M8e,XLr),b(f,TNe,u),b(f,gr,u),M(vx,gr,null),e(gr,zLr),e(gr,Bc),e(Bc,WLr),e(Bc,jJ),e(jJ,QLr),e(Bc,HLr),e(Bc,DJ),e(DJ,ULr),e(Bc,JLr),e(gr,YLr),e(gr,Fx),e(Fx,KLr),e(Fx,E8e),e(E8e,ZLr),e(Fx,exr),e(gr,oxr),e(gr,Vt),M(Tx,Vt,null),e(Vt,rxr),e(Vt,C8e),e(C8e,txr),e(Vt,axr),e(Vt,Ic),e(Ic,nxr),e(Ic,w8e),e(w8e,sxr),e(Ic,lxr),e(Ic,GJ),e(GJ,ixr),e(Ic,dxr),e(Vt,cxr),M(YE,Vt,null),e(gr,fxr),e(gr,Gr),M(Mx,Gr,null),e(Gr,mxr),e(Gr,A8e),e(A8e,gxr),e(Gr,hxr),e(Gr,_n),e(_n,pxr),e(_n,y8e),e(y8e,_xr),e(_n,uxr),e(_n,L8e),e(L8e,bxr),e(_n,vxr),e(_n,x8e),e(x8e,Fxr),e(_n,Txr),e(Gr,Mxr),e(Gr,Me),e(Me,KE),e(KE,$8e),e($8e,Exr),e(KE,Cxr),e(KE,OJ),e(OJ,wxr),e(KE,Axr),e(Me,yxr),e(Me,ZE),e(ZE,k8e),e(k8e,Lxr),e(ZE,xxr),e(ZE,VJ),e(VJ,$xr),e(ZE,kxr),e(Me,Sxr),e(Me,eC),e(eC,S8e),e(S8e,Rxr),e(eC,Pxr),e(eC,XJ),e(XJ,Bxr),e(eC,Ixr),e(Me,qxr),e(Me,oC),e(oC,R8e),e(R8e,Nxr),e(oC,jxr),e(oC,zJ),e(zJ,Dxr),e(oC,Gxr),e(Me,Oxr),e(Me,rC),e(rC,P8e),e(P8e,Vxr),e(rC,Xxr),e(rC,WJ),e(WJ,zxr),e(rC,Wxr),e(Me,Qxr),e(Me,tC),e(tC,B8e),e(B8e,Hxr),e(tC,Uxr),e(tC,QJ),e(QJ,Jxr),e(tC,Yxr),e(Me,Kxr),e(Me,aC),e(aC,I8e),e(I8e,Zxr),e(aC,e9r),e(aC,HJ),e(HJ,o9r),e(aC,r9r),e(Me,t9r),e(Me,nC),e(nC,q8e),e(q8e,a9r),e(nC,n9r),e(nC,UJ),e(UJ,s9r),e(nC,l9r),e(Me,i9r),e(Me,sC),e(sC,N8e),e(N8e,d9r),e(sC,c9r),e(sC,JJ),e(JJ,f9r),e(sC,m9r),e(Me,g9r),e(Me,lC),e(lC,j8e),e(j8e,h9r),e(lC,p9r),e(lC,YJ),e(YJ,_9r),e(lC,u9r),e(Me,b9r),e(Me,iC),e(iC,D8e),e(D8e,v9r),e(iC,F9r),e(iC,KJ),e(KJ,T9r),e(iC,M9r),e(Me,E9r),e(Me,dC),e(dC,G8e),e(G8e,C9r),e(dC,w9r),e(dC,ZJ),e(ZJ,A9r),e(dC,y9r),e(Gr,L9r),M(cC,Gr,null),b(f,MNe,u),b(f,qc,u),e(qc,fC),e(fC,O8e),M(Ex,O8e,null),e(qc,x9r),e(qc,V8e),e(V8e,$9r),b(f,ENe,u),b(f,hr,u),M(Cx,hr,null),e(hr,k9r),e(hr,Nc),e(Nc,S9r),e(Nc,eY),e(eY,R9r),e(Nc,P9r),e(Nc,oY),e(oY,B9r),e(Nc,I9r),e(hr,q9r),e(hr,wx),e(wx,N9r),e(wx,X8e),e(X8e,j9r),e(wx,D9r),e(hr,G9r),e(hr,Xt),M(Ax,Xt,null),e(Xt,O9r),e(Xt,z8e),e(z8e,V9r),e(Xt,X9r),e(Xt,jc),e(jc,z9r),e(jc,W8e),e(W8e,W9r),e(jc,Q9r),e(jc,rY),e(rY,H9r),e(jc,U9r),e(Xt,J9r),M(mC,Xt,null),e(hr,Y9r),e(hr,Or),M(yx,Or,null),e(Or,K9r),e(Or,Q8e),e(Q8e,Z9r),e(Or,e$r),e(Or,un),e(un,o$r),e(un,H8e),e(H8e,r$r),e(un,t$r),e(un,U8e),e(U8e,a$r),e(un,n$r),e(un,J8e),e(J8e,s$r),e(un,l$r),e(Or,i$r),e(Or,Le),e(Le,gC),e(gC,Y8e),e(Y8e,d$r),e(gC,c$r),e(gC,tY),e(tY,f$r),e(gC,m$r),e(Le,g$r),e(Le,hC),e(hC,K8e),e(K8e,h$r),e(hC,p$r),e(hC,aY),e(aY,_$r),e(hC,u$r),e(Le,b$r),e(Le,pC),e(pC,Z8e),e(Z8e,v$r),e(pC,F$r),e(pC,nY),e(nY,T$r),e(pC,M$r),e(Le,E$r),e(Le,_C),e(_C,e7e),e(e7e,C$r),e(_C,w$r),e(_C,sY),e(sY,A$r),e(_C,y$r),e(Le,L$r),e(Le,uC),e(uC,o7e),e(o7e,x$r),e(uC,$$r),e(uC,lY),e(lY,k$r),e(uC,S$r),e(Le,R$r),e(Le,bC),e(bC,r7e),e(r7e,P$r),e(bC,B$r),e(bC,iY),e(iY,I$r),e(bC,q$r),e(Le,N$r),e(Le,vC),e(vC,t7e),e(t7e,j$r),e(vC,D$r),e(vC,dY),e(dY,G$r),e(vC,O$r),e(Le,V$r),e(Le,FC),e(FC,a7e),e(a7e,X$r),e(FC,z$r),e(FC,cY),e(cY,W$r),e(FC,Q$r),e(Le,H$r),e(Le,TC),e(TC,n7e),e(n7e,U$r),e(TC,J$r),e(TC,fY),e(fY,Y$r),e(TC,K$r),e(Le,Z$r),e(Le,MC),e(MC,s7e),e(s7e,ekr),e(MC,okr),e(MC,mY),e(mY,rkr),e(MC,tkr),e(Or,akr),M(EC,Or,null),b(f,CNe,u),b(f,Dc,u),e(Dc,CC),e(CC,l7e),M(Lx,l7e,null),e(Dc,nkr),e(Dc,i7e),e(i7e,skr),b(f,wNe,u),b(f,pr,u),M(xx,pr,null),e(pr,lkr),e(pr,Gc),e(Gc,ikr),e(Gc,gY),e(gY,dkr),e(Gc,ckr),e(Gc,hY),e(hY,fkr),e(Gc,mkr),e(pr,gkr),e(pr,$x),e($x,hkr),e($x,d7e),e(d7e,pkr),e($x,_kr),e(pr,ukr),e(pr,zt),M(kx,zt,null),e(zt,bkr),e(zt,c7e),e(c7e,vkr),e(zt,Fkr),e(zt,Oc),e(Oc,Tkr),e(Oc,f7e),e(f7e,Mkr),e(Oc,Ekr),e(Oc,pY),e(pY,Ckr),e(Oc,wkr),e(zt,Akr),M(wC,zt,null),e(pr,ykr),e(pr,Vr),M(Sx,Vr,null),e(Vr,Lkr),e(Vr,m7e),e(m7e,xkr),e(Vr,$kr),e(Vr,bn),e(bn,kkr),e(bn,g7e),e(g7e,Skr),e(bn,Rkr),e(bn,h7e),e(h7e,Pkr),e(bn,Bkr),e(bn,p7e),e(p7e,Ikr),e(bn,qkr),e(Vr,Nkr),e(Vr,Pe),e(Pe,AC),e(AC,_7e),e(_7e,jkr),e(AC,Dkr),e(AC,_Y),e(_Y,Gkr),e(AC,Okr),e(Pe,Vkr),e(Pe,yC),e(yC,u7e),e(u7e,Xkr),e(yC,zkr),e(yC,uY),e(uY,Wkr),e(yC,Qkr),e(Pe,Hkr),e(Pe,LC),e(LC,b7e),e(b7e,Ukr),e(LC,Jkr),e(LC,bY),e(bY,Ykr),e(LC,Kkr),e(Pe,Zkr),e(Pe,xC),e(xC,v7e),e(v7e,eSr),e(xC,oSr),e(xC,vY),e(vY,rSr),e(xC,tSr),e(Pe,aSr),e(Pe,$C),e($C,F7e),e(F7e,nSr),e($C,sSr),e($C,FY),e(FY,lSr),e($C,iSr),e(Pe,dSr),e(Pe,kC),e(kC,T7e),e(T7e,cSr),e(kC,fSr),e(kC,TY),e(TY,mSr),e(kC,gSr),e(Pe,hSr),e(Pe,SC),e(SC,M7e),e(M7e,pSr),e(SC,_Sr),e(SC,MY),e(MY,uSr),e(SC,bSr),e(Pe,vSr),e(Pe,RC),e(RC,E7e),e(E7e,FSr),e(RC,TSr),e(RC,EY),e(EY,MSr),e(RC,ESr),e(Pe,CSr),e(Pe,PC),e(PC,C7e),e(C7e,wSr),e(PC,ASr),e(PC,CY),e(CY,ySr),e(PC,LSr),e(Vr,xSr),M(BC,Vr,null),b(f,ANe,u),b(f,Vc,u),e(Vc,IC),e(IC,w7e),M(Rx,w7e,null),e(Vc,$Sr),e(Vc,A7e),e(A7e,kSr),b(f,yNe,u),b(f,_r,u),M(Px,_r,null),e(_r,SSr),e(_r,Xc),e(Xc,RSr),e(Xc,wY),e(wY,PSr),e(Xc,BSr),e(Xc,AY),e(AY,ISr),e(Xc,qSr),e(_r,NSr),e(_r,Bx),e(Bx,jSr),e(Bx,y7e),e(y7e,DSr),e(Bx,GSr),e(_r,OSr),e(_r,Wt),M(Ix,Wt,null),e(Wt,VSr),e(Wt,L7e),e(L7e,XSr),e(Wt,zSr),e(Wt,zc),e(zc,WSr),e(zc,x7e),e(x7e,QSr),e(zc,HSr),e(zc,yY),e(yY,USr),e(zc,JSr),e(Wt,YSr),M(qC,Wt,null),e(_r,KSr),e(_r,Xr),M(qx,Xr,null),e(Xr,ZSr),e(Xr,$7e),e($7e,eRr),e(Xr,oRr),e(Xr,vn),e(vn,rRr),e(vn,k7e),e(k7e,tRr),e(vn,aRr),e(vn,S7e),e(S7e,nRr),e(vn,sRr),e(vn,R7e),e(R7e,lRr),e(vn,iRr),e(Xr,dRr),e(Xr,xe),e(xe,NC),e(NC,P7e),e(P7e,cRr),e(NC,fRr),e(NC,LY),e(LY,mRr),e(NC,gRr),e(xe,hRr),e(xe,jC),e(jC,B7e),e(B7e,pRr),e(jC,_Rr),e(jC,xY),e(xY,uRr),e(jC,bRr),e(xe,vRr),e(xe,DC),e(DC,I7e),e(I7e,FRr),e(DC,TRr),e(DC,$Y),e($Y,MRr),e(DC,ERr),e(xe,CRr),e(xe,GC),e(GC,q7e),e(q7e,wRr),e(GC,ARr),e(GC,kY),e(kY,yRr),e(GC,LRr),e(xe,xRr),e(xe,OC),e(OC,N7e),e(N7e,$Rr),e(OC,kRr),e(OC,SY),e(SY,SRr),e(OC,RRr),e(xe,PRr),e(xe,VC),e(VC,j7e),e(j7e,BRr),e(VC,IRr),e(VC,RY),e(RY,qRr),e(VC,NRr),e(xe,jRr),e(xe,XC),e(XC,D7e),e(D7e,DRr),e(XC,GRr),e(XC,PY),e(PY,ORr),e(XC,VRr),e(xe,XRr),e(xe,zC),e(zC,G7e),e(G7e,zRr),e(zC,WRr),e(zC,BY),e(BY,QRr),e(zC,HRr),e(xe,URr),e(xe,WC),e(WC,O7e),e(O7e,JRr),e(WC,YRr),e(WC,IY),e(IY,KRr),e(WC,ZRr),e(xe,ePr),e(xe,QC),e(QC,V7e),e(V7e,oPr),e(QC,rPr),e(QC,qY),e(qY,tPr),e(QC,aPr),e(Xr,nPr),M(HC,Xr,null),b(f,LNe,u),b(f,Wc,u),e(Wc,UC),e(UC,X7e),M(Nx,X7e,null),e(Wc,sPr),e(Wc,z7e),e(z7e,lPr),b(f,xNe,u),b(f,ur,u),M(jx,ur,null),e(ur,iPr),e(ur,Qc),e(Qc,dPr),e(Qc,NY),e(NY,cPr),e(Qc,fPr),e(Qc,jY),e(jY,mPr),e(Qc,gPr),e(ur,hPr),e(ur,Dx),e(Dx,pPr),e(Dx,W7e),e(W7e,_Pr),e(Dx,uPr),e(ur,bPr),e(ur,Qt),M(Gx,Qt,null),e(Qt,vPr),e(Qt,Q7e),e(Q7e,FPr),e(Qt,TPr),e(Qt,Hc),e(Hc,MPr),e(Hc,H7e),e(H7e,EPr),e(Hc,CPr),e(Hc,DY),e(DY,wPr),e(Hc,APr),e(Qt,yPr),M(JC,Qt,null),e(ur,LPr),e(ur,zr),M(Ox,zr,null),e(zr,xPr),e(zr,U7e),e(U7e,$Pr),e(zr,kPr),e(zr,Fn),e(Fn,SPr),e(Fn,J7e),e(J7e,RPr),e(Fn,PPr),e(Fn,Y7e),e(Y7e,BPr),e(Fn,IPr),e(Fn,K7e),e(K7e,qPr),e(Fn,NPr),e(zr,jPr),e(zr,$e),e($e,YC),e(YC,Z7e),e(Z7e,DPr),e(YC,GPr),e(YC,GY),e(GY,OPr),e(YC,VPr),e($e,XPr),e($e,KC),e(KC,eMe),e(eMe,zPr),e(KC,WPr),e(KC,OY),e(OY,QPr),e(KC,HPr),e($e,UPr),e($e,ZC),e(ZC,oMe),e(oMe,JPr),e(ZC,YPr),e(ZC,VY),e(VY,KPr),e(ZC,ZPr),e($e,eBr),e($e,e5),e(e5,rMe),e(rMe,oBr),e(e5,rBr),e(e5,XY),e(XY,tBr),e(e5,aBr),e($e,nBr),e($e,o5),e(o5,tMe),e(tMe,sBr),e(o5,lBr),e(o5,zY),e(zY,iBr),e(o5,dBr),e($e,cBr),e($e,r5),e(r5,aMe),e(aMe,fBr),e(r5,mBr),e(r5,WY),e(WY,gBr),e(r5,hBr),e($e,pBr),e($e,t5),e(t5,nMe),e(nMe,_Br),e(t5,uBr),e(t5,QY),e(QY,bBr),e(t5,vBr),e($e,FBr),e($e,a5),e(a5,sMe),e(sMe,TBr),e(a5,MBr),e(a5,HY),e(HY,EBr),e(a5,CBr),e($e,wBr),e($e,n5),e(n5,lMe),e(lMe,ABr),e(n5,yBr),e(n5,UY),e(UY,LBr),e(n5,xBr),e($e,$Br),e($e,s5),e(s5,iMe),e(iMe,kBr),e(s5,SBr),e(s5,JY),e(JY,RBr),e(s5,PBr),e(zr,BBr),M(l5,zr,null),b(f,$Ne,u),b(f,Uc,u),e(Uc,i5),e(i5,dMe),M(Vx,dMe,null),e(Uc,IBr),e(Uc,cMe),e(cMe,qBr),b(f,kNe,u),b(f,br,u),M(Xx,br,null),e(br,NBr),e(br,Jc),e(Jc,jBr),e(Jc,YY),e(YY,DBr),e(Jc,GBr),e(Jc,KY),e(KY,OBr),e(Jc,VBr),e(br,XBr),e(br,zx),e(zx,zBr),e(zx,fMe),e(fMe,WBr),e(zx,QBr),e(br,HBr),e(br,Ht),M(Wx,Ht,null),e(Ht,UBr),e(Ht,mMe),e(mMe,JBr),e(Ht,YBr),e(Ht,Yc),e(Yc,KBr),e(Yc,gMe),e(gMe,ZBr),e(Yc,eIr),e(Yc,ZY),e(ZY,oIr),e(Yc,rIr),e(Ht,tIr),M(d5,Ht,null),e(br,aIr),e(br,Wr),M(Qx,Wr,null),e(Wr,nIr),e(Wr,hMe),e(hMe,sIr),e(Wr,lIr),e(Wr,Tn),e(Tn,iIr),e(Tn,pMe),e(pMe,dIr),e(Tn,cIr),e(Tn,_Me),e(_Me,fIr),e(Tn,mIr),e(Tn,uMe),e(uMe,gIr),e(Tn,hIr),e(Wr,pIr),e(Wr,De),e(De,c5),e(c5,bMe),e(bMe,_Ir),e(c5,uIr),e(c5,eK),e(eK,bIr),e(c5,vIr),e(De,FIr),e(De,f5),e(f5,vMe),e(vMe,TIr),e(f5,MIr),e(f5,oK),e(oK,EIr),e(f5,CIr),e(De,wIr),e(De,m5),e(m5,FMe),e(FMe,AIr),e(m5,yIr),e(m5,rK),e(rK,LIr),e(m5,xIr),e(De,$Ir),e(De,g5),e(g5,TMe),e(TMe,kIr),e(g5,SIr),e(g5,tK),e(tK,RIr),e(g5,PIr),e(De,BIr),e(De,h5),e(h5,MMe),e(MMe,IIr),e(h5,qIr),e(h5,aK),e(aK,NIr),e(h5,jIr),e(De,DIr),e(De,p5),e(p5,EMe),e(EMe,GIr),e(p5,OIr),e(p5,nK),e(nK,VIr),e(p5,XIr),e(De,zIr),e(De,_5),e(_5,CMe),e(CMe,WIr),e(_5,QIr),e(_5,sK),e(sK,HIr),e(_5,UIr),e(De,JIr),e(De,u5),e(u5,wMe),e(wMe,YIr),e(u5,KIr),e(u5,lK),e(lK,ZIr),e(u5,eqr),e(Wr,oqr),M(b5,Wr,null),b(f,SNe,u),b(f,Kc,u),e(Kc,v5),e(v5,AMe),M(Hx,AMe,null),e(Kc,rqr),e(Kc,yMe),e(yMe,tqr),b(f,RNe,u),b(f,vr,u),M(Ux,vr,null),e(vr,aqr),e(vr,Zc),e(Zc,nqr),e(Zc,iK),e(iK,sqr),e(Zc,lqr),e(Zc,dK),e(dK,iqr),e(Zc,dqr),e(vr,cqr),e(vr,Jx),e(Jx,fqr),e(Jx,LMe),e(LMe,mqr),e(Jx,gqr),e(vr,hqr),e(vr,Ut),M(Yx,Ut,null),e(Ut,pqr),e(Ut,xMe),e(xMe,_qr),e(Ut,uqr),e(Ut,ef),e(ef,bqr),e(ef,$Me),e($Me,vqr),e(ef,Fqr),e(ef,cK),e(cK,Tqr),e(ef,Mqr),e(Ut,Eqr),M(F5,Ut,null),e(vr,Cqr),e(vr,Qr),M(Kx,Qr,null),e(Qr,wqr),e(Qr,kMe),e(kMe,Aqr),e(Qr,yqr),e(Qr,Mn),e(Mn,Lqr),e(Mn,SMe),e(SMe,xqr),e(Mn,$qr),e(Mn,RMe),e(RMe,kqr),e(Mn,Sqr),e(Mn,PMe),e(PMe,Rqr),e(Mn,Pqr),e(Qr,Bqr),e(Qr,Ge),e(Ge,T5),e(T5,BMe),e(BMe,Iqr),e(T5,qqr),e(T5,fK),e(fK,Nqr),e(T5,jqr),e(Ge,Dqr),e(Ge,M5),e(M5,IMe),e(IMe,Gqr),e(M5,Oqr),e(M5,mK),e(mK,Vqr),e(M5,Xqr),e(Ge,zqr),e(Ge,E5),e(E5,qMe),e(qMe,Wqr),e(E5,Qqr),e(E5,gK),e(gK,Hqr),e(E5,Uqr),e(Ge,Jqr),e(Ge,C5),e(C5,NMe),e(NMe,Yqr),e(C5,Kqr),e(C5,hK),e(hK,Zqr),e(C5,eNr),e(Ge,oNr),e(Ge,w5),e(w5,jMe),e(jMe,rNr),e(w5,tNr),e(w5,pK),e(pK,aNr),e(w5,nNr),e(Ge,sNr),e(Ge,A5),e(A5,DMe),e(DMe,lNr),e(A5,iNr),e(A5,_K),e(_K,dNr),e(A5,cNr),e(Ge,fNr),e(Ge,y5),e(y5,GMe),e(GMe,mNr),e(y5,gNr),e(y5,uK),e(uK,hNr),e(y5,pNr),e(Ge,_Nr),e(Ge,L5),e(L5,OMe),e(OMe,uNr),e(L5,bNr),e(L5,bK),e(bK,vNr),e(L5,FNr),e(Qr,TNr),M(x5,Qr,null),b(f,PNe,u),b(f,of,u),e(of,$5),e($5,VMe),M(Zx,VMe,null),e(of,MNr),e(of,XMe),e(XMe,ENr),b(f,BNe,u),b(f,Fr,u),M(e9,Fr,null),e(Fr,CNr),e(Fr,rf),e(rf,wNr),e(rf,vK),e(vK,ANr),e(rf,yNr),e(rf,FK),e(FK,LNr),e(rf,xNr),e(Fr,$Nr),e(Fr,o9),e(o9,kNr),e(o9,zMe),e(zMe,SNr),e(o9,RNr),e(Fr,PNr),e(Fr,Jt),M(r9,Jt,null),e(Jt,BNr),e(Jt,WMe),e(WMe,INr),e(Jt,qNr),e(Jt,tf),e(tf,NNr),e(tf,QMe),e(QMe,jNr),e(tf,DNr),e(tf,TK),e(TK,GNr),e(tf,ONr),e(Jt,VNr),M(k5,Jt,null),e(Fr,XNr),e(Fr,Hr),M(t9,Hr,null),e(Hr,zNr),e(Hr,HMe),e(HMe,WNr),e(Hr,QNr),e(Hr,En),e(En,HNr),e(En,UMe),e(UMe,UNr),e(En,JNr),e(En,JMe),e(JMe,YNr),e(En,KNr),e(En,YMe),e(YMe,ZNr),e(En,ejr),e(Hr,ojr),e(Hr,KMe),e(KMe,S5),e(S5,ZMe),e(ZMe,rjr),e(S5,tjr),e(S5,MK),e(MK,ajr),e(S5,njr),e(Hr,sjr),M(R5,Hr,null),b(f,INe,u),b(f,af,u),e(af,P5),e(P5,e4e),M(a9,e4e,null),e(af,ljr),e(af,o4e),e(o4e,ijr),b(f,qNe,u),b(f,Tr,u),M(n9,Tr,null),e(Tr,djr),e(Tr,nf),e(nf,cjr),e(nf,EK),e(EK,fjr),e(nf,mjr),e(nf,CK),e(CK,gjr),e(nf,hjr),e(Tr,pjr),e(Tr,s9),e(s9,_jr),e(s9,r4e),e(r4e,ujr),e(s9,bjr),e(Tr,vjr),e(Tr,Yt),M(l9,Yt,null),e(Yt,Fjr),e(Yt,t4e),e(t4e,Tjr),e(Yt,Mjr),e(Yt,sf),e(sf,Ejr),e(sf,a4e),e(a4e,Cjr),e(sf,wjr),e(sf,wK),e(wK,Ajr),e(sf,yjr),e(Yt,Ljr),M(B5,Yt,null),e(Tr,xjr),e(Tr,Ur),M(i9,Ur,null),e(Ur,$jr),e(Ur,n4e),e(n4e,kjr),e(Ur,Sjr),e(Ur,Cn),e(Cn,Rjr),e(Cn,s4e),e(s4e,Pjr),e(Cn,Bjr),e(Cn,l4e),e(l4e,Ijr),e(Cn,qjr),e(Cn,i4e),e(i4e,Njr),e(Cn,jjr),e(Ur,Djr),e(Ur,d9),e(d9,I5),e(I5,d4e),e(d4e,Gjr),e(I5,Ojr),e(I5,AK),e(AK,Vjr),e(I5,Xjr),e(d9,zjr),e(d9,q5),e(q5,c4e),e(c4e,Wjr),e(q5,Qjr),e(q5,yK),e(yK,Hjr),e(q5,Ujr),e(Ur,Jjr),M(N5,Ur,null),b(f,NNe,u),b(f,lf,u),e(lf,j5),e(j5,f4e),M(c9,f4e,null),e(lf,Yjr),e(lf,m4e),e(m4e,Kjr),b(f,jNe,u),b(f,Mr,u),M(f9,Mr,null),e(Mr,Zjr),e(Mr,df),e(df,eDr),e(df,LK),e(LK,oDr),e(df,rDr),e(df,xK),e(xK,tDr),e(df,aDr),e(Mr,nDr),e(Mr,m9),e(m9,sDr),e(m9,g4e),e(g4e,lDr),e(m9,iDr),e(Mr,dDr),e(Mr,Kt),M(g9,Kt,null),e(Kt,cDr),e(Kt,h4e),e(h4e,fDr),e(Kt,mDr),e(Kt,cf),e(cf,gDr),e(cf,p4e),e(p4e,hDr),e(cf,pDr),e(cf,$K),e($K,_Dr),e(cf,uDr),e(Kt,bDr),M(D5,Kt,null),e(Mr,vDr),e(Mr,Jr),M(h9,Jr,null),e(Jr,FDr),e(Jr,_4e),e(_4e,TDr),e(Jr,MDr),e(Jr,wn),e(wn,EDr),e(wn,u4e),e(u4e,CDr),e(wn,wDr),e(wn,b4e),e(b4e,ADr),e(wn,yDr),e(wn,v4e),e(v4e,LDr),e(wn,xDr),e(Jr,$Dr),e(Jr,F4e),e(F4e,G5),e(G5,T4e),e(T4e,kDr),e(G5,SDr),e(G5,kK),e(kK,RDr),e(G5,PDr),e(Jr,BDr),M(O5,Jr,null),DNe=!0},p(f,[u]){const p9={};u&2&&(p9.$$scope={dirty:u,ctx:f}),vf.$set(p9);const M4e={};u&2&&(M4e.$$scope={dirty:u,ctx:f}),vg.$set(M4e);const E4e={};u&2&&(E4e.$$scope={dirty:u,ctx:f}),Zg.$set(E4e);const C4e={};u&2&&(C4e.$$scope={dirty:u,ctx:f}),Lh.$set(C4e);const _9={};u&2&&(_9.$$scope={dirty:u,ctx:f}),xh.$set(_9);const w4e={};u&2&&(w4e.$$scope={dirty:u,ctx:f}),Hh.$set(w4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Uh.$set(An);const A4e={};u&2&&(A4e.$$scope={dirty:u,ctx:f}),Kh.$set(A4e);const y4e={};u&2&&(y4e.$$scope={dirty:u,ctx:f}),X_.$set(y4e);const L4e={};u&2&&(L4e.$$scope={dirty:u,ctx:f}),W_.$set(L4e);const u9={};u&2&&(u9.$$scope={dirty:u,ctx:f}),Iu.$set(u9);const x4e={};u&2&&(x4e.$$scope={dirty:u,ctx:f}),Nu.$set(x4e);const b9={};u&2&&(b9.$$scope={dirty:u,ctx:f}),M1.$set(b9);const $4e={};u&2&&($4e.$$scope={dirty:u,ctx:f}),C1.$set($4e);const v9={};u&2&&(v9.$$scope={dirty:u,ctx:f}),lb.$set(v9);const k4e={};u&2&&(k4e.$$scope={dirty:u,ctx:f}),db.$set(k4e);const S4e={};u&2&&(S4e.$$scope={dirty:u,ctx:f}),yb.$set(S4e);const R4e={};u&2&&(R4e.$$scope={dirty:u,ctx:f}),xb.$set(R4e);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),E2.$set(ff);const P4e={};u&2&&(P4e.$$scope={dirty:u,ctx:f}),w2.$set(P4e);const B4e={};u&2&&(B4e.$$scope={dirty:u,ctx:f}),rv.$set(B4e);const I4e={};u&2&&(I4e.$$scope={dirty:u,ctx:f}),av.$set(I4e);const F9={};u&2&&(F9.$$scope={dirty:u,ctx:f}),fv.$set(F9);const q4e={};u&2&&(q4e.$$scope={dirty:u,ctx:f}),gv.$set(q4e);const N4e={};u&2&&(N4e.$$scope={dirty:u,ctx:f}),Hv.$set(N4e);const j4e={};u&2&&(j4e.$$scope={dirty:u,ctx:f}),Jv.$set(j4e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),q3.$set(et);const T9={};u&2&&(T9.$$scope={dirty:u,ctx:f}),j3.$set(T9);const D4e={};u&2&&(D4e.$$scope={dirty:u,ctx:f}),O3.$set(D4e);const M9={};u&2&&(M9.$$scope={dirty:u,ctx:f}),X3.$set(M9);const G4e={};u&2&&(G4e.$$scope={dirty:u,ctx:f}),tF.$set(G4e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),nF.$set(ot);const O4e={};u&2&&(O4e.$$scope={dirty:u,ctx:f}),iF.$set(O4e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),cF.$set(mf);const V4e={};u&2&&(V4e.$$scope={dirty:u,ctx:f}),TF.$set(V4e);const X4e={};u&2&&(X4e.$$scope={dirty:u,ctx:f}),EF.$set(X4e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),$F.$set(y);const V5={};u&2&&(V5.$$scope={dirty:u,ctx:f}),SF.$set(V5);const z4e={};u&2&&(z4e.$$scope={dirty:u,ctx:f}),VF.$set(z4e);const W4e={};u&2&&(W4e.$$scope={dirty:u,ctx:f}),zF.$set(W4e);const X5={};u&2&&(X5.$$scope={dirty:u,ctx:f}),UF.$set(X5);const Q4e={};u&2&&(Q4e.$$scope={dirty:u,ctx:f}),YF.$set(Q4e);const H4e={};u&2&&(H4e.$$scope={dirty:u,ctx:f}),aT.$set(H4e);const z5={};u&2&&(z5.$$scope={dirty:u,ctx:f}),sT.$set(z5);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),fT.$set(U4e);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),gT.$set(J4e);const W5={};u&2&&(W5.$$scope={dirty:u,ctx:f}),uT.$set(W5);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),vT.$set(Y4e);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),MT.$set(K4e);const Q5={};u&2&&(Q5.$$scope={dirty:u,ctx:f}),CT.$set(Q5);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),$T.$set(Z4e);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),ST.$set(eEe);const H5={};u&2&&(H5.$$scope={dirty:u,ctx:f}),BT.$set(H5);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),qT.$set(oEe);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),x8.$set(rEe);const U5={};u&2&&(U5.$$scope={dirty:u,ctx:f}),k8.$set(U5);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),o7.$set(tEe);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),t7.$set(aEe);const J5={};u&2&&(J5.$$scope={dirty:u,ctx:f}),_7.$set(J5);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),b7.$set(nEe);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),E7.$set(sEe);const Y5={};u&2&&(Y5.$$scope={dirty:u,ctx:f}),w7.$set(Y5);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),W7.$set(lEe);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),H7.$set(iEe);const K5={};u&2&&(K5.$$scope={dirty:u,ctx:f}),nM.$set(K5);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),lM.$set(dEe);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),PM.$set(cEe);const Z5={};u&2&&(Z5.$$scope={dirty:u,ctx:f}),IM.$set(Z5);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),e4.$set(fEe);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),r4.$set(mEe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),n4.$set(ew);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),l4.$set(gEe);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),d4.$set(hEe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),f4.$set(ow);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),S4.$set(pEe);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),P4.$set(_Ee);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),oE.$set(rw);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),tE.$set(uEe);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),nE.$set(bEe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),lE.$set(tw);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),dE.$set(vEe);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),fE.$set(FEe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),qE.$set(aw);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),jE.$set(TEe);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),UE.$set(MEe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),YE.$set(nw);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),cC.$set(EEe);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),mC.$set(CEe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),EC.$set(sw);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),wC.$set(wEe);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),BC.$set(AEe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),qC.$set(lw);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),HC.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),JC.$set(LEe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),l5.$set(iw);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),d5.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),b5.$set($Ee);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),F5.$set(dw);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),x5.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),k5.$set(SEe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),R5.$set(cw);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),B5.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),N5.$set(PEe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),D5.$set(fw);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),O5.$set(BEe)},i(f){DNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(vf.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(_0.$$.fragment,f),E(vg.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(v0.$$.fragment,f),E(M0.$$.fragment,f),E(Zg.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(L0.$$.fragment,f),E(Lh.$$.fragment,f),E(xh.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(P0.$$.fragment,f),E(Hh.$$.fragment,f),E(Uh.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E(Kh.$$.fragment,f),E(D0.$$.fragment,f),E(X_.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(W_.$$.fragment,f),E(z0.$$.fragment,f),E(Iu.$$.fragment,f),E(W0.$$.fragment,f),E(Q0.$$.fragment,f),E(U0.$$.fragment,f),E(Nu.$$.fragment,f),E(J0.$$.fragment,f),E(M1.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(e6.$$.fragment,f),E(C1.$$.fragment,f),E(o6.$$.fragment,f),E(lb.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(n6.$$.fragment,f),E(db.$$.fragment,f),E(s6.$$.fragment,f),E(yb.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(c6.$$.fragment,f),E(xb.$$.fragment,f),E(f6.$$.fragment,f),E(E2.$$.fragment,f),E(m6.$$.fragment,f),E(g6.$$.fragment,f),E(p6.$$.fragment,f),E(w2.$$.fragment,f),E(_6.$$.fragment,f),E(rv.$$.fragment,f),E(u6.$$.fragment,f),E(b6.$$.fragment,f),E(F6.$$.fragment,f),E(av.$$.fragment,f),E(T6.$$.fragment,f),E(fv.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(w6.$$.fragment,f),E(gv.$$.fragment,f),E(A6.$$.fragment,f),E(Hv.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E($6.$$.fragment,f),E(Jv.$$.fragment,f),E(k6.$$.fragment,f),E(q3.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(j3.$$.fragment,f),E(I6.$$.fragment,f),E(O3.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(X3.$$.fragment,f),E(G6.$$.fragment,f),E(tF.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(nF.$$.fragment,f),E(W6.$$.fragment,f),E(iF.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(cF.$$.fragment,f),E(Y6.$$.fragment,f),E(TF.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(EF.$$.fragment,f),E(ry.$$.fragment,f),E($F.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(SF.$$.fragment,f),E(ly.$$.fragment,f),E(VF.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(zF.$$.fragment,f),E(my.$$.fragment,f),E(UF.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(YF.$$.fragment,f),E(by.$$.fragment,f),E(aT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(sT.$$.fragment,f),E(Ey.$$.fragment,f),E(fT.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(gT.$$.fragment,f),E(Ly.$$.fragment,f),E(uT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(vT.$$.fragment,f),E(Py.$$.fragment,f),E(MT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(CT.$$.fragment,f),E(jy.$$.fragment,f),E($T.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(ST.$$.fragment,f),E(Xy.$$.fragment,f),E(BT.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(qT.$$.fragment,f),E(Uy.$$.fragment,f),E(x8.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(k8.$$.fragment,f),E(eL.$$.fragment,f),E(o7.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(t7.$$.fragment,f),E(nL.$$.fragment,f),E(_7.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(b7.$$.fragment,f),E(cL.$$.fragment,f),E(E7.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(w7.$$.fragment,f),E(pL.$$.fragment,f),E(W7.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(H7.$$.fragment,f),E(FL.$$.fragment,f),E(nM.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(lM.$$.fragment,f),E(wL.$$.fragment,f),E(PM.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(IM.$$.fragment,f),E($L.$$.fragment,f),E(e4.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(r4.$$.fragment,f),E(BL.$$.fragment,f),E(n4.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(l4.$$.fragment,f),E(GL.$$.fragment,f),E(d4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(f4.$$.fragment,f),E(WL.$$.fragment,f),E(S4.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(P4.$$.fragment,f),E(YL.$$.fragment,f),E(oE.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ox.$$.fragment,f),E(tE.$$.fragment,f),E(rx.$$.fragment,f),E(nE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(lE.$$.fragment,f),E(lx.$$.fragment,f),E(dE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(fE.$$.fragment,f),E(mx.$$.fragment,f),E(qE.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(jE.$$.fragment,f),E(ux.$$.fragment,f),E(UE.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(YE.$$.fragment,f),E(Mx.$$.fragment,f),E(cC.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(mC.$$.fragment,f),E(yx.$$.fragment,f),E(EC.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(wC.$$.fragment,f),E(Sx.$$.fragment,f),E(BC.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(qC.$$.fragment,f),E(qx.$$.fragment,f),E(HC.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(JC.$$.fragment,f),E(Ox.$$.fragment,f),E(l5.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(d5.$$.fragment,f),E(Qx.$$.fragment,f),E(b5.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(F5.$$.fragment,f),E(Kx.$$.fragment,f),E(x5.$$.fragment,f),E(Zx.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(k5.$$.fragment,f),E(t9.$$.fragment,f),E(R5.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(B5.$$.fragment,f),E(i9.$$.fragment,f),E(N5.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(D5.$$.fragment,f),E(h9.$$.fragment,f),E(O5.$$.fragment,f),DNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(vf.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(_0.$$.fragment,f),C(vg.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(v0.$$.fragment,f),C(M0.$$.fragment,f),C(Zg.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(L0.$$.fragment,f),C(Lh.$$.fragment,f),C(xh.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(P0.$$.fragment,f),C(Hh.$$.fragment,f),C(Uh.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C(Kh.$$.fragment,f),C(D0.$$.fragment,f),C(X_.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(W_.$$.fragment,f),C(z0.$$.fragment,f),C(Iu.$$.fragment,f),C(W0.$$.fragment,f),C(Q0.$$.fragment,f),C(U0.$$.fragment,f),C(Nu.$$.fragment,f),C(J0.$$.fragment,f),C(M1.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(e6.$$.fragment,f),C(C1.$$.fragment,f),C(o6.$$.fragment,f),C(lb.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(n6.$$.fragment,f),C(db.$$.fragment,f),C(s6.$$.fragment,f),C(yb.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(c6.$$.fragment,f),C(xb.$$.fragment,f),C(f6.$$.fragment,f),C(E2.$$.fragment,f),C(m6.$$.fragment,f),C(g6.$$.fragment,f),C(p6.$$.fragment,f),C(w2.$$.fragment,f),C(_6.$$.fragment,f),C(rv.$$.fragment,f),C(u6.$$.fragment,f),C(b6.$$.fragment,f),C(F6.$$.fragment,f),C(av.$$.fragment,f),C(T6.$$.fragment,f),C(fv.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(w6.$$.fragment,f),C(gv.$$.fragment,f),C(A6.$$.fragment,f),C(Hv.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C($6.$$.fragment,f),C(Jv.$$.fragment,f),C(k6.$$.fragment,f),C(q3.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(j3.$$.fragment,f),C(I6.$$.fragment,f),C(O3.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(X3.$$.fragment,f),C(G6.$$.fragment,f),C(tF.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(nF.$$.fragment,f),C(W6.$$.fragment,f),C(iF.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(cF.$$.fragment,f),C(Y6.$$.fragment,f),C(TF.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(EF.$$.fragment,f),C(ry.$$.fragment,f),C($F.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(SF.$$.fragment,f),C(ly.$$.fragment,f),C(VF.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(zF.$$.fragment,f),C(my.$$.fragment,f),C(UF.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(YF.$$.fragment,f),C(by.$$.fragment,f),C(aT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(sT.$$.fragment,f),C(Ey.$$.fragment,f),C(fT.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(gT.$$.fragment,f),C(Ly.$$.fragment,f),C(uT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(vT.$$.fragment,f),C(Py.$$.fragment,f),C(MT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(CT.$$.fragment,f),C(jy.$$.fragment,f),C($T.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(ST.$$.fragment,f),C(Xy.$$.fragment,f),C(BT.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(qT.$$.fragment,f),C(Uy.$$.fragment,f),C(x8.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(k8.$$.fragment,f),C(eL.$$.fragment,f),C(o7.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(t7.$$.fragment,f),C(nL.$$.fragment,f),C(_7.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(b7.$$.fragment,f),C(cL.$$.fragment,f),C(E7.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(w7.$$.fragment,f),C(pL.$$.fragment,f),C(W7.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(H7.$$.fragment,f),C(FL.$$.fragment,f),C(nM.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(lM.$$.fragment,f),C(wL.$$.fragment,f),C(PM.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(IM.$$.fragment,f),C($L.$$.fragment,f),C(e4.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(r4.$$.fragment,f),C(BL.$$.fragment,f),C(n4.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(l4.$$.fragment,f),C(GL.$$.fragment,f),C(d4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(f4.$$.fragment,f),C(WL.$$.fragment,f),C(S4.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(P4.$$.fragment,f),C(YL.$$.fragment,f),C(oE.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ox.$$.fragment,f),C(tE.$$.fragment,f),C(rx.$$.fragment,f),C(nE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(lE.$$.fragment,f),C(lx.$$.fragment,f),C(dE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(fE.$$.fragment,f),C(mx.$$.fragment,f),C(qE.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(jE.$$.fragment,f),C(ux.$$.fragment,f),C(UE.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(YE.$$.fragment,f),C(Mx.$$.fragment,f),C(cC.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(mC.$$.fragment,f),C(yx.$$.fragment,f),C(EC.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(wC.$$.fragment,f),C(Sx.$$.fragment,f),C(BC.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(qC.$$.fragment,f),C(qx.$$.fragment,f),C(HC.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(JC.$$.fragment,f),C(Ox.$$.fragment,f),C(l5.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(d5.$$.fragment,f),C(Qx.$$.fragment,f),C(b5.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(F5.$$.fragment,f),C(Kx.$$.fragment,f),C(x5.$$.fragment,f),C(Zx.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(k5.$$.fragment,f),C(t9.$$.fragment,f),C(R5.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(B5.$$.fragment,f),C(i9.$$.fragment,f),C(N5.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(D5.$$.fragment,f),C(h9.$$.fragment,f),C(O5.$$.fragment,f),DNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(qIe),f&&t(ui),w(c0),f&&t(NIe),f&&t(kn),f&&t(jIe),w(f0,f),f&&t(DIe),f&&t(S$),f&&t(GIe),w(vf,f),f&&t(OIe),f&&t(bi),w(m0),f&&t(VIe),f&&t(Co),w(g0),w(_0),w(vg),w(u0),f&&t(XIe),f&&t(Fi),w(b0),f&&t(zIe),f&&t(wo),w(v0),w(M0),w(Zg),w(E0),f&&t(WIe),f&&t(Ti),w(C0),f&&t(QIe),f&&t(Ao),w(w0),w(L0),w(Lh),w(xh),w(x0),f&&t(HIe),f&&t(Mi),w($0),f&&t(UIe),f&&t(yo),w(k0),w(P0),w(Hh),w(Uh),w(B0),f&&t(JIe),f&&t(Ci),w(I0),f&&t(YIe),f&&t(Lo),w(q0),w(j0),w(Kh),w(D0),w(X_),f&&t(KIe),f&&t(yi),w(G0),f&&t(ZIe),f&&t(xo),w(O0),w(X0),w(W_),w(z0),w(Iu),f&&t(eqe),f&&t($i),w(W0),f&&t(oqe),f&&t($o),w(Q0),w(U0),w(Nu),w(J0),w(M1),f&&t(rqe),f&&t(Ri),w(Y0),f&&t(tqe),f&&t(ko),w(K0),w(e6),w(C1),w(o6),w(lb),f&&t(aqe),f&&t(Ii),w(r6),f&&t(nqe),f&&t(So),w(t6),w(n6),w(db),w(s6),w(yb),f&&t(sqe),f&&t(ji),w(l6),f&&t(lqe),f&&t(Ro),w(i6),w(c6),w(xb),w(f6),w(E2),f&&t(iqe),f&&t(Oi),w(m6),f&&t(dqe),f&&t(Po),w(g6),w(p6),w(w2),w(_6),w(rv),f&&t(cqe),f&&t(zi),w(u6),f&&t(fqe),f&&t(Bo),w(b6),w(F6),w(av),w(T6),w(fv),f&&t(mqe),f&&t(Hi),w(M6),f&&t(gqe),f&&t(Io),w(E6),w(w6),w(gv),w(A6),w(Hv),f&&t(hqe),f&&t(Yi),w(y6),f&&t(pqe),f&&t(qo),w(L6),w($6),w(Jv),w(k6),w(q3),f&&t(_qe),f&&t(ed),w(S6),f&&t(uqe),f&&t(No),w(R6),w(B6),w(j3),w(I6),w(O3),f&&t(bqe),f&&t(td),w(q6),f&&t(vqe),f&&t(jo),w(N6),w(D6),w(X3),w(G6),w(tF),f&&t(Fqe),f&&t(sd),w(O6),f&&t(Tqe),f&&t(Do),w(V6),w(z6),w(nF),w(W6),w(iF),f&&t(Mqe),f&&t(dd),w(Q6),f&&t(Eqe),f&&t(Go),w(H6),w(J6),w(cF),w(Y6),w(TF),f&&t(Cqe),f&&t(md),w(K6),f&&t(wqe),f&&t(Oo),w(Z6),w(oy),w(EF),w(ry),w($F),f&&t(Aqe),f&&t(pd),w(ty),f&&t(yqe),f&&t(Vo),w(ay),w(sy),w(SF),w(ly),w(VF),f&&t(Lqe),f&&t(bd),w(iy),f&&t(xqe),f&&t(Xo),w(dy),w(fy),w(zF),w(my),w(UF),f&&t($qe),f&&t(Td),w(hy),f&&t(kqe),f&&t(zo),w(py),w(uy),w(YF),w(by),w(aT),f&&t(Sqe),f&&t(Cd),w(vy),f&&t(Rqe),f&&t(Wo),w(Fy),w(My),w(sT),w(Ey),w(fT),f&&t(Pqe),f&&t(Ld),w(Cy),f&&t(Bqe),f&&t(Qo),w(wy),w(yy),w(gT),w(Ly),w(uT),f&&t(Iqe),f&&t(kd),w($y),f&&t(qqe),f&&t(Ho),w(ky),w(Ry),w(vT),w(Py),w(MT),f&&t(Nqe),f&&t(Pd),w(By),f&&t(jqe),f&&t(Uo),w(Iy),w(Ny),w(CT),w(jy),w($T),f&&t(Dqe),f&&t(qd),w(Dy),f&&t(Gqe),f&&t(Jo),w(Gy),w(Vy),w(ST),w(Xy),w(BT),f&&t(Oqe),f&&t(Dd),w(zy),f&&t(Vqe),f&&t(Yo),w(Wy),w(Hy),w(qT),w(Uy),w(x8),f&&t(Xqe),f&&t(Vd),w(Jy),f&&t(zqe),f&&t(Ko),w(Yy),w(Zy),w(k8),w(eL),w(o7),f&&t(Wqe),f&&t(Wd),w(oL),f&&t(Qqe),f&&t(Zo),w(rL),w(aL),w(t7),w(nL),w(_7),f&&t(Hqe),f&&t(Ud),w(sL),f&&t(Uqe),f&&t(er),w(lL),w(dL),w(b7),w(cL),w(E7),f&&t(Jqe),f&&t(Kd),w(fL),f&&t(Yqe),f&&t(or),w(mL),w(hL),w(w7),w(pL),w(W7),f&&t(Kqe),f&&t(oc),w(_L),f&&t(Zqe),f&&t(rr),w(uL),w(vL),w(H7),w(FL),w(nM),f&&t(eNe),f&&t(ac),w(TL),f&&t(oNe),f&&t(tr),w(ML),w(CL),w(lM),w(wL),w(PM),f&&t(rNe),f&&t(lc),w(AL),f&&t(tNe),f&&t(ar),w(yL),w(xL),w(IM),w($L),w(e4),f&&t(aNe),f&&t(cc),w(kL),f&&t(nNe),f&&t(nr),w(SL),w(PL),w(r4),w(BL),w(n4),f&&t(sNe),f&&t(gc),w(qL),f&&t(lNe),f&&t(sr),w(NL),w(DL),w(l4),w(GL),w(d4),f&&t(iNe),f&&t(_c),w(OL),f&&t(dNe),f&&t(lr),w(VL),w(zL),w(f4),w(WL),w(S4),f&&t(cNe),f&&t(vc),w(QL),f&&t(fNe),f&&t(ir),w(HL),w(JL),w(P4),w(YL),w(oE),f&&t(mNe),f&&t(Mc),w(KL),f&&t(gNe),f&&t(dr),w(ZL),w(ox),w(tE),w(rx),w(nE),f&&t(hNe),f&&t(wc),w(tx),f&&t(pNe),f&&t(cr),w(ax),w(sx),w(lE),w(lx),w(dE),f&&t(_Ne),f&&t(Lc),w(ix),f&&t(uNe),f&&t(fr),w(dx),w(fx),w(fE),w(mx),w(qE),f&&t(bNe),f&&t(kc),w(gx),f&&t(vNe),f&&t(mr),w(hx),w(_x),w(jE),w(ux),w(UE),f&&t(FNe),f&&t(Pc),w(bx),f&&t(TNe),f&&t(gr),w(vx),w(Tx),w(YE),w(Mx),w(cC),f&&t(MNe),f&&t(qc),w(Ex),f&&t(ENe),f&&t(hr),w(Cx),w(Ax),w(mC),w(yx),w(EC),f&&t(CNe),f&&t(Dc),w(Lx),f&&t(wNe),f&&t(pr),w(xx),w(kx),w(wC),w(Sx),w(BC),f&&t(ANe),f&&t(Vc),w(Rx),f&&t(yNe),f&&t(_r),w(Px),w(Ix),w(qC),w(qx),w(HC),f&&t(LNe),f&&t(Wc),w(Nx),f&&t(xNe),f&&t(ur),w(jx),w(Gx),w(JC),w(Ox),w(l5),f&&t($Ne),f&&t(Uc),w(Vx),f&&t(kNe),f&&t(br),w(Xx),w(Wx),w(d5),w(Qx),w(b5),f&&t(SNe),f&&t(Kc),w(Hx),f&&t(RNe),f&&t(vr),w(Ux),w(Yx),w(F5),w(Kx),w(x5),f&&t(PNe),f&&t(of),w(Zx),f&&t(BNe),f&&t(Fr),w(e9),w(r9),w(k5),w(t9),w(R5),f&&t(INe),f&&t(af),w(a9),f&&t(qNe),f&&t(Tr),w(n9),w(l9),w(B5),w(i9),w(N5),f&&t(NNe),f&&t(lf),w(c9),f&&t(jNe),f&&t(Mr),w(f9),w(g9),w(D5),w(h9),w(O5)}}}const Pxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Bxt(L){return Byt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Oxt extends kyt{constructor(g){super();Syt(this,g,Bxt,Rxt,Ryt,{})}}export{Oxt as default,Pxt as metadata};
