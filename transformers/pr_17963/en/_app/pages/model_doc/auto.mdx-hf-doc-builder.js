import{S as Izt,i as Nzt,s as qzt,e as a,k as l,w as F,t as o,M as jzt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Dzt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as urt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Gzt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,JA,Pf,Oe,Qe,xi,Rn,YA,Pn,Bn,KA,$i,In,ZA,ki,Bf,ka;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),JA=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Rn=o("NewModel"),YA=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),KA=o(`, make sure its
`),$i=a("code"),In=o("config_class"),ZA=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),ka=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var $S=s(p);m=r($S,"NewModelConfig"),$S.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var kS=s(Ai);Rf=r(kS,"model_type"),kS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var SS=s(Li);yi=r(SS,'"new-model"'),SS.forEach(t),JA=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Sa=s(xi);Rn=r(Sa,"NewModel"),Sa.forEach(t),YA=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var RS=s(Pn);Bn=r(RS,"PreTrainedModel"),RS.forEach(t),KA=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var If=s($i);In=r(If,"config_class"),If.forEach(t),ZA=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var PS=s(ki);Bf=r(PS,"NewModelConfig"),PS.forEach(t),ka=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,JA),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Rn),e(Oe,YA),e(Oe,Pn),e(Pn,Bn),e(Oe,KA),e(Oe,$i),e($i,In),e(Oe,ZA),e(Oe,ki),e(ki,Bf),e(Oe,ka)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function Ozt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xzt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function zzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qzt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Wzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zzt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,JA,Pf,Oe,Qe,xi,Rn,YA,Pn,Bn,KA,$i,In,ZA,ki,Bf,ka,We,Ae,$S,Si,kS,SS,Co,Sa,RS,If,PS,UWe,PVe,Ri,Nf,hae,eL,JWe,pae,YWe,BVe,Nn,KWe,_ae,ZWe,eHe,uae,oHe,rHe,IVe,oL,NVe,BS,tHe,qVe,qf,jVe,Pi,jf,bae,rL,aHe,vae,nHe,DVe,wo,tL,sHe,aL,lHe,IS,iHe,dHe,cHe,nL,fHe,Fae,mHe,gHe,hHe,Ar,sL,pHe,Tae,_He,uHe,Bi,bHe,Mae,vHe,FHe,Eae,THe,MHe,EHe,A,Df,Cae,CHe,wHe,NS,AHe,LHe,yHe,Gf,wae,xHe,$He,qS,kHe,SHe,RHe,Of,Aae,PHe,BHe,jS,IHe,NHe,qHe,Vf,Lae,jHe,DHe,DS,GHe,OHe,VHe,Xf,yae,XHe,zHe,GS,QHe,WHe,HHe,zf,xae,UHe,JHe,OS,YHe,KHe,ZHe,Qf,$ae,eUe,oUe,VS,rUe,tUe,aUe,Wf,kae,nUe,sUe,XS,lUe,iUe,dUe,Hf,Sae,cUe,fUe,zS,mUe,gUe,hUe,Uf,Rae,pUe,_Ue,QS,uUe,bUe,vUe,Jf,Pae,FUe,TUe,WS,MUe,EUe,CUe,Yf,Bae,wUe,AUe,HS,LUe,yUe,xUe,Kf,Iae,$Ue,kUe,US,SUe,RUe,PUe,Zf,Nae,BUe,IUe,JS,NUe,qUe,jUe,em,qae,DUe,GUe,YS,OUe,VUe,XUe,om,jae,zUe,QUe,KS,WUe,HUe,UUe,rm,Dae,JUe,YUe,ZS,KUe,ZUe,eJe,tm,Gae,oJe,rJe,eR,tJe,aJe,nJe,am,Oae,sJe,lJe,oR,iJe,dJe,cJe,nm,Vae,fJe,mJe,rR,gJe,hJe,pJe,sm,Xae,_Je,uJe,tR,bJe,vJe,FJe,lm,zae,TJe,MJe,aR,EJe,CJe,wJe,im,Qae,AJe,LJe,nR,yJe,xJe,$Je,dm,Wae,kJe,SJe,sR,RJe,PJe,BJe,cm,Hae,IJe,NJe,lR,qJe,jJe,DJe,fm,Uae,GJe,OJe,iR,VJe,XJe,zJe,mm,Jae,QJe,WJe,dR,HJe,UJe,JJe,gm,Yae,YJe,KJe,cR,ZJe,eYe,oYe,hm,Kae,rYe,tYe,fR,aYe,nYe,sYe,pm,Zae,lYe,iYe,mR,dYe,cYe,fYe,_m,ene,mYe,gYe,gR,hYe,pYe,_Ye,um,one,uYe,bYe,hR,vYe,FYe,TYe,bm,rne,MYe,EYe,pR,CYe,wYe,AYe,vm,tne,LYe,yYe,_R,xYe,$Ye,kYe,Fm,ane,SYe,RYe,uR,PYe,BYe,IYe,Tm,nne,NYe,qYe,bR,jYe,DYe,GYe,Mm,sne,OYe,VYe,vR,XYe,zYe,QYe,Em,lne,WYe,HYe,FR,UYe,JYe,YYe,Cm,ine,KYe,ZYe,TR,eKe,oKe,rKe,wm,dne,tKe,aKe,MR,nKe,sKe,lKe,Am,cne,iKe,dKe,ER,cKe,fKe,mKe,Lm,fne,gKe,hKe,CR,pKe,_Ke,uKe,ym,mne,bKe,vKe,wR,FKe,TKe,MKe,xm,gne,EKe,CKe,AR,wKe,AKe,LKe,$m,hne,yKe,xKe,LR,$Ke,kKe,SKe,km,pne,RKe,PKe,yR,BKe,IKe,NKe,Sm,_ne,qKe,jKe,xR,DKe,GKe,OKe,Rm,une,VKe,XKe,$R,zKe,QKe,WKe,Pm,bne,HKe,UKe,kR,JKe,YKe,KKe,Bm,vne,ZKe,eZe,SR,oZe,rZe,tZe,Im,Fne,aZe,nZe,RR,sZe,lZe,iZe,Nm,Tne,dZe,cZe,PR,fZe,mZe,gZe,qm,Mne,hZe,pZe,BR,_Ze,uZe,bZe,jm,Ene,vZe,FZe,IR,TZe,MZe,EZe,Dm,Cne,CZe,wZe,NR,AZe,LZe,yZe,Gm,wne,xZe,$Ze,qR,kZe,SZe,RZe,Om,Ane,PZe,BZe,jR,IZe,NZe,qZe,Vm,Lne,jZe,DZe,DR,GZe,OZe,VZe,Xm,yne,XZe,zZe,GR,QZe,WZe,HZe,zm,xne,UZe,JZe,OR,YZe,KZe,ZZe,Qm,$ne,eeo,oeo,VR,reo,teo,aeo,Wm,kne,neo,seo,XR,leo,ieo,deo,Hm,Sne,ceo,feo,zR,meo,geo,heo,Um,Rne,peo,_eo,QR,ueo,beo,veo,Jm,Pne,Feo,Teo,WR,Meo,Eeo,Ceo,Ym,Bne,weo,Aeo,HR,Leo,yeo,xeo,Km,Ine,$eo,keo,UR,Seo,Reo,Peo,Zm,Nne,Beo,Ieo,JR,Neo,qeo,jeo,eg,qne,Deo,Geo,YR,Oeo,Veo,Xeo,og,jne,zeo,Qeo,KR,Weo,Heo,Ueo,rg,Dne,Jeo,Yeo,ZR,Keo,Zeo,eoo,tg,Gne,ooo,roo,eP,too,aoo,noo,ag,One,soo,loo,oP,ioo,doo,coo,ng,Vne,foo,moo,rP,goo,hoo,poo,sg,Xne,_oo,uoo,tP,boo,voo,Foo,lg,zne,Too,Moo,aP,Eoo,Coo,woo,ig,Qne,Aoo,Loo,nP,yoo,xoo,$oo,dg,Wne,koo,Soo,sP,Roo,Poo,Boo,cg,Hne,Ioo,Noo,lP,qoo,joo,Doo,fg,Une,Goo,Ooo,iP,Voo,Xoo,zoo,mg,Jne,Qoo,Woo,dP,Hoo,Uoo,Joo,gg,Yne,Yoo,Koo,cP,Zoo,ero,oro,hg,Kne,rro,tro,fP,aro,nro,sro,pg,Zne,lro,iro,mP,dro,cro,fro,_g,ese,mro,gro,gP,hro,pro,_ro,ug,ose,uro,bro,hP,vro,Fro,Tro,bg,rse,Mro,Ero,pP,Cro,wro,Aro,vg,tse,Lro,yro,_P,xro,$ro,kro,Fg,ase,Sro,Rro,uP,Pro,Bro,Iro,Tg,nse,Nro,qro,bP,jro,Dro,Gro,Mg,sse,Oro,Vro,vP,Xro,zro,Qro,Eg,lse,Wro,Hro,FP,Uro,Jro,Yro,Cg,ise,Kro,Zro,TP,eto,oto,rto,wg,dse,tto,ato,MP,nto,sto,lto,Ag,cse,ito,dto,EP,cto,fto,mto,Lg,fse,gto,hto,CP,pto,_to,uto,yg,mse,bto,vto,wP,Fto,Tto,Mto,xg,gse,Eto,Cto,AP,wto,Ato,Lto,$g,hse,yto,xto,LP,$to,kto,Sto,kg,pse,Rto,Pto,yP,Bto,Ito,Nto,Sg,_se,qto,jto,xP,Dto,Gto,Oto,Rg,use,Vto,Xto,$P,zto,Qto,Wto,Pg,bse,Hto,Uto,kP,Jto,Yto,Kto,Bg,vse,Zto,eao,SP,oao,rao,tao,Ig,Fse,aao,nao,RP,sao,lao,iao,Ng,Tse,dao,cao,PP,fao,mao,gao,qg,Mse,hao,pao,BP,_ao,uao,bao,jg,Ese,vao,Fao,IP,Tao,Mao,Eao,Dg,Cse,Cao,wao,NP,Aao,Lao,yao,Gg,wse,xao,$ao,qP,kao,Sao,Rao,Og,Ase,Pao,Bao,jP,Iao,Nao,qao,Vg,Lse,jao,Dao,DP,Gao,Oao,Vao,Xg,yse,Xao,zao,GP,Qao,Wao,Hao,zg,xse,Uao,Jao,OP,Yao,Kao,Zao,Qg,$se,eno,ono,VP,rno,tno,ano,Wg,kse,nno,sno,XP,lno,ino,dno,Hg,Sse,cno,fno,zP,mno,gno,hno,Ug,Rse,pno,_no,QP,uno,bno,vno,Jg,Fno,Yg,lL,Tno,Pse,Mno,GVe,Ii,Kg,Bse,iL,Eno,Ise,Cno,OVe,Ao,dL,wno,cL,Ano,WP,Lno,yno,xno,fL,$no,Nse,kno,Sno,Rno,Lr,mL,Pno,qse,Bno,Ino,Ra,Nno,jse,qno,jno,Dse,Dno,Gno,Gse,Ono,Vno,Xno,k,qn,Ose,zno,Qno,HP,Wno,Hno,UP,Uno,Jno,Yno,jn,Vse,Kno,Zno,JP,eso,oso,YP,rso,tso,aso,Dn,Xse,nso,sso,KP,lso,iso,ZP,dso,cso,fso,Zg,zse,mso,gso,eB,hso,pso,_so,Gn,Qse,uso,bso,oB,vso,Fso,rB,Tso,Mso,Eso,eh,Wse,Cso,wso,tB,Aso,Lso,yso,oh,Hse,xso,$so,aB,kso,Sso,Rso,rh,Use,Pso,Bso,nB,Iso,Nso,qso,On,Jse,jso,Dso,sB,Gso,Oso,lB,Vso,Xso,zso,Vn,Yse,Qso,Wso,iB,Hso,Uso,dB,Jso,Yso,Kso,Xn,Kse,Zso,elo,cB,olo,rlo,fB,tlo,alo,nlo,th,Zse,slo,llo,mB,ilo,dlo,clo,ah,ele,flo,mlo,gB,glo,hlo,plo,nh,ole,_lo,ulo,hB,blo,vlo,Flo,zn,rle,Tlo,Mlo,pB,Elo,Clo,_B,wlo,Alo,Llo,sh,tle,ylo,xlo,uB,$lo,klo,Slo,Qn,ale,Rlo,Plo,bB,Blo,Ilo,vB,Nlo,qlo,jlo,Wn,nle,Dlo,Glo,FB,Olo,Vlo,TB,Xlo,zlo,Qlo,Hn,sle,Wlo,Hlo,MB,Ulo,Jlo,EB,Ylo,Klo,Zlo,Un,lle,eio,oio,CB,rio,tio,wB,aio,nio,sio,lh,ile,lio,iio,AB,dio,cio,fio,Jn,dle,mio,gio,LB,hio,pio,yB,_io,uio,bio,Yn,cle,vio,Fio,xB,Tio,Mio,$B,Eio,Cio,wio,Kn,fle,Aio,Lio,kB,yio,xio,SB,$io,kio,Sio,Zn,mle,Rio,Pio,RB,Bio,Iio,PB,Nio,qio,jio,es,gle,Dio,Gio,BB,Oio,Vio,IB,Xio,zio,Qio,os,hle,Wio,Hio,NB,Uio,Jio,qB,Yio,Kio,Zio,ih,ple,edo,odo,jB,rdo,tdo,ado,rs,_le,ndo,sdo,DB,ldo,ido,GB,ddo,cdo,fdo,dh,ule,mdo,gdo,OB,hdo,pdo,_do,ts,ble,udo,bdo,VB,vdo,Fdo,XB,Tdo,Mdo,Edo,as,vle,Cdo,wdo,zB,Ado,Ldo,QB,ydo,xdo,$do,ns,Fle,kdo,Sdo,WB,Rdo,Pdo,HB,Bdo,Ido,Ndo,ch,Tle,qdo,jdo,UB,Ddo,Gdo,Odo,ss,Mle,Vdo,Xdo,JB,zdo,Qdo,YB,Wdo,Hdo,Udo,ls,Ele,Jdo,Ydo,KB,Kdo,Zdo,ZB,eco,oco,rco,is,Cle,tco,aco,eI,nco,sco,oI,lco,ico,dco,fh,wle,cco,fco,rI,mco,gco,hco,ds,Ale,pco,_co,tI,uco,bco,aI,vco,Fco,Tco,cs,Lle,Mco,Eco,nI,Cco,wco,sI,Aco,Lco,yco,fs,yle,xco,$co,lI,kco,Sco,iI,Rco,Pco,Bco,ms,xle,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,gs,$le,Vco,Xco,fI,zco,Qco,mI,Wco,Hco,Uco,hs,kle,Jco,Yco,gI,Kco,Zco,hI,efo,ofo,rfo,ps,Sle,tfo,afo,pI,nfo,sfo,_I,lfo,ifo,dfo,_s,Rle,cfo,ffo,uI,mfo,gfo,bI,hfo,pfo,_fo,mh,Ple,ufo,bfo,vI,vfo,Ffo,Tfo,us,Ble,Mfo,Efo,FI,Cfo,wfo,TI,Afo,Lfo,yfo,gh,Ile,xfo,$fo,MI,kfo,Sfo,Rfo,hh,Nle,Pfo,Bfo,EI,Ifo,Nfo,qfo,bs,qle,jfo,Dfo,CI,Gfo,Ofo,wI,Vfo,Xfo,zfo,vs,jle,Qfo,Wfo,AI,Hfo,Ufo,LI,Jfo,Yfo,Kfo,Fs,Dle,Zfo,emo,yI,omo,rmo,xI,tmo,amo,nmo,ph,Gle,smo,lmo,$I,imo,dmo,cmo,Ts,Ole,fmo,mmo,kI,gmo,hmo,SI,pmo,_mo,umo,Ms,Vle,bmo,vmo,RI,Fmo,Tmo,PI,Mmo,Emo,Cmo,Es,Xle,wmo,Amo,BI,Lmo,ymo,II,xmo,$mo,kmo,Cs,zle,Smo,Rmo,NI,Pmo,Bmo,qI,Imo,Nmo,qmo,ws,Qle,jmo,Dmo,jI,Gmo,Omo,DI,Vmo,Xmo,zmo,As,Wle,Qmo,Wmo,GI,Hmo,Umo,OI,Jmo,Ymo,Kmo,Ls,Hle,Zmo,ego,VI,ogo,rgo,XI,tgo,ago,ngo,_h,Ule,sgo,lgo,zI,igo,dgo,cgo,ys,Jle,fgo,mgo,QI,ggo,hgo,WI,pgo,_go,ugo,uh,Yle,bgo,vgo,HI,Fgo,Tgo,Mgo,bh,Kle,Ego,Cgo,UI,wgo,Ago,Lgo,vh,Zle,ygo,xgo,JI,$go,kgo,Sgo,Fh,eie,Rgo,Pgo,YI,Bgo,Igo,Ngo,xs,oie,qgo,jgo,KI,Dgo,Ggo,ZI,Ogo,Vgo,Xgo,Th,rie,zgo,Qgo,eN,Wgo,Hgo,Ugo,$s,tie,Jgo,Ygo,oN,Kgo,Zgo,rN,eho,oho,rho,ks,aie,tho,aho,tN,nho,sho,aN,lho,iho,dho,Ss,nie,cho,fho,nN,mho,gho,sN,hho,pho,_ho,Rs,sie,uho,bho,lN,vho,Fho,iN,Tho,Mho,Eho,Ps,lie,Cho,who,dN,Aho,Lho,cN,yho,xho,$ho,Bs,iie,kho,Sho,fN,Rho,Pho,mN,Bho,Iho,Nho,Mh,die,qho,jho,gN,Dho,Gho,Oho,Eh,cie,Vho,Xho,hN,zho,Qho,Who,Is,fie,Hho,Uho,pN,Jho,Yho,_N,Kho,Zho,epo,Ns,mie,opo,rpo,uN,tpo,apo,bN,npo,spo,lpo,qs,gie,ipo,dpo,vN,cpo,fpo,FN,mpo,gpo,hpo,Ch,hie,ppo,_po,TN,upo,bpo,vpo,wh,pie,Fpo,Tpo,MN,Mpo,Epo,Cpo,Ah,_ie,wpo,Apo,EN,Lpo,ypo,xpo,js,uie,$po,kpo,CN,Spo,Rpo,wN,Ppo,Bpo,Ipo,Ds,bie,Npo,qpo,AN,jpo,Dpo,LN,Gpo,Opo,Vpo,Lh,vie,Xpo,zpo,yN,Qpo,Wpo,Hpo,yh,Fie,Upo,Jpo,xN,Ypo,Kpo,Zpo,xh,Tie,e_o,o_o,$N,r_o,t_o,a_o,Gs,Mie,n_o,s_o,kN,l_o,i_o,SN,d_o,c_o,f_o,$h,Eie,m_o,g_o,RN,h_o,p_o,__o,kh,Cie,u_o,b_o,PN,v_o,F_o,T_o,Os,wie,M_o,E_o,BN,C_o,w_o,IN,A_o,L_o,y_o,Vs,Aie,x_o,$_o,NN,k_o,S_o,qN,R_o,P_o,B_o,Xs,Lie,I_o,N_o,jN,q_o,j_o,DN,D_o,G_o,O_o,zs,yie,V_o,X_o,GN,z_o,Q_o,ON,W_o,H_o,U_o,Sh,J_o,Rh,gL,Y_o,xie,K_o,VVe,Ni,Ph,$ie,hL,Z_o,kie,euo,XVe,Lo,pL,ouo,_L,ruo,VN,tuo,auo,nuo,uL,suo,Sie,luo,iuo,duo,He,bL,cuo,Rie,fuo,muo,Pa,guo,Pie,huo,puo,Bie,_uo,uuo,Iie,buo,vuo,Fuo,Y,Bh,Nie,Tuo,Muo,XN,Euo,Cuo,wuo,Ih,qie,Auo,Luo,zN,yuo,xuo,$uo,Nh,jie,kuo,Suo,QN,Ruo,Puo,Buo,qh,Die,Iuo,Nuo,WN,quo,juo,Duo,jh,Gie,Guo,Ouo,HN,Vuo,Xuo,zuo,Dh,Oie,Quo,Wuo,UN,Huo,Uuo,Juo,Gh,Vie,Yuo,Kuo,JN,Zuo,e1o,o1o,Oh,Xie,r1o,t1o,YN,a1o,n1o,s1o,Vh,zie,l1o,i1o,KN,d1o,c1o,f1o,Xh,Qie,m1o,g1o,ZN,h1o,p1o,_1o,zh,Wie,u1o,b1o,eq,v1o,F1o,T1o,Qh,Hie,M1o,E1o,oq,C1o,w1o,A1o,Wh,Uie,L1o,y1o,rq,x1o,$1o,k1o,Hh,Jie,S1o,R1o,tq,P1o,B1o,I1o,Uh,Yie,N1o,q1o,aq,j1o,D1o,G1o,Jh,Kie,O1o,V1o,nq,X1o,z1o,Q1o,Yh,Zie,W1o,H1o,sq,U1o,J1o,Y1o,Kh,ede,K1o,Z1o,lq,e2o,o2o,r2o,Zh,ode,t2o,a2o,iq,n2o,s2o,l2o,ep,rde,i2o,d2o,dq,c2o,f2o,m2o,op,tde,g2o,h2o,cq,p2o,_2o,u2o,rp,ade,b2o,v2o,fq,F2o,T2o,M2o,tp,nde,E2o,C2o,mq,w2o,A2o,L2o,ap,sde,y2o,x2o,gq,$2o,k2o,S2o,np,lde,R2o,P2o,hq,B2o,I2o,N2o,sp,ide,q2o,j2o,pq,D2o,G2o,O2o,lp,dde,V2o,X2o,_q,z2o,Q2o,W2o,ip,cde,H2o,U2o,uq,J2o,Y2o,K2o,dp,fde,Z2o,ebo,bq,obo,rbo,tbo,cp,mde,abo,nbo,vq,sbo,lbo,ibo,fp,gde,dbo,cbo,Fq,fbo,mbo,gbo,mp,hde,hbo,pbo,Tq,_bo,ubo,bbo,gp,pde,vbo,Fbo,Mq,Tbo,Mbo,Ebo,hp,_de,Cbo,wbo,Eq,Abo,Lbo,ybo,pp,xbo,_p,$bo,up,vL,kbo,ude,Sbo,zVe,qi,bp,bde,FL,Rbo,vde,Pbo,QVe,yo,TL,Bbo,ML,Ibo,Cq,Nbo,qbo,jbo,EL,Dbo,Fde,Gbo,Obo,Vbo,Ue,CL,Xbo,Tde,zbo,Qbo,ji,Wbo,Mde,Hbo,Ubo,Ede,Jbo,Ybo,Kbo,he,vp,Cde,Zbo,evo,wq,ovo,rvo,tvo,Fp,wde,avo,nvo,Ade,svo,lvo,ivo,Tp,Lde,dvo,cvo,Aq,fvo,mvo,gvo,Mp,yde,hvo,pvo,Lq,_vo,uvo,bvo,Ep,xde,vvo,Fvo,yq,Tvo,Mvo,Evo,Cp,$de,Cvo,wvo,xq,Avo,Lvo,yvo,wp,kde,xvo,$vo,$q,kvo,Svo,Rvo,Ap,Sde,Pvo,Bvo,kq,Ivo,Nvo,qvo,Lp,Rde,jvo,Dvo,Sq,Gvo,Ovo,Vvo,yp,Pde,Xvo,zvo,Rq,Qvo,Wvo,Hvo,xp,Bde,Uvo,Jvo,Pq,Yvo,Kvo,Zvo,$p,Ide,e3o,o3o,Bq,r3o,t3o,a3o,kp,Nde,n3o,s3o,Iq,l3o,i3o,d3o,Sp,qde,c3o,f3o,Nq,m3o,g3o,h3o,Rp,jde,p3o,_3o,qq,u3o,b3o,v3o,Pp,Dde,F3o,T3o,jq,M3o,E3o,C3o,Bp,Gde,w3o,A3o,Dq,L3o,y3o,x3o,Ip,Ode,$3o,k3o,Gq,S3o,R3o,P3o,Np,B3o,qp,I3o,jp,wL,N3o,Vde,q3o,WVe,Di,Dp,Xde,AL,j3o,zde,D3o,HVe,xo,LL,G3o,Gi,O3o,Oq,V3o,X3o,Vq,z3o,Q3o,W3o,yL,H3o,Qde,U3o,J3o,Y3o,lt,xL,K3o,Wde,Z3o,eFo,Oi,oFo,Hde,rFo,tFo,Xq,aFo,nFo,sFo,Gp,lFo,Je,$L,iFo,Ude,dFo,cFo,Ba,fFo,Jde,mFo,gFo,Yde,hFo,pFo,Kde,_Fo,uFo,bFo,y,Op,Zde,vFo,FFo,zq,TFo,MFo,EFo,Vp,ece,CFo,wFo,Qq,AFo,LFo,yFo,Xp,oce,xFo,$Fo,Wq,kFo,SFo,RFo,zp,rce,PFo,BFo,Hq,IFo,NFo,qFo,Qp,tce,jFo,DFo,Uq,GFo,OFo,VFo,Wp,ace,XFo,zFo,Jq,QFo,WFo,HFo,Hp,nce,UFo,JFo,Yq,YFo,KFo,ZFo,Up,sce,e6o,o6o,Kq,r6o,t6o,a6o,Jp,lce,n6o,s6o,Zq,l6o,i6o,d6o,Yp,ice,c6o,f6o,ej,m6o,g6o,h6o,Kp,dce,p6o,_6o,oj,u6o,b6o,v6o,Zp,cce,F6o,T6o,rj,M6o,E6o,C6o,e_,fce,w6o,A6o,tj,L6o,y6o,x6o,o_,mce,$6o,k6o,aj,S6o,R6o,P6o,r_,gce,B6o,I6o,nj,N6o,q6o,j6o,t_,hce,D6o,G6o,sj,O6o,V6o,X6o,a_,pce,z6o,Q6o,lj,W6o,H6o,U6o,n_,_ce,J6o,Y6o,ij,K6o,Z6o,eTo,s_,uce,oTo,rTo,dj,tTo,aTo,nTo,l_,bce,sTo,lTo,cj,iTo,dTo,cTo,i_,vce,fTo,mTo,fj,gTo,hTo,pTo,d_,Fce,_To,uTo,mj,bTo,vTo,FTo,c_,Tce,TTo,MTo,gj,ETo,CTo,wTo,f_,Mce,ATo,LTo,hj,yTo,xTo,$To,m_,Ece,kTo,STo,pj,RTo,PTo,BTo,g_,Cce,ITo,NTo,_j,qTo,jTo,DTo,h_,wce,GTo,OTo,uj,VTo,XTo,zTo,p_,Ace,QTo,WTo,bj,HTo,UTo,JTo,__,Lce,YTo,KTo,vj,ZTo,e7o,o7o,u_,yce,r7o,t7o,Fj,a7o,n7o,s7o,b_,xce,l7o,i7o,Tj,d7o,c7o,f7o,v_,$ce,m7o,g7o,Mj,h7o,p7o,_7o,F_,kce,u7o,b7o,Ej,v7o,F7o,T7o,T_,Sce,M7o,E7o,Cj,C7o,w7o,A7o,Qs,Rce,L7o,y7o,wj,x7o,$7o,Aj,k7o,S7o,R7o,M_,Pce,P7o,B7o,Lj,I7o,N7o,q7o,E_,Bce,j7o,D7o,yj,G7o,O7o,V7o,C_,Ice,X7o,z7o,xj,Q7o,W7o,H7o,w_,Nce,U7o,J7o,$j,Y7o,K7o,Z7o,A_,qce,e9o,o9o,kj,r9o,t9o,a9o,L_,jce,n9o,s9o,Sj,l9o,i9o,d9o,y_,Dce,c9o,f9o,Rj,m9o,g9o,h9o,x_,Gce,p9o,_9o,Pj,u9o,b9o,v9o,$_,Oce,F9o,T9o,Bj,M9o,E9o,C9o,k_,Vce,w9o,A9o,Ij,L9o,y9o,x9o,S_,Xce,$9o,k9o,Nj,S9o,R9o,P9o,R_,zce,B9o,I9o,qj,N9o,q9o,j9o,P_,Qce,D9o,G9o,jj,O9o,V9o,X9o,B_,Wce,z9o,Q9o,Dj,W9o,H9o,U9o,I_,Hce,J9o,Y9o,Gj,K9o,Z9o,eMo,N_,Uce,oMo,rMo,Oj,tMo,aMo,nMo,q_,Jce,sMo,lMo,Vj,iMo,dMo,cMo,j_,Yce,fMo,mMo,Xj,gMo,hMo,pMo,D_,Kce,_Mo,uMo,zj,bMo,vMo,FMo,G_,Zce,TMo,MMo,Qj,EMo,CMo,wMo,O_,efe,AMo,LMo,Wj,yMo,xMo,$Mo,V_,ofe,kMo,SMo,Hj,RMo,PMo,BMo,X_,rfe,IMo,NMo,Uj,qMo,jMo,DMo,z_,tfe,GMo,OMo,Jj,VMo,XMo,zMo,Q_,afe,QMo,WMo,Yj,HMo,UMo,JMo,W_,nfe,YMo,KMo,Kj,ZMo,e4o,o4o,H_,sfe,r4o,t4o,Zj,a4o,n4o,s4o,U_,lfe,l4o,i4o,eD,d4o,c4o,f4o,J_,ife,m4o,g4o,oD,h4o,p4o,_4o,Y_,dfe,u4o,b4o,rD,v4o,F4o,T4o,K_,cfe,M4o,E4o,tD,C4o,w4o,A4o,Z_,ffe,L4o,y4o,aD,x4o,$4o,k4o,eu,mfe,S4o,R4o,nD,P4o,B4o,I4o,ou,gfe,N4o,q4o,sD,j4o,D4o,G4o,ru,hfe,O4o,V4o,lD,X4o,z4o,Q4o,tu,pfe,W4o,H4o,iD,U4o,J4o,Y4o,au,_fe,K4o,Z4o,dD,eEo,oEo,rEo,nu,ufe,tEo,aEo,cD,nEo,sEo,lEo,su,bfe,iEo,dEo,fD,cEo,fEo,mEo,lu,vfe,gEo,hEo,mD,pEo,_Eo,uEo,iu,Ffe,bEo,vEo,gD,FEo,TEo,MEo,du,Tfe,EEo,CEo,hD,wEo,AEo,LEo,cu,Mfe,yEo,xEo,pD,$Eo,kEo,SEo,fu,Efe,REo,PEo,_D,BEo,IEo,NEo,mu,Cfe,qEo,jEo,uD,DEo,GEo,OEo,gu,wfe,VEo,XEo,bD,zEo,QEo,WEo,hu,Afe,HEo,UEo,vD,JEo,YEo,KEo,pu,Lfe,ZEo,eCo,FD,oCo,rCo,tCo,_u,yfe,aCo,nCo,TD,sCo,lCo,iCo,uu,xfe,dCo,cCo,MD,fCo,mCo,gCo,bu,$fe,hCo,pCo,ED,_Co,uCo,bCo,vu,kfe,vCo,FCo,CD,TCo,MCo,ECo,Fu,Sfe,CCo,wCo,wD,ACo,LCo,yCo,Tu,Rfe,xCo,$Co,AD,kCo,SCo,RCo,Mu,Pfe,PCo,BCo,LD,ICo,NCo,qCo,Eu,Bfe,jCo,DCo,yD,GCo,OCo,VCo,Cu,Ife,XCo,zCo,xD,QCo,WCo,HCo,wu,Nfe,UCo,JCo,$D,YCo,KCo,ZCo,Au,qfe,e5o,o5o,kD,r5o,t5o,a5o,Lu,jfe,n5o,s5o,SD,l5o,i5o,d5o,yu,Dfe,c5o,f5o,RD,m5o,g5o,h5o,xu,Gfe,p5o,_5o,PD,u5o,b5o,v5o,$u,Ofe,F5o,T5o,BD,M5o,E5o,C5o,ku,Vfe,w5o,A5o,ID,L5o,y5o,x5o,Su,Xfe,$5o,k5o,ND,S5o,R5o,P5o,Ru,zfe,B5o,I5o,qD,N5o,q5o,j5o,Pu,Qfe,D5o,G5o,jD,O5o,V5o,X5o,Bu,Wfe,z5o,Q5o,DD,W5o,H5o,U5o,Iu,Hfe,J5o,Y5o,GD,K5o,Z5o,e0o,Nu,Ufe,o0o,r0o,OD,t0o,a0o,n0o,qu,Jfe,s0o,l0o,VD,i0o,d0o,c0o,ju,Yfe,f0o,m0o,XD,g0o,h0o,p0o,Du,Kfe,_0o,u0o,zD,b0o,v0o,F0o,Gu,Zfe,T0o,M0o,QD,E0o,C0o,w0o,Ou,eme,A0o,L0o,WD,y0o,x0o,$0o,Vu,ome,k0o,S0o,HD,R0o,P0o,B0o,Xu,I0o,rme,N0o,q0o,tme,j0o,D0o,zu,UVe,Vi,Qu,ame,kL,G0o,nme,O0o,JVe,$o,SL,V0o,Xi,X0o,UD,z0o,Q0o,JD,W0o,H0o,U0o,RL,J0o,sme,Y0o,K0o,Z0o,it,PL,ewo,lme,owo,rwo,zi,two,ime,awo,nwo,YD,swo,lwo,iwo,Wu,dwo,Ye,BL,cwo,dme,fwo,mwo,Ia,gwo,cme,hwo,pwo,fme,_wo,uwo,mme,bwo,vwo,Fwo,G,Hu,gme,Two,Mwo,KD,Ewo,Cwo,wwo,Uu,hme,Awo,Lwo,ZD,ywo,xwo,$wo,Ju,pme,kwo,Swo,eG,Rwo,Pwo,Bwo,Yu,_me,Iwo,Nwo,oG,qwo,jwo,Dwo,Ku,ume,Gwo,Owo,rG,Vwo,Xwo,zwo,Zu,bme,Qwo,Wwo,tG,Hwo,Uwo,Jwo,e1,vme,Ywo,Kwo,aG,Zwo,eAo,oAo,o1,Fme,rAo,tAo,nG,aAo,nAo,sAo,r1,Tme,lAo,iAo,sG,dAo,cAo,fAo,t1,Mme,mAo,gAo,lG,hAo,pAo,_Ao,a1,Eme,uAo,bAo,iG,vAo,FAo,TAo,n1,Cme,MAo,EAo,dG,CAo,wAo,AAo,s1,wme,LAo,yAo,cG,xAo,$Ao,kAo,l1,Ame,SAo,RAo,fG,PAo,BAo,IAo,i1,Lme,NAo,qAo,mG,jAo,DAo,GAo,d1,yme,OAo,VAo,gG,XAo,zAo,QAo,c1,xme,WAo,HAo,hG,UAo,JAo,YAo,f1,$me,KAo,ZAo,pG,eLo,oLo,rLo,m1,kme,tLo,aLo,_G,nLo,sLo,lLo,g1,Sme,iLo,dLo,uG,cLo,fLo,mLo,h1,Rme,gLo,hLo,bG,pLo,_Lo,uLo,p1,Pme,bLo,vLo,vG,FLo,TLo,MLo,_1,Bme,ELo,CLo,FG,wLo,ALo,LLo,u1,Ime,yLo,xLo,TG,$Lo,kLo,SLo,b1,Nme,RLo,PLo,MG,BLo,ILo,NLo,v1,qme,qLo,jLo,EG,DLo,GLo,OLo,F1,jme,VLo,XLo,CG,zLo,QLo,WLo,T1,Dme,HLo,ULo,wG,JLo,YLo,KLo,M1,Gme,ZLo,eyo,AG,oyo,ryo,tyo,E1,Ome,ayo,nyo,LG,syo,lyo,iyo,C1,Vme,dyo,cyo,yG,fyo,myo,gyo,w1,Xme,hyo,pyo,xG,_yo,uyo,byo,A1,zme,vyo,Fyo,$G,Tyo,Myo,Eyo,L1,Qme,Cyo,wyo,kG,Ayo,Lyo,yyo,y1,Wme,xyo,$yo,SG,kyo,Syo,Ryo,x1,Hme,Pyo,Byo,RG,Iyo,Nyo,qyo,$1,Ume,jyo,Dyo,PG,Gyo,Oyo,Vyo,k1,Jme,Xyo,zyo,BG,Qyo,Wyo,Hyo,S1,Yme,Uyo,Jyo,IG,Yyo,Kyo,Zyo,R1,Kme,e8o,o8o,NG,r8o,t8o,a8o,P1,Zme,n8o,s8o,qG,l8o,i8o,d8o,B1,ege,c8o,f8o,jG,m8o,g8o,h8o,I1,oge,p8o,_8o,DG,u8o,b8o,v8o,N1,rge,F8o,T8o,GG,M8o,E8o,C8o,q1,tge,w8o,A8o,OG,L8o,y8o,x8o,j1,$8o,age,k8o,S8o,nge,R8o,P8o,D1,YVe,Qi,G1,sge,IL,B8o,lge,I8o,KVe,ko,NL,N8o,Wi,q8o,VG,j8o,D8o,XG,G8o,O8o,V8o,qL,X8o,ige,z8o,Q8o,W8o,dt,jL,H8o,dge,U8o,J8o,Hi,Y8o,cge,K8o,Z8o,zG,exo,oxo,rxo,O1,txo,Ke,DL,axo,fge,nxo,sxo,Na,lxo,mge,ixo,dxo,gge,cxo,fxo,hge,mxo,gxo,hxo,z,V1,pge,pxo,_xo,QG,uxo,bxo,vxo,X1,_ge,Fxo,Txo,WG,Mxo,Exo,Cxo,z1,uge,wxo,Axo,HG,Lxo,yxo,xxo,Q1,bge,$xo,kxo,UG,Sxo,Rxo,Pxo,W1,vge,Bxo,Ixo,JG,Nxo,qxo,jxo,H1,Fge,Dxo,Gxo,YG,Oxo,Vxo,Xxo,U1,Tge,zxo,Qxo,KG,Wxo,Hxo,Uxo,J1,Mge,Jxo,Yxo,ZG,Kxo,Zxo,e$o,Y1,Ege,o$o,r$o,eO,t$o,a$o,n$o,K1,Cge,s$o,l$o,oO,i$o,d$o,c$o,Z1,wge,f$o,m$o,rO,g$o,h$o,p$o,e2,Age,_$o,u$o,tO,b$o,v$o,F$o,o2,Lge,T$o,M$o,aO,E$o,C$o,w$o,r2,yge,A$o,L$o,nO,y$o,x$o,$$o,t2,xge,k$o,S$o,sO,R$o,P$o,B$o,a2,$ge,I$o,N$o,lO,q$o,j$o,D$o,n2,kge,G$o,O$o,iO,V$o,X$o,z$o,s2,Sge,Q$o,W$o,dO,H$o,U$o,J$o,l2,Rge,Y$o,K$o,cO,Z$o,eko,oko,i2,Pge,rko,tko,fO,ako,nko,sko,d2,Bge,lko,iko,mO,dko,cko,fko,c2,Ige,mko,gko,gO,hko,pko,_ko,f2,Nge,uko,bko,hO,vko,Fko,Tko,m2,qge,Mko,Eko,pO,Cko,wko,Ako,g2,jge,Lko,yko,_O,xko,$ko,kko,h2,Dge,Sko,Rko,uO,Pko,Bko,Iko,p2,Gge,Nko,qko,bO,jko,Dko,Gko,_2,Oge,Oko,Vko,vO,Xko,zko,Qko,u2,Vge,Wko,Hko,FO,Uko,Jko,Yko,b2,Xge,Kko,Zko,TO,eSo,oSo,rSo,v2,zge,tSo,aSo,MO,nSo,sSo,lSo,F2,Qge,iSo,dSo,EO,cSo,fSo,mSo,T2,Wge,gSo,hSo,CO,pSo,_So,uSo,M2,Hge,bSo,vSo,wO,FSo,TSo,MSo,E2,Uge,ESo,CSo,AO,wSo,ASo,LSo,C2,Jge,ySo,xSo,LO,$So,kSo,SSo,w2,Yge,RSo,PSo,yO,BSo,ISo,NSo,A2,Kge,qSo,jSo,xO,DSo,GSo,OSo,L2,Zge,VSo,XSo,$O,zSo,QSo,WSo,y2,ehe,HSo,USo,kO,JSo,YSo,KSo,x2,ZSo,ohe,eRo,oRo,rhe,rRo,tRo,$2,ZVe,Ui,k2,the,GL,aRo,ahe,nRo,eXe,So,OL,sRo,Ji,lRo,SO,iRo,dRo,RO,cRo,fRo,mRo,VL,gRo,nhe,hRo,pRo,_Ro,ct,XL,uRo,she,bRo,vRo,Yi,FRo,lhe,TRo,MRo,PO,ERo,CRo,wRo,S2,ARo,Ze,zL,LRo,ihe,yRo,xRo,qa,$Ro,dhe,kRo,SRo,che,RRo,PRo,fhe,BRo,IRo,NRo,W,R2,mhe,qRo,jRo,BO,DRo,GRo,ORo,P2,ghe,VRo,XRo,IO,zRo,QRo,WRo,B2,hhe,HRo,URo,NO,JRo,YRo,KRo,I2,phe,ZRo,ePo,qO,oPo,rPo,tPo,N2,_he,aPo,nPo,jO,sPo,lPo,iPo,q2,uhe,dPo,cPo,DO,fPo,mPo,gPo,j2,bhe,hPo,pPo,GO,_Po,uPo,bPo,D2,vhe,vPo,FPo,OO,TPo,MPo,EPo,G2,Fhe,CPo,wPo,VO,APo,LPo,yPo,O2,The,xPo,$Po,XO,kPo,SPo,RPo,V2,Mhe,PPo,BPo,zO,IPo,NPo,qPo,X2,Ehe,jPo,DPo,QO,GPo,OPo,VPo,z2,Che,XPo,zPo,WO,QPo,WPo,HPo,Q2,whe,UPo,JPo,HO,YPo,KPo,ZPo,W2,Ahe,eBo,oBo,UO,rBo,tBo,aBo,H2,Lhe,nBo,sBo,JO,lBo,iBo,dBo,U2,yhe,cBo,fBo,YO,mBo,gBo,hBo,J2,xhe,pBo,_Bo,KO,uBo,bBo,vBo,Y2,$he,FBo,TBo,ZO,MBo,EBo,CBo,K2,khe,wBo,ABo,eV,LBo,yBo,xBo,Z2,She,$Bo,kBo,oV,SBo,RBo,PBo,eb,Rhe,BBo,IBo,rV,NBo,qBo,jBo,ob,Phe,DBo,GBo,tV,OBo,VBo,XBo,rb,Bhe,zBo,QBo,aV,WBo,HBo,UBo,tb,Ihe,JBo,YBo,nV,KBo,ZBo,eIo,ab,Nhe,oIo,rIo,sV,tIo,aIo,nIo,nb,qhe,sIo,lIo,lV,iIo,dIo,cIo,sb,jhe,fIo,mIo,iV,gIo,hIo,pIo,lb,Dhe,_Io,uIo,dV,bIo,vIo,FIo,ib,Ghe,TIo,MIo,cV,EIo,CIo,wIo,db,Ohe,AIo,LIo,fV,yIo,xIo,$Io,cb,Vhe,kIo,SIo,mV,RIo,PIo,BIo,fb,Xhe,IIo,NIo,gV,qIo,jIo,DIo,mb,zhe,GIo,OIo,Qhe,VIo,XIo,zIo,gb,Whe,QIo,WIo,hV,HIo,UIo,JIo,hb,Hhe,YIo,KIo,pV,ZIo,eNo,oNo,pb,Uhe,rNo,tNo,_V,aNo,nNo,sNo,_b,Jhe,lNo,iNo,uV,dNo,cNo,fNo,ub,mNo,Yhe,gNo,hNo,Khe,pNo,_No,bb,oXe,Ki,vb,Zhe,QL,uNo,epe,bNo,rXe,Ro,WL,vNo,Zi,FNo,bV,TNo,MNo,vV,ENo,CNo,wNo,HL,ANo,ope,LNo,yNo,xNo,ft,UL,$No,rpe,kNo,SNo,ed,RNo,tpe,PNo,BNo,FV,INo,NNo,qNo,Fb,jNo,eo,JL,DNo,ape,GNo,ONo,ja,VNo,npe,XNo,zNo,spe,QNo,WNo,lpe,HNo,UNo,JNo,pe,Tb,ipe,YNo,KNo,TV,ZNo,eqo,oqo,Mb,dpe,rqo,tqo,MV,aqo,nqo,sqo,Eb,cpe,lqo,iqo,EV,dqo,cqo,fqo,Cb,fpe,mqo,gqo,CV,hqo,pqo,_qo,wb,mpe,uqo,bqo,wV,vqo,Fqo,Tqo,Ab,gpe,Mqo,Eqo,AV,Cqo,wqo,Aqo,Lb,hpe,Lqo,yqo,LV,xqo,$qo,kqo,yb,ppe,Sqo,Rqo,yV,Pqo,Bqo,Iqo,xb,_pe,Nqo,qqo,xV,jqo,Dqo,Gqo,$b,upe,Oqo,Vqo,$V,Xqo,zqo,Qqo,kb,bpe,Wqo,Hqo,kV,Uqo,Jqo,Yqo,Sb,vpe,Kqo,Zqo,SV,ejo,ojo,rjo,Rb,Fpe,tjo,ajo,RV,njo,sjo,ljo,Pb,Tpe,ijo,djo,PV,cjo,fjo,mjo,Bb,Mpe,gjo,hjo,BV,pjo,_jo,ujo,Ib,Epe,bjo,vjo,IV,Fjo,Tjo,Mjo,Nb,Cpe,Ejo,Cjo,NV,wjo,Ajo,Ljo,qb,wpe,yjo,xjo,qV,$jo,kjo,Sjo,jb,Rjo,Ape,Pjo,Bjo,Lpe,Ijo,Njo,Db,tXe,od,Gb,ype,YL,qjo,xpe,jjo,aXe,Po,KL,Djo,rd,Gjo,jV,Ojo,Vjo,DV,Xjo,zjo,Qjo,ZL,Wjo,$pe,Hjo,Ujo,Jjo,mt,ey,Yjo,kpe,Kjo,Zjo,td,eDo,Spe,oDo,rDo,GV,tDo,aDo,nDo,Ob,sDo,oo,oy,lDo,Rpe,iDo,dDo,Da,cDo,Ppe,fDo,mDo,Bpe,gDo,hDo,Ipe,pDo,_Do,uDo,N,Vb,Npe,bDo,vDo,OV,FDo,TDo,MDo,Xb,qpe,EDo,CDo,VV,wDo,ADo,LDo,zb,jpe,yDo,xDo,XV,$Do,kDo,SDo,Qb,Dpe,RDo,PDo,zV,BDo,IDo,NDo,Wb,Gpe,qDo,jDo,QV,DDo,GDo,ODo,Hb,Ope,VDo,XDo,WV,zDo,QDo,WDo,Ub,Vpe,HDo,UDo,HV,JDo,YDo,KDo,Jb,Xpe,ZDo,eGo,UV,oGo,rGo,tGo,Yb,zpe,aGo,nGo,JV,sGo,lGo,iGo,Kb,Qpe,dGo,cGo,YV,fGo,mGo,gGo,Zb,Wpe,hGo,pGo,KV,_Go,uGo,bGo,ev,Hpe,vGo,FGo,ZV,TGo,MGo,EGo,ov,Upe,CGo,wGo,eX,AGo,LGo,yGo,rv,Jpe,xGo,$Go,oX,kGo,SGo,RGo,tv,Ype,PGo,BGo,rX,IGo,NGo,qGo,av,Kpe,jGo,DGo,tX,GGo,OGo,VGo,nv,Zpe,XGo,zGo,aX,QGo,WGo,HGo,sv,e_e,UGo,JGo,nX,YGo,KGo,ZGo,lv,o_e,eOo,oOo,sX,rOo,tOo,aOo,iv,r_e,nOo,sOo,lX,lOo,iOo,dOo,dv,t_e,cOo,fOo,iX,mOo,gOo,hOo,cv,a_e,pOo,_Oo,dX,uOo,bOo,vOo,fv,n_e,FOo,TOo,cX,MOo,EOo,COo,mv,s_e,wOo,AOo,fX,LOo,yOo,xOo,gv,l_e,$Oo,kOo,mX,SOo,ROo,POo,hv,i_e,BOo,IOo,gX,NOo,qOo,jOo,pv,d_e,DOo,GOo,hX,OOo,VOo,XOo,_v,c_e,zOo,QOo,pX,WOo,HOo,UOo,uv,f_e,JOo,YOo,_X,KOo,ZOo,eVo,bv,m_e,oVo,rVo,uX,tVo,aVo,nVo,vv,g_e,sVo,lVo,bX,iVo,dVo,cVo,Fv,h_e,fVo,mVo,vX,gVo,hVo,pVo,Tv,p_e,_Vo,uVo,FX,bVo,vVo,FVo,Mv,__e,TVo,MVo,TX,EVo,CVo,wVo,Ev,u_e,AVo,LVo,MX,yVo,xVo,$Vo,Cv,b_e,kVo,SVo,EX,RVo,PVo,BVo,wv,v_e,IVo,NVo,CX,qVo,jVo,DVo,Av,F_e,GVo,OVo,wX,VVo,XVo,zVo,Lv,T_e,QVo,WVo,AX,HVo,UVo,JVo,yv,M_e,YVo,KVo,LX,ZVo,eXo,oXo,xv,E_e,rXo,tXo,yX,aXo,nXo,sXo,$v,C_e,lXo,iXo,xX,dXo,cXo,fXo,kv,w_e,mXo,gXo,$X,hXo,pXo,_Xo,Sv,A_e,uXo,bXo,kX,vXo,FXo,TXo,Rv,L_e,MXo,EXo,SX,CXo,wXo,AXo,Pv,y_e,LXo,yXo,RX,xXo,$Xo,kXo,Bv,x_e,SXo,RXo,PX,PXo,BXo,IXo,Iv,$_e,NXo,qXo,BX,jXo,DXo,GXo,Nv,k_e,OXo,VXo,IX,XXo,zXo,QXo,qv,S_e,WXo,HXo,NX,UXo,JXo,YXo,jv,KXo,R_e,ZXo,ezo,P_e,ozo,rzo,Dv,nXe,ad,Gv,B_e,ry,tzo,I_e,azo,sXe,Bo,ty,nzo,nd,szo,qX,lzo,izo,jX,dzo,czo,fzo,ay,mzo,N_e,gzo,hzo,pzo,gt,ny,_zo,q_e,uzo,bzo,sd,vzo,j_e,Fzo,Tzo,DX,Mzo,Ezo,Czo,Ov,wzo,ro,sy,Azo,D_e,Lzo,yzo,Ga,xzo,G_e,$zo,kzo,O_e,Szo,Rzo,V_e,Pzo,Bzo,Izo,Z,Vv,X_e,Nzo,qzo,GX,jzo,Dzo,Gzo,Xv,z_e,Ozo,Vzo,OX,Xzo,zzo,Qzo,zv,Q_e,Wzo,Hzo,VX,Uzo,Jzo,Yzo,Qv,W_e,Kzo,Zzo,XX,eQo,oQo,rQo,Wv,H_e,tQo,aQo,zX,nQo,sQo,lQo,Hv,U_e,iQo,dQo,QX,cQo,fQo,mQo,Uv,J_e,gQo,hQo,WX,pQo,_Qo,uQo,Jv,Y_e,bQo,vQo,HX,FQo,TQo,MQo,Yv,K_e,EQo,CQo,UX,wQo,AQo,LQo,Kv,Z_e,yQo,xQo,JX,$Qo,kQo,SQo,Zv,eue,RQo,PQo,YX,BQo,IQo,NQo,e3,oue,qQo,jQo,KX,DQo,GQo,OQo,o3,rue,VQo,XQo,ZX,zQo,QQo,WQo,r3,tue,HQo,UQo,ez,JQo,YQo,KQo,t3,aue,ZQo,eWo,oz,oWo,rWo,tWo,a3,nue,aWo,nWo,rz,sWo,lWo,iWo,n3,sue,dWo,cWo,tz,fWo,mWo,gWo,s3,lue,hWo,pWo,az,_Wo,uWo,bWo,l3,iue,vWo,FWo,nz,TWo,MWo,EWo,i3,due,CWo,wWo,sz,AWo,LWo,yWo,d3,cue,xWo,$Wo,lz,kWo,SWo,RWo,c3,fue,PWo,BWo,iz,IWo,NWo,qWo,f3,mue,jWo,DWo,dz,GWo,OWo,VWo,m3,gue,XWo,zWo,cz,QWo,WWo,HWo,g3,hue,UWo,JWo,fz,YWo,KWo,ZWo,h3,pue,eHo,oHo,mz,rHo,tHo,aHo,p3,_ue,nHo,sHo,gz,lHo,iHo,dHo,_3,uue,cHo,fHo,hz,mHo,gHo,hHo,u3,bue,pHo,_Ho,pz,uHo,bHo,vHo,b3,vue,FHo,THo,_z,MHo,EHo,CHo,v3,wHo,Fue,AHo,LHo,Tue,yHo,xHo,F3,lXe,ld,T3,Mue,ly,$Ho,Eue,kHo,iXe,Io,iy,SHo,id,RHo,uz,PHo,BHo,bz,IHo,NHo,qHo,dy,jHo,Cue,DHo,GHo,OHo,ht,cy,VHo,wue,XHo,zHo,dd,QHo,Aue,WHo,HHo,vz,UHo,JHo,YHo,M3,KHo,to,fy,ZHo,Lue,eUo,oUo,Oa,rUo,yue,tUo,aUo,xue,nUo,sUo,$ue,lUo,iUo,dUo,No,E3,kue,cUo,fUo,Fz,mUo,gUo,hUo,C3,Sue,pUo,_Uo,Tz,uUo,bUo,vUo,w3,Rue,FUo,TUo,Mz,MUo,EUo,CUo,A3,Pue,wUo,AUo,Ez,LUo,yUo,xUo,L3,Bue,$Uo,kUo,Cz,SUo,RUo,PUo,y3,Iue,BUo,IUo,wz,NUo,qUo,jUo,x3,DUo,Nue,GUo,OUo,que,VUo,XUo,$3,dXe,cd,k3,jue,my,zUo,Due,QUo,cXe,qo,gy,WUo,fd,HUo,Az,UUo,JUo,Lz,YUo,KUo,ZUo,hy,eJo,Gue,oJo,rJo,tJo,pt,py,aJo,Oue,nJo,sJo,md,lJo,Vue,iJo,dJo,yz,cJo,fJo,mJo,S3,gJo,ao,_y,hJo,Xue,pJo,_Jo,Va,uJo,zue,bJo,vJo,Que,FJo,TJo,Wue,MJo,EJo,CJo,U,R3,Hue,wJo,AJo,xz,LJo,yJo,xJo,P3,Uue,$Jo,kJo,$z,SJo,RJo,PJo,B3,Jue,BJo,IJo,kz,NJo,qJo,jJo,I3,Yue,DJo,GJo,Sz,OJo,VJo,XJo,N3,Kue,zJo,QJo,Rz,WJo,HJo,UJo,q3,Zue,JJo,YJo,Pz,KJo,ZJo,eYo,j3,e1e,oYo,rYo,Bz,tYo,aYo,nYo,D3,o1e,sYo,lYo,Iz,iYo,dYo,cYo,G3,r1e,fYo,mYo,Nz,gYo,hYo,pYo,O3,t1e,_Yo,uYo,qz,bYo,vYo,FYo,V3,a1e,TYo,MYo,jz,EYo,CYo,wYo,X3,n1e,AYo,LYo,Dz,yYo,xYo,$Yo,z3,s1e,kYo,SYo,Gz,RYo,PYo,BYo,Q3,l1e,IYo,NYo,Oz,qYo,jYo,DYo,W3,i1e,GYo,OYo,Vz,VYo,XYo,zYo,H3,d1e,QYo,WYo,Xz,HYo,UYo,JYo,U3,c1e,YYo,KYo,zz,ZYo,eKo,oKo,J3,f1e,rKo,tKo,Qz,aKo,nKo,sKo,Y3,m1e,lKo,iKo,Wz,dKo,cKo,fKo,K3,g1e,mKo,gKo,Hz,hKo,pKo,_Ko,Z3,h1e,uKo,bKo,Uz,vKo,FKo,TKo,eF,p1e,MKo,EKo,Jz,CKo,wKo,AKo,oF,_1e,LKo,yKo,Yz,xKo,$Ko,kKo,rF,u1e,SKo,RKo,Kz,PKo,BKo,IKo,tF,b1e,NKo,qKo,Zz,jKo,DKo,GKo,aF,v1e,OKo,VKo,eQ,XKo,zKo,QKo,nF,F1e,WKo,HKo,oQ,UKo,JKo,YKo,sF,T1e,KKo,ZKo,rQ,eZo,oZo,rZo,lF,M1e,tZo,aZo,tQ,nZo,sZo,lZo,iF,E1e,iZo,dZo,aQ,cZo,fZo,mZo,dF,C1e,gZo,hZo,nQ,pZo,_Zo,uZo,cF,w1e,bZo,vZo,sQ,FZo,TZo,MZo,fF,A1e,EZo,CZo,lQ,wZo,AZo,LZo,mF,L1e,yZo,xZo,iQ,$Zo,kZo,SZo,gF,y1e,RZo,PZo,dQ,BZo,IZo,NZo,hF,x1e,qZo,jZo,cQ,DZo,GZo,OZo,pF,VZo,$1e,XZo,zZo,k1e,QZo,WZo,_F,fXe,gd,uF,S1e,uy,HZo,R1e,UZo,mXe,jo,by,JZo,hd,YZo,fQ,KZo,ZZo,mQ,eer,oer,rer,vy,ter,P1e,aer,ner,ser,_t,Fy,ler,B1e,ier,der,pd,cer,I1e,fer,mer,gQ,ger,her,per,bF,_er,no,Ty,uer,N1e,ber,ver,Xa,Fer,q1e,Ter,Mer,j1e,Eer,Cer,D1e,wer,Aer,Ler,V,vF,G1e,yer,xer,hQ,$er,ker,Ser,FF,O1e,Rer,Per,pQ,Ber,Ier,Ner,TF,V1e,qer,jer,_Q,Der,Ger,Oer,MF,X1e,Ver,Xer,uQ,zer,Qer,Wer,EF,z1e,Her,Uer,bQ,Jer,Yer,Ker,CF,Q1e,Zer,eor,vQ,oor,ror,tor,wF,W1e,aor,nor,FQ,sor,lor,ior,AF,H1e,dor,cor,TQ,mor,gor,hor,LF,U1e,por,_or,MQ,uor,bor,vor,yF,J1e,For,Tor,EQ,Mor,Eor,Cor,xF,Y1e,wor,Aor,CQ,Lor,yor,xor,$F,K1e,$or,kor,wQ,Sor,Ror,Por,kF,Z1e,Bor,Ior,AQ,Nor,qor,jor,SF,e2e,Dor,Gor,LQ,Oor,Vor,Xor,RF,o2e,zor,Qor,yQ,Wor,Hor,Uor,PF,r2e,Jor,Yor,xQ,Kor,Zor,err,BF,t2e,orr,rrr,$Q,trr,arr,nrr,IF,a2e,srr,lrr,kQ,irr,drr,crr,NF,n2e,frr,mrr,SQ,grr,hrr,prr,qF,s2e,_rr,urr,RQ,brr,vrr,Frr,jF,l2e,Trr,Mrr,PQ,Err,Crr,wrr,DF,i2e,Arr,Lrr,BQ,yrr,xrr,$rr,GF,d2e,krr,Srr,IQ,Rrr,Prr,Brr,OF,c2e,Irr,Nrr,NQ,qrr,jrr,Drr,VF,f2e,Grr,Orr,qQ,Vrr,Xrr,zrr,XF,m2e,Qrr,Wrr,jQ,Hrr,Urr,Jrr,zF,g2e,Yrr,Krr,DQ,Zrr,etr,otr,QF,h2e,rtr,ttr,GQ,atr,ntr,str,WF,p2e,ltr,itr,OQ,dtr,ctr,ftr,HF,_2e,mtr,gtr,VQ,htr,ptr,_tr,UF,u2e,utr,btr,XQ,vtr,Ftr,Ttr,JF,b2e,Mtr,Etr,zQ,Ctr,wtr,Atr,YF,v2e,Ltr,ytr,QQ,xtr,$tr,ktr,KF,F2e,Str,Rtr,WQ,Ptr,Btr,Itr,ZF,T2e,Ntr,qtr,HQ,jtr,Dtr,Gtr,e6,M2e,Otr,Vtr,UQ,Xtr,ztr,Qtr,o6,E2e,Wtr,Htr,JQ,Utr,Jtr,Ytr,r6,C2e,Ktr,Ztr,YQ,ear,oar,rar,t6,w2e,tar,aar,KQ,nar,sar,lar,a6,A2e,iar,dar,ZQ,car,far,mar,n6,L2e,gar,har,eW,par,_ar,uar,s6,y2e,bar,Far,oW,Tar,Mar,Ear,l6,Car,x2e,war,Aar,$2e,Lar,yar,i6,gXe,_d,d6,k2e,My,xar,S2e,$ar,hXe,Do,Ey,kar,ud,Sar,rW,Rar,Par,tW,Bar,Iar,Nar,Cy,qar,R2e,jar,Dar,Gar,ut,wy,Oar,P2e,Var,Xar,bd,zar,B2e,Qar,War,aW,Har,Uar,Jar,c6,Yar,so,Ay,Kar,I2e,Zar,enr,za,onr,N2e,rnr,tnr,q2e,anr,nnr,j2e,snr,lnr,inr,D2e,f6,G2e,dnr,cnr,nW,fnr,mnr,gnr,m6,hnr,O2e,pnr,_nr,V2e,unr,bnr,g6,pXe,vd,h6,X2e,Ly,vnr,z2e,Fnr,_Xe,Go,yy,Tnr,Fd,Mnr,sW,Enr,Cnr,lW,wnr,Anr,Lnr,xy,ynr,Q2e,xnr,$nr,knr,bt,$y,Snr,W2e,Rnr,Pnr,Td,Bnr,H2e,Inr,Nnr,iW,qnr,jnr,Dnr,p6,Gnr,lo,ky,Onr,U2e,Vnr,Xnr,Qa,znr,J2e,Qnr,Wnr,Y2e,Hnr,Unr,K2e,Jnr,Ynr,Knr,ve,_6,Z2e,Znr,esr,dW,osr,rsr,tsr,u6,ebe,asr,nsr,cW,ssr,lsr,isr,b6,obe,dsr,csr,fW,fsr,msr,gsr,v6,rbe,hsr,psr,mW,_sr,usr,bsr,Ws,tbe,vsr,Fsr,gW,Tsr,Msr,hW,Esr,Csr,wsr,F6,abe,Asr,Lsr,pW,ysr,xsr,$sr,Hs,nbe,ksr,Ssr,_W,Rsr,Psr,uW,Bsr,Isr,Nsr,T6,sbe,qsr,jsr,bW,Dsr,Gsr,Osr,vt,lbe,Vsr,Xsr,vW,zsr,Qsr,FW,Wsr,Hsr,TW,Usr,Jsr,Ysr,M6,ibe,Ksr,Zsr,MW,elr,olr,rlr,E6,dbe,tlr,alr,EW,nlr,slr,llr,C6,cbe,ilr,dlr,CW,clr,flr,mlr,w6,fbe,glr,hlr,wW,plr,_lr,ulr,A6,mbe,blr,vlr,AW,Flr,Tlr,Mlr,L6,gbe,Elr,Clr,LW,wlr,Alr,Llr,y6,hbe,ylr,xlr,yW,$lr,klr,Slr,x6,Rlr,pbe,Plr,Blr,_be,Ilr,Nlr,$6,uXe,Md,k6,ube,Sy,qlr,bbe,jlr,bXe,Oo,Ry,Dlr,Ed,Glr,xW,Olr,Vlr,$W,Xlr,zlr,Qlr,Py,Wlr,vbe,Hlr,Ulr,Jlr,Ft,By,Ylr,Fbe,Klr,Zlr,Cd,eir,Tbe,oir,rir,kW,tir,air,nir,S6,sir,io,Iy,lir,Mbe,iir,dir,Wa,cir,Ebe,fir,mir,Cbe,gir,hir,wbe,pir,_ir,uir,Abe,R6,Lbe,bir,vir,SW,Fir,Tir,Mir,P6,Eir,ybe,Cir,wir,xbe,Air,Lir,B6,vXe,wd,I6,$be,Ny,yir,kbe,xir,FXe,Vo,qy,$ir,Ad,kir,RW,Sir,Rir,PW,Pir,Bir,Iir,jy,Nir,Sbe,qir,jir,Dir,Tt,Dy,Gir,Rbe,Oir,Vir,Ld,Xir,Pbe,zir,Qir,BW,Wir,Hir,Uir,N6,Jir,co,Gy,Yir,Bbe,Kir,Zir,Ha,edr,Ibe,odr,rdr,Nbe,tdr,adr,qbe,ndr,sdr,ldr,jbe,q6,Dbe,idr,ddr,IW,cdr,fdr,mdr,j6,gdr,Gbe,hdr,pdr,Obe,_dr,udr,D6,TXe,yd,G6,Vbe,Oy,bdr,Xbe,vdr,MXe,Xo,Vy,Fdr,xd,Tdr,NW,Mdr,Edr,qW,Cdr,wdr,Adr,Xy,Ldr,zbe,ydr,xdr,$dr,Mt,zy,kdr,Qbe,Sdr,Rdr,$d,Pdr,Wbe,Bdr,Idr,jW,Ndr,qdr,jdr,O6,Ddr,fo,Qy,Gdr,Hbe,Odr,Vdr,Ua,Xdr,Ube,zdr,Qdr,Jbe,Wdr,Hdr,Ybe,Udr,Jdr,Ydr,Pe,V6,Kbe,Kdr,Zdr,DW,ecr,ocr,rcr,X6,Zbe,tcr,acr,GW,ncr,scr,lcr,z6,eve,icr,dcr,OW,ccr,fcr,mcr,Q6,ove,gcr,hcr,VW,pcr,_cr,ucr,W6,rve,bcr,vcr,XW,Fcr,Tcr,Mcr,H6,tve,Ecr,Ccr,zW,wcr,Acr,Lcr,U6,ave,ycr,xcr,QW,$cr,kcr,Scr,J6,nve,Rcr,Pcr,WW,Bcr,Icr,Ncr,Y6,sve,qcr,jcr,HW,Dcr,Gcr,Ocr,K6,Vcr,lve,Xcr,zcr,ive,Qcr,Wcr,Z6,EXe,kd,eT,dve,Wy,Hcr,cve,Ucr,CXe,zo,Hy,Jcr,Sd,Ycr,UW,Kcr,Zcr,JW,efr,ofr,rfr,Uy,tfr,fve,afr,nfr,sfr,Et,Jy,lfr,mve,ifr,dfr,Rd,cfr,gve,ffr,mfr,YW,gfr,hfr,pfr,oT,_fr,mo,Yy,ufr,hve,bfr,vfr,Ja,Ffr,pve,Tfr,Mfr,_ve,Efr,Cfr,uve,wfr,Afr,Lfr,et,rT,bve,yfr,xfr,KW,$fr,kfr,Sfr,tT,vve,Rfr,Pfr,ZW,Bfr,Ifr,Nfr,aT,Fve,qfr,jfr,eH,Dfr,Gfr,Ofr,nT,Tve,Vfr,Xfr,oH,zfr,Qfr,Wfr,sT,Mve,Hfr,Ufr,rH,Jfr,Yfr,Kfr,lT,Zfr,Eve,emr,omr,Cve,rmr,tmr,iT,wXe,Pd,dT,wve,Ky,amr,Ave,nmr,AXe,Qo,Zy,smr,Bd,lmr,tH,imr,dmr,aH,cmr,fmr,mmr,e8,gmr,Lve,hmr,pmr,_mr,Ct,o8,umr,yve,bmr,vmr,Id,Fmr,xve,Tmr,Mmr,nH,Emr,Cmr,wmr,cT,Amr,go,r8,Lmr,$ve,ymr,xmr,Ya,$mr,kve,kmr,Smr,Sve,Rmr,Pmr,Rve,Bmr,Imr,Nmr,Le,fT,Pve,qmr,jmr,sH,Dmr,Gmr,Omr,mT,Bve,Vmr,Xmr,lH,zmr,Qmr,Wmr,gT,Ive,Hmr,Umr,iH,Jmr,Ymr,Kmr,hT,Nve,Zmr,egr,dH,ogr,rgr,tgr,pT,qve,agr,ngr,cH,sgr,lgr,igr,_T,jve,dgr,cgr,fH,fgr,mgr,ggr,uT,Dve,hgr,pgr,mH,_gr,ugr,bgr,bT,Gve,vgr,Fgr,gH,Tgr,Mgr,Egr,vT,Ove,Cgr,wgr,hH,Agr,Lgr,ygr,FT,Vve,xgr,$gr,pH,kgr,Sgr,Rgr,TT,Pgr,Xve,Bgr,Igr,zve,Ngr,qgr,MT,LXe,Nd,ET,Qve,t8,jgr,Wve,Dgr,yXe,Wo,a8,Ggr,qd,Ogr,_H,Vgr,Xgr,uH,zgr,Qgr,Wgr,n8,Hgr,Hve,Ugr,Jgr,Ygr,wt,s8,Kgr,Uve,Zgr,ehr,jd,ohr,Jve,rhr,thr,bH,ahr,nhr,shr,CT,lhr,ho,l8,ihr,Yve,dhr,chr,Ka,fhr,Kve,mhr,ghr,Zve,hhr,phr,e3e,_hr,uhr,bhr,i8,wT,o3e,vhr,Fhr,vH,Thr,Mhr,Ehr,AT,r3e,Chr,whr,FH,Ahr,Lhr,yhr,LT,xhr,t3e,$hr,khr,a3e,Shr,Rhr,yT,xXe,Dd,xT,n3e,d8,Phr,s3e,Bhr,$Xe,Ho,c8,Ihr,Gd,Nhr,TH,qhr,jhr,MH,Dhr,Ghr,Ohr,f8,Vhr,l3e,Xhr,zhr,Qhr,At,m8,Whr,i3e,Hhr,Uhr,Od,Jhr,d3e,Yhr,Khr,EH,Zhr,epr,opr,$T,rpr,po,g8,tpr,c3e,apr,npr,Za,spr,f3e,lpr,ipr,m3e,dpr,cpr,g3e,fpr,mpr,gpr,ot,kT,h3e,hpr,ppr,CH,_pr,upr,bpr,ST,p3e,vpr,Fpr,wH,Tpr,Mpr,Epr,RT,_3e,Cpr,wpr,AH,Apr,Lpr,ypr,PT,u3e,xpr,$pr,LH,kpr,Spr,Rpr,BT,b3e,Ppr,Bpr,yH,Ipr,Npr,qpr,IT,jpr,v3e,Dpr,Gpr,F3e,Opr,Vpr,NT,kXe,Vd,qT,T3e,h8,Xpr,M3e,zpr,SXe,Uo,p8,Qpr,Xd,Wpr,xH,Hpr,Upr,$H,Jpr,Ypr,Kpr,_8,Zpr,E3e,e_r,o_r,r_r,Lt,u8,t_r,C3e,a_r,n_r,zd,s_r,w3e,l_r,i_r,kH,d_r,c_r,f_r,jT,m_r,_o,b8,g_r,A3e,h_r,p_r,en,__r,L3e,u_r,b_r,y3e,v_r,F_r,x3e,T_r,M_r,E_r,Qd,DT,$3e,C_r,w_r,SH,A_r,L_r,y_r,GT,k3e,x_r,$_r,RH,k_r,S_r,R_r,OT,S3e,P_r,B_r,PH,I_r,N_r,q_r,VT,j_r,R3e,D_r,G_r,P3e,O_r,V_r,XT,RXe,Wd,zT,B3e,v8,X_r,I3e,z_r,PXe,Jo,F8,Q_r,Hd,W_r,BH,H_r,U_r,IH,J_r,Y_r,K_r,T8,Z_r,N3e,eur,our,rur,yt,M8,tur,q3e,aur,nur,Ud,sur,j3e,lur,iur,NH,dur,cur,fur,QT,mur,uo,E8,gur,D3e,hur,pur,on,_ur,G3e,uur,bur,O3e,vur,Fur,V3e,Tur,Mur,Eur,C8,WT,X3e,Cur,wur,qH,Aur,Lur,yur,HT,z3e,xur,$ur,jH,kur,Sur,Rur,UT,Pur,Q3e,Bur,Iur,W3e,Nur,qur,JT,BXe,Jd,YT,H3e,w8,jur,U3e,Dur,IXe,Yo,A8,Gur,Yd,Our,DH,Vur,Xur,GH,zur,Qur,Wur,L8,Hur,J3e,Uur,Jur,Yur,xt,y8,Kur,Y3e,Zur,e1r,Kd,o1r,K3e,r1r,t1r,OH,a1r,n1r,s1r,KT,l1r,bo,x8,i1r,Z3e,d1r,c1r,rn,f1r,eFe,m1r,g1r,oFe,h1r,p1r,rFe,_1r,u1r,b1r,tFe,ZT,aFe,v1r,F1r,VH,T1r,M1r,E1r,e7,C1r,nFe,w1r,A1r,sFe,L1r,y1r,o7,NXe,Zd,r7,lFe,$8,x1r,iFe,$1r,qXe,Ko,k8,k1r,ec,S1r,XH,R1r,P1r,zH,B1r,I1r,N1r,S8,q1r,dFe,j1r,D1r,G1r,$t,R8,O1r,cFe,V1r,X1r,oc,z1r,fFe,Q1r,W1r,QH,H1r,U1r,J1r,t7,Y1r,vo,P8,K1r,mFe,Z1r,e2r,tn,o2r,gFe,r2r,t2r,hFe,a2r,n2r,pFe,s2r,l2r,i2r,rt,a7,_Fe,d2r,c2r,WH,f2r,m2r,g2r,n7,uFe,h2r,p2r,HH,_2r,u2r,b2r,s7,bFe,v2r,F2r,UH,T2r,M2r,E2r,l7,vFe,C2r,w2r,JH,A2r,L2r,y2r,i7,FFe,x2r,$2r,YH,k2r,S2r,R2r,d7,P2r,TFe,B2r,I2r,MFe,N2r,q2r,c7,jXe,rc,f7,EFe,B8,j2r,CFe,D2r,DXe,Zo,I8,G2r,tc,O2r,KH,V2r,X2r,ZH,z2r,Q2r,W2r,N8,H2r,wFe,U2r,J2r,Y2r,kt,q8,K2r,AFe,Z2r,ebr,ac,obr,LFe,rbr,tbr,eU,abr,nbr,sbr,m7,lbr,Fo,j8,ibr,yFe,dbr,cbr,an,fbr,xFe,mbr,gbr,$Fe,hbr,pbr,kFe,_br,ubr,bbr,SFe,g7,RFe,vbr,Fbr,oU,Tbr,Mbr,Ebr,h7,Cbr,PFe,wbr,Abr,BFe,Lbr,ybr,p7,GXe,nc,_7,IFe,D8,xbr,NFe,$br,OXe,er,G8,kbr,sc,Sbr,rU,Rbr,Pbr,tU,Bbr,Ibr,Nbr,O8,qbr,qFe,jbr,Dbr,Gbr,St,V8,Obr,jFe,Vbr,Xbr,lc,zbr,DFe,Qbr,Wbr,aU,Hbr,Ubr,Jbr,u7,Ybr,yr,X8,Kbr,GFe,Zbr,evr,nn,ovr,OFe,rvr,tvr,VFe,avr,nvr,XFe,svr,lvr,ivr,j,b7,zFe,dvr,cvr,nU,fvr,mvr,gvr,v7,QFe,hvr,pvr,sU,_vr,uvr,bvr,F7,WFe,vvr,Fvr,lU,Tvr,Mvr,Evr,T7,HFe,Cvr,wvr,iU,Avr,Lvr,yvr,M7,UFe,xvr,$vr,dU,kvr,Svr,Rvr,E7,JFe,Pvr,Bvr,cU,Ivr,Nvr,qvr,C7,YFe,jvr,Dvr,fU,Gvr,Ovr,Vvr,w7,KFe,Xvr,zvr,mU,Qvr,Wvr,Hvr,A7,ZFe,Uvr,Jvr,gU,Yvr,Kvr,Zvr,L7,e6e,e3r,o3r,hU,r3r,t3r,a3r,y7,o6e,n3r,s3r,pU,l3r,i3r,d3r,x7,r6e,c3r,f3r,_U,m3r,g3r,h3r,$7,t6e,p3r,_3r,uU,u3r,b3r,v3r,k7,a6e,F3r,T3r,bU,M3r,E3r,C3r,S7,n6e,w3r,A3r,vU,L3r,y3r,x3r,R7,s6e,$3r,k3r,FU,S3r,R3r,P3r,P7,l6e,B3r,I3r,TU,N3r,q3r,j3r,Us,i6e,D3r,G3r,MU,O3r,V3r,EU,X3r,z3r,Q3r,B7,d6e,W3r,H3r,CU,U3r,J3r,Y3r,I7,c6e,K3r,Z3r,wU,eFr,oFr,rFr,N7,f6e,tFr,aFr,AU,nFr,sFr,lFr,q7,m6e,iFr,dFr,LU,cFr,fFr,mFr,j7,g6e,gFr,hFr,yU,pFr,_Fr,uFr,D7,h6e,bFr,vFr,xU,FFr,TFr,MFr,G7,p6e,EFr,CFr,$U,wFr,AFr,LFr,O7,_6e,yFr,xFr,kU,$Fr,kFr,SFr,V7,u6e,RFr,PFr,SU,BFr,IFr,NFr,X7,b6e,qFr,jFr,RU,DFr,GFr,OFr,z7,v6e,VFr,XFr,PU,zFr,QFr,WFr,Q7,F6e,HFr,UFr,BU,JFr,YFr,KFr,W7,T6e,ZFr,e6r,IU,o6r,r6r,t6r,H7,M6e,a6r,n6r,NU,s6r,l6r,i6r,U7,E6e,d6r,c6r,qU,f6r,m6r,g6r,J7,C6e,h6r,p6r,jU,_6r,u6r,b6r,Y7,w6e,v6r,F6r,DU,T6r,M6r,E6r,K7,A6e,C6r,w6r,GU,A6r,L6r,y6r,Z7,L6e,x6r,$6r,OU,k6r,S6r,R6r,e9,y6e,P6r,B6r,VU,I6r,N6r,q6r,o9,x6e,j6r,D6r,XU,G6r,O6r,V6r,r9,$6e,X6r,z6r,zU,Q6r,W6r,H6r,t9,k6e,U6r,J6r,QU,Y6r,K6r,Z6r,a9,S6e,eTr,oTr,WU,rTr,tTr,aTr,n9,R6e,nTr,sTr,HU,lTr,iTr,dTr,s9,P6e,cTr,fTr,UU,mTr,gTr,hTr,l9,B6e,pTr,_Tr,JU,uTr,bTr,vTr,i9,I6e,FTr,TTr,YU,MTr,ETr,CTr,d9,N6e,wTr,ATr,KU,LTr,yTr,xTr,c9,q6e,$Tr,kTr,ZU,STr,RTr,PTr,f9,VXe,ic,m9,j6e,z8,BTr,D6e,ITr,XXe,or,Q8,NTr,dc,qTr,eJ,jTr,DTr,oJ,GTr,OTr,VTr,W8,XTr,G6e,zTr,QTr,WTr,Rt,H8,HTr,O6e,UTr,JTr,cc,YTr,V6e,KTr,ZTr,rJ,e7r,o7r,r7r,g9,t7r,xr,U8,a7r,X6e,n7r,s7r,sn,l7r,z6e,i7r,d7r,Q6e,c7r,f7r,W6e,m7r,g7r,h7r,se,h9,H6e,p7r,_7r,tJ,u7r,b7r,v7r,p9,U6e,F7r,T7r,aJ,M7r,E7r,C7r,_9,J6e,w7r,A7r,nJ,L7r,y7r,x7r,u9,Y6e,$7r,k7r,sJ,S7r,R7r,P7r,b9,K6e,B7r,I7r,lJ,N7r,q7r,j7r,v9,Z6e,D7r,G7r,iJ,O7r,V7r,X7r,F9,eTe,z7r,Q7r,dJ,W7r,H7r,U7r,T9,oTe,J7r,Y7r,cJ,K7r,Z7r,e9r,M9,rTe,o9r,r9r,fJ,t9r,a9r,n9r,E9,tTe,s9r,l9r,mJ,i9r,d9r,c9r,C9,aTe,f9r,m9r,gJ,g9r,h9r,p9r,w9,nTe,_9r,u9r,hJ,b9r,v9r,F9r,A9,sTe,T9r,M9r,pJ,E9r,C9r,w9r,L9,lTe,A9r,L9r,_J,y9r,x9r,$9r,y9,iTe,k9r,S9r,uJ,R9r,P9r,B9r,x9,dTe,I9r,N9r,bJ,q9r,j9r,D9r,$9,cTe,G9r,O9r,vJ,V9r,X9r,z9r,k9,fTe,Q9r,W9r,FJ,H9r,U9r,J9r,S9,mTe,Y9r,K9r,TJ,Z9r,eMr,oMr,R9,gTe,rMr,tMr,MJ,aMr,nMr,sMr,P9,hTe,lMr,iMr,EJ,dMr,cMr,fMr,B9,pTe,mMr,gMr,CJ,hMr,pMr,_Mr,I9,_Te,uMr,bMr,wJ,vMr,FMr,TMr,N9,zXe,fc,q9,uTe,J8,MMr,bTe,EMr,QXe,rr,Y8,CMr,mc,wMr,AJ,AMr,LMr,LJ,yMr,xMr,$Mr,K8,kMr,vTe,SMr,RMr,PMr,Pt,Z8,BMr,FTe,IMr,NMr,gc,qMr,TTe,jMr,DMr,yJ,GMr,OMr,VMr,j9,XMr,$r,ex,zMr,MTe,QMr,WMr,ln,HMr,ETe,UMr,JMr,CTe,YMr,KMr,wTe,ZMr,e4r,o4r,Me,D9,ATe,r4r,t4r,xJ,a4r,n4r,s4r,G9,LTe,l4r,i4r,$J,d4r,c4r,f4r,O9,yTe,m4r,g4r,kJ,h4r,p4r,_4r,V9,xTe,u4r,b4r,SJ,v4r,F4r,T4r,X9,$Te,M4r,E4r,RJ,C4r,w4r,A4r,z9,kTe,L4r,y4r,PJ,x4r,$4r,k4r,Q9,STe,S4r,R4r,BJ,P4r,B4r,I4r,W9,RTe,N4r,q4r,IJ,j4r,D4r,G4r,H9,PTe,O4r,V4r,NJ,X4r,z4r,Q4r,U9,BTe,W4r,H4r,qJ,U4r,J4r,Y4r,J9,ITe,K4r,Z4r,jJ,eEr,oEr,rEr,Y9,NTe,tEr,aEr,DJ,nEr,sEr,lEr,K9,qTe,iEr,dEr,GJ,cEr,fEr,mEr,Z9,WXe,hc,eM,jTe,ox,gEr,DTe,hEr,HXe,tr,rx,pEr,pc,_Er,OJ,uEr,bEr,VJ,vEr,FEr,TEr,tx,MEr,GTe,EEr,CEr,wEr,Bt,ax,AEr,OTe,LEr,yEr,_c,xEr,VTe,$Er,kEr,XJ,SEr,REr,PEr,oM,BEr,kr,nx,IEr,XTe,NEr,qEr,dn,jEr,zTe,DEr,GEr,QTe,OEr,VEr,WTe,XEr,zEr,QEr,tt,rM,HTe,WEr,HEr,zJ,UEr,JEr,YEr,tM,UTe,KEr,ZEr,QJ,eCr,oCr,rCr,aM,JTe,tCr,aCr,WJ,nCr,sCr,lCr,nM,YTe,iCr,dCr,HJ,cCr,fCr,mCr,sM,KTe,gCr,hCr,UJ,pCr,_Cr,uCr,lM,UXe,uc,iM,ZTe,sx,bCr,e7e,vCr,JXe,ar,lx,FCr,bc,TCr,JJ,MCr,ECr,YJ,CCr,wCr,ACr,ix,LCr,o7e,yCr,xCr,$Cr,It,dx,kCr,r7e,SCr,RCr,vc,PCr,t7e,BCr,ICr,KJ,NCr,qCr,jCr,dM,DCr,Sr,cx,GCr,a7e,OCr,VCr,cn,XCr,n7e,zCr,QCr,s7e,WCr,HCr,l7e,UCr,JCr,YCr,ie,cM,i7e,KCr,ZCr,ZJ,e5r,o5r,r5r,fM,d7e,t5r,a5r,eY,n5r,s5r,l5r,mM,c7e,i5r,d5r,oY,c5r,f5r,m5r,gM,f7e,g5r,h5r,rY,p5r,_5r,u5r,hM,m7e,b5r,v5r,tY,F5r,T5r,M5r,pM,g7e,E5r,C5r,aY,w5r,A5r,L5r,_M,h7e,y5r,x5r,nY,$5r,k5r,S5r,uM,p7e,R5r,P5r,sY,B5r,I5r,N5r,bM,_7e,q5r,j5r,lY,D5r,G5r,O5r,vM,u7e,V5r,X5r,iY,z5r,Q5r,W5r,FM,b7e,H5r,U5r,dY,J5r,Y5r,K5r,TM,v7e,Z5r,e0r,cY,o0r,r0r,t0r,MM,F7e,a0r,n0r,fY,s0r,l0r,i0r,EM,T7e,d0r,c0r,mY,f0r,m0r,g0r,CM,M7e,h0r,p0r,gY,_0r,u0r,b0r,wM,E7e,v0r,F0r,hY,T0r,M0r,E0r,AM,C7e,C0r,w0r,pY,A0r,L0r,y0r,LM,w7e,x0r,$0r,_Y,k0r,S0r,R0r,yM,A7e,P0r,B0r,uY,I0r,N0r,q0r,xM,L7e,j0r,D0r,bY,G0r,O0r,V0r,$M,YXe,Fc,kM,y7e,fx,X0r,x7e,z0r,KXe,nr,mx,Q0r,Tc,W0r,vY,H0r,U0r,FY,J0r,Y0r,K0r,gx,Z0r,$7e,ewr,owr,rwr,Nt,hx,twr,k7e,awr,nwr,Mc,swr,S7e,lwr,iwr,TY,dwr,cwr,fwr,SM,mwr,Rr,px,gwr,R7e,hwr,pwr,fn,_wr,P7e,uwr,bwr,B7e,vwr,Fwr,I7e,Twr,Mwr,Ewr,ye,RM,N7e,Cwr,wwr,MY,Awr,Lwr,ywr,PM,q7e,xwr,$wr,EY,kwr,Swr,Rwr,BM,j7e,Pwr,Bwr,CY,Iwr,Nwr,qwr,IM,D7e,jwr,Dwr,wY,Gwr,Owr,Vwr,NM,G7e,Xwr,zwr,AY,Qwr,Wwr,Hwr,qM,O7e,Uwr,Jwr,LY,Ywr,Kwr,Zwr,jM,V7e,eAr,oAr,yY,rAr,tAr,aAr,DM,X7e,nAr,sAr,xY,lAr,iAr,dAr,GM,z7e,cAr,fAr,$Y,mAr,gAr,hAr,OM,Q7e,pAr,_Ar,kY,uAr,bAr,vAr,VM,ZXe,Ec,XM,W7e,_x,FAr,H7e,TAr,eze,sr,ux,MAr,Cc,EAr,SY,CAr,wAr,RY,AAr,LAr,yAr,bx,xAr,U7e,$Ar,kAr,SAr,qt,vx,RAr,J7e,PAr,BAr,wc,IAr,Y7e,NAr,qAr,PY,jAr,DAr,GAr,zM,OAr,Pr,Fx,VAr,K7e,XAr,zAr,mn,QAr,Z7e,WAr,HAr,e9e,UAr,JAr,o9e,YAr,KAr,ZAr,te,QM,r9e,eLr,oLr,BY,rLr,tLr,aLr,WM,t9e,nLr,sLr,IY,lLr,iLr,dLr,HM,a9e,cLr,fLr,NY,mLr,gLr,hLr,UM,n9e,pLr,_Lr,qY,uLr,bLr,vLr,JM,s9e,FLr,TLr,jY,MLr,ELr,CLr,YM,l9e,wLr,ALr,DY,LLr,yLr,xLr,KM,i9e,$Lr,kLr,GY,SLr,RLr,PLr,ZM,d9e,BLr,ILr,OY,NLr,qLr,jLr,e4,c9e,DLr,GLr,VY,OLr,VLr,XLr,o4,f9e,zLr,QLr,XY,WLr,HLr,ULr,r4,m9e,JLr,YLr,zY,KLr,ZLr,eyr,t4,g9e,oyr,ryr,QY,tyr,ayr,nyr,a4,h9e,syr,lyr,WY,iyr,dyr,cyr,n4,p9e,fyr,myr,HY,gyr,hyr,pyr,s4,_9e,_yr,uyr,UY,byr,vyr,Fyr,l4,u9e,Tyr,Myr,JY,Eyr,Cyr,wyr,i4,b9e,Ayr,Lyr,YY,yyr,xyr,$yr,d4,v9e,kyr,Syr,KY,Ryr,Pyr,Byr,c4,F9e,Iyr,Nyr,ZY,qyr,jyr,Dyr,f4,T9e,Gyr,Oyr,eK,Vyr,Xyr,zyr,m4,M9e,Qyr,Wyr,oK,Hyr,Uyr,Jyr,g4,E9e,Yyr,Kyr,rK,Zyr,e8r,o8r,h4,C9e,r8r,t8r,tK,a8r,n8r,s8r,p4,w9e,l8r,i8r,aK,d8r,c8r,f8r,_4,A9e,m8r,g8r,nK,h8r,p8r,_8r,u4,L9e,u8r,b8r,sK,v8r,F8r,T8r,b4,oze,Ac,v4,y9e,Tx,M8r,x9e,E8r,rze,lr,Mx,C8r,Lc,w8r,lK,A8r,L8r,iK,y8r,x8r,$8r,Ex,k8r,$9e,S8r,R8r,P8r,jt,Cx,B8r,k9e,I8r,N8r,yc,q8r,S9e,j8r,D8r,dK,G8r,O8r,V8r,F4,X8r,Br,wx,z8r,R9e,Q8r,W8r,gn,H8r,P9e,U8r,J8r,B9e,Y8r,K8r,I9e,Z8r,exr,oxr,_e,T4,N9e,rxr,txr,cK,axr,nxr,sxr,M4,q9e,lxr,ixr,fK,dxr,cxr,fxr,E4,j9e,mxr,gxr,mK,hxr,pxr,_xr,C4,D9e,uxr,bxr,gK,vxr,Fxr,Txr,w4,G9e,Mxr,Exr,hK,Cxr,wxr,Axr,A4,O9e,Lxr,yxr,pK,xxr,$xr,kxr,L4,V9e,Sxr,Rxr,_K,Pxr,Bxr,Ixr,y4,X9e,Nxr,qxr,uK,jxr,Dxr,Gxr,x4,z9e,Oxr,Vxr,bK,Xxr,zxr,Qxr,$4,Q9e,Wxr,Hxr,vK,Uxr,Jxr,Yxr,k4,W9e,Kxr,Zxr,FK,e$r,o$r,r$r,S4,H9e,t$r,a$r,TK,n$r,s$r,l$r,R4,U9e,i$r,d$r,MK,c$r,f$r,m$r,P4,J9e,g$r,h$r,EK,p$r,_$r,u$r,B4,Y9e,b$r,v$r,CK,F$r,T$r,M$r,I4,K9e,E$r,C$r,wK,w$r,A$r,L$r,N4,Z9e,y$r,x$r,AK,$$r,k$r,S$r,q4,tze,xc,j4,eMe,Ax,R$r,oMe,P$r,aze,ir,Lx,B$r,$c,I$r,LK,N$r,q$r,yK,j$r,D$r,G$r,yx,O$r,rMe,V$r,X$r,z$r,Dt,xx,Q$r,tMe,W$r,H$r,kc,U$r,aMe,J$r,Y$r,xK,K$r,Z$r,ekr,D4,okr,Ir,$x,rkr,nMe,tkr,akr,hn,nkr,sMe,skr,lkr,lMe,ikr,dkr,iMe,ckr,fkr,mkr,kx,G4,dMe,gkr,hkr,$K,pkr,_kr,ukr,O4,cMe,bkr,vkr,kK,Fkr,Tkr,Mkr,V4,nze,Sc,X4,fMe,Sx,Ekr,mMe,Ckr,sze,dr,Rx,wkr,Rc,Akr,SK,Lkr,ykr,RK,xkr,$kr,kkr,Px,Skr,gMe,Rkr,Pkr,Bkr,Gt,Bx,Ikr,hMe,Nkr,qkr,Pc,jkr,pMe,Dkr,Gkr,PK,Okr,Vkr,Xkr,z4,zkr,Nr,Ix,Qkr,_Me,Wkr,Hkr,pn,Ukr,uMe,Jkr,Ykr,bMe,Kkr,Zkr,vMe,eSr,oSr,rSr,FMe,Q4,TMe,tSr,aSr,BK,nSr,sSr,lSr,W4,lze,Bc,H4,MMe,Nx,iSr,EMe,dSr,ize,cr,qx,cSr,Ic,fSr,IK,mSr,gSr,NK,hSr,pSr,_Sr,jx,uSr,CMe,bSr,vSr,FSr,Ot,Dx,TSr,wMe,MSr,ESr,Nc,CSr,AMe,wSr,ASr,qK,LSr,ySr,xSr,U4,$Sr,qr,Gx,kSr,LMe,SSr,RSr,_n,PSr,yMe,BSr,ISr,xMe,NSr,qSr,$Me,jSr,DSr,GSr,de,J4,kMe,OSr,VSr,jK,XSr,zSr,QSr,Y4,SMe,WSr,HSr,DK,USr,JSr,YSr,K4,RMe,KSr,ZSr,GK,eRr,oRr,rRr,Z4,PMe,tRr,aRr,OK,nRr,sRr,lRr,eE,BMe,iRr,dRr,VK,cRr,fRr,mRr,oE,IMe,gRr,hRr,XK,pRr,_Rr,uRr,rE,NMe,bRr,vRr,zK,FRr,TRr,MRr,tE,qMe,ERr,CRr,QK,wRr,ARr,LRr,aE,jMe,yRr,xRr,WK,$Rr,kRr,SRr,nE,DMe,RRr,PRr,HK,BRr,IRr,NRr,sE,GMe,qRr,jRr,UK,DRr,GRr,ORr,lE,OMe,VRr,XRr,JK,zRr,QRr,WRr,iE,VMe,HRr,URr,YK,JRr,YRr,KRr,dE,XMe,ZRr,ePr,KK,oPr,rPr,tPr,cE,zMe,aPr,nPr,ZK,sPr,lPr,iPr,fE,QMe,dPr,cPr,eZ,fPr,mPr,gPr,mE,WMe,hPr,pPr,oZ,_Pr,uPr,bPr,gE,HMe,vPr,FPr,rZ,TPr,MPr,EPr,hE,UMe,CPr,wPr,tZ,APr,LPr,yPr,pE,JMe,xPr,$Pr,aZ,kPr,SPr,RPr,_E,dze,qc,uE,YMe,Ox,PPr,KMe,BPr,cze,fr,Vx,IPr,jc,NPr,nZ,qPr,jPr,sZ,DPr,GPr,OPr,Xx,VPr,ZMe,XPr,zPr,QPr,Vt,zx,WPr,e4e,HPr,UPr,Dc,JPr,o4e,YPr,KPr,lZ,ZPr,eBr,oBr,bE,rBr,jr,Qx,tBr,r4e,aBr,nBr,un,sBr,t4e,lBr,iBr,a4e,dBr,cBr,n4e,fBr,mBr,gBr,ce,vE,s4e,hBr,pBr,iZ,_Br,uBr,bBr,FE,l4e,vBr,FBr,dZ,TBr,MBr,EBr,TE,i4e,CBr,wBr,cZ,ABr,LBr,yBr,ME,d4e,xBr,$Br,fZ,kBr,SBr,RBr,EE,c4e,PBr,BBr,mZ,IBr,NBr,qBr,CE,f4e,jBr,DBr,gZ,GBr,OBr,VBr,wE,m4e,XBr,zBr,hZ,QBr,WBr,HBr,AE,g4e,UBr,JBr,pZ,YBr,KBr,ZBr,LE,h4e,eIr,oIr,_Z,rIr,tIr,aIr,yE,p4e,nIr,sIr,uZ,lIr,iIr,dIr,xE,_4e,cIr,fIr,bZ,mIr,gIr,hIr,$E,u4e,pIr,_Ir,vZ,uIr,bIr,vIr,kE,b4e,FIr,TIr,FZ,MIr,EIr,CIr,SE,v4e,wIr,AIr,TZ,LIr,yIr,xIr,RE,F4e,$Ir,kIr,MZ,SIr,RIr,PIr,PE,T4e,BIr,IIr,EZ,NIr,qIr,jIr,BE,M4e,DIr,GIr,CZ,OIr,VIr,XIr,IE,E4e,zIr,QIr,wZ,WIr,HIr,UIr,NE,C4e,JIr,YIr,AZ,KIr,ZIr,eNr,qE,w4e,oNr,rNr,LZ,tNr,aNr,nNr,jE,fze,Gc,DE,A4e,Wx,sNr,L4e,lNr,mze,mr,Hx,iNr,Oc,dNr,yZ,cNr,fNr,xZ,mNr,gNr,hNr,Ux,pNr,y4e,_Nr,uNr,bNr,Xt,Jx,vNr,x4e,FNr,TNr,Vc,MNr,$4e,ENr,CNr,$Z,wNr,ANr,LNr,GE,yNr,Dr,Yx,xNr,k4e,$Nr,kNr,bn,SNr,S4e,RNr,PNr,R4e,BNr,INr,P4e,NNr,qNr,jNr,B4e,OE,I4e,DNr,GNr,kZ,ONr,VNr,XNr,VE,gze,Xc,XE,N4e,Kx,zNr,q4e,QNr,hze,gr,Zx,WNr,zc,HNr,SZ,UNr,JNr,RZ,YNr,KNr,ZNr,e$,eqr,j4e,oqr,rqr,tqr,zt,o$,aqr,D4e,nqr,sqr,Qc,lqr,G4e,iqr,dqr,PZ,cqr,fqr,mqr,zE,gqr,Gr,r$,hqr,O4e,pqr,_qr,vn,uqr,V4e,bqr,vqr,X4e,Fqr,Tqr,z4e,Mqr,Eqr,Cqr,Q4e,QE,W4e,wqr,Aqr,BZ,Lqr,yqr,xqr,WE,pze,Wc,HE,H4e,t$,$qr,U4e,kqr,_ze,hr,a$,Sqr,Hc,Rqr,IZ,Pqr,Bqr,NZ,Iqr,Nqr,qqr,n$,jqr,J4e,Dqr,Gqr,Oqr,Qt,s$,Vqr,Y4e,Xqr,zqr,Uc,Qqr,K4e,Wqr,Hqr,qZ,Uqr,Jqr,Yqr,UE,Kqr,Or,l$,Zqr,Z4e,ejr,ojr,Fn,rjr,eEe,tjr,ajr,oEe,njr,sjr,rEe,ljr,ijr,djr,oe,JE,tEe,cjr,fjr,jZ,mjr,gjr,hjr,YE,aEe,pjr,_jr,DZ,ujr,bjr,vjr,KE,nEe,Fjr,Tjr,GZ,Mjr,Ejr,Cjr,ZE,sEe,wjr,Ajr,OZ,Ljr,yjr,xjr,eC,lEe,$jr,kjr,VZ,Sjr,Rjr,Pjr,oC,iEe,Bjr,Ijr,XZ,Njr,qjr,jjr,rC,dEe,Djr,Gjr,zZ,Ojr,Vjr,Xjr,tC,cEe,zjr,Qjr,QZ,Wjr,Hjr,Ujr,aC,fEe,Jjr,Yjr,WZ,Kjr,Zjr,eDr,nC,mEe,oDr,rDr,HZ,tDr,aDr,nDr,sC,gEe,sDr,lDr,UZ,iDr,dDr,cDr,lC,hEe,fDr,mDr,JZ,gDr,hDr,pDr,iC,pEe,_Dr,uDr,YZ,bDr,vDr,FDr,dC,_Ee,TDr,MDr,KZ,EDr,CDr,wDr,cC,uEe,ADr,LDr,ZZ,yDr,xDr,$Dr,fC,bEe,kDr,SDr,eee,RDr,PDr,BDr,mC,vEe,IDr,NDr,oee,qDr,jDr,DDr,gC,FEe,GDr,ODr,ree,VDr,XDr,zDr,hC,TEe,QDr,WDr,tee,HDr,UDr,JDr,pC,MEe,YDr,KDr,aee,ZDr,eGr,oGr,_C,EEe,rGr,tGr,nee,aGr,nGr,sGr,uC,CEe,lGr,iGr,see,dGr,cGr,fGr,bC,wEe,mGr,gGr,lee,hGr,pGr,_Gr,vC,AEe,uGr,bGr,iee,vGr,FGr,TGr,FC,LEe,MGr,EGr,dee,CGr,wGr,AGr,TC,yEe,LGr,yGr,cee,xGr,$Gr,kGr,MC,xEe,SGr,RGr,fee,PGr,BGr,IGr,EC,uze,Jc,CC,$Ee,i$,NGr,kEe,qGr,bze,pr,d$,jGr,Yc,DGr,mee,GGr,OGr,gee,VGr,XGr,zGr,c$,QGr,SEe,WGr,HGr,UGr,Wt,f$,JGr,REe,YGr,KGr,Kc,ZGr,PEe,eOr,oOr,hee,rOr,tOr,aOr,wC,nOr,Vr,m$,sOr,BEe,lOr,iOr,Tn,dOr,IEe,cOr,fOr,NEe,mOr,gOr,qEe,hOr,pOr,_Or,xe,AC,jEe,uOr,bOr,pee,vOr,FOr,TOr,LC,DEe,MOr,EOr,_ee,COr,wOr,AOr,yC,GEe,LOr,yOr,uee,xOr,$Or,kOr,xC,OEe,SOr,ROr,bee,POr,BOr,IOr,$C,VEe,NOr,qOr,vee,jOr,DOr,GOr,kC,XEe,OOr,VOr,Fee,XOr,zOr,QOr,SC,zEe,WOr,HOr,Tee,UOr,JOr,YOr,RC,QEe,KOr,ZOr,Mee,eVr,oVr,rVr,PC,WEe,tVr,aVr,Eee,nVr,sVr,lVr,BC,HEe,iVr,dVr,Cee,cVr,fVr,mVr,IC,vze,Zc,NC,UEe,g$,gVr,JEe,hVr,Fze,_r,h$,pVr,ef,_Vr,wee,uVr,bVr,Aee,vVr,FVr,TVr,p$,MVr,YEe,EVr,CVr,wVr,Ht,_$,AVr,KEe,LVr,yVr,of,xVr,ZEe,$Vr,kVr,Lee,SVr,RVr,PVr,qC,BVr,Xr,u$,IVr,eCe,NVr,qVr,Mn,jVr,oCe,DVr,GVr,rCe,OVr,VVr,tCe,XVr,zVr,QVr,Ee,jC,aCe,WVr,HVr,yee,UVr,JVr,YVr,DC,nCe,KVr,ZVr,xee,eXr,oXr,rXr,GC,sCe,tXr,aXr,$ee,nXr,sXr,lXr,OC,lCe,iXr,dXr,kee,cXr,fXr,mXr,VC,iCe,gXr,hXr,See,pXr,_Xr,uXr,XC,dCe,bXr,vXr,Ree,FXr,TXr,MXr,zC,cCe,EXr,CXr,Pee,wXr,AXr,LXr,QC,fCe,yXr,xXr,Bee,$Xr,kXr,SXr,WC,mCe,RXr,PXr,Iee,BXr,IXr,NXr,HC,gCe,qXr,jXr,Nee,DXr,GXr,OXr,UC,hCe,VXr,XXr,qee,zXr,QXr,WXr,JC,pCe,HXr,UXr,jee,JXr,YXr,KXr,YC,_Ce,ZXr,ezr,Dee,ozr,rzr,tzr,KC,Tze,rf,ZC,uCe,b$,azr,bCe,nzr,Mze,ur,v$,szr,tf,lzr,Gee,izr,dzr,Oee,czr,fzr,mzr,F$,gzr,vCe,hzr,pzr,_zr,Ut,T$,uzr,FCe,bzr,vzr,af,Fzr,TCe,Tzr,Mzr,Vee,Ezr,Czr,wzr,e5,Azr,zr,M$,Lzr,MCe,yzr,xzr,En,$zr,ECe,kzr,Szr,CCe,Rzr,Pzr,wCe,Bzr,Izr,Nzr,$e,o5,ACe,qzr,jzr,Xee,Dzr,Gzr,Ozr,r5,LCe,Vzr,Xzr,zee,zzr,Qzr,Wzr,t5,yCe,Hzr,Uzr,Qee,Jzr,Yzr,Kzr,a5,xCe,Zzr,eQr,Wee,oQr,rQr,tQr,n5,$Ce,aQr,nQr,Hee,sQr,lQr,iQr,s5,kCe,dQr,cQr,Uee,fQr,mQr,gQr,l5,SCe,hQr,pQr,Jee,_Qr,uQr,bQr,i5,RCe,vQr,FQr,Yee,TQr,MQr,EQr,d5,PCe,CQr,wQr,Kee,AQr,LQr,yQr,c5,BCe,xQr,$Qr,Zee,kQr,SQr,RQr,f5,Eze,nf,m5,ICe,E$,PQr,NCe,BQr,Cze,br,C$,IQr,sf,NQr,eoe,qQr,jQr,ooe,DQr,GQr,OQr,w$,VQr,qCe,XQr,zQr,QQr,Jt,A$,WQr,jCe,HQr,UQr,lf,JQr,DCe,YQr,KQr,roe,ZQr,eWr,oWr,g5,rWr,Qr,L$,tWr,GCe,aWr,nWr,Cn,sWr,OCe,lWr,iWr,VCe,dWr,cWr,XCe,fWr,mWr,gWr,ke,h5,zCe,hWr,pWr,toe,_Wr,uWr,bWr,p5,QCe,vWr,FWr,aoe,TWr,MWr,EWr,_5,WCe,CWr,wWr,noe,AWr,LWr,yWr,u5,HCe,xWr,$Wr,soe,kWr,SWr,RWr,b5,UCe,PWr,BWr,loe,IWr,NWr,qWr,v5,JCe,jWr,DWr,ioe,GWr,OWr,VWr,F5,YCe,XWr,zWr,doe,QWr,WWr,HWr,T5,KCe,UWr,JWr,coe,YWr,KWr,ZWr,M5,ZCe,eHr,oHr,foe,rHr,tHr,aHr,E5,e5e,nHr,sHr,moe,lHr,iHr,dHr,C5,wze,df,w5,o5e,y$,cHr,r5e,fHr,Aze,vr,x$,mHr,cf,gHr,goe,hHr,pHr,hoe,_Hr,uHr,bHr,$$,vHr,t5e,FHr,THr,MHr,Yt,k$,EHr,a5e,CHr,wHr,ff,AHr,n5e,LHr,yHr,poe,xHr,$Hr,kHr,A5,SHr,Wr,S$,RHr,s5e,PHr,BHr,wn,IHr,l5e,NHr,qHr,i5e,jHr,DHr,d5e,GHr,OHr,VHr,Se,L5,c5e,XHr,zHr,_oe,QHr,WHr,HHr,y5,f5e,UHr,JHr,uoe,YHr,KHr,ZHr,x5,m5e,eUr,oUr,boe,rUr,tUr,aUr,$5,g5e,nUr,sUr,voe,lUr,iUr,dUr,k5,h5e,cUr,fUr,Foe,mUr,gUr,hUr,S5,p5e,pUr,_Ur,Toe,uUr,bUr,vUr,R5,_5e,FUr,TUr,Moe,MUr,EUr,CUr,P5,u5e,wUr,AUr,Eoe,LUr,yUr,xUr,B5,b5e,$Ur,kUr,Coe,SUr,RUr,PUr,I5,v5e,BUr,IUr,woe,NUr,qUr,jUr,N5,Lze,mf,q5,F5e,R$,DUr,T5e,GUr,yze,Fr,P$,OUr,gf,VUr,Aoe,XUr,zUr,Loe,QUr,WUr,HUr,B$,UUr,M5e,JUr,YUr,KUr,Kt,I$,ZUr,E5e,eJr,oJr,hf,rJr,C5e,tJr,aJr,yoe,nJr,sJr,lJr,j5,iJr,Hr,N$,dJr,w5e,cJr,fJr,An,mJr,A5e,gJr,hJr,L5e,pJr,_Jr,y5e,uJr,bJr,vJr,Re,D5,x5e,FJr,TJr,xoe,MJr,EJr,CJr,G5,$5e,wJr,AJr,$oe,LJr,yJr,xJr,O5,k5e,$Jr,kJr,koe,SJr,RJr,PJr,V5,S5e,BJr,IJr,Soe,NJr,qJr,jJr,X5,R5e,DJr,GJr,Roe,OJr,VJr,XJr,z5,P5e,zJr,QJr,Poe,WJr,HJr,UJr,Q5,B5e,JJr,YJr,Boe,KJr,ZJr,eYr,W5,I5e,oYr,rYr,Ioe,tYr,aYr,nYr,H5,N5e,sYr,lYr,Noe,iYr,dYr,cYr,U5,q5e,fYr,mYr,qoe,gYr,hYr,pYr,J5,xze,pf,Y5,j5e,q$,_Yr,D5e,uYr,$ze,Tr,j$,bYr,_f,vYr,joe,FYr,TYr,Doe,MYr,EYr,CYr,D$,wYr,G5e,AYr,LYr,yYr,Zt,G$,xYr,O5e,$Yr,kYr,uf,SYr,V5e,RYr,PYr,Goe,BYr,IYr,NYr,K5,qYr,Ur,O$,jYr,X5e,DYr,GYr,Ln,OYr,z5e,VYr,XYr,Q5e,zYr,QYr,W5e,WYr,HYr,UYr,Ve,Z5,H5e,JYr,YYr,Ooe,KYr,ZYr,eKr,e0,U5e,oKr,rKr,Voe,tKr,aKr,nKr,o0,J5e,sKr,lKr,Xoe,iKr,dKr,cKr,r0,Y5e,fKr,mKr,zoe,gKr,hKr,pKr,t0,K5e,_Kr,uKr,Qoe,bKr,vKr,FKr,a0,Z5e,TKr,MKr,Woe,EKr,CKr,wKr,n0,e0e,AKr,LKr,Hoe,yKr,xKr,$Kr,s0,o0e,kKr,SKr,Uoe,RKr,PKr,BKr,l0,kze,bf,i0,r0e,V$,IKr,t0e,NKr,Sze,Mr,X$,qKr,vf,jKr,Joe,DKr,GKr,Yoe,OKr,VKr,XKr,z$,zKr,a0e,QKr,WKr,HKr,ea,Q$,UKr,n0e,JKr,YKr,Ff,KKr,s0e,ZKr,eZr,Koe,oZr,rZr,tZr,d0,aZr,Jr,W$,nZr,l0e,sZr,lZr,yn,iZr,i0e,dZr,cZr,d0e,fZr,mZr,c0e,gZr,hZr,pZr,Xe,c0,f0e,_Zr,uZr,Zoe,bZr,vZr,FZr,f0,m0e,TZr,MZr,ere,EZr,CZr,wZr,m0,g0e,AZr,LZr,ore,yZr,xZr,$Zr,g0,h0e,kZr,SZr,rre,RZr,PZr,BZr,h0,p0e,IZr,NZr,tre,qZr,jZr,DZr,p0,_0e,GZr,OZr,are,VZr,XZr,zZr,_0,u0e,QZr,WZr,nre,HZr,UZr,JZr,u0,b0e,YZr,KZr,sre,ZZr,eet,oet,b0,Rze,Tf,v0,v0e,H$,ret,F0e,tet,Pze,Er,U$,aet,Mf,net,lre,set,iet,ire,det,cet,fet,J$,met,T0e,get,het,pet,oa,Y$,_et,M0e,uet,bet,Ef,vet,E0e,Fet,Tet,dre,Met,Eet,Cet,F0,wet,Yr,K$,Aet,C0e,Let,yet,xn,xet,w0e,$et,ket,A0e,Set,Ret,L0e,Pet,Bet,Iet,y0e,T0,x0e,Net,qet,cre,jet,Det,Get,M0,Bze,Cf,E0,$0e,Z$,Oet,k0e,Vet,Ize,Cr,ek,Xet,wf,zet,fre,Qet,Wet,mre,Het,Uet,Jet,ok,Yet,S0e,Ket,Zet,eot,ra,rk,oot,R0e,rot,tot,Af,aot,P0e,not,sot,gre,lot,iot,dot,C0,cot,Kr,tk,fot,B0e,mot,got,$n,hot,I0e,pot,_ot,N0e,uot,bot,q0e,vot,Fot,Tot,ak,w0,j0e,Mot,Eot,hre,Cot,wot,Aot,A0,D0e,Lot,yot,pre,xot,$ot,kot,L0,Nze,Lf,y0,G0e,nk,Sot,O0e,Rot,qze,wr,sk,Pot,yf,Bot,_re,Iot,Not,ure,qot,jot,Dot,lk,Got,V0e,Oot,Vot,Xot,ta,ik,zot,X0e,Qot,Wot,xf,Hot,z0e,Uot,Jot,bre,Yot,Kot,Zot,x0,ert,Zr,dk,ort,Q0e,rrt,trt,kn,art,W0e,nrt,srt,H0e,lrt,irt,U0e,drt,crt,frt,J0e,$0,Y0e,mrt,grt,vre,hrt,prt,_rt,k0,jze;return d=new re({}),ka=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),eL=new re({}),oL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new urt({props:{warning:!0,$$slots:{default:[Gzt]},$$scope:{ctx:$}}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/configuration_auto.py#L610"}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/configuration_auto.py#L633"}}),Jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Ozt]},$$scope:{ctx:$}}}),lL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/configuration_auto.py#L756"}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/tokenization_auto.py#L403"}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17963/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/tokenization_auto.py#L417"}}),Sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Vzt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/tokenization_auto.py#L616"}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17963/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),pp=new urt({props:{$$slots:{default:[Xzt]},$$scope:{ctx:$}}}),_p=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[zzt]},$$scope:{ctx:$}}}),vL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/processing_auto.py#L89"}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/processing_auto.py#L103"}}),Np=new urt({props:{$$slots:{default:[Qzt]},$$scope:{ctx:$}}}),qp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Wzt]},$$scope:{ctx:$}}}),wL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/processing_auto.py#L256"}}),AL=new re({}),LL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L782"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),Gp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Hzt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Uzt]},$$scope:{ctx:$}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L789"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),Wu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Jzt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Yzt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L804"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Kzt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Zzt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L811"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[eQt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),bb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oQt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L818"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rQt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tQt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L827"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[aQt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nQt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L872"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[sQt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lQt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L879"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iQt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dQt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L865"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[cQt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fQt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L836"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[mQt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[gQt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L843"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[hQt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L888"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uQt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L927"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vQt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L854"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L934"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L957"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L941"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L948"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L966"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),h8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L973"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L920"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),w8=new re({}),A8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L895"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),$8=new re({}),k8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L902"}}),R8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),B8=new re({}),I8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_auto.py#L911"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),D8=new re({}),G8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),z8=new re({}),Q8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),N9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),j9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),Z9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17963/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17963/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17963/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),JA=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Rn=a("a"),YA=o("AutoConfig"),Pn=o(", "),Bn=a("a"),KA=o("AutoModel"),$i=o(`, and
`),In=a("a"),ZA=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(ka.$$.fragment),We=l(),Ae=a("p"),$S=o("will create a model that is an instance of "),Si=a("a"),kS=o("BertModel"),SS=o("."),Co=l(),Sa=a("p"),RS=o("There is one class of "),If=a("code"),PS=o("AutoModel"),UWe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),PVe=l(),Ri=a("h2"),Nf=a("a"),hae=a("span"),F(eL.$$.fragment),JWe=l(),pae=a("span"),YWe=o("Extending the Auto Classes"),BVe=l(),Nn=a("p"),KWe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_ae=a("code"),ZWe=o("NewModel"),eHe=o(", make sure you have a "),uae=a("code"),oHe=o("NewModelConfig"),rHe=o(` then you can add those to the auto
classes like this:`),IVe=l(),F(oL.$$.fragment),NVe=l(),BS=a("p"),tHe=o("You will then be able to use the auto classes like you would usually do!"),qVe=l(),F(qf.$$.fragment),jVe=l(),Pi=a("h2"),jf=a("a"),bae=a("span"),F(rL.$$.fragment),aHe=l(),vae=a("span"),nHe=o("AutoConfig"),DVe=l(),wo=a("div"),F(tL.$$.fragment),sHe=l(),aL=a("p"),lHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),IS=a("a"),iHe=o("from_pretrained()"),dHe=o(" class method."),cHe=l(),nL=a("p"),fHe=o("This class cannot be instantiated directly using "),Fae=a("code"),mHe=o("__init__()"),gHe=o(" (throws an error)."),hHe=l(),Ar=a("div"),F(sL.$$.fragment),pHe=l(),Tae=a("p"),_He=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),uHe=l(),Bi=a("p"),bHe=o("The configuration class to instantiate is selected based on the "),Mae=a("code"),vHe=o("model_type"),FHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eae=a("code"),THe=o("pretrained_model_name_or_path"),MHe=o(":"),EHe=l(),A=a("ul"),Df=a("li"),Cae=a("strong"),CHe=o("albert"),wHe=o(" \u2014 "),NS=a("a"),AHe=o("AlbertConfig"),LHe=o(" (ALBERT model)"),yHe=l(),Gf=a("li"),wae=a("strong"),xHe=o("bart"),$He=o(" \u2014 "),qS=a("a"),kHe=o("BartConfig"),SHe=o(" (BART model)"),RHe=l(),Of=a("li"),Aae=a("strong"),PHe=o("beit"),BHe=o(" \u2014 "),jS=a("a"),IHe=o("BeitConfig"),NHe=o(" (BEiT model)"),qHe=l(),Vf=a("li"),Lae=a("strong"),jHe=o("bert"),DHe=o(" \u2014 "),DS=a("a"),GHe=o("BertConfig"),OHe=o(" (BERT model)"),VHe=l(),Xf=a("li"),yae=a("strong"),XHe=o("bert-generation"),zHe=o(" \u2014 "),GS=a("a"),QHe=o("BertGenerationConfig"),WHe=o(" (Bert Generation model)"),HHe=l(),zf=a("li"),xae=a("strong"),UHe=o("big_bird"),JHe=o(" \u2014 "),OS=a("a"),YHe=o("BigBirdConfig"),KHe=o(" (BigBird model)"),ZHe=l(),Qf=a("li"),$ae=a("strong"),eUe=o("bigbird_pegasus"),oUe=o(" \u2014 "),VS=a("a"),rUe=o("BigBirdPegasusConfig"),tUe=o(" (BigBird-Pegasus model)"),aUe=l(),Wf=a("li"),kae=a("strong"),nUe=o("blenderbot"),sUe=o(" \u2014 "),XS=a("a"),lUe=o("BlenderbotConfig"),iUe=o(" (Blenderbot model)"),dUe=l(),Hf=a("li"),Sae=a("strong"),cUe=o("blenderbot-small"),fUe=o(" \u2014 "),zS=a("a"),mUe=o("BlenderbotSmallConfig"),gUe=o(" (BlenderbotSmall model)"),hUe=l(),Uf=a("li"),Rae=a("strong"),pUe=o("bloom"),_Ue=o(" \u2014 "),QS=a("a"),uUe=o("BloomConfig"),bUe=o(" (BLOOM model)"),vUe=l(),Jf=a("li"),Pae=a("strong"),FUe=o("camembert"),TUe=o(" \u2014 "),WS=a("a"),MUe=o("CamembertConfig"),EUe=o(" (CamemBERT model)"),CUe=l(),Yf=a("li"),Bae=a("strong"),wUe=o("canine"),AUe=o(" \u2014 "),HS=a("a"),LUe=o("CanineConfig"),yUe=o(" (CANINE model)"),xUe=l(),Kf=a("li"),Iae=a("strong"),$Ue=o("clip"),kUe=o(" \u2014 "),US=a("a"),SUe=o("CLIPConfig"),RUe=o(" (CLIP model)"),PUe=l(),Zf=a("li"),Nae=a("strong"),BUe=o("codegen"),IUe=o(" \u2014 "),JS=a("a"),NUe=o("CodeGenConfig"),qUe=o(" (CodeGen model)"),jUe=l(),em=a("li"),qae=a("strong"),DUe=o("convbert"),GUe=o(" \u2014 "),YS=a("a"),OUe=o("ConvBertConfig"),VUe=o(" (ConvBERT model)"),XUe=l(),om=a("li"),jae=a("strong"),zUe=o("convnext"),QUe=o(" \u2014 "),KS=a("a"),WUe=o("ConvNextConfig"),HUe=o(" (ConvNeXT model)"),UUe=l(),rm=a("li"),Dae=a("strong"),JUe=o("ctrl"),YUe=o(" \u2014 "),ZS=a("a"),KUe=o("CTRLConfig"),ZUe=o(" (CTRL model)"),eJe=l(),tm=a("li"),Gae=a("strong"),oJe=o("cvt"),rJe=o(" \u2014 "),eR=a("a"),tJe=o("CvtConfig"),aJe=o(" (CvT model)"),nJe=l(),am=a("li"),Oae=a("strong"),sJe=o("data2vec-audio"),lJe=o(" \u2014 "),oR=a("a"),iJe=o("Data2VecAudioConfig"),dJe=o(" (Data2VecAudio model)"),cJe=l(),nm=a("li"),Vae=a("strong"),fJe=o("data2vec-text"),mJe=o(" \u2014 "),rR=a("a"),gJe=o("Data2VecTextConfig"),hJe=o(" (Data2VecText model)"),pJe=l(),sm=a("li"),Xae=a("strong"),_Je=o("data2vec-vision"),uJe=o(" \u2014 "),tR=a("a"),bJe=o("Data2VecVisionConfig"),vJe=o(" (Data2VecVision model)"),FJe=l(),lm=a("li"),zae=a("strong"),TJe=o("deberta"),MJe=o(" \u2014 "),aR=a("a"),EJe=o("DebertaConfig"),CJe=o(" (DeBERTa model)"),wJe=l(),im=a("li"),Qae=a("strong"),AJe=o("deberta-v2"),LJe=o(" \u2014 "),nR=a("a"),yJe=o("DebertaV2Config"),xJe=o(" (DeBERTa-v2 model)"),$Je=l(),dm=a("li"),Wae=a("strong"),kJe=o("decision_transformer"),SJe=o(" \u2014 "),sR=a("a"),RJe=o("DecisionTransformerConfig"),PJe=o(" (Decision Transformer model)"),BJe=l(),cm=a("li"),Hae=a("strong"),IJe=o("deit"),NJe=o(" \u2014 "),lR=a("a"),qJe=o("DeiTConfig"),jJe=o(" (DeiT model)"),DJe=l(),fm=a("li"),Uae=a("strong"),GJe=o("detr"),OJe=o(" \u2014 "),iR=a("a"),VJe=o("DetrConfig"),XJe=o(" (DETR model)"),zJe=l(),mm=a("li"),Jae=a("strong"),QJe=o("distilbert"),WJe=o(" \u2014 "),dR=a("a"),HJe=o("DistilBertConfig"),UJe=o(" (DistilBERT model)"),JJe=l(),gm=a("li"),Yae=a("strong"),YJe=o("dpr"),KJe=o(" \u2014 "),cR=a("a"),ZJe=o("DPRConfig"),eYe=o(" (DPR model)"),oYe=l(),hm=a("li"),Kae=a("strong"),rYe=o("dpt"),tYe=o(" \u2014 "),fR=a("a"),aYe=o("DPTConfig"),nYe=o(" (DPT model)"),sYe=l(),pm=a("li"),Zae=a("strong"),lYe=o("electra"),iYe=o(" \u2014 "),mR=a("a"),dYe=o("ElectraConfig"),cYe=o(" (ELECTRA model)"),fYe=l(),_m=a("li"),ene=a("strong"),mYe=o("encoder-decoder"),gYe=o(" \u2014 "),gR=a("a"),hYe=o("EncoderDecoderConfig"),pYe=o(" (Encoder decoder model)"),_Ye=l(),um=a("li"),one=a("strong"),uYe=o("flaubert"),bYe=o(" \u2014 "),hR=a("a"),vYe=o("FlaubertConfig"),FYe=o(" (FlauBERT model)"),TYe=l(),bm=a("li"),rne=a("strong"),MYe=o("flava"),EYe=o(" \u2014 "),pR=a("a"),CYe=o("FlavaConfig"),wYe=o(" (FLAVA model)"),AYe=l(),vm=a("li"),tne=a("strong"),LYe=o("fnet"),yYe=o(" \u2014 "),_R=a("a"),xYe=o("FNetConfig"),$Ye=o(" (FNet model)"),kYe=l(),Fm=a("li"),ane=a("strong"),SYe=o("fsmt"),RYe=o(" \u2014 "),uR=a("a"),PYe=o("FSMTConfig"),BYe=o(" (FairSeq Machine-Translation model)"),IYe=l(),Tm=a("li"),nne=a("strong"),NYe=o("funnel"),qYe=o(" \u2014 "),bR=a("a"),jYe=o("FunnelConfig"),DYe=o(" (Funnel Transformer model)"),GYe=l(),Mm=a("li"),sne=a("strong"),OYe=o("glpn"),VYe=o(" \u2014 "),vR=a("a"),XYe=o("GLPNConfig"),zYe=o(" (GLPN model)"),QYe=l(),Em=a("li"),lne=a("strong"),WYe=o("gpt2"),HYe=o(" \u2014 "),FR=a("a"),UYe=o("GPT2Config"),JYe=o(" (OpenAI GPT-2 model)"),YYe=l(),Cm=a("li"),ine=a("strong"),KYe=o("gpt_neo"),ZYe=o(" \u2014 "),TR=a("a"),eKe=o("GPTNeoConfig"),oKe=o(" (GPT Neo model)"),rKe=l(),wm=a("li"),dne=a("strong"),tKe=o("gpt_neox"),aKe=o(" \u2014 "),MR=a("a"),nKe=o("GPTNeoXConfig"),sKe=o(" (GPT NeoX model)"),lKe=l(),Am=a("li"),cne=a("strong"),iKe=o("gptj"),dKe=o(" \u2014 "),ER=a("a"),cKe=o("GPTJConfig"),fKe=o(" (GPT-J model)"),mKe=l(),Lm=a("li"),fne=a("strong"),gKe=o("groupvit"),hKe=o(" \u2014 "),CR=a("a"),pKe=o("GroupViTConfig"),_Ke=o(" (GroupViT model)"),uKe=l(),ym=a("li"),mne=a("strong"),bKe=o("hubert"),vKe=o(" \u2014 "),wR=a("a"),FKe=o("HubertConfig"),TKe=o(" (Hubert model)"),MKe=l(),xm=a("li"),gne=a("strong"),EKe=o("ibert"),CKe=o(" \u2014 "),AR=a("a"),wKe=o("IBertConfig"),AKe=o(" (I-BERT model)"),LKe=l(),$m=a("li"),hne=a("strong"),yKe=o("imagegpt"),xKe=o(" \u2014 "),LR=a("a"),$Ke=o("ImageGPTConfig"),kKe=o(" (ImageGPT model)"),SKe=l(),km=a("li"),pne=a("strong"),RKe=o("layoutlm"),PKe=o(" \u2014 "),yR=a("a"),BKe=o("LayoutLMConfig"),IKe=o(" (LayoutLM model)"),NKe=l(),Sm=a("li"),_ne=a("strong"),qKe=o("layoutlmv2"),jKe=o(" \u2014 "),xR=a("a"),DKe=o("LayoutLMv2Config"),GKe=o(" (LayoutLMv2 model)"),OKe=l(),Rm=a("li"),une=a("strong"),VKe=o("layoutlmv3"),XKe=o(" \u2014 "),$R=a("a"),zKe=o("LayoutLMv3Config"),QKe=o(" (LayoutLMv3 model)"),WKe=l(),Pm=a("li"),bne=a("strong"),HKe=o("led"),UKe=o(" \u2014 "),kR=a("a"),JKe=o("LEDConfig"),YKe=o(" (LED model)"),KKe=l(),Bm=a("li"),vne=a("strong"),ZKe=o("levit"),eZe=o(" \u2014 "),SR=a("a"),oZe=o("LevitConfig"),rZe=o(" (LeViT model)"),tZe=l(),Im=a("li"),Fne=a("strong"),aZe=o("longformer"),nZe=o(" \u2014 "),RR=a("a"),sZe=o("LongformerConfig"),lZe=o(" (Longformer model)"),iZe=l(),Nm=a("li"),Tne=a("strong"),dZe=o("longt5"),cZe=o(" \u2014 "),PR=a("a"),fZe=o("LongT5Config"),mZe=o(" (LongT5 model)"),gZe=l(),qm=a("li"),Mne=a("strong"),hZe=o("luke"),pZe=o(" \u2014 "),BR=a("a"),_Ze=o("LukeConfig"),uZe=o(" (LUKE model)"),bZe=l(),jm=a("li"),Ene=a("strong"),vZe=o("lxmert"),FZe=o(" \u2014 "),IR=a("a"),TZe=o("LxmertConfig"),MZe=o(" (LXMERT model)"),EZe=l(),Dm=a("li"),Cne=a("strong"),CZe=o("m2m_100"),wZe=o(" \u2014 "),NR=a("a"),AZe=o("M2M100Config"),LZe=o(" (M2M100 model)"),yZe=l(),Gm=a("li"),wne=a("strong"),xZe=o("marian"),$Ze=o(" \u2014 "),qR=a("a"),kZe=o("MarianConfig"),SZe=o(" (Marian model)"),RZe=l(),Om=a("li"),Ane=a("strong"),PZe=o("maskformer"),BZe=o(" \u2014 "),jR=a("a"),IZe=o("MaskFormerConfig"),NZe=o(" (MaskFormer model)"),qZe=l(),Vm=a("li"),Lne=a("strong"),jZe=o("mbart"),DZe=o(" \u2014 "),DR=a("a"),GZe=o("MBartConfig"),OZe=o(" (mBART model)"),VZe=l(),Xm=a("li"),yne=a("strong"),XZe=o("mctct"),zZe=o(" \u2014 "),GR=a("a"),QZe=o("MCTCTConfig"),WZe=o(" (M-CTC-T model)"),HZe=l(),zm=a("li"),xne=a("strong"),UZe=o("megatron-bert"),JZe=o(" \u2014 "),OR=a("a"),YZe=o("MegatronBertConfig"),KZe=o(" (Megatron-BERT model)"),ZZe=l(),Qm=a("li"),$ne=a("strong"),eeo=o("mobilebert"),oeo=o(" \u2014 "),VR=a("a"),reo=o("MobileBertConfig"),teo=o(" (MobileBERT model)"),aeo=l(),Wm=a("li"),kne=a("strong"),neo=o("mobilevit"),seo=o(" \u2014 "),XR=a("a"),leo=o("MobileViTConfig"),ieo=o(" (MobileViT model)"),deo=l(),Hm=a("li"),Sne=a("strong"),ceo=o("mpnet"),feo=o(" \u2014 "),zR=a("a"),meo=o("MPNetConfig"),geo=o(" (MPNet model)"),heo=l(),Um=a("li"),Rne=a("strong"),peo=o("mt5"),_eo=o(" \u2014 "),QR=a("a"),ueo=o("MT5Config"),beo=o(" (MT5 model)"),veo=l(),Jm=a("li"),Pne=a("strong"),Feo=o("mvp"),Teo=o(" \u2014 "),WR=a("a"),Meo=o("MvpConfig"),Eeo=o(" (MVP model)"),Ceo=l(),Ym=a("li"),Bne=a("strong"),weo=o("nezha"),Aeo=o(" \u2014 "),HR=a("a"),Leo=o("NezhaConfig"),yeo=o(" (Nezha model)"),xeo=l(),Km=a("li"),Ine=a("strong"),$eo=o("nystromformer"),keo=o(" \u2014 "),UR=a("a"),Seo=o("NystromformerConfig"),Reo=o(" (Nystr\xF6mformer model)"),Peo=l(),Zm=a("li"),Nne=a("strong"),Beo=o("openai-gpt"),Ieo=o(" \u2014 "),JR=a("a"),Neo=o("OpenAIGPTConfig"),qeo=o(" (OpenAI GPT model)"),jeo=l(),eg=a("li"),qne=a("strong"),Deo=o("opt"),Geo=o(" \u2014 "),YR=a("a"),Oeo=o("OPTConfig"),Veo=o(" (OPT model)"),Xeo=l(),og=a("li"),jne=a("strong"),zeo=o("pegasus"),Qeo=o(" \u2014 "),KR=a("a"),Weo=o("PegasusConfig"),Heo=o(" (Pegasus model)"),Ueo=l(),rg=a("li"),Dne=a("strong"),Jeo=o("perceiver"),Yeo=o(" \u2014 "),ZR=a("a"),Keo=o("PerceiverConfig"),Zeo=o(" (Perceiver model)"),eoo=l(),tg=a("li"),Gne=a("strong"),ooo=o("plbart"),roo=o(" \u2014 "),eP=a("a"),too=o("PLBartConfig"),aoo=o(" (PLBart model)"),noo=l(),ag=a("li"),One=a("strong"),soo=o("poolformer"),loo=o(" \u2014 "),oP=a("a"),ioo=o("PoolFormerConfig"),doo=o(" (PoolFormer model)"),coo=l(),ng=a("li"),Vne=a("strong"),foo=o("prophetnet"),moo=o(" \u2014 "),rP=a("a"),goo=o("ProphetNetConfig"),hoo=o(" (ProphetNet model)"),poo=l(),sg=a("li"),Xne=a("strong"),_oo=o("qdqbert"),uoo=o(" \u2014 "),tP=a("a"),boo=o("QDQBertConfig"),voo=o(" (QDQBert model)"),Foo=l(),lg=a("li"),zne=a("strong"),Too=o("rag"),Moo=o(" \u2014 "),aP=a("a"),Eoo=o("RagConfig"),Coo=o(" (RAG model)"),woo=l(),ig=a("li"),Qne=a("strong"),Aoo=o("realm"),Loo=o(" \u2014 "),nP=a("a"),yoo=o("RealmConfig"),xoo=o(" (REALM model)"),$oo=l(),dg=a("li"),Wne=a("strong"),koo=o("reformer"),Soo=o(" \u2014 "),sP=a("a"),Roo=o("ReformerConfig"),Poo=o(" (Reformer model)"),Boo=l(),cg=a("li"),Hne=a("strong"),Ioo=o("regnet"),Noo=o(" \u2014 "),lP=a("a"),qoo=o("RegNetConfig"),joo=o(" (RegNet model)"),Doo=l(),fg=a("li"),Une=a("strong"),Goo=o("rembert"),Ooo=o(" \u2014 "),iP=a("a"),Voo=o("RemBertConfig"),Xoo=o(" (RemBERT model)"),zoo=l(),mg=a("li"),Jne=a("strong"),Qoo=o("resnet"),Woo=o(" \u2014 "),dP=a("a"),Hoo=o("ResNetConfig"),Uoo=o(" (ResNet model)"),Joo=l(),gg=a("li"),Yne=a("strong"),Yoo=o("retribert"),Koo=o(" \u2014 "),cP=a("a"),Zoo=o("RetriBertConfig"),ero=o(" (RetriBERT model)"),oro=l(),hg=a("li"),Kne=a("strong"),rro=o("roberta"),tro=o(" \u2014 "),fP=a("a"),aro=o("RobertaConfig"),nro=o(" (RoBERTa model)"),sro=l(),pg=a("li"),Zne=a("strong"),lro=o("roformer"),iro=o(" \u2014 "),mP=a("a"),dro=o("RoFormerConfig"),cro=o(" (RoFormer model)"),fro=l(),_g=a("li"),ese=a("strong"),mro=o("segformer"),gro=o(" \u2014 "),gP=a("a"),hro=o("SegformerConfig"),pro=o(" (SegFormer model)"),_ro=l(),ug=a("li"),ose=a("strong"),uro=o("sew"),bro=o(" \u2014 "),hP=a("a"),vro=o("SEWConfig"),Fro=o(" (SEW model)"),Tro=l(),bg=a("li"),rse=a("strong"),Mro=o("sew-d"),Ero=o(" \u2014 "),pP=a("a"),Cro=o("SEWDConfig"),wro=o(" (SEW-D model)"),Aro=l(),vg=a("li"),tse=a("strong"),Lro=o("speech-encoder-decoder"),yro=o(" \u2014 "),_P=a("a"),xro=o("SpeechEncoderDecoderConfig"),$ro=o(" (Speech Encoder decoder model)"),kro=l(),Fg=a("li"),ase=a("strong"),Sro=o("speech_to_text"),Rro=o(" \u2014 "),uP=a("a"),Pro=o("Speech2TextConfig"),Bro=o(" (Speech2Text model)"),Iro=l(),Tg=a("li"),nse=a("strong"),Nro=o("speech_to_text_2"),qro=o(" \u2014 "),bP=a("a"),jro=o("Speech2Text2Config"),Dro=o(" (Speech2Text2 model)"),Gro=l(),Mg=a("li"),sse=a("strong"),Oro=o("splinter"),Vro=o(" \u2014 "),vP=a("a"),Xro=o("SplinterConfig"),zro=o(" (Splinter model)"),Qro=l(),Eg=a("li"),lse=a("strong"),Wro=o("squeezebert"),Hro=o(" \u2014 "),FP=a("a"),Uro=o("SqueezeBertConfig"),Jro=o(" (SqueezeBERT model)"),Yro=l(),Cg=a("li"),ise=a("strong"),Kro=o("swin"),Zro=o(" \u2014 "),TP=a("a"),eto=o("SwinConfig"),oto=o(" (Swin Transformer model)"),rto=l(),wg=a("li"),dse=a("strong"),tto=o("t5"),ato=o(" \u2014 "),MP=a("a"),nto=o("T5Config"),sto=o(" (T5 model)"),lto=l(),Ag=a("li"),cse=a("strong"),ito=o("tapas"),dto=o(" \u2014 "),EP=a("a"),cto=o("TapasConfig"),fto=o(" (TAPAS model)"),mto=l(),Lg=a("li"),fse=a("strong"),gto=o("trajectory_transformer"),hto=o(" \u2014 "),CP=a("a"),pto=o("TrajectoryTransformerConfig"),_to=o(" (Trajectory Transformer model)"),uto=l(),yg=a("li"),mse=a("strong"),bto=o("transfo-xl"),vto=o(" \u2014 "),wP=a("a"),Fto=o("TransfoXLConfig"),Tto=o(" (Transformer-XL model)"),Mto=l(),xg=a("li"),gse=a("strong"),Eto=o("trocr"),Cto=o(" \u2014 "),AP=a("a"),wto=o("TrOCRConfig"),Ato=o(" (TrOCR model)"),Lto=l(),$g=a("li"),hse=a("strong"),yto=o("unispeech"),xto=o(" \u2014 "),LP=a("a"),$to=o("UniSpeechConfig"),kto=o(" (UniSpeech model)"),Sto=l(),kg=a("li"),pse=a("strong"),Rto=o("unispeech-sat"),Pto=o(" \u2014 "),yP=a("a"),Bto=o("UniSpeechSatConfig"),Ito=o(" (UniSpeechSat model)"),Nto=l(),Sg=a("li"),_se=a("strong"),qto=o("van"),jto=o(" \u2014 "),xP=a("a"),Dto=o("VanConfig"),Gto=o(" (VAN model)"),Oto=l(),Rg=a("li"),use=a("strong"),Vto=o("vilt"),Xto=o(" \u2014 "),$P=a("a"),zto=o("ViltConfig"),Qto=o(" (ViLT model)"),Wto=l(),Pg=a("li"),bse=a("strong"),Hto=o("vision-encoder-decoder"),Uto=o(" \u2014 "),kP=a("a"),Jto=o("VisionEncoderDecoderConfig"),Yto=o(" (Vision Encoder decoder model)"),Kto=l(),Bg=a("li"),vse=a("strong"),Zto=o("vision-text-dual-encoder"),eao=o(" \u2014 "),SP=a("a"),oao=o("VisionTextDualEncoderConfig"),rao=o(" (VisionTextDualEncoder model)"),tao=l(),Ig=a("li"),Fse=a("strong"),aao=o("visual_bert"),nao=o(" \u2014 "),RP=a("a"),sao=o("VisualBertConfig"),lao=o(" (VisualBERT model)"),iao=l(),Ng=a("li"),Tse=a("strong"),dao=o("vit"),cao=o(" \u2014 "),PP=a("a"),fao=o("ViTConfig"),mao=o(" (ViT model)"),gao=l(),qg=a("li"),Mse=a("strong"),hao=o("vit_mae"),pao=o(" \u2014 "),BP=a("a"),_ao=o("ViTMAEConfig"),uao=o(" (ViTMAE model)"),bao=l(),jg=a("li"),Ese=a("strong"),vao=o("wav2vec2"),Fao=o(" \u2014 "),IP=a("a"),Tao=o("Wav2Vec2Config"),Mao=o(" (Wav2Vec2 model)"),Eao=l(),Dg=a("li"),Cse=a("strong"),Cao=o("wav2vec2-conformer"),wao=o(" \u2014 "),NP=a("a"),Aao=o("Wav2Vec2ConformerConfig"),Lao=o(" (Wav2Vec2-Conformer model)"),yao=l(),Gg=a("li"),wse=a("strong"),xao=o("wavlm"),$ao=o(" \u2014 "),qP=a("a"),kao=o("WavLMConfig"),Sao=o(" (WavLM model)"),Rao=l(),Og=a("li"),Ase=a("strong"),Pao=o("xglm"),Bao=o(" \u2014 "),jP=a("a"),Iao=o("XGLMConfig"),Nao=o(" (XGLM model)"),qao=l(),Vg=a("li"),Lse=a("strong"),jao=o("xlm"),Dao=o(" \u2014 "),DP=a("a"),Gao=o("XLMConfig"),Oao=o(" (XLM model)"),Vao=l(),Xg=a("li"),yse=a("strong"),Xao=o("xlm-prophetnet"),zao=o(" \u2014 "),GP=a("a"),Qao=o("XLMProphetNetConfig"),Wao=o(" (XLM-ProphetNet model)"),Hao=l(),zg=a("li"),xse=a("strong"),Uao=o("xlm-roberta"),Jao=o(" \u2014 "),OP=a("a"),Yao=o("XLMRobertaConfig"),Kao=o(" (XLM-RoBERTa model)"),Zao=l(),Qg=a("li"),$se=a("strong"),eno=o("xlm-roberta-xl"),ono=o(" \u2014 "),VP=a("a"),rno=o("XLMRobertaXLConfig"),tno=o(" (XLM-RoBERTa-XL model)"),ano=l(),Wg=a("li"),kse=a("strong"),nno=o("xlnet"),sno=o(" \u2014 "),XP=a("a"),lno=o("XLNetConfig"),ino=o(" (XLNet model)"),dno=l(),Hg=a("li"),Sse=a("strong"),cno=o("yolos"),fno=o(" \u2014 "),zP=a("a"),mno=o("YolosConfig"),gno=o(" (YOLOS model)"),hno=l(),Ug=a("li"),Rse=a("strong"),pno=o("yoso"),_no=o(" \u2014 "),QP=a("a"),uno=o("YosoConfig"),bno=o(" (YOSO model)"),vno=l(),F(Jg.$$.fragment),Fno=l(),Yg=a("div"),F(lL.$$.fragment),Tno=l(),Pse=a("p"),Mno=o("Register a new configuration for this class."),GVe=l(),Ii=a("h2"),Kg=a("a"),Bse=a("span"),F(iL.$$.fragment),Eno=l(),Ise=a("span"),Cno=o("AutoTokenizer"),OVe=l(),Ao=a("div"),F(dL.$$.fragment),wno=l(),cL=a("p"),Ano=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WP=a("a"),Lno=o("AutoTokenizer.from_pretrained()"),yno=o(" class method."),xno=l(),fL=a("p"),$no=o("This class cannot be instantiated directly using "),Nse=a("code"),kno=o("__init__()"),Sno=o(" (throws an error)."),Rno=l(),Lr=a("div"),F(mL.$$.fragment),Pno=l(),qse=a("p"),Bno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ino=l(),Ra=a("p"),Nno=o("The tokenizer class to instantiate is selected based on the "),jse=a("code"),qno=o("model_type"),jno=o(` property of the config object (either
passed as an argument or loaded from `),Dse=a("code"),Dno=o("pretrained_model_name_or_path"),Gno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gse=a("code"),Ono=o("pretrained_model_name_or_path"),Vno=o(":"),Xno=l(),k=a("ul"),qn=a("li"),Ose=a("strong"),zno=o("albert"),Qno=o(" \u2014 "),HP=a("a"),Wno=o("AlbertTokenizer"),Hno=o(" or "),UP=a("a"),Uno=o("AlbertTokenizerFast"),Jno=o(" (ALBERT model)"),Yno=l(),jn=a("li"),Vse=a("strong"),Kno=o("bart"),Zno=o(" \u2014 "),JP=a("a"),eso=o("BartTokenizer"),oso=o(" or "),YP=a("a"),rso=o("BartTokenizerFast"),tso=o(" (BART model)"),aso=l(),Dn=a("li"),Xse=a("strong"),nso=o("barthez"),sso=o(" \u2014 "),KP=a("a"),lso=o("BarthezTokenizer"),iso=o(" or "),ZP=a("a"),dso=o("BarthezTokenizerFast"),cso=o(" (BARThez model)"),fso=l(),Zg=a("li"),zse=a("strong"),mso=o("bartpho"),gso=o(" \u2014 "),eB=a("a"),hso=o("BartphoTokenizer"),pso=o(" (BARTpho model)"),_so=l(),Gn=a("li"),Qse=a("strong"),uso=o("bert"),bso=o(" \u2014 "),oB=a("a"),vso=o("BertTokenizer"),Fso=o(" or "),rB=a("a"),Tso=o("BertTokenizerFast"),Mso=o(" (BERT model)"),Eso=l(),eh=a("li"),Wse=a("strong"),Cso=o("bert-generation"),wso=o(" \u2014 "),tB=a("a"),Aso=o("BertGenerationTokenizer"),Lso=o(" (Bert Generation model)"),yso=l(),oh=a("li"),Hse=a("strong"),xso=o("bert-japanese"),$so=o(" \u2014 "),aB=a("a"),kso=o("BertJapaneseTokenizer"),Sso=o(" (BertJapanese model)"),Rso=l(),rh=a("li"),Use=a("strong"),Pso=o("bertweet"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("BertweetTokenizer"),Nso=o(" (BERTweet model)"),qso=l(),On=a("li"),Jse=a("strong"),jso=o("big_bird"),Dso=o(" \u2014 "),sB=a("a"),Gso=o("BigBirdTokenizer"),Oso=o(" or "),lB=a("a"),Vso=o("BigBirdTokenizerFast"),Xso=o(" (BigBird model)"),zso=l(),Vn=a("li"),Yse=a("strong"),Qso=o("bigbird_pegasus"),Wso=o(" \u2014 "),iB=a("a"),Hso=o("PegasusTokenizer"),Uso=o(" or "),dB=a("a"),Jso=o("PegasusTokenizerFast"),Yso=o(" (BigBird-Pegasus model)"),Kso=l(),Xn=a("li"),Kse=a("strong"),Zso=o("blenderbot"),elo=o(" \u2014 "),cB=a("a"),olo=o("BlenderbotTokenizer"),rlo=o(" or "),fB=a("a"),tlo=o("BlenderbotTokenizerFast"),alo=o(" (Blenderbot model)"),nlo=l(),th=a("li"),Zse=a("strong"),slo=o("blenderbot-small"),llo=o(" \u2014 "),mB=a("a"),ilo=o("BlenderbotSmallTokenizer"),dlo=o(" (BlenderbotSmall model)"),clo=l(),ah=a("li"),ele=a("strong"),flo=o("bloom"),mlo=o(" \u2014 "),gB=a("a"),glo=o("BloomTokenizerFast"),hlo=o(" (BLOOM model)"),plo=l(),nh=a("li"),ole=a("strong"),_lo=o("byt5"),ulo=o(" \u2014 "),hB=a("a"),blo=o("ByT5Tokenizer"),vlo=o(" (ByT5 model)"),Flo=l(),zn=a("li"),rle=a("strong"),Tlo=o("camembert"),Mlo=o(" \u2014 "),pB=a("a"),Elo=o("CamembertTokenizer"),Clo=o(" or "),_B=a("a"),wlo=o("CamembertTokenizerFast"),Alo=o(" (CamemBERT model)"),Llo=l(),sh=a("li"),tle=a("strong"),ylo=o("canine"),xlo=o(" \u2014 "),uB=a("a"),$lo=o("CanineTokenizer"),klo=o(" (CANINE model)"),Slo=l(),Qn=a("li"),ale=a("strong"),Rlo=o("clip"),Plo=o(" \u2014 "),bB=a("a"),Blo=o("CLIPTokenizer"),Ilo=o(" or "),vB=a("a"),Nlo=o("CLIPTokenizerFast"),qlo=o(" (CLIP model)"),jlo=l(),Wn=a("li"),nle=a("strong"),Dlo=o("codegen"),Glo=o(" \u2014 "),FB=a("a"),Olo=o("CodeGenTokenizer"),Vlo=o(" or "),TB=a("a"),Xlo=o("CodeGenTokenizerFast"),zlo=o(" (CodeGen model)"),Qlo=l(),Hn=a("li"),sle=a("strong"),Wlo=o("convbert"),Hlo=o(" \u2014 "),MB=a("a"),Ulo=o("ConvBertTokenizer"),Jlo=o(" or "),EB=a("a"),Ylo=o("ConvBertTokenizerFast"),Klo=o(" (ConvBERT model)"),Zlo=l(),Un=a("li"),lle=a("strong"),eio=o("cpm"),oio=o(" \u2014 "),CB=a("a"),rio=o("CpmTokenizer"),tio=o(" or "),wB=a("a"),aio=o("CpmTokenizerFast"),nio=o(" (CPM model)"),sio=l(),lh=a("li"),ile=a("strong"),lio=o("ctrl"),iio=o(" \u2014 "),AB=a("a"),dio=o("CTRLTokenizer"),cio=o(" (CTRL model)"),fio=l(),Jn=a("li"),dle=a("strong"),mio=o("data2vec-text"),gio=o(" \u2014 "),LB=a("a"),hio=o("RobertaTokenizer"),pio=o(" or "),yB=a("a"),_io=o("RobertaTokenizerFast"),uio=o(" (Data2VecText model)"),bio=l(),Yn=a("li"),cle=a("strong"),vio=o("deberta"),Fio=o(" \u2014 "),xB=a("a"),Tio=o("DebertaTokenizer"),Mio=o(" or "),$B=a("a"),Eio=o("DebertaTokenizerFast"),Cio=o(" (DeBERTa model)"),wio=l(),Kn=a("li"),fle=a("strong"),Aio=o("deberta-v2"),Lio=o(" \u2014 "),kB=a("a"),yio=o("DebertaV2Tokenizer"),xio=o(" or "),SB=a("a"),$io=o("DebertaV2TokenizerFast"),kio=o(" (DeBERTa-v2 model)"),Sio=l(),Zn=a("li"),mle=a("strong"),Rio=o("distilbert"),Pio=o(" \u2014 "),RB=a("a"),Bio=o("DistilBertTokenizer"),Iio=o(" or "),PB=a("a"),Nio=o("DistilBertTokenizerFast"),qio=o(" (DistilBERT model)"),jio=l(),es=a("li"),gle=a("strong"),Dio=o("dpr"),Gio=o(" \u2014 "),BB=a("a"),Oio=o("DPRQuestionEncoderTokenizer"),Vio=o(" or "),IB=a("a"),Xio=o("DPRQuestionEncoderTokenizerFast"),zio=o(" (DPR model)"),Qio=l(),os=a("li"),hle=a("strong"),Wio=o("electra"),Hio=o(" \u2014 "),NB=a("a"),Uio=o("ElectraTokenizer"),Jio=o(" or "),qB=a("a"),Yio=o("ElectraTokenizerFast"),Kio=o(" (ELECTRA model)"),Zio=l(),ih=a("li"),ple=a("strong"),edo=o("flaubert"),odo=o(" \u2014 "),jB=a("a"),rdo=o("FlaubertTokenizer"),tdo=o(" (FlauBERT model)"),ado=l(),rs=a("li"),_le=a("strong"),ndo=o("fnet"),sdo=o(" \u2014 "),DB=a("a"),ldo=o("FNetTokenizer"),ido=o(" or "),GB=a("a"),ddo=o("FNetTokenizerFast"),cdo=o(" (FNet model)"),fdo=l(),dh=a("li"),ule=a("strong"),mdo=o("fsmt"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("FSMTTokenizer"),pdo=o(" (FairSeq Machine-Translation model)"),_do=l(),ts=a("li"),ble=a("strong"),udo=o("funnel"),bdo=o(" \u2014 "),VB=a("a"),vdo=o("FunnelTokenizer"),Fdo=o(" or "),XB=a("a"),Tdo=o("FunnelTokenizerFast"),Mdo=o(" (Funnel Transformer model)"),Edo=l(),as=a("li"),vle=a("strong"),Cdo=o("gpt2"),wdo=o(" \u2014 "),zB=a("a"),Ado=o("GPT2Tokenizer"),Ldo=o(" or "),QB=a("a"),ydo=o("GPT2TokenizerFast"),xdo=o(" (OpenAI GPT-2 model)"),$do=l(),ns=a("li"),Fle=a("strong"),kdo=o("gpt_neo"),Sdo=o(" \u2014 "),WB=a("a"),Rdo=o("GPT2Tokenizer"),Pdo=o(" or "),HB=a("a"),Bdo=o("GPT2TokenizerFast"),Ido=o(" (GPT Neo model)"),Ndo=l(),ch=a("li"),Tle=a("strong"),qdo=o("gpt_neox"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("GPTNeoXTokenizerFast"),Gdo=o(" (GPT NeoX model)"),Odo=l(),ss=a("li"),Mle=a("strong"),Vdo=o("gptj"),Xdo=o(" \u2014 "),JB=a("a"),zdo=o("GPT2Tokenizer"),Qdo=o(" or "),YB=a("a"),Wdo=o("GPT2TokenizerFast"),Hdo=o(" (GPT-J model)"),Udo=l(),ls=a("li"),Ele=a("strong"),Jdo=o("groupvit"),Ydo=o(" \u2014 "),KB=a("a"),Kdo=o("CLIPTokenizer"),Zdo=o(" or "),ZB=a("a"),eco=o("CLIPTokenizerFast"),oco=o(" (GroupViT model)"),rco=l(),is=a("li"),Cle=a("strong"),tco=o("herbert"),aco=o(" \u2014 "),eI=a("a"),nco=o("HerbertTokenizer"),sco=o(" or "),oI=a("a"),lco=o("HerbertTokenizerFast"),ico=o(" (HerBERT model)"),dco=l(),fh=a("li"),wle=a("strong"),cco=o("hubert"),fco=o(" \u2014 "),rI=a("a"),mco=o("Wav2Vec2CTCTokenizer"),gco=o(" (Hubert model)"),hco=l(),ds=a("li"),Ale=a("strong"),pco=o("ibert"),_co=o(" \u2014 "),tI=a("a"),uco=o("RobertaTokenizer"),bco=o(" or "),aI=a("a"),vco=o("RobertaTokenizerFast"),Fco=o(" (I-BERT model)"),Tco=l(),cs=a("li"),Lle=a("strong"),Mco=o("layoutlm"),Eco=o(" \u2014 "),nI=a("a"),Cco=o("LayoutLMTokenizer"),wco=o(" or "),sI=a("a"),Aco=o("LayoutLMTokenizerFast"),Lco=o(" (LayoutLM model)"),yco=l(),fs=a("li"),yle=a("strong"),xco=o("layoutlmv2"),$co=o(" \u2014 "),lI=a("a"),kco=o("LayoutLMv2Tokenizer"),Sco=o(" or "),iI=a("a"),Rco=o("LayoutLMv2TokenizerFast"),Pco=o(" (LayoutLMv2 model)"),Bco=l(),ms=a("li"),xle=a("strong"),Ico=o("layoutlmv3"),Nco=o(" \u2014 "),dI=a("a"),qco=o("LayoutLMv3Tokenizer"),jco=o(" or "),cI=a("a"),Dco=o("LayoutLMv3TokenizerFast"),Gco=o(" (LayoutLMv3 model)"),Oco=l(),gs=a("li"),$le=a("strong"),Vco=o("layoutxlm"),Xco=o(" \u2014 "),fI=a("a"),zco=o("LayoutXLMTokenizer"),Qco=o(" or "),mI=a("a"),Wco=o("LayoutXLMTokenizerFast"),Hco=o(" (LayoutXLM model)"),Uco=l(),hs=a("li"),kle=a("strong"),Jco=o("led"),Yco=o(" \u2014 "),gI=a("a"),Kco=o("LEDTokenizer"),Zco=o(" or "),hI=a("a"),efo=o("LEDTokenizerFast"),ofo=o(" (LED model)"),rfo=l(),ps=a("li"),Sle=a("strong"),tfo=o("longformer"),afo=o(" \u2014 "),pI=a("a"),nfo=o("LongformerTokenizer"),sfo=o(" or "),_I=a("a"),lfo=o("LongformerTokenizerFast"),ifo=o(" (Longformer model)"),dfo=l(),_s=a("li"),Rle=a("strong"),cfo=o("longt5"),ffo=o(" \u2014 "),uI=a("a"),mfo=o("T5Tokenizer"),gfo=o(" or "),bI=a("a"),hfo=o("T5TokenizerFast"),pfo=o(" (LongT5 model)"),_fo=l(),mh=a("li"),Ple=a("strong"),ufo=o("luke"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("LukeTokenizer"),Ffo=o(" (LUKE model)"),Tfo=l(),us=a("li"),Ble=a("strong"),Mfo=o("lxmert"),Efo=o(" \u2014 "),FI=a("a"),Cfo=o("LxmertTokenizer"),wfo=o(" or "),TI=a("a"),Afo=o("LxmertTokenizerFast"),Lfo=o(" (LXMERT model)"),yfo=l(),gh=a("li"),Ile=a("strong"),xfo=o("m2m_100"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("M2M100Tokenizer"),Sfo=o(" (M2M100 model)"),Rfo=l(),hh=a("li"),Nle=a("strong"),Pfo=o("marian"),Bfo=o(" \u2014 "),EI=a("a"),Ifo=o("MarianTokenizer"),Nfo=o(" (Marian model)"),qfo=l(),bs=a("li"),qle=a("strong"),jfo=o("mbart"),Dfo=o(" \u2014 "),CI=a("a"),Gfo=o("MBartTokenizer"),Ofo=o(" or "),wI=a("a"),Vfo=o("MBartTokenizerFast"),Xfo=o(" (mBART model)"),zfo=l(),vs=a("li"),jle=a("strong"),Qfo=o("mbart50"),Wfo=o(" \u2014 "),AI=a("a"),Hfo=o("MBart50Tokenizer"),Ufo=o(" or "),LI=a("a"),Jfo=o("MBart50TokenizerFast"),Yfo=o(" (mBART-50 model)"),Kfo=l(),Fs=a("li"),Dle=a("strong"),Zfo=o("megatron-bert"),emo=o(" \u2014 "),yI=a("a"),omo=o("BertTokenizer"),rmo=o(" or "),xI=a("a"),tmo=o("BertTokenizerFast"),amo=o(" (Megatron-BERT model)"),nmo=l(),ph=a("li"),Gle=a("strong"),smo=o("mluke"),lmo=o(" \u2014 "),$I=a("a"),imo=o("MLukeTokenizer"),dmo=o(" (mLUKE model)"),cmo=l(),Ts=a("li"),Ole=a("strong"),fmo=o("mobilebert"),mmo=o(" \u2014 "),kI=a("a"),gmo=o("MobileBertTokenizer"),hmo=o(" or "),SI=a("a"),pmo=o("MobileBertTokenizerFast"),_mo=o(" (MobileBERT model)"),umo=l(),Ms=a("li"),Vle=a("strong"),bmo=o("mpnet"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("MPNetTokenizer"),Tmo=o(" or "),PI=a("a"),Mmo=o("MPNetTokenizerFast"),Emo=o(" (MPNet model)"),Cmo=l(),Es=a("li"),Xle=a("strong"),wmo=o("mt5"),Amo=o(" \u2014 "),BI=a("a"),Lmo=o("MT5Tokenizer"),ymo=o(" or "),II=a("a"),xmo=o("MT5TokenizerFast"),$mo=o(" (MT5 model)"),kmo=l(),Cs=a("li"),zle=a("strong"),Smo=o("mvp"),Rmo=o(" \u2014 "),NI=a("a"),Pmo=o("MvpTokenizer"),Bmo=o(" or "),qI=a("a"),Imo=o("MvpTokenizerFast"),Nmo=o(" (MVP model)"),qmo=l(),ws=a("li"),Qle=a("strong"),jmo=o("nezha"),Dmo=o(" \u2014 "),jI=a("a"),Gmo=o("BertTokenizer"),Omo=o(" or "),DI=a("a"),Vmo=o("BertTokenizerFast"),Xmo=o(" (Nezha model)"),zmo=l(),As=a("li"),Wle=a("strong"),Qmo=o("nystromformer"),Wmo=o(" \u2014 "),GI=a("a"),Hmo=o("AlbertTokenizer"),Umo=o(" or "),OI=a("a"),Jmo=o("AlbertTokenizerFast"),Ymo=o(" (Nystr\xF6mformer model)"),Kmo=l(),Ls=a("li"),Hle=a("strong"),Zmo=o("openai-gpt"),ego=o(" \u2014 "),VI=a("a"),ogo=o("OpenAIGPTTokenizer"),rgo=o(" or "),XI=a("a"),tgo=o("OpenAIGPTTokenizerFast"),ago=o(" (OpenAI GPT model)"),ngo=l(),_h=a("li"),Ule=a("strong"),sgo=o("opt"),lgo=o(" \u2014 "),zI=a("a"),igo=o("GPT2Tokenizer"),dgo=o(" (OPT model)"),cgo=l(),ys=a("li"),Jle=a("strong"),fgo=o("pegasus"),mgo=o(" \u2014 "),QI=a("a"),ggo=o("PegasusTokenizer"),hgo=o(" or "),WI=a("a"),pgo=o("PegasusTokenizerFast"),_go=o(" (Pegasus model)"),ugo=l(),uh=a("li"),Yle=a("strong"),bgo=o("perceiver"),vgo=o(" \u2014 "),HI=a("a"),Fgo=o("PerceiverTokenizer"),Tgo=o(" (Perceiver model)"),Mgo=l(),bh=a("li"),Kle=a("strong"),Ego=o("phobert"),Cgo=o(" \u2014 "),UI=a("a"),wgo=o("PhobertTokenizer"),Ago=o(" (PhoBERT model)"),Lgo=l(),vh=a("li"),Zle=a("strong"),ygo=o("plbart"),xgo=o(" \u2014 "),JI=a("a"),$go=o("PLBartTokenizer"),kgo=o(" (PLBart model)"),Sgo=l(),Fh=a("li"),eie=a("strong"),Rgo=o("prophetnet"),Pgo=o(" \u2014 "),YI=a("a"),Bgo=o("ProphetNetTokenizer"),Igo=o(" (ProphetNet model)"),Ngo=l(),xs=a("li"),oie=a("strong"),qgo=o("qdqbert"),jgo=o(" \u2014 "),KI=a("a"),Dgo=o("BertTokenizer"),Ggo=o(" or "),ZI=a("a"),Ogo=o("BertTokenizerFast"),Vgo=o(" (QDQBert model)"),Xgo=l(),Th=a("li"),rie=a("strong"),zgo=o("rag"),Qgo=o(" \u2014 "),eN=a("a"),Wgo=o("RagTokenizer"),Hgo=o(" (RAG model)"),Ugo=l(),$s=a("li"),tie=a("strong"),Jgo=o("realm"),Ygo=o(" \u2014 "),oN=a("a"),Kgo=o("RealmTokenizer"),Zgo=o(" or "),rN=a("a"),eho=o("RealmTokenizerFast"),oho=o(" (REALM model)"),rho=l(),ks=a("li"),aie=a("strong"),tho=o("reformer"),aho=o(" \u2014 "),tN=a("a"),nho=o("ReformerTokenizer"),sho=o(" or "),aN=a("a"),lho=o("ReformerTokenizerFast"),iho=o(" (Reformer model)"),dho=l(),Ss=a("li"),nie=a("strong"),cho=o("rembert"),fho=o(" \u2014 "),nN=a("a"),mho=o("RemBertTokenizer"),gho=o(" or "),sN=a("a"),hho=o("RemBertTokenizerFast"),pho=o(" (RemBERT model)"),_ho=l(),Rs=a("li"),sie=a("strong"),uho=o("retribert"),bho=o(" \u2014 "),lN=a("a"),vho=o("RetriBertTokenizer"),Fho=o(" or "),iN=a("a"),Tho=o("RetriBertTokenizerFast"),Mho=o(" (RetriBERT model)"),Eho=l(),Ps=a("li"),lie=a("strong"),Cho=o("roberta"),who=o(" \u2014 "),dN=a("a"),Aho=o("RobertaTokenizer"),Lho=o(" or "),cN=a("a"),yho=o("RobertaTokenizerFast"),xho=o(" (RoBERTa model)"),$ho=l(),Bs=a("li"),iie=a("strong"),kho=o("roformer"),Sho=o(" \u2014 "),fN=a("a"),Rho=o("RoFormerTokenizer"),Pho=o(" or "),mN=a("a"),Bho=o("RoFormerTokenizerFast"),Iho=o(" (RoFormer model)"),Nho=l(),Mh=a("li"),die=a("strong"),qho=o("speech_to_text"),jho=o(" \u2014 "),gN=a("a"),Dho=o("Speech2TextTokenizer"),Gho=o(" (Speech2Text model)"),Oho=l(),Eh=a("li"),cie=a("strong"),Vho=o("speech_to_text_2"),Xho=o(" \u2014 "),hN=a("a"),zho=o("Speech2Text2Tokenizer"),Qho=o(" (Speech2Text2 model)"),Who=l(),Is=a("li"),fie=a("strong"),Hho=o("splinter"),Uho=o(" \u2014 "),pN=a("a"),Jho=o("SplinterTokenizer"),Yho=o(" or "),_N=a("a"),Kho=o("SplinterTokenizerFast"),Zho=o(" (Splinter model)"),epo=l(),Ns=a("li"),mie=a("strong"),opo=o("squeezebert"),rpo=o(" \u2014 "),uN=a("a"),tpo=o("SqueezeBertTokenizer"),apo=o(" or "),bN=a("a"),npo=o("SqueezeBertTokenizerFast"),spo=o(" (SqueezeBERT model)"),lpo=l(),qs=a("li"),gie=a("strong"),ipo=o("t5"),dpo=o(" \u2014 "),vN=a("a"),cpo=o("T5Tokenizer"),fpo=o(" or "),FN=a("a"),mpo=o("T5TokenizerFast"),gpo=o(" (T5 model)"),hpo=l(),Ch=a("li"),hie=a("strong"),ppo=o("tapas"),_po=o(" \u2014 "),TN=a("a"),upo=o("TapasTokenizer"),bpo=o(" (TAPAS model)"),vpo=l(),wh=a("li"),pie=a("strong"),Fpo=o("tapex"),Tpo=o(" \u2014 "),MN=a("a"),Mpo=o("TapexTokenizer"),Epo=o(" (TAPEX model)"),Cpo=l(),Ah=a("li"),_ie=a("strong"),wpo=o("transfo-xl"),Apo=o(" \u2014 "),EN=a("a"),Lpo=o("TransfoXLTokenizer"),ypo=o(" (Transformer-XL model)"),xpo=l(),js=a("li"),uie=a("strong"),$po=o("vilt"),kpo=o(" \u2014 "),CN=a("a"),Spo=o("BertTokenizer"),Rpo=o(" or "),wN=a("a"),Ppo=o("BertTokenizerFast"),Bpo=o(" (ViLT model)"),Ipo=l(),Ds=a("li"),bie=a("strong"),Npo=o("visual_bert"),qpo=o(" \u2014 "),AN=a("a"),jpo=o("BertTokenizer"),Dpo=o(" or "),LN=a("a"),Gpo=o("BertTokenizerFast"),Opo=o(" (VisualBERT model)"),Vpo=l(),Lh=a("li"),vie=a("strong"),Xpo=o("wav2vec2"),zpo=o(" \u2014 "),yN=a("a"),Qpo=o("Wav2Vec2CTCTokenizer"),Wpo=o(" (Wav2Vec2 model)"),Hpo=l(),yh=a("li"),Fie=a("strong"),Upo=o("wav2vec2-conformer"),Jpo=o(" \u2014 "),xN=a("a"),Ypo=o("Wav2Vec2CTCTokenizer"),Kpo=o(" (Wav2Vec2-Conformer model)"),Zpo=l(),xh=a("li"),Tie=a("strong"),e_o=o("wav2vec2_phoneme"),o_o=o(" \u2014 "),$N=a("a"),r_o=o("Wav2Vec2PhonemeCTCTokenizer"),t_o=o(" (Wav2Vec2Phoneme model)"),a_o=l(),Gs=a("li"),Mie=a("strong"),n_o=o("xglm"),s_o=o(" \u2014 "),kN=a("a"),l_o=o("XGLMTokenizer"),i_o=o(" or "),SN=a("a"),d_o=o("XGLMTokenizerFast"),c_o=o(" (XGLM model)"),f_o=l(),$h=a("li"),Eie=a("strong"),m_o=o("xlm"),g_o=o(" \u2014 "),RN=a("a"),h_o=o("XLMTokenizer"),p_o=o(" (XLM model)"),__o=l(),kh=a("li"),Cie=a("strong"),u_o=o("xlm-prophetnet"),b_o=o(" \u2014 "),PN=a("a"),v_o=o("XLMProphetNetTokenizer"),F_o=o(" (XLM-ProphetNet model)"),T_o=l(),Os=a("li"),wie=a("strong"),M_o=o("xlm-roberta"),E_o=o(" \u2014 "),BN=a("a"),C_o=o("XLMRobertaTokenizer"),w_o=o(" or "),IN=a("a"),A_o=o("XLMRobertaTokenizerFast"),L_o=o(" (XLM-RoBERTa model)"),y_o=l(),Vs=a("li"),Aie=a("strong"),x_o=o("xlm-roberta-xl"),$_o=o(" \u2014 "),NN=a("a"),k_o=o("RobertaTokenizer"),S_o=o(" or "),qN=a("a"),R_o=o("RobertaTokenizerFast"),P_o=o(" (XLM-RoBERTa-XL model)"),B_o=l(),Xs=a("li"),Lie=a("strong"),I_o=o("xlnet"),N_o=o(" \u2014 "),jN=a("a"),q_o=o("XLNetTokenizer"),j_o=o(" or "),DN=a("a"),D_o=o("XLNetTokenizerFast"),G_o=o(" (XLNet model)"),O_o=l(),zs=a("li"),yie=a("strong"),V_o=o("yoso"),X_o=o(" \u2014 "),GN=a("a"),z_o=o("AlbertTokenizer"),Q_o=o(" or "),ON=a("a"),W_o=o("AlbertTokenizerFast"),H_o=o(" (YOSO model)"),U_o=l(),F(Sh.$$.fragment),J_o=l(),Rh=a("div"),F(gL.$$.fragment),Y_o=l(),xie=a("p"),K_o=o("Register a new tokenizer in this mapping."),VVe=l(),Ni=a("h2"),Ph=a("a"),$ie=a("span"),F(hL.$$.fragment),Z_o=l(),kie=a("span"),euo=o("AutoFeatureExtractor"),XVe=l(),Lo=a("div"),F(pL.$$.fragment),ouo=l(),_L=a("p"),ruo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VN=a("a"),tuo=o("AutoFeatureExtractor.from_pretrained()"),auo=o(" class method."),nuo=l(),uL=a("p"),suo=o("This class cannot be instantiated directly using "),Sie=a("code"),luo=o("__init__()"),iuo=o(" (throws an error)."),duo=l(),He=a("div"),F(bL.$$.fragment),cuo=l(),Rie=a("p"),fuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),muo=l(),Pa=a("p"),guo=o("The feature extractor class to instantiate is selected based on the "),Pie=a("code"),huo=o("model_type"),puo=o(` property of the config object
(either passed as an argument or loaded from `),Bie=a("code"),_uo=o("pretrained_model_name_or_path"),uuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iie=a("code"),buo=o("pretrained_model_name_or_path"),vuo=o(":"),Fuo=l(),Y=a("ul"),Bh=a("li"),Nie=a("strong"),Tuo=o("beit"),Muo=o(" \u2014 "),XN=a("a"),Euo=o("BeitFeatureExtractor"),Cuo=o(" (BEiT model)"),wuo=l(),Ih=a("li"),qie=a("strong"),Auo=o("clip"),Luo=o(" \u2014 "),zN=a("a"),yuo=o("CLIPFeatureExtractor"),xuo=o(" (CLIP model)"),$uo=l(),Nh=a("li"),jie=a("strong"),kuo=o("convnext"),Suo=o(" \u2014 "),QN=a("a"),Ruo=o("ConvNextFeatureExtractor"),Puo=o(" (ConvNeXT model)"),Buo=l(),qh=a("li"),Die=a("strong"),Iuo=o("cvt"),Nuo=o(" \u2014 "),WN=a("a"),quo=o("ConvNextFeatureExtractor"),juo=o(" (CvT model)"),Duo=l(),jh=a("li"),Gie=a("strong"),Guo=o("data2vec-audio"),Ouo=o(" \u2014 "),HN=a("a"),Vuo=o("Wav2Vec2FeatureExtractor"),Xuo=o(" (Data2VecAudio model)"),zuo=l(),Dh=a("li"),Oie=a("strong"),Quo=o("data2vec-vision"),Wuo=o(" \u2014 "),UN=a("a"),Huo=o("BeitFeatureExtractor"),Uuo=o(" (Data2VecVision model)"),Juo=l(),Gh=a("li"),Vie=a("strong"),Yuo=o("deit"),Kuo=o(" \u2014 "),JN=a("a"),Zuo=o("DeiTFeatureExtractor"),e1o=o(" (DeiT model)"),o1o=l(),Oh=a("li"),Xie=a("strong"),r1o=o("detr"),t1o=o(" \u2014 "),YN=a("a"),a1o=o("DetrFeatureExtractor"),n1o=o(" (DETR model)"),s1o=l(),Vh=a("li"),zie=a("strong"),l1o=o("dpt"),i1o=o(" \u2014 "),KN=a("a"),d1o=o("DPTFeatureExtractor"),c1o=o(" (DPT model)"),f1o=l(),Xh=a("li"),Qie=a("strong"),m1o=o("flava"),g1o=o(" \u2014 "),ZN=a("a"),h1o=o("FlavaFeatureExtractor"),p1o=o(" (FLAVA model)"),_1o=l(),zh=a("li"),Wie=a("strong"),u1o=o("glpn"),b1o=o(" \u2014 "),eq=a("a"),v1o=o("GLPNFeatureExtractor"),F1o=o(" (GLPN model)"),T1o=l(),Qh=a("li"),Hie=a("strong"),M1o=o("groupvit"),E1o=o(" \u2014 "),oq=a("a"),C1o=o("CLIPFeatureExtractor"),w1o=o(" (GroupViT model)"),A1o=l(),Wh=a("li"),Uie=a("strong"),L1o=o("hubert"),y1o=o(" \u2014 "),rq=a("a"),x1o=o("Wav2Vec2FeatureExtractor"),$1o=o(" (Hubert model)"),k1o=l(),Hh=a("li"),Jie=a("strong"),S1o=o("imagegpt"),R1o=o(" \u2014 "),tq=a("a"),P1o=o("ImageGPTFeatureExtractor"),B1o=o(" (ImageGPT model)"),I1o=l(),Uh=a("li"),Yie=a("strong"),N1o=o("layoutlmv2"),q1o=o(" \u2014 "),aq=a("a"),j1o=o("LayoutLMv2FeatureExtractor"),D1o=o(" (LayoutLMv2 model)"),G1o=l(),Jh=a("li"),Kie=a("strong"),O1o=o("layoutlmv3"),V1o=o(" \u2014 "),nq=a("a"),X1o=o("LayoutLMv3FeatureExtractor"),z1o=o(" (LayoutLMv3 model)"),Q1o=l(),Yh=a("li"),Zie=a("strong"),W1o=o("levit"),H1o=o(" \u2014 "),sq=a("a"),U1o=o("LevitFeatureExtractor"),J1o=o(" (LeViT model)"),Y1o=l(),Kh=a("li"),ede=a("strong"),K1o=o("maskformer"),Z1o=o(" \u2014 "),lq=a("a"),e2o=o("MaskFormerFeatureExtractor"),o2o=o(" (MaskFormer model)"),r2o=l(),Zh=a("li"),ode=a("strong"),t2o=o("mctct"),a2o=o(" \u2014 "),iq=a("a"),n2o=o("MCTCTFeatureExtractor"),s2o=o(" (M-CTC-T model)"),l2o=l(),ep=a("li"),rde=a("strong"),i2o=o("mobilevit"),d2o=o(" \u2014 "),dq=a("a"),c2o=o("MobileViTFeatureExtractor"),f2o=o(" (MobileViT model)"),m2o=l(),op=a("li"),tde=a("strong"),g2o=o("perceiver"),h2o=o(" \u2014 "),cq=a("a"),p2o=o("PerceiverFeatureExtractor"),_2o=o(" (Perceiver model)"),u2o=l(),rp=a("li"),ade=a("strong"),b2o=o("poolformer"),v2o=o(" \u2014 "),fq=a("a"),F2o=o("PoolFormerFeatureExtractor"),T2o=o(" (PoolFormer model)"),M2o=l(),tp=a("li"),nde=a("strong"),E2o=o("regnet"),C2o=o(" \u2014 "),mq=a("a"),w2o=o("ConvNextFeatureExtractor"),A2o=o(" (RegNet model)"),L2o=l(),ap=a("li"),sde=a("strong"),y2o=o("resnet"),x2o=o(" \u2014 "),gq=a("a"),$2o=o("ConvNextFeatureExtractor"),k2o=o(" (ResNet model)"),S2o=l(),np=a("li"),lde=a("strong"),R2o=o("segformer"),P2o=o(" \u2014 "),hq=a("a"),B2o=o("SegformerFeatureExtractor"),I2o=o(" (SegFormer model)"),N2o=l(),sp=a("li"),ide=a("strong"),q2o=o("speech_to_text"),j2o=o(" \u2014 "),pq=a("a"),D2o=o("Speech2TextFeatureExtractor"),G2o=o(" (Speech2Text model)"),O2o=l(),lp=a("li"),dde=a("strong"),V2o=o("swin"),X2o=o(" \u2014 "),_q=a("a"),z2o=o("ViTFeatureExtractor"),Q2o=o(" (Swin Transformer model)"),W2o=l(),ip=a("li"),cde=a("strong"),H2o=o("van"),U2o=o(" \u2014 "),uq=a("a"),J2o=o("ConvNextFeatureExtractor"),Y2o=o(" (VAN model)"),K2o=l(),dp=a("li"),fde=a("strong"),Z2o=o("vilt"),ebo=o(" \u2014 "),bq=a("a"),obo=o("ViltFeatureExtractor"),rbo=o(" (ViLT model)"),tbo=l(),cp=a("li"),mde=a("strong"),abo=o("vit"),nbo=o(" \u2014 "),vq=a("a"),sbo=o("ViTFeatureExtractor"),lbo=o(" (ViT model)"),ibo=l(),fp=a("li"),gde=a("strong"),dbo=o("vit_mae"),cbo=o(" \u2014 "),Fq=a("a"),fbo=o("ViTFeatureExtractor"),mbo=o(" (ViTMAE model)"),gbo=l(),mp=a("li"),hde=a("strong"),hbo=o("wav2vec2"),pbo=o(" \u2014 "),Tq=a("a"),_bo=o("Wav2Vec2FeatureExtractor"),ubo=o(" (Wav2Vec2 model)"),bbo=l(),gp=a("li"),pde=a("strong"),vbo=o("wav2vec2-conformer"),Fbo=o(" \u2014 "),Mq=a("a"),Tbo=o("Wav2Vec2FeatureExtractor"),Mbo=o(" (Wav2Vec2-Conformer model)"),Ebo=l(),hp=a("li"),_de=a("strong"),Cbo=o("yolos"),wbo=o(" \u2014 "),Eq=a("a"),Abo=o("YolosFeatureExtractor"),Lbo=o(" (YOLOS model)"),ybo=l(),F(pp.$$.fragment),xbo=l(),F(_p.$$.fragment),$bo=l(),up=a("div"),F(vL.$$.fragment),kbo=l(),ude=a("p"),Sbo=o("Register a new feature extractor for this class."),zVe=l(),qi=a("h2"),bp=a("a"),bde=a("span"),F(FL.$$.fragment),Rbo=l(),vde=a("span"),Pbo=o("AutoProcessor"),QVe=l(),yo=a("div"),F(TL.$$.fragment),Bbo=l(),ML=a("p"),Ibo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Cq=a("a"),Nbo=o("AutoProcessor.from_pretrained()"),qbo=o(" class method."),jbo=l(),EL=a("p"),Dbo=o("This class cannot be instantiated directly using "),Fde=a("code"),Gbo=o("__init__()"),Obo=o(" (throws an error)."),Vbo=l(),Ue=a("div"),F(CL.$$.fragment),Xbo=l(),Tde=a("p"),zbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Qbo=l(),ji=a("p"),Wbo=o("The processor class to instantiate is selected based on the "),Mde=a("code"),Hbo=o("model_type"),Ubo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),Jbo=o("pretrained_model_name_or_path"),Ybo=o(" if possible):"),Kbo=l(),he=a("ul"),vp=a("li"),Cde=a("strong"),Zbo=o("clip"),evo=o(" \u2014 "),wq=a("a"),ovo=o("CLIPProcessor"),rvo=o(" (CLIP model)"),tvo=l(),Fp=a("li"),wde=a("strong"),avo=o("flava"),nvo=o(" \u2014 "),Ade=a("code"),svo=o("FLAVAProcessor"),lvo=o(" (FLAVA model)"),ivo=l(),Tp=a("li"),Lde=a("strong"),dvo=o("groupvit"),cvo=o(" \u2014 "),Aq=a("a"),fvo=o("CLIPProcessor"),mvo=o(" (GroupViT model)"),gvo=l(),Mp=a("li"),yde=a("strong"),hvo=o("layoutlmv2"),pvo=o(" \u2014 "),Lq=a("a"),_vo=o("LayoutLMv2Processor"),uvo=o(" (LayoutLMv2 model)"),bvo=l(),Ep=a("li"),xde=a("strong"),vvo=o("layoutlmv3"),Fvo=o(" \u2014 "),yq=a("a"),Tvo=o("LayoutLMv3Processor"),Mvo=o(" (LayoutLMv3 model)"),Evo=l(),Cp=a("li"),$de=a("strong"),Cvo=o("layoutxlm"),wvo=o(" \u2014 "),xq=a("a"),Avo=o("LayoutXLMProcessor"),Lvo=o(" (LayoutXLM model)"),yvo=l(),wp=a("li"),kde=a("strong"),xvo=o("sew"),$vo=o(" \u2014 "),$q=a("a"),kvo=o("Wav2Vec2Processor"),Svo=o(" (SEW model)"),Rvo=l(),Ap=a("li"),Sde=a("strong"),Pvo=o("sew-d"),Bvo=o(" \u2014 "),kq=a("a"),Ivo=o("Wav2Vec2Processor"),Nvo=o(" (SEW-D model)"),qvo=l(),Lp=a("li"),Rde=a("strong"),jvo=o("speech_to_text"),Dvo=o(" \u2014 "),Sq=a("a"),Gvo=o("Speech2TextProcessor"),Ovo=o(" (Speech2Text model)"),Vvo=l(),yp=a("li"),Pde=a("strong"),Xvo=o("speech_to_text_2"),zvo=o(" \u2014 "),Rq=a("a"),Qvo=o("Speech2Text2Processor"),Wvo=o(" (Speech2Text2 model)"),Hvo=l(),xp=a("li"),Bde=a("strong"),Uvo=o("trocr"),Jvo=o(" \u2014 "),Pq=a("a"),Yvo=o("TrOCRProcessor"),Kvo=o(" (TrOCR model)"),Zvo=l(),$p=a("li"),Ide=a("strong"),e3o=o("unispeech"),o3o=o(" \u2014 "),Bq=a("a"),r3o=o("Wav2Vec2Processor"),t3o=o(" (UniSpeech model)"),a3o=l(),kp=a("li"),Nde=a("strong"),n3o=o("unispeech-sat"),s3o=o(" \u2014 "),Iq=a("a"),l3o=o("Wav2Vec2Processor"),i3o=o(" (UniSpeechSat model)"),d3o=l(),Sp=a("li"),qde=a("strong"),c3o=o("vilt"),f3o=o(" \u2014 "),Nq=a("a"),m3o=o("ViltProcessor"),g3o=o(" (ViLT model)"),h3o=l(),Rp=a("li"),jde=a("strong"),p3o=o("vision-text-dual-encoder"),_3o=o(" \u2014 "),qq=a("a"),u3o=o("VisionTextDualEncoderProcessor"),b3o=o(" (VisionTextDualEncoder model)"),v3o=l(),Pp=a("li"),Dde=a("strong"),F3o=o("wav2vec2"),T3o=o(" \u2014 "),jq=a("a"),M3o=o("Wav2Vec2Processor"),E3o=o(" (Wav2Vec2 model)"),C3o=l(),Bp=a("li"),Gde=a("strong"),w3o=o("wav2vec2-conformer"),A3o=o(" \u2014 "),Dq=a("a"),L3o=o("Wav2Vec2Processor"),y3o=o(" (Wav2Vec2-Conformer model)"),x3o=l(),Ip=a("li"),Ode=a("strong"),$3o=o("wavlm"),k3o=o(" \u2014 "),Gq=a("a"),S3o=o("Wav2Vec2Processor"),R3o=o(" (WavLM model)"),P3o=l(),F(Np.$$.fragment),B3o=l(),F(qp.$$.fragment),I3o=l(),jp=a("div"),F(wL.$$.fragment),N3o=l(),Vde=a("p"),q3o=o("Register a new processor for this class."),WVe=l(),Di=a("h2"),Dp=a("a"),Xde=a("span"),F(AL.$$.fragment),j3o=l(),zde=a("span"),D3o=o("AutoModel"),HVe=l(),xo=a("div"),F(LL.$$.fragment),G3o=l(),Gi=a("p"),O3o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Oq=a("a"),V3o=o("from_pretrained()"),X3o=o(" class method or the "),Vq=a("a"),z3o=o("from_config()"),Q3o=o(` class
method.`),W3o=l(),yL=a("p"),H3o=o("This class cannot be instantiated directly using "),Qde=a("code"),U3o=o("__init__()"),J3o=o(" (throws an error)."),Y3o=l(),lt=a("div"),F(xL.$$.fragment),K3o=l(),Wde=a("p"),Z3o=o("Instantiates one of the base model classes of the library from a configuration."),eFo=l(),Oi=a("p"),oFo=o(`Note:
Loading a model from its configuration file does `),Hde=a("strong"),rFo=o("not"),tFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=a("a"),aFo=o("from_pretrained()"),nFo=o(" to load the model weights."),sFo=l(),F(Gp.$$.fragment),lFo=l(),Je=a("div"),F($L.$$.fragment),iFo=l(),Ude=a("p"),dFo=o("Instantiate one of the base model classes of the library from a pretrained model."),cFo=l(),Ba=a("p"),fFo=o("The model class to instantiate is selected based on the "),Jde=a("code"),mFo=o("model_type"),gFo=o(` property of the config object (either
passed as an argument or loaded from `),Yde=a("code"),hFo=o("pretrained_model_name_or_path"),pFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=a("code"),_Fo=o("pretrained_model_name_or_path"),uFo=o(":"),bFo=l(),y=a("ul"),Op=a("li"),Zde=a("strong"),vFo=o("albert"),FFo=o(" \u2014 "),zq=a("a"),TFo=o("AlbertModel"),MFo=o(" (ALBERT model)"),EFo=l(),Vp=a("li"),ece=a("strong"),CFo=o("bart"),wFo=o(" \u2014 "),Qq=a("a"),AFo=o("BartModel"),LFo=o(" (BART model)"),yFo=l(),Xp=a("li"),oce=a("strong"),xFo=o("beit"),$Fo=o(" \u2014 "),Wq=a("a"),kFo=o("BeitModel"),SFo=o(" (BEiT model)"),RFo=l(),zp=a("li"),rce=a("strong"),PFo=o("bert"),BFo=o(" \u2014 "),Hq=a("a"),IFo=o("BertModel"),NFo=o(" (BERT model)"),qFo=l(),Qp=a("li"),tce=a("strong"),jFo=o("bert-generation"),DFo=o(" \u2014 "),Uq=a("a"),GFo=o("BertGenerationEncoder"),OFo=o(" (Bert Generation model)"),VFo=l(),Wp=a("li"),ace=a("strong"),XFo=o("big_bird"),zFo=o(" \u2014 "),Jq=a("a"),QFo=o("BigBirdModel"),WFo=o(" (BigBird model)"),HFo=l(),Hp=a("li"),nce=a("strong"),UFo=o("bigbird_pegasus"),JFo=o(" \u2014 "),Yq=a("a"),YFo=o("BigBirdPegasusModel"),KFo=o(" (BigBird-Pegasus model)"),ZFo=l(),Up=a("li"),sce=a("strong"),e6o=o("blenderbot"),o6o=o(" \u2014 "),Kq=a("a"),r6o=o("BlenderbotModel"),t6o=o(" (Blenderbot model)"),a6o=l(),Jp=a("li"),lce=a("strong"),n6o=o("blenderbot-small"),s6o=o(" \u2014 "),Zq=a("a"),l6o=o("BlenderbotSmallModel"),i6o=o(" (BlenderbotSmall model)"),d6o=l(),Yp=a("li"),ice=a("strong"),c6o=o("bloom"),f6o=o(" \u2014 "),ej=a("a"),m6o=o("BloomModel"),g6o=o(" (BLOOM model)"),h6o=l(),Kp=a("li"),dce=a("strong"),p6o=o("camembert"),_6o=o(" \u2014 "),oj=a("a"),u6o=o("CamembertModel"),b6o=o(" (CamemBERT model)"),v6o=l(),Zp=a("li"),cce=a("strong"),F6o=o("canine"),T6o=o(" \u2014 "),rj=a("a"),M6o=o("CanineModel"),E6o=o(" (CANINE model)"),C6o=l(),e_=a("li"),fce=a("strong"),w6o=o("clip"),A6o=o(" \u2014 "),tj=a("a"),L6o=o("CLIPModel"),y6o=o(" (CLIP model)"),x6o=l(),o_=a("li"),mce=a("strong"),$6o=o("codegen"),k6o=o(" \u2014 "),aj=a("a"),S6o=o("CodeGenModel"),R6o=o(" (CodeGen model)"),P6o=l(),r_=a("li"),gce=a("strong"),B6o=o("convbert"),I6o=o(" \u2014 "),nj=a("a"),N6o=o("ConvBertModel"),q6o=o(" (ConvBERT model)"),j6o=l(),t_=a("li"),hce=a("strong"),D6o=o("convnext"),G6o=o(" \u2014 "),sj=a("a"),O6o=o("ConvNextModel"),V6o=o(" (ConvNeXT model)"),X6o=l(),a_=a("li"),pce=a("strong"),z6o=o("ctrl"),Q6o=o(" \u2014 "),lj=a("a"),W6o=o("CTRLModel"),H6o=o(" (CTRL model)"),U6o=l(),n_=a("li"),_ce=a("strong"),J6o=o("cvt"),Y6o=o(" \u2014 "),ij=a("a"),K6o=o("CvtModel"),Z6o=o(" (CvT model)"),eTo=l(),s_=a("li"),uce=a("strong"),oTo=o("data2vec-audio"),rTo=o(" \u2014 "),dj=a("a"),tTo=o("Data2VecAudioModel"),aTo=o(" (Data2VecAudio model)"),nTo=l(),l_=a("li"),bce=a("strong"),sTo=o("data2vec-text"),lTo=o(" \u2014 "),cj=a("a"),iTo=o("Data2VecTextModel"),dTo=o(" (Data2VecText model)"),cTo=l(),i_=a("li"),vce=a("strong"),fTo=o("data2vec-vision"),mTo=o(" \u2014 "),fj=a("a"),gTo=o("Data2VecVisionModel"),hTo=o(" (Data2VecVision model)"),pTo=l(),d_=a("li"),Fce=a("strong"),_To=o("deberta"),uTo=o(" \u2014 "),mj=a("a"),bTo=o("DebertaModel"),vTo=o(" (DeBERTa model)"),FTo=l(),c_=a("li"),Tce=a("strong"),TTo=o("deberta-v2"),MTo=o(" \u2014 "),gj=a("a"),ETo=o("DebertaV2Model"),CTo=o(" (DeBERTa-v2 model)"),wTo=l(),f_=a("li"),Mce=a("strong"),ATo=o("decision_transformer"),LTo=o(" \u2014 "),hj=a("a"),yTo=o("DecisionTransformerModel"),xTo=o(" (Decision Transformer model)"),$To=l(),m_=a("li"),Ece=a("strong"),kTo=o("deit"),STo=o(" \u2014 "),pj=a("a"),RTo=o("DeiTModel"),PTo=o(" (DeiT model)"),BTo=l(),g_=a("li"),Cce=a("strong"),ITo=o("detr"),NTo=o(" \u2014 "),_j=a("a"),qTo=o("DetrModel"),jTo=o(" (DETR model)"),DTo=l(),h_=a("li"),wce=a("strong"),GTo=o("distilbert"),OTo=o(" \u2014 "),uj=a("a"),VTo=o("DistilBertModel"),XTo=o(" (DistilBERT model)"),zTo=l(),p_=a("li"),Ace=a("strong"),QTo=o("dpr"),WTo=o(" \u2014 "),bj=a("a"),HTo=o("DPRQuestionEncoder"),UTo=o(" (DPR model)"),JTo=l(),__=a("li"),Lce=a("strong"),YTo=o("dpt"),KTo=o(" \u2014 "),vj=a("a"),ZTo=o("DPTModel"),e7o=o(" (DPT model)"),o7o=l(),u_=a("li"),yce=a("strong"),r7o=o("electra"),t7o=o(" \u2014 "),Fj=a("a"),a7o=o("ElectraModel"),n7o=o(" (ELECTRA model)"),s7o=l(),b_=a("li"),xce=a("strong"),l7o=o("flaubert"),i7o=o(" \u2014 "),Tj=a("a"),d7o=o("FlaubertModel"),c7o=o(" (FlauBERT model)"),f7o=l(),v_=a("li"),$ce=a("strong"),m7o=o("flava"),g7o=o(" \u2014 "),Mj=a("a"),h7o=o("FlavaModel"),p7o=o(" (FLAVA model)"),_7o=l(),F_=a("li"),kce=a("strong"),u7o=o("fnet"),b7o=o(" \u2014 "),Ej=a("a"),v7o=o("FNetModel"),F7o=o(" (FNet model)"),T7o=l(),T_=a("li"),Sce=a("strong"),M7o=o("fsmt"),E7o=o(" \u2014 "),Cj=a("a"),C7o=o("FSMTModel"),w7o=o(" (FairSeq Machine-Translation model)"),A7o=l(),Qs=a("li"),Rce=a("strong"),L7o=o("funnel"),y7o=o(" \u2014 "),wj=a("a"),x7o=o("FunnelModel"),$7o=o(" or "),Aj=a("a"),k7o=o("FunnelBaseModel"),S7o=o(" (Funnel Transformer model)"),R7o=l(),M_=a("li"),Pce=a("strong"),P7o=o("glpn"),B7o=o(" \u2014 "),Lj=a("a"),I7o=o("GLPNModel"),N7o=o(" (GLPN model)"),q7o=l(),E_=a("li"),Bce=a("strong"),j7o=o("gpt2"),D7o=o(" \u2014 "),yj=a("a"),G7o=o("GPT2Model"),O7o=o(" (OpenAI GPT-2 model)"),V7o=l(),C_=a("li"),Ice=a("strong"),X7o=o("gpt_neo"),z7o=o(" \u2014 "),xj=a("a"),Q7o=o("GPTNeoModel"),W7o=o(" (GPT Neo model)"),H7o=l(),w_=a("li"),Nce=a("strong"),U7o=o("gpt_neox"),J7o=o(" \u2014 "),$j=a("a"),Y7o=o("GPTNeoXModel"),K7o=o(" (GPT NeoX model)"),Z7o=l(),A_=a("li"),qce=a("strong"),e9o=o("gptj"),o9o=o(" \u2014 "),kj=a("a"),r9o=o("GPTJModel"),t9o=o(" (GPT-J model)"),a9o=l(),L_=a("li"),jce=a("strong"),n9o=o("groupvit"),s9o=o(" \u2014 "),Sj=a("a"),l9o=o("GroupViTModel"),i9o=o(" (GroupViT model)"),d9o=l(),y_=a("li"),Dce=a("strong"),c9o=o("hubert"),f9o=o(" \u2014 "),Rj=a("a"),m9o=o("HubertModel"),g9o=o(" (Hubert model)"),h9o=l(),x_=a("li"),Gce=a("strong"),p9o=o("ibert"),_9o=o(" \u2014 "),Pj=a("a"),u9o=o("IBertModel"),b9o=o(" (I-BERT model)"),v9o=l(),$_=a("li"),Oce=a("strong"),F9o=o("imagegpt"),T9o=o(" \u2014 "),Bj=a("a"),M9o=o("ImageGPTModel"),E9o=o(" (ImageGPT model)"),C9o=l(),k_=a("li"),Vce=a("strong"),w9o=o("layoutlm"),A9o=o(" \u2014 "),Ij=a("a"),L9o=o("LayoutLMModel"),y9o=o(" (LayoutLM model)"),x9o=l(),S_=a("li"),Xce=a("strong"),$9o=o("layoutlmv2"),k9o=o(" \u2014 "),Nj=a("a"),S9o=o("LayoutLMv2Model"),R9o=o(" (LayoutLMv2 model)"),P9o=l(),R_=a("li"),zce=a("strong"),B9o=o("layoutlmv3"),I9o=o(" \u2014 "),qj=a("a"),N9o=o("LayoutLMv3Model"),q9o=o(" (LayoutLMv3 model)"),j9o=l(),P_=a("li"),Qce=a("strong"),D9o=o("led"),G9o=o(" \u2014 "),jj=a("a"),O9o=o("LEDModel"),V9o=o(" (LED model)"),X9o=l(),B_=a("li"),Wce=a("strong"),z9o=o("levit"),Q9o=o(" \u2014 "),Dj=a("a"),W9o=o("LevitModel"),H9o=o(" (LeViT model)"),U9o=l(),I_=a("li"),Hce=a("strong"),J9o=o("longformer"),Y9o=o(" \u2014 "),Gj=a("a"),K9o=o("LongformerModel"),Z9o=o(" (Longformer model)"),eMo=l(),N_=a("li"),Uce=a("strong"),oMo=o("longt5"),rMo=o(" \u2014 "),Oj=a("a"),tMo=o("LongT5Model"),aMo=o(" (LongT5 model)"),nMo=l(),q_=a("li"),Jce=a("strong"),sMo=o("luke"),lMo=o(" \u2014 "),Vj=a("a"),iMo=o("LukeModel"),dMo=o(" (LUKE model)"),cMo=l(),j_=a("li"),Yce=a("strong"),fMo=o("lxmert"),mMo=o(" \u2014 "),Xj=a("a"),gMo=o("LxmertModel"),hMo=o(" (LXMERT model)"),pMo=l(),D_=a("li"),Kce=a("strong"),_Mo=o("m2m_100"),uMo=o(" \u2014 "),zj=a("a"),bMo=o("M2M100Model"),vMo=o(" (M2M100 model)"),FMo=l(),G_=a("li"),Zce=a("strong"),TMo=o("marian"),MMo=o(" \u2014 "),Qj=a("a"),EMo=o("MarianModel"),CMo=o(" (Marian model)"),wMo=l(),O_=a("li"),efe=a("strong"),AMo=o("maskformer"),LMo=o(" \u2014 "),Wj=a("a"),yMo=o("MaskFormerModel"),xMo=o(" (MaskFormer model)"),$Mo=l(),V_=a("li"),ofe=a("strong"),kMo=o("mbart"),SMo=o(" \u2014 "),Hj=a("a"),RMo=o("MBartModel"),PMo=o(" (mBART model)"),BMo=l(),X_=a("li"),rfe=a("strong"),IMo=o("mctct"),NMo=o(" \u2014 "),Uj=a("a"),qMo=o("MCTCTModel"),jMo=o(" (M-CTC-T model)"),DMo=l(),z_=a("li"),tfe=a("strong"),GMo=o("megatron-bert"),OMo=o(" \u2014 "),Jj=a("a"),VMo=o("MegatronBertModel"),XMo=o(" (Megatron-BERT model)"),zMo=l(),Q_=a("li"),afe=a("strong"),QMo=o("mobilebert"),WMo=o(" \u2014 "),Yj=a("a"),HMo=o("MobileBertModel"),UMo=o(" (MobileBERT model)"),JMo=l(),W_=a("li"),nfe=a("strong"),YMo=o("mobilevit"),KMo=o(" \u2014 "),Kj=a("a"),ZMo=o("MobileViTModel"),e4o=o(" (MobileViT model)"),o4o=l(),H_=a("li"),sfe=a("strong"),r4o=o("mpnet"),t4o=o(" \u2014 "),Zj=a("a"),a4o=o("MPNetModel"),n4o=o(" (MPNet model)"),s4o=l(),U_=a("li"),lfe=a("strong"),l4o=o("mt5"),i4o=o(" \u2014 "),eD=a("a"),d4o=o("MT5Model"),c4o=o(" (MT5 model)"),f4o=l(),J_=a("li"),ife=a("strong"),m4o=o("mvp"),g4o=o(" \u2014 "),oD=a("a"),h4o=o("MvpModel"),p4o=o(" (MVP model)"),_4o=l(),Y_=a("li"),dfe=a("strong"),u4o=o("nezha"),b4o=o(" \u2014 "),rD=a("a"),v4o=o("NezhaModel"),F4o=o(" (Nezha model)"),T4o=l(),K_=a("li"),cfe=a("strong"),M4o=o("nystromformer"),E4o=o(" \u2014 "),tD=a("a"),C4o=o("NystromformerModel"),w4o=o(" (Nystr\xF6mformer model)"),A4o=l(),Z_=a("li"),ffe=a("strong"),L4o=o("openai-gpt"),y4o=o(" \u2014 "),aD=a("a"),x4o=o("OpenAIGPTModel"),$4o=o(" (OpenAI GPT model)"),k4o=l(),eu=a("li"),mfe=a("strong"),S4o=o("opt"),R4o=o(" \u2014 "),nD=a("a"),P4o=o("OPTModel"),B4o=o(" (OPT model)"),I4o=l(),ou=a("li"),gfe=a("strong"),N4o=o("pegasus"),q4o=o(" \u2014 "),sD=a("a"),j4o=o("PegasusModel"),D4o=o(" (Pegasus model)"),G4o=l(),ru=a("li"),hfe=a("strong"),O4o=o("perceiver"),V4o=o(" \u2014 "),lD=a("a"),X4o=o("PerceiverModel"),z4o=o(" (Perceiver model)"),Q4o=l(),tu=a("li"),pfe=a("strong"),W4o=o("plbart"),H4o=o(" \u2014 "),iD=a("a"),U4o=o("PLBartModel"),J4o=o(" (PLBart model)"),Y4o=l(),au=a("li"),_fe=a("strong"),K4o=o("poolformer"),Z4o=o(" \u2014 "),dD=a("a"),eEo=o("PoolFormerModel"),oEo=o(" (PoolFormer model)"),rEo=l(),nu=a("li"),ufe=a("strong"),tEo=o("prophetnet"),aEo=o(" \u2014 "),cD=a("a"),nEo=o("ProphetNetModel"),sEo=o(" (ProphetNet model)"),lEo=l(),su=a("li"),bfe=a("strong"),iEo=o("qdqbert"),dEo=o(" \u2014 "),fD=a("a"),cEo=o("QDQBertModel"),fEo=o(" (QDQBert model)"),mEo=l(),lu=a("li"),vfe=a("strong"),gEo=o("reformer"),hEo=o(" \u2014 "),mD=a("a"),pEo=o("ReformerModel"),_Eo=o(" (Reformer model)"),uEo=l(),iu=a("li"),Ffe=a("strong"),bEo=o("regnet"),vEo=o(" \u2014 "),gD=a("a"),FEo=o("RegNetModel"),TEo=o(" (RegNet model)"),MEo=l(),du=a("li"),Tfe=a("strong"),EEo=o("rembert"),CEo=o(" \u2014 "),hD=a("a"),wEo=o("RemBertModel"),AEo=o(" (RemBERT model)"),LEo=l(),cu=a("li"),Mfe=a("strong"),yEo=o("resnet"),xEo=o(" \u2014 "),pD=a("a"),$Eo=o("ResNetModel"),kEo=o(" (ResNet model)"),SEo=l(),fu=a("li"),Efe=a("strong"),REo=o("retribert"),PEo=o(" \u2014 "),_D=a("a"),BEo=o("RetriBertModel"),IEo=o(" (RetriBERT model)"),NEo=l(),mu=a("li"),Cfe=a("strong"),qEo=o("roberta"),jEo=o(" \u2014 "),uD=a("a"),DEo=o("RobertaModel"),GEo=o(" (RoBERTa model)"),OEo=l(),gu=a("li"),wfe=a("strong"),VEo=o("roformer"),XEo=o(" \u2014 "),bD=a("a"),zEo=o("RoFormerModel"),QEo=o(" (RoFormer model)"),WEo=l(),hu=a("li"),Afe=a("strong"),HEo=o("segformer"),UEo=o(" \u2014 "),vD=a("a"),JEo=o("SegformerModel"),YEo=o(" (SegFormer model)"),KEo=l(),pu=a("li"),Lfe=a("strong"),ZEo=o("sew"),eCo=o(" \u2014 "),FD=a("a"),oCo=o("SEWModel"),rCo=o(" (SEW model)"),tCo=l(),_u=a("li"),yfe=a("strong"),aCo=o("sew-d"),nCo=o(" \u2014 "),TD=a("a"),sCo=o("SEWDModel"),lCo=o(" (SEW-D model)"),iCo=l(),uu=a("li"),xfe=a("strong"),dCo=o("speech_to_text"),cCo=o(" \u2014 "),MD=a("a"),fCo=o("Speech2TextModel"),mCo=o(" (Speech2Text model)"),gCo=l(),bu=a("li"),$fe=a("strong"),hCo=o("splinter"),pCo=o(" \u2014 "),ED=a("a"),_Co=o("SplinterModel"),uCo=o(" (Splinter model)"),bCo=l(),vu=a("li"),kfe=a("strong"),vCo=o("squeezebert"),FCo=o(" \u2014 "),CD=a("a"),TCo=o("SqueezeBertModel"),MCo=o(" (SqueezeBERT model)"),ECo=l(),Fu=a("li"),Sfe=a("strong"),CCo=o("swin"),wCo=o(" \u2014 "),wD=a("a"),ACo=o("SwinModel"),LCo=o(" (Swin Transformer model)"),yCo=l(),Tu=a("li"),Rfe=a("strong"),xCo=o("t5"),$Co=o(" \u2014 "),AD=a("a"),kCo=o("T5Model"),SCo=o(" (T5 model)"),RCo=l(),Mu=a("li"),Pfe=a("strong"),PCo=o("tapas"),BCo=o(" \u2014 "),LD=a("a"),ICo=o("TapasModel"),NCo=o(" (TAPAS model)"),qCo=l(),Eu=a("li"),Bfe=a("strong"),jCo=o("trajectory_transformer"),DCo=o(" \u2014 "),yD=a("a"),GCo=o("TrajectoryTransformerModel"),OCo=o(" (Trajectory Transformer model)"),VCo=l(),Cu=a("li"),Ife=a("strong"),XCo=o("transfo-xl"),zCo=o(" \u2014 "),xD=a("a"),QCo=o("TransfoXLModel"),WCo=o(" (Transformer-XL model)"),HCo=l(),wu=a("li"),Nfe=a("strong"),UCo=o("unispeech"),JCo=o(" \u2014 "),$D=a("a"),YCo=o("UniSpeechModel"),KCo=o(" (UniSpeech model)"),ZCo=l(),Au=a("li"),qfe=a("strong"),e5o=o("unispeech-sat"),o5o=o(" \u2014 "),kD=a("a"),r5o=o("UniSpeechSatModel"),t5o=o(" (UniSpeechSat model)"),a5o=l(),Lu=a("li"),jfe=a("strong"),n5o=o("van"),s5o=o(" \u2014 "),SD=a("a"),l5o=o("VanModel"),i5o=o(" (VAN model)"),d5o=l(),yu=a("li"),Dfe=a("strong"),c5o=o("vilt"),f5o=o(" \u2014 "),RD=a("a"),m5o=o("ViltModel"),g5o=o(" (ViLT model)"),h5o=l(),xu=a("li"),Gfe=a("strong"),p5o=o("vision-text-dual-encoder"),_5o=o(" \u2014 "),PD=a("a"),u5o=o("VisionTextDualEncoderModel"),b5o=o(" (VisionTextDualEncoder model)"),v5o=l(),$u=a("li"),Ofe=a("strong"),F5o=o("visual_bert"),T5o=o(" \u2014 "),BD=a("a"),M5o=o("VisualBertModel"),E5o=o(" (VisualBERT model)"),C5o=l(),ku=a("li"),Vfe=a("strong"),w5o=o("vit"),A5o=o(" \u2014 "),ID=a("a"),L5o=o("ViTModel"),y5o=o(" (ViT model)"),x5o=l(),Su=a("li"),Xfe=a("strong"),$5o=o("vit_mae"),k5o=o(" \u2014 "),ND=a("a"),S5o=o("ViTMAEModel"),R5o=o(" (ViTMAE model)"),P5o=l(),Ru=a("li"),zfe=a("strong"),B5o=o("wav2vec2"),I5o=o(" \u2014 "),qD=a("a"),N5o=o("Wav2Vec2Model"),q5o=o(" (Wav2Vec2 model)"),j5o=l(),Pu=a("li"),Qfe=a("strong"),D5o=o("wav2vec2-conformer"),G5o=o(" \u2014 "),jD=a("a"),O5o=o("Wav2Vec2ConformerModel"),V5o=o(" (Wav2Vec2-Conformer model)"),X5o=l(),Bu=a("li"),Wfe=a("strong"),z5o=o("wavlm"),Q5o=o(" \u2014 "),DD=a("a"),W5o=o("WavLMModel"),H5o=o(" (WavLM model)"),U5o=l(),Iu=a("li"),Hfe=a("strong"),J5o=o("xglm"),Y5o=o(" \u2014 "),GD=a("a"),K5o=o("XGLMModel"),Z5o=o(" (XGLM model)"),e0o=l(),Nu=a("li"),Ufe=a("strong"),o0o=o("xlm"),r0o=o(" \u2014 "),OD=a("a"),t0o=o("XLMModel"),a0o=o(" (XLM model)"),n0o=l(),qu=a("li"),Jfe=a("strong"),s0o=o("xlm-prophetnet"),l0o=o(" \u2014 "),VD=a("a"),i0o=o("XLMProphetNetModel"),d0o=o(" (XLM-ProphetNet model)"),c0o=l(),ju=a("li"),Yfe=a("strong"),f0o=o("xlm-roberta"),m0o=o(" \u2014 "),XD=a("a"),g0o=o("XLMRobertaModel"),h0o=o(" (XLM-RoBERTa model)"),p0o=l(),Du=a("li"),Kfe=a("strong"),_0o=o("xlm-roberta-xl"),u0o=o(" \u2014 "),zD=a("a"),b0o=o("XLMRobertaXLModel"),v0o=o(" (XLM-RoBERTa-XL model)"),F0o=l(),Gu=a("li"),Zfe=a("strong"),T0o=o("xlnet"),M0o=o(" \u2014 "),QD=a("a"),E0o=o("XLNetModel"),C0o=o(" (XLNet model)"),w0o=l(),Ou=a("li"),eme=a("strong"),A0o=o("yolos"),L0o=o(" \u2014 "),WD=a("a"),y0o=o("YolosModel"),x0o=o(" (YOLOS model)"),$0o=l(),Vu=a("li"),ome=a("strong"),k0o=o("yoso"),S0o=o(" \u2014 "),HD=a("a"),R0o=o("YosoModel"),P0o=o(" (YOSO model)"),B0o=l(),Xu=a("p"),I0o=o("The model is set in evaluation mode by default using "),rme=a("code"),N0o=o("model.eval()"),q0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=a("code"),j0o=o("model.train()"),D0o=l(),F(zu.$$.fragment),UVe=l(),Vi=a("h2"),Qu=a("a"),ame=a("span"),F(kL.$$.fragment),G0o=l(),nme=a("span"),O0o=o("AutoModelForPreTraining"),JVe=l(),$o=a("div"),F(SL.$$.fragment),V0o=l(),Xi=a("p"),X0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UD=a("a"),z0o=o("from_pretrained()"),Q0o=o(" class method or the "),JD=a("a"),W0o=o("from_config()"),H0o=o(` class
method.`),U0o=l(),RL=a("p"),J0o=o("This class cannot be instantiated directly using "),sme=a("code"),Y0o=o("__init__()"),K0o=o(" (throws an error)."),Z0o=l(),it=a("div"),F(PL.$$.fragment),ewo=l(),lme=a("p"),owo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rwo=l(),zi=a("p"),two=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),awo=o("not"),nwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=a("a"),swo=o("from_pretrained()"),lwo=o(" to load the model weights."),iwo=l(),F(Wu.$$.fragment),dwo=l(),Ye=a("div"),F(BL.$$.fragment),cwo=l(),dme=a("p"),fwo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mwo=l(),Ia=a("p"),gwo=o("The model class to instantiate is selected based on the "),cme=a("code"),hwo=o("model_type"),pwo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),_wo=o("pretrained_model_name_or_path"),uwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),bwo=o("pretrained_model_name_or_path"),vwo=o(":"),Fwo=l(),G=a("ul"),Hu=a("li"),gme=a("strong"),Two=o("albert"),Mwo=o(" \u2014 "),KD=a("a"),Ewo=o("AlbertForPreTraining"),Cwo=o(" (ALBERT model)"),wwo=l(),Uu=a("li"),hme=a("strong"),Awo=o("bart"),Lwo=o(" \u2014 "),ZD=a("a"),ywo=o("BartForConditionalGeneration"),xwo=o(" (BART model)"),$wo=l(),Ju=a("li"),pme=a("strong"),kwo=o("bert"),Swo=o(" \u2014 "),eG=a("a"),Rwo=o("BertForPreTraining"),Pwo=o(" (BERT model)"),Bwo=l(),Yu=a("li"),_me=a("strong"),Iwo=o("big_bird"),Nwo=o(" \u2014 "),oG=a("a"),qwo=o("BigBirdForPreTraining"),jwo=o(" (BigBird model)"),Dwo=l(),Ku=a("li"),ume=a("strong"),Gwo=o("bloom"),Owo=o(" \u2014 "),rG=a("a"),Vwo=o("BloomForCausalLM"),Xwo=o(" (BLOOM model)"),zwo=l(),Zu=a("li"),bme=a("strong"),Qwo=o("camembert"),Wwo=o(" \u2014 "),tG=a("a"),Hwo=o("CamembertForMaskedLM"),Uwo=o(" (CamemBERT model)"),Jwo=l(),e1=a("li"),vme=a("strong"),Ywo=o("ctrl"),Kwo=o(" \u2014 "),aG=a("a"),Zwo=o("CTRLLMHeadModel"),eAo=o(" (CTRL model)"),oAo=l(),o1=a("li"),Fme=a("strong"),rAo=o("data2vec-text"),tAo=o(" \u2014 "),nG=a("a"),aAo=o("Data2VecTextForMaskedLM"),nAo=o(" (Data2VecText model)"),sAo=l(),r1=a("li"),Tme=a("strong"),lAo=o("deberta"),iAo=o(" \u2014 "),sG=a("a"),dAo=o("DebertaForMaskedLM"),cAo=o(" (DeBERTa model)"),fAo=l(),t1=a("li"),Mme=a("strong"),mAo=o("deberta-v2"),gAo=o(" \u2014 "),lG=a("a"),hAo=o("DebertaV2ForMaskedLM"),pAo=o(" (DeBERTa-v2 model)"),_Ao=l(),a1=a("li"),Eme=a("strong"),uAo=o("distilbert"),bAo=o(" \u2014 "),iG=a("a"),vAo=o("DistilBertForMaskedLM"),FAo=o(" (DistilBERT model)"),TAo=l(),n1=a("li"),Cme=a("strong"),MAo=o("electra"),EAo=o(" \u2014 "),dG=a("a"),CAo=o("ElectraForPreTraining"),wAo=o(" (ELECTRA model)"),AAo=l(),s1=a("li"),wme=a("strong"),LAo=o("flaubert"),yAo=o(" \u2014 "),cG=a("a"),xAo=o("FlaubertWithLMHeadModel"),$Ao=o(" (FlauBERT model)"),kAo=l(),l1=a("li"),Ame=a("strong"),SAo=o("flava"),RAo=o(" \u2014 "),fG=a("a"),PAo=o("FlavaForPreTraining"),BAo=o(" (FLAVA model)"),IAo=l(),i1=a("li"),Lme=a("strong"),NAo=o("fnet"),qAo=o(" \u2014 "),mG=a("a"),jAo=o("FNetForPreTraining"),DAo=o(" (FNet model)"),GAo=l(),d1=a("li"),yme=a("strong"),OAo=o("fsmt"),VAo=o(" \u2014 "),gG=a("a"),XAo=o("FSMTForConditionalGeneration"),zAo=o(" (FairSeq Machine-Translation model)"),QAo=l(),c1=a("li"),xme=a("strong"),WAo=o("funnel"),HAo=o(" \u2014 "),hG=a("a"),UAo=o("FunnelForPreTraining"),JAo=o(" (Funnel Transformer model)"),YAo=l(),f1=a("li"),$me=a("strong"),KAo=o("gpt2"),ZAo=o(" \u2014 "),pG=a("a"),eLo=o("GPT2LMHeadModel"),oLo=o(" (OpenAI GPT-2 model)"),rLo=l(),m1=a("li"),kme=a("strong"),tLo=o("ibert"),aLo=o(" \u2014 "),_G=a("a"),nLo=o("IBertForMaskedLM"),sLo=o(" (I-BERT model)"),lLo=l(),g1=a("li"),Sme=a("strong"),iLo=o("layoutlm"),dLo=o(" \u2014 "),uG=a("a"),cLo=o("LayoutLMForMaskedLM"),fLo=o(" (LayoutLM model)"),mLo=l(),h1=a("li"),Rme=a("strong"),gLo=o("longformer"),hLo=o(" \u2014 "),bG=a("a"),pLo=o("LongformerForMaskedLM"),_Lo=o(" (Longformer model)"),uLo=l(),p1=a("li"),Pme=a("strong"),bLo=o("lxmert"),vLo=o(" \u2014 "),vG=a("a"),FLo=o("LxmertForPreTraining"),TLo=o(" (LXMERT model)"),MLo=l(),_1=a("li"),Bme=a("strong"),ELo=o("megatron-bert"),CLo=o(" \u2014 "),FG=a("a"),wLo=o("MegatronBertForPreTraining"),ALo=o(" (Megatron-BERT model)"),LLo=l(),u1=a("li"),Ime=a("strong"),yLo=o("mobilebert"),xLo=o(" \u2014 "),TG=a("a"),$Lo=o("MobileBertForPreTraining"),kLo=o(" (MobileBERT model)"),SLo=l(),b1=a("li"),Nme=a("strong"),RLo=o("mpnet"),PLo=o(" \u2014 "),MG=a("a"),BLo=o("MPNetForMaskedLM"),ILo=o(" (MPNet model)"),NLo=l(),v1=a("li"),qme=a("strong"),qLo=o("mvp"),jLo=o(" \u2014 "),EG=a("a"),DLo=o("MvpForConditionalGeneration"),GLo=o(" (MVP model)"),OLo=l(),F1=a("li"),jme=a("strong"),VLo=o("nezha"),XLo=o(" \u2014 "),CG=a("a"),zLo=o("NezhaForPreTraining"),QLo=o(" (Nezha model)"),WLo=l(),T1=a("li"),Dme=a("strong"),HLo=o("openai-gpt"),ULo=o(" \u2014 "),wG=a("a"),JLo=o("OpenAIGPTLMHeadModel"),YLo=o(" (OpenAI GPT model)"),KLo=l(),M1=a("li"),Gme=a("strong"),ZLo=o("retribert"),eyo=o(" \u2014 "),AG=a("a"),oyo=o("RetriBertModel"),ryo=o(" (RetriBERT model)"),tyo=l(),E1=a("li"),Ome=a("strong"),ayo=o("roberta"),nyo=o(" \u2014 "),LG=a("a"),syo=o("RobertaForMaskedLM"),lyo=o(" (RoBERTa model)"),iyo=l(),C1=a("li"),Vme=a("strong"),dyo=o("splinter"),cyo=o(" \u2014 "),yG=a("a"),fyo=o("SplinterForPreTraining"),myo=o(" (Splinter model)"),gyo=l(),w1=a("li"),Xme=a("strong"),hyo=o("squeezebert"),pyo=o(" \u2014 "),xG=a("a"),_yo=o("SqueezeBertForMaskedLM"),uyo=o(" (SqueezeBERT model)"),byo=l(),A1=a("li"),zme=a("strong"),vyo=o("t5"),Fyo=o(" \u2014 "),$G=a("a"),Tyo=o("T5ForConditionalGeneration"),Myo=o(" (T5 model)"),Eyo=l(),L1=a("li"),Qme=a("strong"),Cyo=o("tapas"),wyo=o(" \u2014 "),kG=a("a"),Ayo=o("TapasForMaskedLM"),Lyo=o(" (TAPAS model)"),yyo=l(),y1=a("li"),Wme=a("strong"),xyo=o("transfo-xl"),$yo=o(" \u2014 "),SG=a("a"),kyo=o("TransfoXLLMHeadModel"),Syo=o(" (Transformer-XL model)"),Ryo=l(),x1=a("li"),Hme=a("strong"),Pyo=o("unispeech"),Byo=o(" \u2014 "),RG=a("a"),Iyo=o("UniSpeechForPreTraining"),Nyo=o(" (UniSpeech model)"),qyo=l(),$1=a("li"),Ume=a("strong"),jyo=o("unispeech-sat"),Dyo=o(" \u2014 "),PG=a("a"),Gyo=o("UniSpeechSatForPreTraining"),Oyo=o(" (UniSpeechSat model)"),Vyo=l(),k1=a("li"),Jme=a("strong"),Xyo=o("visual_bert"),zyo=o(" \u2014 "),BG=a("a"),Qyo=o("VisualBertForPreTraining"),Wyo=o(" (VisualBERT model)"),Hyo=l(),S1=a("li"),Yme=a("strong"),Uyo=o("vit_mae"),Jyo=o(" \u2014 "),IG=a("a"),Yyo=o("ViTMAEForPreTraining"),Kyo=o(" (ViTMAE model)"),Zyo=l(),R1=a("li"),Kme=a("strong"),e8o=o("wav2vec2"),o8o=o(" \u2014 "),NG=a("a"),r8o=o("Wav2Vec2ForPreTraining"),t8o=o(" (Wav2Vec2 model)"),a8o=l(),P1=a("li"),Zme=a("strong"),n8o=o("wav2vec2-conformer"),s8o=o(" \u2014 "),qG=a("a"),l8o=o("Wav2Vec2ConformerForPreTraining"),i8o=o(" (Wav2Vec2-Conformer model)"),d8o=l(),B1=a("li"),ege=a("strong"),c8o=o("xlm"),f8o=o(" \u2014 "),jG=a("a"),m8o=o("XLMWithLMHeadModel"),g8o=o(" (XLM model)"),h8o=l(),I1=a("li"),oge=a("strong"),p8o=o("xlm-roberta"),_8o=o(" \u2014 "),DG=a("a"),u8o=o("XLMRobertaForMaskedLM"),b8o=o(" (XLM-RoBERTa model)"),v8o=l(),N1=a("li"),rge=a("strong"),F8o=o("xlm-roberta-xl"),T8o=o(" \u2014 "),GG=a("a"),M8o=o("XLMRobertaXLForMaskedLM"),E8o=o(" (XLM-RoBERTa-XL model)"),C8o=l(),q1=a("li"),tge=a("strong"),w8o=o("xlnet"),A8o=o(" \u2014 "),OG=a("a"),L8o=o("XLNetLMHeadModel"),y8o=o(" (XLNet model)"),x8o=l(),j1=a("p"),$8o=o("The model is set in evaluation mode by default using "),age=a("code"),k8o=o("model.eval()"),S8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),R8o=o("model.train()"),P8o=l(),F(D1.$$.fragment),YVe=l(),Qi=a("h2"),G1=a("a"),sge=a("span"),F(IL.$$.fragment),B8o=l(),lge=a("span"),I8o=o("AutoModelForCausalLM"),KVe=l(),ko=a("div"),F(NL.$$.fragment),N8o=l(),Wi=a("p"),q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VG=a("a"),j8o=o("from_pretrained()"),D8o=o(" class method or the "),XG=a("a"),G8o=o("from_config()"),O8o=o(` class
method.`),V8o=l(),qL=a("p"),X8o=o("This class cannot be instantiated directly using "),ige=a("code"),z8o=o("__init__()"),Q8o=o(" (throws an error)."),W8o=l(),dt=a("div"),F(jL.$$.fragment),H8o=l(),dge=a("p"),U8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J8o=l(),Hi=a("p"),Y8o=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),K8o=o("not"),Z8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),exo=o("from_pretrained()"),oxo=o(" to load the model weights."),rxo=l(),F(O1.$$.fragment),txo=l(),Ke=a("div"),F(DL.$$.fragment),axo=l(),fge=a("p"),nxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sxo=l(),Na=a("p"),lxo=o("The model class to instantiate is selected based on the "),mge=a("code"),ixo=o("model_type"),dxo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),cxo=o("pretrained_model_name_or_path"),fxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),mxo=o("pretrained_model_name_or_path"),gxo=o(":"),hxo=l(),z=a("ul"),V1=a("li"),pge=a("strong"),pxo=o("bart"),_xo=o(" \u2014 "),QG=a("a"),uxo=o("BartForCausalLM"),bxo=o(" (BART model)"),vxo=l(),X1=a("li"),_ge=a("strong"),Fxo=o("bert"),Txo=o(" \u2014 "),WG=a("a"),Mxo=o("BertLMHeadModel"),Exo=o(" (BERT model)"),Cxo=l(),z1=a("li"),uge=a("strong"),wxo=o("bert-generation"),Axo=o(" \u2014 "),HG=a("a"),Lxo=o("BertGenerationDecoder"),yxo=o(" (Bert Generation model)"),xxo=l(),Q1=a("li"),bge=a("strong"),$xo=o("big_bird"),kxo=o(" \u2014 "),UG=a("a"),Sxo=o("BigBirdForCausalLM"),Rxo=o(" (BigBird model)"),Pxo=l(),W1=a("li"),vge=a("strong"),Bxo=o("bigbird_pegasus"),Ixo=o(" \u2014 "),JG=a("a"),Nxo=o("BigBirdPegasusForCausalLM"),qxo=o(" (BigBird-Pegasus model)"),jxo=l(),H1=a("li"),Fge=a("strong"),Dxo=o("blenderbot"),Gxo=o(" \u2014 "),YG=a("a"),Oxo=o("BlenderbotForCausalLM"),Vxo=o(" (Blenderbot model)"),Xxo=l(),U1=a("li"),Tge=a("strong"),zxo=o("blenderbot-small"),Qxo=o(" \u2014 "),KG=a("a"),Wxo=o("BlenderbotSmallForCausalLM"),Hxo=o(" (BlenderbotSmall model)"),Uxo=l(),J1=a("li"),Mge=a("strong"),Jxo=o("bloom"),Yxo=o(" \u2014 "),ZG=a("a"),Kxo=o("BloomForCausalLM"),Zxo=o(" (BLOOM model)"),e$o=l(),Y1=a("li"),Ege=a("strong"),o$o=o("camembert"),r$o=o(" \u2014 "),eO=a("a"),t$o=o("CamembertForCausalLM"),a$o=o(" (CamemBERT model)"),n$o=l(),K1=a("li"),Cge=a("strong"),s$o=o("codegen"),l$o=o(" \u2014 "),oO=a("a"),i$o=o("CodeGenForCausalLM"),d$o=o(" (CodeGen model)"),c$o=l(),Z1=a("li"),wge=a("strong"),f$o=o("ctrl"),m$o=o(" \u2014 "),rO=a("a"),g$o=o("CTRLLMHeadModel"),h$o=o(" (CTRL model)"),p$o=l(),e2=a("li"),Age=a("strong"),_$o=o("data2vec-text"),u$o=o(" \u2014 "),tO=a("a"),b$o=o("Data2VecTextForCausalLM"),v$o=o(" (Data2VecText model)"),F$o=l(),o2=a("li"),Lge=a("strong"),T$o=o("electra"),M$o=o(" \u2014 "),aO=a("a"),E$o=o("ElectraForCausalLM"),C$o=o(" (ELECTRA model)"),w$o=l(),r2=a("li"),yge=a("strong"),A$o=o("gpt2"),L$o=o(" \u2014 "),nO=a("a"),y$o=o("GPT2LMHeadModel"),x$o=o(" (OpenAI GPT-2 model)"),$$o=l(),t2=a("li"),xge=a("strong"),k$o=o("gpt_neo"),S$o=o(" \u2014 "),sO=a("a"),R$o=o("GPTNeoForCausalLM"),P$o=o(" (GPT Neo model)"),B$o=l(),a2=a("li"),$ge=a("strong"),I$o=o("gpt_neox"),N$o=o(" \u2014 "),lO=a("a"),q$o=o("GPTNeoXForCausalLM"),j$o=o(" (GPT NeoX model)"),D$o=l(),n2=a("li"),kge=a("strong"),G$o=o("gptj"),O$o=o(" \u2014 "),iO=a("a"),V$o=o("GPTJForCausalLM"),X$o=o(" (GPT-J model)"),z$o=l(),s2=a("li"),Sge=a("strong"),Q$o=o("marian"),W$o=o(" \u2014 "),dO=a("a"),H$o=o("MarianForCausalLM"),U$o=o(" (Marian model)"),J$o=l(),l2=a("li"),Rge=a("strong"),Y$o=o("mbart"),K$o=o(" \u2014 "),cO=a("a"),Z$o=o("MBartForCausalLM"),eko=o(" (mBART model)"),oko=l(),i2=a("li"),Pge=a("strong"),rko=o("megatron-bert"),tko=o(" \u2014 "),fO=a("a"),ako=o("MegatronBertForCausalLM"),nko=o(" (Megatron-BERT model)"),sko=l(),d2=a("li"),Bge=a("strong"),lko=o("mvp"),iko=o(" \u2014 "),mO=a("a"),dko=o("MvpForCausalLM"),cko=o(" (MVP model)"),fko=l(),c2=a("li"),Ige=a("strong"),mko=o("openai-gpt"),gko=o(" \u2014 "),gO=a("a"),hko=o("OpenAIGPTLMHeadModel"),pko=o(" (OpenAI GPT model)"),_ko=l(),f2=a("li"),Nge=a("strong"),uko=o("opt"),bko=o(" \u2014 "),hO=a("a"),vko=o("OPTForCausalLM"),Fko=o(" (OPT model)"),Tko=l(),m2=a("li"),qge=a("strong"),Mko=o("pegasus"),Eko=o(" \u2014 "),pO=a("a"),Cko=o("PegasusForCausalLM"),wko=o(" (Pegasus model)"),Ako=l(),g2=a("li"),jge=a("strong"),Lko=o("plbart"),yko=o(" \u2014 "),_O=a("a"),xko=o("PLBartForCausalLM"),$ko=o(" (PLBart model)"),kko=l(),h2=a("li"),Dge=a("strong"),Sko=o("prophetnet"),Rko=o(" \u2014 "),uO=a("a"),Pko=o("ProphetNetForCausalLM"),Bko=o(" (ProphetNet model)"),Iko=l(),p2=a("li"),Gge=a("strong"),Nko=o("qdqbert"),qko=o(" \u2014 "),bO=a("a"),jko=o("QDQBertLMHeadModel"),Dko=o(" (QDQBert model)"),Gko=l(),_2=a("li"),Oge=a("strong"),Oko=o("reformer"),Vko=o(" \u2014 "),vO=a("a"),Xko=o("ReformerModelWithLMHead"),zko=o(" (Reformer model)"),Qko=l(),u2=a("li"),Vge=a("strong"),Wko=o("rembert"),Hko=o(" \u2014 "),FO=a("a"),Uko=o("RemBertForCausalLM"),Jko=o(" (RemBERT model)"),Yko=l(),b2=a("li"),Xge=a("strong"),Kko=o("roberta"),Zko=o(" \u2014 "),TO=a("a"),eSo=o("RobertaForCausalLM"),oSo=o(" (RoBERTa model)"),rSo=l(),v2=a("li"),zge=a("strong"),tSo=o("roformer"),aSo=o(" \u2014 "),MO=a("a"),nSo=o("RoFormerForCausalLM"),sSo=o(" (RoFormer model)"),lSo=l(),F2=a("li"),Qge=a("strong"),iSo=o("speech_to_text_2"),dSo=o(" \u2014 "),EO=a("a"),cSo=o("Speech2Text2ForCausalLM"),fSo=o(" (Speech2Text2 model)"),mSo=l(),T2=a("li"),Wge=a("strong"),gSo=o("transfo-xl"),hSo=o(" \u2014 "),CO=a("a"),pSo=o("TransfoXLLMHeadModel"),_So=o(" (Transformer-XL model)"),uSo=l(),M2=a("li"),Hge=a("strong"),bSo=o("trocr"),vSo=o(" \u2014 "),wO=a("a"),FSo=o("TrOCRForCausalLM"),TSo=o(" (TrOCR model)"),MSo=l(),E2=a("li"),Uge=a("strong"),ESo=o("xglm"),CSo=o(" \u2014 "),AO=a("a"),wSo=o("XGLMForCausalLM"),ASo=o(" (XGLM model)"),LSo=l(),C2=a("li"),Jge=a("strong"),ySo=o("xlm"),xSo=o(" \u2014 "),LO=a("a"),$So=o("XLMWithLMHeadModel"),kSo=o(" (XLM model)"),SSo=l(),w2=a("li"),Yge=a("strong"),RSo=o("xlm-prophetnet"),PSo=o(" \u2014 "),yO=a("a"),BSo=o("XLMProphetNetForCausalLM"),ISo=o(" (XLM-ProphetNet model)"),NSo=l(),A2=a("li"),Kge=a("strong"),qSo=o("xlm-roberta"),jSo=o(" \u2014 "),xO=a("a"),DSo=o("XLMRobertaForCausalLM"),GSo=o(" (XLM-RoBERTa model)"),OSo=l(),L2=a("li"),Zge=a("strong"),VSo=o("xlm-roberta-xl"),XSo=o(" \u2014 "),$O=a("a"),zSo=o("XLMRobertaXLForCausalLM"),QSo=o(" (XLM-RoBERTa-XL model)"),WSo=l(),y2=a("li"),ehe=a("strong"),HSo=o("xlnet"),USo=o(" \u2014 "),kO=a("a"),JSo=o("XLNetLMHeadModel"),YSo=o(" (XLNet model)"),KSo=l(),x2=a("p"),ZSo=o("The model is set in evaluation mode by default using "),ohe=a("code"),eRo=o("model.eval()"),oRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=a("code"),rRo=o("model.train()"),tRo=l(),F($2.$$.fragment),ZVe=l(),Ui=a("h2"),k2=a("a"),the=a("span"),F(GL.$$.fragment),aRo=l(),ahe=a("span"),nRo=o("AutoModelForMaskedLM"),eXe=l(),So=a("div"),F(OL.$$.fragment),sRo=l(),Ji=a("p"),lRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SO=a("a"),iRo=o("from_pretrained()"),dRo=o(" class method or the "),RO=a("a"),cRo=o("from_config()"),fRo=o(` class
method.`),mRo=l(),VL=a("p"),gRo=o("This class cannot be instantiated directly using "),nhe=a("code"),hRo=o("__init__()"),pRo=o(" (throws an error)."),_Ro=l(),ct=a("div"),F(XL.$$.fragment),uRo=l(),she=a("p"),bRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vRo=l(),Yi=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),TRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),ERo=o("from_pretrained()"),CRo=o(" to load the model weights."),wRo=l(),F(S2.$$.fragment),ARo=l(),Ze=a("div"),F(zL.$$.fragment),LRo=l(),ihe=a("p"),yRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xRo=l(),qa=a("p"),$Ro=o("The model class to instantiate is selected based on the "),dhe=a("code"),kRo=o("model_type"),SRo=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),RRo=o("pretrained_model_name_or_path"),PRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),BRo=o("pretrained_model_name_or_path"),IRo=o(":"),NRo=l(),W=a("ul"),R2=a("li"),mhe=a("strong"),qRo=o("albert"),jRo=o(" \u2014 "),BO=a("a"),DRo=o("AlbertForMaskedLM"),GRo=o(" (ALBERT model)"),ORo=l(),P2=a("li"),ghe=a("strong"),VRo=o("bart"),XRo=o(" \u2014 "),IO=a("a"),zRo=o("BartForConditionalGeneration"),QRo=o(" (BART model)"),WRo=l(),B2=a("li"),hhe=a("strong"),HRo=o("bert"),URo=o(" \u2014 "),NO=a("a"),JRo=o("BertForMaskedLM"),YRo=o(" (BERT model)"),KRo=l(),I2=a("li"),phe=a("strong"),ZRo=o("big_bird"),ePo=o(" \u2014 "),qO=a("a"),oPo=o("BigBirdForMaskedLM"),rPo=o(" (BigBird model)"),tPo=l(),N2=a("li"),_he=a("strong"),aPo=o("camembert"),nPo=o(" \u2014 "),jO=a("a"),sPo=o("CamembertForMaskedLM"),lPo=o(" (CamemBERT model)"),iPo=l(),q2=a("li"),uhe=a("strong"),dPo=o("convbert"),cPo=o(" \u2014 "),DO=a("a"),fPo=o("ConvBertForMaskedLM"),mPo=o(" (ConvBERT model)"),gPo=l(),j2=a("li"),bhe=a("strong"),hPo=o("data2vec-text"),pPo=o(" \u2014 "),GO=a("a"),_Po=o("Data2VecTextForMaskedLM"),uPo=o(" (Data2VecText model)"),bPo=l(),D2=a("li"),vhe=a("strong"),vPo=o("deberta"),FPo=o(" \u2014 "),OO=a("a"),TPo=o("DebertaForMaskedLM"),MPo=o(" (DeBERTa model)"),EPo=l(),G2=a("li"),Fhe=a("strong"),CPo=o("deberta-v2"),wPo=o(" \u2014 "),VO=a("a"),APo=o("DebertaV2ForMaskedLM"),LPo=o(" (DeBERTa-v2 model)"),yPo=l(),O2=a("li"),The=a("strong"),xPo=o("distilbert"),$Po=o(" \u2014 "),XO=a("a"),kPo=o("DistilBertForMaskedLM"),SPo=o(" (DistilBERT model)"),RPo=l(),V2=a("li"),Mhe=a("strong"),PPo=o("electra"),BPo=o(" \u2014 "),zO=a("a"),IPo=o("ElectraForMaskedLM"),NPo=o(" (ELECTRA model)"),qPo=l(),X2=a("li"),Ehe=a("strong"),jPo=o("flaubert"),DPo=o(" \u2014 "),QO=a("a"),GPo=o("FlaubertWithLMHeadModel"),OPo=o(" (FlauBERT model)"),VPo=l(),z2=a("li"),Che=a("strong"),XPo=o("fnet"),zPo=o(" \u2014 "),WO=a("a"),QPo=o("FNetForMaskedLM"),WPo=o(" (FNet model)"),HPo=l(),Q2=a("li"),whe=a("strong"),UPo=o("funnel"),JPo=o(" \u2014 "),HO=a("a"),YPo=o("FunnelForMaskedLM"),KPo=o(" (Funnel Transformer model)"),ZPo=l(),W2=a("li"),Ahe=a("strong"),eBo=o("ibert"),oBo=o(" \u2014 "),UO=a("a"),rBo=o("IBertForMaskedLM"),tBo=o(" (I-BERT model)"),aBo=l(),H2=a("li"),Lhe=a("strong"),nBo=o("layoutlm"),sBo=o(" \u2014 "),JO=a("a"),lBo=o("LayoutLMForMaskedLM"),iBo=o(" (LayoutLM model)"),dBo=l(),U2=a("li"),yhe=a("strong"),cBo=o("longformer"),fBo=o(" \u2014 "),YO=a("a"),mBo=o("LongformerForMaskedLM"),gBo=o(" (Longformer model)"),hBo=l(),J2=a("li"),xhe=a("strong"),pBo=o("luke"),_Bo=o(" \u2014 "),KO=a("a"),uBo=o("LukeForMaskedLM"),bBo=o(" (LUKE model)"),vBo=l(),Y2=a("li"),$he=a("strong"),FBo=o("mbart"),TBo=o(" \u2014 "),ZO=a("a"),MBo=o("MBartForConditionalGeneration"),EBo=o(" (mBART model)"),CBo=l(),K2=a("li"),khe=a("strong"),wBo=o("megatron-bert"),ABo=o(" \u2014 "),eV=a("a"),LBo=o("MegatronBertForMaskedLM"),yBo=o(" (Megatron-BERT model)"),xBo=l(),Z2=a("li"),She=a("strong"),$Bo=o("mobilebert"),kBo=o(" \u2014 "),oV=a("a"),SBo=o("MobileBertForMaskedLM"),RBo=o(" (MobileBERT model)"),PBo=l(),eb=a("li"),Rhe=a("strong"),BBo=o("mpnet"),IBo=o(" \u2014 "),rV=a("a"),NBo=o("MPNetForMaskedLM"),qBo=o(" (MPNet model)"),jBo=l(),ob=a("li"),Phe=a("strong"),DBo=o("mvp"),GBo=o(" \u2014 "),tV=a("a"),OBo=o("MvpForConditionalGeneration"),VBo=o(" (MVP model)"),XBo=l(),rb=a("li"),Bhe=a("strong"),zBo=o("nezha"),QBo=o(" \u2014 "),aV=a("a"),WBo=o("NezhaForMaskedLM"),HBo=o(" (Nezha model)"),UBo=l(),tb=a("li"),Ihe=a("strong"),JBo=o("nystromformer"),YBo=o(" \u2014 "),nV=a("a"),KBo=o("NystromformerForMaskedLM"),ZBo=o(" (Nystr\xF6mformer model)"),eIo=l(),ab=a("li"),Nhe=a("strong"),oIo=o("perceiver"),rIo=o(" \u2014 "),sV=a("a"),tIo=o("PerceiverForMaskedLM"),aIo=o(" (Perceiver model)"),nIo=l(),nb=a("li"),qhe=a("strong"),sIo=o("qdqbert"),lIo=o(" \u2014 "),lV=a("a"),iIo=o("QDQBertForMaskedLM"),dIo=o(" (QDQBert model)"),cIo=l(),sb=a("li"),jhe=a("strong"),fIo=o("reformer"),mIo=o(" \u2014 "),iV=a("a"),gIo=o("ReformerForMaskedLM"),hIo=o(" (Reformer model)"),pIo=l(),lb=a("li"),Dhe=a("strong"),_Io=o("rembert"),uIo=o(" \u2014 "),dV=a("a"),bIo=o("RemBertForMaskedLM"),vIo=o(" (RemBERT model)"),FIo=l(),ib=a("li"),Ghe=a("strong"),TIo=o("roberta"),MIo=o(" \u2014 "),cV=a("a"),EIo=o("RobertaForMaskedLM"),CIo=o(" (RoBERTa model)"),wIo=l(),db=a("li"),Ohe=a("strong"),AIo=o("roformer"),LIo=o(" \u2014 "),fV=a("a"),yIo=o("RoFormerForMaskedLM"),xIo=o(" (RoFormer model)"),$Io=l(),cb=a("li"),Vhe=a("strong"),kIo=o("squeezebert"),SIo=o(" \u2014 "),mV=a("a"),RIo=o("SqueezeBertForMaskedLM"),PIo=o(" (SqueezeBERT model)"),BIo=l(),fb=a("li"),Xhe=a("strong"),IIo=o("tapas"),NIo=o(" \u2014 "),gV=a("a"),qIo=o("TapasForMaskedLM"),jIo=o(" (TAPAS model)"),DIo=l(),mb=a("li"),zhe=a("strong"),GIo=o("wav2vec2"),OIo=o(" \u2014 "),Qhe=a("code"),VIo=o("Wav2Vec2ForMaskedLM"),XIo=o(" (Wav2Vec2 model)"),zIo=l(),gb=a("li"),Whe=a("strong"),QIo=o("xlm"),WIo=o(" \u2014 "),hV=a("a"),HIo=o("XLMWithLMHeadModel"),UIo=o(" (XLM model)"),JIo=l(),hb=a("li"),Hhe=a("strong"),YIo=o("xlm-roberta"),KIo=o(" \u2014 "),pV=a("a"),ZIo=o("XLMRobertaForMaskedLM"),eNo=o(" (XLM-RoBERTa model)"),oNo=l(),pb=a("li"),Uhe=a("strong"),rNo=o("xlm-roberta-xl"),tNo=o(" \u2014 "),_V=a("a"),aNo=o("XLMRobertaXLForMaskedLM"),nNo=o(" (XLM-RoBERTa-XL model)"),sNo=l(),_b=a("li"),Jhe=a("strong"),lNo=o("yoso"),iNo=o(" \u2014 "),uV=a("a"),dNo=o("YosoForMaskedLM"),cNo=o(" (YOSO model)"),fNo=l(),ub=a("p"),mNo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),gNo=o("model.eval()"),hNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),pNo=o("model.train()"),_No=l(),F(bb.$$.fragment),oXe=l(),Ki=a("h2"),vb=a("a"),Zhe=a("span"),F(QL.$$.fragment),uNo=l(),epe=a("span"),bNo=o("AutoModelForSeq2SeqLM"),rXe=l(),Ro=a("div"),F(WL.$$.fragment),vNo=l(),Zi=a("p"),FNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bV=a("a"),TNo=o("from_pretrained()"),MNo=o(" class method or the "),vV=a("a"),ENo=o("from_config()"),CNo=o(` class
method.`),wNo=l(),HL=a("p"),ANo=o("This class cannot be instantiated directly using "),ope=a("code"),LNo=o("__init__()"),yNo=o(" (throws an error)."),xNo=l(),ft=a("div"),F(UL.$$.fragment),$No=l(),rpe=a("p"),kNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SNo=l(),ed=a("p"),RNo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),PNo=o("not"),BNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),INo=o("from_pretrained()"),NNo=o(" to load the model weights."),qNo=l(),F(Fb.$$.fragment),jNo=l(),eo=a("div"),F(JL.$$.fragment),DNo=l(),ape=a("p"),GNo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ONo=l(),ja=a("p"),VNo=o("The model class to instantiate is selected based on the "),npe=a("code"),XNo=o("model_type"),zNo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),QNo=o("pretrained_model_name_or_path"),WNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),HNo=o("pretrained_model_name_or_path"),UNo=o(":"),JNo=l(),pe=a("ul"),Tb=a("li"),ipe=a("strong"),YNo=o("bart"),KNo=o(" \u2014 "),TV=a("a"),ZNo=o("BartForConditionalGeneration"),eqo=o(" (BART model)"),oqo=l(),Mb=a("li"),dpe=a("strong"),rqo=o("bigbird_pegasus"),tqo=o(" \u2014 "),MV=a("a"),aqo=o("BigBirdPegasusForConditionalGeneration"),nqo=o(" (BigBird-Pegasus model)"),sqo=l(),Eb=a("li"),cpe=a("strong"),lqo=o("blenderbot"),iqo=o(" \u2014 "),EV=a("a"),dqo=o("BlenderbotForConditionalGeneration"),cqo=o(" (Blenderbot model)"),fqo=l(),Cb=a("li"),fpe=a("strong"),mqo=o("blenderbot-small"),gqo=o(" \u2014 "),CV=a("a"),hqo=o("BlenderbotSmallForConditionalGeneration"),pqo=o(" (BlenderbotSmall model)"),_qo=l(),wb=a("li"),mpe=a("strong"),uqo=o("encoder-decoder"),bqo=o(" \u2014 "),wV=a("a"),vqo=o("EncoderDecoderModel"),Fqo=o(" (Encoder decoder model)"),Tqo=l(),Ab=a("li"),gpe=a("strong"),Mqo=o("fsmt"),Eqo=o(" \u2014 "),AV=a("a"),Cqo=o("FSMTForConditionalGeneration"),wqo=o(" (FairSeq Machine-Translation model)"),Aqo=l(),Lb=a("li"),hpe=a("strong"),Lqo=o("led"),yqo=o(" \u2014 "),LV=a("a"),xqo=o("LEDForConditionalGeneration"),$qo=o(" (LED model)"),kqo=l(),yb=a("li"),ppe=a("strong"),Sqo=o("longt5"),Rqo=o(" \u2014 "),yV=a("a"),Pqo=o("LongT5ForConditionalGeneration"),Bqo=o(" (LongT5 model)"),Iqo=l(),xb=a("li"),_pe=a("strong"),Nqo=o("m2m_100"),qqo=o(" \u2014 "),xV=a("a"),jqo=o("M2M100ForConditionalGeneration"),Dqo=o(" (M2M100 model)"),Gqo=l(),$b=a("li"),upe=a("strong"),Oqo=o("marian"),Vqo=o(" \u2014 "),$V=a("a"),Xqo=o("MarianMTModel"),zqo=o(" (Marian model)"),Qqo=l(),kb=a("li"),bpe=a("strong"),Wqo=o("mbart"),Hqo=o(" \u2014 "),kV=a("a"),Uqo=o("MBartForConditionalGeneration"),Jqo=o(" (mBART model)"),Yqo=l(),Sb=a("li"),vpe=a("strong"),Kqo=o("mt5"),Zqo=o(" \u2014 "),SV=a("a"),ejo=o("MT5ForConditionalGeneration"),ojo=o(" (MT5 model)"),rjo=l(),Rb=a("li"),Fpe=a("strong"),tjo=o("mvp"),ajo=o(" \u2014 "),RV=a("a"),njo=o("MvpForConditionalGeneration"),sjo=o(" (MVP model)"),ljo=l(),Pb=a("li"),Tpe=a("strong"),ijo=o("pegasus"),djo=o(" \u2014 "),PV=a("a"),cjo=o("PegasusForConditionalGeneration"),fjo=o(" (Pegasus model)"),mjo=l(),Bb=a("li"),Mpe=a("strong"),gjo=o("plbart"),hjo=o(" \u2014 "),BV=a("a"),pjo=o("PLBartForConditionalGeneration"),_jo=o(" (PLBart model)"),ujo=l(),Ib=a("li"),Epe=a("strong"),bjo=o("prophetnet"),vjo=o(" \u2014 "),IV=a("a"),Fjo=o("ProphetNetForConditionalGeneration"),Tjo=o(" (ProphetNet model)"),Mjo=l(),Nb=a("li"),Cpe=a("strong"),Ejo=o("t5"),Cjo=o(" \u2014 "),NV=a("a"),wjo=o("T5ForConditionalGeneration"),Ajo=o(" (T5 model)"),Ljo=l(),qb=a("li"),wpe=a("strong"),yjo=o("xlm-prophetnet"),xjo=o(" \u2014 "),qV=a("a"),$jo=o("XLMProphetNetForConditionalGeneration"),kjo=o(" (XLM-ProphetNet model)"),Sjo=l(),jb=a("p"),Rjo=o("The model is set in evaluation mode by default using "),Ape=a("code"),Pjo=o("model.eval()"),Bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),Ijo=o("model.train()"),Njo=l(),F(Db.$$.fragment),tXe=l(),od=a("h2"),Gb=a("a"),ype=a("span"),F(YL.$$.fragment),qjo=l(),xpe=a("span"),jjo=o("AutoModelForSequenceClassification"),aXe=l(),Po=a("div"),F(KL.$$.fragment),Djo=l(),rd=a("p"),Gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jV=a("a"),Ojo=o("from_pretrained()"),Vjo=o(" class method or the "),DV=a("a"),Xjo=o("from_config()"),zjo=o(` class
method.`),Qjo=l(),ZL=a("p"),Wjo=o("This class cannot be instantiated directly using "),$pe=a("code"),Hjo=o("__init__()"),Ujo=o(" (throws an error)."),Jjo=l(),mt=a("div"),F(ey.$$.fragment),Yjo=l(),kpe=a("p"),Kjo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zjo=l(),td=a("p"),eDo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),oDo=o("not"),rDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),tDo=o("from_pretrained()"),aDo=o(" to load the model weights."),nDo=l(),F(Ob.$$.fragment),sDo=l(),oo=a("div"),F(oy.$$.fragment),lDo=l(),Rpe=a("p"),iDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dDo=l(),Da=a("p"),cDo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),fDo=o("model_type"),mDo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),gDo=o("pretrained_model_name_or_path"),hDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),pDo=o("pretrained_model_name_or_path"),_Do=o(":"),uDo=l(),N=a("ul"),Vb=a("li"),Npe=a("strong"),bDo=o("albert"),vDo=o(" \u2014 "),OV=a("a"),FDo=o("AlbertForSequenceClassification"),TDo=o(" (ALBERT model)"),MDo=l(),Xb=a("li"),qpe=a("strong"),EDo=o("bart"),CDo=o(" \u2014 "),VV=a("a"),wDo=o("BartForSequenceClassification"),ADo=o(" (BART model)"),LDo=l(),zb=a("li"),jpe=a("strong"),yDo=o("bert"),xDo=o(" \u2014 "),XV=a("a"),$Do=o("BertForSequenceClassification"),kDo=o(" (BERT model)"),SDo=l(),Qb=a("li"),Dpe=a("strong"),RDo=o("big_bird"),PDo=o(" \u2014 "),zV=a("a"),BDo=o("BigBirdForSequenceClassification"),IDo=o(" (BigBird model)"),NDo=l(),Wb=a("li"),Gpe=a("strong"),qDo=o("bigbird_pegasus"),jDo=o(" \u2014 "),QV=a("a"),DDo=o("BigBirdPegasusForSequenceClassification"),GDo=o(" (BigBird-Pegasus model)"),ODo=l(),Hb=a("li"),Ope=a("strong"),VDo=o("bloom"),XDo=o(" \u2014 "),WV=a("a"),zDo=o("BloomForSequenceClassification"),QDo=o(" (BLOOM model)"),WDo=l(),Ub=a("li"),Vpe=a("strong"),HDo=o("camembert"),UDo=o(" \u2014 "),HV=a("a"),JDo=o("CamembertForSequenceClassification"),YDo=o(" (CamemBERT model)"),KDo=l(),Jb=a("li"),Xpe=a("strong"),ZDo=o("canine"),eGo=o(" \u2014 "),UV=a("a"),oGo=o("CanineForSequenceClassification"),rGo=o(" (CANINE model)"),tGo=l(),Yb=a("li"),zpe=a("strong"),aGo=o("convbert"),nGo=o(" \u2014 "),JV=a("a"),sGo=o("ConvBertForSequenceClassification"),lGo=o(" (ConvBERT model)"),iGo=l(),Kb=a("li"),Qpe=a("strong"),dGo=o("ctrl"),cGo=o(" \u2014 "),YV=a("a"),fGo=o("CTRLForSequenceClassification"),mGo=o(" (CTRL model)"),gGo=l(),Zb=a("li"),Wpe=a("strong"),hGo=o("data2vec-text"),pGo=o(" \u2014 "),KV=a("a"),_Go=o("Data2VecTextForSequenceClassification"),uGo=o(" (Data2VecText model)"),bGo=l(),ev=a("li"),Hpe=a("strong"),vGo=o("deberta"),FGo=o(" \u2014 "),ZV=a("a"),TGo=o("DebertaForSequenceClassification"),MGo=o(" (DeBERTa model)"),EGo=l(),ov=a("li"),Upe=a("strong"),CGo=o("deberta-v2"),wGo=o(" \u2014 "),eX=a("a"),AGo=o("DebertaV2ForSequenceClassification"),LGo=o(" (DeBERTa-v2 model)"),yGo=l(),rv=a("li"),Jpe=a("strong"),xGo=o("distilbert"),$Go=o(" \u2014 "),oX=a("a"),kGo=o("DistilBertForSequenceClassification"),SGo=o(" (DistilBERT model)"),RGo=l(),tv=a("li"),Ype=a("strong"),PGo=o("electra"),BGo=o(" \u2014 "),rX=a("a"),IGo=o("ElectraForSequenceClassification"),NGo=o(" (ELECTRA model)"),qGo=l(),av=a("li"),Kpe=a("strong"),jGo=o("flaubert"),DGo=o(" \u2014 "),tX=a("a"),GGo=o("FlaubertForSequenceClassification"),OGo=o(" (FlauBERT model)"),VGo=l(),nv=a("li"),Zpe=a("strong"),XGo=o("fnet"),zGo=o(" \u2014 "),aX=a("a"),QGo=o("FNetForSequenceClassification"),WGo=o(" (FNet model)"),HGo=l(),sv=a("li"),e_e=a("strong"),UGo=o("funnel"),JGo=o(" \u2014 "),nX=a("a"),YGo=o("FunnelForSequenceClassification"),KGo=o(" (Funnel Transformer model)"),ZGo=l(),lv=a("li"),o_e=a("strong"),eOo=o("gpt2"),oOo=o(" \u2014 "),sX=a("a"),rOo=o("GPT2ForSequenceClassification"),tOo=o(" (OpenAI GPT-2 model)"),aOo=l(),iv=a("li"),r_e=a("strong"),nOo=o("gpt_neo"),sOo=o(" \u2014 "),lX=a("a"),lOo=o("GPTNeoForSequenceClassification"),iOo=o(" (GPT Neo model)"),dOo=l(),dv=a("li"),t_e=a("strong"),cOo=o("gptj"),fOo=o(" \u2014 "),iX=a("a"),mOo=o("GPTJForSequenceClassification"),gOo=o(" (GPT-J model)"),hOo=l(),cv=a("li"),a_e=a("strong"),pOo=o("ibert"),_Oo=o(" \u2014 "),dX=a("a"),uOo=o("IBertForSequenceClassification"),bOo=o(" (I-BERT model)"),vOo=l(),fv=a("li"),n_e=a("strong"),FOo=o("layoutlm"),TOo=o(" \u2014 "),cX=a("a"),MOo=o("LayoutLMForSequenceClassification"),EOo=o(" (LayoutLM model)"),COo=l(),mv=a("li"),s_e=a("strong"),wOo=o("layoutlmv2"),AOo=o(" \u2014 "),fX=a("a"),LOo=o("LayoutLMv2ForSequenceClassification"),yOo=o(" (LayoutLMv2 model)"),xOo=l(),gv=a("li"),l_e=a("strong"),$Oo=o("layoutlmv3"),kOo=o(" \u2014 "),mX=a("a"),SOo=o("LayoutLMv3ForSequenceClassification"),ROo=o(" (LayoutLMv3 model)"),POo=l(),hv=a("li"),i_e=a("strong"),BOo=o("led"),IOo=o(" \u2014 "),gX=a("a"),NOo=o("LEDForSequenceClassification"),qOo=o(" (LED model)"),jOo=l(),pv=a("li"),d_e=a("strong"),DOo=o("longformer"),GOo=o(" \u2014 "),hX=a("a"),OOo=o("LongformerForSequenceClassification"),VOo=o(" (Longformer model)"),XOo=l(),_v=a("li"),c_e=a("strong"),zOo=o("mbart"),QOo=o(" \u2014 "),pX=a("a"),WOo=o("MBartForSequenceClassification"),HOo=o(" (mBART model)"),UOo=l(),uv=a("li"),f_e=a("strong"),JOo=o("megatron-bert"),YOo=o(" \u2014 "),_X=a("a"),KOo=o("MegatronBertForSequenceClassification"),ZOo=o(" (Megatron-BERT model)"),eVo=l(),bv=a("li"),m_e=a("strong"),oVo=o("mobilebert"),rVo=o(" \u2014 "),uX=a("a"),tVo=o("MobileBertForSequenceClassification"),aVo=o(" (MobileBERT model)"),nVo=l(),vv=a("li"),g_e=a("strong"),sVo=o("mpnet"),lVo=o(" \u2014 "),bX=a("a"),iVo=o("MPNetForSequenceClassification"),dVo=o(" (MPNet model)"),cVo=l(),Fv=a("li"),h_e=a("strong"),fVo=o("mvp"),mVo=o(" \u2014 "),vX=a("a"),gVo=o("MvpForSequenceClassification"),hVo=o(" (MVP model)"),pVo=l(),Tv=a("li"),p_e=a("strong"),_Vo=o("nezha"),uVo=o(" \u2014 "),FX=a("a"),bVo=o("NezhaForSequenceClassification"),vVo=o(" (Nezha model)"),FVo=l(),Mv=a("li"),__e=a("strong"),TVo=o("nystromformer"),MVo=o(" \u2014 "),TX=a("a"),EVo=o("NystromformerForSequenceClassification"),CVo=o(" (Nystr\xF6mformer model)"),wVo=l(),Ev=a("li"),u_e=a("strong"),AVo=o("openai-gpt"),LVo=o(" \u2014 "),MX=a("a"),yVo=o("OpenAIGPTForSequenceClassification"),xVo=o(" (OpenAI GPT model)"),$Vo=l(),Cv=a("li"),b_e=a("strong"),kVo=o("perceiver"),SVo=o(" \u2014 "),EX=a("a"),RVo=o("PerceiverForSequenceClassification"),PVo=o(" (Perceiver model)"),BVo=l(),wv=a("li"),v_e=a("strong"),IVo=o("plbart"),NVo=o(" \u2014 "),CX=a("a"),qVo=o("PLBartForSequenceClassification"),jVo=o(" (PLBart model)"),DVo=l(),Av=a("li"),F_e=a("strong"),GVo=o("qdqbert"),OVo=o(" \u2014 "),wX=a("a"),VVo=o("QDQBertForSequenceClassification"),XVo=o(" (QDQBert model)"),zVo=l(),Lv=a("li"),T_e=a("strong"),QVo=o("reformer"),WVo=o(" \u2014 "),AX=a("a"),HVo=o("ReformerForSequenceClassification"),UVo=o(" (Reformer model)"),JVo=l(),yv=a("li"),M_e=a("strong"),YVo=o("rembert"),KVo=o(" \u2014 "),LX=a("a"),ZVo=o("RemBertForSequenceClassification"),eXo=o(" (RemBERT model)"),oXo=l(),xv=a("li"),E_e=a("strong"),rXo=o("roberta"),tXo=o(" \u2014 "),yX=a("a"),aXo=o("RobertaForSequenceClassification"),nXo=o(" (RoBERTa model)"),sXo=l(),$v=a("li"),C_e=a("strong"),lXo=o("roformer"),iXo=o(" \u2014 "),xX=a("a"),dXo=o("RoFormerForSequenceClassification"),cXo=o(" (RoFormer model)"),fXo=l(),kv=a("li"),w_e=a("strong"),mXo=o("squeezebert"),gXo=o(" \u2014 "),$X=a("a"),hXo=o("SqueezeBertForSequenceClassification"),pXo=o(" (SqueezeBERT model)"),_Xo=l(),Sv=a("li"),A_e=a("strong"),uXo=o("tapas"),bXo=o(" \u2014 "),kX=a("a"),vXo=o("TapasForSequenceClassification"),FXo=o(" (TAPAS model)"),TXo=l(),Rv=a("li"),L_e=a("strong"),MXo=o("transfo-xl"),EXo=o(" \u2014 "),SX=a("a"),CXo=o("TransfoXLForSequenceClassification"),wXo=o(" (Transformer-XL model)"),AXo=l(),Pv=a("li"),y_e=a("strong"),LXo=o("xlm"),yXo=o(" \u2014 "),RX=a("a"),xXo=o("XLMForSequenceClassification"),$Xo=o(" (XLM model)"),kXo=l(),Bv=a("li"),x_e=a("strong"),SXo=o("xlm-roberta"),RXo=o(" \u2014 "),PX=a("a"),PXo=o("XLMRobertaForSequenceClassification"),BXo=o(" (XLM-RoBERTa model)"),IXo=l(),Iv=a("li"),$_e=a("strong"),NXo=o("xlm-roberta-xl"),qXo=o(" \u2014 "),BX=a("a"),jXo=o("XLMRobertaXLForSequenceClassification"),DXo=o(" (XLM-RoBERTa-XL model)"),GXo=l(),Nv=a("li"),k_e=a("strong"),OXo=o("xlnet"),VXo=o(" \u2014 "),IX=a("a"),XXo=o("XLNetForSequenceClassification"),zXo=o(" (XLNet model)"),QXo=l(),qv=a("li"),S_e=a("strong"),WXo=o("yoso"),HXo=o(" \u2014 "),NX=a("a"),UXo=o("YosoForSequenceClassification"),JXo=o(" (YOSO model)"),YXo=l(),jv=a("p"),KXo=o("The model is set in evaluation mode by default using "),R_e=a("code"),ZXo=o("model.eval()"),ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),ozo=o("model.train()"),rzo=l(),F(Dv.$$.fragment),nXe=l(),ad=a("h2"),Gv=a("a"),B_e=a("span"),F(ry.$$.fragment),tzo=l(),I_e=a("span"),azo=o("AutoModelForMultipleChoice"),sXe=l(),Bo=a("div"),F(ty.$$.fragment),nzo=l(),nd=a("p"),szo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qX=a("a"),lzo=o("from_pretrained()"),izo=o(" class method or the "),jX=a("a"),dzo=o("from_config()"),czo=o(` class
method.`),fzo=l(),ay=a("p"),mzo=o("This class cannot be instantiated directly using "),N_e=a("code"),gzo=o("__init__()"),hzo=o(" (throws an error)."),pzo=l(),gt=a("div"),F(ny.$$.fragment),_zo=l(),q_e=a("p"),uzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bzo=l(),sd=a("p"),vzo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),Fzo=o("not"),Tzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" to load the model weights."),Czo=l(),F(Ov.$$.fragment),wzo=l(),ro=a("div"),F(sy.$$.fragment),Azo=l(),D_e=a("p"),Lzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yzo=l(),Ga=a("p"),xzo=o("The model class to instantiate is selected based on the "),G_e=a("code"),$zo=o("model_type"),kzo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),Szo=o("pretrained_model_name_or_path"),Rzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),Pzo=o("pretrained_model_name_or_path"),Bzo=o(":"),Izo=l(),Z=a("ul"),Vv=a("li"),X_e=a("strong"),Nzo=o("albert"),qzo=o(" \u2014 "),GX=a("a"),jzo=o("AlbertForMultipleChoice"),Dzo=o(" (ALBERT model)"),Gzo=l(),Xv=a("li"),z_e=a("strong"),Ozo=o("bert"),Vzo=o(" \u2014 "),OX=a("a"),Xzo=o("BertForMultipleChoice"),zzo=o(" (BERT model)"),Qzo=l(),zv=a("li"),Q_e=a("strong"),Wzo=o("big_bird"),Hzo=o(" \u2014 "),VX=a("a"),Uzo=o("BigBirdForMultipleChoice"),Jzo=o(" (BigBird model)"),Yzo=l(),Qv=a("li"),W_e=a("strong"),Kzo=o("camembert"),Zzo=o(" \u2014 "),XX=a("a"),eQo=o("CamembertForMultipleChoice"),oQo=o(" (CamemBERT model)"),rQo=l(),Wv=a("li"),H_e=a("strong"),tQo=o("canine"),aQo=o(" \u2014 "),zX=a("a"),nQo=o("CanineForMultipleChoice"),sQo=o(" (CANINE model)"),lQo=l(),Hv=a("li"),U_e=a("strong"),iQo=o("convbert"),dQo=o(" \u2014 "),QX=a("a"),cQo=o("ConvBertForMultipleChoice"),fQo=o(" (ConvBERT model)"),mQo=l(),Uv=a("li"),J_e=a("strong"),gQo=o("data2vec-text"),hQo=o(" \u2014 "),WX=a("a"),pQo=o("Data2VecTextForMultipleChoice"),_Qo=o(" (Data2VecText model)"),uQo=l(),Jv=a("li"),Y_e=a("strong"),bQo=o("deberta-v2"),vQo=o(" \u2014 "),HX=a("a"),FQo=o("DebertaV2ForMultipleChoice"),TQo=o(" (DeBERTa-v2 model)"),MQo=l(),Yv=a("li"),K_e=a("strong"),EQo=o("distilbert"),CQo=o(" \u2014 "),UX=a("a"),wQo=o("DistilBertForMultipleChoice"),AQo=o(" (DistilBERT model)"),LQo=l(),Kv=a("li"),Z_e=a("strong"),yQo=o("electra"),xQo=o(" \u2014 "),JX=a("a"),$Qo=o("ElectraForMultipleChoice"),kQo=o(" (ELECTRA model)"),SQo=l(),Zv=a("li"),eue=a("strong"),RQo=o("flaubert"),PQo=o(" \u2014 "),YX=a("a"),BQo=o("FlaubertForMultipleChoice"),IQo=o(" (FlauBERT model)"),NQo=l(),e3=a("li"),oue=a("strong"),qQo=o("fnet"),jQo=o(" \u2014 "),KX=a("a"),DQo=o("FNetForMultipleChoice"),GQo=o(" (FNet model)"),OQo=l(),o3=a("li"),rue=a("strong"),VQo=o("funnel"),XQo=o(" \u2014 "),ZX=a("a"),zQo=o("FunnelForMultipleChoice"),QQo=o(" (Funnel Transformer model)"),WQo=l(),r3=a("li"),tue=a("strong"),HQo=o("ibert"),UQo=o(" \u2014 "),ez=a("a"),JQo=o("IBertForMultipleChoice"),YQo=o(" (I-BERT model)"),KQo=l(),t3=a("li"),aue=a("strong"),ZQo=o("longformer"),eWo=o(" \u2014 "),oz=a("a"),oWo=o("LongformerForMultipleChoice"),rWo=o(" (Longformer model)"),tWo=l(),a3=a("li"),nue=a("strong"),aWo=o("megatron-bert"),nWo=o(" \u2014 "),rz=a("a"),sWo=o("MegatronBertForMultipleChoice"),lWo=o(" (Megatron-BERT model)"),iWo=l(),n3=a("li"),sue=a("strong"),dWo=o("mobilebert"),cWo=o(" \u2014 "),tz=a("a"),fWo=o("MobileBertForMultipleChoice"),mWo=o(" (MobileBERT model)"),gWo=l(),s3=a("li"),lue=a("strong"),hWo=o("mpnet"),pWo=o(" \u2014 "),az=a("a"),_Wo=o("MPNetForMultipleChoice"),uWo=o(" (MPNet model)"),bWo=l(),l3=a("li"),iue=a("strong"),vWo=o("nezha"),FWo=o(" \u2014 "),nz=a("a"),TWo=o("NezhaForMultipleChoice"),MWo=o(" (Nezha model)"),EWo=l(),i3=a("li"),due=a("strong"),CWo=o("nystromformer"),wWo=o(" \u2014 "),sz=a("a"),AWo=o("NystromformerForMultipleChoice"),LWo=o(" (Nystr\xF6mformer model)"),yWo=l(),d3=a("li"),cue=a("strong"),xWo=o("qdqbert"),$Wo=o(" \u2014 "),lz=a("a"),kWo=o("QDQBertForMultipleChoice"),SWo=o(" (QDQBert model)"),RWo=l(),c3=a("li"),fue=a("strong"),PWo=o("rembert"),BWo=o(" \u2014 "),iz=a("a"),IWo=o("RemBertForMultipleChoice"),NWo=o(" (RemBERT model)"),qWo=l(),f3=a("li"),mue=a("strong"),jWo=o("roberta"),DWo=o(" \u2014 "),dz=a("a"),GWo=o("RobertaForMultipleChoice"),OWo=o(" (RoBERTa model)"),VWo=l(),m3=a("li"),gue=a("strong"),XWo=o("roformer"),zWo=o(" \u2014 "),cz=a("a"),QWo=o("RoFormerForMultipleChoice"),WWo=o(" (RoFormer model)"),HWo=l(),g3=a("li"),hue=a("strong"),UWo=o("squeezebert"),JWo=o(" \u2014 "),fz=a("a"),YWo=o("SqueezeBertForMultipleChoice"),KWo=o(" (SqueezeBERT model)"),ZWo=l(),h3=a("li"),pue=a("strong"),eHo=o("xlm"),oHo=o(" \u2014 "),mz=a("a"),rHo=o("XLMForMultipleChoice"),tHo=o(" (XLM model)"),aHo=l(),p3=a("li"),_ue=a("strong"),nHo=o("xlm-roberta"),sHo=o(" \u2014 "),gz=a("a"),lHo=o("XLMRobertaForMultipleChoice"),iHo=o(" (XLM-RoBERTa model)"),dHo=l(),_3=a("li"),uue=a("strong"),cHo=o("xlm-roberta-xl"),fHo=o(" \u2014 "),hz=a("a"),mHo=o("XLMRobertaXLForMultipleChoice"),gHo=o(" (XLM-RoBERTa-XL model)"),hHo=l(),u3=a("li"),bue=a("strong"),pHo=o("xlnet"),_Ho=o(" \u2014 "),pz=a("a"),uHo=o("XLNetForMultipleChoice"),bHo=o(" (XLNet model)"),vHo=l(),b3=a("li"),vue=a("strong"),FHo=o("yoso"),THo=o(" \u2014 "),_z=a("a"),MHo=o("YosoForMultipleChoice"),EHo=o(" (YOSO model)"),CHo=l(),v3=a("p"),wHo=o("The model is set in evaluation mode by default using "),Fue=a("code"),AHo=o("model.eval()"),LHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),yHo=o("model.train()"),xHo=l(),F(F3.$$.fragment),lXe=l(),ld=a("h2"),T3=a("a"),Mue=a("span"),F(ly.$$.fragment),$Ho=l(),Eue=a("span"),kHo=o("AutoModelForNextSentencePrediction"),iXe=l(),Io=a("div"),F(iy.$$.fragment),SHo=l(),id=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uz=a("a"),PHo=o("from_pretrained()"),BHo=o(" class method or the "),bz=a("a"),IHo=o("from_config()"),NHo=o(` class
method.`),qHo=l(),dy=a("p"),jHo=o("This class cannot be instantiated directly using "),Cue=a("code"),DHo=o("__init__()"),GHo=o(" (throws an error)."),OHo=l(),ht=a("div"),F(cy.$$.fragment),VHo=l(),wue=a("p"),XHo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zHo=l(),dd=a("p"),QHo=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),WHo=o("not"),HHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),UHo=o("from_pretrained()"),JHo=o(" to load the model weights."),YHo=l(),F(M3.$$.fragment),KHo=l(),to=a("div"),F(fy.$$.fragment),ZHo=l(),Lue=a("p"),eUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oUo=l(),Oa=a("p"),rUo=o("The model class to instantiate is selected based on the "),yue=a("code"),tUo=o("model_type"),aUo=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(":"),dUo=l(),No=a("ul"),E3=a("li"),kue=a("strong"),cUo=o("bert"),fUo=o(" \u2014 "),Fz=a("a"),mUo=o("BertForNextSentencePrediction"),gUo=o(" (BERT model)"),hUo=l(),C3=a("li"),Sue=a("strong"),pUo=o("fnet"),_Uo=o(" \u2014 "),Tz=a("a"),uUo=o("FNetForNextSentencePrediction"),bUo=o(" (FNet model)"),vUo=l(),w3=a("li"),Rue=a("strong"),FUo=o("megatron-bert"),TUo=o(" \u2014 "),Mz=a("a"),MUo=o("MegatronBertForNextSentencePrediction"),EUo=o(" (Megatron-BERT model)"),CUo=l(),A3=a("li"),Pue=a("strong"),wUo=o("mobilebert"),AUo=o(" \u2014 "),Ez=a("a"),LUo=o("MobileBertForNextSentencePrediction"),yUo=o(" (MobileBERT model)"),xUo=l(),L3=a("li"),Bue=a("strong"),$Uo=o("nezha"),kUo=o(" \u2014 "),Cz=a("a"),SUo=o("NezhaForNextSentencePrediction"),RUo=o(" (Nezha model)"),PUo=l(),y3=a("li"),Iue=a("strong"),BUo=o("qdqbert"),IUo=o(" \u2014 "),wz=a("a"),NUo=o("QDQBertForNextSentencePrediction"),qUo=o(" (QDQBert model)"),jUo=l(),x3=a("p"),DUo=o("The model is set in evaluation mode by default using "),Nue=a("code"),GUo=o("model.eval()"),OUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),VUo=o("model.train()"),XUo=l(),F($3.$$.fragment),dXe=l(),cd=a("h2"),k3=a("a"),jue=a("span"),F(my.$$.fragment),zUo=l(),Due=a("span"),QUo=o("AutoModelForTokenClassification"),cXe=l(),qo=a("div"),F(gy.$$.fragment),WUo=l(),fd=a("p"),HUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Az=a("a"),UUo=o("from_pretrained()"),JUo=o(" class method or the "),Lz=a("a"),YUo=o("from_config()"),KUo=o(` class
method.`),ZUo=l(),hy=a("p"),eJo=o("This class cannot be instantiated directly using "),Gue=a("code"),oJo=o("__init__()"),rJo=o(" (throws an error)."),tJo=l(),pt=a("div"),F(py.$$.fragment),aJo=l(),Oue=a("p"),nJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sJo=l(),md=a("p"),lJo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),iJo=o("not"),dJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),cJo=o("from_pretrained()"),fJo=o(" to load the model weights."),mJo=l(),F(S3.$$.fragment),gJo=l(),ao=a("div"),F(_y.$$.fragment),hJo=l(),Xue=a("p"),pJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Jo=l(),Va=a("p"),uJo=o("The model class to instantiate is selected based on the "),zue=a("code"),bJo=o("model_type"),vJo=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),MJo=o("pretrained_model_name_or_path"),EJo=o(":"),CJo=l(),U=a("ul"),R3=a("li"),Hue=a("strong"),wJo=o("albert"),AJo=o(" \u2014 "),xz=a("a"),LJo=o("AlbertForTokenClassification"),yJo=o(" (ALBERT model)"),xJo=l(),P3=a("li"),Uue=a("strong"),$Jo=o("bert"),kJo=o(" \u2014 "),$z=a("a"),SJo=o("BertForTokenClassification"),RJo=o(" (BERT model)"),PJo=l(),B3=a("li"),Jue=a("strong"),BJo=o("big_bird"),IJo=o(" \u2014 "),kz=a("a"),NJo=o("BigBirdForTokenClassification"),qJo=o(" (BigBird model)"),jJo=l(),I3=a("li"),Yue=a("strong"),DJo=o("bloom"),GJo=o(" \u2014 "),Sz=a("a"),OJo=o("BloomForTokenClassification"),VJo=o(" (BLOOM model)"),XJo=l(),N3=a("li"),Kue=a("strong"),zJo=o("camembert"),QJo=o(" \u2014 "),Rz=a("a"),WJo=o("CamembertForTokenClassification"),HJo=o(" (CamemBERT model)"),UJo=l(),q3=a("li"),Zue=a("strong"),JJo=o("canine"),YJo=o(" \u2014 "),Pz=a("a"),KJo=o("CanineForTokenClassification"),ZJo=o(" (CANINE model)"),eYo=l(),j3=a("li"),e1e=a("strong"),oYo=o("convbert"),rYo=o(" \u2014 "),Bz=a("a"),tYo=o("ConvBertForTokenClassification"),aYo=o(" (ConvBERT model)"),nYo=l(),D3=a("li"),o1e=a("strong"),sYo=o("data2vec-text"),lYo=o(" \u2014 "),Iz=a("a"),iYo=o("Data2VecTextForTokenClassification"),dYo=o(" (Data2VecText model)"),cYo=l(),G3=a("li"),r1e=a("strong"),fYo=o("deberta"),mYo=o(" \u2014 "),Nz=a("a"),gYo=o("DebertaForTokenClassification"),hYo=o(" (DeBERTa model)"),pYo=l(),O3=a("li"),t1e=a("strong"),_Yo=o("deberta-v2"),uYo=o(" \u2014 "),qz=a("a"),bYo=o("DebertaV2ForTokenClassification"),vYo=o(" (DeBERTa-v2 model)"),FYo=l(),V3=a("li"),a1e=a("strong"),TYo=o("distilbert"),MYo=o(" \u2014 "),jz=a("a"),EYo=o("DistilBertForTokenClassification"),CYo=o(" (DistilBERT model)"),wYo=l(),X3=a("li"),n1e=a("strong"),AYo=o("electra"),LYo=o(" \u2014 "),Dz=a("a"),yYo=o("ElectraForTokenClassification"),xYo=o(" (ELECTRA model)"),$Yo=l(),z3=a("li"),s1e=a("strong"),kYo=o("flaubert"),SYo=o(" \u2014 "),Gz=a("a"),RYo=o("FlaubertForTokenClassification"),PYo=o(" (FlauBERT model)"),BYo=l(),Q3=a("li"),l1e=a("strong"),IYo=o("fnet"),NYo=o(" \u2014 "),Oz=a("a"),qYo=o("FNetForTokenClassification"),jYo=o(" (FNet model)"),DYo=l(),W3=a("li"),i1e=a("strong"),GYo=o("funnel"),OYo=o(" \u2014 "),Vz=a("a"),VYo=o("FunnelForTokenClassification"),XYo=o(" (Funnel Transformer model)"),zYo=l(),H3=a("li"),d1e=a("strong"),QYo=o("gpt2"),WYo=o(" \u2014 "),Xz=a("a"),HYo=o("GPT2ForTokenClassification"),UYo=o(" (OpenAI GPT-2 model)"),JYo=l(),U3=a("li"),c1e=a("strong"),YYo=o("ibert"),KYo=o(" \u2014 "),zz=a("a"),ZYo=o("IBertForTokenClassification"),eKo=o(" (I-BERT model)"),oKo=l(),J3=a("li"),f1e=a("strong"),rKo=o("layoutlm"),tKo=o(" \u2014 "),Qz=a("a"),aKo=o("LayoutLMForTokenClassification"),nKo=o(" (LayoutLM model)"),sKo=l(),Y3=a("li"),m1e=a("strong"),lKo=o("layoutlmv2"),iKo=o(" \u2014 "),Wz=a("a"),dKo=o("LayoutLMv2ForTokenClassification"),cKo=o(" (LayoutLMv2 model)"),fKo=l(),K3=a("li"),g1e=a("strong"),mKo=o("layoutlmv3"),gKo=o(" \u2014 "),Hz=a("a"),hKo=o("LayoutLMv3ForTokenClassification"),pKo=o(" (LayoutLMv3 model)"),_Ko=l(),Z3=a("li"),h1e=a("strong"),uKo=o("longformer"),bKo=o(" \u2014 "),Uz=a("a"),vKo=o("LongformerForTokenClassification"),FKo=o(" (Longformer model)"),TKo=l(),eF=a("li"),p1e=a("strong"),MKo=o("megatron-bert"),EKo=o(" \u2014 "),Jz=a("a"),CKo=o("MegatronBertForTokenClassification"),wKo=o(" (Megatron-BERT model)"),AKo=l(),oF=a("li"),_1e=a("strong"),LKo=o("mobilebert"),yKo=o(" \u2014 "),Yz=a("a"),xKo=o("MobileBertForTokenClassification"),$Ko=o(" (MobileBERT model)"),kKo=l(),rF=a("li"),u1e=a("strong"),SKo=o("mpnet"),RKo=o(" \u2014 "),Kz=a("a"),PKo=o("MPNetForTokenClassification"),BKo=o(" (MPNet model)"),IKo=l(),tF=a("li"),b1e=a("strong"),NKo=o("nezha"),qKo=o(" \u2014 "),Zz=a("a"),jKo=o("NezhaForTokenClassification"),DKo=o(" (Nezha model)"),GKo=l(),aF=a("li"),v1e=a("strong"),OKo=o("nystromformer"),VKo=o(" \u2014 "),eQ=a("a"),XKo=o("NystromformerForTokenClassification"),zKo=o(" (Nystr\xF6mformer model)"),QKo=l(),nF=a("li"),F1e=a("strong"),WKo=o("qdqbert"),HKo=o(" \u2014 "),oQ=a("a"),UKo=o("QDQBertForTokenClassification"),JKo=o(" (QDQBert model)"),YKo=l(),sF=a("li"),T1e=a("strong"),KKo=o("rembert"),ZKo=o(" \u2014 "),rQ=a("a"),eZo=o("RemBertForTokenClassification"),oZo=o(" (RemBERT model)"),rZo=l(),lF=a("li"),M1e=a("strong"),tZo=o("roberta"),aZo=o(" \u2014 "),tQ=a("a"),nZo=o("RobertaForTokenClassification"),sZo=o(" (RoBERTa model)"),lZo=l(),iF=a("li"),E1e=a("strong"),iZo=o("roformer"),dZo=o(" \u2014 "),aQ=a("a"),cZo=o("RoFormerForTokenClassification"),fZo=o(" (RoFormer model)"),mZo=l(),dF=a("li"),C1e=a("strong"),gZo=o("squeezebert"),hZo=o(" \u2014 "),nQ=a("a"),pZo=o("SqueezeBertForTokenClassification"),_Zo=o(" (SqueezeBERT model)"),uZo=l(),cF=a("li"),w1e=a("strong"),bZo=o("xlm"),vZo=o(" \u2014 "),sQ=a("a"),FZo=o("XLMForTokenClassification"),TZo=o(" (XLM model)"),MZo=l(),fF=a("li"),A1e=a("strong"),EZo=o("xlm-roberta"),CZo=o(" \u2014 "),lQ=a("a"),wZo=o("XLMRobertaForTokenClassification"),AZo=o(" (XLM-RoBERTa model)"),LZo=l(),mF=a("li"),L1e=a("strong"),yZo=o("xlm-roberta-xl"),xZo=o(" \u2014 "),iQ=a("a"),$Zo=o("XLMRobertaXLForTokenClassification"),kZo=o(" (XLM-RoBERTa-XL model)"),SZo=l(),gF=a("li"),y1e=a("strong"),RZo=o("xlnet"),PZo=o(" \u2014 "),dQ=a("a"),BZo=o("XLNetForTokenClassification"),IZo=o(" (XLNet model)"),NZo=l(),hF=a("li"),x1e=a("strong"),qZo=o("yoso"),jZo=o(" \u2014 "),cQ=a("a"),DZo=o("YosoForTokenClassification"),GZo=o(" (YOSO model)"),OZo=l(),pF=a("p"),VZo=o("The model is set in evaluation mode by default using "),$1e=a("code"),XZo=o("model.eval()"),zZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),QZo=o("model.train()"),WZo=l(),F(_F.$$.fragment),fXe=l(),gd=a("h2"),uF=a("a"),S1e=a("span"),F(uy.$$.fragment),HZo=l(),R1e=a("span"),UZo=o("AutoModelForQuestionAnswering"),mXe=l(),jo=a("div"),F(by.$$.fragment),JZo=l(),hd=a("p"),YZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fQ=a("a"),KZo=o("from_pretrained()"),ZZo=o(" class method or the "),mQ=a("a"),eer=o("from_config()"),oer=o(` class
method.`),rer=l(),vy=a("p"),ter=o("This class cannot be instantiated directly using "),P1e=a("code"),aer=o("__init__()"),ner=o(" (throws an error)."),ser=l(),_t=a("div"),F(Fy.$$.fragment),ler=l(),B1e=a("p"),ier=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),der=l(),pd=a("p"),cer=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),fer=o("not"),mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),ger=o("from_pretrained()"),her=o(" to load the model weights."),per=l(),F(bF.$$.fragment),_er=l(),no=a("div"),F(Ty.$$.fragment),uer=l(),N1e=a("p"),ber=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ver=l(),Xa=a("p"),Fer=o("The model class to instantiate is selected based on the "),q1e=a("code"),Ter=o("model_type"),Mer=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),Eer=o("pretrained_model_name_or_path"),Cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(":"),Ler=l(),V=a("ul"),vF=a("li"),G1e=a("strong"),yer=o("albert"),xer=o(" \u2014 "),hQ=a("a"),$er=o("AlbertForQuestionAnswering"),ker=o(" (ALBERT model)"),Ser=l(),FF=a("li"),O1e=a("strong"),Rer=o("bart"),Per=o(" \u2014 "),pQ=a("a"),Ber=o("BartForQuestionAnswering"),Ier=o(" (BART model)"),Ner=l(),TF=a("li"),V1e=a("strong"),qer=o("bert"),jer=o(" \u2014 "),_Q=a("a"),Der=o("BertForQuestionAnswering"),Ger=o(" (BERT model)"),Oer=l(),MF=a("li"),X1e=a("strong"),Ver=o("big_bird"),Xer=o(" \u2014 "),uQ=a("a"),zer=o("BigBirdForQuestionAnswering"),Qer=o(" (BigBird model)"),Wer=l(),EF=a("li"),z1e=a("strong"),Her=o("bigbird_pegasus"),Uer=o(" \u2014 "),bQ=a("a"),Jer=o("BigBirdPegasusForQuestionAnswering"),Yer=o(" (BigBird-Pegasus model)"),Ker=l(),CF=a("li"),Q1e=a("strong"),Zer=o("camembert"),eor=o(" \u2014 "),vQ=a("a"),oor=o("CamembertForQuestionAnswering"),ror=o(" (CamemBERT model)"),tor=l(),wF=a("li"),W1e=a("strong"),aor=o("canine"),nor=o(" \u2014 "),FQ=a("a"),sor=o("CanineForQuestionAnswering"),lor=o(" (CANINE model)"),ior=l(),AF=a("li"),H1e=a("strong"),dor=o("convbert"),cor=o(" \u2014 "),TQ=a("a"),mor=o("ConvBertForQuestionAnswering"),gor=o(" (ConvBERT model)"),hor=l(),LF=a("li"),U1e=a("strong"),por=o("data2vec-text"),_or=o(" \u2014 "),MQ=a("a"),uor=o("Data2VecTextForQuestionAnswering"),bor=o(" (Data2VecText model)"),vor=l(),yF=a("li"),J1e=a("strong"),For=o("deberta"),Tor=o(" \u2014 "),EQ=a("a"),Mor=o("DebertaForQuestionAnswering"),Eor=o(" (DeBERTa model)"),Cor=l(),xF=a("li"),Y1e=a("strong"),wor=o("deberta-v2"),Aor=o(" \u2014 "),CQ=a("a"),Lor=o("DebertaV2ForQuestionAnswering"),yor=o(" (DeBERTa-v2 model)"),xor=l(),$F=a("li"),K1e=a("strong"),$or=o("distilbert"),kor=o(" \u2014 "),wQ=a("a"),Sor=o("DistilBertForQuestionAnswering"),Ror=o(" (DistilBERT model)"),Por=l(),kF=a("li"),Z1e=a("strong"),Bor=o("electra"),Ior=o(" \u2014 "),AQ=a("a"),Nor=o("ElectraForQuestionAnswering"),qor=o(" (ELECTRA model)"),jor=l(),SF=a("li"),e2e=a("strong"),Dor=o("flaubert"),Gor=o(" \u2014 "),LQ=a("a"),Oor=o("FlaubertForQuestionAnsweringSimple"),Vor=o(" (FlauBERT model)"),Xor=l(),RF=a("li"),o2e=a("strong"),zor=o("fnet"),Qor=o(" \u2014 "),yQ=a("a"),Wor=o("FNetForQuestionAnswering"),Hor=o(" (FNet model)"),Uor=l(),PF=a("li"),r2e=a("strong"),Jor=o("funnel"),Yor=o(" \u2014 "),xQ=a("a"),Kor=o("FunnelForQuestionAnswering"),Zor=o(" (Funnel Transformer model)"),err=l(),BF=a("li"),t2e=a("strong"),orr=o("gptj"),rrr=o(" \u2014 "),$Q=a("a"),trr=o("GPTJForQuestionAnswering"),arr=o(" (GPT-J model)"),nrr=l(),IF=a("li"),a2e=a("strong"),srr=o("ibert"),lrr=o(" \u2014 "),kQ=a("a"),irr=o("IBertForQuestionAnswering"),drr=o(" (I-BERT model)"),crr=l(),NF=a("li"),n2e=a("strong"),frr=o("layoutlmv2"),mrr=o(" \u2014 "),SQ=a("a"),grr=o("LayoutLMv2ForQuestionAnswering"),hrr=o(" (LayoutLMv2 model)"),prr=l(),qF=a("li"),s2e=a("strong"),_rr=o("layoutlmv3"),urr=o(" \u2014 "),RQ=a("a"),brr=o("LayoutLMv3ForQuestionAnswering"),vrr=o(" (LayoutLMv3 model)"),Frr=l(),jF=a("li"),l2e=a("strong"),Trr=o("led"),Mrr=o(" \u2014 "),PQ=a("a"),Err=o("LEDForQuestionAnswering"),Crr=o(" (LED model)"),wrr=l(),DF=a("li"),i2e=a("strong"),Arr=o("longformer"),Lrr=o(" \u2014 "),BQ=a("a"),yrr=o("LongformerForQuestionAnswering"),xrr=o(" (Longformer model)"),$rr=l(),GF=a("li"),d2e=a("strong"),krr=o("lxmert"),Srr=o(" \u2014 "),IQ=a("a"),Rrr=o("LxmertForQuestionAnswering"),Prr=o(" (LXMERT model)"),Brr=l(),OF=a("li"),c2e=a("strong"),Irr=o("mbart"),Nrr=o(" \u2014 "),NQ=a("a"),qrr=o("MBartForQuestionAnswering"),jrr=o(" (mBART model)"),Drr=l(),VF=a("li"),f2e=a("strong"),Grr=o("megatron-bert"),Orr=o(" \u2014 "),qQ=a("a"),Vrr=o("MegatronBertForQuestionAnswering"),Xrr=o(" (Megatron-BERT model)"),zrr=l(),XF=a("li"),m2e=a("strong"),Qrr=o("mobilebert"),Wrr=o(" \u2014 "),jQ=a("a"),Hrr=o("MobileBertForQuestionAnswering"),Urr=o(" (MobileBERT model)"),Jrr=l(),zF=a("li"),g2e=a("strong"),Yrr=o("mpnet"),Krr=o(" \u2014 "),DQ=a("a"),Zrr=o("MPNetForQuestionAnswering"),etr=o(" (MPNet model)"),otr=l(),QF=a("li"),h2e=a("strong"),rtr=o("mvp"),ttr=o(" \u2014 "),GQ=a("a"),atr=o("MvpForQuestionAnswering"),ntr=o(" (MVP model)"),str=l(),WF=a("li"),p2e=a("strong"),ltr=o("nezha"),itr=o(" \u2014 "),OQ=a("a"),dtr=o("NezhaForQuestionAnswering"),ctr=o(" (Nezha model)"),ftr=l(),HF=a("li"),_2e=a("strong"),mtr=o("nystromformer"),gtr=o(" \u2014 "),VQ=a("a"),htr=o("NystromformerForQuestionAnswering"),ptr=o(" (Nystr\xF6mformer model)"),_tr=l(),UF=a("li"),u2e=a("strong"),utr=o("qdqbert"),btr=o(" \u2014 "),XQ=a("a"),vtr=o("QDQBertForQuestionAnswering"),Ftr=o(" (QDQBert model)"),Ttr=l(),JF=a("li"),b2e=a("strong"),Mtr=o("reformer"),Etr=o(" \u2014 "),zQ=a("a"),Ctr=o("ReformerForQuestionAnswering"),wtr=o(" (Reformer model)"),Atr=l(),YF=a("li"),v2e=a("strong"),Ltr=o("rembert"),ytr=o(" \u2014 "),QQ=a("a"),xtr=o("RemBertForQuestionAnswering"),$tr=o(" (RemBERT model)"),ktr=l(),KF=a("li"),F2e=a("strong"),Str=o("roberta"),Rtr=o(" \u2014 "),WQ=a("a"),Ptr=o("RobertaForQuestionAnswering"),Btr=o(" (RoBERTa model)"),Itr=l(),ZF=a("li"),T2e=a("strong"),Ntr=o("roformer"),qtr=o(" \u2014 "),HQ=a("a"),jtr=o("RoFormerForQuestionAnswering"),Dtr=o(" (RoFormer model)"),Gtr=l(),e6=a("li"),M2e=a("strong"),Otr=o("splinter"),Vtr=o(" \u2014 "),UQ=a("a"),Xtr=o("SplinterForQuestionAnswering"),ztr=o(" (Splinter model)"),Qtr=l(),o6=a("li"),E2e=a("strong"),Wtr=o("squeezebert"),Htr=o(" \u2014 "),JQ=a("a"),Utr=o("SqueezeBertForQuestionAnswering"),Jtr=o(" (SqueezeBERT model)"),Ytr=l(),r6=a("li"),C2e=a("strong"),Ktr=o("xlm"),Ztr=o(" \u2014 "),YQ=a("a"),ear=o("XLMForQuestionAnsweringSimple"),oar=o(" (XLM model)"),rar=l(),t6=a("li"),w2e=a("strong"),tar=o("xlm-roberta"),aar=o(" \u2014 "),KQ=a("a"),nar=o("XLMRobertaForQuestionAnswering"),sar=o(" (XLM-RoBERTa model)"),lar=l(),a6=a("li"),A2e=a("strong"),iar=o("xlm-roberta-xl"),dar=o(" \u2014 "),ZQ=a("a"),car=o("XLMRobertaXLForQuestionAnswering"),far=o(" (XLM-RoBERTa-XL model)"),mar=l(),n6=a("li"),L2e=a("strong"),gar=o("xlnet"),har=o(" \u2014 "),eW=a("a"),par=o("XLNetForQuestionAnsweringSimple"),_ar=o(" (XLNet model)"),uar=l(),s6=a("li"),y2e=a("strong"),bar=o("yoso"),Far=o(" \u2014 "),oW=a("a"),Tar=o("YosoForQuestionAnswering"),Mar=o(" (YOSO model)"),Ear=l(),l6=a("p"),Car=o("The model is set in evaluation mode by default using "),x2e=a("code"),war=o("model.eval()"),Aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),Lar=o("model.train()"),yar=l(),F(i6.$$.fragment),gXe=l(),_d=a("h2"),d6=a("a"),k2e=a("span"),F(My.$$.fragment),xar=l(),S2e=a("span"),$ar=o("AutoModelForTableQuestionAnswering"),hXe=l(),Do=a("div"),F(Ey.$$.fragment),kar=l(),ud=a("p"),Sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rW=a("a"),Rar=o("from_pretrained()"),Par=o(" class method or the "),tW=a("a"),Bar=o("from_config()"),Iar=o(` class
method.`),Nar=l(),Cy=a("p"),qar=o("This class cannot be instantiated directly using "),R2e=a("code"),jar=o("__init__()"),Dar=o(" (throws an error)."),Gar=l(),ut=a("div"),F(wy.$$.fragment),Oar=l(),P2e=a("p"),Var=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xar=l(),bd=a("p"),zar=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Qar=o("not"),War=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),Har=o("from_pretrained()"),Uar=o(" to load the model weights."),Jar=l(),F(c6.$$.fragment),Yar=l(),so=a("div"),F(Ay.$$.fragment),Kar=l(),I2e=a("p"),Zar=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),enr=l(),za=a("p"),onr=o("The model class to instantiate is selected based on the "),N2e=a("code"),rnr=o("model_type"),tnr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),snr=o("pretrained_model_name_or_path"),lnr=o(":"),inr=l(),D2e=a("ul"),f6=a("li"),G2e=a("strong"),dnr=o("tapas"),cnr=o(" \u2014 "),nW=a("a"),fnr=o("TapasForQuestionAnswering"),mnr=o(" (TAPAS model)"),gnr=l(),m6=a("p"),hnr=o("The model is set in evaluation mode by default using "),O2e=a("code"),pnr=o("model.eval()"),_nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),unr=o("model.train()"),bnr=l(),F(g6.$$.fragment),pXe=l(),vd=a("h2"),h6=a("a"),X2e=a("span"),F(Ly.$$.fragment),vnr=l(),z2e=a("span"),Fnr=o("AutoModelForImageClassification"),_Xe=l(),Go=a("div"),F(yy.$$.fragment),Tnr=l(),Fd=a("p"),Mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sW=a("a"),Enr=o("from_pretrained()"),Cnr=o(" class method or the "),lW=a("a"),wnr=o("from_config()"),Anr=o(` class
method.`),Lnr=l(),xy=a("p"),ynr=o("This class cannot be instantiated directly using "),Q2e=a("code"),xnr=o("__init__()"),$nr=o(" (throws an error)."),knr=l(),bt=a("div"),F($y.$$.fragment),Snr=l(),W2e=a("p"),Rnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pnr=l(),Td=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),Inr=o("not"),Nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),qnr=o("from_pretrained()"),jnr=o(" to load the model weights."),Dnr=l(),F(p6.$$.fragment),Gnr=l(),lo=a("div"),F(ky.$$.fragment),Onr=l(),U2e=a("p"),Vnr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xnr=l(),Qa=a("p"),znr=o("The model class to instantiate is selected based on the "),J2e=a("code"),Qnr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),Hnr=o("pretrained_model_name_or_path"),Unr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(":"),Knr=l(),ve=a("ul"),_6=a("li"),Z2e=a("strong"),Znr=o("beit"),esr=o(" \u2014 "),dW=a("a"),osr=o("BeitForImageClassification"),rsr=o(" (BEiT model)"),tsr=l(),u6=a("li"),ebe=a("strong"),asr=o("convnext"),nsr=o(" \u2014 "),cW=a("a"),ssr=o("ConvNextForImageClassification"),lsr=o(" (ConvNeXT model)"),isr=l(),b6=a("li"),obe=a("strong"),dsr=o("cvt"),csr=o(" \u2014 "),fW=a("a"),fsr=o("CvtForImageClassification"),msr=o(" (CvT model)"),gsr=l(),v6=a("li"),rbe=a("strong"),hsr=o("data2vec-vision"),psr=o(" \u2014 "),mW=a("a"),_sr=o("Data2VecVisionForImageClassification"),usr=o(" (Data2VecVision model)"),bsr=l(),Ws=a("li"),tbe=a("strong"),vsr=o("deit"),Fsr=o(" \u2014 "),gW=a("a"),Tsr=o("DeiTForImageClassification"),Msr=o(" or "),hW=a("a"),Esr=o("DeiTForImageClassificationWithTeacher"),Csr=o(" (DeiT model)"),wsr=l(),F6=a("li"),abe=a("strong"),Asr=o("imagegpt"),Lsr=o(" \u2014 "),pW=a("a"),ysr=o("ImageGPTForImageClassification"),xsr=o(" (ImageGPT model)"),$sr=l(),Hs=a("li"),nbe=a("strong"),ksr=o("levit"),Ssr=o(" \u2014 "),_W=a("a"),Rsr=o("LevitForImageClassification"),Psr=o(" or "),uW=a("a"),Bsr=o("LevitForImageClassificationWithTeacher"),Isr=o(" (LeViT model)"),Nsr=l(),T6=a("li"),sbe=a("strong"),qsr=o("mobilevit"),jsr=o(" \u2014 "),bW=a("a"),Dsr=o("MobileViTForImageClassification"),Gsr=o(" (MobileViT model)"),Osr=l(),vt=a("li"),lbe=a("strong"),Vsr=o("perceiver"),Xsr=o(" \u2014 "),vW=a("a"),zsr=o("PerceiverForImageClassificationLearned"),Qsr=o(" or "),FW=a("a"),Wsr=o("PerceiverForImageClassificationFourier"),Hsr=o(" or "),TW=a("a"),Usr=o("PerceiverForImageClassificationConvProcessing"),Jsr=o(" (Perceiver model)"),Ysr=l(),M6=a("li"),ibe=a("strong"),Ksr=o("poolformer"),Zsr=o(" \u2014 "),MW=a("a"),elr=o("PoolFormerForImageClassification"),olr=o(" (PoolFormer model)"),rlr=l(),E6=a("li"),dbe=a("strong"),tlr=o("regnet"),alr=o(" \u2014 "),EW=a("a"),nlr=o("RegNetForImageClassification"),slr=o(" (RegNet model)"),llr=l(),C6=a("li"),cbe=a("strong"),ilr=o("resnet"),dlr=o(" \u2014 "),CW=a("a"),clr=o("ResNetForImageClassification"),flr=o(" (ResNet model)"),mlr=l(),w6=a("li"),fbe=a("strong"),glr=o("segformer"),hlr=o(" \u2014 "),wW=a("a"),plr=o("SegformerForImageClassification"),_lr=o(" (SegFormer model)"),ulr=l(),A6=a("li"),mbe=a("strong"),blr=o("swin"),vlr=o(" \u2014 "),AW=a("a"),Flr=o("SwinForImageClassification"),Tlr=o(" (Swin Transformer model)"),Mlr=l(),L6=a("li"),gbe=a("strong"),Elr=o("van"),Clr=o(" \u2014 "),LW=a("a"),wlr=o("VanForImageClassification"),Alr=o(" (VAN model)"),Llr=l(),y6=a("li"),hbe=a("strong"),ylr=o("vit"),xlr=o(" \u2014 "),yW=a("a"),$lr=o("ViTForImageClassification"),klr=o(" (ViT model)"),Slr=l(),x6=a("p"),Rlr=o("The model is set in evaluation mode by default using "),pbe=a("code"),Plr=o("model.eval()"),Blr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Ilr=o("model.train()"),Nlr=l(),F($6.$$.fragment),uXe=l(),Md=a("h2"),k6=a("a"),ube=a("span"),F(Sy.$$.fragment),qlr=l(),bbe=a("span"),jlr=o("AutoModelForVision2Seq"),bXe=l(),Oo=a("div"),F(Ry.$$.fragment),Dlr=l(),Ed=a("p"),Glr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xW=a("a"),Olr=o("from_pretrained()"),Vlr=o(" class method or the "),$W=a("a"),Xlr=o("from_config()"),zlr=o(` class
method.`),Qlr=l(),Py=a("p"),Wlr=o("This class cannot be instantiated directly using "),vbe=a("code"),Hlr=o("__init__()"),Ulr=o(" (throws an error)."),Jlr=l(),Ft=a("div"),F(By.$$.fragment),Ylr=l(),Fbe=a("p"),Klr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zlr=l(),Cd=a("p"),eir=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),oir=o("not"),rir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),tir=o("from_pretrained()"),air=o(" to load the model weights."),nir=l(),F(S6.$$.fragment),sir=l(),io=a("div"),F(Iy.$$.fragment),lir=l(),Mbe=a("p"),iir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dir=l(),Wa=a("p"),cir=o("The model class to instantiate is selected based on the "),Ebe=a("code"),fir=o("model_type"),mir=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),pir=o("pretrained_model_name_or_path"),_ir=o(":"),uir=l(),Abe=a("ul"),R6=a("li"),Lbe=a("strong"),bir=o("vision-encoder-decoder"),vir=o(" \u2014 "),SW=a("a"),Fir=o("VisionEncoderDecoderModel"),Tir=o(" (Vision Encoder decoder model)"),Mir=l(),P6=a("p"),Eir=o("The model is set in evaluation mode by default using "),ybe=a("code"),Cir=o("model.eval()"),wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=a("code"),Air=o("model.train()"),Lir=l(),F(B6.$$.fragment),vXe=l(),wd=a("h2"),I6=a("a"),$be=a("span"),F(Ny.$$.fragment),yir=l(),kbe=a("span"),xir=o("AutoModelForVisualQuestionAnswering"),FXe=l(),Vo=a("div"),F(qy.$$.fragment),$ir=l(),Ad=a("p"),kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),RW=a("a"),Sir=o("from_pretrained()"),Rir=o(" class method or the "),PW=a("a"),Pir=o("from_config()"),Bir=o(` class
method.`),Iir=l(),jy=a("p"),Nir=o("This class cannot be instantiated directly using "),Sbe=a("code"),qir=o("__init__()"),jir=o(" (throws an error)."),Dir=l(),Tt=a("div"),F(Dy.$$.fragment),Gir=l(),Rbe=a("p"),Oir=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Vir=l(),Ld=a("p"),Xir=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),zir=o("not"),Qir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),Wir=o("from_pretrained()"),Hir=o(" to load the model weights."),Uir=l(),F(N6.$$.fragment),Jir=l(),co=a("div"),F(Gy.$$.fragment),Yir=l(),Bbe=a("p"),Kir=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Zir=l(),Ha=a("p"),edr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),odr=o("model_type"),rdr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),ndr=o("pretrained_model_name_or_path"),sdr=o(":"),ldr=l(),jbe=a("ul"),q6=a("li"),Dbe=a("strong"),idr=o("vilt"),ddr=o(" \u2014 "),IW=a("a"),cdr=o("ViltForQuestionAnswering"),fdr=o(" (ViLT model)"),mdr=l(),j6=a("p"),gdr=o("The model is set in evaluation mode by default using "),Gbe=a("code"),hdr=o("model.eval()"),pdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=a("code"),_dr=o("model.train()"),udr=l(),F(D6.$$.fragment),TXe=l(),yd=a("h2"),G6=a("a"),Vbe=a("span"),F(Oy.$$.fragment),bdr=l(),Xbe=a("span"),vdr=o("AutoModelForAudioClassification"),MXe=l(),Xo=a("div"),F(Vy.$$.fragment),Fdr=l(),xd=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NW=a("a"),Mdr=o("from_pretrained()"),Edr=o(" class method or the "),qW=a("a"),Cdr=o("from_config()"),wdr=o(` class
method.`),Adr=l(),Xy=a("p"),Ldr=o("This class cannot be instantiated directly using "),zbe=a("code"),ydr=o("__init__()"),xdr=o(" (throws an error)."),$dr=l(),Mt=a("div"),F(zy.$$.fragment),kdr=l(),Qbe=a("p"),Sdr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Rdr=l(),$d=a("p"),Pdr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Bdr=o("not"),Idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Ndr=o("from_pretrained()"),qdr=o(" to load the model weights."),jdr=l(),F(O6.$$.fragment),Ddr=l(),fo=a("div"),F(Qy.$$.fragment),Gdr=l(),Hbe=a("p"),Odr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Vdr=l(),Ua=a("p"),Xdr=o("The model class to instantiate is selected based on the "),Ube=a("code"),zdr=o("model_type"),Qdr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),Wdr=o("pretrained_model_name_or_path"),Hdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),Udr=o("pretrained_model_name_or_path"),Jdr=o(":"),Ydr=l(),Pe=a("ul"),V6=a("li"),Kbe=a("strong"),Kdr=o("data2vec-audio"),Zdr=o(" \u2014 "),DW=a("a"),ecr=o("Data2VecAudioForSequenceClassification"),ocr=o(" (Data2VecAudio model)"),rcr=l(),X6=a("li"),Zbe=a("strong"),tcr=o("hubert"),acr=o(" \u2014 "),GW=a("a"),ncr=o("HubertForSequenceClassification"),scr=o(" (Hubert model)"),lcr=l(),z6=a("li"),eve=a("strong"),icr=o("sew"),dcr=o(" \u2014 "),OW=a("a"),ccr=o("SEWForSequenceClassification"),fcr=o(" (SEW model)"),mcr=l(),Q6=a("li"),ove=a("strong"),gcr=o("sew-d"),hcr=o(" \u2014 "),VW=a("a"),pcr=o("SEWDForSequenceClassification"),_cr=o(" (SEW-D model)"),ucr=l(),W6=a("li"),rve=a("strong"),bcr=o("unispeech"),vcr=o(" \u2014 "),XW=a("a"),Fcr=o("UniSpeechForSequenceClassification"),Tcr=o(" (UniSpeech model)"),Mcr=l(),H6=a("li"),tve=a("strong"),Ecr=o("unispeech-sat"),Ccr=o(" \u2014 "),zW=a("a"),wcr=o("UniSpeechSatForSequenceClassification"),Acr=o(" (UniSpeechSat model)"),Lcr=l(),U6=a("li"),ave=a("strong"),ycr=o("wav2vec2"),xcr=o(" \u2014 "),QW=a("a"),$cr=o("Wav2Vec2ForSequenceClassification"),kcr=o(" (Wav2Vec2 model)"),Scr=l(),J6=a("li"),nve=a("strong"),Rcr=o("wav2vec2-conformer"),Pcr=o(" \u2014 "),WW=a("a"),Bcr=o("Wav2Vec2ConformerForSequenceClassification"),Icr=o(" (Wav2Vec2-Conformer model)"),Ncr=l(),Y6=a("li"),sve=a("strong"),qcr=o("wavlm"),jcr=o(" \u2014 "),HW=a("a"),Dcr=o("WavLMForSequenceClassification"),Gcr=o(" (WavLM model)"),Ocr=l(),K6=a("p"),Vcr=o("The model is set in evaluation mode by default using "),lve=a("code"),Xcr=o("model.eval()"),zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),Qcr=o("model.train()"),Wcr=l(),F(Z6.$$.fragment),EXe=l(),kd=a("h2"),eT=a("a"),dve=a("span"),F(Wy.$$.fragment),Hcr=l(),cve=a("span"),Ucr=o("AutoModelForAudioFrameClassification"),CXe=l(),zo=a("div"),F(Hy.$$.fragment),Jcr=l(),Sd=a("p"),Ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UW=a("a"),Kcr=o("from_pretrained()"),Zcr=o(" class method or the "),JW=a("a"),efr=o("from_config()"),ofr=o(` class
method.`),rfr=l(),Uy=a("p"),tfr=o("This class cannot be instantiated directly using "),fve=a("code"),afr=o("__init__()"),nfr=o(" (throws an error)."),sfr=l(),Et=a("div"),F(Jy.$$.fragment),lfr=l(),mve=a("p"),ifr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dfr=l(),Rd=a("p"),cfr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),ffr=o("not"),mfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),gfr=o("from_pretrained()"),hfr=o(" to load the model weights."),pfr=l(),F(oT.$$.fragment),_fr=l(),mo=a("div"),F(Yy.$$.fragment),ufr=l(),hve=a("p"),bfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vfr=l(),Ja=a("p"),Ffr=o("The model class to instantiate is selected based on the "),pve=a("code"),Tfr=o("model_type"),Mfr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),Efr=o("pretrained_model_name_or_path"),Cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(":"),Lfr=l(),et=a("ul"),rT=a("li"),bve=a("strong"),yfr=o("data2vec-audio"),xfr=o(" \u2014 "),KW=a("a"),$fr=o("Data2VecAudioForAudioFrameClassification"),kfr=o(" (Data2VecAudio model)"),Sfr=l(),tT=a("li"),vve=a("strong"),Rfr=o("unispeech-sat"),Pfr=o(" \u2014 "),ZW=a("a"),Bfr=o("UniSpeechSatForAudioFrameClassification"),Ifr=o(" (UniSpeechSat model)"),Nfr=l(),aT=a("li"),Fve=a("strong"),qfr=o("wav2vec2"),jfr=o(" \u2014 "),eH=a("a"),Dfr=o("Wav2Vec2ForAudioFrameClassification"),Gfr=o(" (Wav2Vec2 model)"),Ofr=l(),nT=a("li"),Tve=a("strong"),Vfr=o("wav2vec2-conformer"),Xfr=o(" \u2014 "),oH=a("a"),zfr=o("Wav2Vec2ConformerForAudioFrameClassification"),Qfr=o(" (Wav2Vec2-Conformer model)"),Wfr=l(),sT=a("li"),Mve=a("strong"),Hfr=o("wavlm"),Ufr=o(" \u2014 "),rH=a("a"),Jfr=o("WavLMForAudioFrameClassification"),Yfr=o(" (WavLM model)"),Kfr=l(),lT=a("p"),Zfr=o("The model is set in evaluation mode by default using "),Eve=a("code"),emr=o("model.eval()"),omr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),rmr=o("model.train()"),tmr=l(),F(iT.$$.fragment),wXe=l(),Pd=a("h2"),dT=a("a"),wve=a("span"),F(Ky.$$.fragment),amr=l(),Ave=a("span"),nmr=o("AutoModelForCTC"),AXe=l(),Qo=a("div"),F(Zy.$$.fragment),smr=l(),Bd=a("p"),lmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tH=a("a"),imr=o("from_pretrained()"),dmr=o(" class method or the "),aH=a("a"),cmr=o("from_config()"),fmr=o(` class
method.`),mmr=l(),e8=a("p"),gmr=o("This class cannot be instantiated directly using "),Lve=a("code"),hmr=o("__init__()"),pmr=o(" (throws an error)."),_mr=l(),Ct=a("div"),F(o8.$$.fragment),umr=l(),yve=a("p"),bmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vmr=l(),Id=a("p"),Fmr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Tmr=o("not"),Mmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),Emr=o("from_pretrained()"),Cmr=o(" to load the model weights."),wmr=l(),F(cT.$$.fragment),Amr=l(),go=a("div"),F(r8.$$.fragment),Lmr=l(),$ve=a("p"),ymr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xmr=l(),Ya=a("p"),$mr=o("The model class to instantiate is selected based on the "),kve=a("code"),kmr=o("model_type"),Smr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),Rmr=o("pretrained_model_name_or_path"),Pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),Bmr=o("pretrained_model_name_or_path"),Imr=o(":"),Nmr=l(),Le=a("ul"),fT=a("li"),Pve=a("strong"),qmr=o("data2vec-audio"),jmr=o(" \u2014 "),sH=a("a"),Dmr=o("Data2VecAudioForCTC"),Gmr=o(" (Data2VecAudio model)"),Omr=l(),mT=a("li"),Bve=a("strong"),Vmr=o("hubert"),Xmr=o(" \u2014 "),lH=a("a"),zmr=o("HubertForCTC"),Qmr=o(" (Hubert model)"),Wmr=l(),gT=a("li"),Ive=a("strong"),Hmr=o("mctct"),Umr=o(" \u2014 "),iH=a("a"),Jmr=o("MCTCTForCTC"),Ymr=o(" (M-CTC-T model)"),Kmr=l(),hT=a("li"),Nve=a("strong"),Zmr=o("sew"),egr=o(" \u2014 "),dH=a("a"),ogr=o("SEWForCTC"),rgr=o(" (SEW model)"),tgr=l(),pT=a("li"),qve=a("strong"),agr=o("sew-d"),ngr=o(" \u2014 "),cH=a("a"),sgr=o("SEWDForCTC"),lgr=o(" (SEW-D model)"),igr=l(),_T=a("li"),jve=a("strong"),dgr=o("unispeech"),cgr=o(" \u2014 "),fH=a("a"),fgr=o("UniSpeechForCTC"),mgr=o(" (UniSpeech model)"),ggr=l(),uT=a("li"),Dve=a("strong"),hgr=o("unispeech-sat"),pgr=o(" \u2014 "),mH=a("a"),_gr=o("UniSpeechSatForCTC"),ugr=o(" (UniSpeechSat model)"),bgr=l(),bT=a("li"),Gve=a("strong"),vgr=o("wav2vec2"),Fgr=o(" \u2014 "),gH=a("a"),Tgr=o("Wav2Vec2ForCTC"),Mgr=o(" (Wav2Vec2 model)"),Egr=l(),vT=a("li"),Ove=a("strong"),Cgr=o("wav2vec2-conformer"),wgr=o(" \u2014 "),hH=a("a"),Agr=o("Wav2Vec2ConformerForCTC"),Lgr=o(" (Wav2Vec2-Conformer model)"),ygr=l(),FT=a("li"),Vve=a("strong"),xgr=o("wavlm"),$gr=o(" \u2014 "),pH=a("a"),kgr=o("WavLMForCTC"),Sgr=o(" (WavLM model)"),Rgr=l(),TT=a("p"),Pgr=o("The model is set in evaluation mode by default using "),Xve=a("code"),Bgr=o("model.eval()"),Igr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=a("code"),Ngr=o("model.train()"),qgr=l(),F(MT.$$.fragment),LXe=l(),Nd=a("h2"),ET=a("a"),Qve=a("span"),F(t8.$$.fragment),jgr=l(),Wve=a("span"),Dgr=o("AutoModelForSpeechSeq2Seq"),yXe=l(),Wo=a("div"),F(a8.$$.fragment),Ggr=l(),qd=a("p"),Ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_H=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" class method or the "),uH=a("a"),zgr=o("from_config()"),Qgr=o(` class
method.`),Wgr=l(),n8=a("p"),Hgr=o("This class cannot be instantiated directly using "),Hve=a("code"),Ugr=o("__init__()"),Jgr=o(" (throws an error)."),Ygr=l(),wt=a("div"),F(s8.$$.fragment),Kgr=l(),Uve=a("p"),Zgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ehr=l(),jd=a("p"),ohr=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),rhr=o("not"),thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),ahr=o("from_pretrained()"),nhr=o(" to load the model weights."),shr=l(),F(CT.$$.fragment),lhr=l(),ho=a("div"),F(l8.$$.fragment),ihr=l(),Yve=a("p"),dhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),chr=l(),Ka=a("p"),fhr=o("The model class to instantiate is selected based on the "),Kve=a("code"),mhr=o("model_type"),ghr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),hhr=o("pretrained_model_name_or_path"),phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),_hr=o("pretrained_model_name_or_path"),uhr=o(":"),bhr=l(),i8=a("ul"),wT=a("li"),o3e=a("strong"),vhr=o("speech-encoder-decoder"),Fhr=o(" \u2014 "),vH=a("a"),Thr=o("SpeechEncoderDecoderModel"),Mhr=o(" (Speech Encoder decoder model)"),Ehr=l(),AT=a("li"),r3e=a("strong"),Chr=o("speech_to_text"),whr=o(" \u2014 "),FH=a("a"),Ahr=o("Speech2TextForConditionalGeneration"),Lhr=o(" (Speech2Text model)"),yhr=l(),LT=a("p"),xhr=o("The model is set in evaluation mode by default using "),t3e=a("code"),$hr=o("model.eval()"),khr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a3e=a("code"),Shr=o("model.train()"),Rhr=l(),F(yT.$$.fragment),xXe=l(),Dd=a("h2"),xT=a("a"),n3e=a("span"),F(d8.$$.fragment),Phr=l(),s3e=a("span"),Bhr=o("AutoModelForAudioXVector"),$Xe=l(),Ho=a("div"),F(c8.$$.fragment),Ihr=l(),Gd=a("p"),Nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TH=a("a"),qhr=o("from_pretrained()"),jhr=o(" class method or the "),MH=a("a"),Dhr=o("from_config()"),Ghr=o(` class
method.`),Ohr=l(),f8=a("p"),Vhr=o("This class cannot be instantiated directly using "),l3e=a("code"),Xhr=o("__init__()"),zhr=o(" (throws an error)."),Qhr=l(),At=a("div"),F(m8.$$.fragment),Whr=l(),i3e=a("p"),Hhr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Uhr=l(),Od=a("p"),Jhr=o(`Note:
Loading a model from its configuration file does `),d3e=a("strong"),Yhr=o("not"),Khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Zhr=o("from_pretrained()"),epr=o(" to load the model weights."),opr=l(),F($T.$$.fragment),rpr=l(),po=a("div"),F(g8.$$.fragment),tpr=l(),c3e=a("p"),apr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),npr=l(),Za=a("p"),spr=o("The model class to instantiate is selected based on the "),f3e=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),m3e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(":"),gpr=l(),ot=a("ul"),kT=a("li"),h3e=a("strong"),hpr=o("data2vec-audio"),ppr=o(" \u2014 "),CH=a("a"),_pr=o("Data2VecAudioForXVector"),upr=o(" (Data2VecAudio model)"),bpr=l(),ST=a("li"),p3e=a("strong"),vpr=o("unispeech-sat"),Fpr=o(" \u2014 "),wH=a("a"),Tpr=o("UniSpeechSatForXVector"),Mpr=o(" (UniSpeechSat model)"),Epr=l(),RT=a("li"),_3e=a("strong"),Cpr=o("wav2vec2"),wpr=o(" \u2014 "),AH=a("a"),Apr=o("Wav2Vec2ForXVector"),Lpr=o(" (Wav2Vec2 model)"),ypr=l(),PT=a("li"),u3e=a("strong"),xpr=o("wav2vec2-conformer"),$pr=o(" \u2014 "),LH=a("a"),kpr=o("Wav2Vec2ConformerForXVector"),Spr=o(" (Wav2Vec2-Conformer model)"),Rpr=l(),BT=a("li"),b3e=a("strong"),Ppr=o("wavlm"),Bpr=o(" \u2014 "),yH=a("a"),Ipr=o("WavLMForXVector"),Npr=o(" (WavLM model)"),qpr=l(),IT=a("p"),jpr=o("The model is set in evaluation mode by default using "),v3e=a("code"),Dpr=o("model.eval()"),Gpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F3e=a("code"),Opr=o("model.train()"),Vpr=l(),F(NT.$$.fragment),kXe=l(),Vd=a("h2"),qT=a("a"),T3e=a("span"),F(h8.$$.fragment),Xpr=l(),M3e=a("span"),zpr=o("AutoModelForMaskedImageModeling"),SXe=l(),Uo=a("div"),F(p8.$$.fragment),Qpr=l(),Xd=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xH=a("a"),Hpr=o("from_pretrained()"),Upr=o(" class method or the "),$H=a("a"),Jpr=o("from_config()"),Ypr=o(` class
method.`),Kpr=l(),_8=a("p"),Zpr=o("This class cannot be instantiated directly using "),E3e=a("code"),e_r=o("__init__()"),o_r=o(" (throws an error)."),r_r=l(),Lt=a("div"),F(u8.$$.fragment),t_r=l(),C3e=a("p"),a_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),n_r=l(),zd=a("p"),s_r=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),l_r=o("not"),i_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),d_r=o("from_pretrained()"),c_r=o(" to load the model weights."),f_r=l(),F(jT.$$.fragment),m_r=l(),_o=a("div"),F(b8.$$.fragment),g_r=l(),A3e=a("p"),h_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),p_r=l(),en=a("p"),__r=o("The model class to instantiate is selected based on the "),L3e=a("code"),u_r=o("model_type"),b_r=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),v_r=o("pretrained_model_name_or_path"),F_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),T_r=o("pretrained_model_name_or_path"),M_r=o(":"),E_r=l(),Qd=a("ul"),DT=a("li"),$3e=a("strong"),C_r=o("deit"),w_r=o(" \u2014 "),SH=a("a"),A_r=o("DeiTForMaskedImageModeling"),L_r=o(" (DeiT model)"),y_r=l(),GT=a("li"),k3e=a("strong"),x_r=o("swin"),$_r=o(" \u2014 "),RH=a("a"),k_r=o("SwinForMaskedImageModeling"),S_r=o(" (Swin Transformer model)"),R_r=l(),OT=a("li"),S3e=a("strong"),P_r=o("vit"),B_r=o(" \u2014 "),PH=a("a"),I_r=o("ViTForMaskedImageModeling"),N_r=o(" (ViT model)"),q_r=l(),VT=a("p"),j_r=o("The model is set in evaluation mode by default using "),R3e=a("code"),D_r=o("model.eval()"),G_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P3e=a("code"),O_r=o("model.train()"),V_r=l(),F(XT.$$.fragment),RXe=l(),Wd=a("h2"),zT=a("a"),B3e=a("span"),F(v8.$$.fragment),X_r=l(),I3e=a("span"),z_r=o("AutoModelForObjectDetection"),PXe=l(),Jo=a("div"),F(F8.$$.fragment),Q_r=l(),Hd=a("p"),W_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BH=a("a"),H_r=o("from_pretrained()"),U_r=o(" class method or the "),IH=a("a"),J_r=o("from_config()"),Y_r=o(` class
method.`),K_r=l(),T8=a("p"),Z_r=o("This class cannot be instantiated directly using "),N3e=a("code"),eur=o("__init__()"),our=o(" (throws an error)."),rur=l(),yt=a("div"),F(M8.$$.fragment),tur=l(),q3e=a("p"),aur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nur=l(),Ud=a("p"),sur=o(`Note:
Loading a model from its configuration file does `),j3e=a("strong"),lur=o("not"),iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),dur=o("from_pretrained()"),cur=o(" to load the model weights."),fur=l(),F(QT.$$.fragment),mur=l(),uo=a("div"),F(E8.$$.fragment),gur=l(),D3e=a("p"),hur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pur=l(),on=a("p"),_ur=o("The model class to instantiate is selected based on the "),G3e=a("code"),uur=o("model_type"),bur=o(` property of the config object (either
passed as an argument or loaded from `),O3e=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V3e=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(":"),Eur=l(),C8=a("ul"),WT=a("li"),X3e=a("strong"),Cur=o("detr"),wur=o(" \u2014 "),qH=a("a"),Aur=o("DetrForObjectDetection"),Lur=o(" (DETR model)"),yur=l(),HT=a("li"),z3e=a("strong"),xur=o("yolos"),$ur=o(" \u2014 "),jH=a("a"),kur=o("YolosForObjectDetection"),Sur=o(" (YOLOS model)"),Rur=l(),UT=a("p"),Pur=o("The model is set in evaluation mode by default using "),Q3e=a("code"),Bur=o("model.eval()"),Iur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W3e=a("code"),Nur=o("model.train()"),qur=l(),F(JT.$$.fragment),BXe=l(),Jd=a("h2"),YT=a("a"),H3e=a("span"),F(w8.$$.fragment),jur=l(),U3e=a("span"),Dur=o("AutoModelForImageSegmentation"),IXe=l(),Yo=a("div"),F(A8.$$.fragment),Gur=l(),Yd=a("p"),Our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),DH=a("a"),Vur=o("from_pretrained()"),Xur=o(" class method or the "),GH=a("a"),zur=o("from_config()"),Qur=o(` class
method.`),Wur=l(),L8=a("p"),Hur=o("This class cannot be instantiated directly using "),J3e=a("code"),Uur=o("__init__()"),Jur=o(" (throws an error)."),Yur=l(),xt=a("div"),F(y8.$$.fragment),Kur=l(),Y3e=a("p"),Zur=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),e1r=l(),Kd=a("p"),o1r=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),r1r=o("not"),t1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),a1r=o("from_pretrained()"),n1r=o(" to load the model weights."),s1r=l(),F(KT.$$.fragment),l1r=l(),bo=a("div"),F(x8.$$.fragment),i1r=l(),Z3e=a("p"),d1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),c1r=l(),rn=a("p"),f1r=o("The model class to instantiate is selected based on the "),eFe=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),tFe=a("ul"),ZT=a("li"),aFe=a("strong"),v1r=o("detr"),F1r=o(" \u2014 "),VH=a("a"),T1r=o("DetrForSegmentation"),M1r=o(" (DETR model)"),E1r=l(),e7=a("p"),C1r=o("The model is set in evaluation mode by default using "),nFe=a("code"),w1r=o("model.eval()"),A1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),L1r=o("model.train()"),y1r=l(),F(o7.$$.fragment),NXe=l(),Zd=a("h2"),r7=a("a"),lFe=a("span"),F($8.$$.fragment),x1r=l(),iFe=a("span"),$1r=o("AutoModelForSemanticSegmentation"),qXe=l(),Ko=a("div"),F(k8.$$.fragment),k1r=l(),ec=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),XH=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),zH=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),N1r=l(),S8=a("p"),q1r=o("This class cannot be instantiated directly using "),dFe=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),$t=a("div"),F(R8.$$.fragment),O1r=l(),cFe=a("p"),V1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),X1r=l(),oc=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),Q1r=o("not"),W1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(t7.$$.fragment),Y1r=l(),vo=a("div"),F(P8.$$.fragment),K1r=l(),mFe=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),e2r=l(),tn=a("p"),o2r=o("The model class to instantiate is selected based on the "),gFe=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),rt=a("ul"),a7=a("li"),_Fe=a("strong"),d2r=o("beit"),c2r=o(" \u2014 "),WH=a("a"),f2r=o("BeitForSemanticSegmentation"),m2r=o(" (BEiT model)"),g2r=l(),n7=a("li"),uFe=a("strong"),h2r=o("data2vec-vision"),p2r=o(" \u2014 "),HH=a("a"),_2r=o("Data2VecVisionForSemanticSegmentation"),u2r=o(" (Data2VecVision model)"),b2r=l(),s7=a("li"),bFe=a("strong"),v2r=o("dpt"),F2r=o(" \u2014 "),UH=a("a"),T2r=o("DPTForSemanticSegmentation"),M2r=o(" (DPT model)"),E2r=l(),l7=a("li"),vFe=a("strong"),C2r=o("mobilevit"),w2r=o(" \u2014 "),JH=a("a"),A2r=o("MobileViTForSemanticSegmentation"),L2r=o(" (MobileViT model)"),y2r=l(),i7=a("li"),FFe=a("strong"),x2r=o("segformer"),$2r=o(" \u2014 "),YH=a("a"),k2r=o("SegformerForSemanticSegmentation"),S2r=o(" (SegFormer model)"),R2r=l(),d7=a("p"),P2r=o("The model is set in evaluation mode by default using "),TFe=a("code"),B2r=o("model.eval()"),I2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MFe=a("code"),N2r=o("model.train()"),q2r=l(),F(c7.$$.fragment),jXe=l(),rc=a("h2"),f7=a("a"),EFe=a("span"),F(B8.$$.fragment),j2r=l(),CFe=a("span"),D2r=o("AutoModelForInstanceSegmentation"),DXe=l(),Zo=a("div"),F(I8.$$.fragment),G2r=l(),tc=a("p"),O2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KH=a("a"),V2r=o("from_pretrained()"),X2r=o(" class method or the "),ZH=a("a"),z2r=o("from_config()"),Q2r=o(` class
method.`),W2r=l(),N8=a("p"),H2r=o("This class cannot be instantiated directly using "),wFe=a("code"),U2r=o("__init__()"),J2r=o(" (throws an error)."),Y2r=l(),kt=a("div"),F(q8.$$.fragment),K2r=l(),AFe=a("p"),Z2r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ebr=l(),ac=a("p"),obr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),rbr=o("not"),tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),abr=o("from_pretrained()"),nbr=o(" to load the model weights."),sbr=l(),F(m7.$$.fragment),lbr=l(),Fo=a("div"),F(j8.$$.fragment),ibr=l(),yFe=a("p"),dbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cbr=l(),an=a("p"),fbr=o("The model class to instantiate is selected based on the "),xFe=a("code"),mbr=o("model_type"),gbr=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),_br=o("pretrained_model_name_or_path"),ubr=o(":"),bbr=l(),SFe=a("ul"),g7=a("li"),RFe=a("strong"),vbr=o("maskformer"),Fbr=o(" \u2014 "),oU=a("a"),Tbr=o("MaskFormerForInstanceSegmentation"),Mbr=o(" (MaskFormer model)"),Ebr=l(),h7=a("p"),Cbr=o("The model is set in evaluation mode by default using "),PFe=a("code"),wbr=o("model.eval()"),Abr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=a("code"),Lbr=o("model.train()"),ybr=l(),F(p7.$$.fragment),GXe=l(),nc=a("h2"),_7=a("a"),IFe=a("span"),F(D8.$$.fragment),xbr=l(),NFe=a("span"),$br=o("TFAutoModel"),OXe=l(),er=a("div"),F(G8.$$.fragment),kbr=l(),sc=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rU=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" class method or the "),tU=a("a"),Bbr=o("from_config()"),Ibr=o(` class
method.`),Nbr=l(),O8=a("p"),qbr=o("This class cannot be instantiated directly using "),qFe=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),St=a("div"),F(V8.$$.fragment),Obr=l(),jFe=a("p"),Vbr=o("Instantiates one of the base model classes of the library from a configuration."),Xbr=l(),lc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),Qbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),F(u7.$$.fragment),Ybr=l(),yr=a("div"),F(X8.$$.fragment),Kbr=l(),GFe=a("p"),Zbr=o("Instantiate one of the base model classes of the library from a pretrained model."),evr=l(),nn=a("p"),ovr=o("The model class to instantiate is selected based on the "),OFe=a("code"),rvr=o("model_type"),tvr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(":"),ivr=l(),j=a("ul"),b7=a("li"),zFe=a("strong"),dvr=o("albert"),cvr=o(" \u2014 "),nU=a("a"),fvr=o("TFAlbertModel"),mvr=o(" (ALBERT model)"),gvr=l(),v7=a("li"),QFe=a("strong"),hvr=o("bart"),pvr=o(" \u2014 "),sU=a("a"),_vr=o("TFBartModel"),uvr=o(" (BART model)"),bvr=l(),F7=a("li"),WFe=a("strong"),vvr=o("bert"),Fvr=o(" \u2014 "),lU=a("a"),Tvr=o("TFBertModel"),Mvr=o(" (BERT model)"),Evr=l(),T7=a("li"),HFe=a("strong"),Cvr=o("blenderbot"),wvr=o(" \u2014 "),iU=a("a"),Avr=o("TFBlenderbotModel"),Lvr=o(" (Blenderbot model)"),yvr=l(),M7=a("li"),UFe=a("strong"),xvr=o("blenderbot-small"),$vr=o(" \u2014 "),dU=a("a"),kvr=o("TFBlenderbotSmallModel"),Svr=o(" (BlenderbotSmall model)"),Rvr=l(),E7=a("li"),JFe=a("strong"),Pvr=o("camembert"),Bvr=o(" \u2014 "),cU=a("a"),Ivr=o("TFCamembertModel"),Nvr=o(" (CamemBERT model)"),qvr=l(),C7=a("li"),YFe=a("strong"),jvr=o("clip"),Dvr=o(" \u2014 "),fU=a("a"),Gvr=o("TFCLIPModel"),Ovr=o(" (CLIP model)"),Vvr=l(),w7=a("li"),KFe=a("strong"),Xvr=o("convbert"),zvr=o(" \u2014 "),mU=a("a"),Qvr=o("TFConvBertModel"),Wvr=o(" (ConvBERT model)"),Hvr=l(),A7=a("li"),ZFe=a("strong"),Uvr=o("convnext"),Jvr=o(" \u2014 "),gU=a("a"),Yvr=o("TFConvNextModel"),Kvr=o(" (ConvNeXT model)"),Zvr=l(),L7=a("li"),e6e=a("strong"),e3r=o("ctrl"),o3r=o(" \u2014 "),hU=a("a"),r3r=o("TFCTRLModel"),t3r=o(" (CTRL model)"),a3r=l(),y7=a("li"),o6e=a("strong"),n3r=o("data2vec-vision"),s3r=o(" \u2014 "),pU=a("a"),l3r=o("TFData2VecVisionModel"),i3r=o(" (Data2VecVision model)"),d3r=l(),x7=a("li"),r6e=a("strong"),c3r=o("deberta"),f3r=o(" \u2014 "),_U=a("a"),m3r=o("TFDebertaModel"),g3r=o(" (DeBERTa model)"),h3r=l(),$7=a("li"),t6e=a("strong"),p3r=o("deberta-v2"),_3r=o(" \u2014 "),uU=a("a"),u3r=o("TFDebertaV2Model"),b3r=o(" (DeBERTa-v2 model)"),v3r=l(),k7=a("li"),a6e=a("strong"),F3r=o("distilbert"),T3r=o(" \u2014 "),bU=a("a"),M3r=o("TFDistilBertModel"),E3r=o(" (DistilBERT model)"),C3r=l(),S7=a("li"),n6e=a("strong"),w3r=o("dpr"),A3r=o(" \u2014 "),vU=a("a"),L3r=o("TFDPRQuestionEncoder"),y3r=o(" (DPR model)"),x3r=l(),R7=a("li"),s6e=a("strong"),$3r=o("electra"),k3r=o(" \u2014 "),FU=a("a"),S3r=o("TFElectraModel"),R3r=o(" (ELECTRA model)"),P3r=l(),P7=a("li"),l6e=a("strong"),B3r=o("flaubert"),I3r=o(" \u2014 "),TU=a("a"),N3r=o("TFFlaubertModel"),q3r=o(" (FlauBERT model)"),j3r=l(),Us=a("li"),i6e=a("strong"),D3r=o("funnel"),G3r=o(" \u2014 "),MU=a("a"),O3r=o("TFFunnelModel"),V3r=o(" or "),EU=a("a"),X3r=o("TFFunnelBaseModel"),z3r=o(" (Funnel Transformer model)"),Q3r=l(),B7=a("li"),d6e=a("strong"),W3r=o("gpt2"),H3r=o(" \u2014 "),CU=a("a"),U3r=o("TFGPT2Model"),J3r=o(" (OpenAI GPT-2 model)"),Y3r=l(),I7=a("li"),c6e=a("strong"),K3r=o("gptj"),Z3r=o(" \u2014 "),wU=a("a"),eFr=o("TFGPTJModel"),oFr=o(" (GPT-J model)"),rFr=l(),N7=a("li"),f6e=a("strong"),tFr=o("hubert"),aFr=o(" \u2014 "),AU=a("a"),nFr=o("TFHubertModel"),sFr=o(" (Hubert model)"),lFr=l(),q7=a("li"),m6e=a("strong"),iFr=o("layoutlm"),dFr=o(" \u2014 "),LU=a("a"),cFr=o("TFLayoutLMModel"),fFr=o(" (LayoutLM model)"),mFr=l(),j7=a("li"),g6e=a("strong"),gFr=o("led"),hFr=o(" \u2014 "),yU=a("a"),pFr=o("TFLEDModel"),_Fr=o(" (LED model)"),uFr=l(),D7=a("li"),h6e=a("strong"),bFr=o("longformer"),vFr=o(" \u2014 "),xU=a("a"),FFr=o("TFLongformerModel"),TFr=o(" (Longformer model)"),MFr=l(),G7=a("li"),p6e=a("strong"),EFr=o("lxmert"),CFr=o(" \u2014 "),$U=a("a"),wFr=o("TFLxmertModel"),AFr=o(" (LXMERT model)"),LFr=l(),O7=a("li"),_6e=a("strong"),yFr=o("marian"),xFr=o(" \u2014 "),kU=a("a"),$Fr=o("TFMarianModel"),kFr=o(" (Marian model)"),SFr=l(),V7=a("li"),u6e=a("strong"),RFr=o("mbart"),PFr=o(" \u2014 "),SU=a("a"),BFr=o("TFMBartModel"),IFr=o(" (mBART model)"),NFr=l(),X7=a("li"),b6e=a("strong"),qFr=o("mobilebert"),jFr=o(" \u2014 "),RU=a("a"),DFr=o("TFMobileBertModel"),GFr=o(" (MobileBERT model)"),OFr=l(),z7=a("li"),v6e=a("strong"),VFr=o("mpnet"),XFr=o(" \u2014 "),PU=a("a"),zFr=o("TFMPNetModel"),QFr=o(" (MPNet model)"),WFr=l(),Q7=a("li"),F6e=a("strong"),HFr=o("mt5"),UFr=o(" \u2014 "),BU=a("a"),JFr=o("TFMT5Model"),YFr=o(" (MT5 model)"),KFr=l(),W7=a("li"),T6e=a("strong"),ZFr=o("openai-gpt"),e6r=o(" \u2014 "),IU=a("a"),o6r=o("TFOpenAIGPTModel"),r6r=o(" (OpenAI GPT model)"),t6r=l(),H7=a("li"),M6e=a("strong"),a6r=o("opt"),n6r=o(" \u2014 "),NU=a("a"),s6r=o("TFOPTModel"),l6r=o(" (OPT model)"),i6r=l(),U7=a("li"),E6e=a("strong"),d6r=o("pegasus"),c6r=o(" \u2014 "),qU=a("a"),f6r=o("TFPegasusModel"),m6r=o(" (Pegasus model)"),g6r=l(),J7=a("li"),C6e=a("strong"),h6r=o("regnet"),p6r=o(" \u2014 "),jU=a("a"),_6r=o("TFRegNetModel"),u6r=o(" (RegNet model)"),b6r=l(),Y7=a("li"),w6e=a("strong"),v6r=o("rembert"),F6r=o(" \u2014 "),DU=a("a"),T6r=o("TFRemBertModel"),M6r=o(" (RemBERT model)"),E6r=l(),K7=a("li"),A6e=a("strong"),C6r=o("roberta"),w6r=o(" \u2014 "),GU=a("a"),A6r=o("TFRobertaModel"),L6r=o(" (RoBERTa model)"),y6r=l(),Z7=a("li"),L6e=a("strong"),x6r=o("roformer"),$6r=o(" \u2014 "),OU=a("a"),k6r=o("TFRoFormerModel"),S6r=o(" (RoFormer model)"),R6r=l(),e9=a("li"),y6e=a("strong"),P6r=o("speech_to_text"),B6r=o(" \u2014 "),VU=a("a"),I6r=o("TFSpeech2TextModel"),N6r=o(" (Speech2Text model)"),q6r=l(),o9=a("li"),x6e=a("strong"),j6r=o("swin"),D6r=o(" \u2014 "),XU=a("a"),G6r=o("TFSwinModel"),O6r=o(" (Swin Transformer model)"),V6r=l(),r9=a("li"),$6e=a("strong"),X6r=o("t5"),z6r=o(" \u2014 "),zU=a("a"),Q6r=o("TFT5Model"),W6r=o(" (T5 model)"),H6r=l(),t9=a("li"),k6e=a("strong"),U6r=o("tapas"),J6r=o(" \u2014 "),QU=a("a"),Y6r=o("TFTapasModel"),K6r=o(" (TAPAS model)"),Z6r=l(),a9=a("li"),S6e=a("strong"),eTr=o("transfo-xl"),oTr=o(" \u2014 "),WU=a("a"),rTr=o("TFTransfoXLModel"),tTr=o(" (Transformer-XL model)"),aTr=l(),n9=a("li"),R6e=a("strong"),nTr=o("vit"),sTr=o(" \u2014 "),HU=a("a"),lTr=o("TFViTModel"),iTr=o(" (ViT model)"),dTr=l(),s9=a("li"),P6e=a("strong"),cTr=o("vit_mae"),fTr=o(" \u2014 "),UU=a("a"),mTr=o("TFViTMAEModel"),gTr=o(" (ViTMAE model)"),hTr=l(),l9=a("li"),B6e=a("strong"),pTr=o("wav2vec2"),_Tr=o(" \u2014 "),JU=a("a"),uTr=o("TFWav2Vec2Model"),bTr=o(" (Wav2Vec2 model)"),vTr=l(),i9=a("li"),I6e=a("strong"),FTr=o("xlm"),TTr=o(" \u2014 "),YU=a("a"),MTr=o("TFXLMModel"),ETr=o(" (XLM model)"),CTr=l(),d9=a("li"),N6e=a("strong"),wTr=o("xlm-roberta"),ATr=o(" \u2014 "),KU=a("a"),LTr=o("TFXLMRobertaModel"),yTr=o(" (XLM-RoBERTa model)"),xTr=l(),c9=a("li"),q6e=a("strong"),$Tr=o("xlnet"),kTr=o(" \u2014 "),ZU=a("a"),STr=o("TFXLNetModel"),RTr=o(" (XLNet model)"),PTr=l(),F(f9.$$.fragment),VXe=l(),ic=a("h2"),m9=a("a"),j6e=a("span"),F(z8.$$.fragment),BTr=l(),D6e=a("span"),ITr=o("TFAutoModelForPreTraining"),XXe=l(),or=a("div"),F(Q8.$$.fragment),NTr=l(),dc=a("p"),qTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eJ=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),oJ=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),W8=a("p"),XTr=o("This class cannot be instantiated directly using "),G6e=a("code"),zTr=o("__init__()"),QTr=o(" (throws an error)."),WTr=l(),Rt=a("div"),F(H8.$$.fragment),HTr=l(),O6e=a("p"),UTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JTr=l(),cc=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),KTr=o("not"),ZTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),e7r=o("from_pretrained()"),o7r=o(" to load the model weights."),r7r=l(),F(g9.$$.fragment),t7r=l(),xr=a("div"),F(U8.$$.fragment),a7r=l(),X6e=a("p"),n7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s7r=l(),sn=a("p"),l7r=o("The model class to instantiate is selected based on the "),z6e=a("code"),i7r=o("model_type"),d7r=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(":"),h7r=l(),se=a("ul"),h9=a("li"),H6e=a("strong"),p7r=o("albert"),_7r=o(" \u2014 "),tJ=a("a"),u7r=o("TFAlbertForPreTraining"),b7r=o(" (ALBERT model)"),v7r=l(),p9=a("li"),U6e=a("strong"),F7r=o("bart"),T7r=o(" \u2014 "),aJ=a("a"),M7r=o("TFBartForConditionalGeneration"),E7r=o(" (BART model)"),C7r=l(),_9=a("li"),J6e=a("strong"),w7r=o("bert"),A7r=o(" \u2014 "),nJ=a("a"),L7r=o("TFBertForPreTraining"),y7r=o(" (BERT model)"),x7r=l(),u9=a("li"),Y6e=a("strong"),$7r=o("camembert"),k7r=o(" \u2014 "),sJ=a("a"),S7r=o("TFCamembertForMaskedLM"),R7r=o(" (CamemBERT model)"),P7r=l(),b9=a("li"),K6e=a("strong"),B7r=o("ctrl"),I7r=o(" \u2014 "),lJ=a("a"),N7r=o("TFCTRLLMHeadModel"),q7r=o(" (CTRL model)"),j7r=l(),v9=a("li"),Z6e=a("strong"),D7r=o("distilbert"),G7r=o(" \u2014 "),iJ=a("a"),O7r=o("TFDistilBertForMaskedLM"),V7r=o(" (DistilBERT model)"),X7r=l(),F9=a("li"),eTe=a("strong"),z7r=o("electra"),Q7r=o(" \u2014 "),dJ=a("a"),W7r=o("TFElectraForPreTraining"),H7r=o(" (ELECTRA model)"),U7r=l(),T9=a("li"),oTe=a("strong"),J7r=o("flaubert"),Y7r=o(" \u2014 "),cJ=a("a"),K7r=o("TFFlaubertWithLMHeadModel"),Z7r=o(" (FlauBERT model)"),e9r=l(),M9=a("li"),rTe=a("strong"),o9r=o("funnel"),r9r=o(" \u2014 "),fJ=a("a"),t9r=o("TFFunnelForPreTraining"),a9r=o(" (Funnel Transformer model)"),n9r=l(),E9=a("li"),tTe=a("strong"),s9r=o("gpt2"),l9r=o(" \u2014 "),mJ=a("a"),i9r=o("TFGPT2LMHeadModel"),d9r=o(" (OpenAI GPT-2 model)"),c9r=l(),C9=a("li"),aTe=a("strong"),f9r=o("layoutlm"),m9r=o(" \u2014 "),gJ=a("a"),g9r=o("TFLayoutLMForMaskedLM"),h9r=o(" (LayoutLM model)"),p9r=l(),w9=a("li"),nTe=a("strong"),_9r=o("lxmert"),u9r=o(" \u2014 "),hJ=a("a"),b9r=o("TFLxmertForPreTraining"),v9r=o(" (LXMERT model)"),F9r=l(),A9=a("li"),sTe=a("strong"),T9r=o("mobilebert"),M9r=o(" \u2014 "),pJ=a("a"),E9r=o("TFMobileBertForPreTraining"),C9r=o(" (MobileBERT model)"),w9r=l(),L9=a("li"),lTe=a("strong"),A9r=o("mpnet"),L9r=o(" \u2014 "),_J=a("a"),y9r=o("TFMPNetForMaskedLM"),x9r=o(" (MPNet model)"),$9r=l(),y9=a("li"),iTe=a("strong"),k9r=o("openai-gpt"),S9r=o(" \u2014 "),uJ=a("a"),R9r=o("TFOpenAIGPTLMHeadModel"),P9r=o(" (OpenAI GPT model)"),B9r=l(),x9=a("li"),dTe=a("strong"),I9r=o("roberta"),N9r=o(" \u2014 "),bJ=a("a"),q9r=o("TFRobertaForMaskedLM"),j9r=o(" (RoBERTa model)"),D9r=l(),$9=a("li"),cTe=a("strong"),G9r=o("t5"),O9r=o(" \u2014 "),vJ=a("a"),V9r=o("TFT5ForConditionalGeneration"),X9r=o(" (T5 model)"),z9r=l(),k9=a("li"),fTe=a("strong"),Q9r=o("tapas"),W9r=o(" \u2014 "),FJ=a("a"),H9r=o("TFTapasForMaskedLM"),U9r=o(" (TAPAS model)"),J9r=l(),S9=a("li"),mTe=a("strong"),Y9r=o("transfo-xl"),K9r=o(" \u2014 "),TJ=a("a"),Z9r=o("TFTransfoXLLMHeadModel"),eMr=o(" (Transformer-XL model)"),oMr=l(),R9=a("li"),gTe=a("strong"),rMr=o("vit_mae"),tMr=o(" \u2014 "),MJ=a("a"),aMr=o("TFViTMAEForPreTraining"),nMr=o(" (ViTMAE model)"),sMr=l(),P9=a("li"),hTe=a("strong"),lMr=o("xlm"),iMr=o(" \u2014 "),EJ=a("a"),dMr=o("TFXLMWithLMHeadModel"),cMr=o(" (XLM model)"),fMr=l(),B9=a("li"),pTe=a("strong"),mMr=o("xlm-roberta"),gMr=o(" \u2014 "),CJ=a("a"),hMr=o("TFXLMRobertaForMaskedLM"),pMr=o(" (XLM-RoBERTa model)"),_Mr=l(),I9=a("li"),_Te=a("strong"),uMr=o("xlnet"),bMr=o(" \u2014 "),wJ=a("a"),vMr=o("TFXLNetLMHeadModel"),FMr=o(" (XLNet model)"),TMr=l(),F(N9.$$.fragment),zXe=l(),fc=a("h2"),q9=a("a"),uTe=a("span"),F(J8.$$.fragment),MMr=l(),bTe=a("span"),EMr=o("TFAutoModelForCausalLM"),QXe=l(),rr=a("div"),F(Y8.$$.fragment),CMr=l(),mc=a("p"),wMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AJ=a("a"),AMr=o("from_pretrained()"),LMr=o(" class method or the "),LJ=a("a"),yMr=o("from_config()"),xMr=o(` class
method.`),$Mr=l(),K8=a("p"),kMr=o("This class cannot be instantiated directly using "),vTe=a("code"),SMr=o("__init__()"),RMr=o(" (throws an error)."),PMr=l(),Pt=a("div"),F(Z8.$$.fragment),BMr=l(),FTe=a("p"),IMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NMr=l(),gc=a("p"),qMr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),jMr=o("not"),DMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),GMr=o("from_pretrained()"),OMr=o(" to load the model weights."),VMr=l(),F(j9.$$.fragment),XMr=l(),$r=a("div"),F(ex.$$.fragment),zMr=l(),MTe=a("p"),QMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WMr=l(),ln=a("p"),HMr=o("The model class to instantiate is selected based on the "),ETe=a("code"),UMr=o("model_type"),JMr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),ZMr=o("pretrained_model_name_or_path"),e4r=o(":"),o4r=l(),Me=a("ul"),D9=a("li"),ATe=a("strong"),r4r=o("bert"),t4r=o(" \u2014 "),xJ=a("a"),a4r=o("TFBertLMHeadModel"),n4r=o(" (BERT model)"),s4r=l(),G9=a("li"),LTe=a("strong"),l4r=o("camembert"),i4r=o(" \u2014 "),$J=a("a"),d4r=o("TFCamembertForCausalLM"),c4r=o(" (CamemBERT model)"),f4r=l(),O9=a("li"),yTe=a("strong"),m4r=o("ctrl"),g4r=o(" \u2014 "),kJ=a("a"),h4r=o("TFCTRLLMHeadModel"),p4r=o(" (CTRL model)"),_4r=l(),V9=a("li"),xTe=a("strong"),u4r=o("gpt2"),b4r=o(" \u2014 "),SJ=a("a"),v4r=o("TFGPT2LMHeadModel"),F4r=o(" (OpenAI GPT-2 model)"),T4r=l(),X9=a("li"),$Te=a("strong"),M4r=o("gptj"),E4r=o(" \u2014 "),RJ=a("a"),C4r=o("TFGPTJForCausalLM"),w4r=o(" (GPT-J model)"),A4r=l(),z9=a("li"),kTe=a("strong"),L4r=o("openai-gpt"),y4r=o(" \u2014 "),PJ=a("a"),x4r=o("TFOpenAIGPTLMHeadModel"),$4r=o(" (OpenAI GPT model)"),k4r=l(),Q9=a("li"),STe=a("strong"),S4r=o("opt"),R4r=o(" \u2014 "),BJ=a("a"),P4r=o("TFOPTForCausalLM"),B4r=o(" (OPT model)"),I4r=l(),W9=a("li"),RTe=a("strong"),N4r=o("rembert"),q4r=o(" \u2014 "),IJ=a("a"),j4r=o("TFRemBertForCausalLM"),D4r=o(" (RemBERT model)"),G4r=l(),H9=a("li"),PTe=a("strong"),O4r=o("roberta"),V4r=o(" \u2014 "),NJ=a("a"),X4r=o("TFRobertaForCausalLM"),z4r=o(" (RoBERTa model)"),Q4r=l(),U9=a("li"),BTe=a("strong"),W4r=o("roformer"),H4r=o(" \u2014 "),qJ=a("a"),U4r=o("TFRoFormerForCausalLM"),J4r=o(" (RoFormer model)"),Y4r=l(),J9=a("li"),ITe=a("strong"),K4r=o("transfo-xl"),Z4r=o(" \u2014 "),jJ=a("a"),eEr=o("TFTransfoXLLMHeadModel"),oEr=o(" (Transformer-XL model)"),rEr=l(),Y9=a("li"),NTe=a("strong"),tEr=o("xlm"),aEr=o(" \u2014 "),DJ=a("a"),nEr=o("TFXLMWithLMHeadModel"),sEr=o(" (XLM model)"),lEr=l(),K9=a("li"),qTe=a("strong"),iEr=o("xlnet"),dEr=o(" \u2014 "),GJ=a("a"),cEr=o("TFXLNetLMHeadModel"),fEr=o(" (XLNet model)"),mEr=l(),F(Z9.$$.fragment),WXe=l(),hc=a("h2"),eM=a("a"),jTe=a("span"),F(ox.$$.fragment),gEr=l(),DTe=a("span"),hEr=o("TFAutoModelForImageClassification"),HXe=l(),tr=a("div"),F(rx.$$.fragment),pEr=l(),pc=a("p"),_Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OJ=a("a"),uEr=o("from_pretrained()"),bEr=o(" class method or the "),VJ=a("a"),vEr=o("from_config()"),FEr=o(` class
method.`),TEr=l(),tx=a("p"),MEr=o("This class cannot be instantiated directly using "),GTe=a("code"),EEr=o("__init__()"),CEr=o(" (throws an error)."),wEr=l(),Bt=a("div"),F(ax.$$.fragment),AEr=l(),OTe=a("p"),LEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yEr=l(),_c=a("p"),xEr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),$Er=o("not"),kEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),SEr=o("from_pretrained()"),REr=o(" to load the model weights."),PEr=l(),F(oM.$$.fragment),BEr=l(),kr=a("div"),F(nx.$$.fragment),IEr=l(),XTe=a("p"),NEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qEr=l(),dn=a("p"),jEr=o("The model class to instantiate is selected based on the "),zTe=a("code"),DEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(":"),QEr=l(),tt=a("ul"),rM=a("li"),HTe=a("strong"),WEr=o("convnext"),HEr=o(" \u2014 "),zJ=a("a"),UEr=o("TFConvNextForImageClassification"),JEr=o(" (ConvNeXT model)"),YEr=l(),tM=a("li"),UTe=a("strong"),KEr=o("data2vec-vision"),ZEr=o(" \u2014 "),QJ=a("a"),eCr=o("TFData2VecVisionForImageClassification"),oCr=o(" (Data2VecVision model)"),rCr=l(),aM=a("li"),JTe=a("strong"),tCr=o("regnet"),aCr=o(" \u2014 "),WJ=a("a"),nCr=o("TFRegNetForImageClassification"),sCr=o(" (RegNet model)"),lCr=l(),nM=a("li"),YTe=a("strong"),iCr=o("swin"),dCr=o(" \u2014 "),HJ=a("a"),cCr=o("TFSwinForImageClassification"),fCr=o(" (Swin Transformer model)"),mCr=l(),sM=a("li"),KTe=a("strong"),gCr=o("vit"),hCr=o(" \u2014 "),UJ=a("a"),pCr=o("TFViTForImageClassification"),_Cr=o(" (ViT model)"),uCr=l(),F(lM.$$.fragment),UXe=l(),uc=a("h2"),iM=a("a"),ZTe=a("span"),F(sx.$$.fragment),bCr=l(),e7e=a("span"),vCr=o("TFAutoModelForMaskedLM"),JXe=l(),ar=a("div"),F(lx.$$.fragment),FCr=l(),bc=a("p"),TCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=a("a"),MCr=o("from_pretrained()"),ECr=o(" class method or the "),YJ=a("a"),CCr=o("from_config()"),wCr=o(` class
method.`),ACr=l(),ix=a("p"),LCr=o("This class cannot be instantiated directly using "),o7e=a("code"),yCr=o("__init__()"),xCr=o(" (throws an error)."),$Cr=l(),It=a("div"),F(dx.$$.fragment),kCr=l(),r7e=a("p"),SCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RCr=l(),vc=a("p"),PCr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),BCr=o("not"),ICr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),NCr=o("from_pretrained()"),qCr=o(" to load the model weights."),jCr=l(),F(dM.$$.fragment),DCr=l(),Sr=a("div"),F(cx.$$.fragment),GCr=l(),a7e=a("p"),OCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VCr=l(),cn=a("p"),XCr=o("The model class to instantiate is selected based on the "),n7e=a("code"),zCr=o("model_type"),QCr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),WCr=o("pretrained_model_name_or_path"),HCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(":"),YCr=l(),ie=a("ul"),cM=a("li"),i7e=a("strong"),KCr=o("albert"),ZCr=o(" \u2014 "),ZJ=a("a"),e5r=o("TFAlbertForMaskedLM"),o5r=o(" (ALBERT model)"),r5r=l(),fM=a("li"),d7e=a("strong"),t5r=o("bert"),a5r=o(" \u2014 "),eY=a("a"),n5r=o("TFBertForMaskedLM"),s5r=o(" (BERT model)"),l5r=l(),mM=a("li"),c7e=a("strong"),i5r=o("camembert"),d5r=o(" \u2014 "),oY=a("a"),c5r=o("TFCamembertForMaskedLM"),f5r=o(" (CamemBERT model)"),m5r=l(),gM=a("li"),f7e=a("strong"),g5r=o("convbert"),h5r=o(" \u2014 "),rY=a("a"),p5r=o("TFConvBertForMaskedLM"),_5r=o(" (ConvBERT model)"),u5r=l(),hM=a("li"),m7e=a("strong"),b5r=o("deberta"),v5r=o(" \u2014 "),tY=a("a"),F5r=o("TFDebertaForMaskedLM"),T5r=o(" (DeBERTa model)"),M5r=l(),pM=a("li"),g7e=a("strong"),E5r=o("deberta-v2"),C5r=o(" \u2014 "),aY=a("a"),w5r=o("TFDebertaV2ForMaskedLM"),A5r=o(" (DeBERTa-v2 model)"),L5r=l(),_M=a("li"),h7e=a("strong"),y5r=o("distilbert"),x5r=o(" \u2014 "),nY=a("a"),$5r=o("TFDistilBertForMaskedLM"),k5r=o(" (DistilBERT model)"),S5r=l(),uM=a("li"),p7e=a("strong"),R5r=o("electra"),P5r=o(" \u2014 "),sY=a("a"),B5r=o("TFElectraForMaskedLM"),I5r=o(" (ELECTRA model)"),N5r=l(),bM=a("li"),_7e=a("strong"),q5r=o("flaubert"),j5r=o(" \u2014 "),lY=a("a"),D5r=o("TFFlaubertWithLMHeadModel"),G5r=o(" (FlauBERT model)"),O5r=l(),vM=a("li"),u7e=a("strong"),V5r=o("funnel"),X5r=o(" \u2014 "),iY=a("a"),z5r=o("TFFunnelForMaskedLM"),Q5r=o(" (Funnel Transformer model)"),W5r=l(),FM=a("li"),b7e=a("strong"),H5r=o("layoutlm"),U5r=o(" \u2014 "),dY=a("a"),J5r=o("TFLayoutLMForMaskedLM"),Y5r=o(" (LayoutLM model)"),K5r=l(),TM=a("li"),v7e=a("strong"),Z5r=o("longformer"),e0r=o(" \u2014 "),cY=a("a"),o0r=o("TFLongformerForMaskedLM"),r0r=o(" (Longformer model)"),t0r=l(),MM=a("li"),F7e=a("strong"),a0r=o("mobilebert"),n0r=o(" \u2014 "),fY=a("a"),s0r=o("TFMobileBertForMaskedLM"),l0r=o(" (MobileBERT model)"),i0r=l(),EM=a("li"),T7e=a("strong"),d0r=o("mpnet"),c0r=o(" \u2014 "),mY=a("a"),f0r=o("TFMPNetForMaskedLM"),m0r=o(" (MPNet model)"),g0r=l(),CM=a("li"),M7e=a("strong"),h0r=o("rembert"),p0r=o(" \u2014 "),gY=a("a"),_0r=o("TFRemBertForMaskedLM"),u0r=o(" (RemBERT model)"),b0r=l(),wM=a("li"),E7e=a("strong"),v0r=o("roberta"),F0r=o(" \u2014 "),hY=a("a"),T0r=o("TFRobertaForMaskedLM"),M0r=o(" (RoBERTa model)"),E0r=l(),AM=a("li"),C7e=a("strong"),C0r=o("roformer"),w0r=o(" \u2014 "),pY=a("a"),A0r=o("TFRoFormerForMaskedLM"),L0r=o(" (RoFormer model)"),y0r=l(),LM=a("li"),w7e=a("strong"),x0r=o("tapas"),$0r=o(" \u2014 "),_Y=a("a"),k0r=o("TFTapasForMaskedLM"),S0r=o(" (TAPAS model)"),R0r=l(),yM=a("li"),A7e=a("strong"),P0r=o("xlm"),B0r=o(" \u2014 "),uY=a("a"),I0r=o("TFXLMWithLMHeadModel"),N0r=o(" (XLM model)"),q0r=l(),xM=a("li"),L7e=a("strong"),j0r=o("xlm-roberta"),D0r=o(" \u2014 "),bY=a("a"),G0r=o("TFXLMRobertaForMaskedLM"),O0r=o(" (XLM-RoBERTa model)"),V0r=l(),F($M.$$.fragment),YXe=l(),Fc=a("h2"),kM=a("a"),y7e=a("span"),F(fx.$$.fragment),X0r=l(),x7e=a("span"),z0r=o("TFAutoModelForSeq2SeqLM"),KXe=l(),nr=a("div"),F(mx.$$.fragment),Q0r=l(),Tc=a("p"),W0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vY=a("a"),H0r=o("from_pretrained()"),U0r=o(" class method or the "),FY=a("a"),J0r=o("from_config()"),Y0r=o(` class
method.`),K0r=l(),gx=a("p"),Z0r=o("This class cannot be instantiated directly using "),$7e=a("code"),ewr=o("__init__()"),owr=o(" (throws an error)."),rwr=l(),Nt=a("div"),F(hx.$$.fragment),twr=l(),k7e=a("p"),awr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nwr=l(),Mc=a("p"),swr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),lwr=o("not"),iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),dwr=o("from_pretrained()"),cwr=o(" to load the model weights."),fwr=l(),F(SM.$$.fragment),mwr=l(),Rr=a("div"),F(px.$$.fragment),gwr=l(),R7e=a("p"),hwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pwr=l(),fn=a("p"),_wr=o("The model class to instantiate is selected based on the "),P7e=a("code"),uwr=o("model_type"),bwr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),vwr=o("pretrained_model_name_or_path"),Fwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),Twr=o("pretrained_model_name_or_path"),Mwr=o(":"),Ewr=l(),ye=a("ul"),RM=a("li"),N7e=a("strong"),Cwr=o("bart"),wwr=o(" \u2014 "),MY=a("a"),Awr=o("TFBartForConditionalGeneration"),Lwr=o(" (BART model)"),ywr=l(),PM=a("li"),q7e=a("strong"),xwr=o("blenderbot"),$wr=o(" \u2014 "),EY=a("a"),kwr=o("TFBlenderbotForConditionalGeneration"),Swr=o(" (Blenderbot model)"),Rwr=l(),BM=a("li"),j7e=a("strong"),Pwr=o("blenderbot-small"),Bwr=o(" \u2014 "),CY=a("a"),Iwr=o("TFBlenderbotSmallForConditionalGeneration"),Nwr=o(" (BlenderbotSmall model)"),qwr=l(),IM=a("li"),D7e=a("strong"),jwr=o("encoder-decoder"),Dwr=o(" \u2014 "),wY=a("a"),Gwr=o("TFEncoderDecoderModel"),Owr=o(" (Encoder decoder model)"),Vwr=l(),NM=a("li"),G7e=a("strong"),Xwr=o("led"),zwr=o(" \u2014 "),AY=a("a"),Qwr=o("TFLEDForConditionalGeneration"),Wwr=o(" (LED model)"),Hwr=l(),qM=a("li"),O7e=a("strong"),Uwr=o("marian"),Jwr=o(" \u2014 "),LY=a("a"),Ywr=o("TFMarianMTModel"),Kwr=o(" (Marian model)"),Zwr=l(),jM=a("li"),V7e=a("strong"),eAr=o("mbart"),oAr=o(" \u2014 "),yY=a("a"),rAr=o("TFMBartForConditionalGeneration"),tAr=o(" (mBART model)"),aAr=l(),DM=a("li"),X7e=a("strong"),nAr=o("mt5"),sAr=o(" \u2014 "),xY=a("a"),lAr=o("TFMT5ForConditionalGeneration"),iAr=o(" (MT5 model)"),dAr=l(),GM=a("li"),z7e=a("strong"),cAr=o("pegasus"),fAr=o(" \u2014 "),$Y=a("a"),mAr=o("TFPegasusForConditionalGeneration"),gAr=o(" (Pegasus model)"),hAr=l(),OM=a("li"),Q7e=a("strong"),pAr=o("t5"),_Ar=o(" \u2014 "),kY=a("a"),uAr=o("TFT5ForConditionalGeneration"),bAr=o(" (T5 model)"),vAr=l(),F(VM.$$.fragment),ZXe=l(),Ec=a("h2"),XM=a("a"),W7e=a("span"),F(_x.$$.fragment),FAr=l(),H7e=a("span"),TAr=o("TFAutoModelForSequenceClassification"),eze=l(),sr=a("div"),F(ux.$$.fragment),MAr=l(),Cc=a("p"),EAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SY=a("a"),CAr=o("from_pretrained()"),wAr=o(" class method or the "),RY=a("a"),AAr=o("from_config()"),LAr=o(` class
method.`),yAr=l(),bx=a("p"),xAr=o("This class cannot be instantiated directly using "),U7e=a("code"),$Ar=o("__init__()"),kAr=o(" (throws an error)."),SAr=l(),qt=a("div"),F(vx.$$.fragment),RAr=l(),J7e=a("p"),PAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BAr=l(),wc=a("p"),IAr=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),NAr=o("not"),qAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),jAr=o("from_pretrained()"),DAr=o(" to load the model weights."),GAr=l(),F(zM.$$.fragment),OAr=l(),Pr=a("div"),F(Fx.$$.fragment),VAr=l(),K7e=a("p"),XAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zAr=l(),mn=a("p"),QAr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),WAr=o("model_type"),HAr=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),UAr=o("pretrained_model_name_or_path"),JAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),YAr=o("pretrained_model_name_or_path"),KAr=o(":"),ZAr=l(),te=a("ul"),QM=a("li"),r9e=a("strong"),eLr=o("albert"),oLr=o(" \u2014 "),BY=a("a"),rLr=o("TFAlbertForSequenceClassification"),tLr=o(" (ALBERT model)"),aLr=l(),WM=a("li"),t9e=a("strong"),nLr=o("bert"),sLr=o(" \u2014 "),IY=a("a"),lLr=o("TFBertForSequenceClassification"),iLr=o(" (BERT model)"),dLr=l(),HM=a("li"),a9e=a("strong"),cLr=o("camembert"),fLr=o(" \u2014 "),NY=a("a"),mLr=o("TFCamembertForSequenceClassification"),gLr=o(" (CamemBERT model)"),hLr=l(),UM=a("li"),n9e=a("strong"),pLr=o("convbert"),_Lr=o(" \u2014 "),qY=a("a"),uLr=o("TFConvBertForSequenceClassification"),bLr=o(" (ConvBERT model)"),vLr=l(),JM=a("li"),s9e=a("strong"),FLr=o("ctrl"),TLr=o(" \u2014 "),jY=a("a"),MLr=o("TFCTRLForSequenceClassification"),ELr=o(" (CTRL model)"),CLr=l(),YM=a("li"),l9e=a("strong"),wLr=o("deberta"),ALr=o(" \u2014 "),DY=a("a"),LLr=o("TFDebertaForSequenceClassification"),yLr=o(" (DeBERTa model)"),xLr=l(),KM=a("li"),i9e=a("strong"),$Lr=o("deberta-v2"),kLr=o(" \u2014 "),GY=a("a"),SLr=o("TFDebertaV2ForSequenceClassification"),RLr=o(" (DeBERTa-v2 model)"),PLr=l(),ZM=a("li"),d9e=a("strong"),BLr=o("distilbert"),ILr=o(" \u2014 "),OY=a("a"),NLr=o("TFDistilBertForSequenceClassification"),qLr=o(" (DistilBERT model)"),jLr=l(),e4=a("li"),c9e=a("strong"),DLr=o("electra"),GLr=o(" \u2014 "),VY=a("a"),OLr=o("TFElectraForSequenceClassification"),VLr=o(" (ELECTRA model)"),XLr=l(),o4=a("li"),f9e=a("strong"),zLr=o("flaubert"),QLr=o(" \u2014 "),XY=a("a"),WLr=o("TFFlaubertForSequenceClassification"),HLr=o(" (FlauBERT model)"),ULr=l(),r4=a("li"),m9e=a("strong"),JLr=o("funnel"),YLr=o(" \u2014 "),zY=a("a"),KLr=o("TFFunnelForSequenceClassification"),ZLr=o(" (Funnel Transformer model)"),eyr=l(),t4=a("li"),g9e=a("strong"),oyr=o("gpt2"),ryr=o(" \u2014 "),QY=a("a"),tyr=o("TFGPT2ForSequenceClassification"),ayr=o(" (OpenAI GPT-2 model)"),nyr=l(),a4=a("li"),h9e=a("strong"),syr=o("gptj"),lyr=o(" \u2014 "),WY=a("a"),iyr=o("TFGPTJForSequenceClassification"),dyr=o(" (GPT-J model)"),cyr=l(),n4=a("li"),p9e=a("strong"),fyr=o("layoutlm"),myr=o(" \u2014 "),HY=a("a"),gyr=o("TFLayoutLMForSequenceClassification"),hyr=o(" (LayoutLM model)"),pyr=l(),s4=a("li"),_9e=a("strong"),_yr=o("longformer"),uyr=o(" \u2014 "),UY=a("a"),byr=o("TFLongformerForSequenceClassification"),vyr=o(" (Longformer model)"),Fyr=l(),l4=a("li"),u9e=a("strong"),Tyr=o("mobilebert"),Myr=o(" \u2014 "),JY=a("a"),Eyr=o("TFMobileBertForSequenceClassification"),Cyr=o(" (MobileBERT model)"),wyr=l(),i4=a("li"),b9e=a("strong"),Ayr=o("mpnet"),Lyr=o(" \u2014 "),YY=a("a"),yyr=o("TFMPNetForSequenceClassification"),xyr=o(" (MPNet model)"),$yr=l(),d4=a("li"),v9e=a("strong"),kyr=o("openai-gpt"),Syr=o(" \u2014 "),KY=a("a"),Ryr=o("TFOpenAIGPTForSequenceClassification"),Pyr=o(" (OpenAI GPT model)"),Byr=l(),c4=a("li"),F9e=a("strong"),Iyr=o("rembert"),Nyr=o(" \u2014 "),ZY=a("a"),qyr=o("TFRemBertForSequenceClassification"),jyr=o(" (RemBERT model)"),Dyr=l(),f4=a("li"),T9e=a("strong"),Gyr=o("roberta"),Oyr=o(" \u2014 "),eK=a("a"),Vyr=o("TFRobertaForSequenceClassification"),Xyr=o(" (RoBERTa model)"),zyr=l(),m4=a("li"),M9e=a("strong"),Qyr=o("roformer"),Wyr=o(" \u2014 "),oK=a("a"),Hyr=o("TFRoFormerForSequenceClassification"),Uyr=o(" (RoFormer model)"),Jyr=l(),g4=a("li"),E9e=a("strong"),Yyr=o("tapas"),Kyr=o(" \u2014 "),rK=a("a"),Zyr=o("TFTapasForSequenceClassification"),e8r=o(" (TAPAS model)"),o8r=l(),h4=a("li"),C9e=a("strong"),r8r=o("transfo-xl"),t8r=o(" \u2014 "),tK=a("a"),a8r=o("TFTransfoXLForSequenceClassification"),n8r=o(" (Transformer-XL model)"),s8r=l(),p4=a("li"),w9e=a("strong"),l8r=o("xlm"),i8r=o(" \u2014 "),aK=a("a"),d8r=o("TFXLMForSequenceClassification"),c8r=o(" (XLM model)"),f8r=l(),_4=a("li"),A9e=a("strong"),m8r=o("xlm-roberta"),g8r=o(" \u2014 "),nK=a("a"),h8r=o("TFXLMRobertaForSequenceClassification"),p8r=o(" (XLM-RoBERTa model)"),_8r=l(),u4=a("li"),L9e=a("strong"),u8r=o("xlnet"),b8r=o(" \u2014 "),sK=a("a"),v8r=o("TFXLNetForSequenceClassification"),F8r=o(" (XLNet model)"),T8r=l(),F(b4.$$.fragment),oze=l(),Ac=a("h2"),v4=a("a"),y9e=a("span"),F(Tx.$$.fragment),M8r=l(),x9e=a("span"),E8r=o("TFAutoModelForMultipleChoice"),rze=l(),lr=a("div"),F(Mx.$$.fragment),C8r=l(),Lc=a("p"),w8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lK=a("a"),A8r=o("from_pretrained()"),L8r=o(" class method or the "),iK=a("a"),y8r=o("from_config()"),x8r=o(` class
method.`),$8r=l(),Ex=a("p"),k8r=o("This class cannot be instantiated directly using "),$9e=a("code"),S8r=o("__init__()"),R8r=o(" (throws an error)."),P8r=l(),jt=a("div"),F(Cx.$$.fragment),B8r=l(),k9e=a("p"),I8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),N8r=l(),yc=a("p"),q8r=o(`Note:
Loading a model from its configuration file does `),S9e=a("strong"),j8r=o("not"),D8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),G8r=o("from_pretrained()"),O8r=o(" to load the model weights."),V8r=l(),F(F4.$$.fragment),X8r=l(),Br=a("div"),F(wx.$$.fragment),z8r=l(),R9e=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),W8r=l(),gn=a("p"),H8r=o("The model class to instantiate is selected based on the "),P9e=a("code"),U8r=o("model_type"),J8r=o(` property of the config object (either
passed as an argument or loaded from `),B9e=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=a("code"),Z8r=o("pretrained_model_name_or_path"),exr=o(":"),oxr=l(),_e=a("ul"),T4=a("li"),N9e=a("strong"),rxr=o("albert"),txr=o(" \u2014 "),cK=a("a"),axr=o("TFAlbertForMultipleChoice"),nxr=o(" (ALBERT model)"),sxr=l(),M4=a("li"),q9e=a("strong"),lxr=o("bert"),ixr=o(" \u2014 "),fK=a("a"),dxr=o("TFBertForMultipleChoice"),cxr=o(" (BERT model)"),fxr=l(),E4=a("li"),j9e=a("strong"),mxr=o("camembert"),gxr=o(" \u2014 "),mK=a("a"),hxr=o("TFCamembertForMultipleChoice"),pxr=o(" (CamemBERT model)"),_xr=l(),C4=a("li"),D9e=a("strong"),uxr=o("convbert"),bxr=o(" \u2014 "),gK=a("a"),vxr=o("TFConvBertForMultipleChoice"),Fxr=o(" (ConvBERT model)"),Txr=l(),w4=a("li"),G9e=a("strong"),Mxr=o("distilbert"),Exr=o(" \u2014 "),hK=a("a"),Cxr=o("TFDistilBertForMultipleChoice"),wxr=o(" (DistilBERT model)"),Axr=l(),A4=a("li"),O9e=a("strong"),Lxr=o("electra"),yxr=o(" \u2014 "),pK=a("a"),xxr=o("TFElectraForMultipleChoice"),$xr=o(" (ELECTRA model)"),kxr=l(),L4=a("li"),V9e=a("strong"),Sxr=o("flaubert"),Rxr=o(" \u2014 "),_K=a("a"),Pxr=o("TFFlaubertForMultipleChoice"),Bxr=o(" (FlauBERT model)"),Ixr=l(),y4=a("li"),X9e=a("strong"),Nxr=o("funnel"),qxr=o(" \u2014 "),uK=a("a"),jxr=o("TFFunnelForMultipleChoice"),Dxr=o(" (Funnel Transformer model)"),Gxr=l(),x4=a("li"),z9e=a("strong"),Oxr=o("longformer"),Vxr=o(" \u2014 "),bK=a("a"),Xxr=o("TFLongformerForMultipleChoice"),zxr=o(" (Longformer model)"),Qxr=l(),$4=a("li"),Q9e=a("strong"),Wxr=o("mobilebert"),Hxr=o(" \u2014 "),vK=a("a"),Uxr=o("TFMobileBertForMultipleChoice"),Jxr=o(" (MobileBERT model)"),Yxr=l(),k4=a("li"),W9e=a("strong"),Kxr=o("mpnet"),Zxr=o(" \u2014 "),FK=a("a"),e$r=o("TFMPNetForMultipleChoice"),o$r=o(" (MPNet model)"),r$r=l(),S4=a("li"),H9e=a("strong"),t$r=o("rembert"),a$r=o(" \u2014 "),TK=a("a"),n$r=o("TFRemBertForMultipleChoice"),s$r=o(" (RemBERT model)"),l$r=l(),R4=a("li"),U9e=a("strong"),i$r=o("roberta"),d$r=o(" \u2014 "),MK=a("a"),c$r=o("TFRobertaForMultipleChoice"),f$r=o(" (RoBERTa model)"),m$r=l(),P4=a("li"),J9e=a("strong"),g$r=o("roformer"),h$r=o(" \u2014 "),EK=a("a"),p$r=o("TFRoFormerForMultipleChoice"),_$r=o(" (RoFormer model)"),u$r=l(),B4=a("li"),Y9e=a("strong"),b$r=o("xlm"),v$r=o(" \u2014 "),CK=a("a"),F$r=o("TFXLMForMultipleChoice"),T$r=o(" (XLM model)"),M$r=l(),I4=a("li"),K9e=a("strong"),E$r=o("xlm-roberta"),C$r=o(" \u2014 "),wK=a("a"),w$r=o("TFXLMRobertaForMultipleChoice"),A$r=o(" (XLM-RoBERTa model)"),L$r=l(),N4=a("li"),Z9e=a("strong"),y$r=o("xlnet"),x$r=o(" \u2014 "),AK=a("a"),$$r=o("TFXLNetForMultipleChoice"),k$r=o(" (XLNet model)"),S$r=l(),F(q4.$$.fragment),tze=l(),xc=a("h2"),j4=a("a"),eMe=a("span"),F(Ax.$$.fragment),R$r=l(),oMe=a("span"),P$r=o("TFAutoModelForNextSentencePrediction"),aze=l(),ir=a("div"),F(Lx.$$.fragment),B$r=l(),$c=a("p"),I$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LK=a("a"),N$r=o("from_pretrained()"),q$r=o(" class method or the "),yK=a("a"),j$r=o("from_config()"),D$r=o(` class
method.`),G$r=l(),yx=a("p"),O$r=o("This class cannot be instantiated directly using "),rMe=a("code"),V$r=o("__init__()"),X$r=o(" (throws an error)."),z$r=l(),Dt=a("div"),F(xx.$$.fragment),Q$r=l(),tMe=a("p"),W$r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H$r=l(),kc=a("p"),U$r=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),J$r=o("not"),Y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),K$r=o("from_pretrained()"),Z$r=o(" to load the model weights."),ekr=l(),F(D4.$$.fragment),okr=l(),Ir=a("div"),F($x.$$.fragment),rkr=l(),nMe=a("p"),tkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),akr=l(),hn=a("p"),nkr=o("The model class to instantiate is selected based on the "),sMe=a("code"),skr=o("model_type"),lkr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(":"),mkr=l(),kx=a("ul"),G4=a("li"),dMe=a("strong"),gkr=o("bert"),hkr=o(" \u2014 "),$K=a("a"),pkr=o("TFBertForNextSentencePrediction"),_kr=o(" (BERT model)"),ukr=l(),O4=a("li"),cMe=a("strong"),bkr=o("mobilebert"),vkr=o(" \u2014 "),kK=a("a"),Fkr=o("TFMobileBertForNextSentencePrediction"),Tkr=o(" (MobileBERT model)"),Mkr=l(),F(V4.$$.fragment),nze=l(),Sc=a("h2"),X4=a("a"),fMe=a("span"),F(Sx.$$.fragment),Ekr=l(),mMe=a("span"),Ckr=o("TFAutoModelForTableQuestionAnswering"),sze=l(),dr=a("div"),F(Rx.$$.fragment),wkr=l(),Rc=a("p"),Akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SK=a("a"),Lkr=o("from_pretrained()"),ykr=o(" class method or the "),RK=a("a"),xkr=o("from_config()"),$kr=o(` class
method.`),kkr=l(),Px=a("p"),Skr=o("This class cannot be instantiated directly using "),gMe=a("code"),Rkr=o("__init__()"),Pkr=o(" (throws an error)."),Bkr=l(),Gt=a("div"),F(Bx.$$.fragment),Ikr=l(),hMe=a("p"),Nkr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qkr=l(),Pc=a("p"),jkr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),Dkr=o("not"),Gkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),Okr=o("from_pretrained()"),Vkr=o(" to load the model weights."),Xkr=l(),F(z4.$$.fragment),zkr=l(),Nr=a("div"),F(Ix.$$.fragment),Qkr=l(),_Me=a("p"),Wkr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hkr=l(),pn=a("p"),Ukr=o("The model class to instantiate is selected based on the "),uMe=a("code"),Jkr=o("model_type"),Ykr=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(":"),rSr=l(),FMe=a("ul"),Q4=a("li"),TMe=a("strong"),tSr=o("tapas"),aSr=o(" \u2014 "),BK=a("a"),nSr=o("TFTapasForQuestionAnswering"),sSr=o(" (TAPAS model)"),lSr=l(),F(W4.$$.fragment),lze=l(),Bc=a("h2"),H4=a("a"),MMe=a("span"),F(Nx.$$.fragment),iSr=l(),EMe=a("span"),dSr=o("TFAutoModelForTokenClassification"),ize=l(),cr=a("div"),F(qx.$$.fragment),cSr=l(),Ic=a("p"),fSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IK=a("a"),mSr=o("from_pretrained()"),gSr=o(" class method or the "),NK=a("a"),hSr=o("from_config()"),pSr=o(` class
method.`),_Sr=l(),jx=a("p"),uSr=o("This class cannot be instantiated directly using "),CMe=a("code"),bSr=o("__init__()"),vSr=o(" (throws an error)."),FSr=l(),Ot=a("div"),F(Dx.$$.fragment),TSr=l(),wMe=a("p"),MSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ESr=l(),Nc=a("p"),CSr=o(`Note:
Loading a model from its configuration file does `),AMe=a("strong"),wSr=o("not"),ASr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),LSr=o("from_pretrained()"),ySr=o(" to load the model weights."),xSr=l(),F(U4.$$.fragment),$Sr=l(),qr=a("div"),F(Gx.$$.fragment),kSr=l(),LMe=a("p"),SSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RSr=l(),_n=a("p"),PSr=o("The model class to instantiate is selected based on the "),yMe=a("code"),BSr=o("model_type"),ISr=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(":"),GSr=l(),de=a("ul"),J4=a("li"),kMe=a("strong"),OSr=o("albert"),VSr=o(" \u2014 "),jK=a("a"),XSr=o("TFAlbertForTokenClassification"),zSr=o(" (ALBERT model)"),QSr=l(),Y4=a("li"),SMe=a("strong"),WSr=o("bert"),HSr=o(" \u2014 "),DK=a("a"),USr=o("TFBertForTokenClassification"),JSr=o(" (BERT model)"),YSr=l(),K4=a("li"),RMe=a("strong"),KSr=o("camembert"),ZSr=o(" \u2014 "),GK=a("a"),eRr=o("TFCamembertForTokenClassification"),oRr=o(" (CamemBERT model)"),rRr=l(),Z4=a("li"),PMe=a("strong"),tRr=o("convbert"),aRr=o(" \u2014 "),OK=a("a"),nRr=o("TFConvBertForTokenClassification"),sRr=o(" (ConvBERT model)"),lRr=l(),eE=a("li"),BMe=a("strong"),iRr=o("deberta"),dRr=o(" \u2014 "),VK=a("a"),cRr=o("TFDebertaForTokenClassification"),fRr=o(" (DeBERTa model)"),mRr=l(),oE=a("li"),IMe=a("strong"),gRr=o("deberta-v2"),hRr=o(" \u2014 "),XK=a("a"),pRr=o("TFDebertaV2ForTokenClassification"),_Rr=o(" (DeBERTa-v2 model)"),uRr=l(),rE=a("li"),NMe=a("strong"),bRr=o("distilbert"),vRr=o(" \u2014 "),zK=a("a"),FRr=o("TFDistilBertForTokenClassification"),TRr=o(" (DistilBERT model)"),MRr=l(),tE=a("li"),qMe=a("strong"),ERr=o("electra"),CRr=o(" \u2014 "),QK=a("a"),wRr=o("TFElectraForTokenClassification"),ARr=o(" (ELECTRA model)"),LRr=l(),aE=a("li"),jMe=a("strong"),yRr=o("flaubert"),xRr=o(" \u2014 "),WK=a("a"),$Rr=o("TFFlaubertForTokenClassification"),kRr=o(" (FlauBERT model)"),SRr=l(),nE=a("li"),DMe=a("strong"),RRr=o("funnel"),PRr=o(" \u2014 "),HK=a("a"),BRr=o("TFFunnelForTokenClassification"),IRr=o(" (Funnel Transformer model)"),NRr=l(),sE=a("li"),GMe=a("strong"),qRr=o("layoutlm"),jRr=o(" \u2014 "),UK=a("a"),DRr=o("TFLayoutLMForTokenClassification"),GRr=o(" (LayoutLM model)"),ORr=l(),lE=a("li"),OMe=a("strong"),VRr=o("longformer"),XRr=o(" \u2014 "),JK=a("a"),zRr=o("TFLongformerForTokenClassification"),QRr=o(" (Longformer model)"),WRr=l(),iE=a("li"),VMe=a("strong"),HRr=o("mobilebert"),URr=o(" \u2014 "),YK=a("a"),JRr=o("TFMobileBertForTokenClassification"),YRr=o(" (MobileBERT model)"),KRr=l(),dE=a("li"),XMe=a("strong"),ZRr=o("mpnet"),ePr=o(" \u2014 "),KK=a("a"),oPr=o("TFMPNetForTokenClassification"),rPr=o(" (MPNet model)"),tPr=l(),cE=a("li"),zMe=a("strong"),aPr=o("rembert"),nPr=o(" \u2014 "),ZK=a("a"),sPr=o("TFRemBertForTokenClassification"),lPr=o(" (RemBERT model)"),iPr=l(),fE=a("li"),QMe=a("strong"),dPr=o("roberta"),cPr=o(" \u2014 "),eZ=a("a"),fPr=o("TFRobertaForTokenClassification"),mPr=o(" (RoBERTa model)"),gPr=l(),mE=a("li"),WMe=a("strong"),hPr=o("roformer"),pPr=o(" \u2014 "),oZ=a("a"),_Pr=o("TFRoFormerForTokenClassification"),uPr=o(" (RoFormer model)"),bPr=l(),gE=a("li"),HMe=a("strong"),vPr=o("xlm"),FPr=o(" \u2014 "),rZ=a("a"),TPr=o("TFXLMForTokenClassification"),MPr=o(" (XLM model)"),EPr=l(),hE=a("li"),UMe=a("strong"),CPr=o("xlm-roberta"),wPr=o(" \u2014 "),tZ=a("a"),APr=o("TFXLMRobertaForTokenClassification"),LPr=o(" (XLM-RoBERTa model)"),yPr=l(),pE=a("li"),JMe=a("strong"),xPr=o("xlnet"),$Pr=o(" \u2014 "),aZ=a("a"),kPr=o("TFXLNetForTokenClassification"),SPr=o(" (XLNet model)"),RPr=l(),F(_E.$$.fragment),dze=l(),qc=a("h2"),uE=a("a"),YMe=a("span"),F(Ox.$$.fragment),PPr=l(),KMe=a("span"),BPr=o("TFAutoModelForQuestionAnswering"),cze=l(),fr=a("div"),F(Vx.$$.fragment),IPr=l(),jc=a("p"),NPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nZ=a("a"),qPr=o("from_pretrained()"),jPr=o(" class method or the "),sZ=a("a"),DPr=o("from_config()"),GPr=o(` class
method.`),OPr=l(),Xx=a("p"),VPr=o("This class cannot be instantiated directly using "),ZMe=a("code"),XPr=o("__init__()"),zPr=o(" (throws an error)."),QPr=l(),Vt=a("div"),F(zx.$$.fragment),WPr=l(),e4e=a("p"),HPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UPr=l(),Dc=a("p"),JPr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),YPr=o("not"),KPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),ZPr=o("from_pretrained()"),eBr=o(" to load the model weights."),oBr=l(),F(bE.$$.fragment),rBr=l(),jr=a("div"),F(Qx.$$.fragment),tBr=l(),r4e=a("p"),aBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nBr=l(),un=a("p"),sBr=o("The model class to instantiate is selected based on the "),t4e=a("code"),lBr=o("model_type"),iBr=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),fBr=o("pretrained_model_name_or_path"),mBr=o(":"),gBr=l(),ce=a("ul"),vE=a("li"),s4e=a("strong"),hBr=o("albert"),pBr=o(" \u2014 "),iZ=a("a"),_Br=o("TFAlbertForQuestionAnswering"),uBr=o(" (ALBERT model)"),bBr=l(),FE=a("li"),l4e=a("strong"),vBr=o("bert"),FBr=o(" \u2014 "),dZ=a("a"),TBr=o("TFBertForQuestionAnswering"),MBr=o(" (BERT model)"),EBr=l(),TE=a("li"),i4e=a("strong"),CBr=o("camembert"),wBr=o(" \u2014 "),cZ=a("a"),ABr=o("TFCamembertForQuestionAnswering"),LBr=o(" (CamemBERT model)"),yBr=l(),ME=a("li"),d4e=a("strong"),xBr=o("convbert"),$Br=o(" \u2014 "),fZ=a("a"),kBr=o("TFConvBertForQuestionAnswering"),SBr=o(" (ConvBERT model)"),RBr=l(),EE=a("li"),c4e=a("strong"),PBr=o("deberta"),BBr=o(" \u2014 "),mZ=a("a"),IBr=o("TFDebertaForQuestionAnswering"),NBr=o(" (DeBERTa model)"),qBr=l(),CE=a("li"),f4e=a("strong"),jBr=o("deberta-v2"),DBr=o(" \u2014 "),gZ=a("a"),GBr=o("TFDebertaV2ForQuestionAnswering"),OBr=o(" (DeBERTa-v2 model)"),VBr=l(),wE=a("li"),m4e=a("strong"),XBr=o("distilbert"),zBr=o(" \u2014 "),hZ=a("a"),QBr=o("TFDistilBertForQuestionAnswering"),WBr=o(" (DistilBERT model)"),HBr=l(),AE=a("li"),g4e=a("strong"),UBr=o("electra"),JBr=o(" \u2014 "),pZ=a("a"),YBr=o("TFElectraForQuestionAnswering"),KBr=o(" (ELECTRA model)"),ZBr=l(),LE=a("li"),h4e=a("strong"),eIr=o("flaubert"),oIr=o(" \u2014 "),_Z=a("a"),rIr=o("TFFlaubertForQuestionAnsweringSimple"),tIr=o(" (FlauBERT model)"),aIr=l(),yE=a("li"),p4e=a("strong"),nIr=o("funnel"),sIr=o(" \u2014 "),uZ=a("a"),lIr=o("TFFunnelForQuestionAnswering"),iIr=o(" (Funnel Transformer model)"),dIr=l(),xE=a("li"),_4e=a("strong"),cIr=o("gptj"),fIr=o(" \u2014 "),bZ=a("a"),mIr=o("TFGPTJForQuestionAnswering"),gIr=o(" (GPT-J model)"),hIr=l(),$E=a("li"),u4e=a("strong"),pIr=o("longformer"),_Ir=o(" \u2014 "),vZ=a("a"),uIr=o("TFLongformerForQuestionAnswering"),bIr=o(" (Longformer model)"),vIr=l(),kE=a("li"),b4e=a("strong"),FIr=o("mobilebert"),TIr=o(" \u2014 "),FZ=a("a"),MIr=o("TFMobileBertForQuestionAnswering"),EIr=o(" (MobileBERT model)"),CIr=l(),SE=a("li"),v4e=a("strong"),wIr=o("mpnet"),AIr=o(" \u2014 "),TZ=a("a"),LIr=o("TFMPNetForQuestionAnswering"),yIr=o(" (MPNet model)"),xIr=l(),RE=a("li"),F4e=a("strong"),$Ir=o("rembert"),kIr=o(" \u2014 "),MZ=a("a"),SIr=o("TFRemBertForQuestionAnswering"),RIr=o(" (RemBERT model)"),PIr=l(),PE=a("li"),T4e=a("strong"),BIr=o("roberta"),IIr=o(" \u2014 "),EZ=a("a"),NIr=o("TFRobertaForQuestionAnswering"),qIr=o(" (RoBERTa model)"),jIr=l(),BE=a("li"),M4e=a("strong"),DIr=o("roformer"),GIr=o(" \u2014 "),CZ=a("a"),OIr=o("TFRoFormerForQuestionAnswering"),VIr=o(" (RoFormer model)"),XIr=l(),IE=a("li"),E4e=a("strong"),zIr=o("xlm"),QIr=o(" \u2014 "),wZ=a("a"),WIr=o("TFXLMForQuestionAnsweringSimple"),HIr=o(" (XLM model)"),UIr=l(),NE=a("li"),C4e=a("strong"),JIr=o("xlm-roberta"),YIr=o(" \u2014 "),AZ=a("a"),KIr=o("TFXLMRobertaForQuestionAnswering"),ZIr=o(" (XLM-RoBERTa model)"),eNr=l(),qE=a("li"),w4e=a("strong"),oNr=o("xlnet"),rNr=o(" \u2014 "),LZ=a("a"),tNr=o("TFXLNetForQuestionAnsweringSimple"),aNr=o(" (XLNet model)"),nNr=l(),F(jE.$$.fragment),fze=l(),Gc=a("h2"),DE=a("a"),A4e=a("span"),F(Wx.$$.fragment),sNr=l(),L4e=a("span"),lNr=o("TFAutoModelForVision2Seq"),mze=l(),mr=a("div"),F(Hx.$$.fragment),iNr=l(),Oc=a("p"),dNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yZ=a("a"),cNr=o("from_pretrained()"),fNr=o(" class method or the "),xZ=a("a"),mNr=o("from_config()"),gNr=o(` class
method.`),hNr=l(),Ux=a("p"),pNr=o("This class cannot be instantiated directly using "),y4e=a("code"),_Nr=o("__init__()"),uNr=o(" (throws an error)."),bNr=l(),Xt=a("div"),F(Jx.$$.fragment),vNr=l(),x4e=a("p"),FNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TNr=l(),Vc=a("p"),MNr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),ENr=o("not"),CNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),wNr=o("from_pretrained()"),ANr=o(" to load the model weights."),LNr=l(),F(GE.$$.fragment),yNr=l(),Dr=a("div"),F(Yx.$$.fragment),xNr=l(),k4e=a("p"),$Nr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kNr=l(),bn=a("p"),SNr=o("The model class to instantiate is selected based on the "),S4e=a("code"),RNr=o("model_type"),PNr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),BNr=o("pretrained_model_name_or_path"),INr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),NNr=o("pretrained_model_name_or_path"),qNr=o(":"),jNr=l(),B4e=a("ul"),OE=a("li"),I4e=a("strong"),DNr=o("vision-encoder-decoder"),GNr=o(" \u2014 "),kZ=a("a"),ONr=o("TFVisionEncoderDecoderModel"),VNr=o(" (Vision Encoder decoder model)"),XNr=l(),F(VE.$$.fragment),gze=l(),Xc=a("h2"),XE=a("a"),N4e=a("span"),F(Kx.$$.fragment),zNr=l(),q4e=a("span"),QNr=o("TFAutoModelForSpeechSeq2Seq"),hze=l(),gr=a("div"),F(Zx.$$.fragment),WNr=l(),zc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SZ=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),RZ=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),e$=a("p"),eqr=o("This class cannot be instantiated directly using "),j4e=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),zt=a("div"),F(o$.$$.fragment),aqr=l(),D4e=a("p"),nqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sqr=l(),Qc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(zE.$$.fragment),gqr=l(),Gr=a("div"),F(r$.$$.fragment),hqr=l(),O4e=a("p"),pqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_qr=l(),vn=a("p"),uqr=o("The model class to instantiate is selected based on the "),V4e=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),Q4e=a("ul"),QE=a("li"),W4e=a("strong"),wqr=o("speech_to_text"),Aqr=o(" \u2014 "),BZ=a("a"),Lqr=o("TFSpeech2TextForConditionalGeneration"),yqr=o(" (Speech2Text model)"),xqr=l(),F(WE.$$.fragment),pze=l(),Wc=a("h2"),HE=a("a"),H4e=a("span"),F(t$.$$.fragment),$qr=l(),U4e=a("span"),kqr=o("FlaxAutoModel"),_ze=l(),hr=a("div"),F(a$.$$.fragment),Sqr=l(),Hc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),NZ=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),n$=a("p"),jqr=o("This class cannot be instantiated directly using "),J4e=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Qt=a("div"),F(s$.$$.fragment),Vqr=l(),Y4e=a("p"),Xqr=o("Instantiates one of the base model classes of the library from a configuration."),zqr=l(),Uc=a("p"),Qqr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),Wqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(UE.$$.fragment),Kqr=l(),Or=a("div"),F(l$.$$.fragment),Zqr=l(),Z4e=a("p"),ejr=o("Instantiate one of the base model classes of the library from a pretrained model."),ojr=l(),Fn=a("p"),rjr=o("The model class to instantiate is selected based on the "),eEe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),oe=a("ul"),JE=a("li"),tEe=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),jZ=a("a"),mjr=o("FlaxAlbertModel"),gjr=o(" (ALBERT model)"),hjr=l(),YE=a("li"),aEe=a("strong"),pjr=o("bart"),_jr=o(" \u2014 "),DZ=a("a"),ujr=o("FlaxBartModel"),bjr=o(" (BART model)"),vjr=l(),KE=a("li"),nEe=a("strong"),Fjr=o("beit"),Tjr=o(" \u2014 "),GZ=a("a"),Mjr=o("FlaxBeitModel"),Ejr=o(" (BEiT model)"),Cjr=l(),ZE=a("li"),sEe=a("strong"),wjr=o("bert"),Ajr=o(" \u2014 "),OZ=a("a"),Ljr=o("FlaxBertModel"),yjr=o(" (BERT model)"),xjr=l(),eC=a("li"),lEe=a("strong"),$jr=o("big_bird"),kjr=o(" \u2014 "),VZ=a("a"),Sjr=o("FlaxBigBirdModel"),Rjr=o(" (BigBird model)"),Pjr=l(),oC=a("li"),iEe=a("strong"),Bjr=o("blenderbot"),Ijr=o(" \u2014 "),XZ=a("a"),Njr=o("FlaxBlenderbotModel"),qjr=o(" (Blenderbot model)"),jjr=l(),rC=a("li"),dEe=a("strong"),Djr=o("blenderbot-small"),Gjr=o(" \u2014 "),zZ=a("a"),Ojr=o("FlaxBlenderbotSmallModel"),Vjr=o(" (BlenderbotSmall model)"),Xjr=l(),tC=a("li"),cEe=a("strong"),zjr=o("clip"),Qjr=o(" \u2014 "),QZ=a("a"),Wjr=o("FlaxCLIPModel"),Hjr=o(" (CLIP model)"),Ujr=l(),aC=a("li"),fEe=a("strong"),Jjr=o("distilbert"),Yjr=o(" \u2014 "),WZ=a("a"),Kjr=o("FlaxDistilBertModel"),Zjr=o(" (DistilBERT model)"),eDr=l(),nC=a("li"),mEe=a("strong"),oDr=o("electra"),rDr=o(" \u2014 "),HZ=a("a"),tDr=o("FlaxElectraModel"),aDr=o(" (ELECTRA model)"),nDr=l(),sC=a("li"),gEe=a("strong"),sDr=o("gpt2"),lDr=o(" \u2014 "),UZ=a("a"),iDr=o("FlaxGPT2Model"),dDr=o(" (OpenAI GPT-2 model)"),cDr=l(),lC=a("li"),hEe=a("strong"),fDr=o("gpt_neo"),mDr=o(" \u2014 "),JZ=a("a"),gDr=o("FlaxGPTNeoModel"),hDr=o(" (GPT Neo model)"),pDr=l(),iC=a("li"),pEe=a("strong"),_Dr=o("gptj"),uDr=o(" \u2014 "),YZ=a("a"),bDr=o("FlaxGPTJModel"),vDr=o(" (GPT-J model)"),FDr=l(),dC=a("li"),_Ee=a("strong"),TDr=o("longt5"),MDr=o(" \u2014 "),KZ=a("a"),EDr=o("FlaxLongT5Model"),CDr=o(" (LongT5 model)"),wDr=l(),cC=a("li"),uEe=a("strong"),ADr=o("marian"),LDr=o(" \u2014 "),ZZ=a("a"),yDr=o("FlaxMarianModel"),xDr=o(" (Marian model)"),$Dr=l(),fC=a("li"),bEe=a("strong"),kDr=o("mbart"),SDr=o(" \u2014 "),eee=a("a"),RDr=o("FlaxMBartModel"),PDr=o(" (mBART model)"),BDr=l(),mC=a("li"),vEe=a("strong"),IDr=o("mt5"),NDr=o(" \u2014 "),oee=a("a"),qDr=o("FlaxMT5Model"),jDr=o(" (MT5 model)"),DDr=l(),gC=a("li"),FEe=a("strong"),GDr=o("opt"),ODr=o(" \u2014 "),ree=a("a"),VDr=o("FlaxOPTModel"),XDr=o(" (OPT model)"),zDr=l(),hC=a("li"),TEe=a("strong"),QDr=o("pegasus"),WDr=o(" \u2014 "),tee=a("a"),HDr=o("FlaxPegasusModel"),UDr=o(" (Pegasus model)"),JDr=l(),pC=a("li"),MEe=a("strong"),YDr=o("roberta"),KDr=o(" \u2014 "),aee=a("a"),ZDr=o("FlaxRobertaModel"),eGr=o(" (RoBERTa model)"),oGr=l(),_C=a("li"),EEe=a("strong"),rGr=o("roformer"),tGr=o(" \u2014 "),nee=a("a"),aGr=o("FlaxRoFormerModel"),nGr=o(" (RoFormer model)"),sGr=l(),uC=a("li"),CEe=a("strong"),lGr=o("t5"),iGr=o(" \u2014 "),see=a("a"),dGr=o("FlaxT5Model"),cGr=o(" (T5 model)"),fGr=l(),bC=a("li"),wEe=a("strong"),mGr=o("vision-text-dual-encoder"),gGr=o(" \u2014 "),lee=a("a"),hGr=o("FlaxVisionTextDualEncoderModel"),pGr=o(" (VisionTextDualEncoder model)"),_Gr=l(),vC=a("li"),AEe=a("strong"),uGr=o("vit"),bGr=o(" \u2014 "),iee=a("a"),vGr=o("FlaxViTModel"),FGr=o(" (ViT model)"),TGr=l(),FC=a("li"),LEe=a("strong"),MGr=o("wav2vec2"),EGr=o(" \u2014 "),dee=a("a"),CGr=o("FlaxWav2Vec2Model"),wGr=o(" (Wav2Vec2 model)"),AGr=l(),TC=a("li"),yEe=a("strong"),LGr=o("xglm"),yGr=o(" \u2014 "),cee=a("a"),xGr=o("FlaxXGLMModel"),$Gr=o(" (XGLM model)"),kGr=l(),MC=a("li"),xEe=a("strong"),SGr=o("xlm-roberta"),RGr=o(" \u2014 "),fee=a("a"),PGr=o("FlaxXLMRobertaModel"),BGr=o(" (XLM-RoBERTa model)"),IGr=l(),F(EC.$$.fragment),uze=l(),Jc=a("h2"),CC=a("a"),$Ee=a("span"),F(i$.$$.fragment),NGr=l(),kEe=a("span"),qGr=o("FlaxAutoModelForCausalLM"),bze=l(),pr=a("div"),F(d$.$$.fragment),jGr=l(),Yc=a("p"),DGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mee=a("a"),GGr=o("from_pretrained()"),OGr=o(" class method or the "),gee=a("a"),VGr=o("from_config()"),XGr=o(` class
method.`),zGr=l(),c$=a("p"),QGr=o("This class cannot be instantiated directly using "),SEe=a("code"),WGr=o("__init__()"),HGr=o(" (throws an error)."),UGr=l(),Wt=a("div"),F(f$.$$.fragment),JGr=l(),REe=a("p"),YGr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KGr=l(),Kc=a("p"),ZGr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),eOr=o("not"),oOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=a("a"),rOr=o("from_pretrained()"),tOr=o(" to load the model weights."),aOr=l(),F(wC.$$.fragment),nOr=l(),Vr=a("div"),F(m$.$$.fragment),sOr=l(),BEe=a("p"),lOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iOr=l(),Tn=a("p"),dOr=o("The model class to instantiate is selected based on the "),IEe=a("code"),cOr=o("model_type"),fOr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),mOr=o("pretrained_model_name_or_path"),gOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),hOr=o("pretrained_model_name_or_path"),pOr=o(":"),_Or=l(),xe=a("ul"),AC=a("li"),jEe=a("strong"),uOr=o("bart"),bOr=o(" \u2014 "),pee=a("a"),vOr=o("FlaxBartForCausalLM"),FOr=o(" (BART model)"),TOr=l(),LC=a("li"),DEe=a("strong"),MOr=o("bert"),EOr=o(" \u2014 "),_ee=a("a"),COr=o("FlaxBertForCausalLM"),wOr=o(" (BERT model)"),AOr=l(),yC=a("li"),GEe=a("strong"),LOr=o("big_bird"),yOr=o(" \u2014 "),uee=a("a"),xOr=o("FlaxBigBirdForCausalLM"),$Or=o(" (BigBird model)"),kOr=l(),xC=a("li"),OEe=a("strong"),SOr=o("electra"),ROr=o(" \u2014 "),bee=a("a"),POr=o("FlaxElectraForCausalLM"),BOr=o(" (ELECTRA model)"),IOr=l(),$C=a("li"),VEe=a("strong"),NOr=o("gpt2"),qOr=o(" \u2014 "),vee=a("a"),jOr=o("FlaxGPT2LMHeadModel"),DOr=o(" (OpenAI GPT-2 model)"),GOr=l(),kC=a("li"),XEe=a("strong"),OOr=o("gpt_neo"),VOr=o(" \u2014 "),Fee=a("a"),XOr=o("FlaxGPTNeoForCausalLM"),zOr=o(" (GPT Neo model)"),QOr=l(),SC=a("li"),zEe=a("strong"),WOr=o("gptj"),HOr=o(" \u2014 "),Tee=a("a"),UOr=o("FlaxGPTJForCausalLM"),JOr=o(" (GPT-J model)"),YOr=l(),RC=a("li"),QEe=a("strong"),KOr=o("opt"),ZOr=o(" \u2014 "),Mee=a("a"),eVr=o("FlaxOPTForCausalLM"),oVr=o(" (OPT model)"),rVr=l(),PC=a("li"),WEe=a("strong"),tVr=o("roberta"),aVr=o(" \u2014 "),Eee=a("a"),nVr=o("FlaxRobertaForCausalLM"),sVr=o(" (RoBERTa model)"),lVr=l(),BC=a("li"),HEe=a("strong"),iVr=o("xglm"),dVr=o(" \u2014 "),Cee=a("a"),cVr=o("FlaxXGLMForCausalLM"),fVr=o(" (XGLM model)"),mVr=l(),F(IC.$$.fragment),vze=l(),Zc=a("h2"),NC=a("a"),UEe=a("span"),F(g$.$$.fragment),gVr=l(),JEe=a("span"),hVr=o("FlaxAutoModelForPreTraining"),Fze=l(),_r=a("div"),F(h$.$$.fragment),pVr=l(),ef=a("p"),_Vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wee=a("a"),uVr=o("from_pretrained()"),bVr=o(" class method or the "),Aee=a("a"),vVr=o("from_config()"),FVr=o(` class
method.`),TVr=l(),p$=a("p"),MVr=o("This class cannot be instantiated directly using "),YEe=a("code"),EVr=o("__init__()"),CVr=o(" (throws an error)."),wVr=l(),Ht=a("div"),F(_$.$$.fragment),AVr=l(),KEe=a("p"),LVr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yVr=l(),of=a("p"),xVr=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),$Vr=o("not"),kVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),SVr=o("from_pretrained()"),RVr=o(" to load the model weights."),PVr=l(),F(qC.$$.fragment),BVr=l(),Xr=a("div"),F(u$.$$.fragment),IVr=l(),eCe=a("p"),NVr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qVr=l(),Mn=a("p"),jVr=o("The model class to instantiate is selected based on the "),oCe=a("code"),DVr=o("model_type"),GVr=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),OVr=o("pretrained_model_name_or_path"),VVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),XVr=o("pretrained_model_name_or_path"),zVr=o(":"),QVr=l(),Ee=a("ul"),jC=a("li"),aCe=a("strong"),WVr=o("albert"),HVr=o(" \u2014 "),yee=a("a"),UVr=o("FlaxAlbertForPreTraining"),JVr=o(" (ALBERT model)"),YVr=l(),DC=a("li"),nCe=a("strong"),KVr=o("bart"),ZVr=o(" \u2014 "),xee=a("a"),eXr=o("FlaxBartForConditionalGeneration"),oXr=o(" (BART model)"),rXr=l(),GC=a("li"),sCe=a("strong"),tXr=o("bert"),aXr=o(" \u2014 "),$ee=a("a"),nXr=o("FlaxBertForPreTraining"),sXr=o(" (BERT model)"),lXr=l(),OC=a("li"),lCe=a("strong"),iXr=o("big_bird"),dXr=o(" \u2014 "),kee=a("a"),cXr=o("FlaxBigBirdForPreTraining"),fXr=o(" (BigBird model)"),mXr=l(),VC=a("li"),iCe=a("strong"),gXr=o("electra"),hXr=o(" \u2014 "),See=a("a"),pXr=o("FlaxElectraForPreTraining"),_Xr=o(" (ELECTRA model)"),uXr=l(),XC=a("li"),dCe=a("strong"),bXr=o("longt5"),vXr=o(" \u2014 "),Ree=a("a"),FXr=o("FlaxLongT5ForConditionalGeneration"),TXr=o(" (LongT5 model)"),MXr=l(),zC=a("li"),cCe=a("strong"),EXr=o("mbart"),CXr=o(" \u2014 "),Pee=a("a"),wXr=o("FlaxMBartForConditionalGeneration"),AXr=o(" (mBART model)"),LXr=l(),QC=a("li"),fCe=a("strong"),yXr=o("mt5"),xXr=o(" \u2014 "),Bee=a("a"),$Xr=o("FlaxMT5ForConditionalGeneration"),kXr=o(" (MT5 model)"),SXr=l(),WC=a("li"),mCe=a("strong"),RXr=o("roberta"),PXr=o(" \u2014 "),Iee=a("a"),BXr=o("FlaxRobertaForMaskedLM"),IXr=o(" (RoBERTa model)"),NXr=l(),HC=a("li"),gCe=a("strong"),qXr=o("roformer"),jXr=o(" \u2014 "),Nee=a("a"),DXr=o("FlaxRoFormerForMaskedLM"),GXr=o(" (RoFormer model)"),OXr=l(),UC=a("li"),hCe=a("strong"),VXr=o("t5"),XXr=o(" \u2014 "),qee=a("a"),zXr=o("FlaxT5ForConditionalGeneration"),QXr=o(" (T5 model)"),WXr=l(),JC=a("li"),pCe=a("strong"),HXr=o("wav2vec2"),UXr=o(" \u2014 "),jee=a("a"),JXr=o("FlaxWav2Vec2ForPreTraining"),YXr=o(" (Wav2Vec2 model)"),KXr=l(),YC=a("li"),_Ce=a("strong"),ZXr=o("xlm-roberta"),ezr=o(" \u2014 "),Dee=a("a"),ozr=o("FlaxXLMRobertaForMaskedLM"),rzr=o(" (XLM-RoBERTa model)"),tzr=l(),F(KC.$$.fragment),Tze=l(),rf=a("h2"),ZC=a("a"),uCe=a("span"),F(b$.$$.fragment),azr=l(),bCe=a("span"),nzr=o("FlaxAutoModelForMaskedLM"),Mze=l(),ur=a("div"),F(v$.$$.fragment),szr=l(),tf=a("p"),lzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gee=a("a"),izr=o("from_pretrained()"),dzr=o(" class method or the "),Oee=a("a"),czr=o("from_config()"),fzr=o(` class
method.`),mzr=l(),F$=a("p"),gzr=o("This class cannot be instantiated directly using "),vCe=a("code"),hzr=o("__init__()"),pzr=o(" (throws an error)."),_zr=l(),Ut=a("div"),F(T$.$$.fragment),uzr=l(),FCe=a("p"),bzr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vzr=l(),af=a("p"),Fzr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),Tzr=o("not"),Mzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),Ezr=o("from_pretrained()"),Czr=o(" to load the model weights."),wzr=l(),F(e5.$$.fragment),Azr=l(),zr=a("div"),F(M$.$$.fragment),Lzr=l(),MCe=a("p"),yzr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xzr=l(),En=a("p"),$zr=o("The model class to instantiate is selected based on the "),ECe=a("code"),kzr=o("model_type"),Szr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),Rzr=o("pretrained_model_name_or_path"),Pzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),Bzr=o("pretrained_model_name_or_path"),Izr=o(":"),Nzr=l(),$e=a("ul"),o5=a("li"),ACe=a("strong"),qzr=o("albert"),jzr=o(" \u2014 "),Xee=a("a"),Dzr=o("FlaxAlbertForMaskedLM"),Gzr=o(" (ALBERT model)"),Ozr=l(),r5=a("li"),LCe=a("strong"),Vzr=o("bart"),Xzr=o(" \u2014 "),zee=a("a"),zzr=o("FlaxBartForConditionalGeneration"),Qzr=o(" (BART model)"),Wzr=l(),t5=a("li"),yCe=a("strong"),Hzr=o("bert"),Uzr=o(" \u2014 "),Qee=a("a"),Jzr=o("FlaxBertForMaskedLM"),Yzr=o(" (BERT model)"),Kzr=l(),a5=a("li"),xCe=a("strong"),Zzr=o("big_bird"),eQr=o(" \u2014 "),Wee=a("a"),oQr=o("FlaxBigBirdForMaskedLM"),rQr=o(" (BigBird model)"),tQr=l(),n5=a("li"),$Ce=a("strong"),aQr=o("distilbert"),nQr=o(" \u2014 "),Hee=a("a"),sQr=o("FlaxDistilBertForMaskedLM"),lQr=o(" (DistilBERT model)"),iQr=l(),s5=a("li"),kCe=a("strong"),dQr=o("electra"),cQr=o(" \u2014 "),Uee=a("a"),fQr=o("FlaxElectraForMaskedLM"),mQr=o(" (ELECTRA model)"),gQr=l(),l5=a("li"),SCe=a("strong"),hQr=o("mbart"),pQr=o(" \u2014 "),Jee=a("a"),_Qr=o("FlaxMBartForConditionalGeneration"),uQr=o(" (mBART model)"),bQr=l(),i5=a("li"),RCe=a("strong"),vQr=o("roberta"),FQr=o(" \u2014 "),Yee=a("a"),TQr=o("FlaxRobertaForMaskedLM"),MQr=o(" (RoBERTa model)"),EQr=l(),d5=a("li"),PCe=a("strong"),CQr=o("roformer"),wQr=o(" \u2014 "),Kee=a("a"),AQr=o("FlaxRoFormerForMaskedLM"),LQr=o(" (RoFormer model)"),yQr=l(),c5=a("li"),BCe=a("strong"),xQr=o("xlm-roberta"),$Qr=o(" \u2014 "),Zee=a("a"),kQr=o("FlaxXLMRobertaForMaskedLM"),SQr=o(" (XLM-RoBERTa model)"),RQr=l(),F(f5.$$.fragment),Eze=l(),nf=a("h2"),m5=a("a"),ICe=a("span"),F(E$.$$.fragment),PQr=l(),NCe=a("span"),BQr=o("FlaxAutoModelForSeq2SeqLM"),Cze=l(),br=a("div"),F(C$.$$.fragment),IQr=l(),sf=a("p"),NQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eoe=a("a"),qQr=o("from_pretrained()"),jQr=o(" class method or the "),ooe=a("a"),DQr=o("from_config()"),GQr=o(` class
method.`),OQr=l(),w$=a("p"),VQr=o("This class cannot be instantiated directly using "),qCe=a("code"),XQr=o("__init__()"),zQr=o(" (throws an error)."),QQr=l(),Jt=a("div"),F(A$.$$.fragment),WQr=l(),jCe=a("p"),HQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UQr=l(),lf=a("p"),JQr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),YQr=o("not"),KQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("a"),ZQr=o("from_pretrained()"),eWr=o(" to load the model weights."),oWr=l(),F(g5.$$.fragment),rWr=l(),Qr=a("div"),F(L$.$$.fragment),tWr=l(),GCe=a("p"),aWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nWr=l(),Cn=a("p"),sWr=o("The model class to instantiate is selected based on the "),OCe=a("code"),lWr=o("model_type"),iWr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),dWr=o("pretrained_model_name_or_path"),cWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),fWr=o("pretrained_model_name_or_path"),mWr=o(":"),gWr=l(),ke=a("ul"),h5=a("li"),zCe=a("strong"),hWr=o("bart"),pWr=o(" \u2014 "),toe=a("a"),_Wr=o("FlaxBartForConditionalGeneration"),uWr=o(" (BART model)"),bWr=l(),p5=a("li"),QCe=a("strong"),vWr=o("blenderbot"),FWr=o(" \u2014 "),aoe=a("a"),TWr=o("FlaxBlenderbotForConditionalGeneration"),MWr=o(" (Blenderbot model)"),EWr=l(),_5=a("li"),WCe=a("strong"),CWr=o("blenderbot-small"),wWr=o(" \u2014 "),noe=a("a"),AWr=o("FlaxBlenderbotSmallForConditionalGeneration"),LWr=o(" (BlenderbotSmall model)"),yWr=l(),u5=a("li"),HCe=a("strong"),xWr=o("encoder-decoder"),$Wr=o(" \u2014 "),soe=a("a"),kWr=o("FlaxEncoderDecoderModel"),SWr=o(" (Encoder decoder model)"),RWr=l(),b5=a("li"),UCe=a("strong"),PWr=o("longt5"),BWr=o(" \u2014 "),loe=a("a"),IWr=o("FlaxLongT5ForConditionalGeneration"),NWr=o(" (LongT5 model)"),qWr=l(),v5=a("li"),JCe=a("strong"),jWr=o("marian"),DWr=o(" \u2014 "),ioe=a("a"),GWr=o("FlaxMarianMTModel"),OWr=o(" (Marian model)"),VWr=l(),F5=a("li"),YCe=a("strong"),XWr=o("mbart"),zWr=o(" \u2014 "),doe=a("a"),QWr=o("FlaxMBartForConditionalGeneration"),WWr=o(" (mBART model)"),HWr=l(),T5=a("li"),KCe=a("strong"),UWr=o("mt5"),JWr=o(" \u2014 "),coe=a("a"),YWr=o("FlaxMT5ForConditionalGeneration"),KWr=o(" (MT5 model)"),ZWr=l(),M5=a("li"),ZCe=a("strong"),eHr=o("pegasus"),oHr=o(" \u2014 "),foe=a("a"),rHr=o("FlaxPegasusForConditionalGeneration"),tHr=o(" (Pegasus model)"),aHr=l(),E5=a("li"),e5e=a("strong"),nHr=o("t5"),sHr=o(" \u2014 "),moe=a("a"),lHr=o("FlaxT5ForConditionalGeneration"),iHr=o(" (T5 model)"),dHr=l(),F(C5.$$.fragment),wze=l(),df=a("h2"),w5=a("a"),o5e=a("span"),F(y$.$$.fragment),cHr=l(),r5e=a("span"),fHr=o("FlaxAutoModelForSequenceClassification"),Aze=l(),vr=a("div"),F(x$.$$.fragment),mHr=l(),cf=a("p"),gHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),goe=a("a"),hHr=o("from_pretrained()"),pHr=o(" class method or the "),hoe=a("a"),_Hr=o("from_config()"),uHr=o(` class
method.`),bHr=l(),$$=a("p"),vHr=o("This class cannot be instantiated directly using "),t5e=a("code"),FHr=o("__init__()"),THr=o(" (throws an error)."),MHr=l(),Yt=a("div"),F(k$.$$.fragment),EHr=l(),a5e=a("p"),CHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wHr=l(),ff=a("p"),AHr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),LHr=o("not"),yHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),xHr=o("from_pretrained()"),$Hr=o(" to load the model weights."),kHr=l(),F(A5.$$.fragment),SHr=l(),Wr=a("div"),F(S$.$$.fragment),RHr=l(),s5e=a("p"),PHr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BHr=l(),wn=a("p"),IHr=o("The model class to instantiate is selected based on the "),l5e=a("code"),NHr=o("model_type"),qHr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),jHr=o("pretrained_model_name_or_path"),DHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),GHr=o("pretrained_model_name_or_path"),OHr=o(":"),VHr=l(),Se=a("ul"),L5=a("li"),c5e=a("strong"),XHr=o("albert"),zHr=o(" \u2014 "),_oe=a("a"),QHr=o("FlaxAlbertForSequenceClassification"),WHr=o(" (ALBERT model)"),HHr=l(),y5=a("li"),f5e=a("strong"),UHr=o("bart"),JHr=o(" \u2014 "),uoe=a("a"),YHr=o("FlaxBartForSequenceClassification"),KHr=o(" (BART model)"),ZHr=l(),x5=a("li"),m5e=a("strong"),eUr=o("bert"),oUr=o(" \u2014 "),boe=a("a"),rUr=o("FlaxBertForSequenceClassification"),tUr=o(" (BERT model)"),aUr=l(),$5=a("li"),g5e=a("strong"),nUr=o("big_bird"),sUr=o(" \u2014 "),voe=a("a"),lUr=o("FlaxBigBirdForSequenceClassification"),iUr=o(" (BigBird model)"),dUr=l(),k5=a("li"),h5e=a("strong"),cUr=o("distilbert"),fUr=o(" \u2014 "),Foe=a("a"),mUr=o("FlaxDistilBertForSequenceClassification"),gUr=o(" (DistilBERT model)"),hUr=l(),S5=a("li"),p5e=a("strong"),pUr=o("electra"),_Ur=o(" \u2014 "),Toe=a("a"),uUr=o("FlaxElectraForSequenceClassification"),bUr=o(" (ELECTRA model)"),vUr=l(),R5=a("li"),_5e=a("strong"),FUr=o("mbart"),TUr=o(" \u2014 "),Moe=a("a"),MUr=o("FlaxMBartForSequenceClassification"),EUr=o(" (mBART model)"),CUr=l(),P5=a("li"),u5e=a("strong"),wUr=o("roberta"),AUr=o(" \u2014 "),Eoe=a("a"),LUr=o("FlaxRobertaForSequenceClassification"),yUr=o(" (RoBERTa model)"),xUr=l(),B5=a("li"),b5e=a("strong"),$Ur=o("roformer"),kUr=o(" \u2014 "),Coe=a("a"),SUr=o("FlaxRoFormerForSequenceClassification"),RUr=o(" (RoFormer model)"),PUr=l(),I5=a("li"),v5e=a("strong"),BUr=o("xlm-roberta"),IUr=o(" \u2014 "),woe=a("a"),NUr=o("FlaxXLMRobertaForSequenceClassification"),qUr=o(" (XLM-RoBERTa model)"),jUr=l(),F(N5.$$.fragment),Lze=l(),mf=a("h2"),q5=a("a"),F5e=a("span"),F(R$.$$.fragment),DUr=l(),T5e=a("span"),GUr=o("FlaxAutoModelForQuestionAnswering"),yze=l(),Fr=a("div"),F(P$.$$.fragment),OUr=l(),gf=a("p"),VUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aoe=a("a"),XUr=o("from_pretrained()"),zUr=o(" class method or the "),Loe=a("a"),QUr=o("from_config()"),WUr=o(` class
method.`),HUr=l(),B$=a("p"),UUr=o("This class cannot be instantiated directly using "),M5e=a("code"),JUr=o("__init__()"),YUr=o(" (throws an error)."),KUr=l(),Kt=a("div"),F(I$.$$.fragment),ZUr=l(),E5e=a("p"),eJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oJr=l(),hf=a("p"),rJr=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),tJr=o("not"),aJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=a("a"),nJr=o("from_pretrained()"),sJr=o(" to load the model weights."),lJr=l(),F(j5.$$.fragment),iJr=l(),Hr=a("div"),F(N$.$$.fragment),dJr=l(),w5e=a("p"),cJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fJr=l(),An=a("p"),mJr=o("The model class to instantiate is selected based on the "),A5e=a("code"),gJr=o("model_type"),hJr=o(` property of the config object (either
passed as an argument or loaded from `),L5e=a("code"),pJr=o("pretrained_model_name_or_path"),_Jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=a("code"),uJr=o("pretrained_model_name_or_path"),bJr=o(":"),vJr=l(),Re=a("ul"),D5=a("li"),x5e=a("strong"),FJr=o("albert"),TJr=o(" \u2014 "),xoe=a("a"),MJr=o("FlaxAlbertForQuestionAnswering"),EJr=o(" (ALBERT model)"),CJr=l(),G5=a("li"),$5e=a("strong"),wJr=o("bart"),AJr=o(" \u2014 "),$oe=a("a"),LJr=o("FlaxBartForQuestionAnswering"),yJr=o(" (BART model)"),xJr=l(),O5=a("li"),k5e=a("strong"),$Jr=o("bert"),kJr=o(" \u2014 "),koe=a("a"),SJr=o("FlaxBertForQuestionAnswering"),RJr=o(" (BERT model)"),PJr=l(),V5=a("li"),S5e=a("strong"),BJr=o("big_bird"),IJr=o(" \u2014 "),Soe=a("a"),NJr=o("FlaxBigBirdForQuestionAnswering"),qJr=o(" (BigBird model)"),jJr=l(),X5=a("li"),R5e=a("strong"),DJr=o("distilbert"),GJr=o(" \u2014 "),Roe=a("a"),OJr=o("FlaxDistilBertForQuestionAnswering"),VJr=o(" (DistilBERT model)"),XJr=l(),z5=a("li"),P5e=a("strong"),zJr=o("electra"),QJr=o(" \u2014 "),Poe=a("a"),WJr=o("FlaxElectraForQuestionAnswering"),HJr=o(" (ELECTRA model)"),UJr=l(),Q5=a("li"),B5e=a("strong"),JJr=o("mbart"),YJr=o(" \u2014 "),Boe=a("a"),KJr=o("FlaxMBartForQuestionAnswering"),ZJr=o(" (mBART model)"),eYr=l(),W5=a("li"),I5e=a("strong"),oYr=o("roberta"),rYr=o(" \u2014 "),Ioe=a("a"),tYr=o("FlaxRobertaForQuestionAnswering"),aYr=o(" (RoBERTa model)"),nYr=l(),H5=a("li"),N5e=a("strong"),sYr=o("roformer"),lYr=o(" \u2014 "),Noe=a("a"),iYr=o("FlaxRoFormerForQuestionAnswering"),dYr=o(" (RoFormer model)"),cYr=l(),U5=a("li"),q5e=a("strong"),fYr=o("xlm-roberta"),mYr=o(" \u2014 "),qoe=a("a"),gYr=o("FlaxXLMRobertaForQuestionAnswering"),hYr=o(" (XLM-RoBERTa model)"),pYr=l(),F(J5.$$.fragment),xze=l(),pf=a("h2"),Y5=a("a"),j5e=a("span"),F(q$.$$.fragment),_Yr=l(),D5e=a("span"),uYr=o("FlaxAutoModelForTokenClassification"),$ze=l(),Tr=a("div"),F(j$.$$.fragment),bYr=l(),_f=a("p"),vYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),joe=a("a"),FYr=o("from_pretrained()"),TYr=o(" class method or the "),Doe=a("a"),MYr=o("from_config()"),EYr=o(` class
method.`),CYr=l(),D$=a("p"),wYr=o("This class cannot be instantiated directly using "),G5e=a("code"),AYr=o("__init__()"),LYr=o(" (throws an error)."),yYr=l(),Zt=a("div"),F(G$.$$.fragment),xYr=l(),O5e=a("p"),$Yr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kYr=l(),uf=a("p"),SYr=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),RYr=o("not"),PYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("a"),BYr=o("from_pretrained()"),IYr=o(" to load the model weights."),NYr=l(),F(K5.$$.fragment),qYr=l(),Ur=a("div"),F(O$.$$.fragment),jYr=l(),X5e=a("p"),DYr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GYr=l(),Ln=a("p"),OYr=o("The model class to instantiate is selected based on the "),z5e=a("code"),VYr=o("model_type"),XYr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),zYr=o("pretrained_model_name_or_path"),QYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),WYr=o("pretrained_model_name_or_path"),HYr=o(":"),UYr=l(),Ve=a("ul"),Z5=a("li"),H5e=a("strong"),JYr=o("albert"),YYr=o(" \u2014 "),Ooe=a("a"),KYr=o("FlaxAlbertForTokenClassification"),ZYr=o(" (ALBERT model)"),eKr=l(),e0=a("li"),U5e=a("strong"),oKr=o("bert"),rKr=o(" \u2014 "),Voe=a("a"),tKr=o("FlaxBertForTokenClassification"),aKr=o(" (BERT model)"),nKr=l(),o0=a("li"),J5e=a("strong"),sKr=o("big_bird"),lKr=o(" \u2014 "),Xoe=a("a"),iKr=o("FlaxBigBirdForTokenClassification"),dKr=o(" (BigBird model)"),cKr=l(),r0=a("li"),Y5e=a("strong"),fKr=o("distilbert"),mKr=o(" \u2014 "),zoe=a("a"),gKr=o("FlaxDistilBertForTokenClassification"),hKr=o(" (DistilBERT model)"),pKr=l(),t0=a("li"),K5e=a("strong"),_Kr=o("electra"),uKr=o(" \u2014 "),Qoe=a("a"),bKr=o("FlaxElectraForTokenClassification"),vKr=o(" (ELECTRA model)"),FKr=l(),a0=a("li"),Z5e=a("strong"),TKr=o("roberta"),MKr=o(" \u2014 "),Woe=a("a"),EKr=o("FlaxRobertaForTokenClassification"),CKr=o(" (RoBERTa model)"),wKr=l(),n0=a("li"),e0e=a("strong"),AKr=o("roformer"),LKr=o(" \u2014 "),Hoe=a("a"),yKr=o("FlaxRoFormerForTokenClassification"),xKr=o(" (RoFormer model)"),$Kr=l(),s0=a("li"),o0e=a("strong"),kKr=o("xlm-roberta"),SKr=o(" \u2014 "),Uoe=a("a"),RKr=o("FlaxXLMRobertaForTokenClassification"),PKr=o(" (XLM-RoBERTa model)"),BKr=l(),F(l0.$$.fragment),kze=l(),bf=a("h2"),i0=a("a"),r0e=a("span"),F(V$.$$.fragment),IKr=l(),t0e=a("span"),NKr=o("FlaxAutoModelForMultipleChoice"),Sze=l(),Mr=a("div"),F(X$.$$.fragment),qKr=l(),vf=a("p"),jKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Joe=a("a"),DKr=o("from_pretrained()"),GKr=o(" class method or the "),Yoe=a("a"),OKr=o("from_config()"),VKr=o(` class
method.`),XKr=l(),z$=a("p"),zKr=o("This class cannot be instantiated directly using "),a0e=a("code"),QKr=o("__init__()"),WKr=o(" (throws an error)."),HKr=l(),ea=a("div"),F(Q$.$$.fragment),UKr=l(),n0e=a("p"),JKr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YKr=l(),Ff=a("p"),KKr=o(`Note:
Loading a model from its configuration file does `),s0e=a("strong"),ZKr=o("not"),eZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("a"),oZr=o("from_pretrained()"),rZr=o(" to load the model weights."),tZr=l(),F(d0.$$.fragment),aZr=l(),Jr=a("div"),F(W$.$$.fragment),nZr=l(),l0e=a("p"),sZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lZr=l(),yn=a("p"),iZr=o("The model class to instantiate is selected based on the "),i0e=a("code"),dZr=o("model_type"),cZr=o(` property of the config object (either
passed as an argument or loaded from `),d0e=a("code"),fZr=o("pretrained_model_name_or_path"),mZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=a("code"),gZr=o("pretrained_model_name_or_path"),hZr=o(":"),pZr=l(),Xe=a("ul"),c0=a("li"),f0e=a("strong"),_Zr=o("albert"),uZr=o(" \u2014 "),Zoe=a("a"),bZr=o("FlaxAlbertForMultipleChoice"),vZr=o(" (ALBERT model)"),FZr=l(),f0=a("li"),m0e=a("strong"),TZr=o("bert"),MZr=o(" \u2014 "),ere=a("a"),EZr=o("FlaxBertForMultipleChoice"),CZr=o(" (BERT model)"),wZr=l(),m0=a("li"),g0e=a("strong"),AZr=o("big_bird"),LZr=o(" \u2014 "),ore=a("a"),yZr=o("FlaxBigBirdForMultipleChoice"),xZr=o(" (BigBird model)"),$Zr=l(),g0=a("li"),h0e=a("strong"),kZr=o("distilbert"),SZr=o(" \u2014 "),rre=a("a"),RZr=o("FlaxDistilBertForMultipleChoice"),PZr=o(" (DistilBERT model)"),BZr=l(),h0=a("li"),p0e=a("strong"),IZr=o("electra"),NZr=o(" \u2014 "),tre=a("a"),qZr=o("FlaxElectraForMultipleChoice"),jZr=o(" (ELECTRA model)"),DZr=l(),p0=a("li"),_0e=a("strong"),GZr=o("roberta"),OZr=o(" \u2014 "),are=a("a"),VZr=o("FlaxRobertaForMultipleChoice"),XZr=o(" (RoBERTa model)"),zZr=l(),_0=a("li"),u0e=a("strong"),QZr=o("roformer"),WZr=o(" \u2014 "),nre=a("a"),HZr=o("FlaxRoFormerForMultipleChoice"),UZr=o(" (RoFormer model)"),JZr=l(),u0=a("li"),b0e=a("strong"),YZr=o("xlm-roberta"),KZr=o(" \u2014 "),sre=a("a"),ZZr=o("FlaxXLMRobertaForMultipleChoice"),eet=o(" (XLM-RoBERTa model)"),oet=l(),F(b0.$$.fragment),Rze=l(),Tf=a("h2"),v0=a("a"),v0e=a("span"),F(H$.$$.fragment),ret=l(),F0e=a("span"),tet=o("FlaxAutoModelForNextSentencePrediction"),Pze=l(),Er=a("div"),F(U$.$$.fragment),aet=l(),Mf=a("p"),net=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lre=a("a"),set=o("from_pretrained()"),iet=o(" class method or the "),ire=a("a"),det=o("from_config()"),cet=o(` class
method.`),fet=l(),J$=a("p"),met=o("This class cannot be instantiated directly using "),T0e=a("code"),get=o("__init__()"),het=o(" (throws an error)."),pet=l(),oa=a("div"),F(Y$.$$.fragment),_et=l(),M0e=a("p"),uet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bet=l(),Ef=a("p"),vet=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),Fet=o("not"),Tet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),Met=o("from_pretrained()"),Eet=o(" to load the model weights."),Cet=l(),F(F0.$$.fragment),wet=l(),Yr=a("div"),F(K$.$$.fragment),Aet=l(),C0e=a("p"),Let=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yet=l(),xn=a("p"),xet=o("The model class to instantiate is selected based on the "),w0e=a("code"),$et=o("model_type"),ket=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),Set=o("pretrained_model_name_or_path"),Ret=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),Pet=o("pretrained_model_name_or_path"),Bet=o(":"),Iet=l(),y0e=a("ul"),T0=a("li"),x0e=a("strong"),Net=o("bert"),qet=o(" \u2014 "),cre=a("a"),jet=o("FlaxBertForNextSentencePrediction"),Det=o(" (BERT model)"),Get=l(),F(M0.$$.fragment),Bze=l(),Cf=a("h2"),E0=a("a"),$0e=a("span"),F(Z$.$$.fragment),Oet=l(),k0e=a("span"),Vet=o("FlaxAutoModelForImageClassification"),Ize=l(),Cr=a("div"),F(ek.$$.fragment),Xet=l(),wf=a("p"),zet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fre=a("a"),Qet=o("from_pretrained()"),Wet=o(" class method or the "),mre=a("a"),Het=o("from_config()"),Uet=o(` class
method.`),Jet=l(),ok=a("p"),Yet=o("This class cannot be instantiated directly using "),S0e=a("code"),Ket=o("__init__()"),Zet=o(" (throws an error)."),eot=l(),ra=a("div"),F(rk.$$.fragment),oot=l(),R0e=a("p"),rot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tot=l(),Af=a("p"),aot=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),not=o("not"),sot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),lot=o("from_pretrained()"),iot=o(" to load the model weights."),dot=l(),F(C0.$$.fragment),cot=l(),Kr=a("div"),F(tk.$$.fragment),fot=l(),B0e=a("p"),mot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),got=l(),$n=a("p"),hot=o("The model class to instantiate is selected based on the "),I0e=a("code"),pot=o("model_type"),_ot=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),uot=o("pretrained_model_name_or_path"),bot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),vot=o("pretrained_model_name_or_path"),Fot=o(":"),Tot=l(),ak=a("ul"),w0=a("li"),j0e=a("strong"),Mot=o("beit"),Eot=o(" \u2014 "),hre=a("a"),Cot=o("FlaxBeitForImageClassification"),wot=o(" (BEiT model)"),Aot=l(),A0=a("li"),D0e=a("strong"),Lot=o("vit"),yot=o(" \u2014 "),pre=a("a"),xot=o("FlaxViTForImageClassification"),$ot=o(" (ViT model)"),kot=l(),F(L0.$$.fragment),Nze=l(),Lf=a("h2"),y0=a("a"),G0e=a("span"),F(nk.$$.fragment),Sot=l(),O0e=a("span"),Rot=o("FlaxAutoModelForVision2Seq"),qze=l(),wr=a("div"),F(sk.$$.fragment),Pot=l(),yf=a("p"),Bot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_re=a("a"),Iot=o("from_pretrained()"),Not=o(" class method or the "),ure=a("a"),qot=o("from_config()"),jot=o(` class
method.`),Dot=l(),lk=a("p"),Got=o("This class cannot be instantiated directly using "),V0e=a("code"),Oot=o("__init__()"),Vot=o(" (throws an error)."),Xot=l(),ta=a("div"),F(ik.$$.fragment),zot=l(),X0e=a("p"),Qot=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wot=l(),xf=a("p"),Hot=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),Uot=o("not"),Jot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),Yot=o("from_pretrained()"),Kot=o(" to load the model weights."),Zot=l(),F(x0.$$.fragment),ert=l(),Zr=a("div"),F(dk.$$.fragment),ort=l(),Q0e=a("p"),rrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),trt=l(),kn=a("p"),art=o("The model class to instantiate is selected based on the "),W0e=a("code"),nrt=o("model_type"),srt=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),lrt=o("pretrained_model_name_or_path"),irt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),drt=o("pretrained_model_name_or_path"),crt=o(":"),frt=l(),J0e=a("ul"),$0=a("li"),Y0e=a("strong"),mrt=o("vision-encoder-decoder"),grt=o(" \u2014 "),vre=a("a"),hrt=o("FlaxVisionEncoderDecoderModel"),prt=o(" (Vision Encoder decoder model)"),_rt=l(),F(k0.$$.fragment),this.h()},l(f){const u=jzt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var ck=s(p);m=n(ck,"A",{id:!0,class:!0,href:!0});var K0e=s(m);_=n(K0e,"SPAN",{});var Z0e=s(_);T(d.$$.fragment,Z0e),Z0e.forEach(t),K0e.forEach(t),h=i(ck),Eo=n(ck,"SPAN",{});var ewe=s(Eo);Ai=r(ewe,"Auto Classes"),ewe.forEach(t),ck.forEach(t),Rf=i(f),st=n(f,"P",{});var fk=s(st);Li=r(fk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(fk,"CODE",{});var owe=s(yi);JA=r(owe,"from_pretrained()"),owe.forEach(t),Pf=r(fk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),fk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);xi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var rwe=s(Rn);YA=r(rwe,"AutoConfig"),rwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var twe=s(Bn);KA=r(twe,"AutoModel"),twe.forEach(t),$i=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var awe=s(In);ZA=r(awe,"AutoTokenizer"),awe.forEach(t),ki=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Bf=i(f),T(ka.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var mk=s(Ae);$S=r(mk,"will create a model that is an instance of "),Si=n(mk,"A",{href:!0});var nwe=s(Si);kS=r(nwe,"BertModel"),nwe.forEach(t),SS=r(mk,"."),mk.forEach(t),Co=i(f),Sa=n(f,"P",{});var gk=s(Sa);RS=r(gk,"There is one class of "),If=n(gk,"CODE",{});var swe=s(If);PS=r(swe,"AutoModel"),swe.forEach(t),UWe=r(gk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gk.forEach(t),PVe=i(f),Ri=n(f,"H2",{class:!0});var hk=s(Ri);Nf=n(hk,"A",{id:!0,class:!0,href:!0});var lwe=s(Nf);hae=n(lwe,"SPAN",{});var iwe=s(hae);T(eL.$$.fragment,iwe),iwe.forEach(t),lwe.forEach(t),JWe=i(hk),pae=n(hk,"SPAN",{});var dwe=s(pae);YWe=r(dwe,"Extending the Auto Classes"),dwe.forEach(t),hk.forEach(t),BVe=i(f),Nn=n(f,"P",{});var $f=s(Nn);KWe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_ae=n($f,"CODE",{});var cwe=s(_ae);ZWe=r(cwe,"NewModel"),cwe.forEach(t),eHe=r($f,", make sure you have a "),uae=n($f,"CODE",{});var fwe=s(uae);oHe=r(fwe,"NewModelConfig"),fwe.forEach(t),rHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),IVe=i(f),T(oL.$$.fragment,f),NVe=i(f),BS=n(f,"P",{});var mwe=s(BS);tHe=r(mwe,"You will then be able to use the auto classes like you would usually do!"),mwe.forEach(t),qVe=i(f),T(qf.$$.fragment,f),jVe=i(f),Pi=n(f,"H2",{class:!0});var pk=s(Pi);jf=n(pk,"A",{id:!0,class:!0,href:!0});var gwe=s(jf);bae=n(gwe,"SPAN",{});var hwe=s(bae);T(rL.$$.fragment,hwe),hwe.forEach(t),gwe.forEach(t),aHe=i(pk),vae=n(pk,"SPAN",{});var pwe=s(vae);nHe=r(pwe,"AutoConfig"),pwe.forEach(t),pk.forEach(t),DVe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(tL.$$.fragment,at),sHe=i(at),aL=n(at,"P",{});var _k=s(aL);lHe=r(_k,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),IS=n(_k,"A",{href:!0});var _we=s(IS);iHe=r(_we,"from_pretrained()"),_we.forEach(t),dHe=r(_k," class method."),_k.forEach(t),cHe=i(at),nL=n(at,"P",{});var uk=s(nL);fHe=r(uk,"This class cannot be instantiated directly using "),Fae=n(uk,"CODE",{});var uwe=s(Fae);mHe=r(uwe,"__init__()"),uwe.forEach(t),gHe=r(uk," (throws an error)."),uk.forEach(t),hHe=i(at),Ar=n(at,"DIV",{class:!0});var nt=s(Ar);T(sL.$$.fragment,nt),pHe=i(nt),Tae=n(nt,"P",{});var bwe=s(Tae);_He=r(bwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bwe.forEach(t),uHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);bHe=r(kf,"The configuration class to instantiate is selected based on the "),Mae=n(kf,"CODE",{});var vwe=s(Mae);vHe=r(vwe,"model_type"),vwe.forEach(t),FHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eae=n(kf,"CODE",{});var Fwe=s(Eae);THe=r(Fwe,"pretrained_model_name_or_path"),Fwe.forEach(t),MHe=r(kf,":"),kf.forEach(t),EHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var S0=s(Df);Cae=n(S0,"STRONG",{});var Twe=s(Cae);CHe=r(Twe,"albert"),Twe.forEach(t),wHe=r(S0," \u2014 "),NS=n(S0,"A",{href:!0});var Mwe=s(NS);AHe=r(Mwe,"AlbertConfig"),Mwe.forEach(t),LHe=r(S0," (ALBERT model)"),S0.forEach(t),yHe=i(L),Gf=n(L,"LI",{});var R0=s(Gf);wae=n(R0,"STRONG",{});var Ewe=s(wae);xHe=r(Ewe,"bart"),Ewe.forEach(t),$He=r(R0," \u2014 "),qS=n(R0,"A",{href:!0});var Cwe=s(qS);kHe=r(Cwe,"BartConfig"),Cwe.forEach(t),SHe=r(R0," (BART model)"),R0.forEach(t),RHe=i(L),Of=n(L,"LI",{});var P0=s(Of);Aae=n(P0,"STRONG",{});var wwe=s(Aae);PHe=r(wwe,"beit"),wwe.forEach(t),BHe=r(P0," \u2014 "),jS=n(P0,"A",{href:!0});var Awe=s(jS);IHe=r(Awe,"BeitConfig"),Awe.forEach(t),NHe=r(P0," (BEiT model)"),P0.forEach(t),qHe=i(L),Vf=n(L,"LI",{});var B0=s(Vf);Lae=n(B0,"STRONG",{});var Lwe=s(Lae);jHe=r(Lwe,"bert"),Lwe.forEach(t),DHe=r(B0," \u2014 "),DS=n(B0,"A",{href:!0});var ywe=s(DS);GHe=r(ywe,"BertConfig"),ywe.forEach(t),OHe=r(B0," (BERT model)"),B0.forEach(t),VHe=i(L),Xf=n(L,"LI",{});var I0=s(Xf);yae=n(I0,"STRONG",{});var xwe=s(yae);XHe=r(xwe,"bert-generation"),xwe.forEach(t),zHe=r(I0," \u2014 "),GS=n(I0,"A",{href:!0});var $we=s(GS);QHe=r($we,"BertGenerationConfig"),$we.forEach(t),WHe=r(I0," (Bert Generation model)"),I0.forEach(t),HHe=i(L),zf=n(L,"LI",{});var N0=s(zf);xae=n(N0,"STRONG",{});var kwe=s(xae);UHe=r(kwe,"big_bird"),kwe.forEach(t),JHe=r(N0," \u2014 "),OS=n(N0,"A",{href:!0});var Swe=s(OS);YHe=r(Swe,"BigBirdConfig"),Swe.forEach(t),KHe=r(N0," (BigBird model)"),N0.forEach(t),ZHe=i(L),Qf=n(L,"LI",{});var q0=s(Qf);$ae=n(q0,"STRONG",{});var Rwe=s($ae);eUe=r(Rwe,"bigbird_pegasus"),Rwe.forEach(t),oUe=r(q0," \u2014 "),VS=n(q0,"A",{href:!0});var Pwe=s(VS);rUe=r(Pwe,"BigBirdPegasusConfig"),Pwe.forEach(t),tUe=r(q0," (BigBird-Pegasus model)"),q0.forEach(t),aUe=i(L),Wf=n(L,"LI",{});var j0=s(Wf);kae=n(j0,"STRONG",{});var Bwe=s(kae);nUe=r(Bwe,"blenderbot"),Bwe.forEach(t),sUe=r(j0," \u2014 "),XS=n(j0,"A",{href:!0});var Iwe=s(XS);lUe=r(Iwe,"BlenderbotConfig"),Iwe.forEach(t),iUe=r(j0," (Blenderbot model)"),j0.forEach(t),dUe=i(L),Hf=n(L,"LI",{});var D0=s(Hf);Sae=n(D0,"STRONG",{});var Nwe=s(Sae);cUe=r(Nwe,"blenderbot-small"),Nwe.forEach(t),fUe=r(D0," \u2014 "),zS=n(D0,"A",{href:!0});var qwe=s(zS);mUe=r(qwe,"BlenderbotSmallConfig"),qwe.forEach(t),gUe=r(D0," (BlenderbotSmall model)"),D0.forEach(t),hUe=i(L),Uf=n(L,"LI",{});var G0=s(Uf);Rae=n(G0,"STRONG",{});var jwe=s(Rae);pUe=r(jwe,"bloom"),jwe.forEach(t),_Ue=r(G0," \u2014 "),QS=n(G0,"A",{href:!0});var Dwe=s(QS);uUe=r(Dwe,"BloomConfig"),Dwe.forEach(t),bUe=r(G0," (BLOOM model)"),G0.forEach(t),vUe=i(L),Jf=n(L,"LI",{});var O0=s(Jf);Pae=n(O0,"STRONG",{});var Gwe=s(Pae);FUe=r(Gwe,"camembert"),Gwe.forEach(t),TUe=r(O0," \u2014 "),WS=n(O0,"A",{href:!0});var Owe=s(WS);MUe=r(Owe,"CamembertConfig"),Owe.forEach(t),EUe=r(O0," (CamemBERT model)"),O0.forEach(t),CUe=i(L),Yf=n(L,"LI",{});var V0=s(Yf);Bae=n(V0,"STRONG",{});var Vwe=s(Bae);wUe=r(Vwe,"canine"),Vwe.forEach(t),AUe=r(V0," \u2014 "),HS=n(V0,"A",{href:!0});var Xwe=s(HS);LUe=r(Xwe,"CanineConfig"),Xwe.forEach(t),yUe=r(V0," (CANINE model)"),V0.forEach(t),xUe=i(L),Kf=n(L,"LI",{});var X0=s(Kf);Iae=n(X0,"STRONG",{});var zwe=s(Iae);$Ue=r(zwe,"clip"),zwe.forEach(t),kUe=r(X0," \u2014 "),US=n(X0,"A",{href:!0});var Qwe=s(US);SUe=r(Qwe,"CLIPConfig"),Qwe.forEach(t),RUe=r(X0," (CLIP model)"),X0.forEach(t),PUe=i(L),Zf=n(L,"LI",{});var z0=s(Zf);Nae=n(z0,"STRONG",{});var Wwe=s(Nae);BUe=r(Wwe,"codegen"),Wwe.forEach(t),IUe=r(z0," \u2014 "),JS=n(z0,"A",{href:!0});var Hwe=s(JS);NUe=r(Hwe,"CodeGenConfig"),Hwe.forEach(t),qUe=r(z0," (CodeGen model)"),z0.forEach(t),jUe=i(L),em=n(L,"LI",{});var Q0=s(em);qae=n(Q0,"STRONG",{});var Uwe=s(qae);DUe=r(Uwe,"convbert"),Uwe.forEach(t),GUe=r(Q0," \u2014 "),YS=n(Q0,"A",{href:!0});var Jwe=s(YS);OUe=r(Jwe,"ConvBertConfig"),Jwe.forEach(t),VUe=r(Q0," (ConvBERT model)"),Q0.forEach(t),XUe=i(L),om=n(L,"LI",{});var W0=s(om);jae=n(W0,"STRONG",{});var Ywe=s(jae);zUe=r(Ywe,"convnext"),Ywe.forEach(t),QUe=r(W0," \u2014 "),KS=n(W0,"A",{href:!0});var Kwe=s(KS);WUe=r(Kwe,"ConvNextConfig"),Kwe.forEach(t),HUe=r(W0," (ConvNeXT model)"),W0.forEach(t),UUe=i(L),rm=n(L,"LI",{});var H0=s(rm);Dae=n(H0,"STRONG",{});var Zwe=s(Dae);JUe=r(Zwe,"ctrl"),Zwe.forEach(t),YUe=r(H0," \u2014 "),ZS=n(H0,"A",{href:!0});var eAe=s(ZS);KUe=r(eAe,"CTRLConfig"),eAe.forEach(t),ZUe=r(H0," (CTRL model)"),H0.forEach(t),eJe=i(L),tm=n(L,"LI",{});var U0=s(tm);Gae=n(U0,"STRONG",{});var oAe=s(Gae);oJe=r(oAe,"cvt"),oAe.forEach(t),rJe=r(U0," \u2014 "),eR=n(U0,"A",{href:!0});var rAe=s(eR);tJe=r(rAe,"CvtConfig"),rAe.forEach(t),aJe=r(U0," (CvT model)"),U0.forEach(t),nJe=i(L),am=n(L,"LI",{});var J0=s(am);Oae=n(J0,"STRONG",{});var tAe=s(Oae);sJe=r(tAe,"data2vec-audio"),tAe.forEach(t),lJe=r(J0," \u2014 "),oR=n(J0,"A",{href:!0});var aAe=s(oR);iJe=r(aAe,"Data2VecAudioConfig"),aAe.forEach(t),dJe=r(J0," (Data2VecAudio model)"),J0.forEach(t),cJe=i(L),nm=n(L,"LI",{});var Y0=s(nm);Vae=n(Y0,"STRONG",{});var nAe=s(Vae);fJe=r(nAe,"data2vec-text"),nAe.forEach(t),mJe=r(Y0," \u2014 "),rR=n(Y0,"A",{href:!0});var sAe=s(rR);gJe=r(sAe,"Data2VecTextConfig"),sAe.forEach(t),hJe=r(Y0," (Data2VecText model)"),Y0.forEach(t),pJe=i(L),sm=n(L,"LI",{});var K0=s(sm);Xae=n(K0,"STRONG",{});var lAe=s(Xae);_Je=r(lAe,"data2vec-vision"),lAe.forEach(t),uJe=r(K0," \u2014 "),tR=n(K0,"A",{href:!0});var iAe=s(tR);bJe=r(iAe,"Data2VecVisionConfig"),iAe.forEach(t),vJe=r(K0," (Data2VecVision model)"),K0.forEach(t),FJe=i(L),lm=n(L,"LI",{});var Z0=s(lm);zae=n(Z0,"STRONG",{});var dAe=s(zae);TJe=r(dAe,"deberta"),dAe.forEach(t),MJe=r(Z0," \u2014 "),aR=n(Z0,"A",{href:!0});var cAe=s(aR);EJe=r(cAe,"DebertaConfig"),cAe.forEach(t),CJe=r(Z0," (DeBERTa model)"),Z0.forEach(t),wJe=i(L),im=n(L,"LI",{});var ew=s(im);Qae=n(ew,"STRONG",{});var fAe=s(Qae);AJe=r(fAe,"deberta-v2"),fAe.forEach(t),LJe=r(ew," \u2014 "),nR=n(ew,"A",{href:!0});var mAe=s(nR);yJe=r(mAe,"DebertaV2Config"),mAe.forEach(t),xJe=r(ew," (DeBERTa-v2 model)"),ew.forEach(t),$Je=i(L),dm=n(L,"LI",{});var ow=s(dm);Wae=n(ow,"STRONG",{});var brt=s(Wae);kJe=r(brt,"decision_transformer"),brt.forEach(t),SJe=r(ow," \u2014 "),sR=n(ow,"A",{href:!0});var vrt=s(sR);RJe=r(vrt,"DecisionTransformerConfig"),vrt.forEach(t),PJe=r(ow," (Decision Transformer model)"),ow.forEach(t),BJe=i(L),cm=n(L,"LI",{});var gAe=s(cm);Hae=n(gAe,"STRONG",{});var Frt=s(Hae);IJe=r(Frt,"deit"),Frt.forEach(t),NJe=r(gAe," \u2014 "),lR=n(gAe,"A",{href:!0});var Trt=s(lR);qJe=r(Trt,"DeiTConfig"),Trt.forEach(t),jJe=r(gAe," (DeiT model)"),gAe.forEach(t),DJe=i(L),fm=n(L,"LI",{});var hAe=s(fm);Uae=n(hAe,"STRONG",{});var Mrt=s(Uae);GJe=r(Mrt,"detr"),Mrt.forEach(t),OJe=r(hAe," \u2014 "),iR=n(hAe,"A",{href:!0});var Ert=s(iR);VJe=r(Ert,"DetrConfig"),Ert.forEach(t),XJe=r(hAe," (DETR model)"),hAe.forEach(t),zJe=i(L),mm=n(L,"LI",{});var pAe=s(mm);Jae=n(pAe,"STRONG",{});var Crt=s(Jae);QJe=r(Crt,"distilbert"),Crt.forEach(t),WJe=r(pAe," \u2014 "),dR=n(pAe,"A",{href:!0});var wrt=s(dR);HJe=r(wrt,"DistilBertConfig"),wrt.forEach(t),UJe=r(pAe," (DistilBERT model)"),pAe.forEach(t),JJe=i(L),gm=n(L,"LI",{});var _Ae=s(gm);Yae=n(_Ae,"STRONG",{});var Art=s(Yae);YJe=r(Art,"dpr"),Art.forEach(t),KJe=r(_Ae," \u2014 "),cR=n(_Ae,"A",{href:!0});var Lrt=s(cR);ZJe=r(Lrt,"DPRConfig"),Lrt.forEach(t),eYe=r(_Ae," (DPR model)"),_Ae.forEach(t),oYe=i(L),hm=n(L,"LI",{});var uAe=s(hm);Kae=n(uAe,"STRONG",{});var yrt=s(Kae);rYe=r(yrt,"dpt"),yrt.forEach(t),tYe=r(uAe," \u2014 "),fR=n(uAe,"A",{href:!0});var xrt=s(fR);aYe=r(xrt,"DPTConfig"),xrt.forEach(t),nYe=r(uAe," (DPT model)"),uAe.forEach(t),sYe=i(L),pm=n(L,"LI",{});var bAe=s(pm);Zae=n(bAe,"STRONG",{});var $rt=s(Zae);lYe=r($rt,"electra"),$rt.forEach(t),iYe=r(bAe," \u2014 "),mR=n(bAe,"A",{href:!0});var krt=s(mR);dYe=r(krt,"ElectraConfig"),krt.forEach(t),cYe=r(bAe," (ELECTRA model)"),bAe.forEach(t),fYe=i(L),_m=n(L,"LI",{});var vAe=s(_m);ene=n(vAe,"STRONG",{});var Srt=s(ene);mYe=r(Srt,"encoder-decoder"),Srt.forEach(t),gYe=r(vAe," \u2014 "),gR=n(vAe,"A",{href:!0});var Rrt=s(gR);hYe=r(Rrt,"EncoderDecoderConfig"),Rrt.forEach(t),pYe=r(vAe," (Encoder decoder model)"),vAe.forEach(t),_Ye=i(L),um=n(L,"LI",{});var FAe=s(um);one=n(FAe,"STRONG",{});var Prt=s(one);uYe=r(Prt,"flaubert"),Prt.forEach(t),bYe=r(FAe," \u2014 "),hR=n(FAe,"A",{href:!0});var Brt=s(hR);vYe=r(Brt,"FlaubertConfig"),Brt.forEach(t),FYe=r(FAe," (FlauBERT model)"),FAe.forEach(t),TYe=i(L),bm=n(L,"LI",{});var TAe=s(bm);rne=n(TAe,"STRONG",{});var Irt=s(rne);MYe=r(Irt,"flava"),Irt.forEach(t),EYe=r(TAe," \u2014 "),pR=n(TAe,"A",{href:!0});var Nrt=s(pR);CYe=r(Nrt,"FlavaConfig"),Nrt.forEach(t),wYe=r(TAe," (FLAVA model)"),TAe.forEach(t),AYe=i(L),vm=n(L,"LI",{});var MAe=s(vm);tne=n(MAe,"STRONG",{});var qrt=s(tne);LYe=r(qrt,"fnet"),qrt.forEach(t),yYe=r(MAe," \u2014 "),_R=n(MAe,"A",{href:!0});var jrt=s(_R);xYe=r(jrt,"FNetConfig"),jrt.forEach(t),$Ye=r(MAe," (FNet model)"),MAe.forEach(t),kYe=i(L),Fm=n(L,"LI",{});var EAe=s(Fm);ane=n(EAe,"STRONG",{});var Drt=s(ane);SYe=r(Drt,"fsmt"),Drt.forEach(t),RYe=r(EAe," \u2014 "),uR=n(EAe,"A",{href:!0});var Grt=s(uR);PYe=r(Grt,"FSMTConfig"),Grt.forEach(t),BYe=r(EAe," (FairSeq Machine-Translation model)"),EAe.forEach(t),IYe=i(L),Tm=n(L,"LI",{});var CAe=s(Tm);nne=n(CAe,"STRONG",{});var Ort=s(nne);NYe=r(Ort,"funnel"),Ort.forEach(t),qYe=r(CAe," \u2014 "),bR=n(CAe,"A",{href:!0});var Vrt=s(bR);jYe=r(Vrt,"FunnelConfig"),Vrt.forEach(t),DYe=r(CAe," (Funnel Transformer model)"),CAe.forEach(t),GYe=i(L),Mm=n(L,"LI",{});var wAe=s(Mm);sne=n(wAe,"STRONG",{});var Xrt=s(sne);OYe=r(Xrt,"glpn"),Xrt.forEach(t),VYe=r(wAe," \u2014 "),vR=n(wAe,"A",{href:!0});var zrt=s(vR);XYe=r(zrt,"GLPNConfig"),zrt.forEach(t),zYe=r(wAe," (GLPN model)"),wAe.forEach(t),QYe=i(L),Em=n(L,"LI",{});var AAe=s(Em);lne=n(AAe,"STRONG",{});var Qrt=s(lne);WYe=r(Qrt,"gpt2"),Qrt.forEach(t),HYe=r(AAe," \u2014 "),FR=n(AAe,"A",{href:!0});var Wrt=s(FR);UYe=r(Wrt,"GPT2Config"),Wrt.forEach(t),JYe=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),YYe=i(L),Cm=n(L,"LI",{});var LAe=s(Cm);ine=n(LAe,"STRONG",{});var Hrt=s(ine);KYe=r(Hrt,"gpt_neo"),Hrt.forEach(t),ZYe=r(LAe," \u2014 "),TR=n(LAe,"A",{href:!0});var Urt=s(TR);eKe=r(Urt,"GPTNeoConfig"),Urt.forEach(t),oKe=r(LAe," (GPT Neo model)"),LAe.forEach(t),rKe=i(L),wm=n(L,"LI",{});var yAe=s(wm);dne=n(yAe,"STRONG",{});var Jrt=s(dne);tKe=r(Jrt,"gpt_neox"),Jrt.forEach(t),aKe=r(yAe," \u2014 "),MR=n(yAe,"A",{href:!0});var Yrt=s(MR);nKe=r(Yrt,"GPTNeoXConfig"),Yrt.forEach(t),sKe=r(yAe," (GPT NeoX model)"),yAe.forEach(t),lKe=i(L),Am=n(L,"LI",{});var xAe=s(Am);cne=n(xAe,"STRONG",{});var Krt=s(cne);iKe=r(Krt,"gptj"),Krt.forEach(t),dKe=r(xAe," \u2014 "),ER=n(xAe,"A",{href:!0});var Zrt=s(ER);cKe=r(Zrt,"GPTJConfig"),Zrt.forEach(t),fKe=r(xAe," (GPT-J model)"),xAe.forEach(t),mKe=i(L),Lm=n(L,"LI",{});var $Ae=s(Lm);fne=n($Ae,"STRONG",{});var ett=s(fne);gKe=r(ett,"groupvit"),ett.forEach(t),hKe=r($Ae," \u2014 "),CR=n($Ae,"A",{href:!0});var ott=s(CR);pKe=r(ott,"GroupViTConfig"),ott.forEach(t),_Ke=r($Ae," (GroupViT model)"),$Ae.forEach(t),uKe=i(L),ym=n(L,"LI",{});var kAe=s(ym);mne=n(kAe,"STRONG",{});var rtt=s(mne);bKe=r(rtt,"hubert"),rtt.forEach(t),vKe=r(kAe," \u2014 "),wR=n(kAe,"A",{href:!0});var ttt=s(wR);FKe=r(ttt,"HubertConfig"),ttt.forEach(t),TKe=r(kAe," (Hubert model)"),kAe.forEach(t),MKe=i(L),xm=n(L,"LI",{});var SAe=s(xm);gne=n(SAe,"STRONG",{});var att=s(gne);EKe=r(att,"ibert"),att.forEach(t),CKe=r(SAe," \u2014 "),AR=n(SAe,"A",{href:!0});var ntt=s(AR);wKe=r(ntt,"IBertConfig"),ntt.forEach(t),AKe=r(SAe," (I-BERT model)"),SAe.forEach(t),LKe=i(L),$m=n(L,"LI",{});var RAe=s($m);hne=n(RAe,"STRONG",{});var stt=s(hne);yKe=r(stt,"imagegpt"),stt.forEach(t),xKe=r(RAe," \u2014 "),LR=n(RAe,"A",{href:!0});var ltt=s(LR);$Ke=r(ltt,"ImageGPTConfig"),ltt.forEach(t),kKe=r(RAe," (ImageGPT model)"),RAe.forEach(t),SKe=i(L),km=n(L,"LI",{});var PAe=s(km);pne=n(PAe,"STRONG",{});var itt=s(pne);RKe=r(itt,"layoutlm"),itt.forEach(t),PKe=r(PAe," \u2014 "),yR=n(PAe,"A",{href:!0});var dtt=s(yR);BKe=r(dtt,"LayoutLMConfig"),dtt.forEach(t),IKe=r(PAe," (LayoutLM model)"),PAe.forEach(t),NKe=i(L),Sm=n(L,"LI",{});var BAe=s(Sm);_ne=n(BAe,"STRONG",{});var ctt=s(_ne);qKe=r(ctt,"layoutlmv2"),ctt.forEach(t),jKe=r(BAe," \u2014 "),xR=n(BAe,"A",{href:!0});var ftt=s(xR);DKe=r(ftt,"LayoutLMv2Config"),ftt.forEach(t),GKe=r(BAe," (LayoutLMv2 model)"),BAe.forEach(t),OKe=i(L),Rm=n(L,"LI",{});var IAe=s(Rm);une=n(IAe,"STRONG",{});var mtt=s(une);VKe=r(mtt,"layoutlmv3"),mtt.forEach(t),XKe=r(IAe," \u2014 "),$R=n(IAe,"A",{href:!0});var gtt=s($R);zKe=r(gtt,"LayoutLMv3Config"),gtt.forEach(t),QKe=r(IAe," (LayoutLMv3 model)"),IAe.forEach(t),WKe=i(L),Pm=n(L,"LI",{});var NAe=s(Pm);bne=n(NAe,"STRONG",{});var htt=s(bne);HKe=r(htt,"led"),htt.forEach(t),UKe=r(NAe," \u2014 "),kR=n(NAe,"A",{href:!0});var ptt=s(kR);JKe=r(ptt,"LEDConfig"),ptt.forEach(t),YKe=r(NAe," (LED model)"),NAe.forEach(t),KKe=i(L),Bm=n(L,"LI",{});var qAe=s(Bm);vne=n(qAe,"STRONG",{});var _tt=s(vne);ZKe=r(_tt,"levit"),_tt.forEach(t),eZe=r(qAe," \u2014 "),SR=n(qAe,"A",{href:!0});var utt=s(SR);oZe=r(utt,"LevitConfig"),utt.forEach(t),rZe=r(qAe," (LeViT model)"),qAe.forEach(t),tZe=i(L),Im=n(L,"LI",{});var jAe=s(Im);Fne=n(jAe,"STRONG",{});var btt=s(Fne);aZe=r(btt,"longformer"),btt.forEach(t),nZe=r(jAe," \u2014 "),RR=n(jAe,"A",{href:!0});var vtt=s(RR);sZe=r(vtt,"LongformerConfig"),vtt.forEach(t),lZe=r(jAe," (Longformer model)"),jAe.forEach(t),iZe=i(L),Nm=n(L,"LI",{});var DAe=s(Nm);Tne=n(DAe,"STRONG",{});var Ftt=s(Tne);dZe=r(Ftt,"longt5"),Ftt.forEach(t),cZe=r(DAe," \u2014 "),PR=n(DAe,"A",{href:!0});var Ttt=s(PR);fZe=r(Ttt,"LongT5Config"),Ttt.forEach(t),mZe=r(DAe," (LongT5 model)"),DAe.forEach(t),gZe=i(L),qm=n(L,"LI",{});var GAe=s(qm);Mne=n(GAe,"STRONG",{});var Mtt=s(Mne);hZe=r(Mtt,"luke"),Mtt.forEach(t),pZe=r(GAe," \u2014 "),BR=n(GAe,"A",{href:!0});var Ett=s(BR);_Ze=r(Ett,"LukeConfig"),Ett.forEach(t),uZe=r(GAe," (LUKE model)"),GAe.forEach(t),bZe=i(L),jm=n(L,"LI",{});var OAe=s(jm);Ene=n(OAe,"STRONG",{});var Ctt=s(Ene);vZe=r(Ctt,"lxmert"),Ctt.forEach(t),FZe=r(OAe," \u2014 "),IR=n(OAe,"A",{href:!0});var wtt=s(IR);TZe=r(wtt,"LxmertConfig"),wtt.forEach(t),MZe=r(OAe," (LXMERT model)"),OAe.forEach(t),EZe=i(L),Dm=n(L,"LI",{});var VAe=s(Dm);Cne=n(VAe,"STRONG",{});var Att=s(Cne);CZe=r(Att,"m2m_100"),Att.forEach(t),wZe=r(VAe," \u2014 "),NR=n(VAe,"A",{href:!0});var Ltt=s(NR);AZe=r(Ltt,"M2M100Config"),Ltt.forEach(t),LZe=r(VAe," (M2M100 model)"),VAe.forEach(t),yZe=i(L),Gm=n(L,"LI",{});var XAe=s(Gm);wne=n(XAe,"STRONG",{});var ytt=s(wne);xZe=r(ytt,"marian"),ytt.forEach(t),$Ze=r(XAe," \u2014 "),qR=n(XAe,"A",{href:!0});var xtt=s(qR);kZe=r(xtt,"MarianConfig"),xtt.forEach(t),SZe=r(XAe," (Marian model)"),XAe.forEach(t),RZe=i(L),Om=n(L,"LI",{});var zAe=s(Om);Ane=n(zAe,"STRONG",{});var $tt=s(Ane);PZe=r($tt,"maskformer"),$tt.forEach(t),BZe=r(zAe," \u2014 "),jR=n(zAe,"A",{href:!0});var ktt=s(jR);IZe=r(ktt,"MaskFormerConfig"),ktt.forEach(t),NZe=r(zAe," (MaskFormer model)"),zAe.forEach(t),qZe=i(L),Vm=n(L,"LI",{});var QAe=s(Vm);Lne=n(QAe,"STRONG",{});var Stt=s(Lne);jZe=r(Stt,"mbart"),Stt.forEach(t),DZe=r(QAe," \u2014 "),DR=n(QAe,"A",{href:!0});var Rtt=s(DR);GZe=r(Rtt,"MBartConfig"),Rtt.forEach(t),OZe=r(QAe," (mBART model)"),QAe.forEach(t),VZe=i(L),Xm=n(L,"LI",{});var WAe=s(Xm);yne=n(WAe,"STRONG",{});var Ptt=s(yne);XZe=r(Ptt,"mctct"),Ptt.forEach(t),zZe=r(WAe," \u2014 "),GR=n(WAe,"A",{href:!0});var Btt=s(GR);QZe=r(Btt,"MCTCTConfig"),Btt.forEach(t),WZe=r(WAe," (M-CTC-T model)"),WAe.forEach(t),HZe=i(L),zm=n(L,"LI",{});var HAe=s(zm);xne=n(HAe,"STRONG",{});var Itt=s(xne);UZe=r(Itt,"megatron-bert"),Itt.forEach(t),JZe=r(HAe," \u2014 "),OR=n(HAe,"A",{href:!0});var Ntt=s(OR);YZe=r(Ntt,"MegatronBertConfig"),Ntt.forEach(t),KZe=r(HAe," (Megatron-BERT model)"),HAe.forEach(t),ZZe=i(L),Qm=n(L,"LI",{});var UAe=s(Qm);$ne=n(UAe,"STRONG",{});var qtt=s($ne);eeo=r(qtt,"mobilebert"),qtt.forEach(t),oeo=r(UAe," \u2014 "),VR=n(UAe,"A",{href:!0});var jtt=s(VR);reo=r(jtt,"MobileBertConfig"),jtt.forEach(t),teo=r(UAe," (MobileBERT model)"),UAe.forEach(t),aeo=i(L),Wm=n(L,"LI",{});var JAe=s(Wm);kne=n(JAe,"STRONG",{});var Dtt=s(kne);neo=r(Dtt,"mobilevit"),Dtt.forEach(t),seo=r(JAe," \u2014 "),XR=n(JAe,"A",{href:!0});var Gtt=s(XR);leo=r(Gtt,"MobileViTConfig"),Gtt.forEach(t),ieo=r(JAe," (MobileViT model)"),JAe.forEach(t),deo=i(L),Hm=n(L,"LI",{});var YAe=s(Hm);Sne=n(YAe,"STRONG",{});var Ott=s(Sne);ceo=r(Ott,"mpnet"),Ott.forEach(t),feo=r(YAe," \u2014 "),zR=n(YAe,"A",{href:!0});var Vtt=s(zR);meo=r(Vtt,"MPNetConfig"),Vtt.forEach(t),geo=r(YAe," (MPNet model)"),YAe.forEach(t),heo=i(L),Um=n(L,"LI",{});var KAe=s(Um);Rne=n(KAe,"STRONG",{});var Xtt=s(Rne);peo=r(Xtt,"mt5"),Xtt.forEach(t),_eo=r(KAe," \u2014 "),QR=n(KAe,"A",{href:!0});var ztt=s(QR);ueo=r(ztt,"MT5Config"),ztt.forEach(t),beo=r(KAe," (MT5 model)"),KAe.forEach(t),veo=i(L),Jm=n(L,"LI",{});var ZAe=s(Jm);Pne=n(ZAe,"STRONG",{});var Qtt=s(Pne);Feo=r(Qtt,"mvp"),Qtt.forEach(t),Teo=r(ZAe," \u2014 "),WR=n(ZAe,"A",{href:!0});var Wtt=s(WR);Meo=r(Wtt,"MvpConfig"),Wtt.forEach(t),Eeo=r(ZAe," (MVP model)"),ZAe.forEach(t),Ceo=i(L),Ym=n(L,"LI",{});var eLe=s(Ym);Bne=n(eLe,"STRONG",{});var Htt=s(Bne);weo=r(Htt,"nezha"),Htt.forEach(t),Aeo=r(eLe," \u2014 "),HR=n(eLe,"A",{href:!0});var Utt=s(HR);Leo=r(Utt,"NezhaConfig"),Utt.forEach(t),yeo=r(eLe," (Nezha model)"),eLe.forEach(t),xeo=i(L),Km=n(L,"LI",{});var oLe=s(Km);Ine=n(oLe,"STRONG",{});var Jtt=s(Ine);$eo=r(Jtt,"nystromformer"),Jtt.forEach(t),keo=r(oLe," \u2014 "),UR=n(oLe,"A",{href:!0});var Ytt=s(UR);Seo=r(Ytt,"NystromformerConfig"),Ytt.forEach(t),Reo=r(oLe," (Nystr\xF6mformer model)"),oLe.forEach(t),Peo=i(L),Zm=n(L,"LI",{});var rLe=s(Zm);Nne=n(rLe,"STRONG",{});var Ktt=s(Nne);Beo=r(Ktt,"openai-gpt"),Ktt.forEach(t),Ieo=r(rLe," \u2014 "),JR=n(rLe,"A",{href:!0});var Ztt=s(JR);Neo=r(Ztt,"OpenAIGPTConfig"),Ztt.forEach(t),qeo=r(rLe," (OpenAI GPT model)"),rLe.forEach(t),jeo=i(L),eg=n(L,"LI",{});var tLe=s(eg);qne=n(tLe,"STRONG",{});var eat=s(qne);Deo=r(eat,"opt"),eat.forEach(t),Geo=r(tLe," \u2014 "),YR=n(tLe,"A",{href:!0});var oat=s(YR);Oeo=r(oat,"OPTConfig"),oat.forEach(t),Veo=r(tLe," (OPT model)"),tLe.forEach(t),Xeo=i(L),og=n(L,"LI",{});var aLe=s(og);jne=n(aLe,"STRONG",{});var rat=s(jne);zeo=r(rat,"pegasus"),rat.forEach(t),Qeo=r(aLe," \u2014 "),KR=n(aLe,"A",{href:!0});var tat=s(KR);Weo=r(tat,"PegasusConfig"),tat.forEach(t),Heo=r(aLe," (Pegasus model)"),aLe.forEach(t),Ueo=i(L),rg=n(L,"LI",{});var nLe=s(rg);Dne=n(nLe,"STRONG",{});var aat=s(Dne);Jeo=r(aat,"perceiver"),aat.forEach(t),Yeo=r(nLe," \u2014 "),ZR=n(nLe,"A",{href:!0});var nat=s(ZR);Keo=r(nat,"PerceiverConfig"),nat.forEach(t),Zeo=r(nLe," (Perceiver model)"),nLe.forEach(t),eoo=i(L),tg=n(L,"LI",{});var sLe=s(tg);Gne=n(sLe,"STRONG",{});var sat=s(Gne);ooo=r(sat,"plbart"),sat.forEach(t),roo=r(sLe," \u2014 "),eP=n(sLe,"A",{href:!0});var lat=s(eP);too=r(lat,"PLBartConfig"),lat.forEach(t),aoo=r(sLe," (PLBart model)"),sLe.forEach(t),noo=i(L),ag=n(L,"LI",{});var lLe=s(ag);One=n(lLe,"STRONG",{});var iat=s(One);soo=r(iat,"poolformer"),iat.forEach(t),loo=r(lLe," \u2014 "),oP=n(lLe,"A",{href:!0});var dat=s(oP);ioo=r(dat,"PoolFormerConfig"),dat.forEach(t),doo=r(lLe," (PoolFormer model)"),lLe.forEach(t),coo=i(L),ng=n(L,"LI",{});var iLe=s(ng);Vne=n(iLe,"STRONG",{});var cat=s(Vne);foo=r(cat,"prophetnet"),cat.forEach(t),moo=r(iLe," \u2014 "),rP=n(iLe,"A",{href:!0});var fat=s(rP);goo=r(fat,"ProphetNetConfig"),fat.forEach(t),hoo=r(iLe," (ProphetNet model)"),iLe.forEach(t),poo=i(L),sg=n(L,"LI",{});var dLe=s(sg);Xne=n(dLe,"STRONG",{});var mat=s(Xne);_oo=r(mat,"qdqbert"),mat.forEach(t),uoo=r(dLe," \u2014 "),tP=n(dLe,"A",{href:!0});var gat=s(tP);boo=r(gat,"QDQBertConfig"),gat.forEach(t),voo=r(dLe," (QDQBert model)"),dLe.forEach(t),Foo=i(L),lg=n(L,"LI",{});var cLe=s(lg);zne=n(cLe,"STRONG",{});var hat=s(zne);Too=r(hat,"rag"),hat.forEach(t),Moo=r(cLe," \u2014 "),aP=n(cLe,"A",{href:!0});var pat=s(aP);Eoo=r(pat,"RagConfig"),pat.forEach(t),Coo=r(cLe," (RAG model)"),cLe.forEach(t),woo=i(L),ig=n(L,"LI",{});var fLe=s(ig);Qne=n(fLe,"STRONG",{});var _at=s(Qne);Aoo=r(_at,"realm"),_at.forEach(t),Loo=r(fLe," \u2014 "),nP=n(fLe,"A",{href:!0});var uat=s(nP);yoo=r(uat,"RealmConfig"),uat.forEach(t),xoo=r(fLe," (REALM model)"),fLe.forEach(t),$oo=i(L),dg=n(L,"LI",{});var mLe=s(dg);Wne=n(mLe,"STRONG",{});var bat=s(Wne);koo=r(bat,"reformer"),bat.forEach(t),Soo=r(mLe," \u2014 "),sP=n(mLe,"A",{href:!0});var vat=s(sP);Roo=r(vat,"ReformerConfig"),vat.forEach(t),Poo=r(mLe," (Reformer model)"),mLe.forEach(t),Boo=i(L),cg=n(L,"LI",{});var gLe=s(cg);Hne=n(gLe,"STRONG",{});var Fat=s(Hne);Ioo=r(Fat,"regnet"),Fat.forEach(t),Noo=r(gLe," \u2014 "),lP=n(gLe,"A",{href:!0});var Tat=s(lP);qoo=r(Tat,"RegNetConfig"),Tat.forEach(t),joo=r(gLe," (RegNet model)"),gLe.forEach(t),Doo=i(L),fg=n(L,"LI",{});var hLe=s(fg);Une=n(hLe,"STRONG",{});var Mat=s(Une);Goo=r(Mat,"rembert"),Mat.forEach(t),Ooo=r(hLe," \u2014 "),iP=n(hLe,"A",{href:!0});var Eat=s(iP);Voo=r(Eat,"RemBertConfig"),Eat.forEach(t),Xoo=r(hLe," (RemBERT model)"),hLe.forEach(t),zoo=i(L),mg=n(L,"LI",{});var pLe=s(mg);Jne=n(pLe,"STRONG",{});var Cat=s(Jne);Qoo=r(Cat,"resnet"),Cat.forEach(t),Woo=r(pLe," \u2014 "),dP=n(pLe,"A",{href:!0});var wat=s(dP);Hoo=r(wat,"ResNetConfig"),wat.forEach(t),Uoo=r(pLe," (ResNet model)"),pLe.forEach(t),Joo=i(L),gg=n(L,"LI",{});var _Le=s(gg);Yne=n(_Le,"STRONG",{});var Aat=s(Yne);Yoo=r(Aat,"retribert"),Aat.forEach(t),Koo=r(_Le," \u2014 "),cP=n(_Le,"A",{href:!0});var Lat=s(cP);Zoo=r(Lat,"RetriBertConfig"),Lat.forEach(t),ero=r(_Le," (RetriBERT model)"),_Le.forEach(t),oro=i(L),hg=n(L,"LI",{});var uLe=s(hg);Kne=n(uLe,"STRONG",{});var yat=s(Kne);rro=r(yat,"roberta"),yat.forEach(t),tro=r(uLe," \u2014 "),fP=n(uLe,"A",{href:!0});var xat=s(fP);aro=r(xat,"RobertaConfig"),xat.forEach(t),nro=r(uLe," (RoBERTa model)"),uLe.forEach(t),sro=i(L),pg=n(L,"LI",{});var bLe=s(pg);Zne=n(bLe,"STRONG",{});var $at=s(Zne);lro=r($at,"roformer"),$at.forEach(t),iro=r(bLe," \u2014 "),mP=n(bLe,"A",{href:!0});var kat=s(mP);dro=r(kat,"RoFormerConfig"),kat.forEach(t),cro=r(bLe," (RoFormer model)"),bLe.forEach(t),fro=i(L),_g=n(L,"LI",{});var vLe=s(_g);ese=n(vLe,"STRONG",{});var Sat=s(ese);mro=r(Sat,"segformer"),Sat.forEach(t),gro=r(vLe," \u2014 "),gP=n(vLe,"A",{href:!0});var Rat=s(gP);hro=r(Rat,"SegformerConfig"),Rat.forEach(t),pro=r(vLe," (SegFormer model)"),vLe.forEach(t),_ro=i(L),ug=n(L,"LI",{});var FLe=s(ug);ose=n(FLe,"STRONG",{});var Pat=s(ose);uro=r(Pat,"sew"),Pat.forEach(t),bro=r(FLe," \u2014 "),hP=n(FLe,"A",{href:!0});var Bat=s(hP);vro=r(Bat,"SEWConfig"),Bat.forEach(t),Fro=r(FLe," (SEW model)"),FLe.forEach(t),Tro=i(L),bg=n(L,"LI",{});var TLe=s(bg);rse=n(TLe,"STRONG",{});var Iat=s(rse);Mro=r(Iat,"sew-d"),Iat.forEach(t),Ero=r(TLe," \u2014 "),pP=n(TLe,"A",{href:!0});var Nat=s(pP);Cro=r(Nat,"SEWDConfig"),Nat.forEach(t),wro=r(TLe," (SEW-D model)"),TLe.forEach(t),Aro=i(L),vg=n(L,"LI",{});var MLe=s(vg);tse=n(MLe,"STRONG",{});var qat=s(tse);Lro=r(qat,"speech-encoder-decoder"),qat.forEach(t),yro=r(MLe," \u2014 "),_P=n(MLe,"A",{href:!0});var jat=s(_P);xro=r(jat,"SpeechEncoderDecoderConfig"),jat.forEach(t),$ro=r(MLe," (Speech Encoder decoder model)"),MLe.forEach(t),kro=i(L),Fg=n(L,"LI",{});var ELe=s(Fg);ase=n(ELe,"STRONG",{});var Dat=s(ase);Sro=r(Dat,"speech_to_text"),Dat.forEach(t),Rro=r(ELe," \u2014 "),uP=n(ELe,"A",{href:!0});var Gat=s(uP);Pro=r(Gat,"Speech2TextConfig"),Gat.forEach(t),Bro=r(ELe," (Speech2Text model)"),ELe.forEach(t),Iro=i(L),Tg=n(L,"LI",{});var CLe=s(Tg);nse=n(CLe,"STRONG",{});var Oat=s(nse);Nro=r(Oat,"speech_to_text_2"),Oat.forEach(t),qro=r(CLe," \u2014 "),bP=n(CLe,"A",{href:!0});var Vat=s(bP);jro=r(Vat,"Speech2Text2Config"),Vat.forEach(t),Dro=r(CLe," (Speech2Text2 model)"),CLe.forEach(t),Gro=i(L),Mg=n(L,"LI",{});var wLe=s(Mg);sse=n(wLe,"STRONG",{});var Xat=s(sse);Oro=r(Xat,"splinter"),Xat.forEach(t),Vro=r(wLe," \u2014 "),vP=n(wLe,"A",{href:!0});var zat=s(vP);Xro=r(zat,"SplinterConfig"),zat.forEach(t),zro=r(wLe," (Splinter model)"),wLe.forEach(t),Qro=i(L),Eg=n(L,"LI",{});var ALe=s(Eg);lse=n(ALe,"STRONG",{});var Qat=s(lse);Wro=r(Qat,"squeezebert"),Qat.forEach(t),Hro=r(ALe," \u2014 "),FP=n(ALe,"A",{href:!0});var Wat=s(FP);Uro=r(Wat,"SqueezeBertConfig"),Wat.forEach(t),Jro=r(ALe," (SqueezeBERT model)"),ALe.forEach(t),Yro=i(L),Cg=n(L,"LI",{});var LLe=s(Cg);ise=n(LLe,"STRONG",{});var Hat=s(ise);Kro=r(Hat,"swin"),Hat.forEach(t),Zro=r(LLe," \u2014 "),TP=n(LLe,"A",{href:!0});var Uat=s(TP);eto=r(Uat,"SwinConfig"),Uat.forEach(t),oto=r(LLe," (Swin Transformer model)"),LLe.forEach(t),rto=i(L),wg=n(L,"LI",{});var yLe=s(wg);dse=n(yLe,"STRONG",{});var Jat=s(dse);tto=r(Jat,"t5"),Jat.forEach(t),ato=r(yLe," \u2014 "),MP=n(yLe,"A",{href:!0});var Yat=s(MP);nto=r(Yat,"T5Config"),Yat.forEach(t),sto=r(yLe," (T5 model)"),yLe.forEach(t),lto=i(L),Ag=n(L,"LI",{});var xLe=s(Ag);cse=n(xLe,"STRONG",{});var Kat=s(cse);ito=r(Kat,"tapas"),Kat.forEach(t),dto=r(xLe," \u2014 "),EP=n(xLe,"A",{href:!0});var Zat=s(EP);cto=r(Zat,"TapasConfig"),Zat.forEach(t),fto=r(xLe," (TAPAS model)"),xLe.forEach(t),mto=i(L),Lg=n(L,"LI",{});var $Le=s(Lg);fse=n($Le,"STRONG",{});var ent=s(fse);gto=r(ent,"trajectory_transformer"),ent.forEach(t),hto=r($Le," \u2014 "),CP=n($Le,"A",{href:!0});var ont=s(CP);pto=r(ont,"TrajectoryTransformerConfig"),ont.forEach(t),_to=r($Le," (Trajectory Transformer model)"),$Le.forEach(t),uto=i(L),yg=n(L,"LI",{});var kLe=s(yg);mse=n(kLe,"STRONG",{});var rnt=s(mse);bto=r(rnt,"transfo-xl"),rnt.forEach(t),vto=r(kLe," \u2014 "),wP=n(kLe,"A",{href:!0});var tnt=s(wP);Fto=r(tnt,"TransfoXLConfig"),tnt.forEach(t),Tto=r(kLe," (Transformer-XL model)"),kLe.forEach(t),Mto=i(L),xg=n(L,"LI",{});var SLe=s(xg);gse=n(SLe,"STRONG",{});var ant=s(gse);Eto=r(ant,"trocr"),ant.forEach(t),Cto=r(SLe," \u2014 "),AP=n(SLe,"A",{href:!0});var nnt=s(AP);wto=r(nnt,"TrOCRConfig"),nnt.forEach(t),Ato=r(SLe," (TrOCR model)"),SLe.forEach(t),Lto=i(L),$g=n(L,"LI",{});var RLe=s($g);hse=n(RLe,"STRONG",{});var snt=s(hse);yto=r(snt,"unispeech"),snt.forEach(t),xto=r(RLe," \u2014 "),LP=n(RLe,"A",{href:!0});var lnt=s(LP);$to=r(lnt,"UniSpeechConfig"),lnt.forEach(t),kto=r(RLe," (UniSpeech model)"),RLe.forEach(t),Sto=i(L),kg=n(L,"LI",{});var PLe=s(kg);pse=n(PLe,"STRONG",{});var int=s(pse);Rto=r(int,"unispeech-sat"),int.forEach(t),Pto=r(PLe," \u2014 "),yP=n(PLe,"A",{href:!0});var dnt=s(yP);Bto=r(dnt,"UniSpeechSatConfig"),dnt.forEach(t),Ito=r(PLe," (UniSpeechSat model)"),PLe.forEach(t),Nto=i(L),Sg=n(L,"LI",{});var BLe=s(Sg);_se=n(BLe,"STRONG",{});var cnt=s(_se);qto=r(cnt,"van"),cnt.forEach(t),jto=r(BLe," \u2014 "),xP=n(BLe,"A",{href:!0});var fnt=s(xP);Dto=r(fnt,"VanConfig"),fnt.forEach(t),Gto=r(BLe," (VAN model)"),BLe.forEach(t),Oto=i(L),Rg=n(L,"LI",{});var ILe=s(Rg);use=n(ILe,"STRONG",{});var mnt=s(use);Vto=r(mnt,"vilt"),mnt.forEach(t),Xto=r(ILe," \u2014 "),$P=n(ILe,"A",{href:!0});var gnt=s($P);zto=r(gnt,"ViltConfig"),gnt.forEach(t),Qto=r(ILe," (ViLT model)"),ILe.forEach(t),Wto=i(L),Pg=n(L,"LI",{});var NLe=s(Pg);bse=n(NLe,"STRONG",{});var hnt=s(bse);Hto=r(hnt,"vision-encoder-decoder"),hnt.forEach(t),Uto=r(NLe," \u2014 "),kP=n(NLe,"A",{href:!0});var pnt=s(kP);Jto=r(pnt,"VisionEncoderDecoderConfig"),pnt.forEach(t),Yto=r(NLe," (Vision Encoder decoder model)"),NLe.forEach(t),Kto=i(L),Bg=n(L,"LI",{});var qLe=s(Bg);vse=n(qLe,"STRONG",{});var _nt=s(vse);Zto=r(_nt,"vision-text-dual-encoder"),_nt.forEach(t),eao=r(qLe," \u2014 "),SP=n(qLe,"A",{href:!0});var unt=s(SP);oao=r(unt,"VisionTextDualEncoderConfig"),unt.forEach(t),rao=r(qLe," (VisionTextDualEncoder model)"),qLe.forEach(t),tao=i(L),Ig=n(L,"LI",{});var jLe=s(Ig);Fse=n(jLe,"STRONG",{});var bnt=s(Fse);aao=r(bnt,"visual_bert"),bnt.forEach(t),nao=r(jLe," \u2014 "),RP=n(jLe,"A",{href:!0});var vnt=s(RP);sao=r(vnt,"VisualBertConfig"),vnt.forEach(t),lao=r(jLe," (VisualBERT model)"),jLe.forEach(t),iao=i(L),Ng=n(L,"LI",{});var DLe=s(Ng);Tse=n(DLe,"STRONG",{});var Fnt=s(Tse);dao=r(Fnt,"vit"),Fnt.forEach(t),cao=r(DLe," \u2014 "),PP=n(DLe,"A",{href:!0});var Tnt=s(PP);fao=r(Tnt,"ViTConfig"),Tnt.forEach(t),mao=r(DLe," (ViT model)"),DLe.forEach(t),gao=i(L),qg=n(L,"LI",{});var GLe=s(qg);Mse=n(GLe,"STRONG",{});var Mnt=s(Mse);hao=r(Mnt,"vit_mae"),Mnt.forEach(t),pao=r(GLe," \u2014 "),BP=n(GLe,"A",{href:!0});var Ent=s(BP);_ao=r(Ent,"ViTMAEConfig"),Ent.forEach(t),uao=r(GLe," (ViTMAE model)"),GLe.forEach(t),bao=i(L),jg=n(L,"LI",{});var OLe=s(jg);Ese=n(OLe,"STRONG",{});var Cnt=s(Ese);vao=r(Cnt,"wav2vec2"),Cnt.forEach(t),Fao=r(OLe," \u2014 "),IP=n(OLe,"A",{href:!0});var wnt=s(IP);Tao=r(wnt,"Wav2Vec2Config"),wnt.forEach(t),Mao=r(OLe," (Wav2Vec2 model)"),OLe.forEach(t),Eao=i(L),Dg=n(L,"LI",{});var VLe=s(Dg);Cse=n(VLe,"STRONG",{});var Ant=s(Cse);Cao=r(Ant,"wav2vec2-conformer"),Ant.forEach(t),wao=r(VLe," \u2014 "),NP=n(VLe,"A",{href:!0});var Lnt=s(NP);Aao=r(Lnt,"Wav2Vec2ConformerConfig"),Lnt.forEach(t),Lao=r(VLe," (Wav2Vec2-Conformer model)"),VLe.forEach(t),yao=i(L),Gg=n(L,"LI",{});var XLe=s(Gg);wse=n(XLe,"STRONG",{});var ynt=s(wse);xao=r(ynt,"wavlm"),ynt.forEach(t),$ao=r(XLe," \u2014 "),qP=n(XLe,"A",{href:!0});var xnt=s(qP);kao=r(xnt,"WavLMConfig"),xnt.forEach(t),Sao=r(XLe," (WavLM model)"),XLe.forEach(t),Rao=i(L),Og=n(L,"LI",{});var zLe=s(Og);Ase=n(zLe,"STRONG",{});var $nt=s(Ase);Pao=r($nt,"xglm"),$nt.forEach(t),Bao=r(zLe," \u2014 "),jP=n(zLe,"A",{href:!0});var knt=s(jP);Iao=r(knt,"XGLMConfig"),knt.forEach(t),Nao=r(zLe," (XGLM model)"),zLe.forEach(t),qao=i(L),Vg=n(L,"LI",{});var QLe=s(Vg);Lse=n(QLe,"STRONG",{});var Snt=s(Lse);jao=r(Snt,"xlm"),Snt.forEach(t),Dao=r(QLe," \u2014 "),DP=n(QLe,"A",{href:!0});var Rnt=s(DP);Gao=r(Rnt,"XLMConfig"),Rnt.forEach(t),Oao=r(QLe," (XLM model)"),QLe.forEach(t),Vao=i(L),Xg=n(L,"LI",{});var WLe=s(Xg);yse=n(WLe,"STRONG",{});var Pnt=s(yse);Xao=r(Pnt,"xlm-prophetnet"),Pnt.forEach(t),zao=r(WLe," \u2014 "),GP=n(WLe,"A",{href:!0});var Bnt=s(GP);Qao=r(Bnt,"XLMProphetNetConfig"),Bnt.forEach(t),Wao=r(WLe," (XLM-ProphetNet model)"),WLe.forEach(t),Hao=i(L),zg=n(L,"LI",{});var HLe=s(zg);xse=n(HLe,"STRONG",{});var Int=s(xse);Uao=r(Int,"xlm-roberta"),Int.forEach(t),Jao=r(HLe," \u2014 "),OP=n(HLe,"A",{href:!0});var Nnt=s(OP);Yao=r(Nnt,"XLMRobertaConfig"),Nnt.forEach(t),Kao=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),Zao=i(L),Qg=n(L,"LI",{});var ULe=s(Qg);$se=n(ULe,"STRONG",{});var qnt=s($se);eno=r(qnt,"xlm-roberta-xl"),qnt.forEach(t),ono=r(ULe," \u2014 "),VP=n(ULe,"A",{href:!0});var jnt=s(VP);rno=r(jnt,"XLMRobertaXLConfig"),jnt.forEach(t),tno=r(ULe," (XLM-RoBERTa-XL model)"),ULe.forEach(t),ano=i(L),Wg=n(L,"LI",{});var JLe=s(Wg);kse=n(JLe,"STRONG",{});var Dnt=s(kse);nno=r(Dnt,"xlnet"),Dnt.forEach(t),sno=r(JLe," \u2014 "),XP=n(JLe,"A",{href:!0});var Gnt=s(XP);lno=r(Gnt,"XLNetConfig"),Gnt.forEach(t),ino=r(JLe," (XLNet model)"),JLe.forEach(t),dno=i(L),Hg=n(L,"LI",{});var YLe=s(Hg);Sse=n(YLe,"STRONG",{});var Ont=s(Sse);cno=r(Ont,"yolos"),Ont.forEach(t),fno=r(YLe," \u2014 "),zP=n(YLe,"A",{href:!0});var Vnt=s(zP);mno=r(Vnt,"YolosConfig"),Vnt.forEach(t),gno=r(YLe," (YOLOS model)"),YLe.forEach(t),hno=i(L),Ug=n(L,"LI",{});var KLe=s(Ug);Rse=n(KLe,"STRONG",{});var Xnt=s(Rse);pno=r(Xnt,"yoso"),Xnt.forEach(t),_no=r(KLe," \u2014 "),QP=n(KLe,"A",{href:!0});var znt=s(QP);uno=r(znt,"YosoConfig"),znt.forEach(t),bno=r(KLe," (YOSO model)"),KLe.forEach(t),L.forEach(t),vno=i(nt),T(Jg.$$.fragment,nt),nt.forEach(t),Fno=i(at),Yg=n(at,"DIV",{class:!0});var Dze=s(Yg);T(lL.$$.fragment,Dze),Tno=i(Dze),Pse=n(Dze,"P",{});var Qnt=s(Pse);Mno=r(Qnt,"Register a new configuration for this class."),Qnt.forEach(t),Dze.forEach(t),at.forEach(t),GVe=i(f),Ii=n(f,"H2",{class:!0});var Gze=s(Ii);Kg=n(Gze,"A",{id:!0,class:!0,href:!0});var Wnt=s(Kg);Bse=n(Wnt,"SPAN",{});var Hnt=s(Bse);T(iL.$$.fragment,Hnt),Hnt.forEach(t),Wnt.forEach(t),Eno=i(Gze),Ise=n(Gze,"SPAN",{});var Unt=s(Ise);Cno=r(Unt,"AutoTokenizer"),Unt.forEach(t),Gze.forEach(t),OVe=i(f),Ao=n(f,"DIV",{class:!0});var Js=s(Ao);T(dL.$$.fragment,Js),wno=i(Js),cL=n(Js,"P",{});var Oze=s(cL);Ano=r(Oze,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WP=n(Oze,"A",{href:!0});var Jnt=s(WP);Lno=r(Jnt,"AutoTokenizer.from_pretrained()"),Jnt.forEach(t),yno=r(Oze," class method."),Oze.forEach(t),xno=i(Js),fL=n(Js,"P",{});var Vze=s(fL);$no=r(Vze,"This class cannot be instantiated directly using "),Nse=n(Vze,"CODE",{});var Ynt=s(Nse);kno=r(Ynt,"__init__()"),Ynt.forEach(t),Sno=r(Vze," (throws an error)."),Vze.forEach(t),Rno=i(Js),Lr=n(Js,"DIV",{class:!0});var Ys=s(Lr);T(mL.$$.fragment,Ys),Pno=i(Ys),qse=n(Ys,"P",{});var Knt=s(qse);Bno=r(Knt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Knt.forEach(t),Ino=i(Ys),Ra=n(Ys,"P",{});var rw=s(Ra);Nno=r(rw,"The tokenizer class to instantiate is selected based on the "),jse=n(rw,"CODE",{});var Znt=s(jse);qno=r(Znt,"model_type"),Znt.forEach(t),jno=r(rw,` property of the config object (either
passed as an argument or loaded from `),Dse=n(rw,"CODE",{});var est=s(Dse);Dno=r(est,"pretrained_model_name_or_path"),est.forEach(t),Gno=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gse=n(rw,"CODE",{});var ost=s(Gse);Ono=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),Vno=r(rw,":"),rw.forEach(t),Xno=i(Ys),k=n(Ys,"UL",{});var S=s(k);qn=n(S,"LI",{});var bk=s(qn);Ose=n(bk,"STRONG",{});var rst=s(Ose);zno=r(rst,"albert"),rst.forEach(t),Qno=r(bk," \u2014 "),HP=n(bk,"A",{href:!0});var tst=s(HP);Wno=r(tst,"AlbertTokenizer"),tst.forEach(t),Hno=r(bk," or "),UP=n(bk,"A",{href:!0});var ast=s(UP);Uno=r(ast,"AlbertTokenizerFast"),ast.forEach(t),Jno=r(bk," (ALBERT model)"),bk.forEach(t),Yno=i(S),jn=n(S,"LI",{});var vk=s(jn);Vse=n(vk,"STRONG",{});var nst=s(Vse);Kno=r(nst,"bart"),nst.forEach(t),Zno=r(vk," \u2014 "),JP=n(vk,"A",{href:!0});var sst=s(JP);eso=r(sst,"BartTokenizer"),sst.forEach(t),oso=r(vk," or "),YP=n(vk,"A",{href:!0});var lst=s(YP);rso=r(lst,"BartTokenizerFast"),lst.forEach(t),tso=r(vk," (BART model)"),vk.forEach(t),aso=i(S),Dn=n(S,"LI",{});var Fk=s(Dn);Xse=n(Fk,"STRONG",{});var ist=s(Xse);nso=r(ist,"barthez"),ist.forEach(t),sso=r(Fk," \u2014 "),KP=n(Fk,"A",{href:!0});var dst=s(KP);lso=r(dst,"BarthezTokenizer"),dst.forEach(t),iso=r(Fk," or "),ZP=n(Fk,"A",{href:!0});var cst=s(ZP);dso=r(cst,"BarthezTokenizerFast"),cst.forEach(t),cso=r(Fk," (BARThez model)"),Fk.forEach(t),fso=i(S),Zg=n(S,"LI",{});var ZLe=s(Zg);zse=n(ZLe,"STRONG",{});var fst=s(zse);mso=r(fst,"bartpho"),fst.forEach(t),gso=r(ZLe," \u2014 "),eB=n(ZLe,"A",{href:!0});var mst=s(eB);hso=r(mst,"BartphoTokenizer"),mst.forEach(t),pso=r(ZLe," (BARTpho model)"),ZLe.forEach(t),_so=i(S),Gn=n(S,"LI",{});var Tk=s(Gn);Qse=n(Tk,"STRONG",{});var gst=s(Qse);uso=r(gst,"bert"),gst.forEach(t),bso=r(Tk," \u2014 "),oB=n(Tk,"A",{href:!0});var hst=s(oB);vso=r(hst,"BertTokenizer"),hst.forEach(t),Fso=r(Tk," or "),rB=n(Tk,"A",{href:!0});var pst=s(rB);Tso=r(pst,"BertTokenizerFast"),pst.forEach(t),Mso=r(Tk," (BERT model)"),Tk.forEach(t),Eso=i(S),eh=n(S,"LI",{});var eye=s(eh);Wse=n(eye,"STRONG",{});var _st=s(Wse);Cso=r(_st,"bert-generation"),_st.forEach(t),wso=r(eye," \u2014 "),tB=n(eye,"A",{href:!0});var ust=s(tB);Aso=r(ust,"BertGenerationTokenizer"),ust.forEach(t),Lso=r(eye," (Bert Generation model)"),eye.forEach(t),yso=i(S),oh=n(S,"LI",{});var oye=s(oh);Hse=n(oye,"STRONG",{});var bst=s(Hse);xso=r(bst,"bert-japanese"),bst.forEach(t),$so=r(oye," \u2014 "),aB=n(oye,"A",{href:!0});var vst=s(aB);kso=r(vst,"BertJapaneseTokenizer"),vst.forEach(t),Sso=r(oye," (BertJapanese model)"),oye.forEach(t),Rso=i(S),rh=n(S,"LI",{});var rye=s(rh);Use=n(rye,"STRONG",{});var Fst=s(Use);Pso=r(Fst,"bertweet"),Fst.forEach(t),Bso=r(rye," \u2014 "),nB=n(rye,"A",{href:!0});var Tst=s(nB);Iso=r(Tst,"BertweetTokenizer"),Tst.forEach(t),Nso=r(rye," (BERTweet model)"),rye.forEach(t),qso=i(S),On=n(S,"LI",{});var Mk=s(On);Jse=n(Mk,"STRONG",{});var Mst=s(Jse);jso=r(Mst,"big_bird"),Mst.forEach(t),Dso=r(Mk," \u2014 "),sB=n(Mk,"A",{href:!0});var Est=s(sB);Gso=r(Est,"BigBirdTokenizer"),Est.forEach(t),Oso=r(Mk," or "),lB=n(Mk,"A",{href:!0});var Cst=s(lB);Vso=r(Cst,"BigBirdTokenizerFast"),Cst.forEach(t),Xso=r(Mk," (BigBird model)"),Mk.forEach(t),zso=i(S),Vn=n(S,"LI",{});var Ek=s(Vn);Yse=n(Ek,"STRONG",{});var wst=s(Yse);Qso=r(wst,"bigbird_pegasus"),wst.forEach(t),Wso=r(Ek," \u2014 "),iB=n(Ek,"A",{href:!0});var Ast=s(iB);Hso=r(Ast,"PegasusTokenizer"),Ast.forEach(t),Uso=r(Ek," or "),dB=n(Ek,"A",{href:!0});var Lst=s(dB);Jso=r(Lst,"PegasusTokenizerFast"),Lst.forEach(t),Yso=r(Ek," (BigBird-Pegasus model)"),Ek.forEach(t),Kso=i(S),Xn=n(S,"LI",{});var Ck=s(Xn);Kse=n(Ck,"STRONG",{});var yst=s(Kse);Zso=r(yst,"blenderbot"),yst.forEach(t),elo=r(Ck," \u2014 "),cB=n(Ck,"A",{href:!0});var xst=s(cB);olo=r(xst,"BlenderbotTokenizer"),xst.forEach(t),rlo=r(Ck," or "),fB=n(Ck,"A",{href:!0});var $st=s(fB);tlo=r($st,"BlenderbotTokenizerFast"),$st.forEach(t),alo=r(Ck," (Blenderbot model)"),Ck.forEach(t),nlo=i(S),th=n(S,"LI",{});var tye=s(th);Zse=n(tye,"STRONG",{});var kst=s(Zse);slo=r(kst,"blenderbot-small"),kst.forEach(t),llo=r(tye," \u2014 "),mB=n(tye,"A",{href:!0});var Sst=s(mB);ilo=r(Sst,"BlenderbotSmallTokenizer"),Sst.forEach(t),dlo=r(tye," (BlenderbotSmall model)"),tye.forEach(t),clo=i(S),ah=n(S,"LI",{});var aye=s(ah);ele=n(aye,"STRONG",{});var Rst=s(ele);flo=r(Rst,"bloom"),Rst.forEach(t),mlo=r(aye," \u2014 "),gB=n(aye,"A",{href:!0});var Pst=s(gB);glo=r(Pst,"BloomTokenizerFast"),Pst.forEach(t),hlo=r(aye," (BLOOM model)"),aye.forEach(t),plo=i(S),nh=n(S,"LI",{});var nye=s(nh);ole=n(nye,"STRONG",{});var Bst=s(ole);_lo=r(Bst,"byt5"),Bst.forEach(t),ulo=r(nye," \u2014 "),hB=n(nye,"A",{href:!0});var Ist=s(hB);blo=r(Ist,"ByT5Tokenizer"),Ist.forEach(t),vlo=r(nye," (ByT5 model)"),nye.forEach(t),Flo=i(S),zn=n(S,"LI",{});var wk=s(zn);rle=n(wk,"STRONG",{});var Nst=s(rle);Tlo=r(Nst,"camembert"),Nst.forEach(t),Mlo=r(wk," \u2014 "),pB=n(wk,"A",{href:!0});var qst=s(pB);Elo=r(qst,"CamembertTokenizer"),qst.forEach(t),Clo=r(wk," or "),_B=n(wk,"A",{href:!0});var jst=s(_B);wlo=r(jst,"CamembertTokenizerFast"),jst.forEach(t),Alo=r(wk," (CamemBERT model)"),wk.forEach(t),Llo=i(S),sh=n(S,"LI",{});var sye=s(sh);tle=n(sye,"STRONG",{});var Dst=s(tle);ylo=r(Dst,"canine"),Dst.forEach(t),xlo=r(sye," \u2014 "),uB=n(sye,"A",{href:!0});var Gst=s(uB);$lo=r(Gst,"CanineTokenizer"),Gst.forEach(t),klo=r(sye," (CANINE model)"),sye.forEach(t),Slo=i(S),Qn=n(S,"LI",{});var Ak=s(Qn);ale=n(Ak,"STRONG",{});var Ost=s(ale);Rlo=r(Ost,"clip"),Ost.forEach(t),Plo=r(Ak," \u2014 "),bB=n(Ak,"A",{href:!0});var Vst=s(bB);Blo=r(Vst,"CLIPTokenizer"),Vst.forEach(t),Ilo=r(Ak," or "),vB=n(Ak,"A",{href:!0});var Xst=s(vB);Nlo=r(Xst,"CLIPTokenizerFast"),Xst.forEach(t),qlo=r(Ak," (CLIP model)"),Ak.forEach(t),jlo=i(S),Wn=n(S,"LI",{});var Lk=s(Wn);nle=n(Lk,"STRONG",{});var zst=s(nle);Dlo=r(zst,"codegen"),zst.forEach(t),Glo=r(Lk," \u2014 "),FB=n(Lk,"A",{href:!0});var Qst=s(FB);Olo=r(Qst,"CodeGenTokenizer"),Qst.forEach(t),Vlo=r(Lk," or "),TB=n(Lk,"A",{href:!0});var Wst=s(TB);Xlo=r(Wst,"CodeGenTokenizerFast"),Wst.forEach(t),zlo=r(Lk," (CodeGen model)"),Lk.forEach(t),Qlo=i(S),Hn=n(S,"LI",{});var yk=s(Hn);sle=n(yk,"STRONG",{});var Hst=s(sle);Wlo=r(Hst,"convbert"),Hst.forEach(t),Hlo=r(yk," \u2014 "),MB=n(yk,"A",{href:!0});var Ust=s(MB);Ulo=r(Ust,"ConvBertTokenizer"),Ust.forEach(t),Jlo=r(yk," or "),EB=n(yk,"A",{href:!0});var Jst=s(EB);Ylo=r(Jst,"ConvBertTokenizerFast"),Jst.forEach(t),Klo=r(yk," (ConvBERT model)"),yk.forEach(t),Zlo=i(S),Un=n(S,"LI",{});var xk=s(Un);lle=n(xk,"STRONG",{});var Yst=s(lle);eio=r(Yst,"cpm"),Yst.forEach(t),oio=r(xk," \u2014 "),CB=n(xk,"A",{href:!0});var Kst=s(CB);rio=r(Kst,"CpmTokenizer"),Kst.forEach(t),tio=r(xk," or "),wB=n(xk,"A",{href:!0});var Zst=s(wB);aio=r(Zst,"CpmTokenizerFast"),Zst.forEach(t),nio=r(xk," (CPM model)"),xk.forEach(t),sio=i(S),lh=n(S,"LI",{});var lye=s(lh);ile=n(lye,"STRONG",{});var elt=s(ile);lio=r(elt,"ctrl"),elt.forEach(t),iio=r(lye," \u2014 "),AB=n(lye,"A",{href:!0});var olt=s(AB);dio=r(olt,"CTRLTokenizer"),olt.forEach(t),cio=r(lye," (CTRL model)"),lye.forEach(t),fio=i(S),Jn=n(S,"LI",{});var $k=s(Jn);dle=n($k,"STRONG",{});var rlt=s(dle);mio=r(rlt,"data2vec-text"),rlt.forEach(t),gio=r($k," \u2014 "),LB=n($k,"A",{href:!0});var tlt=s(LB);hio=r(tlt,"RobertaTokenizer"),tlt.forEach(t),pio=r($k," or "),yB=n($k,"A",{href:!0});var alt=s(yB);_io=r(alt,"RobertaTokenizerFast"),alt.forEach(t),uio=r($k," (Data2VecText model)"),$k.forEach(t),bio=i(S),Yn=n(S,"LI",{});var kk=s(Yn);cle=n(kk,"STRONG",{});var nlt=s(cle);vio=r(nlt,"deberta"),nlt.forEach(t),Fio=r(kk," \u2014 "),xB=n(kk,"A",{href:!0});var slt=s(xB);Tio=r(slt,"DebertaTokenizer"),slt.forEach(t),Mio=r(kk," or "),$B=n(kk,"A",{href:!0});var llt=s($B);Eio=r(llt,"DebertaTokenizerFast"),llt.forEach(t),Cio=r(kk," (DeBERTa model)"),kk.forEach(t),wio=i(S),Kn=n(S,"LI",{});var Sk=s(Kn);fle=n(Sk,"STRONG",{});var ilt=s(fle);Aio=r(ilt,"deberta-v2"),ilt.forEach(t),Lio=r(Sk," \u2014 "),kB=n(Sk,"A",{href:!0});var dlt=s(kB);yio=r(dlt,"DebertaV2Tokenizer"),dlt.forEach(t),xio=r(Sk," or "),SB=n(Sk,"A",{href:!0});var clt=s(SB);$io=r(clt,"DebertaV2TokenizerFast"),clt.forEach(t),kio=r(Sk," (DeBERTa-v2 model)"),Sk.forEach(t),Sio=i(S),Zn=n(S,"LI",{});var Rk=s(Zn);mle=n(Rk,"STRONG",{});var flt=s(mle);Rio=r(flt,"distilbert"),flt.forEach(t),Pio=r(Rk," \u2014 "),RB=n(Rk,"A",{href:!0});var mlt=s(RB);Bio=r(mlt,"DistilBertTokenizer"),mlt.forEach(t),Iio=r(Rk," or "),PB=n(Rk,"A",{href:!0});var glt=s(PB);Nio=r(glt,"DistilBertTokenizerFast"),glt.forEach(t),qio=r(Rk," (DistilBERT model)"),Rk.forEach(t),jio=i(S),es=n(S,"LI",{});var Pk=s(es);gle=n(Pk,"STRONG",{});var hlt=s(gle);Dio=r(hlt,"dpr"),hlt.forEach(t),Gio=r(Pk," \u2014 "),BB=n(Pk,"A",{href:!0});var plt=s(BB);Oio=r(plt,"DPRQuestionEncoderTokenizer"),plt.forEach(t),Vio=r(Pk," or "),IB=n(Pk,"A",{href:!0});var _lt=s(IB);Xio=r(_lt,"DPRQuestionEncoderTokenizerFast"),_lt.forEach(t),zio=r(Pk," (DPR model)"),Pk.forEach(t),Qio=i(S),os=n(S,"LI",{});var Bk=s(os);hle=n(Bk,"STRONG",{});var ult=s(hle);Wio=r(ult,"electra"),ult.forEach(t),Hio=r(Bk," \u2014 "),NB=n(Bk,"A",{href:!0});var blt=s(NB);Uio=r(blt,"ElectraTokenizer"),blt.forEach(t),Jio=r(Bk," or "),qB=n(Bk,"A",{href:!0});var vlt=s(qB);Yio=r(vlt,"ElectraTokenizerFast"),vlt.forEach(t),Kio=r(Bk," (ELECTRA model)"),Bk.forEach(t),Zio=i(S),ih=n(S,"LI",{});var iye=s(ih);ple=n(iye,"STRONG",{});var Flt=s(ple);edo=r(Flt,"flaubert"),Flt.forEach(t),odo=r(iye," \u2014 "),jB=n(iye,"A",{href:!0});var Tlt=s(jB);rdo=r(Tlt,"FlaubertTokenizer"),Tlt.forEach(t),tdo=r(iye," (FlauBERT model)"),iye.forEach(t),ado=i(S),rs=n(S,"LI",{});var Ik=s(rs);_le=n(Ik,"STRONG",{});var Mlt=s(_le);ndo=r(Mlt,"fnet"),Mlt.forEach(t),sdo=r(Ik," \u2014 "),DB=n(Ik,"A",{href:!0});var Elt=s(DB);ldo=r(Elt,"FNetTokenizer"),Elt.forEach(t),ido=r(Ik," or "),GB=n(Ik,"A",{href:!0});var Clt=s(GB);ddo=r(Clt,"FNetTokenizerFast"),Clt.forEach(t),cdo=r(Ik," (FNet model)"),Ik.forEach(t),fdo=i(S),dh=n(S,"LI",{});var dye=s(dh);ule=n(dye,"STRONG",{});var wlt=s(ule);mdo=r(wlt,"fsmt"),wlt.forEach(t),gdo=r(dye," \u2014 "),OB=n(dye,"A",{href:!0});var Alt=s(OB);hdo=r(Alt,"FSMTTokenizer"),Alt.forEach(t),pdo=r(dye," (FairSeq Machine-Translation model)"),dye.forEach(t),_do=i(S),ts=n(S,"LI",{});var Nk=s(ts);ble=n(Nk,"STRONG",{});var Llt=s(ble);udo=r(Llt,"funnel"),Llt.forEach(t),bdo=r(Nk," \u2014 "),VB=n(Nk,"A",{href:!0});var ylt=s(VB);vdo=r(ylt,"FunnelTokenizer"),ylt.forEach(t),Fdo=r(Nk," or "),XB=n(Nk,"A",{href:!0});var xlt=s(XB);Tdo=r(xlt,"FunnelTokenizerFast"),xlt.forEach(t),Mdo=r(Nk," (Funnel Transformer model)"),Nk.forEach(t),Edo=i(S),as=n(S,"LI",{});var qk=s(as);vle=n(qk,"STRONG",{});var $lt=s(vle);Cdo=r($lt,"gpt2"),$lt.forEach(t),wdo=r(qk," \u2014 "),zB=n(qk,"A",{href:!0});var klt=s(zB);Ado=r(klt,"GPT2Tokenizer"),klt.forEach(t),Ldo=r(qk," or "),QB=n(qk,"A",{href:!0});var Slt=s(QB);ydo=r(Slt,"GPT2TokenizerFast"),Slt.forEach(t),xdo=r(qk," (OpenAI GPT-2 model)"),qk.forEach(t),$do=i(S),ns=n(S,"LI",{});var jk=s(ns);Fle=n(jk,"STRONG",{});var Rlt=s(Fle);kdo=r(Rlt,"gpt_neo"),Rlt.forEach(t),Sdo=r(jk," \u2014 "),WB=n(jk,"A",{href:!0});var Plt=s(WB);Rdo=r(Plt,"GPT2Tokenizer"),Plt.forEach(t),Pdo=r(jk," or "),HB=n(jk,"A",{href:!0});var Blt=s(HB);Bdo=r(Blt,"GPT2TokenizerFast"),Blt.forEach(t),Ido=r(jk," (GPT Neo model)"),jk.forEach(t),Ndo=i(S),ch=n(S,"LI",{});var cye=s(ch);Tle=n(cye,"STRONG",{});var Ilt=s(Tle);qdo=r(Ilt,"gpt_neox"),Ilt.forEach(t),jdo=r(cye," \u2014 "),UB=n(cye,"A",{href:!0});var Nlt=s(UB);Ddo=r(Nlt,"GPTNeoXTokenizerFast"),Nlt.forEach(t),Gdo=r(cye," (GPT NeoX model)"),cye.forEach(t),Odo=i(S),ss=n(S,"LI",{});var Dk=s(ss);Mle=n(Dk,"STRONG",{});var qlt=s(Mle);Vdo=r(qlt,"gptj"),qlt.forEach(t),Xdo=r(Dk," \u2014 "),JB=n(Dk,"A",{href:!0});var jlt=s(JB);zdo=r(jlt,"GPT2Tokenizer"),jlt.forEach(t),Qdo=r(Dk," or "),YB=n(Dk,"A",{href:!0});var Dlt=s(YB);Wdo=r(Dlt,"GPT2TokenizerFast"),Dlt.forEach(t),Hdo=r(Dk," (GPT-J model)"),Dk.forEach(t),Udo=i(S),ls=n(S,"LI",{});var Gk=s(ls);Ele=n(Gk,"STRONG",{});var Glt=s(Ele);Jdo=r(Glt,"groupvit"),Glt.forEach(t),Ydo=r(Gk," \u2014 "),KB=n(Gk,"A",{href:!0});var Olt=s(KB);Kdo=r(Olt,"CLIPTokenizer"),Olt.forEach(t),Zdo=r(Gk," or "),ZB=n(Gk,"A",{href:!0});var Vlt=s(ZB);eco=r(Vlt,"CLIPTokenizerFast"),Vlt.forEach(t),oco=r(Gk," (GroupViT model)"),Gk.forEach(t),rco=i(S),is=n(S,"LI",{});var Ok=s(is);Cle=n(Ok,"STRONG",{});var Xlt=s(Cle);tco=r(Xlt,"herbert"),Xlt.forEach(t),aco=r(Ok," \u2014 "),eI=n(Ok,"A",{href:!0});var zlt=s(eI);nco=r(zlt,"HerbertTokenizer"),zlt.forEach(t),sco=r(Ok," or "),oI=n(Ok,"A",{href:!0});var Qlt=s(oI);lco=r(Qlt,"HerbertTokenizerFast"),Qlt.forEach(t),ico=r(Ok," (HerBERT model)"),Ok.forEach(t),dco=i(S),fh=n(S,"LI",{});var fye=s(fh);wle=n(fye,"STRONG",{});var Wlt=s(wle);cco=r(Wlt,"hubert"),Wlt.forEach(t),fco=r(fye," \u2014 "),rI=n(fye,"A",{href:!0});var Hlt=s(rI);mco=r(Hlt,"Wav2Vec2CTCTokenizer"),Hlt.forEach(t),gco=r(fye," (Hubert model)"),fye.forEach(t),hco=i(S),ds=n(S,"LI",{});var Vk=s(ds);Ale=n(Vk,"STRONG",{});var Ult=s(Ale);pco=r(Ult,"ibert"),Ult.forEach(t),_co=r(Vk," \u2014 "),tI=n(Vk,"A",{href:!0});var Jlt=s(tI);uco=r(Jlt,"RobertaTokenizer"),Jlt.forEach(t),bco=r(Vk," or "),aI=n(Vk,"A",{href:!0});var Ylt=s(aI);vco=r(Ylt,"RobertaTokenizerFast"),Ylt.forEach(t),Fco=r(Vk," (I-BERT model)"),Vk.forEach(t),Tco=i(S),cs=n(S,"LI",{});var Xk=s(cs);Lle=n(Xk,"STRONG",{});var Klt=s(Lle);Mco=r(Klt,"layoutlm"),Klt.forEach(t),Eco=r(Xk," \u2014 "),nI=n(Xk,"A",{href:!0});var Zlt=s(nI);Cco=r(Zlt,"LayoutLMTokenizer"),Zlt.forEach(t),wco=r(Xk," or "),sI=n(Xk,"A",{href:!0});var eit=s(sI);Aco=r(eit,"LayoutLMTokenizerFast"),eit.forEach(t),Lco=r(Xk," (LayoutLM model)"),Xk.forEach(t),yco=i(S),fs=n(S,"LI",{});var zk=s(fs);yle=n(zk,"STRONG",{});var oit=s(yle);xco=r(oit,"layoutlmv2"),oit.forEach(t),$co=r(zk," \u2014 "),lI=n(zk,"A",{href:!0});var rit=s(lI);kco=r(rit,"LayoutLMv2Tokenizer"),rit.forEach(t),Sco=r(zk," or "),iI=n(zk,"A",{href:!0});var tit=s(iI);Rco=r(tit,"LayoutLMv2TokenizerFast"),tit.forEach(t),Pco=r(zk," (LayoutLMv2 model)"),zk.forEach(t),Bco=i(S),ms=n(S,"LI",{});var Qk=s(ms);xle=n(Qk,"STRONG",{});var ait=s(xle);Ico=r(ait,"layoutlmv3"),ait.forEach(t),Nco=r(Qk," \u2014 "),dI=n(Qk,"A",{href:!0});var nit=s(dI);qco=r(nit,"LayoutLMv3Tokenizer"),nit.forEach(t),jco=r(Qk," or "),cI=n(Qk,"A",{href:!0});var sit=s(cI);Dco=r(sit,"LayoutLMv3TokenizerFast"),sit.forEach(t),Gco=r(Qk," (LayoutLMv3 model)"),Qk.forEach(t),Oco=i(S),gs=n(S,"LI",{});var Wk=s(gs);$le=n(Wk,"STRONG",{});var lit=s($le);Vco=r(lit,"layoutxlm"),lit.forEach(t),Xco=r(Wk," \u2014 "),fI=n(Wk,"A",{href:!0});var iit=s(fI);zco=r(iit,"LayoutXLMTokenizer"),iit.forEach(t),Qco=r(Wk," or "),mI=n(Wk,"A",{href:!0});var dit=s(mI);Wco=r(dit,"LayoutXLMTokenizerFast"),dit.forEach(t),Hco=r(Wk," (LayoutXLM model)"),Wk.forEach(t),Uco=i(S),hs=n(S,"LI",{});var Hk=s(hs);kle=n(Hk,"STRONG",{});var cit=s(kle);Jco=r(cit,"led"),cit.forEach(t),Yco=r(Hk," \u2014 "),gI=n(Hk,"A",{href:!0});var fit=s(gI);Kco=r(fit,"LEDTokenizer"),fit.forEach(t),Zco=r(Hk," or "),hI=n(Hk,"A",{href:!0});var mit=s(hI);efo=r(mit,"LEDTokenizerFast"),mit.forEach(t),ofo=r(Hk," (LED model)"),Hk.forEach(t),rfo=i(S),ps=n(S,"LI",{});var Uk=s(ps);Sle=n(Uk,"STRONG",{});var git=s(Sle);tfo=r(git,"longformer"),git.forEach(t),afo=r(Uk," \u2014 "),pI=n(Uk,"A",{href:!0});var hit=s(pI);nfo=r(hit,"LongformerTokenizer"),hit.forEach(t),sfo=r(Uk," or "),_I=n(Uk,"A",{href:!0});var pit=s(_I);lfo=r(pit,"LongformerTokenizerFast"),pit.forEach(t),ifo=r(Uk," (Longformer model)"),Uk.forEach(t),dfo=i(S),_s=n(S,"LI",{});var Jk=s(_s);Rle=n(Jk,"STRONG",{});var _it=s(Rle);cfo=r(_it,"longt5"),_it.forEach(t),ffo=r(Jk," \u2014 "),uI=n(Jk,"A",{href:!0});var uit=s(uI);mfo=r(uit,"T5Tokenizer"),uit.forEach(t),gfo=r(Jk," or "),bI=n(Jk,"A",{href:!0});var bit=s(bI);hfo=r(bit,"T5TokenizerFast"),bit.forEach(t),pfo=r(Jk," (LongT5 model)"),Jk.forEach(t),_fo=i(S),mh=n(S,"LI",{});var mye=s(mh);Ple=n(mye,"STRONG",{});var vit=s(Ple);ufo=r(vit,"luke"),vit.forEach(t),bfo=r(mye," \u2014 "),vI=n(mye,"A",{href:!0});var Fit=s(vI);vfo=r(Fit,"LukeTokenizer"),Fit.forEach(t),Ffo=r(mye," (LUKE model)"),mye.forEach(t),Tfo=i(S),us=n(S,"LI",{});var Yk=s(us);Ble=n(Yk,"STRONG",{});var Tit=s(Ble);Mfo=r(Tit,"lxmert"),Tit.forEach(t),Efo=r(Yk," \u2014 "),FI=n(Yk,"A",{href:!0});var Mit=s(FI);Cfo=r(Mit,"LxmertTokenizer"),Mit.forEach(t),wfo=r(Yk," or "),TI=n(Yk,"A",{href:!0});var Eit=s(TI);Afo=r(Eit,"LxmertTokenizerFast"),Eit.forEach(t),Lfo=r(Yk," (LXMERT model)"),Yk.forEach(t),yfo=i(S),gh=n(S,"LI",{});var gye=s(gh);Ile=n(gye,"STRONG",{});var Cit=s(Ile);xfo=r(Cit,"m2m_100"),Cit.forEach(t),$fo=r(gye," \u2014 "),MI=n(gye,"A",{href:!0});var wit=s(MI);kfo=r(wit,"M2M100Tokenizer"),wit.forEach(t),Sfo=r(gye," (M2M100 model)"),gye.forEach(t),Rfo=i(S),hh=n(S,"LI",{});var hye=s(hh);Nle=n(hye,"STRONG",{});var Ait=s(Nle);Pfo=r(Ait,"marian"),Ait.forEach(t),Bfo=r(hye," \u2014 "),EI=n(hye,"A",{href:!0});var Lit=s(EI);Ifo=r(Lit,"MarianTokenizer"),Lit.forEach(t),Nfo=r(hye," (Marian model)"),hye.forEach(t),qfo=i(S),bs=n(S,"LI",{});var Kk=s(bs);qle=n(Kk,"STRONG",{});var yit=s(qle);jfo=r(yit,"mbart"),yit.forEach(t),Dfo=r(Kk," \u2014 "),CI=n(Kk,"A",{href:!0});var xit=s(CI);Gfo=r(xit,"MBartTokenizer"),xit.forEach(t),Ofo=r(Kk," or "),wI=n(Kk,"A",{href:!0});var $it=s(wI);Vfo=r($it,"MBartTokenizerFast"),$it.forEach(t),Xfo=r(Kk," (mBART model)"),Kk.forEach(t),zfo=i(S),vs=n(S,"LI",{});var Zk=s(vs);jle=n(Zk,"STRONG",{});var kit=s(jle);Qfo=r(kit,"mbart50"),kit.forEach(t),Wfo=r(Zk," \u2014 "),AI=n(Zk,"A",{href:!0});var Sit=s(AI);Hfo=r(Sit,"MBart50Tokenizer"),Sit.forEach(t),Ufo=r(Zk," or "),LI=n(Zk,"A",{href:!0});var Rit=s(LI);Jfo=r(Rit,"MBart50TokenizerFast"),Rit.forEach(t),Yfo=r(Zk," (mBART-50 model)"),Zk.forEach(t),Kfo=i(S),Fs=n(S,"LI",{});var eS=s(Fs);Dle=n(eS,"STRONG",{});var Pit=s(Dle);Zfo=r(Pit,"megatron-bert"),Pit.forEach(t),emo=r(eS," \u2014 "),yI=n(eS,"A",{href:!0});var Bit=s(yI);omo=r(Bit,"BertTokenizer"),Bit.forEach(t),rmo=r(eS," or "),xI=n(eS,"A",{href:!0});var Iit=s(xI);tmo=r(Iit,"BertTokenizerFast"),Iit.forEach(t),amo=r(eS," (Megatron-BERT model)"),eS.forEach(t),nmo=i(S),ph=n(S,"LI",{});var pye=s(ph);Gle=n(pye,"STRONG",{});var Nit=s(Gle);smo=r(Nit,"mluke"),Nit.forEach(t),lmo=r(pye," \u2014 "),$I=n(pye,"A",{href:!0});var qit=s($I);imo=r(qit,"MLukeTokenizer"),qit.forEach(t),dmo=r(pye," (mLUKE model)"),pye.forEach(t),cmo=i(S),Ts=n(S,"LI",{});var oS=s(Ts);Ole=n(oS,"STRONG",{});var jit=s(Ole);fmo=r(jit,"mobilebert"),jit.forEach(t),mmo=r(oS," \u2014 "),kI=n(oS,"A",{href:!0});var Dit=s(kI);gmo=r(Dit,"MobileBertTokenizer"),Dit.forEach(t),hmo=r(oS," or "),SI=n(oS,"A",{href:!0});var Git=s(SI);pmo=r(Git,"MobileBertTokenizerFast"),Git.forEach(t),_mo=r(oS," (MobileBERT model)"),oS.forEach(t),umo=i(S),Ms=n(S,"LI",{});var rS=s(Ms);Vle=n(rS,"STRONG",{});var Oit=s(Vle);bmo=r(Oit,"mpnet"),Oit.forEach(t),vmo=r(rS," \u2014 "),RI=n(rS,"A",{href:!0});var Vit=s(RI);Fmo=r(Vit,"MPNetTokenizer"),Vit.forEach(t),Tmo=r(rS," or "),PI=n(rS,"A",{href:!0});var Xit=s(PI);Mmo=r(Xit,"MPNetTokenizerFast"),Xit.forEach(t),Emo=r(rS," (MPNet model)"),rS.forEach(t),Cmo=i(S),Es=n(S,"LI",{});var tS=s(Es);Xle=n(tS,"STRONG",{});var zit=s(Xle);wmo=r(zit,"mt5"),zit.forEach(t),Amo=r(tS," \u2014 "),BI=n(tS,"A",{href:!0});var Qit=s(BI);Lmo=r(Qit,"MT5Tokenizer"),Qit.forEach(t),ymo=r(tS," or "),II=n(tS,"A",{href:!0});var Wit=s(II);xmo=r(Wit,"MT5TokenizerFast"),Wit.forEach(t),$mo=r(tS," (MT5 model)"),tS.forEach(t),kmo=i(S),Cs=n(S,"LI",{});var aS=s(Cs);zle=n(aS,"STRONG",{});var Hit=s(zle);Smo=r(Hit,"mvp"),Hit.forEach(t),Rmo=r(aS," \u2014 "),NI=n(aS,"A",{href:!0});var Uit=s(NI);Pmo=r(Uit,"MvpTokenizer"),Uit.forEach(t),Bmo=r(aS," or "),qI=n(aS,"A",{href:!0});var Jit=s(qI);Imo=r(Jit,"MvpTokenizerFast"),Jit.forEach(t),Nmo=r(aS," (MVP model)"),aS.forEach(t),qmo=i(S),ws=n(S,"LI",{});var nS=s(ws);Qle=n(nS,"STRONG",{});var Yit=s(Qle);jmo=r(Yit,"nezha"),Yit.forEach(t),Dmo=r(nS," \u2014 "),jI=n(nS,"A",{href:!0});var Kit=s(jI);Gmo=r(Kit,"BertTokenizer"),Kit.forEach(t),Omo=r(nS," or "),DI=n(nS,"A",{href:!0});var Zit=s(DI);Vmo=r(Zit,"BertTokenizerFast"),Zit.forEach(t),Xmo=r(nS," (Nezha model)"),nS.forEach(t),zmo=i(S),As=n(S,"LI",{});var sS=s(As);Wle=n(sS,"STRONG",{});var edt=s(Wle);Qmo=r(edt,"nystromformer"),edt.forEach(t),Wmo=r(sS," \u2014 "),GI=n(sS,"A",{href:!0});var odt=s(GI);Hmo=r(odt,"AlbertTokenizer"),odt.forEach(t),Umo=r(sS," or "),OI=n(sS,"A",{href:!0});var rdt=s(OI);Jmo=r(rdt,"AlbertTokenizerFast"),rdt.forEach(t),Ymo=r(sS," (Nystr\xF6mformer model)"),sS.forEach(t),Kmo=i(S),Ls=n(S,"LI",{});var lS=s(Ls);Hle=n(lS,"STRONG",{});var tdt=s(Hle);Zmo=r(tdt,"openai-gpt"),tdt.forEach(t),ego=r(lS," \u2014 "),VI=n(lS,"A",{href:!0});var adt=s(VI);ogo=r(adt,"OpenAIGPTTokenizer"),adt.forEach(t),rgo=r(lS," or "),XI=n(lS,"A",{href:!0});var ndt=s(XI);tgo=r(ndt,"OpenAIGPTTokenizerFast"),ndt.forEach(t),ago=r(lS," (OpenAI GPT model)"),lS.forEach(t),ngo=i(S),_h=n(S,"LI",{});var _ye=s(_h);Ule=n(_ye,"STRONG",{});var sdt=s(Ule);sgo=r(sdt,"opt"),sdt.forEach(t),lgo=r(_ye," \u2014 "),zI=n(_ye,"A",{href:!0});var ldt=s(zI);igo=r(ldt,"GPT2Tokenizer"),ldt.forEach(t),dgo=r(_ye," (OPT model)"),_ye.forEach(t),cgo=i(S),ys=n(S,"LI",{});var iS=s(ys);Jle=n(iS,"STRONG",{});var idt=s(Jle);fgo=r(idt,"pegasus"),idt.forEach(t),mgo=r(iS," \u2014 "),QI=n(iS,"A",{href:!0});var ddt=s(QI);ggo=r(ddt,"PegasusTokenizer"),ddt.forEach(t),hgo=r(iS," or "),WI=n(iS,"A",{href:!0});var cdt=s(WI);pgo=r(cdt,"PegasusTokenizerFast"),cdt.forEach(t),_go=r(iS," (Pegasus model)"),iS.forEach(t),ugo=i(S),uh=n(S,"LI",{});var uye=s(uh);Yle=n(uye,"STRONG",{});var fdt=s(Yle);bgo=r(fdt,"perceiver"),fdt.forEach(t),vgo=r(uye," \u2014 "),HI=n(uye,"A",{href:!0});var mdt=s(HI);Fgo=r(mdt,"PerceiverTokenizer"),mdt.forEach(t),Tgo=r(uye," (Perceiver model)"),uye.forEach(t),Mgo=i(S),bh=n(S,"LI",{});var bye=s(bh);Kle=n(bye,"STRONG",{});var gdt=s(Kle);Ego=r(gdt,"phobert"),gdt.forEach(t),Cgo=r(bye," \u2014 "),UI=n(bye,"A",{href:!0});var hdt=s(UI);wgo=r(hdt,"PhobertTokenizer"),hdt.forEach(t),Ago=r(bye," (PhoBERT model)"),bye.forEach(t),Lgo=i(S),vh=n(S,"LI",{});var vye=s(vh);Zle=n(vye,"STRONG",{});var pdt=s(Zle);ygo=r(pdt,"plbart"),pdt.forEach(t),xgo=r(vye," \u2014 "),JI=n(vye,"A",{href:!0});var _dt=s(JI);$go=r(_dt,"PLBartTokenizer"),_dt.forEach(t),kgo=r(vye," (PLBart model)"),vye.forEach(t),Sgo=i(S),Fh=n(S,"LI",{});var Fye=s(Fh);eie=n(Fye,"STRONG",{});var udt=s(eie);Rgo=r(udt,"prophetnet"),udt.forEach(t),Pgo=r(Fye," \u2014 "),YI=n(Fye,"A",{href:!0});var bdt=s(YI);Bgo=r(bdt,"ProphetNetTokenizer"),bdt.forEach(t),Igo=r(Fye," (ProphetNet model)"),Fye.forEach(t),Ngo=i(S),xs=n(S,"LI",{});var dS=s(xs);oie=n(dS,"STRONG",{});var vdt=s(oie);qgo=r(vdt,"qdqbert"),vdt.forEach(t),jgo=r(dS," \u2014 "),KI=n(dS,"A",{href:!0});var Fdt=s(KI);Dgo=r(Fdt,"BertTokenizer"),Fdt.forEach(t),Ggo=r(dS," or "),ZI=n(dS,"A",{href:!0});var Tdt=s(ZI);Ogo=r(Tdt,"BertTokenizerFast"),Tdt.forEach(t),Vgo=r(dS," (QDQBert model)"),dS.forEach(t),Xgo=i(S),Th=n(S,"LI",{});var Tye=s(Th);rie=n(Tye,"STRONG",{});var Mdt=s(rie);zgo=r(Mdt,"rag"),Mdt.forEach(t),Qgo=r(Tye," \u2014 "),eN=n(Tye,"A",{href:!0});var Edt=s(eN);Wgo=r(Edt,"RagTokenizer"),Edt.forEach(t),Hgo=r(Tye," (RAG model)"),Tye.forEach(t),Ugo=i(S),$s=n(S,"LI",{});var cS=s($s);tie=n(cS,"STRONG",{});var Cdt=s(tie);Jgo=r(Cdt,"realm"),Cdt.forEach(t),Ygo=r(cS," \u2014 "),oN=n(cS,"A",{href:!0});var wdt=s(oN);Kgo=r(wdt,"RealmTokenizer"),wdt.forEach(t),Zgo=r(cS," or "),rN=n(cS,"A",{href:!0});var Adt=s(rN);eho=r(Adt,"RealmTokenizerFast"),Adt.forEach(t),oho=r(cS," (REALM model)"),cS.forEach(t),rho=i(S),ks=n(S,"LI",{});var fS=s(ks);aie=n(fS,"STRONG",{});var Ldt=s(aie);tho=r(Ldt,"reformer"),Ldt.forEach(t),aho=r(fS," \u2014 "),tN=n(fS,"A",{href:!0});var ydt=s(tN);nho=r(ydt,"ReformerTokenizer"),ydt.forEach(t),sho=r(fS," or "),aN=n(fS,"A",{href:!0});var xdt=s(aN);lho=r(xdt,"ReformerTokenizerFast"),xdt.forEach(t),iho=r(fS," (Reformer model)"),fS.forEach(t),dho=i(S),Ss=n(S,"LI",{});var mS=s(Ss);nie=n(mS,"STRONG",{});var $dt=s(nie);cho=r($dt,"rembert"),$dt.forEach(t),fho=r(mS," \u2014 "),nN=n(mS,"A",{href:!0});var kdt=s(nN);mho=r(kdt,"RemBertTokenizer"),kdt.forEach(t),gho=r(mS," or "),sN=n(mS,"A",{href:!0});var Sdt=s(sN);hho=r(Sdt,"RemBertTokenizerFast"),Sdt.forEach(t),pho=r(mS," (RemBERT model)"),mS.forEach(t),_ho=i(S),Rs=n(S,"LI",{});var gS=s(Rs);sie=n(gS,"STRONG",{});var Rdt=s(sie);uho=r(Rdt,"retribert"),Rdt.forEach(t),bho=r(gS," \u2014 "),lN=n(gS,"A",{href:!0});var Pdt=s(lN);vho=r(Pdt,"RetriBertTokenizer"),Pdt.forEach(t),Fho=r(gS," or "),iN=n(gS,"A",{href:!0});var Bdt=s(iN);Tho=r(Bdt,"RetriBertTokenizerFast"),Bdt.forEach(t),Mho=r(gS," (RetriBERT model)"),gS.forEach(t),Eho=i(S),Ps=n(S,"LI",{});var hS=s(Ps);lie=n(hS,"STRONG",{});var Idt=s(lie);Cho=r(Idt,"roberta"),Idt.forEach(t),who=r(hS," \u2014 "),dN=n(hS,"A",{href:!0});var Ndt=s(dN);Aho=r(Ndt,"RobertaTokenizer"),Ndt.forEach(t),Lho=r(hS," or "),cN=n(hS,"A",{href:!0});var qdt=s(cN);yho=r(qdt,"RobertaTokenizerFast"),qdt.forEach(t),xho=r(hS," (RoBERTa model)"),hS.forEach(t),$ho=i(S),Bs=n(S,"LI",{});var pS=s(Bs);iie=n(pS,"STRONG",{});var jdt=s(iie);kho=r(jdt,"roformer"),jdt.forEach(t),Sho=r(pS," \u2014 "),fN=n(pS,"A",{href:!0});var Ddt=s(fN);Rho=r(Ddt,"RoFormerTokenizer"),Ddt.forEach(t),Pho=r(pS," or "),mN=n(pS,"A",{href:!0});var Gdt=s(mN);Bho=r(Gdt,"RoFormerTokenizerFast"),Gdt.forEach(t),Iho=r(pS," (RoFormer model)"),pS.forEach(t),Nho=i(S),Mh=n(S,"LI",{});var Mye=s(Mh);die=n(Mye,"STRONG",{});var Odt=s(die);qho=r(Odt,"speech_to_text"),Odt.forEach(t),jho=r(Mye," \u2014 "),gN=n(Mye,"A",{href:!0});var Vdt=s(gN);Dho=r(Vdt,"Speech2TextTokenizer"),Vdt.forEach(t),Gho=r(Mye," (Speech2Text model)"),Mye.forEach(t),Oho=i(S),Eh=n(S,"LI",{});var Eye=s(Eh);cie=n(Eye,"STRONG",{});var Xdt=s(cie);Vho=r(Xdt,"speech_to_text_2"),Xdt.forEach(t),Xho=r(Eye," \u2014 "),hN=n(Eye,"A",{href:!0});var zdt=s(hN);zho=r(zdt,"Speech2Text2Tokenizer"),zdt.forEach(t),Qho=r(Eye," (Speech2Text2 model)"),Eye.forEach(t),Who=i(S),Is=n(S,"LI",{});var _S=s(Is);fie=n(_S,"STRONG",{});var Qdt=s(fie);Hho=r(Qdt,"splinter"),Qdt.forEach(t),Uho=r(_S," \u2014 "),pN=n(_S,"A",{href:!0});var Wdt=s(pN);Jho=r(Wdt,"SplinterTokenizer"),Wdt.forEach(t),Yho=r(_S," or "),_N=n(_S,"A",{href:!0});var Hdt=s(_N);Kho=r(Hdt,"SplinterTokenizerFast"),Hdt.forEach(t),Zho=r(_S," (Splinter model)"),_S.forEach(t),epo=i(S),Ns=n(S,"LI",{});var uS=s(Ns);mie=n(uS,"STRONG",{});var Udt=s(mie);opo=r(Udt,"squeezebert"),Udt.forEach(t),rpo=r(uS," \u2014 "),uN=n(uS,"A",{href:!0});var Jdt=s(uN);tpo=r(Jdt,"SqueezeBertTokenizer"),Jdt.forEach(t),apo=r(uS," or "),bN=n(uS,"A",{href:!0});var Ydt=s(bN);npo=r(Ydt,"SqueezeBertTokenizerFast"),Ydt.forEach(t),spo=r(uS," (SqueezeBERT model)"),uS.forEach(t),lpo=i(S),qs=n(S,"LI",{});var bS=s(qs);gie=n(bS,"STRONG",{});var Kdt=s(gie);ipo=r(Kdt,"t5"),Kdt.forEach(t),dpo=r(bS," \u2014 "),vN=n(bS,"A",{href:!0});var Zdt=s(vN);cpo=r(Zdt,"T5Tokenizer"),Zdt.forEach(t),fpo=r(bS," or "),FN=n(bS,"A",{href:!0});var ect=s(FN);mpo=r(ect,"T5TokenizerFast"),ect.forEach(t),gpo=r(bS," (T5 model)"),bS.forEach(t),hpo=i(S),Ch=n(S,"LI",{});var Cye=s(Ch);hie=n(Cye,"STRONG",{});var oct=s(hie);ppo=r(oct,"tapas"),oct.forEach(t),_po=r(Cye," \u2014 "),TN=n(Cye,"A",{href:!0});var rct=s(TN);upo=r(rct,"TapasTokenizer"),rct.forEach(t),bpo=r(Cye," (TAPAS model)"),Cye.forEach(t),vpo=i(S),wh=n(S,"LI",{});var wye=s(wh);pie=n(wye,"STRONG",{});var tct=s(pie);Fpo=r(tct,"tapex"),tct.forEach(t),Tpo=r(wye," \u2014 "),MN=n(wye,"A",{href:!0});var act=s(MN);Mpo=r(act,"TapexTokenizer"),act.forEach(t),Epo=r(wye," (TAPEX model)"),wye.forEach(t),Cpo=i(S),Ah=n(S,"LI",{});var Aye=s(Ah);_ie=n(Aye,"STRONG",{});var nct=s(_ie);wpo=r(nct,"transfo-xl"),nct.forEach(t),Apo=r(Aye," \u2014 "),EN=n(Aye,"A",{href:!0});var sct=s(EN);Lpo=r(sct,"TransfoXLTokenizer"),sct.forEach(t),ypo=r(Aye," (Transformer-XL model)"),Aye.forEach(t),xpo=i(S),js=n(S,"LI",{});var vS=s(js);uie=n(vS,"STRONG",{});var lct=s(uie);$po=r(lct,"vilt"),lct.forEach(t),kpo=r(vS," \u2014 "),CN=n(vS,"A",{href:!0});var ict=s(CN);Spo=r(ict,"BertTokenizer"),ict.forEach(t),Rpo=r(vS," or "),wN=n(vS,"A",{href:!0});var dct=s(wN);Ppo=r(dct,"BertTokenizerFast"),dct.forEach(t),Bpo=r(vS," (ViLT model)"),vS.forEach(t),Ipo=i(S),Ds=n(S,"LI",{});var FS=s(Ds);bie=n(FS,"STRONG",{});var cct=s(bie);Npo=r(cct,"visual_bert"),cct.forEach(t),qpo=r(FS," \u2014 "),AN=n(FS,"A",{href:!0});var fct=s(AN);jpo=r(fct,"BertTokenizer"),fct.forEach(t),Dpo=r(FS," or "),LN=n(FS,"A",{href:!0});var mct=s(LN);Gpo=r(mct,"BertTokenizerFast"),mct.forEach(t),Opo=r(FS," (VisualBERT model)"),FS.forEach(t),Vpo=i(S),Lh=n(S,"LI",{});var Lye=s(Lh);vie=n(Lye,"STRONG",{});var gct=s(vie);Xpo=r(gct,"wav2vec2"),gct.forEach(t),zpo=r(Lye," \u2014 "),yN=n(Lye,"A",{href:!0});var hct=s(yN);Qpo=r(hct,"Wav2Vec2CTCTokenizer"),hct.forEach(t),Wpo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),Hpo=i(S),yh=n(S,"LI",{});var yye=s(yh);Fie=n(yye,"STRONG",{});var pct=s(Fie);Upo=r(pct,"wav2vec2-conformer"),pct.forEach(t),Jpo=r(yye," \u2014 "),xN=n(yye,"A",{href:!0});var _ct=s(xN);Ypo=r(_ct,"Wav2Vec2CTCTokenizer"),_ct.forEach(t),Kpo=r(yye," (Wav2Vec2-Conformer model)"),yye.forEach(t),Zpo=i(S),xh=n(S,"LI",{});var xye=s(xh);Tie=n(xye,"STRONG",{});var uct=s(Tie);e_o=r(uct,"wav2vec2_phoneme"),uct.forEach(t),o_o=r(xye," \u2014 "),$N=n(xye,"A",{href:!0});var bct=s($N);r_o=r(bct,"Wav2Vec2PhonemeCTCTokenizer"),bct.forEach(t),t_o=r(xye," (Wav2Vec2Phoneme model)"),xye.forEach(t),a_o=i(S),Gs=n(S,"LI",{});var TS=s(Gs);Mie=n(TS,"STRONG",{});var vct=s(Mie);n_o=r(vct,"xglm"),vct.forEach(t),s_o=r(TS," \u2014 "),kN=n(TS,"A",{href:!0});var Fct=s(kN);l_o=r(Fct,"XGLMTokenizer"),Fct.forEach(t),i_o=r(TS," or "),SN=n(TS,"A",{href:!0});var Tct=s(SN);d_o=r(Tct,"XGLMTokenizerFast"),Tct.forEach(t),c_o=r(TS," (XGLM model)"),TS.forEach(t),f_o=i(S),$h=n(S,"LI",{});var $ye=s($h);Eie=n($ye,"STRONG",{});var Mct=s(Eie);m_o=r(Mct,"xlm"),Mct.forEach(t),g_o=r($ye," \u2014 "),RN=n($ye,"A",{href:!0});var Ect=s(RN);h_o=r(Ect,"XLMTokenizer"),Ect.forEach(t),p_o=r($ye," (XLM model)"),$ye.forEach(t),__o=i(S),kh=n(S,"LI",{});var kye=s(kh);Cie=n(kye,"STRONG",{});var Cct=s(Cie);u_o=r(Cct,"xlm-prophetnet"),Cct.forEach(t),b_o=r(kye," \u2014 "),PN=n(kye,"A",{href:!0});var wct=s(PN);v_o=r(wct,"XLMProphetNetTokenizer"),wct.forEach(t),F_o=r(kye," (XLM-ProphetNet model)"),kye.forEach(t),T_o=i(S),Os=n(S,"LI",{});var MS=s(Os);wie=n(MS,"STRONG",{});var Act=s(wie);M_o=r(Act,"xlm-roberta"),Act.forEach(t),E_o=r(MS," \u2014 "),BN=n(MS,"A",{href:!0});var Lct=s(BN);C_o=r(Lct,"XLMRobertaTokenizer"),Lct.forEach(t),w_o=r(MS," or "),IN=n(MS,"A",{href:!0});var yct=s(IN);A_o=r(yct,"XLMRobertaTokenizerFast"),yct.forEach(t),L_o=r(MS," (XLM-RoBERTa model)"),MS.forEach(t),y_o=i(S),Vs=n(S,"LI",{});var ES=s(Vs);Aie=n(ES,"STRONG",{});var xct=s(Aie);x_o=r(xct,"xlm-roberta-xl"),xct.forEach(t),$_o=r(ES," \u2014 "),NN=n(ES,"A",{href:!0});var $ct=s(NN);k_o=r($ct,"RobertaTokenizer"),$ct.forEach(t),S_o=r(ES," or "),qN=n(ES,"A",{href:!0});var kct=s(qN);R_o=r(kct,"RobertaTokenizerFast"),kct.forEach(t),P_o=r(ES," (XLM-RoBERTa-XL model)"),ES.forEach(t),B_o=i(S),Xs=n(S,"LI",{});var CS=s(Xs);Lie=n(CS,"STRONG",{});var Sct=s(Lie);I_o=r(Sct,"xlnet"),Sct.forEach(t),N_o=r(CS," \u2014 "),jN=n(CS,"A",{href:!0});var Rct=s(jN);q_o=r(Rct,"XLNetTokenizer"),Rct.forEach(t),j_o=r(CS," or "),DN=n(CS,"A",{href:!0});var Pct=s(DN);D_o=r(Pct,"XLNetTokenizerFast"),Pct.forEach(t),G_o=r(CS," (XLNet model)"),CS.forEach(t),O_o=i(S),zs=n(S,"LI",{});var wS=s(zs);yie=n(wS,"STRONG",{});var Bct=s(yie);V_o=r(Bct,"yoso"),Bct.forEach(t),X_o=r(wS," \u2014 "),GN=n(wS,"A",{href:!0});var Ict=s(GN);z_o=r(Ict,"AlbertTokenizer"),Ict.forEach(t),Q_o=r(wS," or "),ON=n(wS,"A",{href:!0});var Nct=s(ON);W_o=r(Nct,"AlbertTokenizerFast"),Nct.forEach(t),H_o=r(wS," (YOSO model)"),wS.forEach(t),S.forEach(t),U_o=i(Ys),T(Sh.$$.fragment,Ys),Ys.forEach(t),J_o=i(Js),Rh=n(Js,"DIV",{class:!0});var Xze=s(Rh);T(gL.$$.fragment,Xze),Y_o=i(Xze),xie=n(Xze,"P",{});var qct=s(xie);K_o=r(qct,"Register a new tokenizer in this mapping."),qct.forEach(t),Xze.forEach(t),Js.forEach(t),VVe=i(f),Ni=n(f,"H2",{class:!0});var zze=s(Ni);Ph=n(zze,"A",{id:!0,class:!0,href:!0});var jct=s(Ph);$ie=n(jct,"SPAN",{});var Dct=s($ie);T(hL.$$.fragment,Dct),Dct.forEach(t),jct.forEach(t),Z_o=i(zze),kie=n(zze,"SPAN",{});var Gct=s(kie);euo=r(Gct,"AutoFeatureExtractor"),Gct.forEach(t),zze.forEach(t),XVe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(pL.$$.fragment,Ks),ouo=i(Ks),_L=n(Ks,"P",{});var Qze=s(_L);ruo=r(Qze,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VN=n(Qze,"A",{href:!0});var Oct=s(VN);tuo=r(Oct,"AutoFeatureExtractor.from_pretrained()"),Oct.forEach(t),auo=r(Qze," class method."),Qze.forEach(t),nuo=i(Ks),uL=n(Ks,"P",{});var Wze=s(uL);suo=r(Wze,"This class cannot be instantiated directly using "),Sie=n(Wze,"CODE",{});var Vct=s(Sie);luo=r(Vct,"__init__()"),Vct.forEach(t),iuo=r(Wze," (throws an error)."),Wze.forEach(t),duo=i(Ks),He=n(Ks,"DIV",{class:!0});var aa=s(He);T(bL.$$.fragment,aa),cuo=i(aa),Rie=n(aa,"P",{});var Xct=s(Rie);fuo=r(Xct,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Xct.forEach(t),muo=i(aa),Pa=n(aa,"P",{});var tw=s(Pa);guo=r(tw,"The feature extractor class to instantiate is selected based on the "),Pie=n(tw,"CODE",{});var zct=s(Pie);huo=r(zct,"model_type"),zct.forEach(t),puo=r(tw,` property of the config object
(either passed as an argument or loaded from `),Bie=n(tw,"CODE",{});var Qct=s(Bie);_uo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),uuo=r(tw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iie=n(tw,"CODE",{});var Wct=s(Iie);buo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),vuo=r(tw,":"),tw.forEach(t),Fuo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Bh=n(K,"LI",{});var Sye=s(Bh);Nie=n(Sye,"STRONG",{});var Hct=s(Nie);Tuo=r(Hct,"beit"),Hct.forEach(t),Muo=r(Sye," \u2014 "),XN=n(Sye,"A",{href:!0});var Uct=s(XN);Euo=r(Uct,"BeitFeatureExtractor"),Uct.forEach(t),Cuo=r(Sye," (BEiT model)"),Sye.forEach(t),wuo=i(K),Ih=n(K,"LI",{});var Rye=s(Ih);qie=n(Rye,"STRONG",{});var Jct=s(qie);Auo=r(Jct,"clip"),Jct.forEach(t),Luo=r(Rye," \u2014 "),zN=n(Rye,"A",{href:!0});var Yct=s(zN);yuo=r(Yct,"CLIPFeatureExtractor"),Yct.forEach(t),xuo=r(Rye," (CLIP model)"),Rye.forEach(t),$uo=i(K),Nh=n(K,"LI",{});var Pye=s(Nh);jie=n(Pye,"STRONG",{});var Kct=s(jie);kuo=r(Kct,"convnext"),Kct.forEach(t),Suo=r(Pye," \u2014 "),QN=n(Pye,"A",{href:!0});var Zct=s(QN);Ruo=r(Zct,"ConvNextFeatureExtractor"),Zct.forEach(t),Puo=r(Pye," (ConvNeXT model)"),Pye.forEach(t),Buo=i(K),qh=n(K,"LI",{});var Bye=s(qh);Die=n(Bye,"STRONG",{});var eft=s(Die);Iuo=r(eft,"cvt"),eft.forEach(t),Nuo=r(Bye," \u2014 "),WN=n(Bye,"A",{href:!0});var oft=s(WN);quo=r(oft,"ConvNextFeatureExtractor"),oft.forEach(t),juo=r(Bye," (CvT model)"),Bye.forEach(t),Duo=i(K),jh=n(K,"LI",{});var Iye=s(jh);Gie=n(Iye,"STRONG",{});var rft=s(Gie);Guo=r(rft,"data2vec-audio"),rft.forEach(t),Ouo=r(Iye," \u2014 "),HN=n(Iye,"A",{href:!0});var tft=s(HN);Vuo=r(tft,"Wav2Vec2FeatureExtractor"),tft.forEach(t),Xuo=r(Iye," (Data2VecAudio model)"),Iye.forEach(t),zuo=i(K),Dh=n(K,"LI",{});var Nye=s(Dh);Oie=n(Nye,"STRONG",{});var aft=s(Oie);Quo=r(aft,"data2vec-vision"),aft.forEach(t),Wuo=r(Nye," \u2014 "),UN=n(Nye,"A",{href:!0});var nft=s(UN);Huo=r(nft,"BeitFeatureExtractor"),nft.forEach(t),Uuo=r(Nye," (Data2VecVision model)"),Nye.forEach(t),Juo=i(K),Gh=n(K,"LI",{});var qye=s(Gh);Vie=n(qye,"STRONG",{});var sft=s(Vie);Yuo=r(sft,"deit"),sft.forEach(t),Kuo=r(qye," \u2014 "),JN=n(qye,"A",{href:!0});var lft=s(JN);Zuo=r(lft,"DeiTFeatureExtractor"),lft.forEach(t),e1o=r(qye," (DeiT model)"),qye.forEach(t),o1o=i(K),Oh=n(K,"LI",{});var jye=s(Oh);Xie=n(jye,"STRONG",{});var ift=s(Xie);r1o=r(ift,"detr"),ift.forEach(t),t1o=r(jye," \u2014 "),YN=n(jye,"A",{href:!0});var dft=s(YN);a1o=r(dft,"DetrFeatureExtractor"),dft.forEach(t),n1o=r(jye," (DETR model)"),jye.forEach(t),s1o=i(K),Vh=n(K,"LI",{});var Dye=s(Vh);zie=n(Dye,"STRONG",{});var cft=s(zie);l1o=r(cft,"dpt"),cft.forEach(t),i1o=r(Dye," \u2014 "),KN=n(Dye,"A",{href:!0});var fft=s(KN);d1o=r(fft,"DPTFeatureExtractor"),fft.forEach(t),c1o=r(Dye," (DPT model)"),Dye.forEach(t),f1o=i(K),Xh=n(K,"LI",{});var Gye=s(Xh);Qie=n(Gye,"STRONG",{});var mft=s(Qie);m1o=r(mft,"flava"),mft.forEach(t),g1o=r(Gye," \u2014 "),ZN=n(Gye,"A",{href:!0});var gft=s(ZN);h1o=r(gft,"FlavaFeatureExtractor"),gft.forEach(t),p1o=r(Gye," (FLAVA model)"),Gye.forEach(t),_1o=i(K),zh=n(K,"LI",{});var Oye=s(zh);Wie=n(Oye,"STRONG",{});var hft=s(Wie);u1o=r(hft,"glpn"),hft.forEach(t),b1o=r(Oye," \u2014 "),eq=n(Oye,"A",{href:!0});var pft=s(eq);v1o=r(pft,"GLPNFeatureExtractor"),pft.forEach(t),F1o=r(Oye," (GLPN model)"),Oye.forEach(t),T1o=i(K),Qh=n(K,"LI",{});var Vye=s(Qh);Hie=n(Vye,"STRONG",{});var _ft=s(Hie);M1o=r(_ft,"groupvit"),_ft.forEach(t),E1o=r(Vye," \u2014 "),oq=n(Vye,"A",{href:!0});var uft=s(oq);C1o=r(uft,"CLIPFeatureExtractor"),uft.forEach(t),w1o=r(Vye," (GroupViT model)"),Vye.forEach(t),A1o=i(K),Wh=n(K,"LI",{});var Xye=s(Wh);Uie=n(Xye,"STRONG",{});var bft=s(Uie);L1o=r(bft,"hubert"),bft.forEach(t),y1o=r(Xye," \u2014 "),rq=n(Xye,"A",{href:!0});var vft=s(rq);x1o=r(vft,"Wav2Vec2FeatureExtractor"),vft.forEach(t),$1o=r(Xye," (Hubert model)"),Xye.forEach(t),k1o=i(K),Hh=n(K,"LI",{});var zye=s(Hh);Jie=n(zye,"STRONG",{});var Fft=s(Jie);S1o=r(Fft,"imagegpt"),Fft.forEach(t),R1o=r(zye," \u2014 "),tq=n(zye,"A",{href:!0});var Tft=s(tq);P1o=r(Tft,"ImageGPTFeatureExtractor"),Tft.forEach(t),B1o=r(zye," (ImageGPT model)"),zye.forEach(t),I1o=i(K),Uh=n(K,"LI",{});var Qye=s(Uh);Yie=n(Qye,"STRONG",{});var Mft=s(Yie);N1o=r(Mft,"layoutlmv2"),Mft.forEach(t),q1o=r(Qye," \u2014 "),aq=n(Qye,"A",{href:!0});var Eft=s(aq);j1o=r(Eft,"LayoutLMv2FeatureExtractor"),Eft.forEach(t),D1o=r(Qye," (LayoutLMv2 model)"),Qye.forEach(t),G1o=i(K),Jh=n(K,"LI",{});var Wye=s(Jh);Kie=n(Wye,"STRONG",{});var Cft=s(Kie);O1o=r(Cft,"layoutlmv3"),Cft.forEach(t),V1o=r(Wye," \u2014 "),nq=n(Wye,"A",{href:!0});var wft=s(nq);X1o=r(wft,"LayoutLMv3FeatureExtractor"),wft.forEach(t),z1o=r(Wye," (LayoutLMv3 model)"),Wye.forEach(t),Q1o=i(K),Yh=n(K,"LI",{});var Hye=s(Yh);Zie=n(Hye,"STRONG",{});var Aft=s(Zie);W1o=r(Aft,"levit"),Aft.forEach(t),H1o=r(Hye," \u2014 "),sq=n(Hye,"A",{href:!0});var Lft=s(sq);U1o=r(Lft,"LevitFeatureExtractor"),Lft.forEach(t),J1o=r(Hye," (LeViT model)"),Hye.forEach(t),Y1o=i(K),Kh=n(K,"LI",{});var Uye=s(Kh);ede=n(Uye,"STRONG",{});var yft=s(ede);K1o=r(yft,"maskformer"),yft.forEach(t),Z1o=r(Uye," \u2014 "),lq=n(Uye,"A",{href:!0});var xft=s(lq);e2o=r(xft,"MaskFormerFeatureExtractor"),xft.forEach(t),o2o=r(Uye," (MaskFormer model)"),Uye.forEach(t),r2o=i(K),Zh=n(K,"LI",{});var Jye=s(Zh);ode=n(Jye,"STRONG",{});var $ft=s(ode);t2o=r($ft,"mctct"),$ft.forEach(t),a2o=r(Jye," \u2014 "),iq=n(Jye,"A",{href:!0});var kft=s(iq);n2o=r(kft,"MCTCTFeatureExtractor"),kft.forEach(t),s2o=r(Jye," (M-CTC-T model)"),Jye.forEach(t),l2o=i(K),ep=n(K,"LI",{});var Yye=s(ep);rde=n(Yye,"STRONG",{});var Sft=s(rde);i2o=r(Sft,"mobilevit"),Sft.forEach(t),d2o=r(Yye," \u2014 "),dq=n(Yye,"A",{href:!0});var Rft=s(dq);c2o=r(Rft,"MobileViTFeatureExtractor"),Rft.forEach(t),f2o=r(Yye," (MobileViT model)"),Yye.forEach(t),m2o=i(K),op=n(K,"LI",{});var Kye=s(op);tde=n(Kye,"STRONG",{});var Pft=s(tde);g2o=r(Pft,"perceiver"),Pft.forEach(t),h2o=r(Kye," \u2014 "),cq=n(Kye,"A",{href:!0});var Bft=s(cq);p2o=r(Bft,"PerceiverFeatureExtractor"),Bft.forEach(t),_2o=r(Kye," (Perceiver model)"),Kye.forEach(t),u2o=i(K),rp=n(K,"LI",{});var Zye=s(rp);ade=n(Zye,"STRONG",{});var Ift=s(ade);b2o=r(Ift,"poolformer"),Ift.forEach(t),v2o=r(Zye," \u2014 "),fq=n(Zye,"A",{href:!0});var Nft=s(fq);F2o=r(Nft,"PoolFormerFeatureExtractor"),Nft.forEach(t),T2o=r(Zye," (PoolFormer model)"),Zye.forEach(t),M2o=i(K),tp=n(K,"LI",{});var e8e=s(tp);nde=n(e8e,"STRONG",{});var qft=s(nde);E2o=r(qft,"regnet"),qft.forEach(t),C2o=r(e8e," \u2014 "),mq=n(e8e,"A",{href:!0});var jft=s(mq);w2o=r(jft,"ConvNextFeatureExtractor"),jft.forEach(t),A2o=r(e8e," (RegNet model)"),e8e.forEach(t),L2o=i(K),ap=n(K,"LI",{});var o8e=s(ap);sde=n(o8e,"STRONG",{});var Dft=s(sde);y2o=r(Dft,"resnet"),Dft.forEach(t),x2o=r(o8e," \u2014 "),gq=n(o8e,"A",{href:!0});var Gft=s(gq);$2o=r(Gft,"ConvNextFeatureExtractor"),Gft.forEach(t),k2o=r(o8e," (ResNet model)"),o8e.forEach(t),S2o=i(K),np=n(K,"LI",{});var r8e=s(np);lde=n(r8e,"STRONG",{});var Oft=s(lde);R2o=r(Oft,"segformer"),Oft.forEach(t),P2o=r(r8e," \u2014 "),hq=n(r8e,"A",{href:!0});var Vft=s(hq);B2o=r(Vft,"SegformerFeatureExtractor"),Vft.forEach(t),I2o=r(r8e," (SegFormer model)"),r8e.forEach(t),N2o=i(K),sp=n(K,"LI",{});var t8e=s(sp);ide=n(t8e,"STRONG",{});var Xft=s(ide);q2o=r(Xft,"speech_to_text"),Xft.forEach(t),j2o=r(t8e," \u2014 "),pq=n(t8e,"A",{href:!0});var zft=s(pq);D2o=r(zft,"Speech2TextFeatureExtractor"),zft.forEach(t),G2o=r(t8e," (Speech2Text model)"),t8e.forEach(t),O2o=i(K),lp=n(K,"LI",{});var a8e=s(lp);dde=n(a8e,"STRONG",{});var Qft=s(dde);V2o=r(Qft,"swin"),Qft.forEach(t),X2o=r(a8e," \u2014 "),_q=n(a8e,"A",{href:!0});var Wft=s(_q);z2o=r(Wft,"ViTFeatureExtractor"),Wft.forEach(t),Q2o=r(a8e," (Swin Transformer model)"),a8e.forEach(t),W2o=i(K),ip=n(K,"LI",{});var n8e=s(ip);cde=n(n8e,"STRONG",{});var Hft=s(cde);H2o=r(Hft,"van"),Hft.forEach(t),U2o=r(n8e," \u2014 "),uq=n(n8e,"A",{href:!0});var Uft=s(uq);J2o=r(Uft,"ConvNextFeatureExtractor"),Uft.forEach(t),Y2o=r(n8e," (VAN model)"),n8e.forEach(t),K2o=i(K),dp=n(K,"LI",{});var s8e=s(dp);fde=n(s8e,"STRONG",{});var Jft=s(fde);Z2o=r(Jft,"vilt"),Jft.forEach(t),ebo=r(s8e," \u2014 "),bq=n(s8e,"A",{href:!0});var Yft=s(bq);obo=r(Yft,"ViltFeatureExtractor"),Yft.forEach(t),rbo=r(s8e," (ViLT model)"),s8e.forEach(t),tbo=i(K),cp=n(K,"LI",{});var l8e=s(cp);mde=n(l8e,"STRONG",{});var Kft=s(mde);abo=r(Kft,"vit"),Kft.forEach(t),nbo=r(l8e," \u2014 "),vq=n(l8e,"A",{href:!0});var Zft=s(vq);sbo=r(Zft,"ViTFeatureExtractor"),Zft.forEach(t),lbo=r(l8e," (ViT model)"),l8e.forEach(t),ibo=i(K),fp=n(K,"LI",{});var i8e=s(fp);gde=n(i8e,"STRONG",{});var emt=s(gde);dbo=r(emt,"vit_mae"),emt.forEach(t),cbo=r(i8e," \u2014 "),Fq=n(i8e,"A",{href:!0});var omt=s(Fq);fbo=r(omt,"ViTFeatureExtractor"),omt.forEach(t),mbo=r(i8e," (ViTMAE model)"),i8e.forEach(t),gbo=i(K),mp=n(K,"LI",{});var d8e=s(mp);hde=n(d8e,"STRONG",{});var rmt=s(hde);hbo=r(rmt,"wav2vec2"),rmt.forEach(t),pbo=r(d8e," \u2014 "),Tq=n(d8e,"A",{href:!0});var tmt=s(Tq);_bo=r(tmt,"Wav2Vec2FeatureExtractor"),tmt.forEach(t),ubo=r(d8e," (Wav2Vec2 model)"),d8e.forEach(t),bbo=i(K),gp=n(K,"LI",{});var c8e=s(gp);pde=n(c8e,"STRONG",{});var amt=s(pde);vbo=r(amt,"wav2vec2-conformer"),amt.forEach(t),Fbo=r(c8e," \u2014 "),Mq=n(c8e,"A",{href:!0});var nmt=s(Mq);Tbo=r(nmt,"Wav2Vec2FeatureExtractor"),nmt.forEach(t),Mbo=r(c8e," (Wav2Vec2-Conformer model)"),c8e.forEach(t),Ebo=i(K),hp=n(K,"LI",{});var f8e=s(hp);_de=n(f8e,"STRONG",{});var smt=s(_de);Cbo=r(smt,"yolos"),smt.forEach(t),wbo=r(f8e," \u2014 "),Eq=n(f8e,"A",{href:!0});var lmt=s(Eq);Abo=r(lmt,"YolosFeatureExtractor"),lmt.forEach(t),Lbo=r(f8e," (YOLOS model)"),f8e.forEach(t),K.forEach(t),ybo=i(aa),T(pp.$$.fragment,aa),xbo=i(aa),T(_p.$$.fragment,aa),aa.forEach(t),$bo=i(Ks),up=n(Ks,"DIV",{class:!0});var Hze=s(up);T(vL.$$.fragment,Hze),kbo=i(Hze),ude=n(Hze,"P",{});var imt=s(ude);Sbo=r(imt,"Register a new feature extractor for this class."),imt.forEach(t),Hze.forEach(t),Ks.forEach(t),zVe=i(f),qi=n(f,"H2",{class:!0});var Uze=s(qi);bp=n(Uze,"A",{id:!0,class:!0,href:!0});var dmt=s(bp);bde=n(dmt,"SPAN",{});var cmt=s(bde);T(FL.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),Rbo=i(Uze),vde=n(Uze,"SPAN",{});var fmt=s(vde);Pbo=r(fmt,"AutoProcessor"),fmt.forEach(t),Uze.forEach(t),QVe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(TL.$$.fragment,Zs),Bbo=i(Zs),ML=n(Zs,"P",{});var Jze=s(ML);Ibo=r(Jze,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Cq=n(Jze,"A",{href:!0});var mmt=s(Cq);Nbo=r(mmt,"AutoProcessor.from_pretrained()"),mmt.forEach(t),qbo=r(Jze," class method."),Jze.forEach(t),jbo=i(Zs),EL=n(Zs,"P",{});var Yze=s(EL);Dbo=r(Yze,"This class cannot be instantiated directly using "),Fde=n(Yze,"CODE",{});var gmt=s(Fde);Gbo=r(gmt,"__init__()"),gmt.forEach(t),Obo=r(Yze," (throws an error)."),Yze.forEach(t),Vbo=i(Zs),Ue=n(Zs,"DIV",{class:!0});var na=s(Ue);T(CL.$$.fragment,na),Xbo=i(na),Tde=n(na,"P",{});var hmt=s(Tde);zbo=r(hmt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hmt.forEach(t),Qbo=i(na),ji=n(na,"P",{});var Fre=s(ji);Wbo=r(Fre,"The processor class to instantiate is selected based on the "),Mde=n(Fre,"CODE",{});var pmt=s(Mde);Hbo=r(pmt,"model_type"),pmt.forEach(t),Ubo=r(Fre,` property of the config object (either
passed as an argument or loaded from `),Ede=n(Fre,"CODE",{});var _mt=s(Ede);Jbo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),Ybo=r(Fre," if possible):"),Fre.forEach(t),Kbo=i(na),he=n(na,"UL",{});var ue=s(he);vp=n(ue,"LI",{});var m8e=s(vp);Cde=n(m8e,"STRONG",{});var umt=s(Cde);Zbo=r(umt,"clip"),umt.forEach(t),evo=r(m8e," \u2014 "),wq=n(m8e,"A",{href:!0});var bmt=s(wq);ovo=r(bmt,"CLIPProcessor"),bmt.forEach(t),rvo=r(m8e," (CLIP model)"),m8e.forEach(t),tvo=i(ue),Fp=n(ue,"LI",{});var g8e=s(Fp);wde=n(g8e,"STRONG",{});var vmt=s(wde);avo=r(vmt,"flava"),vmt.forEach(t),nvo=r(g8e," \u2014 "),Ade=n(g8e,"CODE",{});var Fmt=s(Ade);svo=r(Fmt,"FLAVAProcessor"),Fmt.forEach(t),lvo=r(g8e," (FLAVA model)"),g8e.forEach(t),ivo=i(ue),Tp=n(ue,"LI",{});var h8e=s(Tp);Lde=n(h8e,"STRONG",{});var Tmt=s(Lde);dvo=r(Tmt,"groupvit"),Tmt.forEach(t),cvo=r(h8e," \u2014 "),Aq=n(h8e,"A",{href:!0});var Mmt=s(Aq);fvo=r(Mmt,"CLIPProcessor"),Mmt.forEach(t),mvo=r(h8e," (GroupViT model)"),h8e.forEach(t),gvo=i(ue),Mp=n(ue,"LI",{});var p8e=s(Mp);yde=n(p8e,"STRONG",{});var Emt=s(yde);hvo=r(Emt,"layoutlmv2"),Emt.forEach(t),pvo=r(p8e," \u2014 "),Lq=n(p8e,"A",{href:!0});var Cmt=s(Lq);_vo=r(Cmt,"LayoutLMv2Processor"),Cmt.forEach(t),uvo=r(p8e," (LayoutLMv2 model)"),p8e.forEach(t),bvo=i(ue),Ep=n(ue,"LI",{});var _8e=s(Ep);xde=n(_8e,"STRONG",{});var wmt=s(xde);vvo=r(wmt,"layoutlmv3"),wmt.forEach(t),Fvo=r(_8e," \u2014 "),yq=n(_8e,"A",{href:!0});var Amt=s(yq);Tvo=r(Amt,"LayoutLMv3Processor"),Amt.forEach(t),Mvo=r(_8e," (LayoutLMv3 model)"),_8e.forEach(t),Evo=i(ue),Cp=n(ue,"LI",{});var u8e=s(Cp);$de=n(u8e,"STRONG",{});var Lmt=s($de);Cvo=r(Lmt,"layoutxlm"),Lmt.forEach(t),wvo=r(u8e," \u2014 "),xq=n(u8e,"A",{href:!0});var ymt=s(xq);Avo=r(ymt,"LayoutXLMProcessor"),ymt.forEach(t),Lvo=r(u8e," (LayoutXLM model)"),u8e.forEach(t),yvo=i(ue),wp=n(ue,"LI",{});var b8e=s(wp);kde=n(b8e,"STRONG",{});var xmt=s(kde);xvo=r(xmt,"sew"),xmt.forEach(t),$vo=r(b8e," \u2014 "),$q=n(b8e,"A",{href:!0});var $mt=s($q);kvo=r($mt,"Wav2Vec2Processor"),$mt.forEach(t),Svo=r(b8e," (SEW model)"),b8e.forEach(t),Rvo=i(ue),Ap=n(ue,"LI",{});var v8e=s(Ap);Sde=n(v8e,"STRONG",{});var kmt=s(Sde);Pvo=r(kmt,"sew-d"),kmt.forEach(t),Bvo=r(v8e," \u2014 "),kq=n(v8e,"A",{href:!0});var Smt=s(kq);Ivo=r(Smt,"Wav2Vec2Processor"),Smt.forEach(t),Nvo=r(v8e," (SEW-D model)"),v8e.forEach(t),qvo=i(ue),Lp=n(ue,"LI",{});var F8e=s(Lp);Rde=n(F8e,"STRONG",{});var Rmt=s(Rde);jvo=r(Rmt,"speech_to_text"),Rmt.forEach(t),Dvo=r(F8e," \u2014 "),Sq=n(F8e,"A",{href:!0});var Pmt=s(Sq);Gvo=r(Pmt,"Speech2TextProcessor"),Pmt.forEach(t),Ovo=r(F8e," (Speech2Text model)"),F8e.forEach(t),Vvo=i(ue),yp=n(ue,"LI",{});var T8e=s(yp);Pde=n(T8e,"STRONG",{});var Bmt=s(Pde);Xvo=r(Bmt,"speech_to_text_2"),Bmt.forEach(t),zvo=r(T8e," \u2014 "),Rq=n(T8e,"A",{href:!0});var Imt=s(Rq);Qvo=r(Imt,"Speech2Text2Processor"),Imt.forEach(t),Wvo=r(T8e," (Speech2Text2 model)"),T8e.forEach(t),Hvo=i(ue),xp=n(ue,"LI",{});var M8e=s(xp);Bde=n(M8e,"STRONG",{});var Nmt=s(Bde);Uvo=r(Nmt,"trocr"),Nmt.forEach(t),Jvo=r(M8e," \u2014 "),Pq=n(M8e,"A",{href:!0});var qmt=s(Pq);Yvo=r(qmt,"TrOCRProcessor"),qmt.forEach(t),Kvo=r(M8e," (TrOCR model)"),M8e.forEach(t),Zvo=i(ue),$p=n(ue,"LI",{});var E8e=s($p);Ide=n(E8e,"STRONG",{});var jmt=s(Ide);e3o=r(jmt,"unispeech"),jmt.forEach(t),o3o=r(E8e," \u2014 "),Bq=n(E8e,"A",{href:!0});var Dmt=s(Bq);r3o=r(Dmt,"Wav2Vec2Processor"),Dmt.forEach(t),t3o=r(E8e," (UniSpeech model)"),E8e.forEach(t),a3o=i(ue),kp=n(ue,"LI",{});var C8e=s(kp);Nde=n(C8e,"STRONG",{});var Gmt=s(Nde);n3o=r(Gmt,"unispeech-sat"),Gmt.forEach(t),s3o=r(C8e," \u2014 "),Iq=n(C8e,"A",{href:!0});var Omt=s(Iq);l3o=r(Omt,"Wav2Vec2Processor"),Omt.forEach(t),i3o=r(C8e," (UniSpeechSat model)"),C8e.forEach(t),d3o=i(ue),Sp=n(ue,"LI",{});var w8e=s(Sp);qde=n(w8e,"STRONG",{});var Vmt=s(qde);c3o=r(Vmt,"vilt"),Vmt.forEach(t),f3o=r(w8e," \u2014 "),Nq=n(w8e,"A",{href:!0});var Xmt=s(Nq);m3o=r(Xmt,"ViltProcessor"),Xmt.forEach(t),g3o=r(w8e," (ViLT model)"),w8e.forEach(t),h3o=i(ue),Rp=n(ue,"LI",{});var A8e=s(Rp);jde=n(A8e,"STRONG",{});var zmt=s(jde);p3o=r(zmt,"vision-text-dual-encoder"),zmt.forEach(t),_3o=r(A8e," \u2014 "),qq=n(A8e,"A",{href:!0});var Qmt=s(qq);u3o=r(Qmt,"VisionTextDualEncoderProcessor"),Qmt.forEach(t),b3o=r(A8e," (VisionTextDualEncoder model)"),A8e.forEach(t),v3o=i(ue),Pp=n(ue,"LI",{});var L8e=s(Pp);Dde=n(L8e,"STRONG",{});var Wmt=s(Dde);F3o=r(Wmt,"wav2vec2"),Wmt.forEach(t),T3o=r(L8e," \u2014 "),jq=n(L8e,"A",{href:!0});var Hmt=s(jq);M3o=r(Hmt,"Wav2Vec2Processor"),Hmt.forEach(t),E3o=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),C3o=i(ue),Bp=n(ue,"LI",{});var y8e=s(Bp);Gde=n(y8e,"STRONG",{});var Umt=s(Gde);w3o=r(Umt,"wav2vec2-conformer"),Umt.forEach(t),A3o=r(y8e," \u2014 "),Dq=n(y8e,"A",{href:!0});var Jmt=s(Dq);L3o=r(Jmt,"Wav2Vec2Processor"),Jmt.forEach(t),y3o=r(y8e," (Wav2Vec2-Conformer model)"),y8e.forEach(t),x3o=i(ue),Ip=n(ue,"LI",{});var x8e=s(Ip);Ode=n(x8e,"STRONG",{});var Ymt=s(Ode);$3o=r(Ymt,"wavlm"),Ymt.forEach(t),k3o=r(x8e," \u2014 "),Gq=n(x8e,"A",{href:!0});var Kmt=s(Gq);S3o=r(Kmt,"Wav2Vec2Processor"),Kmt.forEach(t),R3o=r(x8e," (WavLM model)"),x8e.forEach(t),ue.forEach(t),P3o=i(na),T(Np.$$.fragment,na),B3o=i(na),T(qp.$$.fragment,na),na.forEach(t),I3o=i(Zs),jp=n(Zs,"DIV",{class:!0});var Kze=s(jp);T(wL.$$.fragment,Kze),N3o=i(Kze),Vde=n(Kze,"P",{});var Zmt=s(Vde);q3o=r(Zmt,"Register a new processor for this class."),Zmt.forEach(t),Kze.forEach(t),Zs.forEach(t),WVe=i(f),Di=n(f,"H2",{class:!0});var Zze=s(Di);Dp=n(Zze,"A",{id:!0,class:!0,href:!0});var egt=s(Dp);Xde=n(egt,"SPAN",{});var ogt=s(Xde);T(AL.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),j3o=i(Zze),zde=n(Zze,"SPAN",{});var rgt=s(zde);D3o=r(rgt,"AutoModel"),rgt.forEach(t),Zze.forEach(t),HVe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T(LL.$$.fragment,el),G3o=i(el),Gi=n(el,"P",{});var Tre=s(Gi);O3o=r(Tre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Oq=n(Tre,"A",{href:!0});var tgt=s(Oq);V3o=r(tgt,"from_pretrained()"),tgt.forEach(t),X3o=r(Tre," class method or the "),Vq=n(Tre,"A",{href:!0});var agt=s(Vq);z3o=r(agt,"from_config()"),agt.forEach(t),Q3o=r(Tre,` class
method.`),Tre.forEach(t),W3o=i(el),yL=n(el,"P",{});var eQe=s(yL);H3o=r(eQe,"This class cannot be instantiated directly using "),Qde=n(eQe,"CODE",{});var ngt=s(Qde);U3o=r(ngt,"__init__()"),ngt.forEach(t),J3o=r(eQe," (throws an error)."),eQe.forEach(t),Y3o=i(el),lt=n(el,"DIV",{class:!0});var aw=s(lt);T(xL.$$.fragment,aw),K3o=i(aw),Wde=n(aw,"P",{});var sgt=s(Wde);Z3o=r(sgt,"Instantiates one of the base model classes of the library from a configuration."),sgt.forEach(t),eFo=i(aw),Oi=n(aw,"P",{});var Mre=s(Oi);oFo=r(Mre,`Note:
Loading a model from its configuration file does `),Hde=n(Mre,"STRONG",{});var lgt=s(Hde);rFo=r(lgt,"not"),lgt.forEach(t),tFo=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=n(Mre,"A",{href:!0});var igt=s(Xq);aFo=r(igt,"from_pretrained()"),igt.forEach(t),nFo=r(Mre," to load the model weights."),Mre.forEach(t),sFo=i(aw),T(Gp.$$.fragment,aw),aw.forEach(t),lFo=i(el),Je=n(el,"DIV",{class:!0});var sa=s(Je);T($L.$$.fragment,sa),iFo=i(sa),Ude=n(sa,"P",{});var dgt=s(Ude);dFo=r(dgt,"Instantiate one of the base model classes of the library from a pretrained model."),dgt.forEach(t),cFo=i(sa),Ba=n(sa,"P",{});var nw=s(Ba);fFo=r(nw,"The model class to instantiate is selected based on the "),Jde=n(nw,"CODE",{});var cgt=s(Jde);mFo=r(cgt,"model_type"),cgt.forEach(t),gFo=r(nw,` property of the config object (either
passed as an argument or loaded from `),Yde=n(nw,"CODE",{});var fgt=s(Yde);hFo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),pFo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=n(nw,"CODE",{});var mgt=s(Kde);_Fo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),uFo=r(nw,":"),nw.forEach(t),bFo=i(sa),y=n(sa,"UL",{});var x=s(y);Op=n(x,"LI",{});var $8e=s(Op);Zde=n($8e,"STRONG",{});var ggt=s(Zde);vFo=r(ggt,"albert"),ggt.forEach(t),FFo=r($8e," \u2014 "),zq=n($8e,"A",{href:!0});var hgt=s(zq);TFo=r(hgt,"AlbertModel"),hgt.forEach(t),MFo=r($8e," (ALBERT model)"),$8e.forEach(t),EFo=i(x),Vp=n(x,"LI",{});var k8e=s(Vp);ece=n(k8e,"STRONG",{});var pgt=s(ece);CFo=r(pgt,"bart"),pgt.forEach(t),wFo=r(k8e," \u2014 "),Qq=n(k8e,"A",{href:!0});var _gt=s(Qq);AFo=r(_gt,"BartModel"),_gt.forEach(t),LFo=r(k8e," (BART model)"),k8e.forEach(t),yFo=i(x),Xp=n(x,"LI",{});var S8e=s(Xp);oce=n(S8e,"STRONG",{});var ugt=s(oce);xFo=r(ugt,"beit"),ugt.forEach(t),$Fo=r(S8e," \u2014 "),Wq=n(S8e,"A",{href:!0});var bgt=s(Wq);kFo=r(bgt,"BeitModel"),bgt.forEach(t),SFo=r(S8e," (BEiT model)"),S8e.forEach(t),RFo=i(x),zp=n(x,"LI",{});var R8e=s(zp);rce=n(R8e,"STRONG",{});var vgt=s(rce);PFo=r(vgt,"bert"),vgt.forEach(t),BFo=r(R8e," \u2014 "),Hq=n(R8e,"A",{href:!0});var Fgt=s(Hq);IFo=r(Fgt,"BertModel"),Fgt.forEach(t),NFo=r(R8e," (BERT model)"),R8e.forEach(t),qFo=i(x),Qp=n(x,"LI",{});var P8e=s(Qp);tce=n(P8e,"STRONG",{});var Tgt=s(tce);jFo=r(Tgt,"bert-generation"),Tgt.forEach(t),DFo=r(P8e," \u2014 "),Uq=n(P8e,"A",{href:!0});var Mgt=s(Uq);GFo=r(Mgt,"BertGenerationEncoder"),Mgt.forEach(t),OFo=r(P8e," (Bert Generation model)"),P8e.forEach(t),VFo=i(x),Wp=n(x,"LI",{});var B8e=s(Wp);ace=n(B8e,"STRONG",{});var Egt=s(ace);XFo=r(Egt,"big_bird"),Egt.forEach(t),zFo=r(B8e," \u2014 "),Jq=n(B8e,"A",{href:!0});var Cgt=s(Jq);QFo=r(Cgt,"BigBirdModel"),Cgt.forEach(t),WFo=r(B8e," (BigBird model)"),B8e.forEach(t),HFo=i(x),Hp=n(x,"LI",{});var I8e=s(Hp);nce=n(I8e,"STRONG",{});var wgt=s(nce);UFo=r(wgt,"bigbird_pegasus"),wgt.forEach(t),JFo=r(I8e," \u2014 "),Yq=n(I8e,"A",{href:!0});var Agt=s(Yq);YFo=r(Agt,"BigBirdPegasusModel"),Agt.forEach(t),KFo=r(I8e," (BigBird-Pegasus model)"),I8e.forEach(t),ZFo=i(x),Up=n(x,"LI",{});var N8e=s(Up);sce=n(N8e,"STRONG",{});var Lgt=s(sce);e6o=r(Lgt,"blenderbot"),Lgt.forEach(t),o6o=r(N8e," \u2014 "),Kq=n(N8e,"A",{href:!0});var ygt=s(Kq);r6o=r(ygt,"BlenderbotModel"),ygt.forEach(t),t6o=r(N8e," (Blenderbot model)"),N8e.forEach(t),a6o=i(x),Jp=n(x,"LI",{});var q8e=s(Jp);lce=n(q8e,"STRONG",{});var xgt=s(lce);n6o=r(xgt,"blenderbot-small"),xgt.forEach(t),s6o=r(q8e," \u2014 "),Zq=n(q8e,"A",{href:!0});var $gt=s(Zq);l6o=r($gt,"BlenderbotSmallModel"),$gt.forEach(t),i6o=r(q8e," (BlenderbotSmall model)"),q8e.forEach(t),d6o=i(x),Yp=n(x,"LI",{});var j8e=s(Yp);ice=n(j8e,"STRONG",{});var kgt=s(ice);c6o=r(kgt,"bloom"),kgt.forEach(t),f6o=r(j8e," \u2014 "),ej=n(j8e,"A",{href:!0});var Sgt=s(ej);m6o=r(Sgt,"BloomModel"),Sgt.forEach(t),g6o=r(j8e," (BLOOM model)"),j8e.forEach(t),h6o=i(x),Kp=n(x,"LI",{});var D8e=s(Kp);dce=n(D8e,"STRONG",{});var Rgt=s(dce);p6o=r(Rgt,"camembert"),Rgt.forEach(t),_6o=r(D8e," \u2014 "),oj=n(D8e,"A",{href:!0});var Pgt=s(oj);u6o=r(Pgt,"CamembertModel"),Pgt.forEach(t),b6o=r(D8e," (CamemBERT model)"),D8e.forEach(t),v6o=i(x),Zp=n(x,"LI",{});var G8e=s(Zp);cce=n(G8e,"STRONG",{});var Bgt=s(cce);F6o=r(Bgt,"canine"),Bgt.forEach(t),T6o=r(G8e," \u2014 "),rj=n(G8e,"A",{href:!0});var Igt=s(rj);M6o=r(Igt,"CanineModel"),Igt.forEach(t),E6o=r(G8e," (CANINE model)"),G8e.forEach(t),C6o=i(x),e_=n(x,"LI",{});var O8e=s(e_);fce=n(O8e,"STRONG",{});var Ngt=s(fce);w6o=r(Ngt,"clip"),Ngt.forEach(t),A6o=r(O8e," \u2014 "),tj=n(O8e,"A",{href:!0});var qgt=s(tj);L6o=r(qgt,"CLIPModel"),qgt.forEach(t),y6o=r(O8e," (CLIP model)"),O8e.forEach(t),x6o=i(x),o_=n(x,"LI",{});var V8e=s(o_);mce=n(V8e,"STRONG",{});var jgt=s(mce);$6o=r(jgt,"codegen"),jgt.forEach(t),k6o=r(V8e," \u2014 "),aj=n(V8e,"A",{href:!0});var Dgt=s(aj);S6o=r(Dgt,"CodeGenModel"),Dgt.forEach(t),R6o=r(V8e," (CodeGen model)"),V8e.forEach(t),P6o=i(x),r_=n(x,"LI",{});var X8e=s(r_);gce=n(X8e,"STRONG",{});var Ggt=s(gce);B6o=r(Ggt,"convbert"),Ggt.forEach(t),I6o=r(X8e," \u2014 "),nj=n(X8e,"A",{href:!0});var Ogt=s(nj);N6o=r(Ogt,"ConvBertModel"),Ogt.forEach(t),q6o=r(X8e," (ConvBERT model)"),X8e.forEach(t),j6o=i(x),t_=n(x,"LI",{});var z8e=s(t_);hce=n(z8e,"STRONG",{});var Vgt=s(hce);D6o=r(Vgt,"convnext"),Vgt.forEach(t),G6o=r(z8e," \u2014 "),sj=n(z8e,"A",{href:!0});var Xgt=s(sj);O6o=r(Xgt,"ConvNextModel"),Xgt.forEach(t),V6o=r(z8e," (ConvNeXT model)"),z8e.forEach(t),X6o=i(x),a_=n(x,"LI",{});var Q8e=s(a_);pce=n(Q8e,"STRONG",{});var zgt=s(pce);z6o=r(zgt,"ctrl"),zgt.forEach(t),Q6o=r(Q8e," \u2014 "),lj=n(Q8e,"A",{href:!0});var Qgt=s(lj);W6o=r(Qgt,"CTRLModel"),Qgt.forEach(t),H6o=r(Q8e," (CTRL model)"),Q8e.forEach(t),U6o=i(x),n_=n(x,"LI",{});var W8e=s(n_);_ce=n(W8e,"STRONG",{});var Wgt=s(_ce);J6o=r(Wgt,"cvt"),Wgt.forEach(t),Y6o=r(W8e," \u2014 "),ij=n(W8e,"A",{href:!0});var Hgt=s(ij);K6o=r(Hgt,"CvtModel"),Hgt.forEach(t),Z6o=r(W8e," (CvT model)"),W8e.forEach(t),eTo=i(x),s_=n(x,"LI",{});var H8e=s(s_);uce=n(H8e,"STRONG",{});var Ugt=s(uce);oTo=r(Ugt,"data2vec-audio"),Ugt.forEach(t),rTo=r(H8e," \u2014 "),dj=n(H8e,"A",{href:!0});var Jgt=s(dj);tTo=r(Jgt,"Data2VecAudioModel"),Jgt.forEach(t),aTo=r(H8e," (Data2VecAudio model)"),H8e.forEach(t),nTo=i(x),l_=n(x,"LI",{});var U8e=s(l_);bce=n(U8e,"STRONG",{});var Ygt=s(bce);sTo=r(Ygt,"data2vec-text"),Ygt.forEach(t),lTo=r(U8e," \u2014 "),cj=n(U8e,"A",{href:!0});var Kgt=s(cj);iTo=r(Kgt,"Data2VecTextModel"),Kgt.forEach(t),dTo=r(U8e," (Data2VecText model)"),U8e.forEach(t),cTo=i(x),i_=n(x,"LI",{});var J8e=s(i_);vce=n(J8e,"STRONG",{});var Zgt=s(vce);fTo=r(Zgt,"data2vec-vision"),Zgt.forEach(t),mTo=r(J8e," \u2014 "),fj=n(J8e,"A",{href:!0});var eht=s(fj);gTo=r(eht,"Data2VecVisionModel"),eht.forEach(t),hTo=r(J8e," (Data2VecVision model)"),J8e.forEach(t),pTo=i(x),d_=n(x,"LI",{});var Y8e=s(d_);Fce=n(Y8e,"STRONG",{});var oht=s(Fce);_To=r(oht,"deberta"),oht.forEach(t),uTo=r(Y8e," \u2014 "),mj=n(Y8e,"A",{href:!0});var rht=s(mj);bTo=r(rht,"DebertaModel"),rht.forEach(t),vTo=r(Y8e," (DeBERTa model)"),Y8e.forEach(t),FTo=i(x),c_=n(x,"LI",{});var K8e=s(c_);Tce=n(K8e,"STRONG",{});var tht=s(Tce);TTo=r(tht,"deberta-v2"),tht.forEach(t),MTo=r(K8e," \u2014 "),gj=n(K8e,"A",{href:!0});var aht=s(gj);ETo=r(aht,"DebertaV2Model"),aht.forEach(t),CTo=r(K8e," (DeBERTa-v2 model)"),K8e.forEach(t),wTo=i(x),f_=n(x,"LI",{});var Z8e=s(f_);Mce=n(Z8e,"STRONG",{});var nht=s(Mce);ATo=r(nht,"decision_transformer"),nht.forEach(t),LTo=r(Z8e," \u2014 "),hj=n(Z8e,"A",{href:!0});var sht=s(hj);yTo=r(sht,"DecisionTransformerModel"),sht.forEach(t),xTo=r(Z8e," (Decision Transformer model)"),Z8e.forEach(t),$To=i(x),m_=n(x,"LI",{});var exe=s(m_);Ece=n(exe,"STRONG",{});var lht=s(Ece);kTo=r(lht,"deit"),lht.forEach(t),STo=r(exe," \u2014 "),pj=n(exe,"A",{href:!0});var iht=s(pj);RTo=r(iht,"DeiTModel"),iht.forEach(t),PTo=r(exe," (DeiT model)"),exe.forEach(t),BTo=i(x),g_=n(x,"LI",{});var oxe=s(g_);Cce=n(oxe,"STRONG",{});var dht=s(Cce);ITo=r(dht,"detr"),dht.forEach(t),NTo=r(oxe," \u2014 "),_j=n(oxe,"A",{href:!0});var cht=s(_j);qTo=r(cht,"DetrModel"),cht.forEach(t),jTo=r(oxe," (DETR model)"),oxe.forEach(t),DTo=i(x),h_=n(x,"LI",{});var rxe=s(h_);wce=n(rxe,"STRONG",{});var fht=s(wce);GTo=r(fht,"distilbert"),fht.forEach(t),OTo=r(rxe," \u2014 "),uj=n(rxe,"A",{href:!0});var mht=s(uj);VTo=r(mht,"DistilBertModel"),mht.forEach(t),XTo=r(rxe," (DistilBERT model)"),rxe.forEach(t),zTo=i(x),p_=n(x,"LI",{});var txe=s(p_);Ace=n(txe,"STRONG",{});var ght=s(Ace);QTo=r(ght,"dpr"),ght.forEach(t),WTo=r(txe," \u2014 "),bj=n(txe,"A",{href:!0});var hht=s(bj);HTo=r(hht,"DPRQuestionEncoder"),hht.forEach(t),UTo=r(txe," (DPR model)"),txe.forEach(t),JTo=i(x),__=n(x,"LI",{});var axe=s(__);Lce=n(axe,"STRONG",{});var pht=s(Lce);YTo=r(pht,"dpt"),pht.forEach(t),KTo=r(axe," \u2014 "),vj=n(axe,"A",{href:!0});var _ht=s(vj);ZTo=r(_ht,"DPTModel"),_ht.forEach(t),e7o=r(axe," (DPT model)"),axe.forEach(t),o7o=i(x),u_=n(x,"LI",{});var nxe=s(u_);yce=n(nxe,"STRONG",{});var uht=s(yce);r7o=r(uht,"electra"),uht.forEach(t),t7o=r(nxe," \u2014 "),Fj=n(nxe,"A",{href:!0});var bht=s(Fj);a7o=r(bht,"ElectraModel"),bht.forEach(t),n7o=r(nxe," (ELECTRA model)"),nxe.forEach(t),s7o=i(x),b_=n(x,"LI",{});var sxe=s(b_);xce=n(sxe,"STRONG",{});var vht=s(xce);l7o=r(vht,"flaubert"),vht.forEach(t),i7o=r(sxe," \u2014 "),Tj=n(sxe,"A",{href:!0});var Fht=s(Tj);d7o=r(Fht,"FlaubertModel"),Fht.forEach(t),c7o=r(sxe," (FlauBERT model)"),sxe.forEach(t),f7o=i(x),v_=n(x,"LI",{});var lxe=s(v_);$ce=n(lxe,"STRONG",{});var Tht=s($ce);m7o=r(Tht,"flava"),Tht.forEach(t),g7o=r(lxe," \u2014 "),Mj=n(lxe,"A",{href:!0});var Mht=s(Mj);h7o=r(Mht,"FlavaModel"),Mht.forEach(t),p7o=r(lxe," (FLAVA model)"),lxe.forEach(t),_7o=i(x),F_=n(x,"LI",{});var ixe=s(F_);kce=n(ixe,"STRONG",{});var Eht=s(kce);u7o=r(Eht,"fnet"),Eht.forEach(t),b7o=r(ixe," \u2014 "),Ej=n(ixe,"A",{href:!0});var Cht=s(Ej);v7o=r(Cht,"FNetModel"),Cht.forEach(t),F7o=r(ixe," (FNet model)"),ixe.forEach(t),T7o=i(x),T_=n(x,"LI",{});var dxe=s(T_);Sce=n(dxe,"STRONG",{});var wht=s(Sce);M7o=r(wht,"fsmt"),wht.forEach(t),E7o=r(dxe," \u2014 "),Cj=n(dxe,"A",{href:!0});var Aht=s(Cj);C7o=r(Aht,"FSMTModel"),Aht.forEach(t),w7o=r(dxe," (FairSeq Machine-Translation model)"),dxe.forEach(t),A7o=i(x),Qs=n(x,"LI",{});var AS=s(Qs);Rce=n(AS,"STRONG",{});var Lht=s(Rce);L7o=r(Lht,"funnel"),Lht.forEach(t),y7o=r(AS," \u2014 "),wj=n(AS,"A",{href:!0});var yht=s(wj);x7o=r(yht,"FunnelModel"),yht.forEach(t),$7o=r(AS," or "),Aj=n(AS,"A",{href:!0});var xht=s(Aj);k7o=r(xht,"FunnelBaseModel"),xht.forEach(t),S7o=r(AS," (Funnel Transformer model)"),AS.forEach(t),R7o=i(x),M_=n(x,"LI",{});var cxe=s(M_);Pce=n(cxe,"STRONG",{});var $ht=s(Pce);P7o=r($ht,"glpn"),$ht.forEach(t),B7o=r(cxe," \u2014 "),Lj=n(cxe,"A",{href:!0});var kht=s(Lj);I7o=r(kht,"GLPNModel"),kht.forEach(t),N7o=r(cxe," (GLPN model)"),cxe.forEach(t),q7o=i(x),E_=n(x,"LI",{});var fxe=s(E_);Bce=n(fxe,"STRONG",{});var Sht=s(Bce);j7o=r(Sht,"gpt2"),Sht.forEach(t),D7o=r(fxe," \u2014 "),yj=n(fxe,"A",{href:!0});var Rht=s(yj);G7o=r(Rht,"GPT2Model"),Rht.forEach(t),O7o=r(fxe," (OpenAI GPT-2 model)"),fxe.forEach(t),V7o=i(x),C_=n(x,"LI",{});var mxe=s(C_);Ice=n(mxe,"STRONG",{});var Pht=s(Ice);X7o=r(Pht,"gpt_neo"),Pht.forEach(t),z7o=r(mxe," \u2014 "),xj=n(mxe,"A",{href:!0});var Bht=s(xj);Q7o=r(Bht,"GPTNeoModel"),Bht.forEach(t),W7o=r(mxe," (GPT Neo model)"),mxe.forEach(t),H7o=i(x),w_=n(x,"LI",{});var gxe=s(w_);Nce=n(gxe,"STRONG",{});var Iht=s(Nce);U7o=r(Iht,"gpt_neox"),Iht.forEach(t),J7o=r(gxe," \u2014 "),$j=n(gxe,"A",{href:!0});var Nht=s($j);Y7o=r(Nht,"GPTNeoXModel"),Nht.forEach(t),K7o=r(gxe," (GPT NeoX model)"),gxe.forEach(t),Z7o=i(x),A_=n(x,"LI",{});var hxe=s(A_);qce=n(hxe,"STRONG",{});var qht=s(qce);e9o=r(qht,"gptj"),qht.forEach(t),o9o=r(hxe," \u2014 "),kj=n(hxe,"A",{href:!0});var jht=s(kj);r9o=r(jht,"GPTJModel"),jht.forEach(t),t9o=r(hxe," (GPT-J model)"),hxe.forEach(t),a9o=i(x),L_=n(x,"LI",{});var pxe=s(L_);jce=n(pxe,"STRONG",{});var Dht=s(jce);n9o=r(Dht,"groupvit"),Dht.forEach(t),s9o=r(pxe," \u2014 "),Sj=n(pxe,"A",{href:!0});var Ght=s(Sj);l9o=r(Ght,"GroupViTModel"),Ght.forEach(t),i9o=r(pxe," (GroupViT model)"),pxe.forEach(t),d9o=i(x),y_=n(x,"LI",{});var _xe=s(y_);Dce=n(_xe,"STRONG",{});var Oht=s(Dce);c9o=r(Oht,"hubert"),Oht.forEach(t),f9o=r(_xe," \u2014 "),Rj=n(_xe,"A",{href:!0});var Vht=s(Rj);m9o=r(Vht,"HubertModel"),Vht.forEach(t),g9o=r(_xe," (Hubert model)"),_xe.forEach(t),h9o=i(x),x_=n(x,"LI",{});var uxe=s(x_);Gce=n(uxe,"STRONG",{});var Xht=s(Gce);p9o=r(Xht,"ibert"),Xht.forEach(t),_9o=r(uxe," \u2014 "),Pj=n(uxe,"A",{href:!0});var zht=s(Pj);u9o=r(zht,"IBertModel"),zht.forEach(t),b9o=r(uxe," (I-BERT model)"),uxe.forEach(t),v9o=i(x),$_=n(x,"LI",{});var bxe=s($_);Oce=n(bxe,"STRONG",{});var Qht=s(Oce);F9o=r(Qht,"imagegpt"),Qht.forEach(t),T9o=r(bxe," \u2014 "),Bj=n(bxe,"A",{href:!0});var Wht=s(Bj);M9o=r(Wht,"ImageGPTModel"),Wht.forEach(t),E9o=r(bxe," (ImageGPT model)"),bxe.forEach(t),C9o=i(x),k_=n(x,"LI",{});var vxe=s(k_);Vce=n(vxe,"STRONG",{});var Hht=s(Vce);w9o=r(Hht,"layoutlm"),Hht.forEach(t),A9o=r(vxe," \u2014 "),Ij=n(vxe,"A",{href:!0});var Uht=s(Ij);L9o=r(Uht,"LayoutLMModel"),Uht.forEach(t),y9o=r(vxe," (LayoutLM model)"),vxe.forEach(t),x9o=i(x),S_=n(x,"LI",{});var Fxe=s(S_);Xce=n(Fxe,"STRONG",{});var Jht=s(Xce);$9o=r(Jht,"layoutlmv2"),Jht.forEach(t),k9o=r(Fxe," \u2014 "),Nj=n(Fxe,"A",{href:!0});var Yht=s(Nj);S9o=r(Yht,"LayoutLMv2Model"),Yht.forEach(t),R9o=r(Fxe," (LayoutLMv2 model)"),Fxe.forEach(t),P9o=i(x),R_=n(x,"LI",{});var Txe=s(R_);zce=n(Txe,"STRONG",{});var Kht=s(zce);B9o=r(Kht,"layoutlmv3"),Kht.forEach(t),I9o=r(Txe," \u2014 "),qj=n(Txe,"A",{href:!0});var Zht=s(qj);N9o=r(Zht,"LayoutLMv3Model"),Zht.forEach(t),q9o=r(Txe," (LayoutLMv3 model)"),Txe.forEach(t),j9o=i(x),P_=n(x,"LI",{});var Mxe=s(P_);Qce=n(Mxe,"STRONG",{});var ept=s(Qce);D9o=r(ept,"led"),ept.forEach(t),G9o=r(Mxe," \u2014 "),jj=n(Mxe,"A",{href:!0});var opt=s(jj);O9o=r(opt,"LEDModel"),opt.forEach(t),V9o=r(Mxe," (LED model)"),Mxe.forEach(t),X9o=i(x),B_=n(x,"LI",{});var Exe=s(B_);Wce=n(Exe,"STRONG",{});var rpt=s(Wce);z9o=r(rpt,"levit"),rpt.forEach(t),Q9o=r(Exe," \u2014 "),Dj=n(Exe,"A",{href:!0});var tpt=s(Dj);W9o=r(tpt,"LevitModel"),tpt.forEach(t),H9o=r(Exe," (LeViT model)"),Exe.forEach(t),U9o=i(x),I_=n(x,"LI",{});var Cxe=s(I_);Hce=n(Cxe,"STRONG",{});var apt=s(Hce);J9o=r(apt,"longformer"),apt.forEach(t),Y9o=r(Cxe," \u2014 "),Gj=n(Cxe,"A",{href:!0});var npt=s(Gj);K9o=r(npt,"LongformerModel"),npt.forEach(t),Z9o=r(Cxe," (Longformer model)"),Cxe.forEach(t),eMo=i(x),N_=n(x,"LI",{});var wxe=s(N_);Uce=n(wxe,"STRONG",{});var spt=s(Uce);oMo=r(spt,"longt5"),spt.forEach(t),rMo=r(wxe," \u2014 "),Oj=n(wxe,"A",{href:!0});var lpt=s(Oj);tMo=r(lpt,"LongT5Model"),lpt.forEach(t),aMo=r(wxe," (LongT5 model)"),wxe.forEach(t),nMo=i(x),q_=n(x,"LI",{});var Axe=s(q_);Jce=n(Axe,"STRONG",{});var ipt=s(Jce);sMo=r(ipt,"luke"),ipt.forEach(t),lMo=r(Axe," \u2014 "),Vj=n(Axe,"A",{href:!0});var dpt=s(Vj);iMo=r(dpt,"LukeModel"),dpt.forEach(t),dMo=r(Axe," (LUKE model)"),Axe.forEach(t),cMo=i(x),j_=n(x,"LI",{});var Lxe=s(j_);Yce=n(Lxe,"STRONG",{});var cpt=s(Yce);fMo=r(cpt,"lxmert"),cpt.forEach(t),mMo=r(Lxe," \u2014 "),Xj=n(Lxe,"A",{href:!0});var fpt=s(Xj);gMo=r(fpt,"LxmertModel"),fpt.forEach(t),hMo=r(Lxe," (LXMERT model)"),Lxe.forEach(t),pMo=i(x),D_=n(x,"LI",{});var yxe=s(D_);Kce=n(yxe,"STRONG",{});var mpt=s(Kce);_Mo=r(mpt,"m2m_100"),mpt.forEach(t),uMo=r(yxe," \u2014 "),zj=n(yxe,"A",{href:!0});var gpt=s(zj);bMo=r(gpt,"M2M100Model"),gpt.forEach(t),vMo=r(yxe," (M2M100 model)"),yxe.forEach(t),FMo=i(x),G_=n(x,"LI",{});var xxe=s(G_);Zce=n(xxe,"STRONG",{});var hpt=s(Zce);TMo=r(hpt,"marian"),hpt.forEach(t),MMo=r(xxe," \u2014 "),Qj=n(xxe,"A",{href:!0});var ppt=s(Qj);EMo=r(ppt,"MarianModel"),ppt.forEach(t),CMo=r(xxe," (Marian model)"),xxe.forEach(t),wMo=i(x),O_=n(x,"LI",{});var $xe=s(O_);efe=n($xe,"STRONG",{});var _pt=s(efe);AMo=r(_pt,"maskformer"),_pt.forEach(t),LMo=r($xe," \u2014 "),Wj=n($xe,"A",{href:!0});var upt=s(Wj);yMo=r(upt,"MaskFormerModel"),upt.forEach(t),xMo=r($xe," (MaskFormer model)"),$xe.forEach(t),$Mo=i(x),V_=n(x,"LI",{});var kxe=s(V_);ofe=n(kxe,"STRONG",{});var bpt=s(ofe);kMo=r(bpt,"mbart"),bpt.forEach(t),SMo=r(kxe," \u2014 "),Hj=n(kxe,"A",{href:!0});var vpt=s(Hj);RMo=r(vpt,"MBartModel"),vpt.forEach(t),PMo=r(kxe," (mBART model)"),kxe.forEach(t),BMo=i(x),X_=n(x,"LI",{});var Sxe=s(X_);rfe=n(Sxe,"STRONG",{});var Fpt=s(rfe);IMo=r(Fpt,"mctct"),Fpt.forEach(t),NMo=r(Sxe," \u2014 "),Uj=n(Sxe,"A",{href:!0});var Tpt=s(Uj);qMo=r(Tpt,"MCTCTModel"),Tpt.forEach(t),jMo=r(Sxe," (M-CTC-T model)"),Sxe.forEach(t),DMo=i(x),z_=n(x,"LI",{});var Rxe=s(z_);tfe=n(Rxe,"STRONG",{});var Mpt=s(tfe);GMo=r(Mpt,"megatron-bert"),Mpt.forEach(t),OMo=r(Rxe," \u2014 "),Jj=n(Rxe,"A",{href:!0});var Ept=s(Jj);VMo=r(Ept,"MegatronBertModel"),Ept.forEach(t),XMo=r(Rxe," (Megatron-BERT model)"),Rxe.forEach(t),zMo=i(x),Q_=n(x,"LI",{});var Pxe=s(Q_);afe=n(Pxe,"STRONG",{});var Cpt=s(afe);QMo=r(Cpt,"mobilebert"),Cpt.forEach(t),WMo=r(Pxe," \u2014 "),Yj=n(Pxe,"A",{href:!0});var wpt=s(Yj);HMo=r(wpt,"MobileBertModel"),wpt.forEach(t),UMo=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),JMo=i(x),W_=n(x,"LI",{});var Bxe=s(W_);nfe=n(Bxe,"STRONG",{});var Apt=s(nfe);YMo=r(Apt,"mobilevit"),Apt.forEach(t),KMo=r(Bxe," \u2014 "),Kj=n(Bxe,"A",{href:!0});var Lpt=s(Kj);ZMo=r(Lpt,"MobileViTModel"),Lpt.forEach(t),e4o=r(Bxe," (MobileViT model)"),Bxe.forEach(t),o4o=i(x),H_=n(x,"LI",{});var Ixe=s(H_);sfe=n(Ixe,"STRONG",{});var ypt=s(sfe);r4o=r(ypt,"mpnet"),ypt.forEach(t),t4o=r(Ixe," \u2014 "),Zj=n(Ixe,"A",{href:!0});var xpt=s(Zj);a4o=r(xpt,"MPNetModel"),xpt.forEach(t),n4o=r(Ixe," (MPNet model)"),Ixe.forEach(t),s4o=i(x),U_=n(x,"LI",{});var Nxe=s(U_);lfe=n(Nxe,"STRONG",{});var $pt=s(lfe);l4o=r($pt,"mt5"),$pt.forEach(t),i4o=r(Nxe," \u2014 "),eD=n(Nxe,"A",{href:!0});var kpt=s(eD);d4o=r(kpt,"MT5Model"),kpt.forEach(t),c4o=r(Nxe," (MT5 model)"),Nxe.forEach(t),f4o=i(x),J_=n(x,"LI",{});var qxe=s(J_);ife=n(qxe,"STRONG",{});var Spt=s(ife);m4o=r(Spt,"mvp"),Spt.forEach(t),g4o=r(qxe," \u2014 "),oD=n(qxe,"A",{href:!0});var Rpt=s(oD);h4o=r(Rpt,"MvpModel"),Rpt.forEach(t),p4o=r(qxe," (MVP model)"),qxe.forEach(t),_4o=i(x),Y_=n(x,"LI",{});var jxe=s(Y_);dfe=n(jxe,"STRONG",{});var Ppt=s(dfe);u4o=r(Ppt,"nezha"),Ppt.forEach(t),b4o=r(jxe," \u2014 "),rD=n(jxe,"A",{href:!0});var Bpt=s(rD);v4o=r(Bpt,"NezhaModel"),Bpt.forEach(t),F4o=r(jxe," (Nezha model)"),jxe.forEach(t),T4o=i(x),K_=n(x,"LI",{});var Dxe=s(K_);cfe=n(Dxe,"STRONG",{});var Ipt=s(cfe);M4o=r(Ipt,"nystromformer"),Ipt.forEach(t),E4o=r(Dxe," \u2014 "),tD=n(Dxe,"A",{href:!0});var Npt=s(tD);C4o=r(Npt,"NystromformerModel"),Npt.forEach(t),w4o=r(Dxe," (Nystr\xF6mformer model)"),Dxe.forEach(t),A4o=i(x),Z_=n(x,"LI",{});var Gxe=s(Z_);ffe=n(Gxe,"STRONG",{});var qpt=s(ffe);L4o=r(qpt,"openai-gpt"),qpt.forEach(t),y4o=r(Gxe," \u2014 "),aD=n(Gxe,"A",{href:!0});var jpt=s(aD);x4o=r(jpt,"OpenAIGPTModel"),jpt.forEach(t),$4o=r(Gxe," (OpenAI GPT model)"),Gxe.forEach(t),k4o=i(x),eu=n(x,"LI",{});var Oxe=s(eu);mfe=n(Oxe,"STRONG",{});var Dpt=s(mfe);S4o=r(Dpt,"opt"),Dpt.forEach(t),R4o=r(Oxe," \u2014 "),nD=n(Oxe,"A",{href:!0});var Gpt=s(nD);P4o=r(Gpt,"OPTModel"),Gpt.forEach(t),B4o=r(Oxe," (OPT model)"),Oxe.forEach(t),I4o=i(x),ou=n(x,"LI",{});var Vxe=s(ou);gfe=n(Vxe,"STRONG",{});var Opt=s(gfe);N4o=r(Opt,"pegasus"),Opt.forEach(t),q4o=r(Vxe," \u2014 "),sD=n(Vxe,"A",{href:!0});var Vpt=s(sD);j4o=r(Vpt,"PegasusModel"),Vpt.forEach(t),D4o=r(Vxe," (Pegasus model)"),Vxe.forEach(t),G4o=i(x),ru=n(x,"LI",{});var Xxe=s(ru);hfe=n(Xxe,"STRONG",{});var Xpt=s(hfe);O4o=r(Xpt,"perceiver"),Xpt.forEach(t),V4o=r(Xxe," \u2014 "),lD=n(Xxe,"A",{href:!0});var zpt=s(lD);X4o=r(zpt,"PerceiverModel"),zpt.forEach(t),z4o=r(Xxe," (Perceiver model)"),Xxe.forEach(t),Q4o=i(x),tu=n(x,"LI",{});var zxe=s(tu);pfe=n(zxe,"STRONG",{});var Qpt=s(pfe);W4o=r(Qpt,"plbart"),Qpt.forEach(t),H4o=r(zxe," \u2014 "),iD=n(zxe,"A",{href:!0});var Wpt=s(iD);U4o=r(Wpt,"PLBartModel"),Wpt.forEach(t),J4o=r(zxe," (PLBart model)"),zxe.forEach(t),Y4o=i(x),au=n(x,"LI",{});var Qxe=s(au);_fe=n(Qxe,"STRONG",{});var Hpt=s(_fe);K4o=r(Hpt,"poolformer"),Hpt.forEach(t),Z4o=r(Qxe," \u2014 "),dD=n(Qxe,"A",{href:!0});var Upt=s(dD);eEo=r(Upt,"PoolFormerModel"),Upt.forEach(t),oEo=r(Qxe," (PoolFormer model)"),Qxe.forEach(t),rEo=i(x),nu=n(x,"LI",{});var Wxe=s(nu);ufe=n(Wxe,"STRONG",{});var Jpt=s(ufe);tEo=r(Jpt,"prophetnet"),Jpt.forEach(t),aEo=r(Wxe," \u2014 "),cD=n(Wxe,"A",{href:!0});var Ypt=s(cD);nEo=r(Ypt,"ProphetNetModel"),Ypt.forEach(t),sEo=r(Wxe," (ProphetNet model)"),Wxe.forEach(t),lEo=i(x),su=n(x,"LI",{});var Hxe=s(su);bfe=n(Hxe,"STRONG",{});var Kpt=s(bfe);iEo=r(Kpt,"qdqbert"),Kpt.forEach(t),dEo=r(Hxe," \u2014 "),fD=n(Hxe,"A",{href:!0});var Zpt=s(fD);cEo=r(Zpt,"QDQBertModel"),Zpt.forEach(t),fEo=r(Hxe," (QDQBert model)"),Hxe.forEach(t),mEo=i(x),lu=n(x,"LI",{});var Uxe=s(lu);vfe=n(Uxe,"STRONG",{});var e_t=s(vfe);gEo=r(e_t,"reformer"),e_t.forEach(t),hEo=r(Uxe," \u2014 "),mD=n(Uxe,"A",{href:!0});var o_t=s(mD);pEo=r(o_t,"ReformerModel"),o_t.forEach(t),_Eo=r(Uxe," (Reformer model)"),Uxe.forEach(t),uEo=i(x),iu=n(x,"LI",{});var Jxe=s(iu);Ffe=n(Jxe,"STRONG",{});var r_t=s(Ffe);bEo=r(r_t,"regnet"),r_t.forEach(t),vEo=r(Jxe," \u2014 "),gD=n(Jxe,"A",{href:!0});var t_t=s(gD);FEo=r(t_t,"RegNetModel"),t_t.forEach(t),TEo=r(Jxe," (RegNet model)"),Jxe.forEach(t),MEo=i(x),du=n(x,"LI",{});var Yxe=s(du);Tfe=n(Yxe,"STRONG",{});var a_t=s(Tfe);EEo=r(a_t,"rembert"),a_t.forEach(t),CEo=r(Yxe," \u2014 "),hD=n(Yxe,"A",{href:!0});var n_t=s(hD);wEo=r(n_t,"RemBertModel"),n_t.forEach(t),AEo=r(Yxe," (RemBERT model)"),Yxe.forEach(t),LEo=i(x),cu=n(x,"LI",{});var Kxe=s(cu);Mfe=n(Kxe,"STRONG",{});var s_t=s(Mfe);yEo=r(s_t,"resnet"),s_t.forEach(t),xEo=r(Kxe," \u2014 "),pD=n(Kxe,"A",{href:!0});var l_t=s(pD);$Eo=r(l_t,"ResNetModel"),l_t.forEach(t),kEo=r(Kxe," (ResNet model)"),Kxe.forEach(t),SEo=i(x),fu=n(x,"LI",{});var Zxe=s(fu);Efe=n(Zxe,"STRONG",{});var i_t=s(Efe);REo=r(i_t,"retribert"),i_t.forEach(t),PEo=r(Zxe," \u2014 "),_D=n(Zxe,"A",{href:!0});var d_t=s(_D);BEo=r(d_t,"RetriBertModel"),d_t.forEach(t),IEo=r(Zxe," (RetriBERT model)"),Zxe.forEach(t),NEo=i(x),mu=n(x,"LI",{});var e$e=s(mu);Cfe=n(e$e,"STRONG",{});var c_t=s(Cfe);qEo=r(c_t,"roberta"),c_t.forEach(t),jEo=r(e$e," \u2014 "),uD=n(e$e,"A",{href:!0});var f_t=s(uD);DEo=r(f_t,"RobertaModel"),f_t.forEach(t),GEo=r(e$e," (RoBERTa model)"),e$e.forEach(t),OEo=i(x),gu=n(x,"LI",{});var o$e=s(gu);wfe=n(o$e,"STRONG",{});var m_t=s(wfe);VEo=r(m_t,"roformer"),m_t.forEach(t),XEo=r(o$e," \u2014 "),bD=n(o$e,"A",{href:!0});var g_t=s(bD);zEo=r(g_t,"RoFormerModel"),g_t.forEach(t),QEo=r(o$e," (RoFormer model)"),o$e.forEach(t),WEo=i(x),hu=n(x,"LI",{});var r$e=s(hu);Afe=n(r$e,"STRONG",{});var h_t=s(Afe);HEo=r(h_t,"segformer"),h_t.forEach(t),UEo=r(r$e," \u2014 "),vD=n(r$e,"A",{href:!0});var p_t=s(vD);JEo=r(p_t,"SegformerModel"),p_t.forEach(t),YEo=r(r$e," (SegFormer model)"),r$e.forEach(t),KEo=i(x),pu=n(x,"LI",{});var t$e=s(pu);Lfe=n(t$e,"STRONG",{});var __t=s(Lfe);ZEo=r(__t,"sew"),__t.forEach(t),eCo=r(t$e," \u2014 "),FD=n(t$e,"A",{href:!0});var u_t=s(FD);oCo=r(u_t,"SEWModel"),u_t.forEach(t),rCo=r(t$e," (SEW model)"),t$e.forEach(t),tCo=i(x),_u=n(x,"LI",{});var a$e=s(_u);yfe=n(a$e,"STRONG",{});var b_t=s(yfe);aCo=r(b_t,"sew-d"),b_t.forEach(t),nCo=r(a$e," \u2014 "),TD=n(a$e,"A",{href:!0});var v_t=s(TD);sCo=r(v_t,"SEWDModel"),v_t.forEach(t),lCo=r(a$e," (SEW-D model)"),a$e.forEach(t),iCo=i(x),uu=n(x,"LI",{});var n$e=s(uu);xfe=n(n$e,"STRONG",{});var F_t=s(xfe);dCo=r(F_t,"speech_to_text"),F_t.forEach(t),cCo=r(n$e," \u2014 "),MD=n(n$e,"A",{href:!0});var T_t=s(MD);fCo=r(T_t,"Speech2TextModel"),T_t.forEach(t),mCo=r(n$e," (Speech2Text model)"),n$e.forEach(t),gCo=i(x),bu=n(x,"LI",{});var s$e=s(bu);$fe=n(s$e,"STRONG",{});var M_t=s($fe);hCo=r(M_t,"splinter"),M_t.forEach(t),pCo=r(s$e," \u2014 "),ED=n(s$e,"A",{href:!0});var E_t=s(ED);_Co=r(E_t,"SplinterModel"),E_t.forEach(t),uCo=r(s$e," (Splinter model)"),s$e.forEach(t),bCo=i(x),vu=n(x,"LI",{});var l$e=s(vu);kfe=n(l$e,"STRONG",{});var C_t=s(kfe);vCo=r(C_t,"squeezebert"),C_t.forEach(t),FCo=r(l$e," \u2014 "),CD=n(l$e,"A",{href:!0});var w_t=s(CD);TCo=r(w_t,"SqueezeBertModel"),w_t.forEach(t),MCo=r(l$e," (SqueezeBERT model)"),l$e.forEach(t),ECo=i(x),Fu=n(x,"LI",{});var i$e=s(Fu);Sfe=n(i$e,"STRONG",{});var A_t=s(Sfe);CCo=r(A_t,"swin"),A_t.forEach(t),wCo=r(i$e," \u2014 "),wD=n(i$e,"A",{href:!0});var L_t=s(wD);ACo=r(L_t,"SwinModel"),L_t.forEach(t),LCo=r(i$e," (Swin Transformer model)"),i$e.forEach(t),yCo=i(x),Tu=n(x,"LI",{});var d$e=s(Tu);Rfe=n(d$e,"STRONG",{});var y_t=s(Rfe);xCo=r(y_t,"t5"),y_t.forEach(t),$Co=r(d$e," \u2014 "),AD=n(d$e,"A",{href:!0});var x_t=s(AD);kCo=r(x_t,"T5Model"),x_t.forEach(t),SCo=r(d$e," (T5 model)"),d$e.forEach(t),RCo=i(x),Mu=n(x,"LI",{});var c$e=s(Mu);Pfe=n(c$e,"STRONG",{});var $_t=s(Pfe);PCo=r($_t,"tapas"),$_t.forEach(t),BCo=r(c$e," \u2014 "),LD=n(c$e,"A",{href:!0});var k_t=s(LD);ICo=r(k_t,"TapasModel"),k_t.forEach(t),NCo=r(c$e," (TAPAS model)"),c$e.forEach(t),qCo=i(x),Eu=n(x,"LI",{});var f$e=s(Eu);Bfe=n(f$e,"STRONG",{});var S_t=s(Bfe);jCo=r(S_t,"trajectory_transformer"),S_t.forEach(t),DCo=r(f$e," \u2014 "),yD=n(f$e,"A",{href:!0});var R_t=s(yD);GCo=r(R_t,"TrajectoryTransformerModel"),R_t.forEach(t),OCo=r(f$e," (Trajectory Transformer model)"),f$e.forEach(t),VCo=i(x),Cu=n(x,"LI",{});var m$e=s(Cu);Ife=n(m$e,"STRONG",{});var P_t=s(Ife);XCo=r(P_t,"transfo-xl"),P_t.forEach(t),zCo=r(m$e," \u2014 "),xD=n(m$e,"A",{href:!0});var B_t=s(xD);QCo=r(B_t,"TransfoXLModel"),B_t.forEach(t),WCo=r(m$e," (Transformer-XL model)"),m$e.forEach(t),HCo=i(x),wu=n(x,"LI",{});var g$e=s(wu);Nfe=n(g$e,"STRONG",{});var I_t=s(Nfe);UCo=r(I_t,"unispeech"),I_t.forEach(t),JCo=r(g$e," \u2014 "),$D=n(g$e,"A",{href:!0});var N_t=s($D);YCo=r(N_t,"UniSpeechModel"),N_t.forEach(t),KCo=r(g$e," (UniSpeech model)"),g$e.forEach(t),ZCo=i(x),Au=n(x,"LI",{});var h$e=s(Au);qfe=n(h$e,"STRONG",{});var q_t=s(qfe);e5o=r(q_t,"unispeech-sat"),q_t.forEach(t),o5o=r(h$e," \u2014 "),kD=n(h$e,"A",{href:!0});var j_t=s(kD);r5o=r(j_t,"UniSpeechSatModel"),j_t.forEach(t),t5o=r(h$e," (UniSpeechSat model)"),h$e.forEach(t),a5o=i(x),Lu=n(x,"LI",{});var p$e=s(Lu);jfe=n(p$e,"STRONG",{});var D_t=s(jfe);n5o=r(D_t,"van"),D_t.forEach(t),s5o=r(p$e," \u2014 "),SD=n(p$e,"A",{href:!0});var G_t=s(SD);l5o=r(G_t,"VanModel"),G_t.forEach(t),i5o=r(p$e," (VAN model)"),p$e.forEach(t),d5o=i(x),yu=n(x,"LI",{});var _$e=s(yu);Dfe=n(_$e,"STRONG",{});var O_t=s(Dfe);c5o=r(O_t,"vilt"),O_t.forEach(t),f5o=r(_$e," \u2014 "),RD=n(_$e,"A",{href:!0});var V_t=s(RD);m5o=r(V_t,"ViltModel"),V_t.forEach(t),g5o=r(_$e," (ViLT model)"),_$e.forEach(t),h5o=i(x),xu=n(x,"LI",{});var u$e=s(xu);Gfe=n(u$e,"STRONG",{});var X_t=s(Gfe);p5o=r(X_t,"vision-text-dual-encoder"),X_t.forEach(t),_5o=r(u$e," \u2014 "),PD=n(u$e,"A",{href:!0});var z_t=s(PD);u5o=r(z_t,"VisionTextDualEncoderModel"),z_t.forEach(t),b5o=r(u$e," (VisionTextDualEncoder model)"),u$e.forEach(t),v5o=i(x),$u=n(x,"LI",{});var b$e=s($u);Ofe=n(b$e,"STRONG",{});var Q_t=s(Ofe);F5o=r(Q_t,"visual_bert"),Q_t.forEach(t),T5o=r(b$e," \u2014 "),BD=n(b$e,"A",{href:!0});var W_t=s(BD);M5o=r(W_t,"VisualBertModel"),W_t.forEach(t),E5o=r(b$e," (VisualBERT model)"),b$e.forEach(t),C5o=i(x),ku=n(x,"LI",{});var v$e=s(ku);Vfe=n(v$e,"STRONG",{});var H_t=s(Vfe);w5o=r(H_t,"vit"),H_t.forEach(t),A5o=r(v$e," \u2014 "),ID=n(v$e,"A",{href:!0});var U_t=s(ID);L5o=r(U_t,"ViTModel"),U_t.forEach(t),y5o=r(v$e," (ViT model)"),v$e.forEach(t),x5o=i(x),Su=n(x,"LI",{});var F$e=s(Su);Xfe=n(F$e,"STRONG",{});var J_t=s(Xfe);$5o=r(J_t,"vit_mae"),J_t.forEach(t),k5o=r(F$e," \u2014 "),ND=n(F$e,"A",{href:!0});var Y_t=s(ND);S5o=r(Y_t,"ViTMAEModel"),Y_t.forEach(t),R5o=r(F$e," (ViTMAE model)"),F$e.forEach(t),P5o=i(x),Ru=n(x,"LI",{});var T$e=s(Ru);zfe=n(T$e,"STRONG",{});var K_t=s(zfe);B5o=r(K_t,"wav2vec2"),K_t.forEach(t),I5o=r(T$e," \u2014 "),qD=n(T$e,"A",{href:!0});var Z_t=s(qD);N5o=r(Z_t,"Wav2Vec2Model"),Z_t.forEach(t),q5o=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),j5o=i(x),Pu=n(x,"LI",{});var M$e=s(Pu);Qfe=n(M$e,"STRONG",{});var eut=s(Qfe);D5o=r(eut,"wav2vec2-conformer"),eut.forEach(t),G5o=r(M$e," \u2014 "),jD=n(M$e,"A",{href:!0});var out=s(jD);O5o=r(out,"Wav2Vec2ConformerModel"),out.forEach(t),V5o=r(M$e," (Wav2Vec2-Conformer model)"),M$e.forEach(t),X5o=i(x),Bu=n(x,"LI",{});var E$e=s(Bu);Wfe=n(E$e,"STRONG",{});var rut=s(Wfe);z5o=r(rut,"wavlm"),rut.forEach(t),Q5o=r(E$e," \u2014 "),DD=n(E$e,"A",{href:!0});var tut=s(DD);W5o=r(tut,"WavLMModel"),tut.forEach(t),H5o=r(E$e," (WavLM model)"),E$e.forEach(t),U5o=i(x),Iu=n(x,"LI",{});var C$e=s(Iu);Hfe=n(C$e,"STRONG",{});var aut=s(Hfe);J5o=r(aut,"xglm"),aut.forEach(t),Y5o=r(C$e," \u2014 "),GD=n(C$e,"A",{href:!0});var nut=s(GD);K5o=r(nut,"XGLMModel"),nut.forEach(t),Z5o=r(C$e," (XGLM model)"),C$e.forEach(t),e0o=i(x),Nu=n(x,"LI",{});var w$e=s(Nu);Ufe=n(w$e,"STRONG",{});var sut=s(Ufe);o0o=r(sut,"xlm"),sut.forEach(t),r0o=r(w$e," \u2014 "),OD=n(w$e,"A",{href:!0});var lut=s(OD);t0o=r(lut,"XLMModel"),lut.forEach(t),a0o=r(w$e," (XLM model)"),w$e.forEach(t),n0o=i(x),qu=n(x,"LI",{});var A$e=s(qu);Jfe=n(A$e,"STRONG",{});var iut=s(Jfe);s0o=r(iut,"xlm-prophetnet"),iut.forEach(t),l0o=r(A$e," \u2014 "),VD=n(A$e,"A",{href:!0});var dut=s(VD);i0o=r(dut,"XLMProphetNetModel"),dut.forEach(t),d0o=r(A$e," (XLM-ProphetNet model)"),A$e.forEach(t),c0o=i(x),ju=n(x,"LI",{});var L$e=s(ju);Yfe=n(L$e,"STRONG",{});var cut=s(Yfe);f0o=r(cut,"xlm-roberta"),cut.forEach(t),m0o=r(L$e," \u2014 "),XD=n(L$e,"A",{href:!0});var fut=s(XD);g0o=r(fut,"XLMRobertaModel"),fut.forEach(t),h0o=r(L$e," (XLM-RoBERTa model)"),L$e.forEach(t),p0o=i(x),Du=n(x,"LI",{});var y$e=s(Du);Kfe=n(y$e,"STRONG",{});var mut=s(Kfe);_0o=r(mut,"xlm-roberta-xl"),mut.forEach(t),u0o=r(y$e," \u2014 "),zD=n(y$e,"A",{href:!0});var gut=s(zD);b0o=r(gut,"XLMRobertaXLModel"),gut.forEach(t),v0o=r(y$e," (XLM-RoBERTa-XL model)"),y$e.forEach(t),F0o=i(x),Gu=n(x,"LI",{});var x$e=s(Gu);Zfe=n(x$e,"STRONG",{});var hut=s(Zfe);T0o=r(hut,"xlnet"),hut.forEach(t),M0o=r(x$e," \u2014 "),QD=n(x$e,"A",{href:!0});var put=s(QD);E0o=r(put,"XLNetModel"),put.forEach(t),C0o=r(x$e," (XLNet model)"),x$e.forEach(t),w0o=i(x),Ou=n(x,"LI",{});var $$e=s(Ou);eme=n($$e,"STRONG",{});var _ut=s(eme);A0o=r(_ut,"yolos"),_ut.forEach(t),L0o=r($$e," \u2014 "),WD=n($$e,"A",{href:!0});var uut=s(WD);y0o=r(uut,"YolosModel"),uut.forEach(t),x0o=r($$e," (YOLOS model)"),$$e.forEach(t),$0o=i(x),Vu=n(x,"LI",{});var k$e=s(Vu);ome=n(k$e,"STRONG",{});var but=s(ome);k0o=r(but,"yoso"),but.forEach(t),S0o=r(k$e," \u2014 "),HD=n(k$e,"A",{href:!0});var vut=s(HD);R0o=r(vut,"YosoModel"),vut.forEach(t),P0o=r(k$e," (YOSO model)"),k$e.forEach(t),x.forEach(t),B0o=i(sa),Xu=n(sa,"P",{});var S$e=s(Xu);I0o=r(S$e,"The model is set in evaluation mode by default using "),rme=n(S$e,"CODE",{});var Fut=s(rme);N0o=r(Fut,"model.eval()"),Fut.forEach(t),q0o=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=n(S$e,"CODE",{});var Tut=s(tme);j0o=r(Tut,"model.train()"),Tut.forEach(t),S$e.forEach(t),D0o=i(sa),T(zu.$$.fragment,sa),sa.forEach(t),el.forEach(t),UVe=i(f),Vi=n(f,"H2",{class:!0});var oQe=s(Vi);Qu=n(oQe,"A",{id:!0,class:!0,href:!0});var Mut=s(Qu);ame=n(Mut,"SPAN",{});var Eut=s(ame);T(kL.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),G0o=i(oQe),nme=n(oQe,"SPAN",{});var Cut=s(nme);O0o=r(Cut,"AutoModelForPreTraining"),Cut.forEach(t),oQe.forEach(t),JVe=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(SL.$$.fragment,ol),V0o=i(ol),Xi=n(ol,"P",{});var Ere=s(Xi);X0o=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UD=n(Ere,"A",{href:!0});var wut=s(UD);z0o=r(wut,"from_pretrained()"),wut.forEach(t),Q0o=r(Ere," class method or the "),JD=n(Ere,"A",{href:!0});var Aut=s(JD);W0o=r(Aut,"from_config()"),Aut.forEach(t),H0o=r(Ere,` class
method.`),Ere.forEach(t),U0o=i(ol),RL=n(ol,"P",{});var rQe=s(RL);J0o=r(rQe,"This class cannot be instantiated directly using "),sme=n(rQe,"CODE",{});var Lut=s(sme);Y0o=r(Lut,"__init__()"),Lut.forEach(t),K0o=r(rQe," (throws an error)."),rQe.forEach(t),Z0o=i(ol),it=n(ol,"DIV",{class:!0});var sw=s(it);T(PL.$$.fragment,sw),ewo=i(sw),lme=n(sw,"P",{});var yut=s(lme);owo=r(yut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yut.forEach(t),rwo=i(sw),zi=n(sw,"P",{});var Cre=s(zi);two=r(Cre,`Note:
Loading a model from its configuration file does `),ime=n(Cre,"STRONG",{});var xut=s(ime);awo=r(xut,"not"),xut.forEach(t),nwo=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=n(Cre,"A",{href:!0});var $ut=s(YD);swo=r($ut,"from_pretrained()"),$ut.forEach(t),lwo=r(Cre," to load the model weights."),Cre.forEach(t),iwo=i(sw),T(Wu.$$.fragment,sw),sw.forEach(t),dwo=i(ol),Ye=n(ol,"DIV",{class:!0});var la=s(Ye);T(BL.$$.fragment,la),cwo=i(la),dme=n(la,"P",{});var kut=s(dme);fwo=r(kut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kut.forEach(t),mwo=i(la),Ia=n(la,"P",{});var lw=s(Ia);gwo=r(lw,"The model class to instantiate is selected based on the "),cme=n(lw,"CODE",{});var Sut=s(cme);hwo=r(Sut,"model_type"),Sut.forEach(t),pwo=r(lw,` property of the config object (either
passed as an argument or loaded from `),fme=n(lw,"CODE",{});var Rut=s(fme);_wo=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),uwo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(lw,"CODE",{});var Put=s(mme);bwo=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),vwo=r(lw,":"),lw.forEach(t),Fwo=i(la),G=n(la,"UL",{});var O=s(G);Hu=n(O,"LI",{});var R$e=s(Hu);gme=n(R$e,"STRONG",{});var But=s(gme);Two=r(But,"albert"),But.forEach(t),Mwo=r(R$e," \u2014 "),KD=n(R$e,"A",{href:!0});var Iut=s(KD);Ewo=r(Iut,"AlbertForPreTraining"),Iut.forEach(t),Cwo=r(R$e," (ALBERT model)"),R$e.forEach(t),wwo=i(O),Uu=n(O,"LI",{});var P$e=s(Uu);hme=n(P$e,"STRONG",{});var Nut=s(hme);Awo=r(Nut,"bart"),Nut.forEach(t),Lwo=r(P$e," \u2014 "),ZD=n(P$e,"A",{href:!0});var qut=s(ZD);ywo=r(qut,"BartForConditionalGeneration"),qut.forEach(t),xwo=r(P$e," (BART model)"),P$e.forEach(t),$wo=i(O),Ju=n(O,"LI",{});var B$e=s(Ju);pme=n(B$e,"STRONG",{});var jut=s(pme);kwo=r(jut,"bert"),jut.forEach(t),Swo=r(B$e," \u2014 "),eG=n(B$e,"A",{href:!0});var Dut=s(eG);Rwo=r(Dut,"BertForPreTraining"),Dut.forEach(t),Pwo=r(B$e," (BERT model)"),B$e.forEach(t),Bwo=i(O),Yu=n(O,"LI",{});var I$e=s(Yu);_me=n(I$e,"STRONG",{});var Gut=s(_me);Iwo=r(Gut,"big_bird"),Gut.forEach(t),Nwo=r(I$e," \u2014 "),oG=n(I$e,"A",{href:!0});var Out=s(oG);qwo=r(Out,"BigBirdForPreTraining"),Out.forEach(t),jwo=r(I$e," (BigBird model)"),I$e.forEach(t),Dwo=i(O),Ku=n(O,"LI",{});var N$e=s(Ku);ume=n(N$e,"STRONG",{});var Vut=s(ume);Gwo=r(Vut,"bloom"),Vut.forEach(t),Owo=r(N$e," \u2014 "),rG=n(N$e,"A",{href:!0});var Xut=s(rG);Vwo=r(Xut,"BloomForCausalLM"),Xut.forEach(t),Xwo=r(N$e," (BLOOM model)"),N$e.forEach(t),zwo=i(O),Zu=n(O,"LI",{});var q$e=s(Zu);bme=n(q$e,"STRONG",{});var zut=s(bme);Qwo=r(zut,"camembert"),zut.forEach(t),Wwo=r(q$e," \u2014 "),tG=n(q$e,"A",{href:!0});var Qut=s(tG);Hwo=r(Qut,"CamembertForMaskedLM"),Qut.forEach(t),Uwo=r(q$e," (CamemBERT model)"),q$e.forEach(t),Jwo=i(O),e1=n(O,"LI",{});var j$e=s(e1);vme=n(j$e,"STRONG",{});var Wut=s(vme);Ywo=r(Wut,"ctrl"),Wut.forEach(t),Kwo=r(j$e," \u2014 "),aG=n(j$e,"A",{href:!0});var Hut=s(aG);Zwo=r(Hut,"CTRLLMHeadModel"),Hut.forEach(t),eAo=r(j$e," (CTRL model)"),j$e.forEach(t),oAo=i(O),o1=n(O,"LI",{});var D$e=s(o1);Fme=n(D$e,"STRONG",{});var Uut=s(Fme);rAo=r(Uut,"data2vec-text"),Uut.forEach(t),tAo=r(D$e," \u2014 "),nG=n(D$e,"A",{href:!0});var Jut=s(nG);aAo=r(Jut,"Data2VecTextForMaskedLM"),Jut.forEach(t),nAo=r(D$e," (Data2VecText model)"),D$e.forEach(t),sAo=i(O),r1=n(O,"LI",{});var G$e=s(r1);Tme=n(G$e,"STRONG",{});var Yut=s(Tme);lAo=r(Yut,"deberta"),Yut.forEach(t),iAo=r(G$e," \u2014 "),sG=n(G$e,"A",{href:!0});var Kut=s(sG);dAo=r(Kut,"DebertaForMaskedLM"),Kut.forEach(t),cAo=r(G$e," (DeBERTa model)"),G$e.forEach(t),fAo=i(O),t1=n(O,"LI",{});var O$e=s(t1);Mme=n(O$e,"STRONG",{});var Zut=s(Mme);mAo=r(Zut,"deberta-v2"),Zut.forEach(t),gAo=r(O$e," \u2014 "),lG=n(O$e,"A",{href:!0});var e1t=s(lG);hAo=r(e1t,"DebertaV2ForMaskedLM"),e1t.forEach(t),pAo=r(O$e," (DeBERTa-v2 model)"),O$e.forEach(t),_Ao=i(O),a1=n(O,"LI",{});var V$e=s(a1);Eme=n(V$e,"STRONG",{});var o1t=s(Eme);uAo=r(o1t,"distilbert"),o1t.forEach(t),bAo=r(V$e," \u2014 "),iG=n(V$e,"A",{href:!0});var r1t=s(iG);vAo=r(r1t,"DistilBertForMaskedLM"),r1t.forEach(t),FAo=r(V$e," (DistilBERT model)"),V$e.forEach(t),TAo=i(O),n1=n(O,"LI",{});var X$e=s(n1);Cme=n(X$e,"STRONG",{});var t1t=s(Cme);MAo=r(t1t,"electra"),t1t.forEach(t),EAo=r(X$e," \u2014 "),dG=n(X$e,"A",{href:!0});var a1t=s(dG);CAo=r(a1t,"ElectraForPreTraining"),a1t.forEach(t),wAo=r(X$e," (ELECTRA model)"),X$e.forEach(t),AAo=i(O),s1=n(O,"LI",{});var z$e=s(s1);wme=n(z$e,"STRONG",{});var n1t=s(wme);LAo=r(n1t,"flaubert"),n1t.forEach(t),yAo=r(z$e," \u2014 "),cG=n(z$e,"A",{href:!0});var s1t=s(cG);xAo=r(s1t,"FlaubertWithLMHeadModel"),s1t.forEach(t),$Ao=r(z$e," (FlauBERT model)"),z$e.forEach(t),kAo=i(O),l1=n(O,"LI",{});var Q$e=s(l1);Ame=n(Q$e,"STRONG",{});var l1t=s(Ame);SAo=r(l1t,"flava"),l1t.forEach(t),RAo=r(Q$e," \u2014 "),fG=n(Q$e,"A",{href:!0});var i1t=s(fG);PAo=r(i1t,"FlavaForPreTraining"),i1t.forEach(t),BAo=r(Q$e," (FLAVA model)"),Q$e.forEach(t),IAo=i(O),i1=n(O,"LI",{});var W$e=s(i1);Lme=n(W$e,"STRONG",{});var d1t=s(Lme);NAo=r(d1t,"fnet"),d1t.forEach(t),qAo=r(W$e," \u2014 "),mG=n(W$e,"A",{href:!0});var c1t=s(mG);jAo=r(c1t,"FNetForPreTraining"),c1t.forEach(t),DAo=r(W$e," (FNet model)"),W$e.forEach(t),GAo=i(O),d1=n(O,"LI",{});var H$e=s(d1);yme=n(H$e,"STRONG",{});var f1t=s(yme);OAo=r(f1t,"fsmt"),f1t.forEach(t),VAo=r(H$e," \u2014 "),gG=n(H$e,"A",{href:!0});var m1t=s(gG);XAo=r(m1t,"FSMTForConditionalGeneration"),m1t.forEach(t),zAo=r(H$e," (FairSeq Machine-Translation model)"),H$e.forEach(t),QAo=i(O),c1=n(O,"LI",{});var U$e=s(c1);xme=n(U$e,"STRONG",{});var g1t=s(xme);WAo=r(g1t,"funnel"),g1t.forEach(t),HAo=r(U$e," \u2014 "),hG=n(U$e,"A",{href:!0});var h1t=s(hG);UAo=r(h1t,"FunnelForPreTraining"),h1t.forEach(t),JAo=r(U$e," (Funnel Transformer model)"),U$e.forEach(t),YAo=i(O),f1=n(O,"LI",{});var J$e=s(f1);$me=n(J$e,"STRONG",{});var p1t=s($me);KAo=r(p1t,"gpt2"),p1t.forEach(t),ZAo=r(J$e," \u2014 "),pG=n(J$e,"A",{href:!0});var _1t=s(pG);eLo=r(_1t,"GPT2LMHeadModel"),_1t.forEach(t),oLo=r(J$e," (OpenAI GPT-2 model)"),J$e.forEach(t),rLo=i(O),m1=n(O,"LI",{});var Y$e=s(m1);kme=n(Y$e,"STRONG",{});var u1t=s(kme);tLo=r(u1t,"ibert"),u1t.forEach(t),aLo=r(Y$e," \u2014 "),_G=n(Y$e,"A",{href:!0});var b1t=s(_G);nLo=r(b1t,"IBertForMaskedLM"),b1t.forEach(t),sLo=r(Y$e," (I-BERT model)"),Y$e.forEach(t),lLo=i(O),g1=n(O,"LI",{});var K$e=s(g1);Sme=n(K$e,"STRONG",{});var v1t=s(Sme);iLo=r(v1t,"layoutlm"),v1t.forEach(t),dLo=r(K$e," \u2014 "),uG=n(K$e,"A",{href:!0});var F1t=s(uG);cLo=r(F1t,"LayoutLMForMaskedLM"),F1t.forEach(t),fLo=r(K$e," (LayoutLM model)"),K$e.forEach(t),mLo=i(O),h1=n(O,"LI",{});var Z$e=s(h1);Rme=n(Z$e,"STRONG",{});var T1t=s(Rme);gLo=r(T1t,"longformer"),T1t.forEach(t),hLo=r(Z$e," \u2014 "),bG=n(Z$e,"A",{href:!0});var M1t=s(bG);pLo=r(M1t,"LongformerForMaskedLM"),M1t.forEach(t),_Lo=r(Z$e," (Longformer model)"),Z$e.forEach(t),uLo=i(O),p1=n(O,"LI",{});var eke=s(p1);Pme=n(eke,"STRONG",{});var E1t=s(Pme);bLo=r(E1t,"lxmert"),E1t.forEach(t),vLo=r(eke," \u2014 "),vG=n(eke,"A",{href:!0});var C1t=s(vG);FLo=r(C1t,"LxmertForPreTraining"),C1t.forEach(t),TLo=r(eke," (LXMERT model)"),eke.forEach(t),MLo=i(O),_1=n(O,"LI",{});var oke=s(_1);Bme=n(oke,"STRONG",{});var w1t=s(Bme);ELo=r(w1t,"megatron-bert"),w1t.forEach(t),CLo=r(oke," \u2014 "),FG=n(oke,"A",{href:!0});var A1t=s(FG);wLo=r(A1t,"MegatronBertForPreTraining"),A1t.forEach(t),ALo=r(oke," (Megatron-BERT model)"),oke.forEach(t),LLo=i(O),u1=n(O,"LI",{});var rke=s(u1);Ime=n(rke,"STRONG",{});var L1t=s(Ime);yLo=r(L1t,"mobilebert"),L1t.forEach(t),xLo=r(rke," \u2014 "),TG=n(rke,"A",{href:!0});var y1t=s(TG);$Lo=r(y1t,"MobileBertForPreTraining"),y1t.forEach(t),kLo=r(rke," (MobileBERT model)"),rke.forEach(t),SLo=i(O),b1=n(O,"LI",{});var tke=s(b1);Nme=n(tke,"STRONG",{});var x1t=s(Nme);RLo=r(x1t,"mpnet"),x1t.forEach(t),PLo=r(tke," \u2014 "),MG=n(tke,"A",{href:!0});var $1t=s(MG);BLo=r($1t,"MPNetForMaskedLM"),$1t.forEach(t),ILo=r(tke," (MPNet model)"),tke.forEach(t),NLo=i(O),v1=n(O,"LI",{});var ake=s(v1);qme=n(ake,"STRONG",{});var k1t=s(qme);qLo=r(k1t,"mvp"),k1t.forEach(t),jLo=r(ake," \u2014 "),EG=n(ake,"A",{href:!0});var S1t=s(EG);DLo=r(S1t,"MvpForConditionalGeneration"),S1t.forEach(t),GLo=r(ake," (MVP model)"),ake.forEach(t),OLo=i(O),F1=n(O,"LI",{});var nke=s(F1);jme=n(nke,"STRONG",{});var R1t=s(jme);VLo=r(R1t,"nezha"),R1t.forEach(t),XLo=r(nke," \u2014 "),CG=n(nke,"A",{href:!0});var P1t=s(CG);zLo=r(P1t,"NezhaForPreTraining"),P1t.forEach(t),QLo=r(nke," (Nezha model)"),nke.forEach(t),WLo=i(O),T1=n(O,"LI",{});var ske=s(T1);Dme=n(ske,"STRONG",{});var B1t=s(Dme);HLo=r(B1t,"openai-gpt"),B1t.forEach(t),ULo=r(ske," \u2014 "),wG=n(ske,"A",{href:!0});var I1t=s(wG);JLo=r(I1t,"OpenAIGPTLMHeadModel"),I1t.forEach(t),YLo=r(ske," (OpenAI GPT model)"),ske.forEach(t),KLo=i(O),M1=n(O,"LI",{});var lke=s(M1);Gme=n(lke,"STRONG",{});var N1t=s(Gme);ZLo=r(N1t,"retribert"),N1t.forEach(t),eyo=r(lke," \u2014 "),AG=n(lke,"A",{href:!0});var q1t=s(AG);oyo=r(q1t,"RetriBertModel"),q1t.forEach(t),ryo=r(lke," (RetriBERT model)"),lke.forEach(t),tyo=i(O),E1=n(O,"LI",{});var ike=s(E1);Ome=n(ike,"STRONG",{});var j1t=s(Ome);ayo=r(j1t,"roberta"),j1t.forEach(t),nyo=r(ike," \u2014 "),LG=n(ike,"A",{href:!0});var D1t=s(LG);syo=r(D1t,"RobertaForMaskedLM"),D1t.forEach(t),lyo=r(ike," (RoBERTa model)"),ike.forEach(t),iyo=i(O),C1=n(O,"LI",{});var dke=s(C1);Vme=n(dke,"STRONG",{});var G1t=s(Vme);dyo=r(G1t,"splinter"),G1t.forEach(t),cyo=r(dke," \u2014 "),yG=n(dke,"A",{href:!0});var O1t=s(yG);fyo=r(O1t,"SplinterForPreTraining"),O1t.forEach(t),myo=r(dke," (Splinter model)"),dke.forEach(t),gyo=i(O),w1=n(O,"LI",{});var cke=s(w1);Xme=n(cke,"STRONG",{});var V1t=s(Xme);hyo=r(V1t,"squeezebert"),V1t.forEach(t),pyo=r(cke," \u2014 "),xG=n(cke,"A",{href:!0});var X1t=s(xG);_yo=r(X1t,"SqueezeBertForMaskedLM"),X1t.forEach(t),uyo=r(cke," (SqueezeBERT model)"),cke.forEach(t),byo=i(O),A1=n(O,"LI",{});var fke=s(A1);zme=n(fke,"STRONG",{});var z1t=s(zme);vyo=r(z1t,"t5"),z1t.forEach(t),Fyo=r(fke," \u2014 "),$G=n(fke,"A",{href:!0});var Q1t=s($G);Tyo=r(Q1t,"T5ForConditionalGeneration"),Q1t.forEach(t),Myo=r(fke," (T5 model)"),fke.forEach(t),Eyo=i(O),L1=n(O,"LI",{});var mke=s(L1);Qme=n(mke,"STRONG",{});var W1t=s(Qme);Cyo=r(W1t,"tapas"),W1t.forEach(t),wyo=r(mke," \u2014 "),kG=n(mke,"A",{href:!0});var H1t=s(kG);Ayo=r(H1t,"TapasForMaskedLM"),H1t.forEach(t),Lyo=r(mke," (TAPAS model)"),mke.forEach(t),yyo=i(O),y1=n(O,"LI",{});var gke=s(y1);Wme=n(gke,"STRONG",{});var U1t=s(Wme);xyo=r(U1t,"transfo-xl"),U1t.forEach(t),$yo=r(gke," \u2014 "),SG=n(gke,"A",{href:!0});var J1t=s(SG);kyo=r(J1t,"TransfoXLLMHeadModel"),J1t.forEach(t),Syo=r(gke," (Transformer-XL model)"),gke.forEach(t),Ryo=i(O),x1=n(O,"LI",{});var hke=s(x1);Hme=n(hke,"STRONG",{});var Y1t=s(Hme);Pyo=r(Y1t,"unispeech"),Y1t.forEach(t),Byo=r(hke," \u2014 "),RG=n(hke,"A",{href:!0});var K1t=s(RG);Iyo=r(K1t,"UniSpeechForPreTraining"),K1t.forEach(t),Nyo=r(hke," (UniSpeech model)"),hke.forEach(t),qyo=i(O),$1=n(O,"LI",{});var pke=s($1);Ume=n(pke,"STRONG",{});var Z1t=s(Ume);jyo=r(Z1t,"unispeech-sat"),Z1t.forEach(t),Dyo=r(pke," \u2014 "),PG=n(pke,"A",{href:!0});var e2t=s(PG);Gyo=r(e2t,"UniSpeechSatForPreTraining"),e2t.forEach(t),Oyo=r(pke," (UniSpeechSat model)"),pke.forEach(t),Vyo=i(O),k1=n(O,"LI",{});var _ke=s(k1);Jme=n(_ke,"STRONG",{});var o2t=s(Jme);Xyo=r(o2t,"visual_bert"),o2t.forEach(t),zyo=r(_ke," \u2014 "),BG=n(_ke,"A",{href:!0});var r2t=s(BG);Qyo=r(r2t,"VisualBertForPreTraining"),r2t.forEach(t),Wyo=r(_ke," (VisualBERT model)"),_ke.forEach(t),Hyo=i(O),S1=n(O,"LI",{});var uke=s(S1);Yme=n(uke,"STRONG",{});var t2t=s(Yme);Uyo=r(t2t,"vit_mae"),t2t.forEach(t),Jyo=r(uke," \u2014 "),IG=n(uke,"A",{href:!0});var a2t=s(IG);Yyo=r(a2t,"ViTMAEForPreTraining"),a2t.forEach(t),Kyo=r(uke," (ViTMAE model)"),uke.forEach(t),Zyo=i(O),R1=n(O,"LI",{});var bke=s(R1);Kme=n(bke,"STRONG",{});var n2t=s(Kme);e8o=r(n2t,"wav2vec2"),n2t.forEach(t),o8o=r(bke," \u2014 "),NG=n(bke,"A",{href:!0});var s2t=s(NG);r8o=r(s2t,"Wav2Vec2ForPreTraining"),s2t.forEach(t),t8o=r(bke," (Wav2Vec2 model)"),bke.forEach(t),a8o=i(O),P1=n(O,"LI",{});var vke=s(P1);Zme=n(vke,"STRONG",{});var l2t=s(Zme);n8o=r(l2t,"wav2vec2-conformer"),l2t.forEach(t),s8o=r(vke," \u2014 "),qG=n(vke,"A",{href:!0});var i2t=s(qG);l8o=r(i2t,"Wav2Vec2ConformerForPreTraining"),i2t.forEach(t),i8o=r(vke," (Wav2Vec2-Conformer model)"),vke.forEach(t),d8o=i(O),B1=n(O,"LI",{});var Fke=s(B1);ege=n(Fke,"STRONG",{});var d2t=s(ege);c8o=r(d2t,"xlm"),d2t.forEach(t),f8o=r(Fke," \u2014 "),jG=n(Fke,"A",{href:!0});var c2t=s(jG);m8o=r(c2t,"XLMWithLMHeadModel"),c2t.forEach(t),g8o=r(Fke," (XLM model)"),Fke.forEach(t),h8o=i(O),I1=n(O,"LI",{});var Tke=s(I1);oge=n(Tke,"STRONG",{});var f2t=s(oge);p8o=r(f2t,"xlm-roberta"),f2t.forEach(t),_8o=r(Tke," \u2014 "),DG=n(Tke,"A",{href:!0});var m2t=s(DG);u8o=r(m2t,"XLMRobertaForMaskedLM"),m2t.forEach(t),b8o=r(Tke," (XLM-RoBERTa model)"),Tke.forEach(t),v8o=i(O),N1=n(O,"LI",{});var Mke=s(N1);rge=n(Mke,"STRONG",{});var g2t=s(rge);F8o=r(g2t,"xlm-roberta-xl"),g2t.forEach(t),T8o=r(Mke," \u2014 "),GG=n(Mke,"A",{href:!0});var h2t=s(GG);M8o=r(h2t,"XLMRobertaXLForMaskedLM"),h2t.forEach(t),E8o=r(Mke," (XLM-RoBERTa-XL model)"),Mke.forEach(t),C8o=i(O),q1=n(O,"LI",{});var Eke=s(q1);tge=n(Eke,"STRONG",{});var p2t=s(tge);w8o=r(p2t,"xlnet"),p2t.forEach(t),A8o=r(Eke," \u2014 "),OG=n(Eke,"A",{href:!0});var _2t=s(OG);L8o=r(_2t,"XLNetLMHeadModel"),_2t.forEach(t),y8o=r(Eke," (XLNet model)"),Eke.forEach(t),O.forEach(t),x8o=i(la),j1=n(la,"P",{});var Cke=s(j1);$8o=r(Cke,"The model is set in evaluation mode by default using "),age=n(Cke,"CODE",{});var u2t=s(age);k8o=r(u2t,"model.eval()"),u2t.forEach(t),S8o=r(Cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(Cke,"CODE",{});var b2t=s(nge);R8o=r(b2t,"model.train()"),b2t.forEach(t),Cke.forEach(t),P8o=i(la),T(D1.$$.fragment,la),la.forEach(t),ol.forEach(t),YVe=i(f),Qi=n(f,"H2",{class:!0});var tQe=s(Qi);G1=n(tQe,"A",{id:!0,class:!0,href:!0});var v2t=s(G1);sge=n(v2t,"SPAN",{});var F2t=s(sge);T(IL.$$.fragment,F2t),F2t.forEach(t),v2t.forEach(t),B8o=i(tQe),lge=n(tQe,"SPAN",{});var T2t=s(lge);I8o=r(T2t,"AutoModelForCausalLM"),T2t.forEach(t),tQe.forEach(t),KVe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(NL.$$.fragment,rl),N8o=i(rl),Wi=n(rl,"P",{});var wre=s(Wi);q8o=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VG=n(wre,"A",{href:!0});var M2t=s(VG);j8o=r(M2t,"from_pretrained()"),M2t.forEach(t),D8o=r(wre," class method or the "),XG=n(wre,"A",{href:!0});var E2t=s(XG);G8o=r(E2t,"from_config()"),E2t.forEach(t),O8o=r(wre,` class
method.`),wre.forEach(t),V8o=i(rl),qL=n(rl,"P",{});var aQe=s(qL);X8o=r(aQe,"This class cannot be instantiated directly using "),ige=n(aQe,"CODE",{});var C2t=s(ige);z8o=r(C2t,"__init__()"),C2t.forEach(t),Q8o=r(aQe," (throws an error)."),aQe.forEach(t),W8o=i(rl),dt=n(rl,"DIV",{class:!0});var iw=s(dt);T(jL.$$.fragment,iw),H8o=i(iw),dge=n(iw,"P",{});var w2t=s(dge);U8o=r(w2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w2t.forEach(t),J8o=i(iw),Hi=n(iw,"P",{});var Are=s(Hi);Y8o=r(Are,`Note:
Loading a model from its configuration file does `),cge=n(Are,"STRONG",{});var A2t=s(cge);K8o=r(A2t,"not"),A2t.forEach(t),Z8o=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(Are,"A",{href:!0});var L2t=s(zG);exo=r(L2t,"from_pretrained()"),L2t.forEach(t),oxo=r(Are," to load the model weights."),Are.forEach(t),rxo=i(iw),T(O1.$$.fragment,iw),iw.forEach(t),txo=i(rl),Ke=n(rl,"DIV",{class:!0});var ia=s(Ke);T(DL.$$.fragment,ia),axo=i(ia),fge=n(ia,"P",{});var y2t=s(fge);nxo=r(y2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y2t.forEach(t),sxo=i(ia),Na=n(ia,"P",{});var dw=s(Na);lxo=r(dw,"The model class to instantiate is selected based on the "),mge=n(dw,"CODE",{});var x2t=s(mge);ixo=r(x2t,"model_type"),x2t.forEach(t),dxo=r(dw,` property of the config object (either
passed as an argument or loaded from `),gge=n(dw,"CODE",{});var $2t=s(gge);cxo=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),fxo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(dw,"CODE",{});var k2t=s(hge);mxo=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),gxo=r(dw,":"),dw.forEach(t),hxo=i(ia),z=n(ia,"UL",{});var Q=s(z);V1=n(Q,"LI",{});var wke=s(V1);pge=n(wke,"STRONG",{});var S2t=s(pge);pxo=r(S2t,"bart"),S2t.forEach(t),_xo=r(wke," \u2014 "),QG=n(wke,"A",{href:!0});var R2t=s(QG);uxo=r(R2t,"BartForCausalLM"),R2t.forEach(t),bxo=r(wke," (BART model)"),wke.forEach(t),vxo=i(Q),X1=n(Q,"LI",{});var Ake=s(X1);_ge=n(Ake,"STRONG",{});var P2t=s(_ge);Fxo=r(P2t,"bert"),P2t.forEach(t),Txo=r(Ake," \u2014 "),WG=n(Ake,"A",{href:!0});var B2t=s(WG);Mxo=r(B2t,"BertLMHeadModel"),B2t.forEach(t),Exo=r(Ake," (BERT model)"),Ake.forEach(t),Cxo=i(Q),z1=n(Q,"LI",{});var Lke=s(z1);uge=n(Lke,"STRONG",{});var I2t=s(uge);wxo=r(I2t,"bert-generation"),I2t.forEach(t),Axo=r(Lke," \u2014 "),HG=n(Lke,"A",{href:!0});var N2t=s(HG);Lxo=r(N2t,"BertGenerationDecoder"),N2t.forEach(t),yxo=r(Lke," (Bert Generation model)"),Lke.forEach(t),xxo=i(Q),Q1=n(Q,"LI",{});var yke=s(Q1);bge=n(yke,"STRONG",{});var q2t=s(bge);$xo=r(q2t,"big_bird"),q2t.forEach(t),kxo=r(yke," \u2014 "),UG=n(yke,"A",{href:!0});var j2t=s(UG);Sxo=r(j2t,"BigBirdForCausalLM"),j2t.forEach(t),Rxo=r(yke," (BigBird model)"),yke.forEach(t),Pxo=i(Q),W1=n(Q,"LI",{});var xke=s(W1);vge=n(xke,"STRONG",{});var D2t=s(vge);Bxo=r(D2t,"bigbird_pegasus"),D2t.forEach(t),Ixo=r(xke," \u2014 "),JG=n(xke,"A",{href:!0});var G2t=s(JG);Nxo=r(G2t,"BigBirdPegasusForCausalLM"),G2t.forEach(t),qxo=r(xke," (BigBird-Pegasus model)"),xke.forEach(t),jxo=i(Q),H1=n(Q,"LI",{});var $ke=s(H1);Fge=n($ke,"STRONG",{});var O2t=s(Fge);Dxo=r(O2t,"blenderbot"),O2t.forEach(t),Gxo=r($ke," \u2014 "),YG=n($ke,"A",{href:!0});var V2t=s(YG);Oxo=r(V2t,"BlenderbotForCausalLM"),V2t.forEach(t),Vxo=r($ke," (Blenderbot model)"),$ke.forEach(t),Xxo=i(Q),U1=n(Q,"LI",{});var kke=s(U1);Tge=n(kke,"STRONG",{});var X2t=s(Tge);zxo=r(X2t,"blenderbot-small"),X2t.forEach(t),Qxo=r(kke," \u2014 "),KG=n(kke,"A",{href:!0});var z2t=s(KG);Wxo=r(z2t,"BlenderbotSmallForCausalLM"),z2t.forEach(t),Hxo=r(kke," (BlenderbotSmall model)"),kke.forEach(t),Uxo=i(Q),J1=n(Q,"LI",{});var Ske=s(J1);Mge=n(Ske,"STRONG",{});var Q2t=s(Mge);Jxo=r(Q2t,"bloom"),Q2t.forEach(t),Yxo=r(Ske," \u2014 "),ZG=n(Ske,"A",{href:!0});var W2t=s(ZG);Kxo=r(W2t,"BloomForCausalLM"),W2t.forEach(t),Zxo=r(Ske," (BLOOM model)"),Ske.forEach(t),e$o=i(Q),Y1=n(Q,"LI",{});var Rke=s(Y1);Ege=n(Rke,"STRONG",{});var H2t=s(Ege);o$o=r(H2t,"camembert"),H2t.forEach(t),r$o=r(Rke," \u2014 "),eO=n(Rke,"A",{href:!0});var U2t=s(eO);t$o=r(U2t,"CamembertForCausalLM"),U2t.forEach(t),a$o=r(Rke," (CamemBERT model)"),Rke.forEach(t),n$o=i(Q),K1=n(Q,"LI",{});var Pke=s(K1);Cge=n(Pke,"STRONG",{});var J2t=s(Cge);s$o=r(J2t,"codegen"),J2t.forEach(t),l$o=r(Pke," \u2014 "),oO=n(Pke,"A",{href:!0});var Y2t=s(oO);i$o=r(Y2t,"CodeGenForCausalLM"),Y2t.forEach(t),d$o=r(Pke," (CodeGen model)"),Pke.forEach(t),c$o=i(Q),Z1=n(Q,"LI",{});var Bke=s(Z1);wge=n(Bke,"STRONG",{});var K2t=s(wge);f$o=r(K2t,"ctrl"),K2t.forEach(t),m$o=r(Bke," \u2014 "),rO=n(Bke,"A",{href:!0});var Z2t=s(rO);g$o=r(Z2t,"CTRLLMHeadModel"),Z2t.forEach(t),h$o=r(Bke," (CTRL model)"),Bke.forEach(t),p$o=i(Q),e2=n(Q,"LI",{});var Ike=s(e2);Age=n(Ike,"STRONG",{});var ebt=s(Age);_$o=r(ebt,"data2vec-text"),ebt.forEach(t),u$o=r(Ike," \u2014 "),tO=n(Ike,"A",{href:!0});var obt=s(tO);b$o=r(obt,"Data2VecTextForCausalLM"),obt.forEach(t),v$o=r(Ike," (Data2VecText model)"),Ike.forEach(t),F$o=i(Q),o2=n(Q,"LI",{});var Nke=s(o2);Lge=n(Nke,"STRONG",{});var rbt=s(Lge);T$o=r(rbt,"electra"),rbt.forEach(t),M$o=r(Nke," \u2014 "),aO=n(Nke,"A",{href:!0});var tbt=s(aO);E$o=r(tbt,"ElectraForCausalLM"),tbt.forEach(t),C$o=r(Nke," (ELECTRA model)"),Nke.forEach(t),w$o=i(Q),r2=n(Q,"LI",{});var qke=s(r2);yge=n(qke,"STRONG",{});var abt=s(yge);A$o=r(abt,"gpt2"),abt.forEach(t),L$o=r(qke," \u2014 "),nO=n(qke,"A",{href:!0});var nbt=s(nO);y$o=r(nbt,"GPT2LMHeadModel"),nbt.forEach(t),x$o=r(qke," (OpenAI GPT-2 model)"),qke.forEach(t),$$o=i(Q),t2=n(Q,"LI",{});var jke=s(t2);xge=n(jke,"STRONG",{});var sbt=s(xge);k$o=r(sbt,"gpt_neo"),sbt.forEach(t),S$o=r(jke," \u2014 "),sO=n(jke,"A",{href:!0});var lbt=s(sO);R$o=r(lbt,"GPTNeoForCausalLM"),lbt.forEach(t),P$o=r(jke," (GPT Neo model)"),jke.forEach(t),B$o=i(Q),a2=n(Q,"LI",{});var Dke=s(a2);$ge=n(Dke,"STRONG",{});var ibt=s($ge);I$o=r(ibt,"gpt_neox"),ibt.forEach(t),N$o=r(Dke," \u2014 "),lO=n(Dke,"A",{href:!0});var dbt=s(lO);q$o=r(dbt,"GPTNeoXForCausalLM"),dbt.forEach(t),j$o=r(Dke," (GPT NeoX model)"),Dke.forEach(t),D$o=i(Q),n2=n(Q,"LI",{});var Gke=s(n2);kge=n(Gke,"STRONG",{});var cbt=s(kge);G$o=r(cbt,"gptj"),cbt.forEach(t),O$o=r(Gke," \u2014 "),iO=n(Gke,"A",{href:!0});var fbt=s(iO);V$o=r(fbt,"GPTJForCausalLM"),fbt.forEach(t),X$o=r(Gke," (GPT-J model)"),Gke.forEach(t),z$o=i(Q),s2=n(Q,"LI",{});var Oke=s(s2);Sge=n(Oke,"STRONG",{});var mbt=s(Sge);Q$o=r(mbt,"marian"),mbt.forEach(t),W$o=r(Oke," \u2014 "),dO=n(Oke,"A",{href:!0});var gbt=s(dO);H$o=r(gbt,"MarianForCausalLM"),gbt.forEach(t),U$o=r(Oke," (Marian model)"),Oke.forEach(t),J$o=i(Q),l2=n(Q,"LI",{});var Vke=s(l2);Rge=n(Vke,"STRONG",{});var hbt=s(Rge);Y$o=r(hbt,"mbart"),hbt.forEach(t),K$o=r(Vke," \u2014 "),cO=n(Vke,"A",{href:!0});var pbt=s(cO);Z$o=r(pbt,"MBartForCausalLM"),pbt.forEach(t),eko=r(Vke," (mBART model)"),Vke.forEach(t),oko=i(Q),i2=n(Q,"LI",{});var Xke=s(i2);Pge=n(Xke,"STRONG",{});var _bt=s(Pge);rko=r(_bt,"megatron-bert"),_bt.forEach(t),tko=r(Xke," \u2014 "),fO=n(Xke,"A",{href:!0});var ubt=s(fO);ako=r(ubt,"MegatronBertForCausalLM"),ubt.forEach(t),nko=r(Xke," (Megatron-BERT model)"),Xke.forEach(t),sko=i(Q),d2=n(Q,"LI",{});var zke=s(d2);Bge=n(zke,"STRONG",{});var bbt=s(Bge);lko=r(bbt,"mvp"),bbt.forEach(t),iko=r(zke," \u2014 "),mO=n(zke,"A",{href:!0});var vbt=s(mO);dko=r(vbt,"MvpForCausalLM"),vbt.forEach(t),cko=r(zke," (MVP model)"),zke.forEach(t),fko=i(Q),c2=n(Q,"LI",{});var Qke=s(c2);Ige=n(Qke,"STRONG",{});var Fbt=s(Ige);mko=r(Fbt,"openai-gpt"),Fbt.forEach(t),gko=r(Qke," \u2014 "),gO=n(Qke,"A",{href:!0});var Tbt=s(gO);hko=r(Tbt,"OpenAIGPTLMHeadModel"),Tbt.forEach(t),pko=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),_ko=i(Q),f2=n(Q,"LI",{});var Wke=s(f2);Nge=n(Wke,"STRONG",{});var Mbt=s(Nge);uko=r(Mbt,"opt"),Mbt.forEach(t),bko=r(Wke," \u2014 "),hO=n(Wke,"A",{href:!0});var Ebt=s(hO);vko=r(Ebt,"OPTForCausalLM"),Ebt.forEach(t),Fko=r(Wke," (OPT model)"),Wke.forEach(t),Tko=i(Q),m2=n(Q,"LI",{});var Hke=s(m2);qge=n(Hke,"STRONG",{});var Cbt=s(qge);Mko=r(Cbt,"pegasus"),Cbt.forEach(t),Eko=r(Hke," \u2014 "),pO=n(Hke,"A",{href:!0});var wbt=s(pO);Cko=r(wbt,"PegasusForCausalLM"),wbt.forEach(t),wko=r(Hke," (Pegasus model)"),Hke.forEach(t),Ako=i(Q),g2=n(Q,"LI",{});var Uke=s(g2);jge=n(Uke,"STRONG",{});var Abt=s(jge);Lko=r(Abt,"plbart"),Abt.forEach(t),yko=r(Uke," \u2014 "),_O=n(Uke,"A",{href:!0});var Lbt=s(_O);xko=r(Lbt,"PLBartForCausalLM"),Lbt.forEach(t),$ko=r(Uke," (PLBart model)"),Uke.forEach(t),kko=i(Q),h2=n(Q,"LI",{});var Jke=s(h2);Dge=n(Jke,"STRONG",{});var ybt=s(Dge);Sko=r(ybt,"prophetnet"),ybt.forEach(t),Rko=r(Jke," \u2014 "),uO=n(Jke,"A",{href:!0});var xbt=s(uO);Pko=r(xbt,"ProphetNetForCausalLM"),xbt.forEach(t),Bko=r(Jke," (ProphetNet model)"),Jke.forEach(t),Iko=i(Q),p2=n(Q,"LI",{});var Yke=s(p2);Gge=n(Yke,"STRONG",{});var $bt=s(Gge);Nko=r($bt,"qdqbert"),$bt.forEach(t),qko=r(Yke," \u2014 "),bO=n(Yke,"A",{href:!0});var kbt=s(bO);jko=r(kbt,"QDQBertLMHeadModel"),kbt.forEach(t),Dko=r(Yke," (QDQBert model)"),Yke.forEach(t),Gko=i(Q),_2=n(Q,"LI",{});var Kke=s(_2);Oge=n(Kke,"STRONG",{});var Sbt=s(Oge);Oko=r(Sbt,"reformer"),Sbt.forEach(t),Vko=r(Kke," \u2014 "),vO=n(Kke,"A",{href:!0});var Rbt=s(vO);Xko=r(Rbt,"ReformerModelWithLMHead"),Rbt.forEach(t),zko=r(Kke," (Reformer model)"),Kke.forEach(t),Qko=i(Q),u2=n(Q,"LI",{});var Zke=s(u2);Vge=n(Zke,"STRONG",{});var Pbt=s(Vge);Wko=r(Pbt,"rembert"),Pbt.forEach(t),Hko=r(Zke," \u2014 "),FO=n(Zke,"A",{href:!0});var Bbt=s(FO);Uko=r(Bbt,"RemBertForCausalLM"),Bbt.forEach(t),Jko=r(Zke," (RemBERT model)"),Zke.forEach(t),Yko=i(Q),b2=n(Q,"LI",{});var eSe=s(b2);Xge=n(eSe,"STRONG",{});var Ibt=s(Xge);Kko=r(Ibt,"roberta"),Ibt.forEach(t),Zko=r(eSe," \u2014 "),TO=n(eSe,"A",{href:!0});var Nbt=s(TO);eSo=r(Nbt,"RobertaForCausalLM"),Nbt.forEach(t),oSo=r(eSe," (RoBERTa model)"),eSe.forEach(t),rSo=i(Q),v2=n(Q,"LI",{});var oSe=s(v2);zge=n(oSe,"STRONG",{});var qbt=s(zge);tSo=r(qbt,"roformer"),qbt.forEach(t),aSo=r(oSe," \u2014 "),MO=n(oSe,"A",{href:!0});var jbt=s(MO);nSo=r(jbt,"RoFormerForCausalLM"),jbt.forEach(t),sSo=r(oSe," (RoFormer model)"),oSe.forEach(t),lSo=i(Q),F2=n(Q,"LI",{});var rSe=s(F2);Qge=n(rSe,"STRONG",{});var Dbt=s(Qge);iSo=r(Dbt,"speech_to_text_2"),Dbt.forEach(t),dSo=r(rSe," \u2014 "),EO=n(rSe,"A",{href:!0});var Gbt=s(EO);cSo=r(Gbt,"Speech2Text2ForCausalLM"),Gbt.forEach(t),fSo=r(rSe," (Speech2Text2 model)"),rSe.forEach(t),mSo=i(Q),T2=n(Q,"LI",{});var tSe=s(T2);Wge=n(tSe,"STRONG",{});var Obt=s(Wge);gSo=r(Obt,"transfo-xl"),Obt.forEach(t),hSo=r(tSe," \u2014 "),CO=n(tSe,"A",{href:!0});var Vbt=s(CO);pSo=r(Vbt,"TransfoXLLMHeadModel"),Vbt.forEach(t),_So=r(tSe," (Transformer-XL model)"),tSe.forEach(t),uSo=i(Q),M2=n(Q,"LI",{});var aSe=s(M2);Hge=n(aSe,"STRONG",{});var Xbt=s(Hge);bSo=r(Xbt,"trocr"),Xbt.forEach(t),vSo=r(aSe," \u2014 "),wO=n(aSe,"A",{href:!0});var zbt=s(wO);FSo=r(zbt,"TrOCRForCausalLM"),zbt.forEach(t),TSo=r(aSe," (TrOCR model)"),aSe.forEach(t),MSo=i(Q),E2=n(Q,"LI",{});var nSe=s(E2);Uge=n(nSe,"STRONG",{});var Qbt=s(Uge);ESo=r(Qbt,"xglm"),Qbt.forEach(t),CSo=r(nSe," \u2014 "),AO=n(nSe,"A",{href:!0});var Wbt=s(AO);wSo=r(Wbt,"XGLMForCausalLM"),Wbt.forEach(t),ASo=r(nSe," (XGLM model)"),nSe.forEach(t),LSo=i(Q),C2=n(Q,"LI",{});var sSe=s(C2);Jge=n(sSe,"STRONG",{});var Hbt=s(Jge);ySo=r(Hbt,"xlm"),Hbt.forEach(t),xSo=r(sSe," \u2014 "),LO=n(sSe,"A",{href:!0});var Ubt=s(LO);$So=r(Ubt,"XLMWithLMHeadModel"),Ubt.forEach(t),kSo=r(sSe," (XLM model)"),sSe.forEach(t),SSo=i(Q),w2=n(Q,"LI",{});var lSe=s(w2);Yge=n(lSe,"STRONG",{});var Jbt=s(Yge);RSo=r(Jbt,"xlm-prophetnet"),Jbt.forEach(t),PSo=r(lSe," \u2014 "),yO=n(lSe,"A",{href:!0});var Ybt=s(yO);BSo=r(Ybt,"XLMProphetNetForCausalLM"),Ybt.forEach(t),ISo=r(lSe," (XLM-ProphetNet model)"),lSe.forEach(t),NSo=i(Q),A2=n(Q,"LI",{});var iSe=s(A2);Kge=n(iSe,"STRONG",{});var Kbt=s(Kge);qSo=r(Kbt,"xlm-roberta"),Kbt.forEach(t),jSo=r(iSe," \u2014 "),xO=n(iSe,"A",{href:!0});var Zbt=s(xO);DSo=r(Zbt,"XLMRobertaForCausalLM"),Zbt.forEach(t),GSo=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),OSo=i(Q),L2=n(Q,"LI",{});var dSe=s(L2);Zge=n(dSe,"STRONG",{});var evt=s(Zge);VSo=r(evt,"xlm-roberta-xl"),evt.forEach(t),XSo=r(dSe," \u2014 "),$O=n(dSe,"A",{href:!0});var ovt=s($O);zSo=r(ovt,"XLMRobertaXLForCausalLM"),ovt.forEach(t),QSo=r(dSe," (XLM-RoBERTa-XL model)"),dSe.forEach(t),WSo=i(Q),y2=n(Q,"LI",{});var cSe=s(y2);ehe=n(cSe,"STRONG",{});var rvt=s(ehe);HSo=r(rvt,"xlnet"),rvt.forEach(t),USo=r(cSe," \u2014 "),kO=n(cSe,"A",{href:!0});var tvt=s(kO);JSo=r(tvt,"XLNetLMHeadModel"),tvt.forEach(t),YSo=r(cSe," (XLNet model)"),cSe.forEach(t),Q.forEach(t),KSo=i(ia),x2=n(ia,"P",{});var fSe=s(x2);ZSo=r(fSe,"The model is set in evaluation mode by default using "),ohe=n(fSe,"CODE",{});var avt=s(ohe);eRo=r(avt,"model.eval()"),avt.forEach(t),oRo=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=n(fSe,"CODE",{});var nvt=s(rhe);rRo=r(nvt,"model.train()"),nvt.forEach(t),fSe.forEach(t),tRo=i(ia),T($2.$$.fragment,ia),ia.forEach(t),rl.forEach(t),ZVe=i(f),Ui=n(f,"H2",{class:!0});var nQe=s(Ui);k2=n(nQe,"A",{id:!0,class:!0,href:!0});var svt=s(k2);the=n(svt,"SPAN",{});var lvt=s(the);T(GL.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),aRo=i(nQe),ahe=n(nQe,"SPAN",{});var ivt=s(ahe);nRo=r(ivt,"AutoModelForMaskedLM"),ivt.forEach(t),nQe.forEach(t),eXe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(OL.$$.fragment,tl),sRo=i(tl),Ji=n(tl,"P",{});var Lre=s(Ji);lRo=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SO=n(Lre,"A",{href:!0});var dvt=s(SO);iRo=r(dvt,"from_pretrained()"),dvt.forEach(t),dRo=r(Lre," class method or the "),RO=n(Lre,"A",{href:!0});var cvt=s(RO);cRo=r(cvt,"from_config()"),cvt.forEach(t),fRo=r(Lre,` class
method.`),Lre.forEach(t),mRo=i(tl),VL=n(tl,"P",{});var sQe=s(VL);gRo=r(sQe,"This class cannot be instantiated directly using "),nhe=n(sQe,"CODE",{});var fvt=s(nhe);hRo=r(fvt,"__init__()"),fvt.forEach(t),pRo=r(sQe," (throws an error)."),sQe.forEach(t),_Ro=i(tl),ct=n(tl,"DIV",{class:!0});var cw=s(ct);T(XL.$$.fragment,cw),uRo=i(cw),she=n(cw,"P",{});var mvt=s(she);bRo=r(mvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mvt.forEach(t),vRo=i(cw),Yi=n(cw,"P",{});var yre=s(Yi);FRo=r(yre,`Note:
Loading a model from its configuration file does `),lhe=n(yre,"STRONG",{});var gvt=s(lhe);TRo=r(gvt,"not"),gvt.forEach(t),MRo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(yre,"A",{href:!0});var hvt=s(PO);ERo=r(hvt,"from_pretrained()"),hvt.forEach(t),CRo=r(yre," to load the model weights."),yre.forEach(t),wRo=i(cw),T(S2.$$.fragment,cw),cw.forEach(t),ARo=i(tl),Ze=n(tl,"DIV",{class:!0});var da=s(Ze);T(zL.$$.fragment,da),LRo=i(da),ihe=n(da,"P",{});var pvt=s(ihe);yRo=r(pvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pvt.forEach(t),xRo=i(da),qa=n(da,"P",{});var fw=s(qa);$Ro=r(fw,"The model class to instantiate is selected based on the "),dhe=n(fw,"CODE",{});var _vt=s(dhe);kRo=r(_vt,"model_type"),_vt.forEach(t),SRo=r(fw,` property of the config object (either
passed as an argument or loaded from `),che=n(fw,"CODE",{});var uvt=s(che);RRo=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),PRo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(fw,"CODE",{});var bvt=s(fhe);BRo=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),IRo=r(fw,":"),fw.forEach(t),NRo=i(da),W=n(da,"UL",{});var H=s(W);R2=n(H,"LI",{});var mSe=s(R2);mhe=n(mSe,"STRONG",{});var vvt=s(mhe);qRo=r(vvt,"albert"),vvt.forEach(t),jRo=r(mSe," \u2014 "),BO=n(mSe,"A",{href:!0});var Fvt=s(BO);DRo=r(Fvt,"AlbertForMaskedLM"),Fvt.forEach(t),GRo=r(mSe," (ALBERT model)"),mSe.forEach(t),ORo=i(H),P2=n(H,"LI",{});var gSe=s(P2);ghe=n(gSe,"STRONG",{});var Tvt=s(ghe);VRo=r(Tvt,"bart"),Tvt.forEach(t),XRo=r(gSe," \u2014 "),IO=n(gSe,"A",{href:!0});var Mvt=s(IO);zRo=r(Mvt,"BartForConditionalGeneration"),Mvt.forEach(t),QRo=r(gSe," (BART model)"),gSe.forEach(t),WRo=i(H),B2=n(H,"LI",{});var hSe=s(B2);hhe=n(hSe,"STRONG",{});var Evt=s(hhe);HRo=r(Evt,"bert"),Evt.forEach(t),URo=r(hSe," \u2014 "),NO=n(hSe,"A",{href:!0});var Cvt=s(NO);JRo=r(Cvt,"BertForMaskedLM"),Cvt.forEach(t),YRo=r(hSe," (BERT model)"),hSe.forEach(t),KRo=i(H),I2=n(H,"LI",{});var pSe=s(I2);phe=n(pSe,"STRONG",{});var wvt=s(phe);ZRo=r(wvt,"big_bird"),wvt.forEach(t),ePo=r(pSe," \u2014 "),qO=n(pSe,"A",{href:!0});var Avt=s(qO);oPo=r(Avt,"BigBirdForMaskedLM"),Avt.forEach(t),rPo=r(pSe," (BigBird model)"),pSe.forEach(t),tPo=i(H),N2=n(H,"LI",{});var _Se=s(N2);_he=n(_Se,"STRONG",{});var Lvt=s(_he);aPo=r(Lvt,"camembert"),Lvt.forEach(t),nPo=r(_Se," \u2014 "),jO=n(_Se,"A",{href:!0});var yvt=s(jO);sPo=r(yvt,"CamembertForMaskedLM"),yvt.forEach(t),lPo=r(_Se," (CamemBERT model)"),_Se.forEach(t),iPo=i(H),q2=n(H,"LI",{});var uSe=s(q2);uhe=n(uSe,"STRONG",{});var xvt=s(uhe);dPo=r(xvt,"convbert"),xvt.forEach(t),cPo=r(uSe," \u2014 "),DO=n(uSe,"A",{href:!0});var $vt=s(DO);fPo=r($vt,"ConvBertForMaskedLM"),$vt.forEach(t),mPo=r(uSe," (ConvBERT model)"),uSe.forEach(t),gPo=i(H),j2=n(H,"LI",{});var bSe=s(j2);bhe=n(bSe,"STRONG",{});var kvt=s(bhe);hPo=r(kvt,"data2vec-text"),kvt.forEach(t),pPo=r(bSe," \u2014 "),GO=n(bSe,"A",{href:!0});var Svt=s(GO);_Po=r(Svt,"Data2VecTextForMaskedLM"),Svt.forEach(t),uPo=r(bSe," (Data2VecText model)"),bSe.forEach(t),bPo=i(H),D2=n(H,"LI",{});var vSe=s(D2);vhe=n(vSe,"STRONG",{});var Rvt=s(vhe);vPo=r(Rvt,"deberta"),Rvt.forEach(t),FPo=r(vSe," \u2014 "),OO=n(vSe,"A",{href:!0});var Pvt=s(OO);TPo=r(Pvt,"DebertaForMaskedLM"),Pvt.forEach(t),MPo=r(vSe," (DeBERTa model)"),vSe.forEach(t),EPo=i(H),G2=n(H,"LI",{});var FSe=s(G2);Fhe=n(FSe,"STRONG",{});var Bvt=s(Fhe);CPo=r(Bvt,"deberta-v2"),Bvt.forEach(t),wPo=r(FSe," \u2014 "),VO=n(FSe,"A",{href:!0});var Ivt=s(VO);APo=r(Ivt,"DebertaV2ForMaskedLM"),Ivt.forEach(t),LPo=r(FSe," (DeBERTa-v2 model)"),FSe.forEach(t),yPo=i(H),O2=n(H,"LI",{});var TSe=s(O2);The=n(TSe,"STRONG",{});var Nvt=s(The);xPo=r(Nvt,"distilbert"),Nvt.forEach(t),$Po=r(TSe," \u2014 "),XO=n(TSe,"A",{href:!0});var qvt=s(XO);kPo=r(qvt,"DistilBertForMaskedLM"),qvt.forEach(t),SPo=r(TSe," (DistilBERT model)"),TSe.forEach(t),RPo=i(H),V2=n(H,"LI",{});var MSe=s(V2);Mhe=n(MSe,"STRONG",{});var jvt=s(Mhe);PPo=r(jvt,"electra"),jvt.forEach(t),BPo=r(MSe," \u2014 "),zO=n(MSe,"A",{href:!0});var Dvt=s(zO);IPo=r(Dvt,"ElectraForMaskedLM"),Dvt.forEach(t),NPo=r(MSe," (ELECTRA model)"),MSe.forEach(t),qPo=i(H),X2=n(H,"LI",{});var ESe=s(X2);Ehe=n(ESe,"STRONG",{});var Gvt=s(Ehe);jPo=r(Gvt,"flaubert"),Gvt.forEach(t),DPo=r(ESe," \u2014 "),QO=n(ESe,"A",{href:!0});var Ovt=s(QO);GPo=r(Ovt,"FlaubertWithLMHeadModel"),Ovt.forEach(t),OPo=r(ESe," (FlauBERT model)"),ESe.forEach(t),VPo=i(H),z2=n(H,"LI",{});var CSe=s(z2);Che=n(CSe,"STRONG",{});var Vvt=s(Che);XPo=r(Vvt,"fnet"),Vvt.forEach(t),zPo=r(CSe," \u2014 "),WO=n(CSe,"A",{href:!0});var Xvt=s(WO);QPo=r(Xvt,"FNetForMaskedLM"),Xvt.forEach(t),WPo=r(CSe," (FNet model)"),CSe.forEach(t),HPo=i(H),Q2=n(H,"LI",{});var wSe=s(Q2);whe=n(wSe,"STRONG",{});var zvt=s(whe);UPo=r(zvt,"funnel"),zvt.forEach(t),JPo=r(wSe," \u2014 "),HO=n(wSe,"A",{href:!0});var Qvt=s(HO);YPo=r(Qvt,"FunnelForMaskedLM"),Qvt.forEach(t),KPo=r(wSe," (Funnel Transformer model)"),wSe.forEach(t),ZPo=i(H),W2=n(H,"LI",{});var ASe=s(W2);Ahe=n(ASe,"STRONG",{});var Wvt=s(Ahe);eBo=r(Wvt,"ibert"),Wvt.forEach(t),oBo=r(ASe," \u2014 "),UO=n(ASe,"A",{href:!0});var Hvt=s(UO);rBo=r(Hvt,"IBertForMaskedLM"),Hvt.forEach(t),tBo=r(ASe," (I-BERT model)"),ASe.forEach(t),aBo=i(H),H2=n(H,"LI",{});var LSe=s(H2);Lhe=n(LSe,"STRONG",{});var Uvt=s(Lhe);nBo=r(Uvt,"layoutlm"),Uvt.forEach(t),sBo=r(LSe," \u2014 "),JO=n(LSe,"A",{href:!0});var Jvt=s(JO);lBo=r(Jvt,"LayoutLMForMaskedLM"),Jvt.forEach(t),iBo=r(LSe," (LayoutLM model)"),LSe.forEach(t),dBo=i(H),U2=n(H,"LI",{});var ySe=s(U2);yhe=n(ySe,"STRONG",{});var Yvt=s(yhe);cBo=r(Yvt,"longformer"),Yvt.forEach(t),fBo=r(ySe," \u2014 "),YO=n(ySe,"A",{href:!0});var Kvt=s(YO);mBo=r(Kvt,"LongformerForMaskedLM"),Kvt.forEach(t),gBo=r(ySe," (Longformer model)"),ySe.forEach(t),hBo=i(H),J2=n(H,"LI",{});var xSe=s(J2);xhe=n(xSe,"STRONG",{});var Zvt=s(xhe);pBo=r(Zvt,"luke"),Zvt.forEach(t),_Bo=r(xSe," \u2014 "),KO=n(xSe,"A",{href:!0});var e3t=s(KO);uBo=r(e3t,"LukeForMaskedLM"),e3t.forEach(t),bBo=r(xSe," (LUKE model)"),xSe.forEach(t),vBo=i(H),Y2=n(H,"LI",{});var $Se=s(Y2);$he=n($Se,"STRONG",{});var o3t=s($he);FBo=r(o3t,"mbart"),o3t.forEach(t),TBo=r($Se," \u2014 "),ZO=n($Se,"A",{href:!0});var r3t=s(ZO);MBo=r(r3t,"MBartForConditionalGeneration"),r3t.forEach(t),EBo=r($Se," (mBART model)"),$Se.forEach(t),CBo=i(H),K2=n(H,"LI",{});var kSe=s(K2);khe=n(kSe,"STRONG",{});var t3t=s(khe);wBo=r(t3t,"megatron-bert"),t3t.forEach(t),ABo=r(kSe," \u2014 "),eV=n(kSe,"A",{href:!0});var a3t=s(eV);LBo=r(a3t,"MegatronBertForMaskedLM"),a3t.forEach(t),yBo=r(kSe," (Megatron-BERT model)"),kSe.forEach(t),xBo=i(H),Z2=n(H,"LI",{});var SSe=s(Z2);She=n(SSe,"STRONG",{});var n3t=s(She);$Bo=r(n3t,"mobilebert"),n3t.forEach(t),kBo=r(SSe," \u2014 "),oV=n(SSe,"A",{href:!0});var s3t=s(oV);SBo=r(s3t,"MobileBertForMaskedLM"),s3t.forEach(t),RBo=r(SSe," (MobileBERT model)"),SSe.forEach(t),PBo=i(H),eb=n(H,"LI",{});var RSe=s(eb);Rhe=n(RSe,"STRONG",{});var l3t=s(Rhe);BBo=r(l3t,"mpnet"),l3t.forEach(t),IBo=r(RSe," \u2014 "),rV=n(RSe,"A",{href:!0});var i3t=s(rV);NBo=r(i3t,"MPNetForMaskedLM"),i3t.forEach(t),qBo=r(RSe," (MPNet model)"),RSe.forEach(t),jBo=i(H),ob=n(H,"LI",{});var PSe=s(ob);Phe=n(PSe,"STRONG",{});var d3t=s(Phe);DBo=r(d3t,"mvp"),d3t.forEach(t),GBo=r(PSe," \u2014 "),tV=n(PSe,"A",{href:!0});var c3t=s(tV);OBo=r(c3t,"MvpForConditionalGeneration"),c3t.forEach(t),VBo=r(PSe," (MVP model)"),PSe.forEach(t),XBo=i(H),rb=n(H,"LI",{});var BSe=s(rb);Bhe=n(BSe,"STRONG",{});var f3t=s(Bhe);zBo=r(f3t,"nezha"),f3t.forEach(t),QBo=r(BSe," \u2014 "),aV=n(BSe,"A",{href:!0});var m3t=s(aV);WBo=r(m3t,"NezhaForMaskedLM"),m3t.forEach(t),HBo=r(BSe," (Nezha model)"),BSe.forEach(t),UBo=i(H),tb=n(H,"LI",{});var ISe=s(tb);Ihe=n(ISe,"STRONG",{});var g3t=s(Ihe);JBo=r(g3t,"nystromformer"),g3t.forEach(t),YBo=r(ISe," \u2014 "),nV=n(ISe,"A",{href:!0});var h3t=s(nV);KBo=r(h3t,"NystromformerForMaskedLM"),h3t.forEach(t),ZBo=r(ISe," (Nystr\xF6mformer model)"),ISe.forEach(t),eIo=i(H),ab=n(H,"LI",{});var NSe=s(ab);Nhe=n(NSe,"STRONG",{});var p3t=s(Nhe);oIo=r(p3t,"perceiver"),p3t.forEach(t),rIo=r(NSe," \u2014 "),sV=n(NSe,"A",{href:!0});var _3t=s(sV);tIo=r(_3t,"PerceiverForMaskedLM"),_3t.forEach(t),aIo=r(NSe," (Perceiver model)"),NSe.forEach(t),nIo=i(H),nb=n(H,"LI",{});var qSe=s(nb);qhe=n(qSe,"STRONG",{});var u3t=s(qhe);sIo=r(u3t,"qdqbert"),u3t.forEach(t),lIo=r(qSe," \u2014 "),lV=n(qSe,"A",{href:!0});var b3t=s(lV);iIo=r(b3t,"QDQBertForMaskedLM"),b3t.forEach(t),dIo=r(qSe," (QDQBert model)"),qSe.forEach(t),cIo=i(H),sb=n(H,"LI",{});var jSe=s(sb);jhe=n(jSe,"STRONG",{});var v3t=s(jhe);fIo=r(v3t,"reformer"),v3t.forEach(t),mIo=r(jSe," \u2014 "),iV=n(jSe,"A",{href:!0});var F3t=s(iV);gIo=r(F3t,"ReformerForMaskedLM"),F3t.forEach(t),hIo=r(jSe," (Reformer model)"),jSe.forEach(t),pIo=i(H),lb=n(H,"LI",{});var DSe=s(lb);Dhe=n(DSe,"STRONG",{});var T3t=s(Dhe);_Io=r(T3t,"rembert"),T3t.forEach(t),uIo=r(DSe," \u2014 "),dV=n(DSe,"A",{href:!0});var M3t=s(dV);bIo=r(M3t,"RemBertForMaskedLM"),M3t.forEach(t),vIo=r(DSe," (RemBERT model)"),DSe.forEach(t),FIo=i(H),ib=n(H,"LI",{});var GSe=s(ib);Ghe=n(GSe,"STRONG",{});var E3t=s(Ghe);TIo=r(E3t,"roberta"),E3t.forEach(t),MIo=r(GSe," \u2014 "),cV=n(GSe,"A",{href:!0});var C3t=s(cV);EIo=r(C3t,"RobertaForMaskedLM"),C3t.forEach(t),CIo=r(GSe," (RoBERTa model)"),GSe.forEach(t),wIo=i(H),db=n(H,"LI",{});var OSe=s(db);Ohe=n(OSe,"STRONG",{});var w3t=s(Ohe);AIo=r(w3t,"roformer"),w3t.forEach(t),LIo=r(OSe," \u2014 "),fV=n(OSe,"A",{href:!0});var A3t=s(fV);yIo=r(A3t,"RoFormerForMaskedLM"),A3t.forEach(t),xIo=r(OSe," (RoFormer model)"),OSe.forEach(t),$Io=i(H),cb=n(H,"LI",{});var VSe=s(cb);Vhe=n(VSe,"STRONG",{});var L3t=s(Vhe);kIo=r(L3t,"squeezebert"),L3t.forEach(t),SIo=r(VSe," \u2014 "),mV=n(VSe,"A",{href:!0});var y3t=s(mV);RIo=r(y3t,"SqueezeBertForMaskedLM"),y3t.forEach(t),PIo=r(VSe," (SqueezeBERT model)"),VSe.forEach(t),BIo=i(H),fb=n(H,"LI",{});var XSe=s(fb);Xhe=n(XSe,"STRONG",{});var x3t=s(Xhe);IIo=r(x3t,"tapas"),x3t.forEach(t),NIo=r(XSe," \u2014 "),gV=n(XSe,"A",{href:!0});var $3t=s(gV);qIo=r($3t,"TapasForMaskedLM"),$3t.forEach(t),jIo=r(XSe," (TAPAS model)"),XSe.forEach(t),DIo=i(H),mb=n(H,"LI",{});var zSe=s(mb);zhe=n(zSe,"STRONG",{});var k3t=s(zhe);GIo=r(k3t,"wav2vec2"),k3t.forEach(t),OIo=r(zSe," \u2014 "),Qhe=n(zSe,"CODE",{});var S3t=s(Qhe);VIo=r(S3t,"Wav2Vec2ForMaskedLM"),S3t.forEach(t),XIo=r(zSe," (Wav2Vec2 model)"),zSe.forEach(t),zIo=i(H),gb=n(H,"LI",{});var QSe=s(gb);Whe=n(QSe,"STRONG",{});var R3t=s(Whe);QIo=r(R3t,"xlm"),R3t.forEach(t),WIo=r(QSe," \u2014 "),hV=n(QSe,"A",{href:!0});var P3t=s(hV);HIo=r(P3t,"XLMWithLMHeadModel"),P3t.forEach(t),UIo=r(QSe," (XLM model)"),QSe.forEach(t),JIo=i(H),hb=n(H,"LI",{});var WSe=s(hb);Hhe=n(WSe,"STRONG",{});var B3t=s(Hhe);YIo=r(B3t,"xlm-roberta"),B3t.forEach(t),KIo=r(WSe," \u2014 "),pV=n(WSe,"A",{href:!0});var I3t=s(pV);ZIo=r(I3t,"XLMRobertaForMaskedLM"),I3t.forEach(t),eNo=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),oNo=i(H),pb=n(H,"LI",{});var HSe=s(pb);Uhe=n(HSe,"STRONG",{});var N3t=s(Uhe);rNo=r(N3t,"xlm-roberta-xl"),N3t.forEach(t),tNo=r(HSe," \u2014 "),_V=n(HSe,"A",{href:!0});var q3t=s(_V);aNo=r(q3t,"XLMRobertaXLForMaskedLM"),q3t.forEach(t),nNo=r(HSe," (XLM-RoBERTa-XL model)"),HSe.forEach(t),sNo=i(H),_b=n(H,"LI",{});var USe=s(_b);Jhe=n(USe,"STRONG",{});var j3t=s(Jhe);lNo=r(j3t,"yoso"),j3t.forEach(t),iNo=r(USe," \u2014 "),uV=n(USe,"A",{href:!0});var D3t=s(uV);dNo=r(D3t,"YosoForMaskedLM"),D3t.forEach(t),cNo=r(USe," (YOSO model)"),USe.forEach(t),H.forEach(t),fNo=i(da),ub=n(da,"P",{});var JSe=s(ub);mNo=r(JSe,"The model is set in evaluation mode by default using "),Yhe=n(JSe,"CODE",{});var G3t=s(Yhe);gNo=r(G3t,"model.eval()"),G3t.forEach(t),hNo=r(JSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(JSe,"CODE",{});var O3t=s(Khe);pNo=r(O3t,"model.train()"),O3t.forEach(t),JSe.forEach(t),_No=i(da),T(bb.$$.fragment,da),da.forEach(t),tl.forEach(t),oXe=i(f),Ki=n(f,"H2",{class:!0});var lQe=s(Ki);vb=n(lQe,"A",{id:!0,class:!0,href:!0});var V3t=s(vb);Zhe=n(V3t,"SPAN",{});var X3t=s(Zhe);T(QL.$$.fragment,X3t),X3t.forEach(t),V3t.forEach(t),uNo=i(lQe),epe=n(lQe,"SPAN",{});var z3t=s(epe);bNo=r(z3t,"AutoModelForSeq2SeqLM"),z3t.forEach(t),lQe.forEach(t),rXe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(WL.$$.fragment,al),vNo=i(al),Zi=n(al,"P",{});var xre=s(Zi);FNo=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bV=n(xre,"A",{href:!0});var Q3t=s(bV);TNo=r(Q3t,"from_pretrained()"),Q3t.forEach(t),MNo=r(xre," class method or the "),vV=n(xre,"A",{href:!0});var W3t=s(vV);ENo=r(W3t,"from_config()"),W3t.forEach(t),CNo=r(xre,` class
method.`),xre.forEach(t),wNo=i(al),HL=n(al,"P",{});var iQe=s(HL);ANo=r(iQe,"This class cannot be instantiated directly using "),ope=n(iQe,"CODE",{});var H3t=s(ope);LNo=r(H3t,"__init__()"),H3t.forEach(t),yNo=r(iQe," (throws an error)."),iQe.forEach(t),xNo=i(al),ft=n(al,"DIV",{class:!0});var mw=s(ft);T(UL.$$.fragment,mw),$No=i(mw),rpe=n(mw,"P",{});var U3t=s(rpe);kNo=r(U3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U3t.forEach(t),SNo=i(mw),ed=n(mw,"P",{});var $re=s(ed);RNo=r($re,`Note:
Loading a model from its configuration file does `),tpe=n($re,"STRONG",{});var J3t=s(tpe);PNo=r(J3t,"not"),J3t.forEach(t),BNo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n($re,"A",{href:!0});var Y3t=s(FV);INo=r(Y3t,"from_pretrained()"),Y3t.forEach(t),NNo=r($re," to load the model weights."),$re.forEach(t),qNo=i(mw),T(Fb.$$.fragment,mw),mw.forEach(t),jNo=i(al),eo=n(al,"DIV",{class:!0});var ca=s(eo);T(JL.$$.fragment,ca),DNo=i(ca),ape=n(ca,"P",{});var K3t=s(ape);GNo=r(K3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K3t.forEach(t),ONo=i(ca),ja=n(ca,"P",{});var gw=s(ja);VNo=r(gw,"The model class to instantiate is selected based on the "),npe=n(gw,"CODE",{});var Z3t=s(npe);XNo=r(Z3t,"model_type"),Z3t.forEach(t),zNo=r(gw,` property of the config object (either
passed as an argument or loaded from `),spe=n(gw,"CODE",{});var eFt=s(spe);QNo=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),WNo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(gw,"CODE",{});var oFt=s(lpe);HNo=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),UNo=r(gw,":"),gw.forEach(t),JNo=i(ca),pe=n(ca,"UL",{});var be=s(pe);Tb=n(be,"LI",{});var YSe=s(Tb);ipe=n(YSe,"STRONG",{});var rFt=s(ipe);YNo=r(rFt,"bart"),rFt.forEach(t),KNo=r(YSe," \u2014 "),TV=n(YSe,"A",{href:!0});var tFt=s(TV);ZNo=r(tFt,"BartForConditionalGeneration"),tFt.forEach(t),eqo=r(YSe," (BART model)"),YSe.forEach(t),oqo=i(be),Mb=n(be,"LI",{});var KSe=s(Mb);dpe=n(KSe,"STRONG",{});var aFt=s(dpe);rqo=r(aFt,"bigbird_pegasus"),aFt.forEach(t),tqo=r(KSe," \u2014 "),MV=n(KSe,"A",{href:!0});var nFt=s(MV);aqo=r(nFt,"BigBirdPegasusForConditionalGeneration"),nFt.forEach(t),nqo=r(KSe," (BigBird-Pegasus model)"),KSe.forEach(t),sqo=i(be),Eb=n(be,"LI",{});var ZSe=s(Eb);cpe=n(ZSe,"STRONG",{});var sFt=s(cpe);lqo=r(sFt,"blenderbot"),sFt.forEach(t),iqo=r(ZSe," \u2014 "),EV=n(ZSe,"A",{href:!0});var lFt=s(EV);dqo=r(lFt,"BlenderbotForConditionalGeneration"),lFt.forEach(t),cqo=r(ZSe," (Blenderbot model)"),ZSe.forEach(t),fqo=i(be),Cb=n(be,"LI",{});var eRe=s(Cb);fpe=n(eRe,"STRONG",{});var iFt=s(fpe);mqo=r(iFt,"blenderbot-small"),iFt.forEach(t),gqo=r(eRe," \u2014 "),CV=n(eRe,"A",{href:!0});var dFt=s(CV);hqo=r(dFt,"BlenderbotSmallForConditionalGeneration"),dFt.forEach(t),pqo=r(eRe," (BlenderbotSmall model)"),eRe.forEach(t),_qo=i(be),wb=n(be,"LI",{});var oRe=s(wb);mpe=n(oRe,"STRONG",{});var cFt=s(mpe);uqo=r(cFt,"encoder-decoder"),cFt.forEach(t),bqo=r(oRe," \u2014 "),wV=n(oRe,"A",{href:!0});var fFt=s(wV);vqo=r(fFt,"EncoderDecoderModel"),fFt.forEach(t),Fqo=r(oRe," (Encoder decoder model)"),oRe.forEach(t),Tqo=i(be),Ab=n(be,"LI",{});var rRe=s(Ab);gpe=n(rRe,"STRONG",{});var mFt=s(gpe);Mqo=r(mFt,"fsmt"),mFt.forEach(t),Eqo=r(rRe," \u2014 "),AV=n(rRe,"A",{href:!0});var gFt=s(AV);Cqo=r(gFt,"FSMTForConditionalGeneration"),gFt.forEach(t),wqo=r(rRe," (FairSeq Machine-Translation model)"),rRe.forEach(t),Aqo=i(be),Lb=n(be,"LI",{});var tRe=s(Lb);hpe=n(tRe,"STRONG",{});var hFt=s(hpe);Lqo=r(hFt,"led"),hFt.forEach(t),yqo=r(tRe," \u2014 "),LV=n(tRe,"A",{href:!0});var pFt=s(LV);xqo=r(pFt,"LEDForConditionalGeneration"),pFt.forEach(t),$qo=r(tRe," (LED model)"),tRe.forEach(t),kqo=i(be),yb=n(be,"LI",{});var aRe=s(yb);ppe=n(aRe,"STRONG",{});var _Ft=s(ppe);Sqo=r(_Ft,"longt5"),_Ft.forEach(t),Rqo=r(aRe," \u2014 "),yV=n(aRe,"A",{href:!0});var uFt=s(yV);Pqo=r(uFt,"LongT5ForConditionalGeneration"),uFt.forEach(t),Bqo=r(aRe," (LongT5 model)"),aRe.forEach(t),Iqo=i(be),xb=n(be,"LI",{});var nRe=s(xb);_pe=n(nRe,"STRONG",{});var bFt=s(_pe);Nqo=r(bFt,"m2m_100"),bFt.forEach(t),qqo=r(nRe," \u2014 "),xV=n(nRe,"A",{href:!0});var vFt=s(xV);jqo=r(vFt,"M2M100ForConditionalGeneration"),vFt.forEach(t),Dqo=r(nRe," (M2M100 model)"),nRe.forEach(t),Gqo=i(be),$b=n(be,"LI",{});var sRe=s($b);upe=n(sRe,"STRONG",{});var FFt=s(upe);Oqo=r(FFt,"marian"),FFt.forEach(t),Vqo=r(sRe," \u2014 "),$V=n(sRe,"A",{href:!0});var TFt=s($V);Xqo=r(TFt,"MarianMTModel"),TFt.forEach(t),zqo=r(sRe," (Marian model)"),sRe.forEach(t),Qqo=i(be),kb=n(be,"LI",{});var lRe=s(kb);bpe=n(lRe,"STRONG",{});var MFt=s(bpe);Wqo=r(MFt,"mbart"),MFt.forEach(t),Hqo=r(lRe," \u2014 "),kV=n(lRe,"A",{href:!0});var EFt=s(kV);Uqo=r(EFt,"MBartForConditionalGeneration"),EFt.forEach(t),Jqo=r(lRe," (mBART model)"),lRe.forEach(t),Yqo=i(be),Sb=n(be,"LI",{});var iRe=s(Sb);vpe=n(iRe,"STRONG",{});var CFt=s(vpe);Kqo=r(CFt,"mt5"),CFt.forEach(t),Zqo=r(iRe," \u2014 "),SV=n(iRe,"A",{href:!0});var wFt=s(SV);ejo=r(wFt,"MT5ForConditionalGeneration"),wFt.forEach(t),ojo=r(iRe," (MT5 model)"),iRe.forEach(t),rjo=i(be),Rb=n(be,"LI",{});var dRe=s(Rb);Fpe=n(dRe,"STRONG",{});var AFt=s(Fpe);tjo=r(AFt,"mvp"),AFt.forEach(t),ajo=r(dRe," \u2014 "),RV=n(dRe,"A",{href:!0});var LFt=s(RV);njo=r(LFt,"MvpForConditionalGeneration"),LFt.forEach(t),sjo=r(dRe," (MVP model)"),dRe.forEach(t),ljo=i(be),Pb=n(be,"LI",{});var cRe=s(Pb);Tpe=n(cRe,"STRONG",{});var yFt=s(Tpe);ijo=r(yFt,"pegasus"),yFt.forEach(t),djo=r(cRe," \u2014 "),PV=n(cRe,"A",{href:!0});var xFt=s(PV);cjo=r(xFt,"PegasusForConditionalGeneration"),xFt.forEach(t),fjo=r(cRe," (Pegasus model)"),cRe.forEach(t),mjo=i(be),Bb=n(be,"LI",{});var fRe=s(Bb);Mpe=n(fRe,"STRONG",{});var $Ft=s(Mpe);gjo=r($Ft,"plbart"),$Ft.forEach(t),hjo=r(fRe," \u2014 "),BV=n(fRe,"A",{href:!0});var kFt=s(BV);pjo=r(kFt,"PLBartForConditionalGeneration"),kFt.forEach(t),_jo=r(fRe," (PLBart model)"),fRe.forEach(t),ujo=i(be),Ib=n(be,"LI",{});var mRe=s(Ib);Epe=n(mRe,"STRONG",{});var SFt=s(Epe);bjo=r(SFt,"prophetnet"),SFt.forEach(t),vjo=r(mRe," \u2014 "),IV=n(mRe,"A",{href:!0});var RFt=s(IV);Fjo=r(RFt,"ProphetNetForConditionalGeneration"),RFt.forEach(t),Tjo=r(mRe," (ProphetNet model)"),mRe.forEach(t),Mjo=i(be),Nb=n(be,"LI",{});var gRe=s(Nb);Cpe=n(gRe,"STRONG",{});var PFt=s(Cpe);Ejo=r(PFt,"t5"),PFt.forEach(t),Cjo=r(gRe," \u2014 "),NV=n(gRe,"A",{href:!0});var BFt=s(NV);wjo=r(BFt,"T5ForConditionalGeneration"),BFt.forEach(t),Ajo=r(gRe," (T5 model)"),gRe.forEach(t),Ljo=i(be),qb=n(be,"LI",{});var hRe=s(qb);wpe=n(hRe,"STRONG",{});var IFt=s(wpe);yjo=r(IFt,"xlm-prophetnet"),IFt.forEach(t),xjo=r(hRe," \u2014 "),qV=n(hRe,"A",{href:!0});var NFt=s(qV);$jo=r(NFt,"XLMProphetNetForConditionalGeneration"),NFt.forEach(t),kjo=r(hRe," (XLM-ProphetNet model)"),hRe.forEach(t),be.forEach(t),Sjo=i(ca),jb=n(ca,"P",{});var pRe=s(jb);Rjo=r(pRe,"The model is set in evaluation mode by default using "),Ape=n(pRe,"CODE",{});var qFt=s(Ape);Pjo=r(qFt,"model.eval()"),qFt.forEach(t),Bjo=r(pRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(pRe,"CODE",{});var jFt=s(Lpe);Ijo=r(jFt,"model.train()"),jFt.forEach(t),pRe.forEach(t),Njo=i(ca),T(Db.$$.fragment,ca),ca.forEach(t),al.forEach(t),tXe=i(f),od=n(f,"H2",{class:!0});var dQe=s(od);Gb=n(dQe,"A",{id:!0,class:!0,href:!0});var DFt=s(Gb);ype=n(DFt,"SPAN",{});var GFt=s(ype);T(YL.$$.fragment,GFt),GFt.forEach(t),DFt.forEach(t),qjo=i(dQe),xpe=n(dQe,"SPAN",{});var OFt=s(xpe);jjo=r(OFt,"AutoModelForSequenceClassification"),OFt.forEach(t),dQe.forEach(t),aXe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(KL.$$.fragment,nl),Djo=i(nl),rd=n(nl,"P",{});var kre=s(rd);Gjo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jV=n(kre,"A",{href:!0});var VFt=s(jV);Ojo=r(VFt,"from_pretrained()"),VFt.forEach(t),Vjo=r(kre," class method or the "),DV=n(kre,"A",{href:!0});var XFt=s(DV);Xjo=r(XFt,"from_config()"),XFt.forEach(t),zjo=r(kre,` class
method.`),kre.forEach(t),Qjo=i(nl),ZL=n(nl,"P",{});var cQe=s(ZL);Wjo=r(cQe,"This class cannot be instantiated directly using "),$pe=n(cQe,"CODE",{});var zFt=s($pe);Hjo=r(zFt,"__init__()"),zFt.forEach(t),Ujo=r(cQe," (throws an error)."),cQe.forEach(t),Jjo=i(nl),mt=n(nl,"DIV",{class:!0});var hw=s(mt);T(ey.$$.fragment,hw),Yjo=i(hw),kpe=n(hw,"P",{});var QFt=s(kpe);Kjo=r(QFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QFt.forEach(t),Zjo=i(hw),td=n(hw,"P",{});var Sre=s(td);eDo=r(Sre,`Note:
Loading a model from its configuration file does `),Spe=n(Sre,"STRONG",{});var WFt=s(Spe);oDo=r(WFt,"not"),WFt.forEach(t),rDo=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(Sre,"A",{href:!0});var HFt=s(GV);tDo=r(HFt,"from_pretrained()"),HFt.forEach(t),aDo=r(Sre," to load the model weights."),Sre.forEach(t),nDo=i(hw),T(Ob.$$.fragment,hw),hw.forEach(t),sDo=i(nl),oo=n(nl,"DIV",{class:!0});var fa=s(oo);T(oy.$$.fragment,fa),lDo=i(fa),Rpe=n(fa,"P",{});var UFt=s(Rpe);iDo=r(UFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UFt.forEach(t),dDo=i(fa),Da=n(fa,"P",{});var pw=s(Da);cDo=r(pw,"The model class to instantiate is selected based on the "),Ppe=n(pw,"CODE",{});var JFt=s(Ppe);fDo=r(JFt,"model_type"),JFt.forEach(t),mDo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(pw,"CODE",{});var YFt=s(Bpe);gDo=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),hDo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(pw,"CODE",{});var KFt=s(Ipe);pDo=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),_Do=r(pw,":"),pw.forEach(t),uDo=i(fa),N=n(fa,"UL",{});var q=s(N);Vb=n(q,"LI",{});var _Re=s(Vb);Npe=n(_Re,"STRONG",{});var ZFt=s(Npe);bDo=r(ZFt,"albert"),ZFt.forEach(t),vDo=r(_Re," \u2014 "),OV=n(_Re,"A",{href:!0});var e6t=s(OV);FDo=r(e6t,"AlbertForSequenceClassification"),e6t.forEach(t),TDo=r(_Re," (ALBERT model)"),_Re.forEach(t),MDo=i(q),Xb=n(q,"LI",{});var uRe=s(Xb);qpe=n(uRe,"STRONG",{});var o6t=s(qpe);EDo=r(o6t,"bart"),o6t.forEach(t),CDo=r(uRe," \u2014 "),VV=n(uRe,"A",{href:!0});var r6t=s(VV);wDo=r(r6t,"BartForSequenceClassification"),r6t.forEach(t),ADo=r(uRe," (BART model)"),uRe.forEach(t),LDo=i(q),zb=n(q,"LI",{});var bRe=s(zb);jpe=n(bRe,"STRONG",{});var t6t=s(jpe);yDo=r(t6t,"bert"),t6t.forEach(t),xDo=r(bRe," \u2014 "),XV=n(bRe,"A",{href:!0});var a6t=s(XV);$Do=r(a6t,"BertForSequenceClassification"),a6t.forEach(t),kDo=r(bRe," (BERT model)"),bRe.forEach(t),SDo=i(q),Qb=n(q,"LI",{});var vRe=s(Qb);Dpe=n(vRe,"STRONG",{});var n6t=s(Dpe);RDo=r(n6t,"big_bird"),n6t.forEach(t),PDo=r(vRe," \u2014 "),zV=n(vRe,"A",{href:!0});var s6t=s(zV);BDo=r(s6t,"BigBirdForSequenceClassification"),s6t.forEach(t),IDo=r(vRe," (BigBird model)"),vRe.forEach(t),NDo=i(q),Wb=n(q,"LI",{});var FRe=s(Wb);Gpe=n(FRe,"STRONG",{});var l6t=s(Gpe);qDo=r(l6t,"bigbird_pegasus"),l6t.forEach(t),jDo=r(FRe," \u2014 "),QV=n(FRe,"A",{href:!0});var i6t=s(QV);DDo=r(i6t,"BigBirdPegasusForSequenceClassification"),i6t.forEach(t),GDo=r(FRe," (BigBird-Pegasus model)"),FRe.forEach(t),ODo=i(q),Hb=n(q,"LI",{});var TRe=s(Hb);Ope=n(TRe,"STRONG",{});var d6t=s(Ope);VDo=r(d6t,"bloom"),d6t.forEach(t),XDo=r(TRe," \u2014 "),WV=n(TRe,"A",{href:!0});var c6t=s(WV);zDo=r(c6t,"BloomForSequenceClassification"),c6t.forEach(t),QDo=r(TRe," (BLOOM model)"),TRe.forEach(t),WDo=i(q),Ub=n(q,"LI",{});var MRe=s(Ub);Vpe=n(MRe,"STRONG",{});var f6t=s(Vpe);HDo=r(f6t,"camembert"),f6t.forEach(t),UDo=r(MRe," \u2014 "),HV=n(MRe,"A",{href:!0});var m6t=s(HV);JDo=r(m6t,"CamembertForSequenceClassification"),m6t.forEach(t),YDo=r(MRe," (CamemBERT model)"),MRe.forEach(t),KDo=i(q),Jb=n(q,"LI",{});var ERe=s(Jb);Xpe=n(ERe,"STRONG",{});var g6t=s(Xpe);ZDo=r(g6t,"canine"),g6t.forEach(t),eGo=r(ERe," \u2014 "),UV=n(ERe,"A",{href:!0});var h6t=s(UV);oGo=r(h6t,"CanineForSequenceClassification"),h6t.forEach(t),rGo=r(ERe," (CANINE model)"),ERe.forEach(t),tGo=i(q),Yb=n(q,"LI",{});var CRe=s(Yb);zpe=n(CRe,"STRONG",{});var p6t=s(zpe);aGo=r(p6t,"convbert"),p6t.forEach(t),nGo=r(CRe," \u2014 "),JV=n(CRe,"A",{href:!0});var _6t=s(JV);sGo=r(_6t,"ConvBertForSequenceClassification"),_6t.forEach(t),lGo=r(CRe," (ConvBERT model)"),CRe.forEach(t),iGo=i(q),Kb=n(q,"LI",{});var wRe=s(Kb);Qpe=n(wRe,"STRONG",{});var u6t=s(Qpe);dGo=r(u6t,"ctrl"),u6t.forEach(t),cGo=r(wRe," \u2014 "),YV=n(wRe,"A",{href:!0});var b6t=s(YV);fGo=r(b6t,"CTRLForSequenceClassification"),b6t.forEach(t),mGo=r(wRe," (CTRL model)"),wRe.forEach(t),gGo=i(q),Zb=n(q,"LI",{});var ARe=s(Zb);Wpe=n(ARe,"STRONG",{});var v6t=s(Wpe);hGo=r(v6t,"data2vec-text"),v6t.forEach(t),pGo=r(ARe," \u2014 "),KV=n(ARe,"A",{href:!0});var F6t=s(KV);_Go=r(F6t,"Data2VecTextForSequenceClassification"),F6t.forEach(t),uGo=r(ARe," (Data2VecText model)"),ARe.forEach(t),bGo=i(q),ev=n(q,"LI",{});var LRe=s(ev);Hpe=n(LRe,"STRONG",{});var T6t=s(Hpe);vGo=r(T6t,"deberta"),T6t.forEach(t),FGo=r(LRe," \u2014 "),ZV=n(LRe,"A",{href:!0});var M6t=s(ZV);TGo=r(M6t,"DebertaForSequenceClassification"),M6t.forEach(t),MGo=r(LRe," (DeBERTa model)"),LRe.forEach(t),EGo=i(q),ov=n(q,"LI",{});var yRe=s(ov);Upe=n(yRe,"STRONG",{});var E6t=s(Upe);CGo=r(E6t,"deberta-v2"),E6t.forEach(t),wGo=r(yRe," \u2014 "),eX=n(yRe,"A",{href:!0});var C6t=s(eX);AGo=r(C6t,"DebertaV2ForSequenceClassification"),C6t.forEach(t),LGo=r(yRe," (DeBERTa-v2 model)"),yRe.forEach(t),yGo=i(q),rv=n(q,"LI",{});var xRe=s(rv);Jpe=n(xRe,"STRONG",{});var w6t=s(Jpe);xGo=r(w6t,"distilbert"),w6t.forEach(t),$Go=r(xRe," \u2014 "),oX=n(xRe,"A",{href:!0});var A6t=s(oX);kGo=r(A6t,"DistilBertForSequenceClassification"),A6t.forEach(t),SGo=r(xRe," (DistilBERT model)"),xRe.forEach(t),RGo=i(q),tv=n(q,"LI",{});var $Re=s(tv);Ype=n($Re,"STRONG",{});var L6t=s(Ype);PGo=r(L6t,"electra"),L6t.forEach(t),BGo=r($Re," \u2014 "),rX=n($Re,"A",{href:!0});var y6t=s(rX);IGo=r(y6t,"ElectraForSequenceClassification"),y6t.forEach(t),NGo=r($Re," (ELECTRA model)"),$Re.forEach(t),qGo=i(q),av=n(q,"LI",{});var kRe=s(av);Kpe=n(kRe,"STRONG",{});var x6t=s(Kpe);jGo=r(x6t,"flaubert"),x6t.forEach(t),DGo=r(kRe," \u2014 "),tX=n(kRe,"A",{href:!0});var $6t=s(tX);GGo=r($6t,"FlaubertForSequenceClassification"),$6t.forEach(t),OGo=r(kRe," (FlauBERT model)"),kRe.forEach(t),VGo=i(q),nv=n(q,"LI",{});var SRe=s(nv);Zpe=n(SRe,"STRONG",{});var k6t=s(Zpe);XGo=r(k6t,"fnet"),k6t.forEach(t),zGo=r(SRe," \u2014 "),aX=n(SRe,"A",{href:!0});var S6t=s(aX);QGo=r(S6t,"FNetForSequenceClassification"),S6t.forEach(t),WGo=r(SRe," (FNet model)"),SRe.forEach(t),HGo=i(q),sv=n(q,"LI",{});var RRe=s(sv);e_e=n(RRe,"STRONG",{});var R6t=s(e_e);UGo=r(R6t,"funnel"),R6t.forEach(t),JGo=r(RRe," \u2014 "),nX=n(RRe,"A",{href:!0});var P6t=s(nX);YGo=r(P6t,"FunnelForSequenceClassification"),P6t.forEach(t),KGo=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),ZGo=i(q),lv=n(q,"LI",{});var PRe=s(lv);o_e=n(PRe,"STRONG",{});var B6t=s(o_e);eOo=r(B6t,"gpt2"),B6t.forEach(t),oOo=r(PRe," \u2014 "),sX=n(PRe,"A",{href:!0});var I6t=s(sX);rOo=r(I6t,"GPT2ForSequenceClassification"),I6t.forEach(t),tOo=r(PRe," (OpenAI GPT-2 model)"),PRe.forEach(t),aOo=i(q),iv=n(q,"LI",{});var BRe=s(iv);r_e=n(BRe,"STRONG",{});var N6t=s(r_e);nOo=r(N6t,"gpt_neo"),N6t.forEach(t),sOo=r(BRe," \u2014 "),lX=n(BRe,"A",{href:!0});var q6t=s(lX);lOo=r(q6t,"GPTNeoForSequenceClassification"),q6t.forEach(t),iOo=r(BRe," (GPT Neo model)"),BRe.forEach(t),dOo=i(q),dv=n(q,"LI",{});var IRe=s(dv);t_e=n(IRe,"STRONG",{});var j6t=s(t_e);cOo=r(j6t,"gptj"),j6t.forEach(t),fOo=r(IRe," \u2014 "),iX=n(IRe,"A",{href:!0});var D6t=s(iX);mOo=r(D6t,"GPTJForSequenceClassification"),D6t.forEach(t),gOo=r(IRe," (GPT-J model)"),IRe.forEach(t),hOo=i(q),cv=n(q,"LI",{});var NRe=s(cv);a_e=n(NRe,"STRONG",{});var G6t=s(a_e);pOo=r(G6t,"ibert"),G6t.forEach(t),_Oo=r(NRe," \u2014 "),dX=n(NRe,"A",{href:!0});var O6t=s(dX);uOo=r(O6t,"IBertForSequenceClassification"),O6t.forEach(t),bOo=r(NRe," (I-BERT model)"),NRe.forEach(t),vOo=i(q),fv=n(q,"LI",{});var qRe=s(fv);n_e=n(qRe,"STRONG",{});var V6t=s(n_e);FOo=r(V6t,"layoutlm"),V6t.forEach(t),TOo=r(qRe," \u2014 "),cX=n(qRe,"A",{href:!0});var X6t=s(cX);MOo=r(X6t,"LayoutLMForSequenceClassification"),X6t.forEach(t),EOo=r(qRe," (LayoutLM model)"),qRe.forEach(t),COo=i(q),mv=n(q,"LI",{});var jRe=s(mv);s_e=n(jRe,"STRONG",{});var z6t=s(s_e);wOo=r(z6t,"layoutlmv2"),z6t.forEach(t),AOo=r(jRe," \u2014 "),fX=n(jRe,"A",{href:!0});var Q6t=s(fX);LOo=r(Q6t,"LayoutLMv2ForSequenceClassification"),Q6t.forEach(t),yOo=r(jRe," (LayoutLMv2 model)"),jRe.forEach(t),xOo=i(q),gv=n(q,"LI",{});var DRe=s(gv);l_e=n(DRe,"STRONG",{});var W6t=s(l_e);$Oo=r(W6t,"layoutlmv3"),W6t.forEach(t),kOo=r(DRe," \u2014 "),mX=n(DRe,"A",{href:!0});var H6t=s(mX);SOo=r(H6t,"LayoutLMv3ForSequenceClassification"),H6t.forEach(t),ROo=r(DRe," (LayoutLMv3 model)"),DRe.forEach(t),POo=i(q),hv=n(q,"LI",{});var GRe=s(hv);i_e=n(GRe,"STRONG",{});var U6t=s(i_e);BOo=r(U6t,"led"),U6t.forEach(t),IOo=r(GRe," \u2014 "),gX=n(GRe,"A",{href:!0});var J6t=s(gX);NOo=r(J6t,"LEDForSequenceClassification"),J6t.forEach(t),qOo=r(GRe," (LED model)"),GRe.forEach(t),jOo=i(q),pv=n(q,"LI",{});var ORe=s(pv);d_e=n(ORe,"STRONG",{});var Y6t=s(d_e);DOo=r(Y6t,"longformer"),Y6t.forEach(t),GOo=r(ORe," \u2014 "),hX=n(ORe,"A",{href:!0});var K6t=s(hX);OOo=r(K6t,"LongformerForSequenceClassification"),K6t.forEach(t),VOo=r(ORe," (Longformer model)"),ORe.forEach(t),XOo=i(q),_v=n(q,"LI",{});var VRe=s(_v);c_e=n(VRe,"STRONG",{});var Z6t=s(c_e);zOo=r(Z6t,"mbart"),Z6t.forEach(t),QOo=r(VRe," \u2014 "),pX=n(VRe,"A",{href:!0});var eTt=s(pX);WOo=r(eTt,"MBartForSequenceClassification"),eTt.forEach(t),HOo=r(VRe," (mBART model)"),VRe.forEach(t),UOo=i(q),uv=n(q,"LI",{});var XRe=s(uv);f_e=n(XRe,"STRONG",{});var oTt=s(f_e);JOo=r(oTt,"megatron-bert"),oTt.forEach(t),YOo=r(XRe," \u2014 "),_X=n(XRe,"A",{href:!0});var rTt=s(_X);KOo=r(rTt,"MegatronBertForSequenceClassification"),rTt.forEach(t),ZOo=r(XRe," (Megatron-BERT model)"),XRe.forEach(t),eVo=i(q),bv=n(q,"LI",{});var zRe=s(bv);m_e=n(zRe,"STRONG",{});var tTt=s(m_e);oVo=r(tTt,"mobilebert"),tTt.forEach(t),rVo=r(zRe," \u2014 "),uX=n(zRe,"A",{href:!0});var aTt=s(uX);tVo=r(aTt,"MobileBertForSequenceClassification"),aTt.forEach(t),aVo=r(zRe," (MobileBERT model)"),zRe.forEach(t),nVo=i(q),vv=n(q,"LI",{});var QRe=s(vv);g_e=n(QRe,"STRONG",{});var nTt=s(g_e);sVo=r(nTt,"mpnet"),nTt.forEach(t),lVo=r(QRe," \u2014 "),bX=n(QRe,"A",{href:!0});var sTt=s(bX);iVo=r(sTt,"MPNetForSequenceClassification"),sTt.forEach(t),dVo=r(QRe," (MPNet model)"),QRe.forEach(t),cVo=i(q),Fv=n(q,"LI",{});var WRe=s(Fv);h_e=n(WRe,"STRONG",{});var lTt=s(h_e);fVo=r(lTt,"mvp"),lTt.forEach(t),mVo=r(WRe," \u2014 "),vX=n(WRe,"A",{href:!0});var iTt=s(vX);gVo=r(iTt,"MvpForSequenceClassification"),iTt.forEach(t),hVo=r(WRe," (MVP model)"),WRe.forEach(t),pVo=i(q),Tv=n(q,"LI",{});var HRe=s(Tv);p_e=n(HRe,"STRONG",{});var dTt=s(p_e);_Vo=r(dTt,"nezha"),dTt.forEach(t),uVo=r(HRe," \u2014 "),FX=n(HRe,"A",{href:!0});var cTt=s(FX);bVo=r(cTt,"NezhaForSequenceClassification"),cTt.forEach(t),vVo=r(HRe," (Nezha model)"),HRe.forEach(t),FVo=i(q),Mv=n(q,"LI",{});var URe=s(Mv);__e=n(URe,"STRONG",{});var fTt=s(__e);TVo=r(fTt,"nystromformer"),fTt.forEach(t),MVo=r(URe," \u2014 "),TX=n(URe,"A",{href:!0});var mTt=s(TX);EVo=r(mTt,"NystromformerForSequenceClassification"),mTt.forEach(t),CVo=r(URe," (Nystr\xF6mformer model)"),URe.forEach(t),wVo=i(q),Ev=n(q,"LI",{});var JRe=s(Ev);u_e=n(JRe,"STRONG",{});var gTt=s(u_e);AVo=r(gTt,"openai-gpt"),gTt.forEach(t),LVo=r(JRe," \u2014 "),MX=n(JRe,"A",{href:!0});var hTt=s(MX);yVo=r(hTt,"OpenAIGPTForSequenceClassification"),hTt.forEach(t),xVo=r(JRe," (OpenAI GPT model)"),JRe.forEach(t),$Vo=i(q),Cv=n(q,"LI",{});var YRe=s(Cv);b_e=n(YRe,"STRONG",{});var pTt=s(b_e);kVo=r(pTt,"perceiver"),pTt.forEach(t),SVo=r(YRe," \u2014 "),EX=n(YRe,"A",{href:!0});var _Tt=s(EX);RVo=r(_Tt,"PerceiverForSequenceClassification"),_Tt.forEach(t),PVo=r(YRe," (Perceiver model)"),YRe.forEach(t),BVo=i(q),wv=n(q,"LI",{});var KRe=s(wv);v_e=n(KRe,"STRONG",{});var uTt=s(v_e);IVo=r(uTt,"plbart"),uTt.forEach(t),NVo=r(KRe," \u2014 "),CX=n(KRe,"A",{href:!0});var bTt=s(CX);qVo=r(bTt,"PLBartForSequenceClassification"),bTt.forEach(t),jVo=r(KRe," (PLBart model)"),KRe.forEach(t),DVo=i(q),Av=n(q,"LI",{});var ZRe=s(Av);F_e=n(ZRe,"STRONG",{});var vTt=s(F_e);GVo=r(vTt,"qdqbert"),vTt.forEach(t),OVo=r(ZRe," \u2014 "),wX=n(ZRe,"A",{href:!0});var FTt=s(wX);VVo=r(FTt,"QDQBertForSequenceClassification"),FTt.forEach(t),XVo=r(ZRe," (QDQBert model)"),ZRe.forEach(t),zVo=i(q),Lv=n(q,"LI",{});var ePe=s(Lv);T_e=n(ePe,"STRONG",{});var TTt=s(T_e);QVo=r(TTt,"reformer"),TTt.forEach(t),WVo=r(ePe," \u2014 "),AX=n(ePe,"A",{href:!0});var MTt=s(AX);HVo=r(MTt,"ReformerForSequenceClassification"),MTt.forEach(t),UVo=r(ePe," (Reformer model)"),ePe.forEach(t),JVo=i(q),yv=n(q,"LI",{});var oPe=s(yv);M_e=n(oPe,"STRONG",{});var ETt=s(M_e);YVo=r(ETt,"rembert"),ETt.forEach(t),KVo=r(oPe," \u2014 "),LX=n(oPe,"A",{href:!0});var CTt=s(LX);ZVo=r(CTt,"RemBertForSequenceClassification"),CTt.forEach(t),eXo=r(oPe," (RemBERT model)"),oPe.forEach(t),oXo=i(q),xv=n(q,"LI",{});var rPe=s(xv);E_e=n(rPe,"STRONG",{});var wTt=s(E_e);rXo=r(wTt,"roberta"),wTt.forEach(t),tXo=r(rPe," \u2014 "),yX=n(rPe,"A",{href:!0});var ATt=s(yX);aXo=r(ATt,"RobertaForSequenceClassification"),ATt.forEach(t),nXo=r(rPe," (RoBERTa model)"),rPe.forEach(t),sXo=i(q),$v=n(q,"LI",{});var tPe=s($v);C_e=n(tPe,"STRONG",{});var LTt=s(C_e);lXo=r(LTt,"roformer"),LTt.forEach(t),iXo=r(tPe," \u2014 "),xX=n(tPe,"A",{href:!0});var yTt=s(xX);dXo=r(yTt,"RoFormerForSequenceClassification"),yTt.forEach(t),cXo=r(tPe," (RoFormer model)"),tPe.forEach(t),fXo=i(q),kv=n(q,"LI",{});var aPe=s(kv);w_e=n(aPe,"STRONG",{});var xTt=s(w_e);mXo=r(xTt,"squeezebert"),xTt.forEach(t),gXo=r(aPe," \u2014 "),$X=n(aPe,"A",{href:!0});var $Tt=s($X);hXo=r($Tt,"SqueezeBertForSequenceClassification"),$Tt.forEach(t),pXo=r(aPe," (SqueezeBERT model)"),aPe.forEach(t),_Xo=i(q),Sv=n(q,"LI",{});var nPe=s(Sv);A_e=n(nPe,"STRONG",{});var kTt=s(A_e);uXo=r(kTt,"tapas"),kTt.forEach(t),bXo=r(nPe," \u2014 "),kX=n(nPe,"A",{href:!0});var STt=s(kX);vXo=r(STt,"TapasForSequenceClassification"),STt.forEach(t),FXo=r(nPe," (TAPAS model)"),nPe.forEach(t),TXo=i(q),Rv=n(q,"LI",{});var sPe=s(Rv);L_e=n(sPe,"STRONG",{});var RTt=s(L_e);MXo=r(RTt,"transfo-xl"),RTt.forEach(t),EXo=r(sPe," \u2014 "),SX=n(sPe,"A",{href:!0});var PTt=s(SX);CXo=r(PTt,"TransfoXLForSequenceClassification"),PTt.forEach(t),wXo=r(sPe," (Transformer-XL model)"),sPe.forEach(t),AXo=i(q),Pv=n(q,"LI",{});var lPe=s(Pv);y_e=n(lPe,"STRONG",{});var BTt=s(y_e);LXo=r(BTt,"xlm"),BTt.forEach(t),yXo=r(lPe," \u2014 "),RX=n(lPe,"A",{href:!0});var ITt=s(RX);xXo=r(ITt,"XLMForSequenceClassification"),ITt.forEach(t),$Xo=r(lPe," (XLM model)"),lPe.forEach(t),kXo=i(q),Bv=n(q,"LI",{});var iPe=s(Bv);x_e=n(iPe,"STRONG",{});var NTt=s(x_e);SXo=r(NTt,"xlm-roberta"),NTt.forEach(t),RXo=r(iPe," \u2014 "),PX=n(iPe,"A",{href:!0});var qTt=s(PX);PXo=r(qTt,"XLMRobertaForSequenceClassification"),qTt.forEach(t),BXo=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),IXo=i(q),Iv=n(q,"LI",{});var dPe=s(Iv);$_e=n(dPe,"STRONG",{});var jTt=s($_e);NXo=r(jTt,"xlm-roberta-xl"),jTt.forEach(t),qXo=r(dPe," \u2014 "),BX=n(dPe,"A",{href:!0});var DTt=s(BX);jXo=r(DTt,"XLMRobertaXLForSequenceClassification"),DTt.forEach(t),DXo=r(dPe," (XLM-RoBERTa-XL model)"),dPe.forEach(t),GXo=i(q),Nv=n(q,"LI",{});var cPe=s(Nv);k_e=n(cPe,"STRONG",{});var GTt=s(k_e);OXo=r(GTt,"xlnet"),GTt.forEach(t),VXo=r(cPe," \u2014 "),IX=n(cPe,"A",{href:!0});var OTt=s(IX);XXo=r(OTt,"XLNetForSequenceClassification"),OTt.forEach(t),zXo=r(cPe," (XLNet model)"),cPe.forEach(t),QXo=i(q),qv=n(q,"LI",{});var fPe=s(qv);S_e=n(fPe,"STRONG",{});var VTt=s(S_e);WXo=r(VTt,"yoso"),VTt.forEach(t),HXo=r(fPe," \u2014 "),NX=n(fPe,"A",{href:!0});var XTt=s(NX);UXo=r(XTt,"YosoForSequenceClassification"),XTt.forEach(t),JXo=r(fPe," (YOSO model)"),fPe.forEach(t),q.forEach(t),YXo=i(fa),jv=n(fa,"P",{});var mPe=s(jv);KXo=r(mPe,"The model is set in evaluation mode by default using "),R_e=n(mPe,"CODE",{});var zTt=s(R_e);ZXo=r(zTt,"model.eval()"),zTt.forEach(t),ezo=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(mPe,"CODE",{});var QTt=s(P_e);ozo=r(QTt,"model.train()"),QTt.forEach(t),mPe.forEach(t),rzo=i(fa),T(Dv.$$.fragment,fa),fa.forEach(t),nl.forEach(t),nXe=i(f),ad=n(f,"H2",{class:!0});var fQe=s(ad);Gv=n(fQe,"A",{id:!0,class:!0,href:!0});var WTt=s(Gv);B_e=n(WTt,"SPAN",{});var HTt=s(B_e);T(ry.$$.fragment,HTt),HTt.forEach(t),WTt.forEach(t),tzo=i(fQe),I_e=n(fQe,"SPAN",{});var UTt=s(I_e);azo=r(UTt,"AutoModelForMultipleChoice"),UTt.forEach(t),fQe.forEach(t),sXe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(ty.$$.fragment,sl),nzo=i(sl),nd=n(sl,"P",{});var Rre=s(nd);szo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qX=n(Rre,"A",{href:!0});var JTt=s(qX);lzo=r(JTt,"from_pretrained()"),JTt.forEach(t),izo=r(Rre," class method or the "),jX=n(Rre,"A",{href:!0});var YTt=s(jX);dzo=r(YTt,"from_config()"),YTt.forEach(t),czo=r(Rre,` class
method.`),Rre.forEach(t),fzo=i(sl),ay=n(sl,"P",{});var mQe=s(ay);mzo=r(mQe,"This class cannot be instantiated directly using "),N_e=n(mQe,"CODE",{});var KTt=s(N_e);gzo=r(KTt,"__init__()"),KTt.forEach(t),hzo=r(mQe," (throws an error)."),mQe.forEach(t),pzo=i(sl),gt=n(sl,"DIV",{class:!0});var _w=s(gt);T(ny.$$.fragment,_w),_zo=i(_w),q_e=n(_w,"P",{});var ZTt=s(q_e);uzo=r(ZTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZTt.forEach(t),bzo=i(_w),sd=n(_w,"P",{});var Pre=s(sd);vzo=r(Pre,`Note:
Loading a model from its configuration file does `),j_e=n(Pre,"STRONG",{});var e7t=s(j_e);Fzo=r(e7t,"not"),e7t.forEach(t),Tzo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(Pre,"A",{href:!0});var o7t=s(DX);Mzo=r(o7t,"from_pretrained()"),o7t.forEach(t),Ezo=r(Pre," to load the model weights."),Pre.forEach(t),Czo=i(_w),T(Ov.$$.fragment,_w),_w.forEach(t),wzo=i(sl),ro=n(sl,"DIV",{class:!0});var ma=s(ro);T(sy.$$.fragment,ma),Azo=i(ma),D_e=n(ma,"P",{});var r7t=s(D_e);Lzo=r(r7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r7t.forEach(t),yzo=i(ma),Ga=n(ma,"P",{});var uw=s(Ga);xzo=r(uw,"The model class to instantiate is selected based on the "),G_e=n(uw,"CODE",{});var t7t=s(G_e);$zo=r(t7t,"model_type"),t7t.forEach(t),kzo=r(uw,` property of the config object (either
passed as an argument or loaded from `),O_e=n(uw,"CODE",{});var a7t=s(O_e);Szo=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),Rzo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(uw,"CODE",{});var n7t=s(V_e);Pzo=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),Bzo=r(uw,":"),uw.forEach(t),Izo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Vv=n(ee,"LI",{});var gPe=s(Vv);X_e=n(gPe,"STRONG",{});var s7t=s(X_e);Nzo=r(s7t,"albert"),s7t.forEach(t),qzo=r(gPe," \u2014 "),GX=n(gPe,"A",{href:!0});var l7t=s(GX);jzo=r(l7t,"AlbertForMultipleChoice"),l7t.forEach(t),Dzo=r(gPe," (ALBERT model)"),gPe.forEach(t),Gzo=i(ee),Xv=n(ee,"LI",{});var hPe=s(Xv);z_e=n(hPe,"STRONG",{});var i7t=s(z_e);Ozo=r(i7t,"bert"),i7t.forEach(t),Vzo=r(hPe," \u2014 "),OX=n(hPe,"A",{href:!0});var d7t=s(OX);Xzo=r(d7t,"BertForMultipleChoice"),d7t.forEach(t),zzo=r(hPe," (BERT model)"),hPe.forEach(t),Qzo=i(ee),zv=n(ee,"LI",{});var pPe=s(zv);Q_e=n(pPe,"STRONG",{});var c7t=s(Q_e);Wzo=r(c7t,"big_bird"),c7t.forEach(t),Hzo=r(pPe," \u2014 "),VX=n(pPe,"A",{href:!0});var f7t=s(VX);Uzo=r(f7t,"BigBirdForMultipleChoice"),f7t.forEach(t),Jzo=r(pPe," (BigBird model)"),pPe.forEach(t),Yzo=i(ee),Qv=n(ee,"LI",{});var _Pe=s(Qv);W_e=n(_Pe,"STRONG",{});var m7t=s(W_e);Kzo=r(m7t,"camembert"),m7t.forEach(t),Zzo=r(_Pe," \u2014 "),XX=n(_Pe,"A",{href:!0});var g7t=s(XX);eQo=r(g7t,"CamembertForMultipleChoice"),g7t.forEach(t),oQo=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),rQo=i(ee),Wv=n(ee,"LI",{});var uPe=s(Wv);H_e=n(uPe,"STRONG",{});var h7t=s(H_e);tQo=r(h7t,"canine"),h7t.forEach(t),aQo=r(uPe," \u2014 "),zX=n(uPe,"A",{href:!0});var p7t=s(zX);nQo=r(p7t,"CanineForMultipleChoice"),p7t.forEach(t),sQo=r(uPe," (CANINE model)"),uPe.forEach(t),lQo=i(ee),Hv=n(ee,"LI",{});var bPe=s(Hv);U_e=n(bPe,"STRONG",{});var _7t=s(U_e);iQo=r(_7t,"convbert"),_7t.forEach(t),dQo=r(bPe," \u2014 "),QX=n(bPe,"A",{href:!0});var u7t=s(QX);cQo=r(u7t,"ConvBertForMultipleChoice"),u7t.forEach(t),fQo=r(bPe," (ConvBERT model)"),bPe.forEach(t),mQo=i(ee),Uv=n(ee,"LI",{});var vPe=s(Uv);J_e=n(vPe,"STRONG",{});var b7t=s(J_e);gQo=r(b7t,"data2vec-text"),b7t.forEach(t),hQo=r(vPe," \u2014 "),WX=n(vPe,"A",{href:!0});var v7t=s(WX);pQo=r(v7t,"Data2VecTextForMultipleChoice"),v7t.forEach(t),_Qo=r(vPe," (Data2VecText model)"),vPe.forEach(t),uQo=i(ee),Jv=n(ee,"LI",{});var FPe=s(Jv);Y_e=n(FPe,"STRONG",{});var F7t=s(Y_e);bQo=r(F7t,"deberta-v2"),F7t.forEach(t),vQo=r(FPe," \u2014 "),HX=n(FPe,"A",{href:!0});var T7t=s(HX);FQo=r(T7t,"DebertaV2ForMultipleChoice"),T7t.forEach(t),TQo=r(FPe," (DeBERTa-v2 model)"),FPe.forEach(t),MQo=i(ee),Yv=n(ee,"LI",{});var TPe=s(Yv);K_e=n(TPe,"STRONG",{});var M7t=s(K_e);EQo=r(M7t,"distilbert"),M7t.forEach(t),CQo=r(TPe," \u2014 "),UX=n(TPe,"A",{href:!0});var E7t=s(UX);wQo=r(E7t,"DistilBertForMultipleChoice"),E7t.forEach(t),AQo=r(TPe," (DistilBERT model)"),TPe.forEach(t),LQo=i(ee),Kv=n(ee,"LI",{});var MPe=s(Kv);Z_e=n(MPe,"STRONG",{});var C7t=s(Z_e);yQo=r(C7t,"electra"),C7t.forEach(t),xQo=r(MPe," \u2014 "),JX=n(MPe,"A",{href:!0});var w7t=s(JX);$Qo=r(w7t,"ElectraForMultipleChoice"),w7t.forEach(t),kQo=r(MPe," (ELECTRA model)"),MPe.forEach(t),SQo=i(ee),Zv=n(ee,"LI",{});var EPe=s(Zv);eue=n(EPe,"STRONG",{});var A7t=s(eue);RQo=r(A7t,"flaubert"),A7t.forEach(t),PQo=r(EPe," \u2014 "),YX=n(EPe,"A",{href:!0});var L7t=s(YX);BQo=r(L7t,"FlaubertForMultipleChoice"),L7t.forEach(t),IQo=r(EPe," (FlauBERT model)"),EPe.forEach(t),NQo=i(ee),e3=n(ee,"LI",{});var CPe=s(e3);oue=n(CPe,"STRONG",{});var y7t=s(oue);qQo=r(y7t,"fnet"),y7t.forEach(t),jQo=r(CPe," \u2014 "),KX=n(CPe,"A",{href:!0});var x7t=s(KX);DQo=r(x7t,"FNetForMultipleChoice"),x7t.forEach(t),GQo=r(CPe," (FNet model)"),CPe.forEach(t),OQo=i(ee),o3=n(ee,"LI",{});var wPe=s(o3);rue=n(wPe,"STRONG",{});var $7t=s(rue);VQo=r($7t,"funnel"),$7t.forEach(t),XQo=r(wPe," \u2014 "),ZX=n(wPe,"A",{href:!0});var k7t=s(ZX);zQo=r(k7t,"FunnelForMultipleChoice"),k7t.forEach(t),QQo=r(wPe," (Funnel Transformer model)"),wPe.forEach(t),WQo=i(ee),r3=n(ee,"LI",{});var APe=s(r3);tue=n(APe,"STRONG",{});var S7t=s(tue);HQo=r(S7t,"ibert"),S7t.forEach(t),UQo=r(APe," \u2014 "),ez=n(APe,"A",{href:!0});var R7t=s(ez);JQo=r(R7t,"IBertForMultipleChoice"),R7t.forEach(t),YQo=r(APe," (I-BERT model)"),APe.forEach(t),KQo=i(ee),t3=n(ee,"LI",{});var LPe=s(t3);aue=n(LPe,"STRONG",{});var P7t=s(aue);ZQo=r(P7t,"longformer"),P7t.forEach(t),eWo=r(LPe," \u2014 "),oz=n(LPe,"A",{href:!0});var B7t=s(oz);oWo=r(B7t,"LongformerForMultipleChoice"),B7t.forEach(t),rWo=r(LPe," (Longformer model)"),LPe.forEach(t),tWo=i(ee),a3=n(ee,"LI",{});var yPe=s(a3);nue=n(yPe,"STRONG",{});var I7t=s(nue);aWo=r(I7t,"megatron-bert"),I7t.forEach(t),nWo=r(yPe," \u2014 "),rz=n(yPe,"A",{href:!0});var N7t=s(rz);sWo=r(N7t,"MegatronBertForMultipleChoice"),N7t.forEach(t),lWo=r(yPe," (Megatron-BERT model)"),yPe.forEach(t),iWo=i(ee),n3=n(ee,"LI",{});var xPe=s(n3);sue=n(xPe,"STRONG",{});var q7t=s(sue);dWo=r(q7t,"mobilebert"),q7t.forEach(t),cWo=r(xPe," \u2014 "),tz=n(xPe,"A",{href:!0});var j7t=s(tz);fWo=r(j7t,"MobileBertForMultipleChoice"),j7t.forEach(t),mWo=r(xPe," (MobileBERT model)"),xPe.forEach(t),gWo=i(ee),s3=n(ee,"LI",{});var $Pe=s(s3);lue=n($Pe,"STRONG",{});var D7t=s(lue);hWo=r(D7t,"mpnet"),D7t.forEach(t),pWo=r($Pe," \u2014 "),az=n($Pe,"A",{href:!0});var G7t=s(az);_Wo=r(G7t,"MPNetForMultipleChoice"),G7t.forEach(t),uWo=r($Pe," (MPNet model)"),$Pe.forEach(t),bWo=i(ee),l3=n(ee,"LI",{});var kPe=s(l3);iue=n(kPe,"STRONG",{});var O7t=s(iue);vWo=r(O7t,"nezha"),O7t.forEach(t),FWo=r(kPe," \u2014 "),nz=n(kPe,"A",{href:!0});var V7t=s(nz);TWo=r(V7t,"NezhaForMultipleChoice"),V7t.forEach(t),MWo=r(kPe," (Nezha model)"),kPe.forEach(t),EWo=i(ee),i3=n(ee,"LI",{});var SPe=s(i3);due=n(SPe,"STRONG",{});var X7t=s(due);CWo=r(X7t,"nystromformer"),X7t.forEach(t),wWo=r(SPe," \u2014 "),sz=n(SPe,"A",{href:!0});var z7t=s(sz);AWo=r(z7t,"NystromformerForMultipleChoice"),z7t.forEach(t),LWo=r(SPe," (Nystr\xF6mformer model)"),SPe.forEach(t),yWo=i(ee),d3=n(ee,"LI",{});var RPe=s(d3);cue=n(RPe,"STRONG",{});var Q7t=s(cue);xWo=r(Q7t,"qdqbert"),Q7t.forEach(t),$Wo=r(RPe," \u2014 "),lz=n(RPe,"A",{href:!0});var W7t=s(lz);kWo=r(W7t,"QDQBertForMultipleChoice"),W7t.forEach(t),SWo=r(RPe," (QDQBert model)"),RPe.forEach(t),RWo=i(ee),c3=n(ee,"LI",{});var PPe=s(c3);fue=n(PPe,"STRONG",{});var H7t=s(fue);PWo=r(H7t,"rembert"),H7t.forEach(t),BWo=r(PPe," \u2014 "),iz=n(PPe,"A",{href:!0});var U7t=s(iz);IWo=r(U7t,"RemBertForMultipleChoice"),U7t.forEach(t),NWo=r(PPe," (RemBERT model)"),PPe.forEach(t),qWo=i(ee),f3=n(ee,"LI",{});var BPe=s(f3);mue=n(BPe,"STRONG",{});var J7t=s(mue);jWo=r(J7t,"roberta"),J7t.forEach(t),DWo=r(BPe," \u2014 "),dz=n(BPe,"A",{href:!0});var Y7t=s(dz);GWo=r(Y7t,"RobertaForMultipleChoice"),Y7t.forEach(t),OWo=r(BPe," (RoBERTa model)"),BPe.forEach(t),VWo=i(ee),m3=n(ee,"LI",{});var IPe=s(m3);gue=n(IPe,"STRONG",{});var K7t=s(gue);XWo=r(K7t,"roformer"),K7t.forEach(t),zWo=r(IPe," \u2014 "),cz=n(IPe,"A",{href:!0});var Z7t=s(cz);QWo=r(Z7t,"RoFormerForMultipleChoice"),Z7t.forEach(t),WWo=r(IPe," (RoFormer model)"),IPe.forEach(t),HWo=i(ee),g3=n(ee,"LI",{});var NPe=s(g3);hue=n(NPe,"STRONG",{});var e9t=s(hue);UWo=r(e9t,"squeezebert"),e9t.forEach(t),JWo=r(NPe," \u2014 "),fz=n(NPe,"A",{href:!0});var o9t=s(fz);YWo=r(o9t,"SqueezeBertForMultipleChoice"),o9t.forEach(t),KWo=r(NPe," (SqueezeBERT model)"),NPe.forEach(t),ZWo=i(ee),h3=n(ee,"LI",{});var qPe=s(h3);pue=n(qPe,"STRONG",{});var r9t=s(pue);eHo=r(r9t,"xlm"),r9t.forEach(t),oHo=r(qPe," \u2014 "),mz=n(qPe,"A",{href:!0});var t9t=s(mz);rHo=r(t9t,"XLMForMultipleChoice"),t9t.forEach(t),tHo=r(qPe," (XLM model)"),qPe.forEach(t),aHo=i(ee),p3=n(ee,"LI",{});var jPe=s(p3);_ue=n(jPe,"STRONG",{});var a9t=s(_ue);nHo=r(a9t,"xlm-roberta"),a9t.forEach(t),sHo=r(jPe," \u2014 "),gz=n(jPe,"A",{href:!0});var n9t=s(gz);lHo=r(n9t,"XLMRobertaForMultipleChoice"),n9t.forEach(t),iHo=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),dHo=i(ee),_3=n(ee,"LI",{});var DPe=s(_3);uue=n(DPe,"STRONG",{});var s9t=s(uue);cHo=r(s9t,"xlm-roberta-xl"),s9t.forEach(t),fHo=r(DPe," \u2014 "),hz=n(DPe,"A",{href:!0});var l9t=s(hz);mHo=r(l9t,"XLMRobertaXLForMultipleChoice"),l9t.forEach(t),gHo=r(DPe," (XLM-RoBERTa-XL model)"),DPe.forEach(t),hHo=i(ee),u3=n(ee,"LI",{});var GPe=s(u3);bue=n(GPe,"STRONG",{});var i9t=s(bue);pHo=r(i9t,"xlnet"),i9t.forEach(t),_Ho=r(GPe," \u2014 "),pz=n(GPe,"A",{href:!0});var d9t=s(pz);uHo=r(d9t,"XLNetForMultipleChoice"),d9t.forEach(t),bHo=r(GPe," (XLNet model)"),GPe.forEach(t),vHo=i(ee),b3=n(ee,"LI",{});var OPe=s(b3);vue=n(OPe,"STRONG",{});var c9t=s(vue);FHo=r(c9t,"yoso"),c9t.forEach(t),THo=r(OPe," \u2014 "),_z=n(OPe,"A",{href:!0});var f9t=s(_z);MHo=r(f9t,"YosoForMultipleChoice"),f9t.forEach(t),EHo=r(OPe," (YOSO model)"),OPe.forEach(t),ee.forEach(t),CHo=i(ma),v3=n(ma,"P",{});var VPe=s(v3);wHo=r(VPe,"The model is set in evaluation mode by default using "),Fue=n(VPe,"CODE",{});var m9t=s(Fue);AHo=r(m9t,"model.eval()"),m9t.forEach(t),LHo=r(VPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n(VPe,"CODE",{});var g9t=s(Tue);yHo=r(g9t,"model.train()"),g9t.forEach(t),VPe.forEach(t),xHo=i(ma),T(F3.$$.fragment,ma),ma.forEach(t),sl.forEach(t),lXe=i(f),ld=n(f,"H2",{class:!0});var gQe=s(ld);T3=n(gQe,"A",{id:!0,class:!0,href:!0});var h9t=s(T3);Mue=n(h9t,"SPAN",{});var p9t=s(Mue);T(ly.$$.fragment,p9t),p9t.forEach(t),h9t.forEach(t),$Ho=i(gQe),Eue=n(gQe,"SPAN",{});var _9t=s(Eue);kHo=r(_9t,"AutoModelForNextSentencePrediction"),_9t.forEach(t),gQe.forEach(t),iXe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(iy.$$.fragment,ll),SHo=i(ll),id=n(ll,"P",{});var Bre=s(id);RHo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uz=n(Bre,"A",{href:!0});var u9t=s(uz);PHo=r(u9t,"from_pretrained()"),u9t.forEach(t),BHo=r(Bre," class method or the "),bz=n(Bre,"A",{href:!0});var b9t=s(bz);IHo=r(b9t,"from_config()"),b9t.forEach(t),NHo=r(Bre,` class
method.`),Bre.forEach(t),qHo=i(ll),dy=n(ll,"P",{});var hQe=s(dy);jHo=r(hQe,"This class cannot be instantiated directly using "),Cue=n(hQe,"CODE",{});var v9t=s(Cue);DHo=r(v9t,"__init__()"),v9t.forEach(t),GHo=r(hQe," (throws an error)."),hQe.forEach(t),OHo=i(ll),ht=n(ll,"DIV",{class:!0});var bw=s(ht);T(cy.$$.fragment,bw),VHo=i(bw),wue=n(bw,"P",{});var F9t=s(wue);XHo=r(F9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),F9t.forEach(t),zHo=i(bw),dd=n(bw,"P",{});var Ire=s(dd);QHo=r(Ire,`Note:
Loading a model from its configuration file does `),Aue=n(Ire,"STRONG",{});var T9t=s(Aue);WHo=r(T9t,"not"),T9t.forEach(t),HHo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(Ire,"A",{href:!0});var M9t=s(vz);UHo=r(M9t,"from_pretrained()"),M9t.forEach(t),JHo=r(Ire," to load the model weights."),Ire.forEach(t),YHo=i(bw),T(M3.$$.fragment,bw),bw.forEach(t),KHo=i(ll),to=n(ll,"DIV",{class:!0});var ga=s(to);T(fy.$$.fragment,ga),ZHo=i(ga),Lue=n(ga,"P",{});var E9t=s(Lue);eUo=r(E9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),E9t.forEach(t),oUo=i(ga),Oa=n(ga,"P",{});var vw=s(Oa);rUo=r(vw,"The model class to instantiate is selected based on the "),yue=n(vw,"CODE",{});var C9t=s(yue);tUo=r(C9t,"model_type"),C9t.forEach(t),aUo=r(vw,` property of the config object (either
passed as an argument or loaded from `),xue=n(vw,"CODE",{});var w9t=s(xue);nUo=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),sUo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(vw,"CODE",{});var A9t=s($ue);lUo=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),iUo=r(vw,":"),vw.forEach(t),dUo=i(ga),No=n(ga,"UL",{});var ha=s(No);E3=n(ha,"LI",{});var XPe=s(E3);kue=n(XPe,"STRONG",{});var L9t=s(kue);cUo=r(L9t,"bert"),L9t.forEach(t),fUo=r(XPe," \u2014 "),Fz=n(XPe,"A",{href:!0});var y9t=s(Fz);mUo=r(y9t,"BertForNextSentencePrediction"),y9t.forEach(t),gUo=r(XPe," (BERT model)"),XPe.forEach(t),hUo=i(ha),C3=n(ha,"LI",{});var zPe=s(C3);Sue=n(zPe,"STRONG",{});var x9t=s(Sue);pUo=r(x9t,"fnet"),x9t.forEach(t),_Uo=r(zPe," \u2014 "),Tz=n(zPe,"A",{href:!0});var $9t=s(Tz);uUo=r($9t,"FNetForNextSentencePrediction"),$9t.forEach(t),bUo=r(zPe," (FNet model)"),zPe.forEach(t),vUo=i(ha),w3=n(ha,"LI",{});var QPe=s(w3);Rue=n(QPe,"STRONG",{});var k9t=s(Rue);FUo=r(k9t,"megatron-bert"),k9t.forEach(t),TUo=r(QPe," \u2014 "),Mz=n(QPe,"A",{href:!0});var S9t=s(Mz);MUo=r(S9t,"MegatronBertForNextSentencePrediction"),S9t.forEach(t),EUo=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),CUo=i(ha),A3=n(ha,"LI",{});var WPe=s(A3);Pue=n(WPe,"STRONG",{});var R9t=s(Pue);wUo=r(R9t,"mobilebert"),R9t.forEach(t),AUo=r(WPe," \u2014 "),Ez=n(WPe,"A",{href:!0});var P9t=s(Ez);LUo=r(P9t,"MobileBertForNextSentencePrediction"),P9t.forEach(t),yUo=r(WPe," (MobileBERT model)"),WPe.forEach(t),xUo=i(ha),L3=n(ha,"LI",{});var HPe=s(L3);Bue=n(HPe,"STRONG",{});var B9t=s(Bue);$Uo=r(B9t,"nezha"),B9t.forEach(t),kUo=r(HPe," \u2014 "),Cz=n(HPe,"A",{href:!0});var I9t=s(Cz);SUo=r(I9t,"NezhaForNextSentencePrediction"),I9t.forEach(t),RUo=r(HPe," (Nezha model)"),HPe.forEach(t),PUo=i(ha),y3=n(ha,"LI",{});var UPe=s(y3);Iue=n(UPe,"STRONG",{});var N9t=s(Iue);BUo=r(N9t,"qdqbert"),N9t.forEach(t),IUo=r(UPe," \u2014 "),wz=n(UPe,"A",{href:!0});var q9t=s(wz);NUo=r(q9t,"QDQBertForNextSentencePrediction"),q9t.forEach(t),qUo=r(UPe," (QDQBert model)"),UPe.forEach(t),ha.forEach(t),jUo=i(ga),x3=n(ga,"P",{});var JPe=s(x3);DUo=r(JPe,"The model is set in evaluation mode by default using "),Nue=n(JPe,"CODE",{});var j9t=s(Nue);GUo=r(j9t,"model.eval()"),j9t.forEach(t),OUo=r(JPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(JPe,"CODE",{});var D9t=s(que);VUo=r(D9t,"model.train()"),D9t.forEach(t),JPe.forEach(t),XUo=i(ga),T($3.$$.fragment,ga),ga.forEach(t),ll.forEach(t),dXe=i(f),cd=n(f,"H2",{class:!0});var pQe=s(cd);k3=n(pQe,"A",{id:!0,class:!0,href:!0});var G9t=s(k3);jue=n(G9t,"SPAN",{});var O9t=s(jue);T(my.$$.fragment,O9t),O9t.forEach(t),G9t.forEach(t),zUo=i(pQe),Due=n(pQe,"SPAN",{});var V9t=s(Due);QUo=r(V9t,"AutoModelForTokenClassification"),V9t.forEach(t),pQe.forEach(t),cXe=i(f),qo=n(f,"DIV",{class:!0});var il=s(qo);T(gy.$$.fragment,il),WUo=i(il),fd=n(il,"P",{});var Nre=s(fd);HUo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Az=n(Nre,"A",{href:!0});var X9t=s(Az);UUo=r(X9t,"from_pretrained()"),X9t.forEach(t),JUo=r(Nre," class method or the "),Lz=n(Nre,"A",{href:!0});var z9t=s(Lz);YUo=r(z9t,"from_config()"),z9t.forEach(t),KUo=r(Nre,` class
method.`),Nre.forEach(t),ZUo=i(il),hy=n(il,"P",{});var _Qe=s(hy);eJo=r(_Qe,"This class cannot be instantiated directly using "),Gue=n(_Qe,"CODE",{});var Q9t=s(Gue);oJo=r(Q9t,"__init__()"),Q9t.forEach(t),rJo=r(_Qe," (throws an error)."),_Qe.forEach(t),tJo=i(il),pt=n(il,"DIV",{class:!0});var Fw=s(pt);T(py.$$.fragment,Fw),aJo=i(Fw),Oue=n(Fw,"P",{});var W9t=s(Oue);nJo=r(W9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W9t.forEach(t),sJo=i(Fw),md=n(Fw,"P",{});var qre=s(md);lJo=r(qre,`Note:
Loading a model from its configuration file does `),Vue=n(qre,"STRONG",{});var H9t=s(Vue);iJo=r(H9t,"not"),H9t.forEach(t),dJo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(qre,"A",{href:!0});var U9t=s(yz);cJo=r(U9t,"from_pretrained()"),U9t.forEach(t),fJo=r(qre," to load the model weights."),qre.forEach(t),mJo=i(Fw),T(S3.$$.fragment,Fw),Fw.forEach(t),gJo=i(il),ao=n(il,"DIV",{class:!0});var pa=s(ao);T(_y.$$.fragment,pa),hJo=i(pa),Xue=n(pa,"P",{});var J9t=s(Xue);pJo=r(J9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J9t.forEach(t),_Jo=i(pa),Va=n(pa,"P",{});var Tw=s(Va);uJo=r(Tw,"The model class to instantiate is selected based on the "),zue=n(Tw,"CODE",{});var Y9t=s(zue);bJo=r(Y9t,"model_type"),Y9t.forEach(t),vJo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Que=n(Tw,"CODE",{});var K9t=s(Que);FJo=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),TJo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(Tw,"CODE",{});var Z9t=s(Wue);MJo=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),EJo=r(Tw,":"),Tw.forEach(t),CJo=i(pa),U=n(pa,"UL",{});var J=s(U);R3=n(J,"LI",{});var YPe=s(R3);Hue=n(YPe,"STRONG",{});var eMt=s(Hue);wJo=r(eMt,"albert"),eMt.forEach(t),AJo=r(YPe," \u2014 "),xz=n(YPe,"A",{href:!0});var oMt=s(xz);LJo=r(oMt,"AlbertForTokenClassification"),oMt.forEach(t),yJo=r(YPe," (ALBERT model)"),YPe.forEach(t),xJo=i(J),P3=n(J,"LI",{});var KPe=s(P3);Uue=n(KPe,"STRONG",{});var rMt=s(Uue);$Jo=r(rMt,"bert"),rMt.forEach(t),kJo=r(KPe," \u2014 "),$z=n(KPe,"A",{href:!0});var tMt=s($z);SJo=r(tMt,"BertForTokenClassification"),tMt.forEach(t),RJo=r(KPe," (BERT model)"),KPe.forEach(t),PJo=i(J),B3=n(J,"LI",{});var ZPe=s(B3);Jue=n(ZPe,"STRONG",{});var aMt=s(Jue);BJo=r(aMt,"big_bird"),aMt.forEach(t),IJo=r(ZPe," \u2014 "),kz=n(ZPe,"A",{href:!0});var nMt=s(kz);NJo=r(nMt,"BigBirdForTokenClassification"),nMt.forEach(t),qJo=r(ZPe," (BigBird model)"),ZPe.forEach(t),jJo=i(J),I3=n(J,"LI",{});var eBe=s(I3);Yue=n(eBe,"STRONG",{});var sMt=s(Yue);DJo=r(sMt,"bloom"),sMt.forEach(t),GJo=r(eBe," \u2014 "),Sz=n(eBe,"A",{href:!0});var lMt=s(Sz);OJo=r(lMt,"BloomForTokenClassification"),lMt.forEach(t),VJo=r(eBe," (BLOOM model)"),eBe.forEach(t),XJo=i(J),N3=n(J,"LI",{});var oBe=s(N3);Kue=n(oBe,"STRONG",{});var iMt=s(Kue);zJo=r(iMt,"camembert"),iMt.forEach(t),QJo=r(oBe," \u2014 "),Rz=n(oBe,"A",{href:!0});var dMt=s(Rz);WJo=r(dMt,"CamembertForTokenClassification"),dMt.forEach(t),HJo=r(oBe," (CamemBERT model)"),oBe.forEach(t),UJo=i(J),q3=n(J,"LI",{});var rBe=s(q3);Zue=n(rBe,"STRONG",{});var cMt=s(Zue);JJo=r(cMt,"canine"),cMt.forEach(t),YJo=r(rBe," \u2014 "),Pz=n(rBe,"A",{href:!0});var fMt=s(Pz);KJo=r(fMt,"CanineForTokenClassification"),fMt.forEach(t),ZJo=r(rBe," (CANINE model)"),rBe.forEach(t),eYo=i(J),j3=n(J,"LI",{});var tBe=s(j3);e1e=n(tBe,"STRONG",{});var mMt=s(e1e);oYo=r(mMt,"convbert"),mMt.forEach(t),rYo=r(tBe," \u2014 "),Bz=n(tBe,"A",{href:!0});var gMt=s(Bz);tYo=r(gMt,"ConvBertForTokenClassification"),gMt.forEach(t),aYo=r(tBe," (ConvBERT model)"),tBe.forEach(t),nYo=i(J),D3=n(J,"LI",{});var aBe=s(D3);o1e=n(aBe,"STRONG",{});var hMt=s(o1e);sYo=r(hMt,"data2vec-text"),hMt.forEach(t),lYo=r(aBe," \u2014 "),Iz=n(aBe,"A",{href:!0});var pMt=s(Iz);iYo=r(pMt,"Data2VecTextForTokenClassification"),pMt.forEach(t),dYo=r(aBe," (Data2VecText model)"),aBe.forEach(t),cYo=i(J),G3=n(J,"LI",{});var nBe=s(G3);r1e=n(nBe,"STRONG",{});var _Mt=s(r1e);fYo=r(_Mt,"deberta"),_Mt.forEach(t),mYo=r(nBe," \u2014 "),Nz=n(nBe,"A",{href:!0});var uMt=s(Nz);gYo=r(uMt,"DebertaForTokenClassification"),uMt.forEach(t),hYo=r(nBe," (DeBERTa model)"),nBe.forEach(t),pYo=i(J),O3=n(J,"LI",{});var sBe=s(O3);t1e=n(sBe,"STRONG",{});var bMt=s(t1e);_Yo=r(bMt,"deberta-v2"),bMt.forEach(t),uYo=r(sBe," \u2014 "),qz=n(sBe,"A",{href:!0});var vMt=s(qz);bYo=r(vMt,"DebertaV2ForTokenClassification"),vMt.forEach(t),vYo=r(sBe," (DeBERTa-v2 model)"),sBe.forEach(t),FYo=i(J),V3=n(J,"LI",{});var lBe=s(V3);a1e=n(lBe,"STRONG",{});var FMt=s(a1e);TYo=r(FMt,"distilbert"),FMt.forEach(t),MYo=r(lBe," \u2014 "),jz=n(lBe,"A",{href:!0});var TMt=s(jz);EYo=r(TMt,"DistilBertForTokenClassification"),TMt.forEach(t),CYo=r(lBe," (DistilBERT model)"),lBe.forEach(t),wYo=i(J),X3=n(J,"LI",{});var iBe=s(X3);n1e=n(iBe,"STRONG",{});var MMt=s(n1e);AYo=r(MMt,"electra"),MMt.forEach(t),LYo=r(iBe," \u2014 "),Dz=n(iBe,"A",{href:!0});var EMt=s(Dz);yYo=r(EMt,"ElectraForTokenClassification"),EMt.forEach(t),xYo=r(iBe," (ELECTRA model)"),iBe.forEach(t),$Yo=i(J),z3=n(J,"LI",{});var dBe=s(z3);s1e=n(dBe,"STRONG",{});var CMt=s(s1e);kYo=r(CMt,"flaubert"),CMt.forEach(t),SYo=r(dBe," \u2014 "),Gz=n(dBe,"A",{href:!0});var wMt=s(Gz);RYo=r(wMt,"FlaubertForTokenClassification"),wMt.forEach(t),PYo=r(dBe," (FlauBERT model)"),dBe.forEach(t),BYo=i(J),Q3=n(J,"LI",{});var cBe=s(Q3);l1e=n(cBe,"STRONG",{});var AMt=s(l1e);IYo=r(AMt,"fnet"),AMt.forEach(t),NYo=r(cBe," \u2014 "),Oz=n(cBe,"A",{href:!0});var LMt=s(Oz);qYo=r(LMt,"FNetForTokenClassification"),LMt.forEach(t),jYo=r(cBe," (FNet model)"),cBe.forEach(t),DYo=i(J),W3=n(J,"LI",{});var fBe=s(W3);i1e=n(fBe,"STRONG",{});var yMt=s(i1e);GYo=r(yMt,"funnel"),yMt.forEach(t),OYo=r(fBe," \u2014 "),Vz=n(fBe,"A",{href:!0});var xMt=s(Vz);VYo=r(xMt,"FunnelForTokenClassification"),xMt.forEach(t),XYo=r(fBe," (Funnel Transformer model)"),fBe.forEach(t),zYo=i(J),H3=n(J,"LI",{});var mBe=s(H3);d1e=n(mBe,"STRONG",{});var $Mt=s(d1e);QYo=r($Mt,"gpt2"),$Mt.forEach(t),WYo=r(mBe," \u2014 "),Xz=n(mBe,"A",{href:!0});var kMt=s(Xz);HYo=r(kMt,"GPT2ForTokenClassification"),kMt.forEach(t),UYo=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),JYo=i(J),U3=n(J,"LI",{});var gBe=s(U3);c1e=n(gBe,"STRONG",{});var SMt=s(c1e);YYo=r(SMt,"ibert"),SMt.forEach(t),KYo=r(gBe," \u2014 "),zz=n(gBe,"A",{href:!0});var RMt=s(zz);ZYo=r(RMt,"IBertForTokenClassification"),RMt.forEach(t),eKo=r(gBe," (I-BERT model)"),gBe.forEach(t),oKo=i(J),J3=n(J,"LI",{});var hBe=s(J3);f1e=n(hBe,"STRONG",{});var PMt=s(f1e);rKo=r(PMt,"layoutlm"),PMt.forEach(t),tKo=r(hBe," \u2014 "),Qz=n(hBe,"A",{href:!0});var BMt=s(Qz);aKo=r(BMt,"LayoutLMForTokenClassification"),BMt.forEach(t),nKo=r(hBe," (LayoutLM model)"),hBe.forEach(t),sKo=i(J),Y3=n(J,"LI",{});var pBe=s(Y3);m1e=n(pBe,"STRONG",{});var IMt=s(m1e);lKo=r(IMt,"layoutlmv2"),IMt.forEach(t),iKo=r(pBe," \u2014 "),Wz=n(pBe,"A",{href:!0});var NMt=s(Wz);dKo=r(NMt,"LayoutLMv2ForTokenClassification"),NMt.forEach(t),cKo=r(pBe," (LayoutLMv2 model)"),pBe.forEach(t),fKo=i(J),K3=n(J,"LI",{});var _Be=s(K3);g1e=n(_Be,"STRONG",{});var qMt=s(g1e);mKo=r(qMt,"layoutlmv3"),qMt.forEach(t),gKo=r(_Be," \u2014 "),Hz=n(_Be,"A",{href:!0});var jMt=s(Hz);hKo=r(jMt,"LayoutLMv3ForTokenClassification"),jMt.forEach(t),pKo=r(_Be," (LayoutLMv3 model)"),_Be.forEach(t),_Ko=i(J),Z3=n(J,"LI",{});var uBe=s(Z3);h1e=n(uBe,"STRONG",{});var DMt=s(h1e);uKo=r(DMt,"longformer"),DMt.forEach(t),bKo=r(uBe," \u2014 "),Uz=n(uBe,"A",{href:!0});var GMt=s(Uz);vKo=r(GMt,"LongformerForTokenClassification"),GMt.forEach(t),FKo=r(uBe," (Longformer model)"),uBe.forEach(t),TKo=i(J),eF=n(J,"LI",{});var bBe=s(eF);p1e=n(bBe,"STRONG",{});var OMt=s(p1e);MKo=r(OMt,"megatron-bert"),OMt.forEach(t),EKo=r(bBe," \u2014 "),Jz=n(bBe,"A",{href:!0});var VMt=s(Jz);CKo=r(VMt,"MegatronBertForTokenClassification"),VMt.forEach(t),wKo=r(bBe," (Megatron-BERT model)"),bBe.forEach(t),AKo=i(J),oF=n(J,"LI",{});var vBe=s(oF);_1e=n(vBe,"STRONG",{});var XMt=s(_1e);LKo=r(XMt,"mobilebert"),XMt.forEach(t),yKo=r(vBe," \u2014 "),Yz=n(vBe,"A",{href:!0});var zMt=s(Yz);xKo=r(zMt,"MobileBertForTokenClassification"),zMt.forEach(t),$Ko=r(vBe," (MobileBERT model)"),vBe.forEach(t),kKo=i(J),rF=n(J,"LI",{});var FBe=s(rF);u1e=n(FBe,"STRONG",{});var QMt=s(u1e);SKo=r(QMt,"mpnet"),QMt.forEach(t),RKo=r(FBe," \u2014 "),Kz=n(FBe,"A",{href:!0});var WMt=s(Kz);PKo=r(WMt,"MPNetForTokenClassification"),WMt.forEach(t),BKo=r(FBe," (MPNet model)"),FBe.forEach(t),IKo=i(J),tF=n(J,"LI",{});var TBe=s(tF);b1e=n(TBe,"STRONG",{});var HMt=s(b1e);NKo=r(HMt,"nezha"),HMt.forEach(t),qKo=r(TBe," \u2014 "),Zz=n(TBe,"A",{href:!0});var UMt=s(Zz);jKo=r(UMt,"NezhaForTokenClassification"),UMt.forEach(t),DKo=r(TBe," (Nezha model)"),TBe.forEach(t),GKo=i(J),aF=n(J,"LI",{});var MBe=s(aF);v1e=n(MBe,"STRONG",{});var JMt=s(v1e);OKo=r(JMt,"nystromformer"),JMt.forEach(t),VKo=r(MBe," \u2014 "),eQ=n(MBe,"A",{href:!0});var YMt=s(eQ);XKo=r(YMt,"NystromformerForTokenClassification"),YMt.forEach(t),zKo=r(MBe," (Nystr\xF6mformer model)"),MBe.forEach(t),QKo=i(J),nF=n(J,"LI",{});var EBe=s(nF);F1e=n(EBe,"STRONG",{});var KMt=s(F1e);WKo=r(KMt,"qdqbert"),KMt.forEach(t),HKo=r(EBe," \u2014 "),oQ=n(EBe,"A",{href:!0});var ZMt=s(oQ);UKo=r(ZMt,"QDQBertForTokenClassification"),ZMt.forEach(t),JKo=r(EBe," (QDQBert model)"),EBe.forEach(t),YKo=i(J),sF=n(J,"LI",{});var CBe=s(sF);T1e=n(CBe,"STRONG",{});var e4t=s(T1e);KKo=r(e4t,"rembert"),e4t.forEach(t),ZKo=r(CBe," \u2014 "),rQ=n(CBe,"A",{href:!0});var o4t=s(rQ);eZo=r(o4t,"RemBertForTokenClassification"),o4t.forEach(t),oZo=r(CBe," (RemBERT model)"),CBe.forEach(t),rZo=i(J),lF=n(J,"LI",{});var wBe=s(lF);M1e=n(wBe,"STRONG",{});var r4t=s(M1e);tZo=r(r4t,"roberta"),r4t.forEach(t),aZo=r(wBe," \u2014 "),tQ=n(wBe,"A",{href:!0});var t4t=s(tQ);nZo=r(t4t,"RobertaForTokenClassification"),t4t.forEach(t),sZo=r(wBe," (RoBERTa model)"),wBe.forEach(t),lZo=i(J),iF=n(J,"LI",{});var ABe=s(iF);E1e=n(ABe,"STRONG",{});var a4t=s(E1e);iZo=r(a4t,"roformer"),a4t.forEach(t),dZo=r(ABe," \u2014 "),aQ=n(ABe,"A",{href:!0});var n4t=s(aQ);cZo=r(n4t,"RoFormerForTokenClassification"),n4t.forEach(t),fZo=r(ABe," (RoFormer model)"),ABe.forEach(t),mZo=i(J),dF=n(J,"LI",{});var LBe=s(dF);C1e=n(LBe,"STRONG",{});var s4t=s(C1e);gZo=r(s4t,"squeezebert"),s4t.forEach(t),hZo=r(LBe," \u2014 "),nQ=n(LBe,"A",{href:!0});var l4t=s(nQ);pZo=r(l4t,"SqueezeBertForTokenClassification"),l4t.forEach(t),_Zo=r(LBe," (SqueezeBERT model)"),LBe.forEach(t),uZo=i(J),cF=n(J,"LI",{});var yBe=s(cF);w1e=n(yBe,"STRONG",{});var i4t=s(w1e);bZo=r(i4t,"xlm"),i4t.forEach(t),vZo=r(yBe," \u2014 "),sQ=n(yBe,"A",{href:!0});var d4t=s(sQ);FZo=r(d4t,"XLMForTokenClassification"),d4t.forEach(t),TZo=r(yBe," (XLM model)"),yBe.forEach(t),MZo=i(J),fF=n(J,"LI",{});var xBe=s(fF);A1e=n(xBe,"STRONG",{});var c4t=s(A1e);EZo=r(c4t,"xlm-roberta"),c4t.forEach(t),CZo=r(xBe," \u2014 "),lQ=n(xBe,"A",{href:!0});var f4t=s(lQ);wZo=r(f4t,"XLMRobertaForTokenClassification"),f4t.forEach(t),AZo=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),LZo=i(J),mF=n(J,"LI",{});var $Be=s(mF);L1e=n($Be,"STRONG",{});var m4t=s(L1e);yZo=r(m4t,"xlm-roberta-xl"),m4t.forEach(t),xZo=r($Be," \u2014 "),iQ=n($Be,"A",{href:!0});var g4t=s(iQ);$Zo=r(g4t,"XLMRobertaXLForTokenClassification"),g4t.forEach(t),kZo=r($Be," (XLM-RoBERTa-XL model)"),$Be.forEach(t),SZo=i(J),gF=n(J,"LI",{});var kBe=s(gF);y1e=n(kBe,"STRONG",{});var h4t=s(y1e);RZo=r(h4t,"xlnet"),h4t.forEach(t),PZo=r(kBe," \u2014 "),dQ=n(kBe,"A",{href:!0});var p4t=s(dQ);BZo=r(p4t,"XLNetForTokenClassification"),p4t.forEach(t),IZo=r(kBe," (XLNet model)"),kBe.forEach(t),NZo=i(J),hF=n(J,"LI",{});var SBe=s(hF);x1e=n(SBe,"STRONG",{});var _4t=s(x1e);qZo=r(_4t,"yoso"),_4t.forEach(t),jZo=r(SBe," \u2014 "),cQ=n(SBe,"A",{href:!0});var u4t=s(cQ);DZo=r(u4t,"YosoForTokenClassification"),u4t.forEach(t),GZo=r(SBe," (YOSO model)"),SBe.forEach(t),J.forEach(t),OZo=i(pa),pF=n(pa,"P",{});var RBe=s(pF);VZo=r(RBe,"The model is set in evaluation mode by default using "),$1e=n(RBe,"CODE",{});var b4t=s($1e);XZo=r(b4t,"model.eval()"),b4t.forEach(t),zZo=r(RBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(RBe,"CODE",{});var v4t=s(k1e);QZo=r(v4t,"model.train()"),v4t.forEach(t),RBe.forEach(t),WZo=i(pa),T(_F.$$.fragment,pa),pa.forEach(t),il.forEach(t),fXe=i(f),gd=n(f,"H2",{class:!0});var uQe=s(gd);uF=n(uQe,"A",{id:!0,class:!0,href:!0});var F4t=s(uF);S1e=n(F4t,"SPAN",{});var T4t=s(S1e);T(uy.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),HZo=i(uQe),R1e=n(uQe,"SPAN",{});var M4t=s(R1e);UZo=r(M4t,"AutoModelForQuestionAnswering"),M4t.forEach(t),uQe.forEach(t),mXe=i(f),jo=n(f,"DIV",{class:!0});var dl=s(jo);T(by.$$.fragment,dl),JZo=i(dl),hd=n(dl,"P",{});var jre=s(hd);YZo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fQ=n(jre,"A",{href:!0});var E4t=s(fQ);KZo=r(E4t,"from_pretrained()"),E4t.forEach(t),ZZo=r(jre," class method or the "),mQ=n(jre,"A",{href:!0});var C4t=s(mQ);eer=r(C4t,"from_config()"),C4t.forEach(t),oer=r(jre,` class
method.`),jre.forEach(t),rer=i(dl),vy=n(dl,"P",{});var bQe=s(vy);ter=r(bQe,"This class cannot be instantiated directly using "),P1e=n(bQe,"CODE",{});var w4t=s(P1e);aer=r(w4t,"__init__()"),w4t.forEach(t),ner=r(bQe," (throws an error)."),bQe.forEach(t),ser=i(dl),_t=n(dl,"DIV",{class:!0});var Mw=s(_t);T(Fy.$$.fragment,Mw),ler=i(Mw),B1e=n(Mw,"P",{});var A4t=s(B1e);ier=r(A4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A4t.forEach(t),der=i(Mw),pd=n(Mw,"P",{});var Dre=s(pd);cer=r(Dre,`Note:
Loading a model from its configuration file does `),I1e=n(Dre,"STRONG",{});var L4t=s(I1e);fer=r(L4t,"not"),L4t.forEach(t),mer=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(Dre,"A",{href:!0});var y4t=s(gQ);ger=r(y4t,"from_pretrained()"),y4t.forEach(t),her=r(Dre," to load the model weights."),Dre.forEach(t),per=i(Mw),T(bF.$$.fragment,Mw),Mw.forEach(t),_er=i(dl),no=n(dl,"DIV",{class:!0});var _a=s(no);T(Ty.$$.fragment,_a),uer=i(_a),N1e=n(_a,"P",{});var x4t=s(N1e);ber=r(x4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x4t.forEach(t),ver=i(_a),Xa=n(_a,"P",{});var Ew=s(Xa);Fer=r(Ew,"The model class to instantiate is selected based on the "),q1e=n(Ew,"CODE",{});var $4t=s(q1e);Ter=r($4t,"model_type"),$4t.forEach(t),Mer=r(Ew,` property of the config object (either
passed as an argument or loaded from `),j1e=n(Ew,"CODE",{});var k4t=s(j1e);Eer=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),Cer=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(Ew,"CODE",{});var S4t=s(D1e);wer=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),Aer=r(Ew,":"),Ew.forEach(t),Ler=i(_a),V=n(_a,"UL",{});var X=s(V);vF=n(X,"LI",{});var PBe=s(vF);G1e=n(PBe,"STRONG",{});var R4t=s(G1e);yer=r(R4t,"albert"),R4t.forEach(t),xer=r(PBe," \u2014 "),hQ=n(PBe,"A",{href:!0});var P4t=s(hQ);$er=r(P4t,"AlbertForQuestionAnswering"),P4t.forEach(t),ker=r(PBe," (ALBERT model)"),PBe.forEach(t),Ser=i(X),FF=n(X,"LI",{});var BBe=s(FF);O1e=n(BBe,"STRONG",{});var B4t=s(O1e);Rer=r(B4t,"bart"),B4t.forEach(t),Per=r(BBe," \u2014 "),pQ=n(BBe,"A",{href:!0});var I4t=s(pQ);Ber=r(I4t,"BartForQuestionAnswering"),I4t.forEach(t),Ier=r(BBe," (BART model)"),BBe.forEach(t),Ner=i(X),TF=n(X,"LI",{});var IBe=s(TF);V1e=n(IBe,"STRONG",{});var N4t=s(V1e);qer=r(N4t,"bert"),N4t.forEach(t),jer=r(IBe," \u2014 "),_Q=n(IBe,"A",{href:!0});var q4t=s(_Q);Der=r(q4t,"BertForQuestionAnswering"),q4t.forEach(t),Ger=r(IBe," (BERT model)"),IBe.forEach(t),Oer=i(X),MF=n(X,"LI",{});var NBe=s(MF);X1e=n(NBe,"STRONG",{});var j4t=s(X1e);Ver=r(j4t,"big_bird"),j4t.forEach(t),Xer=r(NBe," \u2014 "),uQ=n(NBe,"A",{href:!0});var D4t=s(uQ);zer=r(D4t,"BigBirdForQuestionAnswering"),D4t.forEach(t),Qer=r(NBe," (BigBird model)"),NBe.forEach(t),Wer=i(X),EF=n(X,"LI",{});var qBe=s(EF);z1e=n(qBe,"STRONG",{});var G4t=s(z1e);Her=r(G4t,"bigbird_pegasus"),G4t.forEach(t),Uer=r(qBe," \u2014 "),bQ=n(qBe,"A",{href:!0});var O4t=s(bQ);Jer=r(O4t,"BigBirdPegasusForQuestionAnswering"),O4t.forEach(t),Yer=r(qBe," (BigBird-Pegasus model)"),qBe.forEach(t),Ker=i(X),CF=n(X,"LI",{});var jBe=s(CF);Q1e=n(jBe,"STRONG",{});var V4t=s(Q1e);Zer=r(V4t,"camembert"),V4t.forEach(t),eor=r(jBe," \u2014 "),vQ=n(jBe,"A",{href:!0});var X4t=s(vQ);oor=r(X4t,"CamembertForQuestionAnswering"),X4t.forEach(t),ror=r(jBe," (CamemBERT model)"),jBe.forEach(t),tor=i(X),wF=n(X,"LI",{});var DBe=s(wF);W1e=n(DBe,"STRONG",{});var z4t=s(W1e);aor=r(z4t,"canine"),z4t.forEach(t),nor=r(DBe," \u2014 "),FQ=n(DBe,"A",{href:!0});var Q4t=s(FQ);sor=r(Q4t,"CanineForQuestionAnswering"),Q4t.forEach(t),lor=r(DBe," (CANINE model)"),DBe.forEach(t),ior=i(X),AF=n(X,"LI",{});var GBe=s(AF);H1e=n(GBe,"STRONG",{});var W4t=s(H1e);dor=r(W4t,"convbert"),W4t.forEach(t),cor=r(GBe," \u2014 "),TQ=n(GBe,"A",{href:!0});var H4t=s(TQ);mor=r(H4t,"ConvBertForQuestionAnswering"),H4t.forEach(t),gor=r(GBe," (ConvBERT model)"),GBe.forEach(t),hor=i(X),LF=n(X,"LI",{});var OBe=s(LF);U1e=n(OBe,"STRONG",{});var U4t=s(U1e);por=r(U4t,"data2vec-text"),U4t.forEach(t),_or=r(OBe," \u2014 "),MQ=n(OBe,"A",{href:!0});var J4t=s(MQ);uor=r(J4t,"Data2VecTextForQuestionAnswering"),J4t.forEach(t),bor=r(OBe," (Data2VecText model)"),OBe.forEach(t),vor=i(X),yF=n(X,"LI",{});var VBe=s(yF);J1e=n(VBe,"STRONG",{});var Y4t=s(J1e);For=r(Y4t,"deberta"),Y4t.forEach(t),Tor=r(VBe," \u2014 "),EQ=n(VBe,"A",{href:!0});var K4t=s(EQ);Mor=r(K4t,"DebertaForQuestionAnswering"),K4t.forEach(t),Eor=r(VBe," (DeBERTa model)"),VBe.forEach(t),Cor=i(X),xF=n(X,"LI",{});var XBe=s(xF);Y1e=n(XBe,"STRONG",{});var Z4t=s(Y1e);wor=r(Z4t,"deberta-v2"),Z4t.forEach(t),Aor=r(XBe," \u2014 "),CQ=n(XBe,"A",{href:!0});var eEt=s(CQ);Lor=r(eEt,"DebertaV2ForQuestionAnswering"),eEt.forEach(t),yor=r(XBe," (DeBERTa-v2 model)"),XBe.forEach(t),xor=i(X),$F=n(X,"LI",{});var zBe=s($F);K1e=n(zBe,"STRONG",{});var oEt=s(K1e);$or=r(oEt,"distilbert"),oEt.forEach(t),kor=r(zBe," \u2014 "),wQ=n(zBe,"A",{href:!0});var rEt=s(wQ);Sor=r(rEt,"DistilBertForQuestionAnswering"),rEt.forEach(t),Ror=r(zBe," (DistilBERT model)"),zBe.forEach(t),Por=i(X),kF=n(X,"LI",{});var QBe=s(kF);Z1e=n(QBe,"STRONG",{});var tEt=s(Z1e);Bor=r(tEt,"electra"),tEt.forEach(t),Ior=r(QBe," \u2014 "),AQ=n(QBe,"A",{href:!0});var aEt=s(AQ);Nor=r(aEt,"ElectraForQuestionAnswering"),aEt.forEach(t),qor=r(QBe," (ELECTRA model)"),QBe.forEach(t),jor=i(X),SF=n(X,"LI",{});var WBe=s(SF);e2e=n(WBe,"STRONG",{});var nEt=s(e2e);Dor=r(nEt,"flaubert"),nEt.forEach(t),Gor=r(WBe," \u2014 "),LQ=n(WBe,"A",{href:!0});var sEt=s(LQ);Oor=r(sEt,"FlaubertForQuestionAnsweringSimple"),sEt.forEach(t),Vor=r(WBe," (FlauBERT model)"),WBe.forEach(t),Xor=i(X),RF=n(X,"LI",{});var HBe=s(RF);o2e=n(HBe,"STRONG",{});var lEt=s(o2e);zor=r(lEt,"fnet"),lEt.forEach(t),Qor=r(HBe," \u2014 "),yQ=n(HBe,"A",{href:!0});var iEt=s(yQ);Wor=r(iEt,"FNetForQuestionAnswering"),iEt.forEach(t),Hor=r(HBe," (FNet model)"),HBe.forEach(t),Uor=i(X),PF=n(X,"LI",{});var UBe=s(PF);r2e=n(UBe,"STRONG",{});var dEt=s(r2e);Jor=r(dEt,"funnel"),dEt.forEach(t),Yor=r(UBe," \u2014 "),xQ=n(UBe,"A",{href:!0});var cEt=s(xQ);Kor=r(cEt,"FunnelForQuestionAnswering"),cEt.forEach(t),Zor=r(UBe," (Funnel Transformer model)"),UBe.forEach(t),err=i(X),BF=n(X,"LI",{});var JBe=s(BF);t2e=n(JBe,"STRONG",{});var fEt=s(t2e);orr=r(fEt,"gptj"),fEt.forEach(t),rrr=r(JBe," \u2014 "),$Q=n(JBe,"A",{href:!0});var mEt=s($Q);trr=r(mEt,"GPTJForQuestionAnswering"),mEt.forEach(t),arr=r(JBe," (GPT-J model)"),JBe.forEach(t),nrr=i(X),IF=n(X,"LI",{});var YBe=s(IF);a2e=n(YBe,"STRONG",{});var gEt=s(a2e);srr=r(gEt,"ibert"),gEt.forEach(t),lrr=r(YBe," \u2014 "),kQ=n(YBe,"A",{href:!0});var hEt=s(kQ);irr=r(hEt,"IBertForQuestionAnswering"),hEt.forEach(t),drr=r(YBe," (I-BERT model)"),YBe.forEach(t),crr=i(X),NF=n(X,"LI",{});var KBe=s(NF);n2e=n(KBe,"STRONG",{});var pEt=s(n2e);frr=r(pEt,"layoutlmv2"),pEt.forEach(t),mrr=r(KBe," \u2014 "),SQ=n(KBe,"A",{href:!0});var _Et=s(SQ);grr=r(_Et,"LayoutLMv2ForQuestionAnswering"),_Et.forEach(t),hrr=r(KBe," (LayoutLMv2 model)"),KBe.forEach(t),prr=i(X),qF=n(X,"LI",{});var ZBe=s(qF);s2e=n(ZBe,"STRONG",{});var uEt=s(s2e);_rr=r(uEt,"layoutlmv3"),uEt.forEach(t),urr=r(ZBe," \u2014 "),RQ=n(ZBe,"A",{href:!0});var bEt=s(RQ);brr=r(bEt,"LayoutLMv3ForQuestionAnswering"),bEt.forEach(t),vrr=r(ZBe," (LayoutLMv3 model)"),ZBe.forEach(t),Frr=i(X),jF=n(X,"LI",{});var eIe=s(jF);l2e=n(eIe,"STRONG",{});var vEt=s(l2e);Trr=r(vEt,"led"),vEt.forEach(t),Mrr=r(eIe," \u2014 "),PQ=n(eIe,"A",{href:!0});var FEt=s(PQ);Err=r(FEt,"LEDForQuestionAnswering"),FEt.forEach(t),Crr=r(eIe," (LED model)"),eIe.forEach(t),wrr=i(X),DF=n(X,"LI",{});var oIe=s(DF);i2e=n(oIe,"STRONG",{});var TEt=s(i2e);Arr=r(TEt,"longformer"),TEt.forEach(t),Lrr=r(oIe," \u2014 "),BQ=n(oIe,"A",{href:!0});var MEt=s(BQ);yrr=r(MEt,"LongformerForQuestionAnswering"),MEt.forEach(t),xrr=r(oIe," (Longformer model)"),oIe.forEach(t),$rr=i(X),GF=n(X,"LI",{});var rIe=s(GF);d2e=n(rIe,"STRONG",{});var EEt=s(d2e);krr=r(EEt,"lxmert"),EEt.forEach(t),Srr=r(rIe," \u2014 "),IQ=n(rIe,"A",{href:!0});var CEt=s(IQ);Rrr=r(CEt,"LxmertForQuestionAnswering"),CEt.forEach(t),Prr=r(rIe," (LXMERT model)"),rIe.forEach(t),Brr=i(X),OF=n(X,"LI",{});var tIe=s(OF);c2e=n(tIe,"STRONG",{});var wEt=s(c2e);Irr=r(wEt,"mbart"),wEt.forEach(t),Nrr=r(tIe," \u2014 "),NQ=n(tIe,"A",{href:!0});var AEt=s(NQ);qrr=r(AEt,"MBartForQuestionAnswering"),AEt.forEach(t),jrr=r(tIe," (mBART model)"),tIe.forEach(t),Drr=i(X),VF=n(X,"LI",{});var aIe=s(VF);f2e=n(aIe,"STRONG",{});var LEt=s(f2e);Grr=r(LEt,"megatron-bert"),LEt.forEach(t),Orr=r(aIe," \u2014 "),qQ=n(aIe,"A",{href:!0});var yEt=s(qQ);Vrr=r(yEt,"MegatronBertForQuestionAnswering"),yEt.forEach(t),Xrr=r(aIe," (Megatron-BERT model)"),aIe.forEach(t),zrr=i(X),XF=n(X,"LI",{});var nIe=s(XF);m2e=n(nIe,"STRONG",{});var xEt=s(m2e);Qrr=r(xEt,"mobilebert"),xEt.forEach(t),Wrr=r(nIe," \u2014 "),jQ=n(nIe,"A",{href:!0});var $Et=s(jQ);Hrr=r($Et,"MobileBertForQuestionAnswering"),$Et.forEach(t),Urr=r(nIe," (MobileBERT model)"),nIe.forEach(t),Jrr=i(X),zF=n(X,"LI",{});var sIe=s(zF);g2e=n(sIe,"STRONG",{});var kEt=s(g2e);Yrr=r(kEt,"mpnet"),kEt.forEach(t),Krr=r(sIe," \u2014 "),DQ=n(sIe,"A",{href:!0});var SEt=s(DQ);Zrr=r(SEt,"MPNetForQuestionAnswering"),SEt.forEach(t),etr=r(sIe," (MPNet model)"),sIe.forEach(t),otr=i(X),QF=n(X,"LI",{});var lIe=s(QF);h2e=n(lIe,"STRONG",{});var REt=s(h2e);rtr=r(REt,"mvp"),REt.forEach(t),ttr=r(lIe," \u2014 "),GQ=n(lIe,"A",{href:!0});var PEt=s(GQ);atr=r(PEt,"MvpForQuestionAnswering"),PEt.forEach(t),ntr=r(lIe," (MVP model)"),lIe.forEach(t),str=i(X),WF=n(X,"LI",{});var iIe=s(WF);p2e=n(iIe,"STRONG",{});var BEt=s(p2e);ltr=r(BEt,"nezha"),BEt.forEach(t),itr=r(iIe," \u2014 "),OQ=n(iIe,"A",{href:!0});var IEt=s(OQ);dtr=r(IEt,"NezhaForQuestionAnswering"),IEt.forEach(t),ctr=r(iIe," (Nezha model)"),iIe.forEach(t),ftr=i(X),HF=n(X,"LI",{});var dIe=s(HF);_2e=n(dIe,"STRONG",{});var NEt=s(_2e);mtr=r(NEt,"nystromformer"),NEt.forEach(t),gtr=r(dIe," \u2014 "),VQ=n(dIe,"A",{href:!0});var qEt=s(VQ);htr=r(qEt,"NystromformerForQuestionAnswering"),qEt.forEach(t),ptr=r(dIe," (Nystr\xF6mformer model)"),dIe.forEach(t),_tr=i(X),UF=n(X,"LI",{});var cIe=s(UF);u2e=n(cIe,"STRONG",{});var jEt=s(u2e);utr=r(jEt,"qdqbert"),jEt.forEach(t),btr=r(cIe," \u2014 "),XQ=n(cIe,"A",{href:!0});var DEt=s(XQ);vtr=r(DEt,"QDQBertForQuestionAnswering"),DEt.forEach(t),Ftr=r(cIe," (QDQBert model)"),cIe.forEach(t),Ttr=i(X),JF=n(X,"LI",{});var fIe=s(JF);b2e=n(fIe,"STRONG",{});var GEt=s(b2e);Mtr=r(GEt,"reformer"),GEt.forEach(t),Etr=r(fIe," \u2014 "),zQ=n(fIe,"A",{href:!0});var OEt=s(zQ);Ctr=r(OEt,"ReformerForQuestionAnswering"),OEt.forEach(t),wtr=r(fIe," (Reformer model)"),fIe.forEach(t),Atr=i(X),YF=n(X,"LI",{});var mIe=s(YF);v2e=n(mIe,"STRONG",{});var VEt=s(v2e);Ltr=r(VEt,"rembert"),VEt.forEach(t),ytr=r(mIe," \u2014 "),QQ=n(mIe,"A",{href:!0});var XEt=s(QQ);xtr=r(XEt,"RemBertForQuestionAnswering"),XEt.forEach(t),$tr=r(mIe," (RemBERT model)"),mIe.forEach(t),ktr=i(X),KF=n(X,"LI",{});var gIe=s(KF);F2e=n(gIe,"STRONG",{});var zEt=s(F2e);Str=r(zEt,"roberta"),zEt.forEach(t),Rtr=r(gIe," \u2014 "),WQ=n(gIe,"A",{href:!0});var QEt=s(WQ);Ptr=r(QEt,"RobertaForQuestionAnswering"),QEt.forEach(t),Btr=r(gIe," (RoBERTa model)"),gIe.forEach(t),Itr=i(X),ZF=n(X,"LI",{});var hIe=s(ZF);T2e=n(hIe,"STRONG",{});var WEt=s(T2e);Ntr=r(WEt,"roformer"),WEt.forEach(t),qtr=r(hIe," \u2014 "),HQ=n(hIe,"A",{href:!0});var HEt=s(HQ);jtr=r(HEt,"RoFormerForQuestionAnswering"),HEt.forEach(t),Dtr=r(hIe," (RoFormer model)"),hIe.forEach(t),Gtr=i(X),e6=n(X,"LI",{});var pIe=s(e6);M2e=n(pIe,"STRONG",{});var UEt=s(M2e);Otr=r(UEt,"splinter"),UEt.forEach(t),Vtr=r(pIe," \u2014 "),UQ=n(pIe,"A",{href:!0});var JEt=s(UQ);Xtr=r(JEt,"SplinterForQuestionAnswering"),JEt.forEach(t),ztr=r(pIe," (Splinter model)"),pIe.forEach(t),Qtr=i(X),o6=n(X,"LI",{});var _Ie=s(o6);E2e=n(_Ie,"STRONG",{});var YEt=s(E2e);Wtr=r(YEt,"squeezebert"),YEt.forEach(t),Htr=r(_Ie," \u2014 "),JQ=n(_Ie,"A",{href:!0});var KEt=s(JQ);Utr=r(KEt,"SqueezeBertForQuestionAnswering"),KEt.forEach(t),Jtr=r(_Ie," (SqueezeBERT model)"),_Ie.forEach(t),Ytr=i(X),r6=n(X,"LI",{});var uIe=s(r6);C2e=n(uIe,"STRONG",{});var ZEt=s(C2e);Ktr=r(ZEt,"xlm"),ZEt.forEach(t),Ztr=r(uIe," \u2014 "),YQ=n(uIe,"A",{href:!0});var eCt=s(YQ);ear=r(eCt,"XLMForQuestionAnsweringSimple"),eCt.forEach(t),oar=r(uIe," (XLM model)"),uIe.forEach(t),rar=i(X),t6=n(X,"LI",{});var bIe=s(t6);w2e=n(bIe,"STRONG",{});var oCt=s(w2e);tar=r(oCt,"xlm-roberta"),oCt.forEach(t),aar=r(bIe," \u2014 "),KQ=n(bIe,"A",{href:!0});var rCt=s(KQ);nar=r(rCt,"XLMRobertaForQuestionAnswering"),rCt.forEach(t),sar=r(bIe," (XLM-RoBERTa model)"),bIe.forEach(t),lar=i(X),a6=n(X,"LI",{});var vIe=s(a6);A2e=n(vIe,"STRONG",{});var tCt=s(A2e);iar=r(tCt,"xlm-roberta-xl"),tCt.forEach(t),dar=r(vIe," \u2014 "),ZQ=n(vIe,"A",{href:!0});var aCt=s(ZQ);car=r(aCt,"XLMRobertaXLForQuestionAnswering"),aCt.forEach(t),far=r(vIe," (XLM-RoBERTa-XL model)"),vIe.forEach(t),mar=i(X),n6=n(X,"LI",{});var FIe=s(n6);L2e=n(FIe,"STRONG",{});var nCt=s(L2e);gar=r(nCt,"xlnet"),nCt.forEach(t),har=r(FIe," \u2014 "),eW=n(FIe,"A",{href:!0});var sCt=s(eW);par=r(sCt,"XLNetForQuestionAnsweringSimple"),sCt.forEach(t),_ar=r(FIe," (XLNet model)"),FIe.forEach(t),uar=i(X),s6=n(X,"LI",{});var TIe=s(s6);y2e=n(TIe,"STRONG",{});var lCt=s(y2e);bar=r(lCt,"yoso"),lCt.forEach(t),Far=r(TIe," \u2014 "),oW=n(TIe,"A",{href:!0});var iCt=s(oW);Tar=r(iCt,"YosoForQuestionAnswering"),iCt.forEach(t),Mar=r(TIe," (YOSO model)"),TIe.forEach(t),X.forEach(t),Ear=i(_a),l6=n(_a,"P",{});var MIe=s(l6);Car=r(MIe,"The model is set in evaluation mode by default using "),x2e=n(MIe,"CODE",{});var dCt=s(x2e);war=r(dCt,"model.eval()"),dCt.forEach(t),Aar=r(MIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(MIe,"CODE",{});var cCt=s($2e);Lar=r(cCt,"model.train()"),cCt.forEach(t),MIe.forEach(t),yar=i(_a),T(i6.$$.fragment,_a),_a.forEach(t),dl.forEach(t),gXe=i(f),_d=n(f,"H2",{class:!0});var vQe=s(_d);d6=n(vQe,"A",{id:!0,class:!0,href:!0});var fCt=s(d6);k2e=n(fCt,"SPAN",{});var mCt=s(k2e);T(My.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),xar=i(vQe),S2e=n(vQe,"SPAN",{});var gCt=s(S2e);$ar=r(gCt,"AutoModelForTableQuestionAnswering"),gCt.forEach(t),vQe.forEach(t),hXe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(Ey.$$.fragment,cl),kar=i(cl),ud=n(cl,"P",{});var Gre=s(ud);Sar=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rW=n(Gre,"A",{href:!0});var hCt=s(rW);Rar=r(hCt,"from_pretrained()"),hCt.forEach(t),Par=r(Gre," class method or the "),tW=n(Gre,"A",{href:!0});var pCt=s(tW);Bar=r(pCt,"from_config()"),pCt.forEach(t),Iar=r(Gre,` class
method.`),Gre.forEach(t),Nar=i(cl),Cy=n(cl,"P",{});var FQe=s(Cy);qar=r(FQe,"This class cannot be instantiated directly using "),R2e=n(FQe,"CODE",{});var _Ct=s(R2e);jar=r(_Ct,"__init__()"),_Ct.forEach(t),Dar=r(FQe," (throws an error)."),FQe.forEach(t),Gar=i(cl),ut=n(cl,"DIV",{class:!0});var Cw=s(ut);T(wy.$$.fragment,Cw),Oar=i(Cw),P2e=n(Cw,"P",{});var uCt=s(P2e);Var=r(uCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uCt.forEach(t),Xar=i(Cw),bd=n(Cw,"P",{});var Ore=s(bd);zar=r(Ore,`Note:
Loading a model from its configuration file does `),B2e=n(Ore,"STRONG",{});var bCt=s(B2e);Qar=r(bCt,"not"),bCt.forEach(t),War=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(Ore,"A",{href:!0});var vCt=s(aW);Har=r(vCt,"from_pretrained()"),vCt.forEach(t),Uar=r(Ore," to load the model weights."),Ore.forEach(t),Jar=i(Cw),T(c6.$$.fragment,Cw),Cw.forEach(t),Yar=i(cl),so=n(cl,"DIV",{class:!0});var ua=s(so);T(Ay.$$.fragment,ua),Kar=i(ua),I2e=n(ua,"P",{});var FCt=s(I2e);Zar=r(FCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FCt.forEach(t),enr=i(ua),za=n(ua,"P",{});var ww=s(za);onr=r(ww,"The model class to instantiate is selected based on the "),N2e=n(ww,"CODE",{});var TCt=s(N2e);rnr=r(TCt,"model_type"),TCt.forEach(t),tnr=r(ww,` property of the config object (either
passed as an argument or loaded from `),q2e=n(ww,"CODE",{});var MCt=s(q2e);anr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),nnr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(ww,"CODE",{});var ECt=s(j2e);snr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),lnr=r(ww,":"),ww.forEach(t),inr=i(ua),D2e=n(ua,"UL",{});var CCt=s(D2e);f6=n(CCt,"LI",{});var EIe=s(f6);G2e=n(EIe,"STRONG",{});var wCt=s(G2e);dnr=r(wCt,"tapas"),wCt.forEach(t),cnr=r(EIe," \u2014 "),nW=n(EIe,"A",{href:!0});var ACt=s(nW);fnr=r(ACt,"TapasForQuestionAnswering"),ACt.forEach(t),mnr=r(EIe," (TAPAS model)"),EIe.forEach(t),CCt.forEach(t),gnr=i(ua),m6=n(ua,"P",{});var CIe=s(m6);hnr=r(CIe,"The model is set in evaluation mode by default using "),O2e=n(CIe,"CODE",{});var LCt=s(O2e);pnr=r(LCt,"model.eval()"),LCt.forEach(t),_nr=r(CIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(CIe,"CODE",{});var yCt=s(V2e);unr=r(yCt,"model.train()"),yCt.forEach(t),CIe.forEach(t),bnr=i(ua),T(g6.$$.fragment,ua),ua.forEach(t),cl.forEach(t),pXe=i(f),vd=n(f,"H2",{class:!0});var TQe=s(vd);h6=n(TQe,"A",{id:!0,class:!0,href:!0});var xCt=s(h6);X2e=n(xCt,"SPAN",{});var $Ct=s(X2e);T(Ly.$$.fragment,$Ct),$Ct.forEach(t),xCt.forEach(t),vnr=i(TQe),z2e=n(TQe,"SPAN",{});var kCt=s(z2e);Fnr=r(kCt,"AutoModelForImageClassification"),kCt.forEach(t),TQe.forEach(t),_Xe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(yy.$$.fragment,fl),Tnr=i(fl),Fd=n(fl,"P",{});var Vre=s(Fd);Mnr=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sW=n(Vre,"A",{href:!0});var SCt=s(sW);Enr=r(SCt,"from_pretrained()"),SCt.forEach(t),Cnr=r(Vre," class method or the "),lW=n(Vre,"A",{href:!0});var RCt=s(lW);wnr=r(RCt,"from_config()"),RCt.forEach(t),Anr=r(Vre,` class
method.`),Vre.forEach(t),Lnr=i(fl),xy=n(fl,"P",{});var MQe=s(xy);ynr=r(MQe,"This class cannot be instantiated directly using "),Q2e=n(MQe,"CODE",{});var PCt=s(Q2e);xnr=r(PCt,"__init__()"),PCt.forEach(t),$nr=r(MQe," (throws an error)."),MQe.forEach(t),knr=i(fl),bt=n(fl,"DIV",{class:!0});var Aw=s(bt);T($y.$$.fragment,Aw),Snr=i(Aw),W2e=n(Aw,"P",{});var BCt=s(W2e);Rnr=r(BCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BCt.forEach(t),Pnr=i(Aw),Td=n(Aw,"P",{});var Xre=s(Td);Bnr=r(Xre,`Note:
Loading a model from its configuration file does `),H2e=n(Xre,"STRONG",{});var ICt=s(H2e);Inr=r(ICt,"not"),ICt.forEach(t),Nnr=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Xre,"A",{href:!0});var NCt=s(iW);qnr=r(NCt,"from_pretrained()"),NCt.forEach(t),jnr=r(Xre," to load the model weights."),Xre.forEach(t),Dnr=i(Aw),T(p6.$$.fragment,Aw),Aw.forEach(t),Gnr=i(fl),lo=n(fl,"DIV",{class:!0});var ba=s(lo);T(ky.$$.fragment,ba),Onr=i(ba),U2e=n(ba,"P",{});var qCt=s(U2e);Vnr=r(qCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qCt.forEach(t),Xnr=i(ba),Qa=n(ba,"P",{});var Lw=s(Qa);znr=r(Lw,"The model class to instantiate is selected based on the "),J2e=n(Lw,"CODE",{});var jCt=s(J2e);Qnr=r(jCt,"model_type"),jCt.forEach(t),Wnr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(Lw,"CODE",{});var DCt=s(Y2e);Hnr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),Unr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(Lw,"CODE",{});var GCt=s(K2e);Jnr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),Ynr=r(Lw,":"),Lw.forEach(t),Knr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);_6=n(Te,"LI",{});var wIe=s(_6);Z2e=n(wIe,"STRONG",{});var OCt=s(Z2e);Znr=r(OCt,"beit"),OCt.forEach(t),esr=r(wIe," \u2014 "),dW=n(wIe,"A",{href:!0});var VCt=s(dW);osr=r(VCt,"BeitForImageClassification"),VCt.forEach(t),rsr=r(wIe," (BEiT model)"),wIe.forEach(t),tsr=i(Te),u6=n(Te,"LI",{});var AIe=s(u6);ebe=n(AIe,"STRONG",{});var XCt=s(ebe);asr=r(XCt,"convnext"),XCt.forEach(t),nsr=r(AIe," \u2014 "),cW=n(AIe,"A",{href:!0});var zCt=s(cW);ssr=r(zCt,"ConvNextForImageClassification"),zCt.forEach(t),lsr=r(AIe," (ConvNeXT model)"),AIe.forEach(t),isr=i(Te),b6=n(Te,"LI",{});var LIe=s(b6);obe=n(LIe,"STRONG",{});var QCt=s(obe);dsr=r(QCt,"cvt"),QCt.forEach(t),csr=r(LIe," \u2014 "),fW=n(LIe,"A",{href:!0});var WCt=s(fW);fsr=r(WCt,"CvtForImageClassification"),WCt.forEach(t),msr=r(LIe," (CvT model)"),LIe.forEach(t),gsr=i(Te),v6=n(Te,"LI",{});var yIe=s(v6);rbe=n(yIe,"STRONG",{});var HCt=s(rbe);hsr=r(HCt,"data2vec-vision"),HCt.forEach(t),psr=r(yIe," \u2014 "),mW=n(yIe,"A",{href:!0});var UCt=s(mW);_sr=r(UCt,"Data2VecVisionForImageClassification"),UCt.forEach(t),usr=r(yIe," (Data2VecVision model)"),yIe.forEach(t),bsr=i(Te),Ws=n(Te,"LI",{});var LS=s(Ws);tbe=n(LS,"STRONG",{});var JCt=s(tbe);vsr=r(JCt,"deit"),JCt.forEach(t),Fsr=r(LS," \u2014 "),gW=n(LS,"A",{href:!0});var YCt=s(gW);Tsr=r(YCt,"DeiTForImageClassification"),YCt.forEach(t),Msr=r(LS," or "),hW=n(LS,"A",{href:!0});var KCt=s(hW);Esr=r(KCt,"DeiTForImageClassificationWithTeacher"),KCt.forEach(t),Csr=r(LS," (DeiT model)"),LS.forEach(t),wsr=i(Te),F6=n(Te,"LI",{});var xIe=s(F6);abe=n(xIe,"STRONG",{});var ZCt=s(abe);Asr=r(ZCt,"imagegpt"),ZCt.forEach(t),Lsr=r(xIe," \u2014 "),pW=n(xIe,"A",{href:!0});var e5t=s(pW);ysr=r(e5t,"ImageGPTForImageClassification"),e5t.forEach(t),xsr=r(xIe," (ImageGPT model)"),xIe.forEach(t),$sr=i(Te),Hs=n(Te,"LI",{});var yS=s(Hs);nbe=n(yS,"STRONG",{});var o5t=s(nbe);ksr=r(o5t,"levit"),o5t.forEach(t),Ssr=r(yS," \u2014 "),_W=n(yS,"A",{href:!0});var r5t=s(_W);Rsr=r(r5t,"LevitForImageClassification"),r5t.forEach(t),Psr=r(yS," or "),uW=n(yS,"A",{href:!0});var t5t=s(uW);Bsr=r(t5t,"LevitForImageClassificationWithTeacher"),t5t.forEach(t),Isr=r(yS," (LeViT model)"),yS.forEach(t),Nsr=i(Te),T6=n(Te,"LI",{});var $Ie=s(T6);sbe=n($Ie,"STRONG",{});var a5t=s(sbe);qsr=r(a5t,"mobilevit"),a5t.forEach(t),jsr=r($Ie," \u2014 "),bW=n($Ie,"A",{href:!0});var n5t=s(bW);Dsr=r(n5t,"MobileViTForImageClassification"),n5t.forEach(t),Gsr=r($Ie," (MobileViT model)"),$Ie.forEach(t),Osr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);lbe=n(Sf,"STRONG",{});var s5t=s(lbe);Vsr=r(s5t,"perceiver"),s5t.forEach(t),Xsr=r(Sf," \u2014 "),vW=n(Sf,"A",{href:!0});var l5t=s(vW);zsr=r(l5t,"PerceiverForImageClassificationLearned"),l5t.forEach(t),Qsr=r(Sf," or "),FW=n(Sf,"A",{href:!0});var i5t=s(FW);Wsr=r(i5t,"PerceiverForImageClassificationFourier"),i5t.forEach(t),Hsr=r(Sf," or "),TW=n(Sf,"A",{href:!0});var d5t=s(TW);Usr=r(d5t,"PerceiverForImageClassificationConvProcessing"),d5t.forEach(t),Jsr=r(Sf," (Perceiver model)"),Sf.forEach(t),Ysr=i(Te),M6=n(Te,"LI",{});var kIe=s(M6);ibe=n(kIe,"STRONG",{});var c5t=s(ibe);Ksr=r(c5t,"poolformer"),c5t.forEach(t),Zsr=r(kIe," \u2014 "),MW=n(kIe,"A",{href:!0});var f5t=s(MW);elr=r(f5t,"PoolFormerForImageClassification"),f5t.forEach(t),olr=r(kIe," (PoolFormer model)"),kIe.forEach(t),rlr=i(Te),E6=n(Te,"LI",{});var SIe=s(E6);dbe=n(SIe,"STRONG",{});var m5t=s(dbe);tlr=r(m5t,"regnet"),m5t.forEach(t),alr=r(SIe," \u2014 "),EW=n(SIe,"A",{href:!0});var g5t=s(EW);nlr=r(g5t,"RegNetForImageClassification"),g5t.forEach(t),slr=r(SIe," (RegNet model)"),SIe.forEach(t),llr=i(Te),C6=n(Te,"LI",{});var RIe=s(C6);cbe=n(RIe,"STRONG",{});var h5t=s(cbe);ilr=r(h5t,"resnet"),h5t.forEach(t),dlr=r(RIe," \u2014 "),CW=n(RIe,"A",{href:!0});var p5t=s(CW);clr=r(p5t,"ResNetForImageClassification"),p5t.forEach(t),flr=r(RIe," (ResNet model)"),RIe.forEach(t),mlr=i(Te),w6=n(Te,"LI",{});var PIe=s(w6);fbe=n(PIe,"STRONG",{});var _5t=s(fbe);glr=r(_5t,"segformer"),_5t.forEach(t),hlr=r(PIe," \u2014 "),wW=n(PIe,"A",{href:!0});var u5t=s(wW);plr=r(u5t,"SegformerForImageClassification"),u5t.forEach(t),_lr=r(PIe," (SegFormer model)"),PIe.forEach(t),ulr=i(Te),A6=n(Te,"LI",{});var BIe=s(A6);mbe=n(BIe,"STRONG",{});var b5t=s(mbe);blr=r(b5t,"swin"),b5t.forEach(t),vlr=r(BIe," \u2014 "),AW=n(BIe,"A",{href:!0});var v5t=s(AW);Flr=r(v5t,"SwinForImageClassification"),v5t.forEach(t),Tlr=r(BIe," (Swin Transformer model)"),BIe.forEach(t),Mlr=i(Te),L6=n(Te,"LI",{});var IIe=s(L6);gbe=n(IIe,"STRONG",{});var F5t=s(gbe);Elr=r(F5t,"van"),F5t.forEach(t),Clr=r(IIe," \u2014 "),LW=n(IIe,"A",{href:!0});var T5t=s(LW);wlr=r(T5t,"VanForImageClassification"),T5t.forEach(t),Alr=r(IIe," (VAN model)"),IIe.forEach(t),Llr=i(Te),y6=n(Te,"LI",{});var NIe=s(y6);hbe=n(NIe,"STRONG",{});var M5t=s(hbe);ylr=r(M5t,"vit"),M5t.forEach(t),xlr=r(NIe," \u2014 "),yW=n(NIe,"A",{href:!0});var E5t=s(yW);$lr=r(E5t,"ViTForImageClassification"),E5t.forEach(t),klr=r(NIe," (ViT model)"),NIe.forEach(t),Te.forEach(t),Slr=i(ba),x6=n(ba,"P",{});var qIe=s(x6);Rlr=r(qIe,"The model is set in evaluation mode by default using "),pbe=n(qIe,"CODE",{});var C5t=s(pbe);Plr=r(C5t,"model.eval()"),C5t.forEach(t),Blr=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(qIe,"CODE",{});var w5t=s(_be);Ilr=r(w5t,"model.train()"),w5t.forEach(t),qIe.forEach(t),Nlr=i(ba),T($6.$$.fragment,ba),ba.forEach(t),fl.forEach(t),uXe=i(f),Md=n(f,"H2",{class:!0});var EQe=s(Md);k6=n(EQe,"A",{id:!0,class:!0,href:!0});var A5t=s(k6);ube=n(A5t,"SPAN",{});var L5t=s(ube);T(Sy.$$.fragment,L5t),L5t.forEach(t),A5t.forEach(t),qlr=i(EQe),bbe=n(EQe,"SPAN",{});var y5t=s(bbe);jlr=r(y5t,"AutoModelForVision2Seq"),y5t.forEach(t),EQe.forEach(t),bXe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(Ry.$$.fragment,ml),Dlr=i(ml),Ed=n(ml,"P",{});var zre=s(Ed);Glr=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xW=n(zre,"A",{href:!0});var x5t=s(xW);Olr=r(x5t,"from_pretrained()"),x5t.forEach(t),Vlr=r(zre," class method or the "),$W=n(zre,"A",{href:!0});var $5t=s($W);Xlr=r($5t,"from_config()"),$5t.forEach(t),zlr=r(zre,` class
method.`),zre.forEach(t),Qlr=i(ml),Py=n(ml,"P",{});var CQe=s(Py);Wlr=r(CQe,"This class cannot be instantiated directly using "),vbe=n(CQe,"CODE",{});var k5t=s(vbe);Hlr=r(k5t,"__init__()"),k5t.forEach(t),Ulr=r(CQe," (throws an error)."),CQe.forEach(t),Jlr=i(ml),Ft=n(ml,"DIV",{class:!0});var yw=s(Ft);T(By.$$.fragment,yw),Ylr=i(yw),Fbe=n(yw,"P",{});var S5t=s(Fbe);Klr=r(S5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S5t.forEach(t),Zlr=i(yw),Cd=n(yw,"P",{});var Qre=s(Cd);eir=r(Qre,`Note:
Loading a model from its configuration file does `),Tbe=n(Qre,"STRONG",{});var R5t=s(Tbe);oir=r(R5t,"not"),R5t.forEach(t),rir=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(Qre,"A",{href:!0});var P5t=s(kW);tir=r(P5t,"from_pretrained()"),P5t.forEach(t),air=r(Qre," to load the model weights."),Qre.forEach(t),nir=i(yw),T(S6.$$.fragment,yw),yw.forEach(t),sir=i(ml),io=n(ml,"DIV",{class:!0});var va=s(io);T(Iy.$$.fragment,va),lir=i(va),Mbe=n(va,"P",{});var B5t=s(Mbe);iir=r(B5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),B5t.forEach(t),dir=i(va),Wa=n(va,"P",{});var xw=s(Wa);cir=r(xw,"The model class to instantiate is selected based on the "),Ebe=n(xw,"CODE",{});var I5t=s(Ebe);fir=r(I5t,"model_type"),I5t.forEach(t),mir=r(xw,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(xw,"CODE",{});var N5t=s(Cbe);gir=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),hir=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(xw,"CODE",{});var q5t=s(wbe);pir=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),_ir=r(xw,":"),xw.forEach(t),uir=i(va),Abe=n(va,"UL",{});var j5t=s(Abe);R6=n(j5t,"LI",{});var jIe=s(R6);Lbe=n(jIe,"STRONG",{});var D5t=s(Lbe);bir=r(D5t,"vision-encoder-decoder"),D5t.forEach(t),vir=r(jIe," \u2014 "),SW=n(jIe,"A",{href:!0});var G5t=s(SW);Fir=r(G5t,"VisionEncoderDecoderModel"),G5t.forEach(t),Tir=r(jIe," (Vision Encoder decoder model)"),jIe.forEach(t),j5t.forEach(t),Mir=i(va),P6=n(va,"P",{});var DIe=s(P6);Eir=r(DIe,"The model is set in evaluation mode by default using "),ybe=n(DIe,"CODE",{});var O5t=s(ybe);Cir=r(O5t,"model.eval()"),O5t.forEach(t),wir=r(DIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=n(DIe,"CODE",{});var V5t=s(xbe);Air=r(V5t,"model.train()"),V5t.forEach(t),DIe.forEach(t),Lir=i(va),T(B6.$$.fragment,va),va.forEach(t),ml.forEach(t),vXe=i(f),wd=n(f,"H2",{class:!0});var wQe=s(wd);I6=n(wQe,"A",{id:!0,class:!0,href:!0});var X5t=s(I6);$be=n(X5t,"SPAN",{});var z5t=s($be);T(Ny.$$.fragment,z5t),z5t.forEach(t),X5t.forEach(t),yir=i(wQe),kbe=n(wQe,"SPAN",{});var Q5t=s(kbe);xir=r(Q5t,"AutoModelForVisualQuestionAnswering"),Q5t.forEach(t),wQe.forEach(t),FXe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(qy.$$.fragment,gl),$ir=i(gl),Ad=n(gl,"P",{});var Wre=s(Ad);kir=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),RW=n(Wre,"A",{href:!0});var W5t=s(RW);Sir=r(W5t,"from_pretrained()"),W5t.forEach(t),Rir=r(Wre," class method or the "),PW=n(Wre,"A",{href:!0});var H5t=s(PW);Pir=r(H5t,"from_config()"),H5t.forEach(t),Bir=r(Wre,` class
method.`),Wre.forEach(t),Iir=i(gl),jy=n(gl,"P",{});var AQe=s(jy);Nir=r(AQe,"This class cannot be instantiated directly using "),Sbe=n(AQe,"CODE",{});var U5t=s(Sbe);qir=r(U5t,"__init__()"),U5t.forEach(t),jir=r(AQe," (throws an error)."),AQe.forEach(t),Dir=i(gl),Tt=n(gl,"DIV",{class:!0});var $w=s(Tt);T(Dy.$$.fragment,$w),Gir=i($w),Rbe=n($w,"P",{});var J5t=s(Rbe);Oir=r(J5t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),J5t.forEach(t),Vir=i($w),Ld=n($w,"P",{});var Hre=s(Ld);Xir=r(Hre,`Note:
Loading a model from its configuration file does `),Pbe=n(Hre,"STRONG",{});var Y5t=s(Pbe);zir=r(Y5t,"not"),Y5t.forEach(t),Qir=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Hre,"A",{href:!0});var K5t=s(BW);Wir=r(K5t,"from_pretrained()"),K5t.forEach(t),Hir=r(Hre," to load the model weights."),Hre.forEach(t),Uir=i($w),T(N6.$$.fragment,$w),$w.forEach(t),Jir=i(gl),co=n(gl,"DIV",{class:!0});var Fa=s(co);T(Gy.$$.fragment,Fa),Yir=i(Fa),Bbe=n(Fa,"P",{});var Z5t=s(Bbe);Kir=r(Z5t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Z5t.forEach(t),Zir=i(Fa),Ha=n(Fa,"P",{});var kw=s(Ha);edr=r(kw,"The model class to instantiate is selected based on the "),Ibe=n(kw,"CODE",{});var e0t=s(Ibe);odr=r(e0t,"model_type"),e0t.forEach(t),rdr=r(kw,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(kw,"CODE",{});var o0t=s(Nbe);tdr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),adr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(kw,"CODE",{});var r0t=s(qbe);ndr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),sdr=r(kw,":"),kw.forEach(t),ldr=i(Fa),jbe=n(Fa,"UL",{});var t0t=s(jbe);q6=n(t0t,"LI",{});var GIe=s(q6);Dbe=n(GIe,"STRONG",{});var a0t=s(Dbe);idr=r(a0t,"vilt"),a0t.forEach(t),ddr=r(GIe," \u2014 "),IW=n(GIe,"A",{href:!0});var n0t=s(IW);cdr=r(n0t,"ViltForQuestionAnswering"),n0t.forEach(t),fdr=r(GIe," (ViLT model)"),GIe.forEach(t),t0t.forEach(t),mdr=i(Fa),j6=n(Fa,"P",{});var OIe=s(j6);gdr=r(OIe,"The model is set in evaluation mode by default using "),Gbe=n(OIe,"CODE",{});var s0t=s(Gbe);hdr=r(s0t,"model.eval()"),s0t.forEach(t),pdr=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=n(OIe,"CODE",{});var l0t=s(Obe);_dr=r(l0t,"model.train()"),l0t.forEach(t),OIe.forEach(t),udr=i(Fa),T(D6.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),TXe=i(f),yd=n(f,"H2",{class:!0});var LQe=s(yd);G6=n(LQe,"A",{id:!0,class:!0,href:!0});var i0t=s(G6);Vbe=n(i0t,"SPAN",{});var d0t=s(Vbe);T(Oy.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),bdr=i(LQe),Xbe=n(LQe,"SPAN",{});var c0t=s(Xbe);vdr=r(c0t,"AutoModelForAudioClassification"),c0t.forEach(t),LQe.forEach(t),MXe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(Vy.$$.fragment,hl),Fdr=i(hl),xd=n(hl,"P",{});var Ure=s(xd);Tdr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NW=n(Ure,"A",{href:!0});var f0t=s(NW);Mdr=r(f0t,"from_pretrained()"),f0t.forEach(t),Edr=r(Ure," class method or the "),qW=n(Ure,"A",{href:!0});var m0t=s(qW);Cdr=r(m0t,"from_config()"),m0t.forEach(t),wdr=r(Ure,` class
method.`),Ure.forEach(t),Adr=i(hl),Xy=n(hl,"P",{});var yQe=s(Xy);Ldr=r(yQe,"This class cannot be instantiated directly using "),zbe=n(yQe,"CODE",{});var g0t=s(zbe);ydr=r(g0t,"__init__()"),g0t.forEach(t),xdr=r(yQe," (throws an error)."),yQe.forEach(t),$dr=i(hl),Mt=n(hl,"DIV",{class:!0});var Sw=s(Mt);T(zy.$$.fragment,Sw),kdr=i(Sw),Qbe=n(Sw,"P",{});var h0t=s(Qbe);Sdr=r(h0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),h0t.forEach(t),Rdr=i(Sw),$d=n(Sw,"P",{});var Jre=s($d);Pdr=r(Jre,`Note:
Loading a model from its configuration file does `),Wbe=n(Jre,"STRONG",{});var p0t=s(Wbe);Bdr=r(p0t,"not"),p0t.forEach(t),Idr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Jre,"A",{href:!0});var _0t=s(jW);Ndr=r(_0t,"from_pretrained()"),_0t.forEach(t),qdr=r(Jre," to load the model weights."),Jre.forEach(t),jdr=i(Sw),T(O6.$$.fragment,Sw),Sw.forEach(t),Ddr=i(hl),fo=n(hl,"DIV",{class:!0});var Ta=s(fo);T(Qy.$$.fragment,Ta),Gdr=i(Ta),Hbe=n(Ta,"P",{});var u0t=s(Hbe);Odr=r(u0t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),u0t.forEach(t),Vdr=i(Ta),Ua=n(Ta,"P",{});var Rw=s(Ua);Xdr=r(Rw,"The model class to instantiate is selected based on the "),Ube=n(Rw,"CODE",{});var b0t=s(Ube);zdr=r(b0t,"model_type"),b0t.forEach(t),Qdr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(Rw,"CODE",{});var v0t=s(Jbe);Wdr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),Hdr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(Rw,"CODE",{});var F0t=s(Ybe);Udr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),Jdr=r(Rw,":"),Rw.forEach(t),Ydr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);V6=n(ze,"LI",{});var VIe=s(V6);Kbe=n(VIe,"STRONG",{});var T0t=s(Kbe);Kdr=r(T0t,"data2vec-audio"),T0t.forEach(t),Zdr=r(VIe," \u2014 "),DW=n(VIe,"A",{href:!0});var M0t=s(DW);ecr=r(M0t,"Data2VecAudioForSequenceClassification"),M0t.forEach(t),ocr=r(VIe," (Data2VecAudio model)"),VIe.forEach(t),rcr=i(ze),X6=n(ze,"LI",{});var XIe=s(X6);Zbe=n(XIe,"STRONG",{});var E0t=s(Zbe);tcr=r(E0t,"hubert"),E0t.forEach(t),acr=r(XIe," \u2014 "),GW=n(XIe,"A",{href:!0});var C0t=s(GW);ncr=r(C0t,"HubertForSequenceClassification"),C0t.forEach(t),scr=r(XIe," (Hubert model)"),XIe.forEach(t),lcr=i(ze),z6=n(ze,"LI",{});var zIe=s(z6);eve=n(zIe,"STRONG",{});var w0t=s(eve);icr=r(w0t,"sew"),w0t.forEach(t),dcr=r(zIe," \u2014 "),OW=n(zIe,"A",{href:!0});var A0t=s(OW);ccr=r(A0t,"SEWForSequenceClassification"),A0t.forEach(t),fcr=r(zIe," (SEW model)"),zIe.forEach(t),mcr=i(ze),Q6=n(ze,"LI",{});var QIe=s(Q6);ove=n(QIe,"STRONG",{});var L0t=s(ove);gcr=r(L0t,"sew-d"),L0t.forEach(t),hcr=r(QIe," \u2014 "),VW=n(QIe,"A",{href:!0});var y0t=s(VW);pcr=r(y0t,"SEWDForSequenceClassification"),y0t.forEach(t),_cr=r(QIe," (SEW-D model)"),QIe.forEach(t),ucr=i(ze),W6=n(ze,"LI",{});var WIe=s(W6);rve=n(WIe,"STRONG",{});var x0t=s(rve);bcr=r(x0t,"unispeech"),x0t.forEach(t),vcr=r(WIe," \u2014 "),XW=n(WIe,"A",{href:!0});var $0t=s(XW);Fcr=r($0t,"UniSpeechForSequenceClassification"),$0t.forEach(t),Tcr=r(WIe," (UniSpeech model)"),WIe.forEach(t),Mcr=i(ze),H6=n(ze,"LI",{});var HIe=s(H6);tve=n(HIe,"STRONG",{});var k0t=s(tve);Ecr=r(k0t,"unispeech-sat"),k0t.forEach(t),Ccr=r(HIe," \u2014 "),zW=n(HIe,"A",{href:!0});var S0t=s(zW);wcr=r(S0t,"UniSpeechSatForSequenceClassification"),S0t.forEach(t),Acr=r(HIe," (UniSpeechSat model)"),HIe.forEach(t),Lcr=i(ze),U6=n(ze,"LI",{});var UIe=s(U6);ave=n(UIe,"STRONG",{});var R0t=s(ave);ycr=r(R0t,"wav2vec2"),R0t.forEach(t),xcr=r(UIe," \u2014 "),QW=n(UIe,"A",{href:!0});var P0t=s(QW);$cr=r(P0t,"Wav2Vec2ForSequenceClassification"),P0t.forEach(t),kcr=r(UIe," (Wav2Vec2 model)"),UIe.forEach(t),Scr=i(ze),J6=n(ze,"LI",{});var JIe=s(J6);nve=n(JIe,"STRONG",{});var B0t=s(nve);Rcr=r(B0t,"wav2vec2-conformer"),B0t.forEach(t),Pcr=r(JIe," \u2014 "),WW=n(JIe,"A",{href:!0});var I0t=s(WW);Bcr=r(I0t,"Wav2Vec2ConformerForSequenceClassification"),I0t.forEach(t),Icr=r(JIe," (Wav2Vec2-Conformer model)"),JIe.forEach(t),Ncr=i(ze),Y6=n(ze,"LI",{});var YIe=s(Y6);sve=n(YIe,"STRONG",{});var N0t=s(sve);qcr=r(N0t,"wavlm"),N0t.forEach(t),jcr=r(YIe," \u2014 "),HW=n(YIe,"A",{href:!0});var q0t=s(HW);Dcr=r(q0t,"WavLMForSequenceClassification"),q0t.forEach(t),Gcr=r(YIe," (WavLM model)"),YIe.forEach(t),ze.forEach(t),Ocr=i(Ta),K6=n(Ta,"P",{});var KIe=s(K6);Vcr=r(KIe,"The model is set in evaluation mode by default using "),lve=n(KIe,"CODE",{});var j0t=s(lve);Xcr=r(j0t,"model.eval()"),j0t.forEach(t),zcr=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(KIe,"CODE",{});var D0t=s(ive);Qcr=r(D0t,"model.train()"),D0t.forEach(t),KIe.forEach(t),Wcr=i(Ta),T(Z6.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),EXe=i(f),kd=n(f,"H2",{class:!0});var xQe=s(kd);eT=n(xQe,"A",{id:!0,class:!0,href:!0});var G0t=s(eT);dve=n(G0t,"SPAN",{});var O0t=s(dve);T(Wy.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),Hcr=i(xQe),cve=n(xQe,"SPAN",{});var V0t=s(cve);Ucr=r(V0t,"AutoModelForAudioFrameClassification"),V0t.forEach(t),xQe.forEach(t),CXe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(Hy.$$.fragment,pl),Jcr=i(pl),Sd=n(pl,"P",{});var Yre=s(Sd);Ycr=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UW=n(Yre,"A",{href:!0});var X0t=s(UW);Kcr=r(X0t,"from_pretrained()"),X0t.forEach(t),Zcr=r(Yre," class method or the "),JW=n(Yre,"A",{href:!0});var z0t=s(JW);efr=r(z0t,"from_config()"),z0t.forEach(t),ofr=r(Yre,` class
method.`),Yre.forEach(t),rfr=i(pl),Uy=n(pl,"P",{});var $Qe=s(Uy);tfr=r($Qe,"This class cannot be instantiated directly using "),fve=n($Qe,"CODE",{});var Q0t=s(fve);afr=r(Q0t,"__init__()"),Q0t.forEach(t),nfr=r($Qe," (throws an error)."),$Qe.forEach(t),sfr=i(pl),Et=n(pl,"DIV",{class:!0});var Pw=s(Et);T(Jy.$$.fragment,Pw),lfr=i(Pw),mve=n(Pw,"P",{});var W0t=s(mve);ifr=r(W0t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),W0t.forEach(t),dfr=i(Pw),Rd=n(Pw,"P",{});var Kre=s(Rd);cfr=r(Kre,`Note:
Loading a model from its configuration file does `),gve=n(Kre,"STRONG",{});var H0t=s(gve);ffr=r(H0t,"not"),H0t.forEach(t),mfr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(Kre,"A",{href:!0});var U0t=s(YW);gfr=r(U0t,"from_pretrained()"),U0t.forEach(t),hfr=r(Kre," to load the model weights."),Kre.forEach(t),pfr=i(Pw),T(oT.$$.fragment,Pw),Pw.forEach(t),_fr=i(pl),mo=n(pl,"DIV",{class:!0});var Ma=s(mo);T(Yy.$$.fragment,Ma),ufr=i(Ma),hve=n(Ma,"P",{});var J0t=s(hve);bfr=r(J0t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),J0t.forEach(t),vfr=i(Ma),Ja=n(Ma,"P",{});var Bw=s(Ja);Ffr=r(Bw,"The model class to instantiate is selected based on the "),pve=n(Bw,"CODE",{});var Y0t=s(pve);Tfr=r(Y0t,"model_type"),Y0t.forEach(t),Mfr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),_ve=n(Bw,"CODE",{});var K0t=s(_ve);Efr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Cfr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(Bw,"CODE",{});var Z0t=s(uve);wfr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Afr=r(Bw,":"),Bw.forEach(t),Lfr=i(Ma),et=n(Ma,"UL",{});var _l=s(et);rT=n(_l,"LI",{});var ZIe=s(rT);bve=n(ZIe,"STRONG",{});var ewt=s(bve);yfr=r(ewt,"data2vec-audio"),ewt.forEach(t),xfr=r(ZIe," \u2014 "),KW=n(ZIe,"A",{href:!0});var owt=s(KW);$fr=r(owt,"Data2VecAudioForAudioFrameClassification"),owt.forEach(t),kfr=r(ZIe," (Data2VecAudio model)"),ZIe.forEach(t),Sfr=i(_l),tT=n(_l,"LI",{});var eNe=s(tT);vve=n(eNe,"STRONG",{});var rwt=s(vve);Rfr=r(rwt,"unispeech-sat"),rwt.forEach(t),Pfr=r(eNe," \u2014 "),ZW=n(eNe,"A",{href:!0});var twt=s(ZW);Bfr=r(twt,"UniSpeechSatForAudioFrameClassification"),twt.forEach(t),Ifr=r(eNe," (UniSpeechSat model)"),eNe.forEach(t),Nfr=i(_l),aT=n(_l,"LI",{});var oNe=s(aT);Fve=n(oNe,"STRONG",{});var awt=s(Fve);qfr=r(awt,"wav2vec2"),awt.forEach(t),jfr=r(oNe," \u2014 "),eH=n(oNe,"A",{href:!0});var nwt=s(eH);Dfr=r(nwt,"Wav2Vec2ForAudioFrameClassification"),nwt.forEach(t),Gfr=r(oNe," (Wav2Vec2 model)"),oNe.forEach(t),Ofr=i(_l),nT=n(_l,"LI",{});var rNe=s(nT);Tve=n(rNe,"STRONG",{});var swt=s(Tve);Vfr=r(swt,"wav2vec2-conformer"),swt.forEach(t),Xfr=r(rNe," \u2014 "),oH=n(rNe,"A",{href:!0});var lwt=s(oH);zfr=r(lwt,"Wav2Vec2ConformerForAudioFrameClassification"),lwt.forEach(t),Qfr=r(rNe," (Wav2Vec2-Conformer model)"),rNe.forEach(t),Wfr=i(_l),sT=n(_l,"LI",{});var tNe=s(sT);Mve=n(tNe,"STRONG",{});var iwt=s(Mve);Hfr=r(iwt,"wavlm"),iwt.forEach(t),Ufr=r(tNe," \u2014 "),rH=n(tNe,"A",{href:!0});var dwt=s(rH);Jfr=r(dwt,"WavLMForAudioFrameClassification"),dwt.forEach(t),Yfr=r(tNe," (WavLM model)"),tNe.forEach(t),_l.forEach(t),Kfr=i(Ma),lT=n(Ma,"P",{});var aNe=s(lT);Zfr=r(aNe,"The model is set in evaluation mode by default using "),Eve=n(aNe,"CODE",{});var cwt=s(Eve);emr=r(cwt,"model.eval()"),cwt.forEach(t),omr=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n(aNe,"CODE",{});var fwt=s(Cve);rmr=r(fwt,"model.train()"),fwt.forEach(t),aNe.forEach(t),tmr=i(Ma),T(iT.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),wXe=i(f),Pd=n(f,"H2",{class:!0});var kQe=s(Pd);dT=n(kQe,"A",{id:!0,class:!0,href:!0});var mwt=s(dT);wve=n(mwt,"SPAN",{});var gwt=s(wve);T(Ky.$$.fragment,gwt),gwt.forEach(t),mwt.forEach(t),amr=i(kQe),Ave=n(kQe,"SPAN",{});var hwt=s(Ave);nmr=r(hwt,"AutoModelForCTC"),hwt.forEach(t),kQe.forEach(t),AXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(Zy.$$.fragment,ul),smr=i(ul),Bd=n(ul,"P",{});var Zre=s(Bd);lmr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tH=n(Zre,"A",{href:!0});var pwt=s(tH);imr=r(pwt,"from_pretrained()"),pwt.forEach(t),dmr=r(Zre," class method or the "),aH=n(Zre,"A",{href:!0});var _wt=s(aH);cmr=r(_wt,"from_config()"),_wt.forEach(t),fmr=r(Zre,` class
method.`),Zre.forEach(t),mmr=i(ul),e8=n(ul,"P",{});var SQe=s(e8);gmr=r(SQe,"This class cannot be instantiated directly using "),Lve=n(SQe,"CODE",{});var uwt=s(Lve);hmr=r(uwt,"__init__()"),uwt.forEach(t),pmr=r(SQe," (throws an error)."),SQe.forEach(t),_mr=i(ul),Ct=n(ul,"DIV",{class:!0});var Iw=s(Ct);T(o8.$$.fragment,Iw),umr=i(Iw),yve=n(Iw,"P",{});var bwt=s(yve);bmr=r(bwt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bwt.forEach(t),vmr=i(Iw),Id=n(Iw,"P",{});var ete=s(Id);Fmr=r(ete,`Note:
Loading a model from its configuration file does `),xve=n(ete,"STRONG",{});var vwt=s(xve);Tmr=r(vwt,"not"),vwt.forEach(t),Mmr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(ete,"A",{href:!0});var Fwt=s(nH);Emr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),Cmr=r(ete," to load the model weights."),ete.forEach(t),wmr=i(Iw),T(cT.$$.fragment,Iw),Iw.forEach(t),Amr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(r8.$$.fragment,Ea),Lmr=i(Ea),$ve=n(Ea,"P",{});var Twt=s($ve);ymr=r(Twt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Twt.forEach(t),xmr=i(Ea),Ya=n(Ea,"P",{});var Nw=s(Ya);$mr=r(Nw,"The model class to instantiate is selected based on the "),kve=n(Nw,"CODE",{});var Mwt=s(kve);kmr=r(Mwt,"model_type"),Mwt.forEach(t),Smr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Sve=n(Nw,"CODE",{});var Ewt=s(Sve);Rmr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),Pmr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(Nw,"CODE",{});var Cwt=s(Rve);Bmr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),Imr=r(Nw,":"),Nw.forEach(t),Nmr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);fT=n(Be,"LI",{});var nNe=s(fT);Pve=n(nNe,"STRONG",{});var wwt=s(Pve);qmr=r(wwt,"data2vec-audio"),wwt.forEach(t),jmr=r(nNe," \u2014 "),sH=n(nNe,"A",{href:!0});var Awt=s(sH);Dmr=r(Awt,"Data2VecAudioForCTC"),Awt.forEach(t),Gmr=r(nNe," (Data2VecAudio model)"),nNe.forEach(t),Omr=i(Be),mT=n(Be,"LI",{});var sNe=s(mT);Bve=n(sNe,"STRONG",{});var Lwt=s(Bve);Vmr=r(Lwt,"hubert"),Lwt.forEach(t),Xmr=r(sNe," \u2014 "),lH=n(sNe,"A",{href:!0});var ywt=s(lH);zmr=r(ywt,"HubertForCTC"),ywt.forEach(t),Qmr=r(sNe," (Hubert model)"),sNe.forEach(t),Wmr=i(Be),gT=n(Be,"LI",{});var lNe=s(gT);Ive=n(lNe,"STRONG",{});var xwt=s(Ive);Hmr=r(xwt,"mctct"),xwt.forEach(t),Umr=r(lNe," \u2014 "),iH=n(lNe,"A",{href:!0});var $wt=s(iH);Jmr=r($wt,"MCTCTForCTC"),$wt.forEach(t),Ymr=r(lNe," (M-CTC-T model)"),lNe.forEach(t),Kmr=i(Be),hT=n(Be,"LI",{});var iNe=s(hT);Nve=n(iNe,"STRONG",{});var kwt=s(Nve);Zmr=r(kwt,"sew"),kwt.forEach(t),egr=r(iNe," \u2014 "),dH=n(iNe,"A",{href:!0});var Swt=s(dH);ogr=r(Swt,"SEWForCTC"),Swt.forEach(t),rgr=r(iNe," (SEW model)"),iNe.forEach(t),tgr=i(Be),pT=n(Be,"LI",{});var dNe=s(pT);qve=n(dNe,"STRONG",{});var Rwt=s(qve);agr=r(Rwt,"sew-d"),Rwt.forEach(t),ngr=r(dNe," \u2014 "),cH=n(dNe,"A",{href:!0});var Pwt=s(cH);sgr=r(Pwt,"SEWDForCTC"),Pwt.forEach(t),lgr=r(dNe," (SEW-D model)"),dNe.forEach(t),igr=i(Be),_T=n(Be,"LI",{});var cNe=s(_T);jve=n(cNe,"STRONG",{});var Bwt=s(jve);dgr=r(Bwt,"unispeech"),Bwt.forEach(t),cgr=r(cNe," \u2014 "),fH=n(cNe,"A",{href:!0});var Iwt=s(fH);fgr=r(Iwt,"UniSpeechForCTC"),Iwt.forEach(t),mgr=r(cNe," (UniSpeech model)"),cNe.forEach(t),ggr=i(Be),uT=n(Be,"LI",{});var fNe=s(uT);Dve=n(fNe,"STRONG",{});var Nwt=s(Dve);hgr=r(Nwt,"unispeech-sat"),Nwt.forEach(t),pgr=r(fNe," \u2014 "),mH=n(fNe,"A",{href:!0});var qwt=s(mH);_gr=r(qwt,"UniSpeechSatForCTC"),qwt.forEach(t),ugr=r(fNe," (UniSpeechSat model)"),fNe.forEach(t),bgr=i(Be),bT=n(Be,"LI",{});var mNe=s(bT);Gve=n(mNe,"STRONG",{});var jwt=s(Gve);vgr=r(jwt,"wav2vec2"),jwt.forEach(t),Fgr=r(mNe," \u2014 "),gH=n(mNe,"A",{href:!0});var Dwt=s(gH);Tgr=r(Dwt,"Wav2Vec2ForCTC"),Dwt.forEach(t),Mgr=r(mNe," (Wav2Vec2 model)"),mNe.forEach(t),Egr=i(Be),vT=n(Be,"LI",{});var gNe=s(vT);Ove=n(gNe,"STRONG",{});var Gwt=s(Ove);Cgr=r(Gwt,"wav2vec2-conformer"),Gwt.forEach(t),wgr=r(gNe," \u2014 "),hH=n(gNe,"A",{href:!0});var Owt=s(hH);Agr=r(Owt,"Wav2Vec2ConformerForCTC"),Owt.forEach(t),Lgr=r(gNe," (Wav2Vec2-Conformer model)"),gNe.forEach(t),ygr=i(Be),FT=n(Be,"LI",{});var hNe=s(FT);Vve=n(hNe,"STRONG",{});var Vwt=s(Vve);xgr=r(Vwt,"wavlm"),Vwt.forEach(t),$gr=r(hNe," \u2014 "),pH=n(hNe,"A",{href:!0});var Xwt=s(pH);kgr=r(Xwt,"WavLMForCTC"),Xwt.forEach(t),Sgr=r(hNe," (WavLM model)"),hNe.forEach(t),Be.forEach(t),Rgr=i(Ea),TT=n(Ea,"P",{});var pNe=s(TT);Pgr=r(pNe,"The model is set in evaluation mode by default using "),Xve=n(pNe,"CODE",{});var zwt=s(Xve);Bgr=r(zwt,"model.eval()"),zwt.forEach(t),Igr=r(pNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=n(pNe,"CODE",{});var Qwt=s(zve);Ngr=r(Qwt,"model.train()"),Qwt.forEach(t),pNe.forEach(t),qgr=i(Ea),T(MT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),LXe=i(f),Nd=n(f,"H2",{class:!0});var RQe=s(Nd);ET=n(RQe,"A",{id:!0,class:!0,href:!0});var Wwt=s(ET);Qve=n(Wwt,"SPAN",{});var Hwt=s(Qve);T(t8.$$.fragment,Hwt),Hwt.forEach(t),Wwt.forEach(t),jgr=i(RQe),Wve=n(RQe,"SPAN",{});var Uwt=s(Wve);Dgr=r(Uwt,"AutoModelForSpeechSeq2Seq"),Uwt.forEach(t),RQe.forEach(t),yXe=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(a8.$$.fragment,bl),Ggr=i(bl),qd=n(bl,"P",{});var ote=s(qd);Ogr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_H=n(ote,"A",{href:!0});var Jwt=s(_H);Vgr=r(Jwt,"from_pretrained()"),Jwt.forEach(t),Xgr=r(ote," class method or the "),uH=n(ote,"A",{href:!0});var Ywt=s(uH);zgr=r(Ywt,"from_config()"),Ywt.forEach(t),Qgr=r(ote,` class
method.`),ote.forEach(t),Wgr=i(bl),n8=n(bl,"P",{});var PQe=s(n8);Hgr=r(PQe,"This class cannot be instantiated directly using "),Hve=n(PQe,"CODE",{});var Kwt=s(Hve);Ugr=r(Kwt,"__init__()"),Kwt.forEach(t),Jgr=r(PQe," (throws an error)."),PQe.forEach(t),Ygr=i(bl),wt=n(bl,"DIV",{class:!0});var qw=s(wt);T(s8.$$.fragment,qw),Kgr=i(qw),Uve=n(qw,"P",{});var Zwt=s(Uve);Zgr=r(Zwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zwt.forEach(t),ehr=i(qw),jd=n(qw,"P",{});var rte=s(jd);ohr=r(rte,`Note:
Loading a model from its configuration file does `),Jve=n(rte,"STRONG",{});var eAt=s(Jve);rhr=r(eAt,"not"),eAt.forEach(t),thr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(rte,"A",{href:!0});var oAt=s(bH);ahr=r(oAt,"from_pretrained()"),oAt.forEach(t),nhr=r(rte," to load the model weights."),rte.forEach(t),shr=i(qw),T(CT.$$.fragment,qw),qw.forEach(t),lhr=i(bl),ho=n(bl,"DIV",{class:!0});var Ca=s(ho);T(l8.$$.fragment,Ca),ihr=i(Ca),Yve=n(Ca,"P",{});var rAt=s(Yve);dhr=r(rAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rAt.forEach(t),chr=i(Ca),Ka=n(Ca,"P",{});var jw=s(Ka);fhr=r(jw,"The model class to instantiate is selected based on the "),Kve=n(jw,"CODE",{});var tAt=s(Kve);mhr=r(tAt,"model_type"),tAt.forEach(t),ghr=r(jw,` property of the config object (either
passed as an argument or loaded from `),Zve=n(jw,"CODE",{});var aAt=s(Zve);hhr=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),phr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(jw,"CODE",{});var nAt=s(e3e);_hr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),uhr=r(jw,":"),jw.forEach(t),bhr=i(Ca),i8=n(Ca,"UL",{});var BQe=s(i8);wT=n(BQe,"LI",{});var _Ne=s(wT);o3e=n(_Ne,"STRONG",{});var sAt=s(o3e);vhr=r(sAt,"speech-encoder-decoder"),sAt.forEach(t),Fhr=r(_Ne," \u2014 "),vH=n(_Ne,"A",{href:!0});var lAt=s(vH);Thr=r(lAt,"SpeechEncoderDecoderModel"),lAt.forEach(t),Mhr=r(_Ne," (Speech Encoder decoder model)"),_Ne.forEach(t),Ehr=i(BQe),AT=n(BQe,"LI",{});var uNe=s(AT);r3e=n(uNe,"STRONG",{});var iAt=s(r3e);Chr=r(iAt,"speech_to_text"),iAt.forEach(t),whr=r(uNe," \u2014 "),FH=n(uNe,"A",{href:!0});var dAt=s(FH);Ahr=r(dAt,"Speech2TextForConditionalGeneration"),dAt.forEach(t),Lhr=r(uNe," (Speech2Text model)"),uNe.forEach(t),BQe.forEach(t),yhr=i(Ca),LT=n(Ca,"P",{});var bNe=s(LT);xhr=r(bNe,"The model is set in evaluation mode by default using "),t3e=n(bNe,"CODE",{});var cAt=s(t3e);$hr=r(cAt,"model.eval()"),cAt.forEach(t),khr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a3e=n(bNe,"CODE",{});var fAt=s(a3e);Shr=r(fAt,"model.train()"),fAt.forEach(t),bNe.forEach(t),Rhr=i(Ca),T(yT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),xXe=i(f),Dd=n(f,"H2",{class:!0});var IQe=s(Dd);xT=n(IQe,"A",{id:!0,class:!0,href:!0});var mAt=s(xT);n3e=n(mAt,"SPAN",{});var gAt=s(n3e);T(d8.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),Phr=i(IQe),s3e=n(IQe,"SPAN",{});var hAt=s(s3e);Bhr=r(hAt,"AutoModelForAudioXVector"),hAt.forEach(t),IQe.forEach(t),$Xe=i(f),Ho=n(f,"DIV",{class:!0});var vl=s(Ho);T(c8.$$.fragment,vl),Ihr=i(vl),Gd=n(vl,"P",{});var tte=s(Gd);Nhr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TH=n(tte,"A",{href:!0});var pAt=s(TH);qhr=r(pAt,"from_pretrained()"),pAt.forEach(t),jhr=r(tte," class method or the "),MH=n(tte,"A",{href:!0});var _At=s(MH);Dhr=r(_At,"from_config()"),_At.forEach(t),Ghr=r(tte,` class
method.`),tte.forEach(t),Ohr=i(vl),f8=n(vl,"P",{});var NQe=s(f8);Vhr=r(NQe,"This class cannot be instantiated directly using "),l3e=n(NQe,"CODE",{});var uAt=s(l3e);Xhr=r(uAt,"__init__()"),uAt.forEach(t),zhr=r(NQe," (throws an error)."),NQe.forEach(t),Qhr=i(vl),At=n(vl,"DIV",{class:!0});var Dw=s(At);T(m8.$$.fragment,Dw),Whr=i(Dw),i3e=n(Dw,"P",{});var bAt=s(i3e);Hhr=r(bAt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bAt.forEach(t),Uhr=i(Dw),Od=n(Dw,"P",{});var ate=s(Od);Jhr=r(ate,`Note:
Loading a model from its configuration file does `),d3e=n(ate,"STRONG",{});var vAt=s(d3e);Yhr=r(vAt,"not"),vAt.forEach(t),Khr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(ate,"A",{href:!0});var FAt=s(EH);Zhr=r(FAt,"from_pretrained()"),FAt.forEach(t),epr=r(ate," to load the model weights."),ate.forEach(t),opr=i(Dw),T($T.$$.fragment,Dw),Dw.forEach(t),rpr=i(vl),po=n(vl,"DIV",{class:!0});var wa=s(po);T(g8.$$.fragment,wa),tpr=i(wa),c3e=n(wa,"P",{});var TAt=s(c3e);apr=r(TAt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TAt.forEach(t),npr=i(wa),Za=n(wa,"P",{});var Gw=s(Za);spr=r(Gw,"The model class to instantiate is selected based on the "),f3e=n(Gw,"CODE",{});var MAt=s(f3e);lpr=r(MAt,"model_type"),MAt.forEach(t),ipr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),m3e=n(Gw,"CODE",{});var EAt=s(m3e);dpr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),cpr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=n(Gw,"CODE",{});var CAt=s(g3e);fpr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),mpr=r(Gw,":"),Gw.forEach(t),gpr=i(wa),ot=n(wa,"UL",{});var Fl=s(ot);kT=n(Fl,"LI",{});var vNe=s(kT);h3e=n(vNe,"STRONG",{});var wAt=s(h3e);hpr=r(wAt,"data2vec-audio"),wAt.forEach(t),ppr=r(vNe," \u2014 "),CH=n(vNe,"A",{href:!0});var AAt=s(CH);_pr=r(AAt,"Data2VecAudioForXVector"),AAt.forEach(t),upr=r(vNe," (Data2VecAudio model)"),vNe.forEach(t),bpr=i(Fl),ST=n(Fl,"LI",{});var FNe=s(ST);p3e=n(FNe,"STRONG",{});var LAt=s(p3e);vpr=r(LAt,"unispeech-sat"),LAt.forEach(t),Fpr=r(FNe," \u2014 "),wH=n(FNe,"A",{href:!0});var yAt=s(wH);Tpr=r(yAt,"UniSpeechSatForXVector"),yAt.forEach(t),Mpr=r(FNe," (UniSpeechSat model)"),FNe.forEach(t),Epr=i(Fl),RT=n(Fl,"LI",{});var TNe=s(RT);_3e=n(TNe,"STRONG",{});var xAt=s(_3e);Cpr=r(xAt,"wav2vec2"),xAt.forEach(t),wpr=r(TNe," \u2014 "),AH=n(TNe,"A",{href:!0});var $At=s(AH);Apr=r($At,"Wav2Vec2ForXVector"),$At.forEach(t),Lpr=r(TNe," (Wav2Vec2 model)"),TNe.forEach(t),ypr=i(Fl),PT=n(Fl,"LI",{});var MNe=s(PT);u3e=n(MNe,"STRONG",{});var kAt=s(u3e);xpr=r(kAt,"wav2vec2-conformer"),kAt.forEach(t),$pr=r(MNe," \u2014 "),LH=n(MNe,"A",{href:!0});var SAt=s(LH);kpr=r(SAt,"Wav2Vec2ConformerForXVector"),SAt.forEach(t),Spr=r(MNe," (Wav2Vec2-Conformer model)"),MNe.forEach(t),Rpr=i(Fl),BT=n(Fl,"LI",{});var ENe=s(BT);b3e=n(ENe,"STRONG",{});var RAt=s(b3e);Ppr=r(RAt,"wavlm"),RAt.forEach(t),Bpr=r(ENe," \u2014 "),yH=n(ENe,"A",{href:!0});var PAt=s(yH);Ipr=r(PAt,"WavLMForXVector"),PAt.forEach(t),Npr=r(ENe," (WavLM model)"),ENe.forEach(t),Fl.forEach(t),qpr=i(wa),IT=n(wa,"P",{});var CNe=s(IT);jpr=r(CNe,"The model is set in evaluation mode by default using "),v3e=n(CNe,"CODE",{});var BAt=s(v3e);Dpr=r(BAt,"model.eval()"),BAt.forEach(t),Gpr=r(CNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F3e=n(CNe,"CODE",{});var IAt=s(F3e);Opr=r(IAt,"model.train()"),IAt.forEach(t),CNe.forEach(t),Vpr=i(wa),T(NT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),kXe=i(f),Vd=n(f,"H2",{class:!0});var qQe=s(Vd);qT=n(qQe,"A",{id:!0,class:!0,href:!0});var NAt=s(qT);T3e=n(NAt,"SPAN",{});var qAt=s(T3e);T(h8.$$.fragment,qAt),qAt.forEach(t),NAt.forEach(t),Xpr=i(qQe),M3e=n(qQe,"SPAN",{});var jAt=s(M3e);zpr=r(jAt,"AutoModelForMaskedImageModeling"),jAt.forEach(t),qQe.forEach(t),SXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(p8.$$.fragment,Tl),Qpr=i(Tl),Xd=n(Tl,"P",{});var nte=s(Xd);Wpr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xH=n(nte,"A",{href:!0});var DAt=s(xH);Hpr=r(DAt,"from_pretrained()"),DAt.forEach(t),Upr=r(nte," class method or the "),$H=n(nte,"A",{href:!0});var GAt=s($H);Jpr=r(GAt,"from_config()"),GAt.forEach(t),Ypr=r(nte,` class
method.`),nte.forEach(t),Kpr=i(Tl),_8=n(Tl,"P",{});var jQe=s(_8);Zpr=r(jQe,"This class cannot be instantiated directly using "),E3e=n(jQe,"CODE",{});var OAt=s(E3e);e_r=r(OAt,"__init__()"),OAt.forEach(t),o_r=r(jQe," (throws an error)."),jQe.forEach(t),r_r=i(Tl),Lt=n(Tl,"DIV",{class:!0});var Ow=s(Lt);T(u8.$$.fragment,Ow),t_r=i(Ow),C3e=n(Ow,"P",{});var VAt=s(C3e);a_r=r(VAt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),VAt.forEach(t),n_r=i(Ow),zd=n(Ow,"P",{});var ste=s(zd);s_r=r(ste,`Note:
Loading a model from its configuration file does `),w3e=n(ste,"STRONG",{});var XAt=s(w3e);l_r=r(XAt,"not"),XAt.forEach(t),i_r=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(ste,"A",{href:!0});var zAt=s(kH);d_r=r(zAt,"from_pretrained()"),zAt.forEach(t),c_r=r(ste," to load the model weights."),ste.forEach(t),f_r=i(Ow),T(jT.$$.fragment,Ow),Ow.forEach(t),m_r=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(b8.$$.fragment,Aa),g_r=i(Aa),A3e=n(Aa,"P",{});var QAt=s(A3e);h_r=r(QAt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),QAt.forEach(t),p_r=i(Aa),en=n(Aa,"P",{});var Vw=s(en);__r=r(Vw,"The model class to instantiate is selected based on the "),L3e=n(Vw,"CODE",{});var WAt=s(L3e);u_r=r(WAt,"model_type"),WAt.forEach(t),b_r=r(Vw,` property of the config object (either
passed as an argument or loaded from `),y3e=n(Vw,"CODE",{});var HAt=s(y3e);v_r=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),F_r=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(Vw,"CODE",{});var UAt=s(x3e);T_r=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),M_r=r(Vw,":"),Vw.forEach(t),E_r=i(Aa),Qd=n(Aa,"UL",{});var lte=s(Qd);DT=n(lte,"LI",{});var wNe=s(DT);$3e=n(wNe,"STRONG",{});var JAt=s($3e);C_r=r(JAt,"deit"),JAt.forEach(t),w_r=r(wNe," \u2014 "),SH=n(wNe,"A",{href:!0});var YAt=s(SH);A_r=r(YAt,"DeiTForMaskedImageModeling"),YAt.forEach(t),L_r=r(wNe," (DeiT model)"),wNe.forEach(t),y_r=i(lte),GT=n(lte,"LI",{});var ANe=s(GT);k3e=n(ANe,"STRONG",{});var KAt=s(k3e);x_r=r(KAt,"swin"),KAt.forEach(t),$_r=r(ANe," \u2014 "),RH=n(ANe,"A",{href:!0});var ZAt=s(RH);k_r=r(ZAt,"SwinForMaskedImageModeling"),ZAt.forEach(t),S_r=r(ANe," (Swin Transformer model)"),ANe.forEach(t),R_r=i(lte),OT=n(lte,"LI",{});var LNe=s(OT);S3e=n(LNe,"STRONG",{});var eLt=s(S3e);P_r=r(eLt,"vit"),eLt.forEach(t),B_r=r(LNe," \u2014 "),PH=n(LNe,"A",{href:!0});var oLt=s(PH);I_r=r(oLt,"ViTForMaskedImageModeling"),oLt.forEach(t),N_r=r(LNe," (ViT model)"),LNe.forEach(t),lte.forEach(t),q_r=i(Aa),VT=n(Aa,"P",{});var yNe=s(VT);j_r=r(yNe,"The model is set in evaluation mode by default using "),R3e=n(yNe,"CODE",{});var rLt=s(R3e);D_r=r(rLt,"model.eval()"),rLt.forEach(t),G_r=r(yNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P3e=n(yNe,"CODE",{});var tLt=s(P3e);O_r=r(tLt,"model.train()"),tLt.forEach(t),yNe.forEach(t),V_r=i(Aa),T(XT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),RXe=i(f),Wd=n(f,"H2",{class:!0});var DQe=s(Wd);zT=n(DQe,"A",{id:!0,class:!0,href:!0});var aLt=s(zT);B3e=n(aLt,"SPAN",{});var nLt=s(B3e);T(v8.$$.fragment,nLt),nLt.forEach(t),aLt.forEach(t),X_r=i(DQe),I3e=n(DQe,"SPAN",{});var sLt=s(I3e);z_r=r(sLt,"AutoModelForObjectDetection"),sLt.forEach(t),DQe.forEach(t),PXe=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(F8.$$.fragment,Ml),Q_r=i(Ml),Hd=n(Ml,"P",{});var ite=s(Hd);W_r=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BH=n(ite,"A",{href:!0});var lLt=s(BH);H_r=r(lLt,"from_pretrained()"),lLt.forEach(t),U_r=r(ite," class method or the "),IH=n(ite,"A",{href:!0});var iLt=s(IH);J_r=r(iLt,"from_config()"),iLt.forEach(t),Y_r=r(ite,` class
method.`),ite.forEach(t),K_r=i(Ml),T8=n(Ml,"P",{});var GQe=s(T8);Z_r=r(GQe,"This class cannot be instantiated directly using "),N3e=n(GQe,"CODE",{});var dLt=s(N3e);eur=r(dLt,"__init__()"),dLt.forEach(t),our=r(GQe," (throws an error)."),GQe.forEach(t),rur=i(Ml),yt=n(Ml,"DIV",{class:!0});var Xw=s(yt);T(M8.$$.fragment,Xw),tur=i(Xw),q3e=n(Xw,"P",{});var cLt=s(q3e);aur=r(cLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cLt.forEach(t),nur=i(Xw),Ud=n(Xw,"P",{});var dte=s(Ud);sur=r(dte,`Note:
Loading a model from its configuration file does `),j3e=n(dte,"STRONG",{});var fLt=s(j3e);lur=r(fLt,"not"),fLt.forEach(t),iur=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(dte,"A",{href:!0});var mLt=s(NH);dur=r(mLt,"from_pretrained()"),mLt.forEach(t),cur=r(dte," to load the model weights."),dte.forEach(t),fur=i(Xw),T(QT.$$.fragment,Xw),Xw.forEach(t),mur=i(Ml),uo=n(Ml,"DIV",{class:!0});var La=s(uo);T(E8.$$.fragment,La),gur=i(La),D3e=n(La,"P",{});var gLt=s(D3e);hur=r(gLt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gLt.forEach(t),pur=i(La),on=n(La,"P",{});var zw=s(on);_ur=r(zw,"The model class to instantiate is selected based on the "),G3e=n(zw,"CODE",{});var hLt=s(G3e);uur=r(hLt,"model_type"),hLt.forEach(t),bur=r(zw,` property of the config object (either
passed as an argument or loaded from `),O3e=n(zw,"CODE",{});var pLt=s(O3e);vur=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),Fur=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V3e=n(zw,"CODE",{});var _Lt=s(V3e);Tur=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),Mur=r(zw,":"),zw.forEach(t),Eur=i(La),C8=n(La,"UL",{});var OQe=s(C8);WT=n(OQe,"LI",{});var xNe=s(WT);X3e=n(xNe,"STRONG",{});var uLt=s(X3e);Cur=r(uLt,"detr"),uLt.forEach(t),wur=r(xNe," \u2014 "),qH=n(xNe,"A",{href:!0});var bLt=s(qH);Aur=r(bLt,"DetrForObjectDetection"),bLt.forEach(t),Lur=r(xNe," (DETR model)"),xNe.forEach(t),yur=i(OQe),HT=n(OQe,"LI",{});var $Ne=s(HT);z3e=n($Ne,"STRONG",{});var vLt=s(z3e);xur=r(vLt,"yolos"),vLt.forEach(t),$ur=r($Ne," \u2014 "),jH=n($Ne,"A",{href:!0});var FLt=s(jH);kur=r(FLt,"YolosForObjectDetection"),FLt.forEach(t),Sur=r($Ne," (YOLOS model)"),$Ne.forEach(t),OQe.forEach(t),Rur=i(La),UT=n(La,"P",{});var kNe=s(UT);Pur=r(kNe,"The model is set in evaluation mode by default using "),Q3e=n(kNe,"CODE",{});var TLt=s(Q3e);Bur=r(TLt,"model.eval()"),TLt.forEach(t),Iur=r(kNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W3e=n(kNe,"CODE",{});var MLt=s(W3e);Nur=r(MLt,"model.train()"),MLt.forEach(t),kNe.forEach(t),qur=i(La),T(JT.$$.fragment,La),La.forEach(t),Ml.forEach(t),BXe=i(f),Jd=n(f,"H2",{class:!0});var VQe=s(Jd);YT=n(VQe,"A",{id:!0,class:!0,href:!0});var ELt=s(YT);H3e=n(ELt,"SPAN",{});var CLt=s(H3e);T(w8.$$.fragment,CLt),CLt.forEach(t),ELt.forEach(t),jur=i(VQe),U3e=n(VQe,"SPAN",{});var wLt=s(U3e);Dur=r(wLt,"AutoModelForImageSegmentation"),wLt.forEach(t),VQe.forEach(t),IXe=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T(A8.$$.fragment,El),Gur=i(El),Yd=n(El,"P",{});var cte=s(Yd);Our=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),DH=n(cte,"A",{href:!0});var ALt=s(DH);Vur=r(ALt,"from_pretrained()"),ALt.forEach(t),Xur=r(cte," class method or the "),GH=n(cte,"A",{href:!0});var LLt=s(GH);zur=r(LLt,"from_config()"),LLt.forEach(t),Qur=r(cte,` class
method.`),cte.forEach(t),Wur=i(El),L8=n(El,"P",{});var XQe=s(L8);Hur=r(XQe,"This class cannot be instantiated directly using "),J3e=n(XQe,"CODE",{});var yLt=s(J3e);Uur=r(yLt,"__init__()"),yLt.forEach(t),Jur=r(XQe," (throws an error)."),XQe.forEach(t),Yur=i(El),xt=n(El,"DIV",{class:!0});var Qw=s(xt);T(y8.$$.fragment,Qw),Kur=i(Qw),Y3e=n(Qw,"P",{});var xLt=s(Y3e);Zur=r(xLt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xLt.forEach(t),e1r=i(Qw),Kd=n(Qw,"P",{});var fte=s(Kd);o1r=r(fte,`Note:
Loading a model from its configuration file does `),K3e=n(fte,"STRONG",{});var $Lt=s(K3e);r1r=r($Lt,"not"),$Lt.forEach(t),t1r=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(fte,"A",{href:!0});var kLt=s(OH);a1r=r(kLt,"from_pretrained()"),kLt.forEach(t),n1r=r(fte," to load the model weights."),fte.forEach(t),s1r=i(Qw),T(KT.$$.fragment,Qw),Qw.forEach(t),l1r=i(El),bo=n(El,"DIV",{class:!0});var ya=s(bo);T(x8.$$.fragment,ya),i1r=i(ya),Z3e=n(ya,"P",{});var SLt=s(Z3e);d1r=r(SLt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),SLt.forEach(t),c1r=i(ya),rn=n(ya,"P",{});var Ww=s(rn);f1r=r(Ww,"The model class to instantiate is selected based on the "),eFe=n(Ww,"CODE",{});var RLt=s(eFe);m1r=r(RLt,"model_type"),RLt.forEach(t),g1r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),oFe=n(Ww,"CODE",{});var PLt=s(oFe);h1r=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),p1r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(Ww,"CODE",{});var BLt=s(rFe);_1r=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),u1r=r(Ww,":"),Ww.forEach(t),b1r=i(ya),tFe=n(ya,"UL",{});var ILt=s(tFe);ZT=n(ILt,"LI",{});var SNe=s(ZT);aFe=n(SNe,"STRONG",{});var NLt=s(aFe);v1r=r(NLt,"detr"),NLt.forEach(t),F1r=r(SNe," \u2014 "),VH=n(SNe,"A",{href:!0});var qLt=s(VH);T1r=r(qLt,"DetrForSegmentation"),qLt.forEach(t),M1r=r(SNe," (DETR model)"),SNe.forEach(t),ILt.forEach(t),E1r=i(ya),e7=n(ya,"P",{});var RNe=s(e7);C1r=r(RNe,"The model is set in evaluation mode by default using "),nFe=n(RNe,"CODE",{});var jLt=s(nFe);w1r=r(jLt,"model.eval()"),jLt.forEach(t),A1r=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(RNe,"CODE",{});var DLt=s(sFe);L1r=r(DLt,"model.train()"),DLt.forEach(t),RNe.forEach(t),y1r=i(ya),T(o7.$$.fragment,ya),ya.forEach(t),El.forEach(t),NXe=i(f),Zd=n(f,"H2",{class:!0});var zQe=s(Zd);r7=n(zQe,"A",{id:!0,class:!0,href:!0});var GLt=s(r7);lFe=n(GLt,"SPAN",{});var OLt=s(lFe);T($8.$$.fragment,OLt),OLt.forEach(t),GLt.forEach(t),x1r=i(zQe),iFe=n(zQe,"SPAN",{});var VLt=s(iFe);$1r=r(VLt,"AutoModelForSemanticSegmentation"),VLt.forEach(t),zQe.forEach(t),qXe=i(f),Ko=n(f,"DIV",{class:!0});var Cl=s(Ko);T(k8.$$.fragment,Cl),k1r=i(Cl),ec=n(Cl,"P",{});var mte=s(ec);S1r=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),XH=n(mte,"A",{href:!0});var XLt=s(XH);R1r=r(XLt,"from_pretrained()"),XLt.forEach(t),P1r=r(mte," class method or the "),zH=n(mte,"A",{href:!0});var zLt=s(zH);B1r=r(zLt,"from_config()"),zLt.forEach(t),I1r=r(mte,` class
method.`),mte.forEach(t),N1r=i(Cl),S8=n(Cl,"P",{});var QQe=s(S8);q1r=r(QQe,"This class cannot be instantiated directly using "),dFe=n(QQe,"CODE",{});var QLt=s(dFe);j1r=r(QLt,"__init__()"),QLt.forEach(t),D1r=r(QQe," (throws an error)."),QQe.forEach(t),G1r=i(Cl),$t=n(Cl,"DIV",{class:!0});var Hw=s($t);T(R8.$$.fragment,Hw),O1r=i(Hw),cFe=n(Hw,"P",{});var WLt=s(cFe);V1r=r(WLt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WLt.forEach(t),X1r=i(Hw),oc=n(Hw,"P",{});var gte=s(oc);z1r=r(gte,`Note:
Loading a model from its configuration file does `),fFe=n(gte,"STRONG",{});var HLt=s(fFe);Q1r=r(HLt,"not"),HLt.forEach(t),W1r=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(gte,"A",{href:!0});var ULt=s(QH);H1r=r(ULt,"from_pretrained()"),ULt.forEach(t),U1r=r(gte," to load the model weights."),gte.forEach(t),J1r=i(Hw),T(t7.$$.fragment,Hw),Hw.forEach(t),Y1r=i(Cl),vo=n(Cl,"DIV",{class:!0});var xa=s(vo);T(P8.$$.fragment,xa),K1r=i(xa),mFe=n(xa,"P",{});var JLt=s(mFe);Z1r=r(JLt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JLt.forEach(t),e2r=i(xa),tn=n(xa,"P",{});var Uw=s(tn);o2r=r(Uw,"The model class to instantiate is selected based on the "),gFe=n(Uw,"CODE",{});var YLt=s(gFe);r2r=r(YLt,"model_type"),YLt.forEach(t),t2r=r(Uw,` property of the config object (either
passed as an argument or loaded from `),hFe=n(Uw,"CODE",{});var KLt=s(hFe);a2r=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),n2r=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(Uw,"CODE",{});var ZLt=s(pFe);s2r=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),l2r=r(Uw,":"),Uw.forEach(t),i2r=i(xa),rt=n(xa,"UL",{});var wl=s(rt);a7=n(wl,"LI",{});var PNe=s(a7);_Fe=n(PNe,"STRONG",{});var eyt=s(_Fe);d2r=r(eyt,"beit"),eyt.forEach(t),c2r=r(PNe," \u2014 "),WH=n(PNe,"A",{href:!0});var oyt=s(WH);f2r=r(oyt,"BeitForSemanticSegmentation"),oyt.forEach(t),m2r=r(PNe," (BEiT model)"),PNe.forEach(t),g2r=i(wl),n7=n(wl,"LI",{});var BNe=s(n7);uFe=n(BNe,"STRONG",{});var ryt=s(uFe);h2r=r(ryt,"data2vec-vision"),ryt.forEach(t),p2r=r(BNe," \u2014 "),HH=n(BNe,"A",{href:!0});var tyt=s(HH);_2r=r(tyt,"Data2VecVisionForSemanticSegmentation"),tyt.forEach(t),u2r=r(BNe," (Data2VecVision model)"),BNe.forEach(t),b2r=i(wl),s7=n(wl,"LI",{});var INe=s(s7);bFe=n(INe,"STRONG",{});var ayt=s(bFe);v2r=r(ayt,"dpt"),ayt.forEach(t),F2r=r(INe," \u2014 "),UH=n(INe,"A",{href:!0});var nyt=s(UH);T2r=r(nyt,"DPTForSemanticSegmentation"),nyt.forEach(t),M2r=r(INe," (DPT model)"),INe.forEach(t),E2r=i(wl),l7=n(wl,"LI",{});var NNe=s(l7);vFe=n(NNe,"STRONG",{});var syt=s(vFe);C2r=r(syt,"mobilevit"),syt.forEach(t),w2r=r(NNe," \u2014 "),JH=n(NNe,"A",{href:!0});var lyt=s(JH);A2r=r(lyt,"MobileViTForSemanticSegmentation"),lyt.forEach(t),L2r=r(NNe," (MobileViT model)"),NNe.forEach(t),y2r=i(wl),i7=n(wl,"LI",{});var qNe=s(i7);FFe=n(qNe,"STRONG",{});var iyt=s(FFe);x2r=r(iyt,"segformer"),iyt.forEach(t),$2r=r(qNe," \u2014 "),YH=n(qNe,"A",{href:!0});var dyt=s(YH);k2r=r(dyt,"SegformerForSemanticSegmentation"),dyt.forEach(t),S2r=r(qNe," (SegFormer model)"),qNe.forEach(t),wl.forEach(t),R2r=i(xa),d7=n(xa,"P",{});var jNe=s(d7);P2r=r(jNe,"The model is set in evaluation mode by default using "),TFe=n(jNe,"CODE",{});var cyt=s(TFe);B2r=r(cyt,"model.eval()"),cyt.forEach(t),I2r=r(jNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MFe=n(jNe,"CODE",{});var fyt=s(MFe);N2r=r(fyt,"model.train()"),fyt.forEach(t),jNe.forEach(t),q2r=i(xa),T(c7.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),jXe=i(f),rc=n(f,"H2",{class:!0});var WQe=s(rc);f7=n(WQe,"A",{id:!0,class:!0,href:!0});var myt=s(f7);EFe=n(myt,"SPAN",{});var gyt=s(EFe);T(B8.$$.fragment,gyt),gyt.forEach(t),myt.forEach(t),j2r=i(WQe),CFe=n(WQe,"SPAN",{});var hyt=s(CFe);D2r=r(hyt,"AutoModelForInstanceSegmentation"),hyt.forEach(t),WQe.forEach(t),DXe=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(I8.$$.fragment,Al),G2r=i(Al),tc=n(Al,"P",{});var hte=s(tc);O2r=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KH=n(hte,"A",{href:!0});var pyt=s(KH);V2r=r(pyt,"from_pretrained()"),pyt.forEach(t),X2r=r(hte," class method or the "),ZH=n(hte,"A",{href:!0});var _yt=s(ZH);z2r=r(_yt,"from_config()"),_yt.forEach(t),Q2r=r(hte,` class
method.`),hte.forEach(t),W2r=i(Al),N8=n(Al,"P",{});var HQe=s(N8);H2r=r(HQe,"This class cannot be instantiated directly using "),wFe=n(HQe,"CODE",{});var uyt=s(wFe);U2r=r(uyt,"__init__()"),uyt.forEach(t),J2r=r(HQe," (throws an error)."),HQe.forEach(t),Y2r=i(Al),kt=n(Al,"DIV",{class:!0});var Jw=s(kt);T(q8.$$.fragment,Jw),K2r=i(Jw),AFe=n(Jw,"P",{});var byt=s(AFe);Z2r=r(byt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),byt.forEach(t),ebr=i(Jw),ac=n(Jw,"P",{});var pte=s(ac);obr=r(pte,`Note:
Loading a model from its configuration file does `),LFe=n(pte,"STRONG",{});var vyt=s(LFe);rbr=r(vyt,"not"),vyt.forEach(t),tbr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(pte,"A",{href:!0});var Fyt=s(eU);abr=r(Fyt,"from_pretrained()"),Fyt.forEach(t),nbr=r(pte," to load the model weights."),pte.forEach(t),sbr=i(Jw),T(m7.$$.fragment,Jw),Jw.forEach(t),lbr=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(j8.$$.fragment,$a),ibr=i($a),yFe=n($a,"P",{});var Tyt=s(yFe);dbr=r(Tyt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Tyt.forEach(t),cbr=i($a),an=n($a,"P",{});var Yw=s(an);fbr=r(Yw,"The model class to instantiate is selected based on the "),xFe=n(Yw,"CODE",{});var Myt=s(xFe);mbr=r(Myt,"model_type"),Myt.forEach(t),gbr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(Yw,"CODE",{});var Eyt=s($Fe);hbr=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),pbr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(Yw,"CODE",{});var Cyt=s(kFe);_br=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),ubr=r(Yw,":"),Yw.forEach(t),bbr=i($a),SFe=n($a,"UL",{});var wyt=s(SFe);g7=n(wyt,"LI",{});var DNe=s(g7);RFe=n(DNe,"STRONG",{});var Ayt=s(RFe);vbr=r(Ayt,"maskformer"),Ayt.forEach(t),Fbr=r(DNe," \u2014 "),oU=n(DNe,"A",{href:!0});var Lyt=s(oU);Tbr=r(Lyt,"MaskFormerForInstanceSegmentation"),Lyt.forEach(t),Mbr=r(DNe," (MaskFormer model)"),DNe.forEach(t),wyt.forEach(t),Ebr=i($a),h7=n($a,"P",{});var GNe=s(h7);Cbr=r(GNe,"The model is set in evaluation mode by default using "),PFe=n(GNe,"CODE",{});var yyt=s(PFe);wbr=r(yyt,"model.eval()"),yyt.forEach(t),Abr=r(GNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=n(GNe,"CODE",{});var xyt=s(BFe);Lbr=r(xyt,"model.train()"),xyt.forEach(t),GNe.forEach(t),ybr=i($a),T(p7.$$.fragment,$a),$a.forEach(t),Al.forEach(t),GXe=i(f),nc=n(f,"H2",{class:!0});var UQe=s(nc);_7=n(UQe,"A",{id:!0,class:!0,href:!0});var $yt=s(_7);IFe=n($yt,"SPAN",{});var kyt=s(IFe);T(D8.$$.fragment,kyt),kyt.forEach(t),$yt.forEach(t),xbr=i(UQe),NFe=n(UQe,"SPAN",{});var Syt=s(NFe);$br=r(Syt,"TFAutoModel"),Syt.forEach(t),UQe.forEach(t),OXe=i(f),er=n(f,"DIV",{class:!0});var Ll=s(er);T(G8.$$.fragment,Ll),kbr=i(Ll),sc=n(Ll,"P",{});var _te=s(sc);Sbr=r(_te,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rU=n(_te,"A",{href:!0});var Ryt=s(rU);Rbr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),Pbr=r(_te," class method or the "),tU=n(_te,"A",{href:!0});var Pyt=s(tU);Bbr=r(Pyt,"from_config()"),Pyt.forEach(t),Ibr=r(_te,` class
method.`),_te.forEach(t),Nbr=i(Ll),O8=n(Ll,"P",{});var JQe=s(O8);qbr=r(JQe,"This class cannot be instantiated directly using "),qFe=n(JQe,"CODE",{});var Byt=s(qFe);jbr=r(Byt,"__init__()"),Byt.forEach(t),Dbr=r(JQe," (throws an error)."),JQe.forEach(t),Gbr=i(Ll),St=n(Ll,"DIV",{class:!0});var Kw=s(St);T(V8.$$.fragment,Kw),Obr=i(Kw),jFe=n(Kw,"P",{});var Iyt=s(jFe);Vbr=r(Iyt,"Instantiates one of the base model classes of the library from a configuration."),Iyt.forEach(t),Xbr=i(Kw),lc=n(Kw,"P",{});var ute=s(lc);zbr=r(ute,`Note:
Loading a model from its configuration file does `),DFe=n(ute,"STRONG",{});var Nyt=s(DFe);Qbr=r(Nyt,"not"),Nyt.forEach(t),Wbr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(ute,"A",{href:!0});var qyt=s(aU);Hbr=r(qyt,"from_pretrained()"),qyt.forEach(t),Ubr=r(ute," to load the model weights."),ute.forEach(t),Jbr=i(Kw),T(u7.$$.fragment,Kw),Kw.forEach(t),Ybr=i(Ll),yr=n(Ll,"DIV",{class:!0});var yl=s(yr);T(X8.$$.fragment,yl),Kbr=i(yl),GFe=n(yl,"P",{});var jyt=s(GFe);Zbr=r(jyt,"Instantiate one of the base model classes of the library from a pretrained model."),jyt.forEach(t),evr=i(yl),nn=n(yl,"P",{});var Zw=s(nn);ovr=r(Zw,"The model class to instantiate is selected based on the "),OFe=n(Zw,"CODE",{});var Dyt=s(OFe);rvr=r(Dyt,"model_type"),Dyt.forEach(t),tvr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),VFe=n(Zw,"CODE",{});var Gyt=s(VFe);avr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),nvr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(Zw,"CODE",{});var Oyt=s(XFe);svr=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),lvr=r(Zw,":"),Zw.forEach(t),ivr=i(yl),j=n(yl,"UL",{});var D=s(j);b7=n(D,"LI",{});var ONe=s(b7);zFe=n(ONe,"STRONG",{});var Vyt=s(zFe);dvr=r(Vyt,"albert"),Vyt.forEach(t),cvr=r(ONe," \u2014 "),nU=n(ONe,"A",{href:!0});var Xyt=s(nU);fvr=r(Xyt,"TFAlbertModel"),Xyt.forEach(t),mvr=r(ONe," (ALBERT model)"),ONe.forEach(t),gvr=i(D),v7=n(D,"LI",{});var VNe=s(v7);QFe=n(VNe,"STRONG",{});var zyt=s(QFe);hvr=r(zyt,"bart"),zyt.forEach(t),pvr=r(VNe," \u2014 "),sU=n(VNe,"A",{href:!0});var Qyt=s(sU);_vr=r(Qyt,"TFBartModel"),Qyt.forEach(t),uvr=r(VNe," (BART model)"),VNe.forEach(t),bvr=i(D),F7=n(D,"LI",{});var XNe=s(F7);WFe=n(XNe,"STRONG",{});var Wyt=s(WFe);vvr=r(Wyt,"bert"),Wyt.forEach(t),Fvr=r(XNe," \u2014 "),lU=n(XNe,"A",{href:!0});var Hyt=s(lU);Tvr=r(Hyt,"TFBertModel"),Hyt.forEach(t),Mvr=r(XNe," (BERT model)"),XNe.forEach(t),Evr=i(D),T7=n(D,"LI",{});var zNe=s(T7);HFe=n(zNe,"STRONG",{});var Uyt=s(HFe);Cvr=r(Uyt,"blenderbot"),Uyt.forEach(t),wvr=r(zNe," \u2014 "),iU=n(zNe,"A",{href:!0});var Jyt=s(iU);Avr=r(Jyt,"TFBlenderbotModel"),Jyt.forEach(t),Lvr=r(zNe," (Blenderbot model)"),zNe.forEach(t),yvr=i(D),M7=n(D,"LI",{});var QNe=s(M7);UFe=n(QNe,"STRONG",{});var Yyt=s(UFe);xvr=r(Yyt,"blenderbot-small"),Yyt.forEach(t),$vr=r(QNe," \u2014 "),dU=n(QNe,"A",{href:!0});var Kyt=s(dU);kvr=r(Kyt,"TFBlenderbotSmallModel"),Kyt.forEach(t),Svr=r(QNe," (BlenderbotSmall model)"),QNe.forEach(t),Rvr=i(D),E7=n(D,"LI",{});var WNe=s(E7);JFe=n(WNe,"STRONG",{});var Zyt=s(JFe);Pvr=r(Zyt,"camembert"),Zyt.forEach(t),Bvr=r(WNe," \u2014 "),cU=n(WNe,"A",{href:!0});var e8t=s(cU);Ivr=r(e8t,"TFCamembertModel"),e8t.forEach(t),Nvr=r(WNe," (CamemBERT model)"),WNe.forEach(t),qvr=i(D),C7=n(D,"LI",{});var HNe=s(C7);YFe=n(HNe,"STRONG",{});var o8t=s(YFe);jvr=r(o8t,"clip"),o8t.forEach(t),Dvr=r(HNe," \u2014 "),fU=n(HNe,"A",{href:!0});var r8t=s(fU);Gvr=r(r8t,"TFCLIPModel"),r8t.forEach(t),Ovr=r(HNe," (CLIP model)"),HNe.forEach(t),Vvr=i(D),w7=n(D,"LI",{});var UNe=s(w7);KFe=n(UNe,"STRONG",{});var t8t=s(KFe);Xvr=r(t8t,"convbert"),t8t.forEach(t),zvr=r(UNe," \u2014 "),mU=n(UNe,"A",{href:!0});var a8t=s(mU);Qvr=r(a8t,"TFConvBertModel"),a8t.forEach(t),Wvr=r(UNe," (ConvBERT model)"),UNe.forEach(t),Hvr=i(D),A7=n(D,"LI",{});var JNe=s(A7);ZFe=n(JNe,"STRONG",{});var n8t=s(ZFe);Uvr=r(n8t,"convnext"),n8t.forEach(t),Jvr=r(JNe," \u2014 "),gU=n(JNe,"A",{href:!0});var s8t=s(gU);Yvr=r(s8t,"TFConvNextModel"),s8t.forEach(t),Kvr=r(JNe," (ConvNeXT model)"),JNe.forEach(t),Zvr=i(D),L7=n(D,"LI",{});var YNe=s(L7);e6e=n(YNe,"STRONG",{});var l8t=s(e6e);e3r=r(l8t,"ctrl"),l8t.forEach(t),o3r=r(YNe," \u2014 "),hU=n(YNe,"A",{href:!0});var i8t=s(hU);r3r=r(i8t,"TFCTRLModel"),i8t.forEach(t),t3r=r(YNe," (CTRL model)"),YNe.forEach(t),a3r=i(D),y7=n(D,"LI",{});var KNe=s(y7);o6e=n(KNe,"STRONG",{});var d8t=s(o6e);n3r=r(d8t,"data2vec-vision"),d8t.forEach(t),s3r=r(KNe," \u2014 "),pU=n(KNe,"A",{href:!0});var c8t=s(pU);l3r=r(c8t,"TFData2VecVisionModel"),c8t.forEach(t),i3r=r(KNe," (Data2VecVision model)"),KNe.forEach(t),d3r=i(D),x7=n(D,"LI",{});var ZNe=s(x7);r6e=n(ZNe,"STRONG",{});var f8t=s(r6e);c3r=r(f8t,"deberta"),f8t.forEach(t),f3r=r(ZNe," \u2014 "),_U=n(ZNe,"A",{href:!0});var m8t=s(_U);m3r=r(m8t,"TFDebertaModel"),m8t.forEach(t),g3r=r(ZNe," (DeBERTa model)"),ZNe.forEach(t),h3r=i(D),$7=n(D,"LI",{});var eqe=s($7);t6e=n(eqe,"STRONG",{});var g8t=s(t6e);p3r=r(g8t,"deberta-v2"),g8t.forEach(t),_3r=r(eqe," \u2014 "),uU=n(eqe,"A",{href:!0});var h8t=s(uU);u3r=r(h8t,"TFDebertaV2Model"),h8t.forEach(t),b3r=r(eqe," (DeBERTa-v2 model)"),eqe.forEach(t),v3r=i(D),k7=n(D,"LI",{});var oqe=s(k7);a6e=n(oqe,"STRONG",{});var p8t=s(a6e);F3r=r(p8t,"distilbert"),p8t.forEach(t),T3r=r(oqe," \u2014 "),bU=n(oqe,"A",{href:!0});var _8t=s(bU);M3r=r(_8t,"TFDistilBertModel"),_8t.forEach(t),E3r=r(oqe," (DistilBERT model)"),oqe.forEach(t),C3r=i(D),S7=n(D,"LI",{});var rqe=s(S7);n6e=n(rqe,"STRONG",{});var u8t=s(n6e);w3r=r(u8t,"dpr"),u8t.forEach(t),A3r=r(rqe," \u2014 "),vU=n(rqe,"A",{href:!0});var b8t=s(vU);L3r=r(b8t,"TFDPRQuestionEncoder"),b8t.forEach(t),y3r=r(rqe," (DPR model)"),rqe.forEach(t),x3r=i(D),R7=n(D,"LI",{});var tqe=s(R7);s6e=n(tqe,"STRONG",{});var v8t=s(s6e);$3r=r(v8t,"electra"),v8t.forEach(t),k3r=r(tqe," \u2014 "),FU=n(tqe,"A",{href:!0});var F8t=s(FU);S3r=r(F8t,"TFElectraModel"),F8t.forEach(t),R3r=r(tqe," (ELECTRA model)"),tqe.forEach(t),P3r=i(D),P7=n(D,"LI",{});var aqe=s(P7);l6e=n(aqe,"STRONG",{});var T8t=s(l6e);B3r=r(T8t,"flaubert"),T8t.forEach(t),I3r=r(aqe," \u2014 "),TU=n(aqe,"A",{href:!0});var M8t=s(TU);N3r=r(M8t,"TFFlaubertModel"),M8t.forEach(t),q3r=r(aqe," (FlauBERT model)"),aqe.forEach(t),j3r=i(D),Us=n(D,"LI",{});var xS=s(Us);i6e=n(xS,"STRONG",{});var E8t=s(i6e);D3r=r(E8t,"funnel"),E8t.forEach(t),G3r=r(xS," \u2014 "),MU=n(xS,"A",{href:!0});var C8t=s(MU);O3r=r(C8t,"TFFunnelModel"),C8t.forEach(t),V3r=r(xS," or "),EU=n(xS,"A",{href:!0});var w8t=s(EU);X3r=r(w8t,"TFFunnelBaseModel"),w8t.forEach(t),z3r=r(xS," (Funnel Transformer model)"),xS.forEach(t),Q3r=i(D),B7=n(D,"LI",{});var nqe=s(B7);d6e=n(nqe,"STRONG",{});var A8t=s(d6e);W3r=r(A8t,"gpt2"),A8t.forEach(t),H3r=r(nqe," \u2014 "),CU=n(nqe,"A",{href:!0});var L8t=s(CU);U3r=r(L8t,"TFGPT2Model"),L8t.forEach(t),J3r=r(nqe," (OpenAI GPT-2 model)"),nqe.forEach(t),Y3r=i(D),I7=n(D,"LI",{});var sqe=s(I7);c6e=n(sqe,"STRONG",{});var y8t=s(c6e);K3r=r(y8t,"gptj"),y8t.forEach(t),Z3r=r(sqe," \u2014 "),wU=n(sqe,"A",{href:!0});var x8t=s(wU);eFr=r(x8t,"TFGPTJModel"),x8t.forEach(t),oFr=r(sqe," (GPT-J model)"),sqe.forEach(t),rFr=i(D),N7=n(D,"LI",{});var lqe=s(N7);f6e=n(lqe,"STRONG",{});var $8t=s(f6e);tFr=r($8t,"hubert"),$8t.forEach(t),aFr=r(lqe," \u2014 "),AU=n(lqe,"A",{href:!0});var k8t=s(AU);nFr=r(k8t,"TFHubertModel"),k8t.forEach(t),sFr=r(lqe," (Hubert model)"),lqe.forEach(t),lFr=i(D),q7=n(D,"LI",{});var iqe=s(q7);m6e=n(iqe,"STRONG",{});var S8t=s(m6e);iFr=r(S8t,"layoutlm"),S8t.forEach(t),dFr=r(iqe," \u2014 "),LU=n(iqe,"A",{href:!0});var R8t=s(LU);cFr=r(R8t,"TFLayoutLMModel"),R8t.forEach(t),fFr=r(iqe," (LayoutLM model)"),iqe.forEach(t),mFr=i(D),j7=n(D,"LI",{});var dqe=s(j7);g6e=n(dqe,"STRONG",{});var P8t=s(g6e);gFr=r(P8t,"led"),P8t.forEach(t),hFr=r(dqe," \u2014 "),yU=n(dqe,"A",{href:!0});var B8t=s(yU);pFr=r(B8t,"TFLEDModel"),B8t.forEach(t),_Fr=r(dqe," (LED model)"),dqe.forEach(t),uFr=i(D),D7=n(D,"LI",{});var cqe=s(D7);h6e=n(cqe,"STRONG",{});var I8t=s(h6e);bFr=r(I8t,"longformer"),I8t.forEach(t),vFr=r(cqe," \u2014 "),xU=n(cqe,"A",{href:!0});var N8t=s(xU);FFr=r(N8t,"TFLongformerModel"),N8t.forEach(t),TFr=r(cqe," (Longformer model)"),cqe.forEach(t),MFr=i(D),G7=n(D,"LI",{});var fqe=s(G7);p6e=n(fqe,"STRONG",{});var q8t=s(p6e);EFr=r(q8t,"lxmert"),q8t.forEach(t),CFr=r(fqe," \u2014 "),$U=n(fqe,"A",{href:!0});var j8t=s($U);wFr=r(j8t,"TFLxmertModel"),j8t.forEach(t),AFr=r(fqe," (LXMERT model)"),fqe.forEach(t),LFr=i(D),O7=n(D,"LI",{});var mqe=s(O7);_6e=n(mqe,"STRONG",{});var D8t=s(_6e);yFr=r(D8t,"marian"),D8t.forEach(t),xFr=r(mqe," \u2014 "),kU=n(mqe,"A",{href:!0});var G8t=s(kU);$Fr=r(G8t,"TFMarianModel"),G8t.forEach(t),kFr=r(mqe," (Marian model)"),mqe.forEach(t),SFr=i(D),V7=n(D,"LI",{});var gqe=s(V7);u6e=n(gqe,"STRONG",{});var O8t=s(u6e);RFr=r(O8t,"mbart"),O8t.forEach(t),PFr=r(gqe," \u2014 "),SU=n(gqe,"A",{href:!0});var V8t=s(SU);BFr=r(V8t,"TFMBartModel"),V8t.forEach(t),IFr=r(gqe," (mBART model)"),gqe.forEach(t),NFr=i(D),X7=n(D,"LI",{});var hqe=s(X7);b6e=n(hqe,"STRONG",{});var X8t=s(b6e);qFr=r(X8t,"mobilebert"),X8t.forEach(t),jFr=r(hqe," \u2014 "),RU=n(hqe,"A",{href:!0});var z8t=s(RU);DFr=r(z8t,"TFMobileBertModel"),z8t.forEach(t),GFr=r(hqe," (MobileBERT model)"),hqe.forEach(t),OFr=i(D),z7=n(D,"LI",{});var pqe=s(z7);v6e=n(pqe,"STRONG",{});var Q8t=s(v6e);VFr=r(Q8t,"mpnet"),Q8t.forEach(t),XFr=r(pqe," \u2014 "),PU=n(pqe,"A",{href:!0});var W8t=s(PU);zFr=r(W8t,"TFMPNetModel"),W8t.forEach(t),QFr=r(pqe," (MPNet model)"),pqe.forEach(t),WFr=i(D),Q7=n(D,"LI",{});var _qe=s(Q7);F6e=n(_qe,"STRONG",{});var H8t=s(F6e);HFr=r(H8t,"mt5"),H8t.forEach(t),UFr=r(_qe," \u2014 "),BU=n(_qe,"A",{href:!0});var U8t=s(BU);JFr=r(U8t,"TFMT5Model"),U8t.forEach(t),YFr=r(_qe," (MT5 model)"),_qe.forEach(t),KFr=i(D),W7=n(D,"LI",{});var uqe=s(W7);T6e=n(uqe,"STRONG",{});var J8t=s(T6e);ZFr=r(J8t,"openai-gpt"),J8t.forEach(t),e6r=r(uqe," \u2014 "),IU=n(uqe,"A",{href:!0});var Y8t=s(IU);o6r=r(Y8t,"TFOpenAIGPTModel"),Y8t.forEach(t),r6r=r(uqe," (OpenAI GPT model)"),uqe.forEach(t),t6r=i(D),H7=n(D,"LI",{});var bqe=s(H7);M6e=n(bqe,"STRONG",{});var K8t=s(M6e);a6r=r(K8t,"opt"),K8t.forEach(t),n6r=r(bqe," \u2014 "),NU=n(bqe,"A",{href:!0});var Z8t=s(NU);s6r=r(Z8t,"TFOPTModel"),Z8t.forEach(t),l6r=r(bqe," (OPT model)"),bqe.forEach(t),i6r=i(D),U7=n(D,"LI",{});var vqe=s(U7);E6e=n(vqe,"STRONG",{});var ext=s(E6e);d6r=r(ext,"pegasus"),ext.forEach(t),c6r=r(vqe," \u2014 "),qU=n(vqe,"A",{href:!0});var oxt=s(qU);f6r=r(oxt,"TFPegasusModel"),oxt.forEach(t),m6r=r(vqe," (Pegasus model)"),vqe.forEach(t),g6r=i(D),J7=n(D,"LI",{});var Fqe=s(J7);C6e=n(Fqe,"STRONG",{});var rxt=s(C6e);h6r=r(rxt,"regnet"),rxt.forEach(t),p6r=r(Fqe," \u2014 "),jU=n(Fqe,"A",{href:!0});var txt=s(jU);_6r=r(txt,"TFRegNetModel"),txt.forEach(t),u6r=r(Fqe," (RegNet model)"),Fqe.forEach(t),b6r=i(D),Y7=n(D,"LI",{});var Tqe=s(Y7);w6e=n(Tqe,"STRONG",{});var axt=s(w6e);v6r=r(axt,"rembert"),axt.forEach(t),F6r=r(Tqe," \u2014 "),DU=n(Tqe,"A",{href:!0});var nxt=s(DU);T6r=r(nxt,"TFRemBertModel"),nxt.forEach(t),M6r=r(Tqe," (RemBERT model)"),Tqe.forEach(t),E6r=i(D),K7=n(D,"LI",{});var Mqe=s(K7);A6e=n(Mqe,"STRONG",{});var sxt=s(A6e);C6r=r(sxt,"roberta"),sxt.forEach(t),w6r=r(Mqe," \u2014 "),GU=n(Mqe,"A",{href:!0});var lxt=s(GU);A6r=r(lxt,"TFRobertaModel"),lxt.forEach(t),L6r=r(Mqe," (RoBERTa model)"),Mqe.forEach(t),y6r=i(D),Z7=n(D,"LI",{});var Eqe=s(Z7);L6e=n(Eqe,"STRONG",{});var ixt=s(L6e);x6r=r(ixt,"roformer"),ixt.forEach(t),$6r=r(Eqe," \u2014 "),OU=n(Eqe,"A",{href:!0});var dxt=s(OU);k6r=r(dxt,"TFRoFormerModel"),dxt.forEach(t),S6r=r(Eqe," (RoFormer model)"),Eqe.forEach(t),R6r=i(D),e9=n(D,"LI",{});var Cqe=s(e9);y6e=n(Cqe,"STRONG",{});var cxt=s(y6e);P6r=r(cxt,"speech_to_text"),cxt.forEach(t),B6r=r(Cqe," \u2014 "),VU=n(Cqe,"A",{href:!0});var fxt=s(VU);I6r=r(fxt,"TFSpeech2TextModel"),fxt.forEach(t),N6r=r(Cqe," (Speech2Text model)"),Cqe.forEach(t),q6r=i(D),o9=n(D,"LI",{});var wqe=s(o9);x6e=n(wqe,"STRONG",{});var mxt=s(x6e);j6r=r(mxt,"swin"),mxt.forEach(t),D6r=r(wqe," \u2014 "),XU=n(wqe,"A",{href:!0});var gxt=s(XU);G6r=r(gxt,"TFSwinModel"),gxt.forEach(t),O6r=r(wqe," (Swin Transformer model)"),wqe.forEach(t),V6r=i(D),r9=n(D,"LI",{});var Aqe=s(r9);$6e=n(Aqe,"STRONG",{});var hxt=s($6e);X6r=r(hxt,"t5"),hxt.forEach(t),z6r=r(Aqe," \u2014 "),zU=n(Aqe,"A",{href:!0});var pxt=s(zU);Q6r=r(pxt,"TFT5Model"),pxt.forEach(t),W6r=r(Aqe," (T5 model)"),Aqe.forEach(t),H6r=i(D),t9=n(D,"LI",{});var Lqe=s(t9);k6e=n(Lqe,"STRONG",{});var _xt=s(k6e);U6r=r(_xt,"tapas"),_xt.forEach(t),J6r=r(Lqe," \u2014 "),QU=n(Lqe,"A",{href:!0});var uxt=s(QU);Y6r=r(uxt,"TFTapasModel"),uxt.forEach(t),K6r=r(Lqe," (TAPAS model)"),Lqe.forEach(t),Z6r=i(D),a9=n(D,"LI",{});var yqe=s(a9);S6e=n(yqe,"STRONG",{});var bxt=s(S6e);eTr=r(bxt,"transfo-xl"),bxt.forEach(t),oTr=r(yqe," \u2014 "),WU=n(yqe,"A",{href:!0});var vxt=s(WU);rTr=r(vxt,"TFTransfoXLModel"),vxt.forEach(t),tTr=r(yqe," (Transformer-XL model)"),yqe.forEach(t),aTr=i(D),n9=n(D,"LI",{});var xqe=s(n9);R6e=n(xqe,"STRONG",{});var Fxt=s(R6e);nTr=r(Fxt,"vit"),Fxt.forEach(t),sTr=r(xqe," \u2014 "),HU=n(xqe,"A",{href:!0});var Txt=s(HU);lTr=r(Txt,"TFViTModel"),Txt.forEach(t),iTr=r(xqe," (ViT model)"),xqe.forEach(t),dTr=i(D),s9=n(D,"LI",{});var $qe=s(s9);P6e=n($qe,"STRONG",{});var Mxt=s(P6e);cTr=r(Mxt,"vit_mae"),Mxt.forEach(t),fTr=r($qe," \u2014 "),UU=n($qe,"A",{href:!0});var Ext=s(UU);mTr=r(Ext,"TFViTMAEModel"),Ext.forEach(t),gTr=r($qe," (ViTMAE model)"),$qe.forEach(t),hTr=i(D),l9=n(D,"LI",{});var kqe=s(l9);B6e=n(kqe,"STRONG",{});var Cxt=s(B6e);pTr=r(Cxt,"wav2vec2"),Cxt.forEach(t),_Tr=r(kqe," \u2014 "),JU=n(kqe,"A",{href:!0});var wxt=s(JU);uTr=r(wxt,"TFWav2Vec2Model"),wxt.forEach(t),bTr=r(kqe," (Wav2Vec2 model)"),kqe.forEach(t),vTr=i(D),i9=n(D,"LI",{});var Sqe=s(i9);I6e=n(Sqe,"STRONG",{});var Axt=s(I6e);FTr=r(Axt,"xlm"),Axt.forEach(t),TTr=r(Sqe," \u2014 "),YU=n(Sqe,"A",{href:!0});var Lxt=s(YU);MTr=r(Lxt,"TFXLMModel"),Lxt.forEach(t),ETr=r(Sqe," (XLM model)"),Sqe.forEach(t),CTr=i(D),d9=n(D,"LI",{});var Rqe=s(d9);N6e=n(Rqe,"STRONG",{});var yxt=s(N6e);wTr=r(yxt,"xlm-roberta"),yxt.forEach(t),ATr=r(Rqe," \u2014 "),KU=n(Rqe,"A",{href:!0});var xxt=s(KU);LTr=r(xxt,"TFXLMRobertaModel"),xxt.forEach(t),yTr=r(Rqe," (XLM-RoBERTa model)"),Rqe.forEach(t),xTr=i(D),c9=n(D,"LI",{});var Pqe=s(c9);q6e=n(Pqe,"STRONG",{});var $xt=s(q6e);$Tr=r($xt,"xlnet"),$xt.forEach(t),kTr=r(Pqe," \u2014 "),ZU=n(Pqe,"A",{href:!0});var kxt=s(ZU);STr=r(kxt,"TFXLNetModel"),kxt.forEach(t),RTr=r(Pqe," (XLNet model)"),Pqe.forEach(t),D.forEach(t),PTr=i(yl),T(f9.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),VXe=i(f),ic=n(f,"H2",{class:!0});var YQe=s(ic);m9=n(YQe,"A",{id:!0,class:!0,href:!0});var Sxt=s(m9);j6e=n(Sxt,"SPAN",{});var Rxt=s(j6e);T(z8.$$.fragment,Rxt),Rxt.forEach(t),Sxt.forEach(t),BTr=i(YQe),D6e=n(YQe,"SPAN",{});var Pxt=s(D6e);ITr=r(Pxt,"TFAutoModelForPreTraining"),Pxt.forEach(t),YQe.forEach(t),XXe=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(Q8.$$.fragment,xl),NTr=i(xl),dc=n(xl,"P",{});var bte=s(dc);qTr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eJ=n(bte,"A",{href:!0});var Bxt=s(eJ);jTr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),DTr=r(bte," class method or the "),oJ=n(bte,"A",{href:!0});var Ixt=s(oJ);GTr=r(Ixt,"from_config()"),Ixt.forEach(t),OTr=r(bte,` class
method.`),bte.forEach(t),VTr=i(xl),W8=n(xl,"P",{});var KQe=s(W8);XTr=r(KQe,"This class cannot be instantiated directly using "),G6e=n(KQe,"CODE",{});var Nxt=s(G6e);zTr=r(Nxt,"__init__()"),Nxt.forEach(t),QTr=r(KQe," (throws an error)."),KQe.forEach(t),WTr=i(xl),Rt=n(xl,"DIV",{class:!0});var eA=s(Rt);T(H8.$$.fragment,eA),HTr=i(eA),O6e=n(eA,"P",{});var qxt=s(O6e);UTr=r(qxt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qxt.forEach(t),JTr=i(eA),cc=n(eA,"P",{});var vte=s(cc);YTr=r(vte,`Note:
Loading a model from its configuration file does `),V6e=n(vte,"STRONG",{});var jxt=s(V6e);KTr=r(jxt,"not"),jxt.forEach(t),ZTr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(vte,"A",{href:!0});var Dxt=s(rJ);e7r=r(Dxt,"from_pretrained()"),Dxt.forEach(t),o7r=r(vte," to load the model weights."),vte.forEach(t),r7r=i(eA),T(g9.$$.fragment,eA),eA.forEach(t),t7r=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(U8.$$.fragment,$l),a7r=i($l),X6e=n($l,"P",{});var Gxt=s(X6e);n7r=r(Gxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gxt.forEach(t),s7r=i($l),sn=n($l,"P",{});var oA=s(sn);l7r=r(oA,"The model class to instantiate is selected based on the "),z6e=n(oA,"CODE",{});var Oxt=s(z6e);i7r=r(Oxt,"model_type"),Oxt.forEach(t),d7r=r(oA,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(oA,"CODE",{});var Vxt=s(Q6e);c7r=r(Vxt,"pretrained_model_name_or_path"),Vxt.forEach(t),f7r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(oA,"CODE",{});var Xxt=s(W6e);m7r=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),g7r=r(oA,":"),oA.forEach(t),h7r=i($l),se=n($l,"UL",{});var le=s(se);h9=n(le,"LI",{});var Bqe=s(h9);H6e=n(Bqe,"STRONG",{});var zxt=s(H6e);p7r=r(zxt,"albert"),zxt.forEach(t),_7r=r(Bqe," \u2014 "),tJ=n(Bqe,"A",{href:!0});var Qxt=s(tJ);u7r=r(Qxt,"TFAlbertForPreTraining"),Qxt.forEach(t),b7r=r(Bqe," (ALBERT model)"),Bqe.forEach(t),v7r=i(le),p9=n(le,"LI",{});var Iqe=s(p9);U6e=n(Iqe,"STRONG",{});var Wxt=s(U6e);F7r=r(Wxt,"bart"),Wxt.forEach(t),T7r=r(Iqe," \u2014 "),aJ=n(Iqe,"A",{href:!0});var Hxt=s(aJ);M7r=r(Hxt,"TFBartForConditionalGeneration"),Hxt.forEach(t),E7r=r(Iqe," (BART model)"),Iqe.forEach(t),C7r=i(le),_9=n(le,"LI",{});var Nqe=s(_9);J6e=n(Nqe,"STRONG",{});var Uxt=s(J6e);w7r=r(Uxt,"bert"),Uxt.forEach(t),A7r=r(Nqe," \u2014 "),nJ=n(Nqe,"A",{href:!0});var Jxt=s(nJ);L7r=r(Jxt,"TFBertForPreTraining"),Jxt.forEach(t),y7r=r(Nqe," (BERT model)"),Nqe.forEach(t),x7r=i(le),u9=n(le,"LI",{});var qqe=s(u9);Y6e=n(qqe,"STRONG",{});var Yxt=s(Y6e);$7r=r(Yxt,"camembert"),Yxt.forEach(t),k7r=r(qqe," \u2014 "),sJ=n(qqe,"A",{href:!0});var Kxt=s(sJ);S7r=r(Kxt,"TFCamembertForMaskedLM"),Kxt.forEach(t),R7r=r(qqe," (CamemBERT model)"),qqe.forEach(t),P7r=i(le),b9=n(le,"LI",{});var jqe=s(b9);K6e=n(jqe,"STRONG",{});var Zxt=s(K6e);B7r=r(Zxt,"ctrl"),Zxt.forEach(t),I7r=r(jqe," \u2014 "),lJ=n(jqe,"A",{href:!0});var e$t=s(lJ);N7r=r(e$t,"TFCTRLLMHeadModel"),e$t.forEach(t),q7r=r(jqe," (CTRL model)"),jqe.forEach(t),j7r=i(le),v9=n(le,"LI",{});var Dqe=s(v9);Z6e=n(Dqe,"STRONG",{});var o$t=s(Z6e);D7r=r(o$t,"distilbert"),o$t.forEach(t),G7r=r(Dqe," \u2014 "),iJ=n(Dqe,"A",{href:!0});var r$t=s(iJ);O7r=r(r$t,"TFDistilBertForMaskedLM"),r$t.forEach(t),V7r=r(Dqe," (DistilBERT model)"),Dqe.forEach(t),X7r=i(le),F9=n(le,"LI",{});var Gqe=s(F9);eTe=n(Gqe,"STRONG",{});var t$t=s(eTe);z7r=r(t$t,"electra"),t$t.forEach(t),Q7r=r(Gqe," \u2014 "),dJ=n(Gqe,"A",{href:!0});var a$t=s(dJ);W7r=r(a$t,"TFElectraForPreTraining"),a$t.forEach(t),H7r=r(Gqe," (ELECTRA model)"),Gqe.forEach(t),U7r=i(le),T9=n(le,"LI",{});var Oqe=s(T9);oTe=n(Oqe,"STRONG",{});var n$t=s(oTe);J7r=r(n$t,"flaubert"),n$t.forEach(t),Y7r=r(Oqe," \u2014 "),cJ=n(Oqe,"A",{href:!0});var s$t=s(cJ);K7r=r(s$t,"TFFlaubertWithLMHeadModel"),s$t.forEach(t),Z7r=r(Oqe," (FlauBERT model)"),Oqe.forEach(t),e9r=i(le),M9=n(le,"LI",{});var Vqe=s(M9);rTe=n(Vqe,"STRONG",{});var l$t=s(rTe);o9r=r(l$t,"funnel"),l$t.forEach(t),r9r=r(Vqe," \u2014 "),fJ=n(Vqe,"A",{href:!0});var i$t=s(fJ);t9r=r(i$t,"TFFunnelForPreTraining"),i$t.forEach(t),a9r=r(Vqe," (Funnel Transformer model)"),Vqe.forEach(t),n9r=i(le),E9=n(le,"LI",{});var Xqe=s(E9);tTe=n(Xqe,"STRONG",{});var d$t=s(tTe);s9r=r(d$t,"gpt2"),d$t.forEach(t),l9r=r(Xqe," \u2014 "),mJ=n(Xqe,"A",{href:!0});var c$t=s(mJ);i9r=r(c$t,"TFGPT2LMHeadModel"),c$t.forEach(t),d9r=r(Xqe," (OpenAI GPT-2 model)"),Xqe.forEach(t),c9r=i(le),C9=n(le,"LI",{});var zqe=s(C9);aTe=n(zqe,"STRONG",{});var f$t=s(aTe);f9r=r(f$t,"layoutlm"),f$t.forEach(t),m9r=r(zqe," \u2014 "),gJ=n(zqe,"A",{href:!0});var m$t=s(gJ);g9r=r(m$t,"TFLayoutLMForMaskedLM"),m$t.forEach(t),h9r=r(zqe," (LayoutLM model)"),zqe.forEach(t),p9r=i(le),w9=n(le,"LI",{});var Qqe=s(w9);nTe=n(Qqe,"STRONG",{});var g$t=s(nTe);_9r=r(g$t,"lxmert"),g$t.forEach(t),u9r=r(Qqe," \u2014 "),hJ=n(Qqe,"A",{href:!0});var h$t=s(hJ);b9r=r(h$t,"TFLxmertForPreTraining"),h$t.forEach(t),v9r=r(Qqe," (LXMERT model)"),Qqe.forEach(t),F9r=i(le),A9=n(le,"LI",{});var Wqe=s(A9);sTe=n(Wqe,"STRONG",{});var p$t=s(sTe);T9r=r(p$t,"mobilebert"),p$t.forEach(t),M9r=r(Wqe," \u2014 "),pJ=n(Wqe,"A",{href:!0});var _$t=s(pJ);E9r=r(_$t,"TFMobileBertForPreTraining"),_$t.forEach(t),C9r=r(Wqe," (MobileBERT model)"),Wqe.forEach(t),w9r=i(le),L9=n(le,"LI",{});var Hqe=s(L9);lTe=n(Hqe,"STRONG",{});var u$t=s(lTe);A9r=r(u$t,"mpnet"),u$t.forEach(t),L9r=r(Hqe," \u2014 "),_J=n(Hqe,"A",{href:!0});var b$t=s(_J);y9r=r(b$t,"TFMPNetForMaskedLM"),b$t.forEach(t),x9r=r(Hqe," (MPNet model)"),Hqe.forEach(t),$9r=i(le),y9=n(le,"LI",{});var Uqe=s(y9);iTe=n(Uqe,"STRONG",{});var v$t=s(iTe);k9r=r(v$t,"openai-gpt"),v$t.forEach(t),S9r=r(Uqe," \u2014 "),uJ=n(Uqe,"A",{href:!0});var F$t=s(uJ);R9r=r(F$t,"TFOpenAIGPTLMHeadModel"),F$t.forEach(t),P9r=r(Uqe," (OpenAI GPT model)"),Uqe.forEach(t),B9r=i(le),x9=n(le,"LI",{});var Jqe=s(x9);dTe=n(Jqe,"STRONG",{});var T$t=s(dTe);I9r=r(T$t,"roberta"),T$t.forEach(t),N9r=r(Jqe," \u2014 "),bJ=n(Jqe,"A",{href:!0});var M$t=s(bJ);q9r=r(M$t,"TFRobertaForMaskedLM"),M$t.forEach(t),j9r=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),D9r=i(le),$9=n(le,"LI",{});var Yqe=s($9);cTe=n(Yqe,"STRONG",{});var E$t=s(cTe);G9r=r(E$t,"t5"),E$t.forEach(t),O9r=r(Yqe," \u2014 "),vJ=n(Yqe,"A",{href:!0});var C$t=s(vJ);V9r=r(C$t,"TFT5ForConditionalGeneration"),C$t.forEach(t),X9r=r(Yqe," (T5 model)"),Yqe.forEach(t),z9r=i(le),k9=n(le,"LI",{});var Kqe=s(k9);fTe=n(Kqe,"STRONG",{});var w$t=s(fTe);Q9r=r(w$t,"tapas"),w$t.forEach(t),W9r=r(Kqe," \u2014 "),FJ=n(Kqe,"A",{href:!0});var A$t=s(FJ);H9r=r(A$t,"TFTapasForMaskedLM"),A$t.forEach(t),U9r=r(Kqe," (TAPAS model)"),Kqe.forEach(t),J9r=i(le),S9=n(le,"LI",{});var Zqe=s(S9);mTe=n(Zqe,"STRONG",{});var L$t=s(mTe);Y9r=r(L$t,"transfo-xl"),L$t.forEach(t),K9r=r(Zqe," \u2014 "),TJ=n(Zqe,"A",{href:!0});var y$t=s(TJ);Z9r=r(y$t,"TFTransfoXLLMHeadModel"),y$t.forEach(t),eMr=r(Zqe," (Transformer-XL model)"),Zqe.forEach(t),oMr=i(le),R9=n(le,"LI",{});var eje=s(R9);gTe=n(eje,"STRONG",{});var x$t=s(gTe);rMr=r(x$t,"vit_mae"),x$t.forEach(t),tMr=r(eje," \u2014 "),MJ=n(eje,"A",{href:!0});var $$t=s(MJ);aMr=r($$t,"TFViTMAEForPreTraining"),$$t.forEach(t),nMr=r(eje," (ViTMAE model)"),eje.forEach(t),sMr=i(le),P9=n(le,"LI",{});var oje=s(P9);hTe=n(oje,"STRONG",{});var k$t=s(hTe);lMr=r(k$t,"xlm"),k$t.forEach(t),iMr=r(oje," \u2014 "),EJ=n(oje,"A",{href:!0});var S$t=s(EJ);dMr=r(S$t,"TFXLMWithLMHeadModel"),S$t.forEach(t),cMr=r(oje," (XLM model)"),oje.forEach(t),fMr=i(le),B9=n(le,"LI",{});var rje=s(B9);pTe=n(rje,"STRONG",{});var R$t=s(pTe);mMr=r(R$t,"xlm-roberta"),R$t.forEach(t),gMr=r(rje," \u2014 "),CJ=n(rje,"A",{href:!0});var P$t=s(CJ);hMr=r(P$t,"TFXLMRobertaForMaskedLM"),P$t.forEach(t),pMr=r(rje," (XLM-RoBERTa model)"),rje.forEach(t),_Mr=i(le),I9=n(le,"LI",{});var tje=s(I9);_Te=n(tje,"STRONG",{});var B$t=s(_Te);uMr=r(B$t,"xlnet"),B$t.forEach(t),bMr=r(tje," \u2014 "),wJ=n(tje,"A",{href:!0});var I$t=s(wJ);vMr=r(I$t,"TFXLNetLMHeadModel"),I$t.forEach(t),FMr=r(tje," (XLNet model)"),tje.forEach(t),le.forEach(t),TMr=i($l),T(N9.$$.fragment,$l),$l.forEach(t),xl.forEach(t),zXe=i(f),fc=n(f,"H2",{class:!0});var ZQe=s(fc);q9=n(ZQe,"A",{id:!0,class:!0,href:!0});var N$t=s(q9);uTe=n(N$t,"SPAN",{});var q$t=s(uTe);T(J8.$$.fragment,q$t),q$t.forEach(t),N$t.forEach(t),MMr=i(ZQe),bTe=n(ZQe,"SPAN",{});var j$t=s(bTe);EMr=r(j$t,"TFAutoModelForCausalLM"),j$t.forEach(t),ZQe.forEach(t),QXe=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(Y8.$$.fragment,kl),CMr=i(kl),mc=n(kl,"P",{});var Fte=s(mc);wMr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AJ=n(Fte,"A",{href:!0});var D$t=s(AJ);AMr=r(D$t,"from_pretrained()"),D$t.forEach(t),LMr=r(Fte," class method or the "),LJ=n(Fte,"A",{href:!0});var G$t=s(LJ);yMr=r(G$t,"from_config()"),G$t.forEach(t),xMr=r(Fte,` class
method.`),Fte.forEach(t),$Mr=i(kl),K8=n(kl,"P",{});var eWe=s(K8);kMr=r(eWe,"This class cannot be instantiated directly using "),vTe=n(eWe,"CODE",{});var O$t=s(vTe);SMr=r(O$t,"__init__()"),O$t.forEach(t),RMr=r(eWe," (throws an error)."),eWe.forEach(t),PMr=i(kl),Pt=n(kl,"DIV",{class:!0});var rA=s(Pt);T(Z8.$$.fragment,rA),BMr=i(rA),FTe=n(rA,"P",{});var V$t=s(FTe);IMr=r(V$t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V$t.forEach(t),NMr=i(rA),gc=n(rA,"P",{});var Tte=s(gc);qMr=r(Tte,`Note:
Loading a model from its configuration file does `),TTe=n(Tte,"STRONG",{});var X$t=s(TTe);jMr=r(X$t,"not"),X$t.forEach(t),DMr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(Tte,"A",{href:!0});var z$t=s(yJ);GMr=r(z$t,"from_pretrained()"),z$t.forEach(t),OMr=r(Tte," to load the model weights."),Tte.forEach(t),VMr=i(rA),T(j9.$$.fragment,rA),rA.forEach(t),XMr=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(ex.$$.fragment,Sl),zMr=i(Sl),MTe=n(Sl,"P",{});var Q$t=s(MTe);QMr=r(Q$t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q$t.forEach(t),WMr=i(Sl),ln=n(Sl,"P",{});var tA=s(ln);HMr=r(tA,"The model class to instantiate is selected based on the "),ETe=n(tA,"CODE",{});var W$t=s(ETe);UMr=r(W$t,"model_type"),W$t.forEach(t),JMr=r(tA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(tA,"CODE",{});var H$t=s(CTe);YMr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),KMr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(tA,"CODE",{});var U$t=s(wTe);ZMr=r(U$t,"pretrained_model_name_or_path"),U$t.forEach(t),e4r=r(tA,":"),tA.forEach(t),o4r=i(Sl),Me=n(Sl,"UL",{});var Ce=s(Me);D9=n(Ce,"LI",{});var aje=s(D9);ATe=n(aje,"STRONG",{});var J$t=s(ATe);r4r=r(J$t,"bert"),J$t.forEach(t),t4r=r(aje," \u2014 "),xJ=n(aje,"A",{href:!0});var Y$t=s(xJ);a4r=r(Y$t,"TFBertLMHeadModel"),Y$t.forEach(t),n4r=r(aje," (BERT model)"),aje.forEach(t),s4r=i(Ce),G9=n(Ce,"LI",{});var nje=s(G9);LTe=n(nje,"STRONG",{});var K$t=s(LTe);l4r=r(K$t,"camembert"),K$t.forEach(t),i4r=r(nje," \u2014 "),$J=n(nje,"A",{href:!0});var Z$t=s($J);d4r=r(Z$t,"TFCamembertForCausalLM"),Z$t.forEach(t),c4r=r(nje," (CamemBERT model)"),nje.forEach(t),f4r=i(Ce),O9=n(Ce,"LI",{});var sje=s(O9);yTe=n(sje,"STRONG",{});var ekt=s(yTe);m4r=r(ekt,"ctrl"),ekt.forEach(t),g4r=r(sje," \u2014 "),kJ=n(sje,"A",{href:!0});var okt=s(kJ);h4r=r(okt,"TFCTRLLMHeadModel"),okt.forEach(t),p4r=r(sje," (CTRL model)"),sje.forEach(t),_4r=i(Ce),V9=n(Ce,"LI",{});var lje=s(V9);xTe=n(lje,"STRONG",{});var rkt=s(xTe);u4r=r(rkt,"gpt2"),rkt.forEach(t),b4r=r(lje," \u2014 "),SJ=n(lje,"A",{href:!0});var tkt=s(SJ);v4r=r(tkt,"TFGPT2LMHeadModel"),tkt.forEach(t),F4r=r(lje," (OpenAI GPT-2 model)"),lje.forEach(t),T4r=i(Ce),X9=n(Ce,"LI",{});var ije=s(X9);$Te=n(ije,"STRONG",{});var akt=s($Te);M4r=r(akt,"gptj"),akt.forEach(t),E4r=r(ije," \u2014 "),RJ=n(ije,"A",{href:!0});var nkt=s(RJ);C4r=r(nkt,"TFGPTJForCausalLM"),nkt.forEach(t),w4r=r(ije," (GPT-J model)"),ije.forEach(t),A4r=i(Ce),z9=n(Ce,"LI",{});var dje=s(z9);kTe=n(dje,"STRONG",{});var skt=s(kTe);L4r=r(skt,"openai-gpt"),skt.forEach(t),y4r=r(dje," \u2014 "),PJ=n(dje,"A",{href:!0});var lkt=s(PJ);x4r=r(lkt,"TFOpenAIGPTLMHeadModel"),lkt.forEach(t),$4r=r(dje," (OpenAI GPT model)"),dje.forEach(t),k4r=i(Ce),Q9=n(Ce,"LI",{});var cje=s(Q9);STe=n(cje,"STRONG",{});var ikt=s(STe);S4r=r(ikt,"opt"),ikt.forEach(t),R4r=r(cje," \u2014 "),BJ=n(cje,"A",{href:!0});var dkt=s(BJ);P4r=r(dkt,"TFOPTForCausalLM"),dkt.forEach(t),B4r=r(cje," (OPT model)"),cje.forEach(t),I4r=i(Ce),W9=n(Ce,"LI",{});var fje=s(W9);RTe=n(fje,"STRONG",{});var ckt=s(RTe);N4r=r(ckt,"rembert"),ckt.forEach(t),q4r=r(fje," \u2014 "),IJ=n(fje,"A",{href:!0});var fkt=s(IJ);j4r=r(fkt,"TFRemBertForCausalLM"),fkt.forEach(t),D4r=r(fje," (RemBERT model)"),fje.forEach(t),G4r=i(Ce),H9=n(Ce,"LI",{});var mje=s(H9);PTe=n(mje,"STRONG",{});var mkt=s(PTe);O4r=r(mkt,"roberta"),mkt.forEach(t),V4r=r(mje," \u2014 "),NJ=n(mje,"A",{href:!0});var gkt=s(NJ);X4r=r(gkt,"TFRobertaForCausalLM"),gkt.forEach(t),z4r=r(mje," (RoBERTa model)"),mje.forEach(t),Q4r=i(Ce),U9=n(Ce,"LI",{});var gje=s(U9);BTe=n(gje,"STRONG",{});var hkt=s(BTe);W4r=r(hkt,"roformer"),hkt.forEach(t),H4r=r(gje," \u2014 "),qJ=n(gje,"A",{href:!0});var pkt=s(qJ);U4r=r(pkt,"TFRoFormerForCausalLM"),pkt.forEach(t),J4r=r(gje," (RoFormer model)"),gje.forEach(t),Y4r=i(Ce),J9=n(Ce,"LI",{});var hje=s(J9);ITe=n(hje,"STRONG",{});var _kt=s(ITe);K4r=r(_kt,"transfo-xl"),_kt.forEach(t),Z4r=r(hje," \u2014 "),jJ=n(hje,"A",{href:!0});var ukt=s(jJ);eEr=r(ukt,"TFTransfoXLLMHeadModel"),ukt.forEach(t),oEr=r(hje," (Transformer-XL model)"),hje.forEach(t),rEr=i(Ce),Y9=n(Ce,"LI",{});var pje=s(Y9);NTe=n(pje,"STRONG",{});var bkt=s(NTe);tEr=r(bkt,"xlm"),bkt.forEach(t),aEr=r(pje," \u2014 "),DJ=n(pje,"A",{href:!0});var vkt=s(DJ);nEr=r(vkt,"TFXLMWithLMHeadModel"),vkt.forEach(t),sEr=r(pje," (XLM model)"),pje.forEach(t),lEr=i(Ce),K9=n(Ce,"LI",{});var _je=s(K9);qTe=n(_je,"STRONG",{});var Fkt=s(qTe);iEr=r(Fkt,"xlnet"),Fkt.forEach(t),dEr=r(_je," \u2014 "),GJ=n(_je,"A",{href:!0});var Tkt=s(GJ);cEr=r(Tkt,"TFXLNetLMHeadModel"),Tkt.forEach(t),fEr=r(_je," (XLNet model)"),_je.forEach(t),Ce.forEach(t),mEr=i(Sl),T(Z9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),WXe=i(f),hc=n(f,"H2",{class:!0});var oWe=s(hc);eM=n(oWe,"A",{id:!0,class:!0,href:!0});var Mkt=s(eM);jTe=n(Mkt,"SPAN",{});var Ekt=s(jTe);T(ox.$$.fragment,Ekt),Ekt.forEach(t),Mkt.forEach(t),gEr=i(oWe),DTe=n(oWe,"SPAN",{});var Ckt=s(DTe);hEr=r(Ckt,"TFAutoModelForImageClassification"),Ckt.forEach(t),oWe.forEach(t),HXe=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(rx.$$.fragment,Rl),pEr=i(Rl),pc=n(Rl,"P",{});var Mte=s(pc);_Er=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OJ=n(Mte,"A",{href:!0});var wkt=s(OJ);uEr=r(wkt,"from_pretrained()"),wkt.forEach(t),bEr=r(Mte," class method or the "),VJ=n(Mte,"A",{href:!0});var Akt=s(VJ);vEr=r(Akt,"from_config()"),Akt.forEach(t),FEr=r(Mte,` class
method.`),Mte.forEach(t),TEr=i(Rl),tx=n(Rl,"P",{});var rWe=s(tx);MEr=r(rWe,"This class cannot be instantiated directly using "),GTe=n(rWe,"CODE",{});var Lkt=s(GTe);EEr=r(Lkt,"__init__()"),Lkt.forEach(t),CEr=r(rWe," (throws an error)."),rWe.forEach(t),wEr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var aA=s(Bt);T(ax.$$.fragment,aA),AEr=i(aA),OTe=n(aA,"P",{});var ykt=s(OTe);LEr=r(ykt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ykt.forEach(t),yEr=i(aA),_c=n(aA,"P",{});var Ete=s(_c);xEr=r(Ete,`Note:
Loading a model from its configuration file does `),VTe=n(Ete,"STRONG",{});var xkt=s(VTe);$Er=r(xkt,"not"),xkt.forEach(t),kEr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(Ete,"A",{href:!0});var $kt=s(XJ);SEr=r($kt,"from_pretrained()"),$kt.forEach(t),REr=r(Ete," to load the model weights."),Ete.forEach(t),PEr=i(aA),T(oM.$$.fragment,aA),aA.forEach(t),BEr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(nx.$$.fragment,Pl),IEr=i(Pl),XTe=n(Pl,"P",{});var kkt=s(XTe);NEr=r(kkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kkt.forEach(t),qEr=i(Pl),dn=n(Pl,"P",{});var nA=s(dn);jEr=r(nA,"The model class to instantiate is selected based on the "),zTe=n(nA,"CODE",{});var Skt=s(zTe);DEr=r(Skt,"model_type"),Skt.forEach(t),GEr=r(nA,` property of the config object (either
passed as an argument or loaded from `),QTe=n(nA,"CODE",{});var Rkt=s(QTe);OEr=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),VEr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(nA,"CODE",{});var Pkt=s(WTe);XEr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),zEr=r(nA,":"),nA.forEach(t),QEr=i(Pl),tt=n(Pl,"UL",{});var Bl=s(tt);rM=n(Bl,"LI",{});var uje=s(rM);HTe=n(uje,"STRONG",{});var Bkt=s(HTe);WEr=r(Bkt,"convnext"),Bkt.forEach(t),HEr=r(uje," \u2014 "),zJ=n(uje,"A",{href:!0});var Ikt=s(zJ);UEr=r(Ikt,"TFConvNextForImageClassification"),Ikt.forEach(t),JEr=r(uje," (ConvNeXT model)"),uje.forEach(t),YEr=i(Bl),tM=n(Bl,"LI",{});var bje=s(tM);UTe=n(bje,"STRONG",{});var Nkt=s(UTe);KEr=r(Nkt,"data2vec-vision"),Nkt.forEach(t),ZEr=r(bje," \u2014 "),QJ=n(bje,"A",{href:!0});var qkt=s(QJ);eCr=r(qkt,"TFData2VecVisionForImageClassification"),qkt.forEach(t),oCr=r(bje," (Data2VecVision model)"),bje.forEach(t),rCr=i(Bl),aM=n(Bl,"LI",{});var vje=s(aM);JTe=n(vje,"STRONG",{});var jkt=s(JTe);tCr=r(jkt,"regnet"),jkt.forEach(t),aCr=r(vje," \u2014 "),WJ=n(vje,"A",{href:!0});var Dkt=s(WJ);nCr=r(Dkt,"TFRegNetForImageClassification"),Dkt.forEach(t),sCr=r(vje," (RegNet model)"),vje.forEach(t),lCr=i(Bl),nM=n(Bl,"LI",{});var Fje=s(nM);YTe=n(Fje,"STRONG",{});var Gkt=s(YTe);iCr=r(Gkt,"swin"),Gkt.forEach(t),dCr=r(Fje," \u2014 "),HJ=n(Fje,"A",{href:!0});var Okt=s(HJ);cCr=r(Okt,"TFSwinForImageClassification"),Okt.forEach(t),fCr=r(Fje," (Swin Transformer model)"),Fje.forEach(t),mCr=i(Bl),sM=n(Bl,"LI",{});var Tje=s(sM);KTe=n(Tje,"STRONG",{});var Vkt=s(KTe);gCr=r(Vkt,"vit"),Vkt.forEach(t),hCr=r(Tje," \u2014 "),UJ=n(Tje,"A",{href:!0});var Xkt=s(UJ);pCr=r(Xkt,"TFViTForImageClassification"),Xkt.forEach(t),_Cr=r(Tje," (ViT model)"),Tje.forEach(t),Bl.forEach(t),uCr=i(Pl),T(lM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),UXe=i(f),uc=n(f,"H2",{class:!0});var tWe=s(uc);iM=n(tWe,"A",{id:!0,class:!0,href:!0});var zkt=s(iM);ZTe=n(zkt,"SPAN",{});var Qkt=s(ZTe);T(sx.$$.fragment,Qkt),Qkt.forEach(t),zkt.forEach(t),bCr=i(tWe),e7e=n(tWe,"SPAN",{});var Wkt=s(e7e);vCr=r(Wkt,"TFAutoModelForMaskedLM"),Wkt.forEach(t),tWe.forEach(t),JXe=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(lx.$$.fragment,Il),FCr=i(Il),bc=n(Il,"P",{});var Cte=s(bc);TCr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=n(Cte,"A",{href:!0});var Hkt=s(JJ);MCr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),ECr=r(Cte," class method or the "),YJ=n(Cte,"A",{href:!0});var Ukt=s(YJ);CCr=r(Ukt,"from_config()"),Ukt.forEach(t),wCr=r(Cte,` class
method.`),Cte.forEach(t),ACr=i(Il),ix=n(Il,"P",{});var aWe=s(ix);LCr=r(aWe,"This class cannot be instantiated directly using "),o7e=n(aWe,"CODE",{});var Jkt=s(o7e);yCr=r(Jkt,"__init__()"),Jkt.forEach(t),xCr=r(aWe," (throws an error)."),aWe.forEach(t),$Cr=i(Il),It=n(Il,"DIV",{class:!0});var sA=s(It);T(dx.$$.fragment,sA),kCr=i(sA),r7e=n(sA,"P",{});var Ykt=s(r7e);SCr=r(Ykt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ykt.forEach(t),RCr=i(sA),vc=n(sA,"P",{});var wte=s(vc);PCr=r(wte,`Note:
Loading a model from its configuration file does `),t7e=n(wte,"STRONG",{});var Kkt=s(t7e);BCr=r(Kkt,"not"),Kkt.forEach(t),ICr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(wte,"A",{href:!0});var Zkt=s(KJ);NCr=r(Zkt,"from_pretrained()"),Zkt.forEach(t),qCr=r(wte," to load the model weights."),wte.forEach(t),jCr=i(sA),T(dM.$$.fragment,sA),sA.forEach(t),DCr=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(cx.$$.fragment,Nl),GCr=i(Nl),a7e=n(Nl,"P",{});var eSt=s(a7e);OCr=r(eSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eSt.forEach(t),VCr=i(Nl),cn=n(Nl,"P",{});var lA=s(cn);XCr=r(lA,"The model class to instantiate is selected based on the "),n7e=n(lA,"CODE",{});var oSt=s(n7e);zCr=r(oSt,"model_type"),oSt.forEach(t),QCr=r(lA,` property of the config object (either
passed as an argument or loaded from `),s7e=n(lA,"CODE",{});var rSt=s(s7e);WCr=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),HCr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(lA,"CODE",{});var tSt=s(l7e);UCr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),JCr=r(lA,":"),lA.forEach(t),YCr=i(Nl),ie=n(Nl,"UL",{});var fe=s(ie);cM=n(fe,"LI",{});var Mje=s(cM);i7e=n(Mje,"STRONG",{});var aSt=s(i7e);KCr=r(aSt,"albert"),aSt.forEach(t),ZCr=r(Mje," \u2014 "),ZJ=n(Mje,"A",{href:!0});var nSt=s(ZJ);e5r=r(nSt,"TFAlbertForMaskedLM"),nSt.forEach(t),o5r=r(Mje," (ALBERT model)"),Mje.forEach(t),r5r=i(fe),fM=n(fe,"LI",{});var Eje=s(fM);d7e=n(Eje,"STRONG",{});var sSt=s(d7e);t5r=r(sSt,"bert"),sSt.forEach(t),a5r=r(Eje," \u2014 "),eY=n(Eje,"A",{href:!0});var lSt=s(eY);n5r=r(lSt,"TFBertForMaskedLM"),lSt.forEach(t),s5r=r(Eje," (BERT model)"),Eje.forEach(t),l5r=i(fe),mM=n(fe,"LI",{});var Cje=s(mM);c7e=n(Cje,"STRONG",{});var iSt=s(c7e);i5r=r(iSt,"camembert"),iSt.forEach(t),d5r=r(Cje," \u2014 "),oY=n(Cje,"A",{href:!0});var dSt=s(oY);c5r=r(dSt,"TFCamembertForMaskedLM"),dSt.forEach(t),f5r=r(Cje," (CamemBERT model)"),Cje.forEach(t),m5r=i(fe),gM=n(fe,"LI",{});var wje=s(gM);f7e=n(wje,"STRONG",{});var cSt=s(f7e);g5r=r(cSt,"convbert"),cSt.forEach(t),h5r=r(wje," \u2014 "),rY=n(wje,"A",{href:!0});var fSt=s(rY);p5r=r(fSt,"TFConvBertForMaskedLM"),fSt.forEach(t),_5r=r(wje," (ConvBERT model)"),wje.forEach(t),u5r=i(fe),hM=n(fe,"LI",{});var Aje=s(hM);m7e=n(Aje,"STRONG",{});var mSt=s(m7e);b5r=r(mSt,"deberta"),mSt.forEach(t),v5r=r(Aje," \u2014 "),tY=n(Aje,"A",{href:!0});var gSt=s(tY);F5r=r(gSt,"TFDebertaForMaskedLM"),gSt.forEach(t),T5r=r(Aje," (DeBERTa model)"),Aje.forEach(t),M5r=i(fe),pM=n(fe,"LI",{});var Lje=s(pM);g7e=n(Lje,"STRONG",{});var hSt=s(g7e);E5r=r(hSt,"deberta-v2"),hSt.forEach(t),C5r=r(Lje," \u2014 "),aY=n(Lje,"A",{href:!0});var pSt=s(aY);w5r=r(pSt,"TFDebertaV2ForMaskedLM"),pSt.forEach(t),A5r=r(Lje," (DeBERTa-v2 model)"),Lje.forEach(t),L5r=i(fe),_M=n(fe,"LI",{});var yje=s(_M);h7e=n(yje,"STRONG",{});var _St=s(h7e);y5r=r(_St,"distilbert"),_St.forEach(t),x5r=r(yje," \u2014 "),nY=n(yje,"A",{href:!0});var uSt=s(nY);$5r=r(uSt,"TFDistilBertForMaskedLM"),uSt.forEach(t),k5r=r(yje," (DistilBERT model)"),yje.forEach(t),S5r=i(fe),uM=n(fe,"LI",{});var xje=s(uM);p7e=n(xje,"STRONG",{});var bSt=s(p7e);R5r=r(bSt,"electra"),bSt.forEach(t),P5r=r(xje," \u2014 "),sY=n(xje,"A",{href:!0});var vSt=s(sY);B5r=r(vSt,"TFElectraForMaskedLM"),vSt.forEach(t),I5r=r(xje," (ELECTRA model)"),xje.forEach(t),N5r=i(fe),bM=n(fe,"LI",{});var $je=s(bM);_7e=n($je,"STRONG",{});var FSt=s(_7e);q5r=r(FSt,"flaubert"),FSt.forEach(t),j5r=r($je," \u2014 "),lY=n($je,"A",{href:!0});var TSt=s(lY);D5r=r(TSt,"TFFlaubertWithLMHeadModel"),TSt.forEach(t),G5r=r($je," (FlauBERT model)"),$je.forEach(t),O5r=i(fe),vM=n(fe,"LI",{});var kje=s(vM);u7e=n(kje,"STRONG",{});var MSt=s(u7e);V5r=r(MSt,"funnel"),MSt.forEach(t),X5r=r(kje," \u2014 "),iY=n(kje,"A",{href:!0});var ESt=s(iY);z5r=r(ESt,"TFFunnelForMaskedLM"),ESt.forEach(t),Q5r=r(kje," (Funnel Transformer model)"),kje.forEach(t),W5r=i(fe),FM=n(fe,"LI",{});var Sje=s(FM);b7e=n(Sje,"STRONG",{});var CSt=s(b7e);H5r=r(CSt,"layoutlm"),CSt.forEach(t),U5r=r(Sje," \u2014 "),dY=n(Sje,"A",{href:!0});var wSt=s(dY);J5r=r(wSt,"TFLayoutLMForMaskedLM"),wSt.forEach(t),Y5r=r(Sje," (LayoutLM model)"),Sje.forEach(t),K5r=i(fe),TM=n(fe,"LI",{});var Rje=s(TM);v7e=n(Rje,"STRONG",{});var ASt=s(v7e);Z5r=r(ASt,"longformer"),ASt.forEach(t),e0r=r(Rje," \u2014 "),cY=n(Rje,"A",{href:!0});var LSt=s(cY);o0r=r(LSt,"TFLongformerForMaskedLM"),LSt.forEach(t),r0r=r(Rje," (Longformer model)"),Rje.forEach(t),t0r=i(fe),MM=n(fe,"LI",{});var Pje=s(MM);F7e=n(Pje,"STRONG",{});var ySt=s(F7e);a0r=r(ySt,"mobilebert"),ySt.forEach(t),n0r=r(Pje," \u2014 "),fY=n(Pje,"A",{href:!0});var xSt=s(fY);s0r=r(xSt,"TFMobileBertForMaskedLM"),xSt.forEach(t),l0r=r(Pje," (MobileBERT model)"),Pje.forEach(t),i0r=i(fe),EM=n(fe,"LI",{});var Bje=s(EM);T7e=n(Bje,"STRONG",{});var $St=s(T7e);d0r=r($St,"mpnet"),$St.forEach(t),c0r=r(Bje," \u2014 "),mY=n(Bje,"A",{href:!0});var kSt=s(mY);f0r=r(kSt,"TFMPNetForMaskedLM"),kSt.forEach(t),m0r=r(Bje," (MPNet model)"),Bje.forEach(t),g0r=i(fe),CM=n(fe,"LI",{});var Ije=s(CM);M7e=n(Ije,"STRONG",{});var SSt=s(M7e);h0r=r(SSt,"rembert"),SSt.forEach(t),p0r=r(Ije," \u2014 "),gY=n(Ije,"A",{href:!0});var RSt=s(gY);_0r=r(RSt,"TFRemBertForMaskedLM"),RSt.forEach(t),u0r=r(Ije," (RemBERT model)"),Ije.forEach(t),b0r=i(fe),wM=n(fe,"LI",{});var Nje=s(wM);E7e=n(Nje,"STRONG",{});var PSt=s(E7e);v0r=r(PSt,"roberta"),PSt.forEach(t),F0r=r(Nje," \u2014 "),hY=n(Nje,"A",{href:!0});var BSt=s(hY);T0r=r(BSt,"TFRobertaForMaskedLM"),BSt.forEach(t),M0r=r(Nje," (RoBERTa model)"),Nje.forEach(t),E0r=i(fe),AM=n(fe,"LI",{});var qje=s(AM);C7e=n(qje,"STRONG",{});var ISt=s(C7e);C0r=r(ISt,"roformer"),ISt.forEach(t),w0r=r(qje," \u2014 "),pY=n(qje,"A",{href:!0});var NSt=s(pY);A0r=r(NSt,"TFRoFormerForMaskedLM"),NSt.forEach(t),L0r=r(qje," (RoFormer model)"),qje.forEach(t),y0r=i(fe),LM=n(fe,"LI",{});var jje=s(LM);w7e=n(jje,"STRONG",{});var qSt=s(w7e);x0r=r(qSt,"tapas"),qSt.forEach(t),$0r=r(jje," \u2014 "),_Y=n(jje,"A",{href:!0});var jSt=s(_Y);k0r=r(jSt,"TFTapasForMaskedLM"),jSt.forEach(t),S0r=r(jje," (TAPAS model)"),jje.forEach(t),R0r=i(fe),yM=n(fe,"LI",{});var Dje=s(yM);A7e=n(Dje,"STRONG",{});var DSt=s(A7e);P0r=r(DSt,"xlm"),DSt.forEach(t),B0r=r(Dje," \u2014 "),uY=n(Dje,"A",{href:!0});var GSt=s(uY);I0r=r(GSt,"TFXLMWithLMHeadModel"),GSt.forEach(t),N0r=r(Dje," (XLM model)"),Dje.forEach(t),q0r=i(fe),xM=n(fe,"LI",{});var Gje=s(xM);L7e=n(Gje,"STRONG",{});var OSt=s(L7e);j0r=r(OSt,"xlm-roberta"),OSt.forEach(t),D0r=r(Gje," \u2014 "),bY=n(Gje,"A",{href:!0});var VSt=s(bY);G0r=r(VSt,"TFXLMRobertaForMaskedLM"),VSt.forEach(t),O0r=r(Gje," (XLM-RoBERTa model)"),Gje.forEach(t),fe.forEach(t),V0r=i(Nl),T($M.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),YXe=i(f),Fc=n(f,"H2",{class:!0});var nWe=s(Fc);kM=n(nWe,"A",{id:!0,class:!0,href:!0});var XSt=s(kM);y7e=n(XSt,"SPAN",{});var zSt=s(y7e);T(fx.$$.fragment,zSt),zSt.forEach(t),XSt.forEach(t),X0r=i(nWe),x7e=n(nWe,"SPAN",{});var QSt=s(x7e);z0r=r(QSt,"TFAutoModelForSeq2SeqLM"),QSt.forEach(t),nWe.forEach(t),KXe=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(mx.$$.fragment,ql),Q0r=i(ql),Tc=n(ql,"P",{});var Ate=s(Tc);W0r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vY=n(Ate,"A",{href:!0});var WSt=s(vY);H0r=r(WSt,"from_pretrained()"),WSt.forEach(t),U0r=r(Ate," class method or the "),FY=n(Ate,"A",{href:!0});var HSt=s(FY);J0r=r(HSt,"from_config()"),HSt.forEach(t),Y0r=r(Ate,` class
method.`),Ate.forEach(t),K0r=i(ql),gx=n(ql,"P",{});var sWe=s(gx);Z0r=r(sWe,"This class cannot be instantiated directly using "),$7e=n(sWe,"CODE",{});var USt=s($7e);ewr=r(USt,"__init__()"),USt.forEach(t),owr=r(sWe," (throws an error)."),sWe.forEach(t),rwr=i(ql),Nt=n(ql,"DIV",{class:!0});var iA=s(Nt);T(hx.$$.fragment,iA),twr=i(iA),k7e=n(iA,"P",{});var JSt=s(k7e);awr=r(JSt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JSt.forEach(t),nwr=i(iA),Mc=n(iA,"P",{});var Lte=s(Mc);swr=r(Lte,`Note:
Loading a model from its configuration file does `),S7e=n(Lte,"STRONG",{});var YSt=s(S7e);lwr=r(YSt,"not"),YSt.forEach(t),iwr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Lte,"A",{href:!0});var KSt=s(TY);dwr=r(KSt,"from_pretrained()"),KSt.forEach(t),cwr=r(Lte," to load the model weights."),Lte.forEach(t),fwr=i(iA),T(SM.$$.fragment,iA),iA.forEach(t),mwr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(px.$$.fragment,jl),gwr=i(jl),R7e=n(jl,"P",{});var ZSt=s(R7e);hwr=r(ZSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZSt.forEach(t),pwr=i(jl),fn=n(jl,"P",{});var dA=s(fn);_wr=r(dA,"The model class to instantiate is selected based on the "),P7e=n(dA,"CODE",{});var eRt=s(P7e);uwr=r(eRt,"model_type"),eRt.forEach(t),bwr=r(dA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(dA,"CODE",{});var oRt=s(B7e);vwr=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),Fwr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(dA,"CODE",{});var rRt=s(I7e);Twr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),Mwr=r(dA,":"),dA.forEach(t),Ewr=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);RM=n(Ie,"LI",{});var Oje=s(RM);N7e=n(Oje,"STRONG",{});var tRt=s(N7e);Cwr=r(tRt,"bart"),tRt.forEach(t),wwr=r(Oje," \u2014 "),MY=n(Oje,"A",{href:!0});var aRt=s(MY);Awr=r(aRt,"TFBartForConditionalGeneration"),aRt.forEach(t),Lwr=r(Oje," (BART model)"),Oje.forEach(t),ywr=i(Ie),PM=n(Ie,"LI",{});var Vje=s(PM);q7e=n(Vje,"STRONG",{});var nRt=s(q7e);xwr=r(nRt,"blenderbot"),nRt.forEach(t),$wr=r(Vje," \u2014 "),EY=n(Vje,"A",{href:!0});var sRt=s(EY);kwr=r(sRt,"TFBlenderbotForConditionalGeneration"),sRt.forEach(t),Swr=r(Vje," (Blenderbot model)"),Vje.forEach(t),Rwr=i(Ie),BM=n(Ie,"LI",{});var Xje=s(BM);j7e=n(Xje,"STRONG",{});var lRt=s(j7e);Pwr=r(lRt,"blenderbot-small"),lRt.forEach(t),Bwr=r(Xje," \u2014 "),CY=n(Xje,"A",{href:!0});var iRt=s(CY);Iwr=r(iRt,"TFBlenderbotSmallForConditionalGeneration"),iRt.forEach(t),Nwr=r(Xje," (BlenderbotSmall model)"),Xje.forEach(t),qwr=i(Ie),IM=n(Ie,"LI",{});var zje=s(IM);D7e=n(zje,"STRONG",{});var dRt=s(D7e);jwr=r(dRt,"encoder-decoder"),dRt.forEach(t),Dwr=r(zje," \u2014 "),wY=n(zje,"A",{href:!0});var cRt=s(wY);Gwr=r(cRt,"TFEncoderDecoderModel"),cRt.forEach(t),Owr=r(zje," (Encoder decoder model)"),zje.forEach(t),Vwr=i(Ie),NM=n(Ie,"LI",{});var Qje=s(NM);G7e=n(Qje,"STRONG",{});var fRt=s(G7e);Xwr=r(fRt,"led"),fRt.forEach(t),zwr=r(Qje," \u2014 "),AY=n(Qje,"A",{href:!0});var mRt=s(AY);Qwr=r(mRt,"TFLEDForConditionalGeneration"),mRt.forEach(t),Wwr=r(Qje," (LED model)"),Qje.forEach(t),Hwr=i(Ie),qM=n(Ie,"LI",{});var Wje=s(qM);O7e=n(Wje,"STRONG",{});var gRt=s(O7e);Uwr=r(gRt,"marian"),gRt.forEach(t),Jwr=r(Wje," \u2014 "),LY=n(Wje,"A",{href:!0});var hRt=s(LY);Ywr=r(hRt,"TFMarianMTModel"),hRt.forEach(t),Kwr=r(Wje," (Marian model)"),Wje.forEach(t),Zwr=i(Ie),jM=n(Ie,"LI",{});var Hje=s(jM);V7e=n(Hje,"STRONG",{});var pRt=s(V7e);eAr=r(pRt,"mbart"),pRt.forEach(t),oAr=r(Hje," \u2014 "),yY=n(Hje,"A",{href:!0});var _Rt=s(yY);rAr=r(_Rt,"TFMBartForConditionalGeneration"),_Rt.forEach(t),tAr=r(Hje," (mBART model)"),Hje.forEach(t),aAr=i(Ie),DM=n(Ie,"LI",{});var Uje=s(DM);X7e=n(Uje,"STRONG",{});var uRt=s(X7e);nAr=r(uRt,"mt5"),uRt.forEach(t),sAr=r(Uje," \u2014 "),xY=n(Uje,"A",{href:!0});var bRt=s(xY);lAr=r(bRt,"TFMT5ForConditionalGeneration"),bRt.forEach(t),iAr=r(Uje," (MT5 model)"),Uje.forEach(t),dAr=i(Ie),GM=n(Ie,"LI",{});var Jje=s(GM);z7e=n(Jje,"STRONG",{});var vRt=s(z7e);cAr=r(vRt,"pegasus"),vRt.forEach(t),fAr=r(Jje," \u2014 "),$Y=n(Jje,"A",{href:!0});var FRt=s($Y);mAr=r(FRt,"TFPegasusForConditionalGeneration"),FRt.forEach(t),gAr=r(Jje," (Pegasus model)"),Jje.forEach(t),hAr=i(Ie),OM=n(Ie,"LI",{});var Yje=s(OM);Q7e=n(Yje,"STRONG",{});var TRt=s(Q7e);pAr=r(TRt,"t5"),TRt.forEach(t),_Ar=r(Yje," \u2014 "),kY=n(Yje,"A",{href:!0});var MRt=s(kY);uAr=r(MRt,"TFT5ForConditionalGeneration"),MRt.forEach(t),bAr=r(Yje," (T5 model)"),Yje.forEach(t),Ie.forEach(t),vAr=i(jl),T(VM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),ZXe=i(f),Ec=n(f,"H2",{class:!0});var lWe=s(Ec);XM=n(lWe,"A",{id:!0,class:!0,href:!0});var ERt=s(XM);W7e=n(ERt,"SPAN",{});var CRt=s(W7e);T(_x.$$.fragment,CRt),CRt.forEach(t),ERt.forEach(t),FAr=i(lWe),H7e=n(lWe,"SPAN",{});var wRt=s(H7e);TAr=r(wRt,"TFAutoModelForSequenceClassification"),wRt.forEach(t),lWe.forEach(t),eze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(ux.$$.fragment,Dl),MAr=i(Dl),Cc=n(Dl,"P",{});var yte=s(Cc);EAr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SY=n(yte,"A",{href:!0});var ARt=s(SY);CAr=r(ARt,"from_pretrained()"),ARt.forEach(t),wAr=r(yte," class method or the "),RY=n(yte,"A",{href:!0});var LRt=s(RY);AAr=r(LRt,"from_config()"),LRt.forEach(t),LAr=r(yte,` class
method.`),yte.forEach(t),yAr=i(Dl),bx=n(Dl,"P",{});var iWe=s(bx);xAr=r(iWe,"This class cannot be instantiated directly using "),U7e=n(iWe,"CODE",{});var yRt=s(U7e);$Ar=r(yRt,"__init__()"),yRt.forEach(t),kAr=r(iWe," (throws an error)."),iWe.forEach(t),SAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var cA=s(qt);T(vx.$$.fragment,cA),RAr=i(cA),J7e=n(cA,"P",{});var xRt=s(J7e);PAr=r(xRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xRt.forEach(t),BAr=i(cA),wc=n(cA,"P",{});var xte=s(wc);IAr=r(xte,`Note:
Loading a model from its configuration file does `),Y7e=n(xte,"STRONG",{});var $Rt=s(Y7e);NAr=r($Rt,"not"),$Rt.forEach(t),qAr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(xte,"A",{href:!0});var kRt=s(PY);jAr=r(kRt,"from_pretrained()"),kRt.forEach(t),DAr=r(xte," to load the model weights."),xte.forEach(t),GAr=i(cA),T(zM.$$.fragment,cA),cA.forEach(t),OAr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Fx.$$.fragment,Gl),VAr=i(Gl),K7e=n(Gl,"P",{});var SRt=s(K7e);XAr=r(SRt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SRt.forEach(t),zAr=i(Gl),mn=n(Gl,"P",{});var fA=s(mn);QAr=r(fA,"The model class to instantiate is selected based on the "),Z7e=n(fA,"CODE",{});var RRt=s(Z7e);WAr=r(RRt,"model_type"),RRt.forEach(t),HAr=r(fA,` property of the config object (either
passed as an argument or loaded from `),e9e=n(fA,"CODE",{});var PRt=s(e9e);UAr=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),JAr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(fA,"CODE",{});var BRt=s(o9e);YAr=r(BRt,"pretrained_model_name_or_path"),BRt.forEach(t),KAr=r(fA,":"),fA.forEach(t),ZAr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);QM=n(ne,"LI",{});var Kje=s(QM);r9e=n(Kje,"STRONG",{});var IRt=s(r9e);eLr=r(IRt,"albert"),IRt.forEach(t),oLr=r(Kje," \u2014 "),BY=n(Kje,"A",{href:!0});var NRt=s(BY);rLr=r(NRt,"TFAlbertForSequenceClassification"),NRt.forEach(t),tLr=r(Kje," (ALBERT model)"),Kje.forEach(t),aLr=i(ne),WM=n(ne,"LI",{});var Zje=s(WM);t9e=n(Zje,"STRONG",{});var qRt=s(t9e);nLr=r(qRt,"bert"),qRt.forEach(t),sLr=r(Zje," \u2014 "),IY=n(Zje,"A",{href:!0});var jRt=s(IY);lLr=r(jRt,"TFBertForSequenceClassification"),jRt.forEach(t),iLr=r(Zje," (BERT model)"),Zje.forEach(t),dLr=i(ne),HM=n(ne,"LI",{});var eDe=s(HM);a9e=n(eDe,"STRONG",{});var DRt=s(a9e);cLr=r(DRt,"camembert"),DRt.forEach(t),fLr=r(eDe," \u2014 "),NY=n(eDe,"A",{href:!0});var GRt=s(NY);mLr=r(GRt,"TFCamembertForSequenceClassification"),GRt.forEach(t),gLr=r(eDe," (CamemBERT model)"),eDe.forEach(t),hLr=i(ne),UM=n(ne,"LI",{});var oDe=s(UM);n9e=n(oDe,"STRONG",{});var ORt=s(n9e);pLr=r(ORt,"convbert"),ORt.forEach(t),_Lr=r(oDe," \u2014 "),qY=n(oDe,"A",{href:!0});var VRt=s(qY);uLr=r(VRt,"TFConvBertForSequenceClassification"),VRt.forEach(t),bLr=r(oDe," (ConvBERT model)"),oDe.forEach(t),vLr=i(ne),JM=n(ne,"LI",{});var rDe=s(JM);s9e=n(rDe,"STRONG",{});var XRt=s(s9e);FLr=r(XRt,"ctrl"),XRt.forEach(t),TLr=r(rDe," \u2014 "),jY=n(rDe,"A",{href:!0});var zRt=s(jY);MLr=r(zRt,"TFCTRLForSequenceClassification"),zRt.forEach(t),ELr=r(rDe," (CTRL model)"),rDe.forEach(t),CLr=i(ne),YM=n(ne,"LI",{});var tDe=s(YM);l9e=n(tDe,"STRONG",{});var QRt=s(l9e);wLr=r(QRt,"deberta"),QRt.forEach(t),ALr=r(tDe," \u2014 "),DY=n(tDe,"A",{href:!0});var WRt=s(DY);LLr=r(WRt,"TFDebertaForSequenceClassification"),WRt.forEach(t),yLr=r(tDe," (DeBERTa model)"),tDe.forEach(t),xLr=i(ne),KM=n(ne,"LI",{});var aDe=s(KM);i9e=n(aDe,"STRONG",{});var HRt=s(i9e);$Lr=r(HRt,"deberta-v2"),HRt.forEach(t),kLr=r(aDe," \u2014 "),GY=n(aDe,"A",{href:!0});var URt=s(GY);SLr=r(URt,"TFDebertaV2ForSequenceClassification"),URt.forEach(t),RLr=r(aDe," (DeBERTa-v2 model)"),aDe.forEach(t),PLr=i(ne),ZM=n(ne,"LI",{});var nDe=s(ZM);d9e=n(nDe,"STRONG",{});var JRt=s(d9e);BLr=r(JRt,"distilbert"),JRt.forEach(t),ILr=r(nDe," \u2014 "),OY=n(nDe,"A",{href:!0});var YRt=s(OY);NLr=r(YRt,"TFDistilBertForSequenceClassification"),YRt.forEach(t),qLr=r(nDe," (DistilBERT model)"),nDe.forEach(t),jLr=i(ne),e4=n(ne,"LI",{});var sDe=s(e4);c9e=n(sDe,"STRONG",{});var KRt=s(c9e);DLr=r(KRt,"electra"),KRt.forEach(t),GLr=r(sDe," \u2014 "),VY=n(sDe,"A",{href:!0});var ZRt=s(VY);OLr=r(ZRt,"TFElectraForSequenceClassification"),ZRt.forEach(t),VLr=r(sDe," (ELECTRA model)"),sDe.forEach(t),XLr=i(ne),o4=n(ne,"LI",{});var lDe=s(o4);f9e=n(lDe,"STRONG",{});var ePt=s(f9e);zLr=r(ePt,"flaubert"),ePt.forEach(t),QLr=r(lDe," \u2014 "),XY=n(lDe,"A",{href:!0});var oPt=s(XY);WLr=r(oPt,"TFFlaubertForSequenceClassification"),oPt.forEach(t),HLr=r(lDe," (FlauBERT model)"),lDe.forEach(t),ULr=i(ne),r4=n(ne,"LI",{});var iDe=s(r4);m9e=n(iDe,"STRONG",{});var rPt=s(m9e);JLr=r(rPt,"funnel"),rPt.forEach(t),YLr=r(iDe," \u2014 "),zY=n(iDe,"A",{href:!0});var tPt=s(zY);KLr=r(tPt,"TFFunnelForSequenceClassification"),tPt.forEach(t),ZLr=r(iDe," (Funnel Transformer model)"),iDe.forEach(t),eyr=i(ne),t4=n(ne,"LI",{});var dDe=s(t4);g9e=n(dDe,"STRONG",{});var aPt=s(g9e);oyr=r(aPt,"gpt2"),aPt.forEach(t),ryr=r(dDe," \u2014 "),QY=n(dDe,"A",{href:!0});var nPt=s(QY);tyr=r(nPt,"TFGPT2ForSequenceClassification"),nPt.forEach(t),ayr=r(dDe," (OpenAI GPT-2 model)"),dDe.forEach(t),nyr=i(ne),a4=n(ne,"LI",{});var cDe=s(a4);h9e=n(cDe,"STRONG",{});var sPt=s(h9e);syr=r(sPt,"gptj"),sPt.forEach(t),lyr=r(cDe," \u2014 "),WY=n(cDe,"A",{href:!0});var lPt=s(WY);iyr=r(lPt,"TFGPTJForSequenceClassification"),lPt.forEach(t),dyr=r(cDe," (GPT-J model)"),cDe.forEach(t),cyr=i(ne),n4=n(ne,"LI",{});var fDe=s(n4);p9e=n(fDe,"STRONG",{});var iPt=s(p9e);fyr=r(iPt,"layoutlm"),iPt.forEach(t),myr=r(fDe," \u2014 "),HY=n(fDe,"A",{href:!0});var dPt=s(HY);gyr=r(dPt,"TFLayoutLMForSequenceClassification"),dPt.forEach(t),hyr=r(fDe," (LayoutLM model)"),fDe.forEach(t),pyr=i(ne),s4=n(ne,"LI",{});var mDe=s(s4);_9e=n(mDe,"STRONG",{});var cPt=s(_9e);_yr=r(cPt,"longformer"),cPt.forEach(t),uyr=r(mDe," \u2014 "),UY=n(mDe,"A",{href:!0});var fPt=s(UY);byr=r(fPt,"TFLongformerForSequenceClassification"),fPt.forEach(t),vyr=r(mDe," (Longformer model)"),mDe.forEach(t),Fyr=i(ne),l4=n(ne,"LI",{});var gDe=s(l4);u9e=n(gDe,"STRONG",{});var mPt=s(u9e);Tyr=r(mPt,"mobilebert"),mPt.forEach(t),Myr=r(gDe," \u2014 "),JY=n(gDe,"A",{href:!0});var gPt=s(JY);Eyr=r(gPt,"TFMobileBertForSequenceClassification"),gPt.forEach(t),Cyr=r(gDe," (MobileBERT model)"),gDe.forEach(t),wyr=i(ne),i4=n(ne,"LI",{});var hDe=s(i4);b9e=n(hDe,"STRONG",{});var hPt=s(b9e);Ayr=r(hPt,"mpnet"),hPt.forEach(t),Lyr=r(hDe," \u2014 "),YY=n(hDe,"A",{href:!0});var pPt=s(YY);yyr=r(pPt,"TFMPNetForSequenceClassification"),pPt.forEach(t),xyr=r(hDe," (MPNet model)"),hDe.forEach(t),$yr=i(ne),d4=n(ne,"LI",{});var pDe=s(d4);v9e=n(pDe,"STRONG",{});var _Pt=s(v9e);kyr=r(_Pt,"openai-gpt"),_Pt.forEach(t),Syr=r(pDe," \u2014 "),KY=n(pDe,"A",{href:!0});var uPt=s(KY);Ryr=r(uPt,"TFOpenAIGPTForSequenceClassification"),uPt.forEach(t),Pyr=r(pDe," (OpenAI GPT model)"),pDe.forEach(t),Byr=i(ne),c4=n(ne,"LI",{});var _De=s(c4);F9e=n(_De,"STRONG",{});var bPt=s(F9e);Iyr=r(bPt,"rembert"),bPt.forEach(t),Nyr=r(_De," \u2014 "),ZY=n(_De,"A",{href:!0});var vPt=s(ZY);qyr=r(vPt,"TFRemBertForSequenceClassification"),vPt.forEach(t),jyr=r(_De," (RemBERT model)"),_De.forEach(t),Dyr=i(ne),f4=n(ne,"LI",{});var uDe=s(f4);T9e=n(uDe,"STRONG",{});var FPt=s(T9e);Gyr=r(FPt,"roberta"),FPt.forEach(t),Oyr=r(uDe," \u2014 "),eK=n(uDe,"A",{href:!0});var TPt=s(eK);Vyr=r(TPt,"TFRobertaForSequenceClassification"),TPt.forEach(t),Xyr=r(uDe," (RoBERTa model)"),uDe.forEach(t),zyr=i(ne),m4=n(ne,"LI",{});var bDe=s(m4);M9e=n(bDe,"STRONG",{});var MPt=s(M9e);Qyr=r(MPt,"roformer"),MPt.forEach(t),Wyr=r(bDe," \u2014 "),oK=n(bDe,"A",{href:!0});var EPt=s(oK);Hyr=r(EPt,"TFRoFormerForSequenceClassification"),EPt.forEach(t),Uyr=r(bDe," (RoFormer model)"),bDe.forEach(t),Jyr=i(ne),g4=n(ne,"LI",{});var vDe=s(g4);E9e=n(vDe,"STRONG",{});var CPt=s(E9e);Yyr=r(CPt,"tapas"),CPt.forEach(t),Kyr=r(vDe," \u2014 "),rK=n(vDe,"A",{href:!0});var wPt=s(rK);Zyr=r(wPt,"TFTapasForSequenceClassification"),wPt.forEach(t),e8r=r(vDe," (TAPAS model)"),vDe.forEach(t),o8r=i(ne),h4=n(ne,"LI",{});var FDe=s(h4);C9e=n(FDe,"STRONG",{});var APt=s(C9e);r8r=r(APt,"transfo-xl"),APt.forEach(t),t8r=r(FDe," \u2014 "),tK=n(FDe,"A",{href:!0});var LPt=s(tK);a8r=r(LPt,"TFTransfoXLForSequenceClassification"),LPt.forEach(t),n8r=r(FDe," (Transformer-XL model)"),FDe.forEach(t),s8r=i(ne),p4=n(ne,"LI",{});var TDe=s(p4);w9e=n(TDe,"STRONG",{});var yPt=s(w9e);l8r=r(yPt,"xlm"),yPt.forEach(t),i8r=r(TDe," \u2014 "),aK=n(TDe,"A",{href:!0});var xPt=s(aK);d8r=r(xPt,"TFXLMForSequenceClassification"),xPt.forEach(t),c8r=r(TDe," (XLM model)"),TDe.forEach(t),f8r=i(ne),_4=n(ne,"LI",{});var MDe=s(_4);A9e=n(MDe,"STRONG",{});var $Pt=s(A9e);m8r=r($Pt,"xlm-roberta"),$Pt.forEach(t),g8r=r(MDe," \u2014 "),nK=n(MDe,"A",{href:!0});var kPt=s(nK);h8r=r(kPt,"TFXLMRobertaForSequenceClassification"),kPt.forEach(t),p8r=r(MDe," (XLM-RoBERTa model)"),MDe.forEach(t),_8r=i(ne),u4=n(ne,"LI",{});var EDe=s(u4);L9e=n(EDe,"STRONG",{});var SPt=s(L9e);u8r=r(SPt,"xlnet"),SPt.forEach(t),b8r=r(EDe," \u2014 "),sK=n(EDe,"A",{href:!0});var RPt=s(sK);v8r=r(RPt,"TFXLNetForSequenceClassification"),RPt.forEach(t),F8r=r(EDe," (XLNet model)"),EDe.forEach(t),ne.forEach(t),T8r=i(Gl),T(b4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),oze=i(f),Ac=n(f,"H2",{class:!0});var dWe=s(Ac);v4=n(dWe,"A",{id:!0,class:!0,href:!0});var PPt=s(v4);y9e=n(PPt,"SPAN",{});var BPt=s(y9e);T(Tx.$$.fragment,BPt),BPt.forEach(t),PPt.forEach(t),M8r=i(dWe),x9e=n(dWe,"SPAN",{});var IPt=s(x9e);E8r=r(IPt,"TFAutoModelForMultipleChoice"),IPt.forEach(t),dWe.forEach(t),rze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Mx.$$.fragment,Ol),C8r=i(Ol),Lc=n(Ol,"P",{});var $te=s(Lc);w8r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lK=n($te,"A",{href:!0});var NPt=s(lK);A8r=r(NPt,"from_pretrained()"),NPt.forEach(t),L8r=r($te," class method or the "),iK=n($te,"A",{href:!0});var qPt=s(iK);y8r=r(qPt,"from_config()"),qPt.forEach(t),x8r=r($te,` class
method.`),$te.forEach(t),$8r=i(Ol),Ex=n(Ol,"P",{});var cWe=s(Ex);k8r=r(cWe,"This class cannot be instantiated directly using "),$9e=n(cWe,"CODE",{});var jPt=s($9e);S8r=r(jPt,"__init__()"),jPt.forEach(t),R8r=r(cWe," (throws an error)."),cWe.forEach(t),P8r=i(Ol),jt=n(Ol,"DIV",{class:!0});var mA=s(jt);T(Cx.$$.fragment,mA),B8r=i(mA),k9e=n(mA,"P",{});var DPt=s(k9e);I8r=r(DPt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DPt.forEach(t),N8r=i(mA),yc=n(mA,"P",{});var kte=s(yc);q8r=r(kte,`Note:
Loading a model from its configuration file does `),S9e=n(kte,"STRONG",{});var GPt=s(S9e);j8r=r(GPt,"not"),GPt.forEach(t),D8r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(kte,"A",{href:!0});var OPt=s(dK);G8r=r(OPt,"from_pretrained()"),OPt.forEach(t),O8r=r(kte," to load the model weights."),kte.forEach(t),V8r=i(mA),T(F4.$$.fragment,mA),mA.forEach(t),X8r=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(wx.$$.fragment,Vl),z8r=i(Vl),R9e=n(Vl,"P",{});var VPt=s(R9e);Q8r=r(VPt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VPt.forEach(t),W8r=i(Vl),gn=n(Vl,"P",{});var gA=s(gn);H8r=r(gA,"The model class to instantiate is selected based on the "),P9e=n(gA,"CODE",{});var XPt=s(P9e);U8r=r(XPt,"model_type"),XPt.forEach(t),J8r=r(gA,` property of the config object (either
passed as an argument or loaded from `),B9e=n(gA,"CODE",{});var zPt=s(B9e);Y8r=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),K8r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=n(gA,"CODE",{});var QPt=s(I9e);Z8r=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),exr=r(gA,":"),gA.forEach(t),oxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);T4=n(Fe,"LI",{});var CDe=s(T4);N9e=n(CDe,"STRONG",{});var WPt=s(N9e);rxr=r(WPt,"albert"),WPt.forEach(t),txr=r(CDe," \u2014 "),cK=n(CDe,"A",{href:!0});var HPt=s(cK);axr=r(HPt,"TFAlbertForMultipleChoice"),HPt.forEach(t),nxr=r(CDe," (ALBERT model)"),CDe.forEach(t),sxr=i(Fe),M4=n(Fe,"LI",{});var wDe=s(M4);q9e=n(wDe,"STRONG",{});var UPt=s(q9e);lxr=r(UPt,"bert"),UPt.forEach(t),ixr=r(wDe," \u2014 "),fK=n(wDe,"A",{href:!0});var JPt=s(fK);dxr=r(JPt,"TFBertForMultipleChoice"),JPt.forEach(t),cxr=r(wDe," (BERT model)"),wDe.forEach(t),fxr=i(Fe),E4=n(Fe,"LI",{});var ADe=s(E4);j9e=n(ADe,"STRONG",{});var YPt=s(j9e);mxr=r(YPt,"camembert"),YPt.forEach(t),gxr=r(ADe," \u2014 "),mK=n(ADe,"A",{href:!0});var KPt=s(mK);hxr=r(KPt,"TFCamembertForMultipleChoice"),KPt.forEach(t),pxr=r(ADe," (CamemBERT model)"),ADe.forEach(t),_xr=i(Fe),C4=n(Fe,"LI",{});var LDe=s(C4);D9e=n(LDe,"STRONG",{});var ZPt=s(D9e);uxr=r(ZPt,"convbert"),ZPt.forEach(t),bxr=r(LDe," \u2014 "),gK=n(LDe,"A",{href:!0});var eBt=s(gK);vxr=r(eBt,"TFConvBertForMultipleChoice"),eBt.forEach(t),Fxr=r(LDe," (ConvBERT model)"),LDe.forEach(t),Txr=i(Fe),w4=n(Fe,"LI",{});var yDe=s(w4);G9e=n(yDe,"STRONG",{});var oBt=s(G9e);Mxr=r(oBt,"distilbert"),oBt.forEach(t),Exr=r(yDe," \u2014 "),hK=n(yDe,"A",{href:!0});var rBt=s(hK);Cxr=r(rBt,"TFDistilBertForMultipleChoice"),rBt.forEach(t),wxr=r(yDe," (DistilBERT model)"),yDe.forEach(t),Axr=i(Fe),A4=n(Fe,"LI",{});var xDe=s(A4);O9e=n(xDe,"STRONG",{});var tBt=s(O9e);Lxr=r(tBt,"electra"),tBt.forEach(t),yxr=r(xDe," \u2014 "),pK=n(xDe,"A",{href:!0});var aBt=s(pK);xxr=r(aBt,"TFElectraForMultipleChoice"),aBt.forEach(t),$xr=r(xDe," (ELECTRA model)"),xDe.forEach(t),kxr=i(Fe),L4=n(Fe,"LI",{});var $De=s(L4);V9e=n($De,"STRONG",{});var nBt=s(V9e);Sxr=r(nBt,"flaubert"),nBt.forEach(t),Rxr=r($De," \u2014 "),_K=n($De,"A",{href:!0});var sBt=s(_K);Pxr=r(sBt,"TFFlaubertForMultipleChoice"),sBt.forEach(t),Bxr=r($De," (FlauBERT model)"),$De.forEach(t),Ixr=i(Fe),y4=n(Fe,"LI",{});var kDe=s(y4);X9e=n(kDe,"STRONG",{});var lBt=s(X9e);Nxr=r(lBt,"funnel"),lBt.forEach(t),qxr=r(kDe," \u2014 "),uK=n(kDe,"A",{href:!0});var iBt=s(uK);jxr=r(iBt,"TFFunnelForMultipleChoice"),iBt.forEach(t),Dxr=r(kDe," (Funnel Transformer model)"),kDe.forEach(t),Gxr=i(Fe),x4=n(Fe,"LI",{});var SDe=s(x4);z9e=n(SDe,"STRONG",{});var dBt=s(z9e);Oxr=r(dBt,"longformer"),dBt.forEach(t),Vxr=r(SDe," \u2014 "),bK=n(SDe,"A",{href:!0});var cBt=s(bK);Xxr=r(cBt,"TFLongformerForMultipleChoice"),cBt.forEach(t),zxr=r(SDe," (Longformer model)"),SDe.forEach(t),Qxr=i(Fe),$4=n(Fe,"LI",{});var RDe=s($4);Q9e=n(RDe,"STRONG",{});var fBt=s(Q9e);Wxr=r(fBt,"mobilebert"),fBt.forEach(t),Hxr=r(RDe," \u2014 "),vK=n(RDe,"A",{href:!0});var mBt=s(vK);Uxr=r(mBt,"TFMobileBertForMultipleChoice"),mBt.forEach(t),Jxr=r(RDe," (MobileBERT model)"),RDe.forEach(t),Yxr=i(Fe),k4=n(Fe,"LI",{});var PDe=s(k4);W9e=n(PDe,"STRONG",{});var gBt=s(W9e);Kxr=r(gBt,"mpnet"),gBt.forEach(t),Zxr=r(PDe," \u2014 "),FK=n(PDe,"A",{href:!0});var hBt=s(FK);e$r=r(hBt,"TFMPNetForMultipleChoice"),hBt.forEach(t),o$r=r(PDe," (MPNet model)"),PDe.forEach(t),r$r=i(Fe),S4=n(Fe,"LI",{});var BDe=s(S4);H9e=n(BDe,"STRONG",{});var pBt=s(H9e);t$r=r(pBt,"rembert"),pBt.forEach(t),a$r=r(BDe," \u2014 "),TK=n(BDe,"A",{href:!0});var _Bt=s(TK);n$r=r(_Bt,"TFRemBertForMultipleChoice"),_Bt.forEach(t),s$r=r(BDe," (RemBERT model)"),BDe.forEach(t),l$r=i(Fe),R4=n(Fe,"LI",{});var IDe=s(R4);U9e=n(IDe,"STRONG",{});var uBt=s(U9e);i$r=r(uBt,"roberta"),uBt.forEach(t),d$r=r(IDe," \u2014 "),MK=n(IDe,"A",{href:!0});var bBt=s(MK);c$r=r(bBt,"TFRobertaForMultipleChoice"),bBt.forEach(t),f$r=r(IDe," (RoBERTa model)"),IDe.forEach(t),m$r=i(Fe),P4=n(Fe,"LI",{});var NDe=s(P4);J9e=n(NDe,"STRONG",{});var vBt=s(J9e);g$r=r(vBt,"roformer"),vBt.forEach(t),h$r=r(NDe," \u2014 "),EK=n(NDe,"A",{href:!0});var FBt=s(EK);p$r=r(FBt,"TFRoFormerForMultipleChoice"),FBt.forEach(t),_$r=r(NDe," (RoFormer model)"),NDe.forEach(t),u$r=i(Fe),B4=n(Fe,"LI",{});var qDe=s(B4);Y9e=n(qDe,"STRONG",{});var TBt=s(Y9e);b$r=r(TBt,"xlm"),TBt.forEach(t),v$r=r(qDe," \u2014 "),CK=n(qDe,"A",{href:!0});var MBt=s(CK);F$r=r(MBt,"TFXLMForMultipleChoice"),MBt.forEach(t),T$r=r(qDe," (XLM model)"),qDe.forEach(t),M$r=i(Fe),I4=n(Fe,"LI",{});var jDe=s(I4);K9e=n(jDe,"STRONG",{});var EBt=s(K9e);E$r=r(EBt,"xlm-roberta"),EBt.forEach(t),C$r=r(jDe," \u2014 "),wK=n(jDe,"A",{href:!0});var CBt=s(wK);w$r=r(CBt,"TFXLMRobertaForMultipleChoice"),CBt.forEach(t),A$r=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),L$r=i(Fe),N4=n(Fe,"LI",{});var DDe=s(N4);Z9e=n(DDe,"STRONG",{});var wBt=s(Z9e);y$r=r(wBt,"xlnet"),wBt.forEach(t),x$r=r(DDe," \u2014 "),AK=n(DDe,"A",{href:!0});var ABt=s(AK);$$r=r(ABt,"TFXLNetForMultipleChoice"),ABt.forEach(t),k$r=r(DDe," (XLNet model)"),DDe.forEach(t),Fe.forEach(t),S$r=i(Vl),T(q4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),tze=i(f),xc=n(f,"H2",{class:!0});var fWe=s(xc);j4=n(fWe,"A",{id:!0,class:!0,href:!0});var LBt=s(j4);eMe=n(LBt,"SPAN",{});var yBt=s(eMe);T(Ax.$$.fragment,yBt),yBt.forEach(t),LBt.forEach(t),R$r=i(fWe),oMe=n(fWe,"SPAN",{});var xBt=s(oMe);P$r=r(xBt,"TFAutoModelForNextSentencePrediction"),xBt.forEach(t),fWe.forEach(t),aze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(Lx.$$.fragment,Xl),B$r=i(Xl),$c=n(Xl,"P",{});var Ste=s($c);I$r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LK=n(Ste,"A",{href:!0});var $Bt=s(LK);N$r=r($Bt,"from_pretrained()"),$Bt.forEach(t),q$r=r(Ste," class method or the "),yK=n(Ste,"A",{href:!0});var kBt=s(yK);j$r=r(kBt,"from_config()"),kBt.forEach(t),D$r=r(Ste,` class
method.`),Ste.forEach(t),G$r=i(Xl),yx=n(Xl,"P",{});var mWe=s(yx);O$r=r(mWe,"This class cannot be instantiated directly using "),rMe=n(mWe,"CODE",{});var SBt=s(rMe);V$r=r(SBt,"__init__()"),SBt.forEach(t),X$r=r(mWe," (throws an error)."),mWe.forEach(t),z$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var hA=s(Dt);T(xx.$$.fragment,hA),Q$r=i(hA),tMe=n(hA,"P",{});var RBt=s(tMe);W$r=r(RBt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RBt.forEach(t),H$r=i(hA),kc=n(hA,"P",{});var Rte=s(kc);U$r=r(Rte,`Note:
Loading a model from its configuration file does `),aMe=n(Rte,"STRONG",{});var PBt=s(aMe);J$r=r(PBt,"not"),PBt.forEach(t),Y$r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Rte,"A",{href:!0});var BBt=s(xK);K$r=r(BBt,"from_pretrained()"),BBt.forEach(t),Z$r=r(Rte," to load the model weights."),Rte.forEach(t),ekr=i(hA),T(D4.$$.fragment,hA),hA.forEach(t),okr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T($x.$$.fragment,zl),rkr=i(zl),nMe=n(zl,"P",{});var IBt=s(nMe);tkr=r(IBt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IBt.forEach(t),akr=i(zl),hn=n(zl,"P",{});var pA=s(hn);nkr=r(pA,"The model class to instantiate is selected based on the "),sMe=n(pA,"CODE",{});var NBt=s(sMe);skr=r(NBt,"model_type"),NBt.forEach(t),lkr=r(pA,` property of the config object (either
passed as an argument or loaded from `),lMe=n(pA,"CODE",{});var qBt=s(lMe);ikr=r(qBt,"pretrained_model_name_or_path"),qBt.forEach(t),dkr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(pA,"CODE",{});var jBt=s(iMe);ckr=r(jBt,"pretrained_model_name_or_path"),jBt.forEach(t),fkr=r(pA,":"),pA.forEach(t),mkr=i(zl),kx=n(zl,"UL",{});var gWe=s(kx);G4=n(gWe,"LI",{});var GDe=s(G4);dMe=n(GDe,"STRONG",{});var DBt=s(dMe);gkr=r(DBt,"bert"),DBt.forEach(t),hkr=r(GDe," \u2014 "),$K=n(GDe,"A",{href:!0});var GBt=s($K);pkr=r(GBt,"TFBertForNextSentencePrediction"),GBt.forEach(t),_kr=r(GDe," (BERT model)"),GDe.forEach(t),ukr=i(gWe),O4=n(gWe,"LI",{});var ODe=s(O4);cMe=n(ODe,"STRONG",{});var OBt=s(cMe);bkr=r(OBt,"mobilebert"),OBt.forEach(t),vkr=r(ODe," \u2014 "),kK=n(ODe,"A",{href:!0});var VBt=s(kK);Fkr=r(VBt,"TFMobileBertForNextSentencePrediction"),VBt.forEach(t),Tkr=r(ODe," (MobileBERT model)"),ODe.forEach(t),gWe.forEach(t),Mkr=i(zl),T(V4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),nze=i(f),Sc=n(f,"H2",{class:!0});var hWe=s(Sc);X4=n(hWe,"A",{id:!0,class:!0,href:!0});var XBt=s(X4);fMe=n(XBt,"SPAN",{});var zBt=s(fMe);T(Sx.$$.fragment,zBt),zBt.forEach(t),XBt.forEach(t),Ekr=i(hWe),mMe=n(hWe,"SPAN",{});var QBt=s(mMe);Ckr=r(QBt,"TFAutoModelForTableQuestionAnswering"),QBt.forEach(t),hWe.forEach(t),sze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Rx.$$.fragment,Ql),wkr=i(Ql),Rc=n(Ql,"P",{});var Pte=s(Rc);Akr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SK=n(Pte,"A",{href:!0});var WBt=s(SK);Lkr=r(WBt,"from_pretrained()"),WBt.forEach(t),ykr=r(Pte," class method or the "),RK=n(Pte,"A",{href:!0});var HBt=s(RK);xkr=r(HBt,"from_config()"),HBt.forEach(t),$kr=r(Pte,` class
method.`),Pte.forEach(t),kkr=i(Ql),Px=n(Ql,"P",{});var pWe=s(Px);Skr=r(pWe,"This class cannot be instantiated directly using "),gMe=n(pWe,"CODE",{});var UBt=s(gMe);Rkr=r(UBt,"__init__()"),UBt.forEach(t),Pkr=r(pWe," (throws an error)."),pWe.forEach(t),Bkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var _A=s(Gt);T(Bx.$$.fragment,_A),Ikr=i(_A),hMe=n(_A,"P",{});var JBt=s(hMe);Nkr=r(JBt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JBt.forEach(t),qkr=i(_A),Pc=n(_A,"P",{});var Bte=s(Pc);jkr=r(Bte,`Note:
Loading a model from its configuration file does `),pMe=n(Bte,"STRONG",{});var YBt=s(pMe);Dkr=r(YBt,"not"),YBt.forEach(t),Gkr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(Bte,"A",{href:!0});var KBt=s(PK);Okr=r(KBt,"from_pretrained()"),KBt.forEach(t),Vkr=r(Bte," to load the model weights."),Bte.forEach(t),Xkr=i(_A),T(z4.$$.fragment,_A),_A.forEach(t),zkr=i(Ql),Nr=n(Ql,"DIV",{class:!0});var Wl=s(Nr);T(Ix.$$.fragment,Wl),Qkr=i(Wl),_Me=n(Wl,"P",{});var ZBt=s(_Me);Wkr=r(ZBt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZBt.forEach(t),Hkr=i(Wl),pn=n(Wl,"P",{});var uA=s(pn);Ukr=r(uA,"The model class to instantiate is selected based on the "),uMe=n(uA,"CODE",{});var eIt=s(uMe);Jkr=r(eIt,"model_type"),eIt.forEach(t),Ykr=r(uA,` property of the config object (either
passed as an argument or loaded from `),bMe=n(uA,"CODE",{});var oIt=s(bMe);Kkr=r(oIt,"pretrained_model_name_or_path"),oIt.forEach(t),Zkr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(uA,"CODE",{});var rIt=s(vMe);eSr=r(rIt,"pretrained_model_name_or_path"),rIt.forEach(t),oSr=r(uA,":"),uA.forEach(t),rSr=i(Wl),FMe=n(Wl,"UL",{});var tIt=s(FMe);Q4=n(tIt,"LI",{});var VDe=s(Q4);TMe=n(VDe,"STRONG",{});var aIt=s(TMe);tSr=r(aIt,"tapas"),aIt.forEach(t),aSr=r(VDe," \u2014 "),BK=n(VDe,"A",{href:!0});var nIt=s(BK);nSr=r(nIt,"TFTapasForQuestionAnswering"),nIt.forEach(t),sSr=r(VDe," (TAPAS model)"),VDe.forEach(t),tIt.forEach(t),lSr=i(Wl),T(W4.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),lze=i(f),Bc=n(f,"H2",{class:!0});var _We=s(Bc);H4=n(_We,"A",{id:!0,class:!0,href:!0});var sIt=s(H4);MMe=n(sIt,"SPAN",{});var lIt=s(MMe);T(Nx.$$.fragment,lIt),lIt.forEach(t),sIt.forEach(t),iSr=i(_We),EMe=n(_We,"SPAN",{});var iIt=s(EMe);dSr=r(iIt,"TFAutoModelForTokenClassification"),iIt.forEach(t),_We.forEach(t),ize=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(qx.$$.fragment,Hl),cSr=i(Hl),Ic=n(Hl,"P",{});var Ite=s(Ic);fSr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IK=n(Ite,"A",{href:!0});var dIt=s(IK);mSr=r(dIt,"from_pretrained()"),dIt.forEach(t),gSr=r(Ite," class method or the "),NK=n(Ite,"A",{href:!0});var cIt=s(NK);hSr=r(cIt,"from_config()"),cIt.forEach(t),pSr=r(Ite,` class
method.`),Ite.forEach(t),_Sr=i(Hl),jx=n(Hl,"P",{});var uWe=s(jx);uSr=r(uWe,"This class cannot be instantiated directly using "),CMe=n(uWe,"CODE",{});var fIt=s(CMe);bSr=r(fIt,"__init__()"),fIt.forEach(t),vSr=r(uWe," (throws an error)."),uWe.forEach(t),FSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var bA=s(Ot);T(Dx.$$.fragment,bA),TSr=i(bA),wMe=n(bA,"P",{});var mIt=s(wMe);MSr=r(mIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mIt.forEach(t),ESr=i(bA),Nc=n(bA,"P",{});var Nte=s(Nc);CSr=r(Nte,`Note:
Loading a model from its configuration file does `),AMe=n(Nte,"STRONG",{});var gIt=s(AMe);wSr=r(gIt,"not"),gIt.forEach(t),ASr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Nte,"A",{href:!0});var hIt=s(qK);LSr=r(hIt,"from_pretrained()"),hIt.forEach(t),ySr=r(Nte," to load the model weights."),Nte.forEach(t),xSr=i(bA),T(U4.$$.fragment,bA),bA.forEach(t),$Sr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Gx.$$.fragment,Ul),kSr=i(Ul),LMe=n(Ul,"P",{});var pIt=s(LMe);SSr=r(pIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pIt.forEach(t),RSr=i(Ul),_n=n(Ul,"P",{});var vA=s(_n);PSr=r(vA,"The model class to instantiate is selected based on the "),yMe=n(vA,"CODE",{});var _It=s(yMe);BSr=r(_It,"model_type"),_It.forEach(t),ISr=r(vA,` property of the config object (either
passed as an argument or loaded from `),xMe=n(vA,"CODE",{});var uIt=s(xMe);NSr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),qSr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=n(vA,"CODE",{});var bIt=s($Me);jSr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),DSr=r(vA,":"),vA.forEach(t),GSr=i(Ul),de=n(Ul,"UL",{});var me=s(de);J4=n(me,"LI",{});var XDe=s(J4);kMe=n(XDe,"STRONG",{});var vIt=s(kMe);OSr=r(vIt,"albert"),vIt.forEach(t),VSr=r(XDe," \u2014 "),jK=n(XDe,"A",{href:!0});var FIt=s(jK);XSr=r(FIt,"TFAlbertForTokenClassification"),FIt.forEach(t),zSr=r(XDe," (ALBERT model)"),XDe.forEach(t),QSr=i(me),Y4=n(me,"LI",{});var zDe=s(Y4);SMe=n(zDe,"STRONG",{});var TIt=s(SMe);WSr=r(TIt,"bert"),TIt.forEach(t),HSr=r(zDe," \u2014 "),DK=n(zDe,"A",{href:!0});var MIt=s(DK);USr=r(MIt,"TFBertForTokenClassification"),MIt.forEach(t),JSr=r(zDe," (BERT model)"),zDe.forEach(t),YSr=i(me),K4=n(me,"LI",{});var QDe=s(K4);RMe=n(QDe,"STRONG",{});var EIt=s(RMe);KSr=r(EIt,"camembert"),EIt.forEach(t),ZSr=r(QDe," \u2014 "),GK=n(QDe,"A",{href:!0});var CIt=s(GK);eRr=r(CIt,"TFCamembertForTokenClassification"),CIt.forEach(t),oRr=r(QDe," (CamemBERT model)"),QDe.forEach(t),rRr=i(me),Z4=n(me,"LI",{});var WDe=s(Z4);PMe=n(WDe,"STRONG",{});var wIt=s(PMe);tRr=r(wIt,"convbert"),wIt.forEach(t),aRr=r(WDe," \u2014 "),OK=n(WDe,"A",{href:!0});var AIt=s(OK);nRr=r(AIt,"TFConvBertForTokenClassification"),AIt.forEach(t),sRr=r(WDe," (ConvBERT model)"),WDe.forEach(t),lRr=i(me),eE=n(me,"LI",{});var HDe=s(eE);BMe=n(HDe,"STRONG",{});var LIt=s(BMe);iRr=r(LIt,"deberta"),LIt.forEach(t),dRr=r(HDe," \u2014 "),VK=n(HDe,"A",{href:!0});var yIt=s(VK);cRr=r(yIt,"TFDebertaForTokenClassification"),yIt.forEach(t),fRr=r(HDe," (DeBERTa model)"),HDe.forEach(t),mRr=i(me),oE=n(me,"LI",{});var UDe=s(oE);IMe=n(UDe,"STRONG",{});var xIt=s(IMe);gRr=r(xIt,"deberta-v2"),xIt.forEach(t),hRr=r(UDe," \u2014 "),XK=n(UDe,"A",{href:!0});var $It=s(XK);pRr=r($It,"TFDebertaV2ForTokenClassification"),$It.forEach(t),_Rr=r(UDe," (DeBERTa-v2 model)"),UDe.forEach(t),uRr=i(me),rE=n(me,"LI",{});var JDe=s(rE);NMe=n(JDe,"STRONG",{});var kIt=s(NMe);bRr=r(kIt,"distilbert"),kIt.forEach(t),vRr=r(JDe," \u2014 "),zK=n(JDe,"A",{href:!0});var SIt=s(zK);FRr=r(SIt,"TFDistilBertForTokenClassification"),SIt.forEach(t),TRr=r(JDe," (DistilBERT model)"),JDe.forEach(t),MRr=i(me),tE=n(me,"LI",{});var YDe=s(tE);qMe=n(YDe,"STRONG",{});var RIt=s(qMe);ERr=r(RIt,"electra"),RIt.forEach(t),CRr=r(YDe," \u2014 "),QK=n(YDe,"A",{href:!0});var PIt=s(QK);wRr=r(PIt,"TFElectraForTokenClassification"),PIt.forEach(t),ARr=r(YDe," (ELECTRA model)"),YDe.forEach(t),LRr=i(me),aE=n(me,"LI",{});var KDe=s(aE);jMe=n(KDe,"STRONG",{});var BIt=s(jMe);yRr=r(BIt,"flaubert"),BIt.forEach(t),xRr=r(KDe," \u2014 "),WK=n(KDe,"A",{href:!0});var IIt=s(WK);$Rr=r(IIt,"TFFlaubertForTokenClassification"),IIt.forEach(t),kRr=r(KDe," (FlauBERT model)"),KDe.forEach(t),SRr=i(me),nE=n(me,"LI",{});var ZDe=s(nE);DMe=n(ZDe,"STRONG",{});var NIt=s(DMe);RRr=r(NIt,"funnel"),NIt.forEach(t),PRr=r(ZDe," \u2014 "),HK=n(ZDe,"A",{href:!0});var qIt=s(HK);BRr=r(qIt,"TFFunnelForTokenClassification"),qIt.forEach(t),IRr=r(ZDe," (Funnel Transformer model)"),ZDe.forEach(t),NRr=i(me),sE=n(me,"LI",{});var eGe=s(sE);GMe=n(eGe,"STRONG",{});var jIt=s(GMe);qRr=r(jIt,"layoutlm"),jIt.forEach(t),jRr=r(eGe," \u2014 "),UK=n(eGe,"A",{href:!0});var DIt=s(UK);DRr=r(DIt,"TFLayoutLMForTokenClassification"),DIt.forEach(t),GRr=r(eGe," (LayoutLM model)"),eGe.forEach(t),ORr=i(me),lE=n(me,"LI",{});var oGe=s(lE);OMe=n(oGe,"STRONG",{});var GIt=s(OMe);VRr=r(GIt,"longformer"),GIt.forEach(t),XRr=r(oGe," \u2014 "),JK=n(oGe,"A",{href:!0});var OIt=s(JK);zRr=r(OIt,"TFLongformerForTokenClassification"),OIt.forEach(t),QRr=r(oGe," (Longformer model)"),oGe.forEach(t),WRr=i(me),iE=n(me,"LI",{});var rGe=s(iE);VMe=n(rGe,"STRONG",{});var VIt=s(VMe);HRr=r(VIt,"mobilebert"),VIt.forEach(t),URr=r(rGe," \u2014 "),YK=n(rGe,"A",{href:!0});var XIt=s(YK);JRr=r(XIt,"TFMobileBertForTokenClassification"),XIt.forEach(t),YRr=r(rGe," (MobileBERT model)"),rGe.forEach(t),KRr=i(me),dE=n(me,"LI",{});var tGe=s(dE);XMe=n(tGe,"STRONG",{});var zIt=s(XMe);ZRr=r(zIt,"mpnet"),zIt.forEach(t),ePr=r(tGe," \u2014 "),KK=n(tGe,"A",{href:!0});var QIt=s(KK);oPr=r(QIt,"TFMPNetForTokenClassification"),QIt.forEach(t),rPr=r(tGe," (MPNet model)"),tGe.forEach(t),tPr=i(me),cE=n(me,"LI",{});var aGe=s(cE);zMe=n(aGe,"STRONG",{});var WIt=s(zMe);aPr=r(WIt,"rembert"),WIt.forEach(t),nPr=r(aGe," \u2014 "),ZK=n(aGe,"A",{href:!0});var HIt=s(ZK);sPr=r(HIt,"TFRemBertForTokenClassification"),HIt.forEach(t),lPr=r(aGe," (RemBERT model)"),aGe.forEach(t),iPr=i(me),fE=n(me,"LI",{});var nGe=s(fE);QMe=n(nGe,"STRONG",{});var UIt=s(QMe);dPr=r(UIt,"roberta"),UIt.forEach(t),cPr=r(nGe," \u2014 "),eZ=n(nGe,"A",{href:!0});var JIt=s(eZ);fPr=r(JIt,"TFRobertaForTokenClassification"),JIt.forEach(t),mPr=r(nGe," (RoBERTa model)"),nGe.forEach(t),gPr=i(me),mE=n(me,"LI",{});var sGe=s(mE);WMe=n(sGe,"STRONG",{});var YIt=s(WMe);hPr=r(YIt,"roformer"),YIt.forEach(t),pPr=r(sGe," \u2014 "),oZ=n(sGe,"A",{href:!0});var KIt=s(oZ);_Pr=r(KIt,"TFRoFormerForTokenClassification"),KIt.forEach(t),uPr=r(sGe," (RoFormer model)"),sGe.forEach(t),bPr=i(me),gE=n(me,"LI",{});var lGe=s(gE);HMe=n(lGe,"STRONG",{});var ZIt=s(HMe);vPr=r(ZIt,"xlm"),ZIt.forEach(t),FPr=r(lGe," \u2014 "),rZ=n(lGe,"A",{href:!0});var eNt=s(rZ);TPr=r(eNt,"TFXLMForTokenClassification"),eNt.forEach(t),MPr=r(lGe," (XLM model)"),lGe.forEach(t),EPr=i(me),hE=n(me,"LI",{});var iGe=s(hE);UMe=n(iGe,"STRONG",{});var oNt=s(UMe);CPr=r(oNt,"xlm-roberta"),oNt.forEach(t),wPr=r(iGe," \u2014 "),tZ=n(iGe,"A",{href:!0});var rNt=s(tZ);APr=r(rNt,"TFXLMRobertaForTokenClassification"),rNt.forEach(t),LPr=r(iGe," (XLM-RoBERTa model)"),iGe.forEach(t),yPr=i(me),pE=n(me,"LI",{});var dGe=s(pE);JMe=n(dGe,"STRONG",{});var tNt=s(JMe);xPr=r(tNt,"xlnet"),tNt.forEach(t),$Pr=r(dGe," \u2014 "),aZ=n(dGe,"A",{href:!0});var aNt=s(aZ);kPr=r(aNt,"TFXLNetForTokenClassification"),aNt.forEach(t),SPr=r(dGe," (XLNet model)"),dGe.forEach(t),me.forEach(t),RPr=i(Ul),T(_E.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),dze=i(f),qc=n(f,"H2",{class:!0});var bWe=s(qc);uE=n(bWe,"A",{id:!0,class:!0,href:!0});var nNt=s(uE);YMe=n(nNt,"SPAN",{});var sNt=s(YMe);T(Ox.$$.fragment,sNt),sNt.forEach(t),nNt.forEach(t),PPr=i(bWe),KMe=n(bWe,"SPAN",{});var lNt=s(KMe);BPr=r(lNt,"TFAutoModelForQuestionAnswering"),lNt.forEach(t),bWe.forEach(t),cze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Vx.$$.fragment,Jl),IPr=i(Jl),jc=n(Jl,"P",{});var qte=s(jc);NPr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nZ=n(qte,"A",{href:!0});var iNt=s(nZ);qPr=r(iNt,"from_pretrained()"),iNt.forEach(t),jPr=r(qte," class method or the "),sZ=n(qte,"A",{href:!0});var dNt=s(sZ);DPr=r(dNt,"from_config()"),dNt.forEach(t),GPr=r(qte,` class
method.`),qte.forEach(t),OPr=i(Jl),Xx=n(Jl,"P",{});var vWe=s(Xx);VPr=r(vWe,"This class cannot be instantiated directly using "),ZMe=n(vWe,"CODE",{});var cNt=s(ZMe);XPr=r(cNt,"__init__()"),cNt.forEach(t),zPr=r(vWe," (throws an error)."),vWe.forEach(t),QPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var FA=s(Vt);T(zx.$$.fragment,FA),WPr=i(FA),e4e=n(FA,"P",{});var fNt=s(e4e);HPr=r(fNt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fNt.forEach(t),UPr=i(FA),Dc=n(FA,"P",{});var jte=s(Dc);JPr=r(jte,`Note:
Loading a model from its configuration file does `),o4e=n(jte,"STRONG",{});var mNt=s(o4e);YPr=r(mNt,"not"),mNt.forEach(t),KPr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(jte,"A",{href:!0});var gNt=s(lZ);ZPr=r(gNt,"from_pretrained()"),gNt.forEach(t),eBr=r(jte," to load the model weights."),jte.forEach(t),oBr=i(FA),T(bE.$$.fragment,FA),FA.forEach(t),rBr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Qx.$$.fragment,Yl),tBr=i(Yl),r4e=n(Yl,"P",{});var hNt=s(r4e);aBr=r(hNt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hNt.forEach(t),nBr=i(Yl),un=n(Yl,"P",{});var TA=s(un);sBr=r(TA,"The model class to instantiate is selected based on the "),t4e=n(TA,"CODE",{});var pNt=s(t4e);lBr=r(pNt,"model_type"),pNt.forEach(t),iBr=r(TA,` property of the config object (either
passed as an argument or loaded from `),a4e=n(TA,"CODE",{});var _Nt=s(a4e);dBr=r(_Nt,"pretrained_model_name_or_path"),_Nt.forEach(t),cBr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(TA,"CODE",{});var uNt=s(n4e);fBr=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),mBr=r(TA,":"),TA.forEach(t),gBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);vE=n(ge,"LI",{});var cGe=s(vE);s4e=n(cGe,"STRONG",{});var bNt=s(s4e);hBr=r(bNt,"albert"),bNt.forEach(t),pBr=r(cGe," \u2014 "),iZ=n(cGe,"A",{href:!0});var vNt=s(iZ);_Br=r(vNt,"TFAlbertForQuestionAnswering"),vNt.forEach(t),uBr=r(cGe," (ALBERT model)"),cGe.forEach(t),bBr=i(ge),FE=n(ge,"LI",{});var fGe=s(FE);l4e=n(fGe,"STRONG",{});var FNt=s(l4e);vBr=r(FNt,"bert"),FNt.forEach(t),FBr=r(fGe," \u2014 "),dZ=n(fGe,"A",{href:!0});var TNt=s(dZ);TBr=r(TNt,"TFBertForQuestionAnswering"),TNt.forEach(t),MBr=r(fGe," (BERT model)"),fGe.forEach(t),EBr=i(ge),TE=n(ge,"LI",{});var mGe=s(TE);i4e=n(mGe,"STRONG",{});var MNt=s(i4e);CBr=r(MNt,"camembert"),MNt.forEach(t),wBr=r(mGe," \u2014 "),cZ=n(mGe,"A",{href:!0});var ENt=s(cZ);ABr=r(ENt,"TFCamembertForQuestionAnswering"),ENt.forEach(t),LBr=r(mGe," (CamemBERT model)"),mGe.forEach(t),yBr=i(ge),ME=n(ge,"LI",{});var gGe=s(ME);d4e=n(gGe,"STRONG",{});var CNt=s(d4e);xBr=r(CNt,"convbert"),CNt.forEach(t),$Br=r(gGe," \u2014 "),fZ=n(gGe,"A",{href:!0});var wNt=s(fZ);kBr=r(wNt,"TFConvBertForQuestionAnswering"),wNt.forEach(t),SBr=r(gGe," (ConvBERT model)"),gGe.forEach(t),RBr=i(ge),EE=n(ge,"LI",{});var hGe=s(EE);c4e=n(hGe,"STRONG",{});var ANt=s(c4e);PBr=r(ANt,"deberta"),ANt.forEach(t),BBr=r(hGe," \u2014 "),mZ=n(hGe,"A",{href:!0});var LNt=s(mZ);IBr=r(LNt,"TFDebertaForQuestionAnswering"),LNt.forEach(t),NBr=r(hGe," (DeBERTa model)"),hGe.forEach(t),qBr=i(ge),CE=n(ge,"LI",{});var pGe=s(CE);f4e=n(pGe,"STRONG",{});var yNt=s(f4e);jBr=r(yNt,"deberta-v2"),yNt.forEach(t),DBr=r(pGe," \u2014 "),gZ=n(pGe,"A",{href:!0});var xNt=s(gZ);GBr=r(xNt,"TFDebertaV2ForQuestionAnswering"),xNt.forEach(t),OBr=r(pGe," (DeBERTa-v2 model)"),pGe.forEach(t),VBr=i(ge),wE=n(ge,"LI",{});var _Ge=s(wE);m4e=n(_Ge,"STRONG",{});var $Nt=s(m4e);XBr=r($Nt,"distilbert"),$Nt.forEach(t),zBr=r(_Ge," \u2014 "),hZ=n(_Ge,"A",{href:!0});var kNt=s(hZ);QBr=r(kNt,"TFDistilBertForQuestionAnswering"),kNt.forEach(t),WBr=r(_Ge," (DistilBERT model)"),_Ge.forEach(t),HBr=i(ge),AE=n(ge,"LI",{});var uGe=s(AE);g4e=n(uGe,"STRONG",{});var SNt=s(g4e);UBr=r(SNt,"electra"),SNt.forEach(t),JBr=r(uGe," \u2014 "),pZ=n(uGe,"A",{href:!0});var RNt=s(pZ);YBr=r(RNt,"TFElectraForQuestionAnswering"),RNt.forEach(t),KBr=r(uGe," (ELECTRA model)"),uGe.forEach(t),ZBr=i(ge),LE=n(ge,"LI",{});var bGe=s(LE);h4e=n(bGe,"STRONG",{});var PNt=s(h4e);eIr=r(PNt,"flaubert"),PNt.forEach(t),oIr=r(bGe," \u2014 "),_Z=n(bGe,"A",{href:!0});var BNt=s(_Z);rIr=r(BNt,"TFFlaubertForQuestionAnsweringSimple"),BNt.forEach(t),tIr=r(bGe," (FlauBERT model)"),bGe.forEach(t),aIr=i(ge),yE=n(ge,"LI",{});var vGe=s(yE);p4e=n(vGe,"STRONG",{});var INt=s(p4e);nIr=r(INt,"funnel"),INt.forEach(t),sIr=r(vGe," \u2014 "),uZ=n(vGe,"A",{href:!0});var NNt=s(uZ);lIr=r(NNt,"TFFunnelForQuestionAnswering"),NNt.forEach(t),iIr=r(vGe," (Funnel Transformer model)"),vGe.forEach(t),dIr=i(ge),xE=n(ge,"LI",{});var FGe=s(xE);_4e=n(FGe,"STRONG",{});var qNt=s(_4e);cIr=r(qNt,"gptj"),qNt.forEach(t),fIr=r(FGe," \u2014 "),bZ=n(FGe,"A",{href:!0});var jNt=s(bZ);mIr=r(jNt,"TFGPTJForQuestionAnswering"),jNt.forEach(t),gIr=r(FGe," (GPT-J model)"),FGe.forEach(t),hIr=i(ge),$E=n(ge,"LI",{});var TGe=s($E);u4e=n(TGe,"STRONG",{});var DNt=s(u4e);pIr=r(DNt,"longformer"),DNt.forEach(t),_Ir=r(TGe," \u2014 "),vZ=n(TGe,"A",{href:!0});var GNt=s(vZ);uIr=r(GNt,"TFLongformerForQuestionAnswering"),GNt.forEach(t),bIr=r(TGe," (Longformer model)"),TGe.forEach(t),vIr=i(ge),kE=n(ge,"LI",{});var MGe=s(kE);b4e=n(MGe,"STRONG",{});var ONt=s(b4e);FIr=r(ONt,"mobilebert"),ONt.forEach(t),TIr=r(MGe," \u2014 "),FZ=n(MGe,"A",{href:!0});var VNt=s(FZ);MIr=r(VNt,"TFMobileBertForQuestionAnswering"),VNt.forEach(t),EIr=r(MGe," (MobileBERT model)"),MGe.forEach(t),CIr=i(ge),SE=n(ge,"LI",{});var EGe=s(SE);v4e=n(EGe,"STRONG",{});var XNt=s(v4e);wIr=r(XNt,"mpnet"),XNt.forEach(t),AIr=r(EGe," \u2014 "),TZ=n(EGe,"A",{href:!0});var zNt=s(TZ);LIr=r(zNt,"TFMPNetForQuestionAnswering"),zNt.forEach(t),yIr=r(EGe," (MPNet model)"),EGe.forEach(t),xIr=i(ge),RE=n(ge,"LI",{});var CGe=s(RE);F4e=n(CGe,"STRONG",{});var QNt=s(F4e);$Ir=r(QNt,"rembert"),QNt.forEach(t),kIr=r(CGe," \u2014 "),MZ=n(CGe,"A",{href:!0});var WNt=s(MZ);SIr=r(WNt,"TFRemBertForQuestionAnswering"),WNt.forEach(t),RIr=r(CGe," (RemBERT model)"),CGe.forEach(t),PIr=i(ge),PE=n(ge,"LI",{});var wGe=s(PE);T4e=n(wGe,"STRONG",{});var HNt=s(T4e);BIr=r(HNt,"roberta"),HNt.forEach(t),IIr=r(wGe," \u2014 "),EZ=n(wGe,"A",{href:!0});var UNt=s(EZ);NIr=r(UNt,"TFRobertaForQuestionAnswering"),UNt.forEach(t),qIr=r(wGe," (RoBERTa model)"),wGe.forEach(t),jIr=i(ge),BE=n(ge,"LI",{});var AGe=s(BE);M4e=n(AGe,"STRONG",{});var JNt=s(M4e);DIr=r(JNt,"roformer"),JNt.forEach(t),GIr=r(AGe," \u2014 "),CZ=n(AGe,"A",{href:!0});var YNt=s(CZ);OIr=r(YNt,"TFRoFormerForQuestionAnswering"),YNt.forEach(t),VIr=r(AGe," (RoFormer model)"),AGe.forEach(t),XIr=i(ge),IE=n(ge,"LI",{});var LGe=s(IE);E4e=n(LGe,"STRONG",{});var KNt=s(E4e);zIr=r(KNt,"xlm"),KNt.forEach(t),QIr=r(LGe," \u2014 "),wZ=n(LGe,"A",{href:!0});var ZNt=s(wZ);WIr=r(ZNt,"TFXLMForQuestionAnsweringSimple"),ZNt.forEach(t),HIr=r(LGe," (XLM model)"),LGe.forEach(t),UIr=i(ge),NE=n(ge,"LI",{});var yGe=s(NE);C4e=n(yGe,"STRONG",{});var eqt=s(C4e);JIr=r(eqt,"xlm-roberta"),eqt.forEach(t),YIr=r(yGe," \u2014 "),AZ=n(yGe,"A",{href:!0});var oqt=s(AZ);KIr=r(oqt,"TFXLMRobertaForQuestionAnswering"),oqt.forEach(t),ZIr=r(yGe," (XLM-RoBERTa model)"),yGe.forEach(t),eNr=i(ge),qE=n(ge,"LI",{});var xGe=s(qE);w4e=n(xGe,"STRONG",{});var rqt=s(w4e);oNr=r(rqt,"xlnet"),rqt.forEach(t),rNr=r(xGe," \u2014 "),LZ=n(xGe,"A",{href:!0});var tqt=s(LZ);tNr=r(tqt,"TFXLNetForQuestionAnsweringSimple"),tqt.forEach(t),aNr=r(xGe," (XLNet model)"),xGe.forEach(t),ge.forEach(t),nNr=i(Yl),T(jE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),fze=i(f),Gc=n(f,"H2",{class:!0});var FWe=s(Gc);DE=n(FWe,"A",{id:!0,class:!0,href:!0});var aqt=s(DE);A4e=n(aqt,"SPAN",{});var nqt=s(A4e);T(Wx.$$.fragment,nqt),nqt.forEach(t),aqt.forEach(t),sNr=i(FWe),L4e=n(FWe,"SPAN",{});var sqt=s(L4e);lNr=r(sqt,"TFAutoModelForVision2Seq"),sqt.forEach(t),FWe.forEach(t),mze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Hx.$$.fragment,Kl),iNr=i(Kl),Oc=n(Kl,"P",{});var Dte=s(Oc);dNr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yZ=n(Dte,"A",{href:!0});var lqt=s(yZ);cNr=r(lqt,"from_pretrained()"),lqt.forEach(t),fNr=r(Dte," class method or the "),xZ=n(Dte,"A",{href:!0});var iqt=s(xZ);mNr=r(iqt,"from_config()"),iqt.forEach(t),gNr=r(Dte,` class
method.`),Dte.forEach(t),hNr=i(Kl),Ux=n(Kl,"P",{});var TWe=s(Ux);pNr=r(TWe,"This class cannot be instantiated directly using "),y4e=n(TWe,"CODE",{});var dqt=s(y4e);_Nr=r(dqt,"__init__()"),dqt.forEach(t),uNr=r(TWe," (throws an error)."),TWe.forEach(t),bNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var MA=s(Xt);T(Jx.$$.fragment,MA),vNr=i(MA),x4e=n(MA,"P",{});var cqt=s(x4e);FNr=r(cqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cqt.forEach(t),TNr=i(MA),Vc=n(MA,"P",{});var Gte=s(Vc);MNr=r(Gte,`Note:
Loading a model from its configuration file does `),$4e=n(Gte,"STRONG",{});var fqt=s($4e);ENr=r(fqt,"not"),fqt.forEach(t),CNr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Gte,"A",{href:!0});var mqt=s($Z);wNr=r(mqt,"from_pretrained()"),mqt.forEach(t),ANr=r(Gte," to load the model weights."),Gte.forEach(t),LNr=i(MA),T(GE.$$.fragment,MA),MA.forEach(t),yNr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(Yx.$$.fragment,Zl),xNr=i(Zl),k4e=n(Zl,"P",{});var gqt=s(k4e);$Nr=r(gqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gqt.forEach(t),kNr=i(Zl),bn=n(Zl,"P",{});var EA=s(bn);SNr=r(EA,"The model class to instantiate is selected based on the "),S4e=n(EA,"CODE",{});var hqt=s(S4e);RNr=r(hqt,"model_type"),hqt.forEach(t),PNr=r(EA,` property of the config object (either
passed as an argument or loaded from `),R4e=n(EA,"CODE",{});var pqt=s(R4e);BNr=r(pqt,"pretrained_model_name_or_path"),pqt.forEach(t),INr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(EA,"CODE",{});var _qt=s(P4e);NNr=r(_qt,"pretrained_model_name_or_path"),_qt.forEach(t),qNr=r(EA,":"),EA.forEach(t),jNr=i(Zl),B4e=n(Zl,"UL",{});var uqt=s(B4e);OE=n(uqt,"LI",{});var $Ge=s(OE);I4e=n($Ge,"STRONG",{});var bqt=s(I4e);DNr=r(bqt,"vision-encoder-decoder"),bqt.forEach(t),GNr=r($Ge," \u2014 "),kZ=n($Ge,"A",{href:!0});var vqt=s(kZ);ONr=r(vqt,"TFVisionEncoderDecoderModel"),vqt.forEach(t),VNr=r($Ge," (Vision Encoder decoder model)"),$Ge.forEach(t),uqt.forEach(t),XNr=i(Zl),T(VE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),gze=i(f),Xc=n(f,"H2",{class:!0});var MWe=s(Xc);XE=n(MWe,"A",{id:!0,class:!0,href:!0});var Fqt=s(XE);N4e=n(Fqt,"SPAN",{});var Tqt=s(N4e);T(Kx.$$.fragment,Tqt),Tqt.forEach(t),Fqt.forEach(t),zNr=i(MWe),q4e=n(MWe,"SPAN",{});var Mqt=s(q4e);QNr=r(Mqt,"TFAutoModelForSpeechSeq2Seq"),Mqt.forEach(t),MWe.forEach(t),hze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(Zx.$$.fragment,ei),WNr=i(ei),zc=n(ei,"P",{});var Ote=s(zc);HNr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SZ=n(Ote,"A",{href:!0});var Eqt=s(SZ);UNr=r(Eqt,"from_pretrained()"),Eqt.forEach(t),JNr=r(Ote," class method or the "),RZ=n(Ote,"A",{href:!0});var Cqt=s(RZ);YNr=r(Cqt,"from_config()"),Cqt.forEach(t),KNr=r(Ote,` class
method.`),Ote.forEach(t),ZNr=i(ei),e$=n(ei,"P",{});var EWe=s(e$);eqr=r(EWe,"This class cannot be instantiated directly using "),j4e=n(EWe,"CODE",{});var wqt=s(j4e);oqr=r(wqt,"__init__()"),wqt.forEach(t),rqr=r(EWe," (throws an error)."),EWe.forEach(t),tqr=i(ei),zt=n(ei,"DIV",{class:!0});var CA=s(zt);T(o$.$$.fragment,CA),aqr=i(CA),D4e=n(CA,"P",{});var Aqt=s(D4e);nqr=r(Aqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Aqt.forEach(t),sqr=i(CA),Qc=n(CA,"P",{});var Vte=s(Qc);lqr=r(Vte,`Note:
Loading a model from its configuration file does `),G4e=n(Vte,"STRONG",{});var Lqt=s(G4e);iqr=r(Lqt,"not"),Lqt.forEach(t),dqr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(Vte,"A",{href:!0});var yqt=s(PZ);cqr=r(yqt,"from_pretrained()"),yqt.forEach(t),fqr=r(Vte," to load the model weights."),Vte.forEach(t),mqr=i(CA),T(zE.$$.fragment,CA),CA.forEach(t),gqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(r$.$$.fragment,oi),hqr=i(oi),O4e=n(oi,"P",{});var xqt=s(O4e);pqr=r(xqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xqt.forEach(t),_qr=i(oi),vn=n(oi,"P",{});var wA=s(vn);uqr=r(wA,"The model class to instantiate is selected based on the "),V4e=n(wA,"CODE",{});var $qt=s(V4e);bqr=r($qt,"model_type"),$qt.forEach(t),vqr=r(wA,` property of the config object (either
passed as an argument or loaded from `),X4e=n(wA,"CODE",{});var kqt=s(X4e);Fqr=r(kqt,"pretrained_model_name_or_path"),kqt.forEach(t),Tqr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(wA,"CODE",{});var Sqt=s(z4e);Mqr=r(Sqt,"pretrained_model_name_or_path"),Sqt.forEach(t),Eqr=r(wA,":"),wA.forEach(t),Cqr=i(oi),Q4e=n(oi,"UL",{});var Rqt=s(Q4e);QE=n(Rqt,"LI",{});var kGe=s(QE);W4e=n(kGe,"STRONG",{});var Pqt=s(W4e);wqr=r(Pqt,"speech_to_text"),Pqt.forEach(t),Aqr=r(kGe," \u2014 "),BZ=n(kGe,"A",{href:!0});var Bqt=s(BZ);Lqr=r(Bqt,"TFSpeech2TextForConditionalGeneration"),Bqt.forEach(t),yqr=r(kGe," (Speech2Text model)"),kGe.forEach(t),Rqt.forEach(t),xqr=i(oi),T(WE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),pze=i(f),Wc=n(f,"H2",{class:!0});var CWe=s(Wc);HE=n(CWe,"A",{id:!0,class:!0,href:!0});var Iqt=s(HE);H4e=n(Iqt,"SPAN",{});var Nqt=s(H4e);T(t$.$$.fragment,Nqt),Nqt.forEach(t),Iqt.forEach(t),$qr=i(CWe),U4e=n(CWe,"SPAN",{});var qqt=s(U4e);kqr=r(qqt,"FlaxAutoModel"),qqt.forEach(t),CWe.forEach(t),_ze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(a$.$$.fragment,ri),Sqr=i(ri),Hc=n(ri,"P",{});var Xte=s(Hc);Rqr=r(Xte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IZ=n(Xte,"A",{href:!0});var jqt=s(IZ);Pqr=r(jqt,"from_pretrained()"),jqt.forEach(t),Bqr=r(Xte," class method or the "),NZ=n(Xte,"A",{href:!0});var Dqt=s(NZ);Iqr=r(Dqt,"from_config()"),Dqt.forEach(t),Nqr=r(Xte,` class
method.`),Xte.forEach(t),qqr=i(ri),n$=n(ri,"P",{});var wWe=s(n$);jqr=r(wWe,"This class cannot be instantiated directly using "),J4e=n(wWe,"CODE",{});var Gqt=s(J4e);Dqr=r(Gqt,"__init__()"),Gqt.forEach(t),Gqr=r(wWe," (throws an error)."),wWe.forEach(t),Oqr=i(ri),Qt=n(ri,"DIV",{class:!0});var AA=s(Qt);T(s$.$$.fragment,AA),Vqr=i(AA),Y4e=n(AA,"P",{});var Oqt=s(Y4e);Xqr=r(Oqt,"Instantiates one of the base model classes of the library from a configuration."),Oqt.forEach(t),zqr=i(AA),Uc=n(AA,"P",{});var zte=s(Uc);Qqr=r(zte,`Note:
Loading a model from its configuration file does `),K4e=n(zte,"STRONG",{});var Vqt=s(K4e);Wqr=r(Vqt,"not"),Vqt.forEach(t),Hqr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(zte,"A",{href:!0});var Xqt=s(qZ);Uqr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),Jqr=r(zte," to load the model weights."),zte.forEach(t),Yqr=i(AA),T(UE.$$.fragment,AA),AA.forEach(t),Kqr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(l$.$$.fragment,ti),Zqr=i(ti),Z4e=n(ti,"P",{});var zqt=s(Z4e);ejr=r(zqt,"Instantiate one of the base model classes of the library from a pretrained model."),zqt.forEach(t),ojr=i(ti),Fn=n(ti,"P",{});var LA=s(Fn);rjr=r(LA,"The model class to instantiate is selected based on the "),eEe=n(LA,"CODE",{});var Qqt=s(eEe);tjr=r(Qqt,"model_type"),Qqt.forEach(t),ajr=r(LA,` property of the config object (either
passed as an argument or loaded from `),oEe=n(LA,"CODE",{});var Wqt=s(oEe);njr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),sjr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(LA,"CODE",{});var Hqt=s(rEe);ljr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),ijr=r(LA,":"),LA.forEach(t),djr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);JE=n(ae,"LI",{});var SGe=s(JE);tEe=n(SGe,"STRONG",{});var Uqt=s(tEe);cjr=r(Uqt,"albert"),Uqt.forEach(t),fjr=r(SGe," \u2014 "),jZ=n(SGe,"A",{href:!0});var Jqt=s(jZ);mjr=r(Jqt,"FlaxAlbertModel"),Jqt.forEach(t),gjr=r(SGe," (ALBERT model)"),SGe.forEach(t),hjr=i(ae),YE=n(ae,"LI",{});var RGe=s(YE);aEe=n(RGe,"STRONG",{});var Yqt=s(aEe);pjr=r(Yqt,"bart"),Yqt.forEach(t),_jr=r(RGe," \u2014 "),DZ=n(RGe,"A",{href:!0});var Kqt=s(DZ);ujr=r(Kqt,"FlaxBartModel"),Kqt.forEach(t),bjr=r(RGe," (BART model)"),RGe.forEach(t),vjr=i(ae),KE=n(ae,"LI",{});var PGe=s(KE);nEe=n(PGe,"STRONG",{});var Zqt=s(nEe);Fjr=r(Zqt,"beit"),Zqt.forEach(t),Tjr=r(PGe," \u2014 "),GZ=n(PGe,"A",{href:!0});var ejt=s(GZ);Mjr=r(ejt,"FlaxBeitModel"),ejt.forEach(t),Ejr=r(PGe," (BEiT model)"),PGe.forEach(t),Cjr=i(ae),ZE=n(ae,"LI",{});var BGe=s(ZE);sEe=n(BGe,"STRONG",{});var ojt=s(sEe);wjr=r(ojt,"bert"),ojt.forEach(t),Ajr=r(BGe," \u2014 "),OZ=n(BGe,"A",{href:!0});var rjt=s(OZ);Ljr=r(rjt,"FlaxBertModel"),rjt.forEach(t),yjr=r(BGe," (BERT model)"),BGe.forEach(t),xjr=i(ae),eC=n(ae,"LI",{});var IGe=s(eC);lEe=n(IGe,"STRONG",{});var tjt=s(lEe);$jr=r(tjt,"big_bird"),tjt.forEach(t),kjr=r(IGe," \u2014 "),VZ=n(IGe,"A",{href:!0});var ajt=s(VZ);Sjr=r(ajt,"FlaxBigBirdModel"),ajt.forEach(t),Rjr=r(IGe," (BigBird model)"),IGe.forEach(t),Pjr=i(ae),oC=n(ae,"LI",{});var NGe=s(oC);iEe=n(NGe,"STRONG",{});var njt=s(iEe);Bjr=r(njt,"blenderbot"),njt.forEach(t),Ijr=r(NGe," \u2014 "),XZ=n(NGe,"A",{href:!0});var sjt=s(XZ);Njr=r(sjt,"FlaxBlenderbotModel"),sjt.forEach(t),qjr=r(NGe," (Blenderbot model)"),NGe.forEach(t),jjr=i(ae),rC=n(ae,"LI",{});var qGe=s(rC);dEe=n(qGe,"STRONG",{});var ljt=s(dEe);Djr=r(ljt,"blenderbot-small"),ljt.forEach(t),Gjr=r(qGe," \u2014 "),zZ=n(qGe,"A",{href:!0});var ijt=s(zZ);Ojr=r(ijt,"FlaxBlenderbotSmallModel"),ijt.forEach(t),Vjr=r(qGe," (BlenderbotSmall model)"),qGe.forEach(t),Xjr=i(ae),tC=n(ae,"LI",{});var jGe=s(tC);cEe=n(jGe,"STRONG",{});var djt=s(cEe);zjr=r(djt,"clip"),djt.forEach(t),Qjr=r(jGe," \u2014 "),QZ=n(jGe,"A",{href:!0});var cjt=s(QZ);Wjr=r(cjt,"FlaxCLIPModel"),cjt.forEach(t),Hjr=r(jGe," (CLIP model)"),jGe.forEach(t),Ujr=i(ae),aC=n(ae,"LI",{});var DGe=s(aC);fEe=n(DGe,"STRONG",{});var fjt=s(fEe);Jjr=r(fjt,"distilbert"),fjt.forEach(t),Yjr=r(DGe," \u2014 "),WZ=n(DGe,"A",{href:!0});var mjt=s(WZ);Kjr=r(mjt,"FlaxDistilBertModel"),mjt.forEach(t),Zjr=r(DGe," (DistilBERT model)"),DGe.forEach(t),eDr=i(ae),nC=n(ae,"LI",{});var GGe=s(nC);mEe=n(GGe,"STRONG",{});var gjt=s(mEe);oDr=r(gjt,"electra"),gjt.forEach(t),rDr=r(GGe," \u2014 "),HZ=n(GGe,"A",{href:!0});var hjt=s(HZ);tDr=r(hjt,"FlaxElectraModel"),hjt.forEach(t),aDr=r(GGe," (ELECTRA model)"),GGe.forEach(t),nDr=i(ae),sC=n(ae,"LI",{});var OGe=s(sC);gEe=n(OGe,"STRONG",{});var pjt=s(gEe);sDr=r(pjt,"gpt2"),pjt.forEach(t),lDr=r(OGe," \u2014 "),UZ=n(OGe,"A",{href:!0});var _jt=s(UZ);iDr=r(_jt,"FlaxGPT2Model"),_jt.forEach(t),dDr=r(OGe," (OpenAI GPT-2 model)"),OGe.forEach(t),cDr=i(ae),lC=n(ae,"LI",{});var VGe=s(lC);hEe=n(VGe,"STRONG",{});var ujt=s(hEe);fDr=r(ujt,"gpt_neo"),ujt.forEach(t),mDr=r(VGe," \u2014 "),JZ=n(VGe,"A",{href:!0});var bjt=s(JZ);gDr=r(bjt,"FlaxGPTNeoModel"),bjt.forEach(t),hDr=r(VGe," (GPT Neo model)"),VGe.forEach(t),pDr=i(ae),iC=n(ae,"LI",{});var XGe=s(iC);pEe=n(XGe,"STRONG",{});var vjt=s(pEe);_Dr=r(vjt,"gptj"),vjt.forEach(t),uDr=r(XGe," \u2014 "),YZ=n(XGe,"A",{href:!0});var Fjt=s(YZ);bDr=r(Fjt,"FlaxGPTJModel"),Fjt.forEach(t),vDr=r(XGe," (GPT-J model)"),XGe.forEach(t),FDr=i(ae),dC=n(ae,"LI",{});var zGe=s(dC);_Ee=n(zGe,"STRONG",{});var Tjt=s(_Ee);TDr=r(Tjt,"longt5"),Tjt.forEach(t),MDr=r(zGe," \u2014 "),KZ=n(zGe,"A",{href:!0});var Mjt=s(KZ);EDr=r(Mjt,"FlaxLongT5Model"),Mjt.forEach(t),CDr=r(zGe," (LongT5 model)"),zGe.forEach(t),wDr=i(ae),cC=n(ae,"LI",{});var QGe=s(cC);uEe=n(QGe,"STRONG",{});var Ejt=s(uEe);ADr=r(Ejt,"marian"),Ejt.forEach(t),LDr=r(QGe," \u2014 "),ZZ=n(QGe,"A",{href:!0});var Cjt=s(ZZ);yDr=r(Cjt,"FlaxMarianModel"),Cjt.forEach(t),xDr=r(QGe," (Marian model)"),QGe.forEach(t),$Dr=i(ae),fC=n(ae,"LI",{});var WGe=s(fC);bEe=n(WGe,"STRONG",{});var wjt=s(bEe);kDr=r(wjt,"mbart"),wjt.forEach(t),SDr=r(WGe," \u2014 "),eee=n(WGe,"A",{href:!0});var Ajt=s(eee);RDr=r(Ajt,"FlaxMBartModel"),Ajt.forEach(t),PDr=r(WGe," (mBART model)"),WGe.forEach(t),BDr=i(ae),mC=n(ae,"LI",{});var HGe=s(mC);vEe=n(HGe,"STRONG",{});var Ljt=s(vEe);IDr=r(Ljt,"mt5"),Ljt.forEach(t),NDr=r(HGe," \u2014 "),oee=n(HGe,"A",{href:!0});var yjt=s(oee);qDr=r(yjt,"FlaxMT5Model"),yjt.forEach(t),jDr=r(HGe," (MT5 model)"),HGe.forEach(t),DDr=i(ae),gC=n(ae,"LI",{});var UGe=s(gC);FEe=n(UGe,"STRONG",{});var xjt=s(FEe);GDr=r(xjt,"opt"),xjt.forEach(t),ODr=r(UGe," \u2014 "),ree=n(UGe,"A",{href:!0});var $jt=s(ree);VDr=r($jt,"FlaxOPTModel"),$jt.forEach(t),XDr=r(UGe," (OPT model)"),UGe.forEach(t),zDr=i(ae),hC=n(ae,"LI",{});var JGe=s(hC);TEe=n(JGe,"STRONG",{});var kjt=s(TEe);QDr=r(kjt,"pegasus"),kjt.forEach(t),WDr=r(JGe," \u2014 "),tee=n(JGe,"A",{href:!0});var Sjt=s(tee);HDr=r(Sjt,"FlaxPegasusModel"),Sjt.forEach(t),UDr=r(JGe," (Pegasus model)"),JGe.forEach(t),JDr=i(ae),pC=n(ae,"LI",{});var YGe=s(pC);MEe=n(YGe,"STRONG",{});var Rjt=s(MEe);YDr=r(Rjt,"roberta"),Rjt.forEach(t),KDr=r(YGe," \u2014 "),aee=n(YGe,"A",{href:!0});var Pjt=s(aee);ZDr=r(Pjt,"FlaxRobertaModel"),Pjt.forEach(t),eGr=r(YGe," (RoBERTa model)"),YGe.forEach(t),oGr=i(ae),_C=n(ae,"LI",{});var KGe=s(_C);EEe=n(KGe,"STRONG",{});var Bjt=s(EEe);rGr=r(Bjt,"roformer"),Bjt.forEach(t),tGr=r(KGe," \u2014 "),nee=n(KGe,"A",{href:!0});var Ijt=s(nee);aGr=r(Ijt,"FlaxRoFormerModel"),Ijt.forEach(t),nGr=r(KGe," (RoFormer model)"),KGe.forEach(t),sGr=i(ae),uC=n(ae,"LI",{});var ZGe=s(uC);CEe=n(ZGe,"STRONG",{});var Njt=s(CEe);lGr=r(Njt,"t5"),Njt.forEach(t),iGr=r(ZGe," \u2014 "),see=n(ZGe,"A",{href:!0});var qjt=s(see);dGr=r(qjt,"FlaxT5Model"),qjt.forEach(t),cGr=r(ZGe," (T5 model)"),ZGe.forEach(t),fGr=i(ae),bC=n(ae,"LI",{});var eOe=s(bC);wEe=n(eOe,"STRONG",{});var jjt=s(wEe);mGr=r(jjt,"vision-text-dual-encoder"),jjt.forEach(t),gGr=r(eOe," \u2014 "),lee=n(eOe,"A",{href:!0});var Djt=s(lee);hGr=r(Djt,"FlaxVisionTextDualEncoderModel"),Djt.forEach(t),pGr=r(eOe," (VisionTextDualEncoder model)"),eOe.forEach(t),_Gr=i(ae),vC=n(ae,"LI",{});var oOe=s(vC);AEe=n(oOe,"STRONG",{});var Gjt=s(AEe);uGr=r(Gjt,"vit"),Gjt.forEach(t),bGr=r(oOe," \u2014 "),iee=n(oOe,"A",{href:!0});var Ojt=s(iee);vGr=r(Ojt,"FlaxViTModel"),Ojt.forEach(t),FGr=r(oOe," (ViT model)"),oOe.forEach(t),TGr=i(ae),FC=n(ae,"LI",{});var rOe=s(FC);LEe=n(rOe,"STRONG",{});var Vjt=s(LEe);MGr=r(Vjt,"wav2vec2"),Vjt.forEach(t),EGr=r(rOe," \u2014 "),dee=n(rOe,"A",{href:!0});var Xjt=s(dee);CGr=r(Xjt,"FlaxWav2Vec2Model"),Xjt.forEach(t),wGr=r(rOe," (Wav2Vec2 model)"),rOe.forEach(t),AGr=i(ae),TC=n(ae,"LI",{});var tOe=s(TC);yEe=n(tOe,"STRONG",{});var zjt=s(yEe);LGr=r(zjt,"xglm"),zjt.forEach(t),yGr=r(tOe," \u2014 "),cee=n(tOe,"A",{href:!0});var Qjt=s(cee);xGr=r(Qjt,"FlaxXGLMModel"),Qjt.forEach(t),$Gr=r(tOe," (XGLM model)"),tOe.forEach(t),kGr=i(ae),MC=n(ae,"LI",{});var aOe=s(MC);xEe=n(aOe,"STRONG",{});var Wjt=s(xEe);SGr=r(Wjt,"xlm-roberta"),Wjt.forEach(t),RGr=r(aOe," \u2014 "),fee=n(aOe,"A",{href:!0});var Hjt=s(fee);PGr=r(Hjt,"FlaxXLMRobertaModel"),Hjt.forEach(t),BGr=r(aOe," (XLM-RoBERTa model)"),aOe.forEach(t),ae.forEach(t),IGr=i(ti),T(EC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),uze=i(f),Jc=n(f,"H2",{class:!0});var AWe=s(Jc);CC=n(AWe,"A",{id:!0,class:!0,href:!0});var Ujt=s(CC);$Ee=n(Ujt,"SPAN",{});var Jjt=s($Ee);T(i$.$$.fragment,Jjt),Jjt.forEach(t),Ujt.forEach(t),NGr=i(AWe),kEe=n(AWe,"SPAN",{});var Yjt=s(kEe);qGr=r(Yjt,"FlaxAutoModelForCausalLM"),Yjt.forEach(t),AWe.forEach(t),bze=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(d$.$$.fragment,ai),jGr=i(ai),Yc=n(ai,"P",{});var Qte=s(Yc);DGr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mee=n(Qte,"A",{href:!0});var Kjt=s(mee);GGr=r(Kjt,"from_pretrained()"),Kjt.forEach(t),OGr=r(Qte," class method or the "),gee=n(Qte,"A",{href:!0});var Zjt=s(gee);VGr=r(Zjt,"from_config()"),Zjt.forEach(t),XGr=r(Qte,` class
method.`),Qte.forEach(t),zGr=i(ai),c$=n(ai,"P",{});var LWe=s(c$);QGr=r(LWe,"This class cannot be instantiated directly using "),SEe=n(LWe,"CODE",{});var eDt=s(SEe);WGr=r(eDt,"__init__()"),eDt.forEach(t),HGr=r(LWe," (throws an error)."),LWe.forEach(t),UGr=i(ai),Wt=n(ai,"DIV",{class:!0});var yA=s(Wt);T(f$.$$.fragment,yA),JGr=i(yA),REe=n(yA,"P",{});var oDt=s(REe);YGr=r(oDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oDt.forEach(t),KGr=i(yA),Kc=n(yA,"P",{});var Wte=s(Kc);ZGr=r(Wte,`Note:
Loading a model from its configuration file does `),PEe=n(Wte,"STRONG",{});var rDt=s(PEe);eOr=r(rDt,"not"),rDt.forEach(t),oOr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hee=n(Wte,"A",{href:!0});var tDt=s(hee);rOr=r(tDt,"from_pretrained()"),tDt.forEach(t),tOr=r(Wte," to load the model weights."),Wte.forEach(t),aOr=i(yA),T(wC.$$.fragment,yA),yA.forEach(t),nOr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(m$.$$.fragment,ni),sOr=i(ni),BEe=n(ni,"P",{});var aDt=s(BEe);lOr=r(aDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aDt.forEach(t),iOr=i(ni),Tn=n(ni,"P",{});var xA=s(Tn);dOr=r(xA,"The model class to instantiate is selected based on the "),IEe=n(xA,"CODE",{});var nDt=s(IEe);cOr=r(nDt,"model_type"),nDt.forEach(t),fOr=r(xA,` property of the config object (either
passed as an argument or loaded from `),NEe=n(xA,"CODE",{});var sDt=s(NEe);mOr=r(sDt,"pretrained_model_name_or_path"),sDt.forEach(t),gOr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(xA,"CODE",{});var lDt=s(qEe);hOr=r(lDt,"pretrained_model_name_or_path"),lDt.forEach(t),pOr=r(xA,":"),xA.forEach(t),_Or=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);AC=n(Ne,"LI",{});var nOe=s(AC);jEe=n(nOe,"STRONG",{});var iDt=s(jEe);uOr=r(iDt,"bart"),iDt.forEach(t),bOr=r(nOe," \u2014 "),pee=n(nOe,"A",{href:!0});var dDt=s(pee);vOr=r(dDt,"FlaxBartForCausalLM"),dDt.forEach(t),FOr=r(nOe," (BART model)"),nOe.forEach(t),TOr=i(Ne),LC=n(Ne,"LI",{});var sOe=s(LC);DEe=n(sOe,"STRONG",{});var cDt=s(DEe);MOr=r(cDt,"bert"),cDt.forEach(t),EOr=r(sOe," \u2014 "),_ee=n(sOe,"A",{href:!0});var fDt=s(_ee);COr=r(fDt,"FlaxBertForCausalLM"),fDt.forEach(t),wOr=r(sOe," (BERT model)"),sOe.forEach(t),AOr=i(Ne),yC=n(Ne,"LI",{});var lOe=s(yC);GEe=n(lOe,"STRONG",{});var mDt=s(GEe);LOr=r(mDt,"big_bird"),mDt.forEach(t),yOr=r(lOe," \u2014 "),uee=n(lOe,"A",{href:!0});var gDt=s(uee);xOr=r(gDt,"FlaxBigBirdForCausalLM"),gDt.forEach(t),$Or=r(lOe," (BigBird model)"),lOe.forEach(t),kOr=i(Ne),xC=n(Ne,"LI",{});var iOe=s(xC);OEe=n(iOe,"STRONG",{});var hDt=s(OEe);SOr=r(hDt,"electra"),hDt.forEach(t),ROr=r(iOe," \u2014 "),bee=n(iOe,"A",{href:!0});var pDt=s(bee);POr=r(pDt,"FlaxElectraForCausalLM"),pDt.forEach(t),BOr=r(iOe," (ELECTRA model)"),iOe.forEach(t),IOr=i(Ne),$C=n(Ne,"LI",{});var dOe=s($C);VEe=n(dOe,"STRONG",{});var _Dt=s(VEe);NOr=r(_Dt,"gpt2"),_Dt.forEach(t),qOr=r(dOe," \u2014 "),vee=n(dOe,"A",{href:!0});var uDt=s(vee);jOr=r(uDt,"FlaxGPT2LMHeadModel"),uDt.forEach(t),DOr=r(dOe," (OpenAI GPT-2 model)"),dOe.forEach(t),GOr=i(Ne),kC=n(Ne,"LI",{});var cOe=s(kC);XEe=n(cOe,"STRONG",{});var bDt=s(XEe);OOr=r(bDt,"gpt_neo"),bDt.forEach(t),VOr=r(cOe," \u2014 "),Fee=n(cOe,"A",{href:!0});var vDt=s(Fee);XOr=r(vDt,"FlaxGPTNeoForCausalLM"),vDt.forEach(t),zOr=r(cOe," (GPT Neo model)"),cOe.forEach(t),QOr=i(Ne),SC=n(Ne,"LI",{});var fOe=s(SC);zEe=n(fOe,"STRONG",{});var FDt=s(zEe);WOr=r(FDt,"gptj"),FDt.forEach(t),HOr=r(fOe," \u2014 "),Tee=n(fOe,"A",{href:!0});var TDt=s(Tee);UOr=r(TDt,"FlaxGPTJForCausalLM"),TDt.forEach(t),JOr=r(fOe," (GPT-J model)"),fOe.forEach(t),YOr=i(Ne),RC=n(Ne,"LI",{});var mOe=s(RC);QEe=n(mOe,"STRONG",{});var MDt=s(QEe);KOr=r(MDt,"opt"),MDt.forEach(t),ZOr=r(mOe," \u2014 "),Mee=n(mOe,"A",{href:!0});var EDt=s(Mee);eVr=r(EDt,"FlaxOPTForCausalLM"),EDt.forEach(t),oVr=r(mOe," (OPT model)"),mOe.forEach(t),rVr=i(Ne),PC=n(Ne,"LI",{});var gOe=s(PC);WEe=n(gOe,"STRONG",{});var CDt=s(WEe);tVr=r(CDt,"roberta"),CDt.forEach(t),aVr=r(gOe," \u2014 "),Eee=n(gOe,"A",{href:!0});var wDt=s(Eee);nVr=r(wDt,"FlaxRobertaForCausalLM"),wDt.forEach(t),sVr=r(gOe," (RoBERTa model)"),gOe.forEach(t),lVr=i(Ne),BC=n(Ne,"LI",{});var hOe=s(BC);HEe=n(hOe,"STRONG",{});var ADt=s(HEe);iVr=r(ADt,"xglm"),ADt.forEach(t),dVr=r(hOe," \u2014 "),Cee=n(hOe,"A",{href:!0});var LDt=s(Cee);cVr=r(LDt,"FlaxXGLMForCausalLM"),LDt.forEach(t),fVr=r(hOe," (XGLM model)"),hOe.forEach(t),Ne.forEach(t),mVr=i(ni),T(IC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),vze=i(f),Zc=n(f,"H2",{class:!0});var yWe=s(Zc);NC=n(yWe,"A",{id:!0,class:!0,href:!0});var yDt=s(NC);UEe=n(yDt,"SPAN",{});var xDt=s(UEe);T(g$.$$.fragment,xDt),xDt.forEach(t),yDt.forEach(t),gVr=i(yWe),JEe=n(yWe,"SPAN",{});var $Dt=s(JEe);hVr=r($Dt,"FlaxAutoModelForPreTraining"),$Dt.forEach(t),yWe.forEach(t),Fze=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(h$.$$.fragment,si),pVr=i(si),ef=n(si,"P",{});var Hte=s(ef);_Vr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wee=n(Hte,"A",{href:!0});var kDt=s(wee);uVr=r(kDt,"from_pretrained()"),kDt.forEach(t),bVr=r(Hte," class method or the "),Aee=n(Hte,"A",{href:!0});var SDt=s(Aee);vVr=r(SDt,"from_config()"),SDt.forEach(t),FVr=r(Hte,` class
method.`),Hte.forEach(t),TVr=i(si),p$=n(si,"P",{});var xWe=s(p$);MVr=r(xWe,"This class cannot be instantiated directly using "),YEe=n(xWe,"CODE",{});var RDt=s(YEe);EVr=r(RDt,"__init__()"),RDt.forEach(t),CVr=r(xWe," (throws an error)."),xWe.forEach(t),wVr=i(si),Ht=n(si,"DIV",{class:!0});var $A=s(Ht);T(_$.$$.fragment,$A),AVr=i($A),KEe=n($A,"P",{});var PDt=s(KEe);LVr=r(PDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PDt.forEach(t),yVr=i($A),of=n($A,"P",{});var Ute=s(of);xVr=r(Ute,`Note:
Loading a model from its configuration file does `),ZEe=n(Ute,"STRONG",{});var BDt=s(ZEe);$Vr=r(BDt,"not"),BDt.forEach(t),kVr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(Ute,"A",{href:!0});var IDt=s(Lee);SVr=r(IDt,"from_pretrained()"),IDt.forEach(t),RVr=r(Ute," to load the model weights."),Ute.forEach(t),PVr=i($A),T(qC.$$.fragment,$A),$A.forEach(t),BVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(u$.$$.fragment,li),IVr=i(li),eCe=n(li,"P",{});var NDt=s(eCe);NVr=r(NDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NDt.forEach(t),qVr=i(li),Mn=n(li,"P",{});var kA=s(Mn);jVr=r(kA,"The model class to instantiate is selected based on the "),oCe=n(kA,"CODE",{});var qDt=s(oCe);DVr=r(qDt,"model_type"),qDt.forEach(t),GVr=r(kA,` property of the config object (either
passed as an argument or loaded from `),rCe=n(kA,"CODE",{});var jDt=s(rCe);OVr=r(jDt,"pretrained_model_name_or_path"),jDt.forEach(t),VVr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(kA,"CODE",{});var DDt=s(tCe);XVr=r(DDt,"pretrained_model_name_or_path"),DDt.forEach(t),zVr=r(kA,":"),kA.forEach(t),QVr=i(li),Ee=n(li,"UL",{});var we=s(Ee);jC=n(we,"LI",{});var pOe=s(jC);aCe=n(pOe,"STRONG",{});var GDt=s(aCe);WVr=r(GDt,"albert"),GDt.forEach(t),HVr=r(pOe," \u2014 "),yee=n(pOe,"A",{href:!0});var ODt=s(yee);UVr=r(ODt,"FlaxAlbertForPreTraining"),ODt.forEach(t),JVr=r(pOe," (ALBERT model)"),pOe.forEach(t),YVr=i(we),DC=n(we,"LI",{});var _Oe=s(DC);nCe=n(_Oe,"STRONG",{});var VDt=s(nCe);KVr=r(VDt,"bart"),VDt.forEach(t),ZVr=r(_Oe," \u2014 "),xee=n(_Oe,"A",{href:!0});var XDt=s(xee);eXr=r(XDt,"FlaxBartForConditionalGeneration"),XDt.forEach(t),oXr=r(_Oe," (BART model)"),_Oe.forEach(t),rXr=i(we),GC=n(we,"LI",{});var uOe=s(GC);sCe=n(uOe,"STRONG",{});var zDt=s(sCe);tXr=r(zDt,"bert"),zDt.forEach(t),aXr=r(uOe," \u2014 "),$ee=n(uOe,"A",{href:!0});var QDt=s($ee);nXr=r(QDt,"FlaxBertForPreTraining"),QDt.forEach(t),sXr=r(uOe," (BERT model)"),uOe.forEach(t),lXr=i(we),OC=n(we,"LI",{});var bOe=s(OC);lCe=n(bOe,"STRONG",{});var WDt=s(lCe);iXr=r(WDt,"big_bird"),WDt.forEach(t),dXr=r(bOe," \u2014 "),kee=n(bOe,"A",{href:!0});var HDt=s(kee);cXr=r(HDt,"FlaxBigBirdForPreTraining"),HDt.forEach(t),fXr=r(bOe," (BigBird model)"),bOe.forEach(t),mXr=i(we),VC=n(we,"LI",{});var vOe=s(VC);iCe=n(vOe,"STRONG",{});var UDt=s(iCe);gXr=r(UDt,"electra"),UDt.forEach(t),hXr=r(vOe," \u2014 "),See=n(vOe,"A",{href:!0});var JDt=s(See);pXr=r(JDt,"FlaxElectraForPreTraining"),JDt.forEach(t),_Xr=r(vOe," (ELECTRA model)"),vOe.forEach(t),uXr=i(we),XC=n(we,"LI",{});var FOe=s(XC);dCe=n(FOe,"STRONG",{});var YDt=s(dCe);bXr=r(YDt,"longt5"),YDt.forEach(t),vXr=r(FOe," \u2014 "),Ree=n(FOe,"A",{href:!0});var KDt=s(Ree);FXr=r(KDt,"FlaxLongT5ForConditionalGeneration"),KDt.forEach(t),TXr=r(FOe," (LongT5 model)"),FOe.forEach(t),MXr=i(we),zC=n(we,"LI",{});var TOe=s(zC);cCe=n(TOe,"STRONG",{});var ZDt=s(cCe);EXr=r(ZDt,"mbart"),ZDt.forEach(t),CXr=r(TOe," \u2014 "),Pee=n(TOe,"A",{href:!0});var eGt=s(Pee);wXr=r(eGt,"FlaxMBartForConditionalGeneration"),eGt.forEach(t),AXr=r(TOe," (mBART model)"),TOe.forEach(t),LXr=i(we),QC=n(we,"LI",{});var MOe=s(QC);fCe=n(MOe,"STRONG",{});var oGt=s(fCe);yXr=r(oGt,"mt5"),oGt.forEach(t),xXr=r(MOe," \u2014 "),Bee=n(MOe,"A",{href:!0});var rGt=s(Bee);$Xr=r(rGt,"FlaxMT5ForConditionalGeneration"),rGt.forEach(t),kXr=r(MOe," (MT5 model)"),MOe.forEach(t),SXr=i(we),WC=n(we,"LI",{});var EOe=s(WC);mCe=n(EOe,"STRONG",{});var tGt=s(mCe);RXr=r(tGt,"roberta"),tGt.forEach(t),PXr=r(EOe," \u2014 "),Iee=n(EOe,"A",{href:!0});var aGt=s(Iee);BXr=r(aGt,"FlaxRobertaForMaskedLM"),aGt.forEach(t),IXr=r(EOe," (RoBERTa model)"),EOe.forEach(t),NXr=i(we),HC=n(we,"LI",{});var COe=s(HC);gCe=n(COe,"STRONG",{});var nGt=s(gCe);qXr=r(nGt,"roformer"),nGt.forEach(t),jXr=r(COe," \u2014 "),Nee=n(COe,"A",{href:!0});var sGt=s(Nee);DXr=r(sGt,"FlaxRoFormerForMaskedLM"),sGt.forEach(t),GXr=r(COe," (RoFormer model)"),COe.forEach(t),OXr=i(we),UC=n(we,"LI",{});var wOe=s(UC);hCe=n(wOe,"STRONG",{});var lGt=s(hCe);VXr=r(lGt,"t5"),lGt.forEach(t),XXr=r(wOe," \u2014 "),qee=n(wOe,"A",{href:!0});var iGt=s(qee);zXr=r(iGt,"FlaxT5ForConditionalGeneration"),iGt.forEach(t),QXr=r(wOe," (T5 model)"),wOe.forEach(t),WXr=i(we),JC=n(we,"LI",{});var AOe=s(JC);pCe=n(AOe,"STRONG",{});var dGt=s(pCe);HXr=r(dGt,"wav2vec2"),dGt.forEach(t),UXr=r(AOe," \u2014 "),jee=n(AOe,"A",{href:!0});var cGt=s(jee);JXr=r(cGt,"FlaxWav2Vec2ForPreTraining"),cGt.forEach(t),YXr=r(AOe," (Wav2Vec2 model)"),AOe.forEach(t),KXr=i(we),YC=n(we,"LI",{});var LOe=s(YC);_Ce=n(LOe,"STRONG",{});var fGt=s(_Ce);ZXr=r(fGt,"xlm-roberta"),fGt.forEach(t),ezr=r(LOe," \u2014 "),Dee=n(LOe,"A",{href:!0});var mGt=s(Dee);ozr=r(mGt,"FlaxXLMRobertaForMaskedLM"),mGt.forEach(t),rzr=r(LOe," (XLM-RoBERTa model)"),LOe.forEach(t),we.forEach(t),tzr=i(li),T(KC.$$.fragment,li),li.forEach(t),si.forEach(t),Tze=i(f),rf=n(f,"H2",{class:!0});var $We=s(rf);ZC=n($We,"A",{id:!0,class:!0,href:!0});var gGt=s(ZC);uCe=n(gGt,"SPAN",{});var hGt=s(uCe);T(b$.$$.fragment,hGt),hGt.forEach(t),gGt.forEach(t),azr=i($We),bCe=n($We,"SPAN",{});var pGt=s(bCe);nzr=r(pGt,"FlaxAutoModelForMaskedLM"),pGt.forEach(t),$We.forEach(t),Mze=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(v$.$$.fragment,ii),szr=i(ii),tf=n(ii,"P",{});var Jte=s(tf);lzr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gee=n(Jte,"A",{href:!0});var _Gt=s(Gee);izr=r(_Gt,"from_pretrained()"),_Gt.forEach(t),dzr=r(Jte," class method or the "),Oee=n(Jte,"A",{href:!0});var uGt=s(Oee);czr=r(uGt,"from_config()"),uGt.forEach(t),fzr=r(Jte,` class
method.`),Jte.forEach(t),mzr=i(ii),F$=n(ii,"P",{});var kWe=s(F$);gzr=r(kWe,"This class cannot be instantiated directly using "),vCe=n(kWe,"CODE",{});var bGt=s(vCe);hzr=r(bGt,"__init__()"),bGt.forEach(t),pzr=r(kWe," (throws an error)."),kWe.forEach(t),_zr=i(ii),Ut=n(ii,"DIV",{class:!0});var SA=s(Ut);T(T$.$$.fragment,SA),uzr=i(SA),FCe=n(SA,"P",{});var vGt=s(FCe);bzr=r(vGt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vGt.forEach(t),vzr=i(SA),af=n(SA,"P",{});var Yte=s(af);Fzr=r(Yte,`Note:
Loading a model from its configuration file does `),TCe=n(Yte,"STRONG",{});var FGt=s(TCe);Tzr=r(FGt,"not"),FGt.forEach(t),Mzr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Yte,"A",{href:!0});var TGt=s(Vee);Ezr=r(TGt,"from_pretrained()"),TGt.forEach(t),Czr=r(Yte," to load the model weights."),Yte.forEach(t),wzr=i(SA),T(e5.$$.fragment,SA),SA.forEach(t),Azr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(M$.$$.fragment,di),Lzr=i(di),MCe=n(di,"P",{});var MGt=s(MCe);yzr=r(MGt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MGt.forEach(t),xzr=i(di),En=n(di,"P",{});var RA=s(En);$zr=r(RA,"The model class to instantiate is selected based on the "),ECe=n(RA,"CODE",{});var EGt=s(ECe);kzr=r(EGt,"model_type"),EGt.forEach(t),Szr=r(RA,` property of the config object (either
passed as an argument or loaded from `),CCe=n(RA,"CODE",{});var CGt=s(CCe);Rzr=r(CGt,"pretrained_model_name_or_path"),CGt.forEach(t),Pzr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(RA,"CODE",{});var wGt=s(wCe);Bzr=r(wGt,"pretrained_model_name_or_path"),wGt.forEach(t),Izr=r(RA,":"),RA.forEach(t),Nzr=i(di),$e=n(di,"UL",{});var qe=s($e);o5=n(qe,"LI",{});var yOe=s(o5);ACe=n(yOe,"STRONG",{});var AGt=s(ACe);qzr=r(AGt,"albert"),AGt.forEach(t),jzr=r(yOe," \u2014 "),Xee=n(yOe,"A",{href:!0});var LGt=s(Xee);Dzr=r(LGt,"FlaxAlbertForMaskedLM"),LGt.forEach(t),Gzr=r(yOe," (ALBERT model)"),yOe.forEach(t),Ozr=i(qe),r5=n(qe,"LI",{});var xOe=s(r5);LCe=n(xOe,"STRONG",{});var yGt=s(LCe);Vzr=r(yGt,"bart"),yGt.forEach(t),Xzr=r(xOe," \u2014 "),zee=n(xOe,"A",{href:!0});var xGt=s(zee);zzr=r(xGt,"FlaxBartForConditionalGeneration"),xGt.forEach(t),Qzr=r(xOe," (BART model)"),xOe.forEach(t),Wzr=i(qe),t5=n(qe,"LI",{});var $Oe=s(t5);yCe=n($Oe,"STRONG",{});var $Gt=s(yCe);Hzr=r($Gt,"bert"),$Gt.forEach(t),Uzr=r($Oe," \u2014 "),Qee=n($Oe,"A",{href:!0});var kGt=s(Qee);Jzr=r(kGt,"FlaxBertForMaskedLM"),kGt.forEach(t),Yzr=r($Oe," (BERT model)"),$Oe.forEach(t),Kzr=i(qe),a5=n(qe,"LI",{});var kOe=s(a5);xCe=n(kOe,"STRONG",{});var SGt=s(xCe);Zzr=r(SGt,"big_bird"),SGt.forEach(t),eQr=r(kOe," \u2014 "),Wee=n(kOe,"A",{href:!0});var RGt=s(Wee);oQr=r(RGt,"FlaxBigBirdForMaskedLM"),RGt.forEach(t),rQr=r(kOe," (BigBird model)"),kOe.forEach(t),tQr=i(qe),n5=n(qe,"LI",{});var SOe=s(n5);$Ce=n(SOe,"STRONG",{});var PGt=s($Ce);aQr=r(PGt,"distilbert"),PGt.forEach(t),nQr=r(SOe," \u2014 "),Hee=n(SOe,"A",{href:!0});var BGt=s(Hee);sQr=r(BGt,"FlaxDistilBertForMaskedLM"),BGt.forEach(t),lQr=r(SOe," (DistilBERT model)"),SOe.forEach(t),iQr=i(qe),s5=n(qe,"LI",{});var ROe=s(s5);kCe=n(ROe,"STRONG",{});var IGt=s(kCe);dQr=r(IGt,"electra"),IGt.forEach(t),cQr=r(ROe," \u2014 "),Uee=n(ROe,"A",{href:!0});var NGt=s(Uee);fQr=r(NGt,"FlaxElectraForMaskedLM"),NGt.forEach(t),mQr=r(ROe," (ELECTRA model)"),ROe.forEach(t),gQr=i(qe),l5=n(qe,"LI",{});var POe=s(l5);SCe=n(POe,"STRONG",{});var qGt=s(SCe);hQr=r(qGt,"mbart"),qGt.forEach(t),pQr=r(POe," \u2014 "),Jee=n(POe,"A",{href:!0});var jGt=s(Jee);_Qr=r(jGt,"FlaxMBartForConditionalGeneration"),jGt.forEach(t),uQr=r(POe," (mBART model)"),POe.forEach(t),bQr=i(qe),i5=n(qe,"LI",{});var BOe=s(i5);RCe=n(BOe,"STRONG",{});var DGt=s(RCe);vQr=r(DGt,"roberta"),DGt.forEach(t),FQr=r(BOe," \u2014 "),Yee=n(BOe,"A",{href:!0});var GGt=s(Yee);TQr=r(GGt,"FlaxRobertaForMaskedLM"),GGt.forEach(t),MQr=r(BOe," (RoBERTa model)"),BOe.forEach(t),EQr=i(qe),d5=n(qe,"LI",{});var IOe=s(d5);PCe=n(IOe,"STRONG",{});var OGt=s(PCe);CQr=r(OGt,"roformer"),OGt.forEach(t),wQr=r(IOe," \u2014 "),Kee=n(IOe,"A",{href:!0});var VGt=s(Kee);AQr=r(VGt,"FlaxRoFormerForMaskedLM"),VGt.forEach(t),LQr=r(IOe," (RoFormer model)"),IOe.forEach(t),yQr=i(qe),c5=n(qe,"LI",{});var NOe=s(c5);BCe=n(NOe,"STRONG",{});var XGt=s(BCe);xQr=r(XGt,"xlm-roberta"),XGt.forEach(t),$Qr=r(NOe," \u2014 "),Zee=n(NOe,"A",{href:!0});var zGt=s(Zee);kQr=r(zGt,"FlaxXLMRobertaForMaskedLM"),zGt.forEach(t),SQr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),qe.forEach(t),RQr=i(di),T(f5.$$.fragment,di),di.forEach(t),ii.forEach(t),Eze=i(f),nf=n(f,"H2",{class:!0});var SWe=s(nf);m5=n(SWe,"A",{id:!0,class:!0,href:!0});var QGt=s(m5);ICe=n(QGt,"SPAN",{});var WGt=s(ICe);T(E$.$$.fragment,WGt),WGt.forEach(t),QGt.forEach(t),PQr=i(SWe),NCe=n(SWe,"SPAN",{});var HGt=s(NCe);BQr=r(HGt,"FlaxAutoModelForSeq2SeqLM"),HGt.forEach(t),SWe.forEach(t),Cze=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(C$.$$.fragment,ci),IQr=i(ci),sf=n(ci,"P",{});var Kte=s(sf);NQr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eoe=n(Kte,"A",{href:!0});var UGt=s(eoe);qQr=r(UGt,"from_pretrained()"),UGt.forEach(t),jQr=r(Kte," class method or the "),ooe=n(Kte,"A",{href:!0});var JGt=s(ooe);DQr=r(JGt,"from_config()"),JGt.forEach(t),GQr=r(Kte,` class
method.`),Kte.forEach(t),OQr=i(ci),w$=n(ci,"P",{});var RWe=s(w$);VQr=r(RWe,"This class cannot be instantiated directly using "),qCe=n(RWe,"CODE",{});var YGt=s(qCe);XQr=r(YGt,"__init__()"),YGt.forEach(t),zQr=r(RWe," (throws an error)."),RWe.forEach(t),QQr=i(ci),Jt=n(ci,"DIV",{class:!0});var PA=s(Jt);T(A$.$$.fragment,PA),WQr=i(PA),jCe=n(PA,"P",{});var KGt=s(jCe);HQr=r(KGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KGt.forEach(t),UQr=i(PA),lf=n(PA,"P",{});var Zte=s(lf);JQr=r(Zte,`Note:
Loading a model from its configuration file does `),DCe=n(Zte,"STRONG",{});var ZGt=s(DCe);YQr=r(ZGt,"not"),ZGt.forEach(t),KQr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(Zte,"A",{href:!0});var eOt=s(roe);ZQr=r(eOt,"from_pretrained()"),eOt.forEach(t),eWr=r(Zte," to load the model weights."),Zte.forEach(t),oWr=i(PA),T(g5.$$.fragment,PA),PA.forEach(t),rWr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(L$.$$.fragment,fi),tWr=i(fi),GCe=n(fi,"P",{});var oOt=s(GCe);aWr=r(oOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oOt.forEach(t),nWr=i(fi),Cn=n(fi,"P",{});var BA=s(Cn);sWr=r(BA,"The model class to instantiate is selected based on the "),OCe=n(BA,"CODE",{});var rOt=s(OCe);lWr=r(rOt,"model_type"),rOt.forEach(t),iWr=r(BA,` property of the config object (either
passed as an argument or loaded from `),VCe=n(BA,"CODE",{});var tOt=s(VCe);dWr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),cWr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(BA,"CODE",{});var aOt=s(XCe);fWr=r(aOt,"pretrained_model_name_or_path"),aOt.forEach(t),mWr=r(BA,":"),BA.forEach(t),gWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);h5=n(je,"LI",{});var qOe=s(h5);zCe=n(qOe,"STRONG",{});var nOt=s(zCe);hWr=r(nOt,"bart"),nOt.forEach(t),pWr=r(qOe," \u2014 "),toe=n(qOe,"A",{href:!0});var sOt=s(toe);_Wr=r(sOt,"FlaxBartForConditionalGeneration"),sOt.forEach(t),uWr=r(qOe," (BART model)"),qOe.forEach(t),bWr=i(je),p5=n(je,"LI",{});var jOe=s(p5);QCe=n(jOe,"STRONG",{});var lOt=s(QCe);vWr=r(lOt,"blenderbot"),lOt.forEach(t),FWr=r(jOe," \u2014 "),aoe=n(jOe,"A",{href:!0});var iOt=s(aoe);TWr=r(iOt,"FlaxBlenderbotForConditionalGeneration"),iOt.forEach(t),MWr=r(jOe," (Blenderbot model)"),jOe.forEach(t),EWr=i(je),_5=n(je,"LI",{});var DOe=s(_5);WCe=n(DOe,"STRONG",{});var dOt=s(WCe);CWr=r(dOt,"blenderbot-small"),dOt.forEach(t),wWr=r(DOe," \u2014 "),noe=n(DOe,"A",{href:!0});var cOt=s(noe);AWr=r(cOt,"FlaxBlenderbotSmallForConditionalGeneration"),cOt.forEach(t),LWr=r(DOe," (BlenderbotSmall model)"),DOe.forEach(t),yWr=i(je),u5=n(je,"LI",{});var GOe=s(u5);HCe=n(GOe,"STRONG",{});var fOt=s(HCe);xWr=r(fOt,"encoder-decoder"),fOt.forEach(t),$Wr=r(GOe," \u2014 "),soe=n(GOe,"A",{href:!0});var mOt=s(soe);kWr=r(mOt,"FlaxEncoderDecoderModel"),mOt.forEach(t),SWr=r(GOe," (Encoder decoder model)"),GOe.forEach(t),RWr=i(je),b5=n(je,"LI",{});var OOe=s(b5);UCe=n(OOe,"STRONG",{});var gOt=s(UCe);PWr=r(gOt,"longt5"),gOt.forEach(t),BWr=r(OOe," \u2014 "),loe=n(OOe,"A",{href:!0});var hOt=s(loe);IWr=r(hOt,"FlaxLongT5ForConditionalGeneration"),hOt.forEach(t),NWr=r(OOe," (LongT5 model)"),OOe.forEach(t),qWr=i(je),v5=n(je,"LI",{});var VOe=s(v5);JCe=n(VOe,"STRONG",{});var pOt=s(JCe);jWr=r(pOt,"marian"),pOt.forEach(t),DWr=r(VOe," \u2014 "),ioe=n(VOe,"A",{href:!0});var _Ot=s(ioe);GWr=r(_Ot,"FlaxMarianMTModel"),_Ot.forEach(t),OWr=r(VOe," (Marian model)"),VOe.forEach(t),VWr=i(je),F5=n(je,"LI",{});var XOe=s(F5);YCe=n(XOe,"STRONG",{});var uOt=s(YCe);XWr=r(uOt,"mbart"),uOt.forEach(t),zWr=r(XOe," \u2014 "),doe=n(XOe,"A",{href:!0});var bOt=s(doe);QWr=r(bOt,"FlaxMBartForConditionalGeneration"),bOt.forEach(t),WWr=r(XOe," (mBART model)"),XOe.forEach(t),HWr=i(je),T5=n(je,"LI",{});var zOe=s(T5);KCe=n(zOe,"STRONG",{});var vOt=s(KCe);UWr=r(vOt,"mt5"),vOt.forEach(t),JWr=r(zOe," \u2014 "),coe=n(zOe,"A",{href:!0});var FOt=s(coe);YWr=r(FOt,"FlaxMT5ForConditionalGeneration"),FOt.forEach(t),KWr=r(zOe," (MT5 model)"),zOe.forEach(t),ZWr=i(je),M5=n(je,"LI",{});var QOe=s(M5);ZCe=n(QOe,"STRONG",{});var TOt=s(ZCe);eHr=r(TOt,"pegasus"),TOt.forEach(t),oHr=r(QOe," \u2014 "),foe=n(QOe,"A",{href:!0});var MOt=s(foe);rHr=r(MOt,"FlaxPegasusForConditionalGeneration"),MOt.forEach(t),tHr=r(QOe," (Pegasus model)"),QOe.forEach(t),aHr=i(je),E5=n(je,"LI",{});var WOe=s(E5);e5e=n(WOe,"STRONG",{});var EOt=s(e5e);nHr=r(EOt,"t5"),EOt.forEach(t),sHr=r(WOe," \u2014 "),moe=n(WOe,"A",{href:!0});var COt=s(moe);lHr=r(COt,"FlaxT5ForConditionalGeneration"),COt.forEach(t),iHr=r(WOe," (T5 model)"),WOe.forEach(t),je.forEach(t),dHr=i(fi),T(C5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),wze=i(f),df=n(f,"H2",{class:!0});var PWe=s(df);w5=n(PWe,"A",{id:!0,class:!0,href:!0});var wOt=s(w5);o5e=n(wOt,"SPAN",{});var AOt=s(o5e);T(y$.$$.fragment,AOt),AOt.forEach(t),wOt.forEach(t),cHr=i(PWe),r5e=n(PWe,"SPAN",{});var LOt=s(r5e);fHr=r(LOt,"FlaxAutoModelForSequenceClassification"),LOt.forEach(t),PWe.forEach(t),Aze=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(x$.$$.fragment,mi),mHr=i(mi),cf=n(mi,"P",{});var eae=s(cf);gHr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),goe=n(eae,"A",{href:!0});var yOt=s(goe);hHr=r(yOt,"from_pretrained()"),yOt.forEach(t),pHr=r(eae," class method or the "),hoe=n(eae,"A",{href:!0});var xOt=s(hoe);_Hr=r(xOt,"from_config()"),xOt.forEach(t),uHr=r(eae,` class
method.`),eae.forEach(t),bHr=i(mi),$$=n(mi,"P",{});var BWe=s($$);vHr=r(BWe,"This class cannot be instantiated directly using "),t5e=n(BWe,"CODE",{});var $Ot=s(t5e);FHr=r($Ot,"__init__()"),$Ot.forEach(t),THr=r(BWe," (throws an error)."),BWe.forEach(t),MHr=i(mi),Yt=n(mi,"DIV",{class:!0});var IA=s(Yt);T(k$.$$.fragment,IA),EHr=i(IA),a5e=n(IA,"P",{});var kOt=s(a5e);CHr=r(kOt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kOt.forEach(t),wHr=i(IA),ff=n(IA,"P",{});var oae=s(ff);AHr=r(oae,`Note:
Loading a model from its configuration file does `),n5e=n(oae,"STRONG",{});var SOt=s(n5e);LHr=r(SOt,"not"),SOt.forEach(t),yHr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(oae,"A",{href:!0});var ROt=s(poe);xHr=r(ROt,"from_pretrained()"),ROt.forEach(t),$Hr=r(oae," to load the model weights."),oae.forEach(t),kHr=i(IA),T(A5.$$.fragment,IA),IA.forEach(t),SHr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(S$.$$.fragment,gi),RHr=i(gi),s5e=n(gi,"P",{});var POt=s(s5e);PHr=r(POt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),POt.forEach(t),BHr=i(gi),wn=n(gi,"P",{});var NA=s(wn);IHr=r(NA,"The model class to instantiate is selected based on the "),l5e=n(NA,"CODE",{});var BOt=s(l5e);NHr=r(BOt,"model_type"),BOt.forEach(t),qHr=r(NA,` property of the config object (either
passed as an argument or loaded from `),i5e=n(NA,"CODE",{});var IOt=s(i5e);jHr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),DHr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(NA,"CODE",{});var NOt=s(d5e);GHr=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),OHr=r(NA,":"),NA.forEach(t),VHr=i(gi),Se=n(gi,"UL",{});var De=s(Se);L5=n(De,"LI",{});var HOe=s(L5);c5e=n(HOe,"STRONG",{});var qOt=s(c5e);XHr=r(qOt,"albert"),qOt.forEach(t),zHr=r(HOe," \u2014 "),_oe=n(HOe,"A",{href:!0});var jOt=s(_oe);QHr=r(jOt,"FlaxAlbertForSequenceClassification"),jOt.forEach(t),WHr=r(HOe," (ALBERT model)"),HOe.forEach(t),HHr=i(De),y5=n(De,"LI",{});var UOe=s(y5);f5e=n(UOe,"STRONG",{});var DOt=s(f5e);UHr=r(DOt,"bart"),DOt.forEach(t),JHr=r(UOe," \u2014 "),uoe=n(UOe,"A",{href:!0});var GOt=s(uoe);YHr=r(GOt,"FlaxBartForSequenceClassification"),GOt.forEach(t),KHr=r(UOe," (BART model)"),UOe.forEach(t),ZHr=i(De),x5=n(De,"LI",{});var JOe=s(x5);m5e=n(JOe,"STRONG",{});var OOt=s(m5e);eUr=r(OOt,"bert"),OOt.forEach(t),oUr=r(JOe," \u2014 "),boe=n(JOe,"A",{href:!0});var VOt=s(boe);rUr=r(VOt,"FlaxBertForSequenceClassification"),VOt.forEach(t),tUr=r(JOe," (BERT model)"),JOe.forEach(t),aUr=i(De),$5=n(De,"LI",{});var YOe=s($5);g5e=n(YOe,"STRONG",{});var XOt=s(g5e);nUr=r(XOt,"big_bird"),XOt.forEach(t),sUr=r(YOe," \u2014 "),voe=n(YOe,"A",{href:!0});var zOt=s(voe);lUr=r(zOt,"FlaxBigBirdForSequenceClassification"),zOt.forEach(t),iUr=r(YOe," (BigBird model)"),YOe.forEach(t),dUr=i(De),k5=n(De,"LI",{});var KOe=s(k5);h5e=n(KOe,"STRONG",{});var QOt=s(h5e);cUr=r(QOt,"distilbert"),QOt.forEach(t),fUr=r(KOe," \u2014 "),Foe=n(KOe,"A",{href:!0});var WOt=s(Foe);mUr=r(WOt,"FlaxDistilBertForSequenceClassification"),WOt.forEach(t),gUr=r(KOe," (DistilBERT model)"),KOe.forEach(t),hUr=i(De),S5=n(De,"LI",{});var ZOe=s(S5);p5e=n(ZOe,"STRONG",{});var HOt=s(p5e);pUr=r(HOt,"electra"),HOt.forEach(t),_Ur=r(ZOe," \u2014 "),Toe=n(ZOe,"A",{href:!0});var UOt=s(Toe);uUr=r(UOt,"FlaxElectraForSequenceClassification"),UOt.forEach(t),bUr=r(ZOe," (ELECTRA model)"),ZOe.forEach(t),vUr=i(De),R5=n(De,"LI",{});var eVe=s(R5);_5e=n(eVe,"STRONG",{});var JOt=s(_5e);FUr=r(JOt,"mbart"),JOt.forEach(t),TUr=r(eVe," \u2014 "),Moe=n(eVe,"A",{href:!0});var YOt=s(Moe);MUr=r(YOt,"FlaxMBartForSequenceClassification"),YOt.forEach(t),EUr=r(eVe," (mBART model)"),eVe.forEach(t),CUr=i(De),P5=n(De,"LI",{});var oVe=s(P5);u5e=n(oVe,"STRONG",{});var KOt=s(u5e);wUr=r(KOt,"roberta"),KOt.forEach(t),AUr=r(oVe," \u2014 "),Eoe=n(oVe,"A",{href:!0});var ZOt=s(Eoe);LUr=r(ZOt,"FlaxRobertaForSequenceClassification"),ZOt.forEach(t),yUr=r(oVe," (RoBERTa model)"),oVe.forEach(t),xUr=i(De),B5=n(De,"LI",{});var rVe=s(B5);b5e=n(rVe,"STRONG",{});var eVt=s(b5e);$Ur=r(eVt,"roformer"),eVt.forEach(t),kUr=r(rVe," \u2014 "),Coe=n(rVe,"A",{href:!0});var oVt=s(Coe);SUr=r(oVt,"FlaxRoFormerForSequenceClassification"),oVt.forEach(t),RUr=r(rVe," (RoFormer model)"),rVe.forEach(t),PUr=i(De),I5=n(De,"LI",{});var tVe=s(I5);v5e=n(tVe,"STRONG",{});var rVt=s(v5e);BUr=r(rVt,"xlm-roberta"),rVt.forEach(t),IUr=r(tVe," \u2014 "),woe=n(tVe,"A",{href:!0});var tVt=s(woe);NUr=r(tVt,"FlaxXLMRobertaForSequenceClassification"),tVt.forEach(t),qUr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),De.forEach(t),jUr=i(gi),T(N5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Lze=i(f),mf=n(f,"H2",{class:!0});var IWe=s(mf);q5=n(IWe,"A",{id:!0,class:!0,href:!0});var aVt=s(q5);F5e=n(aVt,"SPAN",{});var nVt=s(F5e);T(R$.$$.fragment,nVt),nVt.forEach(t),aVt.forEach(t),DUr=i(IWe),T5e=n(IWe,"SPAN",{});var sVt=s(T5e);GUr=r(sVt,"FlaxAutoModelForQuestionAnswering"),sVt.forEach(t),IWe.forEach(t),yze=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(P$.$$.fragment,hi),OUr=i(hi),gf=n(hi,"P",{});var rae=s(gf);VUr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aoe=n(rae,"A",{href:!0});var lVt=s(Aoe);XUr=r(lVt,"from_pretrained()"),lVt.forEach(t),zUr=r(rae," class method or the "),Loe=n(rae,"A",{href:!0});var iVt=s(Loe);QUr=r(iVt,"from_config()"),iVt.forEach(t),WUr=r(rae,` class
method.`),rae.forEach(t),HUr=i(hi),B$=n(hi,"P",{});var NWe=s(B$);UUr=r(NWe,"This class cannot be instantiated directly using "),M5e=n(NWe,"CODE",{});var dVt=s(M5e);JUr=r(dVt,"__init__()"),dVt.forEach(t),YUr=r(NWe," (throws an error)."),NWe.forEach(t),KUr=i(hi),Kt=n(hi,"DIV",{class:!0});var qA=s(Kt);T(I$.$$.fragment,qA),ZUr=i(qA),E5e=n(qA,"P",{});var cVt=s(E5e);eJr=r(cVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cVt.forEach(t),oJr=i(qA),hf=n(qA,"P",{});var tae=s(hf);rJr=r(tae,`Note:
Loading a model from its configuration file does `),C5e=n(tae,"STRONG",{});var fVt=s(C5e);tJr=r(fVt,"not"),fVt.forEach(t),aJr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=n(tae,"A",{href:!0});var mVt=s(yoe);nJr=r(mVt,"from_pretrained()"),mVt.forEach(t),sJr=r(tae," to load the model weights."),tae.forEach(t),lJr=i(qA),T(j5.$$.fragment,qA),qA.forEach(t),iJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(N$.$$.fragment,pi),dJr=i(pi),w5e=n(pi,"P",{});var gVt=s(w5e);cJr=r(gVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gVt.forEach(t),fJr=i(pi),An=n(pi,"P",{});var jA=s(An);mJr=r(jA,"The model class to instantiate is selected based on the "),A5e=n(jA,"CODE",{});var hVt=s(A5e);gJr=r(hVt,"model_type"),hVt.forEach(t),hJr=r(jA,` property of the config object (either
passed as an argument or loaded from `),L5e=n(jA,"CODE",{});var pVt=s(L5e);pJr=r(pVt,"pretrained_model_name_or_path"),pVt.forEach(t),_Jr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=n(jA,"CODE",{});var _Vt=s(y5e);uJr=r(_Vt,"pretrained_model_name_or_path"),_Vt.forEach(t),bJr=r(jA,":"),jA.forEach(t),vJr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);D5=n(Ge,"LI",{});var aVe=s(D5);x5e=n(aVe,"STRONG",{});var uVt=s(x5e);FJr=r(uVt,"albert"),uVt.forEach(t),TJr=r(aVe," \u2014 "),xoe=n(aVe,"A",{href:!0});var bVt=s(xoe);MJr=r(bVt,"FlaxAlbertForQuestionAnswering"),bVt.forEach(t),EJr=r(aVe," (ALBERT model)"),aVe.forEach(t),CJr=i(Ge),G5=n(Ge,"LI",{});var nVe=s(G5);$5e=n(nVe,"STRONG",{});var vVt=s($5e);wJr=r(vVt,"bart"),vVt.forEach(t),AJr=r(nVe," \u2014 "),$oe=n(nVe,"A",{href:!0});var FVt=s($oe);LJr=r(FVt,"FlaxBartForQuestionAnswering"),FVt.forEach(t),yJr=r(nVe," (BART model)"),nVe.forEach(t),xJr=i(Ge),O5=n(Ge,"LI",{});var sVe=s(O5);k5e=n(sVe,"STRONG",{});var TVt=s(k5e);$Jr=r(TVt,"bert"),TVt.forEach(t),kJr=r(sVe," \u2014 "),koe=n(sVe,"A",{href:!0});var MVt=s(koe);SJr=r(MVt,"FlaxBertForQuestionAnswering"),MVt.forEach(t),RJr=r(sVe," (BERT model)"),sVe.forEach(t),PJr=i(Ge),V5=n(Ge,"LI",{});var lVe=s(V5);S5e=n(lVe,"STRONG",{});var EVt=s(S5e);BJr=r(EVt,"big_bird"),EVt.forEach(t),IJr=r(lVe," \u2014 "),Soe=n(lVe,"A",{href:!0});var CVt=s(Soe);NJr=r(CVt,"FlaxBigBirdForQuestionAnswering"),CVt.forEach(t),qJr=r(lVe," (BigBird model)"),lVe.forEach(t),jJr=i(Ge),X5=n(Ge,"LI",{});var iVe=s(X5);R5e=n(iVe,"STRONG",{});var wVt=s(R5e);DJr=r(wVt,"distilbert"),wVt.forEach(t),GJr=r(iVe," \u2014 "),Roe=n(iVe,"A",{href:!0});var AVt=s(Roe);OJr=r(AVt,"FlaxDistilBertForQuestionAnswering"),AVt.forEach(t),VJr=r(iVe," (DistilBERT model)"),iVe.forEach(t),XJr=i(Ge),z5=n(Ge,"LI",{});var dVe=s(z5);P5e=n(dVe,"STRONG",{});var LVt=s(P5e);zJr=r(LVt,"electra"),LVt.forEach(t),QJr=r(dVe," \u2014 "),Poe=n(dVe,"A",{href:!0});var yVt=s(Poe);WJr=r(yVt,"FlaxElectraForQuestionAnswering"),yVt.forEach(t),HJr=r(dVe," (ELECTRA model)"),dVe.forEach(t),UJr=i(Ge),Q5=n(Ge,"LI",{});var cVe=s(Q5);B5e=n(cVe,"STRONG",{});var xVt=s(B5e);JJr=r(xVt,"mbart"),xVt.forEach(t),YJr=r(cVe," \u2014 "),Boe=n(cVe,"A",{href:!0});var $Vt=s(Boe);KJr=r($Vt,"FlaxMBartForQuestionAnswering"),$Vt.forEach(t),ZJr=r(cVe," (mBART model)"),cVe.forEach(t),eYr=i(Ge),W5=n(Ge,"LI",{});var fVe=s(W5);I5e=n(fVe,"STRONG",{});var kVt=s(I5e);oYr=r(kVt,"roberta"),kVt.forEach(t),rYr=r(fVe," \u2014 "),Ioe=n(fVe,"A",{href:!0});var SVt=s(Ioe);tYr=r(SVt,"FlaxRobertaForQuestionAnswering"),SVt.forEach(t),aYr=r(fVe," (RoBERTa model)"),fVe.forEach(t),nYr=i(Ge),H5=n(Ge,"LI",{});var mVe=s(H5);N5e=n(mVe,"STRONG",{});var RVt=s(N5e);sYr=r(RVt,"roformer"),RVt.forEach(t),lYr=r(mVe," \u2014 "),Noe=n(mVe,"A",{href:!0});var PVt=s(Noe);iYr=r(PVt,"FlaxRoFormerForQuestionAnswering"),PVt.forEach(t),dYr=r(mVe," (RoFormer model)"),mVe.forEach(t),cYr=i(Ge),U5=n(Ge,"LI",{});var gVe=s(U5);q5e=n(gVe,"STRONG",{});var BVt=s(q5e);fYr=r(BVt,"xlm-roberta"),BVt.forEach(t),mYr=r(gVe," \u2014 "),qoe=n(gVe,"A",{href:!0});var IVt=s(qoe);gYr=r(IVt,"FlaxXLMRobertaForQuestionAnswering"),IVt.forEach(t),hYr=r(gVe," (XLM-RoBERTa model)"),gVe.forEach(t),Ge.forEach(t),pYr=i(pi),T(J5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),xze=i(f),pf=n(f,"H2",{class:!0});var qWe=s(pf);Y5=n(qWe,"A",{id:!0,class:!0,href:!0});var NVt=s(Y5);j5e=n(NVt,"SPAN",{});var qVt=s(j5e);T(q$.$$.fragment,qVt),qVt.forEach(t),NVt.forEach(t),_Yr=i(qWe),D5e=n(qWe,"SPAN",{});var jVt=s(D5e);uYr=r(jVt,"FlaxAutoModelForTokenClassification"),jVt.forEach(t),qWe.forEach(t),$ze=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(j$.$$.fragment,_i),bYr=i(_i),_f=n(_i,"P",{});var aae=s(_f);vYr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),joe=n(aae,"A",{href:!0});var DVt=s(joe);FYr=r(DVt,"from_pretrained()"),DVt.forEach(t),TYr=r(aae," class method or the "),Doe=n(aae,"A",{href:!0});var GVt=s(Doe);MYr=r(GVt,"from_config()"),GVt.forEach(t),EYr=r(aae,` class
method.`),aae.forEach(t),CYr=i(_i),D$=n(_i,"P",{});var jWe=s(D$);wYr=r(jWe,"This class cannot be instantiated directly using "),G5e=n(jWe,"CODE",{});var OVt=s(G5e);AYr=r(OVt,"__init__()"),OVt.forEach(t),LYr=r(jWe," (throws an error)."),jWe.forEach(t),yYr=i(_i),Zt=n(_i,"DIV",{class:!0});var DA=s(Zt);T(G$.$$.fragment,DA),xYr=i(DA),O5e=n(DA,"P",{});var VVt=s(O5e);$Yr=r(VVt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VVt.forEach(t),kYr=i(DA),uf=n(DA,"P",{});var nae=s(uf);SYr=r(nae,`Note:
Loading a model from its configuration file does `),V5e=n(nae,"STRONG",{});var XVt=s(V5e);RYr=r(XVt,"not"),XVt.forEach(t),PYr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=n(nae,"A",{href:!0});var zVt=s(Goe);BYr=r(zVt,"from_pretrained()"),zVt.forEach(t),IYr=r(nae," to load the model weights."),nae.forEach(t),NYr=i(DA),T(K5.$$.fragment,DA),DA.forEach(t),qYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(O$.$$.fragment,ui),jYr=i(ui),X5e=n(ui,"P",{});var QVt=s(X5e);DYr=r(QVt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QVt.forEach(t),GYr=i(ui),Ln=n(ui,"P",{});var GA=s(Ln);OYr=r(GA,"The model class to instantiate is selected based on the "),z5e=n(GA,"CODE",{});var WVt=s(z5e);VYr=r(WVt,"model_type"),WVt.forEach(t),XYr=r(GA,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(GA,"CODE",{});var HVt=s(Q5e);zYr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),QYr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(GA,"CODE",{});var UVt=s(W5e);WYr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),HYr=r(GA,":"),GA.forEach(t),UYr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);Z5=n(To,"LI",{});var hVe=s(Z5);H5e=n(hVe,"STRONG",{});var JVt=s(H5e);JYr=r(JVt,"albert"),JVt.forEach(t),YYr=r(hVe," \u2014 "),Ooe=n(hVe,"A",{href:!0});var YVt=s(Ooe);KYr=r(YVt,"FlaxAlbertForTokenClassification"),YVt.forEach(t),ZYr=r(hVe," (ALBERT model)"),hVe.forEach(t),eKr=i(To),e0=n(To,"LI",{});var pVe=s(e0);U5e=n(pVe,"STRONG",{});var KVt=s(U5e);oKr=r(KVt,"bert"),KVt.forEach(t),rKr=r(pVe," \u2014 "),Voe=n(pVe,"A",{href:!0});var ZVt=s(Voe);tKr=r(ZVt,"FlaxBertForTokenClassification"),ZVt.forEach(t),aKr=r(pVe," (BERT model)"),pVe.forEach(t),nKr=i(To),o0=n(To,"LI",{});var _Ve=s(o0);J5e=n(_Ve,"STRONG",{});var eXt=s(J5e);sKr=r(eXt,"big_bird"),eXt.forEach(t),lKr=r(_Ve," \u2014 "),Xoe=n(_Ve,"A",{href:!0});var oXt=s(Xoe);iKr=r(oXt,"FlaxBigBirdForTokenClassification"),oXt.forEach(t),dKr=r(_Ve," (BigBird model)"),_Ve.forEach(t),cKr=i(To),r0=n(To,"LI",{});var uVe=s(r0);Y5e=n(uVe,"STRONG",{});var rXt=s(Y5e);fKr=r(rXt,"distilbert"),rXt.forEach(t),mKr=r(uVe," \u2014 "),zoe=n(uVe,"A",{href:!0});var tXt=s(zoe);gKr=r(tXt,"FlaxDistilBertForTokenClassification"),tXt.forEach(t),hKr=r(uVe," (DistilBERT model)"),uVe.forEach(t),pKr=i(To),t0=n(To,"LI",{});var bVe=s(t0);K5e=n(bVe,"STRONG",{});var aXt=s(K5e);_Kr=r(aXt,"electra"),aXt.forEach(t),uKr=r(bVe," \u2014 "),Qoe=n(bVe,"A",{href:!0});var nXt=s(Qoe);bKr=r(nXt,"FlaxElectraForTokenClassification"),nXt.forEach(t),vKr=r(bVe," (ELECTRA model)"),bVe.forEach(t),FKr=i(To),a0=n(To,"LI",{});var vVe=s(a0);Z5e=n(vVe,"STRONG",{});var sXt=s(Z5e);TKr=r(sXt,"roberta"),sXt.forEach(t),MKr=r(vVe," \u2014 "),Woe=n(vVe,"A",{href:!0});var lXt=s(Woe);EKr=r(lXt,"FlaxRobertaForTokenClassification"),lXt.forEach(t),CKr=r(vVe," (RoBERTa model)"),vVe.forEach(t),wKr=i(To),n0=n(To,"LI",{});var FVe=s(n0);e0e=n(FVe,"STRONG",{});var iXt=s(e0e);AKr=r(iXt,"roformer"),iXt.forEach(t),LKr=r(FVe," \u2014 "),Hoe=n(FVe,"A",{href:!0});var dXt=s(Hoe);yKr=r(dXt,"FlaxRoFormerForTokenClassification"),dXt.forEach(t),xKr=r(FVe," (RoFormer model)"),FVe.forEach(t),$Kr=i(To),s0=n(To,"LI",{});var TVe=s(s0);o0e=n(TVe,"STRONG",{});var cXt=s(o0e);kKr=r(cXt,"xlm-roberta"),cXt.forEach(t),SKr=r(TVe," \u2014 "),Uoe=n(TVe,"A",{href:!0});var fXt=s(Uoe);RKr=r(fXt,"FlaxXLMRobertaForTokenClassification"),fXt.forEach(t),PKr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),To.forEach(t),BKr=i(ui),T(l0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),kze=i(f),bf=n(f,"H2",{class:!0});var DWe=s(bf);i0=n(DWe,"A",{id:!0,class:!0,href:!0});var mXt=s(i0);r0e=n(mXt,"SPAN",{});var gXt=s(r0e);T(V$.$$.fragment,gXt),gXt.forEach(t),mXt.forEach(t),IKr=i(DWe),t0e=n(DWe,"SPAN",{});var hXt=s(t0e);NKr=r(hXt,"FlaxAutoModelForMultipleChoice"),hXt.forEach(t),DWe.forEach(t),Sze=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(X$.$$.fragment,bi),qKr=i(bi),vf=n(bi,"P",{});var sae=s(vf);jKr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Joe=n(sae,"A",{href:!0});var pXt=s(Joe);DKr=r(pXt,"from_pretrained()"),pXt.forEach(t),GKr=r(sae," class method or the "),Yoe=n(sae,"A",{href:!0});var _Xt=s(Yoe);OKr=r(_Xt,"from_config()"),_Xt.forEach(t),VKr=r(sae,` class
method.`),sae.forEach(t),XKr=i(bi),z$=n(bi,"P",{});var GWe=s(z$);zKr=r(GWe,"This class cannot be instantiated directly using "),a0e=n(GWe,"CODE",{});var uXt=s(a0e);QKr=r(uXt,"__init__()"),uXt.forEach(t),WKr=r(GWe," (throws an error)."),GWe.forEach(t),HKr=i(bi),ea=n(bi,"DIV",{class:!0});var OA=s(ea);T(Q$.$$.fragment,OA),UKr=i(OA),n0e=n(OA,"P",{});var bXt=s(n0e);JKr=r(bXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bXt.forEach(t),YKr=i(OA),Ff=n(OA,"P",{});var lae=s(Ff);KKr=r(lae,`Note:
Loading a model from its configuration file does `),s0e=n(lae,"STRONG",{});var vXt=s(s0e);ZKr=r(vXt,"not"),vXt.forEach(t),eZr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(lae,"A",{href:!0});var FXt=s(Koe);oZr=r(FXt,"from_pretrained()"),FXt.forEach(t),rZr=r(lae," to load the model weights."),lae.forEach(t),tZr=i(OA),T(d0.$$.fragment,OA),OA.forEach(t),aZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(W$.$$.fragment,vi),nZr=i(vi),l0e=n(vi,"P",{});var TXt=s(l0e);sZr=r(TXt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TXt.forEach(t),lZr=i(vi),yn=n(vi,"P",{});var VA=s(yn);iZr=r(VA,"The model class to instantiate is selected based on the "),i0e=n(VA,"CODE",{});var MXt=s(i0e);dZr=r(MXt,"model_type"),MXt.forEach(t),cZr=r(VA,` property of the config object (either
passed as an argument or loaded from `),d0e=n(VA,"CODE",{});var EXt=s(d0e);fZr=r(EXt,"pretrained_model_name_or_path"),EXt.forEach(t),mZr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=n(VA,"CODE",{});var CXt=s(c0e);gZr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),hZr=r(VA,":"),VA.forEach(t),pZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);c0=n(Mo,"LI",{});var MVe=s(c0);f0e=n(MVe,"STRONG",{});var wXt=s(f0e);_Zr=r(wXt,"albert"),wXt.forEach(t),uZr=r(MVe," \u2014 "),Zoe=n(MVe,"A",{href:!0});var AXt=s(Zoe);bZr=r(AXt,"FlaxAlbertForMultipleChoice"),AXt.forEach(t),vZr=r(MVe," (ALBERT model)"),MVe.forEach(t),FZr=i(Mo),f0=n(Mo,"LI",{});var EVe=s(f0);m0e=n(EVe,"STRONG",{});var LXt=s(m0e);TZr=r(LXt,"bert"),LXt.forEach(t),MZr=r(EVe," \u2014 "),ere=n(EVe,"A",{href:!0});var yXt=s(ere);EZr=r(yXt,"FlaxBertForMultipleChoice"),yXt.forEach(t),CZr=r(EVe," (BERT model)"),EVe.forEach(t),wZr=i(Mo),m0=n(Mo,"LI",{});var CVe=s(m0);g0e=n(CVe,"STRONG",{});var xXt=s(g0e);AZr=r(xXt,"big_bird"),xXt.forEach(t),LZr=r(CVe," \u2014 "),ore=n(CVe,"A",{href:!0});var $Xt=s(ore);yZr=r($Xt,"FlaxBigBirdForMultipleChoice"),$Xt.forEach(t),xZr=r(CVe," (BigBird model)"),CVe.forEach(t),$Zr=i(Mo),g0=n(Mo,"LI",{});var wVe=s(g0);h0e=n(wVe,"STRONG",{});var kXt=s(h0e);kZr=r(kXt,"distilbert"),kXt.forEach(t),SZr=r(wVe," \u2014 "),rre=n(wVe,"A",{href:!0});var SXt=s(rre);RZr=r(SXt,"FlaxDistilBertForMultipleChoice"),SXt.forEach(t),PZr=r(wVe," (DistilBERT model)"),wVe.forEach(t),BZr=i(Mo),h0=n(Mo,"LI",{});var AVe=s(h0);p0e=n(AVe,"STRONG",{});var RXt=s(p0e);IZr=r(RXt,"electra"),RXt.forEach(t),NZr=r(AVe," \u2014 "),tre=n(AVe,"A",{href:!0});var PXt=s(tre);qZr=r(PXt,"FlaxElectraForMultipleChoice"),PXt.forEach(t),jZr=r(AVe," (ELECTRA model)"),AVe.forEach(t),DZr=i(Mo),p0=n(Mo,"LI",{});var LVe=s(p0);_0e=n(LVe,"STRONG",{});var BXt=s(_0e);GZr=r(BXt,"roberta"),BXt.forEach(t),OZr=r(LVe," \u2014 "),are=n(LVe,"A",{href:!0});var IXt=s(are);VZr=r(IXt,"FlaxRobertaForMultipleChoice"),IXt.forEach(t),XZr=r(LVe," (RoBERTa model)"),LVe.forEach(t),zZr=i(Mo),_0=n(Mo,"LI",{});var yVe=s(_0);u0e=n(yVe,"STRONG",{});var NXt=s(u0e);QZr=r(NXt,"roformer"),NXt.forEach(t),WZr=r(yVe," \u2014 "),nre=n(yVe,"A",{href:!0});var qXt=s(nre);HZr=r(qXt,"FlaxRoFormerForMultipleChoice"),qXt.forEach(t),UZr=r(yVe," (RoFormer model)"),yVe.forEach(t),JZr=i(Mo),u0=n(Mo,"LI",{});var xVe=s(u0);b0e=n(xVe,"STRONG",{});var jXt=s(b0e);YZr=r(jXt,"xlm-roberta"),jXt.forEach(t),KZr=r(xVe," \u2014 "),sre=n(xVe,"A",{href:!0});var DXt=s(sre);ZZr=r(DXt,"FlaxXLMRobertaForMultipleChoice"),DXt.forEach(t),eet=r(xVe," (XLM-RoBERTa model)"),xVe.forEach(t),Mo.forEach(t),oet=i(vi),T(b0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Rze=i(f),Tf=n(f,"H2",{class:!0});var OWe=s(Tf);v0=n(OWe,"A",{id:!0,class:!0,href:!0});var GXt=s(v0);v0e=n(GXt,"SPAN",{});var OXt=s(v0e);T(H$.$$.fragment,OXt),OXt.forEach(t),GXt.forEach(t),ret=i(OWe),F0e=n(OWe,"SPAN",{});var VXt=s(F0e);tet=r(VXt,"FlaxAutoModelForNextSentencePrediction"),VXt.forEach(t),OWe.forEach(t),Pze=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(U$.$$.fragment,Fi),aet=i(Fi),Mf=n(Fi,"P",{});var iae=s(Mf);net=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lre=n(iae,"A",{href:!0});var XXt=s(lre);set=r(XXt,"from_pretrained()"),XXt.forEach(t),iet=r(iae," class method or the "),ire=n(iae,"A",{href:!0});var zXt=s(ire);det=r(zXt,"from_config()"),zXt.forEach(t),cet=r(iae,` class
method.`),iae.forEach(t),fet=i(Fi),J$=n(Fi,"P",{});var VWe=s(J$);met=r(VWe,"This class cannot be instantiated directly using "),T0e=n(VWe,"CODE",{});var QXt=s(T0e);get=r(QXt,"__init__()"),QXt.forEach(t),het=r(VWe," (throws an error)."),VWe.forEach(t),pet=i(Fi),oa=n(Fi,"DIV",{class:!0});var XA=s(oa);T(Y$.$$.fragment,XA),_et=i(XA),M0e=n(XA,"P",{});var WXt=s(M0e);uet=r(WXt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WXt.forEach(t),bet=i(XA),Ef=n(XA,"P",{});var dae=s(Ef);vet=r(dae,`Note:
Loading a model from its configuration file does `),E0e=n(dae,"STRONG",{});var HXt=s(E0e);Fet=r(HXt,"not"),HXt.forEach(t),Tet=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(dae,"A",{href:!0});var UXt=s(dre);Met=r(UXt,"from_pretrained()"),UXt.forEach(t),Eet=r(dae," to load the model weights."),dae.forEach(t),Cet=i(XA),T(F0.$$.fragment,XA),XA.forEach(t),wet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(K$.$$.fragment,Ti),Aet=i(Ti),C0e=n(Ti,"P",{});var JXt=s(C0e);Let=r(JXt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JXt.forEach(t),yet=i(Ti),xn=n(Ti,"P",{});var zA=s(xn);xet=r(zA,"The model class to instantiate is selected based on the "),w0e=n(zA,"CODE",{});var YXt=s(w0e);$et=r(YXt,"model_type"),YXt.forEach(t),ket=r(zA,` property of the config object (either
passed as an argument or loaded from `),A0e=n(zA,"CODE",{});var KXt=s(A0e);Set=r(KXt,"pretrained_model_name_or_path"),KXt.forEach(t),Ret=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(zA,"CODE",{});var ZXt=s(L0e);Pet=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),Bet=r(zA,":"),zA.forEach(t),Iet=i(Ti),y0e=n(Ti,"UL",{});var ezt=s(y0e);T0=n(ezt,"LI",{});var $Ve=s(T0);x0e=n($Ve,"STRONG",{});var ozt=s(x0e);Net=r(ozt,"bert"),ozt.forEach(t),qet=r($Ve," \u2014 "),cre=n($Ve,"A",{href:!0});var rzt=s(cre);jet=r(rzt,"FlaxBertForNextSentencePrediction"),rzt.forEach(t),Det=r($Ve," (BERT model)"),$Ve.forEach(t),ezt.forEach(t),Get=i(Ti),T(M0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Bze=i(f),Cf=n(f,"H2",{class:!0});var XWe=s(Cf);E0=n(XWe,"A",{id:!0,class:!0,href:!0});var tzt=s(E0);$0e=n(tzt,"SPAN",{});var azt=s($0e);T(Z$.$$.fragment,azt),azt.forEach(t),tzt.forEach(t),Oet=i(XWe),k0e=n(XWe,"SPAN",{});var nzt=s(k0e);Vet=r(nzt,"FlaxAutoModelForImageClassification"),nzt.forEach(t),XWe.forEach(t),Ize=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(ek.$$.fragment,Mi),Xet=i(Mi),wf=n(Mi,"P",{});var cae=s(wf);zet=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fre=n(cae,"A",{href:!0});var szt=s(fre);Qet=r(szt,"from_pretrained()"),szt.forEach(t),Wet=r(cae," class method or the "),mre=n(cae,"A",{href:!0});var lzt=s(mre);Het=r(lzt,"from_config()"),lzt.forEach(t),Uet=r(cae,` class
method.`),cae.forEach(t),Jet=i(Mi),ok=n(Mi,"P",{});var zWe=s(ok);Yet=r(zWe,"This class cannot be instantiated directly using "),S0e=n(zWe,"CODE",{});var izt=s(S0e);Ket=r(izt,"__init__()"),izt.forEach(t),Zet=r(zWe," (throws an error)."),zWe.forEach(t),eot=i(Mi),ra=n(Mi,"DIV",{class:!0});var QA=s(ra);T(rk.$$.fragment,QA),oot=i(QA),R0e=n(QA,"P",{});var dzt=s(R0e);rot=r(dzt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dzt.forEach(t),tot=i(QA),Af=n(QA,"P",{});var fae=s(Af);aot=r(fae,`Note:
Loading a model from its configuration file does `),P0e=n(fae,"STRONG",{});var czt=s(P0e);not=r(czt,"not"),czt.forEach(t),sot=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(fae,"A",{href:!0});var fzt=s(gre);lot=r(fzt,"from_pretrained()"),fzt.forEach(t),iot=r(fae," to load the model weights."),fae.forEach(t),dot=i(QA),T(C0.$$.fragment,QA),QA.forEach(t),cot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(tk.$$.fragment,Ei),fot=i(Ei),B0e=n(Ei,"P",{});var mzt=s(B0e);mot=r(mzt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mzt.forEach(t),got=i(Ei),$n=n(Ei,"P",{});var WA=s($n);hot=r(WA,"The model class to instantiate is selected based on the "),I0e=n(WA,"CODE",{});var gzt=s(I0e);pot=r(gzt,"model_type"),gzt.forEach(t),_ot=r(WA,` property of the config object (either
passed as an argument or loaded from `),N0e=n(WA,"CODE",{});var hzt=s(N0e);uot=r(hzt,"pretrained_model_name_or_path"),hzt.forEach(t),bot=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(WA,"CODE",{});var pzt=s(q0e);vot=r(pzt,"pretrained_model_name_or_path"),pzt.forEach(t),Fot=r(WA,":"),WA.forEach(t),Tot=i(Ei),ak=n(Ei,"UL",{});var QWe=s(ak);w0=n(QWe,"LI",{});var kVe=s(w0);j0e=n(kVe,"STRONG",{});var _zt=s(j0e);Mot=r(_zt,"beit"),_zt.forEach(t),Eot=r(kVe," \u2014 "),hre=n(kVe,"A",{href:!0});var uzt=s(hre);Cot=r(uzt,"FlaxBeitForImageClassification"),uzt.forEach(t),wot=r(kVe," (BEiT model)"),kVe.forEach(t),Aot=i(QWe),A0=n(QWe,"LI",{});var SVe=s(A0);D0e=n(SVe,"STRONG",{});var bzt=s(D0e);Lot=r(bzt,"vit"),bzt.forEach(t),yot=r(SVe," \u2014 "),pre=n(SVe,"A",{href:!0});var vzt=s(pre);xot=r(vzt,"FlaxViTForImageClassification"),vzt.forEach(t),$ot=r(SVe," (ViT model)"),SVe.forEach(t),QWe.forEach(t),kot=i(Ei),T(L0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),Nze=i(f),Lf=n(f,"H2",{class:!0});var WWe=s(Lf);y0=n(WWe,"A",{id:!0,class:!0,href:!0});var Fzt=s(y0);G0e=n(Fzt,"SPAN",{});var Tzt=s(G0e);T(nk.$$.fragment,Tzt),Tzt.forEach(t),Fzt.forEach(t),Sot=i(WWe),O0e=n(WWe,"SPAN",{});var Mzt=s(O0e);Rot=r(Mzt,"FlaxAutoModelForVision2Seq"),Mzt.forEach(t),WWe.forEach(t),qze=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(sk.$$.fragment,Ci),Pot=i(Ci),yf=n(Ci,"P",{});var mae=s(yf);Bot=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_re=n(mae,"A",{href:!0});var Ezt=s(_re);Iot=r(Ezt,"from_pretrained()"),Ezt.forEach(t),Not=r(mae," class method or the "),ure=n(mae,"A",{href:!0});var Czt=s(ure);qot=r(Czt,"from_config()"),Czt.forEach(t),jot=r(mae,` class
method.`),mae.forEach(t),Dot=i(Ci),lk=n(Ci,"P",{});var HWe=s(lk);Got=r(HWe,"This class cannot be instantiated directly using "),V0e=n(HWe,"CODE",{});var wzt=s(V0e);Oot=r(wzt,"__init__()"),wzt.forEach(t),Vot=r(HWe," (throws an error)."),HWe.forEach(t),Xot=i(Ci),ta=n(Ci,"DIV",{class:!0});var HA=s(ta);T(ik.$$.fragment,HA),zot=i(HA),X0e=n(HA,"P",{});var Azt=s(X0e);Qot=r(Azt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Azt.forEach(t),Wot=i(HA),xf=n(HA,"P",{});var gae=s(xf);Hot=r(gae,`Note:
Loading a model from its configuration file does `),z0e=n(gae,"STRONG",{});var Lzt=s(z0e);Uot=r(Lzt,"not"),Lzt.forEach(t),Jot=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(gae,"A",{href:!0});var yzt=s(bre);Yot=r(yzt,"from_pretrained()"),yzt.forEach(t),Kot=r(gae," to load the model weights."),gae.forEach(t),Zot=i(HA),T(x0.$$.fragment,HA),HA.forEach(t),ert=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(dk.$$.fragment,wi),ort=i(wi),Q0e=n(wi,"P",{});var xzt=s(Q0e);rrt=r(xzt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xzt.forEach(t),trt=i(wi),kn=n(wi,"P",{});var UA=s(kn);art=r(UA,"The model class to instantiate is selected based on the "),W0e=n(UA,"CODE",{});var $zt=s(W0e);nrt=r($zt,"model_type"),$zt.forEach(t),srt=r(UA,` property of the config object (either
passed as an argument or loaded from `),H0e=n(UA,"CODE",{});var kzt=s(H0e);lrt=r(kzt,"pretrained_model_name_or_path"),kzt.forEach(t),irt=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(UA,"CODE",{});var Szt=s(U0e);drt=r(Szt,"pretrained_model_name_or_path"),Szt.forEach(t),crt=r(UA,":"),UA.forEach(t),frt=i(wi),J0e=n(wi,"UL",{});var Rzt=s(J0e);$0=n(Rzt,"LI",{});var RVe=s($0);Y0e=n(RVe,"STRONG",{});var Pzt=s(Y0e);mrt=r(Pzt,"vision-encoder-decoder"),Pzt.forEach(t),grt=r(RVe," \u2014 "),vre=n(RVe,"A",{href:!0});var Bzt=s(vre);hrt=r(Bzt,"FlaxVisionEncoderDecoderModel"),Bzt.forEach(t),prt=r(RVe," (Vision Encoder decoder model)"),RVe.forEach(t),Rzt.forEach(t),_rt=i(wi),T(k0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(GWt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(IS,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(NS,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertConfig"),c(qS,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartConfig"),c(jS,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitConfig"),c(DS,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertConfig"),c(GS,"href","/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(OS,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdConfig"),c(VS,"href","/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(XS,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(zS,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(QS,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomConfig"),c(WS,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertConfig"),c(HS,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineConfig"),c(US,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPConfig"),c(JS,"href","/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenConfig"),c(YS,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertConfig"),c(KS,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextConfig"),c(ZS,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLConfig"),c(eR,"href","/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtConfig"),c(oR,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rR,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tR,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(aR,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaConfig"),c(nR,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sR,"href","/docs/transformers/pr_17963/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lR,"href","/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTConfig"),c(iR,"href","/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrConfig"),c(dR,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertConfig"),c(cR,"href","/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRConfig"),c(fR,"href","/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTConfig"),c(mR,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraConfig"),c(gR,"href","/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hR,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pR,"href","/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaConfig"),c(_R,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetConfig"),c(uR,"href","/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTConfig"),c(bR,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelConfig"),c(vR,"href","/docs/transformers/pr_17963/en/model_doc/glpn#transformers.GLPNConfig"),c(FR,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Config"),c(TR,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(MR,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(ER,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJConfig"),c(CR,"href","/docs/transformers/pr_17963/en/model_doc/groupvit#transformers.GroupViTConfig"),c(wR,"href","/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertConfig"),c(AR,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertConfig"),c(LR,"href","/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(yR,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(xR,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c($R,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(kR,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDConfig"),c(SR,"href","/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitConfig"),c(RR,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerConfig"),c(PR,"href","/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Config"),c(BR,"href","/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeConfig"),c(IR,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertConfig"),c(NR,"href","/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100Config"),c(qR,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianConfig"),c(jR,"href","/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(DR,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartConfig"),c(GR,"href","/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTConfig"),c(OR,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(VR,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(XR,"href","/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(zR,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetConfig"),c(QR,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Config"),c(WR,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpConfig"),c(HR,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaConfig"),c(UR,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(JR,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(YR,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTConfig"),c(KR,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusConfig"),c(ZR,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverConfig"),c(eP,"href","/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartConfig"),c(oP,"href","/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(rP,"href","/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(tP,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(aP,"href","/docs/transformers/pr_17963/en/model_doc/rag#transformers.RagConfig"),c(nP,"href","/docs/transformers/pr_17963/en/model_doc/realm#transformers.RealmConfig"),c(sP,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerConfig"),c(lP,"href","/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetConfig"),c(iP,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertConfig"),c(dP,"href","/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetConfig"),c(cP,"href","/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertConfig"),c(fP,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaConfig"),c(mP,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerConfig"),c(gP,"href","/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerConfig"),c(hP,"href","/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWConfig"),c(pP,"href","/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDConfig"),c(_P,"href","/docs/transformers/pr_17963/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(uP,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(bP,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(vP,"href","/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterConfig"),c(FP,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(TP,"href","/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinConfig"),c(MP,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Config"),c(EP,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasConfig"),c(CP,"href","/docs/transformers/pr_17963/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(wP,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AP,"href","/docs/transformers/pr_17963/en/model_doc/trocr#transformers.TrOCRConfig"),c(LP,"href","/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(yP,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xP,"href","/docs/transformers/pr_17963/en/model_doc/van#transformers.VanConfig"),c($P,"href","/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltConfig"),c(kP,"href","/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(SP,"href","/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(RP,"href","/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(PP,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTConfig"),c(BP,"href","/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(IP,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(NP,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(qP,"href","/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMConfig"),c(jP,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMConfig"),c(DP,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMConfig"),c(GP,"href","/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(OP,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(VP,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(XP,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetConfig"),c(zP,"href","/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosConfig"),c(QP,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoTokenizer"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(WP,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(HP,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertTokenizer"),c(UP,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartTokenizer"),c(YP,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartTokenizerFast"),c(KP,"href","/docs/transformers/pr_17963/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ZP,"href","/docs/transformers/pr_17963/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(eB,"href","/docs/transformers/pr_17963/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(oB,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizer"),c(rB,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(aB,"href","/docs/transformers/pr_17963/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(nB,"href","/docs/transformers/pr_17963/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(sB,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(lB,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(iB,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dB,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cB,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(fB,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(mB,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(gB,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(hB,"href","/docs/transformers/pr_17963/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(pB,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertTokenizer"),c(_B,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineTokenizer"),c(bB,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPTokenizer"),c(vB,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(FB,"href","/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(TB,"href","/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(MB,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(EB,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17963/en/model_doc/cpm#transformers.CpmTokenizer"),c(wB,"href","/docs/transformers/pr_17963/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(AB,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(LB,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yB,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xB,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaTokenizer"),c($B,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(SB,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(RB,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(PB,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(BB,"href","/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(IB,"href","/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(NB,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraTokenizer"),c(qB,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(jB,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(DB,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetTokenizer"),c(GB,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(OB,"href","/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(VB,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelTokenizer"),c(XB,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(zB,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QB,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WB,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UB,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(JB,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YB,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KB,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZB,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eI,"href","/docs/transformers/pr_17963/en/model_doc/herbert#transformers.HerbertTokenizer"),c(oI,"href","/docs/transformers/pr_17963/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(rI,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tI,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aI,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nI,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(sI,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(lI,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(iI,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(dI,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(cI,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(fI,"href","/docs/transformers/pr_17963/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(mI,"href","/docs/transformers/pr_17963/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(gI,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDTokenizer"),c(hI,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDTokenizerFast"),c(pI,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerTokenizer"),c(_I,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(uI,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Tokenizer"),c(bI,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5TokenizerFast"),c(vI,"href","/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeTokenizer"),c(FI,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(TI,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(EI,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianTokenizer"),c(CI,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartTokenizer"),c(wI,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(AI,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(LI,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(yI,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_17963/en/model_doc/mluke#transformers.MLukeTokenizer"),c(kI,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(SI,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(PI,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(BI,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Tokenizer"),c(II,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5TokenizerFast"),c(NI,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpTokenizer"),c(qI,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(jI,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizer"),c(DI,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizerFast"),c(GI,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertTokenizer"),c(OI,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VI,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XI,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zI,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QI,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WI,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HI,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(UI,"href","/docs/transformers/pr_17963/en/model_doc/phobert#transformers.PhobertTokenizer"),c(JI,"href","/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartTokenizer"),c(YI,"href","/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(KI,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizer"),c(ZI,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizerFast"),c(eN,"href","/docs/transformers/pr_17963/en/model_doc/rag#transformers.RagTokenizer"),c(oN,"href","/docs/transformers/pr_17963/en/model_doc/realm#transformers.RealmTokenizer"),c(rN,"href","/docs/transformers/pr_17963/en/model_doc/realm#transformers.RealmTokenizerFast"),c(tN,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerTokenizer"),c(aN,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(nN,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertTokenizer"),c(sN,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(iN,"href","/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(dN,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cN,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(mN,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(gN,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(hN,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(pN,"href","/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterTokenizer"),c(_N,"href","/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(uN,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(bN,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(vN,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Tokenizer"),c(FN,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5TokenizerFast"),c(TN,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasTokenizer"),c(MN,"href","/docs/transformers/pr_17963/en/model_doc/tapex#transformers.TapexTokenizer"),c(EN,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(CN,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizer"),c(wN,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizerFast"),c(AN,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizer"),c(LN,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertTokenizerFast"),c(yN,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xN,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($N,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kN,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMTokenizer"),c(SN,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(RN,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMTokenizer"),c(PN,"href","/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(BN,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(IN,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NN,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qN,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jN,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(DN,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(GN,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertTokenizer"),c(ON,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoFeatureExtractor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(VN,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(XN,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UN,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17963/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tq,"href","/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(nq,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(sq,"href","/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(up,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"id","transformers.AutoProcessor"),c(bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Cq,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wq,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPProcessor"),c(Aq,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPProcessor"),c(Lq,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yq,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(xq,"href","/docs/transformers/pr_17963/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($q,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Sq,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Rq,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Pq,"href","/docs/transformers/pr_17963/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Bq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Iq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltProcessor"),c(qq,"href","/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(jq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Dq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"id","transformers.AutoModel"),c(Dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Oq,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vq,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xq,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zq,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertModel"),c(Qq,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartModel"),c(Wq,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitModel"),c(Hq,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertModel"),c(Uq,"href","/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Jq,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdModel"),c(Yq,"href","/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Kq,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Zq,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ej,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomModel"),c(oj,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertModel"),c(rj,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineModel"),c(tj,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.CLIPModel"),c(aj,"href","/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenModel"),c(nj,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertModel"),c(sj,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextModel"),c(lj,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLModel"),c(ij,"href","/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtModel"),c(dj,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(cj,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(fj,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(mj,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaModel"),c(gj,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(hj,"href","/docs/transformers/pr_17963/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(pj,"href","/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTModel"),c(_j,"href","/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrModel"),c(uj,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertModel"),c(bj,"href","/docs/transformers/pr_17963/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(vj,"href","/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTModel"),c(Fj,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraModel"),c(Tj,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertModel"),c(Mj,"href","/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaModel"),c(Ej,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetModel"),c(Cj,"href","/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTModel"),c(wj,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelModel"),c(Aj,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Lj,"href","/docs/transformers/pr_17963/en/model_doc/glpn#transformers.GLPNModel"),c(yj,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2Model"),c(xj,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c($j,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(kj,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJModel"),c(Sj,"href","/docs/transformers/pr_17963/en/model_doc/groupvit#transformers.GroupViTModel"),c(Rj,"href","/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertModel"),c(Pj,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertModel"),c(Bj,"href","/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Ij,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Nj,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(qj,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(jj,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDModel"),c(Dj,"href","/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitModel"),c(Gj,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerModel"),c(Oj,"href","/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5Model"),c(Vj,"href","/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeModel"),c(Xj,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertModel"),c(zj,"href","/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100Model"),c(Qj,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianModel"),c(Wj,"href","/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Hj,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartModel"),c(Uj,"href","/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTModel"),c(Jj,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Yj,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Kj,"href","/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTModel"),c(Zj,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetModel"),c(eD,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5Model"),c(oD,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpModel"),c(rD,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaModel"),c(tD,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerModel"),c(aD,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(nD,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTModel"),c(sD,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusModel"),c(lD,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverModel"),c(iD,"href","/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartModel"),c(dD,"href","/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerModel"),c(cD,"href","/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(fD,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertModel"),c(mD,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerModel"),c(gD,"href","/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetModel"),c(hD,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertModel"),c(pD,"href","/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetModel"),c(_D,"href","/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertModel"),c(uD,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaModel"),c(bD,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerModel"),c(vD,"href","/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerModel"),c(FD,"href","/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWModel"),c(TD,"href","/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDModel"),c(MD,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ED,"href","/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterModel"),c(CD,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(wD,"href","/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinModel"),c(AD,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5Model"),c(LD,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasModel"),c(yD,"href","/docs/transformers/pr_17963/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(xD,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c($D,"href","/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechModel"),c(kD,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(SD,"href","/docs/transformers/pr_17963/en/model_doc/van#transformers.VanModel"),c(RD,"href","/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltModel"),c(PD,"href","/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(BD,"href","/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ID,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTModel"),c(ND,"href","/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(qD,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(jD,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(DD,"href","/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMModel"),c(GD,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMModel"),c(OD,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMModel"),c(VD,"href","/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(XD,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zD,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(QD,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetModel"),c(WD,"href","/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosModel"),c(HD,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"id","transformers.AutoModelForPreTraining"),c(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(UD,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JD,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YD,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KD,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForPreTraining"),c(ZD,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForPreTraining"),c(oG,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(rG,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForCausalLM"),c(tG,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aG,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nG,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sG,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lG,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iG,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dG,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForPreTraining"),c(cG,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fG,"href","/docs/transformers/pr_17963/en/model_doc/flava#transformers.FlavaForPreTraining"),c(mG,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gG,"href","/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(pG,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_G,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bG,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vG,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FG,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TG,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MG,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EG,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(wG,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AG,"href","/docs/transformers/pr_17963/en/model_doc/retribert#transformers.RetriBertModel"),c(LG,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yG,"href","/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xG,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($G,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SG,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RG,"href","/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PG,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BG,"href","/docs/transformers/pr_17963/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(IG,"href","/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(NG,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qG,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jG,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DG,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GG,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OG,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForCausalLM"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(VG,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XG,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zG,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QG,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForCausalLM"),c(WG,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertLMHeadModel"),c(HG,"href","/docs/transformers/pr_17963/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(UG,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(JG,"href","/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(YG,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(KG,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ZG,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForCausalLM"),c(eO,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(oO,"href","/docs/transformers/pr_17963/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(rO,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tO,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(aO,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForCausalLM"),c(nO,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sO,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(lO,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(iO,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(dO,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianForCausalLM"),c(cO,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForCausalLM"),c(fO,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(mO,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForCausalLM"),c(gO,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hO,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.OPTForCausalLM"),c(pO,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(_O,"href","/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(uO,"href","/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(bO,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(vO,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(FO,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(TO,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(MO,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(EO,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(CO,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wO,"href","/docs/transformers/pr_17963/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(AO,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(LO,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yO,"href","/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(xO,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c($O,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(kO,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForMaskedLM"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(SO,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RO,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(IO,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForMaskedLM"),c(qO,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(jO,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(DO,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(GO,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(OO,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(VO,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(XO,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zO,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(QO,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WO,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(HO,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(UO,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(JO,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(YO,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(KO,"href","/docs/transformers/pr_17963/en/model_doc/luke#transformers.LukeForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oV,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tV,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(nV,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sV,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lV,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dV,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fV,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(mV,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hV,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pV,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_V,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(uV,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForSeq2SeqLM"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(bV,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MV,"href","/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(EV,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AV,"href","/docs/transformers/pr_17963/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_17963/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17963/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.MarianMTModel"),c(kV,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17963/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17963/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(jV,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17963/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c($X,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForMultipleChoice"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(qX,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(OX,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForMultipleChoice"),c(VX,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(XX,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(zX,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(QX,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.AutoModelForNextSentencePrediction"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(uz,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Tz,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Mz,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Ez,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Cz,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(wz,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.AutoModelForTokenClassification"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForTokenClassification"),c($z,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForTokenClassification"),c(kz,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17963/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(qz,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jz,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(zz,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForQuestionAnswering"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17963/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17963/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(yQ,"href","/docs/transformers/pr_17963/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17963/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17963/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17963/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17963/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17963/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17963/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17963/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17963/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17963/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17963/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(KQ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(oW,"href","/docs/transformers/pr_17963/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForTableQuestionAnswering"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(rW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.AutoModelForImageClassification"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(sW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitForImageClassification"),c(cW,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(fW,"href","/docs/transformers/pr_17963/en/model_doc/cvt#transformers.CvtForImageClassification"),c(mW,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(gW,"href","/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTForImageClassification"),c(hW,"href","/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(pW,"href","/docs/transformers/pr_17963/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(_W,"href","/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitForImageClassification"),c(uW,"href","/docs/transformers/pr_17963/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(bW,"href","/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(vW,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(FW,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(TW,"href","/docs/transformers/pr_17963/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(MW,"href","/docs/transformers/pr_17963/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(EW,"href","/docs/transformers/pr_17963/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(CW,"href","/docs/transformers/pr_17963/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(wW,"href","/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(AW,"href","/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinForImageClassification"),c(LW,"href","/docs/transformers/pr_17963/en/model_doc/van#transformers.VanForImageClassification"),c(yW,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.AutoModelForVision2Seq"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(xW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(RW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17963/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.AutoModelForAudioClassification"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForAudioFrameClassification"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(ZW,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(eH,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(oH,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(rH,"href","/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForCTC"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(tH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(lH,"href","/docs/transformers/pr_17963/en/model_doc/hubert#transformers.HubertForCTC"),c(iH,"href","/docs/transformers/pr_17963/en/model_doc/mctct#transformers.MCTCTForCTC"),c(dH,"href","/docs/transformers/pr_17963/en/model_doc/sew#transformers.SEWForCTC"),c(cH,"href","/docs/transformers/pr_17963/en/model_doc/sew-d#transformers.SEWDForCTC"),c(fH,"href","/docs/transformers/pr_17963/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(mH,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(gH,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(hH,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(pH,"href","/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(_H,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17963/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(FH,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForAudioXVector"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(TH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(wH,"href","/docs/transformers/pr_17963/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(AH,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(LH,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(yH,"href","/docs/transformers/pr_17963/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForMaskedImageModeling"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(xH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17963/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(RH,"href","/docs/transformers/pr_17963/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(PH,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForObjectDetection"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrForObjectDetection"),c(jH,"href","/docs/transformers/pr_17963/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForImageSegmentation"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(DH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17963/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.AutoModelForSemanticSegmentation"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(XH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(HH,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(UH,"href","/docs/transformers/pr_17963/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(JH,"href","/docs/transformers/pr_17963/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(YH,"href","/docs/transformers/pr_17963/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.AutoModelForInstanceSegmentation"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(KH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17963/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.TFAutoModel"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(rU,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertModel"),c(sU,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.TFBartModel"),c(lU,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertModel"),c(iU,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(dU,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(cU,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertModel"),c(fU,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.TFCLIPModel"),c(mU,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertModel"),c(gU,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.TFConvNextModel"),c(hU,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLModel"),c(pU,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(_U,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaModel"),c(uU,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(bU,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(vU,"href","/docs/transformers/pr_17963/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(FU,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraModel"),c(TU,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(MU,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelModel"),c(EU,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(CU,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2Model"),c(wU,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJModel"),c(AU,"href","/docs/transformers/pr_17963/en/model_doc/hubert#transformers.TFHubertModel"),c(LU,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(yU,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.TFLEDModel"),c(xU,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerModel"),c($U,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.TFLxmertModel"),c(kU,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.TFMarianModel"),c(SU,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.TFMBartModel"),c(RU,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(PU,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetModel"),c(BU,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.TFMT5Model"),c(IU,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(NU,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.TFOPTModel"),c(qU,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.TFPegasusModel"),c(jU,"href","/docs/transformers/pr_17963/en/model_doc/regnet#transformers.TFRegNetModel"),c(DU,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertModel"),c(GU,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaModel"),c(OU,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerModel"),c(VU,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(XU,"href","/docs/transformers/pr_17963/en/model_doc/swin#transformers.TFSwinModel"),c(zU,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.TFT5Model"),c(QU,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasModel"),c(WU,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(HU,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.TFViTModel"),c(UU,"href","/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(JU,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(YU,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMModel"),c(KU,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(ZU,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.TFAutoModelForPreTraining"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(aJ,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForPreTraining"),c(sJ,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iJ,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(cJ,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fJ,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(mJ,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gJ,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17963/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(pJ,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(_J,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bJ,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17963/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(EJ,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CJ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q9,"id","transformers.TFAutoModelForCausalLM"),c(q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q9,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(AJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertLMHeadModel"),c($J,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(kJ,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(RJ,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(PJ,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BJ,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(IJ,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(NJ,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(qJ,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(jJ,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DJ,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GJ,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForImageClassification"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_17963/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(QJ,"href","/docs/transformers/pr_17963/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(WJ,"href","/docs/transformers/pr_17963/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(HJ,"href","/docs/transformers/pr_17963/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(UJ,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForMaskedLM"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(eY,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(oY,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rY,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(tY,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(aY,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(nY,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sY,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(lY,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(iY,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(dY,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cY,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(fY,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(mY,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gY,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pY,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uY,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bY,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(AY,"href","/docs/transformers/pr_17963/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.TFMarianMTModel"),c(yY,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForSequenceClassification"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(SY,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17963/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17963/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17963/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForMultipleChoice"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(lK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(fK,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(mK,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(gK,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(LK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(kK,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(SK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/pr_17963/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForTokenClassification"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(DK,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(GK,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(VK,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(XK,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(zK,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(WK,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(UK,"href","/docs/transformers/pr_17963/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(JK,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(YK,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForQuestionAnswering"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17963/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(fZ,"href","/docs/transformers/pr_17963/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17963/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17963/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17963/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uZ,"href","/docs/transformers/pr_17963/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17963/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17963/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17963/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17963/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17963/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(AZ,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17963/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForVision2Seq"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(yZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17963/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModel"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertModel"),c(DZ,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartModel"),c(GZ,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.FlaxBeitModel"),c(OZ,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertModel"),c(VZ,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(XZ,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(zZ,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(QZ,"href","/docs/transformers/pr_17963/en/model_doc/clip#transformers.FlaxCLIPModel"),c(WZ,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(HZ,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraModel"),c(UZ,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(JZ,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(YZ,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(KZ,"href","/docs/transformers/pr_17963/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(ZZ,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.FlaxMarianModel"),c(eee,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartModel"),c(oee,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.FlaxMT5Model"),c(ree,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.FlaxOPTModel"),c(tee,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(aee,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(nee,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(see,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.FlaxT5Model"),c(lee,"href","/docs/transformers/pr_17963/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(iee,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.FlaxViTModel"),c(dee,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(cee,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(fee,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForCausalLM"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(mee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(_ee,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(uee,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(bee,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(vee,"href","/docs/transformers/pr_17963/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Fee,"href","/docs/transformers/pr_17963/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Tee,"href","/docs/transformers/pr_17963/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Mee,"href","/docs/transformers/pr_17963/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Eee,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Cee,"href","/docs/transformers/pr_17963/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForPreTraining"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(wee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(xee,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($ee,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(kee,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(See,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Ree,"href","/docs/transformers/pr_17963/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Bee,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Iee,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Nee,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(qee,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jee,"href","/docs/transformers/pr_17963/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Dee,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModelForMaskedLM"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(zee,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Qee,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Wee,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Hee,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Uee,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Jee,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Yee,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Kee,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(eoe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ooe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(roe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(toe,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_17963/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_17963/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(loe,"href","/docs/transformers/pr_17963/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ioe,"href","/docs/transformers/pr_17963/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(doe,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_17963/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_17963/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17963/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(goe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hoe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(poe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_oe,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(uoe,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(boe,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(voe,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Foe,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Toe,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Moe,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Eoe,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Coe,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(woe,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(Aoe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Loe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yoe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xoe,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c($oe,"href","/docs/transformers/pr_17963/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(koe,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_17963/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModelForTokenClassification"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(joe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Doe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Goe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ooe,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Voe,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Xoe,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(zoe,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Qoe,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Woe,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(Joe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yoe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Koe,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zoe,"href","/docs/transformers/pr_17963/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ere,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ore,"href","/docs/transformers/pr_17963/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(rre,"href","/docs/transformers/pr_17963/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(tre,"href","/docs/transformers/pr_17963/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(are,"href","/docs/transformers/pr_17963/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(nre,"href","/docs/transformers/pr_17963/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(sre,"href","/docs/transformers/pr_17963/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(lre,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_17963/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForImageClassification"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(fre,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/pr_17963/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(pre,"href","/docs/transformers/pr_17963/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.FlaxAutoModelForVision2Seq"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(_re,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ure,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bre,"href","/docs/transformers/pr_17963/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vre,"href","/docs/transformers/pr_17963/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,JA),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Rn),e(Rn,YA),e(Qe,Pn),e(Qe,Bn),e(Bn,KA),e(Qe,$i),e(Qe,In),e(In,ZA),e(Qe,ki),b(f,Bf,u),M(ka,f,u),b(f,We,u),b(f,Ae,u),e(Ae,$S),e(Ae,Si),e(Si,kS),e(Ae,SS),b(f,Co,u),b(f,Sa,u),e(Sa,RS),e(Sa,If),e(If,PS),e(Sa,UWe),b(f,PVe,u),b(f,Ri,u),e(Ri,Nf),e(Nf,hae),M(eL,hae,null),e(Ri,JWe),e(Ri,pae),e(pae,YWe),b(f,BVe,u),b(f,Nn,u),e(Nn,KWe),e(Nn,_ae),e(_ae,ZWe),e(Nn,eHe),e(Nn,uae),e(uae,oHe),e(Nn,rHe),b(f,IVe,u),M(oL,f,u),b(f,NVe,u),b(f,BS,u),e(BS,tHe),b(f,qVe,u),M(qf,f,u),b(f,jVe,u),b(f,Pi,u),e(Pi,jf),e(jf,bae),M(rL,bae,null),e(Pi,aHe),e(Pi,vae),e(vae,nHe),b(f,DVe,u),b(f,wo,u),M(tL,wo,null),e(wo,sHe),e(wo,aL),e(aL,lHe),e(aL,IS),e(IS,iHe),e(aL,dHe),e(wo,cHe),e(wo,nL),e(nL,fHe),e(nL,Fae),e(Fae,mHe),e(nL,gHe),e(wo,hHe),e(wo,Ar),M(sL,Ar,null),e(Ar,pHe),e(Ar,Tae),e(Tae,_He),e(Ar,uHe),e(Ar,Bi),e(Bi,bHe),e(Bi,Mae),e(Mae,vHe),e(Bi,FHe),e(Bi,Eae),e(Eae,THe),e(Bi,MHe),e(Ar,EHe),e(Ar,A),e(A,Df),e(Df,Cae),e(Cae,CHe),e(Df,wHe),e(Df,NS),e(NS,AHe),e(Df,LHe),e(A,yHe),e(A,Gf),e(Gf,wae),e(wae,xHe),e(Gf,$He),e(Gf,qS),e(qS,kHe),e(Gf,SHe),e(A,RHe),e(A,Of),e(Of,Aae),e(Aae,PHe),e(Of,BHe),e(Of,jS),e(jS,IHe),e(Of,NHe),e(A,qHe),e(A,Vf),e(Vf,Lae),e(Lae,jHe),e(Vf,DHe),e(Vf,DS),e(DS,GHe),e(Vf,OHe),e(A,VHe),e(A,Xf),e(Xf,yae),e(yae,XHe),e(Xf,zHe),e(Xf,GS),e(GS,QHe),e(Xf,WHe),e(A,HHe),e(A,zf),e(zf,xae),e(xae,UHe),e(zf,JHe),e(zf,OS),e(OS,YHe),e(zf,KHe),e(A,ZHe),e(A,Qf),e(Qf,$ae),e($ae,eUe),e(Qf,oUe),e(Qf,VS),e(VS,rUe),e(Qf,tUe),e(A,aUe),e(A,Wf),e(Wf,kae),e(kae,nUe),e(Wf,sUe),e(Wf,XS),e(XS,lUe),e(Wf,iUe),e(A,dUe),e(A,Hf),e(Hf,Sae),e(Sae,cUe),e(Hf,fUe),e(Hf,zS),e(zS,mUe),e(Hf,gUe),e(A,hUe),e(A,Uf),e(Uf,Rae),e(Rae,pUe),e(Uf,_Ue),e(Uf,QS),e(QS,uUe),e(Uf,bUe),e(A,vUe),e(A,Jf),e(Jf,Pae),e(Pae,FUe),e(Jf,TUe),e(Jf,WS),e(WS,MUe),e(Jf,EUe),e(A,CUe),e(A,Yf),e(Yf,Bae),e(Bae,wUe),e(Yf,AUe),e(Yf,HS),e(HS,LUe),e(Yf,yUe),e(A,xUe),e(A,Kf),e(Kf,Iae),e(Iae,$Ue),e(Kf,kUe),e(Kf,US),e(US,SUe),e(Kf,RUe),e(A,PUe),e(A,Zf),e(Zf,Nae),e(Nae,BUe),e(Zf,IUe),e(Zf,JS),e(JS,NUe),e(Zf,qUe),e(A,jUe),e(A,em),e(em,qae),e(qae,DUe),e(em,GUe),e(em,YS),e(YS,OUe),e(em,VUe),e(A,XUe),e(A,om),e(om,jae),e(jae,zUe),e(om,QUe),e(om,KS),e(KS,WUe),e(om,HUe),e(A,UUe),e(A,rm),e(rm,Dae),e(Dae,JUe),e(rm,YUe),e(rm,ZS),e(ZS,KUe),e(rm,ZUe),e(A,eJe),e(A,tm),e(tm,Gae),e(Gae,oJe),e(tm,rJe),e(tm,eR),e(eR,tJe),e(tm,aJe),e(A,nJe),e(A,am),e(am,Oae),e(Oae,sJe),e(am,lJe),e(am,oR),e(oR,iJe),e(am,dJe),e(A,cJe),e(A,nm),e(nm,Vae),e(Vae,fJe),e(nm,mJe),e(nm,rR),e(rR,gJe),e(nm,hJe),e(A,pJe),e(A,sm),e(sm,Xae),e(Xae,_Je),e(sm,uJe),e(sm,tR),e(tR,bJe),e(sm,vJe),e(A,FJe),e(A,lm),e(lm,zae),e(zae,TJe),e(lm,MJe),e(lm,aR),e(aR,EJe),e(lm,CJe),e(A,wJe),e(A,im),e(im,Qae),e(Qae,AJe),e(im,LJe),e(im,nR),e(nR,yJe),e(im,xJe),e(A,$Je),e(A,dm),e(dm,Wae),e(Wae,kJe),e(dm,SJe),e(dm,sR),e(sR,RJe),e(dm,PJe),e(A,BJe),e(A,cm),e(cm,Hae),e(Hae,IJe),e(cm,NJe),e(cm,lR),e(lR,qJe),e(cm,jJe),e(A,DJe),e(A,fm),e(fm,Uae),e(Uae,GJe),e(fm,OJe),e(fm,iR),e(iR,VJe),e(fm,XJe),e(A,zJe),e(A,mm),e(mm,Jae),e(Jae,QJe),e(mm,WJe),e(mm,dR),e(dR,HJe),e(mm,UJe),e(A,JJe),e(A,gm),e(gm,Yae),e(Yae,YJe),e(gm,KJe),e(gm,cR),e(cR,ZJe),e(gm,eYe),e(A,oYe),e(A,hm),e(hm,Kae),e(Kae,rYe),e(hm,tYe),e(hm,fR),e(fR,aYe),e(hm,nYe),e(A,sYe),e(A,pm),e(pm,Zae),e(Zae,lYe),e(pm,iYe),e(pm,mR),e(mR,dYe),e(pm,cYe),e(A,fYe),e(A,_m),e(_m,ene),e(ene,mYe),e(_m,gYe),e(_m,gR),e(gR,hYe),e(_m,pYe),e(A,_Ye),e(A,um),e(um,one),e(one,uYe),e(um,bYe),e(um,hR),e(hR,vYe),e(um,FYe),e(A,TYe),e(A,bm),e(bm,rne),e(rne,MYe),e(bm,EYe),e(bm,pR),e(pR,CYe),e(bm,wYe),e(A,AYe),e(A,vm),e(vm,tne),e(tne,LYe),e(vm,yYe),e(vm,_R),e(_R,xYe),e(vm,$Ye),e(A,kYe),e(A,Fm),e(Fm,ane),e(ane,SYe),e(Fm,RYe),e(Fm,uR),e(uR,PYe),e(Fm,BYe),e(A,IYe),e(A,Tm),e(Tm,nne),e(nne,NYe),e(Tm,qYe),e(Tm,bR),e(bR,jYe),e(Tm,DYe),e(A,GYe),e(A,Mm),e(Mm,sne),e(sne,OYe),e(Mm,VYe),e(Mm,vR),e(vR,XYe),e(Mm,zYe),e(A,QYe),e(A,Em),e(Em,lne),e(lne,WYe),e(Em,HYe),e(Em,FR),e(FR,UYe),e(Em,JYe),e(A,YYe),e(A,Cm),e(Cm,ine),e(ine,KYe),e(Cm,ZYe),e(Cm,TR),e(TR,eKe),e(Cm,oKe),e(A,rKe),e(A,wm),e(wm,dne),e(dne,tKe),e(wm,aKe),e(wm,MR),e(MR,nKe),e(wm,sKe),e(A,lKe),e(A,Am),e(Am,cne),e(cne,iKe),e(Am,dKe),e(Am,ER),e(ER,cKe),e(Am,fKe),e(A,mKe),e(A,Lm),e(Lm,fne),e(fne,gKe),e(Lm,hKe),e(Lm,CR),e(CR,pKe),e(Lm,_Ke),e(A,uKe),e(A,ym),e(ym,mne),e(mne,bKe),e(ym,vKe),e(ym,wR),e(wR,FKe),e(ym,TKe),e(A,MKe),e(A,xm),e(xm,gne),e(gne,EKe),e(xm,CKe),e(xm,AR),e(AR,wKe),e(xm,AKe),e(A,LKe),e(A,$m),e($m,hne),e(hne,yKe),e($m,xKe),e($m,LR),e(LR,$Ke),e($m,kKe),e(A,SKe),e(A,km),e(km,pne),e(pne,RKe),e(km,PKe),e(km,yR),e(yR,BKe),e(km,IKe),e(A,NKe),e(A,Sm),e(Sm,_ne),e(_ne,qKe),e(Sm,jKe),e(Sm,xR),e(xR,DKe),e(Sm,GKe),e(A,OKe),e(A,Rm),e(Rm,une),e(une,VKe),e(Rm,XKe),e(Rm,$R),e($R,zKe),e(Rm,QKe),e(A,WKe),e(A,Pm),e(Pm,bne),e(bne,HKe),e(Pm,UKe),e(Pm,kR),e(kR,JKe),e(Pm,YKe),e(A,KKe),e(A,Bm),e(Bm,vne),e(vne,ZKe),e(Bm,eZe),e(Bm,SR),e(SR,oZe),e(Bm,rZe),e(A,tZe),e(A,Im),e(Im,Fne),e(Fne,aZe),e(Im,nZe),e(Im,RR),e(RR,sZe),e(Im,lZe),e(A,iZe),e(A,Nm),e(Nm,Tne),e(Tne,dZe),e(Nm,cZe),e(Nm,PR),e(PR,fZe),e(Nm,mZe),e(A,gZe),e(A,qm),e(qm,Mne),e(Mne,hZe),e(qm,pZe),e(qm,BR),e(BR,_Ze),e(qm,uZe),e(A,bZe),e(A,jm),e(jm,Ene),e(Ene,vZe),e(jm,FZe),e(jm,IR),e(IR,TZe),e(jm,MZe),e(A,EZe),e(A,Dm),e(Dm,Cne),e(Cne,CZe),e(Dm,wZe),e(Dm,NR),e(NR,AZe),e(Dm,LZe),e(A,yZe),e(A,Gm),e(Gm,wne),e(wne,xZe),e(Gm,$Ze),e(Gm,qR),e(qR,kZe),e(Gm,SZe),e(A,RZe),e(A,Om),e(Om,Ane),e(Ane,PZe),e(Om,BZe),e(Om,jR),e(jR,IZe),e(Om,NZe),e(A,qZe),e(A,Vm),e(Vm,Lne),e(Lne,jZe),e(Vm,DZe),e(Vm,DR),e(DR,GZe),e(Vm,OZe),e(A,VZe),e(A,Xm),e(Xm,yne),e(yne,XZe),e(Xm,zZe),e(Xm,GR),e(GR,QZe),e(Xm,WZe),e(A,HZe),e(A,zm),e(zm,xne),e(xne,UZe),e(zm,JZe),e(zm,OR),e(OR,YZe),e(zm,KZe),e(A,ZZe),e(A,Qm),e(Qm,$ne),e($ne,eeo),e(Qm,oeo),e(Qm,VR),e(VR,reo),e(Qm,teo),e(A,aeo),e(A,Wm),e(Wm,kne),e(kne,neo),e(Wm,seo),e(Wm,XR),e(XR,leo),e(Wm,ieo),e(A,deo),e(A,Hm),e(Hm,Sne),e(Sne,ceo),e(Hm,feo),e(Hm,zR),e(zR,meo),e(Hm,geo),e(A,heo),e(A,Um),e(Um,Rne),e(Rne,peo),e(Um,_eo),e(Um,QR),e(QR,ueo),e(Um,beo),e(A,veo),e(A,Jm),e(Jm,Pne),e(Pne,Feo),e(Jm,Teo),e(Jm,WR),e(WR,Meo),e(Jm,Eeo),e(A,Ceo),e(A,Ym),e(Ym,Bne),e(Bne,weo),e(Ym,Aeo),e(Ym,HR),e(HR,Leo),e(Ym,yeo),e(A,xeo),e(A,Km),e(Km,Ine),e(Ine,$eo),e(Km,keo),e(Km,UR),e(UR,Seo),e(Km,Reo),e(A,Peo),e(A,Zm),e(Zm,Nne),e(Nne,Beo),e(Zm,Ieo),e(Zm,JR),e(JR,Neo),e(Zm,qeo),e(A,jeo),e(A,eg),e(eg,qne),e(qne,Deo),e(eg,Geo),e(eg,YR),e(YR,Oeo),e(eg,Veo),e(A,Xeo),e(A,og),e(og,jne),e(jne,zeo),e(og,Qeo),e(og,KR),e(KR,Weo),e(og,Heo),e(A,Ueo),e(A,rg),e(rg,Dne),e(Dne,Jeo),e(rg,Yeo),e(rg,ZR),e(ZR,Keo),e(rg,Zeo),e(A,eoo),e(A,tg),e(tg,Gne),e(Gne,ooo),e(tg,roo),e(tg,eP),e(eP,too),e(tg,aoo),e(A,noo),e(A,ag),e(ag,One),e(One,soo),e(ag,loo),e(ag,oP),e(oP,ioo),e(ag,doo),e(A,coo),e(A,ng),e(ng,Vne),e(Vne,foo),e(ng,moo),e(ng,rP),e(rP,goo),e(ng,hoo),e(A,poo),e(A,sg),e(sg,Xne),e(Xne,_oo),e(sg,uoo),e(sg,tP),e(tP,boo),e(sg,voo),e(A,Foo),e(A,lg),e(lg,zne),e(zne,Too),e(lg,Moo),e(lg,aP),e(aP,Eoo),e(lg,Coo),e(A,woo),e(A,ig),e(ig,Qne),e(Qne,Aoo),e(ig,Loo),e(ig,nP),e(nP,yoo),e(ig,xoo),e(A,$oo),e(A,dg),e(dg,Wne),e(Wne,koo),e(dg,Soo),e(dg,sP),e(sP,Roo),e(dg,Poo),e(A,Boo),e(A,cg),e(cg,Hne),e(Hne,Ioo),e(cg,Noo),e(cg,lP),e(lP,qoo),e(cg,joo),e(A,Doo),e(A,fg),e(fg,Une),e(Une,Goo),e(fg,Ooo),e(fg,iP),e(iP,Voo),e(fg,Xoo),e(A,zoo),e(A,mg),e(mg,Jne),e(Jne,Qoo),e(mg,Woo),e(mg,dP),e(dP,Hoo),e(mg,Uoo),e(A,Joo),e(A,gg),e(gg,Yne),e(Yne,Yoo),e(gg,Koo),e(gg,cP),e(cP,Zoo),e(gg,ero),e(A,oro),e(A,hg),e(hg,Kne),e(Kne,rro),e(hg,tro),e(hg,fP),e(fP,aro),e(hg,nro),e(A,sro),e(A,pg),e(pg,Zne),e(Zne,lro),e(pg,iro),e(pg,mP),e(mP,dro),e(pg,cro),e(A,fro),e(A,_g),e(_g,ese),e(ese,mro),e(_g,gro),e(_g,gP),e(gP,hro),e(_g,pro),e(A,_ro),e(A,ug),e(ug,ose),e(ose,uro),e(ug,bro),e(ug,hP),e(hP,vro),e(ug,Fro),e(A,Tro),e(A,bg),e(bg,rse),e(rse,Mro),e(bg,Ero),e(bg,pP),e(pP,Cro),e(bg,wro),e(A,Aro),e(A,vg),e(vg,tse),e(tse,Lro),e(vg,yro),e(vg,_P),e(_P,xro),e(vg,$ro),e(A,kro),e(A,Fg),e(Fg,ase),e(ase,Sro),e(Fg,Rro),e(Fg,uP),e(uP,Pro),e(Fg,Bro),e(A,Iro),e(A,Tg),e(Tg,nse),e(nse,Nro),e(Tg,qro),e(Tg,bP),e(bP,jro),e(Tg,Dro),e(A,Gro),e(A,Mg),e(Mg,sse),e(sse,Oro),e(Mg,Vro),e(Mg,vP),e(vP,Xro),e(Mg,zro),e(A,Qro),e(A,Eg),e(Eg,lse),e(lse,Wro),e(Eg,Hro),e(Eg,FP),e(FP,Uro),e(Eg,Jro),e(A,Yro),e(A,Cg),e(Cg,ise),e(ise,Kro),e(Cg,Zro),e(Cg,TP),e(TP,eto),e(Cg,oto),e(A,rto),e(A,wg),e(wg,dse),e(dse,tto),e(wg,ato),e(wg,MP),e(MP,nto),e(wg,sto),e(A,lto),e(A,Ag),e(Ag,cse),e(cse,ito),e(Ag,dto),e(Ag,EP),e(EP,cto),e(Ag,fto),e(A,mto),e(A,Lg),e(Lg,fse),e(fse,gto),e(Lg,hto),e(Lg,CP),e(CP,pto),e(Lg,_to),e(A,uto),e(A,yg),e(yg,mse),e(mse,bto),e(yg,vto),e(yg,wP),e(wP,Fto),e(yg,Tto),e(A,Mto),e(A,xg),e(xg,gse),e(gse,Eto),e(xg,Cto),e(xg,AP),e(AP,wto),e(xg,Ato),e(A,Lto),e(A,$g),e($g,hse),e(hse,yto),e($g,xto),e($g,LP),e(LP,$to),e($g,kto),e(A,Sto),e(A,kg),e(kg,pse),e(pse,Rto),e(kg,Pto),e(kg,yP),e(yP,Bto),e(kg,Ito),e(A,Nto),e(A,Sg),e(Sg,_se),e(_se,qto),e(Sg,jto),e(Sg,xP),e(xP,Dto),e(Sg,Gto),e(A,Oto),e(A,Rg),e(Rg,use),e(use,Vto),e(Rg,Xto),e(Rg,$P),e($P,zto),e(Rg,Qto),e(A,Wto),e(A,Pg),e(Pg,bse),e(bse,Hto),e(Pg,Uto),e(Pg,kP),e(kP,Jto),e(Pg,Yto),e(A,Kto),e(A,Bg),e(Bg,vse),e(vse,Zto),e(Bg,eao),e(Bg,SP),e(SP,oao),e(Bg,rao),e(A,tao),e(A,Ig),e(Ig,Fse),e(Fse,aao),e(Ig,nao),e(Ig,RP),e(RP,sao),e(Ig,lao),e(A,iao),e(A,Ng),e(Ng,Tse),e(Tse,dao),e(Ng,cao),e(Ng,PP),e(PP,fao),e(Ng,mao),e(A,gao),e(A,qg),e(qg,Mse),e(Mse,hao),e(qg,pao),e(qg,BP),e(BP,_ao),e(qg,uao),e(A,bao),e(A,jg),e(jg,Ese),e(Ese,vao),e(jg,Fao),e(jg,IP),e(IP,Tao),e(jg,Mao),e(A,Eao),e(A,Dg),e(Dg,Cse),e(Cse,Cao),e(Dg,wao),e(Dg,NP),e(NP,Aao),e(Dg,Lao),e(A,yao),e(A,Gg),e(Gg,wse),e(wse,xao),e(Gg,$ao),e(Gg,qP),e(qP,kao),e(Gg,Sao),e(A,Rao),e(A,Og),e(Og,Ase),e(Ase,Pao),e(Og,Bao),e(Og,jP),e(jP,Iao),e(Og,Nao),e(A,qao),e(A,Vg),e(Vg,Lse),e(Lse,jao),e(Vg,Dao),e(Vg,DP),e(DP,Gao),e(Vg,Oao),e(A,Vao),e(A,Xg),e(Xg,yse),e(yse,Xao),e(Xg,zao),e(Xg,GP),e(GP,Qao),e(Xg,Wao),e(A,Hao),e(A,zg),e(zg,xse),e(xse,Uao),e(zg,Jao),e(zg,OP),e(OP,Yao),e(zg,Kao),e(A,Zao),e(A,Qg),e(Qg,$se),e($se,eno),e(Qg,ono),e(Qg,VP),e(VP,rno),e(Qg,tno),e(A,ano),e(A,Wg),e(Wg,kse),e(kse,nno),e(Wg,sno),e(Wg,XP),e(XP,lno),e(Wg,ino),e(A,dno),e(A,Hg),e(Hg,Sse),e(Sse,cno),e(Hg,fno),e(Hg,zP),e(zP,mno),e(Hg,gno),e(A,hno),e(A,Ug),e(Ug,Rse),e(Rse,pno),e(Ug,_no),e(Ug,QP),e(QP,uno),e(Ug,bno),e(Ar,vno),M(Jg,Ar,null),e(wo,Fno),e(wo,Yg),M(lL,Yg,null),e(Yg,Tno),e(Yg,Pse),e(Pse,Mno),b(f,GVe,u),b(f,Ii,u),e(Ii,Kg),e(Kg,Bse),M(iL,Bse,null),e(Ii,Eno),e(Ii,Ise),e(Ise,Cno),b(f,OVe,u),b(f,Ao,u),M(dL,Ao,null),e(Ao,wno),e(Ao,cL),e(cL,Ano),e(cL,WP),e(WP,Lno),e(cL,yno),e(Ao,xno),e(Ao,fL),e(fL,$no),e(fL,Nse),e(Nse,kno),e(fL,Sno),e(Ao,Rno),e(Ao,Lr),M(mL,Lr,null),e(Lr,Pno),e(Lr,qse),e(qse,Bno),e(Lr,Ino),e(Lr,Ra),e(Ra,Nno),e(Ra,jse),e(jse,qno),e(Ra,jno),e(Ra,Dse),e(Dse,Dno),e(Ra,Gno),e(Ra,Gse),e(Gse,Ono),e(Ra,Vno),e(Lr,Xno),e(Lr,k),e(k,qn),e(qn,Ose),e(Ose,zno),e(qn,Qno),e(qn,HP),e(HP,Wno),e(qn,Hno),e(qn,UP),e(UP,Uno),e(qn,Jno),e(k,Yno),e(k,jn),e(jn,Vse),e(Vse,Kno),e(jn,Zno),e(jn,JP),e(JP,eso),e(jn,oso),e(jn,YP),e(YP,rso),e(jn,tso),e(k,aso),e(k,Dn),e(Dn,Xse),e(Xse,nso),e(Dn,sso),e(Dn,KP),e(KP,lso),e(Dn,iso),e(Dn,ZP),e(ZP,dso),e(Dn,cso),e(k,fso),e(k,Zg),e(Zg,zse),e(zse,mso),e(Zg,gso),e(Zg,eB),e(eB,hso),e(Zg,pso),e(k,_so),e(k,Gn),e(Gn,Qse),e(Qse,uso),e(Gn,bso),e(Gn,oB),e(oB,vso),e(Gn,Fso),e(Gn,rB),e(rB,Tso),e(Gn,Mso),e(k,Eso),e(k,eh),e(eh,Wse),e(Wse,Cso),e(eh,wso),e(eh,tB),e(tB,Aso),e(eh,Lso),e(k,yso),e(k,oh),e(oh,Hse),e(Hse,xso),e(oh,$so),e(oh,aB),e(aB,kso),e(oh,Sso),e(k,Rso),e(k,rh),e(rh,Use),e(Use,Pso),e(rh,Bso),e(rh,nB),e(nB,Iso),e(rh,Nso),e(k,qso),e(k,On),e(On,Jse),e(Jse,jso),e(On,Dso),e(On,sB),e(sB,Gso),e(On,Oso),e(On,lB),e(lB,Vso),e(On,Xso),e(k,zso),e(k,Vn),e(Vn,Yse),e(Yse,Qso),e(Vn,Wso),e(Vn,iB),e(iB,Hso),e(Vn,Uso),e(Vn,dB),e(dB,Jso),e(Vn,Yso),e(k,Kso),e(k,Xn),e(Xn,Kse),e(Kse,Zso),e(Xn,elo),e(Xn,cB),e(cB,olo),e(Xn,rlo),e(Xn,fB),e(fB,tlo),e(Xn,alo),e(k,nlo),e(k,th),e(th,Zse),e(Zse,slo),e(th,llo),e(th,mB),e(mB,ilo),e(th,dlo),e(k,clo),e(k,ah),e(ah,ele),e(ele,flo),e(ah,mlo),e(ah,gB),e(gB,glo),e(ah,hlo),e(k,plo),e(k,nh),e(nh,ole),e(ole,_lo),e(nh,ulo),e(nh,hB),e(hB,blo),e(nh,vlo),e(k,Flo),e(k,zn),e(zn,rle),e(rle,Tlo),e(zn,Mlo),e(zn,pB),e(pB,Elo),e(zn,Clo),e(zn,_B),e(_B,wlo),e(zn,Alo),e(k,Llo),e(k,sh),e(sh,tle),e(tle,ylo),e(sh,xlo),e(sh,uB),e(uB,$lo),e(sh,klo),e(k,Slo),e(k,Qn),e(Qn,ale),e(ale,Rlo),e(Qn,Plo),e(Qn,bB),e(bB,Blo),e(Qn,Ilo),e(Qn,vB),e(vB,Nlo),e(Qn,qlo),e(k,jlo),e(k,Wn),e(Wn,nle),e(nle,Dlo),e(Wn,Glo),e(Wn,FB),e(FB,Olo),e(Wn,Vlo),e(Wn,TB),e(TB,Xlo),e(Wn,zlo),e(k,Qlo),e(k,Hn),e(Hn,sle),e(sle,Wlo),e(Hn,Hlo),e(Hn,MB),e(MB,Ulo),e(Hn,Jlo),e(Hn,EB),e(EB,Ylo),e(Hn,Klo),e(k,Zlo),e(k,Un),e(Un,lle),e(lle,eio),e(Un,oio),e(Un,CB),e(CB,rio),e(Un,tio),e(Un,wB),e(wB,aio),e(Un,nio),e(k,sio),e(k,lh),e(lh,ile),e(ile,lio),e(lh,iio),e(lh,AB),e(AB,dio),e(lh,cio),e(k,fio),e(k,Jn),e(Jn,dle),e(dle,mio),e(Jn,gio),e(Jn,LB),e(LB,hio),e(Jn,pio),e(Jn,yB),e(yB,_io),e(Jn,uio),e(k,bio),e(k,Yn),e(Yn,cle),e(cle,vio),e(Yn,Fio),e(Yn,xB),e(xB,Tio),e(Yn,Mio),e(Yn,$B),e($B,Eio),e(Yn,Cio),e(k,wio),e(k,Kn),e(Kn,fle),e(fle,Aio),e(Kn,Lio),e(Kn,kB),e(kB,yio),e(Kn,xio),e(Kn,SB),e(SB,$io),e(Kn,kio),e(k,Sio),e(k,Zn),e(Zn,mle),e(mle,Rio),e(Zn,Pio),e(Zn,RB),e(RB,Bio),e(Zn,Iio),e(Zn,PB),e(PB,Nio),e(Zn,qio),e(k,jio),e(k,es),e(es,gle),e(gle,Dio),e(es,Gio),e(es,BB),e(BB,Oio),e(es,Vio),e(es,IB),e(IB,Xio),e(es,zio),e(k,Qio),e(k,os),e(os,hle),e(hle,Wio),e(os,Hio),e(os,NB),e(NB,Uio),e(os,Jio),e(os,qB),e(qB,Yio),e(os,Kio),e(k,Zio),e(k,ih),e(ih,ple),e(ple,edo),e(ih,odo),e(ih,jB),e(jB,rdo),e(ih,tdo),e(k,ado),e(k,rs),e(rs,_le),e(_le,ndo),e(rs,sdo),e(rs,DB),e(DB,ldo),e(rs,ido),e(rs,GB),e(GB,ddo),e(rs,cdo),e(k,fdo),e(k,dh),e(dh,ule),e(ule,mdo),e(dh,gdo),e(dh,OB),e(OB,hdo),e(dh,pdo),e(k,_do),e(k,ts),e(ts,ble),e(ble,udo),e(ts,bdo),e(ts,VB),e(VB,vdo),e(ts,Fdo),e(ts,XB),e(XB,Tdo),e(ts,Mdo),e(k,Edo),e(k,as),e(as,vle),e(vle,Cdo),e(as,wdo),e(as,zB),e(zB,Ado),e(as,Ldo),e(as,QB),e(QB,ydo),e(as,xdo),e(k,$do),e(k,ns),e(ns,Fle),e(Fle,kdo),e(ns,Sdo),e(ns,WB),e(WB,Rdo),e(ns,Pdo),e(ns,HB),e(HB,Bdo),e(ns,Ido),e(k,Ndo),e(k,ch),e(ch,Tle),e(Tle,qdo),e(ch,jdo),e(ch,UB),e(UB,Ddo),e(ch,Gdo),e(k,Odo),e(k,ss),e(ss,Mle),e(Mle,Vdo),e(ss,Xdo),e(ss,JB),e(JB,zdo),e(ss,Qdo),e(ss,YB),e(YB,Wdo),e(ss,Hdo),e(k,Udo),e(k,ls),e(ls,Ele),e(Ele,Jdo),e(ls,Ydo),e(ls,KB),e(KB,Kdo),e(ls,Zdo),e(ls,ZB),e(ZB,eco),e(ls,oco),e(k,rco),e(k,is),e(is,Cle),e(Cle,tco),e(is,aco),e(is,eI),e(eI,nco),e(is,sco),e(is,oI),e(oI,lco),e(is,ico),e(k,dco),e(k,fh),e(fh,wle),e(wle,cco),e(fh,fco),e(fh,rI),e(rI,mco),e(fh,gco),e(k,hco),e(k,ds),e(ds,Ale),e(Ale,pco),e(ds,_co),e(ds,tI),e(tI,uco),e(ds,bco),e(ds,aI),e(aI,vco),e(ds,Fco),e(k,Tco),e(k,cs),e(cs,Lle),e(Lle,Mco),e(cs,Eco),e(cs,nI),e(nI,Cco),e(cs,wco),e(cs,sI),e(sI,Aco),e(cs,Lco),e(k,yco),e(k,fs),e(fs,yle),e(yle,xco),e(fs,$co),e(fs,lI),e(lI,kco),e(fs,Sco),e(fs,iI),e(iI,Rco),e(fs,Pco),e(k,Bco),e(k,ms),e(ms,xle),e(xle,Ico),e(ms,Nco),e(ms,dI),e(dI,qco),e(ms,jco),e(ms,cI),e(cI,Dco),e(ms,Gco),e(k,Oco),e(k,gs),e(gs,$le),e($le,Vco),e(gs,Xco),e(gs,fI),e(fI,zco),e(gs,Qco),e(gs,mI),e(mI,Wco),e(gs,Hco),e(k,Uco),e(k,hs),e(hs,kle),e(kle,Jco),e(hs,Yco),e(hs,gI),e(gI,Kco),e(hs,Zco),e(hs,hI),e(hI,efo),e(hs,ofo),e(k,rfo),e(k,ps),e(ps,Sle),e(Sle,tfo),e(ps,afo),e(ps,pI),e(pI,nfo),e(ps,sfo),e(ps,_I),e(_I,lfo),e(ps,ifo),e(k,dfo),e(k,_s),e(_s,Rle),e(Rle,cfo),e(_s,ffo),e(_s,uI),e(uI,mfo),e(_s,gfo),e(_s,bI),e(bI,hfo),e(_s,pfo),e(k,_fo),e(k,mh),e(mh,Ple),e(Ple,ufo),e(mh,bfo),e(mh,vI),e(vI,vfo),e(mh,Ffo),e(k,Tfo),e(k,us),e(us,Ble),e(Ble,Mfo),e(us,Efo),e(us,FI),e(FI,Cfo),e(us,wfo),e(us,TI),e(TI,Afo),e(us,Lfo),e(k,yfo),e(k,gh),e(gh,Ile),e(Ile,xfo),e(gh,$fo),e(gh,MI),e(MI,kfo),e(gh,Sfo),e(k,Rfo),e(k,hh),e(hh,Nle),e(Nle,Pfo),e(hh,Bfo),e(hh,EI),e(EI,Ifo),e(hh,Nfo),e(k,qfo),e(k,bs),e(bs,qle),e(qle,jfo),e(bs,Dfo),e(bs,CI),e(CI,Gfo),e(bs,Ofo),e(bs,wI),e(wI,Vfo),e(bs,Xfo),e(k,zfo),e(k,vs),e(vs,jle),e(jle,Qfo),e(vs,Wfo),e(vs,AI),e(AI,Hfo),e(vs,Ufo),e(vs,LI),e(LI,Jfo),e(vs,Yfo),e(k,Kfo),e(k,Fs),e(Fs,Dle),e(Dle,Zfo),e(Fs,emo),e(Fs,yI),e(yI,omo),e(Fs,rmo),e(Fs,xI),e(xI,tmo),e(Fs,amo),e(k,nmo),e(k,ph),e(ph,Gle),e(Gle,smo),e(ph,lmo),e(ph,$I),e($I,imo),e(ph,dmo),e(k,cmo),e(k,Ts),e(Ts,Ole),e(Ole,fmo),e(Ts,mmo),e(Ts,kI),e(kI,gmo),e(Ts,hmo),e(Ts,SI),e(SI,pmo),e(Ts,_mo),e(k,umo),e(k,Ms),e(Ms,Vle),e(Vle,bmo),e(Ms,vmo),e(Ms,RI),e(RI,Fmo),e(Ms,Tmo),e(Ms,PI),e(PI,Mmo),e(Ms,Emo),e(k,Cmo),e(k,Es),e(Es,Xle),e(Xle,wmo),e(Es,Amo),e(Es,BI),e(BI,Lmo),e(Es,ymo),e(Es,II),e(II,xmo),e(Es,$mo),e(k,kmo),e(k,Cs),e(Cs,zle),e(zle,Smo),e(Cs,Rmo),e(Cs,NI),e(NI,Pmo),e(Cs,Bmo),e(Cs,qI),e(qI,Imo),e(Cs,Nmo),e(k,qmo),e(k,ws),e(ws,Qle),e(Qle,jmo),e(ws,Dmo),e(ws,jI),e(jI,Gmo),e(ws,Omo),e(ws,DI),e(DI,Vmo),e(ws,Xmo),e(k,zmo),e(k,As),e(As,Wle),e(Wle,Qmo),e(As,Wmo),e(As,GI),e(GI,Hmo),e(As,Umo),e(As,OI),e(OI,Jmo),e(As,Ymo),e(k,Kmo),e(k,Ls),e(Ls,Hle),e(Hle,Zmo),e(Ls,ego),e(Ls,VI),e(VI,ogo),e(Ls,rgo),e(Ls,XI),e(XI,tgo),e(Ls,ago),e(k,ngo),e(k,_h),e(_h,Ule),e(Ule,sgo),e(_h,lgo),e(_h,zI),e(zI,igo),e(_h,dgo),e(k,cgo),e(k,ys),e(ys,Jle),e(Jle,fgo),e(ys,mgo),e(ys,QI),e(QI,ggo),e(ys,hgo),e(ys,WI),e(WI,pgo),e(ys,_go),e(k,ugo),e(k,uh),e(uh,Yle),e(Yle,bgo),e(uh,vgo),e(uh,HI),e(HI,Fgo),e(uh,Tgo),e(k,Mgo),e(k,bh),e(bh,Kle),e(Kle,Ego),e(bh,Cgo),e(bh,UI),e(UI,wgo),e(bh,Ago),e(k,Lgo),e(k,vh),e(vh,Zle),e(Zle,ygo),e(vh,xgo),e(vh,JI),e(JI,$go),e(vh,kgo),e(k,Sgo),e(k,Fh),e(Fh,eie),e(eie,Rgo),e(Fh,Pgo),e(Fh,YI),e(YI,Bgo),e(Fh,Igo),e(k,Ngo),e(k,xs),e(xs,oie),e(oie,qgo),e(xs,jgo),e(xs,KI),e(KI,Dgo),e(xs,Ggo),e(xs,ZI),e(ZI,Ogo),e(xs,Vgo),e(k,Xgo),e(k,Th),e(Th,rie),e(rie,zgo),e(Th,Qgo),e(Th,eN),e(eN,Wgo),e(Th,Hgo),e(k,Ugo),e(k,$s),e($s,tie),e(tie,Jgo),e($s,Ygo),e($s,oN),e(oN,Kgo),e($s,Zgo),e($s,rN),e(rN,eho),e($s,oho),e(k,rho),e(k,ks),e(ks,aie),e(aie,tho),e(ks,aho),e(ks,tN),e(tN,nho),e(ks,sho),e(ks,aN),e(aN,lho),e(ks,iho),e(k,dho),e(k,Ss),e(Ss,nie),e(nie,cho),e(Ss,fho),e(Ss,nN),e(nN,mho),e(Ss,gho),e(Ss,sN),e(sN,hho),e(Ss,pho),e(k,_ho),e(k,Rs),e(Rs,sie),e(sie,uho),e(Rs,bho),e(Rs,lN),e(lN,vho),e(Rs,Fho),e(Rs,iN),e(iN,Tho),e(Rs,Mho),e(k,Eho),e(k,Ps),e(Ps,lie),e(lie,Cho),e(Ps,who),e(Ps,dN),e(dN,Aho),e(Ps,Lho),e(Ps,cN),e(cN,yho),e(Ps,xho),e(k,$ho),e(k,Bs),e(Bs,iie),e(iie,kho),e(Bs,Sho),e(Bs,fN),e(fN,Rho),e(Bs,Pho),e(Bs,mN),e(mN,Bho),e(Bs,Iho),e(k,Nho),e(k,Mh),e(Mh,die),e(die,qho),e(Mh,jho),e(Mh,gN),e(gN,Dho),e(Mh,Gho),e(k,Oho),e(k,Eh),e(Eh,cie),e(cie,Vho),e(Eh,Xho),e(Eh,hN),e(hN,zho),e(Eh,Qho),e(k,Who),e(k,Is),e(Is,fie),e(fie,Hho),e(Is,Uho),e(Is,pN),e(pN,Jho),e(Is,Yho),e(Is,_N),e(_N,Kho),e(Is,Zho),e(k,epo),e(k,Ns),e(Ns,mie),e(mie,opo),e(Ns,rpo),e(Ns,uN),e(uN,tpo),e(Ns,apo),e(Ns,bN),e(bN,npo),e(Ns,spo),e(k,lpo),e(k,qs),e(qs,gie),e(gie,ipo),e(qs,dpo),e(qs,vN),e(vN,cpo),e(qs,fpo),e(qs,FN),e(FN,mpo),e(qs,gpo),e(k,hpo),e(k,Ch),e(Ch,hie),e(hie,ppo),e(Ch,_po),e(Ch,TN),e(TN,upo),e(Ch,bpo),e(k,vpo),e(k,wh),e(wh,pie),e(pie,Fpo),e(wh,Tpo),e(wh,MN),e(MN,Mpo),e(wh,Epo),e(k,Cpo),e(k,Ah),e(Ah,_ie),e(_ie,wpo),e(Ah,Apo),e(Ah,EN),e(EN,Lpo),e(Ah,ypo),e(k,xpo),e(k,js),e(js,uie),e(uie,$po),e(js,kpo),e(js,CN),e(CN,Spo),e(js,Rpo),e(js,wN),e(wN,Ppo),e(js,Bpo),e(k,Ipo),e(k,Ds),e(Ds,bie),e(bie,Npo),e(Ds,qpo),e(Ds,AN),e(AN,jpo),e(Ds,Dpo),e(Ds,LN),e(LN,Gpo),e(Ds,Opo),e(k,Vpo),e(k,Lh),e(Lh,vie),e(vie,Xpo),e(Lh,zpo),e(Lh,yN),e(yN,Qpo),e(Lh,Wpo),e(k,Hpo),e(k,yh),e(yh,Fie),e(Fie,Upo),e(yh,Jpo),e(yh,xN),e(xN,Ypo),e(yh,Kpo),e(k,Zpo),e(k,xh),e(xh,Tie),e(Tie,e_o),e(xh,o_o),e(xh,$N),e($N,r_o),e(xh,t_o),e(k,a_o),e(k,Gs),e(Gs,Mie),e(Mie,n_o),e(Gs,s_o),e(Gs,kN),e(kN,l_o),e(Gs,i_o),e(Gs,SN),e(SN,d_o),e(Gs,c_o),e(k,f_o),e(k,$h),e($h,Eie),e(Eie,m_o),e($h,g_o),e($h,RN),e(RN,h_o),e($h,p_o),e(k,__o),e(k,kh),e(kh,Cie),e(Cie,u_o),e(kh,b_o),e(kh,PN),e(PN,v_o),e(kh,F_o),e(k,T_o),e(k,Os),e(Os,wie),e(wie,M_o),e(Os,E_o),e(Os,BN),e(BN,C_o),e(Os,w_o),e(Os,IN),e(IN,A_o),e(Os,L_o),e(k,y_o),e(k,Vs),e(Vs,Aie),e(Aie,x_o),e(Vs,$_o),e(Vs,NN),e(NN,k_o),e(Vs,S_o),e(Vs,qN),e(qN,R_o),e(Vs,P_o),e(k,B_o),e(k,Xs),e(Xs,Lie),e(Lie,I_o),e(Xs,N_o),e(Xs,jN),e(jN,q_o),e(Xs,j_o),e(Xs,DN),e(DN,D_o),e(Xs,G_o),e(k,O_o),e(k,zs),e(zs,yie),e(yie,V_o),e(zs,X_o),e(zs,GN),e(GN,z_o),e(zs,Q_o),e(zs,ON),e(ON,W_o),e(zs,H_o),e(Lr,U_o),M(Sh,Lr,null),e(Ao,J_o),e(Ao,Rh),M(gL,Rh,null),e(Rh,Y_o),e(Rh,xie),e(xie,K_o),b(f,VVe,u),b(f,Ni,u),e(Ni,Ph),e(Ph,$ie),M(hL,$ie,null),e(Ni,Z_o),e(Ni,kie),e(kie,euo),b(f,XVe,u),b(f,Lo,u),M(pL,Lo,null),e(Lo,ouo),e(Lo,_L),e(_L,ruo),e(_L,VN),e(VN,tuo),e(_L,auo),e(Lo,nuo),e(Lo,uL),e(uL,suo),e(uL,Sie),e(Sie,luo),e(uL,iuo),e(Lo,duo),e(Lo,He),M(bL,He,null),e(He,cuo),e(He,Rie),e(Rie,fuo),e(He,muo),e(He,Pa),e(Pa,guo),e(Pa,Pie),e(Pie,huo),e(Pa,puo),e(Pa,Bie),e(Bie,_uo),e(Pa,uuo),e(Pa,Iie),e(Iie,buo),e(Pa,vuo),e(He,Fuo),e(He,Y),e(Y,Bh),e(Bh,Nie),e(Nie,Tuo),e(Bh,Muo),e(Bh,XN),e(XN,Euo),e(Bh,Cuo),e(Y,wuo),e(Y,Ih),e(Ih,qie),e(qie,Auo),e(Ih,Luo),e(Ih,zN),e(zN,yuo),e(Ih,xuo),e(Y,$uo),e(Y,Nh),e(Nh,jie),e(jie,kuo),e(Nh,Suo),e(Nh,QN),e(QN,Ruo),e(Nh,Puo),e(Y,Buo),e(Y,qh),e(qh,Die),e(Die,Iuo),e(qh,Nuo),e(qh,WN),e(WN,quo),e(qh,juo),e(Y,Duo),e(Y,jh),e(jh,Gie),e(Gie,Guo),e(jh,Ouo),e(jh,HN),e(HN,Vuo),e(jh,Xuo),e(Y,zuo),e(Y,Dh),e(Dh,Oie),e(Oie,Quo),e(Dh,Wuo),e(Dh,UN),e(UN,Huo),e(Dh,Uuo),e(Y,Juo),e(Y,Gh),e(Gh,Vie),e(Vie,Yuo),e(Gh,Kuo),e(Gh,JN),e(JN,Zuo),e(Gh,e1o),e(Y,o1o),e(Y,Oh),e(Oh,Xie),e(Xie,r1o),e(Oh,t1o),e(Oh,YN),e(YN,a1o),e(Oh,n1o),e(Y,s1o),e(Y,Vh),e(Vh,zie),e(zie,l1o),e(Vh,i1o),e(Vh,KN),e(KN,d1o),e(Vh,c1o),e(Y,f1o),e(Y,Xh),e(Xh,Qie),e(Qie,m1o),e(Xh,g1o),e(Xh,ZN),e(ZN,h1o),e(Xh,p1o),e(Y,_1o),e(Y,zh),e(zh,Wie),e(Wie,u1o),e(zh,b1o),e(zh,eq),e(eq,v1o),e(zh,F1o),e(Y,T1o),e(Y,Qh),e(Qh,Hie),e(Hie,M1o),e(Qh,E1o),e(Qh,oq),e(oq,C1o),e(Qh,w1o),e(Y,A1o),e(Y,Wh),e(Wh,Uie),e(Uie,L1o),e(Wh,y1o),e(Wh,rq),e(rq,x1o),e(Wh,$1o),e(Y,k1o),e(Y,Hh),e(Hh,Jie),e(Jie,S1o),e(Hh,R1o),e(Hh,tq),e(tq,P1o),e(Hh,B1o),e(Y,I1o),e(Y,Uh),e(Uh,Yie),e(Yie,N1o),e(Uh,q1o),e(Uh,aq),e(aq,j1o),e(Uh,D1o),e(Y,G1o),e(Y,Jh),e(Jh,Kie),e(Kie,O1o),e(Jh,V1o),e(Jh,nq),e(nq,X1o),e(Jh,z1o),e(Y,Q1o),e(Y,Yh),e(Yh,Zie),e(Zie,W1o),e(Yh,H1o),e(Yh,sq),e(sq,U1o),e(Yh,J1o),e(Y,Y1o),e(Y,Kh),e(Kh,ede),e(ede,K1o),e(Kh,Z1o),e(Kh,lq),e(lq,e2o),e(Kh,o2o),e(Y,r2o),e(Y,Zh),e(Zh,ode),e(ode,t2o),e(Zh,a2o),e(Zh,iq),e(iq,n2o),e(Zh,s2o),e(Y,l2o),e(Y,ep),e(ep,rde),e(rde,i2o),e(ep,d2o),e(ep,dq),e(dq,c2o),e(ep,f2o),e(Y,m2o),e(Y,op),e(op,tde),e(tde,g2o),e(op,h2o),e(op,cq),e(cq,p2o),e(op,_2o),e(Y,u2o),e(Y,rp),e(rp,ade),e(ade,b2o),e(rp,v2o),e(rp,fq),e(fq,F2o),e(rp,T2o),e(Y,M2o),e(Y,tp),e(tp,nde),e(nde,E2o),e(tp,C2o),e(tp,mq),e(mq,w2o),e(tp,A2o),e(Y,L2o),e(Y,ap),e(ap,sde),e(sde,y2o),e(ap,x2o),e(ap,gq),e(gq,$2o),e(ap,k2o),e(Y,S2o),e(Y,np),e(np,lde),e(lde,R2o),e(np,P2o),e(np,hq),e(hq,B2o),e(np,I2o),e(Y,N2o),e(Y,sp),e(sp,ide),e(ide,q2o),e(sp,j2o),e(sp,pq),e(pq,D2o),e(sp,G2o),e(Y,O2o),e(Y,lp),e(lp,dde),e(dde,V2o),e(lp,X2o),e(lp,_q),e(_q,z2o),e(lp,Q2o),e(Y,W2o),e(Y,ip),e(ip,cde),e(cde,H2o),e(ip,U2o),e(ip,uq),e(uq,J2o),e(ip,Y2o),e(Y,K2o),e(Y,dp),e(dp,fde),e(fde,Z2o),e(dp,ebo),e(dp,bq),e(bq,obo),e(dp,rbo),e(Y,tbo),e(Y,cp),e(cp,mde),e(mde,abo),e(cp,nbo),e(cp,vq),e(vq,sbo),e(cp,lbo),e(Y,ibo),e(Y,fp),e(fp,gde),e(gde,dbo),e(fp,cbo),e(fp,Fq),e(Fq,fbo),e(fp,mbo),e(Y,gbo),e(Y,mp),e(mp,hde),e(hde,hbo),e(mp,pbo),e(mp,Tq),e(Tq,_bo),e(mp,ubo),e(Y,bbo),e(Y,gp),e(gp,pde),e(pde,vbo),e(gp,Fbo),e(gp,Mq),e(Mq,Tbo),e(gp,Mbo),e(Y,Ebo),e(Y,hp),e(hp,_de),e(_de,Cbo),e(hp,wbo),e(hp,Eq),e(Eq,Abo),e(hp,Lbo),e(He,ybo),M(pp,He,null),e(He,xbo),M(_p,He,null),e(Lo,$bo),e(Lo,up),M(vL,up,null),e(up,kbo),e(up,ude),e(ude,Sbo),b(f,zVe,u),b(f,qi,u),e(qi,bp),e(bp,bde),M(FL,bde,null),e(qi,Rbo),e(qi,vde),e(vde,Pbo),b(f,QVe,u),b(f,yo,u),M(TL,yo,null),e(yo,Bbo),e(yo,ML),e(ML,Ibo),e(ML,Cq),e(Cq,Nbo),e(ML,qbo),e(yo,jbo),e(yo,EL),e(EL,Dbo),e(EL,Fde),e(Fde,Gbo),e(EL,Obo),e(yo,Vbo),e(yo,Ue),M(CL,Ue,null),e(Ue,Xbo),e(Ue,Tde),e(Tde,zbo),e(Ue,Qbo),e(Ue,ji),e(ji,Wbo),e(ji,Mde),e(Mde,Hbo),e(ji,Ubo),e(ji,Ede),e(Ede,Jbo),e(ji,Ybo),e(Ue,Kbo),e(Ue,he),e(he,vp),e(vp,Cde),e(Cde,Zbo),e(vp,evo),e(vp,wq),e(wq,ovo),e(vp,rvo),e(he,tvo),e(he,Fp),e(Fp,wde),e(wde,avo),e(Fp,nvo),e(Fp,Ade),e(Ade,svo),e(Fp,lvo),e(he,ivo),e(he,Tp),e(Tp,Lde),e(Lde,dvo),e(Tp,cvo),e(Tp,Aq),e(Aq,fvo),e(Tp,mvo),e(he,gvo),e(he,Mp),e(Mp,yde),e(yde,hvo),e(Mp,pvo),e(Mp,Lq),e(Lq,_vo),e(Mp,uvo),e(he,bvo),e(he,Ep),e(Ep,xde),e(xde,vvo),e(Ep,Fvo),e(Ep,yq),e(yq,Tvo),e(Ep,Mvo),e(he,Evo),e(he,Cp),e(Cp,$de),e($de,Cvo),e(Cp,wvo),e(Cp,xq),e(xq,Avo),e(Cp,Lvo),e(he,yvo),e(he,wp),e(wp,kde),e(kde,xvo),e(wp,$vo),e(wp,$q),e($q,kvo),e(wp,Svo),e(he,Rvo),e(he,Ap),e(Ap,Sde),e(Sde,Pvo),e(Ap,Bvo),e(Ap,kq),e(kq,Ivo),e(Ap,Nvo),e(he,qvo),e(he,Lp),e(Lp,Rde),e(Rde,jvo),e(Lp,Dvo),e(Lp,Sq),e(Sq,Gvo),e(Lp,Ovo),e(he,Vvo),e(he,yp),e(yp,Pde),e(Pde,Xvo),e(yp,zvo),e(yp,Rq),e(Rq,Qvo),e(yp,Wvo),e(he,Hvo),e(he,xp),e(xp,Bde),e(Bde,Uvo),e(xp,Jvo),e(xp,Pq),e(Pq,Yvo),e(xp,Kvo),e(he,Zvo),e(he,$p),e($p,Ide),e(Ide,e3o),e($p,o3o),e($p,Bq),e(Bq,r3o),e($p,t3o),e(he,a3o),e(he,kp),e(kp,Nde),e(Nde,n3o),e(kp,s3o),e(kp,Iq),e(Iq,l3o),e(kp,i3o),e(he,d3o),e(he,Sp),e(Sp,qde),e(qde,c3o),e(Sp,f3o),e(Sp,Nq),e(Nq,m3o),e(Sp,g3o),e(he,h3o),e(he,Rp),e(Rp,jde),e(jde,p3o),e(Rp,_3o),e(Rp,qq),e(qq,u3o),e(Rp,b3o),e(he,v3o),e(he,Pp),e(Pp,Dde),e(Dde,F3o),e(Pp,T3o),e(Pp,jq),e(jq,M3o),e(Pp,E3o),e(he,C3o),e(he,Bp),e(Bp,Gde),e(Gde,w3o),e(Bp,A3o),e(Bp,Dq),e(Dq,L3o),e(Bp,y3o),e(he,x3o),e(he,Ip),e(Ip,Ode),e(Ode,$3o),e(Ip,k3o),e(Ip,Gq),e(Gq,S3o),e(Ip,R3o),e(Ue,P3o),M(Np,Ue,null),e(Ue,B3o),M(qp,Ue,null),e(yo,I3o),e(yo,jp),M(wL,jp,null),e(jp,N3o),e(jp,Vde),e(Vde,q3o),b(f,WVe,u),b(f,Di,u),e(Di,Dp),e(Dp,Xde),M(AL,Xde,null),e(Di,j3o),e(Di,zde),e(zde,D3o),b(f,HVe,u),b(f,xo,u),M(LL,xo,null),e(xo,G3o),e(xo,Gi),e(Gi,O3o),e(Gi,Oq),e(Oq,V3o),e(Gi,X3o),e(Gi,Vq),e(Vq,z3o),e(Gi,Q3o),e(xo,W3o),e(xo,yL),e(yL,H3o),e(yL,Qde),e(Qde,U3o),e(yL,J3o),e(xo,Y3o),e(xo,lt),M(xL,lt,null),e(lt,K3o),e(lt,Wde),e(Wde,Z3o),e(lt,eFo),e(lt,Oi),e(Oi,oFo),e(Oi,Hde),e(Hde,rFo),e(Oi,tFo),e(Oi,Xq),e(Xq,aFo),e(Oi,nFo),e(lt,sFo),M(Gp,lt,null),e(xo,lFo),e(xo,Je),M($L,Je,null),e(Je,iFo),e(Je,Ude),e(Ude,dFo),e(Je,cFo),e(Je,Ba),e(Ba,fFo),e(Ba,Jde),e(Jde,mFo),e(Ba,gFo),e(Ba,Yde),e(Yde,hFo),e(Ba,pFo),e(Ba,Kde),e(Kde,_Fo),e(Ba,uFo),e(Je,bFo),e(Je,y),e(y,Op),e(Op,Zde),e(Zde,vFo),e(Op,FFo),e(Op,zq),e(zq,TFo),e(Op,MFo),e(y,EFo),e(y,Vp),e(Vp,ece),e(ece,CFo),e(Vp,wFo),e(Vp,Qq),e(Qq,AFo),e(Vp,LFo),e(y,yFo),e(y,Xp),e(Xp,oce),e(oce,xFo),e(Xp,$Fo),e(Xp,Wq),e(Wq,kFo),e(Xp,SFo),e(y,RFo),e(y,zp),e(zp,rce),e(rce,PFo),e(zp,BFo),e(zp,Hq),e(Hq,IFo),e(zp,NFo),e(y,qFo),e(y,Qp),e(Qp,tce),e(tce,jFo),e(Qp,DFo),e(Qp,Uq),e(Uq,GFo),e(Qp,OFo),e(y,VFo),e(y,Wp),e(Wp,ace),e(ace,XFo),e(Wp,zFo),e(Wp,Jq),e(Jq,QFo),e(Wp,WFo),e(y,HFo),e(y,Hp),e(Hp,nce),e(nce,UFo),e(Hp,JFo),e(Hp,Yq),e(Yq,YFo),e(Hp,KFo),e(y,ZFo),e(y,Up),e(Up,sce),e(sce,e6o),e(Up,o6o),e(Up,Kq),e(Kq,r6o),e(Up,t6o),e(y,a6o),e(y,Jp),e(Jp,lce),e(lce,n6o),e(Jp,s6o),e(Jp,Zq),e(Zq,l6o),e(Jp,i6o),e(y,d6o),e(y,Yp),e(Yp,ice),e(ice,c6o),e(Yp,f6o),e(Yp,ej),e(ej,m6o),e(Yp,g6o),e(y,h6o),e(y,Kp),e(Kp,dce),e(dce,p6o),e(Kp,_6o),e(Kp,oj),e(oj,u6o),e(Kp,b6o),e(y,v6o),e(y,Zp),e(Zp,cce),e(cce,F6o),e(Zp,T6o),e(Zp,rj),e(rj,M6o),e(Zp,E6o),e(y,C6o),e(y,e_),e(e_,fce),e(fce,w6o),e(e_,A6o),e(e_,tj),e(tj,L6o),e(e_,y6o),e(y,x6o),e(y,o_),e(o_,mce),e(mce,$6o),e(o_,k6o),e(o_,aj),e(aj,S6o),e(o_,R6o),e(y,P6o),e(y,r_),e(r_,gce),e(gce,B6o),e(r_,I6o),e(r_,nj),e(nj,N6o),e(r_,q6o),e(y,j6o),e(y,t_),e(t_,hce),e(hce,D6o),e(t_,G6o),e(t_,sj),e(sj,O6o),e(t_,V6o),e(y,X6o),e(y,a_),e(a_,pce),e(pce,z6o),e(a_,Q6o),e(a_,lj),e(lj,W6o),e(a_,H6o),e(y,U6o),e(y,n_),e(n_,_ce),e(_ce,J6o),e(n_,Y6o),e(n_,ij),e(ij,K6o),e(n_,Z6o),e(y,eTo),e(y,s_),e(s_,uce),e(uce,oTo),e(s_,rTo),e(s_,dj),e(dj,tTo),e(s_,aTo),e(y,nTo),e(y,l_),e(l_,bce),e(bce,sTo),e(l_,lTo),e(l_,cj),e(cj,iTo),e(l_,dTo),e(y,cTo),e(y,i_),e(i_,vce),e(vce,fTo),e(i_,mTo),e(i_,fj),e(fj,gTo),e(i_,hTo),e(y,pTo),e(y,d_),e(d_,Fce),e(Fce,_To),e(d_,uTo),e(d_,mj),e(mj,bTo),e(d_,vTo),e(y,FTo),e(y,c_),e(c_,Tce),e(Tce,TTo),e(c_,MTo),e(c_,gj),e(gj,ETo),e(c_,CTo),e(y,wTo),e(y,f_),e(f_,Mce),e(Mce,ATo),e(f_,LTo),e(f_,hj),e(hj,yTo),e(f_,xTo),e(y,$To),e(y,m_),e(m_,Ece),e(Ece,kTo),e(m_,STo),e(m_,pj),e(pj,RTo),e(m_,PTo),e(y,BTo),e(y,g_),e(g_,Cce),e(Cce,ITo),e(g_,NTo),e(g_,_j),e(_j,qTo),e(g_,jTo),e(y,DTo),e(y,h_),e(h_,wce),e(wce,GTo),e(h_,OTo),e(h_,uj),e(uj,VTo),e(h_,XTo),e(y,zTo),e(y,p_),e(p_,Ace),e(Ace,QTo),e(p_,WTo),e(p_,bj),e(bj,HTo),e(p_,UTo),e(y,JTo),e(y,__),e(__,Lce),e(Lce,YTo),e(__,KTo),e(__,vj),e(vj,ZTo),e(__,e7o),e(y,o7o),e(y,u_),e(u_,yce),e(yce,r7o),e(u_,t7o),e(u_,Fj),e(Fj,a7o),e(u_,n7o),e(y,s7o),e(y,b_),e(b_,xce),e(xce,l7o),e(b_,i7o),e(b_,Tj),e(Tj,d7o),e(b_,c7o),e(y,f7o),e(y,v_),e(v_,$ce),e($ce,m7o),e(v_,g7o),e(v_,Mj),e(Mj,h7o),e(v_,p7o),e(y,_7o),e(y,F_),e(F_,kce),e(kce,u7o),e(F_,b7o),e(F_,Ej),e(Ej,v7o),e(F_,F7o),e(y,T7o),e(y,T_),e(T_,Sce),e(Sce,M7o),e(T_,E7o),e(T_,Cj),e(Cj,C7o),e(T_,w7o),e(y,A7o),e(y,Qs),e(Qs,Rce),e(Rce,L7o),e(Qs,y7o),e(Qs,wj),e(wj,x7o),e(Qs,$7o),e(Qs,Aj),e(Aj,k7o),e(Qs,S7o),e(y,R7o),e(y,M_),e(M_,Pce),e(Pce,P7o),e(M_,B7o),e(M_,Lj),e(Lj,I7o),e(M_,N7o),e(y,q7o),e(y,E_),e(E_,Bce),e(Bce,j7o),e(E_,D7o),e(E_,yj),e(yj,G7o),e(E_,O7o),e(y,V7o),e(y,C_),e(C_,Ice),e(Ice,X7o),e(C_,z7o),e(C_,xj),e(xj,Q7o),e(C_,W7o),e(y,H7o),e(y,w_),e(w_,Nce),e(Nce,U7o),e(w_,J7o),e(w_,$j),e($j,Y7o),e(w_,K7o),e(y,Z7o),e(y,A_),e(A_,qce),e(qce,e9o),e(A_,o9o),e(A_,kj),e(kj,r9o),e(A_,t9o),e(y,a9o),e(y,L_),e(L_,jce),e(jce,n9o),e(L_,s9o),e(L_,Sj),e(Sj,l9o),e(L_,i9o),e(y,d9o),e(y,y_),e(y_,Dce),e(Dce,c9o),e(y_,f9o),e(y_,Rj),e(Rj,m9o),e(y_,g9o),e(y,h9o),e(y,x_),e(x_,Gce),e(Gce,p9o),e(x_,_9o),e(x_,Pj),e(Pj,u9o),e(x_,b9o),e(y,v9o),e(y,$_),e($_,Oce),e(Oce,F9o),e($_,T9o),e($_,Bj),e(Bj,M9o),e($_,E9o),e(y,C9o),e(y,k_),e(k_,Vce),e(Vce,w9o),e(k_,A9o),e(k_,Ij),e(Ij,L9o),e(k_,y9o),e(y,x9o),e(y,S_),e(S_,Xce),e(Xce,$9o),e(S_,k9o),e(S_,Nj),e(Nj,S9o),e(S_,R9o),e(y,P9o),e(y,R_),e(R_,zce),e(zce,B9o),e(R_,I9o),e(R_,qj),e(qj,N9o),e(R_,q9o),e(y,j9o),e(y,P_),e(P_,Qce),e(Qce,D9o),e(P_,G9o),e(P_,jj),e(jj,O9o),e(P_,V9o),e(y,X9o),e(y,B_),e(B_,Wce),e(Wce,z9o),e(B_,Q9o),e(B_,Dj),e(Dj,W9o),e(B_,H9o),e(y,U9o),e(y,I_),e(I_,Hce),e(Hce,J9o),e(I_,Y9o),e(I_,Gj),e(Gj,K9o),e(I_,Z9o),e(y,eMo),e(y,N_),e(N_,Uce),e(Uce,oMo),e(N_,rMo),e(N_,Oj),e(Oj,tMo),e(N_,aMo),e(y,nMo),e(y,q_),e(q_,Jce),e(Jce,sMo),e(q_,lMo),e(q_,Vj),e(Vj,iMo),e(q_,dMo),e(y,cMo),e(y,j_),e(j_,Yce),e(Yce,fMo),e(j_,mMo),e(j_,Xj),e(Xj,gMo),e(j_,hMo),e(y,pMo),e(y,D_),e(D_,Kce),e(Kce,_Mo),e(D_,uMo),e(D_,zj),e(zj,bMo),e(D_,vMo),e(y,FMo),e(y,G_),e(G_,Zce),e(Zce,TMo),e(G_,MMo),e(G_,Qj),e(Qj,EMo),e(G_,CMo),e(y,wMo),e(y,O_),e(O_,efe),e(efe,AMo),e(O_,LMo),e(O_,Wj),e(Wj,yMo),e(O_,xMo),e(y,$Mo),e(y,V_),e(V_,ofe),e(ofe,kMo),e(V_,SMo),e(V_,Hj),e(Hj,RMo),e(V_,PMo),e(y,BMo),e(y,X_),e(X_,rfe),e(rfe,IMo),e(X_,NMo),e(X_,Uj),e(Uj,qMo),e(X_,jMo),e(y,DMo),e(y,z_),e(z_,tfe),e(tfe,GMo),e(z_,OMo),e(z_,Jj),e(Jj,VMo),e(z_,XMo),e(y,zMo),e(y,Q_),e(Q_,afe),e(afe,QMo),e(Q_,WMo),e(Q_,Yj),e(Yj,HMo),e(Q_,UMo),e(y,JMo),e(y,W_),e(W_,nfe),e(nfe,YMo),e(W_,KMo),e(W_,Kj),e(Kj,ZMo),e(W_,e4o),e(y,o4o),e(y,H_),e(H_,sfe),e(sfe,r4o),e(H_,t4o),e(H_,Zj),e(Zj,a4o),e(H_,n4o),e(y,s4o),e(y,U_),e(U_,lfe),e(lfe,l4o),e(U_,i4o),e(U_,eD),e(eD,d4o),e(U_,c4o),e(y,f4o),e(y,J_),e(J_,ife),e(ife,m4o),e(J_,g4o),e(J_,oD),e(oD,h4o),e(J_,p4o),e(y,_4o),e(y,Y_),e(Y_,dfe),e(dfe,u4o),e(Y_,b4o),e(Y_,rD),e(rD,v4o),e(Y_,F4o),e(y,T4o),e(y,K_),e(K_,cfe),e(cfe,M4o),e(K_,E4o),e(K_,tD),e(tD,C4o),e(K_,w4o),e(y,A4o),e(y,Z_),e(Z_,ffe),e(ffe,L4o),e(Z_,y4o),e(Z_,aD),e(aD,x4o),e(Z_,$4o),e(y,k4o),e(y,eu),e(eu,mfe),e(mfe,S4o),e(eu,R4o),e(eu,nD),e(nD,P4o),e(eu,B4o),e(y,I4o),e(y,ou),e(ou,gfe),e(gfe,N4o),e(ou,q4o),e(ou,sD),e(sD,j4o),e(ou,D4o),e(y,G4o),e(y,ru),e(ru,hfe),e(hfe,O4o),e(ru,V4o),e(ru,lD),e(lD,X4o),e(ru,z4o),e(y,Q4o),e(y,tu),e(tu,pfe),e(pfe,W4o),e(tu,H4o),e(tu,iD),e(iD,U4o),e(tu,J4o),e(y,Y4o),e(y,au),e(au,_fe),e(_fe,K4o),e(au,Z4o),e(au,dD),e(dD,eEo),e(au,oEo),e(y,rEo),e(y,nu),e(nu,ufe),e(ufe,tEo),e(nu,aEo),e(nu,cD),e(cD,nEo),e(nu,sEo),e(y,lEo),e(y,su),e(su,bfe),e(bfe,iEo),e(su,dEo),e(su,fD),e(fD,cEo),e(su,fEo),e(y,mEo),e(y,lu),e(lu,vfe),e(vfe,gEo),e(lu,hEo),e(lu,mD),e(mD,pEo),e(lu,_Eo),e(y,uEo),e(y,iu),e(iu,Ffe),e(Ffe,bEo),e(iu,vEo),e(iu,gD),e(gD,FEo),e(iu,TEo),e(y,MEo),e(y,du),e(du,Tfe),e(Tfe,EEo),e(du,CEo),e(du,hD),e(hD,wEo),e(du,AEo),e(y,LEo),e(y,cu),e(cu,Mfe),e(Mfe,yEo),e(cu,xEo),e(cu,pD),e(pD,$Eo),e(cu,kEo),e(y,SEo),e(y,fu),e(fu,Efe),e(Efe,REo),e(fu,PEo),e(fu,_D),e(_D,BEo),e(fu,IEo),e(y,NEo),e(y,mu),e(mu,Cfe),e(Cfe,qEo),e(mu,jEo),e(mu,uD),e(uD,DEo),e(mu,GEo),e(y,OEo),e(y,gu),e(gu,wfe),e(wfe,VEo),e(gu,XEo),e(gu,bD),e(bD,zEo),e(gu,QEo),e(y,WEo),e(y,hu),e(hu,Afe),e(Afe,HEo),e(hu,UEo),e(hu,vD),e(vD,JEo),e(hu,YEo),e(y,KEo),e(y,pu),e(pu,Lfe),e(Lfe,ZEo),e(pu,eCo),e(pu,FD),e(FD,oCo),e(pu,rCo),e(y,tCo),e(y,_u),e(_u,yfe),e(yfe,aCo),e(_u,nCo),e(_u,TD),e(TD,sCo),e(_u,lCo),e(y,iCo),e(y,uu),e(uu,xfe),e(xfe,dCo),e(uu,cCo),e(uu,MD),e(MD,fCo),e(uu,mCo),e(y,gCo),e(y,bu),e(bu,$fe),e($fe,hCo),e(bu,pCo),e(bu,ED),e(ED,_Co),e(bu,uCo),e(y,bCo),e(y,vu),e(vu,kfe),e(kfe,vCo),e(vu,FCo),e(vu,CD),e(CD,TCo),e(vu,MCo),e(y,ECo),e(y,Fu),e(Fu,Sfe),e(Sfe,CCo),e(Fu,wCo),e(Fu,wD),e(wD,ACo),e(Fu,LCo),e(y,yCo),e(y,Tu),e(Tu,Rfe),e(Rfe,xCo),e(Tu,$Co),e(Tu,AD),e(AD,kCo),e(Tu,SCo),e(y,RCo),e(y,Mu),e(Mu,Pfe),e(Pfe,PCo),e(Mu,BCo),e(Mu,LD),e(LD,ICo),e(Mu,NCo),e(y,qCo),e(y,Eu),e(Eu,Bfe),e(Bfe,jCo),e(Eu,DCo),e(Eu,yD),e(yD,GCo),e(Eu,OCo),e(y,VCo),e(y,Cu),e(Cu,Ife),e(Ife,XCo),e(Cu,zCo),e(Cu,xD),e(xD,QCo),e(Cu,WCo),e(y,HCo),e(y,wu),e(wu,Nfe),e(Nfe,UCo),e(wu,JCo),e(wu,$D),e($D,YCo),e(wu,KCo),e(y,ZCo),e(y,Au),e(Au,qfe),e(qfe,e5o),e(Au,o5o),e(Au,kD),e(kD,r5o),e(Au,t5o),e(y,a5o),e(y,Lu),e(Lu,jfe),e(jfe,n5o),e(Lu,s5o),e(Lu,SD),e(SD,l5o),e(Lu,i5o),e(y,d5o),e(y,yu),e(yu,Dfe),e(Dfe,c5o),e(yu,f5o),e(yu,RD),e(RD,m5o),e(yu,g5o),e(y,h5o),e(y,xu),e(xu,Gfe),e(Gfe,p5o),e(xu,_5o),e(xu,PD),e(PD,u5o),e(xu,b5o),e(y,v5o),e(y,$u),e($u,Ofe),e(Ofe,F5o),e($u,T5o),e($u,BD),e(BD,M5o),e($u,E5o),e(y,C5o),e(y,ku),e(ku,Vfe),e(Vfe,w5o),e(ku,A5o),e(ku,ID),e(ID,L5o),e(ku,y5o),e(y,x5o),e(y,Su),e(Su,Xfe),e(Xfe,$5o),e(Su,k5o),e(Su,ND),e(ND,S5o),e(Su,R5o),e(y,P5o),e(y,Ru),e(Ru,zfe),e(zfe,B5o),e(Ru,I5o),e(Ru,qD),e(qD,N5o),e(Ru,q5o),e(y,j5o),e(y,Pu),e(Pu,Qfe),e(Qfe,D5o),e(Pu,G5o),e(Pu,jD),e(jD,O5o),e(Pu,V5o),e(y,X5o),e(y,Bu),e(Bu,Wfe),e(Wfe,z5o),e(Bu,Q5o),e(Bu,DD),e(DD,W5o),e(Bu,H5o),e(y,U5o),e(y,Iu),e(Iu,Hfe),e(Hfe,J5o),e(Iu,Y5o),e(Iu,GD),e(GD,K5o),e(Iu,Z5o),e(y,e0o),e(y,Nu),e(Nu,Ufe),e(Ufe,o0o),e(Nu,r0o),e(Nu,OD),e(OD,t0o),e(Nu,a0o),e(y,n0o),e(y,qu),e(qu,Jfe),e(Jfe,s0o),e(qu,l0o),e(qu,VD),e(VD,i0o),e(qu,d0o),e(y,c0o),e(y,ju),e(ju,Yfe),e(Yfe,f0o),e(ju,m0o),e(ju,XD),e(XD,g0o),e(ju,h0o),e(y,p0o),e(y,Du),e(Du,Kfe),e(Kfe,_0o),e(Du,u0o),e(Du,zD),e(zD,b0o),e(Du,v0o),e(y,F0o),e(y,Gu),e(Gu,Zfe),e(Zfe,T0o),e(Gu,M0o),e(Gu,QD),e(QD,E0o),e(Gu,C0o),e(y,w0o),e(y,Ou),e(Ou,eme),e(eme,A0o),e(Ou,L0o),e(Ou,WD),e(WD,y0o),e(Ou,x0o),e(y,$0o),e(y,Vu),e(Vu,ome),e(ome,k0o),e(Vu,S0o),e(Vu,HD),e(HD,R0o),e(Vu,P0o),e(Je,B0o),e(Je,Xu),e(Xu,I0o),e(Xu,rme),e(rme,N0o),e(Xu,q0o),e(Xu,tme),e(tme,j0o),e(Je,D0o),M(zu,Je,null),b(f,UVe,u),b(f,Vi,u),e(Vi,Qu),e(Qu,ame),M(kL,ame,null),e(Vi,G0o),e(Vi,nme),e(nme,O0o),b(f,JVe,u),b(f,$o,u),M(SL,$o,null),e($o,V0o),e($o,Xi),e(Xi,X0o),e(Xi,UD),e(UD,z0o),e(Xi,Q0o),e(Xi,JD),e(JD,W0o),e(Xi,H0o),e($o,U0o),e($o,RL),e(RL,J0o),e(RL,sme),e(sme,Y0o),e(RL,K0o),e($o,Z0o),e($o,it),M(PL,it,null),e(it,ewo),e(it,lme),e(lme,owo),e(it,rwo),e(it,zi),e(zi,two),e(zi,ime),e(ime,awo),e(zi,nwo),e(zi,YD),e(YD,swo),e(zi,lwo),e(it,iwo),M(Wu,it,null),e($o,dwo),e($o,Ye),M(BL,Ye,null),e(Ye,cwo),e(Ye,dme),e(dme,fwo),e(Ye,mwo),e(Ye,Ia),e(Ia,gwo),e(Ia,cme),e(cme,hwo),e(Ia,pwo),e(Ia,fme),e(fme,_wo),e(Ia,uwo),e(Ia,mme),e(mme,bwo),e(Ia,vwo),e(Ye,Fwo),e(Ye,G),e(G,Hu),e(Hu,gme),e(gme,Two),e(Hu,Mwo),e(Hu,KD),e(KD,Ewo),e(Hu,Cwo),e(G,wwo),e(G,Uu),e(Uu,hme),e(hme,Awo),e(Uu,Lwo),e(Uu,ZD),e(ZD,ywo),e(Uu,xwo),e(G,$wo),e(G,Ju),e(Ju,pme),e(pme,kwo),e(Ju,Swo),e(Ju,eG),e(eG,Rwo),e(Ju,Pwo),e(G,Bwo),e(G,Yu),e(Yu,_me),e(_me,Iwo),e(Yu,Nwo),e(Yu,oG),e(oG,qwo),e(Yu,jwo),e(G,Dwo),e(G,Ku),e(Ku,ume),e(ume,Gwo),e(Ku,Owo),e(Ku,rG),e(rG,Vwo),e(Ku,Xwo),e(G,zwo),e(G,Zu),e(Zu,bme),e(bme,Qwo),e(Zu,Wwo),e(Zu,tG),e(tG,Hwo),e(Zu,Uwo),e(G,Jwo),e(G,e1),e(e1,vme),e(vme,Ywo),e(e1,Kwo),e(e1,aG),e(aG,Zwo),e(e1,eAo),e(G,oAo),e(G,o1),e(o1,Fme),e(Fme,rAo),e(o1,tAo),e(o1,nG),e(nG,aAo),e(o1,nAo),e(G,sAo),e(G,r1),e(r1,Tme),e(Tme,lAo),e(r1,iAo),e(r1,sG),e(sG,dAo),e(r1,cAo),e(G,fAo),e(G,t1),e(t1,Mme),e(Mme,mAo),e(t1,gAo),e(t1,lG),e(lG,hAo),e(t1,pAo),e(G,_Ao),e(G,a1),e(a1,Eme),e(Eme,uAo),e(a1,bAo),e(a1,iG),e(iG,vAo),e(a1,FAo),e(G,TAo),e(G,n1),e(n1,Cme),e(Cme,MAo),e(n1,EAo),e(n1,dG),e(dG,CAo),e(n1,wAo),e(G,AAo),e(G,s1),e(s1,wme),e(wme,LAo),e(s1,yAo),e(s1,cG),e(cG,xAo),e(s1,$Ao),e(G,kAo),e(G,l1),e(l1,Ame),e(Ame,SAo),e(l1,RAo),e(l1,fG),e(fG,PAo),e(l1,BAo),e(G,IAo),e(G,i1),e(i1,Lme),e(Lme,NAo),e(i1,qAo),e(i1,mG),e(mG,jAo),e(i1,DAo),e(G,GAo),e(G,d1),e(d1,yme),e(yme,OAo),e(d1,VAo),e(d1,gG),e(gG,XAo),e(d1,zAo),e(G,QAo),e(G,c1),e(c1,xme),e(xme,WAo),e(c1,HAo),e(c1,hG),e(hG,UAo),e(c1,JAo),e(G,YAo),e(G,f1),e(f1,$me),e($me,KAo),e(f1,ZAo),e(f1,pG),e(pG,eLo),e(f1,oLo),e(G,rLo),e(G,m1),e(m1,kme),e(kme,tLo),e(m1,aLo),e(m1,_G),e(_G,nLo),e(m1,sLo),e(G,lLo),e(G,g1),e(g1,Sme),e(Sme,iLo),e(g1,dLo),e(g1,uG),e(uG,cLo),e(g1,fLo),e(G,mLo),e(G,h1),e(h1,Rme),e(Rme,gLo),e(h1,hLo),e(h1,bG),e(bG,pLo),e(h1,_Lo),e(G,uLo),e(G,p1),e(p1,Pme),e(Pme,bLo),e(p1,vLo),e(p1,vG),e(vG,FLo),e(p1,TLo),e(G,MLo),e(G,_1),e(_1,Bme),e(Bme,ELo),e(_1,CLo),e(_1,FG),e(FG,wLo),e(_1,ALo),e(G,LLo),e(G,u1),e(u1,Ime),e(Ime,yLo),e(u1,xLo),e(u1,TG),e(TG,$Lo),e(u1,kLo),e(G,SLo),e(G,b1),e(b1,Nme),e(Nme,RLo),e(b1,PLo),e(b1,MG),e(MG,BLo),e(b1,ILo),e(G,NLo),e(G,v1),e(v1,qme),e(qme,qLo),e(v1,jLo),e(v1,EG),e(EG,DLo),e(v1,GLo),e(G,OLo),e(G,F1),e(F1,jme),e(jme,VLo),e(F1,XLo),e(F1,CG),e(CG,zLo),e(F1,QLo),e(G,WLo),e(G,T1),e(T1,Dme),e(Dme,HLo),e(T1,ULo),e(T1,wG),e(wG,JLo),e(T1,YLo),e(G,KLo),e(G,M1),e(M1,Gme),e(Gme,ZLo),e(M1,eyo),e(M1,AG),e(AG,oyo),e(M1,ryo),e(G,tyo),e(G,E1),e(E1,Ome),e(Ome,ayo),e(E1,nyo),e(E1,LG),e(LG,syo),e(E1,lyo),e(G,iyo),e(G,C1),e(C1,Vme),e(Vme,dyo),e(C1,cyo),e(C1,yG),e(yG,fyo),e(C1,myo),e(G,gyo),e(G,w1),e(w1,Xme),e(Xme,hyo),e(w1,pyo),e(w1,xG),e(xG,_yo),e(w1,uyo),e(G,byo),e(G,A1),e(A1,zme),e(zme,vyo),e(A1,Fyo),e(A1,$G),e($G,Tyo),e(A1,Myo),e(G,Eyo),e(G,L1),e(L1,Qme),e(Qme,Cyo),e(L1,wyo),e(L1,kG),e(kG,Ayo),e(L1,Lyo),e(G,yyo),e(G,y1),e(y1,Wme),e(Wme,xyo),e(y1,$yo),e(y1,SG),e(SG,kyo),e(y1,Syo),e(G,Ryo),e(G,x1),e(x1,Hme),e(Hme,Pyo),e(x1,Byo),e(x1,RG),e(RG,Iyo),e(x1,Nyo),e(G,qyo),e(G,$1),e($1,Ume),e(Ume,jyo),e($1,Dyo),e($1,PG),e(PG,Gyo),e($1,Oyo),e(G,Vyo),e(G,k1),e(k1,Jme),e(Jme,Xyo),e(k1,zyo),e(k1,BG),e(BG,Qyo),e(k1,Wyo),e(G,Hyo),e(G,S1),e(S1,Yme),e(Yme,Uyo),e(S1,Jyo),e(S1,IG),e(IG,Yyo),e(S1,Kyo),e(G,Zyo),e(G,R1),e(R1,Kme),e(Kme,e8o),e(R1,o8o),e(R1,NG),e(NG,r8o),e(R1,t8o),e(G,a8o),e(G,P1),e(P1,Zme),e(Zme,n8o),e(P1,s8o),e(P1,qG),e(qG,l8o),e(P1,i8o),e(G,d8o),e(G,B1),e(B1,ege),e(ege,c8o),e(B1,f8o),e(B1,jG),e(jG,m8o),e(B1,g8o),e(G,h8o),e(G,I1),e(I1,oge),e(oge,p8o),e(I1,_8o),e(I1,DG),e(DG,u8o),e(I1,b8o),e(G,v8o),e(G,N1),e(N1,rge),e(rge,F8o),e(N1,T8o),e(N1,GG),e(GG,M8o),e(N1,E8o),e(G,C8o),e(G,q1),e(q1,tge),e(tge,w8o),e(q1,A8o),e(q1,OG),e(OG,L8o),e(q1,y8o),e(Ye,x8o),e(Ye,j1),e(j1,$8o),e(j1,age),e(age,k8o),e(j1,S8o),e(j1,nge),e(nge,R8o),e(Ye,P8o),M(D1,Ye,null),b(f,YVe,u),b(f,Qi,u),e(Qi,G1),e(G1,sge),M(IL,sge,null),e(Qi,B8o),e(Qi,lge),e(lge,I8o),b(f,KVe,u),b(f,ko,u),M(NL,ko,null),e(ko,N8o),e(ko,Wi),e(Wi,q8o),e(Wi,VG),e(VG,j8o),e(Wi,D8o),e(Wi,XG),e(XG,G8o),e(Wi,O8o),e(ko,V8o),e(ko,qL),e(qL,X8o),e(qL,ige),e(ige,z8o),e(qL,Q8o),e(ko,W8o),e(ko,dt),M(jL,dt,null),e(dt,H8o),e(dt,dge),e(dge,U8o),e(dt,J8o),e(dt,Hi),e(Hi,Y8o),e(Hi,cge),e(cge,K8o),e(Hi,Z8o),e(Hi,zG),e(zG,exo),e(Hi,oxo),e(dt,rxo),M(O1,dt,null),e(ko,txo),e(ko,Ke),M(DL,Ke,null),e(Ke,axo),e(Ke,fge),e(fge,nxo),e(Ke,sxo),e(Ke,Na),e(Na,lxo),e(Na,mge),e(mge,ixo),e(Na,dxo),e(Na,gge),e(gge,cxo),e(Na,fxo),e(Na,hge),e(hge,mxo),e(Na,gxo),e(Ke,hxo),e(Ke,z),e(z,V1),e(V1,pge),e(pge,pxo),e(V1,_xo),e(V1,QG),e(QG,uxo),e(V1,bxo),e(z,vxo),e(z,X1),e(X1,_ge),e(_ge,Fxo),e(X1,Txo),e(X1,WG),e(WG,Mxo),e(X1,Exo),e(z,Cxo),e(z,z1),e(z1,uge),e(uge,wxo),e(z1,Axo),e(z1,HG),e(HG,Lxo),e(z1,yxo),e(z,xxo),e(z,Q1),e(Q1,bge),e(bge,$xo),e(Q1,kxo),e(Q1,UG),e(UG,Sxo),e(Q1,Rxo),e(z,Pxo),e(z,W1),e(W1,vge),e(vge,Bxo),e(W1,Ixo),e(W1,JG),e(JG,Nxo),e(W1,qxo),e(z,jxo),e(z,H1),e(H1,Fge),e(Fge,Dxo),e(H1,Gxo),e(H1,YG),e(YG,Oxo),e(H1,Vxo),e(z,Xxo),e(z,U1),e(U1,Tge),e(Tge,zxo),e(U1,Qxo),e(U1,KG),e(KG,Wxo),e(U1,Hxo),e(z,Uxo),e(z,J1),e(J1,Mge),e(Mge,Jxo),e(J1,Yxo),e(J1,ZG),e(ZG,Kxo),e(J1,Zxo),e(z,e$o),e(z,Y1),e(Y1,Ege),e(Ege,o$o),e(Y1,r$o),e(Y1,eO),e(eO,t$o),e(Y1,a$o),e(z,n$o),e(z,K1),e(K1,Cge),e(Cge,s$o),e(K1,l$o),e(K1,oO),e(oO,i$o),e(K1,d$o),e(z,c$o),e(z,Z1),e(Z1,wge),e(wge,f$o),e(Z1,m$o),e(Z1,rO),e(rO,g$o),e(Z1,h$o),e(z,p$o),e(z,e2),e(e2,Age),e(Age,_$o),e(e2,u$o),e(e2,tO),e(tO,b$o),e(e2,v$o),e(z,F$o),e(z,o2),e(o2,Lge),e(Lge,T$o),e(o2,M$o),e(o2,aO),e(aO,E$o),e(o2,C$o),e(z,w$o),e(z,r2),e(r2,yge),e(yge,A$o),e(r2,L$o),e(r2,nO),e(nO,y$o),e(r2,x$o),e(z,$$o),e(z,t2),e(t2,xge),e(xge,k$o),e(t2,S$o),e(t2,sO),e(sO,R$o),e(t2,P$o),e(z,B$o),e(z,a2),e(a2,$ge),e($ge,I$o),e(a2,N$o),e(a2,lO),e(lO,q$o),e(a2,j$o),e(z,D$o),e(z,n2),e(n2,kge),e(kge,G$o),e(n2,O$o),e(n2,iO),e(iO,V$o),e(n2,X$o),e(z,z$o),e(z,s2),e(s2,Sge),e(Sge,Q$o),e(s2,W$o),e(s2,dO),e(dO,H$o),e(s2,U$o),e(z,J$o),e(z,l2),e(l2,Rge),e(Rge,Y$o),e(l2,K$o),e(l2,cO),e(cO,Z$o),e(l2,eko),e(z,oko),e(z,i2),e(i2,Pge),e(Pge,rko),e(i2,tko),e(i2,fO),e(fO,ako),e(i2,nko),e(z,sko),e(z,d2),e(d2,Bge),e(Bge,lko),e(d2,iko),e(d2,mO),e(mO,dko),e(d2,cko),e(z,fko),e(z,c2),e(c2,Ige),e(Ige,mko),e(c2,gko),e(c2,gO),e(gO,hko),e(c2,pko),e(z,_ko),e(z,f2),e(f2,Nge),e(Nge,uko),e(f2,bko),e(f2,hO),e(hO,vko),e(f2,Fko),e(z,Tko),e(z,m2),e(m2,qge),e(qge,Mko),e(m2,Eko),e(m2,pO),e(pO,Cko),e(m2,wko),e(z,Ako),e(z,g2),e(g2,jge),e(jge,Lko),e(g2,yko),e(g2,_O),e(_O,xko),e(g2,$ko),e(z,kko),e(z,h2),e(h2,Dge),e(Dge,Sko),e(h2,Rko),e(h2,uO),e(uO,Pko),e(h2,Bko),e(z,Iko),e(z,p2),e(p2,Gge),e(Gge,Nko),e(p2,qko),e(p2,bO),e(bO,jko),e(p2,Dko),e(z,Gko),e(z,_2),e(_2,Oge),e(Oge,Oko),e(_2,Vko),e(_2,vO),e(vO,Xko),e(_2,zko),e(z,Qko),e(z,u2),e(u2,Vge),e(Vge,Wko),e(u2,Hko),e(u2,FO),e(FO,Uko),e(u2,Jko),e(z,Yko),e(z,b2),e(b2,Xge),e(Xge,Kko),e(b2,Zko),e(b2,TO),e(TO,eSo),e(b2,oSo),e(z,rSo),e(z,v2),e(v2,zge),e(zge,tSo),e(v2,aSo),e(v2,MO),e(MO,nSo),e(v2,sSo),e(z,lSo),e(z,F2),e(F2,Qge),e(Qge,iSo),e(F2,dSo),e(F2,EO),e(EO,cSo),e(F2,fSo),e(z,mSo),e(z,T2),e(T2,Wge),e(Wge,gSo),e(T2,hSo),e(T2,CO),e(CO,pSo),e(T2,_So),e(z,uSo),e(z,M2),e(M2,Hge),e(Hge,bSo),e(M2,vSo),e(M2,wO),e(wO,FSo),e(M2,TSo),e(z,MSo),e(z,E2),e(E2,Uge),e(Uge,ESo),e(E2,CSo),e(E2,AO),e(AO,wSo),e(E2,ASo),e(z,LSo),e(z,C2),e(C2,Jge),e(Jge,ySo),e(C2,xSo),e(C2,LO),e(LO,$So),e(C2,kSo),e(z,SSo),e(z,w2),e(w2,Yge),e(Yge,RSo),e(w2,PSo),e(w2,yO),e(yO,BSo),e(w2,ISo),e(z,NSo),e(z,A2),e(A2,Kge),e(Kge,qSo),e(A2,jSo),e(A2,xO),e(xO,DSo),e(A2,GSo),e(z,OSo),e(z,L2),e(L2,Zge),e(Zge,VSo),e(L2,XSo),e(L2,$O),e($O,zSo),e(L2,QSo),e(z,WSo),e(z,y2),e(y2,ehe),e(ehe,HSo),e(y2,USo),e(y2,kO),e(kO,JSo),e(y2,YSo),e(Ke,KSo),e(Ke,x2),e(x2,ZSo),e(x2,ohe),e(ohe,eRo),e(x2,oRo),e(x2,rhe),e(rhe,rRo),e(Ke,tRo),M($2,Ke,null),b(f,ZVe,u),b(f,Ui,u),e(Ui,k2),e(k2,the),M(GL,the,null),e(Ui,aRo),e(Ui,ahe),e(ahe,nRo),b(f,eXe,u),b(f,So,u),M(OL,So,null),e(So,sRo),e(So,Ji),e(Ji,lRo),e(Ji,SO),e(SO,iRo),e(Ji,dRo),e(Ji,RO),e(RO,cRo),e(Ji,fRo),e(So,mRo),e(So,VL),e(VL,gRo),e(VL,nhe),e(nhe,hRo),e(VL,pRo),e(So,_Ro),e(So,ct),M(XL,ct,null),e(ct,uRo),e(ct,she),e(she,bRo),e(ct,vRo),e(ct,Yi),e(Yi,FRo),e(Yi,lhe),e(lhe,TRo),e(Yi,MRo),e(Yi,PO),e(PO,ERo),e(Yi,CRo),e(ct,wRo),M(S2,ct,null),e(So,ARo),e(So,Ze),M(zL,Ze,null),e(Ze,LRo),e(Ze,ihe),e(ihe,yRo),e(Ze,xRo),e(Ze,qa),e(qa,$Ro),e(qa,dhe),e(dhe,kRo),e(qa,SRo),e(qa,che),e(che,RRo),e(qa,PRo),e(qa,fhe),e(fhe,BRo),e(qa,IRo),e(Ze,NRo),e(Ze,W),e(W,R2),e(R2,mhe),e(mhe,qRo),e(R2,jRo),e(R2,BO),e(BO,DRo),e(R2,GRo),e(W,ORo),e(W,P2),e(P2,ghe),e(ghe,VRo),e(P2,XRo),e(P2,IO),e(IO,zRo),e(P2,QRo),e(W,WRo),e(W,B2),e(B2,hhe),e(hhe,HRo),e(B2,URo),e(B2,NO),e(NO,JRo),e(B2,YRo),e(W,KRo),e(W,I2),e(I2,phe),e(phe,ZRo),e(I2,ePo),e(I2,qO),e(qO,oPo),e(I2,rPo),e(W,tPo),e(W,N2),e(N2,_he),e(_he,aPo),e(N2,nPo),e(N2,jO),e(jO,sPo),e(N2,lPo),e(W,iPo),e(W,q2),e(q2,uhe),e(uhe,dPo),e(q2,cPo),e(q2,DO),e(DO,fPo),e(q2,mPo),e(W,gPo),e(W,j2),e(j2,bhe),e(bhe,hPo),e(j2,pPo),e(j2,GO),e(GO,_Po),e(j2,uPo),e(W,bPo),e(W,D2),e(D2,vhe),e(vhe,vPo),e(D2,FPo),e(D2,OO),e(OO,TPo),e(D2,MPo),e(W,EPo),e(W,G2),e(G2,Fhe),e(Fhe,CPo),e(G2,wPo),e(G2,VO),e(VO,APo),e(G2,LPo),e(W,yPo),e(W,O2),e(O2,The),e(The,xPo),e(O2,$Po),e(O2,XO),e(XO,kPo),e(O2,SPo),e(W,RPo),e(W,V2),e(V2,Mhe),e(Mhe,PPo),e(V2,BPo),e(V2,zO),e(zO,IPo),e(V2,NPo),e(W,qPo),e(W,X2),e(X2,Ehe),e(Ehe,jPo),e(X2,DPo),e(X2,QO),e(QO,GPo),e(X2,OPo),e(W,VPo),e(W,z2),e(z2,Che),e(Che,XPo),e(z2,zPo),e(z2,WO),e(WO,QPo),e(z2,WPo),e(W,HPo),e(W,Q2),e(Q2,whe),e(whe,UPo),e(Q2,JPo),e(Q2,HO),e(HO,YPo),e(Q2,KPo),e(W,ZPo),e(W,W2),e(W2,Ahe),e(Ahe,eBo),e(W2,oBo),e(W2,UO),e(UO,rBo),e(W2,tBo),e(W,aBo),e(W,H2),e(H2,Lhe),e(Lhe,nBo),e(H2,sBo),e(H2,JO),e(JO,lBo),e(H2,iBo),e(W,dBo),e(W,U2),e(U2,yhe),e(yhe,cBo),e(U2,fBo),e(U2,YO),e(YO,mBo),e(U2,gBo),e(W,hBo),e(W,J2),e(J2,xhe),e(xhe,pBo),e(J2,_Bo),e(J2,KO),e(KO,uBo),e(J2,bBo),e(W,vBo),e(W,Y2),e(Y2,$he),e($he,FBo),e(Y2,TBo),e(Y2,ZO),e(ZO,MBo),e(Y2,EBo),e(W,CBo),e(W,K2),e(K2,khe),e(khe,wBo),e(K2,ABo),e(K2,eV),e(eV,LBo),e(K2,yBo),e(W,xBo),e(W,Z2),e(Z2,She),e(She,$Bo),e(Z2,kBo),e(Z2,oV),e(oV,SBo),e(Z2,RBo),e(W,PBo),e(W,eb),e(eb,Rhe),e(Rhe,BBo),e(eb,IBo),e(eb,rV),e(rV,NBo),e(eb,qBo),e(W,jBo),e(W,ob),e(ob,Phe),e(Phe,DBo),e(ob,GBo),e(ob,tV),e(tV,OBo),e(ob,VBo),e(W,XBo),e(W,rb),e(rb,Bhe),e(Bhe,zBo),e(rb,QBo),e(rb,aV),e(aV,WBo),e(rb,HBo),e(W,UBo),e(W,tb),e(tb,Ihe),e(Ihe,JBo),e(tb,YBo),e(tb,nV),e(nV,KBo),e(tb,ZBo),e(W,eIo),e(W,ab),e(ab,Nhe),e(Nhe,oIo),e(ab,rIo),e(ab,sV),e(sV,tIo),e(ab,aIo),e(W,nIo),e(W,nb),e(nb,qhe),e(qhe,sIo),e(nb,lIo),e(nb,lV),e(lV,iIo),e(nb,dIo),e(W,cIo),e(W,sb),e(sb,jhe),e(jhe,fIo),e(sb,mIo),e(sb,iV),e(iV,gIo),e(sb,hIo),e(W,pIo),e(W,lb),e(lb,Dhe),e(Dhe,_Io),e(lb,uIo),e(lb,dV),e(dV,bIo),e(lb,vIo),e(W,FIo),e(W,ib),e(ib,Ghe),e(Ghe,TIo),e(ib,MIo),e(ib,cV),e(cV,EIo),e(ib,CIo),e(W,wIo),e(W,db),e(db,Ohe),e(Ohe,AIo),e(db,LIo),e(db,fV),e(fV,yIo),e(db,xIo),e(W,$Io),e(W,cb),e(cb,Vhe),e(Vhe,kIo),e(cb,SIo),e(cb,mV),e(mV,RIo),e(cb,PIo),e(W,BIo),e(W,fb),e(fb,Xhe),e(Xhe,IIo),e(fb,NIo),e(fb,gV),e(gV,qIo),e(fb,jIo),e(W,DIo),e(W,mb),e(mb,zhe),e(zhe,GIo),e(mb,OIo),e(mb,Qhe),e(Qhe,VIo),e(mb,XIo),e(W,zIo),e(W,gb),e(gb,Whe),e(Whe,QIo),e(gb,WIo),e(gb,hV),e(hV,HIo),e(gb,UIo),e(W,JIo),e(W,hb),e(hb,Hhe),e(Hhe,YIo),e(hb,KIo),e(hb,pV),e(pV,ZIo),e(hb,eNo),e(W,oNo),e(W,pb),e(pb,Uhe),e(Uhe,rNo),e(pb,tNo),e(pb,_V),e(_V,aNo),e(pb,nNo),e(W,sNo),e(W,_b),e(_b,Jhe),e(Jhe,lNo),e(_b,iNo),e(_b,uV),e(uV,dNo),e(_b,cNo),e(Ze,fNo),e(Ze,ub),e(ub,mNo),e(ub,Yhe),e(Yhe,gNo),e(ub,hNo),e(ub,Khe),e(Khe,pNo),e(Ze,_No),M(bb,Ze,null),b(f,oXe,u),b(f,Ki,u),e(Ki,vb),e(vb,Zhe),M(QL,Zhe,null),e(Ki,uNo),e(Ki,epe),e(epe,bNo),b(f,rXe,u),b(f,Ro,u),M(WL,Ro,null),e(Ro,vNo),e(Ro,Zi),e(Zi,FNo),e(Zi,bV),e(bV,TNo),e(Zi,MNo),e(Zi,vV),e(vV,ENo),e(Zi,CNo),e(Ro,wNo),e(Ro,HL),e(HL,ANo),e(HL,ope),e(ope,LNo),e(HL,yNo),e(Ro,xNo),e(Ro,ft),M(UL,ft,null),e(ft,$No),e(ft,rpe),e(rpe,kNo),e(ft,SNo),e(ft,ed),e(ed,RNo),e(ed,tpe),e(tpe,PNo),e(ed,BNo),e(ed,FV),e(FV,INo),e(ed,NNo),e(ft,qNo),M(Fb,ft,null),e(Ro,jNo),e(Ro,eo),M(JL,eo,null),e(eo,DNo),e(eo,ape),e(ape,GNo),e(eo,ONo),e(eo,ja),e(ja,VNo),e(ja,npe),e(npe,XNo),e(ja,zNo),e(ja,spe),e(spe,QNo),e(ja,WNo),e(ja,lpe),e(lpe,HNo),e(ja,UNo),e(eo,JNo),e(eo,pe),e(pe,Tb),e(Tb,ipe),e(ipe,YNo),e(Tb,KNo),e(Tb,TV),e(TV,ZNo),e(Tb,eqo),e(pe,oqo),e(pe,Mb),e(Mb,dpe),e(dpe,rqo),e(Mb,tqo),e(Mb,MV),e(MV,aqo),e(Mb,nqo),e(pe,sqo),e(pe,Eb),e(Eb,cpe),e(cpe,lqo),e(Eb,iqo),e(Eb,EV),e(EV,dqo),e(Eb,cqo),e(pe,fqo),e(pe,Cb),e(Cb,fpe),e(fpe,mqo),e(Cb,gqo),e(Cb,CV),e(CV,hqo),e(Cb,pqo),e(pe,_qo),e(pe,wb),e(wb,mpe),e(mpe,uqo),e(wb,bqo),e(wb,wV),e(wV,vqo),e(wb,Fqo),e(pe,Tqo),e(pe,Ab),e(Ab,gpe),e(gpe,Mqo),e(Ab,Eqo),e(Ab,AV),e(AV,Cqo),e(Ab,wqo),e(pe,Aqo),e(pe,Lb),e(Lb,hpe),e(hpe,Lqo),e(Lb,yqo),e(Lb,LV),e(LV,xqo),e(Lb,$qo),e(pe,kqo),e(pe,yb),e(yb,ppe),e(ppe,Sqo),e(yb,Rqo),e(yb,yV),e(yV,Pqo),e(yb,Bqo),e(pe,Iqo),e(pe,xb),e(xb,_pe),e(_pe,Nqo),e(xb,qqo),e(xb,xV),e(xV,jqo),e(xb,Dqo),e(pe,Gqo),e(pe,$b),e($b,upe),e(upe,Oqo),e($b,Vqo),e($b,$V),e($V,Xqo),e($b,zqo),e(pe,Qqo),e(pe,kb),e(kb,bpe),e(bpe,Wqo),e(kb,Hqo),e(kb,kV),e(kV,Uqo),e(kb,Jqo),e(pe,Yqo),e(pe,Sb),e(Sb,vpe),e(vpe,Kqo),e(Sb,Zqo),e(Sb,SV),e(SV,ejo),e(Sb,ojo),e(pe,rjo),e(pe,Rb),e(Rb,Fpe),e(Fpe,tjo),e(Rb,ajo),e(Rb,RV),e(RV,njo),e(Rb,sjo),e(pe,ljo),e(pe,Pb),e(Pb,Tpe),e(Tpe,ijo),e(Pb,djo),e(Pb,PV),e(PV,cjo),e(Pb,fjo),e(pe,mjo),e(pe,Bb),e(Bb,Mpe),e(Mpe,gjo),e(Bb,hjo),e(Bb,BV),e(BV,pjo),e(Bb,_jo),e(pe,ujo),e(pe,Ib),e(Ib,Epe),e(Epe,bjo),e(Ib,vjo),e(Ib,IV),e(IV,Fjo),e(Ib,Tjo),e(pe,Mjo),e(pe,Nb),e(Nb,Cpe),e(Cpe,Ejo),e(Nb,Cjo),e(Nb,NV),e(NV,wjo),e(Nb,Ajo),e(pe,Ljo),e(pe,qb),e(qb,wpe),e(wpe,yjo),e(qb,xjo),e(qb,qV),e(qV,$jo),e(qb,kjo),e(eo,Sjo),e(eo,jb),e(jb,Rjo),e(jb,Ape),e(Ape,Pjo),e(jb,Bjo),e(jb,Lpe),e(Lpe,Ijo),e(eo,Njo),M(Db,eo,null),b(f,tXe,u),b(f,od,u),e(od,Gb),e(Gb,ype),M(YL,ype,null),e(od,qjo),e(od,xpe),e(xpe,jjo),b(f,aXe,u),b(f,Po,u),M(KL,Po,null),e(Po,Djo),e(Po,rd),e(rd,Gjo),e(rd,jV),e(jV,Ojo),e(rd,Vjo),e(rd,DV),e(DV,Xjo),e(rd,zjo),e(Po,Qjo),e(Po,ZL),e(ZL,Wjo),e(ZL,$pe),e($pe,Hjo),e(ZL,Ujo),e(Po,Jjo),e(Po,mt),M(ey,mt,null),e(mt,Yjo),e(mt,kpe),e(kpe,Kjo),e(mt,Zjo),e(mt,td),e(td,eDo),e(td,Spe),e(Spe,oDo),e(td,rDo),e(td,GV),e(GV,tDo),e(td,aDo),e(mt,nDo),M(Ob,mt,null),e(Po,sDo),e(Po,oo),M(oy,oo,null),e(oo,lDo),e(oo,Rpe),e(Rpe,iDo),e(oo,dDo),e(oo,Da),e(Da,cDo),e(Da,Ppe),e(Ppe,fDo),e(Da,mDo),e(Da,Bpe),e(Bpe,gDo),e(Da,hDo),e(Da,Ipe),e(Ipe,pDo),e(Da,_Do),e(oo,uDo),e(oo,N),e(N,Vb),e(Vb,Npe),e(Npe,bDo),e(Vb,vDo),e(Vb,OV),e(OV,FDo),e(Vb,TDo),e(N,MDo),e(N,Xb),e(Xb,qpe),e(qpe,EDo),e(Xb,CDo),e(Xb,VV),e(VV,wDo),e(Xb,ADo),e(N,LDo),e(N,zb),e(zb,jpe),e(jpe,yDo),e(zb,xDo),e(zb,XV),e(XV,$Do),e(zb,kDo),e(N,SDo),e(N,Qb),e(Qb,Dpe),e(Dpe,RDo),e(Qb,PDo),e(Qb,zV),e(zV,BDo),e(Qb,IDo),e(N,NDo),e(N,Wb),e(Wb,Gpe),e(Gpe,qDo),e(Wb,jDo),e(Wb,QV),e(QV,DDo),e(Wb,GDo),e(N,ODo),e(N,Hb),e(Hb,Ope),e(Ope,VDo),e(Hb,XDo),e(Hb,WV),e(WV,zDo),e(Hb,QDo),e(N,WDo),e(N,Ub),e(Ub,Vpe),e(Vpe,HDo),e(Ub,UDo),e(Ub,HV),e(HV,JDo),e(Ub,YDo),e(N,KDo),e(N,Jb),e(Jb,Xpe),e(Xpe,ZDo),e(Jb,eGo),e(Jb,UV),e(UV,oGo),e(Jb,rGo),e(N,tGo),e(N,Yb),e(Yb,zpe),e(zpe,aGo),e(Yb,nGo),e(Yb,JV),e(JV,sGo),e(Yb,lGo),e(N,iGo),e(N,Kb),e(Kb,Qpe),e(Qpe,dGo),e(Kb,cGo),e(Kb,YV),e(YV,fGo),e(Kb,mGo),e(N,gGo),e(N,Zb),e(Zb,Wpe),e(Wpe,hGo),e(Zb,pGo),e(Zb,KV),e(KV,_Go),e(Zb,uGo),e(N,bGo),e(N,ev),e(ev,Hpe),e(Hpe,vGo),e(ev,FGo),e(ev,ZV),e(ZV,TGo),e(ev,MGo),e(N,EGo),e(N,ov),e(ov,Upe),e(Upe,CGo),e(ov,wGo),e(ov,eX),e(eX,AGo),e(ov,LGo),e(N,yGo),e(N,rv),e(rv,Jpe),e(Jpe,xGo),e(rv,$Go),e(rv,oX),e(oX,kGo),e(rv,SGo),e(N,RGo),e(N,tv),e(tv,Ype),e(Ype,PGo),e(tv,BGo),e(tv,rX),e(rX,IGo),e(tv,NGo),e(N,qGo),e(N,av),e(av,Kpe),e(Kpe,jGo),e(av,DGo),e(av,tX),e(tX,GGo),e(av,OGo),e(N,VGo),e(N,nv),e(nv,Zpe),e(Zpe,XGo),e(nv,zGo),e(nv,aX),e(aX,QGo),e(nv,WGo),e(N,HGo),e(N,sv),e(sv,e_e),e(e_e,UGo),e(sv,JGo),e(sv,nX),e(nX,YGo),e(sv,KGo),e(N,ZGo),e(N,lv),e(lv,o_e),e(o_e,eOo),e(lv,oOo),e(lv,sX),e(sX,rOo),e(lv,tOo),e(N,aOo),e(N,iv),e(iv,r_e),e(r_e,nOo),e(iv,sOo),e(iv,lX),e(lX,lOo),e(iv,iOo),e(N,dOo),e(N,dv),e(dv,t_e),e(t_e,cOo),e(dv,fOo),e(dv,iX),e(iX,mOo),e(dv,gOo),e(N,hOo),e(N,cv),e(cv,a_e),e(a_e,pOo),e(cv,_Oo),e(cv,dX),e(dX,uOo),e(cv,bOo),e(N,vOo),e(N,fv),e(fv,n_e),e(n_e,FOo),e(fv,TOo),e(fv,cX),e(cX,MOo),e(fv,EOo),e(N,COo),e(N,mv),e(mv,s_e),e(s_e,wOo),e(mv,AOo),e(mv,fX),e(fX,LOo),e(mv,yOo),e(N,xOo),e(N,gv),e(gv,l_e),e(l_e,$Oo),e(gv,kOo),e(gv,mX),e(mX,SOo),e(gv,ROo),e(N,POo),e(N,hv),e(hv,i_e),e(i_e,BOo),e(hv,IOo),e(hv,gX),e(gX,NOo),e(hv,qOo),e(N,jOo),e(N,pv),e(pv,d_e),e(d_e,DOo),e(pv,GOo),e(pv,hX),e(hX,OOo),e(pv,VOo),e(N,XOo),e(N,_v),e(_v,c_e),e(c_e,zOo),e(_v,QOo),e(_v,pX),e(pX,WOo),e(_v,HOo),e(N,UOo),e(N,uv),e(uv,f_e),e(f_e,JOo),e(uv,YOo),e(uv,_X),e(_X,KOo),e(uv,ZOo),e(N,eVo),e(N,bv),e(bv,m_e),e(m_e,oVo),e(bv,rVo),e(bv,uX),e(uX,tVo),e(bv,aVo),e(N,nVo),e(N,vv),e(vv,g_e),e(g_e,sVo),e(vv,lVo),e(vv,bX),e(bX,iVo),e(vv,dVo),e(N,cVo),e(N,Fv),e(Fv,h_e),e(h_e,fVo),e(Fv,mVo),e(Fv,vX),e(vX,gVo),e(Fv,hVo),e(N,pVo),e(N,Tv),e(Tv,p_e),e(p_e,_Vo),e(Tv,uVo),e(Tv,FX),e(FX,bVo),e(Tv,vVo),e(N,FVo),e(N,Mv),e(Mv,__e),e(__e,TVo),e(Mv,MVo),e(Mv,TX),e(TX,EVo),e(Mv,CVo),e(N,wVo),e(N,Ev),e(Ev,u_e),e(u_e,AVo),e(Ev,LVo),e(Ev,MX),e(MX,yVo),e(Ev,xVo),e(N,$Vo),e(N,Cv),e(Cv,b_e),e(b_e,kVo),e(Cv,SVo),e(Cv,EX),e(EX,RVo),e(Cv,PVo),e(N,BVo),e(N,wv),e(wv,v_e),e(v_e,IVo),e(wv,NVo),e(wv,CX),e(CX,qVo),e(wv,jVo),e(N,DVo),e(N,Av),e(Av,F_e),e(F_e,GVo),e(Av,OVo),e(Av,wX),e(wX,VVo),e(Av,XVo),e(N,zVo),e(N,Lv),e(Lv,T_e),e(T_e,QVo),e(Lv,WVo),e(Lv,AX),e(AX,HVo),e(Lv,UVo),e(N,JVo),e(N,yv),e(yv,M_e),e(M_e,YVo),e(yv,KVo),e(yv,LX),e(LX,ZVo),e(yv,eXo),e(N,oXo),e(N,xv),e(xv,E_e),e(E_e,rXo),e(xv,tXo),e(xv,yX),e(yX,aXo),e(xv,nXo),e(N,sXo),e(N,$v),e($v,C_e),e(C_e,lXo),e($v,iXo),e($v,xX),e(xX,dXo),e($v,cXo),e(N,fXo),e(N,kv),e(kv,w_e),e(w_e,mXo),e(kv,gXo),e(kv,$X),e($X,hXo),e(kv,pXo),e(N,_Xo),e(N,Sv),e(Sv,A_e),e(A_e,uXo),e(Sv,bXo),e(Sv,kX),e(kX,vXo),e(Sv,FXo),e(N,TXo),e(N,Rv),e(Rv,L_e),e(L_e,MXo),e(Rv,EXo),e(Rv,SX),e(SX,CXo),e(Rv,wXo),e(N,AXo),e(N,Pv),e(Pv,y_e),e(y_e,LXo),e(Pv,yXo),e(Pv,RX),e(RX,xXo),e(Pv,$Xo),e(N,kXo),e(N,Bv),e(Bv,x_e),e(x_e,SXo),e(Bv,RXo),e(Bv,PX),e(PX,PXo),e(Bv,BXo),e(N,IXo),e(N,Iv),e(Iv,$_e),e($_e,NXo),e(Iv,qXo),e(Iv,BX),e(BX,jXo),e(Iv,DXo),e(N,GXo),e(N,Nv),e(Nv,k_e),e(k_e,OXo),e(Nv,VXo),e(Nv,IX),e(IX,XXo),e(Nv,zXo),e(N,QXo),e(N,qv),e(qv,S_e),e(S_e,WXo),e(qv,HXo),e(qv,NX),e(NX,UXo),e(qv,JXo),e(oo,YXo),e(oo,jv),e(jv,KXo),e(jv,R_e),e(R_e,ZXo),e(jv,ezo),e(jv,P_e),e(P_e,ozo),e(oo,rzo),M(Dv,oo,null),b(f,nXe,u),b(f,ad,u),e(ad,Gv),e(Gv,B_e),M(ry,B_e,null),e(ad,tzo),e(ad,I_e),e(I_e,azo),b(f,sXe,u),b(f,Bo,u),M(ty,Bo,null),e(Bo,nzo),e(Bo,nd),e(nd,szo),e(nd,qX),e(qX,lzo),e(nd,izo),e(nd,jX),e(jX,dzo),e(nd,czo),e(Bo,fzo),e(Bo,ay),e(ay,mzo),e(ay,N_e),e(N_e,gzo),e(ay,hzo),e(Bo,pzo),e(Bo,gt),M(ny,gt,null),e(gt,_zo),e(gt,q_e),e(q_e,uzo),e(gt,bzo),e(gt,sd),e(sd,vzo),e(sd,j_e),e(j_e,Fzo),e(sd,Tzo),e(sd,DX),e(DX,Mzo),e(sd,Ezo),e(gt,Czo),M(Ov,gt,null),e(Bo,wzo),e(Bo,ro),M(sy,ro,null),e(ro,Azo),e(ro,D_e),e(D_e,Lzo),e(ro,yzo),e(ro,Ga),e(Ga,xzo),e(Ga,G_e),e(G_e,$zo),e(Ga,kzo),e(Ga,O_e),e(O_e,Szo),e(Ga,Rzo),e(Ga,V_e),e(V_e,Pzo),e(Ga,Bzo),e(ro,Izo),e(ro,Z),e(Z,Vv),e(Vv,X_e),e(X_e,Nzo),e(Vv,qzo),e(Vv,GX),e(GX,jzo),e(Vv,Dzo),e(Z,Gzo),e(Z,Xv),e(Xv,z_e),e(z_e,Ozo),e(Xv,Vzo),e(Xv,OX),e(OX,Xzo),e(Xv,zzo),e(Z,Qzo),e(Z,zv),e(zv,Q_e),e(Q_e,Wzo),e(zv,Hzo),e(zv,VX),e(VX,Uzo),e(zv,Jzo),e(Z,Yzo),e(Z,Qv),e(Qv,W_e),e(W_e,Kzo),e(Qv,Zzo),e(Qv,XX),e(XX,eQo),e(Qv,oQo),e(Z,rQo),e(Z,Wv),e(Wv,H_e),e(H_e,tQo),e(Wv,aQo),e(Wv,zX),e(zX,nQo),e(Wv,sQo),e(Z,lQo),e(Z,Hv),e(Hv,U_e),e(U_e,iQo),e(Hv,dQo),e(Hv,QX),e(QX,cQo),e(Hv,fQo),e(Z,mQo),e(Z,Uv),e(Uv,J_e),e(J_e,gQo),e(Uv,hQo),e(Uv,WX),e(WX,pQo),e(Uv,_Qo),e(Z,uQo),e(Z,Jv),e(Jv,Y_e),e(Y_e,bQo),e(Jv,vQo),e(Jv,HX),e(HX,FQo),e(Jv,TQo),e(Z,MQo),e(Z,Yv),e(Yv,K_e),e(K_e,EQo),e(Yv,CQo),e(Yv,UX),e(UX,wQo),e(Yv,AQo),e(Z,LQo),e(Z,Kv),e(Kv,Z_e),e(Z_e,yQo),e(Kv,xQo),e(Kv,JX),e(JX,$Qo),e(Kv,kQo),e(Z,SQo),e(Z,Zv),e(Zv,eue),e(eue,RQo),e(Zv,PQo),e(Zv,YX),e(YX,BQo),e(Zv,IQo),e(Z,NQo),e(Z,e3),e(e3,oue),e(oue,qQo),e(e3,jQo),e(e3,KX),e(KX,DQo),e(e3,GQo),e(Z,OQo),e(Z,o3),e(o3,rue),e(rue,VQo),e(o3,XQo),e(o3,ZX),e(ZX,zQo),e(o3,QQo),e(Z,WQo),e(Z,r3),e(r3,tue),e(tue,HQo),e(r3,UQo),e(r3,ez),e(ez,JQo),e(r3,YQo),e(Z,KQo),e(Z,t3),e(t3,aue),e(aue,ZQo),e(t3,eWo),e(t3,oz),e(oz,oWo),e(t3,rWo),e(Z,tWo),e(Z,a3),e(a3,nue),e(nue,aWo),e(a3,nWo),e(a3,rz),e(rz,sWo),e(a3,lWo),e(Z,iWo),e(Z,n3),e(n3,sue),e(sue,dWo),e(n3,cWo),e(n3,tz),e(tz,fWo),e(n3,mWo),e(Z,gWo),e(Z,s3),e(s3,lue),e(lue,hWo),e(s3,pWo),e(s3,az),e(az,_Wo),e(s3,uWo),e(Z,bWo),e(Z,l3),e(l3,iue),e(iue,vWo),e(l3,FWo),e(l3,nz),e(nz,TWo),e(l3,MWo),e(Z,EWo),e(Z,i3),e(i3,due),e(due,CWo),e(i3,wWo),e(i3,sz),e(sz,AWo),e(i3,LWo),e(Z,yWo),e(Z,d3),e(d3,cue),e(cue,xWo),e(d3,$Wo),e(d3,lz),e(lz,kWo),e(d3,SWo),e(Z,RWo),e(Z,c3),e(c3,fue),e(fue,PWo),e(c3,BWo),e(c3,iz),e(iz,IWo),e(c3,NWo),e(Z,qWo),e(Z,f3),e(f3,mue),e(mue,jWo),e(f3,DWo),e(f3,dz),e(dz,GWo),e(f3,OWo),e(Z,VWo),e(Z,m3),e(m3,gue),e(gue,XWo),e(m3,zWo),e(m3,cz),e(cz,QWo),e(m3,WWo),e(Z,HWo),e(Z,g3),e(g3,hue),e(hue,UWo),e(g3,JWo),e(g3,fz),e(fz,YWo),e(g3,KWo),e(Z,ZWo),e(Z,h3),e(h3,pue),e(pue,eHo),e(h3,oHo),e(h3,mz),e(mz,rHo),e(h3,tHo),e(Z,aHo),e(Z,p3),e(p3,_ue),e(_ue,nHo),e(p3,sHo),e(p3,gz),e(gz,lHo),e(p3,iHo),e(Z,dHo),e(Z,_3),e(_3,uue),e(uue,cHo),e(_3,fHo),e(_3,hz),e(hz,mHo),e(_3,gHo),e(Z,hHo),e(Z,u3),e(u3,bue),e(bue,pHo),e(u3,_Ho),e(u3,pz),e(pz,uHo),e(u3,bHo),e(Z,vHo),e(Z,b3),e(b3,vue),e(vue,FHo),e(b3,THo),e(b3,_z),e(_z,MHo),e(b3,EHo),e(ro,CHo),e(ro,v3),e(v3,wHo),e(v3,Fue),e(Fue,AHo),e(v3,LHo),e(v3,Tue),e(Tue,yHo),e(ro,xHo),M(F3,ro,null),b(f,lXe,u),b(f,ld,u),e(ld,T3),e(T3,Mue),M(ly,Mue,null),e(ld,$Ho),e(ld,Eue),e(Eue,kHo),b(f,iXe,u),b(f,Io,u),M(iy,Io,null),e(Io,SHo),e(Io,id),e(id,RHo),e(id,uz),e(uz,PHo),e(id,BHo),e(id,bz),e(bz,IHo),e(id,NHo),e(Io,qHo),e(Io,dy),e(dy,jHo),e(dy,Cue),e(Cue,DHo),e(dy,GHo),e(Io,OHo),e(Io,ht),M(cy,ht,null),e(ht,VHo),e(ht,wue),e(wue,XHo),e(ht,zHo),e(ht,dd),e(dd,QHo),e(dd,Aue),e(Aue,WHo),e(dd,HHo),e(dd,vz),e(vz,UHo),e(dd,JHo),e(ht,YHo),M(M3,ht,null),e(Io,KHo),e(Io,to),M(fy,to,null),e(to,ZHo),e(to,Lue),e(Lue,eUo),e(to,oUo),e(to,Oa),e(Oa,rUo),e(Oa,yue),e(yue,tUo),e(Oa,aUo),e(Oa,xue),e(xue,nUo),e(Oa,sUo),e(Oa,$ue),e($ue,lUo),e(Oa,iUo),e(to,dUo),e(to,No),e(No,E3),e(E3,kue),e(kue,cUo),e(E3,fUo),e(E3,Fz),e(Fz,mUo),e(E3,gUo),e(No,hUo),e(No,C3),e(C3,Sue),e(Sue,pUo),e(C3,_Uo),e(C3,Tz),e(Tz,uUo),e(C3,bUo),e(No,vUo),e(No,w3),e(w3,Rue),e(Rue,FUo),e(w3,TUo),e(w3,Mz),e(Mz,MUo),e(w3,EUo),e(No,CUo),e(No,A3),e(A3,Pue),e(Pue,wUo),e(A3,AUo),e(A3,Ez),e(Ez,LUo),e(A3,yUo),e(No,xUo),e(No,L3),e(L3,Bue),e(Bue,$Uo),e(L3,kUo),e(L3,Cz),e(Cz,SUo),e(L3,RUo),e(No,PUo),e(No,y3),e(y3,Iue),e(Iue,BUo),e(y3,IUo),e(y3,wz),e(wz,NUo),e(y3,qUo),e(to,jUo),e(to,x3),e(x3,DUo),e(x3,Nue),e(Nue,GUo),e(x3,OUo),e(x3,que),e(que,VUo),e(to,XUo),M($3,to,null),b(f,dXe,u),b(f,cd,u),e(cd,k3),e(k3,jue),M(my,jue,null),e(cd,zUo),e(cd,Due),e(Due,QUo),b(f,cXe,u),b(f,qo,u),M(gy,qo,null),e(qo,WUo),e(qo,fd),e(fd,HUo),e(fd,Az),e(Az,UUo),e(fd,JUo),e(fd,Lz),e(Lz,YUo),e(fd,KUo),e(qo,ZUo),e(qo,hy),e(hy,eJo),e(hy,Gue),e(Gue,oJo),e(hy,rJo),e(qo,tJo),e(qo,pt),M(py,pt,null),e(pt,aJo),e(pt,Oue),e(Oue,nJo),e(pt,sJo),e(pt,md),e(md,lJo),e(md,Vue),e(Vue,iJo),e(md,dJo),e(md,yz),e(yz,cJo),e(md,fJo),e(pt,mJo),M(S3,pt,null),e(qo,gJo),e(qo,ao),M(_y,ao,null),e(ao,hJo),e(ao,Xue),e(Xue,pJo),e(ao,_Jo),e(ao,Va),e(Va,uJo),e(Va,zue),e(zue,bJo),e(Va,vJo),e(Va,Que),e(Que,FJo),e(Va,TJo),e(Va,Wue),e(Wue,MJo),e(Va,EJo),e(ao,CJo),e(ao,U),e(U,R3),e(R3,Hue),e(Hue,wJo),e(R3,AJo),e(R3,xz),e(xz,LJo),e(R3,yJo),e(U,xJo),e(U,P3),e(P3,Uue),e(Uue,$Jo),e(P3,kJo),e(P3,$z),e($z,SJo),e(P3,RJo),e(U,PJo),e(U,B3),e(B3,Jue),e(Jue,BJo),e(B3,IJo),e(B3,kz),e(kz,NJo),e(B3,qJo),e(U,jJo),e(U,I3),e(I3,Yue),e(Yue,DJo),e(I3,GJo),e(I3,Sz),e(Sz,OJo),e(I3,VJo),e(U,XJo),e(U,N3),e(N3,Kue),e(Kue,zJo),e(N3,QJo),e(N3,Rz),e(Rz,WJo),e(N3,HJo),e(U,UJo),e(U,q3),e(q3,Zue),e(Zue,JJo),e(q3,YJo),e(q3,Pz),e(Pz,KJo),e(q3,ZJo),e(U,eYo),e(U,j3),e(j3,e1e),e(e1e,oYo),e(j3,rYo),e(j3,Bz),e(Bz,tYo),e(j3,aYo),e(U,nYo),e(U,D3),e(D3,o1e),e(o1e,sYo),e(D3,lYo),e(D3,Iz),e(Iz,iYo),e(D3,dYo),e(U,cYo),e(U,G3),e(G3,r1e),e(r1e,fYo),e(G3,mYo),e(G3,Nz),e(Nz,gYo),e(G3,hYo),e(U,pYo),e(U,O3),e(O3,t1e),e(t1e,_Yo),e(O3,uYo),e(O3,qz),e(qz,bYo),e(O3,vYo),e(U,FYo),e(U,V3),e(V3,a1e),e(a1e,TYo),e(V3,MYo),e(V3,jz),e(jz,EYo),e(V3,CYo),e(U,wYo),e(U,X3),e(X3,n1e),e(n1e,AYo),e(X3,LYo),e(X3,Dz),e(Dz,yYo),e(X3,xYo),e(U,$Yo),e(U,z3),e(z3,s1e),e(s1e,kYo),e(z3,SYo),e(z3,Gz),e(Gz,RYo),e(z3,PYo),e(U,BYo),e(U,Q3),e(Q3,l1e),e(l1e,IYo),e(Q3,NYo),e(Q3,Oz),e(Oz,qYo),e(Q3,jYo),e(U,DYo),e(U,W3),e(W3,i1e),e(i1e,GYo),e(W3,OYo),e(W3,Vz),e(Vz,VYo),e(W3,XYo),e(U,zYo),e(U,H3),e(H3,d1e),e(d1e,QYo),e(H3,WYo),e(H3,Xz),e(Xz,HYo),e(H3,UYo),e(U,JYo),e(U,U3),e(U3,c1e),e(c1e,YYo),e(U3,KYo),e(U3,zz),e(zz,ZYo),e(U3,eKo),e(U,oKo),e(U,J3),e(J3,f1e),e(f1e,rKo),e(J3,tKo),e(J3,Qz),e(Qz,aKo),e(J3,nKo),e(U,sKo),e(U,Y3),e(Y3,m1e),e(m1e,lKo),e(Y3,iKo),e(Y3,Wz),e(Wz,dKo),e(Y3,cKo),e(U,fKo),e(U,K3),e(K3,g1e),e(g1e,mKo),e(K3,gKo),e(K3,Hz),e(Hz,hKo),e(K3,pKo),e(U,_Ko),e(U,Z3),e(Z3,h1e),e(h1e,uKo),e(Z3,bKo),e(Z3,Uz),e(Uz,vKo),e(Z3,FKo),e(U,TKo),e(U,eF),e(eF,p1e),e(p1e,MKo),e(eF,EKo),e(eF,Jz),e(Jz,CKo),e(eF,wKo),e(U,AKo),e(U,oF),e(oF,_1e),e(_1e,LKo),e(oF,yKo),e(oF,Yz),e(Yz,xKo),e(oF,$Ko),e(U,kKo),e(U,rF),e(rF,u1e),e(u1e,SKo),e(rF,RKo),e(rF,Kz),e(Kz,PKo),e(rF,BKo),e(U,IKo),e(U,tF),e(tF,b1e),e(b1e,NKo),e(tF,qKo),e(tF,Zz),e(Zz,jKo),e(tF,DKo),e(U,GKo),e(U,aF),e(aF,v1e),e(v1e,OKo),e(aF,VKo),e(aF,eQ),e(eQ,XKo),e(aF,zKo),e(U,QKo),e(U,nF),e(nF,F1e),e(F1e,WKo),e(nF,HKo),e(nF,oQ),e(oQ,UKo),e(nF,JKo),e(U,YKo),e(U,sF),e(sF,T1e),e(T1e,KKo),e(sF,ZKo),e(sF,rQ),e(rQ,eZo),e(sF,oZo),e(U,rZo),e(U,lF),e(lF,M1e),e(M1e,tZo),e(lF,aZo),e(lF,tQ),e(tQ,nZo),e(lF,sZo),e(U,lZo),e(U,iF),e(iF,E1e),e(E1e,iZo),e(iF,dZo),e(iF,aQ),e(aQ,cZo),e(iF,fZo),e(U,mZo),e(U,dF),e(dF,C1e),e(C1e,gZo),e(dF,hZo),e(dF,nQ),e(nQ,pZo),e(dF,_Zo),e(U,uZo),e(U,cF),e(cF,w1e),e(w1e,bZo),e(cF,vZo),e(cF,sQ),e(sQ,FZo),e(cF,TZo),e(U,MZo),e(U,fF),e(fF,A1e),e(A1e,EZo),e(fF,CZo),e(fF,lQ),e(lQ,wZo),e(fF,AZo),e(U,LZo),e(U,mF),e(mF,L1e),e(L1e,yZo),e(mF,xZo),e(mF,iQ),e(iQ,$Zo),e(mF,kZo),e(U,SZo),e(U,gF),e(gF,y1e),e(y1e,RZo),e(gF,PZo),e(gF,dQ),e(dQ,BZo),e(gF,IZo),e(U,NZo),e(U,hF),e(hF,x1e),e(x1e,qZo),e(hF,jZo),e(hF,cQ),e(cQ,DZo),e(hF,GZo),e(ao,OZo),e(ao,pF),e(pF,VZo),e(pF,$1e),e($1e,XZo),e(pF,zZo),e(pF,k1e),e(k1e,QZo),e(ao,WZo),M(_F,ao,null),b(f,fXe,u),b(f,gd,u),e(gd,uF),e(uF,S1e),M(uy,S1e,null),e(gd,HZo),e(gd,R1e),e(R1e,UZo),b(f,mXe,u),b(f,jo,u),M(by,jo,null),e(jo,JZo),e(jo,hd),e(hd,YZo),e(hd,fQ),e(fQ,KZo),e(hd,ZZo),e(hd,mQ),e(mQ,eer),e(hd,oer),e(jo,rer),e(jo,vy),e(vy,ter),e(vy,P1e),e(P1e,aer),e(vy,ner),e(jo,ser),e(jo,_t),M(Fy,_t,null),e(_t,ler),e(_t,B1e),e(B1e,ier),e(_t,der),e(_t,pd),e(pd,cer),e(pd,I1e),e(I1e,fer),e(pd,mer),e(pd,gQ),e(gQ,ger),e(pd,her),e(_t,per),M(bF,_t,null),e(jo,_er),e(jo,no),M(Ty,no,null),e(no,uer),e(no,N1e),e(N1e,ber),e(no,ver),e(no,Xa),e(Xa,Fer),e(Xa,q1e),e(q1e,Ter),e(Xa,Mer),e(Xa,j1e),e(j1e,Eer),e(Xa,Cer),e(Xa,D1e),e(D1e,wer),e(Xa,Aer),e(no,Ler),e(no,V),e(V,vF),e(vF,G1e),e(G1e,yer),e(vF,xer),e(vF,hQ),e(hQ,$er),e(vF,ker),e(V,Ser),e(V,FF),e(FF,O1e),e(O1e,Rer),e(FF,Per),e(FF,pQ),e(pQ,Ber),e(FF,Ier),e(V,Ner),e(V,TF),e(TF,V1e),e(V1e,qer),e(TF,jer),e(TF,_Q),e(_Q,Der),e(TF,Ger),e(V,Oer),e(V,MF),e(MF,X1e),e(X1e,Ver),e(MF,Xer),e(MF,uQ),e(uQ,zer),e(MF,Qer),e(V,Wer),e(V,EF),e(EF,z1e),e(z1e,Her),e(EF,Uer),e(EF,bQ),e(bQ,Jer),e(EF,Yer),e(V,Ker),e(V,CF),e(CF,Q1e),e(Q1e,Zer),e(CF,eor),e(CF,vQ),e(vQ,oor),e(CF,ror),e(V,tor),e(V,wF),e(wF,W1e),e(W1e,aor),e(wF,nor),e(wF,FQ),e(FQ,sor),e(wF,lor),e(V,ior),e(V,AF),e(AF,H1e),e(H1e,dor),e(AF,cor),e(AF,TQ),e(TQ,mor),e(AF,gor),e(V,hor),e(V,LF),e(LF,U1e),e(U1e,por),e(LF,_or),e(LF,MQ),e(MQ,uor),e(LF,bor),e(V,vor),e(V,yF),e(yF,J1e),e(J1e,For),e(yF,Tor),e(yF,EQ),e(EQ,Mor),e(yF,Eor),e(V,Cor),e(V,xF),e(xF,Y1e),e(Y1e,wor),e(xF,Aor),e(xF,CQ),e(CQ,Lor),e(xF,yor),e(V,xor),e(V,$F),e($F,K1e),e(K1e,$or),e($F,kor),e($F,wQ),e(wQ,Sor),e($F,Ror),e(V,Por),e(V,kF),e(kF,Z1e),e(Z1e,Bor),e(kF,Ior),e(kF,AQ),e(AQ,Nor),e(kF,qor),e(V,jor),e(V,SF),e(SF,e2e),e(e2e,Dor),e(SF,Gor),e(SF,LQ),e(LQ,Oor),e(SF,Vor),e(V,Xor),e(V,RF),e(RF,o2e),e(o2e,zor),e(RF,Qor),e(RF,yQ),e(yQ,Wor),e(RF,Hor),e(V,Uor),e(V,PF),e(PF,r2e),e(r2e,Jor),e(PF,Yor),e(PF,xQ),e(xQ,Kor),e(PF,Zor),e(V,err),e(V,BF),e(BF,t2e),e(t2e,orr),e(BF,rrr),e(BF,$Q),e($Q,trr),e(BF,arr),e(V,nrr),e(V,IF),e(IF,a2e),e(a2e,srr),e(IF,lrr),e(IF,kQ),e(kQ,irr),e(IF,drr),e(V,crr),e(V,NF),e(NF,n2e),e(n2e,frr),e(NF,mrr),e(NF,SQ),e(SQ,grr),e(NF,hrr),e(V,prr),e(V,qF),e(qF,s2e),e(s2e,_rr),e(qF,urr),e(qF,RQ),e(RQ,brr),e(qF,vrr),e(V,Frr),e(V,jF),e(jF,l2e),e(l2e,Trr),e(jF,Mrr),e(jF,PQ),e(PQ,Err),e(jF,Crr),e(V,wrr),e(V,DF),e(DF,i2e),e(i2e,Arr),e(DF,Lrr),e(DF,BQ),e(BQ,yrr),e(DF,xrr),e(V,$rr),e(V,GF),e(GF,d2e),e(d2e,krr),e(GF,Srr),e(GF,IQ),e(IQ,Rrr),e(GF,Prr),e(V,Brr),e(V,OF),e(OF,c2e),e(c2e,Irr),e(OF,Nrr),e(OF,NQ),e(NQ,qrr),e(OF,jrr),e(V,Drr),e(V,VF),e(VF,f2e),e(f2e,Grr),e(VF,Orr),e(VF,qQ),e(qQ,Vrr),e(VF,Xrr),e(V,zrr),e(V,XF),e(XF,m2e),e(m2e,Qrr),e(XF,Wrr),e(XF,jQ),e(jQ,Hrr),e(XF,Urr),e(V,Jrr),e(V,zF),e(zF,g2e),e(g2e,Yrr),e(zF,Krr),e(zF,DQ),e(DQ,Zrr),e(zF,etr),e(V,otr),e(V,QF),e(QF,h2e),e(h2e,rtr),e(QF,ttr),e(QF,GQ),e(GQ,atr),e(QF,ntr),e(V,str),e(V,WF),e(WF,p2e),e(p2e,ltr),e(WF,itr),e(WF,OQ),e(OQ,dtr),e(WF,ctr),e(V,ftr),e(V,HF),e(HF,_2e),e(_2e,mtr),e(HF,gtr),e(HF,VQ),e(VQ,htr),e(HF,ptr),e(V,_tr),e(V,UF),e(UF,u2e),e(u2e,utr),e(UF,btr),e(UF,XQ),e(XQ,vtr),e(UF,Ftr),e(V,Ttr),e(V,JF),e(JF,b2e),e(b2e,Mtr),e(JF,Etr),e(JF,zQ),e(zQ,Ctr),e(JF,wtr),e(V,Atr),e(V,YF),e(YF,v2e),e(v2e,Ltr),e(YF,ytr),e(YF,QQ),e(QQ,xtr),e(YF,$tr),e(V,ktr),e(V,KF),e(KF,F2e),e(F2e,Str),e(KF,Rtr),e(KF,WQ),e(WQ,Ptr),e(KF,Btr),e(V,Itr),e(V,ZF),e(ZF,T2e),e(T2e,Ntr),e(ZF,qtr),e(ZF,HQ),e(HQ,jtr),e(ZF,Dtr),e(V,Gtr),e(V,e6),e(e6,M2e),e(M2e,Otr),e(e6,Vtr),e(e6,UQ),e(UQ,Xtr),e(e6,ztr),e(V,Qtr),e(V,o6),e(o6,E2e),e(E2e,Wtr),e(o6,Htr),e(o6,JQ),e(JQ,Utr),e(o6,Jtr),e(V,Ytr),e(V,r6),e(r6,C2e),e(C2e,Ktr),e(r6,Ztr),e(r6,YQ),e(YQ,ear),e(r6,oar),e(V,rar),e(V,t6),e(t6,w2e),e(w2e,tar),e(t6,aar),e(t6,KQ),e(KQ,nar),e(t6,sar),e(V,lar),e(V,a6),e(a6,A2e),e(A2e,iar),e(a6,dar),e(a6,ZQ),e(ZQ,car),e(a6,far),e(V,mar),e(V,n6),e(n6,L2e),e(L2e,gar),e(n6,har),e(n6,eW),e(eW,par),e(n6,_ar),e(V,uar),e(V,s6),e(s6,y2e),e(y2e,bar),e(s6,Far),e(s6,oW),e(oW,Tar),e(s6,Mar),e(no,Ear),e(no,l6),e(l6,Car),e(l6,x2e),e(x2e,war),e(l6,Aar),e(l6,$2e),e($2e,Lar),e(no,yar),M(i6,no,null),b(f,gXe,u),b(f,_d,u),e(_d,d6),e(d6,k2e),M(My,k2e,null),e(_d,xar),e(_d,S2e),e(S2e,$ar),b(f,hXe,u),b(f,Do,u),M(Ey,Do,null),e(Do,kar),e(Do,ud),e(ud,Sar),e(ud,rW),e(rW,Rar),e(ud,Par),e(ud,tW),e(tW,Bar),e(ud,Iar),e(Do,Nar),e(Do,Cy),e(Cy,qar),e(Cy,R2e),e(R2e,jar),e(Cy,Dar),e(Do,Gar),e(Do,ut),M(wy,ut,null),e(ut,Oar),e(ut,P2e),e(P2e,Var),e(ut,Xar),e(ut,bd),e(bd,zar),e(bd,B2e),e(B2e,Qar),e(bd,War),e(bd,aW),e(aW,Har),e(bd,Uar),e(ut,Jar),M(c6,ut,null),e(Do,Yar),e(Do,so),M(Ay,so,null),e(so,Kar),e(so,I2e),e(I2e,Zar),e(so,enr),e(so,za),e(za,onr),e(za,N2e),e(N2e,rnr),e(za,tnr),e(za,q2e),e(q2e,anr),e(za,nnr),e(za,j2e),e(j2e,snr),e(za,lnr),e(so,inr),e(so,D2e),e(D2e,f6),e(f6,G2e),e(G2e,dnr),e(f6,cnr),e(f6,nW),e(nW,fnr),e(f6,mnr),e(so,gnr),e(so,m6),e(m6,hnr),e(m6,O2e),e(O2e,pnr),e(m6,_nr),e(m6,V2e),e(V2e,unr),e(so,bnr),M(g6,so,null),b(f,pXe,u),b(f,vd,u),e(vd,h6),e(h6,X2e),M(Ly,X2e,null),e(vd,vnr),e(vd,z2e),e(z2e,Fnr),b(f,_Xe,u),b(f,Go,u),M(yy,Go,null),e(Go,Tnr),e(Go,Fd),e(Fd,Mnr),e(Fd,sW),e(sW,Enr),e(Fd,Cnr),e(Fd,lW),e(lW,wnr),e(Fd,Anr),e(Go,Lnr),e(Go,xy),e(xy,ynr),e(xy,Q2e),e(Q2e,xnr),e(xy,$nr),e(Go,knr),e(Go,bt),M($y,bt,null),e(bt,Snr),e(bt,W2e),e(W2e,Rnr),e(bt,Pnr),e(bt,Td),e(Td,Bnr),e(Td,H2e),e(H2e,Inr),e(Td,Nnr),e(Td,iW),e(iW,qnr),e(Td,jnr),e(bt,Dnr),M(p6,bt,null),e(Go,Gnr),e(Go,lo),M(ky,lo,null),e(lo,Onr),e(lo,U2e),e(U2e,Vnr),e(lo,Xnr),e(lo,Qa),e(Qa,znr),e(Qa,J2e),e(J2e,Qnr),e(Qa,Wnr),e(Qa,Y2e),e(Y2e,Hnr),e(Qa,Unr),e(Qa,K2e),e(K2e,Jnr),e(Qa,Ynr),e(lo,Knr),e(lo,ve),e(ve,_6),e(_6,Z2e),e(Z2e,Znr),e(_6,esr),e(_6,dW),e(dW,osr),e(_6,rsr),e(ve,tsr),e(ve,u6),e(u6,ebe),e(ebe,asr),e(u6,nsr),e(u6,cW),e(cW,ssr),e(u6,lsr),e(ve,isr),e(ve,b6),e(b6,obe),e(obe,dsr),e(b6,csr),e(b6,fW),e(fW,fsr),e(b6,msr),e(ve,gsr),e(ve,v6),e(v6,rbe),e(rbe,hsr),e(v6,psr),e(v6,mW),e(mW,_sr),e(v6,usr),e(ve,bsr),e(ve,Ws),e(Ws,tbe),e(tbe,vsr),e(Ws,Fsr),e(Ws,gW),e(gW,Tsr),e(Ws,Msr),e(Ws,hW),e(hW,Esr),e(Ws,Csr),e(ve,wsr),e(ve,F6),e(F6,abe),e(abe,Asr),e(F6,Lsr),e(F6,pW),e(pW,ysr),e(F6,xsr),e(ve,$sr),e(ve,Hs),e(Hs,nbe),e(nbe,ksr),e(Hs,Ssr),e(Hs,_W),e(_W,Rsr),e(Hs,Psr),e(Hs,uW),e(uW,Bsr),e(Hs,Isr),e(ve,Nsr),e(ve,T6),e(T6,sbe),e(sbe,qsr),e(T6,jsr),e(T6,bW),e(bW,Dsr),e(T6,Gsr),e(ve,Osr),e(ve,vt),e(vt,lbe),e(lbe,Vsr),e(vt,Xsr),e(vt,vW),e(vW,zsr),e(vt,Qsr),e(vt,FW),e(FW,Wsr),e(vt,Hsr),e(vt,TW),e(TW,Usr),e(vt,Jsr),e(ve,Ysr),e(ve,M6),e(M6,ibe),e(ibe,Ksr),e(M6,Zsr),e(M6,MW),e(MW,elr),e(M6,olr),e(ve,rlr),e(ve,E6),e(E6,dbe),e(dbe,tlr),e(E6,alr),e(E6,EW),e(EW,nlr),e(E6,slr),e(ve,llr),e(ve,C6),e(C6,cbe),e(cbe,ilr),e(C6,dlr),e(C6,CW),e(CW,clr),e(C6,flr),e(ve,mlr),e(ve,w6),e(w6,fbe),e(fbe,glr),e(w6,hlr),e(w6,wW),e(wW,plr),e(w6,_lr),e(ve,ulr),e(ve,A6),e(A6,mbe),e(mbe,blr),e(A6,vlr),e(A6,AW),e(AW,Flr),e(A6,Tlr),e(ve,Mlr),e(ve,L6),e(L6,gbe),e(gbe,Elr),e(L6,Clr),e(L6,LW),e(LW,wlr),e(L6,Alr),e(ve,Llr),e(ve,y6),e(y6,hbe),e(hbe,ylr),e(y6,xlr),e(y6,yW),e(yW,$lr),e(y6,klr),e(lo,Slr),e(lo,x6),e(x6,Rlr),e(x6,pbe),e(pbe,Plr),e(x6,Blr),e(x6,_be),e(_be,Ilr),e(lo,Nlr),M($6,lo,null),b(f,uXe,u),b(f,Md,u),e(Md,k6),e(k6,ube),M(Sy,ube,null),e(Md,qlr),e(Md,bbe),e(bbe,jlr),b(f,bXe,u),b(f,Oo,u),M(Ry,Oo,null),e(Oo,Dlr),e(Oo,Ed),e(Ed,Glr),e(Ed,xW),e(xW,Olr),e(Ed,Vlr),e(Ed,$W),e($W,Xlr),e(Ed,zlr),e(Oo,Qlr),e(Oo,Py),e(Py,Wlr),e(Py,vbe),e(vbe,Hlr),e(Py,Ulr),e(Oo,Jlr),e(Oo,Ft),M(By,Ft,null),e(Ft,Ylr),e(Ft,Fbe),e(Fbe,Klr),e(Ft,Zlr),e(Ft,Cd),e(Cd,eir),e(Cd,Tbe),e(Tbe,oir),e(Cd,rir),e(Cd,kW),e(kW,tir),e(Cd,air),e(Ft,nir),M(S6,Ft,null),e(Oo,sir),e(Oo,io),M(Iy,io,null),e(io,lir),e(io,Mbe),e(Mbe,iir),e(io,dir),e(io,Wa),e(Wa,cir),e(Wa,Ebe),e(Ebe,fir),e(Wa,mir),e(Wa,Cbe),e(Cbe,gir),e(Wa,hir),e(Wa,wbe),e(wbe,pir),e(Wa,_ir),e(io,uir),e(io,Abe),e(Abe,R6),e(R6,Lbe),e(Lbe,bir),e(R6,vir),e(R6,SW),e(SW,Fir),e(R6,Tir),e(io,Mir),e(io,P6),e(P6,Eir),e(P6,ybe),e(ybe,Cir),e(P6,wir),e(P6,xbe),e(xbe,Air),e(io,Lir),M(B6,io,null),b(f,vXe,u),b(f,wd,u),e(wd,I6),e(I6,$be),M(Ny,$be,null),e(wd,yir),e(wd,kbe),e(kbe,xir),b(f,FXe,u),b(f,Vo,u),M(qy,Vo,null),e(Vo,$ir),e(Vo,Ad),e(Ad,kir),e(Ad,RW),e(RW,Sir),e(Ad,Rir),e(Ad,PW),e(PW,Pir),e(Ad,Bir),e(Vo,Iir),e(Vo,jy),e(jy,Nir),e(jy,Sbe),e(Sbe,qir),e(jy,jir),e(Vo,Dir),e(Vo,Tt),M(Dy,Tt,null),e(Tt,Gir),e(Tt,Rbe),e(Rbe,Oir),e(Tt,Vir),e(Tt,Ld),e(Ld,Xir),e(Ld,Pbe),e(Pbe,zir),e(Ld,Qir),e(Ld,BW),e(BW,Wir),e(Ld,Hir),e(Tt,Uir),M(N6,Tt,null),e(Vo,Jir),e(Vo,co),M(Gy,co,null),e(co,Yir),e(co,Bbe),e(Bbe,Kir),e(co,Zir),e(co,Ha),e(Ha,edr),e(Ha,Ibe),e(Ibe,odr),e(Ha,rdr),e(Ha,Nbe),e(Nbe,tdr),e(Ha,adr),e(Ha,qbe),e(qbe,ndr),e(Ha,sdr),e(co,ldr),e(co,jbe),e(jbe,q6),e(q6,Dbe),e(Dbe,idr),e(q6,ddr),e(q6,IW),e(IW,cdr),e(q6,fdr),e(co,mdr),e(co,j6),e(j6,gdr),e(j6,Gbe),e(Gbe,hdr),e(j6,pdr),e(j6,Obe),e(Obe,_dr),e(co,udr),M(D6,co,null),b(f,TXe,u),b(f,yd,u),e(yd,G6),e(G6,Vbe),M(Oy,Vbe,null),e(yd,bdr),e(yd,Xbe),e(Xbe,vdr),b(f,MXe,u),b(f,Xo,u),M(Vy,Xo,null),e(Xo,Fdr),e(Xo,xd),e(xd,Tdr),e(xd,NW),e(NW,Mdr),e(xd,Edr),e(xd,qW),e(qW,Cdr),e(xd,wdr),e(Xo,Adr),e(Xo,Xy),e(Xy,Ldr),e(Xy,zbe),e(zbe,ydr),e(Xy,xdr),e(Xo,$dr),e(Xo,Mt),M(zy,Mt,null),e(Mt,kdr),e(Mt,Qbe),e(Qbe,Sdr),e(Mt,Rdr),e(Mt,$d),e($d,Pdr),e($d,Wbe),e(Wbe,Bdr),e($d,Idr),e($d,jW),e(jW,Ndr),e($d,qdr),e(Mt,jdr),M(O6,Mt,null),e(Xo,Ddr),e(Xo,fo),M(Qy,fo,null),e(fo,Gdr),e(fo,Hbe),e(Hbe,Odr),e(fo,Vdr),e(fo,Ua),e(Ua,Xdr),e(Ua,Ube),e(Ube,zdr),e(Ua,Qdr),e(Ua,Jbe),e(Jbe,Wdr),e(Ua,Hdr),e(Ua,Ybe),e(Ybe,Udr),e(Ua,Jdr),e(fo,Ydr),e(fo,Pe),e(Pe,V6),e(V6,Kbe),e(Kbe,Kdr),e(V6,Zdr),e(V6,DW),e(DW,ecr),e(V6,ocr),e(Pe,rcr),e(Pe,X6),e(X6,Zbe),e(Zbe,tcr),e(X6,acr),e(X6,GW),e(GW,ncr),e(X6,scr),e(Pe,lcr),e(Pe,z6),e(z6,eve),e(eve,icr),e(z6,dcr),e(z6,OW),e(OW,ccr),e(z6,fcr),e(Pe,mcr),e(Pe,Q6),e(Q6,ove),e(ove,gcr),e(Q6,hcr),e(Q6,VW),e(VW,pcr),e(Q6,_cr),e(Pe,ucr),e(Pe,W6),e(W6,rve),e(rve,bcr),e(W6,vcr),e(W6,XW),e(XW,Fcr),e(W6,Tcr),e(Pe,Mcr),e(Pe,H6),e(H6,tve),e(tve,Ecr),e(H6,Ccr),e(H6,zW),e(zW,wcr),e(H6,Acr),e(Pe,Lcr),e(Pe,U6),e(U6,ave),e(ave,ycr),e(U6,xcr),e(U6,QW),e(QW,$cr),e(U6,kcr),e(Pe,Scr),e(Pe,J6),e(J6,nve),e(nve,Rcr),e(J6,Pcr),e(J6,WW),e(WW,Bcr),e(J6,Icr),e(Pe,Ncr),e(Pe,Y6),e(Y6,sve),e(sve,qcr),e(Y6,jcr),e(Y6,HW),e(HW,Dcr),e(Y6,Gcr),e(fo,Ocr),e(fo,K6),e(K6,Vcr),e(K6,lve),e(lve,Xcr),e(K6,zcr),e(K6,ive),e(ive,Qcr),e(fo,Wcr),M(Z6,fo,null),b(f,EXe,u),b(f,kd,u),e(kd,eT),e(eT,dve),M(Wy,dve,null),e(kd,Hcr),e(kd,cve),e(cve,Ucr),b(f,CXe,u),b(f,zo,u),M(Hy,zo,null),e(zo,Jcr),e(zo,Sd),e(Sd,Ycr),e(Sd,UW),e(UW,Kcr),e(Sd,Zcr),e(Sd,JW),e(JW,efr),e(Sd,ofr),e(zo,rfr),e(zo,Uy),e(Uy,tfr),e(Uy,fve),e(fve,afr),e(Uy,nfr),e(zo,sfr),e(zo,Et),M(Jy,Et,null),e(Et,lfr),e(Et,mve),e(mve,ifr),e(Et,dfr),e(Et,Rd),e(Rd,cfr),e(Rd,gve),e(gve,ffr),e(Rd,mfr),e(Rd,YW),e(YW,gfr),e(Rd,hfr),e(Et,pfr),M(oT,Et,null),e(zo,_fr),e(zo,mo),M(Yy,mo,null),e(mo,ufr),e(mo,hve),e(hve,bfr),e(mo,vfr),e(mo,Ja),e(Ja,Ffr),e(Ja,pve),e(pve,Tfr),e(Ja,Mfr),e(Ja,_ve),e(_ve,Efr),e(Ja,Cfr),e(Ja,uve),e(uve,wfr),e(Ja,Afr),e(mo,Lfr),e(mo,et),e(et,rT),e(rT,bve),e(bve,yfr),e(rT,xfr),e(rT,KW),e(KW,$fr),e(rT,kfr),e(et,Sfr),e(et,tT),e(tT,vve),e(vve,Rfr),e(tT,Pfr),e(tT,ZW),e(ZW,Bfr),e(tT,Ifr),e(et,Nfr),e(et,aT),e(aT,Fve),e(Fve,qfr),e(aT,jfr),e(aT,eH),e(eH,Dfr),e(aT,Gfr),e(et,Ofr),e(et,nT),e(nT,Tve),e(Tve,Vfr),e(nT,Xfr),e(nT,oH),e(oH,zfr),e(nT,Qfr),e(et,Wfr),e(et,sT),e(sT,Mve),e(Mve,Hfr),e(sT,Ufr),e(sT,rH),e(rH,Jfr),e(sT,Yfr),e(mo,Kfr),e(mo,lT),e(lT,Zfr),e(lT,Eve),e(Eve,emr),e(lT,omr),e(lT,Cve),e(Cve,rmr),e(mo,tmr),M(iT,mo,null),b(f,wXe,u),b(f,Pd,u),e(Pd,dT),e(dT,wve),M(Ky,wve,null),e(Pd,amr),e(Pd,Ave),e(Ave,nmr),b(f,AXe,u),b(f,Qo,u),M(Zy,Qo,null),e(Qo,smr),e(Qo,Bd),e(Bd,lmr),e(Bd,tH),e(tH,imr),e(Bd,dmr),e(Bd,aH),e(aH,cmr),e(Bd,fmr),e(Qo,mmr),e(Qo,e8),e(e8,gmr),e(e8,Lve),e(Lve,hmr),e(e8,pmr),e(Qo,_mr),e(Qo,Ct),M(o8,Ct,null),e(Ct,umr),e(Ct,yve),e(yve,bmr),e(Ct,vmr),e(Ct,Id),e(Id,Fmr),e(Id,xve),e(xve,Tmr),e(Id,Mmr),e(Id,nH),e(nH,Emr),e(Id,Cmr),e(Ct,wmr),M(cT,Ct,null),e(Qo,Amr),e(Qo,go),M(r8,go,null),e(go,Lmr),e(go,$ve),e($ve,ymr),e(go,xmr),e(go,Ya),e(Ya,$mr),e(Ya,kve),e(kve,kmr),e(Ya,Smr),e(Ya,Sve),e(Sve,Rmr),e(Ya,Pmr),e(Ya,Rve),e(Rve,Bmr),e(Ya,Imr),e(go,Nmr),e(go,Le),e(Le,fT),e(fT,Pve),e(Pve,qmr),e(fT,jmr),e(fT,sH),e(sH,Dmr),e(fT,Gmr),e(Le,Omr),e(Le,mT),e(mT,Bve),e(Bve,Vmr),e(mT,Xmr),e(mT,lH),e(lH,zmr),e(mT,Qmr),e(Le,Wmr),e(Le,gT),e(gT,Ive),e(Ive,Hmr),e(gT,Umr),e(gT,iH),e(iH,Jmr),e(gT,Ymr),e(Le,Kmr),e(Le,hT),e(hT,Nve),e(Nve,Zmr),e(hT,egr),e(hT,dH),e(dH,ogr),e(hT,rgr),e(Le,tgr),e(Le,pT),e(pT,qve),e(qve,agr),e(pT,ngr),e(pT,cH),e(cH,sgr),e(pT,lgr),e(Le,igr),e(Le,_T),e(_T,jve),e(jve,dgr),e(_T,cgr),e(_T,fH),e(fH,fgr),e(_T,mgr),e(Le,ggr),e(Le,uT),e(uT,Dve),e(Dve,hgr),e(uT,pgr),e(uT,mH),e(mH,_gr),e(uT,ugr),e(Le,bgr),e(Le,bT),e(bT,Gve),e(Gve,vgr),e(bT,Fgr),e(bT,gH),e(gH,Tgr),e(bT,Mgr),e(Le,Egr),e(Le,vT),e(vT,Ove),e(Ove,Cgr),e(vT,wgr),e(vT,hH),e(hH,Agr),e(vT,Lgr),e(Le,ygr),e(Le,FT),e(FT,Vve),e(Vve,xgr),e(FT,$gr),e(FT,pH),e(pH,kgr),e(FT,Sgr),e(go,Rgr),e(go,TT),e(TT,Pgr),e(TT,Xve),e(Xve,Bgr),e(TT,Igr),e(TT,zve),e(zve,Ngr),e(go,qgr),M(MT,go,null),b(f,LXe,u),b(f,Nd,u),e(Nd,ET),e(ET,Qve),M(t8,Qve,null),e(Nd,jgr),e(Nd,Wve),e(Wve,Dgr),b(f,yXe,u),b(f,Wo,u),M(a8,Wo,null),e(Wo,Ggr),e(Wo,qd),e(qd,Ogr),e(qd,_H),e(_H,Vgr),e(qd,Xgr),e(qd,uH),e(uH,zgr),e(qd,Qgr),e(Wo,Wgr),e(Wo,n8),e(n8,Hgr),e(n8,Hve),e(Hve,Ugr),e(n8,Jgr),e(Wo,Ygr),e(Wo,wt),M(s8,wt,null),e(wt,Kgr),e(wt,Uve),e(Uve,Zgr),e(wt,ehr),e(wt,jd),e(jd,ohr),e(jd,Jve),e(Jve,rhr),e(jd,thr),e(jd,bH),e(bH,ahr),e(jd,nhr),e(wt,shr),M(CT,wt,null),e(Wo,lhr),e(Wo,ho),M(l8,ho,null),e(ho,ihr),e(ho,Yve),e(Yve,dhr),e(ho,chr),e(ho,Ka),e(Ka,fhr),e(Ka,Kve),e(Kve,mhr),e(Ka,ghr),e(Ka,Zve),e(Zve,hhr),e(Ka,phr),e(Ka,e3e),e(e3e,_hr),e(Ka,uhr),e(ho,bhr),e(ho,i8),e(i8,wT),e(wT,o3e),e(o3e,vhr),e(wT,Fhr),e(wT,vH),e(vH,Thr),e(wT,Mhr),e(i8,Ehr),e(i8,AT),e(AT,r3e),e(r3e,Chr),e(AT,whr),e(AT,FH),e(FH,Ahr),e(AT,Lhr),e(ho,yhr),e(ho,LT),e(LT,xhr),e(LT,t3e),e(t3e,$hr),e(LT,khr),e(LT,a3e),e(a3e,Shr),e(ho,Rhr),M(yT,ho,null),b(f,xXe,u),b(f,Dd,u),e(Dd,xT),e(xT,n3e),M(d8,n3e,null),e(Dd,Phr),e(Dd,s3e),e(s3e,Bhr),b(f,$Xe,u),b(f,Ho,u),M(c8,Ho,null),e(Ho,Ihr),e(Ho,Gd),e(Gd,Nhr),e(Gd,TH),e(TH,qhr),e(Gd,jhr),e(Gd,MH),e(MH,Dhr),e(Gd,Ghr),e(Ho,Ohr),e(Ho,f8),e(f8,Vhr),e(f8,l3e),e(l3e,Xhr),e(f8,zhr),e(Ho,Qhr),e(Ho,At),M(m8,At,null),e(At,Whr),e(At,i3e),e(i3e,Hhr),e(At,Uhr),e(At,Od),e(Od,Jhr),e(Od,d3e),e(d3e,Yhr),e(Od,Khr),e(Od,EH),e(EH,Zhr),e(Od,epr),e(At,opr),M($T,At,null),e(Ho,rpr),e(Ho,po),M(g8,po,null),e(po,tpr),e(po,c3e),e(c3e,apr),e(po,npr),e(po,Za),e(Za,spr),e(Za,f3e),e(f3e,lpr),e(Za,ipr),e(Za,m3e),e(m3e,dpr),e(Za,cpr),e(Za,g3e),e(g3e,fpr),e(Za,mpr),e(po,gpr),e(po,ot),e(ot,kT),e(kT,h3e),e(h3e,hpr),e(kT,ppr),e(kT,CH),e(CH,_pr),e(kT,upr),e(ot,bpr),e(ot,ST),e(ST,p3e),e(p3e,vpr),e(ST,Fpr),e(ST,wH),e(wH,Tpr),e(ST,Mpr),e(ot,Epr),e(ot,RT),e(RT,_3e),e(_3e,Cpr),e(RT,wpr),e(RT,AH),e(AH,Apr),e(RT,Lpr),e(ot,ypr),e(ot,PT),e(PT,u3e),e(u3e,xpr),e(PT,$pr),e(PT,LH),e(LH,kpr),e(PT,Spr),e(ot,Rpr),e(ot,BT),e(BT,b3e),e(b3e,Ppr),e(BT,Bpr),e(BT,yH),e(yH,Ipr),e(BT,Npr),e(po,qpr),e(po,IT),e(IT,jpr),e(IT,v3e),e(v3e,Dpr),e(IT,Gpr),e(IT,F3e),e(F3e,Opr),e(po,Vpr),M(NT,po,null),b(f,kXe,u),b(f,Vd,u),e(Vd,qT),e(qT,T3e),M(h8,T3e,null),e(Vd,Xpr),e(Vd,M3e),e(M3e,zpr),b(f,SXe,u),b(f,Uo,u),M(p8,Uo,null),e(Uo,Qpr),e(Uo,Xd),e(Xd,Wpr),e(Xd,xH),e(xH,Hpr),e(Xd,Upr),e(Xd,$H),e($H,Jpr),e(Xd,Ypr),e(Uo,Kpr),e(Uo,_8),e(_8,Zpr),e(_8,E3e),e(E3e,e_r),e(_8,o_r),e(Uo,r_r),e(Uo,Lt),M(u8,Lt,null),e(Lt,t_r),e(Lt,C3e),e(C3e,a_r),e(Lt,n_r),e(Lt,zd),e(zd,s_r),e(zd,w3e),e(w3e,l_r),e(zd,i_r),e(zd,kH),e(kH,d_r),e(zd,c_r),e(Lt,f_r),M(jT,Lt,null),e(Uo,m_r),e(Uo,_o),M(b8,_o,null),e(_o,g_r),e(_o,A3e),e(A3e,h_r),e(_o,p_r),e(_o,en),e(en,__r),e(en,L3e),e(L3e,u_r),e(en,b_r),e(en,y3e),e(y3e,v_r),e(en,F_r),e(en,x3e),e(x3e,T_r),e(en,M_r),e(_o,E_r),e(_o,Qd),e(Qd,DT),e(DT,$3e),e($3e,C_r),e(DT,w_r),e(DT,SH),e(SH,A_r),e(DT,L_r),e(Qd,y_r),e(Qd,GT),e(GT,k3e),e(k3e,x_r),e(GT,$_r),e(GT,RH),e(RH,k_r),e(GT,S_r),e(Qd,R_r),e(Qd,OT),e(OT,S3e),e(S3e,P_r),e(OT,B_r),e(OT,PH),e(PH,I_r),e(OT,N_r),e(_o,q_r),e(_o,VT),e(VT,j_r),e(VT,R3e),e(R3e,D_r),e(VT,G_r),e(VT,P3e),e(P3e,O_r),e(_o,V_r),M(XT,_o,null),b(f,RXe,u),b(f,Wd,u),e(Wd,zT),e(zT,B3e),M(v8,B3e,null),e(Wd,X_r),e(Wd,I3e),e(I3e,z_r),b(f,PXe,u),b(f,Jo,u),M(F8,Jo,null),e(Jo,Q_r),e(Jo,Hd),e(Hd,W_r),e(Hd,BH),e(BH,H_r),e(Hd,U_r),e(Hd,IH),e(IH,J_r),e(Hd,Y_r),e(Jo,K_r),e(Jo,T8),e(T8,Z_r),e(T8,N3e),e(N3e,eur),e(T8,our),e(Jo,rur),e(Jo,yt),M(M8,yt,null),e(yt,tur),e(yt,q3e),e(q3e,aur),e(yt,nur),e(yt,Ud),e(Ud,sur),e(Ud,j3e),e(j3e,lur),e(Ud,iur),e(Ud,NH),e(NH,dur),e(Ud,cur),e(yt,fur),M(QT,yt,null),e(Jo,mur),e(Jo,uo),M(E8,uo,null),e(uo,gur),e(uo,D3e),e(D3e,hur),e(uo,pur),e(uo,on),e(on,_ur),e(on,G3e),e(G3e,uur),e(on,bur),e(on,O3e),e(O3e,vur),e(on,Fur),e(on,V3e),e(V3e,Tur),e(on,Mur),e(uo,Eur),e(uo,C8),e(C8,WT),e(WT,X3e),e(X3e,Cur),e(WT,wur),e(WT,qH),e(qH,Aur),e(WT,Lur),e(C8,yur),e(C8,HT),e(HT,z3e),e(z3e,xur),e(HT,$ur),e(HT,jH),e(jH,kur),e(HT,Sur),e(uo,Rur),e(uo,UT),e(UT,Pur),e(UT,Q3e),e(Q3e,Bur),e(UT,Iur),e(UT,W3e),e(W3e,Nur),e(uo,qur),M(JT,uo,null),b(f,BXe,u),b(f,Jd,u),e(Jd,YT),e(YT,H3e),M(w8,H3e,null),e(Jd,jur),e(Jd,U3e),e(U3e,Dur),b(f,IXe,u),b(f,Yo,u),M(A8,Yo,null),e(Yo,Gur),e(Yo,Yd),e(Yd,Our),e(Yd,DH),e(DH,Vur),e(Yd,Xur),e(Yd,GH),e(GH,zur),e(Yd,Qur),e(Yo,Wur),e(Yo,L8),e(L8,Hur),e(L8,J3e),e(J3e,Uur),e(L8,Jur),e(Yo,Yur),e(Yo,xt),M(y8,xt,null),e(xt,Kur),e(xt,Y3e),e(Y3e,Zur),e(xt,e1r),e(xt,Kd),e(Kd,o1r),e(Kd,K3e),e(K3e,r1r),e(Kd,t1r),e(Kd,OH),e(OH,a1r),e(Kd,n1r),e(xt,s1r),M(KT,xt,null),e(Yo,l1r),e(Yo,bo),M(x8,bo,null),e(bo,i1r),e(bo,Z3e),e(Z3e,d1r),e(bo,c1r),e(bo,rn),e(rn,f1r),e(rn,eFe),e(eFe,m1r),e(rn,g1r),e(rn,oFe),e(oFe,h1r),e(rn,p1r),e(rn,rFe),e(rFe,_1r),e(rn,u1r),e(bo,b1r),e(bo,tFe),e(tFe,ZT),e(ZT,aFe),e(aFe,v1r),e(ZT,F1r),e(ZT,VH),e(VH,T1r),e(ZT,M1r),e(bo,E1r),e(bo,e7),e(e7,C1r),e(e7,nFe),e(nFe,w1r),e(e7,A1r),e(e7,sFe),e(sFe,L1r),e(bo,y1r),M(o7,bo,null),b(f,NXe,u),b(f,Zd,u),e(Zd,r7),e(r7,lFe),M($8,lFe,null),e(Zd,x1r),e(Zd,iFe),e(iFe,$1r),b(f,qXe,u),b(f,Ko,u),M(k8,Ko,null),e(Ko,k1r),e(Ko,ec),e(ec,S1r),e(ec,XH),e(XH,R1r),e(ec,P1r),e(ec,zH),e(zH,B1r),e(ec,I1r),e(Ko,N1r),e(Ko,S8),e(S8,q1r),e(S8,dFe),e(dFe,j1r),e(S8,D1r),e(Ko,G1r),e(Ko,$t),M(R8,$t,null),e($t,O1r),e($t,cFe),e(cFe,V1r),e($t,X1r),e($t,oc),e(oc,z1r),e(oc,fFe),e(fFe,Q1r),e(oc,W1r),e(oc,QH),e(QH,H1r),e(oc,U1r),e($t,J1r),M(t7,$t,null),e(Ko,Y1r),e(Ko,vo),M(P8,vo,null),e(vo,K1r),e(vo,mFe),e(mFe,Z1r),e(vo,e2r),e(vo,tn),e(tn,o2r),e(tn,gFe),e(gFe,r2r),e(tn,t2r),e(tn,hFe),e(hFe,a2r),e(tn,n2r),e(tn,pFe),e(pFe,s2r),e(tn,l2r),e(vo,i2r),e(vo,rt),e(rt,a7),e(a7,_Fe),e(_Fe,d2r),e(a7,c2r),e(a7,WH),e(WH,f2r),e(a7,m2r),e(rt,g2r),e(rt,n7),e(n7,uFe),e(uFe,h2r),e(n7,p2r),e(n7,HH),e(HH,_2r),e(n7,u2r),e(rt,b2r),e(rt,s7),e(s7,bFe),e(bFe,v2r),e(s7,F2r),e(s7,UH),e(UH,T2r),e(s7,M2r),e(rt,E2r),e(rt,l7),e(l7,vFe),e(vFe,C2r),e(l7,w2r),e(l7,JH),e(JH,A2r),e(l7,L2r),e(rt,y2r),e(rt,i7),e(i7,FFe),e(FFe,x2r),e(i7,$2r),e(i7,YH),e(YH,k2r),e(i7,S2r),e(vo,R2r),e(vo,d7),e(d7,P2r),e(d7,TFe),e(TFe,B2r),e(d7,I2r),e(d7,MFe),e(MFe,N2r),e(vo,q2r),M(c7,vo,null),b(f,jXe,u),b(f,rc,u),e(rc,f7),e(f7,EFe),M(B8,EFe,null),e(rc,j2r),e(rc,CFe),e(CFe,D2r),b(f,DXe,u),b(f,Zo,u),M(I8,Zo,null),e(Zo,G2r),e(Zo,tc),e(tc,O2r),e(tc,KH),e(KH,V2r),e(tc,X2r),e(tc,ZH),e(ZH,z2r),e(tc,Q2r),e(Zo,W2r),e(Zo,N8),e(N8,H2r),e(N8,wFe),e(wFe,U2r),e(N8,J2r),e(Zo,Y2r),e(Zo,kt),M(q8,kt,null),e(kt,K2r),e(kt,AFe),e(AFe,Z2r),e(kt,ebr),e(kt,ac),e(ac,obr),e(ac,LFe),e(LFe,rbr),e(ac,tbr),e(ac,eU),e(eU,abr),e(ac,nbr),e(kt,sbr),M(m7,kt,null),e(Zo,lbr),e(Zo,Fo),M(j8,Fo,null),e(Fo,ibr),e(Fo,yFe),e(yFe,dbr),e(Fo,cbr),e(Fo,an),e(an,fbr),e(an,xFe),e(xFe,mbr),e(an,gbr),e(an,$Fe),e($Fe,hbr),e(an,pbr),e(an,kFe),e(kFe,_br),e(an,ubr),e(Fo,bbr),e(Fo,SFe),e(SFe,g7),e(g7,RFe),e(RFe,vbr),e(g7,Fbr),e(g7,oU),e(oU,Tbr),e(g7,Mbr),e(Fo,Ebr),e(Fo,h7),e(h7,Cbr),e(h7,PFe),e(PFe,wbr),e(h7,Abr),e(h7,BFe),e(BFe,Lbr),e(Fo,ybr),M(p7,Fo,null),b(f,GXe,u),b(f,nc,u),e(nc,_7),e(_7,IFe),M(D8,IFe,null),e(nc,xbr),e(nc,NFe),e(NFe,$br),b(f,OXe,u),b(f,er,u),M(G8,er,null),e(er,kbr),e(er,sc),e(sc,Sbr),e(sc,rU),e(rU,Rbr),e(sc,Pbr),e(sc,tU),e(tU,Bbr),e(sc,Ibr),e(er,Nbr),e(er,O8),e(O8,qbr),e(O8,qFe),e(qFe,jbr),e(O8,Dbr),e(er,Gbr),e(er,St),M(V8,St,null),e(St,Obr),e(St,jFe),e(jFe,Vbr),e(St,Xbr),e(St,lc),e(lc,zbr),e(lc,DFe),e(DFe,Qbr),e(lc,Wbr),e(lc,aU),e(aU,Hbr),e(lc,Ubr),e(St,Jbr),M(u7,St,null),e(er,Ybr),e(er,yr),M(X8,yr,null),e(yr,Kbr),e(yr,GFe),e(GFe,Zbr),e(yr,evr),e(yr,nn),e(nn,ovr),e(nn,OFe),e(OFe,rvr),e(nn,tvr),e(nn,VFe),e(VFe,avr),e(nn,nvr),e(nn,XFe),e(XFe,svr),e(nn,lvr),e(yr,ivr),e(yr,j),e(j,b7),e(b7,zFe),e(zFe,dvr),e(b7,cvr),e(b7,nU),e(nU,fvr),e(b7,mvr),e(j,gvr),e(j,v7),e(v7,QFe),e(QFe,hvr),e(v7,pvr),e(v7,sU),e(sU,_vr),e(v7,uvr),e(j,bvr),e(j,F7),e(F7,WFe),e(WFe,vvr),e(F7,Fvr),e(F7,lU),e(lU,Tvr),e(F7,Mvr),e(j,Evr),e(j,T7),e(T7,HFe),e(HFe,Cvr),e(T7,wvr),e(T7,iU),e(iU,Avr),e(T7,Lvr),e(j,yvr),e(j,M7),e(M7,UFe),e(UFe,xvr),e(M7,$vr),e(M7,dU),e(dU,kvr),e(M7,Svr),e(j,Rvr),e(j,E7),e(E7,JFe),e(JFe,Pvr),e(E7,Bvr),e(E7,cU),e(cU,Ivr),e(E7,Nvr),e(j,qvr),e(j,C7),e(C7,YFe),e(YFe,jvr),e(C7,Dvr),e(C7,fU),e(fU,Gvr),e(C7,Ovr),e(j,Vvr),e(j,w7),e(w7,KFe),e(KFe,Xvr),e(w7,zvr),e(w7,mU),e(mU,Qvr),e(w7,Wvr),e(j,Hvr),e(j,A7),e(A7,ZFe),e(ZFe,Uvr),e(A7,Jvr),e(A7,gU),e(gU,Yvr),e(A7,Kvr),e(j,Zvr),e(j,L7),e(L7,e6e),e(e6e,e3r),e(L7,o3r),e(L7,hU),e(hU,r3r),e(L7,t3r),e(j,a3r),e(j,y7),e(y7,o6e),e(o6e,n3r),e(y7,s3r),e(y7,pU),e(pU,l3r),e(y7,i3r),e(j,d3r),e(j,x7),e(x7,r6e),e(r6e,c3r),e(x7,f3r),e(x7,_U),e(_U,m3r),e(x7,g3r),e(j,h3r),e(j,$7),e($7,t6e),e(t6e,p3r),e($7,_3r),e($7,uU),e(uU,u3r),e($7,b3r),e(j,v3r),e(j,k7),e(k7,a6e),e(a6e,F3r),e(k7,T3r),e(k7,bU),e(bU,M3r),e(k7,E3r),e(j,C3r),e(j,S7),e(S7,n6e),e(n6e,w3r),e(S7,A3r),e(S7,vU),e(vU,L3r),e(S7,y3r),e(j,x3r),e(j,R7),e(R7,s6e),e(s6e,$3r),e(R7,k3r),e(R7,FU),e(FU,S3r),e(R7,R3r),e(j,P3r),e(j,P7),e(P7,l6e),e(l6e,B3r),e(P7,I3r),e(P7,TU),e(TU,N3r),e(P7,q3r),e(j,j3r),e(j,Us),e(Us,i6e),e(i6e,D3r),e(Us,G3r),e(Us,MU),e(MU,O3r),e(Us,V3r),e(Us,EU),e(EU,X3r),e(Us,z3r),e(j,Q3r),e(j,B7),e(B7,d6e),e(d6e,W3r),e(B7,H3r),e(B7,CU),e(CU,U3r),e(B7,J3r),e(j,Y3r),e(j,I7),e(I7,c6e),e(c6e,K3r),e(I7,Z3r),e(I7,wU),e(wU,eFr),e(I7,oFr),e(j,rFr),e(j,N7),e(N7,f6e),e(f6e,tFr),e(N7,aFr),e(N7,AU),e(AU,nFr),e(N7,sFr),e(j,lFr),e(j,q7),e(q7,m6e),e(m6e,iFr),e(q7,dFr),e(q7,LU),e(LU,cFr),e(q7,fFr),e(j,mFr),e(j,j7),e(j7,g6e),e(g6e,gFr),e(j7,hFr),e(j7,yU),e(yU,pFr),e(j7,_Fr),e(j,uFr),e(j,D7),e(D7,h6e),e(h6e,bFr),e(D7,vFr),e(D7,xU),e(xU,FFr),e(D7,TFr),e(j,MFr),e(j,G7),e(G7,p6e),e(p6e,EFr),e(G7,CFr),e(G7,$U),e($U,wFr),e(G7,AFr),e(j,LFr),e(j,O7),e(O7,_6e),e(_6e,yFr),e(O7,xFr),e(O7,kU),e(kU,$Fr),e(O7,kFr),e(j,SFr),e(j,V7),e(V7,u6e),e(u6e,RFr),e(V7,PFr),e(V7,SU),e(SU,BFr),e(V7,IFr),e(j,NFr),e(j,X7),e(X7,b6e),e(b6e,qFr),e(X7,jFr),e(X7,RU),e(RU,DFr),e(X7,GFr),e(j,OFr),e(j,z7),e(z7,v6e),e(v6e,VFr),e(z7,XFr),e(z7,PU),e(PU,zFr),e(z7,QFr),e(j,WFr),e(j,Q7),e(Q7,F6e),e(F6e,HFr),e(Q7,UFr),e(Q7,BU),e(BU,JFr),e(Q7,YFr),e(j,KFr),e(j,W7),e(W7,T6e),e(T6e,ZFr),e(W7,e6r),e(W7,IU),e(IU,o6r),e(W7,r6r),e(j,t6r),e(j,H7),e(H7,M6e),e(M6e,a6r),e(H7,n6r),e(H7,NU),e(NU,s6r),e(H7,l6r),e(j,i6r),e(j,U7),e(U7,E6e),e(E6e,d6r),e(U7,c6r),e(U7,qU),e(qU,f6r),e(U7,m6r),e(j,g6r),e(j,J7),e(J7,C6e),e(C6e,h6r),e(J7,p6r),e(J7,jU),e(jU,_6r),e(J7,u6r),e(j,b6r),e(j,Y7),e(Y7,w6e),e(w6e,v6r),e(Y7,F6r),e(Y7,DU),e(DU,T6r),e(Y7,M6r),e(j,E6r),e(j,K7),e(K7,A6e),e(A6e,C6r),e(K7,w6r),e(K7,GU),e(GU,A6r),e(K7,L6r),e(j,y6r),e(j,Z7),e(Z7,L6e),e(L6e,x6r),e(Z7,$6r),e(Z7,OU),e(OU,k6r),e(Z7,S6r),e(j,R6r),e(j,e9),e(e9,y6e),e(y6e,P6r),e(e9,B6r),e(e9,VU),e(VU,I6r),e(e9,N6r),e(j,q6r),e(j,o9),e(o9,x6e),e(x6e,j6r),e(o9,D6r),e(o9,XU),e(XU,G6r),e(o9,O6r),e(j,V6r),e(j,r9),e(r9,$6e),e($6e,X6r),e(r9,z6r),e(r9,zU),e(zU,Q6r),e(r9,W6r),e(j,H6r),e(j,t9),e(t9,k6e),e(k6e,U6r),e(t9,J6r),e(t9,QU),e(QU,Y6r),e(t9,K6r),e(j,Z6r),e(j,a9),e(a9,S6e),e(S6e,eTr),e(a9,oTr),e(a9,WU),e(WU,rTr),e(a9,tTr),e(j,aTr),e(j,n9),e(n9,R6e),e(R6e,nTr),e(n9,sTr),e(n9,HU),e(HU,lTr),e(n9,iTr),e(j,dTr),e(j,s9),e(s9,P6e),e(P6e,cTr),e(s9,fTr),e(s9,UU),e(UU,mTr),e(s9,gTr),e(j,hTr),e(j,l9),e(l9,B6e),e(B6e,pTr),e(l9,_Tr),e(l9,JU),e(JU,uTr),e(l9,bTr),e(j,vTr),e(j,i9),e(i9,I6e),e(I6e,FTr),e(i9,TTr),e(i9,YU),e(YU,MTr),e(i9,ETr),e(j,CTr),e(j,d9),e(d9,N6e),e(N6e,wTr),e(d9,ATr),e(d9,KU),e(KU,LTr),e(d9,yTr),e(j,xTr),e(j,c9),e(c9,q6e),e(q6e,$Tr),e(c9,kTr),e(c9,ZU),e(ZU,STr),e(c9,RTr),e(yr,PTr),M(f9,yr,null),b(f,VXe,u),b(f,ic,u),e(ic,m9),e(m9,j6e),M(z8,j6e,null),e(ic,BTr),e(ic,D6e),e(D6e,ITr),b(f,XXe,u),b(f,or,u),M(Q8,or,null),e(or,NTr),e(or,dc),e(dc,qTr),e(dc,eJ),e(eJ,jTr),e(dc,DTr),e(dc,oJ),e(oJ,GTr),e(dc,OTr),e(or,VTr),e(or,W8),e(W8,XTr),e(W8,G6e),e(G6e,zTr),e(W8,QTr),e(or,WTr),e(or,Rt),M(H8,Rt,null),e(Rt,HTr),e(Rt,O6e),e(O6e,UTr),e(Rt,JTr),e(Rt,cc),e(cc,YTr),e(cc,V6e),e(V6e,KTr),e(cc,ZTr),e(cc,rJ),e(rJ,e7r),e(cc,o7r),e(Rt,r7r),M(g9,Rt,null),e(or,t7r),e(or,xr),M(U8,xr,null),e(xr,a7r),e(xr,X6e),e(X6e,n7r),e(xr,s7r),e(xr,sn),e(sn,l7r),e(sn,z6e),e(z6e,i7r),e(sn,d7r),e(sn,Q6e),e(Q6e,c7r),e(sn,f7r),e(sn,W6e),e(W6e,m7r),e(sn,g7r),e(xr,h7r),e(xr,se),e(se,h9),e(h9,H6e),e(H6e,p7r),e(h9,_7r),e(h9,tJ),e(tJ,u7r),e(h9,b7r),e(se,v7r),e(se,p9),e(p9,U6e),e(U6e,F7r),e(p9,T7r),e(p9,aJ),e(aJ,M7r),e(p9,E7r),e(se,C7r),e(se,_9),e(_9,J6e),e(J6e,w7r),e(_9,A7r),e(_9,nJ),e(nJ,L7r),e(_9,y7r),e(se,x7r),e(se,u9),e(u9,Y6e),e(Y6e,$7r),e(u9,k7r),e(u9,sJ),e(sJ,S7r),e(u9,R7r),e(se,P7r),e(se,b9),e(b9,K6e),e(K6e,B7r),e(b9,I7r),e(b9,lJ),e(lJ,N7r),e(b9,q7r),e(se,j7r),e(se,v9),e(v9,Z6e),e(Z6e,D7r),e(v9,G7r),e(v9,iJ),e(iJ,O7r),e(v9,V7r),e(se,X7r),e(se,F9),e(F9,eTe),e(eTe,z7r),e(F9,Q7r),e(F9,dJ),e(dJ,W7r),e(F9,H7r),e(se,U7r),e(se,T9),e(T9,oTe),e(oTe,J7r),e(T9,Y7r),e(T9,cJ),e(cJ,K7r),e(T9,Z7r),e(se,e9r),e(se,M9),e(M9,rTe),e(rTe,o9r),e(M9,r9r),e(M9,fJ),e(fJ,t9r),e(M9,a9r),e(se,n9r),e(se,E9),e(E9,tTe),e(tTe,s9r),e(E9,l9r),e(E9,mJ),e(mJ,i9r),e(E9,d9r),e(se,c9r),e(se,C9),e(C9,aTe),e(aTe,f9r),e(C9,m9r),e(C9,gJ),e(gJ,g9r),e(C9,h9r),e(se,p9r),e(se,w9),e(w9,nTe),e(nTe,_9r),e(w9,u9r),e(w9,hJ),e(hJ,b9r),e(w9,v9r),e(se,F9r),e(se,A9),e(A9,sTe),e(sTe,T9r),e(A9,M9r),e(A9,pJ),e(pJ,E9r),e(A9,C9r),e(se,w9r),e(se,L9),e(L9,lTe),e(lTe,A9r),e(L9,L9r),e(L9,_J),e(_J,y9r),e(L9,x9r),e(se,$9r),e(se,y9),e(y9,iTe),e(iTe,k9r),e(y9,S9r),e(y9,uJ),e(uJ,R9r),e(y9,P9r),e(se,B9r),e(se,x9),e(x9,dTe),e(dTe,I9r),e(x9,N9r),e(x9,bJ),e(bJ,q9r),e(x9,j9r),e(se,D9r),e(se,$9),e($9,cTe),e(cTe,G9r),e($9,O9r),e($9,vJ),e(vJ,V9r),e($9,X9r),e(se,z9r),e(se,k9),e(k9,fTe),e(fTe,Q9r),e(k9,W9r),e(k9,FJ),e(FJ,H9r),e(k9,U9r),e(se,J9r),e(se,S9),e(S9,mTe),e(mTe,Y9r),e(S9,K9r),e(S9,TJ),e(TJ,Z9r),e(S9,eMr),e(se,oMr),e(se,R9),e(R9,gTe),e(gTe,rMr),e(R9,tMr),e(R9,MJ),e(MJ,aMr),e(R9,nMr),e(se,sMr),e(se,P9),e(P9,hTe),e(hTe,lMr),e(P9,iMr),e(P9,EJ),e(EJ,dMr),e(P9,cMr),e(se,fMr),e(se,B9),e(B9,pTe),e(pTe,mMr),e(B9,gMr),e(B9,CJ),e(CJ,hMr),e(B9,pMr),e(se,_Mr),e(se,I9),e(I9,_Te),e(_Te,uMr),e(I9,bMr),e(I9,wJ),e(wJ,vMr),e(I9,FMr),e(xr,TMr),M(N9,xr,null),b(f,zXe,u),b(f,fc,u),e(fc,q9),e(q9,uTe),M(J8,uTe,null),e(fc,MMr),e(fc,bTe),e(bTe,EMr),b(f,QXe,u),b(f,rr,u),M(Y8,rr,null),e(rr,CMr),e(rr,mc),e(mc,wMr),e(mc,AJ),e(AJ,AMr),e(mc,LMr),e(mc,LJ),e(LJ,yMr),e(mc,xMr),e(rr,$Mr),e(rr,K8),e(K8,kMr),e(K8,vTe),e(vTe,SMr),e(K8,RMr),e(rr,PMr),e(rr,Pt),M(Z8,Pt,null),e(Pt,BMr),e(Pt,FTe),e(FTe,IMr),e(Pt,NMr),e(Pt,gc),e(gc,qMr),e(gc,TTe),e(TTe,jMr),e(gc,DMr),e(gc,yJ),e(yJ,GMr),e(gc,OMr),e(Pt,VMr),M(j9,Pt,null),e(rr,XMr),e(rr,$r),M(ex,$r,null),e($r,zMr),e($r,MTe),e(MTe,QMr),e($r,WMr),e($r,ln),e(ln,HMr),e(ln,ETe),e(ETe,UMr),e(ln,JMr),e(ln,CTe),e(CTe,YMr),e(ln,KMr),e(ln,wTe),e(wTe,ZMr),e(ln,e4r),e($r,o4r),e($r,Me),e(Me,D9),e(D9,ATe),e(ATe,r4r),e(D9,t4r),e(D9,xJ),e(xJ,a4r),e(D9,n4r),e(Me,s4r),e(Me,G9),e(G9,LTe),e(LTe,l4r),e(G9,i4r),e(G9,$J),e($J,d4r),e(G9,c4r),e(Me,f4r),e(Me,O9),e(O9,yTe),e(yTe,m4r),e(O9,g4r),e(O9,kJ),e(kJ,h4r),e(O9,p4r),e(Me,_4r),e(Me,V9),e(V9,xTe),e(xTe,u4r),e(V9,b4r),e(V9,SJ),e(SJ,v4r),e(V9,F4r),e(Me,T4r),e(Me,X9),e(X9,$Te),e($Te,M4r),e(X9,E4r),e(X9,RJ),e(RJ,C4r),e(X9,w4r),e(Me,A4r),e(Me,z9),e(z9,kTe),e(kTe,L4r),e(z9,y4r),e(z9,PJ),e(PJ,x4r),e(z9,$4r),e(Me,k4r),e(Me,Q9),e(Q9,STe),e(STe,S4r),e(Q9,R4r),e(Q9,BJ),e(BJ,P4r),e(Q9,B4r),e(Me,I4r),e(Me,W9),e(W9,RTe),e(RTe,N4r),e(W9,q4r),e(W9,IJ),e(IJ,j4r),e(W9,D4r),e(Me,G4r),e(Me,H9),e(H9,PTe),e(PTe,O4r),e(H9,V4r),e(H9,NJ),e(NJ,X4r),e(H9,z4r),e(Me,Q4r),e(Me,U9),e(U9,BTe),e(BTe,W4r),e(U9,H4r),e(U9,qJ),e(qJ,U4r),e(U9,J4r),e(Me,Y4r),e(Me,J9),e(J9,ITe),e(ITe,K4r),e(J9,Z4r),e(J9,jJ),e(jJ,eEr),e(J9,oEr),e(Me,rEr),e(Me,Y9),e(Y9,NTe),e(NTe,tEr),e(Y9,aEr),e(Y9,DJ),e(DJ,nEr),e(Y9,sEr),e(Me,lEr),e(Me,K9),e(K9,qTe),e(qTe,iEr),e(K9,dEr),e(K9,GJ),e(GJ,cEr),e(K9,fEr),e($r,mEr),M(Z9,$r,null),b(f,WXe,u),b(f,hc,u),e(hc,eM),e(eM,jTe),M(ox,jTe,null),e(hc,gEr),e(hc,DTe),e(DTe,hEr),b(f,HXe,u),b(f,tr,u),M(rx,tr,null),e(tr,pEr),e(tr,pc),e(pc,_Er),e(pc,OJ),e(OJ,uEr),e(pc,bEr),e(pc,VJ),e(VJ,vEr),e(pc,FEr),e(tr,TEr),e(tr,tx),e(tx,MEr),e(tx,GTe),e(GTe,EEr),e(tx,CEr),e(tr,wEr),e(tr,Bt),M(ax,Bt,null),e(Bt,AEr),e(Bt,OTe),e(OTe,LEr),e(Bt,yEr),e(Bt,_c),e(_c,xEr),e(_c,VTe),e(VTe,$Er),e(_c,kEr),e(_c,XJ),e(XJ,SEr),e(_c,REr),e(Bt,PEr),M(oM,Bt,null),e(tr,BEr),e(tr,kr),M(nx,kr,null),e(kr,IEr),e(kr,XTe),e(XTe,NEr),e(kr,qEr),e(kr,dn),e(dn,jEr),e(dn,zTe),e(zTe,DEr),e(dn,GEr),e(dn,QTe),e(QTe,OEr),e(dn,VEr),e(dn,WTe),e(WTe,XEr),e(dn,zEr),e(kr,QEr),e(kr,tt),e(tt,rM),e(rM,HTe),e(HTe,WEr),e(rM,HEr),e(rM,zJ),e(zJ,UEr),e(rM,JEr),e(tt,YEr),e(tt,tM),e(tM,UTe),e(UTe,KEr),e(tM,ZEr),e(tM,QJ),e(QJ,eCr),e(tM,oCr),e(tt,rCr),e(tt,aM),e(aM,JTe),e(JTe,tCr),e(aM,aCr),e(aM,WJ),e(WJ,nCr),e(aM,sCr),e(tt,lCr),e(tt,nM),e(nM,YTe),e(YTe,iCr),e(nM,dCr),e(nM,HJ),e(HJ,cCr),e(nM,fCr),e(tt,mCr),e(tt,sM),e(sM,KTe),e(KTe,gCr),e(sM,hCr),e(sM,UJ),e(UJ,pCr),e(sM,_Cr),e(kr,uCr),M(lM,kr,null),b(f,UXe,u),b(f,uc,u),e(uc,iM),e(iM,ZTe),M(sx,ZTe,null),e(uc,bCr),e(uc,e7e),e(e7e,vCr),b(f,JXe,u),b(f,ar,u),M(lx,ar,null),e(ar,FCr),e(ar,bc),e(bc,TCr),e(bc,JJ),e(JJ,MCr),e(bc,ECr),e(bc,YJ),e(YJ,CCr),e(bc,wCr),e(ar,ACr),e(ar,ix),e(ix,LCr),e(ix,o7e),e(o7e,yCr),e(ix,xCr),e(ar,$Cr),e(ar,It),M(dx,It,null),e(It,kCr),e(It,r7e),e(r7e,SCr),e(It,RCr),e(It,vc),e(vc,PCr),e(vc,t7e),e(t7e,BCr),e(vc,ICr),e(vc,KJ),e(KJ,NCr),e(vc,qCr),e(It,jCr),M(dM,It,null),e(ar,DCr),e(ar,Sr),M(cx,Sr,null),e(Sr,GCr),e(Sr,a7e),e(a7e,OCr),e(Sr,VCr),e(Sr,cn),e(cn,XCr),e(cn,n7e),e(n7e,zCr),e(cn,QCr),e(cn,s7e),e(s7e,WCr),e(cn,HCr),e(cn,l7e),e(l7e,UCr),e(cn,JCr),e(Sr,YCr),e(Sr,ie),e(ie,cM),e(cM,i7e),e(i7e,KCr),e(cM,ZCr),e(cM,ZJ),e(ZJ,e5r),e(cM,o5r),e(ie,r5r),e(ie,fM),e(fM,d7e),e(d7e,t5r),e(fM,a5r),e(fM,eY),e(eY,n5r),e(fM,s5r),e(ie,l5r),e(ie,mM),e(mM,c7e),e(c7e,i5r),e(mM,d5r),e(mM,oY),e(oY,c5r),e(mM,f5r),e(ie,m5r),e(ie,gM),e(gM,f7e),e(f7e,g5r),e(gM,h5r),e(gM,rY),e(rY,p5r),e(gM,_5r),e(ie,u5r),e(ie,hM),e(hM,m7e),e(m7e,b5r),e(hM,v5r),e(hM,tY),e(tY,F5r),e(hM,T5r),e(ie,M5r),e(ie,pM),e(pM,g7e),e(g7e,E5r),e(pM,C5r),e(pM,aY),e(aY,w5r),e(pM,A5r),e(ie,L5r),e(ie,_M),e(_M,h7e),e(h7e,y5r),e(_M,x5r),e(_M,nY),e(nY,$5r),e(_M,k5r),e(ie,S5r),e(ie,uM),e(uM,p7e),e(p7e,R5r),e(uM,P5r),e(uM,sY),e(sY,B5r),e(uM,I5r),e(ie,N5r),e(ie,bM),e(bM,_7e),e(_7e,q5r),e(bM,j5r),e(bM,lY),e(lY,D5r),e(bM,G5r),e(ie,O5r),e(ie,vM),e(vM,u7e),e(u7e,V5r),e(vM,X5r),e(vM,iY),e(iY,z5r),e(vM,Q5r),e(ie,W5r),e(ie,FM),e(FM,b7e),e(b7e,H5r),e(FM,U5r),e(FM,dY),e(dY,J5r),e(FM,Y5r),e(ie,K5r),e(ie,TM),e(TM,v7e),e(v7e,Z5r),e(TM,e0r),e(TM,cY),e(cY,o0r),e(TM,r0r),e(ie,t0r),e(ie,MM),e(MM,F7e),e(F7e,a0r),e(MM,n0r),e(MM,fY),e(fY,s0r),e(MM,l0r),e(ie,i0r),e(ie,EM),e(EM,T7e),e(T7e,d0r),e(EM,c0r),e(EM,mY),e(mY,f0r),e(EM,m0r),e(ie,g0r),e(ie,CM),e(CM,M7e),e(M7e,h0r),e(CM,p0r),e(CM,gY),e(gY,_0r),e(CM,u0r),e(ie,b0r),e(ie,wM),e(wM,E7e),e(E7e,v0r),e(wM,F0r),e(wM,hY),e(hY,T0r),e(wM,M0r),e(ie,E0r),e(ie,AM),e(AM,C7e),e(C7e,C0r),e(AM,w0r),e(AM,pY),e(pY,A0r),e(AM,L0r),e(ie,y0r),e(ie,LM),e(LM,w7e),e(w7e,x0r),e(LM,$0r),e(LM,_Y),e(_Y,k0r),e(LM,S0r),e(ie,R0r),e(ie,yM),e(yM,A7e),e(A7e,P0r),e(yM,B0r),e(yM,uY),e(uY,I0r),e(yM,N0r),e(ie,q0r),e(ie,xM),e(xM,L7e),e(L7e,j0r),e(xM,D0r),e(xM,bY),e(bY,G0r),e(xM,O0r),e(Sr,V0r),M($M,Sr,null),b(f,YXe,u),b(f,Fc,u),e(Fc,kM),e(kM,y7e),M(fx,y7e,null),e(Fc,X0r),e(Fc,x7e),e(x7e,z0r),b(f,KXe,u),b(f,nr,u),M(mx,nr,null),e(nr,Q0r),e(nr,Tc),e(Tc,W0r),e(Tc,vY),e(vY,H0r),e(Tc,U0r),e(Tc,FY),e(FY,J0r),e(Tc,Y0r),e(nr,K0r),e(nr,gx),e(gx,Z0r),e(gx,$7e),e($7e,ewr),e(gx,owr),e(nr,rwr),e(nr,Nt),M(hx,Nt,null),e(Nt,twr),e(Nt,k7e),e(k7e,awr),e(Nt,nwr),e(Nt,Mc),e(Mc,swr),e(Mc,S7e),e(S7e,lwr),e(Mc,iwr),e(Mc,TY),e(TY,dwr),e(Mc,cwr),e(Nt,fwr),M(SM,Nt,null),e(nr,mwr),e(nr,Rr),M(px,Rr,null),e(Rr,gwr),e(Rr,R7e),e(R7e,hwr),e(Rr,pwr),e(Rr,fn),e(fn,_wr),e(fn,P7e),e(P7e,uwr),e(fn,bwr),e(fn,B7e),e(B7e,vwr),e(fn,Fwr),e(fn,I7e),e(I7e,Twr),e(fn,Mwr),e(Rr,Ewr),e(Rr,ye),e(ye,RM),e(RM,N7e),e(N7e,Cwr),e(RM,wwr),e(RM,MY),e(MY,Awr),e(RM,Lwr),e(ye,ywr),e(ye,PM),e(PM,q7e),e(q7e,xwr),e(PM,$wr),e(PM,EY),e(EY,kwr),e(PM,Swr),e(ye,Rwr),e(ye,BM),e(BM,j7e),e(j7e,Pwr),e(BM,Bwr),e(BM,CY),e(CY,Iwr),e(BM,Nwr),e(ye,qwr),e(ye,IM),e(IM,D7e),e(D7e,jwr),e(IM,Dwr),e(IM,wY),e(wY,Gwr),e(IM,Owr),e(ye,Vwr),e(ye,NM),e(NM,G7e),e(G7e,Xwr),e(NM,zwr),e(NM,AY),e(AY,Qwr),e(NM,Wwr),e(ye,Hwr),e(ye,qM),e(qM,O7e),e(O7e,Uwr),e(qM,Jwr),e(qM,LY),e(LY,Ywr),e(qM,Kwr),e(ye,Zwr),e(ye,jM),e(jM,V7e),e(V7e,eAr),e(jM,oAr),e(jM,yY),e(yY,rAr),e(jM,tAr),e(ye,aAr),e(ye,DM),e(DM,X7e),e(X7e,nAr),e(DM,sAr),e(DM,xY),e(xY,lAr),e(DM,iAr),e(ye,dAr),e(ye,GM),e(GM,z7e),e(z7e,cAr),e(GM,fAr),e(GM,$Y),e($Y,mAr),e(GM,gAr),e(ye,hAr),e(ye,OM),e(OM,Q7e),e(Q7e,pAr),e(OM,_Ar),e(OM,kY),e(kY,uAr),e(OM,bAr),e(Rr,vAr),M(VM,Rr,null),b(f,ZXe,u),b(f,Ec,u),e(Ec,XM),e(XM,W7e),M(_x,W7e,null),e(Ec,FAr),e(Ec,H7e),e(H7e,TAr),b(f,eze,u),b(f,sr,u),M(ux,sr,null),e(sr,MAr),e(sr,Cc),e(Cc,EAr),e(Cc,SY),e(SY,CAr),e(Cc,wAr),e(Cc,RY),e(RY,AAr),e(Cc,LAr),e(sr,yAr),e(sr,bx),e(bx,xAr),e(bx,U7e),e(U7e,$Ar),e(bx,kAr),e(sr,SAr),e(sr,qt),M(vx,qt,null),e(qt,RAr),e(qt,J7e),e(J7e,PAr),e(qt,BAr),e(qt,wc),e(wc,IAr),e(wc,Y7e),e(Y7e,NAr),e(wc,qAr),e(wc,PY),e(PY,jAr),e(wc,DAr),e(qt,GAr),M(zM,qt,null),e(sr,OAr),e(sr,Pr),M(Fx,Pr,null),e(Pr,VAr),e(Pr,K7e),e(K7e,XAr),e(Pr,zAr),e(Pr,mn),e(mn,QAr),e(mn,Z7e),e(Z7e,WAr),e(mn,HAr),e(mn,e9e),e(e9e,UAr),e(mn,JAr),e(mn,o9e),e(o9e,YAr),e(mn,KAr),e(Pr,ZAr),e(Pr,te),e(te,QM),e(QM,r9e),e(r9e,eLr),e(QM,oLr),e(QM,BY),e(BY,rLr),e(QM,tLr),e(te,aLr),e(te,WM),e(WM,t9e),e(t9e,nLr),e(WM,sLr),e(WM,IY),e(IY,lLr),e(WM,iLr),e(te,dLr),e(te,HM),e(HM,a9e),e(a9e,cLr),e(HM,fLr),e(HM,NY),e(NY,mLr),e(HM,gLr),e(te,hLr),e(te,UM),e(UM,n9e),e(n9e,pLr),e(UM,_Lr),e(UM,qY),e(qY,uLr),e(UM,bLr),e(te,vLr),e(te,JM),e(JM,s9e),e(s9e,FLr),e(JM,TLr),e(JM,jY),e(jY,MLr),e(JM,ELr),e(te,CLr),e(te,YM),e(YM,l9e),e(l9e,wLr),e(YM,ALr),e(YM,DY),e(DY,LLr),e(YM,yLr),e(te,xLr),e(te,KM),e(KM,i9e),e(i9e,$Lr),e(KM,kLr),e(KM,GY),e(GY,SLr),e(KM,RLr),e(te,PLr),e(te,ZM),e(ZM,d9e),e(d9e,BLr),e(ZM,ILr),e(ZM,OY),e(OY,NLr),e(ZM,qLr),e(te,jLr),e(te,e4),e(e4,c9e),e(c9e,DLr),e(e4,GLr),e(e4,VY),e(VY,OLr),e(e4,VLr),e(te,XLr),e(te,o4),e(o4,f9e),e(f9e,zLr),e(o4,QLr),e(o4,XY),e(XY,WLr),e(o4,HLr),e(te,ULr),e(te,r4),e(r4,m9e),e(m9e,JLr),e(r4,YLr),e(r4,zY),e(zY,KLr),e(r4,ZLr),e(te,eyr),e(te,t4),e(t4,g9e),e(g9e,oyr),e(t4,ryr),e(t4,QY),e(QY,tyr),e(t4,ayr),e(te,nyr),e(te,a4),e(a4,h9e),e(h9e,syr),e(a4,lyr),e(a4,WY),e(WY,iyr),e(a4,dyr),e(te,cyr),e(te,n4),e(n4,p9e),e(p9e,fyr),e(n4,myr),e(n4,HY),e(HY,gyr),e(n4,hyr),e(te,pyr),e(te,s4),e(s4,_9e),e(_9e,_yr),e(s4,uyr),e(s4,UY),e(UY,byr),e(s4,vyr),e(te,Fyr),e(te,l4),e(l4,u9e),e(u9e,Tyr),e(l4,Myr),e(l4,JY),e(JY,Eyr),e(l4,Cyr),e(te,wyr),e(te,i4),e(i4,b9e),e(b9e,Ayr),e(i4,Lyr),e(i4,YY),e(YY,yyr),e(i4,xyr),e(te,$yr),e(te,d4),e(d4,v9e),e(v9e,kyr),e(d4,Syr),e(d4,KY),e(KY,Ryr),e(d4,Pyr),e(te,Byr),e(te,c4),e(c4,F9e),e(F9e,Iyr),e(c4,Nyr),e(c4,ZY),e(ZY,qyr),e(c4,jyr),e(te,Dyr),e(te,f4),e(f4,T9e),e(T9e,Gyr),e(f4,Oyr),e(f4,eK),e(eK,Vyr),e(f4,Xyr),e(te,zyr),e(te,m4),e(m4,M9e),e(M9e,Qyr),e(m4,Wyr),e(m4,oK),e(oK,Hyr),e(m4,Uyr),e(te,Jyr),e(te,g4),e(g4,E9e),e(E9e,Yyr),e(g4,Kyr),e(g4,rK),e(rK,Zyr),e(g4,e8r),e(te,o8r),e(te,h4),e(h4,C9e),e(C9e,r8r),e(h4,t8r),e(h4,tK),e(tK,a8r),e(h4,n8r),e(te,s8r),e(te,p4),e(p4,w9e),e(w9e,l8r),e(p4,i8r),e(p4,aK),e(aK,d8r),e(p4,c8r),e(te,f8r),e(te,_4),e(_4,A9e),e(A9e,m8r),e(_4,g8r),e(_4,nK),e(nK,h8r),e(_4,p8r),e(te,_8r),e(te,u4),e(u4,L9e),e(L9e,u8r),e(u4,b8r),e(u4,sK),e(sK,v8r),e(u4,F8r),e(Pr,T8r),M(b4,Pr,null),b(f,oze,u),b(f,Ac,u),e(Ac,v4),e(v4,y9e),M(Tx,y9e,null),e(Ac,M8r),e(Ac,x9e),e(x9e,E8r),b(f,rze,u),b(f,lr,u),M(Mx,lr,null),e(lr,C8r),e(lr,Lc),e(Lc,w8r),e(Lc,lK),e(lK,A8r),e(Lc,L8r),e(Lc,iK),e(iK,y8r),e(Lc,x8r),e(lr,$8r),e(lr,Ex),e(Ex,k8r),e(Ex,$9e),e($9e,S8r),e(Ex,R8r),e(lr,P8r),e(lr,jt),M(Cx,jt,null),e(jt,B8r),e(jt,k9e),e(k9e,I8r),e(jt,N8r),e(jt,yc),e(yc,q8r),e(yc,S9e),e(S9e,j8r),e(yc,D8r),e(yc,dK),e(dK,G8r),e(yc,O8r),e(jt,V8r),M(F4,jt,null),e(lr,X8r),e(lr,Br),M(wx,Br,null),e(Br,z8r),e(Br,R9e),e(R9e,Q8r),e(Br,W8r),e(Br,gn),e(gn,H8r),e(gn,P9e),e(P9e,U8r),e(gn,J8r),e(gn,B9e),e(B9e,Y8r),e(gn,K8r),e(gn,I9e),e(I9e,Z8r),e(gn,exr),e(Br,oxr),e(Br,_e),e(_e,T4),e(T4,N9e),e(N9e,rxr),e(T4,txr),e(T4,cK),e(cK,axr),e(T4,nxr),e(_e,sxr),e(_e,M4),e(M4,q9e),e(q9e,lxr),e(M4,ixr),e(M4,fK),e(fK,dxr),e(M4,cxr),e(_e,fxr),e(_e,E4),e(E4,j9e),e(j9e,mxr),e(E4,gxr),e(E4,mK),e(mK,hxr),e(E4,pxr),e(_e,_xr),e(_e,C4),e(C4,D9e),e(D9e,uxr),e(C4,bxr),e(C4,gK),e(gK,vxr),e(C4,Fxr),e(_e,Txr),e(_e,w4),e(w4,G9e),e(G9e,Mxr),e(w4,Exr),e(w4,hK),e(hK,Cxr),e(w4,wxr),e(_e,Axr),e(_e,A4),e(A4,O9e),e(O9e,Lxr),e(A4,yxr),e(A4,pK),e(pK,xxr),e(A4,$xr),e(_e,kxr),e(_e,L4),e(L4,V9e),e(V9e,Sxr),e(L4,Rxr),e(L4,_K),e(_K,Pxr),e(L4,Bxr),e(_e,Ixr),e(_e,y4),e(y4,X9e),e(X9e,Nxr),e(y4,qxr),e(y4,uK),e(uK,jxr),e(y4,Dxr),e(_e,Gxr),e(_e,x4),e(x4,z9e),e(z9e,Oxr),e(x4,Vxr),e(x4,bK),e(bK,Xxr),e(x4,zxr),e(_e,Qxr),e(_e,$4),e($4,Q9e),e(Q9e,Wxr),e($4,Hxr),e($4,vK),e(vK,Uxr),e($4,Jxr),e(_e,Yxr),e(_e,k4),e(k4,W9e),e(W9e,Kxr),e(k4,Zxr),e(k4,FK),e(FK,e$r),e(k4,o$r),e(_e,r$r),e(_e,S4),e(S4,H9e),e(H9e,t$r),e(S4,a$r),e(S4,TK),e(TK,n$r),e(S4,s$r),e(_e,l$r),e(_e,R4),e(R4,U9e),e(U9e,i$r),e(R4,d$r),e(R4,MK),e(MK,c$r),e(R4,f$r),e(_e,m$r),e(_e,P4),e(P4,J9e),e(J9e,g$r),e(P4,h$r),e(P4,EK),e(EK,p$r),e(P4,_$r),e(_e,u$r),e(_e,B4),e(B4,Y9e),e(Y9e,b$r),e(B4,v$r),e(B4,CK),e(CK,F$r),e(B4,T$r),e(_e,M$r),e(_e,I4),e(I4,K9e),e(K9e,E$r),e(I4,C$r),e(I4,wK),e(wK,w$r),e(I4,A$r),e(_e,L$r),e(_e,N4),e(N4,Z9e),e(Z9e,y$r),e(N4,x$r),e(N4,AK),e(AK,$$r),e(N4,k$r),e(Br,S$r),M(q4,Br,null),b(f,tze,u),b(f,xc,u),e(xc,j4),e(j4,eMe),M(Ax,eMe,null),e(xc,R$r),e(xc,oMe),e(oMe,P$r),b(f,aze,u),b(f,ir,u),M(Lx,ir,null),e(ir,B$r),e(ir,$c),e($c,I$r),e($c,LK),e(LK,N$r),e($c,q$r),e($c,yK),e(yK,j$r),e($c,D$r),e(ir,G$r),e(ir,yx),e(yx,O$r),e(yx,rMe),e(rMe,V$r),e(yx,X$r),e(ir,z$r),e(ir,Dt),M(xx,Dt,null),e(Dt,Q$r),e(Dt,tMe),e(tMe,W$r),e(Dt,H$r),e(Dt,kc),e(kc,U$r),e(kc,aMe),e(aMe,J$r),e(kc,Y$r),e(kc,xK),e(xK,K$r),e(kc,Z$r),e(Dt,ekr),M(D4,Dt,null),e(ir,okr),e(ir,Ir),M($x,Ir,null),e(Ir,rkr),e(Ir,nMe),e(nMe,tkr),e(Ir,akr),e(Ir,hn),e(hn,nkr),e(hn,sMe),e(sMe,skr),e(hn,lkr),e(hn,lMe),e(lMe,ikr),e(hn,dkr),e(hn,iMe),e(iMe,ckr),e(hn,fkr),e(Ir,mkr),e(Ir,kx),e(kx,G4),e(G4,dMe),e(dMe,gkr),e(G4,hkr),e(G4,$K),e($K,pkr),e(G4,_kr),e(kx,ukr),e(kx,O4),e(O4,cMe),e(cMe,bkr),e(O4,vkr),e(O4,kK),e(kK,Fkr),e(O4,Tkr),e(Ir,Mkr),M(V4,Ir,null),b(f,nze,u),b(f,Sc,u),e(Sc,X4),e(X4,fMe),M(Sx,fMe,null),e(Sc,Ekr),e(Sc,mMe),e(mMe,Ckr),b(f,sze,u),b(f,dr,u),M(Rx,dr,null),e(dr,wkr),e(dr,Rc),e(Rc,Akr),e(Rc,SK),e(SK,Lkr),e(Rc,ykr),e(Rc,RK),e(RK,xkr),e(Rc,$kr),e(dr,kkr),e(dr,Px),e(Px,Skr),e(Px,gMe),e(gMe,Rkr),e(Px,Pkr),e(dr,Bkr),e(dr,Gt),M(Bx,Gt,null),e(Gt,Ikr),e(Gt,hMe),e(hMe,Nkr),e(Gt,qkr),e(Gt,Pc),e(Pc,jkr),e(Pc,pMe),e(pMe,Dkr),e(Pc,Gkr),e(Pc,PK),e(PK,Okr),e(Pc,Vkr),e(Gt,Xkr),M(z4,Gt,null),e(dr,zkr),e(dr,Nr),M(Ix,Nr,null),e(Nr,Qkr),e(Nr,_Me),e(_Me,Wkr),e(Nr,Hkr),e(Nr,pn),e(pn,Ukr),e(pn,uMe),e(uMe,Jkr),e(pn,Ykr),e(pn,bMe),e(bMe,Kkr),e(pn,Zkr),e(pn,vMe),e(vMe,eSr),e(pn,oSr),e(Nr,rSr),e(Nr,FMe),e(FMe,Q4),e(Q4,TMe),e(TMe,tSr),e(Q4,aSr),e(Q4,BK),e(BK,nSr),e(Q4,sSr),e(Nr,lSr),M(W4,Nr,null),b(f,lze,u),b(f,Bc,u),e(Bc,H4),e(H4,MMe),M(Nx,MMe,null),e(Bc,iSr),e(Bc,EMe),e(EMe,dSr),b(f,ize,u),b(f,cr,u),M(qx,cr,null),e(cr,cSr),e(cr,Ic),e(Ic,fSr),e(Ic,IK),e(IK,mSr),e(Ic,gSr),e(Ic,NK),e(NK,hSr),e(Ic,pSr),e(cr,_Sr),e(cr,jx),e(jx,uSr),e(jx,CMe),e(CMe,bSr),e(jx,vSr),e(cr,FSr),e(cr,Ot),M(Dx,Ot,null),e(Ot,TSr),e(Ot,wMe),e(wMe,MSr),e(Ot,ESr),e(Ot,Nc),e(Nc,CSr),e(Nc,AMe),e(AMe,wSr),e(Nc,ASr),e(Nc,qK),e(qK,LSr),e(Nc,ySr),e(Ot,xSr),M(U4,Ot,null),e(cr,$Sr),e(cr,qr),M(Gx,qr,null),e(qr,kSr),e(qr,LMe),e(LMe,SSr),e(qr,RSr),e(qr,_n),e(_n,PSr),e(_n,yMe),e(yMe,BSr),e(_n,ISr),e(_n,xMe),e(xMe,NSr),e(_n,qSr),e(_n,$Me),e($Me,jSr),e(_n,DSr),e(qr,GSr),e(qr,de),e(de,J4),e(J4,kMe),e(kMe,OSr),e(J4,VSr),e(J4,jK),e(jK,XSr),e(J4,zSr),e(de,QSr),e(de,Y4),e(Y4,SMe),e(SMe,WSr),e(Y4,HSr),e(Y4,DK),e(DK,USr),e(Y4,JSr),e(de,YSr),e(de,K4),e(K4,RMe),e(RMe,KSr),e(K4,ZSr),e(K4,GK),e(GK,eRr),e(K4,oRr),e(de,rRr),e(de,Z4),e(Z4,PMe),e(PMe,tRr),e(Z4,aRr),e(Z4,OK),e(OK,nRr),e(Z4,sRr),e(de,lRr),e(de,eE),e(eE,BMe),e(BMe,iRr),e(eE,dRr),e(eE,VK),e(VK,cRr),e(eE,fRr),e(de,mRr),e(de,oE),e(oE,IMe),e(IMe,gRr),e(oE,hRr),e(oE,XK),e(XK,pRr),e(oE,_Rr),e(de,uRr),e(de,rE),e(rE,NMe),e(NMe,bRr),e(rE,vRr),e(rE,zK),e(zK,FRr),e(rE,TRr),e(de,MRr),e(de,tE),e(tE,qMe),e(qMe,ERr),e(tE,CRr),e(tE,QK),e(QK,wRr),e(tE,ARr),e(de,LRr),e(de,aE),e(aE,jMe),e(jMe,yRr),e(aE,xRr),e(aE,WK),e(WK,$Rr),e(aE,kRr),e(de,SRr),e(de,nE),e(nE,DMe),e(DMe,RRr),e(nE,PRr),e(nE,HK),e(HK,BRr),e(nE,IRr),e(de,NRr),e(de,sE),e(sE,GMe),e(GMe,qRr),e(sE,jRr),e(sE,UK),e(UK,DRr),e(sE,GRr),e(de,ORr),e(de,lE),e(lE,OMe),e(OMe,VRr),e(lE,XRr),e(lE,JK),e(JK,zRr),e(lE,QRr),e(de,WRr),e(de,iE),e(iE,VMe),e(VMe,HRr),e(iE,URr),e(iE,YK),e(YK,JRr),e(iE,YRr),e(de,KRr),e(de,dE),e(dE,XMe),e(XMe,ZRr),e(dE,ePr),e(dE,KK),e(KK,oPr),e(dE,rPr),e(de,tPr),e(de,cE),e(cE,zMe),e(zMe,aPr),e(cE,nPr),e(cE,ZK),e(ZK,sPr),e(cE,lPr),e(de,iPr),e(de,fE),e(fE,QMe),e(QMe,dPr),e(fE,cPr),e(fE,eZ),e(eZ,fPr),e(fE,mPr),e(de,gPr),e(de,mE),e(mE,WMe),e(WMe,hPr),e(mE,pPr),e(mE,oZ),e(oZ,_Pr),e(mE,uPr),e(de,bPr),e(de,gE),e(gE,HMe),e(HMe,vPr),e(gE,FPr),e(gE,rZ),e(rZ,TPr),e(gE,MPr),e(de,EPr),e(de,hE),e(hE,UMe),e(UMe,CPr),e(hE,wPr),e(hE,tZ),e(tZ,APr),e(hE,LPr),e(de,yPr),e(de,pE),e(pE,JMe),e(JMe,xPr),e(pE,$Pr),e(pE,aZ),e(aZ,kPr),e(pE,SPr),e(qr,RPr),M(_E,qr,null),b(f,dze,u),b(f,qc,u),e(qc,uE),e(uE,YMe),M(Ox,YMe,null),e(qc,PPr),e(qc,KMe),e(KMe,BPr),b(f,cze,u),b(f,fr,u),M(Vx,fr,null),e(fr,IPr),e(fr,jc),e(jc,NPr),e(jc,nZ),e(nZ,qPr),e(jc,jPr),e(jc,sZ),e(sZ,DPr),e(jc,GPr),e(fr,OPr),e(fr,Xx),e(Xx,VPr),e(Xx,ZMe),e(ZMe,XPr),e(Xx,zPr),e(fr,QPr),e(fr,Vt),M(zx,Vt,null),e(Vt,WPr),e(Vt,e4e),e(e4e,HPr),e(Vt,UPr),e(Vt,Dc),e(Dc,JPr),e(Dc,o4e),e(o4e,YPr),e(Dc,KPr),e(Dc,lZ),e(lZ,ZPr),e(Dc,eBr),e(Vt,oBr),M(bE,Vt,null),e(fr,rBr),e(fr,jr),M(Qx,jr,null),e(jr,tBr),e(jr,r4e),e(r4e,aBr),e(jr,nBr),e(jr,un),e(un,sBr),e(un,t4e),e(t4e,lBr),e(un,iBr),e(un,a4e),e(a4e,dBr),e(un,cBr),e(un,n4e),e(n4e,fBr),e(un,mBr),e(jr,gBr),e(jr,ce),e(ce,vE),e(vE,s4e),e(s4e,hBr),e(vE,pBr),e(vE,iZ),e(iZ,_Br),e(vE,uBr),e(ce,bBr),e(ce,FE),e(FE,l4e),e(l4e,vBr),e(FE,FBr),e(FE,dZ),e(dZ,TBr),e(FE,MBr),e(ce,EBr),e(ce,TE),e(TE,i4e),e(i4e,CBr),e(TE,wBr),e(TE,cZ),e(cZ,ABr),e(TE,LBr),e(ce,yBr),e(ce,ME),e(ME,d4e),e(d4e,xBr),e(ME,$Br),e(ME,fZ),e(fZ,kBr),e(ME,SBr),e(ce,RBr),e(ce,EE),e(EE,c4e),e(c4e,PBr),e(EE,BBr),e(EE,mZ),e(mZ,IBr),e(EE,NBr),e(ce,qBr),e(ce,CE),e(CE,f4e),e(f4e,jBr),e(CE,DBr),e(CE,gZ),e(gZ,GBr),e(CE,OBr),e(ce,VBr),e(ce,wE),e(wE,m4e),e(m4e,XBr),e(wE,zBr),e(wE,hZ),e(hZ,QBr),e(wE,WBr),e(ce,HBr),e(ce,AE),e(AE,g4e),e(g4e,UBr),e(AE,JBr),e(AE,pZ),e(pZ,YBr),e(AE,KBr),e(ce,ZBr),e(ce,LE),e(LE,h4e),e(h4e,eIr),e(LE,oIr),e(LE,_Z),e(_Z,rIr),e(LE,tIr),e(ce,aIr),e(ce,yE),e(yE,p4e),e(p4e,nIr),e(yE,sIr),e(yE,uZ),e(uZ,lIr),e(yE,iIr),e(ce,dIr),e(ce,xE),e(xE,_4e),e(_4e,cIr),e(xE,fIr),e(xE,bZ),e(bZ,mIr),e(xE,gIr),e(ce,hIr),e(ce,$E),e($E,u4e),e(u4e,pIr),e($E,_Ir),e($E,vZ),e(vZ,uIr),e($E,bIr),e(ce,vIr),e(ce,kE),e(kE,b4e),e(b4e,FIr),e(kE,TIr),e(kE,FZ),e(FZ,MIr),e(kE,EIr),e(ce,CIr),e(ce,SE),e(SE,v4e),e(v4e,wIr),e(SE,AIr),e(SE,TZ),e(TZ,LIr),e(SE,yIr),e(ce,xIr),e(ce,RE),e(RE,F4e),e(F4e,$Ir),e(RE,kIr),e(RE,MZ),e(MZ,SIr),e(RE,RIr),e(ce,PIr),e(ce,PE),e(PE,T4e),e(T4e,BIr),e(PE,IIr),e(PE,EZ),e(EZ,NIr),e(PE,qIr),e(ce,jIr),e(ce,BE),e(BE,M4e),e(M4e,DIr),e(BE,GIr),e(BE,CZ),e(CZ,OIr),e(BE,VIr),e(ce,XIr),e(ce,IE),e(IE,E4e),e(E4e,zIr),e(IE,QIr),e(IE,wZ),e(wZ,WIr),e(IE,HIr),e(ce,UIr),e(ce,NE),e(NE,C4e),e(C4e,JIr),e(NE,YIr),e(NE,AZ),e(AZ,KIr),e(NE,ZIr),e(ce,eNr),e(ce,qE),e(qE,w4e),e(w4e,oNr),e(qE,rNr),e(qE,LZ),e(LZ,tNr),e(qE,aNr),e(jr,nNr),M(jE,jr,null),b(f,fze,u),b(f,Gc,u),e(Gc,DE),e(DE,A4e),M(Wx,A4e,null),e(Gc,sNr),e(Gc,L4e),e(L4e,lNr),b(f,mze,u),b(f,mr,u),M(Hx,mr,null),e(mr,iNr),e(mr,Oc),e(Oc,dNr),e(Oc,yZ),e(yZ,cNr),e(Oc,fNr),e(Oc,xZ),e(xZ,mNr),e(Oc,gNr),e(mr,hNr),e(mr,Ux),e(Ux,pNr),e(Ux,y4e),e(y4e,_Nr),e(Ux,uNr),e(mr,bNr),e(mr,Xt),M(Jx,Xt,null),e(Xt,vNr),e(Xt,x4e),e(x4e,FNr),e(Xt,TNr),e(Xt,Vc),e(Vc,MNr),e(Vc,$4e),e($4e,ENr),e(Vc,CNr),e(Vc,$Z),e($Z,wNr),e(Vc,ANr),e(Xt,LNr),M(GE,Xt,null),e(mr,yNr),e(mr,Dr),M(Yx,Dr,null),e(Dr,xNr),e(Dr,k4e),e(k4e,$Nr),e(Dr,kNr),e(Dr,bn),e(bn,SNr),e(bn,S4e),e(S4e,RNr),e(bn,PNr),e(bn,R4e),e(R4e,BNr),e(bn,INr),e(bn,P4e),e(P4e,NNr),e(bn,qNr),e(Dr,jNr),e(Dr,B4e),e(B4e,OE),e(OE,I4e),e(I4e,DNr),e(OE,GNr),e(OE,kZ),e(kZ,ONr),e(OE,VNr),e(Dr,XNr),M(VE,Dr,null),b(f,gze,u),b(f,Xc,u),e(Xc,XE),e(XE,N4e),M(Kx,N4e,null),e(Xc,zNr),e(Xc,q4e),e(q4e,QNr),b(f,hze,u),b(f,gr,u),M(Zx,gr,null),e(gr,WNr),e(gr,zc),e(zc,HNr),e(zc,SZ),e(SZ,UNr),e(zc,JNr),e(zc,RZ),e(RZ,YNr),e(zc,KNr),e(gr,ZNr),e(gr,e$),e(e$,eqr),e(e$,j4e),e(j4e,oqr),e(e$,rqr),e(gr,tqr),e(gr,zt),M(o$,zt,null),e(zt,aqr),e(zt,D4e),e(D4e,nqr),e(zt,sqr),e(zt,Qc),e(Qc,lqr),e(Qc,G4e),e(G4e,iqr),e(Qc,dqr),e(Qc,PZ),e(PZ,cqr),e(Qc,fqr),e(zt,mqr),M(zE,zt,null),e(gr,gqr),e(gr,Gr),M(r$,Gr,null),e(Gr,hqr),e(Gr,O4e),e(O4e,pqr),e(Gr,_qr),e(Gr,vn),e(vn,uqr),e(vn,V4e),e(V4e,bqr),e(vn,vqr),e(vn,X4e),e(X4e,Fqr),e(vn,Tqr),e(vn,z4e),e(z4e,Mqr),e(vn,Eqr),e(Gr,Cqr),e(Gr,Q4e),e(Q4e,QE),e(QE,W4e),e(W4e,wqr),e(QE,Aqr),e(QE,BZ),e(BZ,Lqr),e(QE,yqr),e(Gr,xqr),M(WE,Gr,null),b(f,pze,u),b(f,Wc,u),e(Wc,HE),e(HE,H4e),M(t$,H4e,null),e(Wc,$qr),e(Wc,U4e),e(U4e,kqr),b(f,_ze,u),b(f,hr,u),M(a$,hr,null),e(hr,Sqr),e(hr,Hc),e(Hc,Rqr),e(Hc,IZ),e(IZ,Pqr),e(Hc,Bqr),e(Hc,NZ),e(NZ,Iqr),e(Hc,Nqr),e(hr,qqr),e(hr,n$),e(n$,jqr),e(n$,J4e),e(J4e,Dqr),e(n$,Gqr),e(hr,Oqr),e(hr,Qt),M(s$,Qt,null),e(Qt,Vqr),e(Qt,Y4e),e(Y4e,Xqr),e(Qt,zqr),e(Qt,Uc),e(Uc,Qqr),e(Uc,K4e),e(K4e,Wqr),e(Uc,Hqr),e(Uc,qZ),e(qZ,Uqr),e(Uc,Jqr),e(Qt,Yqr),M(UE,Qt,null),e(hr,Kqr),e(hr,Or),M(l$,Or,null),e(Or,Zqr),e(Or,Z4e),e(Z4e,ejr),e(Or,ojr),e(Or,Fn),e(Fn,rjr),e(Fn,eEe),e(eEe,tjr),e(Fn,ajr),e(Fn,oEe),e(oEe,njr),e(Fn,sjr),e(Fn,rEe),e(rEe,ljr),e(Fn,ijr),e(Or,djr),e(Or,oe),e(oe,JE),e(JE,tEe),e(tEe,cjr),e(JE,fjr),e(JE,jZ),e(jZ,mjr),e(JE,gjr),e(oe,hjr),e(oe,YE),e(YE,aEe),e(aEe,pjr),e(YE,_jr),e(YE,DZ),e(DZ,ujr),e(YE,bjr),e(oe,vjr),e(oe,KE),e(KE,nEe),e(nEe,Fjr),e(KE,Tjr),e(KE,GZ),e(GZ,Mjr),e(KE,Ejr),e(oe,Cjr),e(oe,ZE),e(ZE,sEe),e(sEe,wjr),e(ZE,Ajr),e(ZE,OZ),e(OZ,Ljr),e(ZE,yjr),e(oe,xjr),e(oe,eC),e(eC,lEe),e(lEe,$jr),e(eC,kjr),e(eC,VZ),e(VZ,Sjr),e(eC,Rjr),e(oe,Pjr),e(oe,oC),e(oC,iEe),e(iEe,Bjr),e(oC,Ijr),e(oC,XZ),e(XZ,Njr),e(oC,qjr),e(oe,jjr),e(oe,rC),e(rC,dEe),e(dEe,Djr),e(rC,Gjr),e(rC,zZ),e(zZ,Ojr),e(rC,Vjr),e(oe,Xjr),e(oe,tC),e(tC,cEe),e(cEe,zjr),e(tC,Qjr),e(tC,QZ),e(QZ,Wjr),e(tC,Hjr),e(oe,Ujr),e(oe,aC),e(aC,fEe),e(fEe,Jjr),e(aC,Yjr),e(aC,WZ),e(WZ,Kjr),e(aC,Zjr),e(oe,eDr),e(oe,nC),e(nC,mEe),e(mEe,oDr),e(nC,rDr),e(nC,HZ),e(HZ,tDr),e(nC,aDr),e(oe,nDr),e(oe,sC),e(sC,gEe),e(gEe,sDr),e(sC,lDr),e(sC,UZ),e(UZ,iDr),e(sC,dDr),e(oe,cDr),e(oe,lC),e(lC,hEe),e(hEe,fDr),e(lC,mDr),e(lC,JZ),e(JZ,gDr),e(lC,hDr),e(oe,pDr),e(oe,iC),e(iC,pEe),e(pEe,_Dr),e(iC,uDr),e(iC,YZ),e(YZ,bDr),e(iC,vDr),e(oe,FDr),e(oe,dC),e(dC,_Ee),e(_Ee,TDr),e(dC,MDr),e(dC,KZ),e(KZ,EDr),e(dC,CDr),e(oe,wDr),e(oe,cC),e(cC,uEe),e(uEe,ADr),e(cC,LDr),e(cC,ZZ),e(ZZ,yDr),e(cC,xDr),e(oe,$Dr),e(oe,fC),e(fC,bEe),e(bEe,kDr),e(fC,SDr),e(fC,eee),e(eee,RDr),e(fC,PDr),e(oe,BDr),e(oe,mC),e(mC,vEe),e(vEe,IDr),e(mC,NDr),e(mC,oee),e(oee,qDr),e(mC,jDr),e(oe,DDr),e(oe,gC),e(gC,FEe),e(FEe,GDr),e(gC,ODr),e(gC,ree),e(ree,VDr),e(gC,XDr),e(oe,zDr),e(oe,hC),e(hC,TEe),e(TEe,QDr),e(hC,WDr),e(hC,tee),e(tee,HDr),e(hC,UDr),e(oe,JDr),e(oe,pC),e(pC,MEe),e(MEe,YDr),e(pC,KDr),e(pC,aee),e(aee,ZDr),e(pC,eGr),e(oe,oGr),e(oe,_C),e(_C,EEe),e(EEe,rGr),e(_C,tGr),e(_C,nee),e(nee,aGr),e(_C,nGr),e(oe,sGr),e(oe,uC),e(uC,CEe),e(CEe,lGr),e(uC,iGr),e(uC,see),e(see,dGr),e(uC,cGr),e(oe,fGr),e(oe,bC),e(bC,wEe),e(wEe,mGr),e(bC,gGr),e(bC,lee),e(lee,hGr),e(bC,pGr),e(oe,_Gr),e(oe,vC),e(vC,AEe),e(AEe,uGr),e(vC,bGr),e(vC,iee),e(iee,vGr),e(vC,FGr),e(oe,TGr),e(oe,FC),e(FC,LEe),e(LEe,MGr),e(FC,EGr),e(FC,dee),e(dee,CGr),e(FC,wGr),e(oe,AGr),e(oe,TC),e(TC,yEe),e(yEe,LGr),e(TC,yGr),e(TC,cee),e(cee,xGr),e(TC,$Gr),e(oe,kGr),e(oe,MC),e(MC,xEe),e(xEe,SGr),e(MC,RGr),e(MC,fee),e(fee,PGr),e(MC,BGr),e(Or,IGr),M(EC,Or,null),b(f,uze,u),b(f,Jc,u),e(Jc,CC),e(CC,$Ee),M(i$,$Ee,null),e(Jc,NGr),e(Jc,kEe),e(kEe,qGr),b(f,bze,u),b(f,pr,u),M(d$,pr,null),e(pr,jGr),e(pr,Yc),e(Yc,DGr),e(Yc,mee),e(mee,GGr),e(Yc,OGr),e(Yc,gee),e(gee,VGr),e(Yc,XGr),e(pr,zGr),e(pr,c$),e(c$,QGr),e(c$,SEe),e(SEe,WGr),e(c$,HGr),e(pr,UGr),e(pr,Wt),M(f$,Wt,null),e(Wt,JGr),e(Wt,REe),e(REe,YGr),e(Wt,KGr),e(Wt,Kc),e(Kc,ZGr),e(Kc,PEe),e(PEe,eOr),e(Kc,oOr),e(Kc,hee),e(hee,rOr),e(Kc,tOr),e(Wt,aOr),M(wC,Wt,null),e(pr,nOr),e(pr,Vr),M(m$,Vr,null),e(Vr,sOr),e(Vr,BEe),e(BEe,lOr),e(Vr,iOr),e(Vr,Tn),e(Tn,dOr),e(Tn,IEe),e(IEe,cOr),e(Tn,fOr),e(Tn,NEe),e(NEe,mOr),e(Tn,gOr),e(Tn,qEe),e(qEe,hOr),e(Tn,pOr),e(Vr,_Or),e(Vr,xe),e(xe,AC),e(AC,jEe),e(jEe,uOr),e(AC,bOr),e(AC,pee),e(pee,vOr),e(AC,FOr),e(xe,TOr),e(xe,LC),e(LC,DEe),e(DEe,MOr),e(LC,EOr),e(LC,_ee),e(_ee,COr),e(LC,wOr),e(xe,AOr),e(xe,yC),e(yC,GEe),e(GEe,LOr),e(yC,yOr),e(yC,uee),e(uee,xOr),e(yC,$Or),e(xe,kOr),e(xe,xC),e(xC,OEe),e(OEe,SOr),e(xC,ROr),e(xC,bee),e(bee,POr),e(xC,BOr),e(xe,IOr),e(xe,$C),e($C,VEe),e(VEe,NOr),e($C,qOr),e($C,vee),e(vee,jOr),e($C,DOr),e(xe,GOr),e(xe,kC),e(kC,XEe),e(XEe,OOr),e(kC,VOr),e(kC,Fee),e(Fee,XOr),e(kC,zOr),e(xe,QOr),e(xe,SC),e(SC,zEe),e(zEe,WOr),e(SC,HOr),e(SC,Tee),e(Tee,UOr),e(SC,JOr),e(xe,YOr),e(xe,RC),e(RC,QEe),e(QEe,KOr),e(RC,ZOr),e(RC,Mee),e(Mee,eVr),e(RC,oVr),e(xe,rVr),e(xe,PC),e(PC,WEe),e(WEe,tVr),e(PC,aVr),e(PC,Eee),e(Eee,nVr),e(PC,sVr),e(xe,lVr),e(xe,BC),e(BC,HEe),e(HEe,iVr),e(BC,dVr),e(BC,Cee),e(Cee,cVr),e(BC,fVr),e(Vr,mVr),M(IC,Vr,null),b(f,vze,u),b(f,Zc,u),e(Zc,NC),e(NC,UEe),M(g$,UEe,null),e(Zc,gVr),e(Zc,JEe),e(JEe,hVr),b(f,Fze,u),b(f,_r,u),M(h$,_r,null),e(_r,pVr),e(_r,ef),e(ef,_Vr),e(ef,wee),e(wee,uVr),e(ef,bVr),e(ef,Aee),e(Aee,vVr),e(ef,FVr),e(_r,TVr),e(_r,p$),e(p$,MVr),e(p$,YEe),e(YEe,EVr),e(p$,CVr),e(_r,wVr),e(_r,Ht),M(_$,Ht,null),e(Ht,AVr),e(Ht,KEe),e(KEe,LVr),e(Ht,yVr),e(Ht,of),e(of,xVr),e(of,ZEe),e(ZEe,$Vr),e(of,kVr),e(of,Lee),e(Lee,SVr),e(of,RVr),e(Ht,PVr),M(qC,Ht,null),e(_r,BVr),e(_r,Xr),M(u$,Xr,null),e(Xr,IVr),e(Xr,eCe),e(eCe,NVr),e(Xr,qVr),e(Xr,Mn),e(Mn,jVr),e(Mn,oCe),e(oCe,DVr),e(Mn,GVr),e(Mn,rCe),e(rCe,OVr),e(Mn,VVr),e(Mn,tCe),e(tCe,XVr),e(Mn,zVr),e(Xr,QVr),e(Xr,Ee),e(Ee,jC),e(jC,aCe),e(aCe,WVr),e(jC,HVr),e(jC,yee),e(yee,UVr),e(jC,JVr),e(Ee,YVr),e(Ee,DC),e(DC,nCe),e(nCe,KVr),e(DC,ZVr),e(DC,xee),e(xee,eXr),e(DC,oXr),e(Ee,rXr),e(Ee,GC),e(GC,sCe),e(sCe,tXr),e(GC,aXr),e(GC,$ee),e($ee,nXr),e(GC,sXr),e(Ee,lXr),e(Ee,OC),e(OC,lCe),e(lCe,iXr),e(OC,dXr),e(OC,kee),e(kee,cXr),e(OC,fXr),e(Ee,mXr),e(Ee,VC),e(VC,iCe),e(iCe,gXr),e(VC,hXr),e(VC,See),e(See,pXr),e(VC,_Xr),e(Ee,uXr),e(Ee,XC),e(XC,dCe),e(dCe,bXr),e(XC,vXr),e(XC,Ree),e(Ree,FXr),e(XC,TXr),e(Ee,MXr),e(Ee,zC),e(zC,cCe),e(cCe,EXr),e(zC,CXr),e(zC,Pee),e(Pee,wXr),e(zC,AXr),e(Ee,LXr),e(Ee,QC),e(QC,fCe),e(fCe,yXr),e(QC,xXr),e(QC,Bee),e(Bee,$Xr),e(QC,kXr),e(Ee,SXr),e(Ee,WC),e(WC,mCe),e(mCe,RXr),e(WC,PXr),e(WC,Iee),e(Iee,BXr),e(WC,IXr),e(Ee,NXr),e(Ee,HC),e(HC,gCe),e(gCe,qXr),e(HC,jXr),e(HC,Nee),e(Nee,DXr),e(HC,GXr),e(Ee,OXr),e(Ee,UC),e(UC,hCe),e(hCe,VXr),e(UC,XXr),e(UC,qee),e(qee,zXr),e(UC,QXr),e(Ee,WXr),e(Ee,JC),e(JC,pCe),e(pCe,HXr),e(JC,UXr),e(JC,jee),e(jee,JXr),e(JC,YXr),e(Ee,KXr),e(Ee,YC),e(YC,_Ce),e(_Ce,ZXr),e(YC,ezr),e(YC,Dee),e(Dee,ozr),e(YC,rzr),e(Xr,tzr),M(KC,Xr,null),b(f,Tze,u),b(f,rf,u),e(rf,ZC),e(ZC,uCe),M(b$,uCe,null),e(rf,azr),e(rf,bCe),e(bCe,nzr),b(f,Mze,u),b(f,ur,u),M(v$,ur,null),e(ur,szr),e(ur,tf),e(tf,lzr),e(tf,Gee),e(Gee,izr),e(tf,dzr),e(tf,Oee),e(Oee,czr),e(tf,fzr),e(ur,mzr),e(ur,F$),e(F$,gzr),e(F$,vCe),e(vCe,hzr),e(F$,pzr),e(ur,_zr),e(ur,Ut),M(T$,Ut,null),e(Ut,uzr),e(Ut,FCe),e(FCe,bzr),e(Ut,vzr),e(Ut,af),e(af,Fzr),e(af,TCe),e(TCe,Tzr),e(af,Mzr),e(af,Vee),e(Vee,Ezr),e(af,Czr),e(Ut,wzr),M(e5,Ut,null),e(ur,Azr),e(ur,zr),M(M$,zr,null),e(zr,Lzr),e(zr,MCe),e(MCe,yzr),e(zr,xzr),e(zr,En),e(En,$zr),e(En,ECe),e(ECe,kzr),e(En,Szr),e(En,CCe),e(CCe,Rzr),e(En,Pzr),e(En,wCe),e(wCe,Bzr),e(En,Izr),e(zr,Nzr),e(zr,$e),e($e,o5),e(o5,ACe),e(ACe,qzr),e(o5,jzr),e(o5,Xee),e(Xee,Dzr),e(o5,Gzr),e($e,Ozr),e($e,r5),e(r5,LCe),e(LCe,Vzr),e(r5,Xzr),e(r5,zee),e(zee,zzr),e(r5,Qzr),e($e,Wzr),e($e,t5),e(t5,yCe),e(yCe,Hzr),e(t5,Uzr),e(t5,Qee),e(Qee,Jzr),e(t5,Yzr),e($e,Kzr),e($e,a5),e(a5,xCe),e(xCe,Zzr),e(a5,eQr),e(a5,Wee),e(Wee,oQr),e(a5,rQr),e($e,tQr),e($e,n5),e(n5,$Ce),e($Ce,aQr),e(n5,nQr),e(n5,Hee),e(Hee,sQr),e(n5,lQr),e($e,iQr),e($e,s5),e(s5,kCe),e(kCe,dQr),e(s5,cQr),e(s5,Uee),e(Uee,fQr),e(s5,mQr),e($e,gQr),e($e,l5),e(l5,SCe),e(SCe,hQr),e(l5,pQr),e(l5,Jee),e(Jee,_Qr),e(l5,uQr),e($e,bQr),e($e,i5),e(i5,RCe),e(RCe,vQr),e(i5,FQr),e(i5,Yee),e(Yee,TQr),e(i5,MQr),e($e,EQr),e($e,d5),e(d5,PCe),e(PCe,CQr),e(d5,wQr),e(d5,Kee),e(Kee,AQr),e(d5,LQr),e($e,yQr),e($e,c5),e(c5,BCe),e(BCe,xQr),e(c5,$Qr),e(c5,Zee),e(Zee,kQr),e(c5,SQr),e(zr,RQr),M(f5,zr,null),b(f,Eze,u),b(f,nf,u),e(nf,m5),e(m5,ICe),M(E$,ICe,null),e(nf,PQr),e(nf,NCe),e(NCe,BQr),b(f,Cze,u),b(f,br,u),M(C$,br,null),e(br,IQr),e(br,sf),e(sf,NQr),e(sf,eoe),e(eoe,qQr),e(sf,jQr),e(sf,ooe),e(ooe,DQr),e(sf,GQr),e(br,OQr),e(br,w$),e(w$,VQr),e(w$,qCe),e(qCe,XQr),e(w$,zQr),e(br,QQr),e(br,Jt),M(A$,Jt,null),e(Jt,WQr),e(Jt,jCe),e(jCe,HQr),e(Jt,UQr),e(Jt,lf),e(lf,JQr),e(lf,DCe),e(DCe,YQr),e(lf,KQr),e(lf,roe),e(roe,ZQr),e(lf,eWr),e(Jt,oWr),M(g5,Jt,null),e(br,rWr),e(br,Qr),M(L$,Qr,null),e(Qr,tWr),e(Qr,GCe),e(GCe,aWr),e(Qr,nWr),e(Qr,Cn),e(Cn,sWr),e(Cn,OCe),e(OCe,lWr),e(Cn,iWr),e(Cn,VCe),e(VCe,dWr),e(Cn,cWr),e(Cn,XCe),e(XCe,fWr),e(Cn,mWr),e(Qr,gWr),e(Qr,ke),e(ke,h5),e(h5,zCe),e(zCe,hWr),e(h5,pWr),e(h5,toe),e(toe,_Wr),e(h5,uWr),e(ke,bWr),e(ke,p5),e(p5,QCe),e(QCe,vWr),e(p5,FWr),e(p5,aoe),e(aoe,TWr),e(p5,MWr),e(ke,EWr),e(ke,_5),e(_5,WCe),e(WCe,CWr),e(_5,wWr),e(_5,noe),e(noe,AWr),e(_5,LWr),e(ke,yWr),e(ke,u5),e(u5,HCe),e(HCe,xWr),e(u5,$Wr),e(u5,soe),e(soe,kWr),e(u5,SWr),e(ke,RWr),e(ke,b5),e(b5,UCe),e(UCe,PWr),e(b5,BWr),e(b5,loe),e(loe,IWr),e(b5,NWr),e(ke,qWr),e(ke,v5),e(v5,JCe),e(JCe,jWr),e(v5,DWr),e(v5,ioe),e(ioe,GWr),e(v5,OWr),e(ke,VWr),e(ke,F5),e(F5,YCe),e(YCe,XWr),e(F5,zWr),e(F5,doe),e(doe,QWr),e(F5,WWr),e(ke,HWr),e(ke,T5),e(T5,KCe),e(KCe,UWr),e(T5,JWr),e(T5,coe),e(coe,YWr),e(T5,KWr),e(ke,ZWr),e(ke,M5),e(M5,ZCe),e(ZCe,eHr),e(M5,oHr),e(M5,foe),e(foe,rHr),e(M5,tHr),e(ke,aHr),e(ke,E5),e(E5,e5e),e(e5e,nHr),e(E5,sHr),e(E5,moe),e(moe,lHr),e(E5,iHr),e(Qr,dHr),M(C5,Qr,null),b(f,wze,u),b(f,df,u),e(df,w5),e(w5,o5e),M(y$,o5e,null),e(df,cHr),e(df,r5e),e(r5e,fHr),b(f,Aze,u),b(f,vr,u),M(x$,vr,null),e(vr,mHr),e(vr,cf),e(cf,gHr),e(cf,goe),e(goe,hHr),e(cf,pHr),e(cf,hoe),e(hoe,_Hr),e(cf,uHr),e(vr,bHr),e(vr,$$),e($$,vHr),e($$,t5e),e(t5e,FHr),e($$,THr),e(vr,MHr),e(vr,Yt),M(k$,Yt,null),e(Yt,EHr),e(Yt,a5e),e(a5e,CHr),e(Yt,wHr),e(Yt,ff),e(ff,AHr),e(ff,n5e),e(n5e,LHr),e(ff,yHr),e(ff,poe),e(poe,xHr),e(ff,$Hr),e(Yt,kHr),M(A5,Yt,null),e(vr,SHr),e(vr,Wr),M(S$,Wr,null),e(Wr,RHr),e(Wr,s5e),e(s5e,PHr),e(Wr,BHr),e(Wr,wn),e(wn,IHr),e(wn,l5e),e(l5e,NHr),e(wn,qHr),e(wn,i5e),e(i5e,jHr),e(wn,DHr),e(wn,d5e),e(d5e,GHr),e(wn,OHr),e(Wr,VHr),e(Wr,Se),e(Se,L5),e(L5,c5e),e(c5e,XHr),e(L5,zHr),e(L5,_oe),e(_oe,QHr),e(L5,WHr),e(Se,HHr),e(Se,y5),e(y5,f5e),e(f5e,UHr),e(y5,JHr),e(y5,uoe),e(uoe,YHr),e(y5,KHr),e(Se,ZHr),e(Se,x5),e(x5,m5e),e(m5e,eUr),e(x5,oUr),e(x5,boe),e(boe,rUr),e(x5,tUr),e(Se,aUr),e(Se,$5),e($5,g5e),e(g5e,nUr),e($5,sUr),e($5,voe),e(voe,lUr),e($5,iUr),e(Se,dUr),e(Se,k5),e(k5,h5e),e(h5e,cUr),e(k5,fUr),e(k5,Foe),e(Foe,mUr),e(k5,gUr),e(Se,hUr),e(Se,S5),e(S5,p5e),e(p5e,pUr),e(S5,_Ur),e(S5,Toe),e(Toe,uUr),e(S5,bUr),e(Se,vUr),e(Se,R5),e(R5,_5e),e(_5e,FUr),e(R5,TUr),e(R5,Moe),e(Moe,MUr),e(R5,EUr),e(Se,CUr),e(Se,P5),e(P5,u5e),e(u5e,wUr),e(P5,AUr),e(P5,Eoe),e(Eoe,LUr),e(P5,yUr),e(Se,xUr),e(Se,B5),e(B5,b5e),e(b5e,$Ur),e(B5,kUr),e(B5,Coe),e(Coe,SUr),e(B5,RUr),e(Se,PUr),e(Se,I5),e(I5,v5e),e(v5e,BUr),e(I5,IUr),e(I5,woe),e(woe,NUr),e(I5,qUr),e(Wr,jUr),M(N5,Wr,null),b(f,Lze,u),b(f,mf,u),e(mf,q5),e(q5,F5e),M(R$,F5e,null),e(mf,DUr),e(mf,T5e),e(T5e,GUr),b(f,yze,u),b(f,Fr,u),M(P$,Fr,null),e(Fr,OUr),e(Fr,gf),e(gf,VUr),e(gf,Aoe),e(Aoe,XUr),e(gf,zUr),e(gf,Loe),e(Loe,QUr),e(gf,WUr),e(Fr,HUr),e(Fr,B$),e(B$,UUr),e(B$,M5e),e(M5e,JUr),e(B$,YUr),e(Fr,KUr),e(Fr,Kt),M(I$,Kt,null),e(Kt,ZUr),e(Kt,E5e),e(E5e,eJr),e(Kt,oJr),e(Kt,hf),e(hf,rJr),e(hf,C5e),e(C5e,tJr),e(hf,aJr),e(hf,yoe),e(yoe,nJr),e(hf,sJr),e(Kt,lJr),M(j5,Kt,null),e(Fr,iJr),e(Fr,Hr),M(N$,Hr,null),e(Hr,dJr),e(Hr,w5e),e(w5e,cJr),e(Hr,fJr),e(Hr,An),e(An,mJr),e(An,A5e),e(A5e,gJr),e(An,hJr),e(An,L5e),e(L5e,pJr),e(An,_Jr),e(An,y5e),e(y5e,uJr),e(An,bJr),e(Hr,vJr),e(Hr,Re),e(Re,D5),e(D5,x5e),e(x5e,FJr),e(D5,TJr),e(D5,xoe),e(xoe,MJr),e(D5,EJr),e(Re,CJr),e(Re,G5),e(G5,$5e),e($5e,wJr),e(G5,AJr),e(G5,$oe),e($oe,LJr),e(G5,yJr),e(Re,xJr),e(Re,O5),e(O5,k5e),e(k5e,$Jr),e(O5,kJr),e(O5,koe),e(koe,SJr),e(O5,RJr),e(Re,PJr),e(Re,V5),e(V5,S5e),e(S5e,BJr),e(V5,IJr),e(V5,Soe),e(Soe,NJr),e(V5,qJr),e(Re,jJr),e(Re,X5),e(X5,R5e),e(R5e,DJr),e(X5,GJr),e(X5,Roe),e(Roe,OJr),e(X5,VJr),e(Re,XJr),e(Re,z5),e(z5,P5e),e(P5e,zJr),e(z5,QJr),e(z5,Poe),e(Poe,WJr),e(z5,HJr),e(Re,UJr),e(Re,Q5),e(Q5,B5e),e(B5e,JJr),e(Q5,YJr),e(Q5,Boe),e(Boe,KJr),e(Q5,ZJr),e(Re,eYr),e(Re,W5),e(W5,I5e),e(I5e,oYr),e(W5,rYr),e(W5,Ioe),e(Ioe,tYr),e(W5,aYr),e(Re,nYr),e(Re,H5),e(H5,N5e),e(N5e,sYr),e(H5,lYr),e(H5,Noe),e(Noe,iYr),e(H5,dYr),e(Re,cYr),e(Re,U5),e(U5,q5e),e(q5e,fYr),e(U5,mYr),e(U5,qoe),e(qoe,gYr),e(U5,hYr),e(Hr,pYr),M(J5,Hr,null),b(f,xze,u),b(f,pf,u),e(pf,Y5),e(Y5,j5e),M(q$,j5e,null),e(pf,_Yr),e(pf,D5e),e(D5e,uYr),b(f,$ze,u),b(f,Tr,u),M(j$,Tr,null),e(Tr,bYr),e(Tr,_f),e(_f,vYr),e(_f,joe),e(joe,FYr),e(_f,TYr),e(_f,Doe),e(Doe,MYr),e(_f,EYr),e(Tr,CYr),e(Tr,D$),e(D$,wYr),e(D$,G5e),e(G5e,AYr),e(D$,LYr),e(Tr,yYr),e(Tr,Zt),M(G$,Zt,null),e(Zt,xYr),e(Zt,O5e),e(O5e,$Yr),e(Zt,kYr),e(Zt,uf),e(uf,SYr),e(uf,V5e),e(V5e,RYr),e(uf,PYr),e(uf,Goe),e(Goe,BYr),e(uf,IYr),e(Zt,NYr),M(K5,Zt,null),e(Tr,qYr),e(Tr,Ur),M(O$,Ur,null),e(Ur,jYr),e(Ur,X5e),e(X5e,DYr),e(Ur,GYr),e(Ur,Ln),e(Ln,OYr),e(Ln,z5e),e(z5e,VYr),e(Ln,XYr),e(Ln,Q5e),e(Q5e,zYr),e(Ln,QYr),e(Ln,W5e),e(W5e,WYr),e(Ln,HYr),e(Ur,UYr),e(Ur,Ve),e(Ve,Z5),e(Z5,H5e),e(H5e,JYr),e(Z5,YYr),e(Z5,Ooe),e(Ooe,KYr),e(Z5,ZYr),e(Ve,eKr),e(Ve,e0),e(e0,U5e),e(U5e,oKr),e(e0,rKr),e(e0,Voe),e(Voe,tKr),e(e0,aKr),e(Ve,nKr),e(Ve,o0),e(o0,J5e),e(J5e,sKr),e(o0,lKr),e(o0,Xoe),e(Xoe,iKr),e(o0,dKr),e(Ve,cKr),e(Ve,r0),e(r0,Y5e),e(Y5e,fKr),e(r0,mKr),e(r0,zoe),e(zoe,gKr),e(r0,hKr),e(Ve,pKr),e(Ve,t0),e(t0,K5e),e(K5e,_Kr),e(t0,uKr),e(t0,Qoe),e(Qoe,bKr),e(t0,vKr),e(Ve,FKr),e(Ve,a0),e(a0,Z5e),e(Z5e,TKr),e(a0,MKr),e(a0,Woe),e(Woe,EKr),e(a0,CKr),e(Ve,wKr),e(Ve,n0),e(n0,e0e),e(e0e,AKr),e(n0,LKr),e(n0,Hoe),e(Hoe,yKr),e(n0,xKr),e(Ve,$Kr),e(Ve,s0),e(s0,o0e),e(o0e,kKr),e(s0,SKr),e(s0,Uoe),e(Uoe,RKr),e(s0,PKr),e(Ur,BKr),M(l0,Ur,null),b(f,kze,u),b(f,bf,u),e(bf,i0),e(i0,r0e),M(V$,r0e,null),e(bf,IKr),e(bf,t0e),e(t0e,NKr),b(f,Sze,u),b(f,Mr,u),M(X$,Mr,null),e(Mr,qKr),e(Mr,vf),e(vf,jKr),e(vf,Joe),e(Joe,DKr),e(vf,GKr),e(vf,Yoe),e(Yoe,OKr),e(vf,VKr),e(Mr,XKr),e(Mr,z$),e(z$,zKr),e(z$,a0e),e(a0e,QKr),e(z$,WKr),e(Mr,HKr),e(Mr,ea),M(Q$,ea,null),e(ea,UKr),e(ea,n0e),e(n0e,JKr),e(ea,YKr),e(ea,Ff),e(Ff,KKr),e(Ff,s0e),e(s0e,ZKr),e(Ff,eZr),e(Ff,Koe),e(Koe,oZr),e(Ff,rZr),e(ea,tZr),M(d0,ea,null),e(Mr,aZr),e(Mr,Jr),M(W$,Jr,null),e(Jr,nZr),e(Jr,l0e),e(l0e,sZr),e(Jr,lZr),e(Jr,yn),e(yn,iZr),e(yn,i0e),e(i0e,dZr),e(yn,cZr),e(yn,d0e),e(d0e,fZr),e(yn,mZr),e(yn,c0e),e(c0e,gZr),e(yn,hZr),e(Jr,pZr),e(Jr,Xe),e(Xe,c0),e(c0,f0e),e(f0e,_Zr),e(c0,uZr),e(c0,Zoe),e(Zoe,bZr),e(c0,vZr),e(Xe,FZr),e(Xe,f0),e(f0,m0e),e(m0e,TZr),e(f0,MZr),e(f0,ere),e(ere,EZr),e(f0,CZr),e(Xe,wZr),e(Xe,m0),e(m0,g0e),e(g0e,AZr),e(m0,LZr),e(m0,ore),e(ore,yZr),e(m0,xZr),e(Xe,$Zr),e(Xe,g0),e(g0,h0e),e(h0e,kZr),e(g0,SZr),e(g0,rre),e(rre,RZr),e(g0,PZr),e(Xe,BZr),e(Xe,h0),e(h0,p0e),e(p0e,IZr),e(h0,NZr),e(h0,tre),e(tre,qZr),e(h0,jZr),e(Xe,DZr),e(Xe,p0),e(p0,_0e),e(_0e,GZr),e(p0,OZr),e(p0,are),e(are,VZr),e(p0,XZr),e(Xe,zZr),e(Xe,_0),e(_0,u0e),e(u0e,QZr),e(_0,WZr),e(_0,nre),e(nre,HZr),e(_0,UZr),e(Xe,JZr),e(Xe,u0),e(u0,b0e),e(b0e,YZr),e(u0,KZr),e(u0,sre),e(sre,ZZr),e(u0,eet),e(Jr,oet),M(b0,Jr,null),b(f,Rze,u),b(f,Tf,u),e(Tf,v0),e(v0,v0e),M(H$,v0e,null),e(Tf,ret),e(Tf,F0e),e(F0e,tet),b(f,Pze,u),b(f,Er,u),M(U$,Er,null),e(Er,aet),e(Er,Mf),e(Mf,net),e(Mf,lre),e(lre,set),e(Mf,iet),e(Mf,ire),e(ire,det),e(Mf,cet),e(Er,fet),e(Er,J$),e(J$,met),e(J$,T0e),e(T0e,get),e(J$,het),e(Er,pet),e(Er,oa),M(Y$,oa,null),e(oa,_et),e(oa,M0e),e(M0e,uet),e(oa,bet),e(oa,Ef),e(Ef,vet),e(Ef,E0e),e(E0e,Fet),e(Ef,Tet),e(Ef,dre),e(dre,Met),e(Ef,Eet),e(oa,Cet),M(F0,oa,null),e(Er,wet),e(Er,Yr),M(K$,Yr,null),e(Yr,Aet),e(Yr,C0e),e(C0e,Let),e(Yr,yet),e(Yr,xn),e(xn,xet),e(xn,w0e),e(w0e,$et),e(xn,ket),e(xn,A0e),e(A0e,Set),e(xn,Ret),e(xn,L0e),e(L0e,Pet),e(xn,Bet),e(Yr,Iet),e(Yr,y0e),e(y0e,T0),e(T0,x0e),e(x0e,Net),e(T0,qet),e(T0,cre),e(cre,jet),e(T0,Det),e(Yr,Get),M(M0,Yr,null),b(f,Bze,u),b(f,Cf,u),e(Cf,E0),e(E0,$0e),M(Z$,$0e,null),e(Cf,Oet),e(Cf,k0e),e(k0e,Vet),b(f,Ize,u),b(f,Cr,u),M(ek,Cr,null),e(Cr,Xet),e(Cr,wf),e(wf,zet),e(wf,fre),e(fre,Qet),e(wf,Wet),e(wf,mre),e(mre,Het),e(wf,Uet),e(Cr,Jet),e(Cr,ok),e(ok,Yet),e(ok,S0e),e(S0e,Ket),e(ok,Zet),e(Cr,eot),e(Cr,ra),M(rk,ra,null),e(ra,oot),e(ra,R0e),e(R0e,rot),e(ra,tot),e(ra,Af),e(Af,aot),e(Af,P0e),e(P0e,not),e(Af,sot),e(Af,gre),e(gre,lot),e(Af,iot),e(ra,dot),M(C0,ra,null),e(Cr,cot),e(Cr,Kr),M(tk,Kr,null),e(Kr,fot),e(Kr,B0e),e(B0e,mot),e(Kr,got),e(Kr,$n),e($n,hot),e($n,I0e),e(I0e,pot),e($n,_ot),e($n,N0e),e(N0e,uot),e($n,bot),e($n,q0e),e(q0e,vot),e($n,Fot),e(Kr,Tot),e(Kr,ak),e(ak,w0),e(w0,j0e),e(j0e,Mot),e(w0,Eot),e(w0,hre),e(hre,Cot),e(w0,wot),e(ak,Aot),e(ak,A0),e(A0,D0e),e(D0e,Lot),e(A0,yot),e(A0,pre),e(pre,xot),e(A0,$ot),e(Kr,kot),M(L0,Kr,null),b(f,Nze,u),b(f,Lf,u),e(Lf,y0),e(y0,G0e),M(nk,G0e,null),e(Lf,Sot),e(Lf,O0e),e(O0e,Rot),b(f,qze,u),b(f,wr,u),M(sk,wr,null),e(wr,Pot),e(wr,yf),e(yf,Bot),e(yf,_re),e(_re,Iot),e(yf,Not),e(yf,ure),e(ure,qot),e(yf,jot),e(wr,Dot),e(wr,lk),e(lk,Got),e(lk,V0e),e(V0e,Oot),e(lk,Vot),e(wr,Xot),e(wr,ta),M(ik,ta,null),e(ta,zot),e(ta,X0e),e(X0e,Qot),e(ta,Wot),e(ta,xf),e(xf,Hot),e(xf,z0e),e(z0e,Uot),e(xf,Jot),e(xf,bre),e(bre,Yot),e(xf,Kot),e(ta,Zot),M(x0,ta,null),e(wr,ert),e(wr,Zr),M(dk,Zr,null),e(Zr,ort),e(Zr,Q0e),e(Q0e,rrt),e(Zr,trt),e(Zr,kn),e(kn,art),e(kn,W0e),e(W0e,nrt),e(kn,srt),e(kn,H0e),e(H0e,lrt),e(kn,irt),e(kn,U0e),e(U0e,drt),e(kn,crt),e(Zr,frt),e(Zr,J0e),e(J0e,$0),e($0,Y0e),e(Y0e,mrt),e($0,grt),e($0,vre),e(vre,hrt),e($0,prt),e(Zr,_rt),M(k0,Zr,null),jze=!0},p(f,[u]){const ck={};u&2&&(ck.$$scope={dirty:u,ctx:f}),qf.$set(ck);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),Jg.$set(K0e);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),Sh.$set(Z0e);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),pp.$set(ewe);const fk={};u&2&&(fk.$$scope={dirty:u,ctx:f}),_p.$set(fk);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),Np.$set(owe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),qp.$set(Sn);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),Gp.$set(rwe);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),zu.$set(twe);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),Wu.$set(awe);const mk={};u&2&&(mk.$$scope={dirty:u,ctx:f}),D1.$set(mk);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),O1.$set(nwe);const gk={};u&2&&(gk.$$scope={dirty:u,ctx:f}),$2.$set(gk);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),S2.$set(swe);const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),bb.$set(hk);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),Fb.$set(lwe);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),Db.$set(iwe);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),Ob.$set(dwe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Dv.$set($f);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),Ov.$set(cwe);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),F3.$set(fwe);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),M3.$set(mwe);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),$3.$set(pk);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),S3.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),_F.$set(hwe);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),bF.$set(pwe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),i6.$set(at);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),c6.$set(_k);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),g6.$set(_we);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),p6.$set(uk);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),$6.$set(uwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),S6.$set(nt);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),B6.$set(bwe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),N6.$set(kf);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),D6.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),O6.$set(Fwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),Z6.$set(L);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),oT.$set(S0);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),iT.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),cT.$set(Mwe);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),MT.$set(R0);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),CT.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),yT.$set(Cwe);const P0={};u&2&&(P0.$$scope={dirty:u,ctx:f}),$T.$set(P0);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),NT.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),jT.$set(Awe);const B0={};u&2&&(B0.$$scope={dirty:u,ctx:f}),XT.$set(B0);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),QT.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),JT.$set(ywe);const I0={};u&2&&(I0.$$scope={dirty:u,ctx:f}),KT.$set(I0);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),o7.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),t7.$set($we);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),c7.$set(N0);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),m7.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),p7.$set(Swe);const q0={};u&2&&(q0.$$scope={dirty:u,ctx:f}),u7.$set(q0);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),f9.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),g9.$set(Pwe);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),N9.$set(j0);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),j9.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),Z9.$set(Iwe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),oM.$set(D0);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),lM.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),dM.$set(qwe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),$M.$set(G0);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),SM.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),VM.$set(Dwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),zM.$set(O0);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),b4.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),F4.$set(Owe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),q4.$set(V0);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),D4.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),V4.$set(Xwe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),z4.$set(X0);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),W4.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),U4.$set(Qwe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),_E.$set(z0);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),bE.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),jE.$set(Hwe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),GE.$set(Q0);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),VE.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),zE.$set(Jwe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),WE.$set(W0);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),UE.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),EC.$set(Kwe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),wC.$set(H0);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),IC.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),qC.$set(eAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),KC.$set(U0);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),e5.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),f5.$set(rAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),g5.$set(J0);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),C5.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),A5.$set(aAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),N5.$set(Y0);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),j5.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),J5.$set(sAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),K5.$set(K0);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),l0.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),d0.$set(iAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),b0.$set(Z0);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),F0.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),M0.$set(cAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),C0.$set(ew);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),L0.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),x0.$set(mAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),k0.$set(ow)},i(f){jze||(E(d.$$.fragment,f),E(ka.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(qf.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(sL.$$.fragment,f),E(Jg.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(mL.$$.fragment,f),E(Sh.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(bL.$$.fragment,f),E(pp.$$.fragment,f),E(_p.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(CL.$$.fragment,f),E(Np.$$.fragment,f),E(qp.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(Gp.$$.fragment,f),E($L.$$.fragment,f),E(zu.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(Wu.$$.fragment,f),E(BL.$$.fragment,f),E(D1.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(O1.$$.fragment,f),E(DL.$$.fragment,f),E($2.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(S2.$$.fragment,f),E(zL.$$.fragment,f),E(bb.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(Fb.$$.fragment,f),E(JL.$$.fragment,f),E(Db.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(Ob.$$.fragment,f),E(oy.$$.fragment,f),E(Dv.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Ov.$$.fragment,f),E(sy.$$.fragment,f),E(F3.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(M3.$$.fragment,f),E(fy.$$.fragment,f),E($3.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(S3.$$.fragment,f),E(_y.$$.fragment,f),E(_F.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(bF.$$.fragment,f),E(Ty.$$.fragment,f),E(i6.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(c6.$$.fragment,f),E(Ay.$$.fragment,f),E(g6.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(p6.$$.fragment,f),E(ky.$$.fragment,f),E($6.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(S6.$$.fragment,f),E(Iy.$$.fragment,f),E(B6.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(N6.$$.fragment,f),E(Gy.$$.fragment,f),E(D6.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(O6.$$.fragment,f),E(Qy.$$.fragment,f),E(Z6.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(oT.$$.fragment,f),E(Yy.$$.fragment,f),E(iT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(cT.$$.fragment,f),E(r8.$$.fragment,f),E(MT.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(CT.$$.fragment,f),E(l8.$$.fragment,f),E(yT.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E($T.$$.fragment,f),E(g8.$$.fragment,f),E(NT.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(jT.$$.fragment,f),E(b8.$$.fragment,f),E(XT.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(QT.$$.fragment,f),E(E8.$$.fragment,f),E(JT.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(KT.$$.fragment,f),E(x8.$$.fragment,f),E(o7.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(t7.$$.fragment,f),E(P8.$$.fragment,f),E(c7.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(m7.$$.fragment,f),E(j8.$$.fragment,f),E(p7.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(u7.$$.fragment,f),E(X8.$$.fragment,f),E(f9.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(g9.$$.fragment,f),E(U8.$$.fragment,f),E(N9.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(j9.$$.fragment,f),E(ex.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(oM.$$.fragment,f),E(nx.$$.fragment,f),E(lM.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(dM.$$.fragment,f),E(cx.$$.fragment,f),E($M.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(SM.$$.fragment,f),E(px.$$.fragment,f),E(VM.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(zM.$$.fragment,f),E(Fx.$$.fragment,f),E(b4.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(F4.$$.fragment,f),E(wx.$$.fragment,f),E(q4.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(D4.$$.fragment,f),E($x.$$.fragment,f),E(V4.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(z4.$$.fragment,f),E(Ix.$$.fragment,f),E(W4.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(U4.$$.fragment,f),E(Gx.$$.fragment,f),E(_E.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(bE.$$.fragment,f),E(Qx.$$.fragment,f),E(jE.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(GE.$$.fragment,f),E(Yx.$$.fragment,f),E(VE.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(zE.$$.fragment,f),E(r$.$$.fragment,f),E(WE.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(UE.$$.fragment,f),E(l$.$$.fragment,f),E(EC.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(wC.$$.fragment,f),E(m$.$$.fragment,f),E(IC.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(qC.$$.fragment,f),E(u$.$$.fragment,f),E(KC.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(e5.$$.fragment,f),E(M$.$$.fragment,f),E(f5.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(g5.$$.fragment,f),E(L$.$$.fragment,f),E(C5.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(A5.$$.fragment,f),E(S$.$$.fragment,f),E(N5.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(j5.$$.fragment,f),E(N$.$$.fragment,f),E(J5.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(K5.$$.fragment,f),E(O$.$$.fragment,f),E(l0.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(d0.$$.fragment,f),E(W$.$$.fragment,f),E(b0.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(F0.$$.fragment,f),E(K$.$$.fragment,f),E(M0.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(C0.$$.fragment,f),E(tk.$$.fragment,f),E(L0.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(x0.$$.fragment,f),E(dk.$$.fragment,f),E(k0.$$.fragment,f),jze=!0)},o(f){C(d.$$.fragment,f),C(ka.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(qf.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(sL.$$.fragment,f),C(Jg.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(mL.$$.fragment,f),C(Sh.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(bL.$$.fragment,f),C(pp.$$.fragment,f),C(_p.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(CL.$$.fragment,f),C(Np.$$.fragment,f),C(qp.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(Gp.$$.fragment,f),C($L.$$.fragment,f),C(zu.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(Wu.$$.fragment,f),C(BL.$$.fragment,f),C(D1.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(O1.$$.fragment,f),C(DL.$$.fragment,f),C($2.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(S2.$$.fragment,f),C(zL.$$.fragment,f),C(bb.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(Fb.$$.fragment,f),C(JL.$$.fragment,f),C(Db.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(Ob.$$.fragment,f),C(oy.$$.fragment,f),C(Dv.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Ov.$$.fragment,f),C(sy.$$.fragment,f),C(F3.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(M3.$$.fragment,f),C(fy.$$.fragment,f),C($3.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(S3.$$.fragment,f),C(_y.$$.fragment,f),C(_F.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(bF.$$.fragment,f),C(Ty.$$.fragment,f),C(i6.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(c6.$$.fragment,f),C(Ay.$$.fragment,f),C(g6.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(p6.$$.fragment,f),C(ky.$$.fragment,f),C($6.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(S6.$$.fragment,f),C(Iy.$$.fragment,f),C(B6.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(N6.$$.fragment,f),C(Gy.$$.fragment,f),C(D6.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(O6.$$.fragment,f),C(Qy.$$.fragment,f),C(Z6.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(oT.$$.fragment,f),C(Yy.$$.fragment,f),C(iT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(cT.$$.fragment,f),C(r8.$$.fragment,f),C(MT.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(CT.$$.fragment,f),C(l8.$$.fragment,f),C(yT.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C($T.$$.fragment,f),C(g8.$$.fragment,f),C(NT.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(jT.$$.fragment,f),C(b8.$$.fragment,f),C(XT.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(QT.$$.fragment,f),C(E8.$$.fragment,f),C(JT.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(KT.$$.fragment,f),C(x8.$$.fragment,f),C(o7.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(t7.$$.fragment,f),C(P8.$$.fragment,f),C(c7.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(m7.$$.fragment,f),C(j8.$$.fragment,f),C(p7.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(u7.$$.fragment,f),C(X8.$$.fragment,f),C(f9.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(g9.$$.fragment,f),C(U8.$$.fragment,f),C(N9.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(j9.$$.fragment,f),C(ex.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(oM.$$.fragment,f),C(nx.$$.fragment,f),C(lM.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(dM.$$.fragment,f),C(cx.$$.fragment,f),C($M.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(SM.$$.fragment,f),C(px.$$.fragment,f),C(VM.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(zM.$$.fragment,f),C(Fx.$$.fragment,f),C(b4.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(F4.$$.fragment,f),C(wx.$$.fragment,f),C(q4.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(D4.$$.fragment,f),C($x.$$.fragment,f),C(V4.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(z4.$$.fragment,f),C(Ix.$$.fragment,f),C(W4.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(U4.$$.fragment,f),C(Gx.$$.fragment,f),C(_E.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(bE.$$.fragment,f),C(Qx.$$.fragment,f),C(jE.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(GE.$$.fragment,f),C(Yx.$$.fragment,f),C(VE.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(zE.$$.fragment,f),C(r$.$$.fragment,f),C(WE.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(UE.$$.fragment,f),C(l$.$$.fragment,f),C(EC.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(wC.$$.fragment,f),C(m$.$$.fragment,f),C(IC.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(qC.$$.fragment,f),C(u$.$$.fragment,f),C(KC.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(e5.$$.fragment,f),C(M$.$$.fragment,f),C(f5.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(g5.$$.fragment,f),C(L$.$$.fragment,f),C(C5.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(A5.$$.fragment,f),C(S$.$$.fragment,f),C(N5.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(j5.$$.fragment,f),C(N$.$$.fragment,f),C(J5.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(K5.$$.fragment,f),C(O$.$$.fragment,f),C(l0.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(d0.$$.fragment,f),C(W$.$$.fragment,f),C(b0.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(F0.$$.fragment,f),C(K$.$$.fragment,f),C(M0.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(C0.$$.fragment,f),C(tk.$$.fragment,f),C(L0.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(x0.$$.fragment,f),C(dk.$$.fragment,f),C(k0.$$.fragment,f),jze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(ka,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Sa),f&&t(PVe),f&&t(Ri),w(eL),f&&t(BVe),f&&t(Nn),f&&t(IVe),w(oL,f),f&&t(NVe),f&&t(BS),f&&t(qVe),w(qf,f),f&&t(jVe),f&&t(Pi),w(rL),f&&t(DVe),f&&t(wo),w(tL),w(sL),w(Jg),w(lL),f&&t(GVe),f&&t(Ii),w(iL),f&&t(OVe),f&&t(Ao),w(dL),w(mL),w(Sh),w(gL),f&&t(VVe),f&&t(Ni),w(hL),f&&t(XVe),f&&t(Lo),w(pL),w(bL),w(pp),w(_p),w(vL),f&&t(zVe),f&&t(qi),w(FL),f&&t(QVe),f&&t(yo),w(TL),w(CL),w(Np),w(qp),w(wL),f&&t(WVe),f&&t(Di),w(AL),f&&t(HVe),f&&t(xo),w(LL),w(xL),w(Gp),w($L),w(zu),f&&t(UVe),f&&t(Vi),w(kL),f&&t(JVe),f&&t($o),w(SL),w(PL),w(Wu),w(BL),w(D1),f&&t(YVe),f&&t(Qi),w(IL),f&&t(KVe),f&&t(ko),w(NL),w(jL),w(O1),w(DL),w($2),f&&t(ZVe),f&&t(Ui),w(GL),f&&t(eXe),f&&t(So),w(OL),w(XL),w(S2),w(zL),w(bb),f&&t(oXe),f&&t(Ki),w(QL),f&&t(rXe),f&&t(Ro),w(WL),w(UL),w(Fb),w(JL),w(Db),f&&t(tXe),f&&t(od),w(YL),f&&t(aXe),f&&t(Po),w(KL),w(ey),w(Ob),w(oy),w(Dv),f&&t(nXe),f&&t(ad),w(ry),f&&t(sXe),f&&t(Bo),w(ty),w(ny),w(Ov),w(sy),w(F3),f&&t(lXe),f&&t(ld),w(ly),f&&t(iXe),f&&t(Io),w(iy),w(cy),w(M3),w(fy),w($3),f&&t(dXe),f&&t(cd),w(my),f&&t(cXe),f&&t(qo),w(gy),w(py),w(S3),w(_y),w(_F),f&&t(fXe),f&&t(gd),w(uy),f&&t(mXe),f&&t(jo),w(by),w(Fy),w(bF),w(Ty),w(i6),f&&t(gXe),f&&t(_d),w(My),f&&t(hXe),f&&t(Do),w(Ey),w(wy),w(c6),w(Ay),w(g6),f&&t(pXe),f&&t(vd),w(Ly),f&&t(_Xe),f&&t(Go),w(yy),w($y),w(p6),w(ky),w($6),f&&t(uXe),f&&t(Md),w(Sy),f&&t(bXe),f&&t(Oo),w(Ry),w(By),w(S6),w(Iy),w(B6),f&&t(vXe),f&&t(wd),w(Ny),f&&t(FXe),f&&t(Vo),w(qy),w(Dy),w(N6),w(Gy),w(D6),f&&t(TXe),f&&t(yd),w(Oy),f&&t(MXe),f&&t(Xo),w(Vy),w(zy),w(O6),w(Qy),w(Z6),f&&t(EXe),f&&t(kd),w(Wy),f&&t(CXe),f&&t(zo),w(Hy),w(Jy),w(oT),w(Yy),w(iT),f&&t(wXe),f&&t(Pd),w(Ky),f&&t(AXe),f&&t(Qo),w(Zy),w(o8),w(cT),w(r8),w(MT),f&&t(LXe),f&&t(Nd),w(t8),f&&t(yXe),f&&t(Wo),w(a8),w(s8),w(CT),w(l8),w(yT),f&&t(xXe),f&&t(Dd),w(d8),f&&t($Xe),f&&t(Ho),w(c8),w(m8),w($T),w(g8),w(NT),f&&t(kXe),f&&t(Vd),w(h8),f&&t(SXe),f&&t(Uo),w(p8),w(u8),w(jT),w(b8),w(XT),f&&t(RXe),f&&t(Wd),w(v8),f&&t(PXe),f&&t(Jo),w(F8),w(M8),w(QT),w(E8),w(JT),f&&t(BXe),f&&t(Jd),w(w8),f&&t(IXe),f&&t(Yo),w(A8),w(y8),w(KT),w(x8),w(o7),f&&t(NXe),f&&t(Zd),w($8),f&&t(qXe),f&&t(Ko),w(k8),w(R8),w(t7),w(P8),w(c7),f&&t(jXe),f&&t(rc),w(B8),f&&t(DXe),f&&t(Zo),w(I8),w(q8),w(m7),w(j8),w(p7),f&&t(GXe),f&&t(nc),w(D8),f&&t(OXe),f&&t(er),w(G8),w(V8),w(u7),w(X8),w(f9),f&&t(VXe),f&&t(ic),w(z8),f&&t(XXe),f&&t(or),w(Q8),w(H8),w(g9),w(U8),w(N9),f&&t(zXe),f&&t(fc),w(J8),f&&t(QXe),f&&t(rr),w(Y8),w(Z8),w(j9),w(ex),w(Z9),f&&t(WXe),f&&t(hc),w(ox),f&&t(HXe),f&&t(tr),w(rx),w(ax),w(oM),w(nx),w(lM),f&&t(UXe),f&&t(uc),w(sx),f&&t(JXe),f&&t(ar),w(lx),w(dx),w(dM),w(cx),w($M),f&&t(YXe),f&&t(Fc),w(fx),f&&t(KXe),f&&t(nr),w(mx),w(hx),w(SM),w(px),w(VM),f&&t(ZXe),f&&t(Ec),w(_x),f&&t(eze),f&&t(sr),w(ux),w(vx),w(zM),w(Fx),w(b4),f&&t(oze),f&&t(Ac),w(Tx),f&&t(rze),f&&t(lr),w(Mx),w(Cx),w(F4),w(wx),w(q4),f&&t(tze),f&&t(xc),w(Ax),f&&t(aze),f&&t(ir),w(Lx),w(xx),w(D4),w($x),w(V4),f&&t(nze),f&&t(Sc),w(Sx),f&&t(sze),f&&t(dr),w(Rx),w(Bx),w(z4),w(Ix),w(W4),f&&t(lze),f&&t(Bc),w(Nx),f&&t(ize),f&&t(cr),w(qx),w(Dx),w(U4),w(Gx),w(_E),f&&t(dze),f&&t(qc),w(Ox),f&&t(cze),f&&t(fr),w(Vx),w(zx),w(bE),w(Qx),w(jE),f&&t(fze),f&&t(Gc),w(Wx),f&&t(mze),f&&t(mr),w(Hx),w(Jx),w(GE),w(Yx),w(VE),f&&t(gze),f&&t(Xc),w(Kx),f&&t(hze),f&&t(gr),w(Zx),w(o$),w(zE),w(r$),w(WE),f&&t(pze),f&&t(Wc),w(t$),f&&t(_ze),f&&t(hr),w(a$),w(s$),w(UE),w(l$),w(EC),f&&t(uze),f&&t(Jc),w(i$),f&&t(bze),f&&t(pr),w(d$),w(f$),w(wC),w(m$),w(IC),f&&t(vze),f&&t(Zc),w(g$),f&&t(Fze),f&&t(_r),w(h$),w(_$),w(qC),w(u$),w(KC),f&&t(Tze),f&&t(rf),w(b$),f&&t(Mze),f&&t(ur),w(v$),w(T$),w(e5),w(M$),w(f5),f&&t(Eze),f&&t(nf),w(E$),f&&t(Cze),f&&t(br),w(C$),w(A$),w(g5),w(L$),w(C5),f&&t(wze),f&&t(df),w(y$),f&&t(Aze),f&&t(vr),w(x$),w(k$),w(A5),w(S$),w(N5),f&&t(Lze),f&&t(mf),w(R$),f&&t(yze),f&&t(Fr),w(P$),w(I$),w(j5),w(N$),w(J5),f&&t(xze),f&&t(pf),w(q$),f&&t($ze),f&&t(Tr),w(j$),w(G$),w(K5),w(O$),w(l0),f&&t(kze),f&&t(bf),w(V$),f&&t(Sze),f&&t(Mr),w(X$),w(Q$),w(d0),w(W$),w(b0),f&&t(Rze),f&&t(Tf),w(H$),f&&t(Pze),f&&t(Er),w(U$),w(Y$),w(F0),w(K$),w(M0),f&&t(Bze),f&&t(Cf),w(Z$),f&&t(Ize),f&&t(Cr),w(ek),w(rk),w(C0),w(tk),w(L0),f&&t(Nze),f&&t(Lf),w(nk),f&&t(qze),f&&t(wr),w(sk),w(ik),w(x0),w(dk),w(k0)}}}const GWt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function OWt($){return Dzt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class UWt extends Izt{constructor(g){super();Nzt(this,g,OWt,DWt,qzt,{})}}export{UWt as default,GWt as metadata};
