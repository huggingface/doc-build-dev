import{S as Cqt,i as wqt,s as Aqt,e as a,k as l,w as F,t as o,M as Lqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as yqt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as MJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xqt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,uL,yf,Oe,We,Ei,Sn,_L,Rn,Pn,bL,Ci,Bn,vL,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),uL=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),_L=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),bL=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),vL=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Wk=s(p);m=r(Wk,"NewModelConfig"),Wk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Qk=s(Fi);Lf=r(Qk,"model_type"),Qk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var Hk=s(Ti);Mi=r(Hk,'"new-model"'),Hk.forEach(t),uL=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),_L=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Uk=s(Rn);Pn=r(Uk,"PreTrainedModel"),Uk.forEach(t),bL=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),vL=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Jk=s(wi);xf=r(Jk,"NewModelConfig"),Jk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,uL),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,_L),e(Oe,Rn),e(Rn,Pn),e(Oe,bL),e(Oe,Ci),e(Ci,Bn),e(Oe,vL),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function $qt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Rqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Bqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,uL,yf,Oe,We,Ei,Sn,_L,Rn,Pn,bL,Ci,Bn,vL,wi,xf,ya,Qe,Ae,Wk,Ai,Qk,Hk,Co,xa,Uk,$f,Jk,_ze,rGe,Li,kf,Wre,FL,bze,Qre,vze,tGe,In,Fze,Hre,Tze,Mze,Ure,Eze,Cze,aGe,TL,nGe,Yk,wze,sGe,Sf,lGe,yi,Rf,Jre,ML,Aze,Yre,Lze,iGe,wo,EL,yze,CL,xze,Kk,$ze,kze,Sze,wL,Rze,Kre,Pze,Bze,Ize,wr,AL,Nze,Zre,qze,jze,xi,Dze,ete,Gze,Oze,ote,Vze,Xze,zze,A,Pf,rte,Wze,Qze,Zk,Hze,Uze,Jze,Bf,tte,Yze,Kze,eS,Zze,eWe,oWe,If,ate,rWe,tWe,oS,aWe,nWe,sWe,Nf,nte,lWe,iWe,rS,dWe,cWe,fWe,qf,ste,mWe,gWe,tS,hWe,pWe,uWe,jf,lte,_We,bWe,aS,vWe,FWe,TWe,Df,ite,MWe,EWe,nS,CWe,wWe,AWe,Gf,dte,LWe,yWe,sS,xWe,$We,kWe,Of,cte,SWe,RWe,lS,PWe,BWe,IWe,Vf,fte,NWe,qWe,iS,jWe,DWe,GWe,Xf,mte,OWe,VWe,dS,XWe,zWe,WWe,zf,gte,QWe,HWe,cS,UWe,JWe,YWe,Wf,hte,KWe,ZWe,fS,eQe,oQe,rQe,Qf,pte,tQe,aQe,mS,nQe,sQe,lQe,Hf,ute,iQe,dQe,gS,cQe,fQe,mQe,Uf,_te,gQe,hQe,hS,pQe,uQe,_Qe,Jf,bte,bQe,vQe,pS,FQe,TQe,MQe,Yf,vte,EQe,CQe,uS,wQe,AQe,LQe,Kf,Fte,yQe,xQe,_S,$Qe,kQe,SQe,Zf,Tte,RQe,PQe,bS,BQe,IQe,NQe,em,Mte,qQe,jQe,vS,DQe,GQe,OQe,om,Ete,VQe,XQe,FS,zQe,WQe,QQe,rm,Cte,HQe,UQe,TS,JQe,YQe,KQe,tm,wte,ZQe,eHe,MS,oHe,rHe,tHe,am,Ate,aHe,nHe,ES,sHe,lHe,iHe,nm,Lte,dHe,cHe,CS,fHe,mHe,gHe,sm,yte,hHe,pHe,wS,uHe,_He,bHe,lm,xte,vHe,FHe,AS,THe,MHe,EHe,im,$te,CHe,wHe,LS,AHe,LHe,yHe,dm,kte,xHe,$He,yS,kHe,SHe,RHe,cm,Ste,PHe,BHe,xS,IHe,NHe,qHe,fm,Rte,jHe,DHe,$S,GHe,OHe,VHe,mm,Pte,XHe,zHe,kS,WHe,QHe,HHe,gm,Bte,UHe,JHe,SS,YHe,KHe,ZHe,hm,Ite,eUe,oUe,RS,rUe,tUe,aUe,pm,Nte,nUe,sUe,PS,lUe,iUe,dUe,um,qte,cUe,fUe,BS,mUe,gUe,hUe,_m,jte,pUe,uUe,IS,_Ue,bUe,vUe,bm,Dte,FUe,TUe,NS,MUe,EUe,CUe,vm,Gte,wUe,AUe,qS,LUe,yUe,xUe,Fm,Ote,$Ue,kUe,jS,SUe,RUe,PUe,Tm,Vte,BUe,IUe,DS,NUe,qUe,jUe,Mm,Xte,DUe,GUe,GS,OUe,VUe,XUe,Em,zte,zUe,WUe,OS,QUe,HUe,UUe,Cm,Wte,JUe,YUe,VS,KUe,ZUe,eJe,wm,Qte,oJe,rJe,XS,tJe,aJe,nJe,Am,Hte,sJe,lJe,zS,iJe,dJe,cJe,Lm,Ute,fJe,mJe,WS,gJe,hJe,pJe,ym,Jte,uJe,_Je,QS,bJe,vJe,FJe,xm,Yte,TJe,MJe,HS,EJe,CJe,wJe,$m,Kte,AJe,LJe,US,yJe,xJe,$Je,km,Zte,kJe,SJe,JS,RJe,PJe,BJe,Sm,eae,IJe,NJe,YS,qJe,jJe,DJe,Rm,oae,GJe,OJe,KS,VJe,XJe,zJe,Pm,rae,WJe,QJe,ZS,HJe,UJe,JJe,Bm,tae,YJe,KJe,eR,ZJe,eYe,oYe,Im,aae,rYe,tYe,oR,aYe,nYe,sYe,Nm,nae,lYe,iYe,rR,dYe,cYe,fYe,qm,sae,mYe,gYe,tR,hYe,pYe,uYe,jm,lae,_Ye,bYe,aR,vYe,FYe,TYe,Dm,iae,MYe,EYe,nR,CYe,wYe,AYe,Gm,dae,LYe,yYe,sR,xYe,$Ye,kYe,Om,cae,SYe,RYe,lR,PYe,BYe,IYe,Vm,fae,NYe,qYe,iR,jYe,DYe,GYe,Xm,mae,OYe,VYe,dR,XYe,zYe,WYe,zm,gae,QYe,HYe,cR,UYe,JYe,YYe,Wm,hae,KYe,ZYe,fR,eKe,oKe,rKe,Qm,pae,tKe,aKe,mR,nKe,sKe,lKe,Hm,uae,iKe,dKe,gR,cKe,fKe,mKe,Um,_ae,gKe,hKe,hR,pKe,uKe,_Ke,Jm,bae,bKe,vKe,pR,FKe,TKe,MKe,Ym,vae,EKe,CKe,uR,wKe,AKe,LKe,Km,Fae,yKe,xKe,_R,$Ke,kKe,SKe,Zm,Tae,RKe,PKe,bR,BKe,IKe,NKe,eg,Mae,qKe,jKe,vR,DKe,GKe,OKe,og,Eae,VKe,XKe,FR,zKe,WKe,QKe,rg,Cae,HKe,UKe,TR,JKe,YKe,KKe,tg,wae,ZKe,eZe,MR,oZe,rZe,tZe,ag,Aae,aZe,nZe,ER,sZe,lZe,iZe,ng,Lae,dZe,cZe,CR,fZe,mZe,gZe,sg,yae,hZe,pZe,wR,uZe,_Ze,bZe,lg,xae,vZe,FZe,AR,TZe,MZe,EZe,ig,$ae,CZe,wZe,LR,AZe,LZe,yZe,dg,kae,xZe,$Ze,yR,kZe,SZe,RZe,cg,Sae,PZe,BZe,xR,IZe,NZe,qZe,fg,Rae,jZe,DZe,$R,GZe,OZe,VZe,mg,Pae,XZe,zZe,kR,WZe,QZe,HZe,gg,Bae,UZe,JZe,SR,YZe,KZe,ZZe,hg,Iae,eeo,oeo,RR,reo,teo,aeo,pg,Nae,neo,seo,PR,leo,ieo,deo,ug,qae,ceo,feo,BR,meo,geo,heo,_g,jae,peo,ueo,IR,_eo,beo,veo,bg,Dae,Feo,Teo,NR,Meo,Eeo,Ceo,vg,Gae,weo,Aeo,qR,Leo,yeo,xeo,Fg,Oae,$eo,keo,jR,Seo,Reo,Peo,Tg,Vae,Beo,Ieo,DR,Neo,qeo,jeo,Mg,Xae,Deo,Geo,GR,Oeo,Veo,Xeo,Eg,zae,zeo,Weo,OR,Qeo,Heo,Ueo,Cg,Wae,Jeo,Yeo,VR,Keo,Zeo,eoo,wg,Qae,ooo,roo,XR,too,aoo,noo,Ag,Hae,soo,loo,zR,ioo,doo,coo,Lg,Uae,foo,moo,WR,goo,hoo,poo,yg,Jae,uoo,_oo,QR,boo,voo,Foo,xg,Yae,Too,Moo,HR,Eoo,Coo,woo,$g,Kae,Aoo,Loo,UR,yoo,xoo,$oo,kg,Zae,koo,Soo,JR,Roo,Poo,Boo,Sg,ene,Ioo,Noo,YR,qoo,joo,Doo,Rg,one,Goo,Ooo,KR,Voo,Xoo,zoo,Pg,rne,Woo,Qoo,ZR,Hoo,Uoo,Joo,Bg,tne,Yoo,Koo,eP,Zoo,ero,oro,Ig,ane,rro,tro,oP,aro,nro,sro,Ng,nne,lro,iro,rP,dro,cro,fro,qg,sne,mro,gro,tP,hro,pro,uro,jg,_ro,Dg,LL,bro,lne,vro,dGe,$i,Gg,ine,yL,Fro,dne,Tro,cGe,Ao,xL,Mro,$L,Ero,aP,Cro,wro,Aro,kL,Lro,cne,yro,xro,$ro,Ar,SL,kro,fne,Sro,Rro,$a,Pro,mne,Bro,Iro,gne,Nro,qro,hne,jro,Dro,Gro,k,Nn,pne,Oro,Vro,nP,Xro,zro,sP,Wro,Qro,Hro,qn,une,Uro,Jro,lP,Yro,Kro,iP,Zro,eto,oto,jn,_ne,rto,tto,dP,ato,nto,cP,sto,lto,ito,Og,bne,dto,cto,fP,fto,mto,gto,Dn,vne,hto,pto,mP,uto,_to,gP,bto,vto,Fto,Vg,Fne,Tto,Mto,hP,Eto,Cto,wto,Xg,Tne,Ato,Lto,pP,yto,xto,$to,zg,Mne,kto,Sto,uP,Rto,Pto,Bto,Gn,Ene,Ito,Nto,_P,qto,jto,bP,Dto,Gto,Oto,On,Cne,Vto,Xto,vP,zto,Wto,FP,Qto,Hto,Uto,Vn,wne,Jto,Yto,TP,Kto,Zto,MP,eao,oao,rao,Wg,Ane,tao,aao,EP,nao,sao,lao,Qg,Lne,iao,dao,CP,cao,fao,mao,Hg,yne,gao,hao,wP,pao,uao,_ao,Xn,xne,bao,vao,AP,Fao,Tao,LP,Mao,Eao,Cao,Ug,$ne,wao,Aao,yP,Lao,yao,xao,zn,kne,$ao,kao,xP,Sao,Rao,$P,Pao,Bao,Iao,Wn,Sne,Nao,qao,kP,jao,Dao,SP,Gao,Oao,Vao,Qn,Rne,Xao,zao,RP,Wao,Qao,PP,Hao,Uao,Jao,Jg,Pne,Yao,Kao,BP,Zao,eno,ono,Hn,Bne,rno,tno,IP,ano,nno,NP,sno,lno,ino,Un,Ine,dno,cno,qP,fno,mno,jP,gno,hno,pno,Jn,Nne,uno,_no,DP,bno,vno,GP,Fno,Tno,Mno,Yn,qne,Eno,Cno,OP,wno,Ano,VP,Lno,yno,xno,Kn,jne,$no,kno,XP,Sno,Rno,zP,Pno,Bno,Ino,Zn,Dne,Nno,qno,WP,jno,Dno,QP,Gno,Ono,Vno,Yg,Gne,Xno,zno,HP,Wno,Qno,Hno,es,One,Uno,Jno,UP,Yno,Kno,JP,Zno,eso,oso,Kg,Vne,rso,tso,YP,aso,nso,sso,os,Xne,lso,iso,KP,dso,cso,ZP,fso,mso,gso,rs,zne,hso,pso,eB,uso,_so,oB,bso,vso,Fso,ts,Wne,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,Zg,Qne,yso,xso,aB,$so,kso,Sso,as,Hne,Rso,Pso,nB,Bso,Iso,sB,Nso,qso,jso,ns,Une,Dso,Gso,lB,Oso,Vso,iB,Xso,zso,Wso,eh,Jne,Qso,Hso,dB,Uso,Jso,Yso,ss,Yne,Kso,Zso,cB,elo,olo,fB,rlo,tlo,alo,ls,Kne,nlo,slo,mB,llo,ilo,gB,dlo,clo,flo,is,Zne,mlo,glo,hB,hlo,plo,pB,ulo,_lo,blo,ds,ese,vlo,Flo,uB,Tlo,Mlo,_B,Elo,Clo,wlo,cs,ose,Alo,Llo,bB,ylo,xlo,vB,$lo,klo,Slo,fs,rse,Rlo,Plo,FB,Blo,Ilo,TB,Nlo,qlo,jlo,ms,tse,Dlo,Glo,MB,Olo,Vlo,EB,Xlo,zlo,Wlo,gs,ase,Qlo,Hlo,CB,Ulo,Jlo,wB,Ylo,Klo,Zlo,oh,nse,eio,oio,AB,rio,tio,aio,hs,sse,nio,sio,LB,lio,iio,yB,dio,cio,fio,rh,lse,mio,gio,xB,hio,pio,uio,th,ise,_io,bio,$B,vio,Fio,Tio,ps,dse,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,us,cse,xio,$io,RB,kio,Sio,PB,Rio,Pio,Bio,_s,fse,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,ah,mse,Vio,Xio,NB,zio,Wio,Qio,bs,gse,Hio,Uio,qB,Jio,Yio,jB,Kio,Zio,edo,vs,hse,odo,rdo,DB,tdo,ado,GB,ndo,sdo,ldo,Fs,pse,ido,ddo,OB,cdo,fdo,VB,mdo,gdo,hdo,Ts,use,pdo,udo,XB,_do,bdo,zB,vdo,Fdo,Tdo,Ms,_se,Mdo,Edo,WB,Cdo,wdo,QB,Ado,Ldo,ydo,nh,bse,xdo,$do,HB,kdo,Sdo,Rdo,Es,vse,Pdo,Bdo,UB,Ido,Ndo,JB,qdo,jdo,Ddo,sh,Fse,Gdo,Odo,YB,Vdo,Xdo,zdo,lh,Tse,Wdo,Qdo,KB,Hdo,Udo,Jdo,ih,Mse,Ydo,Kdo,ZB,Zdo,eco,oco,dh,Ese,rco,tco,eI,aco,nco,sco,Cs,Cse,lco,ico,oI,dco,cco,rI,fco,mco,gco,ch,wse,hco,pco,tI,uco,_co,bco,ws,Ase,vco,Fco,aI,Tco,Mco,nI,Eco,Cco,wco,As,Lse,Aco,Lco,sI,yco,xco,lI,$co,kco,Sco,Ls,yse,Rco,Pco,iI,Bco,Ico,dI,Nco,qco,jco,ys,xse,Dco,Gco,cI,Oco,Vco,fI,Xco,zco,Wco,xs,$se,Qco,Hco,mI,Uco,Jco,gI,Yco,Kco,Zco,$s,kse,efo,ofo,hI,rfo,tfo,pI,afo,nfo,sfo,fh,Sse,lfo,ifo,uI,dfo,cfo,ffo,mh,Rse,mfo,gfo,_I,hfo,pfo,ufo,ks,Pse,_fo,bfo,bI,vfo,Ffo,vI,Tfo,Mfo,Efo,Ss,Bse,Cfo,wfo,FI,Afo,Lfo,TI,yfo,xfo,$fo,Rs,Ise,kfo,Sfo,MI,Rfo,Pfo,EI,Bfo,Ifo,Nfo,gh,Nse,qfo,jfo,CI,Dfo,Gfo,Ofo,hh,qse,Vfo,Xfo,wI,zfo,Wfo,Qfo,ph,jse,Hfo,Ufo,AI,Jfo,Yfo,Kfo,Ps,Dse,Zfo,emo,LI,omo,rmo,yI,tmo,amo,nmo,Bs,Gse,smo,lmo,xI,imo,dmo,$I,cmo,fmo,mmo,uh,Ose,gmo,hmo,kI,pmo,umo,_mo,_h,Vse,bmo,vmo,SI,Fmo,Tmo,Mmo,bh,Xse,Emo,Cmo,RI,wmo,Amo,Lmo,Is,zse,ymo,xmo,PI,$mo,kmo,BI,Smo,Rmo,Pmo,vh,Wse,Bmo,Imo,II,Nmo,qmo,jmo,Fh,Qse,Dmo,Gmo,NI,Omo,Vmo,Xmo,Ns,Hse,zmo,Wmo,qI,Qmo,Hmo,jI,Umo,Jmo,Ymo,qs,Use,Kmo,Zmo,DI,ego,ogo,GI,rgo,tgo,ago,js,Jse,ngo,sgo,OI,lgo,igo,VI,dgo,cgo,fgo,Ds,Yse,mgo,ggo,XI,hgo,pgo,zI,ugo,_go,bgo,Th,vgo,Mh,RL,Fgo,Kse,Tgo,fGe,ki,Eh,Zse,PL,Mgo,ele,Ego,mGe,Lo,BL,Cgo,IL,wgo,WI,Ago,Lgo,ygo,NL,xgo,ole,$go,kgo,Sgo,He,qL,Rgo,rle,Pgo,Bgo,ka,Igo,tle,Ngo,qgo,ale,jgo,Dgo,nle,Ggo,Ogo,Vgo,Y,Ch,sle,Xgo,zgo,QI,Wgo,Qgo,Hgo,wh,lle,Ugo,Jgo,HI,Ygo,Kgo,Zgo,Ah,ile,eho,oho,UI,rho,tho,aho,Lh,dle,nho,sho,JI,lho,iho,dho,yh,cle,cho,fho,YI,mho,gho,hho,xh,fle,pho,uho,KI,_ho,bho,vho,$h,mle,Fho,Tho,ZI,Mho,Eho,Cho,kh,gle,who,Aho,eN,Lho,yho,xho,Sh,hle,$ho,kho,oN,Sho,Rho,Pho,Rh,ple,Bho,Iho,rN,Nho,qho,jho,Ph,ule,Dho,Gho,tN,Oho,Vho,Xho,Bh,_le,zho,Who,aN,Qho,Hho,Uho,Ih,ble,Jho,Yho,nN,Kho,Zho,epo,Nh,vle,opo,rpo,sN,tpo,apo,npo,qh,Fle,spo,lpo,lN,ipo,dpo,cpo,jh,Tle,fpo,mpo,iN,gpo,hpo,ppo,Dh,Mle,upo,_po,dN,bpo,vpo,Fpo,Gh,Ele,Tpo,Mpo,cN,Epo,Cpo,wpo,Oh,Cle,Apo,Lpo,fN,ypo,xpo,$po,Vh,wle,kpo,Spo,mN,Rpo,Ppo,Bpo,Xh,Ale,Ipo,Npo,gN,qpo,jpo,Dpo,zh,Lle,Gpo,Opo,hN,Vpo,Xpo,zpo,Wh,yle,Wpo,Qpo,pN,Hpo,Upo,Jpo,Qh,xle,Ypo,Kpo,uN,Zpo,euo,ouo,Hh,$le,ruo,tuo,_N,auo,nuo,suo,Uh,kle,luo,iuo,bN,duo,cuo,fuo,Jh,Sle,muo,guo,vN,huo,puo,uuo,Yh,Rle,_uo,buo,FN,vuo,Fuo,Tuo,Kh,Ple,Muo,Euo,TN,Cuo,wuo,Auo,Zh,Ble,Luo,yuo,MN,xuo,$uo,kuo,ep,Ile,Suo,Ruo,EN,Puo,Buo,Iuo,op,Nle,Nuo,quo,CN,juo,Duo,Guo,rp,Ouo,tp,Vuo,ap,jL,Xuo,qle,zuo,gGe,Si,np,jle,DL,Wuo,Dle,Quo,hGe,yo,GL,Huo,OL,Uuo,wN,Juo,Yuo,Kuo,VL,Zuo,Gle,e_o,o_o,r_o,Ue,XL,t_o,Ole,a_o,n_o,Ri,s_o,Vle,l_o,i_o,Xle,d_o,c_o,f_o,he,sp,zle,m_o,g_o,AN,h_o,p_o,u_o,lp,Wle,__o,b_o,Qle,v_o,F_o,T_o,ip,Hle,M_o,E_o,LN,C_o,w_o,A_o,dp,Ule,L_o,y_o,yN,x_o,$_o,k_o,cp,Jle,S_o,R_o,xN,P_o,B_o,I_o,fp,Yle,N_o,q_o,$N,j_o,D_o,G_o,mp,Kle,O_o,V_o,kN,X_o,z_o,W_o,gp,Zle,Q_o,H_o,SN,U_o,J_o,Y_o,hp,eie,K_o,Z_o,RN,e7o,o7o,r7o,pp,oie,t7o,a7o,PN,n7o,s7o,l7o,up,rie,i7o,d7o,BN,c7o,f7o,m7o,_p,tie,g7o,h7o,IN,p7o,u7o,_7o,bp,aie,b7o,v7o,NN,F7o,T7o,M7o,vp,nie,E7o,C7o,qN,w7o,A7o,L7o,Fp,sie,y7o,x7o,jN,$7o,k7o,S7o,Tp,lie,R7o,P7o,DN,B7o,I7o,N7o,Mp,iie,q7o,j7o,GN,D7o,G7o,O7o,Ep,V7o,Cp,X7o,wp,zL,z7o,die,W7o,pGe,Pi,Ap,cie,WL,Q7o,fie,H7o,uGe,xo,QL,U7o,Bi,J7o,ON,Y7o,K7o,VN,Z7o,e1o,o1o,HL,r1o,mie,t1o,a1o,n1o,nt,UL,s1o,gie,l1o,i1o,Ii,d1o,hie,c1o,f1o,XN,m1o,g1o,h1o,Lp,p1o,Je,JL,u1o,pie,_1o,b1o,Sa,v1o,uie,F1o,T1o,_ie,M1o,E1o,bie,C1o,w1o,A1o,x,yp,vie,L1o,y1o,zN,x1o,$1o,k1o,xp,Fie,S1o,R1o,WN,P1o,B1o,I1o,$p,Tie,N1o,q1o,QN,j1o,D1o,G1o,kp,Mie,O1o,V1o,HN,X1o,z1o,W1o,Sp,Eie,Q1o,H1o,UN,U1o,J1o,Y1o,Rp,Cie,K1o,Z1o,JN,e2o,o2o,r2o,Pp,wie,t2o,a2o,YN,n2o,s2o,l2o,Bp,Aie,i2o,d2o,KN,c2o,f2o,m2o,Ip,Lie,g2o,h2o,ZN,p2o,u2o,_2o,Np,yie,b2o,v2o,eq,F2o,T2o,M2o,qp,xie,E2o,C2o,oq,w2o,A2o,L2o,jp,$ie,y2o,x2o,rq,$2o,k2o,S2o,Dp,kie,R2o,P2o,tq,B2o,I2o,N2o,Gp,Sie,q2o,j2o,aq,D2o,G2o,O2o,Op,Rie,V2o,X2o,nq,z2o,W2o,Q2o,Vp,Pie,H2o,U2o,sq,J2o,Y2o,K2o,Xp,Bie,Z2o,ebo,lq,obo,rbo,tbo,zp,Iie,abo,nbo,iq,sbo,lbo,ibo,Wp,Nie,dbo,cbo,dq,fbo,mbo,gbo,Qp,qie,hbo,pbo,cq,ubo,_bo,bbo,Hp,jie,vbo,Fbo,fq,Tbo,Mbo,Ebo,Up,Die,Cbo,wbo,mq,Abo,Lbo,ybo,Jp,Gie,xbo,$bo,gq,kbo,Sbo,Rbo,Yp,Oie,Pbo,Bbo,hq,Ibo,Nbo,qbo,Kp,Vie,jbo,Dbo,pq,Gbo,Obo,Vbo,Zp,Xie,Xbo,zbo,uq,Wbo,Qbo,Hbo,eu,zie,Ubo,Jbo,_q,Ybo,Kbo,Zbo,ou,Wie,evo,ovo,bq,rvo,tvo,avo,ru,Qie,nvo,svo,vq,lvo,ivo,dvo,tu,Hie,cvo,fvo,Fq,mvo,gvo,hvo,au,Uie,pvo,uvo,Tq,_vo,bvo,vvo,nu,Jie,Fvo,Tvo,Mq,Mvo,Evo,Cvo,su,Yie,wvo,Avo,Eq,Lvo,yvo,xvo,Gs,Kie,$vo,kvo,Cq,Svo,Rvo,wq,Pvo,Bvo,Ivo,lu,Zie,Nvo,qvo,Aq,jvo,Dvo,Gvo,iu,ede,Ovo,Vvo,Lq,Xvo,zvo,Wvo,du,ode,Qvo,Hvo,yq,Uvo,Jvo,Yvo,cu,rde,Kvo,Zvo,xq,e0o,o0o,r0o,fu,tde,t0o,a0o,$q,n0o,s0o,l0o,mu,ade,i0o,d0o,kq,c0o,f0o,m0o,gu,nde,g0o,h0o,Sq,p0o,u0o,_0o,hu,sde,b0o,v0o,Rq,F0o,T0o,M0o,pu,lde,E0o,C0o,Pq,w0o,A0o,L0o,uu,ide,y0o,x0o,Bq,$0o,k0o,S0o,_u,dde,R0o,P0o,Iq,B0o,I0o,N0o,bu,cde,q0o,j0o,Nq,D0o,G0o,O0o,vu,fde,V0o,X0o,qq,z0o,W0o,Q0o,Fu,mde,H0o,U0o,jq,J0o,Y0o,K0o,Tu,gde,Z0o,eFo,Dq,oFo,rFo,tFo,Mu,hde,aFo,nFo,Gq,sFo,lFo,iFo,Eu,pde,dFo,cFo,Oq,fFo,mFo,gFo,Cu,ude,hFo,pFo,Vq,uFo,_Fo,bFo,wu,_de,vFo,FFo,Xq,TFo,MFo,EFo,Au,bde,CFo,wFo,zq,AFo,LFo,yFo,Lu,vde,xFo,$Fo,Wq,kFo,SFo,RFo,yu,Fde,PFo,BFo,Qq,IFo,NFo,qFo,xu,Tde,jFo,DFo,Hq,GFo,OFo,VFo,$u,Mde,XFo,zFo,Uq,WFo,QFo,HFo,ku,Ede,UFo,JFo,Jq,YFo,KFo,ZFo,Su,Cde,eTo,oTo,Yq,rTo,tTo,aTo,Ru,wde,nTo,sTo,Kq,lTo,iTo,dTo,Pu,Ade,cTo,fTo,Zq,mTo,gTo,hTo,Bu,Lde,pTo,uTo,ej,_To,bTo,vTo,Iu,yde,FTo,TTo,oj,MTo,ETo,CTo,Nu,xde,wTo,ATo,rj,LTo,yTo,xTo,qu,$de,$To,kTo,tj,STo,RTo,PTo,ju,kde,BTo,ITo,aj,NTo,qTo,jTo,Du,Sde,DTo,GTo,nj,OTo,VTo,XTo,Gu,Rde,zTo,WTo,sj,QTo,HTo,UTo,Ou,Pde,JTo,YTo,lj,KTo,ZTo,eMo,Vu,Bde,oMo,rMo,ij,tMo,aMo,nMo,Xu,Ide,sMo,lMo,dj,iMo,dMo,cMo,zu,Nde,fMo,mMo,cj,gMo,hMo,pMo,Wu,qde,uMo,_Mo,fj,bMo,vMo,FMo,Qu,jde,TMo,MMo,mj,EMo,CMo,wMo,Hu,Dde,AMo,LMo,gj,yMo,xMo,$Mo,Uu,Gde,kMo,SMo,hj,RMo,PMo,BMo,Ju,Ode,IMo,NMo,pj,qMo,jMo,DMo,Yu,Vde,GMo,OMo,uj,VMo,XMo,zMo,Ku,Xde,WMo,QMo,_j,HMo,UMo,JMo,Zu,zde,YMo,KMo,bj,ZMo,e4o,o4o,e_,Wde,r4o,t4o,vj,a4o,n4o,s4o,o_,Qde,l4o,i4o,Fj,d4o,c4o,f4o,r_,Hde,m4o,g4o,Tj,h4o,p4o,u4o,t_,Ude,_4o,b4o,Mj,v4o,F4o,T4o,a_,Jde,M4o,E4o,Ej,C4o,w4o,A4o,n_,Yde,L4o,y4o,Cj,x4o,$4o,k4o,s_,Kde,S4o,R4o,wj,P4o,B4o,I4o,l_,Zde,N4o,q4o,Aj,j4o,D4o,G4o,i_,ece,O4o,V4o,Lj,X4o,z4o,W4o,d_,oce,Q4o,H4o,yj,U4o,J4o,Y4o,c_,rce,K4o,Z4o,xj,eEo,oEo,rEo,f_,tce,tEo,aEo,$j,nEo,sEo,lEo,m_,ace,iEo,dEo,kj,cEo,fEo,mEo,g_,nce,gEo,hEo,Sj,pEo,uEo,_Eo,h_,sce,bEo,vEo,Rj,FEo,TEo,MEo,p_,lce,EEo,CEo,Pj,wEo,AEo,LEo,u_,ice,yEo,xEo,Bj,$Eo,kEo,SEo,__,dce,REo,PEo,Ij,BEo,IEo,NEo,b_,cce,qEo,jEo,Nj,DEo,GEo,OEo,v_,fce,VEo,XEo,qj,zEo,WEo,QEo,F_,mce,HEo,UEo,jj,JEo,YEo,KEo,T_,gce,ZEo,eCo,Dj,oCo,rCo,tCo,M_,hce,aCo,nCo,Gj,sCo,lCo,iCo,E_,pce,dCo,cCo,Oj,fCo,mCo,gCo,C_,uce,hCo,pCo,Vj,uCo,_Co,bCo,w_,vCo,_ce,FCo,TCo,bce,MCo,ECo,A_,_Ge,Ni,L_,vce,YL,CCo,Fce,wCo,bGe,$o,KL,ACo,qi,LCo,Xj,yCo,xCo,zj,$Co,kCo,SCo,ZL,RCo,Tce,PCo,BCo,ICo,st,ey,NCo,Mce,qCo,jCo,ji,DCo,Ece,GCo,OCo,Wj,VCo,XCo,zCo,y_,WCo,Ye,oy,QCo,Cce,HCo,UCo,Ra,JCo,wce,YCo,KCo,Ace,ZCo,e5o,Lce,o5o,r5o,t5o,G,x_,yce,a5o,n5o,Qj,s5o,l5o,i5o,$_,xce,d5o,c5o,Hj,f5o,m5o,g5o,k_,$ce,h5o,p5o,Uj,u5o,_5o,b5o,S_,kce,v5o,F5o,Jj,T5o,M5o,E5o,R_,Sce,C5o,w5o,Yj,A5o,L5o,y5o,P_,Rce,x5o,$5o,Kj,k5o,S5o,R5o,B_,Pce,P5o,B5o,Zj,I5o,N5o,q5o,I_,Bce,j5o,D5o,eD,G5o,O5o,V5o,N_,Ice,X5o,z5o,oD,W5o,Q5o,H5o,q_,Nce,U5o,J5o,rD,Y5o,K5o,Z5o,j_,qce,e3o,o3o,tD,r3o,t3o,a3o,D_,jce,n3o,s3o,aD,l3o,i3o,d3o,G_,Dce,c3o,f3o,nD,m3o,g3o,h3o,O_,Gce,p3o,u3o,sD,_3o,b3o,v3o,V_,Oce,F3o,T3o,lD,M3o,E3o,C3o,X_,Vce,w3o,A3o,iD,L3o,y3o,x3o,z_,Xce,$3o,k3o,dD,S3o,R3o,P3o,W_,zce,B3o,I3o,cD,N3o,q3o,j3o,Q_,Wce,D3o,G3o,fD,O3o,V3o,X3o,H_,Qce,z3o,W3o,mD,Q3o,H3o,U3o,U_,Hce,J3o,Y3o,gD,K3o,Z3o,ewo,J_,Uce,owo,rwo,hD,two,awo,nwo,Y_,Jce,swo,lwo,pD,iwo,dwo,cwo,K_,Yce,fwo,mwo,uD,gwo,hwo,pwo,Z_,Kce,uwo,_wo,_D,bwo,vwo,Fwo,e7,Zce,Two,Mwo,bD,Ewo,Cwo,wwo,o7,efe,Awo,Lwo,vD,ywo,xwo,$wo,r7,ofe,kwo,Swo,FD,Rwo,Pwo,Bwo,t7,rfe,Iwo,Nwo,TD,qwo,jwo,Dwo,a7,tfe,Gwo,Owo,MD,Vwo,Xwo,zwo,n7,afe,Wwo,Qwo,ED,Hwo,Uwo,Jwo,s7,nfe,Ywo,Kwo,CD,Zwo,eAo,oAo,l7,sfe,rAo,tAo,wD,aAo,nAo,sAo,i7,lfe,lAo,iAo,AD,dAo,cAo,fAo,d7,ife,mAo,gAo,LD,hAo,pAo,uAo,c7,dfe,_Ao,bAo,yD,vAo,FAo,TAo,f7,cfe,MAo,EAo,xD,CAo,wAo,AAo,m7,ffe,LAo,yAo,$D,xAo,$Ao,kAo,g7,mfe,SAo,RAo,kD,PAo,BAo,IAo,h7,gfe,NAo,qAo,SD,jAo,DAo,GAo,p7,hfe,OAo,VAo,RD,XAo,zAo,WAo,u7,pfe,QAo,HAo,PD,UAo,JAo,YAo,_7,ufe,KAo,ZAo,BD,e6o,o6o,r6o,b7,t6o,_fe,a6o,n6o,bfe,s6o,l6o,v7,vGe,Di,F7,vfe,ry,i6o,Ffe,d6o,FGe,ko,ty,c6o,Gi,f6o,ID,m6o,g6o,ND,h6o,p6o,u6o,ay,_6o,Tfe,b6o,v6o,F6o,lt,ny,T6o,Mfe,M6o,E6o,Oi,C6o,Efe,w6o,A6o,qD,L6o,y6o,x6o,T7,$6o,Ke,sy,k6o,Cfe,S6o,R6o,Pa,P6o,wfe,B6o,I6o,Afe,N6o,q6o,Lfe,j6o,D6o,G6o,z,M7,yfe,O6o,V6o,jD,X6o,z6o,W6o,E7,xfe,Q6o,H6o,DD,U6o,J6o,Y6o,C7,$fe,K6o,Z6o,GD,eLo,oLo,rLo,w7,kfe,tLo,aLo,OD,nLo,sLo,lLo,A7,Sfe,iLo,dLo,VD,cLo,fLo,mLo,L7,Rfe,gLo,hLo,XD,pLo,uLo,_Lo,y7,Pfe,bLo,vLo,zD,FLo,TLo,MLo,x7,Bfe,ELo,CLo,WD,wLo,ALo,LLo,$7,Ife,yLo,xLo,QD,$Lo,kLo,SLo,k7,Nfe,RLo,PLo,HD,BLo,ILo,NLo,S7,qfe,qLo,jLo,UD,DLo,GLo,OLo,R7,jfe,VLo,XLo,JD,zLo,WLo,QLo,P7,Dfe,HLo,ULo,YD,JLo,YLo,KLo,B7,Gfe,ZLo,eyo,KD,oyo,ryo,tyo,I7,Ofe,ayo,nyo,ZD,syo,lyo,iyo,N7,Vfe,dyo,cyo,eG,fyo,myo,gyo,q7,Xfe,hyo,pyo,oG,uyo,_yo,byo,j7,zfe,vyo,Fyo,rG,Tyo,Myo,Eyo,D7,Wfe,Cyo,wyo,tG,Ayo,Lyo,yyo,G7,Qfe,xyo,$yo,aG,kyo,Syo,Ryo,O7,Hfe,Pyo,Byo,nG,Iyo,Nyo,qyo,V7,Ufe,jyo,Dyo,sG,Gyo,Oyo,Vyo,X7,Jfe,Xyo,zyo,lG,Wyo,Qyo,Hyo,z7,Yfe,Uyo,Jyo,iG,Yyo,Kyo,Zyo,W7,Kfe,e8o,o8o,dG,r8o,t8o,a8o,Q7,Zfe,n8o,s8o,cG,l8o,i8o,d8o,H7,eme,c8o,f8o,fG,m8o,g8o,h8o,U7,ome,p8o,u8o,mG,_8o,b8o,v8o,J7,rme,F8o,T8o,gG,M8o,E8o,C8o,Y7,tme,w8o,A8o,hG,L8o,y8o,x8o,K7,ame,$8o,k8o,pG,S8o,R8o,P8o,Z7,nme,B8o,I8o,uG,N8o,q8o,j8o,e1,sme,D8o,G8o,_G,O8o,V8o,X8o,o1,lme,z8o,W8o,bG,Q8o,H8o,U8o,r1,ime,J8o,Y8o,vG,K8o,Z8o,e9o,t1,dme,o9o,r9o,FG,t9o,a9o,n9o,a1,cme,s9o,l9o,TG,i9o,d9o,c9o,n1,fme,f9o,m9o,MG,g9o,h9o,p9o,s1,u9o,mme,_9o,b9o,gme,v9o,F9o,l1,TGe,Vi,i1,hme,ly,T9o,pme,M9o,MGe,So,iy,E9o,Xi,C9o,EG,w9o,A9o,CG,L9o,y9o,x9o,dy,$9o,ume,k9o,S9o,R9o,it,cy,P9o,_me,B9o,I9o,zi,N9o,bme,q9o,j9o,wG,D9o,G9o,O9o,d1,V9o,Ze,fy,X9o,vme,z9o,W9o,Ba,Q9o,Fme,H9o,U9o,Tme,J9o,Y9o,Mme,K9o,Z9o,exo,Q,c1,Eme,oxo,rxo,AG,txo,axo,nxo,f1,Cme,sxo,lxo,LG,ixo,dxo,cxo,m1,wme,fxo,mxo,yG,gxo,hxo,pxo,g1,Ame,uxo,_xo,xG,bxo,vxo,Fxo,h1,Lme,Txo,Mxo,$G,Exo,Cxo,wxo,p1,yme,Axo,Lxo,kG,yxo,xxo,$xo,u1,xme,kxo,Sxo,SG,Rxo,Pxo,Bxo,_1,$me,Ixo,Nxo,RG,qxo,jxo,Dxo,b1,kme,Gxo,Oxo,PG,Vxo,Xxo,zxo,v1,Sme,Wxo,Qxo,BG,Hxo,Uxo,Jxo,F1,Rme,Yxo,Kxo,IG,Zxo,e$o,o$o,T1,Pme,r$o,t$o,NG,a$o,n$o,s$o,M1,Bme,l$o,i$o,qG,d$o,c$o,f$o,E1,Ime,m$o,g$o,jG,h$o,p$o,u$o,C1,Nme,_$o,b$o,DG,v$o,F$o,T$o,w1,qme,M$o,E$o,GG,C$o,w$o,A$o,A1,jme,L$o,y$o,OG,x$o,$$o,k$o,L1,Dme,S$o,R$o,VG,P$o,B$o,I$o,y1,Gme,N$o,q$o,XG,j$o,D$o,G$o,x1,Ome,O$o,V$o,zG,X$o,z$o,W$o,$1,Vme,Q$o,H$o,WG,U$o,J$o,Y$o,k1,Xme,K$o,Z$o,QG,eko,oko,rko,S1,zme,tko,ako,HG,nko,sko,lko,R1,Wme,iko,dko,UG,cko,fko,mko,P1,Qme,gko,hko,JG,pko,uko,_ko,B1,Hme,bko,vko,YG,Fko,Tko,Mko,I1,Ume,Eko,Cko,KG,wko,Ako,Lko,N1,Jme,yko,xko,ZG,$ko,kko,Sko,q1,Yme,Rko,Pko,eO,Bko,Iko,Nko,j1,Kme,qko,jko,oO,Dko,Gko,Oko,D1,Zme,Vko,Xko,rO,zko,Wko,Qko,G1,ege,Hko,Uko,oge,Jko,Yko,Kko,O1,rge,Zko,eSo,tO,oSo,rSo,tSo,V1,tge,aSo,nSo,aO,sSo,lSo,iSo,X1,age,dSo,cSo,nO,fSo,mSo,gSo,z1,nge,hSo,pSo,sO,uSo,_So,bSo,W1,vSo,sge,FSo,TSo,lge,MSo,ESo,Q1,EGe,Wi,H1,ige,my,CSo,dge,wSo,CGe,Ro,gy,ASo,Qi,LSo,lO,ySo,xSo,iO,$So,kSo,SSo,hy,RSo,cge,PSo,BSo,ISo,dt,py,NSo,fge,qSo,jSo,Hi,DSo,mge,GSo,OSo,dO,VSo,XSo,zSo,U1,WSo,eo,uy,QSo,gge,HSo,USo,Ia,JSo,hge,YSo,KSo,pge,ZSo,eRo,uge,oRo,rRo,tRo,pe,J1,_ge,aRo,nRo,cO,sRo,lRo,iRo,Y1,bge,dRo,cRo,fO,fRo,mRo,gRo,K1,vge,hRo,pRo,mO,uRo,_Ro,bRo,Z1,Fge,vRo,FRo,gO,TRo,MRo,ERo,e2,Tge,CRo,wRo,hO,ARo,LRo,yRo,o2,Mge,xRo,$Ro,pO,kRo,SRo,RRo,r2,Ege,PRo,BRo,uO,IRo,NRo,qRo,t2,Cge,jRo,DRo,_O,GRo,ORo,VRo,a2,wge,XRo,zRo,bO,WRo,QRo,HRo,n2,Age,URo,JRo,vO,YRo,KRo,ZRo,s2,Lge,ePo,oPo,FO,rPo,tPo,aPo,l2,yge,nPo,sPo,TO,lPo,iPo,dPo,i2,xge,cPo,fPo,MO,mPo,gPo,hPo,d2,$ge,pPo,uPo,EO,_Po,bPo,vPo,c2,kge,FPo,TPo,CO,MPo,EPo,CPo,f2,Sge,wPo,APo,wO,LPo,yPo,xPo,m2,Rge,$Po,kPo,AO,SPo,RPo,PPo,g2,BPo,Pge,IPo,NPo,Bge,qPo,jPo,h2,wGe,Ui,p2,Ige,_y,DPo,Nge,GPo,AGe,Po,by,OPo,Ji,VPo,LO,XPo,zPo,yO,WPo,QPo,HPo,vy,UPo,qge,JPo,YPo,KPo,ct,Fy,ZPo,jge,eBo,oBo,Yi,rBo,Dge,tBo,aBo,xO,nBo,sBo,lBo,u2,iBo,oo,Ty,dBo,Gge,cBo,fBo,Na,mBo,Oge,gBo,hBo,Vge,pBo,uBo,Xge,_Bo,bBo,vBo,N,_2,zge,FBo,TBo,$O,MBo,EBo,CBo,b2,Wge,wBo,ABo,kO,LBo,yBo,xBo,v2,Qge,$Bo,kBo,SO,SBo,RBo,PBo,F2,Hge,BBo,IBo,RO,NBo,qBo,jBo,T2,Uge,DBo,GBo,PO,OBo,VBo,XBo,M2,Jge,zBo,WBo,BO,QBo,HBo,UBo,E2,Yge,JBo,YBo,IO,KBo,ZBo,eIo,C2,Kge,oIo,rIo,NO,tIo,aIo,nIo,w2,Zge,sIo,lIo,qO,iIo,dIo,cIo,A2,ehe,fIo,mIo,jO,gIo,hIo,pIo,L2,ohe,uIo,_Io,DO,bIo,vIo,FIo,y2,rhe,TIo,MIo,GO,EIo,CIo,wIo,x2,the,AIo,LIo,OO,yIo,xIo,$Io,$2,ahe,kIo,SIo,VO,RIo,PIo,BIo,k2,nhe,IIo,NIo,XO,qIo,jIo,DIo,S2,she,GIo,OIo,zO,VIo,XIo,zIo,R2,lhe,WIo,QIo,WO,HIo,UIo,JIo,P2,ihe,YIo,KIo,QO,ZIo,eNo,oNo,B2,dhe,rNo,tNo,HO,aNo,nNo,sNo,I2,che,lNo,iNo,UO,dNo,cNo,fNo,N2,fhe,mNo,gNo,JO,hNo,pNo,uNo,q2,mhe,_No,bNo,YO,vNo,FNo,TNo,j2,ghe,MNo,ENo,KO,CNo,wNo,ANo,D2,hhe,LNo,yNo,ZO,xNo,$No,kNo,G2,phe,SNo,RNo,eV,PNo,BNo,INo,O2,uhe,NNo,qNo,oV,jNo,DNo,GNo,V2,_he,ONo,VNo,rV,XNo,zNo,WNo,X2,bhe,QNo,HNo,tV,UNo,JNo,YNo,z2,vhe,KNo,ZNo,aV,eqo,oqo,rqo,W2,Fhe,tqo,aqo,nV,nqo,sqo,lqo,Q2,The,iqo,dqo,sV,cqo,fqo,mqo,H2,Mhe,gqo,hqo,lV,pqo,uqo,_qo,U2,Ehe,bqo,vqo,iV,Fqo,Tqo,Mqo,J2,Che,Eqo,Cqo,dV,wqo,Aqo,Lqo,Y2,whe,yqo,xqo,cV,$qo,kqo,Sqo,K2,Ahe,Rqo,Pqo,fV,Bqo,Iqo,Nqo,Z2,Lhe,qqo,jqo,mV,Dqo,Gqo,Oqo,eb,yhe,Vqo,Xqo,gV,zqo,Wqo,Qqo,ob,xhe,Hqo,Uqo,hV,Jqo,Yqo,Kqo,rb,$he,Zqo,ejo,pV,ojo,rjo,tjo,tb,khe,ajo,njo,uV,sjo,ljo,ijo,ab,She,djo,cjo,_V,fjo,mjo,gjo,nb,Rhe,hjo,pjo,bV,ujo,_jo,bjo,sb,Phe,vjo,Fjo,vV,Tjo,Mjo,Ejo,lb,Bhe,Cjo,wjo,FV,Ajo,Ljo,yjo,ib,Ihe,xjo,$jo,TV,kjo,Sjo,Rjo,db,Nhe,Pjo,Bjo,MV,Ijo,Njo,qjo,cb,qhe,jjo,Djo,EV,Gjo,Ojo,Vjo,fb,Xjo,jhe,zjo,Wjo,Dhe,Qjo,Hjo,mb,LGe,Ki,gb,Ghe,My,Ujo,Ohe,Jjo,yGe,Bo,Ey,Yjo,Zi,Kjo,CV,Zjo,eDo,wV,oDo,rDo,tDo,Cy,aDo,Vhe,nDo,sDo,lDo,ft,wy,iDo,Xhe,dDo,cDo,ed,fDo,zhe,mDo,gDo,AV,hDo,pDo,uDo,hb,_Do,ro,Ay,bDo,Whe,vDo,FDo,qa,TDo,Qhe,MDo,EDo,Hhe,CDo,wDo,Uhe,ADo,LDo,yDo,Z,pb,Jhe,xDo,$Do,LV,kDo,SDo,RDo,ub,Yhe,PDo,BDo,yV,IDo,NDo,qDo,_b,Khe,jDo,DDo,xV,GDo,ODo,VDo,bb,Zhe,XDo,zDo,$V,WDo,QDo,HDo,vb,epe,UDo,JDo,kV,YDo,KDo,ZDo,Fb,ope,eGo,oGo,SV,rGo,tGo,aGo,Tb,rpe,nGo,sGo,RV,lGo,iGo,dGo,Mb,tpe,cGo,fGo,PV,mGo,gGo,hGo,Eb,ape,pGo,uGo,BV,_Go,bGo,vGo,Cb,npe,FGo,TGo,IV,MGo,EGo,CGo,wb,spe,wGo,AGo,NV,LGo,yGo,xGo,Ab,lpe,$Go,kGo,qV,SGo,RGo,PGo,Lb,ipe,BGo,IGo,jV,NGo,qGo,jGo,yb,dpe,DGo,GGo,DV,OGo,VGo,XGo,xb,cpe,zGo,WGo,GV,QGo,HGo,UGo,$b,fpe,JGo,YGo,OV,KGo,ZGo,eOo,kb,mpe,oOo,rOo,VV,tOo,aOo,nOo,Sb,gpe,sOo,lOo,XV,iOo,dOo,cOo,Rb,hpe,fOo,mOo,zV,gOo,hOo,pOo,Pb,ppe,uOo,_Oo,WV,bOo,vOo,FOo,Bb,upe,TOo,MOo,QV,EOo,COo,wOo,Ib,_pe,AOo,LOo,HV,yOo,xOo,$Oo,Nb,bpe,kOo,SOo,UV,ROo,POo,BOo,qb,vpe,IOo,NOo,JV,qOo,jOo,DOo,jb,Fpe,GOo,OOo,YV,VOo,XOo,zOo,Db,Tpe,WOo,QOo,KV,HOo,UOo,JOo,Gb,Mpe,YOo,KOo,ZV,ZOo,eVo,oVo,Ob,Epe,rVo,tVo,eX,aVo,nVo,sVo,Vb,Cpe,lVo,iVo,oX,dVo,cVo,fVo,Xb,mVo,wpe,gVo,hVo,Ape,pVo,uVo,zb,xGe,od,Wb,Lpe,Ly,_Vo,ype,bVo,$Ge,Io,yy,vVo,rd,FVo,rX,TVo,MVo,tX,EVo,CVo,wVo,xy,AVo,xpe,LVo,yVo,xVo,mt,$y,$Vo,$pe,kVo,SVo,td,RVo,kpe,PVo,BVo,aX,IVo,NVo,qVo,Qb,jVo,to,ky,DVo,Spe,GVo,OVo,ja,VVo,Rpe,XVo,zVo,Ppe,WVo,QVo,Bpe,HVo,UVo,JVo,Zr,Hb,Ipe,YVo,KVo,nX,ZVo,eXo,oXo,Ub,Npe,rXo,tXo,sX,aXo,nXo,sXo,Jb,qpe,lXo,iXo,lX,dXo,cXo,fXo,Yb,jpe,mXo,gXo,iX,hXo,pXo,uXo,Kb,Dpe,_Xo,bXo,dX,vXo,FXo,TXo,Zb,MXo,Gpe,EXo,CXo,Ope,wXo,AXo,ev,kGe,ad,ov,Vpe,Sy,LXo,Xpe,yXo,SGe,No,Ry,xXo,nd,$Xo,cX,kXo,SXo,fX,RXo,PXo,BXo,Py,IXo,zpe,NXo,qXo,jXo,gt,By,DXo,Wpe,GXo,OXo,sd,VXo,Qpe,XXo,zXo,mX,WXo,QXo,HXo,rv,UXo,ao,Iy,JXo,Hpe,YXo,KXo,Da,ZXo,Upe,ezo,ozo,Jpe,rzo,tzo,Ype,azo,nzo,szo,H,tv,Kpe,lzo,izo,gX,dzo,czo,fzo,av,Zpe,mzo,gzo,hX,hzo,pzo,uzo,nv,eue,_zo,bzo,pX,vzo,Fzo,Tzo,sv,oue,Mzo,Ezo,uX,Czo,wzo,Azo,lv,rue,Lzo,yzo,_X,xzo,$zo,kzo,iv,tue,Szo,Rzo,bX,Pzo,Bzo,Izo,dv,aue,Nzo,qzo,vX,jzo,Dzo,Gzo,cv,nue,Ozo,Vzo,FX,Xzo,zzo,Wzo,fv,sue,Qzo,Hzo,TX,Uzo,Jzo,Yzo,mv,lue,Kzo,Zzo,MX,eWo,oWo,rWo,gv,iue,tWo,aWo,EX,nWo,sWo,lWo,hv,due,iWo,dWo,CX,cWo,fWo,mWo,pv,cue,gWo,hWo,wX,pWo,uWo,_Wo,uv,fue,bWo,vWo,AX,FWo,TWo,MWo,_v,mue,EWo,CWo,LX,wWo,AWo,LWo,bv,gue,yWo,xWo,yX,$Wo,kWo,SWo,vv,hue,RWo,PWo,xX,BWo,IWo,NWo,Fv,pue,qWo,jWo,$X,DWo,GWo,OWo,Tv,uue,VWo,XWo,kX,zWo,WWo,QWo,Mv,_ue,HWo,UWo,SX,JWo,YWo,KWo,Ev,bue,ZWo,eQo,RX,oQo,rQo,tQo,Cv,vue,aQo,nQo,PX,sQo,lQo,iQo,wv,Fue,dQo,cQo,BX,fQo,mQo,gQo,Av,Tue,hQo,pQo,IX,uQo,_Qo,bQo,Lv,Mue,vQo,FQo,NX,TQo,MQo,EQo,yv,Eue,CQo,wQo,qX,AQo,LQo,yQo,xv,Cue,xQo,$Qo,jX,kQo,SQo,RQo,$v,wue,PQo,BQo,DX,IQo,NQo,qQo,kv,Aue,jQo,DQo,GX,GQo,OQo,VQo,Sv,Lue,XQo,zQo,OX,WQo,QQo,HQo,Rv,yue,UQo,JQo,VX,YQo,KQo,ZQo,Pv,xue,eHo,oHo,XX,rHo,tHo,aHo,Bv,$ue,nHo,sHo,zX,lHo,iHo,dHo,Iv,kue,cHo,fHo,WX,mHo,gHo,hHo,Nv,Sue,pHo,uHo,QX,_Ho,bHo,vHo,qv,FHo,Rue,THo,MHo,Pue,EHo,CHo,jv,RGe,ld,Dv,Bue,Ny,wHo,Iue,AHo,PGe,qo,qy,LHo,id,yHo,HX,xHo,$Ho,UX,kHo,SHo,RHo,jy,PHo,Nue,BHo,IHo,NHo,ht,Dy,qHo,que,jHo,DHo,dd,GHo,jue,OHo,VHo,JX,XHo,zHo,WHo,Gv,QHo,no,Gy,HHo,Due,UHo,JHo,Ga,YHo,Gue,KHo,ZHo,Oue,eUo,oUo,Vue,rUo,tUo,aUo,V,Ov,Xue,nUo,sUo,YX,lUo,iUo,dUo,Vv,zue,cUo,fUo,KX,mUo,gUo,hUo,Xv,Wue,pUo,uUo,ZX,_Uo,bUo,vUo,zv,Que,FUo,TUo,ez,MUo,EUo,CUo,Wv,Hue,wUo,AUo,oz,LUo,yUo,xUo,Qv,Uue,$Uo,kUo,rz,SUo,RUo,PUo,Hv,Jue,BUo,IUo,tz,NUo,qUo,jUo,Uv,Yue,DUo,GUo,az,OUo,VUo,XUo,Jv,Kue,zUo,WUo,nz,QUo,HUo,UUo,Yv,Zue,JUo,YUo,sz,KUo,ZUo,eJo,Kv,e_e,oJo,rJo,lz,tJo,aJo,nJo,Zv,o_e,sJo,lJo,iz,iJo,dJo,cJo,e0,r_e,fJo,mJo,dz,gJo,hJo,pJo,o0,t_e,uJo,_Jo,cz,bJo,vJo,FJo,r0,a_e,TJo,MJo,fz,EJo,CJo,wJo,t0,n_e,AJo,LJo,mz,yJo,xJo,$Jo,a0,s_e,kJo,SJo,gz,RJo,PJo,BJo,n0,l_e,IJo,NJo,hz,qJo,jJo,DJo,s0,i_e,GJo,OJo,pz,VJo,XJo,zJo,l0,d_e,WJo,QJo,uz,HJo,UJo,JJo,i0,c_e,YJo,KJo,_z,ZJo,eYo,oYo,d0,f_e,rYo,tYo,bz,aYo,nYo,sYo,c0,m_e,lYo,iYo,vz,dYo,cYo,fYo,f0,g_e,mYo,gYo,Fz,hYo,pYo,uYo,m0,h_e,_Yo,bYo,Tz,vYo,FYo,TYo,g0,p_e,MYo,EYo,Mz,CYo,wYo,AYo,h0,u_e,LYo,yYo,Ez,xYo,$Yo,kYo,p0,__e,SYo,RYo,Cz,PYo,BYo,IYo,u0,b_e,NYo,qYo,wz,jYo,DYo,GYo,_0,v_e,OYo,VYo,Az,XYo,zYo,WYo,b0,F_e,QYo,HYo,Lz,UYo,JYo,YYo,v0,T_e,KYo,ZYo,yz,eKo,oKo,rKo,F0,M_e,tKo,aKo,xz,nKo,sKo,lKo,T0,E_e,iKo,dKo,$z,cKo,fKo,mKo,M0,C_e,gKo,hKo,kz,pKo,uKo,_Ko,E0,w_e,bKo,vKo,Sz,FKo,TKo,MKo,C0,A_e,EKo,CKo,Rz,wKo,AKo,LKo,w0,L_e,yKo,xKo,Pz,$Ko,kKo,SKo,A0,y_e,RKo,PKo,Bz,BKo,IKo,NKo,L0,x_e,qKo,jKo,Iz,DKo,GKo,OKo,y0,VKo,$_e,XKo,zKo,k_e,WKo,QKo,x0,BGe,cd,$0,S_e,Oy,HKo,R_e,UKo,IGe,jo,Vy,JKo,fd,YKo,Nz,KKo,ZKo,qz,eZo,oZo,rZo,Xy,tZo,P_e,aZo,nZo,sZo,pt,zy,lZo,B_e,iZo,dZo,md,cZo,I_e,fZo,mZo,jz,gZo,hZo,pZo,k0,uZo,so,Wy,_Zo,N_e,bZo,vZo,Oa,FZo,q_e,TZo,MZo,j_e,EZo,CZo,D_e,wZo,AZo,LZo,G_e,S0,O_e,yZo,xZo,Dz,$Zo,kZo,SZo,R0,RZo,V_e,PZo,BZo,X_e,IZo,NZo,P0,NGe,gd,B0,z_e,Qy,qZo,W_e,jZo,qGe,Do,Hy,DZo,hd,GZo,Gz,OZo,VZo,Oz,XZo,zZo,WZo,Uy,QZo,Q_e,HZo,UZo,JZo,ut,Jy,YZo,H_e,KZo,ZZo,pd,eer,U_e,oer,rer,Vz,ter,aer,ner,I0,ser,lo,Yy,ler,J_e,ier,der,Va,cer,Y_e,fer,mer,K_e,ger,her,Z_e,per,uer,_er,Fe,N0,e7e,ber,ver,Xz,Fer,Ter,Mer,q0,o7e,Eer,Cer,zz,wer,Aer,Ler,j0,r7e,yer,xer,Wz,$er,ker,Ser,D0,t7e,Rer,Per,Qz,Ber,Ier,Ner,Os,a7e,qer,jer,Hz,Der,Ger,Uz,Oer,Ver,Xer,G0,n7e,zer,Wer,Jz,Qer,Her,Uer,Vs,s7e,Jer,Yer,Yz,Ker,Zer,Kz,eor,oor,ror,_t,l7e,tor,aor,Zz,nor,sor,eW,lor,ior,oW,dor,cor,mor,O0,i7e,gor,hor,rW,por,uor,_or,V0,d7e,bor,vor,tW,For,Tor,Mor,X0,c7e,Eor,Cor,aW,wor,Aor,Lor,z0,f7e,yor,xor,nW,$or,kor,Sor,W0,m7e,Ror,Por,sW,Bor,Ior,Nor,Q0,g7e,qor,jor,lW,Dor,Gor,Oor,H0,h7e,Vor,Xor,iW,zor,Wor,Qor,U0,Hor,p7e,Uor,Jor,u7e,Yor,Kor,J0,jGe,ud,Y0,_7e,Ky,Zor,b7e,err,DGe,Go,Zy,orr,_d,rrr,dW,trr,arr,cW,nrr,srr,lrr,e8,irr,v7e,drr,crr,frr,bt,o8,mrr,F7e,grr,hrr,bd,prr,T7e,urr,_rr,fW,brr,vrr,Frr,K0,Trr,io,r8,Mrr,M7e,Err,Crr,Xa,wrr,E7e,Arr,Lrr,C7e,yrr,xrr,w7e,$rr,krr,Srr,A7e,Z0,L7e,Rrr,Prr,mW,Brr,Irr,Nrr,eF,qrr,y7e,jrr,Drr,x7e,Grr,Orr,oF,GGe,vd,rF,$7e,t8,Vrr,k7e,Xrr,OGe,Oo,a8,zrr,Fd,Wrr,gW,Qrr,Hrr,hW,Urr,Jrr,Yrr,n8,Krr,S7e,Zrr,etr,otr,vt,s8,rtr,R7e,ttr,atr,Td,ntr,P7e,str,ltr,pW,itr,dtr,ctr,tF,ftr,co,l8,mtr,B7e,gtr,htr,za,ptr,I7e,utr,_tr,N7e,btr,vtr,q7e,Ftr,Ttr,Mtr,j7e,aF,D7e,Etr,Ctr,uW,wtr,Atr,Ltr,nF,ytr,G7e,xtr,$tr,O7e,ktr,Str,sF,VGe,Md,lF,V7e,i8,Rtr,X7e,Ptr,XGe,Vo,d8,Btr,Ed,Itr,_W,Ntr,qtr,bW,jtr,Dtr,Gtr,c8,Otr,z7e,Vtr,Xtr,ztr,Ft,f8,Wtr,W7e,Qtr,Htr,Cd,Utr,Q7e,Jtr,Ytr,vW,Ktr,Ztr,ear,iF,oar,fo,m8,rar,H7e,tar,aar,Wa,nar,U7e,sar,lar,J7e,iar,dar,Y7e,car,far,mar,Pe,dF,K7e,gar,har,FW,par,uar,_ar,cF,Z7e,bar,Far,TW,Tar,Mar,Ear,fF,e1e,Car,war,MW,Aar,Lar,yar,mF,o1e,xar,$ar,EW,kar,Sar,Rar,gF,r1e,Par,Bar,CW,Iar,Nar,qar,hF,t1e,jar,Dar,wW,Gar,Oar,Var,pF,a1e,Xar,zar,AW,War,Qar,Har,uF,n1e,Uar,Jar,LW,Yar,Kar,Zar,_F,s1e,enr,onr,yW,rnr,tnr,anr,bF,nnr,l1e,snr,lnr,i1e,inr,dnr,vF,zGe,wd,FF,d1e,g8,cnr,c1e,fnr,WGe,Xo,h8,mnr,Ad,gnr,xW,hnr,pnr,$W,unr,_nr,bnr,p8,vnr,f1e,Fnr,Tnr,Mnr,Tt,u8,Enr,m1e,Cnr,wnr,Ld,Anr,g1e,Lnr,ynr,kW,xnr,$nr,knr,TF,Snr,mo,_8,Rnr,h1e,Pnr,Bnr,Qa,Inr,p1e,Nnr,qnr,u1e,jnr,Dnr,_1e,Gnr,Onr,Vnr,et,MF,b1e,Xnr,znr,SW,Wnr,Qnr,Hnr,EF,v1e,Unr,Jnr,RW,Ynr,Knr,Znr,CF,F1e,esr,osr,PW,rsr,tsr,asr,wF,T1e,nsr,ssr,BW,lsr,isr,dsr,AF,M1e,csr,fsr,IW,msr,gsr,hsr,LF,psr,E1e,usr,_sr,C1e,bsr,vsr,yF,QGe,yd,xF,w1e,b8,Fsr,A1e,Tsr,HGe,zo,v8,Msr,xd,Esr,NW,Csr,wsr,qW,Asr,Lsr,ysr,F8,xsr,L1e,$sr,ksr,Ssr,Mt,T8,Rsr,y1e,Psr,Bsr,$d,Isr,x1e,Nsr,qsr,jW,jsr,Dsr,Gsr,$F,Osr,go,M8,Vsr,$1e,Xsr,zsr,Ha,Wsr,k1e,Qsr,Hsr,S1e,Usr,Jsr,R1e,Ysr,Ksr,Zsr,Le,kF,P1e,elr,olr,DW,rlr,tlr,alr,SF,B1e,nlr,slr,GW,llr,ilr,dlr,RF,I1e,clr,flr,OW,mlr,glr,hlr,PF,N1e,plr,ulr,VW,_lr,blr,vlr,BF,q1e,Flr,Tlr,XW,Mlr,Elr,Clr,IF,j1e,wlr,Alr,zW,Llr,ylr,xlr,NF,D1e,$lr,klr,WW,Slr,Rlr,Plr,qF,G1e,Blr,Ilr,QW,Nlr,qlr,jlr,jF,O1e,Dlr,Glr,HW,Olr,Vlr,Xlr,DF,V1e,zlr,Wlr,UW,Qlr,Hlr,Ulr,GF,Jlr,X1e,Ylr,Klr,z1e,Zlr,eir,OF,UGe,kd,VF,W1e,E8,oir,Q1e,rir,JGe,Wo,C8,tir,Sd,air,JW,nir,sir,YW,lir,iir,dir,w8,cir,H1e,fir,mir,gir,Et,A8,hir,U1e,pir,uir,Rd,_ir,J1e,bir,vir,KW,Fir,Tir,Mir,XF,Eir,ho,L8,Cir,Y1e,wir,Air,Ua,Lir,K1e,yir,xir,Z1e,$ir,kir,e2e,Sir,Rir,Pir,y8,zF,o2e,Bir,Iir,ZW,Nir,qir,jir,WF,r2e,Dir,Gir,eQ,Oir,Vir,Xir,QF,zir,t2e,Wir,Qir,a2e,Hir,Uir,HF,YGe,Pd,UF,n2e,x8,Jir,s2e,Yir,KGe,Qo,$8,Kir,Bd,Zir,oQ,edr,odr,rQ,rdr,tdr,adr,k8,ndr,l2e,sdr,ldr,idr,Ct,S8,ddr,i2e,cdr,fdr,Id,mdr,d2e,gdr,hdr,tQ,pdr,udr,_dr,JF,bdr,po,R8,vdr,c2e,Fdr,Tdr,Ja,Mdr,f2e,Edr,Cdr,m2e,wdr,Adr,g2e,Ldr,ydr,xdr,ot,YF,h2e,$dr,kdr,aQ,Sdr,Rdr,Pdr,KF,p2e,Bdr,Idr,nQ,Ndr,qdr,jdr,ZF,u2e,Ddr,Gdr,sQ,Odr,Vdr,Xdr,eT,_2e,zdr,Wdr,lQ,Qdr,Hdr,Udr,oT,b2e,Jdr,Ydr,iQ,Kdr,Zdr,ecr,rT,ocr,v2e,rcr,tcr,F2e,acr,ncr,tT,ZGe,Nd,aT,T2e,P8,scr,M2e,lcr,eOe,Ho,B8,icr,qd,dcr,dQ,ccr,fcr,cQ,mcr,gcr,hcr,I8,pcr,E2e,ucr,_cr,bcr,wt,N8,vcr,C2e,Fcr,Tcr,jd,Mcr,w2e,Ecr,Ccr,fQ,wcr,Acr,Lcr,nT,ycr,uo,q8,xcr,A2e,$cr,kcr,Ya,Scr,L2e,Rcr,Pcr,y2e,Bcr,Icr,x2e,Ncr,qcr,jcr,Dd,sT,$2e,Dcr,Gcr,mQ,Ocr,Vcr,Xcr,lT,k2e,zcr,Wcr,gQ,Qcr,Hcr,Ucr,iT,S2e,Jcr,Ycr,hQ,Kcr,Zcr,efr,dT,ofr,R2e,rfr,tfr,P2e,afr,nfr,cT,oOe,Gd,fT,B2e,j8,sfr,I2e,lfr,rOe,Uo,D8,ifr,Od,dfr,pQ,cfr,ffr,uQ,mfr,gfr,hfr,G8,pfr,N2e,ufr,_fr,bfr,At,O8,vfr,q2e,Ffr,Tfr,Vd,Mfr,j2e,Efr,Cfr,_Q,wfr,Afr,Lfr,mT,yfr,_o,V8,xfr,D2e,$fr,kfr,Ka,Sfr,G2e,Rfr,Pfr,O2e,Bfr,Ifr,V2e,Nfr,qfr,jfr,X8,gT,X2e,Dfr,Gfr,bQ,Ofr,Vfr,Xfr,hT,z2e,zfr,Wfr,vQ,Qfr,Hfr,Ufr,pT,Jfr,W2e,Yfr,Kfr,Q2e,Zfr,emr,uT,tOe,Xd,_T,H2e,z8,omr,U2e,rmr,aOe,Jo,W8,tmr,zd,amr,FQ,nmr,smr,TQ,lmr,imr,dmr,Q8,cmr,J2e,fmr,mmr,gmr,Lt,H8,hmr,Y2e,pmr,umr,Wd,_mr,K2e,bmr,vmr,MQ,Fmr,Tmr,Mmr,bT,Emr,bo,U8,Cmr,Z2e,wmr,Amr,Za,Lmr,ebe,ymr,xmr,obe,$mr,kmr,rbe,Smr,Rmr,Pmr,tbe,vT,abe,Bmr,Imr,EQ,Nmr,qmr,jmr,FT,Dmr,nbe,Gmr,Omr,sbe,Vmr,Xmr,TT,nOe,Qd,MT,lbe,J8,zmr,ibe,Wmr,sOe,Yo,Y8,Qmr,Hd,Hmr,CQ,Umr,Jmr,wQ,Ymr,Kmr,Zmr,K8,egr,dbe,ogr,rgr,tgr,yt,Z8,agr,cbe,ngr,sgr,Ud,lgr,fbe,igr,dgr,AQ,cgr,fgr,mgr,ET,ggr,vo,e9,hgr,mbe,pgr,ugr,en,_gr,gbe,bgr,vgr,hbe,Fgr,Tgr,pbe,Mgr,Egr,Cgr,on,CT,ube,wgr,Agr,LQ,Lgr,ygr,xgr,wT,_be,$gr,kgr,yQ,Sgr,Rgr,Pgr,AT,bbe,Bgr,Igr,xQ,Ngr,qgr,jgr,LT,vbe,Dgr,Ggr,$Q,Ogr,Vgr,Xgr,yT,zgr,Fbe,Wgr,Qgr,Tbe,Hgr,Ugr,xT,lOe,Jd,$T,Mbe,o9,Jgr,Ebe,Ygr,iOe,Ko,r9,Kgr,Yd,Zgr,kQ,ehr,ohr,SQ,rhr,thr,ahr,t9,nhr,Cbe,shr,lhr,ihr,xt,a9,dhr,wbe,chr,fhr,Kd,mhr,Abe,ghr,hhr,RQ,phr,uhr,_hr,kT,bhr,Fo,n9,vhr,Lbe,Fhr,Thr,rn,Mhr,ybe,Ehr,Chr,xbe,whr,Ahr,$be,Lhr,yhr,xhr,kbe,ST,Sbe,$hr,khr,PQ,Shr,Rhr,Phr,RT,Bhr,Rbe,Ihr,Nhr,Pbe,qhr,jhr,PT,dOe,Zd,BT,Bbe,s9,Dhr,Ibe,Ghr,cOe,Zo,l9,Ohr,ec,Vhr,BQ,Xhr,zhr,IQ,Whr,Qhr,Hhr,i9,Uhr,Nbe,Jhr,Yhr,Khr,$t,d9,Zhr,qbe,epr,opr,oc,rpr,jbe,tpr,apr,NQ,npr,spr,lpr,IT,ipr,Lr,c9,dpr,Dbe,cpr,fpr,tn,mpr,Gbe,gpr,hpr,Obe,ppr,upr,Vbe,_pr,bpr,vpr,q,NT,Xbe,Fpr,Tpr,qQ,Mpr,Epr,Cpr,qT,zbe,wpr,Apr,jQ,Lpr,ypr,xpr,jT,Wbe,$pr,kpr,DQ,Spr,Rpr,Ppr,DT,Qbe,Bpr,Ipr,GQ,Npr,qpr,jpr,GT,Hbe,Dpr,Gpr,OQ,Opr,Vpr,Xpr,OT,Ube,zpr,Wpr,VQ,Qpr,Hpr,Upr,VT,Jbe,Jpr,Ypr,XQ,Kpr,Zpr,eur,XT,Ybe,our,rur,zQ,tur,aur,nur,zT,Kbe,sur,lur,WQ,iur,dur,cur,WT,Zbe,fur,mur,QQ,gur,hur,pur,QT,eve,uur,_ur,HQ,bur,vur,Fur,HT,ove,Tur,Mur,UQ,Eur,Cur,wur,UT,rve,Aur,Lur,JQ,yur,xur,$ur,JT,tve,kur,Sur,YQ,Rur,Pur,Bur,YT,ave,Iur,Nur,KQ,qur,jur,Dur,KT,nve,Gur,Our,ZQ,Vur,Xur,zur,ZT,sve,Wur,Qur,eH,Hur,Uur,Jur,Xs,lve,Yur,Kur,oH,Zur,e_r,rH,o_r,r_r,t_r,eM,ive,a_r,n_r,tH,s_r,l_r,i_r,oM,dve,d_r,c_r,aH,f_r,m_r,g_r,rM,cve,h_r,p_r,nH,u_r,__r,b_r,tM,fve,v_r,F_r,sH,T_r,M_r,E_r,aM,mve,C_r,w_r,lH,A_r,L_r,y_r,nM,gve,x_r,$_r,iH,k_r,S_r,R_r,sM,hve,P_r,B_r,dH,I_r,N_r,q_r,lM,pve,j_r,D_r,cH,G_r,O_r,V_r,iM,uve,X_r,z_r,fH,W_r,Q_r,H_r,dM,_ve,U_r,J_r,mH,Y_r,K_r,Z_r,cM,bve,e7r,o7r,gH,r7r,t7r,a7r,fM,vve,n7r,s7r,hH,l7r,i7r,d7r,mM,Fve,c7r,f7r,pH,m7r,g7r,h7r,gM,Tve,p7r,u7r,uH,_7r,b7r,v7r,hM,Mve,F7r,T7r,_H,M7r,E7r,C7r,pM,Eve,w7r,A7r,bH,L7r,y7r,x7r,uM,Cve,$7r,k7r,vH,S7r,R7r,P7r,_M,wve,B7r,I7r,FH,N7r,q7r,j7r,bM,Ave,D7r,G7r,TH,O7r,V7r,X7r,vM,Lve,z7r,W7r,MH,Q7r,H7r,U7r,FM,yve,J7r,Y7r,EH,K7r,Z7r,e1r,TM,xve,o1r,r1r,CH,t1r,a1r,n1r,MM,$ve,s1r,l1r,wH,i1r,d1r,c1r,EM,kve,f1r,m1r,AH,g1r,h1r,p1r,CM,Sve,u1r,_1r,LH,b1r,v1r,F1r,wM,Rve,T1r,M1r,yH,E1r,C1r,w1r,AM,Pve,A1r,L1r,xH,y1r,x1r,$1r,LM,Bve,k1r,S1r,$H,R1r,P1r,B1r,yM,Ive,I1r,N1r,kH,q1r,j1r,D1r,xM,fOe,rc,$M,Nve,f9,G1r,qve,O1r,mOe,er,m9,V1r,tc,X1r,SH,z1r,W1r,RH,Q1r,H1r,U1r,g9,J1r,jve,Y1r,K1r,Z1r,kt,h9,e2r,Dve,o2r,r2r,ac,t2r,Gve,a2r,n2r,PH,s2r,l2r,i2r,kM,d2r,yr,p9,c2r,Ove,f2r,m2r,an,g2r,Vve,h2r,p2r,Xve,u2r,_2r,zve,b2r,v2r,F2r,se,SM,Wve,T2r,M2r,BH,E2r,C2r,w2r,RM,Qve,A2r,L2r,IH,y2r,x2r,$2r,PM,Hve,k2r,S2r,NH,R2r,P2r,B2r,BM,Uve,I2r,N2r,qH,q2r,j2r,D2r,IM,Jve,G2r,O2r,jH,V2r,X2r,z2r,NM,Yve,W2r,Q2r,DH,H2r,U2r,J2r,qM,Kve,Y2r,K2r,GH,Z2r,ebr,obr,jM,Zve,rbr,tbr,OH,abr,nbr,sbr,DM,e0e,lbr,ibr,VH,dbr,cbr,fbr,GM,o0e,mbr,gbr,XH,hbr,pbr,ubr,OM,r0e,_br,bbr,zH,vbr,Fbr,Tbr,VM,t0e,Mbr,Ebr,WH,Cbr,wbr,Abr,XM,a0e,Lbr,ybr,QH,xbr,$br,kbr,zM,n0e,Sbr,Rbr,HH,Pbr,Bbr,Ibr,WM,s0e,Nbr,qbr,UH,jbr,Dbr,Gbr,QM,l0e,Obr,Vbr,JH,Xbr,zbr,Wbr,HM,i0e,Qbr,Hbr,YH,Ubr,Jbr,Ybr,UM,d0e,Kbr,Zbr,KH,evr,ovr,rvr,JM,c0e,tvr,avr,ZH,nvr,svr,lvr,YM,f0e,ivr,dvr,eU,cvr,fvr,mvr,KM,m0e,gvr,hvr,oU,pvr,uvr,_vr,ZM,g0e,bvr,vvr,rU,Fvr,Tvr,Mvr,e4,h0e,Evr,Cvr,tU,wvr,Avr,Lvr,o4,gOe,nc,r4,p0e,u9,yvr,u0e,xvr,hOe,or,_9,$vr,sc,kvr,aU,Svr,Rvr,nU,Pvr,Bvr,Ivr,b9,Nvr,_0e,qvr,jvr,Dvr,St,v9,Gvr,b0e,Ovr,Vvr,lc,Xvr,v0e,zvr,Wvr,sU,Qvr,Hvr,Uvr,t4,Jvr,xr,F9,Yvr,F0e,Kvr,Zvr,nn,e0r,T0e,o0r,r0r,M0e,t0r,a0r,E0e,n0r,s0r,l0r,Me,a4,C0e,i0r,d0r,lU,c0r,f0r,m0r,n4,w0e,g0r,h0r,iU,p0r,u0r,_0r,s4,A0e,b0r,v0r,dU,F0r,T0r,M0r,l4,L0e,E0r,C0r,cU,w0r,A0r,L0r,i4,y0e,y0r,x0r,fU,$0r,k0r,S0r,d4,x0e,R0r,P0r,mU,B0r,I0r,N0r,c4,$0e,q0r,j0r,gU,D0r,G0r,O0r,f4,k0e,V0r,X0r,hU,z0r,W0r,Q0r,m4,S0e,H0r,U0r,pU,J0r,Y0r,K0r,g4,R0e,Z0r,eFr,uU,oFr,rFr,tFr,h4,P0e,aFr,nFr,_U,sFr,lFr,iFr,p4,B0e,dFr,cFr,bU,fFr,mFr,gFr,u4,I0e,hFr,pFr,vU,uFr,_Fr,bFr,_4,pOe,ic,b4,N0e,T9,vFr,q0e,FFr,uOe,rr,M9,TFr,dc,MFr,FU,EFr,CFr,TU,wFr,AFr,LFr,E9,yFr,j0e,xFr,$Fr,kFr,Rt,C9,SFr,D0e,RFr,PFr,cc,BFr,G0e,IFr,NFr,MU,qFr,jFr,DFr,v4,GFr,$r,w9,OFr,O0e,VFr,XFr,sn,zFr,V0e,WFr,QFr,X0e,HFr,UFr,z0e,JFr,YFr,KFr,ln,F4,W0e,ZFr,eTr,EU,oTr,rTr,tTr,T4,Q0e,aTr,nTr,CU,sTr,lTr,iTr,M4,H0e,dTr,cTr,wU,fTr,mTr,gTr,E4,U0e,hTr,pTr,AU,uTr,_Tr,bTr,C4,_Oe,fc,w4,J0e,A9,vTr,Y0e,FTr,bOe,tr,L9,TTr,mc,MTr,LU,ETr,CTr,yU,wTr,ATr,LTr,y9,yTr,K0e,xTr,$Tr,kTr,Pt,x9,STr,Z0e,RTr,PTr,gc,BTr,eFe,ITr,NTr,xU,qTr,jTr,DTr,A4,GTr,kr,$9,OTr,oFe,VTr,XTr,dn,zTr,rFe,WTr,QTr,tFe,HTr,UTr,aFe,JTr,YTr,KTr,ie,L4,nFe,ZTr,eMr,$U,oMr,rMr,tMr,y4,sFe,aMr,nMr,kU,sMr,lMr,iMr,x4,lFe,dMr,cMr,SU,fMr,mMr,gMr,$4,iFe,hMr,pMr,RU,uMr,_Mr,bMr,k4,dFe,vMr,FMr,PU,TMr,MMr,EMr,S4,cFe,CMr,wMr,BU,AMr,LMr,yMr,R4,fFe,xMr,$Mr,IU,kMr,SMr,RMr,P4,mFe,PMr,BMr,NU,IMr,NMr,qMr,B4,gFe,jMr,DMr,qU,GMr,OMr,VMr,I4,hFe,XMr,zMr,jU,WMr,QMr,HMr,N4,pFe,UMr,JMr,DU,YMr,KMr,ZMr,q4,uFe,e4r,o4r,GU,r4r,t4r,a4r,j4,_Fe,n4r,s4r,OU,l4r,i4r,d4r,D4,bFe,c4r,f4r,VU,m4r,g4r,h4r,G4,vFe,p4r,u4r,XU,_4r,b4r,v4r,O4,FFe,F4r,T4r,zU,M4r,E4r,C4r,V4,TFe,w4r,A4r,WU,L4r,y4r,x4r,X4,MFe,$4r,k4r,QU,S4r,R4r,P4r,z4,EFe,B4r,I4r,HU,N4r,q4r,j4r,W4,CFe,D4r,G4r,UU,O4r,V4r,X4r,Q4,vOe,hc,H4,wFe,k9,z4r,AFe,W4r,FOe,ar,S9,Q4r,pc,H4r,JU,U4r,J4r,YU,Y4r,K4r,Z4r,R9,eEr,LFe,oEr,rEr,tEr,Bt,P9,aEr,yFe,nEr,sEr,uc,lEr,xFe,iEr,dEr,KU,cEr,fEr,mEr,U4,gEr,Sr,B9,hEr,$Fe,pEr,uEr,cn,_Er,kFe,bEr,vEr,SFe,FEr,TEr,RFe,MEr,EEr,CEr,ye,J4,PFe,wEr,AEr,ZU,LEr,yEr,xEr,Y4,BFe,$Er,kEr,eJ,SEr,REr,PEr,K4,IFe,BEr,IEr,oJ,NEr,qEr,jEr,Z4,NFe,DEr,GEr,rJ,OEr,VEr,XEr,eE,qFe,zEr,WEr,tJ,QEr,HEr,UEr,oE,jFe,JEr,YEr,aJ,KEr,ZEr,eCr,rE,DFe,oCr,rCr,nJ,tCr,aCr,nCr,tE,GFe,sCr,lCr,sJ,iCr,dCr,cCr,aE,OFe,fCr,mCr,lJ,gCr,hCr,pCr,nE,VFe,uCr,_Cr,iJ,bCr,vCr,FCr,sE,TOe,_c,lE,XFe,I9,TCr,zFe,MCr,MOe,nr,N9,ECr,bc,CCr,dJ,wCr,ACr,cJ,LCr,yCr,xCr,q9,$Cr,WFe,kCr,SCr,RCr,It,j9,PCr,QFe,BCr,ICr,vc,NCr,HFe,qCr,jCr,fJ,DCr,GCr,OCr,iE,VCr,Rr,D9,XCr,UFe,zCr,WCr,fn,QCr,JFe,HCr,UCr,YFe,JCr,YCr,KFe,KCr,ZCr,e5r,ae,dE,ZFe,o5r,r5r,mJ,t5r,a5r,n5r,cE,eTe,s5r,l5r,gJ,i5r,d5r,c5r,fE,oTe,f5r,m5r,hJ,g5r,h5r,p5r,mE,rTe,u5r,_5r,pJ,b5r,v5r,F5r,gE,tTe,T5r,M5r,uJ,E5r,C5r,w5r,hE,aTe,A5r,L5r,_J,y5r,x5r,$5r,pE,nTe,k5r,S5r,bJ,R5r,P5r,B5r,uE,sTe,I5r,N5r,vJ,q5r,j5r,D5r,_E,lTe,G5r,O5r,FJ,V5r,X5r,z5r,bE,iTe,W5r,Q5r,TJ,H5r,U5r,J5r,vE,dTe,Y5r,K5r,MJ,Z5r,e3r,o3r,FE,cTe,r3r,t3r,EJ,a3r,n3r,s3r,TE,fTe,l3r,i3r,CJ,d3r,c3r,f3r,ME,mTe,m3r,g3r,wJ,h3r,p3r,u3r,EE,gTe,_3r,b3r,AJ,v3r,F3r,T3r,CE,hTe,M3r,E3r,LJ,C3r,w3r,A3r,wE,pTe,L3r,y3r,yJ,x3r,$3r,k3r,AE,uTe,S3r,R3r,xJ,P3r,B3r,I3r,LE,_Te,N3r,q3r,$J,j3r,D3r,G3r,yE,bTe,O3r,V3r,kJ,X3r,z3r,W3r,xE,vTe,Q3r,H3r,SJ,U3r,J3r,Y3r,$E,FTe,K3r,Z3r,RJ,ewr,owr,rwr,kE,TTe,twr,awr,PJ,nwr,swr,lwr,SE,MTe,iwr,dwr,BJ,cwr,fwr,mwr,RE,ETe,gwr,hwr,IJ,pwr,uwr,_wr,PE,CTe,bwr,vwr,NJ,Fwr,Twr,Mwr,BE,EOe,Fc,IE,wTe,G9,Ewr,ATe,Cwr,COe,sr,O9,wwr,Tc,Awr,qJ,Lwr,ywr,jJ,xwr,$wr,kwr,V9,Swr,LTe,Rwr,Pwr,Bwr,Nt,X9,Iwr,yTe,Nwr,qwr,Mc,jwr,xTe,Dwr,Gwr,DJ,Owr,Vwr,Xwr,NE,zwr,Pr,z9,Wwr,$Te,Qwr,Hwr,mn,Uwr,kTe,Jwr,Ywr,STe,Kwr,Zwr,RTe,eAr,oAr,rAr,ue,qE,PTe,tAr,aAr,GJ,nAr,sAr,lAr,jE,BTe,iAr,dAr,OJ,cAr,fAr,mAr,DE,ITe,gAr,hAr,VJ,pAr,uAr,_Ar,GE,NTe,bAr,vAr,XJ,FAr,TAr,MAr,OE,qTe,EAr,CAr,zJ,wAr,AAr,LAr,VE,jTe,yAr,xAr,WJ,$Ar,kAr,SAr,XE,DTe,RAr,PAr,QJ,BAr,IAr,NAr,zE,GTe,qAr,jAr,HJ,DAr,GAr,OAr,WE,OTe,VAr,XAr,UJ,zAr,WAr,QAr,QE,VTe,HAr,UAr,JJ,JAr,YAr,KAr,HE,XTe,ZAr,e6r,YJ,o6r,r6r,t6r,UE,zTe,a6r,n6r,KJ,s6r,l6r,i6r,JE,WTe,d6r,c6r,ZJ,f6r,m6r,g6r,YE,QTe,h6r,p6r,eY,u6r,_6r,b6r,KE,HTe,v6r,F6r,oY,T6r,M6r,E6r,ZE,UTe,C6r,w6r,rY,A6r,L6r,y6r,eC,JTe,x6r,$6r,tY,k6r,S6r,R6r,oC,wOe,Ec,rC,YTe,W9,P6r,KTe,B6r,AOe,lr,Q9,I6r,Cc,N6r,aY,q6r,j6r,nY,D6r,G6r,O6r,H9,V6r,ZTe,X6r,z6r,W6r,qt,U9,Q6r,eMe,H6r,U6r,wc,J6r,oMe,Y6r,K6r,sY,Z6r,eLr,oLr,tC,rLr,Br,J9,tLr,rMe,aLr,nLr,gn,sLr,tMe,lLr,iLr,aMe,dLr,cLr,nMe,fLr,mLr,gLr,Y9,aC,sMe,hLr,pLr,lY,uLr,_Lr,bLr,nC,lMe,vLr,FLr,iY,TLr,MLr,ELr,sC,LOe,Ac,lC,iMe,K9,CLr,dMe,wLr,yOe,ir,Z9,ALr,Lc,LLr,dY,yLr,xLr,cY,$Lr,kLr,SLr,ex,RLr,cMe,PLr,BLr,ILr,jt,ox,NLr,fMe,qLr,jLr,yc,DLr,mMe,GLr,OLr,fY,VLr,XLr,zLr,iC,WLr,Ir,rx,QLr,gMe,HLr,ULr,hn,JLr,hMe,YLr,KLr,pMe,ZLr,eyr,uMe,oyr,ryr,tyr,_Me,dC,bMe,ayr,nyr,mY,syr,lyr,iyr,cC,xOe,xc,fC,vMe,tx,dyr,FMe,cyr,$Oe,dr,ax,fyr,$c,myr,gY,gyr,hyr,hY,pyr,uyr,_yr,nx,byr,TMe,vyr,Fyr,Tyr,Dt,sx,Myr,MMe,Eyr,Cyr,kc,wyr,EMe,Ayr,Lyr,pY,yyr,xyr,$yr,mC,kyr,Nr,lx,Syr,CMe,Ryr,Pyr,pn,Byr,wMe,Iyr,Nyr,AMe,qyr,jyr,LMe,Dyr,Gyr,Oyr,de,gC,yMe,Vyr,Xyr,uY,zyr,Wyr,Qyr,hC,xMe,Hyr,Uyr,_Y,Jyr,Yyr,Kyr,pC,$Me,Zyr,e8r,bY,o8r,r8r,t8r,uC,kMe,a8r,n8r,vY,s8r,l8r,i8r,_C,SMe,d8r,c8r,FY,f8r,m8r,g8r,bC,RMe,h8r,p8r,TY,u8r,_8r,b8r,vC,PMe,v8r,F8r,MY,T8r,M8r,E8r,FC,BMe,C8r,w8r,EY,A8r,L8r,y8r,TC,IMe,x8r,$8r,CY,k8r,S8r,R8r,MC,NMe,P8r,B8r,wY,I8r,N8r,q8r,EC,qMe,j8r,D8r,AY,G8r,O8r,V8r,CC,jMe,X8r,z8r,LY,W8r,Q8r,H8r,wC,DMe,U8r,J8r,yY,Y8r,K8r,Z8r,AC,GMe,e9r,o9r,xY,r9r,t9r,a9r,LC,OMe,n9r,s9r,$Y,l9r,i9r,d9r,yC,VMe,c9r,f9r,kY,m9r,g9r,h9r,xC,XMe,p9r,u9r,SY,_9r,b9r,v9r,$C,zMe,F9r,T9r,RY,M9r,E9r,C9r,kC,WMe,w9r,A9r,PY,L9r,y9r,x9r,SC,QMe,$9r,k9r,BY,S9r,R9r,P9r,RC,kOe,Sc,PC,HMe,ix,B9r,UMe,I9r,SOe,cr,dx,N9r,Rc,q9r,IY,j9r,D9r,NY,G9r,O9r,V9r,cx,X9r,JMe,z9r,W9r,Q9r,Gt,fx,H9r,YMe,U9r,J9r,Pc,Y9r,KMe,K9r,Z9r,qY,exr,oxr,rxr,BC,txr,qr,mx,axr,ZMe,nxr,sxr,un,lxr,e4e,ixr,dxr,o4e,cxr,fxr,r4e,mxr,gxr,hxr,ce,IC,t4e,pxr,uxr,jY,_xr,bxr,vxr,NC,a4e,Fxr,Txr,DY,Mxr,Exr,Cxr,qC,n4e,wxr,Axr,GY,Lxr,yxr,xxr,jC,s4e,$xr,kxr,OY,Sxr,Rxr,Pxr,DC,l4e,Bxr,Ixr,VY,Nxr,qxr,jxr,GC,i4e,Dxr,Gxr,XY,Oxr,Vxr,Xxr,OC,d4e,zxr,Wxr,zY,Qxr,Hxr,Uxr,VC,c4e,Jxr,Yxr,WY,Kxr,Zxr,e$r,XC,f4e,o$r,r$r,QY,t$r,a$r,n$r,zC,m4e,s$r,l$r,HY,i$r,d$r,c$r,WC,g4e,f$r,m$r,UY,g$r,h$r,p$r,QC,h4e,u$r,_$r,JY,b$r,v$r,F$r,HC,p4e,T$r,M$r,YY,E$r,C$r,w$r,UC,u4e,A$r,L$r,KY,y$r,x$r,$$r,JC,_4e,k$r,S$r,ZY,R$r,P$r,B$r,YC,b4e,I$r,N$r,eK,q$r,j$r,D$r,KC,v4e,G$r,O$r,oK,V$r,X$r,z$r,ZC,F4e,W$r,Q$r,rK,H$r,U$r,J$r,e5,T4e,Y$r,K$r,tK,Z$r,ekr,okr,o5,M4e,rkr,tkr,aK,akr,nkr,skr,r5,ROe,Bc,t5,E4e,gx,lkr,C4e,ikr,POe,fr,hx,dkr,Ic,ckr,nK,fkr,mkr,sK,gkr,hkr,pkr,px,ukr,w4e,_kr,bkr,vkr,Ot,ux,Fkr,A4e,Tkr,Mkr,Nc,Ekr,L4e,Ckr,wkr,lK,Akr,Lkr,ykr,a5,xkr,jr,_x,$kr,y4e,kkr,Skr,_n,Rkr,x4e,Pkr,Bkr,$4e,Ikr,Nkr,k4e,qkr,jkr,Dkr,S4e,n5,R4e,Gkr,Okr,iK,Vkr,Xkr,zkr,s5,BOe,qc,l5,P4e,bx,Wkr,B4e,Qkr,IOe,mr,vx,Hkr,jc,Ukr,dK,Jkr,Ykr,cK,Kkr,Zkr,eSr,Fx,oSr,I4e,rSr,tSr,aSr,Vt,Tx,nSr,N4e,sSr,lSr,Dc,iSr,q4e,dSr,cSr,fK,fSr,mSr,gSr,i5,hSr,Dr,Mx,pSr,j4e,uSr,_Sr,bn,bSr,D4e,vSr,FSr,G4e,TSr,MSr,O4e,ESr,CSr,wSr,V4e,d5,X4e,ASr,LSr,mK,ySr,xSr,$Sr,c5,NOe,Gc,f5,z4e,Ex,kSr,W4e,SSr,qOe,gr,Cx,RSr,Oc,PSr,gK,BSr,ISr,hK,NSr,qSr,jSr,wx,DSr,Q4e,GSr,OSr,VSr,Xt,Ax,XSr,H4e,zSr,WSr,Vc,QSr,U4e,HSr,USr,pK,JSr,YSr,KSr,m5,ZSr,Gr,Lx,eRr,J4e,oRr,rRr,vn,tRr,Y4e,aRr,nRr,K4e,sRr,lRr,Z4e,iRr,dRr,cRr,ee,g5,eEe,fRr,mRr,uK,gRr,hRr,pRr,h5,oEe,uRr,_Rr,_K,bRr,vRr,FRr,p5,rEe,TRr,MRr,bK,ERr,CRr,wRr,u5,tEe,ARr,LRr,vK,yRr,xRr,$Rr,_5,aEe,kRr,SRr,FK,RRr,PRr,BRr,b5,nEe,IRr,NRr,TK,qRr,jRr,DRr,v5,sEe,GRr,ORr,MK,VRr,XRr,zRr,F5,lEe,WRr,QRr,EK,HRr,URr,JRr,T5,iEe,YRr,KRr,CK,ZRr,ePr,oPr,M5,dEe,rPr,tPr,wK,aPr,nPr,sPr,E5,cEe,lPr,iPr,AK,dPr,cPr,fPr,C5,fEe,mPr,gPr,LK,hPr,pPr,uPr,w5,mEe,_Pr,bPr,yK,vPr,FPr,TPr,A5,gEe,MPr,EPr,xK,CPr,wPr,APr,L5,hEe,LPr,yPr,$K,xPr,$Pr,kPr,y5,pEe,SPr,RPr,kK,PPr,BPr,IPr,x5,uEe,NPr,qPr,SK,jPr,DPr,GPr,$5,_Ee,OPr,VPr,RK,XPr,zPr,WPr,k5,bEe,QPr,HPr,PK,UPr,JPr,YPr,S5,vEe,KPr,ZPr,BK,eBr,oBr,rBr,R5,FEe,tBr,aBr,IK,nBr,sBr,lBr,P5,TEe,iBr,dBr,NK,cBr,fBr,mBr,B5,MEe,gBr,hBr,qK,pBr,uBr,_Br,I5,EEe,bBr,vBr,jK,FBr,TBr,MBr,N5,CEe,EBr,CBr,DK,wBr,ABr,LBr,q5,wEe,yBr,xBr,GK,$Br,kBr,SBr,j5,AEe,RBr,PBr,OK,BBr,IBr,NBr,D5,LEe,qBr,jBr,VK,DBr,GBr,OBr,G5,jOe,Xc,O5,yEe,yx,VBr,xEe,XBr,DOe,hr,xx,zBr,zc,WBr,XK,QBr,HBr,zK,UBr,JBr,YBr,$x,KBr,$Ee,ZBr,eIr,oIr,zt,kx,rIr,kEe,tIr,aIr,Wc,nIr,SEe,sIr,lIr,WK,iIr,dIr,cIr,V5,fIr,Or,Sx,mIr,REe,gIr,hIr,Fn,pIr,PEe,uIr,_Ir,BEe,bIr,vIr,IEe,FIr,TIr,MIr,xe,X5,NEe,EIr,CIr,QK,wIr,AIr,LIr,z5,qEe,yIr,xIr,HK,$Ir,kIr,SIr,W5,jEe,RIr,PIr,UK,BIr,IIr,NIr,Q5,DEe,qIr,jIr,JK,DIr,GIr,OIr,H5,GEe,VIr,XIr,YK,zIr,WIr,QIr,U5,OEe,HIr,UIr,KK,JIr,YIr,KIr,J5,VEe,ZIr,eNr,ZK,oNr,rNr,tNr,Y5,XEe,aNr,nNr,eZ,sNr,lNr,iNr,K5,zEe,dNr,cNr,oZ,fNr,mNr,gNr,Z5,WEe,hNr,pNr,rZ,uNr,_Nr,bNr,e3,GOe,Qc,o3,QEe,Rx,vNr,HEe,FNr,OOe,pr,Px,TNr,Hc,MNr,tZ,ENr,CNr,aZ,wNr,ANr,LNr,Bx,yNr,UEe,xNr,$Nr,kNr,Wt,Ix,SNr,JEe,RNr,PNr,Uc,BNr,YEe,INr,NNr,nZ,qNr,jNr,DNr,r3,GNr,Vr,Nx,ONr,KEe,VNr,XNr,Tn,zNr,ZEe,WNr,QNr,eCe,HNr,UNr,oCe,JNr,YNr,KNr,Ee,t3,rCe,ZNr,eqr,sZ,oqr,rqr,tqr,a3,tCe,aqr,nqr,lZ,sqr,lqr,iqr,n3,aCe,dqr,cqr,iZ,fqr,mqr,gqr,s3,nCe,hqr,pqr,dZ,uqr,_qr,bqr,l3,sCe,vqr,Fqr,cZ,Tqr,Mqr,Eqr,i3,lCe,Cqr,wqr,fZ,Aqr,Lqr,yqr,d3,iCe,xqr,$qr,mZ,kqr,Sqr,Rqr,c3,dCe,Pqr,Bqr,gZ,Iqr,Nqr,qqr,f3,cCe,jqr,Dqr,hZ,Gqr,Oqr,Vqr,m3,fCe,Xqr,zqr,pZ,Wqr,Qqr,Hqr,g3,mCe,Uqr,Jqr,uZ,Yqr,Kqr,Zqr,h3,gCe,ejr,ojr,_Z,rjr,tjr,ajr,p3,hCe,njr,sjr,bZ,ljr,ijr,djr,u3,VOe,Jc,_3,pCe,qx,cjr,uCe,fjr,XOe,ur,jx,mjr,Yc,gjr,vZ,hjr,pjr,FZ,ujr,_jr,bjr,Dx,vjr,_Ce,Fjr,Tjr,Mjr,Qt,Gx,Ejr,bCe,Cjr,wjr,Kc,Ajr,vCe,Ljr,yjr,TZ,xjr,$jr,kjr,b3,Sjr,Xr,Ox,Rjr,FCe,Pjr,Bjr,Mn,Ijr,TCe,Njr,qjr,MCe,jjr,Djr,ECe,Gjr,Ojr,Vjr,$e,v3,CCe,Xjr,zjr,MZ,Wjr,Qjr,Hjr,F3,wCe,Ujr,Jjr,EZ,Yjr,Kjr,Zjr,T3,ACe,eDr,oDr,CZ,rDr,tDr,aDr,M3,LCe,nDr,sDr,wZ,lDr,iDr,dDr,E3,yCe,cDr,fDr,AZ,mDr,gDr,hDr,C3,xCe,pDr,uDr,LZ,_Dr,bDr,vDr,w3,$Ce,FDr,TDr,yZ,MDr,EDr,CDr,A3,kCe,wDr,ADr,xZ,LDr,yDr,xDr,L3,SCe,$Dr,kDr,$Z,SDr,RDr,PDr,y3,RCe,BDr,IDr,kZ,NDr,qDr,jDr,x3,zOe,Zc,$3,PCe,Vx,DDr,BCe,GDr,WOe,_r,Xx,ODr,ef,VDr,SZ,XDr,zDr,RZ,WDr,QDr,HDr,zx,UDr,ICe,JDr,YDr,KDr,Ht,Wx,ZDr,NCe,eGr,oGr,of,rGr,qCe,tGr,aGr,PZ,nGr,sGr,lGr,k3,iGr,zr,Qx,dGr,jCe,cGr,fGr,En,mGr,DCe,gGr,hGr,GCe,pGr,uGr,OCe,_Gr,bGr,vGr,ke,S3,VCe,FGr,TGr,BZ,MGr,EGr,CGr,R3,XCe,wGr,AGr,IZ,LGr,yGr,xGr,P3,zCe,$Gr,kGr,NZ,SGr,RGr,PGr,B3,WCe,BGr,IGr,qZ,NGr,qGr,jGr,I3,QCe,DGr,GGr,jZ,OGr,VGr,XGr,N3,HCe,zGr,WGr,DZ,QGr,HGr,UGr,q3,UCe,JGr,YGr,GZ,KGr,ZGr,eOr,j3,JCe,oOr,rOr,OZ,tOr,aOr,nOr,D3,YCe,sOr,lOr,VZ,iOr,dOr,cOr,G3,KCe,fOr,mOr,XZ,gOr,hOr,pOr,O3,QOe,rf,V3,ZCe,Hx,uOr,e5e,_Or,HOe,br,Ux,bOr,tf,vOr,zZ,FOr,TOr,WZ,MOr,EOr,COr,Jx,wOr,o5e,AOr,LOr,yOr,Ut,Yx,xOr,r5e,$Or,kOr,af,SOr,t5e,ROr,POr,QZ,BOr,IOr,NOr,X3,qOr,Wr,Kx,jOr,a5e,DOr,GOr,Cn,OOr,n5e,VOr,XOr,s5e,zOr,WOr,l5e,QOr,HOr,UOr,Se,z3,i5e,JOr,YOr,HZ,KOr,ZOr,eVr,W3,d5e,oVr,rVr,UZ,tVr,aVr,nVr,Q3,c5e,sVr,lVr,JZ,iVr,dVr,cVr,H3,f5e,fVr,mVr,YZ,gVr,hVr,pVr,U3,m5e,uVr,_Vr,KZ,bVr,vVr,FVr,J3,g5e,TVr,MVr,ZZ,EVr,CVr,wVr,Y3,h5e,AVr,LVr,eee,yVr,xVr,$Vr,K3,p5e,kVr,SVr,oee,RVr,PVr,BVr,Z3,u5e,IVr,NVr,ree,qVr,jVr,DVr,ew,_5e,GVr,OVr,tee,VVr,XVr,zVr,ow,UOe,nf,rw,b5e,Zx,WVr,v5e,QVr,JOe,vr,e$,HVr,sf,UVr,aee,JVr,YVr,nee,KVr,ZVr,eXr,o$,oXr,F5e,rXr,tXr,aXr,Jt,r$,nXr,T5e,sXr,lXr,lf,iXr,M5e,dXr,cXr,see,fXr,mXr,gXr,tw,hXr,Qr,t$,pXr,E5e,uXr,_Xr,wn,bXr,C5e,vXr,FXr,w5e,TXr,MXr,A5e,EXr,CXr,wXr,Re,aw,L5e,AXr,LXr,lee,yXr,xXr,$Xr,nw,y5e,kXr,SXr,iee,RXr,PXr,BXr,sw,x5e,IXr,NXr,dee,qXr,jXr,DXr,lw,$5e,GXr,OXr,cee,VXr,XXr,zXr,iw,k5e,WXr,QXr,fee,HXr,UXr,JXr,dw,S5e,YXr,KXr,mee,ZXr,ezr,ozr,cw,R5e,rzr,tzr,gee,azr,nzr,szr,fw,P5e,lzr,izr,hee,dzr,czr,fzr,mw,B5e,mzr,gzr,pee,hzr,pzr,uzr,gw,I5e,_zr,bzr,uee,vzr,Fzr,Tzr,hw,YOe,df,pw,N5e,a$,Mzr,q5e,Ezr,KOe,Fr,n$,Czr,cf,wzr,_ee,Azr,Lzr,bee,yzr,xzr,$zr,s$,kzr,j5e,Szr,Rzr,Pzr,Yt,l$,Bzr,D5e,Izr,Nzr,ff,qzr,G5e,jzr,Dzr,vee,Gzr,Ozr,Vzr,uw,Xzr,Hr,i$,zzr,O5e,Wzr,Qzr,An,Hzr,V5e,Uzr,Jzr,X5e,Yzr,Kzr,z5e,Zzr,eWr,oWr,Ve,_w,W5e,rWr,tWr,Fee,aWr,nWr,sWr,bw,Q5e,lWr,iWr,Tee,dWr,cWr,fWr,vw,H5e,mWr,gWr,Mee,hWr,pWr,uWr,Fw,U5e,_Wr,bWr,Eee,vWr,FWr,TWr,Tw,J5e,MWr,EWr,Cee,CWr,wWr,AWr,Mw,Y5e,LWr,yWr,wee,xWr,$Wr,kWr,Ew,K5e,SWr,RWr,Aee,PWr,BWr,IWr,Cw,Z5e,NWr,qWr,Lee,jWr,DWr,GWr,ww,ZOe,mf,Aw,e3e,d$,OWr,o3e,VWr,eVe,Tr,c$,XWr,gf,zWr,yee,WWr,QWr,xee,HWr,UWr,JWr,f$,YWr,r3e,KWr,ZWr,eQr,Kt,m$,oQr,t3e,rQr,tQr,hf,aQr,a3e,nQr,sQr,$ee,lQr,iQr,dQr,Lw,cQr,Ur,g$,fQr,n3e,mQr,gQr,Ln,hQr,s3e,pQr,uQr,l3e,_Qr,bQr,i3e,vQr,FQr,TQr,Xe,yw,d3e,MQr,EQr,kee,CQr,wQr,AQr,xw,c3e,LQr,yQr,See,xQr,$Qr,kQr,$w,f3e,SQr,RQr,Ree,PQr,BQr,IQr,kw,m3e,NQr,qQr,Pee,jQr,DQr,GQr,Sw,g3e,OQr,VQr,Bee,XQr,zQr,WQr,Rw,h3e,QQr,HQr,Iee,UQr,JQr,YQr,Pw,p3e,KQr,ZQr,Nee,eHr,oHr,rHr,Bw,u3e,tHr,aHr,qee,nHr,sHr,lHr,Iw,oVe,pf,Nw,_3e,h$,iHr,b3e,dHr,rVe,Mr,p$,cHr,uf,fHr,jee,mHr,gHr,Dee,hHr,pHr,uHr,u$,_Hr,v3e,bHr,vHr,FHr,Zt,_$,THr,F3e,MHr,EHr,_f,CHr,T3e,wHr,AHr,Gee,LHr,yHr,xHr,qw,$Hr,Jr,b$,kHr,M3e,SHr,RHr,yn,PHr,E3e,BHr,IHr,C3e,NHr,qHr,w3e,jHr,DHr,GHr,A3e,jw,L3e,OHr,VHr,Oee,XHr,zHr,WHr,Dw,tVe,bf,Gw,y3e,v$,QHr,x3e,HHr,aVe,Er,F$,UHr,vf,JHr,Vee,YHr,KHr,Xee,ZHr,eUr,oUr,T$,rUr,$3e,tUr,aUr,nUr,ea,M$,sUr,k3e,lUr,iUr,Ff,dUr,S3e,cUr,fUr,zee,mUr,gUr,hUr,Ow,pUr,Yr,E$,uUr,R3e,_Ur,bUr,xn,vUr,P3e,FUr,TUr,B3e,MUr,EUr,I3e,CUr,wUr,AUr,C$,Vw,N3e,LUr,yUr,Wee,xUr,$Ur,kUr,Xw,q3e,SUr,RUr,Qee,PUr,BUr,IUr,zw,nVe,Tf,Ww,j3e,w$,NUr,D3e,qUr,sVe,Cr,A$,jUr,Mf,DUr,Hee,GUr,OUr,Uee,VUr,XUr,zUr,L$,WUr,G3e,QUr,HUr,UUr,oa,y$,JUr,O3e,YUr,KUr,Ef,ZUr,V3e,eJr,oJr,Jee,rJr,tJr,aJr,Qw,nJr,Kr,x$,sJr,X3e,lJr,iJr,$n,dJr,z3e,cJr,fJr,W3e,mJr,gJr,Q3e,hJr,pJr,uJr,H3e,Hw,U3e,_Jr,bJr,Yee,vJr,FJr,TJr,Uw,lVe;return d=new te({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),FL=new te({}),TL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new MJr({props:{warning:!0,$$slots:{default:[xqt]},$$scope:{ctx:y}}}),ML=new te({}),EL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/configuration_auto.py#L594"}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/configuration_auto.py#L617"}}),jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$qt]},$$scope:{ctx:y}}}),LL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/configuration_auto.py#L740"}}),yL=new te({}),xL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/tokenization_auto.py#L399"}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17770/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/tokenization_auto.py#L413"}}),Th=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kqt]},$$scope:{ctx:y}}}),RL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/tokenization_auto.py#L612"}}),PL=new te({}),BL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17770/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),rp=new MJr({props:{$$slots:{default:[Sqt]},$$scope:{ctx:y}}}),tp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Rqt]},$$scope:{ctx:y}}}),jL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),DL=new te({}),GL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/processing_auto.py#L88"}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/processing_auto.py#L102"}}),Ep=new MJr({props:{$$slots:{default:[Pqt]},$$scope:{ctx:y}}}),Cp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Bqt]},$$scope:{ctx:y}}}),zL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/processing_auto.py#L255"}}),WL=new te({}),QL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L758"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),Lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Iqt]},$$scope:{ctx:y}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Nqt]},$$scope:{ctx:y}}}),YL=new te({}),KL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L765"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[qqt]},$$scope:{ctx:y}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jqt]},$$scope:{ctx:y}}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L780"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),ly=new te({}),iy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L787"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),my=new te({}),gy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L794"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),U1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),_y=new te({}),by=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L803"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),My=new te({}),Ey=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L848"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),Ly=new te({}),yy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L855"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),Sy=new te({}),Ry=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L841"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),Ny=new te({}),qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L812"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),Oy=new te({}),Vy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L819"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),Qy=new te({}),Hy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L864"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),Ky=new te({}),Zy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L903"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),t8=new te({}),a8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L830"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),i8=new te({}),d8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L910"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),g8=new te({}),h8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L933"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),b8=new te({}),v8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L917"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),E8=new te({}),C8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L924"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),x8=new te({}),$8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L942"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),P8=new te({}),B8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L949"}}),N8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),j8=new te({}),D8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L896"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),z8=new te({}),W8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L871"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),J8=new te({}),Y8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L878"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),o9=new te({}),r9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_auto.py#L887"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),s9=new te({}),l9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),f9=new te({}),m9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),u9=new te({}),_9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),v9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),T9=new te({}),M9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),A9=new te({}),L9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),k9=new te({}),S9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),I9=new te({}),N9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),G9=new te({}),O9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),X9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),W9=new te({}),Q9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),K9=new te({}),Z9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ujt]},$$scope:{ctx:y}}}),tx=new te({}),ax=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Jjt]},$$scope:{ctx:y}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Yjt]},$$scope:{ctx:y}}}),ix=new te({}),dx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Kjt]},$$scope:{ctx:y}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Zjt]},$$scope:{ctx:y}}}),gx=new te({}),hx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[eDt]},$$scope:{ctx:y}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oDt]},$$scope:{ctx:y}}}),bx=new te({}),vx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rDt]},$$scope:{ctx:y}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tDt]},$$scope:{ctx:y}}}),Ex=new te({}),Cx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/dpt#transformers.FlaxDPTModel">FlaxDPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[aDt]},$$scope:{ctx:y}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[nDt]},$$scope:{ctx:y}}}),yx=new te({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[sDt]},$$scope:{ctx:y}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lDt]},$$scope:{ctx:y}}}),Rx=new te({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[iDt]},$$scope:{ctx:y}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dDt]},$$scope:{ctx:y}}}),qx=new te({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L285"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[cDt]},$$scope:{ctx:y}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:y}}}),Vx=new te({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mDt]},$$scope:{ctx:y}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:y}}}),Hx=new te({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L301"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hDt]},$$scope:{ctx:y}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:y}}}),Zx=new te({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[uDt]},$$scope:{ctx:y}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_Dt]},$$scope:{ctx:y}}}),a$=new te({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L317"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:y}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:y}}}),d$=new te({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L326"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:y}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:y}}}),h$=new te({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:y}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:y}}}),v$=new te({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L342"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:y}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:y}}}),w$=new te({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/modeling_flax_auto.py#L351"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:y}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17770/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17770/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17770/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),uL=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),_L=o("AutoConfig"),Rn=o(", "),Pn=a("a"),bL=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),vL=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Wk=o("will create a model that is an instance of "),Ai=a("a"),Qk=o("BertModel"),Hk=o("."),Co=l(),xa=a("p"),Uk=o("There is one class of "),$f=a("code"),Jk=o("AutoModel"),_ze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rGe=l(),Li=a("h2"),kf=a("a"),Wre=a("span"),F(FL.$$.fragment),bze=l(),Qre=a("span"),vze=o("Extending the Auto Classes"),tGe=l(),In=a("p"),Fze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Hre=a("code"),Tze=o("NewModel"),Mze=o(", make sure you have a "),Ure=a("code"),Eze=o("NewModelConfig"),Cze=o(` then you can add those to the auto
classes like this:`),aGe=l(),F(TL.$$.fragment),nGe=l(),Yk=a("p"),wze=o("You will then be able to use the auto classes like you would usually do!"),sGe=l(),F(Sf.$$.fragment),lGe=l(),yi=a("h2"),Rf=a("a"),Jre=a("span"),F(ML.$$.fragment),Aze=l(),Yre=a("span"),Lze=o("AutoConfig"),iGe=l(),wo=a("div"),F(EL.$$.fragment),yze=l(),CL=a("p"),xze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Kk=a("a"),$ze=o("from_pretrained()"),kze=o(" class method."),Sze=l(),wL=a("p"),Rze=o("This class cannot be instantiated directly using "),Kre=a("code"),Pze=o("__init__()"),Bze=o(" (throws an error)."),Ize=l(),wr=a("div"),F(AL.$$.fragment),Nze=l(),Zre=a("p"),qze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jze=l(),xi=a("p"),Dze=o("The configuration class to instantiate is selected based on the "),ete=a("code"),Gze=o("model_type"),Oze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ote=a("code"),Vze=o("pretrained_model_name_or_path"),Xze=o(":"),zze=l(),A=a("ul"),Pf=a("li"),rte=a("strong"),Wze=o("albert"),Qze=o(" \u2014 "),Zk=a("a"),Hze=o("AlbertConfig"),Uze=o(" (ALBERT model)"),Jze=l(),Bf=a("li"),tte=a("strong"),Yze=o("bart"),Kze=o(" \u2014 "),eS=a("a"),Zze=o("BartConfig"),eWe=o(" (BART model)"),oWe=l(),If=a("li"),ate=a("strong"),rWe=o("beit"),tWe=o(" \u2014 "),oS=a("a"),aWe=o("BeitConfig"),nWe=o(" (BEiT model)"),sWe=l(),Nf=a("li"),nte=a("strong"),lWe=o("bert"),iWe=o(" \u2014 "),rS=a("a"),dWe=o("BertConfig"),cWe=o(" (BERT model)"),fWe=l(),qf=a("li"),ste=a("strong"),mWe=o("bert-generation"),gWe=o(" \u2014 "),tS=a("a"),hWe=o("BertGenerationConfig"),pWe=o(" (Bert Generation model)"),uWe=l(),jf=a("li"),lte=a("strong"),_We=o("big_bird"),bWe=o(" \u2014 "),aS=a("a"),vWe=o("BigBirdConfig"),FWe=o(" (BigBird model)"),TWe=l(),Df=a("li"),ite=a("strong"),MWe=o("bigbird_pegasus"),EWe=o(" \u2014 "),nS=a("a"),CWe=o("BigBirdPegasusConfig"),wWe=o(" (BigBird-Pegasus model)"),AWe=l(),Gf=a("li"),dte=a("strong"),LWe=o("blenderbot"),yWe=o(" \u2014 "),sS=a("a"),xWe=o("BlenderbotConfig"),$We=o(" (Blenderbot model)"),kWe=l(),Of=a("li"),cte=a("strong"),SWe=o("blenderbot-small"),RWe=o(" \u2014 "),lS=a("a"),PWe=o("BlenderbotSmallConfig"),BWe=o(" (BlenderbotSmall model)"),IWe=l(),Vf=a("li"),fte=a("strong"),NWe=o("bloom"),qWe=o(" \u2014 "),iS=a("a"),jWe=o("BloomConfig"),DWe=o(" (BLOOM model)"),GWe=l(),Xf=a("li"),mte=a("strong"),OWe=o("camembert"),VWe=o(" \u2014 "),dS=a("a"),XWe=o("CamembertConfig"),zWe=o(" (CamemBERT model)"),WWe=l(),zf=a("li"),gte=a("strong"),QWe=o("canine"),HWe=o(" \u2014 "),cS=a("a"),UWe=o("CanineConfig"),JWe=o(" (CANINE model)"),YWe=l(),Wf=a("li"),hte=a("strong"),KWe=o("clip"),ZWe=o(" \u2014 "),fS=a("a"),eQe=o("CLIPConfig"),oQe=o(" (CLIP model)"),rQe=l(),Qf=a("li"),pte=a("strong"),tQe=o("convbert"),aQe=o(" \u2014 "),mS=a("a"),nQe=o("ConvBertConfig"),sQe=o(" (ConvBERT model)"),lQe=l(),Hf=a("li"),ute=a("strong"),iQe=o("convnext"),dQe=o(" \u2014 "),gS=a("a"),cQe=o("ConvNextConfig"),fQe=o(" (ConvNeXT model)"),mQe=l(),Uf=a("li"),_te=a("strong"),gQe=o("ctrl"),hQe=o(" \u2014 "),hS=a("a"),pQe=o("CTRLConfig"),uQe=o(" (CTRL model)"),_Qe=l(),Jf=a("li"),bte=a("strong"),bQe=o("cvt"),vQe=o(" \u2014 "),pS=a("a"),FQe=o("CvtConfig"),TQe=o(" (CvT model)"),MQe=l(),Yf=a("li"),vte=a("strong"),EQe=o("data2vec-audio"),CQe=o(" \u2014 "),uS=a("a"),wQe=o("Data2VecAudioConfig"),AQe=o(" (Data2VecAudio model)"),LQe=l(),Kf=a("li"),Fte=a("strong"),yQe=o("data2vec-text"),xQe=o(" \u2014 "),_S=a("a"),$Qe=o("Data2VecTextConfig"),kQe=o(" (Data2VecText model)"),SQe=l(),Zf=a("li"),Tte=a("strong"),RQe=o("data2vec-vision"),PQe=o(" \u2014 "),bS=a("a"),BQe=o("Data2VecVisionConfig"),IQe=o(" (Data2VecVision model)"),NQe=l(),em=a("li"),Mte=a("strong"),qQe=o("deberta"),jQe=o(" \u2014 "),vS=a("a"),DQe=o("DebertaConfig"),GQe=o(" (DeBERTa model)"),OQe=l(),om=a("li"),Ete=a("strong"),VQe=o("deberta-v2"),XQe=o(" \u2014 "),FS=a("a"),zQe=o("DebertaV2Config"),WQe=o(" (DeBERTa-v2 model)"),QQe=l(),rm=a("li"),Cte=a("strong"),HQe=o("decision_transformer"),UQe=o(" \u2014 "),TS=a("a"),JQe=o("DecisionTransformerConfig"),YQe=o(" (Decision Transformer model)"),KQe=l(),tm=a("li"),wte=a("strong"),ZQe=o("deit"),eHe=o(" \u2014 "),MS=a("a"),oHe=o("DeiTConfig"),rHe=o(" (DeiT model)"),tHe=l(),am=a("li"),Ate=a("strong"),aHe=o("detr"),nHe=o(" \u2014 "),ES=a("a"),sHe=o("DetrConfig"),lHe=o(" (DETR model)"),iHe=l(),nm=a("li"),Lte=a("strong"),dHe=o("distilbert"),cHe=o(" \u2014 "),CS=a("a"),fHe=o("DistilBertConfig"),mHe=o(" (DistilBERT model)"),gHe=l(),sm=a("li"),yte=a("strong"),hHe=o("dpr"),pHe=o(" \u2014 "),wS=a("a"),uHe=o("DPRConfig"),_He=o(" (DPR model)"),bHe=l(),lm=a("li"),xte=a("strong"),vHe=o("dpt"),FHe=o(" \u2014 "),AS=a("a"),THe=o("DPTConfig"),MHe=o(" (DPT model)"),EHe=l(),im=a("li"),$te=a("strong"),CHe=o("electra"),wHe=o(" \u2014 "),LS=a("a"),AHe=o("ElectraConfig"),LHe=o(" (ELECTRA model)"),yHe=l(),dm=a("li"),kte=a("strong"),xHe=o("encoder-decoder"),$He=o(" \u2014 "),yS=a("a"),kHe=o("EncoderDecoderConfig"),SHe=o(" (Encoder decoder model)"),RHe=l(),cm=a("li"),Ste=a("strong"),PHe=o("flaubert"),BHe=o(" \u2014 "),xS=a("a"),IHe=o("FlaubertConfig"),NHe=o(" (FlauBERT model)"),qHe=l(),fm=a("li"),Rte=a("strong"),jHe=o("flava"),DHe=o(" \u2014 "),$S=a("a"),GHe=o("FlavaConfig"),OHe=o(" (FLAVA model)"),VHe=l(),mm=a("li"),Pte=a("strong"),XHe=o("fnet"),zHe=o(" \u2014 "),kS=a("a"),WHe=o("FNetConfig"),QHe=o(" (FNet model)"),HHe=l(),gm=a("li"),Bte=a("strong"),UHe=o("fsmt"),JHe=o(" \u2014 "),SS=a("a"),YHe=o("FSMTConfig"),KHe=o(" (FairSeq Machine-Translation model)"),ZHe=l(),hm=a("li"),Ite=a("strong"),eUe=o("funnel"),oUe=o(" \u2014 "),RS=a("a"),rUe=o("FunnelConfig"),tUe=o(" (Funnel Transformer model)"),aUe=l(),pm=a("li"),Nte=a("strong"),nUe=o("glpn"),sUe=o(" \u2014 "),PS=a("a"),lUe=o("GLPNConfig"),iUe=o(" (GLPN model)"),dUe=l(),um=a("li"),qte=a("strong"),cUe=o("gpt2"),fUe=o(" \u2014 "),BS=a("a"),mUe=o("GPT2Config"),gUe=o(" (OpenAI GPT-2 model)"),hUe=l(),_m=a("li"),jte=a("strong"),pUe=o("gpt_neo"),uUe=o(" \u2014 "),IS=a("a"),_Ue=o("GPTNeoConfig"),bUe=o(" (GPT Neo model)"),vUe=l(),bm=a("li"),Dte=a("strong"),FUe=o("gpt_neox"),TUe=o(" \u2014 "),NS=a("a"),MUe=o("GPTNeoXConfig"),EUe=o(" (GPT NeoX model)"),CUe=l(),vm=a("li"),Gte=a("strong"),wUe=o("gptj"),AUe=o(" \u2014 "),qS=a("a"),LUe=o("GPTJConfig"),yUe=o(" (GPT-J model)"),xUe=l(),Fm=a("li"),Ote=a("strong"),$Ue=o("hubert"),kUe=o(" \u2014 "),jS=a("a"),SUe=o("HubertConfig"),RUe=o(" (Hubert model)"),PUe=l(),Tm=a("li"),Vte=a("strong"),BUe=o("ibert"),IUe=o(" \u2014 "),DS=a("a"),NUe=o("IBertConfig"),qUe=o(" (I-BERT model)"),jUe=l(),Mm=a("li"),Xte=a("strong"),DUe=o("imagegpt"),GUe=o(" \u2014 "),GS=a("a"),OUe=o("ImageGPTConfig"),VUe=o(" (ImageGPT model)"),XUe=l(),Em=a("li"),zte=a("strong"),zUe=o("layoutlm"),WUe=o(" \u2014 "),OS=a("a"),QUe=o("LayoutLMConfig"),HUe=o(" (LayoutLM model)"),UUe=l(),Cm=a("li"),Wte=a("strong"),JUe=o("layoutlmv2"),YUe=o(" \u2014 "),VS=a("a"),KUe=o("LayoutLMv2Config"),ZUe=o(" (LayoutLMv2 model)"),eJe=l(),wm=a("li"),Qte=a("strong"),oJe=o("layoutlmv3"),rJe=o(" \u2014 "),XS=a("a"),tJe=o("LayoutLMv3Config"),aJe=o(" (LayoutLMv3 model)"),nJe=l(),Am=a("li"),Hte=a("strong"),sJe=o("led"),lJe=o(" \u2014 "),zS=a("a"),iJe=o("LEDConfig"),dJe=o(" (LED model)"),cJe=l(),Lm=a("li"),Ute=a("strong"),fJe=o("levit"),mJe=o(" \u2014 "),WS=a("a"),gJe=o("LevitConfig"),hJe=o(" (LeViT model)"),pJe=l(),ym=a("li"),Jte=a("strong"),uJe=o("longformer"),_Je=o(" \u2014 "),QS=a("a"),bJe=o("LongformerConfig"),vJe=o(" (Longformer model)"),FJe=l(),xm=a("li"),Yte=a("strong"),TJe=o("longt5"),MJe=o(" \u2014 "),HS=a("a"),EJe=o("LongT5Config"),CJe=o(" (LongT5 model)"),wJe=l(),$m=a("li"),Kte=a("strong"),AJe=o("luke"),LJe=o(" \u2014 "),US=a("a"),yJe=o("LukeConfig"),xJe=o(" (LUKE model)"),$Je=l(),km=a("li"),Zte=a("strong"),kJe=o("lxmert"),SJe=o(" \u2014 "),JS=a("a"),RJe=o("LxmertConfig"),PJe=o(" (LXMERT model)"),BJe=l(),Sm=a("li"),eae=a("strong"),IJe=o("m2m_100"),NJe=o(" \u2014 "),YS=a("a"),qJe=o("M2M100Config"),jJe=o(" (M2M100 model)"),DJe=l(),Rm=a("li"),oae=a("strong"),GJe=o("marian"),OJe=o(" \u2014 "),KS=a("a"),VJe=o("MarianConfig"),XJe=o(" (Marian model)"),zJe=l(),Pm=a("li"),rae=a("strong"),WJe=o("maskformer"),QJe=o(" \u2014 "),ZS=a("a"),HJe=o("MaskFormerConfig"),UJe=o(" (MaskFormer model)"),JJe=l(),Bm=a("li"),tae=a("strong"),YJe=o("mbart"),KJe=o(" \u2014 "),eR=a("a"),ZJe=o("MBartConfig"),eYe=o(" (mBART model)"),oYe=l(),Im=a("li"),aae=a("strong"),rYe=o("mctct"),tYe=o(" \u2014 "),oR=a("a"),aYe=o("MCTCTConfig"),nYe=o(" (M-CTC-T model)"),sYe=l(),Nm=a("li"),nae=a("strong"),lYe=o("megatron-bert"),iYe=o(" \u2014 "),rR=a("a"),dYe=o("MegatronBertConfig"),cYe=o(" (Megatron-BERT model)"),fYe=l(),qm=a("li"),sae=a("strong"),mYe=o("mobilebert"),gYe=o(" \u2014 "),tR=a("a"),hYe=o("MobileBertConfig"),pYe=o(" (MobileBERT model)"),uYe=l(),jm=a("li"),lae=a("strong"),_Ye=o("mpnet"),bYe=o(" \u2014 "),aR=a("a"),vYe=o("MPNetConfig"),FYe=o(" (MPNet model)"),TYe=l(),Dm=a("li"),iae=a("strong"),MYe=o("mt5"),EYe=o(" \u2014 "),nR=a("a"),CYe=o("MT5Config"),wYe=o(" (MT5 model)"),AYe=l(),Gm=a("li"),dae=a("strong"),LYe=o("nystromformer"),yYe=o(" \u2014 "),sR=a("a"),xYe=o("NystromformerConfig"),$Ye=o(" (Nystr\xF6mformer model)"),kYe=l(),Om=a("li"),cae=a("strong"),SYe=o("openai-gpt"),RYe=o(" \u2014 "),lR=a("a"),PYe=o("OpenAIGPTConfig"),BYe=o(" (OpenAI GPT model)"),IYe=l(),Vm=a("li"),fae=a("strong"),NYe=o("opt"),qYe=o(" \u2014 "),iR=a("a"),jYe=o("OPTConfig"),DYe=o(" (OPT model)"),GYe=l(),Xm=a("li"),mae=a("strong"),OYe=o("pegasus"),VYe=o(" \u2014 "),dR=a("a"),XYe=o("PegasusConfig"),zYe=o(" (Pegasus model)"),WYe=l(),zm=a("li"),gae=a("strong"),QYe=o("perceiver"),HYe=o(" \u2014 "),cR=a("a"),UYe=o("PerceiverConfig"),JYe=o(" (Perceiver model)"),YYe=l(),Wm=a("li"),hae=a("strong"),KYe=o("plbart"),ZYe=o(" \u2014 "),fR=a("a"),eKe=o("PLBartConfig"),oKe=o(" (PLBart model)"),rKe=l(),Qm=a("li"),pae=a("strong"),tKe=o("poolformer"),aKe=o(" \u2014 "),mR=a("a"),nKe=o("PoolFormerConfig"),sKe=o(" (PoolFormer model)"),lKe=l(),Hm=a("li"),uae=a("strong"),iKe=o("prophetnet"),dKe=o(" \u2014 "),gR=a("a"),cKe=o("ProphetNetConfig"),fKe=o(" (ProphetNet model)"),mKe=l(),Um=a("li"),_ae=a("strong"),gKe=o("qdqbert"),hKe=o(" \u2014 "),hR=a("a"),pKe=o("QDQBertConfig"),uKe=o(" (QDQBert model)"),_Ke=l(),Jm=a("li"),bae=a("strong"),bKe=o("rag"),vKe=o(" \u2014 "),pR=a("a"),FKe=o("RagConfig"),TKe=o(" (RAG model)"),MKe=l(),Ym=a("li"),vae=a("strong"),EKe=o("realm"),CKe=o(" \u2014 "),uR=a("a"),wKe=o("RealmConfig"),AKe=o(" (REALM model)"),LKe=l(),Km=a("li"),Fae=a("strong"),yKe=o("reformer"),xKe=o(" \u2014 "),_R=a("a"),$Ke=o("ReformerConfig"),kKe=o(" (Reformer model)"),SKe=l(),Zm=a("li"),Tae=a("strong"),RKe=o("regnet"),PKe=o(" \u2014 "),bR=a("a"),BKe=o("RegNetConfig"),IKe=o(" (RegNet model)"),NKe=l(),eg=a("li"),Mae=a("strong"),qKe=o("rembert"),jKe=o(" \u2014 "),vR=a("a"),DKe=o("RemBertConfig"),GKe=o(" (RemBERT model)"),OKe=l(),og=a("li"),Eae=a("strong"),VKe=o("resnet"),XKe=o(" \u2014 "),FR=a("a"),zKe=o("ResNetConfig"),WKe=o(" (ResNet model)"),QKe=l(),rg=a("li"),Cae=a("strong"),HKe=o("retribert"),UKe=o(" \u2014 "),TR=a("a"),JKe=o("RetriBertConfig"),YKe=o(" (RetriBERT model)"),KKe=l(),tg=a("li"),wae=a("strong"),ZKe=o("roberta"),eZe=o(" \u2014 "),MR=a("a"),oZe=o("RobertaConfig"),rZe=o(" (RoBERTa model)"),tZe=l(),ag=a("li"),Aae=a("strong"),aZe=o("roformer"),nZe=o(" \u2014 "),ER=a("a"),sZe=o("RoFormerConfig"),lZe=o(" (RoFormer model)"),iZe=l(),ng=a("li"),Lae=a("strong"),dZe=o("segformer"),cZe=o(" \u2014 "),CR=a("a"),fZe=o("SegformerConfig"),mZe=o(" (SegFormer model)"),gZe=l(),sg=a("li"),yae=a("strong"),hZe=o("sew"),pZe=o(" \u2014 "),wR=a("a"),uZe=o("SEWConfig"),_Ze=o(" (SEW model)"),bZe=l(),lg=a("li"),xae=a("strong"),vZe=o("sew-d"),FZe=o(" \u2014 "),AR=a("a"),TZe=o("SEWDConfig"),MZe=o(" (SEW-D model)"),EZe=l(),ig=a("li"),$ae=a("strong"),CZe=o("speech-encoder-decoder"),wZe=o(" \u2014 "),LR=a("a"),AZe=o("SpeechEncoderDecoderConfig"),LZe=o(" (Speech Encoder decoder model)"),yZe=l(),dg=a("li"),kae=a("strong"),xZe=o("speech_to_text"),$Ze=o(" \u2014 "),yR=a("a"),kZe=o("Speech2TextConfig"),SZe=o(" (Speech2Text model)"),RZe=l(),cg=a("li"),Sae=a("strong"),PZe=o("speech_to_text_2"),BZe=o(" \u2014 "),xR=a("a"),IZe=o("Speech2Text2Config"),NZe=o(" (Speech2Text2 model)"),qZe=l(),fg=a("li"),Rae=a("strong"),jZe=o("splinter"),DZe=o(" \u2014 "),$R=a("a"),GZe=o("SplinterConfig"),OZe=o(" (Splinter model)"),VZe=l(),mg=a("li"),Pae=a("strong"),XZe=o("squeezebert"),zZe=o(" \u2014 "),kR=a("a"),WZe=o("SqueezeBertConfig"),QZe=o(" (SqueezeBERT model)"),HZe=l(),gg=a("li"),Bae=a("strong"),UZe=o("swin"),JZe=o(" \u2014 "),SR=a("a"),YZe=o("SwinConfig"),KZe=o(" (Swin Transformer model)"),ZZe=l(),hg=a("li"),Iae=a("strong"),eeo=o("t5"),oeo=o(" \u2014 "),RR=a("a"),reo=o("T5Config"),teo=o(" (T5 model)"),aeo=l(),pg=a("li"),Nae=a("strong"),neo=o("tapas"),seo=o(" \u2014 "),PR=a("a"),leo=o("TapasConfig"),ieo=o(" (TAPAS model)"),deo=l(),ug=a("li"),qae=a("strong"),ceo=o("trajectory_transformer"),feo=o(" \u2014 "),BR=a("a"),meo=o("TrajectoryTransformerConfig"),geo=o(" (Trajectory Transformer model)"),heo=l(),_g=a("li"),jae=a("strong"),peo=o("transfo-xl"),ueo=o(" \u2014 "),IR=a("a"),_eo=o("TransfoXLConfig"),beo=o(" (Transformer-XL model)"),veo=l(),bg=a("li"),Dae=a("strong"),Feo=o("trocr"),Teo=o(" \u2014 "),NR=a("a"),Meo=o("TrOCRConfig"),Eeo=o(" (TrOCR model)"),Ceo=l(),vg=a("li"),Gae=a("strong"),weo=o("unispeech"),Aeo=o(" \u2014 "),qR=a("a"),Leo=o("UniSpeechConfig"),yeo=o(" (UniSpeech model)"),xeo=l(),Fg=a("li"),Oae=a("strong"),$eo=o("unispeech-sat"),keo=o(" \u2014 "),jR=a("a"),Seo=o("UniSpeechSatConfig"),Reo=o(" (UniSpeechSat model)"),Peo=l(),Tg=a("li"),Vae=a("strong"),Beo=o("van"),Ieo=o(" \u2014 "),DR=a("a"),Neo=o("VanConfig"),qeo=o(" (VAN model)"),jeo=l(),Mg=a("li"),Xae=a("strong"),Deo=o("vilt"),Geo=o(" \u2014 "),GR=a("a"),Oeo=o("ViltConfig"),Veo=o(" (ViLT model)"),Xeo=l(),Eg=a("li"),zae=a("strong"),zeo=o("vision-encoder-decoder"),Weo=o(" \u2014 "),OR=a("a"),Qeo=o("VisionEncoderDecoderConfig"),Heo=o(" (Vision Encoder decoder model)"),Ueo=l(),Cg=a("li"),Wae=a("strong"),Jeo=o("vision-text-dual-encoder"),Yeo=o(" \u2014 "),VR=a("a"),Keo=o("VisionTextDualEncoderConfig"),Zeo=o(" (VisionTextDualEncoder model)"),eoo=l(),wg=a("li"),Qae=a("strong"),ooo=o("visual_bert"),roo=o(" \u2014 "),XR=a("a"),too=o("VisualBertConfig"),aoo=o(" (VisualBERT model)"),noo=l(),Ag=a("li"),Hae=a("strong"),soo=o("vit"),loo=o(" \u2014 "),zR=a("a"),ioo=o("ViTConfig"),doo=o(" (ViT model)"),coo=l(),Lg=a("li"),Uae=a("strong"),foo=o("vit_mae"),moo=o(" \u2014 "),WR=a("a"),goo=o("ViTMAEConfig"),hoo=o(" (ViTMAE model)"),poo=l(),yg=a("li"),Jae=a("strong"),uoo=o("wav2vec2"),_oo=o(" \u2014 "),QR=a("a"),boo=o("Wav2Vec2Config"),voo=o(" (Wav2Vec2 model)"),Foo=l(),xg=a("li"),Yae=a("strong"),Too=o("wav2vec2-conformer"),Moo=o(" \u2014 "),HR=a("a"),Eoo=o("Wav2Vec2ConformerConfig"),Coo=o(" (Wav2Vec2-Conformer model)"),woo=l(),$g=a("li"),Kae=a("strong"),Aoo=o("wavlm"),Loo=o(" \u2014 "),UR=a("a"),yoo=o("WavLMConfig"),xoo=o(" (WavLM model)"),$oo=l(),kg=a("li"),Zae=a("strong"),koo=o("xglm"),Soo=o(" \u2014 "),JR=a("a"),Roo=o("XGLMConfig"),Poo=o(" (XGLM model)"),Boo=l(),Sg=a("li"),ene=a("strong"),Ioo=o("xlm"),Noo=o(" \u2014 "),YR=a("a"),qoo=o("XLMConfig"),joo=o(" (XLM model)"),Doo=l(),Rg=a("li"),one=a("strong"),Goo=o("xlm-prophetnet"),Ooo=o(" \u2014 "),KR=a("a"),Voo=o("XLMProphetNetConfig"),Xoo=o(" (XLM-ProphetNet model)"),zoo=l(),Pg=a("li"),rne=a("strong"),Woo=o("xlm-roberta"),Qoo=o(" \u2014 "),ZR=a("a"),Hoo=o("XLMRobertaConfig"),Uoo=o(" (XLM-RoBERTa model)"),Joo=l(),Bg=a("li"),tne=a("strong"),Yoo=o("xlm-roberta-xl"),Koo=o(" \u2014 "),eP=a("a"),Zoo=o("XLMRobertaXLConfig"),ero=o(" (XLM-RoBERTa-XL model)"),oro=l(),Ig=a("li"),ane=a("strong"),rro=o("xlnet"),tro=o(" \u2014 "),oP=a("a"),aro=o("XLNetConfig"),nro=o(" (XLNet model)"),sro=l(),Ng=a("li"),nne=a("strong"),lro=o("yolos"),iro=o(" \u2014 "),rP=a("a"),dro=o("YolosConfig"),cro=o(" (YOLOS model)"),fro=l(),qg=a("li"),sne=a("strong"),mro=o("yoso"),gro=o(" \u2014 "),tP=a("a"),hro=o("YosoConfig"),pro=o(" (YOSO model)"),uro=l(),F(jg.$$.fragment),_ro=l(),Dg=a("div"),F(LL.$$.fragment),bro=l(),lne=a("p"),vro=o("Register a new configuration for this class."),dGe=l(),$i=a("h2"),Gg=a("a"),ine=a("span"),F(yL.$$.fragment),Fro=l(),dne=a("span"),Tro=o("AutoTokenizer"),cGe=l(),Ao=a("div"),F(xL.$$.fragment),Mro=l(),$L=a("p"),Ero=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aP=a("a"),Cro=o("AutoTokenizer.from_pretrained()"),wro=o(" class method."),Aro=l(),kL=a("p"),Lro=o("This class cannot be instantiated directly using "),cne=a("code"),yro=o("__init__()"),xro=o(" (throws an error)."),$ro=l(),Ar=a("div"),F(SL.$$.fragment),kro=l(),fne=a("p"),Sro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Rro=l(),$a=a("p"),Pro=o("The tokenizer class to instantiate is selected based on the "),mne=a("code"),Bro=o("model_type"),Iro=o(` property of the config object (either
passed as an argument or loaded from `),gne=a("code"),Nro=o("pretrained_model_name_or_path"),qro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hne=a("code"),jro=o("pretrained_model_name_or_path"),Dro=o(":"),Gro=l(),k=a("ul"),Nn=a("li"),pne=a("strong"),Oro=o("albert"),Vro=o(" \u2014 "),nP=a("a"),Xro=o("AlbertTokenizer"),zro=o(" or "),sP=a("a"),Wro=o("AlbertTokenizerFast"),Qro=o(" (ALBERT model)"),Hro=l(),qn=a("li"),une=a("strong"),Uro=o("bart"),Jro=o(" \u2014 "),lP=a("a"),Yro=o("BartTokenizer"),Kro=o(" or "),iP=a("a"),Zro=o("BartTokenizerFast"),eto=o(" (BART model)"),oto=l(),jn=a("li"),_ne=a("strong"),rto=o("barthez"),tto=o(" \u2014 "),dP=a("a"),ato=o("BarthezTokenizer"),nto=o(" or "),cP=a("a"),sto=o("BarthezTokenizerFast"),lto=o(" (BARThez model)"),ito=l(),Og=a("li"),bne=a("strong"),dto=o("bartpho"),cto=o(" \u2014 "),fP=a("a"),fto=o("BartphoTokenizer"),mto=o(" (BARTpho model)"),gto=l(),Dn=a("li"),vne=a("strong"),hto=o("bert"),pto=o(" \u2014 "),mP=a("a"),uto=o("BertTokenizer"),_to=o(" or "),gP=a("a"),bto=o("BertTokenizerFast"),vto=o(" (BERT model)"),Fto=l(),Vg=a("li"),Fne=a("strong"),Tto=o("bert-generation"),Mto=o(" \u2014 "),hP=a("a"),Eto=o("BertGenerationTokenizer"),Cto=o(" (Bert Generation model)"),wto=l(),Xg=a("li"),Tne=a("strong"),Ato=o("bert-japanese"),Lto=o(" \u2014 "),pP=a("a"),yto=o("BertJapaneseTokenizer"),xto=o(" (BertJapanese model)"),$to=l(),zg=a("li"),Mne=a("strong"),kto=o("bertweet"),Sto=o(" \u2014 "),uP=a("a"),Rto=o("BertweetTokenizer"),Pto=o(" (BERTweet model)"),Bto=l(),Gn=a("li"),Ene=a("strong"),Ito=o("big_bird"),Nto=o(" \u2014 "),_P=a("a"),qto=o("BigBirdTokenizer"),jto=o(" or "),bP=a("a"),Dto=o("BigBirdTokenizerFast"),Gto=o(" (BigBird model)"),Oto=l(),On=a("li"),Cne=a("strong"),Vto=o("bigbird_pegasus"),Xto=o(" \u2014 "),vP=a("a"),zto=o("PegasusTokenizer"),Wto=o(" or "),FP=a("a"),Qto=o("PegasusTokenizerFast"),Hto=o(" (BigBird-Pegasus model)"),Uto=l(),Vn=a("li"),wne=a("strong"),Jto=o("blenderbot"),Yto=o(" \u2014 "),TP=a("a"),Kto=o("BlenderbotTokenizer"),Zto=o(" or "),MP=a("a"),eao=o("BlenderbotTokenizerFast"),oao=o(" (Blenderbot model)"),rao=l(),Wg=a("li"),Ane=a("strong"),tao=o("blenderbot-small"),aao=o(" \u2014 "),EP=a("a"),nao=o("BlenderbotSmallTokenizer"),sao=o(" (BlenderbotSmall model)"),lao=l(),Qg=a("li"),Lne=a("strong"),iao=o("bloom"),dao=o(" \u2014 "),CP=a("a"),cao=o("BloomTokenizerFast"),fao=o(" (BLOOM model)"),mao=l(),Hg=a("li"),yne=a("strong"),gao=o("byt5"),hao=o(" \u2014 "),wP=a("a"),pao=o("ByT5Tokenizer"),uao=o(" (ByT5 model)"),_ao=l(),Xn=a("li"),xne=a("strong"),bao=o("camembert"),vao=o(" \u2014 "),AP=a("a"),Fao=o("CamembertTokenizer"),Tao=o(" or "),LP=a("a"),Mao=o("CamembertTokenizerFast"),Eao=o(" (CamemBERT model)"),Cao=l(),Ug=a("li"),$ne=a("strong"),wao=o("canine"),Aao=o(" \u2014 "),yP=a("a"),Lao=o("CanineTokenizer"),yao=o(" (CANINE model)"),xao=l(),zn=a("li"),kne=a("strong"),$ao=o("clip"),kao=o(" \u2014 "),xP=a("a"),Sao=o("CLIPTokenizer"),Rao=o(" or "),$P=a("a"),Pao=o("CLIPTokenizerFast"),Bao=o(" (CLIP model)"),Iao=l(),Wn=a("li"),Sne=a("strong"),Nao=o("convbert"),qao=o(" \u2014 "),kP=a("a"),jao=o("ConvBertTokenizer"),Dao=o(" or "),SP=a("a"),Gao=o("ConvBertTokenizerFast"),Oao=o(" (ConvBERT model)"),Vao=l(),Qn=a("li"),Rne=a("strong"),Xao=o("cpm"),zao=o(" \u2014 "),RP=a("a"),Wao=o("CpmTokenizer"),Qao=o(" or "),PP=a("a"),Hao=o("CpmTokenizerFast"),Uao=o(" (CPM model)"),Jao=l(),Jg=a("li"),Pne=a("strong"),Yao=o("ctrl"),Kao=o(" \u2014 "),BP=a("a"),Zao=o("CTRLTokenizer"),eno=o(" (CTRL model)"),ono=l(),Hn=a("li"),Bne=a("strong"),rno=o("data2vec-text"),tno=o(" \u2014 "),IP=a("a"),ano=o("RobertaTokenizer"),nno=o(" or "),NP=a("a"),sno=o("RobertaTokenizerFast"),lno=o(" (Data2VecText model)"),ino=l(),Un=a("li"),Ine=a("strong"),dno=o("deberta"),cno=o(" \u2014 "),qP=a("a"),fno=o("DebertaTokenizer"),mno=o(" or "),jP=a("a"),gno=o("DebertaTokenizerFast"),hno=o(" (DeBERTa model)"),pno=l(),Jn=a("li"),Nne=a("strong"),uno=o("deberta-v2"),_no=o(" \u2014 "),DP=a("a"),bno=o("DebertaV2Tokenizer"),vno=o(" or "),GP=a("a"),Fno=o("DebertaV2TokenizerFast"),Tno=o(" (DeBERTa-v2 model)"),Mno=l(),Yn=a("li"),qne=a("strong"),Eno=o("distilbert"),Cno=o(" \u2014 "),OP=a("a"),wno=o("DistilBertTokenizer"),Ano=o(" or "),VP=a("a"),Lno=o("DistilBertTokenizerFast"),yno=o(" (DistilBERT model)"),xno=l(),Kn=a("li"),jne=a("strong"),$no=o("dpr"),kno=o(" \u2014 "),XP=a("a"),Sno=o("DPRQuestionEncoderTokenizer"),Rno=o(" or "),zP=a("a"),Pno=o("DPRQuestionEncoderTokenizerFast"),Bno=o(" (DPR model)"),Ino=l(),Zn=a("li"),Dne=a("strong"),Nno=o("electra"),qno=o(" \u2014 "),WP=a("a"),jno=o("ElectraTokenizer"),Dno=o(" or "),QP=a("a"),Gno=o("ElectraTokenizerFast"),Ono=o(" (ELECTRA model)"),Vno=l(),Yg=a("li"),Gne=a("strong"),Xno=o("flaubert"),zno=o(" \u2014 "),HP=a("a"),Wno=o("FlaubertTokenizer"),Qno=o(" (FlauBERT model)"),Hno=l(),es=a("li"),One=a("strong"),Uno=o("fnet"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("FNetTokenizer"),Kno=o(" or "),JP=a("a"),Zno=o("FNetTokenizerFast"),eso=o(" (FNet model)"),oso=l(),Kg=a("li"),Vne=a("strong"),rso=o("fsmt"),tso=o(" \u2014 "),YP=a("a"),aso=o("FSMTTokenizer"),nso=o(" (FairSeq Machine-Translation model)"),sso=l(),os=a("li"),Xne=a("strong"),lso=o("funnel"),iso=o(" \u2014 "),KP=a("a"),dso=o("FunnelTokenizer"),cso=o(" or "),ZP=a("a"),fso=o("FunnelTokenizerFast"),mso=o(" (Funnel Transformer model)"),gso=l(),rs=a("li"),zne=a("strong"),hso=o("gpt2"),pso=o(" \u2014 "),eB=a("a"),uso=o("GPT2Tokenizer"),_so=o(" or "),oB=a("a"),bso=o("GPT2TokenizerFast"),vso=o(" (OpenAI GPT-2 model)"),Fso=l(),ts=a("li"),Wne=a("strong"),Tso=o("gpt_neo"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("GPT2Tokenizer"),Cso=o(" or "),tB=a("a"),wso=o("GPT2TokenizerFast"),Aso=o(" (GPT Neo model)"),Lso=l(),Zg=a("li"),Qne=a("strong"),yso=o("gpt_neox"),xso=o(" \u2014 "),aB=a("a"),$so=o("GPTNeoXTokenizerFast"),kso=o(" (GPT NeoX model)"),Sso=l(),as=a("li"),Hne=a("strong"),Rso=o("gptj"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("GPT2Tokenizer"),Iso=o(" or "),sB=a("a"),Nso=o("GPT2TokenizerFast"),qso=o(" (GPT-J model)"),jso=l(),ns=a("li"),Une=a("strong"),Dso=o("herbert"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("HerbertTokenizer"),Vso=o(" or "),iB=a("a"),Xso=o("HerbertTokenizerFast"),zso=o(" (HerBERT model)"),Wso=l(),eh=a("li"),Jne=a("strong"),Qso=o("hubert"),Hso=o(" \u2014 "),dB=a("a"),Uso=o("Wav2Vec2CTCTokenizer"),Jso=o(" (Hubert model)"),Yso=l(),ss=a("li"),Yne=a("strong"),Kso=o("ibert"),Zso=o(" \u2014 "),cB=a("a"),elo=o("RobertaTokenizer"),olo=o(" or "),fB=a("a"),rlo=o("RobertaTokenizerFast"),tlo=o(" (I-BERT model)"),alo=l(),ls=a("li"),Kne=a("strong"),nlo=o("layoutlm"),slo=o(" \u2014 "),mB=a("a"),llo=o("LayoutLMTokenizer"),ilo=o(" or "),gB=a("a"),dlo=o("LayoutLMTokenizerFast"),clo=o(" (LayoutLM model)"),flo=l(),is=a("li"),Zne=a("strong"),mlo=o("layoutlmv2"),glo=o(" \u2014 "),hB=a("a"),hlo=o("LayoutLMv2Tokenizer"),plo=o(" or "),pB=a("a"),ulo=o("LayoutLMv2TokenizerFast"),_lo=o(" (LayoutLMv2 model)"),blo=l(),ds=a("li"),ese=a("strong"),vlo=o("layoutlmv3"),Flo=o(" \u2014 "),uB=a("a"),Tlo=o("LayoutLMv3Tokenizer"),Mlo=o(" or "),_B=a("a"),Elo=o("LayoutLMv3TokenizerFast"),Clo=o(" (LayoutLMv3 model)"),wlo=l(),cs=a("li"),ose=a("strong"),Alo=o("layoutxlm"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("LayoutXLMTokenizer"),xlo=o(" or "),vB=a("a"),$lo=o("LayoutXLMTokenizerFast"),klo=o(" (LayoutXLM model)"),Slo=l(),fs=a("li"),rse=a("strong"),Rlo=o("led"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("LEDTokenizer"),Ilo=o(" or "),TB=a("a"),Nlo=o("LEDTokenizerFast"),qlo=o(" (LED model)"),jlo=l(),ms=a("li"),tse=a("strong"),Dlo=o("longformer"),Glo=o(" \u2014 "),MB=a("a"),Olo=o("LongformerTokenizer"),Vlo=o(" or "),EB=a("a"),Xlo=o("LongformerTokenizerFast"),zlo=o(" (Longformer model)"),Wlo=l(),gs=a("li"),ase=a("strong"),Qlo=o("longt5"),Hlo=o(" \u2014 "),CB=a("a"),Ulo=o("T5Tokenizer"),Jlo=o(" or "),wB=a("a"),Ylo=o("T5TokenizerFast"),Klo=o(" (LongT5 model)"),Zlo=l(),oh=a("li"),nse=a("strong"),eio=o("luke"),oio=o(" \u2014 "),AB=a("a"),rio=o("LukeTokenizer"),tio=o(" (LUKE model)"),aio=l(),hs=a("li"),sse=a("strong"),nio=o("lxmert"),sio=o(" \u2014 "),LB=a("a"),lio=o("LxmertTokenizer"),iio=o(" or "),yB=a("a"),dio=o("LxmertTokenizerFast"),cio=o(" (LXMERT model)"),fio=l(),rh=a("li"),lse=a("strong"),mio=o("m2m_100"),gio=o(" \u2014 "),xB=a("a"),hio=o("M2M100Tokenizer"),pio=o(" (M2M100 model)"),uio=l(),th=a("li"),ise=a("strong"),_io=o("marian"),bio=o(" \u2014 "),$B=a("a"),vio=o("MarianTokenizer"),Fio=o(" (Marian model)"),Tio=l(),ps=a("li"),dse=a("strong"),Mio=o("mbart"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("MBartTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("MBartTokenizerFast"),Lio=o(" (mBART model)"),yio=l(),us=a("li"),cse=a("strong"),xio=o("mbart50"),$io=o(" \u2014 "),RB=a("a"),kio=o("MBart50Tokenizer"),Sio=o(" or "),PB=a("a"),Rio=o("MBart50TokenizerFast"),Pio=o(" (mBART-50 model)"),Bio=l(),_s=a("li"),fse=a("strong"),Iio=o("megatron-bert"),Nio=o(" \u2014 "),BB=a("a"),qio=o("BertTokenizer"),jio=o(" or "),IB=a("a"),Dio=o("BertTokenizerFast"),Gio=o(" (Megatron-BERT model)"),Oio=l(),ah=a("li"),mse=a("strong"),Vio=o("mluke"),Xio=o(" \u2014 "),NB=a("a"),zio=o("MLukeTokenizer"),Wio=o(" (mLUKE model)"),Qio=l(),bs=a("li"),gse=a("strong"),Hio=o("mobilebert"),Uio=o(" \u2014 "),qB=a("a"),Jio=o("MobileBertTokenizer"),Yio=o(" or "),jB=a("a"),Kio=o("MobileBertTokenizerFast"),Zio=o(" (MobileBERT model)"),edo=l(),vs=a("li"),hse=a("strong"),odo=o("mpnet"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("MPNetTokenizer"),ado=o(" or "),GB=a("a"),ndo=o("MPNetTokenizerFast"),sdo=o(" (MPNet model)"),ldo=l(),Fs=a("li"),pse=a("strong"),ido=o("mt5"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("MT5Tokenizer"),fdo=o(" or "),VB=a("a"),mdo=o("MT5TokenizerFast"),gdo=o(" (MT5 model)"),hdo=l(),Ts=a("li"),use=a("strong"),pdo=o("nystromformer"),udo=o(" \u2014 "),XB=a("a"),_do=o("AlbertTokenizer"),bdo=o(" or "),zB=a("a"),vdo=o("AlbertTokenizerFast"),Fdo=o(" (Nystr\xF6mformer model)"),Tdo=l(),Ms=a("li"),_se=a("strong"),Mdo=o("openai-gpt"),Edo=o(" \u2014 "),WB=a("a"),Cdo=o("OpenAIGPTTokenizer"),wdo=o(" or "),QB=a("a"),Ado=o("OpenAIGPTTokenizerFast"),Ldo=o(" (OpenAI GPT model)"),ydo=l(),nh=a("li"),bse=a("strong"),xdo=o("opt"),$do=o(" \u2014 "),HB=a("a"),kdo=o("GPT2Tokenizer"),Sdo=o(" (OPT model)"),Rdo=l(),Es=a("li"),vse=a("strong"),Pdo=o("pegasus"),Bdo=o(" \u2014 "),UB=a("a"),Ido=o("PegasusTokenizer"),Ndo=o(" or "),JB=a("a"),qdo=o("PegasusTokenizerFast"),jdo=o(" (Pegasus model)"),Ddo=l(),sh=a("li"),Fse=a("strong"),Gdo=o("perceiver"),Odo=o(" \u2014 "),YB=a("a"),Vdo=o("PerceiverTokenizer"),Xdo=o(" (Perceiver model)"),zdo=l(),lh=a("li"),Tse=a("strong"),Wdo=o("phobert"),Qdo=o(" \u2014 "),KB=a("a"),Hdo=o("PhobertTokenizer"),Udo=o(" (PhoBERT model)"),Jdo=l(),ih=a("li"),Mse=a("strong"),Ydo=o("plbart"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("PLBartTokenizer"),eco=o(" (PLBart model)"),oco=l(),dh=a("li"),Ese=a("strong"),rco=o("prophetnet"),tco=o(" \u2014 "),eI=a("a"),aco=o("ProphetNetTokenizer"),nco=o(" (ProphetNet model)"),sco=l(),Cs=a("li"),Cse=a("strong"),lco=o("qdqbert"),ico=o(" \u2014 "),oI=a("a"),dco=o("BertTokenizer"),cco=o(" or "),rI=a("a"),fco=o("BertTokenizerFast"),mco=o(" (QDQBert model)"),gco=l(),ch=a("li"),wse=a("strong"),hco=o("rag"),pco=o(" \u2014 "),tI=a("a"),uco=o("RagTokenizer"),_co=o(" (RAG model)"),bco=l(),ws=a("li"),Ase=a("strong"),vco=o("realm"),Fco=o(" \u2014 "),aI=a("a"),Tco=o("RealmTokenizer"),Mco=o(" or "),nI=a("a"),Eco=o("RealmTokenizerFast"),Cco=o(" (REALM model)"),wco=l(),As=a("li"),Lse=a("strong"),Aco=o("reformer"),Lco=o(" \u2014 "),sI=a("a"),yco=o("ReformerTokenizer"),xco=o(" or "),lI=a("a"),$co=o("ReformerTokenizerFast"),kco=o(" (Reformer model)"),Sco=l(),Ls=a("li"),yse=a("strong"),Rco=o("rembert"),Pco=o(" \u2014 "),iI=a("a"),Bco=o("RemBertTokenizer"),Ico=o(" or "),dI=a("a"),Nco=o("RemBertTokenizerFast"),qco=o(" (RemBERT model)"),jco=l(),ys=a("li"),xse=a("strong"),Dco=o("retribert"),Gco=o(" \u2014 "),cI=a("a"),Oco=o("RetriBertTokenizer"),Vco=o(" or "),fI=a("a"),Xco=o("RetriBertTokenizerFast"),zco=o(" (RetriBERT model)"),Wco=l(),xs=a("li"),$se=a("strong"),Qco=o("roberta"),Hco=o(" \u2014 "),mI=a("a"),Uco=o("RobertaTokenizer"),Jco=o(" or "),gI=a("a"),Yco=o("RobertaTokenizerFast"),Kco=o(" (RoBERTa model)"),Zco=l(),$s=a("li"),kse=a("strong"),efo=o("roformer"),ofo=o(" \u2014 "),hI=a("a"),rfo=o("RoFormerTokenizer"),tfo=o(" or "),pI=a("a"),afo=o("RoFormerTokenizerFast"),nfo=o(" (RoFormer model)"),sfo=l(),fh=a("li"),Sse=a("strong"),lfo=o("speech_to_text"),ifo=o(" \u2014 "),uI=a("a"),dfo=o("Speech2TextTokenizer"),cfo=o(" (Speech2Text model)"),ffo=l(),mh=a("li"),Rse=a("strong"),mfo=o("speech_to_text_2"),gfo=o(" \u2014 "),_I=a("a"),hfo=o("Speech2Text2Tokenizer"),pfo=o(" (Speech2Text2 model)"),ufo=l(),ks=a("li"),Pse=a("strong"),_fo=o("splinter"),bfo=o(" \u2014 "),bI=a("a"),vfo=o("SplinterTokenizer"),Ffo=o(" or "),vI=a("a"),Tfo=o("SplinterTokenizerFast"),Mfo=o(" (Splinter model)"),Efo=l(),Ss=a("li"),Bse=a("strong"),Cfo=o("squeezebert"),wfo=o(" \u2014 "),FI=a("a"),Afo=o("SqueezeBertTokenizer"),Lfo=o(" or "),TI=a("a"),yfo=o("SqueezeBertTokenizerFast"),xfo=o(" (SqueezeBERT model)"),$fo=l(),Rs=a("li"),Ise=a("strong"),kfo=o("t5"),Sfo=o(" \u2014 "),MI=a("a"),Rfo=o("T5Tokenizer"),Pfo=o(" or "),EI=a("a"),Bfo=o("T5TokenizerFast"),Ifo=o(" (T5 model)"),Nfo=l(),gh=a("li"),Nse=a("strong"),qfo=o("tapas"),jfo=o(" \u2014 "),CI=a("a"),Dfo=o("TapasTokenizer"),Gfo=o(" (TAPAS model)"),Ofo=l(),hh=a("li"),qse=a("strong"),Vfo=o("tapex"),Xfo=o(" \u2014 "),wI=a("a"),zfo=o("TapexTokenizer"),Wfo=o(" (TAPEX model)"),Qfo=l(),ph=a("li"),jse=a("strong"),Hfo=o("transfo-xl"),Ufo=o(" \u2014 "),AI=a("a"),Jfo=o("TransfoXLTokenizer"),Yfo=o(" (Transformer-XL model)"),Kfo=l(),Ps=a("li"),Dse=a("strong"),Zfo=o("vilt"),emo=o(" \u2014 "),LI=a("a"),omo=o("BertTokenizer"),rmo=o(" or "),yI=a("a"),tmo=o("BertTokenizerFast"),amo=o(" (ViLT model)"),nmo=l(),Bs=a("li"),Gse=a("strong"),smo=o("visual_bert"),lmo=o(" \u2014 "),xI=a("a"),imo=o("BertTokenizer"),dmo=o(" or "),$I=a("a"),cmo=o("BertTokenizerFast"),fmo=o(" (VisualBERT model)"),mmo=l(),uh=a("li"),Ose=a("strong"),gmo=o("wav2vec2"),hmo=o(" \u2014 "),kI=a("a"),pmo=o("Wav2Vec2CTCTokenizer"),umo=o(" (Wav2Vec2 model)"),_mo=l(),_h=a("li"),Vse=a("strong"),bmo=o("wav2vec2-conformer"),vmo=o(" \u2014 "),SI=a("a"),Fmo=o("Wav2Vec2CTCTokenizer"),Tmo=o(" (Wav2Vec2-Conformer model)"),Mmo=l(),bh=a("li"),Xse=a("strong"),Emo=o("wav2vec2_phoneme"),Cmo=o(" \u2014 "),RI=a("a"),wmo=o("Wav2Vec2PhonemeCTCTokenizer"),Amo=o(" (Wav2Vec2Phoneme model)"),Lmo=l(),Is=a("li"),zse=a("strong"),ymo=o("xglm"),xmo=o(" \u2014 "),PI=a("a"),$mo=o("XGLMTokenizer"),kmo=o(" or "),BI=a("a"),Smo=o("XGLMTokenizerFast"),Rmo=o(" (XGLM model)"),Pmo=l(),vh=a("li"),Wse=a("strong"),Bmo=o("xlm"),Imo=o(" \u2014 "),II=a("a"),Nmo=o("XLMTokenizer"),qmo=o(" (XLM model)"),jmo=l(),Fh=a("li"),Qse=a("strong"),Dmo=o("xlm-prophetnet"),Gmo=o(" \u2014 "),NI=a("a"),Omo=o("XLMProphetNetTokenizer"),Vmo=o(" (XLM-ProphetNet model)"),Xmo=l(),Ns=a("li"),Hse=a("strong"),zmo=o("xlm-roberta"),Wmo=o(" \u2014 "),qI=a("a"),Qmo=o("XLMRobertaTokenizer"),Hmo=o(" or "),jI=a("a"),Umo=o("XLMRobertaTokenizerFast"),Jmo=o(" (XLM-RoBERTa model)"),Ymo=l(),qs=a("li"),Use=a("strong"),Kmo=o("xlm-roberta-xl"),Zmo=o(" \u2014 "),DI=a("a"),ego=o("RobertaTokenizer"),ogo=o(" or "),GI=a("a"),rgo=o("RobertaTokenizerFast"),tgo=o(" (XLM-RoBERTa-XL model)"),ago=l(),js=a("li"),Jse=a("strong"),ngo=o("xlnet"),sgo=o(" \u2014 "),OI=a("a"),lgo=o("XLNetTokenizer"),igo=o(" or "),VI=a("a"),dgo=o("XLNetTokenizerFast"),cgo=o(" (XLNet model)"),fgo=l(),Ds=a("li"),Yse=a("strong"),mgo=o("yoso"),ggo=o(" \u2014 "),XI=a("a"),hgo=o("AlbertTokenizer"),pgo=o(" or "),zI=a("a"),ugo=o("AlbertTokenizerFast"),_go=o(" (YOSO model)"),bgo=l(),F(Th.$$.fragment),vgo=l(),Mh=a("div"),F(RL.$$.fragment),Fgo=l(),Kse=a("p"),Tgo=o("Register a new tokenizer in this mapping."),fGe=l(),ki=a("h2"),Eh=a("a"),Zse=a("span"),F(PL.$$.fragment),Mgo=l(),ele=a("span"),Ego=o("AutoFeatureExtractor"),mGe=l(),Lo=a("div"),F(BL.$$.fragment),Cgo=l(),IL=a("p"),wgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WI=a("a"),Ago=o("AutoFeatureExtractor.from_pretrained()"),Lgo=o(" class method."),ygo=l(),NL=a("p"),xgo=o("This class cannot be instantiated directly using "),ole=a("code"),$go=o("__init__()"),kgo=o(" (throws an error)."),Sgo=l(),He=a("div"),F(qL.$$.fragment),Rgo=l(),rle=a("p"),Pgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Bgo=l(),ka=a("p"),Igo=o("The feature extractor class to instantiate is selected based on the "),tle=a("code"),Ngo=o("model_type"),qgo=o(` property of the config object
(either passed as an argument or loaded from `),ale=a("code"),jgo=o("pretrained_model_name_or_path"),Dgo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nle=a("code"),Ggo=o("pretrained_model_name_or_path"),Ogo=o(":"),Vgo=l(),Y=a("ul"),Ch=a("li"),sle=a("strong"),Xgo=o("beit"),zgo=o(" \u2014 "),QI=a("a"),Wgo=o("BeitFeatureExtractor"),Qgo=o(" (BEiT model)"),Hgo=l(),wh=a("li"),lle=a("strong"),Ugo=o("clip"),Jgo=o(" \u2014 "),HI=a("a"),Ygo=o("CLIPFeatureExtractor"),Kgo=o(" (CLIP model)"),Zgo=l(),Ah=a("li"),ile=a("strong"),eho=o("convnext"),oho=o(" \u2014 "),UI=a("a"),rho=o("ConvNextFeatureExtractor"),tho=o(" (ConvNeXT model)"),aho=l(),Lh=a("li"),dle=a("strong"),nho=o("cvt"),sho=o(" \u2014 "),JI=a("a"),lho=o("ConvNextFeatureExtractor"),iho=o(" (CvT model)"),dho=l(),yh=a("li"),cle=a("strong"),cho=o("data2vec-audio"),fho=o(" \u2014 "),YI=a("a"),mho=o("Wav2Vec2FeatureExtractor"),gho=o(" (Data2VecAudio model)"),hho=l(),xh=a("li"),fle=a("strong"),pho=o("data2vec-vision"),uho=o(" \u2014 "),KI=a("a"),_ho=o("BeitFeatureExtractor"),bho=o(" (Data2VecVision model)"),vho=l(),$h=a("li"),mle=a("strong"),Fho=o("deit"),Tho=o(" \u2014 "),ZI=a("a"),Mho=o("DeiTFeatureExtractor"),Eho=o(" (DeiT model)"),Cho=l(),kh=a("li"),gle=a("strong"),who=o("detr"),Aho=o(" \u2014 "),eN=a("a"),Lho=o("DetrFeatureExtractor"),yho=o(" (DETR model)"),xho=l(),Sh=a("li"),hle=a("strong"),$ho=o("dpt"),kho=o(" \u2014 "),oN=a("a"),Sho=o("DPTFeatureExtractor"),Rho=o(" (DPT model)"),Pho=l(),Rh=a("li"),ple=a("strong"),Bho=o("flava"),Iho=o(" \u2014 "),rN=a("a"),Nho=o("FlavaFeatureExtractor"),qho=o(" (FLAVA model)"),jho=l(),Ph=a("li"),ule=a("strong"),Dho=o("glpn"),Gho=o(" \u2014 "),tN=a("a"),Oho=o("GLPNFeatureExtractor"),Vho=o(" (GLPN model)"),Xho=l(),Bh=a("li"),_le=a("strong"),zho=o("hubert"),Who=o(" \u2014 "),aN=a("a"),Qho=o("Wav2Vec2FeatureExtractor"),Hho=o(" (Hubert model)"),Uho=l(),Ih=a("li"),ble=a("strong"),Jho=o("imagegpt"),Yho=o(" \u2014 "),nN=a("a"),Kho=o("ImageGPTFeatureExtractor"),Zho=o(" (ImageGPT model)"),epo=l(),Nh=a("li"),vle=a("strong"),opo=o("layoutlmv2"),rpo=o(" \u2014 "),sN=a("a"),tpo=o("LayoutLMv2FeatureExtractor"),apo=o(" (LayoutLMv2 model)"),npo=l(),qh=a("li"),Fle=a("strong"),spo=o("layoutlmv3"),lpo=o(" \u2014 "),lN=a("a"),ipo=o("LayoutLMv3FeatureExtractor"),dpo=o(" (LayoutLMv3 model)"),cpo=l(),jh=a("li"),Tle=a("strong"),fpo=o("levit"),mpo=o(" \u2014 "),iN=a("a"),gpo=o("LevitFeatureExtractor"),hpo=o(" (LeViT model)"),ppo=l(),Dh=a("li"),Mle=a("strong"),upo=o("maskformer"),_po=o(" \u2014 "),dN=a("a"),bpo=o("MaskFormerFeatureExtractor"),vpo=o(" (MaskFormer model)"),Fpo=l(),Gh=a("li"),Ele=a("strong"),Tpo=o("mctct"),Mpo=o(" \u2014 "),cN=a("a"),Epo=o("MCTCTFeatureExtractor"),Cpo=o(" (M-CTC-T model)"),wpo=l(),Oh=a("li"),Cle=a("strong"),Apo=o("perceiver"),Lpo=o(" \u2014 "),fN=a("a"),ypo=o("PerceiverFeatureExtractor"),xpo=o(" (Perceiver model)"),$po=l(),Vh=a("li"),wle=a("strong"),kpo=o("poolformer"),Spo=o(" \u2014 "),mN=a("a"),Rpo=o("PoolFormerFeatureExtractor"),Ppo=o(" (PoolFormer model)"),Bpo=l(),Xh=a("li"),Ale=a("strong"),Ipo=o("regnet"),Npo=o(" \u2014 "),gN=a("a"),qpo=o("ConvNextFeatureExtractor"),jpo=o(" (RegNet model)"),Dpo=l(),zh=a("li"),Lle=a("strong"),Gpo=o("resnet"),Opo=o(" \u2014 "),hN=a("a"),Vpo=o("ConvNextFeatureExtractor"),Xpo=o(" (ResNet model)"),zpo=l(),Wh=a("li"),yle=a("strong"),Wpo=o("segformer"),Qpo=o(" \u2014 "),pN=a("a"),Hpo=o("SegformerFeatureExtractor"),Upo=o(" (SegFormer model)"),Jpo=l(),Qh=a("li"),xle=a("strong"),Ypo=o("speech_to_text"),Kpo=o(" \u2014 "),uN=a("a"),Zpo=o("Speech2TextFeatureExtractor"),euo=o(" (Speech2Text model)"),ouo=l(),Hh=a("li"),$le=a("strong"),ruo=o("swin"),tuo=o(" \u2014 "),_N=a("a"),auo=o("ViTFeatureExtractor"),nuo=o(" (Swin Transformer model)"),suo=l(),Uh=a("li"),kle=a("strong"),luo=o("van"),iuo=o(" \u2014 "),bN=a("a"),duo=o("ConvNextFeatureExtractor"),cuo=o(" (VAN model)"),fuo=l(),Jh=a("li"),Sle=a("strong"),muo=o("vilt"),guo=o(" \u2014 "),vN=a("a"),huo=o("ViltFeatureExtractor"),puo=o(" (ViLT model)"),uuo=l(),Yh=a("li"),Rle=a("strong"),_uo=o("vit"),buo=o(" \u2014 "),FN=a("a"),vuo=o("ViTFeatureExtractor"),Fuo=o(" (ViT model)"),Tuo=l(),Kh=a("li"),Ple=a("strong"),Muo=o("vit_mae"),Euo=o(" \u2014 "),TN=a("a"),Cuo=o("ViTFeatureExtractor"),wuo=o(" (ViTMAE model)"),Auo=l(),Zh=a("li"),Ble=a("strong"),Luo=o("wav2vec2"),yuo=o(" \u2014 "),MN=a("a"),xuo=o("Wav2Vec2FeatureExtractor"),$uo=o(" (Wav2Vec2 model)"),kuo=l(),ep=a("li"),Ile=a("strong"),Suo=o("wav2vec2-conformer"),Ruo=o(" \u2014 "),EN=a("a"),Puo=o("Wav2Vec2FeatureExtractor"),Buo=o(" (Wav2Vec2-Conformer model)"),Iuo=l(),op=a("li"),Nle=a("strong"),Nuo=o("yolos"),quo=o(" \u2014 "),CN=a("a"),juo=o("YolosFeatureExtractor"),Duo=o(" (YOLOS model)"),Guo=l(),F(rp.$$.fragment),Ouo=l(),F(tp.$$.fragment),Vuo=l(),ap=a("div"),F(jL.$$.fragment),Xuo=l(),qle=a("p"),zuo=o("Register a new feature extractor for this class."),gGe=l(),Si=a("h2"),np=a("a"),jle=a("span"),F(DL.$$.fragment),Wuo=l(),Dle=a("span"),Quo=o("AutoProcessor"),hGe=l(),yo=a("div"),F(GL.$$.fragment),Huo=l(),OL=a("p"),Uuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wN=a("a"),Juo=o("AutoProcessor.from_pretrained()"),Yuo=o(" class method."),Kuo=l(),VL=a("p"),Zuo=o("This class cannot be instantiated directly using "),Gle=a("code"),e_o=o("__init__()"),o_o=o(" (throws an error)."),r_o=l(),Ue=a("div"),F(XL.$$.fragment),t_o=l(),Ole=a("p"),a_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),n_o=l(),Ri=a("p"),s_o=o("The processor class to instantiate is selected based on the "),Vle=a("code"),l_o=o("model_type"),i_o=o(` property of the config object (either
passed as an argument or loaded from `),Xle=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(" if possible):"),f_o=l(),he=a("ul"),sp=a("li"),zle=a("strong"),m_o=o("clip"),g_o=o(" \u2014 "),AN=a("a"),h_o=o("CLIPProcessor"),p_o=o(" (CLIP model)"),u_o=l(),lp=a("li"),Wle=a("strong"),__o=o("flava"),b_o=o(" \u2014 "),Qle=a("code"),v_o=o("FLAVAProcessor"),F_o=o(" (FLAVA model)"),T_o=l(),ip=a("li"),Hle=a("strong"),M_o=o("layoutlmv2"),E_o=o(" \u2014 "),LN=a("a"),C_o=o("LayoutLMv2Processor"),w_o=o(" (LayoutLMv2 model)"),A_o=l(),dp=a("li"),Ule=a("strong"),L_o=o("layoutlmv3"),y_o=o(" \u2014 "),yN=a("a"),x_o=o("LayoutLMv3Processor"),$_o=o(" (LayoutLMv3 model)"),k_o=l(),cp=a("li"),Jle=a("strong"),S_o=o("layoutxlm"),R_o=o(" \u2014 "),xN=a("a"),P_o=o("LayoutXLMProcessor"),B_o=o(" (LayoutXLM model)"),I_o=l(),fp=a("li"),Yle=a("strong"),N_o=o("sew"),q_o=o(" \u2014 "),$N=a("a"),j_o=o("Wav2Vec2Processor"),D_o=o(" (SEW model)"),G_o=l(),mp=a("li"),Kle=a("strong"),O_o=o("sew-d"),V_o=o(" \u2014 "),kN=a("a"),X_o=o("Wav2Vec2Processor"),z_o=o(" (SEW-D model)"),W_o=l(),gp=a("li"),Zle=a("strong"),Q_o=o("speech_to_text"),H_o=o(" \u2014 "),SN=a("a"),U_o=o("Speech2TextProcessor"),J_o=o(" (Speech2Text model)"),Y_o=l(),hp=a("li"),eie=a("strong"),K_o=o("speech_to_text_2"),Z_o=o(" \u2014 "),RN=a("a"),e7o=o("Speech2Text2Processor"),o7o=o(" (Speech2Text2 model)"),r7o=l(),pp=a("li"),oie=a("strong"),t7o=o("trocr"),a7o=o(" \u2014 "),PN=a("a"),n7o=o("TrOCRProcessor"),s7o=o(" (TrOCR model)"),l7o=l(),up=a("li"),rie=a("strong"),i7o=o("unispeech"),d7o=o(" \u2014 "),BN=a("a"),c7o=o("Wav2Vec2Processor"),f7o=o(" (UniSpeech model)"),m7o=l(),_p=a("li"),tie=a("strong"),g7o=o("unispeech-sat"),h7o=o(" \u2014 "),IN=a("a"),p7o=o("Wav2Vec2Processor"),u7o=o(" (UniSpeechSat model)"),_7o=l(),bp=a("li"),aie=a("strong"),b7o=o("vilt"),v7o=o(" \u2014 "),NN=a("a"),F7o=o("ViltProcessor"),T7o=o(" (ViLT model)"),M7o=l(),vp=a("li"),nie=a("strong"),E7o=o("vision-text-dual-encoder"),C7o=o(" \u2014 "),qN=a("a"),w7o=o("VisionTextDualEncoderProcessor"),A7o=o(" (VisionTextDualEncoder model)"),L7o=l(),Fp=a("li"),sie=a("strong"),y7o=o("wav2vec2"),x7o=o(" \u2014 "),jN=a("a"),$7o=o("Wav2Vec2Processor"),k7o=o(" (Wav2Vec2 model)"),S7o=l(),Tp=a("li"),lie=a("strong"),R7o=o("wav2vec2-conformer"),P7o=o(" \u2014 "),DN=a("a"),B7o=o("Wav2Vec2Processor"),I7o=o(" (Wav2Vec2-Conformer model)"),N7o=l(),Mp=a("li"),iie=a("strong"),q7o=o("wavlm"),j7o=o(" \u2014 "),GN=a("a"),D7o=o("Wav2Vec2Processor"),G7o=o(" (WavLM model)"),O7o=l(),F(Ep.$$.fragment),V7o=l(),F(Cp.$$.fragment),X7o=l(),wp=a("div"),F(zL.$$.fragment),z7o=l(),die=a("p"),W7o=o("Register a new processor for this class."),pGe=l(),Pi=a("h2"),Ap=a("a"),cie=a("span"),F(WL.$$.fragment),Q7o=l(),fie=a("span"),H7o=o("AutoModel"),uGe=l(),xo=a("div"),F(QL.$$.fragment),U7o=l(),Bi=a("p"),J7o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ON=a("a"),Y7o=o("from_pretrained()"),K7o=o(" class method or the "),VN=a("a"),Z7o=o("from_config()"),e1o=o(` class
method.`),o1o=l(),HL=a("p"),r1o=o("This class cannot be instantiated directly using "),mie=a("code"),t1o=o("__init__()"),a1o=o(" (throws an error)."),n1o=l(),nt=a("div"),F(UL.$$.fragment),s1o=l(),gie=a("p"),l1o=o("Instantiates one of the base model classes of the library from a configuration."),i1o=l(),Ii=a("p"),d1o=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),c1o=o("not"),f1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),m1o=o("from_pretrained()"),g1o=o(" to load the model weights."),h1o=l(),F(Lp.$$.fragment),p1o=l(),Je=a("div"),F(JL.$$.fragment),u1o=l(),pie=a("p"),_1o=o("Instantiate one of the base model classes of the library from a pretrained model."),b1o=l(),Sa=a("p"),v1o=o("The model class to instantiate is selected based on the "),uie=a("code"),F1o=o("model_type"),T1o=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),M1o=o("pretrained_model_name_or_path"),E1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),C1o=o("pretrained_model_name_or_path"),w1o=o(":"),A1o=l(),x=a("ul"),yp=a("li"),vie=a("strong"),L1o=o("albert"),y1o=o(" \u2014 "),zN=a("a"),x1o=o("AlbertModel"),$1o=o(" (ALBERT model)"),k1o=l(),xp=a("li"),Fie=a("strong"),S1o=o("bart"),R1o=o(" \u2014 "),WN=a("a"),P1o=o("BartModel"),B1o=o(" (BART model)"),I1o=l(),$p=a("li"),Tie=a("strong"),N1o=o("beit"),q1o=o(" \u2014 "),QN=a("a"),j1o=o("BeitModel"),D1o=o(" (BEiT model)"),G1o=l(),kp=a("li"),Mie=a("strong"),O1o=o("bert"),V1o=o(" \u2014 "),HN=a("a"),X1o=o("BertModel"),z1o=o(" (BERT model)"),W1o=l(),Sp=a("li"),Eie=a("strong"),Q1o=o("bert-generation"),H1o=o(" \u2014 "),UN=a("a"),U1o=o("BertGenerationEncoder"),J1o=o(" (Bert Generation model)"),Y1o=l(),Rp=a("li"),Cie=a("strong"),K1o=o("big_bird"),Z1o=o(" \u2014 "),JN=a("a"),e2o=o("BigBirdModel"),o2o=o(" (BigBird model)"),r2o=l(),Pp=a("li"),wie=a("strong"),t2o=o("bigbird_pegasus"),a2o=o(" \u2014 "),YN=a("a"),n2o=o("BigBirdPegasusModel"),s2o=o(" (BigBird-Pegasus model)"),l2o=l(),Bp=a("li"),Aie=a("strong"),i2o=o("blenderbot"),d2o=o(" \u2014 "),KN=a("a"),c2o=o("BlenderbotModel"),f2o=o(" (Blenderbot model)"),m2o=l(),Ip=a("li"),Lie=a("strong"),g2o=o("blenderbot-small"),h2o=o(" \u2014 "),ZN=a("a"),p2o=o("BlenderbotSmallModel"),u2o=o(" (BlenderbotSmall model)"),_2o=l(),Np=a("li"),yie=a("strong"),b2o=o("bloom"),v2o=o(" \u2014 "),eq=a("a"),F2o=o("BloomModel"),T2o=o(" (BLOOM model)"),M2o=l(),qp=a("li"),xie=a("strong"),E2o=o("camembert"),C2o=o(" \u2014 "),oq=a("a"),w2o=o("CamembertModel"),A2o=o(" (CamemBERT model)"),L2o=l(),jp=a("li"),$ie=a("strong"),y2o=o("canine"),x2o=o(" \u2014 "),rq=a("a"),$2o=o("CanineModel"),k2o=o(" (CANINE model)"),S2o=l(),Dp=a("li"),kie=a("strong"),R2o=o("clip"),P2o=o(" \u2014 "),tq=a("a"),B2o=o("CLIPModel"),I2o=o(" (CLIP model)"),N2o=l(),Gp=a("li"),Sie=a("strong"),q2o=o("convbert"),j2o=o(" \u2014 "),aq=a("a"),D2o=o("ConvBertModel"),G2o=o(" (ConvBERT model)"),O2o=l(),Op=a("li"),Rie=a("strong"),V2o=o("convnext"),X2o=o(" \u2014 "),nq=a("a"),z2o=o("ConvNextModel"),W2o=o(" (ConvNeXT model)"),Q2o=l(),Vp=a("li"),Pie=a("strong"),H2o=o("ctrl"),U2o=o(" \u2014 "),sq=a("a"),J2o=o("CTRLModel"),Y2o=o(" (CTRL model)"),K2o=l(),Xp=a("li"),Bie=a("strong"),Z2o=o("cvt"),ebo=o(" \u2014 "),lq=a("a"),obo=o("CvtModel"),rbo=o(" (CvT model)"),tbo=l(),zp=a("li"),Iie=a("strong"),abo=o("data2vec-audio"),nbo=o(" \u2014 "),iq=a("a"),sbo=o("Data2VecAudioModel"),lbo=o(" (Data2VecAudio model)"),ibo=l(),Wp=a("li"),Nie=a("strong"),dbo=o("data2vec-text"),cbo=o(" \u2014 "),dq=a("a"),fbo=o("Data2VecTextModel"),mbo=o(" (Data2VecText model)"),gbo=l(),Qp=a("li"),qie=a("strong"),hbo=o("data2vec-vision"),pbo=o(" \u2014 "),cq=a("a"),ubo=o("Data2VecVisionModel"),_bo=o(" (Data2VecVision model)"),bbo=l(),Hp=a("li"),jie=a("strong"),vbo=o("deberta"),Fbo=o(" \u2014 "),fq=a("a"),Tbo=o("DebertaModel"),Mbo=o(" (DeBERTa model)"),Ebo=l(),Up=a("li"),Die=a("strong"),Cbo=o("deberta-v2"),wbo=o(" \u2014 "),mq=a("a"),Abo=o("DebertaV2Model"),Lbo=o(" (DeBERTa-v2 model)"),ybo=l(),Jp=a("li"),Gie=a("strong"),xbo=o("decision_transformer"),$bo=o(" \u2014 "),gq=a("a"),kbo=o("DecisionTransformerModel"),Sbo=o(" (Decision Transformer model)"),Rbo=l(),Yp=a("li"),Oie=a("strong"),Pbo=o("deit"),Bbo=o(" \u2014 "),hq=a("a"),Ibo=o("DeiTModel"),Nbo=o(" (DeiT model)"),qbo=l(),Kp=a("li"),Vie=a("strong"),jbo=o("detr"),Dbo=o(" \u2014 "),pq=a("a"),Gbo=o("DetrModel"),Obo=o(" (DETR model)"),Vbo=l(),Zp=a("li"),Xie=a("strong"),Xbo=o("distilbert"),zbo=o(" \u2014 "),uq=a("a"),Wbo=o("DistilBertModel"),Qbo=o(" (DistilBERT model)"),Hbo=l(),eu=a("li"),zie=a("strong"),Ubo=o("dpr"),Jbo=o(" \u2014 "),_q=a("a"),Ybo=o("DPRQuestionEncoder"),Kbo=o(" (DPR model)"),Zbo=l(),ou=a("li"),Wie=a("strong"),evo=o("dpt"),ovo=o(" \u2014 "),bq=a("a"),rvo=o("DPTModel"),tvo=o(" (DPT model)"),avo=l(),ru=a("li"),Qie=a("strong"),nvo=o("electra"),svo=o(" \u2014 "),vq=a("a"),lvo=o("ElectraModel"),ivo=o(" (ELECTRA model)"),dvo=l(),tu=a("li"),Hie=a("strong"),cvo=o("flaubert"),fvo=o(" \u2014 "),Fq=a("a"),mvo=o("FlaubertModel"),gvo=o(" (FlauBERT model)"),hvo=l(),au=a("li"),Uie=a("strong"),pvo=o("flava"),uvo=o(" \u2014 "),Tq=a("a"),_vo=o("FlavaModel"),bvo=o(" (FLAVA model)"),vvo=l(),nu=a("li"),Jie=a("strong"),Fvo=o("fnet"),Tvo=o(" \u2014 "),Mq=a("a"),Mvo=o("FNetModel"),Evo=o(" (FNet model)"),Cvo=l(),su=a("li"),Yie=a("strong"),wvo=o("fsmt"),Avo=o(" \u2014 "),Eq=a("a"),Lvo=o("FSMTModel"),yvo=o(" (FairSeq Machine-Translation model)"),xvo=l(),Gs=a("li"),Kie=a("strong"),$vo=o("funnel"),kvo=o(" \u2014 "),Cq=a("a"),Svo=o("FunnelModel"),Rvo=o(" or "),wq=a("a"),Pvo=o("FunnelBaseModel"),Bvo=o(" (Funnel Transformer model)"),Ivo=l(),lu=a("li"),Zie=a("strong"),Nvo=o("glpn"),qvo=o(" \u2014 "),Aq=a("a"),jvo=o("GLPNModel"),Dvo=o(" (GLPN model)"),Gvo=l(),iu=a("li"),ede=a("strong"),Ovo=o("gpt2"),Vvo=o(" \u2014 "),Lq=a("a"),Xvo=o("GPT2Model"),zvo=o(" (OpenAI GPT-2 model)"),Wvo=l(),du=a("li"),ode=a("strong"),Qvo=o("gpt_neo"),Hvo=o(" \u2014 "),yq=a("a"),Uvo=o("GPTNeoModel"),Jvo=o(" (GPT Neo model)"),Yvo=l(),cu=a("li"),rde=a("strong"),Kvo=o("gpt_neox"),Zvo=o(" \u2014 "),xq=a("a"),e0o=o("GPTNeoXModel"),o0o=o(" (GPT NeoX model)"),r0o=l(),fu=a("li"),tde=a("strong"),t0o=o("gptj"),a0o=o(" \u2014 "),$q=a("a"),n0o=o("GPTJModel"),s0o=o(" (GPT-J model)"),l0o=l(),mu=a("li"),ade=a("strong"),i0o=o("hubert"),d0o=o(" \u2014 "),kq=a("a"),c0o=o("HubertModel"),f0o=o(" (Hubert model)"),m0o=l(),gu=a("li"),nde=a("strong"),g0o=o("ibert"),h0o=o(" \u2014 "),Sq=a("a"),p0o=o("IBertModel"),u0o=o(" (I-BERT model)"),_0o=l(),hu=a("li"),sde=a("strong"),b0o=o("imagegpt"),v0o=o(" \u2014 "),Rq=a("a"),F0o=o("ImageGPTModel"),T0o=o(" (ImageGPT model)"),M0o=l(),pu=a("li"),lde=a("strong"),E0o=o("layoutlm"),C0o=o(" \u2014 "),Pq=a("a"),w0o=o("LayoutLMModel"),A0o=o(" (LayoutLM model)"),L0o=l(),uu=a("li"),ide=a("strong"),y0o=o("layoutlmv2"),x0o=o(" \u2014 "),Bq=a("a"),$0o=o("LayoutLMv2Model"),k0o=o(" (LayoutLMv2 model)"),S0o=l(),_u=a("li"),dde=a("strong"),R0o=o("layoutlmv3"),P0o=o(" \u2014 "),Iq=a("a"),B0o=o("LayoutLMv3Model"),I0o=o(" (LayoutLMv3 model)"),N0o=l(),bu=a("li"),cde=a("strong"),q0o=o("led"),j0o=o(" \u2014 "),Nq=a("a"),D0o=o("LEDModel"),G0o=o(" (LED model)"),O0o=l(),vu=a("li"),fde=a("strong"),V0o=o("levit"),X0o=o(" \u2014 "),qq=a("a"),z0o=o("LevitModel"),W0o=o(" (LeViT model)"),Q0o=l(),Fu=a("li"),mde=a("strong"),H0o=o("longformer"),U0o=o(" \u2014 "),jq=a("a"),J0o=o("LongformerModel"),Y0o=o(" (Longformer model)"),K0o=l(),Tu=a("li"),gde=a("strong"),Z0o=o("longt5"),eFo=o(" \u2014 "),Dq=a("a"),oFo=o("LongT5Model"),rFo=o(" (LongT5 model)"),tFo=l(),Mu=a("li"),hde=a("strong"),aFo=o("luke"),nFo=o(" \u2014 "),Gq=a("a"),sFo=o("LukeModel"),lFo=o(" (LUKE model)"),iFo=l(),Eu=a("li"),pde=a("strong"),dFo=o("lxmert"),cFo=o(" \u2014 "),Oq=a("a"),fFo=o("LxmertModel"),mFo=o(" (LXMERT model)"),gFo=l(),Cu=a("li"),ude=a("strong"),hFo=o("m2m_100"),pFo=o(" \u2014 "),Vq=a("a"),uFo=o("M2M100Model"),_Fo=o(" (M2M100 model)"),bFo=l(),wu=a("li"),_de=a("strong"),vFo=o("marian"),FFo=o(" \u2014 "),Xq=a("a"),TFo=o("MarianModel"),MFo=o(" (Marian model)"),EFo=l(),Au=a("li"),bde=a("strong"),CFo=o("maskformer"),wFo=o(" \u2014 "),zq=a("a"),AFo=o("MaskFormerModel"),LFo=o(" (MaskFormer model)"),yFo=l(),Lu=a("li"),vde=a("strong"),xFo=o("mbart"),$Fo=o(" \u2014 "),Wq=a("a"),kFo=o("MBartModel"),SFo=o(" (mBART model)"),RFo=l(),yu=a("li"),Fde=a("strong"),PFo=o("mctct"),BFo=o(" \u2014 "),Qq=a("a"),IFo=o("MCTCTModel"),NFo=o(" (M-CTC-T model)"),qFo=l(),xu=a("li"),Tde=a("strong"),jFo=o("megatron-bert"),DFo=o(" \u2014 "),Hq=a("a"),GFo=o("MegatronBertModel"),OFo=o(" (Megatron-BERT model)"),VFo=l(),$u=a("li"),Mde=a("strong"),XFo=o("mobilebert"),zFo=o(" \u2014 "),Uq=a("a"),WFo=o("MobileBertModel"),QFo=o(" (MobileBERT model)"),HFo=l(),ku=a("li"),Ede=a("strong"),UFo=o("mpnet"),JFo=o(" \u2014 "),Jq=a("a"),YFo=o("MPNetModel"),KFo=o(" (MPNet model)"),ZFo=l(),Su=a("li"),Cde=a("strong"),eTo=o("mt5"),oTo=o(" \u2014 "),Yq=a("a"),rTo=o("MT5Model"),tTo=o(" (MT5 model)"),aTo=l(),Ru=a("li"),wde=a("strong"),nTo=o("nystromformer"),sTo=o(" \u2014 "),Kq=a("a"),lTo=o("NystromformerModel"),iTo=o(" (Nystr\xF6mformer model)"),dTo=l(),Pu=a("li"),Ade=a("strong"),cTo=o("openai-gpt"),fTo=o(" \u2014 "),Zq=a("a"),mTo=o("OpenAIGPTModel"),gTo=o(" (OpenAI GPT model)"),hTo=l(),Bu=a("li"),Lde=a("strong"),pTo=o("opt"),uTo=o(" \u2014 "),ej=a("a"),_To=o("OPTModel"),bTo=o(" (OPT model)"),vTo=l(),Iu=a("li"),yde=a("strong"),FTo=o("pegasus"),TTo=o(" \u2014 "),oj=a("a"),MTo=o("PegasusModel"),ETo=o(" (Pegasus model)"),CTo=l(),Nu=a("li"),xde=a("strong"),wTo=o("perceiver"),ATo=o(" \u2014 "),rj=a("a"),LTo=o("PerceiverModel"),yTo=o(" (Perceiver model)"),xTo=l(),qu=a("li"),$de=a("strong"),$To=o("plbart"),kTo=o(" \u2014 "),tj=a("a"),STo=o("PLBartModel"),RTo=o(" (PLBart model)"),PTo=l(),ju=a("li"),kde=a("strong"),BTo=o("poolformer"),ITo=o(" \u2014 "),aj=a("a"),NTo=o("PoolFormerModel"),qTo=o(" (PoolFormer model)"),jTo=l(),Du=a("li"),Sde=a("strong"),DTo=o("prophetnet"),GTo=o(" \u2014 "),nj=a("a"),OTo=o("ProphetNetModel"),VTo=o(" (ProphetNet model)"),XTo=l(),Gu=a("li"),Rde=a("strong"),zTo=o("qdqbert"),WTo=o(" \u2014 "),sj=a("a"),QTo=o("QDQBertModel"),HTo=o(" (QDQBert model)"),UTo=l(),Ou=a("li"),Pde=a("strong"),JTo=o("reformer"),YTo=o(" \u2014 "),lj=a("a"),KTo=o("ReformerModel"),ZTo=o(" (Reformer model)"),eMo=l(),Vu=a("li"),Bde=a("strong"),oMo=o("regnet"),rMo=o(" \u2014 "),ij=a("a"),tMo=o("RegNetModel"),aMo=o(" (RegNet model)"),nMo=l(),Xu=a("li"),Ide=a("strong"),sMo=o("rembert"),lMo=o(" \u2014 "),dj=a("a"),iMo=o("RemBertModel"),dMo=o(" (RemBERT model)"),cMo=l(),zu=a("li"),Nde=a("strong"),fMo=o("resnet"),mMo=o(" \u2014 "),cj=a("a"),gMo=o("ResNetModel"),hMo=o(" (ResNet model)"),pMo=l(),Wu=a("li"),qde=a("strong"),uMo=o("retribert"),_Mo=o(" \u2014 "),fj=a("a"),bMo=o("RetriBertModel"),vMo=o(" (RetriBERT model)"),FMo=l(),Qu=a("li"),jde=a("strong"),TMo=o("roberta"),MMo=o(" \u2014 "),mj=a("a"),EMo=o("RobertaModel"),CMo=o(" (RoBERTa model)"),wMo=l(),Hu=a("li"),Dde=a("strong"),AMo=o("roformer"),LMo=o(" \u2014 "),gj=a("a"),yMo=o("RoFormerModel"),xMo=o(" (RoFormer model)"),$Mo=l(),Uu=a("li"),Gde=a("strong"),kMo=o("segformer"),SMo=o(" \u2014 "),hj=a("a"),RMo=o("SegformerModel"),PMo=o(" (SegFormer model)"),BMo=l(),Ju=a("li"),Ode=a("strong"),IMo=o("sew"),NMo=o(" \u2014 "),pj=a("a"),qMo=o("SEWModel"),jMo=o(" (SEW model)"),DMo=l(),Yu=a("li"),Vde=a("strong"),GMo=o("sew-d"),OMo=o(" \u2014 "),uj=a("a"),VMo=o("SEWDModel"),XMo=o(" (SEW-D model)"),zMo=l(),Ku=a("li"),Xde=a("strong"),WMo=o("speech_to_text"),QMo=o(" \u2014 "),_j=a("a"),HMo=o("Speech2TextModel"),UMo=o(" (Speech2Text model)"),JMo=l(),Zu=a("li"),zde=a("strong"),YMo=o("splinter"),KMo=o(" \u2014 "),bj=a("a"),ZMo=o("SplinterModel"),e4o=o(" (Splinter model)"),o4o=l(),e_=a("li"),Wde=a("strong"),r4o=o("squeezebert"),t4o=o(" \u2014 "),vj=a("a"),a4o=o("SqueezeBertModel"),n4o=o(" (SqueezeBERT model)"),s4o=l(),o_=a("li"),Qde=a("strong"),l4o=o("swin"),i4o=o(" \u2014 "),Fj=a("a"),d4o=o("SwinModel"),c4o=o(" (Swin Transformer model)"),f4o=l(),r_=a("li"),Hde=a("strong"),m4o=o("t5"),g4o=o(" \u2014 "),Tj=a("a"),h4o=o("T5Model"),p4o=o(" (T5 model)"),u4o=l(),t_=a("li"),Ude=a("strong"),_4o=o("tapas"),b4o=o(" \u2014 "),Mj=a("a"),v4o=o("TapasModel"),F4o=o(" (TAPAS model)"),T4o=l(),a_=a("li"),Jde=a("strong"),M4o=o("trajectory_transformer"),E4o=o(" \u2014 "),Ej=a("a"),C4o=o("TrajectoryTransformerModel"),w4o=o(" (Trajectory Transformer model)"),A4o=l(),n_=a("li"),Yde=a("strong"),L4o=o("transfo-xl"),y4o=o(" \u2014 "),Cj=a("a"),x4o=o("TransfoXLModel"),$4o=o(" (Transformer-XL model)"),k4o=l(),s_=a("li"),Kde=a("strong"),S4o=o("unispeech"),R4o=o(" \u2014 "),wj=a("a"),P4o=o("UniSpeechModel"),B4o=o(" (UniSpeech model)"),I4o=l(),l_=a("li"),Zde=a("strong"),N4o=o("unispeech-sat"),q4o=o(" \u2014 "),Aj=a("a"),j4o=o("UniSpeechSatModel"),D4o=o(" (UniSpeechSat model)"),G4o=l(),i_=a("li"),ece=a("strong"),O4o=o("van"),V4o=o(" \u2014 "),Lj=a("a"),X4o=o("VanModel"),z4o=o(" (VAN model)"),W4o=l(),d_=a("li"),oce=a("strong"),Q4o=o("vilt"),H4o=o(" \u2014 "),yj=a("a"),U4o=o("ViltModel"),J4o=o(" (ViLT model)"),Y4o=l(),c_=a("li"),rce=a("strong"),K4o=o("vision-text-dual-encoder"),Z4o=o(" \u2014 "),xj=a("a"),eEo=o("VisionTextDualEncoderModel"),oEo=o(" (VisionTextDualEncoder model)"),rEo=l(),f_=a("li"),tce=a("strong"),tEo=o("visual_bert"),aEo=o(" \u2014 "),$j=a("a"),nEo=o("VisualBertModel"),sEo=o(" (VisualBERT model)"),lEo=l(),m_=a("li"),ace=a("strong"),iEo=o("vit"),dEo=o(" \u2014 "),kj=a("a"),cEo=o("ViTModel"),fEo=o(" (ViT model)"),mEo=l(),g_=a("li"),nce=a("strong"),gEo=o("vit_mae"),hEo=o(" \u2014 "),Sj=a("a"),pEo=o("ViTMAEModel"),uEo=o(" (ViTMAE model)"),_Eo=l(),h_=a("li"),sce=a("strong"),bEo=o("wav2vec2"),vEo=o(" \u2014 "),Rj=a("a"),FEo=o("Wav2Vec2Model"),TEo=o(" (Wav2Vec2 model)"),MEo=l(),p_=a("li"),lce=a("strong"),EEo=o("wav2vec2-conformer"),CEo=o(" \u2014 "),Pj=a("a"),wEo=o("Wav2Vec2ConformerModel"),AEo=o(" (Wav2Vec2-Conformer model)"),LEo=l(),u_=a("li"),ice=a("strong"),yEo=o("wavlm"),xEo=o(" \u2014 "),Bj=a("a"),$Eo=o("WavLMModel"),kEo=o(" (WavLM model)"),SEo=l(),__=a("li"),dce=a("strong"),REo=o("xglm"),PEo=o(" \u2014 "),Ij=a("a"),BEo=o("XGLMModel"),IEo=o(" (XGLM model)"),NEo=l(),b_=a("li"),cce=a("strong"),qEo=o("xlm"),jEo=o(" \u2014 "),Nj=a("a"),DEo=o("XLMModel"),GEo=o(" (XLM model)"),OEo=l(),v_=a("li"),fce=a("strong"),VEo=o("xlm-prophetnet"),XEo=o(" \u2014 "),qj=a("a"),zEo=o("XLMProphetNetModel"),WEo=o(" (XLM-ProphetNet model)"),QEo=l(),F_=a("li"),mce=a("strong"),HEo=o("xlm-roberta"),UEo=o(" \u2014 "),jj=a("a"),JEo=o("XLMRobertaModel"),YEo=o(" (XLM-RoBERTa model)"),KEo=l(),T_=a("li"),gce=a("strong"),ZEo=o("xlm-roberta-xl"),eCo=o(" \u2014 "),Dj=a("a"),oCo=o("XLMRobertaXLModel"),rCo=o(" (XLM-RoBERTa-XL model)"),tCo=l(),M_=a("li"),hce=a("strong"),aCo=o("xlnet"),nCo=o(" \u2014 "),Gj=a("a"),sCo=o("XLNetModel"),lCo=o(" (XLNet model)"),iCo=l(),E_=a("li"),pce=a("strong"),dCo=o("yolos"),cCo=o(" \u2014 "),Oj=a("a"),fCo=o("YolosModel"),mCo=o(" (YOLOS model)"),gCo=l(),C_=a("li"),uce=a("strong"),hCo=o("yoso"),pCo=o(" \u2014 "),Vj=a("a"),uCo=o("YosoModel"),_Co=o(" (YOSO model)"),bCo=l(),w_=a("p"),vCo=o("The model is set in evaluation mode by default using "),_ce=a("code"),FCo=o("model.eval()"),TCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=a("code"),MCo=o("model.train()"),ECo=l(),F(A_.$$.fragment),_Ge=l(),Ni=a("h2"),L_=a("a"),vce=a("span"),F(YL.$$.fragment),CCo=l(),Fce=a("span"),wCo=o("AutoModelForPreTraining"),bGe=l(),$o=a("div"),F(KL.$$.fragment),ACo=l(),qi=a("p"),LCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xj=a("a"),yCo=o("from_pretrained()"),xCo=o(" class method or the "),zj=a("a"),$Co=o("from_config()"),kCo=o(` class
method.`),SCo=l(),ZL=a("p"),RCo=o("This class cannot be instantiated directly using "),Tce=a("code"),PCo=o("__init__()"),BCo=o(" (throws an error)."),ICo=l(),st=a("div"),F(ey.$$.fragment),NCo=l(),Mce=a("p"),qCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jCo=l(),ji=a("p"),DCo=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),GCo=o("not"),OCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=a("a"),VCo=o("from_pretrained()"),XCo=o(" to load the model weights."),zCo=l(),F(y_.$$.fragment),WCo=l(),Ye=a("div"),F(oy.$$.fragment),QCo=l(),Cce=a("p"),HCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UCo=l(),Ra=a("p"),JCo=o("The model class to instantiate is selected based on the "),wce=a("code"),YCo=o("model_type"),KCo=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),ZCo=o("pretrained_model_name_or_path"),e5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),o5o=o("pretrained_model_name_or_path"),r5o=o(":"),t5o=l(),G=a("ul"),x_=a("li"),yce=a("strong"),a5o=o("albert"),n5o=o(" \u2014 "),Qj=a("a"),s5o=o("AlbertForPreTraining"),l5o=o(" (ALBERT model)"),i5o=l(),$_=a("li"),xce=a("strong"),d5o=o("bart"),c5o=o(" \u2014 "),Hj=a("a"),f5o=o("BartForConditionalGeneration"),m5o=o(" (BART model)"),g5o=l(),k_=a("li"),$ce=a("strong"),h5o=o("bert"),p5o=o(" \u2014 "),Uj=a("a"),u5o=o("BertForPreTraining"),_5o=o(" (BERT model)"),b5o=l(),S_=a("li"),kce=a("strong"),v5o=o("big_bird"),F5o=o(" \u2014 "),Jj=a("a"),T5o=o("BigBirdForPreTraining"),M5o=o(" (BigBird model)"),E5o=l(),R_=a("li"),Sce=a("strong"),C5o=o("bloom"),w5o=o(" \u2014 "),Yj=a("a"),A5o=o("BloomForCausalLM"),L5o=o(" (BLOOM model)"),y5o=l(),P_=a("li"),Rce=a("strong"),x5o=o("camembert"),$5o=o(" \u2014 "),Kj=a("a"),k5o=o("CamembertForMaskedLM"),S5o=o(" (CamemBERT model)"),R5o=l(),B_=a("li"),Pce=a("strong"),P5o=o("ctrl"),B5o=o(" \u2014 "),Zj=a("a"),I5o=o("CTRLLMHeadModel"),N5o=o(" (CTRL model)"),q5o=l(),I_=a("li"),Bce=a("strong"),j5o=o("data2vec-text"),D5o=o(" \u2014 "),eD=a("a"),G5o=o("Data2VecTextForMaskedLM"),O5o=o(" (Data2VecText model)"),V5o=l(),N_=a("li"),Ice=a("strong"),X5o=o("deberta"),z5o=o(" \u2014 "),oD=a("a"),W5o=o("DebertaForMaskedLM"),Q5o=o(" (DeBERTa model)"),H5o=l(),q_=a("li"),Nce=a("strong"),U5o=o("deberta-v2"),J5o=o(" \u2014 "),rD=a("a"),Y5o=o("DebertaV2ForMaskedLM"),K5o=o(" (DeBERTa-v2 model)"),Z5o=l(),j_=a("li"),qce=a("strong"),e3o=o("distilbert"),o3o=o(" \u2014 "),tD=a("a"),r3o=o("DistilBertForMaskedLM"),t3o=o(" (DistilBERT model)"),a3o=l(),D_=a("li"),jce=a("strong"),n3o=o("electra"),s3o=o(" \u2014 "),aD=a("a"),l3o=o("ElectraForPreTraining"),i3o=o(" (ELECTRA model)"),d3o=l(),G_=a("li"),Dce=a("strong"),c3o=o("flaubert"),f3o=o(" \u2014 "),nD=a("a"),m3o=o("FlaubertWithLMHeadModel"),g3o=o(" (FlauBERT model)"),h3o=l(),O_=a("li"),Gce=a("strong"),p3o=o("flava"),u3o=o(" \u2014 "),sD=a("a"),_3o=o("FlavaForPreTraining"),b3o=o(" (FLAVA model)"),v3o=l(),V_=a("li"),Oce=a("strong"),F3o=o("fnet"),T3o=o(" \u2014 "),lD=a("a"),M3o=o("FNetForPreTraining"),E3o=o(" (FNet model)"),C3o=l(),X_=a("li"),Vce=a("strong"),w3o=o("fsmt"),A3o=o(" \u2014 "),iD=a("a"),L3o=o("FSMTForConditionalGeneration"),y3o=o(" (FairSeq Machine-Translation model)"),x3o=l(),z_=a("li"),Xce=a("strong"),$3o=o("funnel"),k3o=o(" \u2014 "),dD=a("a"),S3o=o("FunnelForPreTraining"),R3o=o(" (Funnel Transformer model)"),P3o=l(),W_=a("li"),zce=a("strong"),B3o=o("gpt2"),I3o=o(" \u2014 "),cD=a("a"),N3o=o("GPT2LMHeadModel"),q3o=o(" (OpenAI GPT-2 model)"),j3o=l(),Q_=a("li"),Wce=a("strong"),D3o=o("ibert"),G3o=o(" \u2014 "),fD=a("a"),O3o=o("IBertForMaskedLM"),V3o=o(" (I-BERT model)"),X3o=l(),H_=a("li"),Qce=a("strong"),z3o=o("layoutlm"),W3o=o(" \u2014 "),mD=a("a"),Q3o=o("LayoutLMForMaskedLM"),H3o=o(" (LayoutLM model)"),U3o=l(),U_=a("li"),Hce=a("strong"),J3o=o("longformer"),Y3o=o(" \u2014 "),gD=a("a"),K3o=o("LongformerForMaskedLM"),Z3o=o(" (Longformer model)"),ewo=l(),J_=a("li"),Uce=a("strong"),owo=o("lxmert"),rwo=o(" \u2014 "),hD=a("a"),two=o("LxmertForPreTraining"),awo=o(" (LXMERT model)"),nwo=l(),Y_=a("li"),Jce=a("strong"),swo=o("megatron-bert"),lwo=o(" \u2014 "),pD=a("a"),iwo=o("MegatronBertForPreTraining"),dwo=o(" (Megatron-BERT model)"),cwo=l(),K_=a("li"),Yce=a("strong"),fwo=o("mobilebert"),mwo=o(" \u2014 "),uD=a("a"),gwo=o("MobileBertForPreTraining"),hwo=o(" (MobileBERT model)"),pwo=l(),Z_=a("li"),Kce=a("strong"),uwo=o("mpnet"),_wo=o(" \u2014 "),_D=a("a"),bwo=o("MPNetForMaskedLM"),vwo=o(" (MPNet model)"),Fwo=l(),e7=a("li"),Zce=a("strong"),Two=o("openai-gpt"),Mwo=o(" \u2014 "),bD=a("a"),Ewo=o("OpenAIGPTLMHeadModel"),Cwo=o(" (OpenAI GPT model)"),wwo=l(),o7=a("li"),efe=a("strong"),Awo=o("retribert"),Lwo=o(" \u2014 "),vD=a("a"),ywo=o("RetriBertModel"),xwo=o(" (RetriBERT model)"),$wo=l(),r7=a("li"),ofe=a("strong"),kwo=o("roberta"),Swo=o(" \u2014 "),FD=a("a"),Rwo=o("RobertaForMaskedLM"),Pwo=o(" (RoBERTa model)"),Bwo=l(),t7=a("li"),rfe=a("strong"),Iwo=o("splinter"),Nwo=o(" \u2014 "),TD=a("a"),qwo=o("SplinterForPreTraining"),jwo=o(" (Splinter model)"),Dwo=l(),a7=a("li"),tfe=a("strong"),Gwo=o("squeezebert"),Owo=o(" \u2014 "),MD=a("a"),Vwo=o("SqueezeBertForMaskedLM"),Xwo=o(" (SqueezeBERT model)"),zwo=l(),n7=a("li"),afe=a("strong"),Wwo=o("t5"),Qwo=o(" \u2014 "),ED=a("a"),Hwo=o("T5ForConditionalGeneration"),Uwo=o(" (T5 model)"),Jwo=l(),s7=a("li"),nfe=a("strong"),Ywo=o("tapas"),Kwo=o(" \u2014 "),CD=a("a"),Zwo=o("TapasForMaskedLM"),eAo=o(" (TAPAS model)"),oAo=l(),l7=a("li"),sfe=a("strong"),rAo=o("transfo-xl"),tAo=o(" \u2014 "),wD=a("a"),aAo=o("TransfoXLLMHeadModel"),nAo=o(" (Transformer-XL model)"),sAo=l(),i7=a("li"),lfe=a("strong"),lAo=o("unispeech"),iAo=o(" \u2014 "),AD=a("a"),dAo=o("UniSpeechForPreTraining"),cAo=o(" (UniSpeech model)"),fAo=l(),d7=a("li"),ife=a("strong"),mAo=o("unispeech-sat"),gAo=o(" \u2014 "),LD=a("a"),hAo=o("UniSpeechSatForPreTraining"),pAo=o(" (UniSpeechSat model)"),uAo=l(),c7=a("li"),dfe=a("strong"),_Ao=o("visual_bert"),bAo=o(" \u2014 "),yD=a("a"),vAo=o("VisualBertForPreTraining"),FAo=o(" (VisualBERT model)"),TAo=l(),f7=a("li"),cfe=a("strong"),MAo=o("vit_mae"),EAo=o(" \u2014 "),xD=a("a"),CAo=o("ViTMAEForPreTraining"),wAo=o(" (ViTMAE model)"),AAo=l(),m7=a("li"),ffe=a("strong"),LAo=o("wav2vec2"),yAo=o(" \u2014 "),$D=a("a"),xAo=o("Wav2Vec2ForPreTraining"),$Ao=o(" (Wav2Vec2 model)"),kAo=l(),g7=a("li"),mfe=a("strong"),SAo=o("wav2vec2-conformer"),RAo=o(" \u2014 "),kD=a("a"),PAo=o("Wav2Vec2ConformerForPreTraining"),BAo=o(" (Wav2Vec2-Conformer model)"),IAo=l(),h7=a("li"),gfe=a("strong"),NAo=o("xlm"),qAo=o(" \u2014 "),SD=a("a"),jAo=o("XLMWithLMHeadModel"),DAo=o(" (XLM model)"),GAo=l(),p7=a("li"),hfe=a("strong"),OAo=o("xlm-roberta"),VAo=o(" \u2014 "),RD=a("a"),XAo=o("XLMRobertaForMaskedLM"),zAo=o(" (XLM-RoBERTa model)"),WAo=l(),u7=a("li"),pfe=a("strong"),QAo=o("xlm-roberta-xl"),HAo=o(" \u2014 "),PD=a("a"),UAo=o("XLMRobertaXLForMaskedLM"),JAo=o(" (XLM-RoBERTa-XL model)"),YAo=l(),_7=a("li"),ufe=a("strong"),KAo=o("xlnet"),ZAo=o(" \u2014 "),BD=a("a"),e6o=o("XLNetLMHeadModel"),o6o=o(" (XLNet model)"),r6o=l(),b7=a("p"),t6o=o("The model is set in evaluation mode by default using "),_fe=a("code"),a6o=o("model.eval()"),n6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bfe=a("code"),s6o=o("model.train()"),l6o=l(),F(v7.$$.fragment),vGe=l(),Di=a("h2"),F7=a("a"),vfe=a("span"),F(ry.$$.fragment),i6o=l(),Ffe=a("span"),d6o=o("AutoModelForCausalLM"),FGe=l(),ko=a("div"),F(ty.$$.fragment),c6o=l(),Gi=a("p"),f6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ID=a("a"),m6o=o("from_pretrained()"),g6o=o(" class method or the "),ND=a("a"),h6o=o("from_config()"),p6o=o(` class
method.`),u6o=l(),ay=a("p"),_6o=o("This class cannot be instantiated directly using "),Tfe=a("code"),b6o=o("__init__()"),v6o=o(" (throws an error)."),F6o=l(),lt=a("div"),F(ny.$$.fragment),T6o=l(),Mfe=a("p"),M6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E6o=l(),Oi=a("p"),C6o=o(`Note:
Loading a model from its configuration file does `),Efe=a("strong"),w6o=o("not"),A6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),L6o=o("from_pretrained()"),y6o=o(" to load the model weights."),x6o=l(),F(T7.$$.fragment),$6o=l(),Ke=a("div"),F(sy.$$.fragment),k6o=l(),Cfe=a("p"),S6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R6o=l(),Pa=a("p"),P6o=o("The model class to instantiate is selected based on the "),wfe=a("code"),B6o=o("model_type"),I6o=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),N6o=o("pretrained_model_name_or_path"),q6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(":"),G6o=l(),z=a("ul"),M7=a("li"),yfe=a("strong"),O6o=o("bart"),V6o=o(" \u2014 "),jD=a("a"),X6o=o("BartForCausalLM"),z6o=o(" (BART model)"),W6o=l(),E7=a("li"),xfe=a("strong"),Q6o=o("bert"),H6o=o(" \u2014 "),DD=a("a"),U6o=o("BertLMHeadModel"),J6o=o(" (BERT model)"),Y6o=l(),C7=a("li"),$fe=a("strong"),K6o=o("bert-generation"),Z6o=o(" \u2014 "),GD=a("a"),eLo=o("BertGenerationDecoder"),oLo=o(" (Bert Generation model)"),rLo=l(),w7=a("li"),kfe=a("strong"),tLo=o("big_bird"),aLo=o(" \u2014 "),OD=a("a"),nLo=o("BigBirdForCausalLM"),sLo=o(" (BigBird model)"),lLo=l(),A7=a("li"),Sfe=a("strong"),iLo=o("bigbird_pegasus"),dLo=o(" \u2014 "),VD=a("a"),cLo=o("BigBirdPegasusForCausalLM"),fLo=o(" (BigBird-Pegasus model)"),mLo=l(),L7=a("li"),Rfe=a("strong"),gLo=o("blenderbot"),hLo=o(" \u2014 "),XD=a("a"),pLo=o("BlenderbotForCausalLM"),uLo=o(" (Blenderbot model)"),_Lo=l(),y7=a("li"),Pfe=a("strong"),bLo=o("blenderbot-small"),vLo=o(" \u2014 "),zD=a("a"),FLo=o("BlenderbotSmallForCausalLM"),TLo=o(" (BlenderbotSmall model)"),MLo=l(),x7=a("li"),Bfe=a("strong"),ELo=o("bloom"),CLo=o(" \u2014 "),WD=a("a"),wLo=o("BloomForCausalLM"),ALo=o(" (BLOOM model)"),LLo=l(),$7=a("li"),Ife=a("strong"),yLo=o("camembert"),xLo=o(" \u2014 "),QD=a("a"),$Lo=o("CamembertForCausalLM"),kLo=o(" (CamemBERT model)"),SLo=l(),k7=a("li"),Nfe=a("strong"),RLo=o("ctrl"),PLo=o(" \u2014 "),HD=a("a"),BLo=o("CTRLLMHeadModel"),ILo=o(" (CTRL model)"),NLo=l(),S7=a("li"),qfe=a("strong"),qLo=o("data2vec-text"),jLo=o(" \u2014 "),UD=a("a"),DLo=o("Data2VecTextForCausalLM"),GLo=o(" (Data2VecText model)"),OLo=l(),R7=a("li"),jfe=a("strong"),VLo=o("electra"),XLo=o(" \u2014 "),JD=a("a"),zLo=o("ElectraForCausalLM"),WLo=o(" (ELECTRA model)"),QLo=l(),P7=a("li"),Dfe=a("strong"),HLo=o("gpt2"),ULo=o(" \u2014 "),YD=a("a"),JLo=o("GPT2LMHeadModel"),YLo=o(" (OpenAI GPT-2 model)"),KLo=l(),B7=a("li"),Gfe=a("strong"),ZLo=o("gpt_neo"),eyo=o(" \u2014 "),KD=a("a"),oyo=o("GPTNeoForCausalLM"),ryo=o(" (GPT Neo model)"),tyo=l(),I7=a("li"),Ofe=a("strong"),ayo=o("gpt_neox"),nyo=o(" \u2014 "),ZD=a("a"),syo=o("GPTNeoXForCausalLM"),lyo=o(" (GPT NeoX model)"),iyo=l(),N7=a("li"),Vfe=a("strong"),dyo=o("gptj"),cyo=o(" \u2014 "),eG=a("a"),fyo=o("GPTJForCausalLM"),myo=o(" (GPT-J model)"),gyo=l(),q7=a("li"),Xfe=a("strong"),hyo=o("marian"),pyo=o(" \u2014 "),oG=a("a"),uyo=o("MarianForCausalLM"),_yo=o(" (Marian model)"),byo=l(),j7=a("li"),zfe=a("strong"),vyo=o("mbart"),Fyo=o(" \u2014 "),rG=a("a"),Tyo=o("MBartForCausalLM"),Myo=o(" (mBART model)"),Eyo=l(),D7=a("li"),Wfe=a("strong"),Cyo=o("megatron-bert"),wyo=o(" \u2014 "),tG=a("a"),Ayo=o("MegatronBertForCausalLM"),Lyo=o(" (Megatron-BERT model)"),yyo=l(),G7=a("li"),Qfe=a("strong"),xyo=o("openai-gpt"),$yo=o(" \u2014 "),aG=a("a"),kyo=o("OpenAIGPTLMHeadModel"),Syo=o(" (OpenAI GPT model)"),Ryo=l(),O7=a("li"),Hfe=a("strong"),Pyo=o("opt"),Byo=o(" \u2014 "),nG=a("a"),Iyo=o("OPTForCausalLM"),Nyo=o(" (OPT model)"),qyo=l(),V7=a("li"),Ufe=a("strong"),jyo=o("pegasus"),Dyo=o(" \u2014 "),sG=a("a"),Gyo=o("PegasusForCausalLM"),Oyo=o(" (Pegasus model)"),Vyo=l(),X7=a("li"),Jfe=a("strong"),Xyo=o("plbart"),zyo=o(" \u2014 "),lG=a("a"),Wyo=o("PLBartForCausalLM"),Qyo=o(" (PLBart model)"),Hyo=l(),z7=a("li"),Yfe=a("strong"),Uyo=o("prophetnet"),Jyo=o(" \u2014 "),iG=a("a"),Yyo=o("ProphetNetForCausalLM"),Kyo=o(" (ProphetNet model)"),Zyo=l(),W7=a("li"),Kfe=a("strong"),e8o=o("qdqbert"),o8o=o(" \u2014 "),dG=a("a"),r8o=o("QDQBertLMHeadModel"),t8o=o(" (QDQBert model)"),a8o=l(),Q7=a("li"),Zfe=a("strong"),n8o=o("reformer"),s8o=o(" \u2014 "),cG=a("a"),l8o=o("ReformerModelWithLMHead"),i8o=o(" (Reformer model)"),d8o=l(),H7=a("li"),eme=a("strong"),c8o=o("rembert"),f8o=o(" \u2014 "),fG=a("a"),m8o=o("RemBertForCausalLM"),g8o=o(" (RemBERT model)"),h8o=l(),U7=a("li"),ome=a("strong"),p8o=o("roberta"),u8o=o(" \u2014 "),mG=a("a"),_8o=o("RobertaForCausalLM"),b8o=o(" (RoBERTa model)"),v8o=l(),J7=a("li"),rme=a("strong"),F8o=o("roformer"),T8o=o(" \u2014 "),gG=a("a"),M8o=o("RoFormerForCausalLM"),E8o=o(" (RoFormer model)"),C8o=l(),Y7=a("li"),tme=a("strong"),w8o=o("speech_to_text_2"),A8o=o(" \u2014 "),hG=a("a"),L8o=o("Speech2Text2ForCausalLM"),y8o=o(" (Speech2Text2 model)"),x8o=l(),K7=a("li"),ame=a("strong"),$8o=o("transfo-xl"),k8o=o(" \u2014 "),pG=a("a"),S8o=o("TransfoXLLMHeadModel"),R8o=o(" (Transformer-XL model)"),P8o=l(),Z7=a("li"),nme=a("strong"),B8o=o("trocr"),I8o=o(" \u2014 "),uG=a("a"),N8o=o("TrOCRForCausalLM"),q8o=o(" (TrOCR model)"),j8o=l(),e1=a("li"),sme=a("strong"),D8o=o("xglm"),G8o=o(" \u2014 "),_G=a("a"),O8o=o("XGLMForCausalLM"),V8o=o(" (XGLM model)"),X8o=l(),o1=a("li"),lme=a("strong"),z8o=o("xlm"),W8o=o(" \u2014 "),bG=a("a"),Q8o=o("XLMWithLMHeadModel"),H8o=o(" (XLM model)"),U8o=l(),r1=a("li"),ime=a("strong"),J8o=o("xlm-prophetnet"),Y8o=o(" \u2014 "),vG=a("a"),K8o=o("XLMProphetNetForCausalLM"),Z8o=o(" (XLM-ProphetNet model)"),e9o=l(),t1=a("li"),dme=a("strong"),o9o=o("xlm-roberta"),r9o=o(" \u2014 "),FG=a("a"),t9o=o("XLMRobertaForCausalLM"),a9o=o(" (XLM-RoBERTa model)"),n9o=l(),a1=a("li"),cme=a("strong"),s9o=o("xlm-roberta-xl"),l9o=o(" \u2014 "),TG=a("a"),i9o=o("XLMRobertaXLForCausalLM"),d9o=o(" (XLM-RoBERTa-XL model)"),c9o=l(),n1=a("li"),fme=a("strong"),f9o=o("xlnet"),m9o=o(" \u2014 "),MG=a("a"),g9o=o("XLNetLMHeadModel"),h9o=o(" (XLNet model)"),p9o=l(),s1=a("p"),u9o=o("The model is set in evaluation mode by default using "),mme=a("code"),_9o=o("model.eval()"),b9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),v9o=o("model.train()"),F9o=l(),F(l1.$$.fragment),TGe=l(),Vi=a("h2"),i1=a("a"),hme=a("span"),F(ly.$$.fragment),T9o=l(),pme=a("span"),M9o=o("AutoModelForMaskedLM"),MGe=l(),So=a("div"),F(iy.$$.fragment),E9o=l(),Xi=a("p"),C9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EG=a("a"),w9o=o("from_pretrained()"),A9o=o(" class method or the "),CG=a("a"),L9o=o("from_config()"),y9o=o(` class
method.`),x9o=l(),dy=a("p"),$9o=o("This class cannot be instantiated directly using "),ume=a("code"),k9o=o("__init__()"),S9o=o(" (throws an error)."),R9o=l(),it=a("div"),F(cy.$$.fragment),P9o=l(),_me=a("p"),B9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I9o=l(),zi=a("p"),N9o=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),q9o=o("not"),j9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),D9o=o("from_pretrained()"),G9o=o(" to load the model weights."),O9o=l(),F(d1.$$.fragment),V9o=l(),Ze=a("div"),F(fy.$$.fragment),X9o=l(),vme=a("p"),z9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W9o=l(),Ba=a("p"),Q9o=o("The model class to instantiate is selected based on the "),Fme=a("code"),H9o=o("model_type"),U9o=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),J9o=o("pretrained_model_name_or_path"),Y9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),K9o=o("pretrained_model_name_or_path"),Z9o=o(":"),exo=l(),Q=a("ul"),c1=a("li"),Eme=a("strong"),oxo=o("albert"),rxo=o(" \u2014 "),AG=a("a"),txo=o("AlbertForMaskedLM"),axo=o(" (ALBERT model)"),nxo=l(),f1=a("li"),Cme=a("strong"),sxo=o("bart"),lxo=o(" \u2014 "),LG=a("a"),ixo=o("BartForConditionalGeneration"),dxo=o(" (BART model)"),cxo=l(),m1=a("li"),wme=a("strong"),fxo=o("bert"),mxo=o(" \u2014 "),yG=a("a"),gxo=o("BertForMaskedLM"),hxo=o(" (BERT model)"),pxo=l(),g1=a("li"),Ame=a("strong"),uxo=o("big_bird"),_xo=o(" \u2014 "),xG=a("a"),bxo=o("BigBirdForMaskedLM"),vxo=o(" (BigBird model)"),Fxo=l(),h1=a("li"),Lme=a("strong"),Txo=o("camembert"),Mxo=o(" \u2014 "),$G=a("a"),Exo=o("CamembertForMaskedLM"),Cxo=o(" (CamemBERT model)"),wxo=l(),p1=a("li"),yme=a("strong"),Axo=o("convbert"),Lxo=o(" \u2014 "),kG=a("a"),yxo=o("ConvBertForMaskedLM"),xxo=o(" (ConvBERT model)"),$xo=l(),u1=a("li"),xme=a("strong"),kxo=o("data2vec-text"),Sxo=o(" \u2014 "),SG=a("a"),Rxo=o("Data2VecTextForMaskedLM"),Pxo=o(" (Data2VecText model)"),Bxo=l(),_1=a("li"),$me=a("strong"),Ixo=o("deberta"),Nxo=o(" \u2014 "),RG=a("a"),qxo=o("DebertaForMaskedLM"),jxo=o(" (DeBERTa model)"),Dxo=l(),b1=a("li"),kme=a("strong"),Gxo=o("deberta-v2"),Oxo=o(" \u2014 "),PG=a("a"),Vxo=o("DebertaV2ForMaskedLM"),Xxo=o(" (DeBERTa-v2 model)"),zxo=l(),v1=a("li"),Sme=a("strong"),Wxo=o("distilbert"),Qxo=o(" \u2014 "),BG=a("a"),Hxo=o("DistilBertForMaskedLM"),Uxo=o(" (DistilBERT model)"),Jxo=l(),F1=a("li"),Rme=a("strong"),Yxo=o("electra"),Kxo=o(" \u2014 "),IG=a("a"),Zxo=o("ElectraForMaskedLM"),e$o=o(" (ELECTRA model)"),o$o=l(),T1=a("li"),Pme=a("strong"),r$o=o("flaubert"),t$o=o(" \u2014 "),NG=a("a"),a$o=o("FlaubertWithLMHeadModel"),n$o=o(" (FlauBERT model)"),s$o=l(),M1=a("li"),Bme=a("strong"),l$o=o("fnet"),i$o=o(" \u2014 "),qG=a("a"),d$o=o("FNetForMaskedLM"),c$o=o(" (FNet model)"),f$o=l(),E1=a("li"),Ime=a("strong"),m$o=o("funnel"),g$o=o(" \u2014 "),jG=a("a"),h$o=o("FunnelForMaskedLM"),p$o=o(" (Funnel Transformer model)"),u$o=l(),C1=a("li"),Nme=a("strong"),_$o=o("ibert"),b$o=o(" \u2014 "),DG=a("a"),v$o=o("IBertForMaskedLM"),F$o=o(" (I-BERT model)"),T$o=l(),w1=a("li"),qme=a("strong"),M$o=o("layoutlm"),E$o=o(" \u2014 "),GG=a("a"),C$o=o("LayoutLMForMaskedLM"),w$o=o(" (LayoutLM model)"),A$o=l(),A1=a("li"),jme=a("strong"),L$o=o("longformer"),y$o=o(" \u2014 "),OG=a("a"),x$o=o("LongformerForMaskedLM"),$$o=o(" (Longformer model)"),k$o=l(),L1=a("li"),Dme=a("strong"),S$o=o("luke"),R$o=o(" \u2014 "),VG=a("a"),P$o=o("LukeForMaskedLM"),B$o=o(" (LUKE model)"),I$o=l(),y1=a("li"),Gme=a("strong"),N$o=o("mbart"),q$o=o(" \u2014 "),XG=a("a"),j$o=o("MBartForConditionalGeneration"),D$o=o(" (mBART model)"),G$o=l(),x1=a("li"),Ome=a("strong"),O$o=o("megatron-bert"),V$o=o(" \u2014 "),zG=a("a"),X$o=o("MegatronBertForMaskedLM"),z$o=o(" (Megatron-BERT model)"),W$o=l(),$1=a("li"),Vme=a("strong"),Q$o=o("mobilebert"),H$o=o(" \u2014 "),WG=a("a"),U$o=o("MobileBertForMaskedLM"),J$o=o(" (MobileBERT model)"),Y$o=l(),k1=a("li"),Xme=a("strong"),K$o=o("mpnet"),Z$o=o(" \u2014 "),QG=a("a"),eko=o("MPNetForMaskedLM"),oko=o(" (MPNet model)"),rko=l(),S1=a("li"),zme=a("strong"),tko=o("nystromformer"),ako=o(" \u2014 "),HG=a("a"),nko=o("NystromformerForMaskedLM"),sko=o(" (Nystr\xF6mformer model)"),lko=l(),R1=a("li"),Wme=a("strong"),iko=o("perceiver"),dko=o(" \u2014 "),UG=a("a"),cko=o("PerceiverForMaskedLM"),fko=o(" (Perceiver model)"),mko=l(),P1=a("li"),Qme=a("strong"),gko=o("qdqbert"),hko=o(" \u2014 "),JG=a("a"),pko=o("QDQBertForMaskedLM"),uko=o(" (QDQBert model)"),_ko=l(),B1=a("li"),Hme=a("strong"),bko=o("reformer"),vko=o(" \u2014 "),YG=a("a"),Fko=o("ReformerForMaskedLM"),Tko=o(" (Reformer model)"),Mko=l(),I1=a("li"),Ume=a("strong"),Eko=o("rembert"),Cko=o(" \u2014 "),KG=a("a"),wko=o("RemBertForMaskedLM"),Ako=o(" (RemBERT model)"),Lko=l(),N1=a("li"),Jme=a("strong"),yko=o("roberta"),xko=o(" \u2014 "),ZG=a("a"),$ko=o("RobertaForMaskedLM"),kko=o(" (RoBERTa model)"),Sko=l(),q1=a("li"),Yme=a("strong"),Rko=o("roformer"),Pko=o(" \u2014 "),eO=a("a"),Bko=o("RoFormerForMaskedLM"),Iko=o(" (RoFormer model)"),Nko=l(),j1=a("li"),Kme=a("strong"),qko=o("squeezebert"),jko=o(" \u2014 "),oO=a("a"),Dko=o("SqueezeBertForMaskedLM"),Gko=o(" (SqueezeBERT model)"),Oko=l(),D1=a("li"),Zme=a("strong"),Vko=o("tapas"),Xko=o(" \u2014 "),rO=a("a"),zko=o("TapasForMaskedLM"),Wko=o(" (TAPAS model)"),Qko=l(),G1=a("li"),ege=a("strong"),Hko=o("wav2vec2"),Uko=o(" \u2014 "),oge=a("code"),Jko=o("Wav2Vec2ForMaskedLM"),Yko=o(" (Wav2Vec2 model)"),Kko=l(),O1=a("li"),rge=a("strong"),Zko=o("xlm"),eSo=o(" \u2014 "),tO=a("a"),oSo=o("XLMWithLMHeadModel"),rSo=o(" (XLM model)"),tSo=l(),V1=a("li"),tge=a("strong"),aSo=o("xlm-roberta"),nSo=o(" \u2014 "),aO=a("a"),sSo=o("XLMRobertaForMaskedLM"),lSo=o(" (XLM-RoBERTa model)"),iSo=l(),X1=a("li"),age=a("strong"),dSo=o("xlm-roberta-xl"),cSo=o(" \u2014 "),nO=a("a"),fSo=o("XLMRobertaXLForMaskedLM"),mSo=o(" (XLM-RoBERTa-XL model)"),gSo=l(),z1=a("li"),nge=a("strong"),hSo=o("yoso"),pSo=o(" \u2014 "),sO=a("a"),uSo=o("YosoForMaskedLM"),_So=o(" (YOSO model)"),bSo=l(),W1=a("p"),vSo=o("The model is set in evaluation mode by default using "),sge=a("code"),FSo=o("model.eval()"),TSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),MSo=o("model.train()"),ESo=l(),F(Q1.$$.fragment),EGe=l(),Wi=a("h2"),H1=a("a"),ige=a("span"),F(my.$$.fragment),CSo=l(),dge=a("span"),wSo=o("AutoModelForSeq2SeqLM"),CGe=l(),Ro=a("div"),F(gy.$$.fragment),ASo=l(),Qi=a("p"),LSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lO=a("a"),ySo=o("from_pretrained()"),xSo=o(" class method or the "),iO=a("a"),$So=o("from_config()"),kSo=o(` class
method.`),SSo=l(),hy=a("p"),RSo=o("This class cannot be instantiated directly using "),cge=a("code"),PSo=o("__init__()"),BSo=o(" (throws an error)."),ISo=l(),dt=a("div"),F(py.$$.fragment),NSo=l(),fge=a("p"),qSo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jSo=l(),Hi=a("p"),DSo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),GSo=o("not"),OSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=a("a"),VSo=o("from_pretrained()"),XSo=o(" to load the model weights."),zSo=l(),F(U1.$$.fragment),WSo=l(),eo=a("div"),F(uy.$$.fragment),QSo=l(),gge=a("p"),HSo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),USo=l(),Ia=a("p"),JSo=o("The model class to instantiate is selected based on the "),hge=a("code"),YSo=o("model_type"),KSo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),ZSo=o("pretrained_model_name_or_path"),eRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),oRo=o("pretrained_model_name_or_path"),rRo=o(":"),tRo=l(),pe=a("ul"),J1=a("li"),_ge=a("strong"),aRo=o("bart"),nRo=o(" \u2014 "),cO=a("a"),sRo=o("BartForConditionalGeneration"),lRo=o(" (BART model)"),iRo=l(),Y1=a("li"),bge=a("strong"),dRo=o("bigbird_pegasus"),cRo=o(" \u2014 "),fO=a("a"),fRo=o("BigBirdPegasusForConditionalGeneration"),mRo=o(" (BigBird-Pegasus model)"),gRo=l(),K1=a("li"),vge=a("strong"),hRo=o("blenderbot"),pRo=o(" \u2014 "),mO=a("a"),uRo=o("BlenderbotForConditionalGeneration"),_Ro=o(" (Blenderbot model)"),bRo=l(),Z1=a("li"),Fge=a("strong"),vRo=o("blenderbot-small"),FRo=o(" \u2014 "),gO=a("a"),TRo=o("BlenderbotSmallForConditionalGeneration"),MRo=o(" (BlenderbotSmall model)"),ERo=l(),e2=a("li"),Tge=a("strong"),CRo=o("encoder-decoder"),wRo=o(" \u2014 "),hO=a("a"),ARo=o("EncoderDecoderModel"),LRo=o(" (Encoder decoder model)"),yRo=l(),o2=a("li"),Mge=a("strong"),xRo=o("fsmt"),$Ro=o(" \u2014 "),pO=a("a"),kRo=o("FSMTForConditionalGeneration"),SRo=o(" (FairSeq Machine-Translation model)"),RRo=l(),r2=a("li"),Ege=a("strong"),PRo=o("led"),BRo=o(" \u2014 "),uO=a("a"),IRo=o("LEDForConditionalGeneration"),NRo=o(" (LED model)"),qRo=l(),t2=a("li"),Cge=a("strong"),jRo=o("longt5"),DRo=o(" \u2014 "),_O=a("a"),GRo=o("LongT5ForConditionalGeneration"),ORo=o(" (LongT5 model)"),VRo=l(),a2=a("li"),wge=a("strong"),XRo=o("m2m_100"),zRo=o(" \u2014 "),bO=a("a"),WRo=o("M2M100ForConditionalGeneration"),QRo=o(" (M2M100 model)"),HRo=l(),n2=a("li"),Age=a("strong"),URo=o("marian"),JRo=o(" \u2014 "),vO=a("a"),YRo=o("MarianMTModel"),KRo=o(" (Marian model)"),ZRo=l(),s2=a("li"),Lge=a("strong"),ePo=o("mbart"),oPo=o(" \u2014 "),FO=a("a"),rPo=o("MBartForConditionalGeneration"),tPo=o(" (mBART model)"),aPo=l(),l2=a("li"),yge=a("strong"),nPo=o("mt5"),sPo=o(" \u2014 "),TO=a("a"),lPo=o("MT5ForConditionalGeneration"),iPo=o(" (MT5 model)"),dPo=l(),i2=a("li"),xge=a("strong"),cPo=o("pegasus"),fPo=o(" \u2014 "),MO=a("a"),mPo=o("PegasusForConditionalGeneration"),gPo=o(" (Pegasus model)"),hPo=l(),d2=a("li"),$ge=a("strong"),pPo=o("plbart"),uPo=o(" \u2014 "),EO=a("a"),_Po=o("PLBartForConditionalGeneration"),bPo=o(" (PLBart model)"),vPo=l(),c2=a("li"),kge=a("strong"),FPo=o("prophetnet"),TPo=o(" \u2014 "),CO=a("a"),MPo=o("ProphetNetForConditionalGeneration"),EPo=o(" (ProphetNet model)"),CPo=l(),f2=a("li"),Sge=a("strong"),wPo=o("t5"),APo=o(" \u2014 "),wO=a("a"),LPo=o("T5ForConditionalGeneration"),yPo=o(" (T5 model)"),xPo=l(),m2=a("li"),Rge=a("strong"),$Po=o("xlm-prophetnet"),kPo=o(" \u2014 "),AO=a("a"),SPo=o("XLMProphetNetForConditionalGeneration"),RPo=o(" (XLM-ProphetNet model)"),PPo=l(),g2=a("p"),BPo=o("The model is set in evaluation mode by default using "),Pge=a("code"),IPo=o("model.eval()"),NPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),qPo=o("model.train()"),jPo=l(),F(h2.$$.fragment),wGe=l(),Ui=a("h2"),p2=a("a"),Ige=a("span"),F(_y.$$.fragment),DPo=l(),Nge=a("span"),GPo=o("AutoModelForSequenceClassification"),AGe=l(),Po=a("div"),F(by.$$.fragment),OPo=l(),Ji=a("p"),VPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LO=a("a"),XPo=o("from_pretrained()"),zPo=o(" class method or the "),yO=a("a"),WPo=o("from_config()"),QPo=o(` class
method.`),HPo=l(),vy=a("p"),UPo=o("This class cannot be instantiated directly using "),qge=a("code"),JPo=o("__init__()"),YPo=o(" (throws an error)."),KPo=l(),ct=a("div"),F(Fy.$$.fragment),ZPo=l(),jge=a("p"),eBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oBo=l(),Yi=a("p"),rBo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),tBo=o("not"),aBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),nBo=o("from_pretrained()"),sBo=o(" to load the model weights."),lBo=l(),F(u2.$$.fragment),iBo=l(),oo=a("div"),F(Ty.$$.fragment),dBo=l(),Gge=a("p"),cBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fBo=l(),Na=a("p"),mBo=o("The model class to instantiate is selected based on the "),Oge=a("code"),gBo=o("model_type"),hBo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),pBo=o("pretrained_model_name_or_path"),uBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),_Bo=o("pretrained_model_name_or_path"),bBo=o(":"),vBo=l(),N=a("ul"),_2=a("li"),zge=a("strong"),FBo=o("albert"),TBo=o(" \u2014 "),$O=a("a"),MBo=o("AlbertForSequenceClassification"),EBo=o(" (ALBERT model)"),CBo=l(),b2=a("li"),Wge=a("strong"),wBo=o("bart"),ABo=o(" \u2014 "),kO=a("a"),LBo=o("BartForSequenceClassification"),yBo=o(" (BART model)"),xBo=l(),v2=a("li"),Qge=a("strong"),$Bo=o("bert"),kBo=o(" \u2014 "),SO=a("a"),SBo=o("BertForSequenceClassification"),RBo=o(" (BERT model)"),PBo=l(),F2=a("li"),Hge=a("strong"),BBo=o("big_bird"),IBo=o(" \u2014 "),RO=a("a"),NBo=o("BigBirdForSequenceClassification"),qBo=o(" (BigBird model)"),jBo=l(),T2=a("li"),Uge=a("strong"),DBo=o("bigbird_pegasus"),GBo=o(" \u2014 "),PO=a("a"),OBo=o("BigBirdPegasusForSequenceClassification"),VBo=o(" (BigBird-Pegasus model)"),XBo=l(),M2=a("li"),Jge=a("strong"),zBo=o("bloom"),WBo=o(" \u2014 "),BO=a("a"),QBo=o("BloomForSequenceClassification"),HBo=o(" (BLOOM model)"),UBo=l(),E2=a("li"),Yge=a("strong"),JBo=o("camembert"),YBo=o(" \u2014 "),IO=a("a"),KBo=o("CamembertForSequenceClassification"),ZBo=o(" (CamemBERT model)"),eIo=l(),C2=a("li"),Kge=a("strong"),oIo=o("canine"),rIo=o(" \u2014 "),NO=a("a"),tIo=o("CanineForSequenceClassification"),aIo=o(" (CANINE model)"),nIo=l(),w2=a("li"),Zge=a("strong"),sIo=o("convbert"),lIo=o(" \u2014 "),qO=a("a"),iIo=o("ConvBertForSequenceClassification"),dIo=o(" (ConvBERT model)"),cIo=l(),A2=a("li"),ehe=a("strong"),fIo=o("ctrl"),mIo=o(" \u2014 "),jO=a("a"),gIo=o("CTRLForSequenceClassification"),hIo=o(" (CTRL model)"),pIo=l(),L2=a("li"),ohe=a("strong"),uIo=o("data2vec-text"),_Io=o(" \u2014 "),DO=a("a"),bIo=o("Data2VecTextForSequenceClassification"),vIo=o(" (Data2VecText model)"),FIo=l(),y2=a("li"),rhe=a("strong"),TIo=o("deberta"),MIo=o(" \u2014 "),GO=a("a"),EIo=o("DebertaForSequenceClassification"),CIo=o(" (DeBERTa model)"),wIo=l(),x2=a("li"),the=a("strong"),AIo=o("deberta-v2"),LIo=o(" \u2014 "),OO=a("a"),yIo=o("DebertaV2ForSequenceClassification"),xIo=o(" (DeBERTa-v2 model)"),$Io=l(),$2=a("li"),ahe=a("strong"),kIo=o("distilbert"),SIo=o(" \u2014 "),VO=a("a"),RIo=o("DistilBertForSequenceClassification"),PIo=o(" (DistilBERT model)"),BIo=l(),k2=a("li"),nhe=a("strong"),IIo=o("electra"),NIo=o(" \u2014 "),XO=a("a"),qIo=o("ElectraForSequenceClassification"),jIo=o(" (ELECTRA model)"),DIo=l(),S2=a("li"),she=a("strong"),GIo=o("flaubert"),OIo=o(" \u2014 "),zO=a("a"),VIo=o("FlaubertForSequenceClassification"),XIo=o(" (FlauBERT model)"),zIo=l(),R2=a("li"),lhe=a("strong"),WIo=o("fnet"),QIo=o(" \u2014 "),WO=a("a"),HIo=o("FNetForSequenceClassification"),UIo=o(" (FNet model)"),JIo=l(),P2=a("li"),ihe=a("strong"),YIo=o("funnel"),KIo=o(" \u2014 "),QO=a("a"),ZIo=o("FunnelForSequenceClassification"),eNo=o(" (Funnel Transformer model)"),oNo=l(),B2=a("li"),dhe=a("strong"),rNo=o("gpt2"),tNo=o(" \u2014 "),HO=a("a"),aNo=o("GPT2ForSequenceClassification"),nNo=o(" (OpenAI GPT-2 model)"),sNo=l(),I2=a("li"),che=a("strong"),lNo=o("gpt_neo"),iNo=o(" \u2014 "),UO=a("a"),dNo=o("GPTNeoForSequenceClassification"),cNo=o(" (GPT Neo model)"),fNo=l(),N2=a("li"),fhe=a("strong"),mNo=o("gptj"),gNo=o(" \u2014 "),JO=a("a"),hNo=o("GPTJForSequenceClassification"),pNo=o(" (GPT-J model)"),uNo=l(),q2=a("li"),mhe=a("strong"),_No=o("ibert"),bNo=o(" \u2014 "),YO=a("a"),vNo=o("IBertForSequenceClassification"),FNo=o(" (I-BERT model)"),TNo=l(),j2=a("li"),ghe=a("strong"),MNo=o("layoutlm"),ENo=o(" \u2014 "),KO=a("a"),CNo=o("LayoutLMForSequenceClassification"),wNo=o(" (LayoutLM model)"),ANo=l(),D2=a("li"),hhe=a("strong"),LNo=o("layoutlmv2"),yNo=o(" \u2014 "),ZO=a("a"),xNo=o("LayoutLMv2ForSequenceClassification"),$No=o(" (LayoutLMv2 model)"),kNo=l(),G2=a("li"),phe=a("strong"),SNo=o("layoutlmv3"),RNo=o(" \u2014 "),eV=a("a"),PNo=o("LayoutLMv3ForSequenceClassification"),BNo=o(" (LayoutLMv3 model)"),INo=l(),O2=a("li"),uhe=a("strong"),NNo=o("led"),qNo=o(" \u2014 "),oV=a("a"),jNo=o("LEDForSequenceClassification"),DNo=o(" (LED model)"),GNo=l(),V2=a("li"),_he=a("strong"),ONo=o("longformer"),VNo=o(" \u2014 "),rV=a("a"),XNo=o("LongformerForSequenceClassification"),zNo=o(" (Longformer model)"),WNo=l(),X2=a("li"),bhe=a("strong"),QNo=o("mbart"),HNo=o(" \u2014 "),tV=a("a"),UNo=o("MBartForSequenceClassification"),JNo=o(" (mBART model)"),YNo=l(),z2=a("li"),vhe=a("strong"),KNo=o("megatron-bert"),ZNo=o(" \u2014 "),aV=a("a"),eqo=o("MegatronBertForSequenceClassification"),oqo=o(" (Megatron-BERT model)"),rqo=l(),W2=a("li"),Fhe=a("strong"),tqo=o("mobilebert"),aqo=o(" \u2014 "),nV=a("a"),nqo=o("MobileBertForSequenceClassification"),sqo=o(" (MobileBERT model)"),lqo=l(),Q2=a("li"),The=a("strong"),iqo=o("mpnet"),dqo=o(" \u2014 "),sV=a("a"),cqo=o("MPNetForSequenceClassification"),fqo=o(" (MPNet model)"),mqo=l(),H2=a("li"),Mhe=a("strong"),gqo=o("nystromformer"),hqo=o(" \u2014 "),lV=a("a"),pqo=o("NystromformerForSequenceClassification"),uqo=o(" (Nystr\xF6mformer model)"),_qo=l(),U2=a("li"),Ehe=a("strong"),bqo=o("openai-gpt"),vqo=o(" \u2014 "),iV=a("a"),Fqo=o("OpenAIGPTForSequenceClassification"),Tqo=o(" (OpenAI GPT model)"),Mqo=l(),J2=a("li"),Che=a("strong"),Eqo=o("perceiver"),Cqo=o(" \u2014 "),dV=a("a"),wqo=o("PerceiverForSequenceClassification"),Aqo=o(" (Perceiver model)"),Lqo=l(),Y2=a("li"),whe=a("strong"),yqo=o("plbart"),xqo=o(" \u2014 "),cV=a("a"),$qo=o("PLBartForSequenceClassification"),kqo=o(" (PLBart model)"),Sqo=l(),K2=a("li"),Ahe=a("strong"),Rqo=o("qdqbert"),Pqo=o(" \u2014 "),fV=a("a"),Bqo=o("QDQBertForSequenceClassification"),Iqo=o(" (QDQBert model)"),Nqo=l(),Z2=a("li"),Lhe=a("strong"),qqo=o("reformer"),jqo=o(" \u2014 "),mV=a("a"),Dqo=o("ReformerForSequenceClassification"),Gqo=o(" (Reformer model)"),Oqo=l(),eb=a("li"),yhe=a("strong"),Vqo=o("rembert"),Xqo=o(" \u2014 "),gV=a("a"),zqo=o("RemBertForSequenceClassification"),Wqo=o(" (RemBERT model)"),Qqo=l(),ob=a("li"),xhe=a("strong"),Hqo=o("roberta"),Uqo=o(" \u2014 "),hV=a("a"),Jqo=o("RobertaForSequenceClassification"),Yqo=o(" (RoBERTa model)"),Kqo=l(),rb=a("li"),$he=a("strong"),Zqo=o("roformer"),ejo=o(" \u2014 "),pV=a("a"),ojo=o("RoFormerForSequenceClassification"),rjo=o(" (RoFormer model)"),tjo=l(),tb=a("li"),khe=a("strong"),ajo=o("squeezebert"),njo=o(" \u2014 "),uV=a("a"),sjo=o("SqueezeBertForSequenceClassification"),ljo=o(" (SqueezeBERT model)"),ijo=l(),ab=a("li"),She=a("strong"),djo=o("tapas"),cjo=o(" \u2014 "),_V=a("a"),fjo=o("TapasForSequenceClassification"),mjo=o(" (TAPAS model)"),gjo=l(),nb=a("li"),Rhe=a("strong"),hjo=o("transfo-xl"),pjo=o(" \u2014 "),bV=a("a"),ujo=o("TransfoXLForSequenceClassification"),_jo=o(" (Transformer-XL model)"),bjo=l(),sb=a("li"),Phe=a("strong"),vjo=o("xlm"),Fjo=o(" \u2014 "),vV=a("a"),Tjo=o("XLMForSequenceClassification"),Mjo=o(" (XLM model)"),Ejo=l(),lb=a("li"),Bhe=a("strong"),Cjo=o("xlm-roberta"),wjo=o(" \u2014 "),FV=a("a"),Ajo=o("XLMRobertaForSequenceClassification"),Ljo=o(" (XLM-RoBERTa model)"),yjo=l(),ib=a("li"),Ihe=a("strong"),xjo=o("xlm-roberta-xl"),$jo=o(" \u2014 "),TV=a("a"),kjo=o("XLMRobertaXLForSequenceClassification"),Sjo=o(" (XLM-RoBERTa-XL model)"),Rjo=l(),db=a("li"),Nhe=a("strong"),Pjo=o("xlnet"),Bjo=o(" \u2014 "),MV=a("a"),Ijo=o("XLNetForSequenceClassification"),Njo=o(" (XLNet model)"),qjo=l(),cb=a("li"),qhe=a("strong"),jjo=o("yoso"),Djo=o(" \u2014 "),EV=a("a"),Gjo=o("YosoForSequenceClassification"),Ojo=o(" (YOSO model)"),Vjo=l(),fb=a("p"),Xjo=o("The model is set in evaluation mode by default using "),jhe=a("code"),zjo=o("model.eval()"),Wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),Qjo=o("model.train()"),Hjo=l(),F(mb.$$.fragment),LGe=l(),Ki=a("h2"),gb=a("a"),Ghe=a("span"),F(My.$$.fragment),Ujo=l(),Ohe=a("span"),Jjo=o("AutoModelForMultipleChoice"),yGe=l(),Bo=a("div"),F(Ey.$$.fragment),Yjo=l(),Zi=a("p"),Kjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CV=a("a"),Zjo=o("from_pretrained()"),eDo=o(" class method or the "),wV=a("a"),oDo=o("from_config()"),rDo=o(` class
method.`),tDo=l(),Cy=a("p"),aDo=o("This class cannot be instantiated directly using "),Vhe=a("code"),nDo=o("__init__()"),sDo=o(" (throws an error)."),lDo=l(),ft=a("div"),F(wy.$$.fragment),iDo=l(),Xhe=a("p"),dDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cDo=l(),ed=a("p"),fDo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),mDo=o("not"),gDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),hDo=o("from_pretrained()"),pDo=o(" to load the model weights."),uDo=l(),F(hb.$$.fragment),_Do=l(),ro=a("div"),F(Ay.$$.fragment),bDo=l(),Whe=a("p"),vDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FDo=l(),qa=a("p"),TDo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),MDo=o("model_type"),EDo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),CDo=o("pretrained_model_name_or_path"),wDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(":"),yDo=l(),Z=a("ul"),pb=a("li"),Jhe=a("strong"),xDo=o("albert"),$Do=o(" \u2014 "),LV=a("a"),kDo=o("AlbertForMultipleChoice"),SDo=o(" (ALBERT model)"),RDo=l(),ub=a("li"),Yhe=a("strong"),PDo=o("bert"),BDo=o(" \u2014 "),yV=a("a"),IDo=o("BertForMultipleChoice"),NDo=o(" (BERT model)"),qDo=l(),_b=a("li"),Khe=a("strong"),jDo=o("big_bird"),DDo=o(" \u2014 "),xV=a("a"),GDo=o("BigBirdForMultipleChoice"),ODo=o(" (BigBird model)"),VDo=l(),bb=a("li"),Zhe=a("strong"),XDo=o("camembert"),zDo=o(" \u2014 "),$V=a("a"),WDo=o("CamembertForMultipleChoice"),QDo=o(" (CamemBERT model)"),HDo=l(),vb=a("li"),epe=a("strong"),UDo=o("canine"),JDo=o(" \u2014 "),kV=a("a"),YDo=o("CanineForMultipleChoice"),KDo=o(" (CANINE model)"),ZDo=l(),Fb=a("li"),ope=a("strong"),eGo=o("convbert"),oGo=o(" \u2014 "),SV=a("a"),rGo=o("ConvBertForMultipleChoice"),tGo=o(" (ConvBERT model)"),aGo=l(),Tb=a("li"),rpe=a("strong"),nGo=o("data2vec-text"),sGo=o(" \u2014 "),RV=a("a"),lGo=o("Data2VecTextForMultipleChoice"),iGo=o(" (Data2VecText model)"),dGo=l(),Mb=a("li"),tpe=a("strong"),cGo=o("deberta-v2"),fGo=o(" \u2014 "),PV=a("a"),mGo=o("DebertaV2ForMultipleChoice"),gGo=o(" (DeBERTa-v2 model)"),hGo=l(),Eb=a("li"),ape=a("strong"),pGo=o("distilbert"),uGo=o(" \u2014 "),BV=a("a"),_Go=o("DistilBertForMultipleChoice"),bGo=o(" (DistilBERT model)"),vGo=l(),Cb=a("li"),npe=a("strong"),FGo=o("electra"),TGo=o(" \u2014 "),IV=a("a"),MGo=o("ElectraForMultipleChoice"),EGo=o(" (ELECTRA model)"),CGo=l(),wb=a("li"),spe=a("strong"),wGo=o("flaubert"),AGo=o(" \u2014 "),NV=a("a"),LGo=o("FlaubertForMultipleChoice"),yGo=o(" (FlauBERT model)"),xGo=l(),Ab=a("li"),lpe=a("strong"),$Go=o("fnet"),kGo=o(" \u2014 "),qV=a("a"),SGo=o("FNetForMultipleChoice"),RGo=o(" (FNet model)"),PGo=l(),Lb=a("li"),ipe=a("strong"),BGo=o("funnel"),IGo=o(" \u2014 "),jV=a("a"),NGo=o("FunnelForMultipleChoice"),qGo=o(" (Funnel Transformer model)"),jGo=l(),yb=a("li"),dpe=a("strong"),DGo=o("ibert"),GGo=o(" \u2014 "),DV=a("a"),OGo=o("IBertForMultipleChoice"),VGo=o(" (I-BERT model)"),XGo=l(),xb=a("li"),cpe=a("strong"),zGo=o("longformer"),WGo=o(" \u2014 "),GV=a("a"),QGo=o("LongformerForMultipleChoice"),HGo=o(" (Longformer model)"),UGo=l(),$b=a("li"),fpe=a("strong"),JGo=o("megatron-bert"),YGo=o(" \u2014 "),OV=a("a"),KGo=o("MegatronBertForMultipleChoice"),ZGo=o(" (Megatron-BERT model)"),eOo=l(),kb=a("li"),mpe=a("strong"),oOo=o("mobilebert"),rOo=o(" \u2014 "),VV=a("a"),tOo=o("MobileBertForMultipleChoice"),aOo=o(" (MobileBERT model)"),nOo=l(),Sb=a("li"),gpe=a("strong"),sOo=o("mpnet"),lOo=o(" \u2014 "),XV=a("a"),iOo=o("MPNetForMultipleChoice"),dOo=o(" (MPNet model)"),cOo=l(),Rb=a("li"),hpe=a("strong"),fOo=o("nystromformer"),mOo=o(" \u2014 "),zV=a("a"),gOo=o("NystromformerForMultipleChoice"),hOo=o(" (Nystr\xF6mformer model)"),pOo=l(),Pb=a("li"),ppe=a("strong"),uOo=o("qdqbert"),_Oo=o(" \u2014 "),WV=a("a"),bOo=o("QDQBertForMultipleChoice"),vOo=o(" (QDQBert model)"),FOo=l(),Bb=a("li"),upe=a("strong"),TOo=o("rembert"),MOo=o(" \u2014 "),QV=a("a"),EOo=o("RemBertForMultipleChoice"),COo=o(" (RemBERT model)"),wOo=l(),Ib=a("li"),_pe=a("strong"),AOo=o("roberta"),LOo=o(" \u2014 "),HV=a("a"),yOo=o("RobertaForMultipleChoice"),xOo=o(" (RoBERTa model)"),$Oo=l(),Nb=a("li"),bpe=a("strong"),kOo=o("roformer"),SOo=o(" \u2014 "),UV=a("a"),ROo=o("RoFormerForMultipleChoice"),POo=o(" (RoFormer model)"),BOo=l(),qb=a("li"),vpe=a("strong"),IOo=o("squeezebert"),NOo=o(" \u2014 "),JV=a("a"),qOo=o("SqueezeBertForMultipleChoice"),jOo=o(" (SqueezeBERT model)"),DOo=l(),jb=a("li"),Fpe=a("strong"),GOo=o("xlm"),OOo=o(" \u2014 "),YV=a("a"),VOo=o("XLMForMultipleChoice"),XOo=o(" (XLM model)"),zOo=l(),Db=a("li"),Tpe=a("strong"),WOo=o("xlm-roberta"),QOo=o(" \u2014 "),KV=a("a"),HOo=o("XLMRobertaForMultipleChoice"),UOo=o(" (XLM-RoBERTa model)"),JOo=l(),Gb=a("li"),Mpe=a("strong"),YOo=o("xlm-roberta-xl"),KOo=o(" \u2014 "),ZV=a("a"),ZOo=o("XLMRobertaXLForMultipleChoice"),eVo=o(" (XLM-RoBERTa-XL model)"),oVo=l(),Ob=a("li"),Epe=a("strong"),rVo=o("xlnet"),tVo=o(" \u2014 "),eX=a("a"),aVo=o("XLNetForMultipleChoice"),nVo=o(" (XLNet model)"),sVo=l(),Vb=a("li"),Cpe=a("strong"),lVo=o("yoso"),iVo=o(" \u2014 "),oX=a("a"),dVo=o("YosoForMultipleChoice"),cVo=o(" (YOSO model)"),fVo=l(),Xb=a("p"),mVo=o("The model is set in evaluation mode by default using "),wpe=a("code"),gVo=o("model.eval()"),hVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),pVo=o("model.train()"),uVo=l(),F(zb.$$.fragment),xGe=l(),od=a("h2"),Wb=a("a"),Lpe=a("span"),F(Ly.$$.fragment),_Vo=l(),ype=a("span"),bVo=o("AutoModelForNextSentencePrediction"),$Ge=l(),Io=a("div"),F(yy.$$.fragment),vVo=l(),rd=a("p"),FVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rX=a("a"),TVo=o("from_pretrained()"),MVo=o(" class method or the "),tX=a("a"),EVo=o("from_config()"),CVo=o(` class
method.`),wVo=l(),xy=a("p"),AVo=o("This class cannot be instantiated directly using "),xpe=a("code"),LVo=o("__init__()"),yVo=o(" (throws an error)."),xVo=l(),mt=a("div"),F($y.$$.fragment),$Vo=l(),$pe=a("p"),kVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SVo=l(),td=a("p"),RVo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),PVo=o("not"),BVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),IVo=o("from_pretrained()"),NVo=o(" to load the model weights."),qVo=l(),F(Qb.$$.fragment),jVo=l(),to=a("div"),F(ky.$$.fragment),DVo=l(),Spe=a("p"),GVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OVo=l(),ja=a("p"),VVo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),XVo=o("model_type"),zVo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),WVo=o("pretrained_model_name_or_path"),QVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),HVo=o("pretrained_model_name_or_path"),UVo=o(":"),JVo=l(),Zr=a("ul"),Hb=a("li"),Ipe=a("strong"),YVo=o("bert"),KVo=o(" \u2014 "),nX=a("a"),ZVo=o("BertForNextSentencePrediction"),eXo=o(" (BERT model)"),oXo=l(),Ub=a("li"),Npe=a("strong"),rXo=o("fnet"),tXo=o(" \u2014 "),sX=a("a"),aXo=o("FNetForNextSentencePrediction"),nXo=o(" (FNet model)"),sXo=l(),Jb=a("li"),qpe=a("strong"),lXo=o("megatron-bert"),iXo=o(" \u2014 "),lX=a("a"),dXo=o("MegatronBertForNextSentencePrediction"),cXo=o(" (Megatron-BERT model)"),fXo=l(),Yb=a("li"),jpe=a("strong"),mXo=o("mobilebert"),gXo=o(" \u2014 "),iX=a("a"),hXo=o("MobileBertForNextSentencePrediction"),pXo=o(" (MobileBERT model)"),uXo=l(),Kb=a("li"),Dpe=a("strong"),_Xo=o("qdqbert"),bXo=o(" \u2014 "),dX=a("a"),vXo=o("QDQBertForNextSentencePrediction"),FXo=o(" (QDQBert model)"),TXo=l(),Zb=a("p"),MXo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),EXo=o("model.eval()"),CXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),wXo=o("model.train()"),AXo=l(),F(ev.$$.fragment),kGe=l(),ad=a("h2"),ov=a("a"),Vpe=a("span"),F(Sy.$$.fragment),LXo=l(),Xpe=a("span"),yXo=o("AutoModelForTokenClassification"),SGe=l(),No=a("div"),F(Ry.$$.fragment),xXo=l(),nd=a("p"),$Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cX=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),fX=a("a"),RXo=o("from_config()"),PXo=o(` class
method.`),BXo=l(),Py=a("p"),IXo=o("This class cannot be instantiated directly using "),zpe=a("code"),NXo=o("__init__()"),qXo=o(" (throws an error)."),jXo=l(),gt=a("div"),F(By.$$.fragment),DXo=l(),Wpe=a("p"),GXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OXo=l(),sd=a("p"),VXo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),XXo=o("not"),zXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),WXo=o("from_pretrained()"),QXo=o(" to load the model weights."),HXo=l(),F(rv.$$.fragment),UXo=l(),ao=a("div"),F(Iy.$$.fragment),JXo=l(),Hpe=a("p"),YXo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KXo=l(),Da=a("p"),ZXo=o("The model class to instantiate is selected based on the "),Upe=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),H=a("ul"),tv=a("li"),Kpe=a("strong"),lzo=o("albert"),izo=o(" \u2014 "),gX=a("a"),dzo=o("AlbertForTokenClassification"),czo=o(" (ALBERT model)"),fzo=l(),av=a("li"),Zpe=a("strong"),mzo=o("bert"),gzo=o(" \u2014 "),hX=a("a"),hzo=o("BertForTokenClassification"),pzo=o(" (BERT model)"),uzo=l(),nv=a("li"),eue=a("strong"),_zo=o("big_bird"),bzo=o(" \u2014 "),pX=a("a"),vzo=o("BigBirdForTokenClassification"),Fzo=o(" (BigBird model)"),Tzo=l(),sv=a("li"),oue=a("strong"),Mzo=o("bloom"),Ezo=o(" \u2014 "),uX=a("a"),Czo=o("BloomForTokenClassification"),wzo=o(" (BLOOM model)"),Azo=l(),lv=a("li"),rue=a("strong"),Lzo=o("camembert"),yzo=o(" \u2014 "),_X=a("a"),xzo=o("CamembertForTokenClassification"),$zo=o(" (CamemBERT model)"),kzo=l(),iv=a("li"),tue=a("strong"),Szo=o("canine"),Rzo=o(" \u2014 "),bX=a("a"),Pzo=o("CanineForTokenClassification"),Bzo=o(" (CANINE model)"),Izo=l(),dv=a("li"),aue=a("strong"),Nzo=o("convbert"),qzo=o(" \u2014 "),vX=a("a"),jzo=o("ConvBertForTokenClassification"),Dzo=o(" (ConvBERT model)"),Gzo=l(),cv=a("li"),nue=a("strong"),Ozo=o("data2vec-text"),Vzo=o(" \u2014 "),FX=a("a"),Xzo=o("Data2VecTextForTokenClassification"),zzo=o(" (Data2VecText model)"),Wzo=l(),fv=a("li"),sue=a("strong"),Qzo=o("deberta"),Hzo=o(" \u2014 "),TX=a("a"),Uzo=o("DebertaForTokenClassification"),Jzo=o(" (DeBERTa model)"),Yzo=l(),mv=a("li"),lue=a("strong"),Kzo=o("deberta-v2"),Zzo=o(" \u2014 "),MX=a("a"),eWo=o("DebertaV2ForTokenClassification"),oWo=o(" (DeBERTa-v2 model)"),rWo=l(),gv=a("li"),iue=a("strong"),tWo=o("distilbert"),aWo=o(" \u2014 "),EX=a("a"),nWo=o("DistilBertForTokenClassification"),sWo=o(" (DistilBERT model)"),lWo=l(),hv=a("li"),due=a("strong"),iWo=o("electra"),dWo=o(" \u2014 "),CX=a("a"),cWo=o("ElectraForTokenClassification"),fWo=o(" (ELECTRA model)"),mWo=l(),pv=a("li"),cue=a("strong"),gWo=o("flaubert"),hWo=o(" \u2014 "),wX=a("a"),pWo=o("FlaubertForTokenClassification"),uWo=o(" (FlauBERT model)"),_Wo=l(),uv=a("li"),fue=a("strong"),bWo=o("fnet"),vWo=o(" \u2014 "),AX=a("a"),FWo=o("FNetForTokenClassification"),TWo=o(" (FNet model)"),MWo=l(),_v=a("li"),mue=a("strong"),EWo=o("funnel"),CWo=o(" \u2014 "),LX=a("a"),wWo=o("FunnelForTokenClassification"),AWo=o(" (Funnel Transformer model)"),LWo=l(),bv=a("li"),gue=a("strong"),yWo=o("gpt2"),xWo=o(" \u2014 "),yX=a("a"),$Wo=o("GPT2ForTokenClassification"),kWo=o(" (OpenAI GPT-2 model)"),SWo=l(),vv=a("li"),hue=a("strong"),RWo=o("ibert"),PWo=o(" \u2014 "),xX=a("a"),BWo=o("IBertForTokenClassification"),IWo=o(" (I-BERT model)"),NWo=l(),Fv=a("li"),pue=a("strong"),qWo=o("layoutlm"),jWo=o(" \u2014 "),$X=a("a"),DWo=o("LayoutLMForTokenClassification"),GWo=o(" (LayoutLM model)"),OWo=l(),Tv=a("li"),uue=a("strong"),VWo=o("layoutlmv2"),XWo=o(" \u2014 "),kX=a("a"),zWo=o("LayoutLMv2ForTokenClassification"),WWo=o(" (LayoutLMv2 model)"),QWo=l(),Mv=a("li"),_ue=a("strong"),HWo=o("layoutlmv3"),UWo=o(" \u2014 "),SX=a("a"),JWo=o("LayoutLMv3ForTokenClassification"),YWo=o(" (LayoutLMv3 model)"),KWo=l(),Ev=a("li"),bue=a("strong"),ZWo=o("longformer"),eQo=o(" \u2014 "),RX=a("a"),oQo=o("LongformerForTokenClassification"),rQo=o(" (Longformer model)"),tQo=l(),Cv=a("li"),vue=a("strong"),aQo=o("megatron-bert"),nQo=o(" \u2014 "),PX=a("a"),sQo=o("MegatronBertForTokenClassification"),lQo=o(" (Megatron-BERT model)"),iQo=l(),wv=a("li"),Fue=a("strong"),dQo=o("mobilebert"),cQo=o(" \u2014 "),BX=a("a"),fQo=o("MobileBertForTokenClassification"),mQo=o(" (MobileBERT model)"),gQo=l(),Av=a("li"),Tue=a("strong"),hQo=o("mpnet"),pQo=o(" \u2014 "),IX=a("a"),uQo=o("MPNetForTokenClassification"),_Qo=o(" (MPNet model)"),bQo=l(),Lv=a("li"),Mue=a("strong"),vQo=o("nystromformer"),FQo=o(" \u2014 "),NX=a("a"),TQo=o("NystromformerForTokenClassification"),MQo=o(" (Nystr\xF6mformer model)"),EQo=l(),yv=a("li"),Eue=a("strong"),CQo=o("qdqbert"),wQo=o(" \u2014 "),qX=a("a"),AQo=o("QDQBertForTokenClassification"),LQo=o(" (QDQBert model)"),yQo=l(),xv=a("li"),Cue=a("strong"),xQo=o("rembert"),$Qo=o(" \u2014 "),jX=a("a"),kQo=o("RemBertForTokenClassification"),SQo=o(" (RemBERT model)"),RQo=l(),$v=a("li"),wue=a("strong"),PQo=o("roberta"),BQo=o(" \u2014 "),DX=a("a"),IQo=o("RobertaForTokenClassification"),NQo=o(" (RoBERTa model)"),qQo=l(),kv=a("li"),Aue=a("strong"),jQo=o("roformer"),DQo=o(" \u2014 "),GX=a("a"),GQo=o("RoFormerForTokenClassification"),OQo=o(" (RoFormer model)"),VQo=l(),Sv=a("li"),Lue=a("strong"),XQo=o("squeezebert"),zQo=o(" \u2014 "),OX=a("a"),WQo=o("SqueezeBertForTokenClassification"),QQo=o(" (SqueezeBERT model)"),HQo=l(),Rv=a("li"),yue=a("strong"),UQo=o("xlm"),JQo=o(" \u2014 "),VX=a("a"),YQo=o("XLMForTokenClassification"),KQo=o(" (XLM model)"),ZQo=l(),Pv=a("li"),xue=a("strong"),eHo=o("xlm-roberta"),oHo=o(" \u2014 "),XX=a("a"),rHo=o("XLMRobertaForTokenClassification"),tHo=o(" (XLM-RoBERTa model)"),aHo=l(),Bv=a("li"),$ue=a("strong"),nHo=o("xlm-roberta-xl"),sHo=o(" \u2014 "),zX=a("a"),lHo=o("XLMRobertaXLForTokenClassification"),iHo=o(" (XLM-RoBERTa-XL model)"),dHo=l(),Iv=a("li"),kue=a("strong"),cHo=o("xlnet"),fHo=o(" \u2014 "),WX=a("a"),mHo=o("XLNetForTokenClassification"),gHo=o(" (XLNet model)"),hHo=l(),Nv=a("li"),Sue=a("strong"),pHo=o("yoso"),uHo=o(" \u2014 "),QX=a("a"),_Ho=o("YosoForTokenClassification"),bHo=o(" (YOSO model)"),vHo=l(),qv=a("p"),FHo=o("The model is set in evaluation mode by default using "),Rue=a("code"),THo=o("model.eval()"),MHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),EHo=o("model.train()"),CHo=l(),F(jv.$$.fragment),RGe=l(),ld=a("h2"),Dv=a("a"),Bue=a("span"),F(Ny.$$.fragment),wHo=l(),Iue=a("span"),AHo=o("AutoModelForQuestionAnswering"),PGe=l(),qo=a("div"),F(qy.$$.fragment),LHo=l(),id=a("p"),yHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HX=a("a"),xHo=o("from_pretrained()"),$Ho=o(" class method or the "),UX=a("a"),kHo=o("from_config()"),SHo=o(` class
method.`),RHo=l(),jy=a("p"),PHo=o("This class cannot be instantiated directly using "),Nue=a("code"),BHo=o("__init__()"),IHo=o(" (throws an error)."),NHo=l(),ht=a("div"),F(Dy.$$.fragment),qHo=l(),que=a("p"),jHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DHo=l(),dd=a("p"),GHo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),OHo=o("not"),VHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),XHo=o("from_pretrained()"),zHo=o(" to load the model weights."),WHo=l(),F(Gv.$$.fragment),QHo=l(),no=a("div"),F(Gy.$$.fragment),HHo=l(),Due=a("p"),UHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JHo=l(),Ga=a("p"),YHo=o("The model class to instantiate is selected based on the "),Gue=a("code"),KHo=o("model_type"),ZHo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),rUo=o("pretrained_model_name_or_path"),tUo=o(":"),aUo=l(),V=a("ul"),Ov=a("li"),Xue=a("strong"),nUo=o("albert"),sUo=o(" \u2014 "),YX=a("a"),lUo=o("AlbertForQuestionAnswering"),iUo=o(" (ALBERT model)"),dUo=l(),Vv=a("li"),zue=a("strong"),cUo=o("bart"),fUo=o(" \u2014 "),KX=a("a"),mUo=o("BartForQuestionAnswering"),gUo=o(" (BART model)"),hUo=l(),Xv=a("li"),Wue=a("strong"),pUo=o("bert"),uUo=o(" \u2014 "),ZX=a("a"),_Uo=o("BertForQuestionAnswering"),bUo=o(" (BERT model)"),vUo=l(),zv=a("li"),Que=a("strong"),FUo=o("big_bird"),TUo=o(" \u2014 "),ez=a("a"),MUo=o("BigBirdForQuestionAnswering"),EUo=o(" (BigBird model)"),CUo=l(),Wv=a("li"),Hue=a("strong"),wUo=o("bigbird_pegasus"),AUo=o(" \u2014 "),oz=a("a"),LUo=o("BigBirdPegasusForQuestionAnswering"),yUo=o(" (BigBird-Pegasus model)"),xUo=l(),Qv=a("li"),Uue=a("strong"),$Uo=o("camembert"),kUo=o(" \u2014 "),rz=a("a"),SUo=o("CamembertForQuestionAnswering"),RUo=o(" (CamemBERT model)"),PUo=l(),Hv=a("li"),Jue=a("strong"),BUo=o("canine"),IUo=o(" \u2014 "),tz=a("a"),NUo=o("CanineForQuestionAnswering"),qUo=o(" (CANINE model)"),jUo=l(),Uv=a("li"),Yue=a("strong"),DUo=o("convbert"),GUo=o(" \u2014 "),az=a("a"),OUo=o("ConvBertForQuestionAnswering"),VUo=o(" (ConvBERT model)"),XUo=l(),Jv=a("li"),Kue=a("strong"),zUo=o("data2vec-text"),WUo=o(" \u2014 "),nz=a("a"),QUo=o("Data2VecTextForQuestionAnswering"),HUo=o(" (Data2VecText model)"),UUo=l(),Yv=a("li"),Zue=a("strong"),JUo=o("deberta"),YUo=o(" \u2014 "),sz=a("a"),KUo=o("DebertaForQuestionAnswering"),ZUo=o(" (DeBERTa model)"),eJo=l(),Kv=a("li"),e_e=a("strong"),oJo=o("deberta-v2"),rJo=o(" \u2014 "),lz=a("a"),tJo=o("DebertaV2ForQuestionAnswering"),aJo=o(" (DeBERTa-v2 model)"),nJo=l(),Zv=a("li"),o_e=a("strong"),sJo=o("distilbert"),lJo=o(" \u2014 "),iz=a("a"),iJo=o("DistilBertForQuestionAnswering"),dJo=o(" (DistilBERT model)"),cJo=l(),e0=a("li"),r_e=a("strong"),fJo=o("electra"),mJo=o(" \u2014 "),dz=a("a"),gJo=o("ElectraForQuestionAnswering"),hJo=o(" (ELECTRA model)"),pJo=l(),o0=a("li"),t_e=a("strong"),uJo=o("flaubert"),_Jo=o(" \u2014 "),cz=a("a"),bJo=o("FlaubertForQuestionAnsweringSimple"),vJo=o(" (FlauBERT model)"),FJo=l(),r0=a("li"),a_e=a("strong"),TJo=o("fnet"),MJo=o(" \u2014 "),fz=a("a"),EJo=o("FNetForQuestionAnswering"),CJo=o(" (FNet model)"),wJo=l(),t0=a("li"),n_e=a("strong"),AJo=o("funnel"),LJo=o(" \u2014 "),mz=a("a"),yJo=o("FunnelForQuestionAnswering"),xJo=o(" (Funnel Transformer model)"),$Jo=l(),a0=a("li"),s_e=a("strong"),kJo=o("gptj"),SJo=o(" \u2014 "),gz=a("a"),RJo=o("GPTJForQuestionAnswering"),PJo=o(" (GPT-J model)"),BJo=l(),n0=a("li"),l_e=a("strong"),IJo=o("ibert"),NJo=o(" \u2014 "),hz=a("a"),qJo=o("IBertForQuestionAnswering"),jJo=o(" (I-BERT model)"),DJo=l(),s0=a("li"),i_e=a("strong"),GJo=o("layoutlmv2"),OJo=o(" \u2014 "),pz=a("a"),VJo=o("LayoutLMv2ForQuestionAnswering"),XJo=o(" (LayoutLMv2 model)"),zJo=l(),l0=a("li"),d_e=a("strong"),WJo=o("layoutlmv3"),QJo=o(" \u2014 "),uz=a("a"),HJo=o("LayoutLMv3ForQuestionAnswering"),UJo=o(" (LayoutLMv3 model)"),JJo=l(),i0=a("li"),c_e=a("strong"),YJo=o("led"),KJo=o(" \u2014 "),_z=a("a"),ZJo=o("LEDForQuestionAnswering"),eYo=o(" (LED model)"),oYo=l(),d0=a("li"),f_e=a("strong"),rYo=o("longformer"),tYo=o(" \u2014 "),bz=a("a"),aYo=o("LongformerForQuestionAnswering"),nYo=o(" (Longformer model)"),sYo=l(),c0=a("li"),m_e=a("strong"),lYo=o("lxmert"),iYo=o(" \u2014 "),vz=a("a"),dYo=o("LxmertForQuestionAnswering"),cYo=o(" (LXMERT model)"),fYo=l(),f0=a("li"),g_e=a("strong"),mYo=o("mbart"),gYo=o(" \u2014 "),Fz=a("a"),hYo=o("MBartForQuestionAnswering"),pYo=o(" (mBART model)"),uYo=l(),m0=a("li"),h_e=a("strong"),_Yo=o("megatron-bert"),bYo=o(" \u2014 "),Tz=a("a"),vYo=o("MegatronBertForQuestionAnswering"),FYo=o(" (Megatron-BERT model)"),TYo=l(),g0=a("li"),p_e=a("strong"),MYo=o("mobilebert"),EYo=o(" \u2014 "),Mz=a("a"),CYo=o("MobileBertForQuestionAnswering"),wYo=o(" (MobileBERT model)"),AYo=l(),h0=a("li"),u_e=a("strong"),LYo=o("mpnet"),yYo=o(" \u2014 "),Ez=a("a"),xYo=o("MPNetForQuestionAnswering"),$Yo=o(" (MPNet model)"),kYo=l(),p0=a("li"),__e=a("strong"),SYo=o("nystromformer"),RYo=o(" \u2014 "),Cz=a("a"),PYo=o("NystromformerForQuestionAnswering"),BYo=o(" (Nystr\xF6mformer model)"),IYo=l(),u0=a("li"),b_e=a("strong"),NYo=o("qdqbert"),qYo=o(" \u2014 "),wz=a("a"),jYo=o("QDQBertForQuestionAnswering"),DYo=o(" (QDQBert model)"),GYo=l(),_0=a("li"),v_e=a("strong"),OYo=o("reformer"),VYo=o(" \u2014 "),Az=a("a"),XYo=o("ReformerForQuestionAnswering"),zYo=o(" (Reformer model)"),WYo=l(),b0=a("li"),F_e=a("strong"),QYo=o("rembert"),HYo=o(" \u2014 "),Lz=a("a"),UYo=o("RemBertForQuestionAnswering"),JYo=o(" (RemBERT model)"),YYo=l(),v0=a("li"),T_e=a("strong"),KYo=o("roberta"),ZYo=o(" \u2014 "),yz=a("a"),eKo=o("RobertaForQuestionAnswering"),oKo=o(" (RoBERTa model)"),rKo=l(),F0=a("li"),M_e=a("strong"),tKo=o("roformer"),aKo=o(" \u2014 "),xz=a("a"),nKo=o("RoFormerForQuestionAnswering"),sKo=o(" (RoFormer model)"),lKo=l(),T0=a("li"),E_e=a("strong"),iKo=o("splinter"),dKo=o(" \u2014 "),$z=a("a"),cKo=o("SplinterForQuestionAnswering"),fKo=o(" (Splinter model)"),mKo=l(),M0=a("li"),C_e=a("strong"),gKo=o("squeezebert"),hKo=o(" \u2014 "),kz=a("a"),pKo=o("SqueezeBertForQuestionAnswering"),uKo=o(" (SqueezeBERT model)"),_Ko=l(),E0=a("li"),w_e=a("strong"),bKo=o("xlm"),vKo=o(" \u2014 "),Sz=a("a"),FKo=o("XLMForQuestionAnsweringSimple"),TKo=o(" (XLM model)"),MKo=l(),C0=a("li"),A_e=a("strong"),EKo=o("xlm-roberta"),CKo=o(" \u2014 "),Rz=a("a"),wKo=o("XLMRobertaForQuestionAnswering"),AKo=o(" (XLM-RoBERTa model)"),LKo=l(),w0=a("li"),L_e=a("strong"),yKo=o("xlm-roberta-xl"),xKo=o(" \u2014 "),Pz=a("a"),$Ko=o("XLMRobertaXLForQuestionAnswering"),kKo=o(" (XLM-RoBERTa-XL model)"),SKo=l(),A0=a("li"),y_e=a("strong"),RKo=o("xlnet"),PKo=o(" \u2014 "),Bz=a("a"),BKo=o("XLNetForQuestionAnsweringSimple"),IKo=o(" (XLNet model)"),NKo=l(),L0=a("li"),x_e=a("strong"),qKo=o("yoso"),jKo=o(" \u2014 "),Iz=a("a"),DKo=o("YosoForQuestionAnswering"),GKo=o(" (YOSO model)"),OKo=l(),y0=a("p"),VKo=o("The model is set in evaluation mode by default using "),$_e=a("code"),XKo=o("model.eval()"),zKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),WKo=o("model.train()"),QKo=l(),F(x0.$$.fragment),BGe=l(),cd=a("h2"),$0=a("a"),S_e=a("span"),F(Oy.$$.fragment),HKo=l(),R_e=a("span"),UKo=o("AutoModelForTableQuestionAnswering"),IGe=l(),jo=a("div"),F(Vy.$$.fragment),JKo=l(),fd=a("p"),YKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nz=a("a"),KKo=o("from_pretrained()"),ZKo=o(" class method or the "),qz=a("a"),eZo=o("from_config()"),oZo=o(` class
method.`),rZo=l(),Xy=a("p"),tZo=o("This class cannot be instantiated directly using "),P_e=a("code"),aZo=o("__init__()"),nZo=o(" (throws an error)."),sZo=l(),pt=a("div"),F(zy.$$.fragment),lZo=l(),B_e=a("p"),iZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dZo=l(),md=a("p"),cZo=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),fZo=o("not"),mZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),gZo=o("from_pretrained()"),hZo=o(" to load the model weights."),pZo=l(),F(k0.$$.fragment),uZo=l(),so=a("div"),F(Wy.$$.fragment),_Zo=l(),N_e=a("p"),bZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vZo=l(),Oa=a("p"),FZo=o("The model class to instantiate is selected based on the "),q_e=a("code"),TZo=o("model_type"),MZo=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),EZo=o("pretrained_model_name_or_path"),CZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),wZo=o("pretrained_model_name_or_path"),AZo=o(":"),LZo=l(),G_e=a("ul"),S0=a("li"),O_e=a("strong"),yZo=o("tapas"),xZo=o(" \u2014 "),Dz=a("a"),$Zo=o("TapasForQuestionAnswering"),kZo=o(" (TAPAS model)"),SZo=l(),R0=a("p"),RZo=o("The model is set in evaluation mode by default using "),V_e=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),IZo=o("model.train()"),NZo=l(),F(P0.$$.fragment),NGe=l(),gd=a("h2"),B0=a("a"),z_e=a("span"),F(Qy.$$.fragment),qZo=l(),W_e=a("span"),jZo=o("AutoModelForImageClassification"),qGe=l(),Do=a("div"),F(Hy.$$.fragment),DZo=l(),hd=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gz=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),Oz=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),WZo=l(),Uy=a("p"),QZo=o("This class cannot be instantiated directly using "),Q_e=a("code"),HZo=o("__init__()"),UZo=o(" (throws an error)."),JZo=l(),ut=a("div"),F(Jy.$$.fragment),YZo=l(),H_e=a("p"),KZo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZZo=l(),pd=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(I0.$$.fragment),ser=l(),lo=a("div"),F(Yy.$$.fragment),ler=l(),J_e=a("p"),ier=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),der=l(),Va=a("p"),cer=o("The model class to instantiate is selected based on the "),Y_e=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),per=o("pretrained_model_name_or_path"),uer=o(":"),_er=l(),Fe=a("ul"),N0=a("li"),e7e=a("strong"),ber=o("beit"),ver=o(" \u2014 "),Xz=a("a"),Fer=o("BeitForImageClassification"),Ter=o(" (BEiT model)"),Mer=l(),q0=a("li"),o7e=a("strong"),Eer=o("convnext"),Cer=o(" \u2014 "),zz=a("a"),wer=o("ConvNextForImageClassification"),Aer=o(" (ConvNeXT model)"),Ler=l(),j0=a("li"),r7e=a("strong"),yer=o("cvt"),xer=o(" \u2014 "),Wz=a("a"),$er=o("CvtForImageClassification"),ker=o(" (CvT model)"),Ser=l(),D0=a("li"),t7e=a("strong"),Rer=o("data2vec-vision"),Per=o(" \u2014 "),Qz=a("a"),Ber=o("Data2VecVisionForImageClassification"),Ier=o(" (Data2VecVision model)"),Ner=l(),Os=a("li"),a7e=a("strong"),qer=o("deit"),jer=o(" \u2014 "),Hz=a("a"),Der=o("DeiTForImageClassification"),Ger=o(" or "),Uz=a("a"),Oer=o("DeiTForImageClassificationWithTeacher"),Ver=o(" (DeiT model)"),Xer=l(),G0=a("li"),n7e=a("strong"),zer=o("imagegpt"),Wer=o(" \u2014 "),Jz=a("a"),Qer=o("ImageGPTForImageClassification"),Her=o(" (ImageGPT model)"),Uer=l(),Vs=a("li"),s7e=a("strong"),Jer=o("levit"),Yer=o(" \u2014 "),Yz=a("a"),Ker=o("LevitForImageClassification"),Zer=o(" or "),Kz=a("a"),eor=o("LevitForImageClassificationWithTeacher"),oor=o(" (LeViT model)"),ror=l(),_t=a("li"),l7e=a("strong"),tor=o("perceiver"),aor=o(" \u2014 "),Zz=a("a"),nor=o("PerceiverForImageClassificationLearned"),sor=o(" or "),eW=a("a"),lor=o("PerceiverForImageClassificationFourier"),ior=o(" or "),oW=a("a"),dor=o("PerceiverForImageClassificationConvProcessing"),cor=o(" (Perceiver model)"),mor=l(),O0=a("li"),i7e=a("strong"),gor=o("poolformer"),hor=o(" \u2014 "),rW=a("a"),por=o("PoolFormerForImageClassification"),uor=o(" (PoolFormer model)"),_or=l(),V0=a("li"),d7e=a("strong"),bor=o("regnet"),vor=o(" \u2014 "),tW=a("a"),For=o("RegNetForImageClassification"),Tor=o(" (RegNet model)"),Mor=l(),X0=a("li"),c7e=a("strong"),Eor=o("resnet"),Cor=o(" \u2014 "),aW=a("a"),wor=o("ResNetForImageClassification"),Aor=o(" (ResNet model)"),Lor=l(),z0=a("li"),f7e=a("strong"),yor=o("segformer"),xor=o(" \u2014 "),nW=a("a"),$or=o("SegformerForImageClassification"),kor=o(" (SegFormer model)"),Sor=l(),W0=a("li"),m7e=a("strong"),Ror=o("swin"),Por=o(" \u2014 "),sW=a("a"),Bor=o("SwinForImageClassification"),Ior=o(" (Swin Transformer model)"),Nor=l(),Q0=a("li"),g7e=a("strong"),qor=o("van"),jor=o(" \u2014 "),lW=a("a"),Dor=o("VanForImageClassification"),Gor=o(" (VAN model)"),Oor=l(),H0=a("li"),h7e=a("strong"),Vor=o("vit"),Xor=o(" \u2014 "),iW=a("a"),zor=o("ViTForImageClassification"),Wor=o(" (ViT model)"),Qor=l(),U0=a("p"),Hor=o("The model is set in evaluation mode by default using "),p7e=a("code"),Uor=o("model.eval()"),Jor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=a("code"),Yor=o("model.train()"),Kor=l(),F(J0.$$.fragment),jGe=l(),ud=a("h2"),Y0=a("a"),_7e=a("span"),F(Ky.$$.fragment),Zor=l(),b7e=a("span"),err=o("AutoModelForVision2Seq"),DGe=l(),Go=a("div"),F(Zy.$$.fragment),orr=l(),_d=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dW=a("a"),trr=o("from_pretrained()"),arr=o(" class method or the "),cW=a("a"),nrr=o("from_config()"),srr=o(` class
method.`),lrr=l(),e8=a("p"),irr=o("This class cannot be instantiated directly using "),v7e=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),frr=l(),bt=a("div"),F(o8.$$.fragment),mrr=l(),F7e=a("p"),grr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hrr=l(),bd=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),urr=o("not"),_rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),brr=o("from_pretrained()"),vrr=o(" to load the model weights."),Frr=l(),F(K0.$$.fragment),Trr=l(),io=a("div"),F(r8.$$.fragment),Mrr=l(),M7e=a("p"),Err=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Crr=l(),Xa=a("p"),wrr=o("The model class to instantiate is selected based on the "),E7e=a("code"),Arr=o("model_type"),Lrr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),yrr=o("pretrained_model_name_or_path"),xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(":"),Srr=l(),A7e=a("ul"),Z0=a("li"),L7e=a("strong"),Rrr=o("vision-encoder-decoder"),Prr=o(" \u2014 "),mW=a("a"),Brr=o("VisionEncoderDecoderModel"),Irr=o(" (Vision Encoder decoder model)"),Nrr=l(),eF=a("p"),qrr=o("The model is set in evaluation mode by default using "),y7e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x7e=a("code"),Grr=o("model.train()"),Orr=l(),F(oF.$$.fragment),GGe=l(),vd=a("h2"),rF=a("a"),$7e=a("span"),F(t8.$$.fragment),Vrr=l(),k7e=a("span"),Xrr=o("AutoModelForVisualQuestionAnswering"),OGe=l(),Oo=a("div"),F(a8.$$.fragment),zrr=l(),Fd=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),gW=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),hW=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),n8=a("p"),Krr=o("This class cannot be instantiated directly using "),S7e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),vt=a("div"),F(s8.$$.fragment),rtr=l(),R7e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),atr=l(),Td=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(tF.$$.fragment),ftr=l(),co=a("div"),F(l8.$$.fragment),mtr=l(),B7e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),htr=l(),za=a("p"),ptr=o("The model class to instantiate is selected based on the "),I7e=a("code"),utr=o("model_type"),_tr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),j7e=a("ul"),aF=a("li"),D7e=a("strong"),Etr=o("vilt"),Ctr=o(" \u2014 "),uW=a("a"),wtr=o("ViltForQuestionAnswering"),Atr=o(" (ViLT model)"),Ltr=l(),nF=a("p"),ytr=o("The model is set in evaluation mode by default using "),G7e=a("code"),xtr=o("model.eval()"),$tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O7e=a("code"),ktr=o("model.train()"),Str=l(),F(sF.$$.fragment),VGe=l(),Md=a("h2"),lF=a("a"),V7e=a("span"),F(i8.$$.fragment),Rtr=l(),X7e=a("span"),Ptr=o("AutoModelForAudioClassification"),XGe=l(),Vo=a("div"),F(d8.$$.fragment),Btr=l(),Ed=a("p"),Itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_W=a("a"),Ntr=o("from_pretrained()"),qtr=o(" class method or the "),bW=a("a"),jtr=o("from_config()"),Dtr=o(` class
method.`),Gtr=l(),c8=a("p"),Otr=o("This class cannot be instantiated directly using "),z7e=a("code"),Vtr=o("__init__()"),Xtr=o(" (throws an error)."),ztr=l(),Ft=a("div"),F(f8.$$.fragment),Wtr=l(),W7e=a("p"),Qtr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Htr=l(),Cd=a("p"),Utr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),Jtr=o("not"),Ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Ktr=o("from_pretrained()"),Ztr=o(" to load the model weights."),ear=l(),F(iF.$$.fragment),oar=l(),fo=a("div"),F(m8.$$.fragment),rar=l(),H7e=a("p"),tar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),aar=l(),Wa=a("p"),nar=o("The model class to instantiate is selected based on the "),U7e=a("code"),sar=o("model_type"),lar=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),iar=o("pretrained_model_name_or_path"),dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),car=o("pretrained_model_name_or_path"),far=o(":"),mar=l(),Pe=a("ul"),dF=a("li"),K7e=a("strong"),gar=o("data2vec-audio"),har=o(" \u2014 "),FW=a("a"),par=o("Data2VecAudioForSequenceClassification"),uar=o(" (Data2VecAudio model)"),_ar=l(),cF=a("li"),Z7e=a("strong"),bar=o("hubert"),Far=o(" \u2014 "),TW=a("a"),Tar=o("HubertForSequenceClassification"),Mar=o(" (Hubert model)"),Ear=l(),fF=a("li"),e1e=a("strong"),Car=o("sew"),war=o(" \u2014 "),MW=a("a"),Aar=o("SEWForSequenceClassification"),Lar=o(" (SEW model)"),yar=l(),mF=a("li"),o1e=a("strong"),xar=o("sew-d"),$ar=o(" \u2014 "),EW=a("a"),kar=o("SEWDForSequenceClassification"),Sar=o(" (SEW-D model)"),Rar=l(),gF=a("li"),r1e=a("strong"),Par=o("unispeech"),Bar=o(" \u2014 "),CW=a("a"),Iar=o("UniSpeechForSequenceClassification"),Nar=o(" (UniSpeech model)"),qar=l(),hF=a("li"),t1e=a("strong"),jar=o("unispeech-sat"),Dar=o(" \u2014 "),wW=a("a"),Gar=o("UniSpeechSatForSequenceClassification"),Oar=o(" (UniSpeechSat model)"),Var=l(),pF=a("li"),a1e=a("strong"),Xar=o("wav2vec2"),zar=o(" \u2014 "),AW=a("a"),War=o("Wav2Vec2ForSequenceClassification"),Qar=o(" (Wav2Vec2 model)"),Har=l(),uF=a("li"),n1e=a("strong"),Uar=o("wav2vec2-conformer"),Jar=o(" \u2014 "),LW=a("a"),Yar=o("Wav2Vec2ConformerForSequenceClassification"),Kar=o(" (Wav2Vec2-Conformer model)"),Zar=l(),_F=a("li"),s1e=a("strong"),enr=o("wavlm"),onr=o(" \u2014 "),yW=a("a"),rnr=o("WavLMForSequenceClassification"),tnr=o(" (WavLM model)"),anr=l(),bF=a("p"),nnr=o("The model is set in evaluation mode by default using "),l1e=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),inr=o("model.train()"),dnr=l(),F(vF.$$.fragment),zGe=l(),wd=a("h2"),FF=a("a"),d1e=a("span"),F(g8.$$.fragment),cnr=l(),c1e=a("span"),fnr=o("AutoModelForAudioFrameClassification"),WGe=l(),Xo=a("div"),F(h8.$$.fragment),mnr=l(),Ad=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xW=a("a"),hnr=o("from_pretrained()"),pnr=o(" class method or the "),$W=a("a"),unr=o("from_config()"),_nr=o(` class
method.`),bnr=l(),p8=a("p"),vnr=o("This class cannot be instantiated directly using "),f1e=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),Tt=a("div"),F(u8.$$.fragment),Enr=l(),m1e=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wnr=l(),Ld=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),Lnr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(TF.$$.fragment),Snr=l(),mo=a("div"),F(_8.$$.fragment),Rnr=l(),h1e=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Bnr=l(),Qa=a("p"),Inr=o("The model class to instantiate is selected based on the "),p1e=a("code"),Nnr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),et=a("ul"),MF=a("li"),b1e=a("strong"),Xnr=o("data2vec-audio"),znr=o(" \u2014 "),SW=a("a"),Wnr=o("Data2VecAudioForAudioFrameClassification"),Qnr=o(" (Data2VecAudio model)"),Hnr=l(),EF=a("li"),v1e=a("strong"),Unr=o("unispeech-sat"),Jnr=o(" \u2014 "),RW=a("a"),Ynr=o("UniSpeechSatForAudioFrameClassification"),Knr=o(" (UniSpeechSat model)"),Znr=l(),CF=a("li"),F1e=a("strong"),esr=o("wav2vec2"),osr=o(" \u2014 "),PW=a("a"),rsr=o("Wav2Vec2ForAudioFrameClassification"),tsr=o(" (Wav2Vec2 model)"),asr=l(),wF=a("li"),T1e=a("strong"),nsr=o("wav2vec2-conformer"),ssr=o(" \u2014 "),BW=a("a"),lsr=o("Wav2Vec2ConformerForAudioFrameClassification"),isr=o(" (Wav2Vec2-Conformer model)"),dsr=l(),AF=a("li"),M1e=a("strong"),csr=o("wavlm"),fsr=o(" \u2014 "),IW=a("a"),msr=o("WavLMForAudioFrameClassification"),gsr=o(" (WavLM model)"),hsr=l(),LF=a("p"),psr=o("The model is set in evaluation mode by default using "),E1e=a("code"),usr=o("model.eval()"),_sr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),bsr=o("model.train()"),vsr=l(),F(yF.$$.fragment),QGe=l(),yd=a("h2"),xF=a("a"),w1e=a("span"),F(b8.$$.fragment),Fsr=l(),A1e=a("span"),Tsr=o("AutoModelForCTC"),HGe=l(),zo=a("div"),F(v8.$$.fragment),Msr=l(),xd=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NW=a("a"),Csr=o("from_pretrained()"),wsr=o(" class method or the "),qW=a("a"),Asr=o("from_config()"),Lsr=o(` class
method.`),ysr=l(),F8=a("p"),xsr=o("This class cannot be instantiated directly using "),L1e=a("code"),$sr=o("__init__()"),ksr=o(" (throws an error)."),Ssr=l(),Mt=a("div"),F(T8.$$.fragment),Rsr=l(),y1e=a("p"),Psr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bsr=l(),$d=a("p"),Isr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),Nsr=o("not"),qsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),jsr=o("from_pretrained()"),Dsr=o(" to load the model weights."),Gsr=l(),F($F.$$.fragment),Osr=l(),go=a("div"),F(M8.$$.fragment),Vsr=l(),$1e=a("p"),Xsr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zsr=l(),Ha=a("p"),Wsr=o("The model class to instantiate is selected based on the "),k1e=a("code"),Qsr=o("model_type"),Hsr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),Usr=o("pretrained_model_name_or_path"),Jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(":"),Zsr=l(),Le=a("ul"),kF=a("li"),P1e=a("strong"),elr=o("data2vec-audio"),olr=o(" \u2014 "),DW=a("a"),rlr=o("Data2VecAudioForCTC"),tlr=o(" (Data2VecAudio model)"),alr=l(),SF=a("li"),B1e=a("strong"),nlr=o("hubert"),slr=o(" \u2014 "),GW=a("a"),llr=o("HubertForCTC"),ilr=o(" (Hubert model)"),dlr=l(),RF=a("li"),I1e=a("strong"),clr=o("mctct"),flr=o(" \u2014 "),OW=a("a"),mlr=o("MCTCTForCTC"),glr=o(" (M-CTC-T model)"),hlr=l(),PF=a("li"),N1e=a("strong"),plr=o("sew"),ulr=o(" \u2014 "),VW=a("a"),_lr=o("SEWForCTC"),blr=o(" (SEW model)"),vlr=l(),BF=a("li"),q1e=a("strong"),Flr=o("sew-d"),Tlr=o(" \u2014 "),XW=a("a"),Mlr=o("SEWDForCTC"),Elr=o(" (SEW-D model)"),Clr=l(),IF=a("li"),j1e=a("strong"),wlr=o("unispeech"),Alr=o(" \u2014 "),zW=a("a"),Llr=o("UniSpeechForCTC"),ylr=o(" (UniSpeech model)"),xlr=l(),NF=a("li"),D1e=a("strong"),$lr=o("unispeech-sat"),klr=o(" \u2014 "),WW=a("a"),Slr=o("UniSpeechSatForCTC"),Rlr=o(" (UniSpeechSat model)"),Plr=l(),qF=a("li"),G1e=a("strong"),Blr=o("wav2vec2"),Ilr=o(" \u2014 "),QW=a("a"),Nlr=o("Wav2Vec2ForCTC"),qlr=o(" (Wav2Vec2 model)"),jlr=l(),jF=a("li"),O1e=a("strong"),Dlr=o("wav2vec2-conformer"),Glr=o(" \u2014 "),HW=a("a"),Olr=o("Wav2Vec2ConformerForCTC"),Vlr=o(" (Wav2Vec2-Conformer model)"),Xlr=l(),DF=a("li"),V1e=a("strong"),zlr=o("wavlm"),Wlr=o(" \u2014 "),UW=a("a"),Qlr=o("WavLMForCTC"),Hlr=o(" (WavLM model)"),Ulr=l(),GF=a("p"),Jlr=o("The model is set in evaluation mode by default using "),X1e=a("code"),Ylr=o("model.eval()"),Klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),Zlr=o("model.train()"),eir=l(),F(OF.$$.fragment),UGe=l(),kd=a("h2"),VF=a("a"),W1e=a("span"),F(E8.$$.fragment),oir=l(),Q1e=a("span"),rir=o("AutoModelForSpeechSeq2Seq"),JGe=l(),Wo=a("div"),F(C8.$$.fragment),tir=l(),Sd=a("p"),air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JW=a("a"),nir=o("from_pretrained()"),sir=o(" class method or the "),YW=a("a"),lir=o("from_config()"),iir=o(` class
method.`),dir=l(),w8=a("p"),cir=o("This class cannot be instantiated directly using "),H1e=a("code"),fir=o("__init__()"),mir=o(" (throws an error)."),gir=l(),Et=a("div"),F(A8.$$.fragment),hir=l(),U1e=a("p"),pir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uir=l(),Rd=a("p"),_ir=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),bir=o("not"),vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Fir=o("from_pretrained()"),Tir=o(" to load the model weights."),Mir=l(),F(XF.$$.fragment),Eir=l(),ho=a("div"),F(L8.$$.fragment),Cir=l(),Y1e=a("p"),wir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Air=l(),Ua=a("p"),Lir=o("The model class to instantiate is selected based on the "),K1e=a("code"),yir=o("model_type"),xir=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(":"),Pir=l(),y8=a("ul"),zF=a("li"),o2e=a("strong"),Bir=o("speech-encoder-decoder"),Iir=o(" \u2014 "),ZW=a("a"),Nir=o("SpeechEncoderDecoderModel"),qir=o(" (Speech Encoder decoder model)"),jir=l(),WF=a("li"),r2e=a("strong"),Dir=o("speech_to_text"),Gir=o(" \u2014 "),eQ=a("a"),Oir=o("Speech2TextForConditionalGeneration"),Vir=o(" (Speech2Text model)"),Xir=l(),QF=a("p"),zir=o("The model is set in evaluation mode by default using "),t2e=a("code"),Wir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),Hir=o("model.train()"),Uir=l(),F(HF.$$.fragment),YGe=l(),Pd=a("h2"),UF=a("a"),n2e=a("span"),F(x8.$$.fragment),Jir=l(),s2e=a("span"),Yir=o("AutoModelForAudioXVector"),KGe=l(),Qo=a("div"),F($8.$$.fragment),Kir=l(),Bd=a("p"),Zir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oQ=a("a"),edr=o("from_pretrained()"),odr=o(" class method or the "),rQ=a("a"),rdr=o("from_config()"),tdr=o(` class
method.`),adr=l(),k8=a("p"),ndr=o("This class cannot be instantiated directly using "),l2e=a("code"),sdr=o("__init__()"),ldr=o(" (throws an error)."),idr=l(),Ct=a("div"),F(S8.$$.fragment),ddr=l(),i2e=a("p"),cdr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fdr=l(),Id=a("p"),mdr=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),gdr=o("not"),hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),pdr=o("from_pretrained()"),udr=o(" to load the model weights."),_dr=l(),F(JF.$$.fragment),bdr=l(),po=a("div"),F(R8.$$.fragment),vdr=l(),c2e=a("p"),Fdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tdr=l(),Ja=a("p"),Mdr=o("The model class to instantiate is selected based on the "),f2e=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),Ldr=o("pretrained_model_name_or_path"),ydr=o(":"),xdr=l(),ot=a("ul"),YF=a("li"),h2e=a("strong"),$dr=o("data2vec-audio"),kdr=o(" \u2014 "),aQ=a("a"),Sdr=o("Data2VecAudioForXVector"),Rdr=o(" (Data2VecAudio model)"),Pdr=l(),KF=a("li"),p2e=a("strong"),Bdr=o("unispeech-sat"),Idr=o(" \u2014 "),nQ=a("a"),Ndr=o("UniSpeechSatForXVector"),qdr=o(" (UniSpeechSat model)"),jdr=l(),ZF=a("li"),u2e=a("strong"),Ddr=o("wav2vec2"),Gdr=o(" \u2014 "),sQ=a("a"),Odr=o("Wav2Vec2ForXVector"),Vdr=o(" (Wav2Vec2 model)"),Xdr=l(),eT=a("li"),_2e=a("strong"),zdr=o("wav2vec2-conformer"),Wdr=o(" \u2014 "),lQ=a("a"),Qdr=o("Wav2Vec2ConformerForXVector"),Hdr=o(" (Wav2Vec2-Conformer model)"),Udr=l(),oT=a("li"),b2e=a("strong"),Jdr=o("wavlm"),Ydr=o(" \u2014 "),iQ=a("a"),Kdr=o("WavLMForXVector"),Zdr=o(" (WavLM model)"),ecr=l(),rT=a("p"),ocr=o("The model is set in evaluation mode by default using "),v2e=a("code"),rcr=o("model.eval()"),tcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),acr=o("model.train()"),ncr=l(),F(tT.$$.fragment),ZGe=l(),Nd=a("h2"),aT=a("a"),T2e=a("span"),F(P8.$$.fragment),scr=l(),M2e=a("span"),lcr=o("AutoModelForMaskedImageModeling"),eOe=l(),Ho=a("div"),F(B8.$$.fragment),icr=l(),qd=a("p"),dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dQ=a("a"),ccr=o("from_pretrained()"),fcr=o(" class method or the "),cQ=a("a"),mcr=o("from_config()"),gcr=o(` class
method.`),hcr=l(),I8=a("p"),pcr=o("This class cannot be instantiated directly using "),E2e=a("code"),ucr=o("__init__()"),_cr=o(" (throws an error)."),bcr=l(),wt=a("div"),F(N8.$$.fragment),vcr=l(),C2e=a("p"),Fcr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tcr=l(),jd=a("p"),Mcr=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),Ecr=o("not"),Ccr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),wcr=o("from_pretrained()"),Acr=o(" to load the model weights."),Lcr=l(),F(nT.$$.fragment),ycr=l(),uo=a("div"),F(q8.$$.fragment),xcr=l(),A2e=a("p"),$cr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kcr=l(),Ya=a("p"),Scr=o("The model class to instantiate is selected based on the "),L2e=a("code"),Rcr=o("model_type"),Pcr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),Bcr=o("pretrained_model_name_or_path"),Icr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),Ncr=o("pretrained_model_name_or_path"),qcr=o(":"),jcr=l(),Dd=a("ul"),sT=a("li"),$2e=a("strong"),Dcr=o("deit"),Gcr=o(" \u2014 "),mQ=a("a"),Ocr=o("DeiTForMaskedImageModeling"),Vcr=o(" (DeiT model)"),Xcr=l(),lT=a("li"),k2e=a("strong"),zcr=o("swin"),Wcr=o(" \u2014 "),gQ=a("a"),Qcr=o("SwinForMaskedImageModeling"),Hcr=o(" (Swin Transformer model)"),Ucr=l(),iT=a("li"),S2e=a("strong"),Jcr=o("vit"),Ycr=o(" \u2014 "),hQ=a("a"),Kcr=o("ViTForMaskedImageModeling"),Zcr=o(" (ViT model)"),efr=l(),dT=a("p"),ofr=o("The model is set in evaluation mode by default using "),R2e=a("code"),rfr=o("model.eval()"),tfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),afr=o("model.train()"),nfr=l(),F(cT.$$.fragment),oOe=l(),Gd=a("h2"),fT=a("a"),B2e=a("span"),F(j8.$$.fragment),sfr=l(),I2e=a("span"),lfr=o("AutoModelForObjectDetection"),rOe=l(),Uo=a("div"),F(D8.$$.fragment),ifr=l(),Od=a("p"),dfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pQ=a("a"),cfr=o("from_pretrained()"),ffr=o(" class method or the "),uQ=a("a"),mfr=o("from_config()"),gfr=o(` class
method.`),hfr=l(),G8=a("p"),pfr=o("This class cannot be instantiated directly using "),N2e=a("code"),ufr=o("__init__()"),_fr=o(" (throws an error)."),bfr=l(),At=a("div"),F(O8.$$.fragment),vfr=l(),q2e=a("p"),Ffr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tfr=l(),Vd=a("p"),Mfr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),Efr=o("not"),Cfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),wfr=o("from_pretrained()"),Afr=o(" to load the model weights."),Lfr=l(),F(mT.$$.fragment),yfr=l(),_o=a("div"),F(V8.$$.fragment),xfr=l(),D2e=a("p"),$fr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kfr=l(),Ka=a("p"),Sfr=o("The model class to instantiate is selected based on the "),G2e=a("code"),Rfr=o("model_type"),Pfr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),Bfr=o("pretrained_model_name_or_path"),Ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),Nfr=o("pretrained_model_name_or_path"),qfr=o(":"),jfr=l(),X8=a("ul"),gT=a("li"),X2e=a("strong"),Dfr=o("detr"),Gfr=o(" \u2014 "),bQ=a("a"),Ofr=o("DetrForObjectDetection"),Vfr=o(" (DETR model)"),Xfr=l(),hT=a("li"),z2e=a("strong"),zfr=o("yolos"),Wfr=o(" \u2014 "),vQ=a("a"),Qfr=o("YolosForObjectDetection"),Hfr=o(" (YOLOS model)"),Ufr=l(),pT=a("p"),Jfr=o("The model is set in evaluation mode by default using "),W2e=a("code"),Yfr=o("model.eval()"),Kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=a("code"),Zfr=o("model.train()"),emr=l(),F(uT.$$.fragment),tOe=l(),Xd=a("h2"),_T=a("a"),H2e=a("span"),F(z8.$$.fragment),omr=l(),U2e=a("span"),rmr=o("AutoModelForImageSegmentation"),aOe=l(),Jo=a("div"),F(W8.$$.fragment),tmr=l(),zd=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FQ=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),TQ=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),Q8=a("p"),cmr=o("This class cannot be instantiated directly using "),J2e=a("code"),fmr=o("__init__()"),mmr=o(" (throws an error)."),gmr=l(),Lt=a("div"),F(H8.$$.fragment),hmr=l(),Y2e=a("p"),pmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),umr=l(),Wd=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),bmr=o("not"),vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Fmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),F(bT.$$.fragment),Emr=l(),bo=a("div"),F(U8.$$.fragment),Cmr=l(),Z2e=a("p"),wmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Amr=l(),Za=a("p"),Lmr=o("The model class to instantiate is selected based on the "),ebe=a("code"),ymr=o("model_type"),xmr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Pmr=l(),tbe=a("ul"),vT=a("li"),abe=a("strong"),Bmr=o("detr"),Imr=o(" \u2014 "),EQ=a("a"),Nmr=o("DetrForSegmentation"),qmr=o(" (DETR model)"),jmr=l(),FT=a("p"),Dmr=o("The model is set in evaluation mode by default using "),nbe=a("code"),Gmr=o("model.eval()"),Omr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),Vmr=o("model.train()"),Xmr=l(),F(TT.$$.fragment),nOe=l(),Qd=a("h2"),MT=a("a"),lbe=a("span"),F(J8.$$.fragment),zmr=l(),ibe=a("span"),Wmr=o("AutoModelForSemanticSegmentation"),sOe=l(),Yo=a("div"),F(Y8.$$.fragment),Qmr=l(),Hd=a("p"),Hmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CQ=a("a"),Umr=o("from_pretrained()"),Jmr=o(" class method or the "),wQ=a("a"),Ymr=o("from_config()"),Kmr=o(` class
method.`),Zmr=l(),K8=a("p"),egr=o("This class cannot be instantiated directly using "),dbe=a("code"),ogr=o("__init__()"),rgr=o(" (throws an error)."),tgr=l(),yt=a("div"),F(Z8.$$.fragment),agr=l(),cbe=a("p"),ngr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sgr=l(),Ud=a("p"),lgr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),igr=o("not"),dgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),cgr=o("from_pretrained()"),fgr=o(" to load the model weights."),mgr=l(),F(ET.$$.fragment),ggr=l(),vo=a("div"),F(e9.$$.fragment),hgr=l(),mbe=a("p"),pgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ugr=l(),en=a("p"),_gr=o("The model class to instantiate is selected based on the "),gbe=a("code"),bgr=o("model_type"),vgr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),Fgr=o("pretrained_model_name_or_path"),Tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Mgr=o("pretrained_model_name_or_path"),Egr=o(":"),Cgr=l(),on=a("ul"),CT=a("li"),ube=a("strong"),wgr=o("beit"),Agr=o(" \u2014 "),LQ=a("a"),Lgr=o("BeitForSemanticSegmentation"),ygr=o(" (BEiT model)"),xgr=l(),wT=a("li"),_be=a("strong"),$gr=o("data2vec-vision"),kgr=o(" \u2014 "),yQ=a("a"),Sgr=o("Data2VecVisionForSemanticSegmentation"),Rgr=o(" (Data2VecVision model)"),Pgr=l(),AT=a("li"),bbe=a("strong"),Bgr=o("dpt"),Igr=o(" \u2014 "),xQ=a("a"),Ngr=o("DPTForSemanticSegmentation"),qgr=o(" (DPT model)"),jgr=l(),LT=a("li"),vbe=a("strong"),Dgr=o("segformer"),Ggr=o(" \u2014 "),$Q=a("a"),Ogr=o("SegformerForSemanticSegmentation"),Vgr=o(" (SegFormer model)"),Xgr=l(),yT=a("p"),zgr=o("The model is set in evaluation mode by default using "),Fbe=a("code"),Wgr=o("model.eval()"),Qgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=a("code"),Hgr=o("model.train()"),Ugr=l(),F(xT.$$.fragment),lOe=l(),Jd=a("h2"),$T=a("a"),Mbe=a("span"),F(o9.$$.fragment),Jgr=l(),Ebe=a("span"),Ygr=o("AutoModelForInstanceSegmentation"),iOe=l(),Ko=a("div"),F(r9.$$.fragment),Kgr=l(),Yd=a("p"),Zgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kQ=a("a"),ehr=o("from_pretrained()"),ohr=o(" class method or the "),SQ=a("a"),rhr=o("from_config()"),thr=o(` class
method.`),ahr=l(),t9=a("p"),nhr=o("This class cannot be instantiated directly using "),Cbe=a("code"),shr=o("__init__()"),lhr=o(" (throws an error)."),ihr=l(),xt=a("div"),F(a9.$$.fragment),dhr=l(),wbe=a("p"),chr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fhr=l(),Kd=a("p"),mhr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),ghr=o("not"),hhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),phr=o("from_pretrained()"),uhr=o(" to load the model weights."),_hr=l(),F(kT.$$.fragment),bhr=l(),Fo=a("div"),F(n9.$$.fragment),vhr=l(),Lbe=a("p"),Fhr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Thr=l(),rn=a("p"),Mhr=o("The model class to instantiate is selected based on the "),ybe=a("code"),Ehr=o("model_type"),Chr=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),Lhr=o("pretrained_model_name_or_path"),yhr=o(":"),xhr=l(),kbe=a("ul"),ST=a("li"),Sbe=a("strong"),$hr=o("maskformer"),khr=o(" \u2014 "),PQ=a("a"),Shr=o("MaskFormerForInstanceSegmentation"),Rhr=o(" (MaskFormer model)"),Phr=l(),RT=a("p"),Bhr=o("The model is set in evaluation mode by default using "),Rbe=a("code"),Ihr=o("model.eval()"),Nhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=a("code"),qhr=o("model.train()"),jhr=l(),F(PT.$$.fragment),dOe=l(),Zd=a("h2"),BT=a("a"),Bbe=a("span"),F(s9.$$.fragment),Dhr=l(),Ibe=a("span"),Ghr=o("TFAutoModel"),cOe=l(),Zo=a("div"),F(l9.$$.fragment),Ohr=l(),ec=a("p"),Vhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=a("a"),Xhr=o("from_pretrained()"),zhr=o(" class method or the "),IQ=a("a"),Whr=o("from_config()"),Qhr=o(` class
method.`),Hhr=l(),i9=a("p"),Uhr=o("This class cannot be instantiated directly using "),Nbe=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),$t=a("div"),F(d9.$$.fragment),Zhr=l(),qbe=a("p"),epr=o("Instantiates one of the base model classes of the library from a configuration."),opr=l(),oc=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),npr=o("from_pretrained()"),spr=o(" to load the model weights."),lpr=l(),F(IT.$$.fragment),ipr=l(),Lr=a("div"),F(c9.$$.fragment),dpr=l(),Dbe=a("p"),cpr=o("Instantiate one of the base model classes of the library from a pretrained model."),fpr=l(),tn=a("p"),mpr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),gpr=o("model_type"),hpr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),ppr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),_pr=o("pretrained_model_name_or_path"),bpr=o(":"),vpr=l(),q=a("ul"),NT=a("li"),Xbe=a("strong"),Fpr=o("albert"),Tpr=o(" \u2014 "),qQ=a("a"),Mpr=o("TFAlbertModel"),Epr=o(" (ALBERT model)"),Cpr=l(),qT=a("li"),zbe=a("strong"),wpr=o("bart"),Apr=o(" \u2014 "),jQ=a("a"),Lpr=o("TFBartModel"),ypr=o(" (BART model)"),xpr=l(),jT=a("li"),Wbe=a("strong"),$pr=o("bert"),kpr=o(" \u2014 "),DQ=a("a"),Spr=o("TFBertModel"),Rpr=o(" (BERT model)"),Ppr=l(),DT=a("li"),Qbe=a("strong"),Bpr=o("blenderbot"),Ipr=o(" \u2014 "),GQ=a("a"),Npr=o("TFBlenderbotModel"),qpr=o(" (Blenderbot model)"),jpr=l(),GT=a("li"),Hbe=a("strong"),Dpr=o("blenderbot-small"),Gpr=o(" \u2014 "),OQ=a("a"),Opr=o("TFBlenderbotSmallModel"),Vpr=o(" (BlenderbotSmall model)"),Xpr=l(),OT=a("li"),Ube=a("strong"),zpr=o("camembert"),Wpr=o(" \u2014 "),VQ=a("a"),Qpr=o("TFCamembertModel"),Hpr=o(" (CamemBERT model)"),Upr=l(),VT=a("li"),Jbe=a("strong"),Jpr=o("clip"),Ypr=o(" \u2014 "),XQ=a("a"),Kpr=o("TFCLIPModel"),Zpr=o(" (CLIP model)"),eur=l(),XT=a("li"),Ybe=a("strong"),our=o("convbert"),rur=o(" \u2014 "),zQ=a("a"),tur=o("TFConvBertModel"),aur=o(" (ConvBERT model)"),nur=l(),zT=a("li"),Kbe=a("strong"),sur=o("convnext"),lur=o(" \u2014 "),WQ=a("a"),iur=o("TFConvNextModel"),dur=o(" (ConvNeXT model)"),cur=l(),WT=a("li"),Zbe=a("strong"),fur=o("ctrl"),mur=o(" \u2014 "),QQ=a("a"),gur=o("TFCTRLModel"),hur=o(" (CTRL model)"),pur=l(),QT=a("li"),eve=a("strong"),uur=o("data2vec-vision"),_ur=o(" \u2014 "),HQ=a("a"),bur=o("TFData2VecVisionModel"),vur=o(" (Data2VecVision model)"),Fur=l(),HT=a("li"),ove=a("strong"),Tur=o("deberta"),Mur=o(" \u2014 "),UQ=a("a"),Eur=o("TFDebertaModel"),Cur=o(" (DeBERTa model)"),wur=l(),UT=a("li"),rve=a("strong"),Aur=o("deberta-v2"),Lur=o(" \u2014 "),JQ=a("a"),yur=o("TFDebertaV2Model"),xur=o(" (DeBERTa-v2 model)"),$ur=l(),JT=a("li"),tve=a("strong"),kur=o("distilbert"),Sur=o(" \u2014 "),YQ=a("a"),Rur=o("TFDistilBertModel"),Pur=o(" (DistilBERT model)"),Bur=l(),YT=a("li"),ave=a("strong"),Iur=o("dpr"),Nur=o(" \u2014 "),KQ=a("a"),qur=o("TFDPRQuestionEncoder"),jur=o(" (DPR model)"),Dur=l(),KT=a("li"),nve=a("strong"),Gur=o("electra"),Our=o(" \u2014 "),ZQ=a("a"),Vur=o("TFElectraModel"),Xur=o(" (ELECTRA model)"),zur=l(),ZT=a("li"),sve=a("strong"),Wur=o("flaubert"),Qur=o(" \u2014 "),eH=a("a"),Hur=o("TFFlaubertModel"),Uur=o(" (FlauBERT model)"),Jur=l(),Xs=a("li"),lve=a("strong"),Yur=o("funnel"),Kur=o(" \u2014 "),oH=a("a"),Zur=o("TFFunnelModel"),e_r=o(" or "),rH=a("a"),o_r=o("TFFunnelBaseModel"),r_r=o(" (Funnel Transformer model)"),t_r=l(),eM=a("li"),ive=a("strong"),a_r=o("gpt2"),n_r=o(" \u2014 "),tH=a("a"),s_r=o("TFGPT2Model"),l_r=o(" (OpenAI GPT-2 model)"),i_r=l(),oM=a("li"),dve=a("strong"),d_r=o("gptj"),c_r=o(" \u2014 "),aH=a("a"),f_r=o("TFGPTJModel"),m_r=o(" (GPT-J model)"),g_r=l(),rM=a("li"),cve=a("strong"),h_r=o("hubert"),p_r=o(" \u2014 "),nH=a("a"),u_r=o("TFHubertModel"),__r=o(" (Hubert model)"),b_r=l(),tM=a("li"),fve=a("strong"),v_r=o("layoutlm"),F_r=o(" \u2014 "),sH=a("a"),T_r=o("TFLayoutLMModel"),M_r=o(" (LayoutLM model)"),E_r=l(),aM=a("li"),mve=a("strong"),C_r=o("led"),w_r=o(" \u2014 "),lH=a("a"),A_r=o("TFLEDModel"),L_r=o(" (LED model)"),y_r=l(),nM=a("li"),gve=a("strong"),x_r=o("longformer"),$_r=o(" \u2014 "),iH=a("a"),k_r=o("TFLongformerModel"),S_r=o(" (Longformer model)"),R_r=l(),sM=a("li"),hve=a("strong"),P_r=o("lxmert"),B_r=o(" \u2014 "),dH=a("a"),I_r=o("TFLxmertModel"),N_r=o(" (LXMERT model)"),q_r=l(),lM=a("li"),pve=a("strong"),j_r=o("marian"),D_r=o(" \u2014 "),cH=a("a"),G_r=o("TFMarianModel"),O_r=o(" (Marian model)"),V_r=l(),iM=a("li"),uve=a("strong"),X_r=o("mbart"),z_r=o(" \u2014 "),fH=a("a"),W_r=o("TFMBartModel"),Q_r=o(" (mBART model)"),H_r=l(),dM=a("li"),_ve=a("strong"),U_r=o("mobilebert"),J_r=o(" \u2014 "),mH=a("a"),Y_r=o("TFMobileBertModel"),K_r=o(" (MobileBERT model)"),Z_r=l(),cM=a("li"),bve=a("strong"),e7r=o("mpnet"),o7r=o(" \u2014 "),gH=a("a"),r7r=o("TFMPNetModel"),t7r=o(" (MPNet model)"),a7r=l(),fM=a("li"),vve=a("strong"),n7r=o("mt5"),s7r=o(" \u2014 "),hH=a("a"),l7r=o("TFMT5Model"),i7r=o(" (MT5 model)"),d7r=l(),mM=a("li"),Fve=a("strong"),c7r=o("openai-gpt"),f7r=o(" \u2014 "),pH=a("a"),m7r=o("TFOpenAIGPTModel"),g7r=o(" (OpenAI GPT model)"),h7r=l(),gM=a("li"),Tve=a("strong"),p7r=o("opt"),u7r=o(" \u2014 "),uH=a("a"),_7r=o("TFOPTModel"),b7r=o(" (OPT model)"),v7r=l(),hM=a("li"),Mve=a("strong"),F7r=o("pegasus"),T7r=o(" \u2014 "),_H=a("a"),M7r=o("TFPegasusModel"),E7r=o(" (Pegasus model)"),C7r=l(),pM=a("li"),Eve=a("strong"),w7r=o("rembert"),A7r=o(" \u2014 "),bH=a("a"),L7r=o("TFRemBertModel"),y7r=o(" (RemBERT model)"),x7r=l(),uM=a("li"),Cve=a("strong"),$7r=o("roberta"),k7r=o(" \u2014 "),vH=a("a"),S7r=o("TFRobertaModel"),R7r=o(" (RoBERTa model)"),P7r=l(),_M=a("li"),wve=a("strong"),B7r=o("roformer"),I7r=o(" \u2014 "),FH=a("a"),N7r=o("TFRoFormerModel"),q7r=o(" (RoFormer model)"),j7r=l(),bM=a("li"),Ave=a("strong"),D7r=o("speech_to_text"),G7r=o(" \u2014 "),TH=a("a"),O7r=o("TFSpeech2TextModel"),V7r=o(" (Speech2Text model)"),X7r=l(),vM=a("li"),Lve=a("strong"),z7r=o("swin"),W7r=o(" \u2014 "),MH=a("a"),Q7r=o("TFSwinModel"),H7r=o(" (Swin Transformer model)"),U7r=l(),FM=a("li"),yve=a("strong"),J7r=o("t5"),Y7r=o(" \u2014 "),EH=a("a"),K7r=o("TFT5Model"),Z7r=o(" (T5 model)"),e1r=l(),TM=a("li"),xve=a("strong"),o1r=o("tapas"),r1r=o(" \u2014 "),CH=a("a"),t1r=o("TFTapasModel"),a1r=o(" (TAPAS model)"),n1r=l(),MM=a("li"),$ve=a("strong"),s1r=o("transfo-xl"),l1r=o(" \u2014 "),wH=a("a"),i1r=o("TFTransfoXLModel"),d1r=o(" (Transformer-XL model)"),c1r=l(),EM=a("li"),kve=a("strong"),f1r=o("vit"),m1r=o(" \u2014 "),AH=a("a"),g1r=o("TFViTModel"),h1r=o(" (ViT model)"),p1r=l(),CM=a("li"),Sve=a("strong"),u1r=o("vit_mae"),_1r=o(" \u2014 "),LH=a("a"),b1r=o("TFViTMAEModel"),v1r=o(" (ViTMAE model)"),F1r=l(),wM=a("li"),Rve=a("strong"),T1r=o("wav2vec2"),M1r=o(" \u2014 "),yH=a("a"),E1r=o("TFWav2Vec2Model"),C1r=o(" (Wav2Vec2 model)"),w1r=l(),AM=a("li"),Pve=a("strong"),A1r=o("xlm"),L1r=o(" \u2014 "),xH=a("a"),y1r=o("TFXLMModel"),x1r=o(" (XLM model)"),$1r=l(),LM=a("li"),Bve=a("strong"),k1r=o("xlm-roberta"),S1r=o(" \u2014 "),$H=a("a"),R1r=o("TFXLMRobertaModel"),P1r=o(" (XLM-RoBERTa model)"),B1r=l(),yM=a("li"),Ive=a("strong"),I1r=o("xlnet"),N1r=o(" \u2014 "),kH=a("a"),q1r=o("TFXLNetModel"),j1r=o(" (XLNet model)"),D1r=l(),F(xM.$$.fragment),fOe=l(),rc=a("h2"),$M=a("a"),Nve=a("span"),F(f9.$$.fragment),G1r=l(),qve=a("span"),O1r=o("TFAutoModelForPreTraining"),mOe=l(),er=a("div"),F(m9.$$.fragment),V1r=l(),tc=a("p"),X1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SH=a("a"),z1r=o("from_pretrained()"),W1r=o(" class method or the "),RH=a("a"),Q1r=o("from_config()"),H1r=o(` class
method.`),U1r=l(),g9=a("p"),J1r=o("This class cannot be instantiated directly using "),jve=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),kt=a("div"),F(h9.$$.fragment),e2r=l(),Dve=a("p"),o2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r2r=l(),ac=a("p"),t2r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),a2r=o("not"),n2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),s2r=o("from_pretrained()"),l2r=o(" to load the model weights."),i2r=l(),F(kM.$$.fragment),d2r=l(),yr=a("div"),F(p9.$$.fragment),c2r=l(),Ove=a("p"),f2r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),m2r=l(),an=a("p"),g2r=o("The model class to instantiate is selected based on the "),Vve=a("code"),h2r=o("model_type"),p2r=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),u2r=o("pretrained_model_name_or_path"),_2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(":"),F2r=l(),se=a("ul"),SM=a("li"),Wve=a("strong"),T2r=o("albert"),M2r=o(" \u2014 "),BH=a("a"),E2r=o("TFAlbertForPreTraining"),C2r=o(" (ALBERT model)"),w2r=l(),RM=a("li"),Qve=a("strong"),A2r=o("bart"),L2r=o(" \u2014 "),IH=a("a"),y2r=o("TFBartForConditionalGeneration"),x2r=o(" (BART model)"),$2r=l(),PM=a("li"),Hve=a("strong"),k2r=o("bert"),S2r=o(" \u2014 "),NH=a("a"),R2r=o("TFBertForPreTraining"),P2r=o(" (BERT model)"),B2r=l(),BM=a("li"),Uve=a("strong"),I2r=o("camembert"),N2r=o(" \u2014 "),qH=a("a"),q2r=o("TFCamembertForMaskedLM"),j2r=o(" (CamemBERT model)"),D2r=l(),IM=a("li"),Jve=a("strong"),G2r=o("ctrl"),O2r=o(" \u2014 "),jH=a("a"),V2r=o("TFCTRLLMHeadModel"),X2r=o(" (CTRL model)"),z2r=l(),NM=a("li"),Yve=a("strong"),W2r=o("distilbert"),Q2r=o(" \u2014 "),DH=a("a"),H2r=o("TFDistilBertForMaskedLM"),U2r=o(" (DistilBERT model)"),J2r=l(),qM=a("li"),Kve=a("strong"),Y2r=o("electra"),K2r=o(" \u2014 "),GH=a("a"),Z2r=o("TFElectraForPreTraining"),ebr=o(" (ELECTRA model)"),obr=l(),jM=a("li"),Zve=a("strong"),rbr=o("flaubert"),tbr=o(" \u2014 "),OH=a("a"),abr=o("TFFlaubertWithLMHeadModel"),nbr=o(" (FlauBERT model)"),sbr=l(),DM=a("li"),e0e=a("strong"),lbr=o("funnel"),ibr=o(" \u2014 "),VH=a("a"),dbr=o("TFFunnelForPreTraining"),cbr=o(" (Funnel Transformer model)"),fbr=l(),GM=a("li"),o0e=a("strong"),mbr=o("gpt2"),gbr=o(" \u2014 "),XH=a("a"),hbr=o("TFGPT2LMHeadModel"),pbr=o(" (OpenAI GPT-2 model)"),ubr=l(),OM=a("li"),r0e=a("strong"),_br=o("layoutlm"),bbr=o(" \u2014 "),zH=a("a"),vbr=o("TFLayoutLMForMaskedLM"),Fbr=o(" (LayoutLM model)"),Tbr=l(),VM=a("li"),t0e=a("strong"),Mbr=o("lxmert"),Ebr=o(" \u2014 "),WH=a("a"),Cbr=o("TFLxmertForPreTraining"),wbr=o(" (LXMERT model)"),Abr=l(),XM=a("li"),a0e=a("strong"),Lbr=o("mobilebert"),ybr=o(" \u2014 "),QH=a("a"),xbr=o("TFMobileBertForPreTraining"),$br=o(" (MobileBERT model)"),kbr=l(),zM=a("li"),n0e=a("strong"),Sbr=o("mpnet"),Rbr=o(" \u2014 "),HH=a("a"),Pbr=o("TFMPNetForMaskedLM"),Bbr=o(" (MPNet model)"),Ibr=l(),WM=a("li"),s0e=a("strong"),Nbr=o("openai-gpt"),qbr=o(" \u2014 "),UH=a("a"),jbr=o("TFOpenAIGPTLMHeadModel"),Dbr=o(" (OpenAI GPT model)"),Gbr=l(),QM=a("li"),l0e=a("strong"),Obr=o("roberta"),Vbr=o(" \u2014 "),JH=a("a"),Xbr=o("TFRobertaForMaskedLM"),zbr=o(" (RoBERTa model)"),Wbr=l(),HM=a("li"),i0e=a("strong"),Qbr=o("t5"),Hbr=o(" \u2014 "),YH=a("a"),Ubr=o("TFT5ForConditionalGeneration"),Jbr=o(" (T5 model)"),Ybr=l(),UM=a("li"),d0e=a("strong"),Kbr=o("tapas"),Zbr=o(" \u2014 "),KH=a("a"),evr=o("TFTapasForMaskedLM"),ovr=o(" (TAPAS model)"),rvr=l(),JM=a("li"),c0e=a("strong"),tvr=o("transfo-xl"),avr=o(" \u2014 "),ZH=a("a"),nvr=o("TFTransfoXLLMHeadModel"),svr=o(" (Transformer-XL model)"),lvr=l(),YM=a("li"),f0e=a("strong"),ivr=o("vit_mae"),dvr=o(" \u2014 "),eU=a("a"),cvr=o("TFViTMAEForPreTraining"),fvr=o(" (ViTMAE model)"),mvr=l(),KM=a("li"),m0e=a("strong"),gvr=o("xlm"),hvr=o(" \u2014 "),oU=a("a"),pvr=o("TFXLMWithLMHeadModel"),uvr=o(" (XLM model)"),_vr=l(),ZM=a("li"),g0e=a("strong"),bvr=o("xlm-roberta"),vvr=o(" \u2014 "),rU=a("a"),Fvr=o("TFXLMRobertaForMaskedLM"),Tvr=o(" (XLM-RoBERTa model)"),Mvr=l(),e4=a("li"),h0e=a("strong"),Evr=o("xlnet"),Cvr=o(" \u2014 "),tU=a("a"),wvr=o("TFXLNetLMHeadModel"),Avr=o(" (XLNet model)"),Lvr=l(),F(o4.$$.fragment),gOe=l(),nc=a("h2"),r4=a("a"),p0e=a("span"),F(u9.$$.fragment),yvr=l(),u0e=a("span"),xvr=o("TFAutoModelForCausalLM"),hOe=l(),or=a("div"),F(_9.$$.fragment),$vr=l(),sc=a("p"),kvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aU=a("a"),Svr=o("from_pretrained()"),Rvr=o(" class method or the "),nU=a("a"),Pvr=o("from_config()"),Bvr=o(` class
method.`),Ivr=l(),b9=a("p"),Nvr=o("This class cannot be instantiated directly using "),_0e=a("code"),qvr=o("__init__()"),jvr=o(" (throws an error)."),Dvr=l(),St=a("div"),F(v9.$$.fragment),Gvr=l(),b0e=a("p"),Ovr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vvr=l(),lc=a("p"),Xvr=o(`Note:
Loading a model from its configuration file does `),v0e=a("strong"),zvr=o("not"),Wvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),Qvr=o("from_pretrained()"),Hvr=o(" to load the model weights."),Uvr=l(),F(t4.$$.fragment),Jvr=l(),xr=a("div"),F(F9.$$.fragment),Yvr=l(),F0e=a("p"),Kvr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zvr=l(),nn=a("p"),e0r=o("The model class to instantiate is selected based on the "),T0e=a("code"),o0r=o("model_type"),r0r=o(` property of the config object (either
passed as an argument or loaded from `),M0e=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(":"),l0r=l(),Me=a("ul"),a4=a("li"),C0e=a("strong"),i0r=o("bert"),d0r=o(" \u2014 "),lU=a("a"),c0r=o("TFBertLMHeadModel"),f0r=o(" (BERT model)"),m0r=l(),n4=a("li"),w0e=a("strong"),g0r=o("camembert"),h0r=o(" \u2014 "),iU=a("a"),p0r=o("TFCamembertForCausalLM"),u0r=o(" (CamemBERT model)"),_0r=l(),s4=a("li"),A0e=a("strong"),b0r=o("ctrl"),v0r=o(" \u2014 "),dU=a("a"),F0r=o("TFCTRLLMHeadModel"),T0r=o(" (CTRL model)"),M0r=l(),l4=a("li"),L0e=a("strong"),E0r=o("gpt2"),C0r=o(" \u2014 "),cU=a("a"),w0r=o("TFGPT2LMHeadModel"),A0r=o(" (OpenAI GPT-2 model)"),L0r=l(),i4=a("li"),y0e=a("strong"),y0r=o("gptj"),x0r=o(" \u2014 "),fU=a("a"),$0r=o("TFGPTJForCausalLM"),k0r=o(" (GPT-J model)"),S0r=l(),d4=a("li"),x0e=a("strong"),R0r=o("openai-gpt"),P0r=o(" \u2014 "),mU=a("a"),B0r=o("TFOpenAIGPTLMHeadModel"),I0r=o(" (OpenAI GPT model)"),N0r=l(),c4=a("li"),$0e=a("strong"),q0r=o("opt"),j0r=o(" \u2014 "),gU=a("a"),D0r=o("TFOPTForCausalLM"),G0r=o(" (OPT model)"),O0r=l(),f4=a("li"),k0e=a("strong"),V0r=o("rembert"),X0r=o(" \u2014 "),hU=a("a"),z0r=o("TFRemBertForCausalLM"),W0r=o(" (RemBERT model)"),Q0r=l(),m4=a("li"),S0e=a("strong"),H0r=o("roberta"),U0r=o(" \u2014 "),pU=a("a"),J0r=o("TFRobertaForCausalLM"),Y0r=o(" (RoBERTa model)"),K0r=l(),g4=a("li"),R0e=a("strong"),Z0r=o("roformer"),eFr=o(" \u2014 "),uU=a("a"),oFr=o("TFRoFormerForCausalLM"),rFr=o(" (RoFormer model)"),tFr=l(),h4=a("li"),P0e=a("strong"),aFr=o("transfo-xl"),nFr=o(" \u2014 "),_U=a("a"),sFr=o("TFTransfoXLLMHeadModel"),lFr=o(" (Transformer-XL model)"),iFr=l(),p4=a("li"),B0e=a("strong"),dFr=o("xlm"),cFr=o(" \u2014 "),bU=a("a"),fFr=o("TFXLMWithLMHeadModel"),mFr=o(" (XLM model)"),gFr=l(),u4=a("li"),I0e=a("strong"),hFr=o("xlnet"),pFr=o(" \u2014 "),vU=a("a"),uFr=o("TFXLNetLMHeadModel"),_Fr=o(" (XLNet model)"),bFr=l(),F(_4.$$.fragment),pOe=l(),ic=a("h2"),b4=a("a"),N0e=a("span"),F(T9.$$.fragment),vFr=l(),q0e=a("span"),FFr=o("TFAutoModelForImageClassification"),uOe=l(),rr=a("div"),F(M9.$$.fragment),TFr=l(),dc=a("p"),MFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FU=a("a"),EFr=o("from_pretrained()"),CFr=o(" class method or the "),TU=a("a"),wFr=o("from_config()"),AFr=o(` class
method.`),LFr=l(),E9=a("p"),yFr=o("This class cannot be instantiated directly using "),j0e=a("code"),xFr=o("__init__()"),$Fr=o(" (throws an error)."),kFr=l(),Rt=a("div"),F(C9.$$.fragment),SFr=l(),D0e=a("p"),RFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PFr=l(),cc=a("p"),BFr=o(`Note:
Loading a model from its configuration file does `),G0e=a("strong"),IFr=o("not"),NFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),qFr=o("from_pretrained()"),jFr=o(" to load the model weights."),DFr=l(),F(v4.$$.fragment),GFr=l(),$r=a("div"),F(w9.$$.fragment),OFr=l(),O0e=a("p"),VFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XFr=l(),sn=a("p"),zFr=o("The model class to instantiate is selected based on the "),V0e=a("code"),WFr=o("model_type"),QFr=o(` property of the config object (either
passed as an argument or loaded from `),X0e=a("code"),HFr=o("pretrained_model_name_or_path"),UFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(":"),KFr=l(),ln=a("ul"),F4=a("li"),W0e=a("strong"),ZFr=o("convnext"),eTr=o(" \u2014 "),EU=a("a"),oTr=o("TFConvNextForImageClassification"),rTr=o(" (ConvNeXT model)"),tTr=l(),T4=a("li"),Q0e=a("strong"),aTr=o("data2vec-vision"),nTr=o(" \u2014 "),CU=a("a"),sTr=o("TFData2VecVisionForImageClassification"),lTr=o(" (Data2VecVision model)"),iTr=l(),M4=a("li"),H0e=a("strong"),dTr=o("swin"),cTr=o(" \u2014 "),wU=a("a"),fTr=o("TFSwinForImageClassification"),mTr=o(" (Swin Transformer model)"),gTr=l(),E4=a("li"),U0e=a("strong"),hTr=o("vit"),pTr=o(" \u2014 "),AU=a("a"),uTr=o("TFViTForImageClassification"),_Tr=o(" (ViT model)"),bTr=l(),F(C4.$$.fragment),_Oe=l(),fc=a("h2"),w4=a("a"),J0e=a("span"),F(A9.$$.fragment),vTr=l(),Y0e=a("span"),FTr=o("TFAutoModelForMaskedLM"),bOe=l(),tr=a("div"),F(L9.$$.fragment),TTr=l(),mc=a("p"),MTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LU=a("a"),ETr=o("from_pretrained()"),CTr=o(" class method or the "),yU=a("a"),wTr=o("from_config()"),ATr=o(` class
method.`),LTr=l(),y9=a("p"),yTr=o("This class cannot be instantiated directly using "),K0e=a("code"),xTr=o("__init__()"),$Tr=o(" (throws an error)."),kTr=l(),Pt=a("div"),F(x9.$$.fragment),STr=l(),Z0e=a("p"),RTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PTr=l(),gc=a("p"),BTr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),ITr=o("not"),NTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),qTr=o("from_pretrained()"),jTr=o(" to load the model weights."),DTr=l(),F(A4.$$.fragment),GTr=l(),kr=a("div"),F($9.$$.fragment),OTr=l(),oFe=a("p"),VTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XTr=l(),dn=a("p"),zTr=o("The model class to instantiate is selected based on the "),rFe=a("code"),WTr=o("model_type"),QTr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),HTr=o("pretrained_model_name_or_path"),UTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(":"),KTr=l(),ie=a("ul"),L4=a("li"),nFe=a("strong"),ZTr=o("albert"),eMr=o(" \u2014 "),$U=a("a"),oMr=o("TFAlbertForMaskedLM"),rMr=o(" (ALBERT model)"),tMr=l(),y4=a("li"),sFe=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),kU=a("a"),sMr=o("TFBertForMaskedLM"),lMr=o(" (BERT model)"),iMr=l(),x4=a("li"),lFe=a("strong"),dMr=o("camembert"),cMr=o(" \u2014 "),SU=a("a"),fMr=o("TFCamembertForMaskedLM"),mMr=o(" (CamemBERT model)"),gMr=l(),$4=a("li"),iFe=a("strong"),hMr=o("convbert"),pMr=o(" \u2014 "),RU=a("a"),uMr=o("TFConvBertForMaskedLM"),_Mr=o(" (ConvBERT model)"),bMr=l(),k4=a("li"),dFe=a("strong"),vMr=o("deberta"),FMr=o(" \u2014 "),PU=a("a"),TMr=o("TFDebertaForMaskedLM"),MMr=o(" (DeBERTa model)"),EMr=l(),S4=a("li"),cFe=a("strong"),CMr=o("deberta-v2"),wMr=o(" \u2014 "),BU=a("a"),AMr=o("TFDebertaV2ForMaskedLM"),LMr=o(" (DeBERTa-v2 model)"),yMr=l(),R4=a("li"),fFe=a("strong"),xMr=o("distilbert"),$Mr=o(" \u2014 "),IU=a("a"),kMr=o("TFDistilBertForMaskedLM"),SMr=o(" (DistilBERT model)"),RMr=l(),P4=a("li"),mFe=a("strong"),PMr=o("electra"),BMr=o(" \u2014 "),NU=a("a"),IMr=o("TFElectraForMaskedLM"),NMr=o(" (ELECTRA model)"),qMr=l(),B4=a("li"),gFe=a("strong"),jMr=o("flaubert"),DMr=o(" \u2014 "),qU=a("a"),GMr=o("TFFlaubertWithLMHeadModel"),OMr=o(" (FlauBERT model)"),VMr=l(),I4=a("li"),hFe=a("strong"),XMr=o("funnel"),zMr=o(" \u2014 "),jU=a("a"),WMr=o("TFFunnelForMaskedLM"),QMr=o(" (Funnel Transformer model)"),HMr=l(),N4=a("li"),pFe=a("strong"),UMr=o("layoutlm"),JMr=o(" \u2014 "),DU=a("a"),YMr=o("TFLayoutLMForMaskedLM"),KMr=o(" (LayoutLM model)"),ZMr=l(),q4=a("li"),uFe=a("strong"),e4r=o("longformer"),o4r=o(" \u2014 "),GU=a("a"),r4r=o("TFLongformerForMaskedLM"),t4r=o(" (Longformer model)"),a4r=l(),j4=a("li"),_Fe=a("strong"),n4r=o("mobilebert"),s4r=o(" \u2014 "),OU=a("a"),l4r=o("TFMobileBertForMaskedLM"),i4r=o(" (MobileBERT model)"),d4r=l(),D4=a("li"),bFe=a("strong"),c4r=o("mpnet"),f4r=o(" \u2014 "),VU=a("a"),m4r=o("TFMPNetForMaskedLM"),g4r=o(" (MPNet model)"),h4r=l(),G4=a("li"),vFe=a("strong"),p4r=o("rembert"),u4r=o(" \u2014 "),XU=a("a"),_4r=o("TFRemBertForMaskedLM"),b4r=o(" (RemBERT model)"),v4r=l(),O4=a("li"),FFe=a("strong"),F4r=o("roberta"),T4r=o(" \u2014 "),zU=a("a"),M4r=o("TFRobertaForMaskedLM"),E4r=o(" (RoBERTa model)"),C4r=l(),V4=a("li"),TFe=a("strong"),w4r=o("roformer"),A4r=o(" \u2014 "),WU=a("a"),L4r=o("TFRoFormerForMaskedLM"),y4r=o(" (RoFormer model)"),x4r=l(),X4=a("li"),MFe=a("strong"),$4r=o("tapas"),k4r=o(" \u2014 "),QU=a("a"),S4r=o("TFTapasForMaskedLM"),R4r=o(" (TAPAS model)"),P4r=l(),z4=a("li"),EFe=a("strong"),B4r=o("xlm"),I4r=o(" \u2014 "),HU=a("a"),N4r=o("TFXLMWithLMHeadModel"),q4r=o(" (XLM model)"),j4r=l(),W4=a("li"),CFe=a("strong"),D4r=o("xlm-roberta"),G4r=o(" \u2014 "),UU=a("a"),O4r=o("TFXLMRobertaForMaskedLM"),V4r=o(" (XLM-RoBERTa model)"),X4r=l(),F(Q4.$$.fragment),vOe=l(),hc=a("h2"),H4=a("a"),wFe=a("span"),F(k9.$$.fragment),z4r=l(),AFe=a("span"),W4r=o("TFAutoModelForSeq2SeqLM"),FOe=l(),ar=a("div"),F(S9.$$.fragment),Q4r=l(),pc=a("p"),H4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JU=a("a"),U4r=o("from_pretrained()"),J4r=o(" class method or the "),YU=a("a"),Y4r=o("from_config()"),K4r=o(` class
method.`),Z4r=l(),R9=a("p"),eEr=o("This class cannot be instantiated directly using "),LFe=a("code"),oEr=o("__init__()"),rEr=o(" (throws an error)."),tEr=l(),Bt=a("div"),F(P9.$$.fragment),aEr=l(),yFe=a("p"),nEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sEr=l(),uc=a("p"),lEr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),iEr=o("not"),dEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),cEr=o("from_pretrained()"),fEr=o(" to load the model weights."),mEr=l(),F(U4.$$.fragment),gEr=l(),Sr=a("div"),F(B9.$$.fragment),hEr=l(),$Fe=a("p"),pEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uEr=l(),cn=a("p"),_Er=o("The model class to instantiate is selected based on the "),kFe=a("code"),bEr=o("model_type"),vEr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),FEr=o("pretrained_model_name_or_path"),TEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),MEr=o("pretrained_model_name_or_path"),EEr=o(":"),CEr=l(),ye=a("ul"),J4=a("li"),PFe=a("strong"),wEr=o("bart"),AEr=o(" \u2014 "),ZU=a("a"),LEr=o("TFBartForConditionalGeneration"),yEr=o(" (BART model)"),xEr=l(),Y4=a("li"),BFe=a("strong"),$Er=o("blenderbot"),kEr=o(" \u2014 "),eJ=a("a"),SEr=o("TFBlenderbotForConditionalGeneration"),REr=o(" (Blenderbot model)"),PEr=l(),K4=a("li"),IFe=a("strong"),BEr=o("blenderbot-small"),IEr=o(" \u2014 "),oJ=a("a"),NEr=o("TFBlenderbotSmallForConditionalGeneration"),qEr=o(" (BlenderbotSmall model)"),jEr=l(),Z4=a("li"),NFe=a("strong"),DEr=o("encoder-decoder"),GEr=o(" \u2014 "),rJ=a("a"),OEr=o("TFEncoderDecoderModel"),VEr=o(" (Encoder decoder model)"),XEr=l(),eE=a("li"),qFe=a("strong"),zEr=o("led"),WEr=o(" \u2014 "),tJ=a("a"),QEr=o("TFLEDForConditionalGeneration"),HEr=o(" (LED model)"),UEr=l(),oE=a("li"),jFe=a("strong"),JEr=o("marian"),YEr=o(" \u2014 "),aJ=a("a"),KEr=o("TFMarianMTModel"),ZEr=o(" (Marian model)"),eCr=l(),rE=a("li"),DFe=a("strong"),oCr=o("mbart"),rCr=o(" \u2014 "),nJ=a("a"),tCr=o("TFMBartForConditionalGeneration"),aCr=o(" (mBART model)"),nCr=l(),tE=a("li"),GFe=a("strong"),sCr=o("mt5"),lCr=o(" \u2014 "),sJ=a("a"),iCr=o("TFMT5ForConditionalGeneration"),dCr=o(" (MT5 model)"),cCr=l(),aE=a("li"),OFe=a("strong"),fCr=o("pegasus"),mCr=o(" \u2014 "),lJ=a("a"),gCr=o("TFPegasusForConditionalGeneration"),hCr=o(" (Pegasus model)"),pCr=l(),nE=a("li"),VFe=a("strong"),uCr=o("t5"),_Cr=o(" \u2014 "),iJ=a("a"),bCr=o("TFT5ForConditionalGeneration"),vCr=o(" (T5 model)"),FCr=l(),F(sE.$$.fragment),TOe=l(),_c=a("h2"),lE=a("a"),XFe=a("span"),F(I9.$$.fragment),TCr=l(),zFe=a("span"),MCr=o("TFAutoModelForSequenceClassification"),MOe=l(),nr=a("div"),F(N9.$$.fragment),ECr=l(),bc=a("p"),CCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dJ=a("a"),wCr=o("from_pretrained()"),ACr=o(" class method or the "),cJ=a("a"),LCr=o("from_config()"),yCr=o(` class
method.`),xCr=l(),q9=a("p"),$Cr=o("This class cannot be instantiated directly using "),WFe=a("code"),kCr=o("__init__()"),SCr=o(" (throws an error)."),RCr=l(),It=a("div"),F(j9.$$.fragment),PCr=l(),QFe=a("p"),BCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ICr=l(),vc=a("p"),NCr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),qCr=o("not"),jCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),DCr=o("from_pretrained()"),GCr=o(" to load the model weights."),OCr=l(),F(iE.$$.fragment),VCr=l(),Rr=a("div"),F(D9.$$.fragment),XCr=l(),UFe=a("p"),zCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WCr=l(),fn=a("p"),QCr=o("The model class to instantiate is selected based on the "),JFe=a("code"),HCr=o("model_type"),UCr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(":"),e5r=l(),ae=a("ul"),dE=a("li"),ZFe=a("strong"),o5r=o("albert"),r5r=o(" \u2014 "),mJ=a("a"),t5r=o("TFAlbertForSequenceClassification"),a5r=o(" (ALBERT model)"),n5r=l(),cE=a("li"),eTe=a("strong"),s5r=o("bert"),l5r=o(" \u2014 "),gJ=a("a"),i5r=o("TFBertForSequenceClassification"),d5r=o(" (BERT model)"),c5r=l(),fE=a("li"),oTe=a("strong"),f5r=o("camembert"),m5r=o(" \u2014 "),hJ=a("a"),g5r=o("TFCamembertForSequenceClassification"),h5r=o(" (CamemBERT model)"),p5r=l(),mE=a("li"),rTe=a("strong"),u5r=o("convbert"),_5r=o(" \u2014 "),pJ=a("a"),b5r=o("TFConvBertForSequenceClassification"),v5r=o(" (ConvBERT model)"),F5r=l(),gE=a("li"),tTe=a("strong"),T5r=o("ctrl"),M5r=o(" \u2014 "),uJ=a("a"),E5r=o("TFCTRLForSequenceClassification"),C5r=o(" (CTRL model)"),w5r=l(),hE=a("li"),aTe=a("strong"),A5r=o("deberta"),L5r=o(" \u2014 "),_J=a("a"),y5r=o("TFDebertaForSequenceClassification"),x5r=o(" (DeBERTa model)"),$5r=l(),pE=a("li"),nTe=a("strong"),k5r=o("deberta-v2"),S5r=o(" \u2014 "),bJ=a("a"),R5r=o("TFDebertaV2ForSequenceClassification"),P5r=o(" (DeBERTa-v2 model)"),B5r=l(),uE=a("li"),sTe=a("strong"),I5r=o("distilbert"),N5r=o(" \u2014 "),vJ=a("a"),q5r=o("TFDistilBertForSequenceClassification"),j5r=o(" (DistilBERT model)"),D5r=l(),_E=a("li"),lTe=a("strong"),G5r=o("electra"),O5r=o(" \u2014 "),FJ=a("a"),V5r=o("TFElectraForSequenceClassification"),X5r=o(" (ELECTRA model)"),z5r=l(),bE=a("li"),iTe=a("strong"),W5r=o("flaubert"),Q5r=o(" \u2014 "),TJ=a("a"),H5r=o("TFFlaubertForSequenceClassification"),U5r=o(" (FlauBERT model)"),J5r=l(),vE=a("li"),dTe=a("strong"),Y5r=o("funnel"),K5r=o(" \u2014 "),MJ=a("a"),Z5r=o("TFFunnelForSequenceClassification"),e3r=o(" (Funnel Transformer model)"),o3r=l(),FE=a("li"),cTe=a("strong"),r3r=o("gpt2"),t3r=o(" \u2014 "),EJ=a("a"),a3r=o("TFGPT2ForSequenceClassification"),n3r=o(" (OpenAI GPT-2 model)"),s3r=l(),TE=a("li"),fTe=a("strong"),l3r=o("gptj"),i3r=o(" \u2014 "),CJ=a("a"),d3r=o("TFGPTJForSequenceClassification"),c3r=o(" (GPT-J model)"),f3r=l(),ME=a("li"),mTe=a("strong"),m3r=o("layoutlm"),g3r=o(" \u2014 "),wJ=a("a"),h3r=o("TFLayoutLMForSequenceClassification"),p3r=o(" (LayoutLM model)"),u3r=l(),EE=a("li"),gTe=a("strong"),_3r=o("longformer"),b3r=o(" \u2014 "),AJ=a("a"),v3r=o("TFLongformerForSequenceClassification"),F3r=o(" (Longformer model)"),T3r=l(),CE=a("li"),hTe=a("strong"),M3r=o("mobilebert"),E3r=o(" \u2014 "),LJ=a("a"),C3r=o("TFMobileBertForSequenceClassification"),w3r=o(" (MobileBERT model)"),A3r=l(),wE=a("li"),pTe=a("strong"),L3r=o("mpnet"),y3r=o(" \u2014 "),yJ=a("a"),x3r=o("TFMPNetForSequenceClassification"),$3r=o(" (MPNet model)"),k3r=l(),AE=a("li"),uTe=a("strong"),S3r=o("openai-gpt"),R3r=o(" \u2014 "),xJ=a("a"),P3r=o("TFOpenAIGPTForSequenceClassification"),B3r=o(" (OpenAI GPT model)"),I3r=l(),LE=a("li"),_Te=a("strong"),N3r=o("rembert"),q3r=o(" \u2014 "),$J=a("a"),j3r=o("TFRemBertForSequenceClassification"),D3r=o(" (RemBERT model)"),G3r=l(),yE=a("li"),bTe=a("strong"),O3r=o("roberta"),V3r=o(" \u2014 "),kJ=a("a"),X3r=o("TFRobertaForSequenceClassification"),z3r=o(" (RoBERTa model)"),W3r=l(),xE=a("li"),vTe=a("strong"),Q3r=o("roformer"),H3r=o(" \u2014 "),SJ=a("a"),U3r=o("TFRoFormerForSequenceClassification"),J3r=o(" (RoFormer model)"),Y3r=l(),$E=a("li"),FTe=a("strong"),K3r=o("tapas"),Z3r=o(" \u2014 "),RJ=a("a"),ewr=o("TFTapasForSequenceClassification"),owr=o(" (TAPAS model)"),rwr=l(),kE=a("li"),TTe=a("strong"),twr=o("transfo-xl"),awr=o(" \u2014 "),PJ=a("a"),nwr=o("TFTransfoXLForSequenceClassification"),swr=o(" (Transformer-XL model)"),lwr=l(),SE=a("li"),MTe=a("strong"),iwr=o("xlm"),dwr=o(" \u2014 "),BJ=a("a"),cwr=o("TFXLMForSequenceClassification"),fwr=o(" (XLM model)"),mwr=l(),RE=a("li"),ETe=a("strong"),gwr=o("xlm-roberta"),hwr=o(" \u2014 "),IJ=a("a"),pwr=o("TFXLMRobertaForSequenceClassification"),uwr=o(" (XLM-RoBERTa model)"),_wr=l(),PE=a("li"),CTe=a("strong"),bwr=o("xlnet"),vwr=o(" \u2014 "),NJ=a("a"),Fwr=o("TFXLNetForSequenceClassification"),Twr=o(" (XLNet model)"),Mwr=l(),F(BE.$$.fragment),EOe=l(),Fc=a("h2"),IE=a("a"),wTe=a("span"),F(G9.$$.fragment),Ewr=l(),ATe=a("span"),Cwr=o("TFAutoModelForMultipleChoice"),COe=l(),sr=a("div"),F(O9.$$.fragment),wwr=l(),Tc=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qJ=a("a"),Lwr=o("from_pretrained()"),ywr=o(" class method or the "),jJ=a("a"),xwr=o("from_config()"),$wr=o(` class
method.`),kwr=l(),V9=a("p"),Swr=o("This class cannot be instantiated directly using "),LTe=a("code"),Rwr=o("__init__()"),Pwr=o(" (throws an error)."),Bwr=l(),Nt=a("div"),F(X9.$$.fragment),Iwr=l(),yTe=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qwr=l(),Mc=a("p"),jwr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),Dwr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),Owr=o("from_pretrained()"),Vwr=o(" to load the model weights."),Xwr=l(),F(NE.$$.fragment),zwr=l(),Pr=a("div"),F(z9.$$.fragment),Wwr=l(),$Te=a("p"),Qwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hwr=l(),mn=a("p"),Uwr=o("The model class to instantiate is selected based on the "),kTe=a("code"),Jwr=o("model_type"),Ywr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),ue=a("ul"),qE=a("li"),PTe=a("strong"),tAr=o("albert"),aAr=o(" \u2014 "),GJ=a("a"),nAr=o("TFAlbertForMultipleChoice"),sAr=o(" (ALBERT model)"),lAr=l(),jE=a("li"),BTe=a("strong"),iAr=o("bert"),dAr=o(" \u2014 "),OJ=a("a"),cAr=o("TFBertForMultipleChoice"),fAr=o(" (BERT model)"),mAr=l(),DE=a("li"),ITe=a("strong"),gAr=o("camembert"),hAr=o(" \u2014 "),VJ=a("a"),pAr=o("TFCamembertForMultipleChoice"),uAr=o(" (CamemBERT model)"),_Ar=l(),GE=a("li"),NTe=a("strong"),bAr=o("convbert"),vAr=o(" \u2014 "),XJ=a("a"),FAr=o("TFConvBertForMultipleChoice"),TAr=o(" (ConvBERT model)"),MAr=l(),OE=a("li"),qTe=a("strong"),EAr=o("distilbert"),CAr=o(" \u2014 "),zJ=a("a"),wAr=o("TFDistilBertForMultipleChoice"),AAr=o(" (DistilBERT model)"),LAr=l(),VE=a("li"),jTe=a("strong"),yAr=o("electra"),xAr=o(" \u2014 "),WJ=a("a"),$Ar=o("TFElectraForMultipleChoice"),kAr=o(" (ELECTRA model)"),SAr=l(),XE=a("li"),DTe=a("strong"),RAr=o("flaubert"),PAr=o(" \u2014 "),QJ=a("a"),BAr=o("TFFlaubertForMultipleChoice"),IAr=o(" (FlauBERT model)"),NAr=l(),zE=a("li"),GTe=a("strong"),qAr=o("funnel"),jAr=o(" \u2014 "),HJ=a("a"),DAr=o("TFFunnelForMultipleChoice"),GAr=o(" (Funnel Transformer model)"),OAr=l(),WE=a("li"),OTe=a("strong"),VAr=o("longformer"),XAr=o(" \u2014 "),UJ=a("a"),zAr=o("TFLongformerForMultipleChoice"),WAr=o(" (Longformer model)"),QAr=l(),QE=a("li"),VTe=a("strong"),HAr=o("mobilebert"),UAr=o(" \u2014 "),JJ=a("a"),JAr=o("TFMobileBertForMultipleChoice"),YAr=o(" (MobileBERT model)"),KAr=l(),HE=a("li"),XTe=a("strong"),ZAr=o("mpnet"),e6r=o(" \u2014 "),YJ=a("a"),o6r=o("TFMPNetForMultipleChoice"),r6r=o(" (MPNet model)"),t6r=l(),UE=a("li"),zTe=a("strong"),a6r=o("rembert"),n6r=o(" \u2014 "),KJ=a("a"),s6r=o("TFRemBertForMultipleChoice"),l6r=o(" (RemBERT model)"),i6r=l(),JE=a("li"),WTe=a("strong"),d6r=o("roberta"),c6r=o(" \u2014 "),ZJ=a("a"),f6r=o("TFRobertaForMultipleChoice"),m6r=o(" (RoBERTa model)"),g6r=l(),YE=a("li"),QTe=a("strong"),h6r=o("roformer"),p6r=o(" \u2014 "),eY=a("a"),u6r=o("TFRoFormerForMultipleChoice"),_6r=o(" (RoFormer model)"),b6r=l(),KE=a("li"),HTe=a("strong"),v6r=o("xlm"),F6r=o(" \u2014 "),oY=a("a"),T6r=o("TFXLMForMultipleChoice"),M6r=o(" (XLM model)"),E6r=l(),ZE=a("li"),UTe=a("strong"),C6r=o("xlm-roberta"),w6r=o(" \u2014 "),rY=a("a"),A6r=o("TFXLMRobertaForMultipleChoice"),L6r=o(" (XLM-RoBERTa model)"),y6r=l(),eC=a("li"),JTe=a("strong"),x6r=o("xlnet"),$6r=o(" \u2014 "),tY=a("a"),k6r=o("TFXLNetForMultipleChoice"),S6r=o(" (XLNet model)"),R6r=l(),F(oC.$$.fragment),wOe=l(),Ec=a("h2"),rC=a("a"),YTe=a("span"),F(W9.$$.fragment),P6r=l(),KTe=a("span"),B6r=o("TFAutoModelForNextSentencePrediction"),AOe=l(),lr=a("div"),F(Q9.$$.fragment),I6r=l(),Cc=a("p"),N6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aY=a("a"),q6r=o("from_pretrained()"),j6r=o(" class method or the "),nY=a("a"),D6r=o("from_config()"),G6r=o(` class
method.`),O6r=l(),H9=a("p"),V6r=o("This class cannot be instantiated directly using "),ZTe=a("code"),X6r=o("__init__()"),z6r=o(" (throws an error)."),W6r=l(),qt=a("div"),F(U9.$$.fragment),Q6r=l(),eMe=a("p"),H6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U6r=l(),wc=a("p"),J6r=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),Y6r=o("not"),K6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),Z6r=o("from_pretrained()"),eLr=o(" to load the model weights."),oLr=l(),F(tC.$$.fragment),rLr=l(),Br=a("div"),F(J9.$$.fragment),tLr=l(),rMe=a("p"),aLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nLr=l(),gn=a("p"),sLr=o("The model class to instantiate is selected based on the "),tMe=a("code"),lLr=o("model_type"),iLr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(":"),gLr=l(),Y9=a("ul"),aC=a("li"),sMe=a("strong"),hLr=o("bert"),pLr=o(" \u2014 "),lY=a("a"),uLr=o("TFBertForNextSentencePrediction"),_Lr=o(" (BERT model)"),bLr=l(),nC=a("li"),lMe=a("strong"),vLr=o("mobilebert"),FLr=o(" \u2014 "),iY=a("a"),TLr=o("TFMobileBertForNextSentencePrediction"),MLr=o(" (MobileBERT model)"),ELr=l(),F(sC.$$.fragment),LOe=l(),Ac=a("h2"),lC=a("a"),iMe=a("span"),F(K9.$$.fragment),CLr=l(),dMe=a("span"),wLr=o("TFAutoModelForTableQuestionAnswering"),yOe=l(),ir=a("div"),F(Z9.$$.fragment),ALr=l(),Lc=a("p"),LLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dY=a("a"),yLr=o("from_pretrained()"),xLr=o(" class method or the "),cY=a("a"),$Lr=o("from_config()"),kLr=o(` class
method.`),SLr=l(),ex=a("p"),RLr=o("This class cannot be instantiated directly using "),cMe=a("code"),PLr=o("__init__()"),BLr=o(" (throws an error)."),ILr=l(),jt=a("div"),F(ox.$$.fragment),NLr=l(),fMe=a("p"),qLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jLr=l(),yc=a("p"),DLr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),GLr=o("not"),OLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),VLr=o("from_pretrained()"),XLr=o(" to load the model weights."),zLr=l(),F(iC.$$.fragment),WLr=l(),Ir=a("div"),F(rx.$$.fragment),QLr=l(),gMe=a("p"),HLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ULr=l(),hn=a("p"),JLr=o("The model class to instantiate is selected based on the "),hMe=a("code"),YLr=o("model_type"),KLr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),ZLr=o("pretrained_model_name_or_path"),eyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),oyr=o("pretrained_model_name_or_path"),ryr=o(":"),tyr=l(),_Me=a("ul"),dC=a("li"),bMe=a("strong"),ayr=o("tapas"),nyr=o(" \u2014 "),mY=a("a"),syr=o("TFTapasForQuestionAnswering"),lyr=o(" (TAPAS model)"),iyr=l(),F(cC.$$.fragment),xOe=l(),xc=a("h2"),fC=a("a"),vMe=a("span"),F(tx.$$.fragment),dyr=l(),FMe=a("span"),cyr=o("TFAutoModelForTokenClassification"),$Oe=l(),dr=a("div"),F(ax.$$.fragment),fyr=l(),$c=a("p"),myr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gY=a("a"),gyr=o("from_pretrained()"),hyr=o(" class method or the "),hY=a("a"),pyr=o("from_config()"),uyr=o(` class
method.`),_yr=l(),nx=a("p"),byr=o("This class cannot be instantiated directly using "),TMe=a("code"),vyr=o("__init__()"),Fyr=o(" (throws an error)."),Tyr=l(),Dt=a("div"),F(sx.$$.fragment),Myr=l(),MMe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cyr=l(),kc=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),Ayr=o("not"),Lyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),yyr=o("from_pretrained()"),xyr=o(" to load the model weights."),$yr=l(),F(mC.$$.fragment),kyr=l(),Nr=a("div"),F(lx.$$.fragment),Syr=l(),CMe=a("p"),Ryr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pyr=l(),pn=a("p"),Byr=o("The model class to instantiate is selected based on the "),wMe=a("code"),Iyr=o("model_type"),Nyr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),qyr=o("pretrained_model_name_or_path"),jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(":"),Oyr=l(),de=a("ul"),gC=a("li"),yMe=a("strong"),Vyr=o("albert"),Xyr=o(" \u2014 "),uY=a("a"),zyr=o("TFAlbertForTokenClassification"),Wyr=o(" (ALBERT model)"),Qyr=l(),hC=a("li"),xMe=a("strong"),Hyr=o("bert"),Uyr=o(" \u2014 "),_Y=a("a"),Jyr=o("TFBertForTokenClassification"),Yyr=o(" (BERT model)"),Kyr=l(),pC=a("li"),$Me=a("strong"),Zyr=o("camembert"),e8r=o(" \u2014 "),bY=a("a"),o8r=o("TFCamembertForTokenClassification"),r8r=o(" (CamemBERT model)"),t8r=l(),uC=a("li"),kMe=a("strong"),a8r=o("convbert"),n8r=o(" \u2014 "),vY=a("a"),s8r=o("TFConvBertForTokenClassification"),l8r=o(" (ConvBERT model)"),i8r=l(),_C=a("li"),SMe=a("strong"),d8r=o("deberta"),c8r=o(" \u2014 "),FY=a("a"),f8r=o("TFDebertaForTokenClassification"),m8r=o(" (DeBERTa model)"),g8r=l(),bC=a("li"),RMe=a("strong"),h8r=o("deberta-v2"),p8r=o(" \u2014 "),TY=a("a"),u8r=o("TFDebertaV2ForTokenClassification"),_8r=o(" (DeBERTa-v2 model)"),b8r=l(),vC=a("li"),PMe=a("strong"),v8r=o("distilbert"),F8r=o(" \u2014 "),MY=a("a"),T8r=o("TFDistilBertForTokenClassification"),M8r=o(" (DistilBERT model)"),E8r=l(),FC=a("li"),BMe=a("strong"),C8r=o("electra"),w8r=o(" \u2014 "),EY=a("a"),A8r=o("TFElectraForTokenClassification"),L8r=o(" (ELECTRA model)"),y8r=l(),TC=a("li"),IMe=a("strong"),x8r=o("flaubert"),$8r=o(" \u2014 "),CY=a("a"),k8r=o("TFFlaubertForTokenClassification"),S8r=o(" (FlauBERT model)"),R8r=l(),MC=a("li"),NMe=a("strong"),P8r=o("funnel"),B8r=o(" \u2014 "),wY=a("a"),I8r=o("TFFunnelForTokenClassification"),N8r=o(" (Funnel Transformer model)"),q8r=l(),EC=a("li"),qMe=a("strong"),j8r=o("layoutlm"),D8r=o(" \u2014 "),AY=a("a"),G8r=o("TFLayoutLMForTokenClassification"),O8r=o(" (LayoutLM model)"),V8r=l(),CC=a("li"),jMe=a("strong"),X8r=o("longformer"),z8r=o(" \u2014 "),LY=a("a"),W8r=o("TFLongformerForTokenClassification"),Q8r=o(" (Longformer model)"),H8r=l(),wC=a("li"),DMe=a("strong"),U8r=o("mobilebert"),J8r=o(" \u2014 "),yY=a("a"),Y8r=o("TFMobileBertForTokenClassification"),K8r=o(" (MobileBERT model)"),Z8r=l(),AC=a("li"),GMe=a("strong"),e9r=o("mpnet"),o9r=o(" \u2014 "),xY=a("a"),r9r=o("TFMPNetForTokenClassification"),t9r=o(" (MPNet model)"),a9r=l(),LC=a("li"),OMe=a("strong"),n9r=o("rembert"),s9r=o(" \u2014 "),$Y=a("a"),l9r=o("TFRemBertForTokenClassification"),i9r=o(" (RemBERT model)"),d9r=l(),yC=a("li"),VMe=a("strong"),c9r=o("roberta"),f9r=o(" \u2014 "),kY=a("a"),m9r=o("TFRobertaForTokenClassification"),g9r=o(" (RoBERTa model)"),h9r=l(),xC=a("li"),XMe=a("strong"),p9r=o("roformer"),u9r=o(" \u2014 "),SY=a("a"),_9r=o("TFRoFormerForTokenClassification"),b9r=o(" (RoFormer model)"),v9r=l(),$C=a("li"),zMe=a("strong"),F9r=o("xlm"),T9r=o(" \u2014 "),RY=a("a"),M9r=o("TFXLMForTokenClassification"),E9r=o(" (XLM model)"),C9r=l(),kC=a("li"),WMe=a("strong"),w9r=o("xlm-roberta"),A9r=o(" \u2014 "),PY=a("a"),L9r=o("TFXLMRobertaForTokenClassification"),y9r=o(" (XLM-RoBERTa model)"),x9r=l(),SC=a("li"),QMe=a("strong"),$9r=o("xlnet"),k9r=o(" \u2014 "),BY=a("a"),S9r=o("TFXLNetForTokenClassification"),R9r=o(" (XLNet model)"),P9r=l(),F(RC.$$.fragment),kOe=l(),Sc=a("h2"),PC=a("a"),HMe=a("span"),F(ix.$$.fragment),B9r=l(),UMe=a("span"),I9r=o("TFAutoModelForQuestionAnswering"),SOe=l(),cr=a("div"),F(dx.$$.fragment),N9r=l(),Rc=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=a("a"),j9r=o("from_pretrained()"),D9r=o(" class method or the "),NY=a("a"),G9r=o("from_config()"),O9r=o(` class
method.`),V9r=l(),cx=a("p"),X9r=o("This class cannot be instantiated directly using "),JMe=a("code"),z9r=o("__init__()"),W9r=o(" (throws an error)."),Q9r=l(),Gt=a("div"),F(fx.$$.fragment),H9r=l(),YMe=a("p"),U9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J9r=l(),Pc=a("p"),Y9r=o(`Note:
Loading a model from its configuration file does `),KMe=a("strong"),K9r=o("not"),Z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),exr=o("from_pretrained()"),oxr=o(" to load the model weights."),rxr=l(),F(BC.$$.fragment),txr=l(),qr=a("div"),F(mx.$$.fragment),axr=l(),ZMe=a("p"),nxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sxr=l(),un=a("p"),lxr=o("The model class to instantiate is selected based on the "),e4e=a("code"),ixr=o("model_type"),dxr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(":"),hxr=l(),ce=a("ul"),IC=a("li"),t4e=a("strong"),pxr=o("albert"),uxr=o(" \u2014 "),jY=a("a"),_xr=o("TFAlbertForQuestionAnswering"),bxr=o(" (ALBERT model)"),vxr=l(),NC=a("li"),a4e=a("strong"),Fxr=o("bert"),Txr=o(" \u2014 "),DY=a("a"),Mxr=o("TFBertForQuestionAnswering"),Exr=o(" (BERT model)"),Cxr=l(),qC=a("li"),n4e=a("strong"),wxr=o("camembert"),Axr=o(" \u2014 "),GY=a("a"),Lxr=o("TFCamembertForQuestionAnswering"),yxr=o(" (CamemBERT model)"),xxr=l(),jC=a("li"),s4e=a("strong"),$xr=o("convbert"),kxr=o(" \u2014 "),OY=a("a"),Sxr=o("TFConvBertForQuestionAnswering"),Rxr=o(" (ConvBERT model)"),Pxr=l(),DC=a("li"),l4e=a("strong"),Bxr=o("deberta"),Ixr=o(" \u2014 "),VY=a("a"),Nxr=o("TFDebertaForQuestionAnswering"),qxr=o(" (DeBERTa model)"),jxr=l(),GC=a("li"),i4e=a("strong"),Dxr=o("deberta-v2"),Gxr=o(" \u2014 "),XY=a("a"),Oxr=o("TFDebertaV2ForQuestionAnswering"),Vxr=o(" (DeBERTa-v2 model)"),Xxr=l(),OC=a("li"),d4e=a("strong"),zxr=o("distilbert"),Wxr=o(" \u2014 "),zY=a("a"),Qxr=o("TFDistilBertForQuestionAnswering"),Hxr=o(" (DistilBERT model)"),Uxr=l(),VC=a("li"),c4e=a("strong"),Jxr=o("electra"),Yxr=o(" \u2014 "),WY=a("a"),Kxr=o("TFElectraForQuestionAnswering"),Zxr=o(" (ELECTRA model)"),e$r=l(),XC=a("li"),f4e=a("strong"),o$r=o("flaubert"),r$r=o(" \u2014 "),QY=a("a"),t$r=o("TFFlaubertForQuestionAnsweringSimple"),a$r=o(" (FlauBERT model)"),n$r=l(),zC=a("li"),m4e=a("strong"),s$r=o("funnel"),l$r=o(" \u2014 "),HY=a("a"),i$r=o("TFFunnelForQuestionAnswering"),d$r=o(" (Funnel Transformer model)"),c$r=l(),WC=a("li"),g4e=a("strong"),f$r=o("gptj"),m$r=o(" \u2014 "),UY=a("a"),g$r=o("TFGPTJForQuestionAnswering"),h$r=o(" (GPT-J model)"),p$r=l(),QC=a("li"),h4e=a("strong"),u$r=o("longformer"),_$r=o(" \u2014 "),JY=a("a"),b$r=o("TFLongformerForQuestionAnswering"),v$r=o(" (Longformer model)"),F$r=l(),HC=a("li"),p4e=a("strong"),T$r=o("mobilebert"),M$r=o(" \u2014 "),YY=a("a"),E$r=o("TFMobileBertForQuestionAnswering"),C$r=o(" (MobileBERT model)"),w$r=l(),UC=a("li"),u4e=a("strong"),A$r=o("mpnet"),L$r=o(" \u2014 "),KY=a("a"),y$r=o("TFMPNetForQuestionAnswering"),x$r=o(" (MPNet model)"),$$r=l(),JC=a("li"),_4e=a("strong"),k$r=o("rembert"),S$r=o(" \u2014 "),ZY=a("a"),R$r=o("TFRemBertForQuestionAnswering"),P$r=o(" (RemBERT model)"),B$r=l(),YC=a("li"),b4e=a("strong"),I$r=o("roberta"),N$r=o(" \u2014 "),eK=a("a"),q$r=o("TFRobertaForQuestionAnswering"),j$r=o(" (RoBERTa model)"),D$r=l(),KC=a("li"),v4e=a("strong"),G$r=o("roformer"),O$r=o(" \u2014 "),oK=a("a"),V$r=o("TFRoFormerForQuestionAnswering"),X$r=o(" (RoFormer model)"),z$r=l(),ZC=a("li"),F4e=a("strong"),W$r=o("xlm"),Q$r=o(" \u2014 "),rK=a("a"),H$r=o("TFXLMForQuestionAnsweringSimple"),U$r=o(" (XLM model)"),J$r=l(),e5=a("li"),T4e=a("strong"),Y$r=o("xlm-roberta"),K$r=o(" \u2014 "),tK=a("a"),Z$r=o("TFXLMRobertaForQuestionAnswering"),ekr=o(" (XLM-RoBERTa model)"),okr=l(),o5=a("li"),M4e=a("strong"),rkr=o("xlnet"),tkr=o(" \u2014 "),aK=a("a"),akr=o("TFXLNetForQuestionAnsweringSimple"),nkr=o(" (XLNet model)"),skr=l(),F(r5.$$.fragment),ROe=l(),Bc=a("h2"),t5=a("a"),E4e=a("span"),F(gx.$$.fragment),lkr=l(),C4e=a("span"),ikr=o("TFAutoModelForVision2Seq"),POe=l(),fr=a("div"),F(hx.$$.fragment),dkr=l(),Ic=a("p"),ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nK=a("a"),fkr=o("from_pretrained()"),mkr=o(" class method or the "),sK=a("a"),gkr=o("from_config()"),hkr=o(` class
method.`),pkr=l(),px=a("p"),ukr=o("This class cannot be instantiated directly using "),w4e=a("code"),_kr=o("__init__()"),bkr=o(" (throws an error)."),vkr=l(),Ot=a("div"),F(ux.$$.fragment),Fkr=l(),A4e=a("p"),Tkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mkr=l(),Nc=a("p"),Ekr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),Ckr=o("not"),wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),Akr=o("from_pretrained()"),Lkr=o(" to load the model weights."),ykr=l(),F(a5.$$.fragment),xkr=l(),jr=a("div"),F(_x.$$.fragment),$kr=l(),y4e=a("p"),kkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Skr=l(),_n=a("p"),Rkr=o("The model class to instantiate is selected based on the "),x4e=a("code"),Pkr=o("model_type"),Bkr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),Ikr=o("pretrained_model_name_or_path"),Nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),qkr=o("pretrained_model_name_or_path"),jkr=o(":"),Dkr=l(),S4e=a("ul"),n5=a("li"),R4e=a("strong"),Gkr=o("vision-encoder-decoder"),Okr=o(" \u2014 "),iK=a("a"),Vkr=o("TFVisionEncoderDecoderModel"),Xkr=o(" (Vision Encoder decoder model)"),zkr=l(),F(s5.$$.fragment),BOe=l(),qc=a("h2"),l5=a("a"),P4e=a("span"),F(bx.$$.fragment),Wkr=l(),B4e=a("span"),Qkr=o("TFAutoModelForSpeechSeq2Seq"),IOe=l(),mr=a("div"),F(vx.$$.fragment),Hkr=l(),jc=a("p"),Ukr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dK=a("a"),Jkr=o("from_pretrained()"),Ykr=o(" class method or the "),cK=a("a"),Kkr=o("from_config()"),Zkr=o(` class
method.`),eSr=l(),Fx=a("p"),oSr=o("This class cannot be instantiated directly using "),I4e=a("code"),rSr=o("__init__()"),tSr=o(" (throws an error)."),aSr=l(),Vt=a("div"),F(Tx.$$.fragment),nSr=l(),N4e=a("p"),sSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lSr=l(),Dc=a("p"),iSr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),dSr=o("not"),cSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),fSr=o("from_pretrained()"),mSr=o(" to load the model weights."),gSr=l(),F(i5.$$.fragment),hSr=l(),Dr=a("div"),F(Mx.$$.fragment),pSr=l(),j4e=a("p"),uSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Sr=l(),bn=a("p"),bSr=o("The model class to instantiate is selected based on the "),D4e=a("code"),vSr=o("model_type"),FSr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),TSr=o("pretrained_model_name_or_path"),MSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(":"),wSr=l(),V4e=a("ul"),d5=a("li"),X4e=a("strong"),ASr=o("speech_to_text"),LSr=o(" \u2014 "),mK=a("a"),ySr=o("TFSpeech2TextForConditionalGeneration"),xSr=o(" (Speech2Text model)"),$Sr=l(),F(c5.$$.fragment),NOe=l(),Gc=a("h2"),f5=a("a"),z4e=a("span"),F(Ex.$$.fragment),kSr=l(),W4e=a("span"),SSr=o("FlaxAutoModel"),qOe=l(),gr=a("div"),F(Cx.$$.fragment),RSr=l(),Oc=a("p"),PSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gK=a("a"),BSr=o("from_pretrained()"),ISr=o(" class method or the "),hK=a("a"),NSr=o("from_config()"),qSr=o(` class
method.`),jSr=l(),wx=a("p"),DSr=o("This class cannot be instantiated directly using "),Q4e=a("code"),GSr=o("__init__()"),OSr=o(" (throws an error)."),VSr=l(),Xt=a("div"),F(Ax.$$.fragment),XSr=l(),H4e=a("p"),zSr=o("Instantiates one of the base model classes of the library from a configuration."),WSr=l(),Vc=a("p"),QSr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),HSr=o("not"),USr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),JSr=o("from_pretrained()"),YSr=o(" to load the model weights."),KSr=l(),F(m5.$$.fragment),ZSr=l(),Gr=a("div"),F(Lx.$$.fragment),eRr=l(),J4e=a("p"),oRr=o("Instantiate one of the base model classes of the library from a pretrained model."),rRr=l(),vn=a("p"),tRr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),aRr=o("model_type"),nRr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(":"),cRr=l(),ee=a("ul"),g5=a("li"),eEe=a("strong"),fRr=o("albert"),mRr=o(" \u2014 "),uK=a("a"),gRr=o("FlaxAlbertModel"),hRr=o(" (ALBERT model)"),pRr=l(),h5=a("li"),oEe=a("strong"),uRr=o("bart"),_Rr=o(" \u2014 "),_K=a("a"),bRr=o("FlaxBartModel"),vRr=o(" (BART model)"),FRr=l(),p5=a("li"),rEe=a("strong"),TRr=o("beit"),MRr=o(" \u2014 "),bK=a("a"),ERr=o("FlaxBeitModel"),CRr=o(" (BEiT model)"),wRr=l(),u5=a("li"),tEe=a("strong"),ARr=o("bert"),LRr=o(" \u2014 "),vK=a("a"),yRr=o("FlaxBertModel"),xRr=o(" (BERT model)"),$Rr=l(),_5=a("li"),aEe=a("strong"),kRr=o("big_bird"),SRr=o(" \u2014 "),FK=a("a"),RRr=o("FlaxBigBirdModel"),PRr=o(" (BigBird model)"),BRr=l(),b5=a("li"),nEe=a("strong"),IRr=o("blenderbot"),NRr=o(" \u2014 "),TK=a("a"),qRr=o("FlaxBlenderbotModel"),jRr=o(" (Blenderbot model)"),DRr=l(),v5=a("li"),sEe=a("strong"),GRr=o("blenderbot-small"),ORr=o(" \u2014 "),MK=a("a"),VRr=o("FlaxBlenderbotSmallModel"),XRr=o(" (BlenderbotSmall model)"),zRr=l(),F5=a("li"),lEe=a("strong"),WRr=o("clip"),QRr=o(" \u2014 "),EK=a("a"),HRr=o("FlaxCLIPModel"),URr=o(" (CLIP model)"),JRr=l(),T5=a("li"),iEe=a("strong"),YRr=o("distilbert"),KRr=o(" \u2014 "),CK=a("a"),ZRr=o("FlaxDistilBertModel"),ePr=o(" (DistilBERT model)"),oPr=l(),M5=a("li"),dEe=a("strong"),rPr=o("dpt"),tPr=o(" \u2014 "),wK=a("a"),aPr=o("FlaxDPTModel"),nPr=o(" (DPT model)"),sPr=l(),E5=a("li"),cEe=a("strong"),lPr=o("electra"),iPr=o(" \u2014 "),AK=a("a"),dPr=o("FlaxElectraModel"),cPr=o(" (ELECTRA model)"),fPr=l(),C5=a("li"),fEe=a("strong"),mPr=o("gpt2"),gPr=o(" \u2014 "),LK=a("a"),hPr=o("FlaxGPT2Model"),pPr=o(" (OpenAI GPT-2 model)"),uPr=l(),w5=a("li"),mEe=a("strong"),_Pr=o("gpt_neo"),bPr=o(" \u2014 "),yK=a("a"),vPr=o("FlaxGPTNeoModel"),FPr=o(" (GPT Neo model)"),TPr=l(),A5=a("li"),gEe=a("strong"),MPr=o("gptj"),EPr=o(" \u2014 "),xK=a("a"),CPr=o("FlaxGPTJModel"),wPr=o(" (GPT-J model)"),APr=l(),L5=a("li"),hEe=a("strong"),LPr=o("longt5"),yPr=o(" \u2014 "),$K=a("a"),xPr=o("FlaxLongT5Model"),$Pr=o(" (LongT5 model)"),kPr=l(),y5=a("li"),pEe=a("strong"),SPr=o("marian"),RPr=o(" \u2014 "),kK=a("a"),PPr=o("FlaxMarianModel"),BPr=o(" (Marian model)"),IPr=l(),x5=a("li"),uEe=a("strong"),NPr=o("mbart"),qPr=o(" \u2014 "),SK=a("a"),jPr=o("FlaxMBartModel"),DPr=o(" (mBART model)"),GPr=l(),$5=a("li"),_Ee=a("strong"),OPr=o("mt5"),VPr=o(" \u2014 "),RK=a("a"),XPr=o("FlaxMT5Model"),zPr=o(" (MT5 model)"),WPr=l(),k5=a("li"),bEe=a("strong"),QPr=o("opt"),HPr=o(" \u2014 "),PK=a("a"),UPr=o("FlaxOPTModel"),JPr=o(" (OPT model)"),YPr=l(),S5=a("li"),vEe=a("strong"),KPr=o("pegasus"),ZPr=o(" \u2014 "),BK=a("a"),eBr=o("FlaxPegasusModel"),oBr=o(" (Pegasus model)"),rBr=l(),R5=a("li"),FEe=a("strong"),tBr=o("roberta"),aBr=o(" \u2014 "),IK=a("a"),nBr=o("FlaxRobertaModel"),sBr=o(" (RoBERTa model)"),lBr=l(),P5=a("li"),TEe=a("strong"),iBr=o("roformer"),dBr=o(" \u2014 "),NK=a("a"),cBr=o("FlaxRoFormerModel"),fBr=o(" (RoFormer model)"),mBr=l(),B5=a("li"),MEe=a("strong"),gBr=o("t5"),hBr=o(" \u2014 "),qK=a("a"),pBr=o("FlaxT5Model"),uBr=o(" (T5 model)"),_Br=l(),I5=a("li"),EEe=a("strong"),bBr=o("vision-text-dual-encoder"),vBr=o(" \u2014 "),jK=a("a"),FBr=o("FlaxVisionTextDualEncoderModel"),TBr=o(" (VisionTextDualEncoder model)"),MBr=l(),N5=a("li"),CEe=a("strong"),EBr=o("vit"),CBr=o(" \u2014 "),DK=a("a"),wBr=o("FlaxViTModel"),ABr=o(" (ViT model)"),LBr=l(),q5=a("li"),wEe=a("strong"),yBr=o("wav2vec2"),xBr=o(" \u2014 "),GK=a("a"),$Br=o("FlaxWav2Vec2Model"),kBr=o(" (Wav2Vec2 model)"),SBr=l(),j5=a("li"),AEe=a("strong"),RBr=o("xglm"),PBr=o(" \u2014 "),OK=a("a"),BBr=o("FlaxXGLMModel"),IBr=o(" (XGLM model)"),NBr=l(),D5=a("li"),LEe=a("strong"),qBr=o("xlm-roberta"),jBr=o(" \u2014 "),VK=a("a"),DBr=o("FlaxXLMRobertaModel"),GBr=o(" (XLM-RoBERTa model)"),OBr=l(),F(G5.$$.fragment),jOe=l(),Xc=a("h2"),O5=a("a"),yEe=a("span"),F(yx.$$.fragment),VBr=l(),xEe=a("span"),XBr=o("FlaxAutoModelForCausalLM"),DOe=l(),hr=a("div"),F(xx.$$.fragment),zBr=l(),zc=a("p"),WBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XK=a("a"),QBr=o("from_pretrained()"),HBr=o(" class method or the "),zK=a("a"),UBr=o("from_config()"),JBr=o(` class
method.`),YBr=l(),$x=a("p"),KBr=o("This class cannot be instantiated directly using "),$Ee=a("code"),ZBr=o("__init__()"),eIr=o(" (throws an error)."),oIr=l(),zt=a("div"),F(kx.$$.fragment),rIr=l(),kEe=a("p"),tIr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aIr=l(),Wc=a("p"),nIr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),sIr=o("not"),lIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),iIr=o("from_pretrained()"),dIr=o(" to load the model weights."),cIr=l(),F(V5.$$.fragment),fIr=l(),Or=a("div"),F(Sx.$$.fragment),mIr=l(),REe=a("p"),gIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hIr=l(),Fn=a("p"),pIr=o("The model class to instantiate is selected based on the "),PEe=a("code"),uIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(":"),MIr=l(),xe=a("ul"),X5=a("li"),NEe=a("strong"),EIr=o("bart"),CIr=o(" \u2014 "),QK=a("a"),wIr=o("FlaxBartForCausalLM"),AIr=o(" (BART model)"),LIr=l(),z5=a("li"),qEe=a("strong"),yIr=o("bert"),xIr=o(" \u2014 "),HK=a("a"),$Ir=o("FlaxBertForCausalLM"),kIr=o(" (BERT model)"),SIr=l(),W5=a("li"),jEe=a("strong"),RIr=o("big_bird"),PIr=o(" \u2014 "),UK=a("a"),BIr=o("FlaxBigBirdForCausalLM"),IIr=o(" (BigBird model)"),NIr=l(),Q5=a("li"),DEe=a("strong"),qIr=o("electra"),jIr=o(" \u2014 "),JK=a("a"),DIr=o("FlaxElectraForCausalLM"),GIr=o(" (ELECTRA model)"),OIr=l(),H5=a("li"),GEe=a("strong"),VIr=o("gpt2"),XIr=o(" \u2014 "),YK=a("a"),zIr=o("FlaxGPT2LMHeadModel"),WIr=o(" (OpenAI GPT-2 model)"),QIr=l(),U5=a("li"),OEe=a("strong"),HIr=o("gpt_neo"),UIr=o(" \u2014 "),KK=a("a"),JIr=o("FlaxGPTNeoForCausalLM"),YIr=o(" (GPT Neo model)"),KIr=l(),J5=a("li"),VEe=a("strong"),ZIr=o("gptj"),eNr=o(" \u2014 "),ZK=a("a"),oNr=o("FlaxGPTJForCausalLM"),rNr=o(" (GPT-J model)"),tNr=l(),Y5=a("li"),XEe=a("strong"),aNr=o("opt"),nNr=o(" \u2014 "),eZ=a("a"),sNr=o("FlaxOPTForCausalLM"),lNr=o(" (OPT model)"),iNr=l(),K5=a("li"),zEe=a("strong"),dNr=o("roberta"),cNr=o(" \u2014 "),oZ=a("a"),fNr=o("FlaxRobertaForCausalLM"),mNr=o(" (RoBERTa model)"),gNr=l(),Z5=a("li"),WEe=a("strong"),hNr=o("xglm"),pNr=o(" \u2014 "),rZ=a("a"),uNr=o("FlaxXGLMForCausalLM"),_Nr=o(" (XGLM model)"),bNr=l(),F(e3.$$.fragment),GOe=l(),Qc=a("h2"),o3=a("a"),QEe=a("span"),F(Rx.$$.fragment),vNr=l(),HEe=a("span"),FNr=o("FlaxAutoModelForPreTraining"),OOe=l(),pr=a("div"),F(Px.$$.fragment),TNr=l(),Hc=a("p"),MNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tZ=a("a"),ENr=o("from_pretrained()"),CNr=o(" class method or the "),aZ=a("a"),wNr=o("from_config()"),ANr=o(` class
method.`),LNr=l(),Bx=a("p"),yNr=o("This class cannot be instantiated directly using "),UEe=a("code"),xNr=o("__init__()"),$Nr=o(" (throws an error)."),kNr=l(),Wt=a("div"),F(Ix.$$.fragment),SNr=l(),JEe=a("p"),RNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PNr=l(),Uc=a("p"),BNr=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),INr=o("not"),NNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),qNr=o("from_pretrained()"),jNr=o(" to load the model weights."),DNr=l(),F(r3.$$.fragment),GNr=l(),Vr=a("div"),F(Nx.$$.fragment),ONr=l(),KEe=a("p"),VNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XNr=l(),Tn=a("p"),zNr=o("The model class to instantiate is selected based on the "),ZEe=a("code"),WNr=o("model_type"),QNr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),HNr=o("pretrained_model_name_or_path"),UNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),JNr=o("pretrained_model_name_or_path"),YNr=o(":"),KNr=l(),Ee=a("ul"),t3=a("li"),rCe=a("strong"),ZNr=o("albert"),eqr=o(" \u2014 "),sZ=a("a"),oqr=o("FlaxAlbertForPreTraining"),rqr=o(" (ALBERT model)"),tqr=l(),a3=a("li"),tCe=a("strong"),aqr=o("bart"),nqr=o(" \u2014 "),lZ=a("a"),sqr=o("FlaxBartForConditionalGeneration"),lqr=o(" (BART model)"),iqr=l(),n3=a("li"),aCe=a("strong"),dqr=o("bert"),cqr=o(" \u2014 "),iZ=a("a"),fqr=o("FlaxBertForPreTraining"),mqr=o(" (BERT model)"),gqr=l(),s3=a("li"),nCe=a("strong"),hqr=o("big_bird"),pqr=o(" \u2014 "),dZ=a("a"),uqr=o("FlaxBigBirdForPreTraining"),_qr=o(" (BigBird model)"),bqr=l(),l3=a("li"),sCe=a("strong"),vqr=o("electra"),Fqr=o(" \u2014 "),cZ=a("a"),Tqr=o("FlaxElectraForPreTraining"),Mqr=o(" (ELECTRA model)"),Eqr=l(),i3=a("li"),lCe=a("strong"),Cqr=o("longt5"),wqr=o(" \u2014 "),fZ=a("a"),Aqr=o("FlaxLongT5ForConditionalGeneration"),Lqr=o(" (LongT5 model)"),yqr=l(),d3=a("li"),iCe=a("strong"),xqr=o("mbart"),$qr=o(" \u2014 "),mZ=a("a"),kqr=o("FlaxMBartForConditionalGeneration"),Sqr=o(" (mBART model)"),Rqr=l(),c3=a("li"),dCe=a("strong"),Pqr=o("mt5"),Bqr=o(" \u2014 "),gZ=a("a"),Iqr=o("FlaxMT5ForConditionalGeneration"),Nqr=o(" (MT5 model)"),qqr=l(),f3=a("li"),cCe=a("strong"),jqr=o("roberta"),Dqr=o(" \u2014 "),hZ=a("a"),Gqr=o("FlaxRobertaForMaskedLM"),Oqr=o(" (RoBERTa model)"),Vqr=l(),m3=a("li"),fCe=a("strong"),Xqr=o("roformer"),zqr=o(" \u2014 "),pZ=a("a"),Wqr=o("FlaxRoFormerForMaskedLM"),Qqr=o(" (RoFormer model)"),Hqr=l(),g3=a("li"),mCe=a("strong"),Uqr=o("t5"),Jqr=o(" \u2014 "),uZ=a("a"),Yqr=o("FlaxT5ForConditionalGeneration"),Kqr=o(" (T5 model)"),Zqr=l(),h3=a("li"),gCe=a("strong"),ejr=o("wav2vec2"),ojr=o(" \u2014 "),_Z=a("a"),rjr=o("FlaxWav2Vec2ForPreTraining"),tjr=o(" (Wav2Vec2 model)"),ajr=l(),p3=a("li"),hCe=a("strong"),njr=o("xlm-roberta"),sjr=o(" \u2014 "),bZ=a("a"),ljr=o("FlaxXLMRobertaForMaskedLM"),ijr=o(" (XLM-RoBERTa model)"),djr=l(),F(u3.$$.fragment),VOe=l(),Jc=a("h2"),_3=a("a"),pCe=a("span"),F(qx.$$.fragment),cjr=l(),uCe=a("span"),fjr=o("FlaxAutoModelForMaskedLM"),XOe=l(),ur=a("div"),F(jx.$$.fragment),mjr=l(),Yc=a("p"),gjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vZ=a("a"),hjr=o("from_pretrained()"),pjr=o(" class method or the "),FZ=a("a"),ujr=o("from_config()"),_jr=o(` class
method.`),bjr=l(),Dx=a("p"),vjr=o("This class cannot be instantiated directly using "),_Ce=a("code"),Fjr=o("__init__()"),Tjr=o(" (throws an error)."),Mjr=l(),Qt=a("div"),F(Gx.$$.fragment),Ejr=l(),bCe=a("p"),Cjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wjr=l(),Kc=a("p"),Ajr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),Ljr=o("not"),yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),xjr=o("from_pretrained()"),$jr=o(" to load the model weights."),kjr=l(),F(b3.$$.fragment),Sjr=l(),Xr=a("div"),F(Ox.$$.fragment),Rjr=l(),FCe=a("p"),Pjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bjr=l(),Mn=a("p"),Ijr=o("The model class to instantiate is selected based on the "),TCe=a("code"),Njr=o("model_type"),qjr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),jjr=o("pretrained_model_name_or_path"),Djr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(":"),Vjr=l(),$e=a("ul"),v3=a("li"),CCe=a("strong"),Xjr=o("albert"),zjr=o(" \u2014 "),MZ=a("a"),Wjr=o("FlaxAlbertForMaskedLM"),Qjr=o(" (ALBERT model)"),Hjr=l(),F3=a("li"),wCe=a("strong"),Ujr=o("bart"),Jjr=o(" \u2014 "),EZ=a("a"),Yjr=o("FlaxBartForConditionalGeneration"),Kjr=o(" (BART model)"),Zjr=l(),T3=a("li"),ACe=a("strong"),eDr=o("bert"),oDr=o(" \u2014 "),CZ=a("a"),rDr=o("FlaxBertForMaskedLM"),tDr=o(" (BERT model)"),aDr=l(),M3=a("li"),LCe=a("strong"),nDr=o("big_bird"),sDr=o(" \u2014 "),wZ=a("a"),lDr=o("FlaxBigBirdForMaskedLM"),iDr=o(" (BigBird model)"),dDr=l(),E3=a("li"),yCe=a("strong"),cDr=o("distilbert"),fDr=o(" \u2014 "),AZ=a("a"),mDr=o("FlaxDistilBertForMaskedLM"),gDr=o(" (DistilBERT model)"),hDr=l(),C3=a("li"),xCe=a("strong"),pDr=o("electra"),uDr=o(" \u2014 "),LZ=a("a"),_Dr=o("FlaxElectraForMaskedLM"),bDr=o(" (ELECTRA model)"),vDr=l(),w3=a("li"),$Ce=a("strong"),FDr=o("mbart"),TDr=o(" \u2014 "),yZ=a("a"),MDr=o("FlaxMBartForConditionalGeneration"),EDr=o(" (mBART model)"),CDr=l(),A3=a("li"),kCe=a("strong"),wDr=o("roberta"),ADr=o(" \u2014 "),xZ=a("a"),LDr=o("FlaxRobertaForMaskedLM"),yDr=o(" (RoBERTa model)"),xDr=l(),L3=a("li"),SCe=a("strong"),$Dr=o("roformer"),kDr=o(" \u2014 "),$Z=a("a"),SDr=o("FlaxRoFormerForMaskedLM"),RDr=o(" (RoFormer model)"),PDr=l(),y3=a("li"),RCe=a("strong"),BDr=o("xlm-roberta"),IDr=o(" \u2014 "),kZ=a("a"),NDr=o("FlaxXLMRobertaForMaskedLM"),qDr=o(" (XLM-RoBERTa model)"),jDr=l(),F(x3.$$.fragment),zOe=l(),Zc=a("h2"),$3=a("a"),PCe=a("span"),F(Vx.$$.fragment),DDr=l(),BCe=a("span"),GDr=o("FlaxAutoModelForSeq2SeqLM"),WOe=l(),_r=a("div"),F(Xx.$$.fragment),ODr=l(),ef=a("p"),VDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SZ=a("a"),XDr=o("from_pretrained()"),zDr=o(" class method or the "),RZ=a("a"),WDr=o("from_config()"),QDr=o(` class
method.`),HDr=l(),zx=a("p"),UDr=o("This class cannot be instantiated directly using "),ICe=a("code"),JDr=o("__init__()"),YDr=o(" (throws an error)."),KDr=l(),Ht=a("div"),F(Wx.$$.fragment),ZDr=l(),NCe=a("p"),eGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oGr=l(),of=a("p"),rGr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),tGr=o("not"),aGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),nGr=o("from_pretrained()"),sGr=o(" to load the model weights."),lGr=l(),F(k3.$$.fragment),iGr=l(),zr=a("div"),F(Qx.$$.fragment),dGr=l(),jCe=a("p"),cGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fGr=l(),En=a("p"),mGr=o("The model class to instantiate is selected based on the "),DCe=a("code"),gGr=o("model_type"),hGr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),pGr=o("pretrained_model_name_or_path"),uGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),_Gr=o("pretrained_model_name_or_path"),bGr=o(":"),vGr=l(),ke=a("ul"),S3=a("li"),VCe=a("strong"),FGr=o("bart"),TGr=o(" \u2014 "),BZ=a("a"),MGr=o("FlaxBartForConditionalGeneration"),EGr=o(" (BART model)"),CGr=l(),R3=a("li"),XCe=a("strong"),wGr=o("blenderbot"),AGr=o(" \u2014 "),IZ=a("a"),LGr=o("FlaxBlenderbotForConditionalGeneration"),yGr=o(" (Blenderbot model)"),xGr=l(),P3=a("li"),zCe=a("strong"),$Gr=o("blenderbot-small"),kGr=o(" \u2014 "),NZ=a("a"),SGr=o("FlaxBlenderbotSmallForConditionalGeneration"),RGr=o(" (BlenderbotSmall model)"),PGr=l(),B3=a("li"),WCe=a("strong"),BGr=o("encoder-decoder"),IGr=o(" \u2014 "),qZ=a("a"),NGr=o("FlaxEncoderDecoderModel"),qGr=o(" (Encoder decoder model)"),jGr=l(),I3=a("li"),QCe=a("strong"),DGr=o("longt5"),GGr=o(" \u2014 "),jZ=a("a"),OGr=o("FlaxLongT5ForConditionalGeneration"),VGr=o(" (LongT5 model)"),XGr=l(),N3=a("li"),HCe=a("strong"),zGr=o("marian"),WGr=o(" \u2014 "),DZ=a("a"),QGr=o("FlaxMarianMTModel"),HGr=o(" (Marian model)"),UGr=l(),q3=a("li"),UCe=a("strong"),JGr=o("mbart"),YGr=o(" \u2014 "),GZ=a("a"),KGr=o("FlaxMBartForConditionalGeneration"),ZGr=o(" (mBART model)"),eOr=l(),j3=a("li"),JCe=a("strong"),oOr=o("mt5"),rOr=o(" \u2014 "),OZ=a("a"),tOr=o("FlaxMT5ForConditionalGeneration"),aOr=o(" (MT5 model)"),nOr=l(),D3=a("li"),YCe=a("strong"),sOr=o("pegasus"),lOr=o(" \u2014 "),VZ=a("a"),iOr=o("FlaxPegasusForConditionalGeneration"),dOr=o(" (Pegasus model)"),cOr=l(),G3=a("li"),KCe=a("strong"),fOr=o("t5"),mOr=o(" \u2014 "),XZ=a("a"),gOr=o("FlaxT5ForConditionalGeneration"),hOr=o(" (T5 model)"),pOr=l(),F(O3.$$.fragment),QOe=l(),rf=a("h2"),V3=a("a"),ZCe=a("span"),F(Hx.$$.fragment),uOr=l(),e5e=a("span"),_Or=o("FlaxAutoModelForSequenceClassification"),HOe=l(),br=a("div"),F(Ux.$$.fragment),bOr=l(),tf=a("p"),vOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zZ=a("a"),FOr=o("from_pretrained()"),TOr=o(" class method or the "),WZ=a("a"),MOr=o("from_config()"),EOr=o(` class
method.`),COr=l(),Jx=a("p"),wOr=o("This class cannot be instantiated directly using "),o5e=a("code"),AOr=o("__init__()"),LOr=o(" (throws an error)."),yOr=l(),Ut=a("div"),F(Yx.$$.fragment),xOr=l(),r5e=a("p"),$Or=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kOr=l(),af=a("p"),SOr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),ROr=o("not"),POr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),BOr=o("from_pretrained()"),IOr=o(" to load the model weights."),NOr=l(),F(X3.$$.fragment),qOr=l(),Wr=a("div"),F(Kx.$$.fragment),jOr=l(),a5e=a("p"),DOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GOr=l(),Cn=a("p"),OOr=o("The model class to instantiate is selected based on the "),n5e=a("code"),VOr=o("model_type"),XOr=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),zOr=o("pretrained_model_name_or_path"),WOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),QOr=o("pretrained_model_name_or_path"),HOr=o(":"),UOr=l(),Se=a("ul"),z3=a("li"),i5e=a("strong"),JOr=o("albert"),YOr=o(" \u2014 "),HZ=a("a"),KOr=o("FlaxAlbertForSequenceClassification"),ZOr=o(" (ALBERT model)"),eVr=l(),W3=a("li"),d5e=a("strong"),oVr=o("bart"),rVr=o(" \u2014 "),UZ=a("a"),tVr=o("FlaxBartForSequenceClassification"),aVr=o(" (BART model)"),nVr=l(),Q3=a("li"),c5e=a("strong"),sVr=o("bert"),lVr=o(" \u2014 "),JZ=a("a"),iVr=o("FlaxBertForSequenceClassification"),dVr=o(" (BERT model)"),cVr=l(),H3=a("li"),f5e=a("strong"),fVr=o("big_bird"),mVr=o(" \u2014 "),YZ=a("a"),gVr=o("FlaxBigBirdForSequenceClassification"),hVr=o(" (BigBird model)"),pVr=l(),U3=a("li"),m5e=a("strong"),uVr=o("distilbert"),_Vr=o(" \u2014 "),KZ=a("a"),bVr=o("FlaxDistilBertForSequenceClassification"),vVr=o(" (DistilBERT model)"),FVr=l(),J3=a("li"),g5e=a("strong"),TVr=o("electra"),MVr=o(" \u2014 "),ZZ=a("a"),EVr=o("FlaxElectraForSequenceClassification"),CVr=o(" (ELECTRA model)"),wVr=l(),Y3=a("li"),h5e=a("strong"),AVr=o("mbart"),LVr=o(" \u2014 "),eee=a("a"),yVr=o("FlaxMBartForSequenceClassification"),xVr=o(" (mBART model)"),$Vr=l(),K3=a("li"),p5e=a("strong"),kVr=o("roberta"),SVr=o(" \u2014 "),oee=a("a"),RVr=o("FlaxRobertaForSequenceClassification"),PVr=o(" (RoBERTa model)"),BVr=l(),Z3=a("li"),u5e=a("strong"),IVr=o("roformer"),NVr=o(" \u2014 "),ree=a("a"),qVr=o("FlaxRoFormerForSequenceClassification"),jVr=o(" (RoFormer model)"),DVr=l(),ew=a("li"),_5e=a("strong"),GVr=o("xlm-roberta"),OVr=o(" \u2014 "),tee=a("a"),VVr=o("FlaxXLMRobertaForSequenceClassification"),XVr=o(" (XLM-RoBERTa model)"),zVr=l(),F(ow.$$.fragment),UOe=l(),nf=a("h2"),rw=a("a"),b5e=a("span"),F(Zx.$$.fragment),WVr=l(),v5e=a("span"),QVr=o("FlaxAutoModelForQuestionAnswering"),JOe=l(),vr=a("div"),F(e$.$$.fragment),HVr=l(),sf=a("p"),UVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aee=a("a"),JVr=o("from_pretrained()"),YVr=o(" class method or the "),nee=a("a"),KVr=o("from_config()"),ZVr=o(` class
method.`),eXr=l(),o$=a("p"),oXr=o("This class cannot be instantiated directly using "),F5e=a("code"),rXr=o("__init__()"),tXr=o(" (throws an error)."),aXr=l(),Jt=a("div"),F(r$.$$.fragment),nXr=l(),T5e=a("p"),sXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lXr=l(),lf=a("p"),iXr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),dXr=o("not"),cXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),fXr=o("from_pretrained()"),mXr=o(" to load the model weights."),gXr=l(),F(tw.$$.fragment),hXr=l(),Qr=a("div"),F(t$.$$.fragment),pXr=l(),E5e=a("p"),uXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Xr=l(),wn=a("p"),bXr=o("The model class to instantiate is selected based on the "),C5e=a("code"),vXr=o("model_type"),FXr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),TXr=o("pretrained_model_name_or_path"),MXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),EXr=o("pretrained_model_name_or_path"),CXr=o(":"),wXr=l(),Re=a("ul"),aw=a("li"),L5e=a("strong"),AXr=o("albert"),LXr=o(" \u2014 "),lee=a("a"),yXr=o("FlaxAlbertForQuestionAnswering"),xXr=o(" (ALBERT model)"),$Xr=l(),nw=a("li"),y5e=a("strong"),kXr=o("bart"),SXr=o(" \u2014 "),iee=a("a"),RXr=o("FlaxBartForQuestionAnswering"),PXr=o(" (BART model)"),BXr=l(),sw=a("li"),x5e=a("strong"),IXr=o("bert"),NXr=o(" \u2014 "),dee=a("a"),qXr=o("FlaxBertForQuestionAnswering"),jXr=o(" (BERT model)"),DXr=l(),lw=a("li"),$5e=a("strong"),GXr=o("big_bird"),OXr=o(" \u2014 "),cee=a("a"),VXr=o("FlaxBigBirdForQuestionAnswering"),XXr=o(" (BigBird model)"),zXr=l(),iw=a("li"),k5e=a("strong"),WXr=o("distilbert"),QXr=o(" \u2014 "),fee=a("a"),HXr=o("FlaxDistilBertForQuestionAnswering"),UXr=o(" (DistilBERT model)"),JXr=l(),dw=a("li"),S5e=a("strong"),YXr=o("electra"),KXr=o(" \u2014 "),mee=a("a"),ZXr=o("FlaxElectraForQuestionAnswering"),ezr=o(" (ELECTRA model)"),ozr=l(),cw=a("li"),R5e=a("strong"),rzr=o("mbart"),tzr=o(" \u2014 "),gee=a("a"),azr=o("FlaxMBartForQuestionAnswering"),nzr=o(" (mBART model)"),szr=l(),fw=a("li"),P5e=a("strong"),lzr=o("roberta"),izr=o(" \u2014 "),hee=a("a"),dzr=o("FlaxRobertaForQuestionAnswering"),czr=o(" (RoBERTa model)"),fzr=l(),mw=a("li"),B5e=a("strong"),mzr=o("roformer"),gzr=o(" \u2014 "),pee=a("a"),hzr=o("FlaxRoFormerForQuestionAnswering"),pzr=o(" (RoFormer model)"),uzr=l(),gw=a("li"),I5e=a("strong"),_zr=o("xlm-roberta"),bzr=o(" \u2014 "),uee=a("a"),vzr=o("FlaxXLMRobertaForQuestionAnswering"),Fzr=o(" (XLM-RoBERTa model)"),Tzr=l(),F(hw.$$.fragment),YOe=l(),df=a("h2"),pw=a("a"),N5e=a("span"),F(a$.$$.fragment),Mzr=l(),q5e=a("span"),Ezr=o("FlaxAutoModelForTokenClassification"),KOe=l(),Fr=a("div"),F(n$.$$.fragment),Czr=l(),cf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_ee=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),bee=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),s$=a("p"),kzr=o("This class cannot be instantiated directly using "),j5e=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Yt=a("div"),F(l$.$$.fragment),Bzr=l(),D5e=a("p"),Izr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nzr=l(),ff=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(uw.$$.fragment),Xzr=l(),Hr=a("div"),F(i$.$$.fragment),zzr=l(),O5e=a("p"),Wzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qzr=l(),An=a("p"),Hzr=o("The model class to instantiate is selected based on the "),V5e=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),Zzr=o("pretrained_model_name_or_path"),eWr=o(":"),oWr=l(),Ve=a("ul"),_w=a("li"),W5e=a("strong"),rWr=o("albert"),tWr=o(" \u2014 "),Fee=a("a"),aWr=o("FlaxAlbertForTokenClassification"),nWr=o(" (ALBERT model)"),sWr=l(),bw=a("li"),Q5e=a("strong"),lWr=o("bert"),iWr=o(" \u2014 "),Tee=a("a"),dWr=o("FlaxBertForTokenClassification"),cWr=o(" (BERT model)"),fWr=l(),vw=a("li"),H5e=a("strong"),mWr=o("big_bird"),gWr=o(" \u2014 "),Mee=a("a"),hWr=o("FlaxBigBirdForTokenClassification"),pWr=o(" (BigBird model)"),uWr=l(),Fw=a("li"),U5e=a("strong"),_Wr=o("distilbert"),bWr=o(" \u2014 "),Eee=a("a"),vWr=o("FlaxDistilBertForTokenClassification"),FWr=o(" (DistilBERT model)"),TWr=l(),Tw=a("li"),J5e=a("strong"),MWr=o("electra"),EWr=o(" \u2014 "),Cee=a("a"),CWr=o("FlaxElectraForTokenClassification"),wWr=o(" (ELECTRA model)"),AWr=l(),Mw=a("li"),Y5e=a("strong"),LWr=o("roberta"),yWr=o(" \u2014 "),wee=a("a"),xWr=o("FlaxRobertaForTokenClassification"),$Wr=o(" (RoBERTa model)"),kWr=l(),Ew=a("li"),K5e=a("strong"),SWr=o("roformer"),RWr=o(" \u2014 "),Aee=a("a"),PWr=o("FlaxRoFormerForTokenClassification"),BWr=o(" (RoFormer model)"),IWr=l(),Cw=a("li"),Z5e=a("strong"),NWr=o("xlm-roberta"),qWr=o(" \u2014 "),Lee=a("a"),jWr=o("FlaxXLMRobertaForTokenClassification"),DWr=o(" (XLM-RoBERTa model)"),GWr=l(),F(ww.$$.fragment),ZOe=l(),mf=a("h2"),Aw=a("a"),e3e=a("span"),F(d$.$$.fragment),OWr=l(),o3e=a("span"),VWr=o("FlaxAutoModelForMultipleChoice"),eVe=l(),Tr=a("div"),F(c$.$$.fragment),XWr=l(),gf=a("p"),zWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yee=a("a"),WWr=o("from_pretrained()"),QWr=o(" class method or the "),xee=a("a"),HWr=o("from_config()"),UWr=o(` class
method.`),JWr=l(),f$=a("p"),YWr=o("This class cannot be instantiated directly using "),r3e=a("code"),KWr=o("__init__()"),ZWr=o(" (throws an error)."),eQr=l(),Kt=a("div"),F(m$.$$.fragment),oQr=l(),t3e=a("p"),rQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tQr=l(),hf=a("p"),aQr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),nQr=o("not"),sQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("a"),lQr=o("from_pretrained()"),iQr=o(" to load the model weights."),dQr=l(),F(Lw.$$.fragment),cQr=l(),Ur=a("div"),F(g$.$$.fragment),fQr=l(),n3e=a("p"),mQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gQr=l(),Ln=a("p"),hQr=o("The model class to instantiate is selected based on the "),s3e=a("code"),pQr=o("model_type"),uQr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),_Qr=o("pretrained_model_name_or_path"),bQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),vQr=o("pretrained_model_name_or_path"),FQr=o(":"),TQr=l(),Xe=a("ul"),yw=a("li"),d3e=a("strong"),MQr=o("albert"),EQr=o(" \u2014 "),kee=a("a"),CQr=o("FlaxAlbertForMultipleChoice"),wQr=o(" (ALBERT model)"),AQr=l(),xw=a("li"),c3e=a("strong"),LQr=o("bert"),yQr=o(" \u2014 "),See=a("a"),xQr=o("FlaxBertForMultipleChoice"),$Qr=o(" (BERT model)"),kQr=l(),$w=a("li"),f3e=a("strong"),SQr=o("big_bird"),RQr=o(" \u2014 "),Ree=a("a"),PQr=o("FlaxBigBirdForMultipleChoice"),BQr=o(" (BigBird model)"),IQr=l(),kw=a("li"),m3e=a("strong"),NQr=o("distilbert"),qQr=o(" \u2014 "),Pee=a("a"),jQr=o("FlaxDistilBertForMultipleChoice"),DQr=o(" (DistilBERT model)"),GQr=l(),Sw=a("li"),g3e=a("strong"),OQr=o("electra"),VQr=o(" \u2014 "),Bee=a("a"),XQr=o("FlaxElectraForMultipleChoice"),zQr=o(" (ELECTRA model)"),WQr=l(),Rw=a("li"),h3e=a("strong"),QQr=o("roberta"),HQr=o(" \u2014 "),Iee=a("a"),UQr=o("FlaxRobertaForMultipleChoice"),JQr=o(" (RoBERTa model)"),YQr=l(),Pw=a("li"),p3e=a("strong"),KQr=o("roformer"),ZQr=o(" \u2014 "),Nee=a("a"),eHr=o("FlaxRoFormerForMultipleChoice"),oHr=o(" (RoFormer model)"),rHr=l(),Bw=a("li"),u3e=a("strong"),tHr=o("xlm-roberta"),aHr=o(" \u2014 "),qee=a("a"),nHr=o("FlaxXLMRobertaForMultipleChoice"),sHr=o(" (XLM-RoBERTa model)"),lHr=l(),F(Iw.$$.fragment),oVe=l(),pf=a("h2"),Nw=a("a"),_3e=a("span"),F(h$.$$.fragment),iHr=l(),b3e=a("span"),dHr=o("FlaxAutoModelForNextSentencePrediction"),rVe=l(),Mr=a("div"),F(p$.$$.fragment),cHr=l(),uf=a("p"),fHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jee=a("a"),mHr=o("from_pretrained()"),gHr=o(" class method or the "),Dee=a("a"),hHr=o("from_config()"),pHr=o(` class
method.`),uHr=l(),u$=a("p"),_Hr=o("This class cannot be instantiated directly using "),v3e=a("code"),bHr=o("__init__()"),vHr=o(" (throws an error)."),FHr=l(),Zt=a("div"),F(_$.$$.fragment),THr=l(),F3e=a("p"),MHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EHr=l(),_f=a("p"),CHr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),wHr=o("not"),AHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=a("a"),LHr=o("from_pretrained()"),yHr=o(" to load the model weights."),xHr=l(),F(qw.$$.fragment),$Hr=l(),Jr=a("div"),F(b$.$$.fragment),kHr=l(),M3e=a("p"),SHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RHr=l(),yn=a("p"),PHr=o("The model class to instantiate is selected based on the "),E3e=a("code"),BHr=o("model_type"),IHr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),NHr=o("pretrained_model_name_or_path"),qHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),jHr=o("pretrained_model_name_or_path"),DHr=o(":"),GHr=l(),A3e=a("ul"),jw=a("li"),L3e=a("strong"),OHr=o("bert"),VHr=o(" \u2014 "),Oee=a("a"),XHr=o("FlaxBertForNextSentencePrediction"),zHr=o(" (BERT model)"),WHr=l(),F(Dw.$$.fragment),tVe=l(),bf=a("h2"),Gw=a("a"),y3e=a("span"),F(v$.$$.fragment),QHr=l(),x3e=a("span"),HHr=o("FlaxAutoModelForImageClassification"),aVe=l(),Er=a("div"),F(F$.$$.fragment),UHr=l(),vf=a("p"),JHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vee=a("a"),YHr=o("from_pretrained()"),KHr=o(" class method or the "),Xee=a("a"),ZHr=o("from_config()"),eUr=o(` class
method.`),oUr=l(),T$=a("p"),rUr=o("This class cannot be instantiated directly using "),$3e=a("code"),tUr=o("__init__()"),aUr=o(" (throws an error)."),nUr=l(),ea=a("div"),F(M$.$$.fragment),sUr=l(),k3e=a("p"),lUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iUr=l(),Ff=a("p"),dUr=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),cUr=o("not"),fUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),mUr=o("from_pretrained()"),gUr=o(" to load the model weights."),hUr=l(),F(Ow.$$.fragment),pUr=l(),Yr=a("div"),F(E$.$$.fragment),uUr=l(),R3e=a("p"),_Ur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bUr=l(),xn=a("p"),vUr=o("The model class to instantiate is selected based on the "),P3e=a("code"),FUr=o("model_type"),TUr=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),MUr=o("pretrained_model_name_or_path"),EUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(":"),AUr=l(),C$=a("ul"),Vw=a("li"),N3e=a("strong"),LUr=o("beit"),yUr=o(" \u2014 "),Wee=a("a"),xUr=o("FlaxBeitForImageClassification"),$Ur=o(" (BEiT model)"),kUr=l(),Xw=a("li"),q3e=a("strong"),SUr=o("vit"),RUr=o(" \u2014 "),Qee=a("a"),PUr=o("FlaxViTForImageClassification"),BUr=o(" (ViT model)"),IUr=l(),F(zw.$$.fragment),nVe=l(),Tf=a("h2"),Ww=a("a"),j3e=a("span"),F(w$.$$.fragment),NUr=l(),D3e=a("span"),qUr=o("FlaxAutoModelForVision2Seq"),sVe=l(),Cr=a("div"),F(A$.$$.fragment),jUr=l(),Mf=a("p"),DUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hee=a("a"),GUr=o("from_pretrained()"),OUr=o(" class method or the "),Uee=a("a"),VUr=o("from_config()"),XUr=o(` class
method.`),zUr=l(),L$=a("p"),WUr=o("This class cannot be instantiated directly using "),G3e=a("code"),QUr=o("__init__()"),HUr=o(" (throws an error)."),UUr=l(),oa=a("div"),F(y$.$$.fragment),JUr=l(),O3e=a("p"),YUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KUr=l(),Ef=a("p"),ZUr=o(`Note:
Loading a model from its configuration file does `),V3e=a("strong"),eJr=o("not"),oJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=a("a"),rJr=o("from_pretrained()"),tJr=o(" to load the model weights."),aJr=l(),F(Qw.$$.fragment),nJr=l(),Kr=a("div"),F(x$.$$.fragment),sJr=l(),X3e=a("p"),lJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iJr=l(),$n=a("p"),dJr=o("The model class to instantiate is selected based on the "),z3e=a("code"),cJr=o("model_type"),fJr=o(` property of the config object (either
passed as an argument or loaded from `),W3e=a("code"),mJr=o("pretrained_model_name_or_path"),gJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),hJr=o("pretrained_model_name_or_path"),pJr=o(":"),uJr=l(),H3e=a("ul"),Hw=a("li"),U3e=a("strong"),_Jr=o("vision-encoder-decoder"),bJr=o(" \u2014 "),Yee=a("a"),vJr=o("FlaxVisionEncoderDecoderModel"),FJr=o(" (Vision Encoder decoder model)"),TJr=l(),F(Uw.$$.fragment),this.h()},l(f){const _=Lqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var $$=s(p);m=n($$,"A",{id:!0,class:!0,href:!0});var J3e=s(m);u=n(J3e,"SPAN",{});var Y3e=s(u);T(d.$$.fragment,Y3e),Y3e.forEach(t),J3e.forEach(t),h=i($$),Eo=n($$,"SPAN",{});var K3e=s(Eo);Fi=r(K3e,"Auto Classes"),K3e.forEach(t),$$.forEach(t),Lf=i(f),at=n(f,"P",{});var k$=s(at);Ti=r(k$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(k$,"CODE",{});var Z3e=s(Mi);uL=r(Z3e,"from_pretrained()"),Z3e.forEach(t),yf=r(k$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),k$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var ewe=s(Sn);_L=r(ewe,"AutoConfig"),ewe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var owe=s(Pn);bL=r(owe,"AutoModel"),owe.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var rwe=s(Bn);vL=r(rwe,"AutoTokenizer"),rwe.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var S$=s(Ae);Wk=r(S$,"will create a model that is an instance of "),Ai=n(S$,"A",{href:!0});var twe=s(Ai);Qk=r(twe,"BertModel"),twe.forEach(t),Hk=r(S$,"."),S$.forEach(t),Co=i(f),xa=n(f,"P",{});var R$=s(xa);Uk=r(R$,"There is one class of "),$f=n(R$,"CODE",{});var awe=s($f);Jk=r(awe,"AutoModel"),awe.forEach(t),_ze=r(R$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),R$.forEach(t),rGe=i(f),Li=n(f,"H2",{class:!0});var P$=s(Li);kf=n(P$,"A",{id:!0,class:!0,href:!0});var nwe=s(kf);Wre=n(nwe,"SPAN",{});var swe=s(Wre);T(FL.$$.fragment,swe),swe.forEach(t),nwe.forEach(t),bze=i(P$),Qre=n(P$,"SPAN",{});var lwe=s(Qre);vze=r(lwe,"Extending the Auto Classes"),lwe.forEach(t),P$.forEach(t),tGe=i(f),In=n(f,"P",{});var Cf=s(In);Fze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Hre=n(Cf,"CODE",{});var iwe=s(Hre);Tze=r(iwe,"NewModel"),iwe.forEach(t),Mze=r(Cf,", make sure you have a "),Ure=n(Cf,"CODE",{});var dwe=s(Ure);Eze=r(dwe,"NewModelConfig"),dwe.forEach(t),Cze=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),aGe=i(f),T(TL.$$.fragment,f),nGe=i(f),Yk=n(f,"P",{});var cwe=s(Yk);wze=r(cwe,"You will then be able to use the auto classes like you would usually do!"),cwe.forEach(t),sGe=i(f),T(Sf.$$.fragment,f),lGe=i(f),yi=n(f,"H2",{class:!0});var B$=s(yi);Rf=n(B$,"A",{id:!0,class:!0,href:!0});var fwe=s(Rf);Jre=n(fwe,"SPAN",{});var mwe=s(Jre);T(ML.$$.fragment,mwe),mwe.forEach(t),fwe.forEach(t),Aze=i(B$),Yre=n(B$,"SPAN",{});var gwe=s(Yre);Lze=r(gwe,"AutoConfig"),gwe.forEach(t),B$.forEach(t),iGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(EL.$$.fragment,rt),yze=i(rt),CL=n(rt,"P",{});var I$=s(CL);xze=r(I$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Kk=n(I$,"A",{href:!0});var hwe=s(Kk);$ze=r(hwe,"from_pretrained()"),hwe.forEach(t),kze=r(I$," class method."),I$.forEach(t),Sze=i(rt),wL=n(rt,"P",{});var N$=s(wL);Rze=r(N$,"This class cannot be instantiated directly using "),Kre=n(N$,"CODE",{});var pwe=s(Kre);Pze=r(pwe,"__init__()"),pwe.forEach(t),Bze=r(N$," (throws an error)."),N$.forEach(t),Ize=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(AL.$$.fragment,tt),Nze=i(tt),Zre=n(tt,"P",{});var uwe=s(Zre);qze=r(uwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),uwe.forEach(t),jze=i(tt),xi=n(tt,"P",{});var wf=s(xi);Dze=r(wf,"The configuration class to instantiate is selected based on the "),ete=n(wf,"CODE",{});var _we=s(ete);Gze=r(_we,"model_type"),_we.forEach(t),Oze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ote=n(wf,"CODE",{});var bwe=s(ote);Vze=r(bwe,"pretrained_model_name_or_path"),bwe.forEach(t),Xze=r(wf,":"),wf.forEach(t),zze=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var Jw=s(Pf);rte=n(Jw,"STRONG",{});var vwe=s(rte);Wze=r(vwe,"albert"),vwe.forEach(t),Qze=r(Jw," \u2014 "),Zk=n(Jw,"A",{href:!0});var Fwe=s(Zk);Hze=r(Fwe,"AlbertConfig"),Fwe.forEach(t),Uze=r(Jw," (ALBERT model)"),Jw.forEach(t),Jze=i(L),Bf=n(L,"LI",{});var Yw=s(Bf);tte=n(Yw,"STRONG",{});var Twe=s(tte);Yze=r(Twe,"bart"),Twe.forEach(t),Kze=r(Yw," \u2014 "),eS=n(Yw,"A",{href:!0});var Mwe=s(eS);Zze=r(Mwe,"BartConfig"),Mwe.forEach(t),eWe=r(Yw," (BART model)"),Yw.forEach(t),oWe=i(L),If=n(L,"LI",{});var Kw=s(If);ate=n(Kw,"STRONG",{});var Ewe=s(ate);rWe=r(Ewe,"beit"),Ewe.forEach(t),tWe=r(Kw," \u2014 "),oS=n(Kw,"A",{href:!0});var Cwe=s(oS);aWe=r(Cwe,"BeitConfig"),Cwe.forEach(t),nWe=r(Kw," (BEiT model)"),Kw.forEach(t),sWe=i(L),Nf=n(L,"LI",{});var Zw=s(Nf);nte=n(Zw,"STRONG",{});var wwe=s(nte);lWe=r(wwe,"bert"),wwe.forEach(t),iWe=r(Zw," \u2014 "),rS=n(Zw,"A",{href:!0});var Awe=s(rS);dWe=r(Awe,"BertConfig"),Awe.forEach(t),cWe=r(Zw," (BERT model)"),Zw.forEach(t),fWe=i(L),qf=n(L,"LI",{});var eA=s(qf);ste=n(eA,"STRONG",{});var Lwe=s(ste);mWe=r(Lwe,"bert-generation"),Lwe.forEach(t),gWe=r(eA," \u2014 "),tS=n(eA,"A",{href:!0});var ywe=s(tS);hWe=r(ywe,"BertGenerationConfig"),ywe.forEach(t),pWe=r(eA," (Bert Generation model)"),eA.forEach(t),uWe=i(L),jf=n(L,"LI",{});var oA=s(jf);lte=n(oA,"STRONG",{});var xwe=s(lte);_We=r(xwe,"big_bird"),xwe.forEach(t),bWe=r(oA," \u2014 "),aS=n(oA,"A",{href:!0});var $we=s(aS);vWe=r($we,"BigBirdConfig"),$we.forEach(t),FWe=r(oA," (BigBird model)"),oA.forEach(t),TWe=i(L),Df=n(L,"LI",{});var rA=s(Df);ite=n(rA,"STRONG",{});var kwe=s(ite);MWe=r(kwe,"bigbird_pegasus"),kwe.forEach(t),EWe=r(rA," \u2014 "),nS=n(rA,"A",{href:!0});var Swe=s(nS);CWe=r(Swe,"BigBirdPegasusConfig"),Swe.forEach(t),wWe=r(rA," (BigBird-Pegasus model)"),rA.forEach(t),AWe=i(L),Gf=n(L,"LI",{});var tA=s(Gf);dte=n(tA,"STRONG",{});var Rwe=s(dte);LWe=r(Rwe,"blenderbot"),Rwe.forEach(t),yWe=r(tA," \u2014 "),sS=n(tA,"A",{href:!0});var Pwe=s(sS);xWe=r(Pwe,"BlenderbotConfig"),Pwe.forEach(t),$We=r(tA," (Blenderbot model)"),tA.forEach(t),kWe=i(L),Of=n(L,"LI",{});var aA=s(Of);cte=n(aA,"STRONG",{});var Bwe=s(cte);SWe=r(Bwe,"blenderbot-small"),Bwe.forEach(t),RWe=r(aA," \u2014 "),lS=n(aA,"A",{href:!0});var Iwe=s(lS);PWe=r(Iwe,"BlenderbotSmallConfig"),Iwe.forEach(t),BWe=r(aA," (BlenderbotSmall model)"),aA.forEach(t),IWe=i(L),Vf=n(L,"LI",{});var nA=s(Vf);fte=n(nA,"STRONG",{});var Nwe=s(fte);NWe=r(Nwe,"bloom"),Nwe.forEach(t),qWe=r(nA," \u2014 "),iS=n(nA,"A",{href:!0});var qwe=s(iS);jWe=r(qwe,"BloomConfig"),qwe.forEach(t),DWe=r(nA," (BLOOM model)"),nA.forEach(t),GWe=i(L),Xf=n(L,"LI",{});var sA=s(Xf);mte=n(sA,"STRONG",{});var jwe=s(mte);OWe=r(jwe,"camembert"),jwe.forEach(t),VWe=r(sA," \u2014 "),dS=n(sA,"A",{href:!0});var Dwe=s(dS);XWe=r(Dwe,"CamembertConfig"),Dwe.forEach(t),zWe=r(sA," (CamemBERT model)"),sA.forEach(t),WWe=i(L),zf=n(L,"LI",{});var lA=s(zf);gte=n(lA,"STRONG",{});var Gwe=s(gte);QWe=r(Gwe,"canine"),Gwe.forEach(t),HWe=r(lA," \u2014 "),cS=n(lA,"A",{href:!0});var Owe=s(cS);UWe=r(Owe,"CanineConfig"),Owe.forEach(t),JWe=r(lA," (CANINE model)"),lA.forEach(t),YWe=i(L),Wf=n(L,"LI",{});var iA=s(Wf);hte=n(iA,"STRONG",{});var Vwe=s(hte);KWe=r(Vwe,"clip"),Vwe.forEach(t),ZWe=r(iA," \u2014 "),fS=n(iA,"A",{href:!0});var Xwe=s(fS);eQe=r(Xwe,"CLIPConfig"),Xwe.forEach(t),oQe=r(iA," (CLIP model)"),iA.forEach(t),rQe=i(L),Qf=n(L,"LI",{});var dA=s(Qf);pte=n(dA,"STRONG",{});var zwe=s(pte);tQe=r(zwe,"convbert"),zwe.forEach(t),aQe=r(dA," \u2014 "),mS=n(dA,"A",{href:!0});var Wwe=s(mS);nQe=r(Wwe,"ConvBertConfig"),Wwe.forEach(t),sQe=r(dA," (ConvBERT model)"),dA.forEach(t),lQe=i(L),Hf=n(L,"LI",{});var cA=s(Hf);ute=n(cA,"STRONG",{});var Qwe=s(ute);iQe=r(Qwe,"convnext"),Qwe.forEach(t),dQe=r(cA," \u2014 "),gS=n(cA,"A",{href:!0});var Hwe=s(gS);cQe=r(Hwe,"ConvNextConfig"),Hwe.forEach(t),fQe=r(cA," (ConvNeXT model)"),cA.forEach(t),mQe=i(L),Uf=n(L,"LI",{});var fA=s(Uf);_te=n(fA,"STRONG",{});var Uwe=s(_te);gQe=r(Uwe,"ctrl"),Uwe.forEach(t),hQe=r(fA," \u2014 "),hS=n(fA,"A",{href:!0});var Jwe=s(hS);pQe=r(Jwe,"CTRLConfig"),Jwe.forEach(t),uQe=r(fA," (CTRL model)"),fA.forEach(t),_Qe=i(L),Jf=n(L,"LI",{});var mA=s(Jf);bte=n(mA,"STRONG",{});var Ywe=s(bte);bQe=r(Ywe,"cvt"),Ywe.forEach(t),vQe=r(mA," \u2014 "),pS=n(mA,"A",{href:!0});var Kwe=s(pS);FQe=r(Kwe,"CvtConfig"),Kwe.forEach(t),TQe=r(mA," (CvT model)"),mA.forEach(t),MQe=i(L),Yf=n(L,"LI",{});var gA=s(Yf);vte=n(gA,"STRONG",{});var Zwe=s(vte);EQe=r(Zwe,"data2vec-audio"),Zwe.forEach(t),CQe=r(gA," \u2014 "),uS=n(gA,"A",{href:!0});var eAe=s(uS);wQe=r(eAe,"Data2VecAudioConfig"),eAe.forEach(t),AQe=r(gA," (Data2VecAudio model)"),gA.forEach(t),LQe=i(L),Kf=n(L,"LI",{});var hA=s(Kf);Fte=n(hA,"STRONG",{});var oAe=s(Fte);yQe=r(oAe,"data2vec-text"),oAe.forEach(t),xQe=r(hA," \u2014 "),_S=n(hA,"A",{href:!0});var rAe=s(_S);$Qe=r(rAe,"Data2VecTextConfig"),rAe.forEach(t),kQe=r(hA," (Data2VecText model)"),hA.forEach(t),SQe=i(L),Zf=n(L,"LI",{});var pA=s(Zf);Tte=n(pA,"STRONG",{});var tAe=s(Tte);RQe=r(tAe,"data2vec-vision"),tAe.forEach(t),PQe=r(pA," \u2014 "),bS=n(pA,"A",{href:!0});var aAe=s(bS);BQe=r(aAe,"Data2VecVisionConfig"),aAe.forEach(t),IQe=r(pA," (Data2VecVision model)"),pA.forEach(t),NQe=i(L),em=n(L,"LI",{});var uA=s(em);Mte=n(uA,"STRONG",{});var nAe=s(Mte);qQe=r(nAe,"deberta"),nAe.forEach(t),jQe=r(uA," \u2014 "),vS=n(uA,"A",{href:!0});var sAe=s(vS);DQe=r(sAe,"DebertaConfig"),sAe.forEach(t),GQe=r(uA," (DeBERTa model)"),uA.forEach(t),OQe=i(L),om=n(L,"LI",{});var _A=s(om);Ete=n(_A,"STRONG",{});var lAe=s(Ete);VQe=r(lAe,"deberta-v2"),lAe.forEach(t),XQe=r(_A," \u2014 "),FS=n(_A,"A",{href:!0});var iAe=s(FS);zQe=r(iAe,"DebertaV2Config"),iAe.forEach(t),WQe=r(_A," (DeBERTa-v2 model)"),_A.forEach(t),QQe=i(L),rm=n(L,"LI",{});var bA=s(rm);Cte=n(bA,"STRONG",{});var dAe=s(Cte);HQe=r(dAe,"decision_transformer"),dAe.forEach(t),UQe=r(bA," \u2014 "),TS=n(bA,"A",{href:!0});var cAe=s(TS);JQe=r(cAe,"DecisionTransformerConfig"),cAe.forEach(t),YQe=r(bA," (Decision Transformer model)"),bA.forEach(t),KQe=i(L),tm=n(L,"LI",{});var vA=s(tm);wte=n(vA,"STRONG",{});var EJr=s(wte);ZQe=r(EJr,"deit"),EJr.forEach(t),eHe=r(vA," \u2014 "),MS=n(vA,"A",{href:!0});var CJr=s(MS);oHe=r(CJr,"DeiTConfig"),CJr.forEach(t),rHe=r(vA," (DeiT model)"),vA.forEach(t),tHe=i(L),am=n(L,"LI",{});var fAe=s(am);Ate=n(fAe,"STRONG",{});var wJr=s(Ate);aHe=r(wJr,"detr"),wJr.forEach(t),nHe=r(fAe," \u2014 "),ES=n(fAe,"A",{href:!0});var AJr=s(ES);sHe=r(AJr,"DetrConfig"),AJr.forEach(t),lHe=r(fAe," (DETR model)"),fAe.forEach(t),iHe=i(L),nm=n(L,"LI",{});var mAe=s(nm);Lte=n(mAe,"STRONG",{});var LJr=s(Lte);dHe=r(LJr,"distilbert"),LJr.forEach(t),cHe=r(mAe," \u2014 "),CS=n(mAe,"A",{href:!0});var yJr=s(CS);fHe=r(yJr,"DistilBertConfig"),yJr.forEach(t),mHe=r(mAe," (DistilBERT model)"),mAe.forEach(t),gHe=i(L),sm=n(L,"LI",{});var gAe=s(sm);yte=n(gAe,"STRONG",{});var xJr=s(yte);hHe=r(xJr,"dpr"),xJr.forEach(t),pHe=r(gAe," \u2014 "),wS=n(gAe,"A",{href:!0});var $Jr=s(wS);uHe=r($Jr,"DPRConfig"),$Jr.forEach(t),_He=r(gAe," (DPR model)"),gAe.forEach(t),bHe=i(L),lm=n(L,"LI",{});var hAe=s(lm);xte=n(hAe,"STRONG",{});var kJr=s(xte);vHe=r(kJr,"dpt"),kJr.forEach(t),FHe=r(hAe," \u2014 "),AS=n(hAe,"A",{href:!0});var SJr=s(AS);THe=r(SJr,"DPTConfig"),SJr.forEach(t),MHe=r(hAe," (DPT model)"),hAe.forEach(t),EHe=i(L),im=n(L,"LI",{});var pAe=s(im);$te=n(pAe,"STRONG",{});var RJr=s($te);CHe=r(RJr,"electra"),RJr.forEach(t),wHe=r(pAe," \u2014 "),LS=n(pAe,"A",{href:!0});var PJr=s(LS);AHe=r(PJr,"ElectraConfig"),PJr.forEach(t),LHe=r(pAe," (ELECTRA model)"),pAe.forEach(t),yHe=i(L),dm=n(L,"LI",{});var uAe=s(dm);kte=n(uAe,"STRONG",{});var BJr=s(kte);xHe=r(BJr,"encoder-decoder"),BJr.forEach(t),$He=r(uAe," \u2014 "),yS=n(uAe,"A",{href:!0});var IJr=s(yS);kHe=r(IJr,"EncoderDecoderConfig"),IJr.forEach(t),SHe=r(uAe," (Encoder decoder model)"),uAe.forEach(t),RHe=i(L),cm=n(L,"LI",{});var _Ae=s(cm);Ste=n(_Ae,"STRONG",{});var NJr=s(Ste);PHe=r(NJr,"flaubert"),NJr.forEach(t),BHe=r(_Ae," \u2014 "),xS=n(_Ae,"A",{href:!0});var qJr=s(xS);IHe=r(qJr,"FlaubertConfig"),qJr.forEach(t),NHe=r(_Ae," (FlauBERT model)"),_Ae.forEach(t),qHe=i(L),fm=n(L,"LI",{});var bAe=s(fm);Rte=n(bAe,"STRONG",{});var jJr=s(Rte);jHe=r(jJr,"flava"),jJr.forEach(t),DHe=r(bAe," \u2014 "),$S=n(bAe,"A",{href:!0});var DJr=s($S);GHe=r(DJr,"FlavaConfig"),DJr.forEach(t),OHe=r(bAe," (FLAVA model)"),bAe.forEach(t),VHe=i(L),mm=n(L,"LI",{});var vAe=s(mm);Pte=n(vAe,"STRONG",{});var GJr=s(Pte);XHe=r(GJr,"fnet"),GJr.forEach(t),zHe=r(vAe," \u2014 "),kS=n(vAe,"A",{href:!0});var OJr=s(kS);WHe=r(OJr,"FNetConfig"),OJr.forEach(t),QHe=r(vAe," (FNet model)"),vAe.forEach(t),HHe=i(L),gm=n(L,"LI",{});var FAe=s(gm);Bte=n(FAe,"STRONG",{});var VJr=s(Bte);UHe=r(VJr,"fsmt"),VJr.forEach(t),JHe=r(FAe," \u2014 "),SS=n(FAe,"A",{href:!0});var XJr=s(SS);YHe=r(XJr,"FSMTConfig"),XJr.forEach(t),KHe=r(FAe," (FairSeq Machine-Translation model)"),FAe.forEach(t),ZHe=i(L),hm=n(L,"LI",{});var TAe=s(hm);Ite=n(TAe,"STRONG",{});var zJr=s(Ite);eUe=r(zJr,"funnel"),zJr.forEach(t),oUe=r(TAe," \u2014 "),RS=n(TAe,"A",{href:!0});var WJr=s(RS);rUe=r(WJr,"FunnelConfig"),WJr.forEach(t),tUe=r(TAe," (Funnel Transformer model)"),TAe.forEach(t),aUe=i(L),pm=n(L,"LI",{});var MAe=s(pm);Nte=n(MAe,"STRONG",{});var QJr=s(Nte);nUe=r(QJr,"glpn"),QJr.forEach(t),sUe=r(MAe," \u2014 "),PS=n(MAe,"A",{href:!0});var HJr=s(PS);lUe=r(HJr,"GLPNConfig"),HJr.forEach(t),iUe=r(MAe," (GLPN model)"),MAe.forEach(t),dUe=i(L),um=n(L,"LI",{});var EAe=s(um);qte=n(EAe,"STRONG",{});var UJr=s(qte);cUe=r(UJr,"gpt2"),UJr.forEach(t),fUe=r(EAe," \u2014 "),BS=n(EAe,"A",{href:!0});var JJr=s(BS);mUe=r(JJr,"GPT2Config"),JJr.forEach(t),gUe=r(EAe," (OpenAI GPT-2 model)"),EAe.forEach(t),hUe=i(L),_m=n(L,"LI",{});var CAe=s(_m);jte=n(CAe,"STRONG",{});var YJr=s(jte);pUe=r(YJr,"gpt_neo"),YJr.forEach(t),uUe=r(CAe," \u2014 "),IS=n(CAe,"A",{href:!0});var KJr=s(IS);_Ue=r(KJr,"GPTNeoConfig"),KJr.forEach(t),bUe=r(CAe," (GPT Neo model)"),CAe.forEach(t),vUe=i(L),bm=n(L,"LI",{});var wAe=s(bm);Dte=n(wAe,"STRONG",{});var ZJr=s(Dte);FUe=r(ZJr,"gpt_neox"),ZJr.forEach(t),TUe=r(wAe," \u2014 "),NS=n(wAe,"A",{href:!0});var eYr=s(NS);MUe=r(eYr,"GPTNeoXConfig"),eYr.forEach(t),EUe=r(wAe," (GPT NeoX model)"),wAe.forEach(t),CUe=i(L),vm=n(L,"LI",{});var AAe=s(vm);Gte=n(AAe,"STRONG",{});var oYr=s(Gte);wUe=r(oYr,"gptj"),oYr.forEach(t),AUe=r(AAe," \u2014 "),qS=n(AAe,"A",{href:!0});var rYr=s(qS);LUe=r(rYr,"GPTJConfig"),rYr.forEach(t),yUe=r(AAe," (GPT-J model)"),AAe.forEach(t),xUe=i(L),Fm=n(L,"LI",{});var LAe=s(Fm);Ote=n(LAe,"STRONG",{});var tYr=s(Ote);$Ue=r(tYr,"hubert"),tYr.forEach(t),kUe=r(LAe," \u2014 "),jS=n(LAe,"A",{href:!0});var aYr=s(jS);SUe=r(aYr,"HubertConfig"),aYr.forEach(t),RUe=r(LAe," (Hubert model)"),LAe.forEach(t),PUe=i(L),Tm=n(L,"LI",{});var yAe=s(Tm);Vte=n(yAe,"STRONG",{});var nYr=s(Vte);BUe=r(nYr,"ibert"),nYr.forEach(t),IUe=r(yAe," \u2014 "),DS=n(yAe,"A",{href:!0});var sYr=s(DS);NUe=r(sYr,"IBertConfig"),sYr.forEach(t),qUe=r(yAe," (I-BERT model)"),yAe.forEach(t),jUe=i(L),Mm=n(L,"LI",{});var xAe=s(Mm);Xte=n(xAe,"STRONG",{});var lYr=s(Xte);DUe=r(lYr,"imagegpt"),lYr.forEach(t),GUe=r(xAe," \u2014 "),GS=n(xAe,"A",{href:!0});var iYr=s(GS);OUe=r(iYr,"ImageGPTConfig"),iYr.forEach(t),VUe=r(xAe," (ImageGPT model)"),xAe.forEach(t),XUe=i(L),Em=n(L,"LI",{});var $Ae=s(Em);zte=n($Ae,"STRONG",{});var dYr=s(zte);zUe=r(dYr,"layoutlm"),dYr.forEach(t),WUe=r($Ae," \u2014 "),OS=n($Ae,"A",{href:!0});var cYr=s(OS);QUe=r(cYr,"LayoutLMConfig"),cYr.forEach(t),HUe=r($Ae," (LayoutLM model)"),$Ae.forEach(t),UUe=i(L),Cm=n(L,"LI",{});var kAe=s(Cm);Wte=n(kAe,"STRONG",{});var fYr=s(Wte);JUe=r(fYr,"layoutlmv2"),fYr.forEach(t),YUe=r(kAe," \u2014 "),VS=n(kAe,"A",{href:!0});var mYr=s(VS);KUe=r(mYr,"LayoutLMv2Config"),mYr.forEach(t),ZUe=r(kAe," (LayoutLMv2 model)"),kAe.forEach(t),eJe=i(L),wm=n(L,"LI",{});var SAe=s(wm);Qte=n(SAe,"STRONG",{});var gYr=s(Qte);oJe=r(gYr,"layoutlmv3"),gYr.forEach(t),rJe=r(SAe," \u2014 "),XS=n(SAe,"A",{href:!0});var hYr=s(XS);tJe=r(hYr,"LayoutLMv3Config"),hYr.forEach(t),aJe=r(SAe," (LayoutLMv3 model)"),SAe.forEach(t),nJe=i(L),Am=n(L,"LI",{});var RAe=s(Am);Hte=n(RAe,"STRONG",{});var pYr=s(Hte);sJe=r(pYr,"led"),pYr.forEach(t),lJe=r(RAe," \u2014 "),zS=n(RAe,"A",{href:!0});var uYr=s(zS);iJe=r(uYr,"LEDConfig"),uYr.forEach(t),dJe=r(RAe," (LED model)"),RAe.forEach(t),cJe=i(L),Lm=n(L,"LI",{});var PAe=s(Lm);Ute=n(PAe,"STRONG",{});var _Yr=s(Ute);fJe=r(_Yr,"levit"),_Yr.forEach(t),mJe=r(PAe," \u2014 "),WS=n(PAe,"A",{href:!0});var bYr=s(WS);gJe=r(bYr,"LevitConfig"),bYr.forEach(t),hJe=r(PAe," (LeViT model)"),PAe.forEach(t),pJe=i(L),ym=n(L,"LI",{});var BAe=s(ym);Jte=n(BAe,"STRONG",{});var vYr=s(Jte);uJe=r(vYr,"longformer"),vYr.forEach(t),_Je=r(BAe," \u2014 "),QS=n(BAe,"A",{href:!0});var FYr=s(QS);bJe=r(FYr,"LongformerConfig"),FYr.forEach(t),vJe=r(BAe," (Longformer model)"),BAe.forEach(t),FJe=i(L),xm=n(L,"LI",{});var IAe=s(xm);Yte=n(IAe,"STRONG",{});var TYr=s(Yte);TJe=r(TYr,"longt5"),TYr.forEach(t),MJe=r(IAe," \u2014 "),HS=n(IAe,"A",{href:!0});var MYr=s(HS);EJe=r(MYr,"LongT5Config"),MYr.forEach(t),CJe=r(IAe," (LongT5 model)"),IAe.forEach(t),wJe=i(L),$m=n(L,"LI",{});var NAe=s($m);Kte=n(NAe,"STRONG",{});var EYr=s(Kte);AJe=r(EYr,"luke"),EYr.forEach(t),LJe=r(NAe," \u2014 "),US=n(NAe,"A",{href:!0});var CYr=s(US);yJe=r(CYr,"LukeConfig"),CYr.forEach(t),xJe=r(NAe," (LUKE model)"),NAe.forEach(t),$Je=i(L),km=n(L,"LI",{});var qAe=s(km);Zte=n(qAe,"STRONG",{});var wYr=s(Zte);kJe=r(wYr,"lxmert"),wYr.forEach(t),SJe=r(qAe," \u2014 "),JS=n(qAe,"A",{href:!0});var AYr=s(JS);RJe=r(AYr,"LxmertConfig"),AYr.forEach(t),PJe=r(qAe," (LXMERT model)"),qAe.forEach(t),BJe=i(L),Sm=n(L,"LI",{});var jAe=s(Sm);eae=n(jAe,"STRONG",{});var LYr=s(eae);IJe=r(LYr,"m2m_100"),LYr.forEach(t),NJe=r(jAe," \u2014 "),YS=n(jAe,"A",{href:!0});var yYr=s(YS);qJe=r(yYr,"M2M100Config"),yYr.forEach(t),jJe=r(jAe," (M2M100 model)"),jAe.forEach(t),DJe=i(L),Rm=n(L,"LI",{});var DAe=s(Rm);oae=n(DAe,"STRONG",{});var xYr=s(oae);GJe=r(xYr,"marian"),xYr.forEach(t),OJe=r(DAe," \u2014 "),KS=n(DAe,"A",{href:!0});var $Yr=s(KS);VJe=r($Yr,"MarianConfig"),$Yr.forEach(t),XJe=r(DAe," (Marian model)"),DAe.forEach(t),zJe=i(L),Pm=n(L,"LI",{});var GAe=s(Pm);rae=n(GAe,"STRONG",{});var kYr=s(rae);WJe=r(kYr,"maskformer"),kYr.forEach(t),QJe=r(GAe," \u2014 "),ZS=n(GAe,"A",{href:!0});var SYr=s(ZS);HJe=r(SYr,"MaskFormerConfig"),SYr.forEach(t),UJe=r(GAe," (MaskFormer model)"),GAe.forEach(t),JJe=i(L),Bm=n(L,"LI",{});var OAe=s(Bm);tae=n(OAe,"STRONG",{});var RYr=s(tae);YJe=r(RYr,"mbart"),RYr.forEach(t),KJe=r(OAe," \u2014 "),eR=n(OAe,"A",{href:!0});var PYr=s(eR);ZJe=r(PYr,"MBartConfig"),PYr.forEach(t),eYe=r(OAe," (mBART model)"),OAe.forEach(t),oYe=i(L),Im=n(L,"LI",{});var VAe=s(Im);aae=n(VAe,"STRONG",{});var BYr=s(aae);rYe=r(BYr,"mctct"),BYr.forEach(t),tYe=r(VAe," \u2014 "),oR=n(VAe,"A",{href:!0});var IYr=s(oR);aYe=r(IYr,"MCTCTConfig"),IYr.forEach(t),nYe=r(VAe," (M-CTC-T model)"),VAe.forEach(t),sYe=i(L),Nm=n(L,"LI",{});var XAe=s(Nm);nae=n(XAe,"STRONG",{});var NYr=s(nae);lYe=r(NYr,"megatron-bert"),NYr.forEach(t),iYe=r(XAe," \u2014 "),rR=n(XAe,"A",{href:!0});var qYr=s(rR);dYe=r(qYr,"MegatronBertConfig"),qYr.forEach(t),cYe=r(XAe," (Megatron-BERT model)"),XAe.forEach(t),fYe=i(L),qm=n(L,"LI",{});var zAe=s(qm);sae=n(zAe,"STRONG",{});var jYr=s(sae);mYe=r(jYr,"mobilebert"),jYr.forEach(t),gYe=r(zAe," \u2014 "),tR=n(zAe,"A",{href:!0});var DYr=s(tR);hYe=r(DYr,"MobileBertConfig"),DYr.forEach(t),pYe=r(zAe," (MobileBERT model)"),zAe.forEach(t),uYe=i(L),jm=n(L,"LI",{});var WAe=s(jm);lae=n(WAe,"STRONG",{});var GYr=s(lae);_Ye=r(GYr,"mpnet"),GYr.forEach(t),bYe=r(WAe," \u2014 "),aR=n(WAe,"A",{href:!0});var OYr=s(aR);vYe=r(OYr,"MPNetConfig"),OYr.forEach(t),FYe=r(WAe," (MPNet model)"),WAe.forEach(t),TYe=i(L),Dm=n(L,"LI",{});var QAe=s(Dm);iae=n(QAe,"STRONG",{});var VYr=s(iae);MYe=r(VYr,"mt5"),VYr.forEach(t),EYe=r(QAe," \u2014 "),nR=n(QAe,"A",{href:!0});var XYr=s(nR);CYe=r(XYr,"MT5Config"),XYr.forEach(t),wYe=r(QAe," (MT5 model)"),QAe.forEach(t),AYe=i(L),Gm=n(L,"LI",{});var HAe=s(Gm);dae=n(HAe,"STRONG",{});var zYr=s(dae);LYe=r(zYr,"nystromformer"),zYr.forEach(t),yYe=r(HAe," \u2014 "),sR=n(HAe,"A",{href:!0});var WYr=s(sR);xYe=r(WYr,"NystromformerConfig"),WYr.forEach(t),$Ye=r(HAe," (Nystr\xF6mformer model)"),HAe.forEach(t),kYe=i(L),Om=n(L,"LI",{});var UAe=s(Om);cae=n(UAe,"STRONG",{});var QYr=s(cae);SYe=r(QYr,"openai-gpt"),QYr.forEach(t),RYe=r(UAe," \u2014 "),lR=n(UAe,"A",{href:!0});var HYr=s(lR);PYe=r(HYr,"OpenAIGPTConfig"),HYr.forEach(t),BYe=r(UAe," (OpenAI GPT model)"),UAe.forEach(t),IYe=i(L),Vm=n(L,"LI",{});var JAe=s(Vm);fae=n(JAe,"STRONG",{});var UYr=s(fae);NYe=r(UYr,"opt"),UYr.forEach(t),qYe=r(JAe," \u2014 "),iR=n(JAe,"A",{href:!0});var JYr=s(iR);jYe=r(JYr,"OPTConfig"),JYr.forEach(t),DYe=r(JAe," (OPT model)"),JAe.forEach(t),GYe=i(L),Xm=n(L,"LI",{});var YAe=s(Xm);mae=n(YAe,"STRONG",{});var YYr=s(mae);OYe=r(YYr,"pegasus"),YYr.forEach(t),VYe=r(YAe," \u2014 "),dR=n(YAe,"A",{href:!0});var KYr=s(dR);XYe=r(KYr,"PegasusConfig"),KYr.forEach(t),zYe=r(YAe," (Pegasus model)"),YAe.forEach(t),WYe=i(L),zm=n(L,"LI",{});var KAe=s(zm);gae=n(KAe,"STRONG",{});var ZYr=s(gae);QYe=r(ZYr,"perceiver"),ZYr.forEach(t),HYe=r(KAe," \u2014 "),cR=n(KAe,"A",{href:!0});var eKr=s(cR);UYe=r(eKr,"PerceiverConfig"),eKr.forEach(t),JYe=r(KAe," (Perceiver model)"),KAe.forEach(t),YYe=i(L),Wm=n(L,"LI",{});var ZAe=s(Wm);hae=n(ZAe,"STRONG",{});var oKr=s(hae);KYe=r(oKr,"plbart"),oKr.forEach(t),ZYe=r(ZAe," \u2014 "),fR=n(ZAe,"A",{href:!0});var rKr=s(fR);eKe=r(rKr,"PLBartConfig"),rKr.forEach(t),oKe=r(ZAe," (PLBart model)"),ZAe.forEach(t),rKe=i(L),Qm=n(L,"LI",{});var e6e=s(Qm);pae=n(e6e,"STRONG",{});var tKr=s(pae);tKe=r(tKr,"poolformer"),tKr.forEach(t),aKe=r(e6e," \u2014 "),mR=n(e6e,"A",{href:!0});var aKr=s(mR);nKe=r(aKr,"PoolFormerConfig"),aKr.forEach(t),sKe=r(e6e," (PoolFormer model)"),e6e.forEach(t),lKe=i(L),Hm=n(L,"LI",{});var o6e=s(Hm);uae=n(o6e,"STRONG",{});var nKr=s(uae);iKe=r(nKr,"prophetnet"),nKr.forEach(t),dKe=r(o6e," \u2014 "),gR=n(o6e,"A",{href:!0});var sKr=s(gR);cKe=r(sKr,"ProphetNetConfig"),sKr.forEach(t),fKe=r(o6e," (ProphetNet model)"),o6e.forEach(t),mKe=i(L),Um=n(L,"LI",{});var r6e=s(Um);_ae=n(r6e,"STRONG",{});var lKr=s(_ae);gKe=r(lKr,"qdqbert"),lKr.forEach(t),hKe=r(r6e," \u2014 "),hR=n(r6e,"A",{href:!0});var iKr=s(hR);pKe=r(iKr,"QDQBertConfig"),iKr.forEach(t),uKe=r(r6e," (QDQBert model)"),r6e.forEach(t),_Ke=i(L),Jm=n(L,"LI",{});var t6e=s(Jm);bae=n(t6e,"STRONG",{});var dKr=s(bae);bKe=r(dKr,"rag"),dKr.forEach(t),vKe=r(t6e," \u2014 "),pR=n(t6e,"A",{href:!0});var cKr=s(pR);FKe=r(cKr,"RagConfig"),cKr.forEach(t),TKe=r(t6e," (RAG model)"),t6e.forEach(t),MKe=i(L),Ym=n(L,"LI",{});var a6e=s(Ym);vae=n(a6e,"STRONG",{});var fKr=s(vae);EKe=r(fKr,"realm"),fKr.forEach(t),CKe=r(a6e," \u2014 "),uR=n(a6e,"A",{href:!0});var mKr=s(uR);wKe=r(mKr,"RealmConfig"),mKr.forEach(t),AKe=r(a6e," (REALM model)"),a6e.forEach(t),LKe=i(L),Km=n(L,"LI",{});var n6e=s(Km);Fae=n(n6e,"STRONG",{});var gKr=s(Fae);yKe=r(gKr,"reformer"),gKr.forEach(t),xKe=r(n6e," \u2014 "),_R=n(n6e,"A",{href:!0});var hKr=s(_R);$Ke=r(hKr,"ReformerConfig"),hKr.forEach(t),kKe=r(n6e," (Reformer model)"),n6e.forEach(t),SKe=i(L),Zm=n(L,"LI",{});var s6e=s(Zm);Tae=n(s6e,"STRONG",{});var pKr=s(Tae);RKe=r(pKr,"regnet"),pKr.forEach(t),PKe=r(s6e," \u2014 "),bR=n(s6e,"A",{href:!0});var uKr=s(bR);BKe=r(uKr,"RegNetConfig"),uKr.forEach(t),IKe=r(s6e," (RegNet model)"),s6e.forEach(t),NKe=i(L),eg=n(L,"LI",{});var l6e=s(eg);Mae=n(l6e,"STRONG",{});var _Kr=s(Mae);qKe=r(_Kr,"rembert"),_Kr.forEach(t),jKe=r(l6e," \u2014 "),vR=n(l6e,"A",{href:!0});var bKr=s(vR);DKe=r(bKr,"RemBertConfig"),bKr.forEach(t),GKe=r(l6e," (RemBERT model)"),l6e.forEach(t),OKe=i(L),og=n(L,"LI",{});var i6e=s(og);Eae=n(i6e,"STRONG",{});var vKr=s(Eae);VKe=r(vKr,"resnet"),vKr.forEach(t),XKe=r(i6e," \u2014 "),FR=n(i6e,"A",{href:!0});var FKr=s(FR);zKe=r(FKr,"ResNetConfig"),FKr.forEach(t),WKe=r(i6e," (ResNet model)"),i6e.forEach(t),QKe=i(L),rg=n(L,"LI",{});var d6e=s(rg);Cae=n(d6e,"STRONG",{});var TKr=s(Cae);HKe=r(TKr,"retribert"),TKr.forEach(t),UKe=r(d6e," \u2014 "),TR=n(d6e,"A",{href:!0});var MKr=s(TR);JKe=r(MKr,"RetriBertConfig"),MKr.forEach(t),YKe=r(d6e," (RetriBERT model)"),d6e.forEach(t),KKe=i(L),tg=n(L,"LI",{});var c6e=s(tg);wae=n(c6e,"STRONG",{});var EKr=s(wae);ZKe=r(EKr,"roberta"),EKr.forEach(t),eZe=r(c6e," \u2014 "),MR=n(c6e,"A",{href:!0});var CKr=s(MR);oZe=r(CKr,"RobertaConfig"),CKr.forEach(t),rZe=r(c6e," (RoBERTa model)"),c6e.forEach(t),tZe=i(L),ag=n(L,"LI",{});var f6e=s(ag);Aae=n(f6e,"STRONG",{});var wKr=s(Aae);aZe=r(wKr,"roformer"),wKr.forEach(t),nZe=r(f6e," \u2014 "),ER=n(f6e,"A",{href:!0});var AKr=s(ER);sZe=r(AKr,"RoFormerConfig"),AKr.forEach(t),lZe=r(f6e," (RoFormer model)"),f6e.forEach(t),iZe=i(L),ng=n(L,"LI",{});var m6e=s(ng);Lae=n(m6e,"STRONG",{});var LKr=s(Lae);dZe=r(LKr,"segformer"),LKr.forEach(t),cZe=r(m6e," \u2014 "),CR=n(m6e,"A",{href:!0});var yKr=s(CR);fZe=r(yKr,"SegformerConfig"),yKr.forEach(t),mZe=r(m6e," (SegFormer model)"),m6e.forEach(t),gZe=i(L),sg=n(L,"LI",{});var g6e=s(sg);yae=n(g6e,"STRONG",{});var xKr=s(yae);hZe=r(xKr,"sew"),xKr.forEach(t),pZe=r(g6e," \u2014 "),wR=n(g6e,"A",{href:!0});var $Kr=s(wR);uZe=r($Kr,"SEWConfig"),$Kr.forEach(t),_Ze=r(g6e," (SEW model)"),g6e.forEach(t),bZe=i(L),lg=n(L,"LI",{});var h6e=s(lg);xae=n(h6e,"STRONG",{});var kKr=s(xae);vZe=r(kKr,"sew-d"),kKr.forEach(t),FZe=r(h6e," \u2014 "),AR=n(h6e,"A",{href:!0});var SKr=s(AR);TZe=r(SKr,"SEWDConfig"),SKr.forEach(t),MZe=r(h6e," (SEW-D model)"),h6e.forEach(t),EZe=i(L),ig=n(L,"LI",{});var p6e=s(ig);$ae=n(p6e,"STRONG",{});var RKr=s($ae);CZe=r(RKr,"speech-encoder-decoder"),RKr.forEach(t),wZe=r(p6e," \u2014 "),LR=n(p6e,"A",{href:!0});var PKr=s(LR);AZe=r(PKr,"SpeechEncoderDecoderConfig"),PKr.forEach(t),LZe=r(p6e," (Speech Encoder decoder model)"),p6e.forEach(t),yZe=i(L),dg=n(L,"LI",{});var u6e=s(dg);kae=n(u6e,"STRONG",{});var BKr=s(kae);xZe=r(BKr,"speech_to_text"),BKr.forEach(t),$Ze=r(u6e," \u2014 "),yR=n(u6e,"A",{href:!0});var IKr=s(yR);kZe=r(IKr,"Speech2TextConfig"),IKr.forEach(t),SZe=r(u6e," (Speech2Text model)"),u6e.forEach(t),RZe=i(L),cg=n(L,"LI",{});var _6e=s(cg);Sae=n(_6e,"STRONG",{});var NKr=s(Sae);PZe=r(NKr,"speech_to_text_2"),NKr.forEach(t),BZe=r(_6e," \u2014 "),xR=n(_6e,"A",{href:!0});var qKr=s(xR);IZe=r(qKr,"Speech2Text2Config"),qKr.forEach(t),NZe=r(_6e," (Speech2Text2 model)"),_6e.forEach(t),qZe=i(L),fg=n(L,"LI",{});var b6e=s(fg);Rae=n(b6e,"STRONG",{});var jKr=s(Rae);jZe=r(jKr,"splinter"),jKr.forEach(t),DZe=r(b6e," \u2014 "),$R=n(b6e,"A",{href:!0});var DKr=s($R);GZe=r(DKr,"SplinterConfig"),DKr.forEach(t),OZe=r(b6e," (Splinter model)"),b6e.forEach(t),VZe=i(L),mg=n(L,"LI",{});var v6e=s(mg);Pae=n(v6e,"STRONG",{});var GKr=s(Pae);XZe=r(GKr,"squeezebert"),GKr.forEach(t),zZe=r(v6e," \u2014 "),kR=n(v6e,"A",{href:!0});var OKr=s(kR);WZe=r(OKr,"SqueezeBertConfig"),OKr.forEach(t),QZe=r(v6e," (SqueezeBERT model)"),v6e.forEach(t),HZe=i(L),gg=n(L,"LI",{});var F6e=s(gg);Bae=n(F6e,"STRONG",{});var VKr=s(Bae);UZe=r(VKr,"swin"),VKr.forEach(t),JZe=r(F6e," \u2014 "),SR=n(F6e,"A",{href:!0});var XKr=s(SR);YZe=r(XKr,"SwinConfig"),XKr.forEach(t),KZe=r(F6e," (Swin Transformer model)"),F6e.forEach(t),ZZe=i(L),hg=n(L,"LI",{});var T6e=s(hg);Iae=n(T6e,"STRONG",{});var zKr=s(Iae);eeo=r(zKr,"t5"),zKr.forEach(t),oeo=r(T6e," \u2014 "),RR=n(T6e,"A",{href:!0});var WKr=s(RR);reo=r(WKr,"T5Config"),WKr.forEach(t),teo=r(T6e," (T5 model)"),T6e.forEach(t),aeo=i(L),pg=n(L,"LI",{});var M6e=s(pg);Nae=n(M6e,"STRONG",{});var QKr=s(Nae);neo=r(QKr,"tapas"),QKr.forEach(t),seo=r(M6e," \u2014 "),PR=n(M6e,"A",{href:!0});var HKr=s(PR);leo=r(HKr,"TapasConfig"),HKr.forEach(t),ieo=r(M6e," (TAPAS model)"),M6e.forEach(t),deo=i(L),ug=n(L,"LI",{});var E6e=s(ug);qae=n(E6e,"STRONG",{});var UKr=s(qae);ceo=r(UKr,"trajectory_transformer"),UKr.forEach(t),feo=r(E6e," \u2014 "),BR=n(E6e,"A",{href:!0});var JKr=s(BR);meo=r(JKr,"TrajectoryTransformerConfig"),JKr.forEach(t),geo=r(E6e," (Trajectory Transformer model)"),E6e.forEach(t),heo=i(L),_g=n(L,"LI",{});var C6e=s(_g);jae=n(C6e,"STRONG",{});var YKr=s(jae);peo=r(YKr,"transfo-xl"),YKr.forEach(t),ueo=r(C6e," \u2014 "),IR=n(C6e,"A",{href:!0});var KKr=s(IR);_eo=r(KKr,"TransfoXLConfig"),KKr.forEach(t),beo=r(C6e," (Transformer-XL model)"),C6e.forEach(t),veo=i(L),bg=n(L,"LI",{});var w6e=s(bg);Dae=n(w6e,"STRONG",{});var ZKr=s(Dae);Feo=r(ZKr,"trocr"),ZKr.forEach(t),Teo=r(w6e," \u2014 "),NR=n(w6e,"A",{href:!0});var eZr=s(NR);Meo=r(eZr,"TrOCRConfig"),eZr.forEach(t),Eeo=r(w6e," (TrOCR model)"),w6e.forEach(t),Ceo=i(L),vg=n(L,"LI",{});var A6e=s(vg);Gae=n(A6e,"STRONG",{});var oZr=s(Gae);weo=r(oZr,"unispeech"),oZr.forEach(t),Aeo=r(A6e," \u2014 "),qR=n(A6e,"A",{href:!0});var rZr=s(qR);Leo=r(rZr,"UniSpeechConfig"),rZr.forEach(t),yeo=r(A6e," (UniSpeech model)"),A6e.forEach(t),xeo=i(L),Fg=n(L,"LI",{});var L6e=s(Fg);Oae=n(L6e,"STRONG",{});var tZr=s(Oae);$eo=r(tZr,"unispeech-sat"),tZr.forEach(t),keo=r(L6e," \u2014 "),jR=n(L6e,"A",{href:!0});var aZr=s(jR);Seo=r(aZr,"UniSpeechSatConfig"),aZr.forEach(t),Reo=r(L6e," (UniSpeechSat model)"),L6e.forEach(t),Peo=i(L),Tg=n(L,"LI",{});var y6e=s(Tg);Vae=n(y6e,"STRONG",{});var nZr=s(Vae);Beo=r(nZr,"van"),nZr.forEach(t),Ieo=r(y6e," \u2014 "),DR=n(y6e,"A",{href:!0});var sZr=s(DR);Neo=r(sZr,"VanConfig"),sZr.forEach(t),qeo=r(y6e," (VAN model)"),y6e.forEach(t),jeo=i(L),Mg=n(L,"LI",{});var x6e=s(Mg);Xae=n(x6e,"STRONG",{});var lZr=s(Xae);Deo=r(lZr,"vilt"),lZr.forEach(t),Geo=r(x6e," \u2014 "),GR=n(x6e,"A",{href:!0});var iZr=s(GR);Oeo=r(iZr,"ViltConfig"),iZr.forEach(t),Veo=r(x6e," (ViLT model)"),x6e.forEach(t),Xeo=i(L),Eg=n(L,"LI",{});var $6e=s(Eg);zae=n($6e,"STRONG",{});var dZr=s(zae);zeo=r(dZr,"vision-encoder-decoder"),dZr.forEach(t),Weo=r($6e," \u2014 "),OR=n($6e,"A",{href:!0});var cZr=s(OR);Qeo=r(cZr,"VisionEncoderDecoderConfig"),cZr.forEach(t),Heo=r($6e," (Vision Encoder decoder model)"),$6e.forEach(t),Ueo=i(L),Cg=n(L,"LI",{});var k6e=s(Cg);Wae=n(k6e,"STRONG",{});var fZr=s(Wae);Jeo=r(fZr,"vision-text-dual-encoder"),fZr.forEach(t),Yeo=r(k6e," \u2014 "),VR=n(k6e,"A",{href:!0});var mZr=s(VR);Keo=r(mZr,"VisionTextDualEncoderConfig"),mZr.forEach(t),Zeo=r(k6e," (VisionTextDualEncoder model)"),k6e.forEach(t),eoo=i(L),wg=n(L,"LI",{});var S6e=s(wg);Qae=n(S6e,"STRONG",{});var gZr=s(Qae);ooo=r(gZr,"visual_bert"),gZr.forEach(t),roo=r(S6e," \u2014 "),XR=n(S6e,"A",{href:!0});var hZr=s(XR);too=r(hZr,"VisualBertConfig"),hZr.forEach(t),aoo=r(S6e," (VisualBERT model)"),S6e.forEach(t),noo=i(L),Ag=n(L,"LI",{});var R6e=s(Ag);Hae=n(R6e,"STRONG",{});var pZr=s(Hae);soo=r(pZr,"vit"),pZr.forEach(t),loo=r(R6e," \u2014 "),zR=n(R6e,"A",{href:!0});var uZr=s(zR);ioo=r(uZr,"ViTConfig"),uZr.forEach(t),doo=r(R6e," (ViT model)"),R6e.forEach(t),coo=i(L),Lg=n(L,"LI",{});var P6e=s(Lg);Uae=n(P6e,"STRONG",{});var _Zr=s(Uae);foo=r(_Zr,"vit_mae"),_Zr.forEach(t),moo=r(P6e," \u2014 "),WR=n(P6e,"A",{href:!0});var bZr=s(WR);goo=r(bZr,"ViTMAEConfig"),bZr.forEach(t),hoo=r(P6e," (ViTMAE model)"),P6e.forEach(t),poo=i(L),yg=n(L,"LI",{});var B6e=s(yg);Jae=n(B6e,"STRONG",{});var vZr=s(Jae);uoo=r(vZr,"wav2vec2"),vZr.forEach(t),_oo=r(B6e," \u2014 "),QR=n(B6e,"A",{href:!0});var FZr=s(QR);boo=r(FZr,"Wav2Vec2Config"),FZr.forEach(t),voo=r(B6e," (Wav2Vec2 model)"),B6e.forEach(t),Foo=i(L),xg=n(L,"LI",{});var I6e=s(xg);Yae=n(I6e,"STRONG",{});var TZr=s(Yae);Too=r(TZr,"wav2vec2-conformer"),TZr.forEach(t),Moo=r(I6e," \u2014 "),HR=n(I6e,"A",{href:!0});var MZr=s(HR);Eoo=r(MZr,"Wav2Vec2ConformerConfig"),MZr.forEach(t),Coo=r(I6e," (Wav2Vec2-Conformer model)"),I6e.forEach(t),woo=i(L),$g=n(L,"LI",{});var N6e=s($g);Kae=n(N6e,"STRONG",{});var EZr=s(Kae);Aoo=r(EZr,"wavlm"),EZr.forEach(t),Loo=r(N6e," \u2014 "),UR=n(N6e,"A",{href:!0});var CZr=s(UR);yoo=r(CZr,"WavLMConfig"),CZr.forEach(t),xoo=r(N6e," (WavLM model)"),N6e.forEach(t),$oo=i(L),kg=n(L,"LI",{});var q6e=s(kg);Zae=n(q6e,"STRONG",{});var wZr=s(Zae);koo=r(wZr,"xglm"),wZr.forEach(t),Soo=r(q6e," \u2014 "),JR=n(q6e,"A",{href:!0});var AZr=s(JR);Roo=r(AZr,"XGLMConfig"),AZr.forEach(t),Poo=r(q6e," (XGLM model)"),q6e.forEach(t),Boo=i(L),Sg=n(L,"LI",{});var j6e=s(Sg);ene=n(j6e,"STRONG",{});var LZr=s(ene);Ioo=r(LZr,"xlm"),LZr.forEach(t),Noo=r(j6e," \u2014 "),YR=n(j6e,"A",{href:!0});var yZr=s(YR);qoo=r(yZr,"XLMConfig"),yZr.forEach(t),joo=r(j6e," (XLM model)"),j6e.forEach(t),Doo=i(L),Rg=n(L,"LI",{});var D6e=s(Rg);one=n(D6e,"STRONG",{});var xZr=s(one);Goo=r(xZr,"xlm-prophetnet"),xZr.forEach(t),Ooo=r(D6e," \u2014 "),KR=n(D6e,"A",{href:!0});var $Zr=s(KR);Voo=r($Zr,"XLMProphetNetConfig"),$Zr.forEach(t),Xoo=r(D6e," (XLM-ProphetNet model)"),D6e.forEach(t),zoo=i(L),Pg=n(L,"LI",{});var G6e=s(Pg);rne=n(G6e,"STRONG",{});var kZr=s(rne);Woo=r(kZr,"xlm-roberta"),kZr.forEach(t),Qoo=r(G6e," \u2014 "),ZR=n(G6e,"A",{href:!0});var SZr=s(ZR);Hoo=r(SZr,"XLMRobertaConfig"),SZr.forEach(t),Uoo=r(G6e," (XLM-RoBERTa model)"),G6e.forEach(t),Joo=i(L),Bg=n(L,"LI",{});var O6e=s(Bg);tne=n(O6e,"STRONG",{});var RZr=s(tne);Yoo=r(RZr,"xlm-roberta-xl"),RZr.forEach(t),Koo=r(O6e," \u2014 "),eP=n(O6e,"A",{href:!0});var PZr=s(eP);Zoo=r(PZr,"XLMRobertaXLConfig"),PZr.forEach(t),ero=r(O6e," (XLM-RoBERTa-XL model)"),O6e.forEach(t),oro=i(L),Ig=n(L,"LI",{});var V6e=s(Ig);ane=n(V6e,"STRONG",{});var BZr=s(ane);rro=r(BZr,"xlnet"),BZr.forEach(t),tro=r(V6e," \u2014 "),oP=n(V6e,"A",{href:!0});var IZr=s(oP);aro=r(IZr,"XLNetConfig"),IZr.forEach(t),nro=r(V6e," (XLNet model)"),V6e.forEach(t),sro=i(L),Ng=n(L,"LI",{});var X6e=s(Ng);nne=n(X6e,"STRONG",{});var NZr=s(nne);lro=r(NZr,"yolos"),NZr.forEach(t),iro=r(X6e," \u2014 "),rP=n(X6e,"A",{href:!0});var qZr=s(rP);dro=r(qZr,"YolosConfig"),qZr.forEach(t),cro=r(X6e," (YOLOS model)"),X6e.forEach(t),fro=i(L),qg=n(L,"LI",{});var z6e=s(qg);sne=n(z6e,"STRONG",{});var jZr=s(sne);mro=r(jZr,"yoso"),jZr.forEach(t),gro=r(z6e," \u2014 "),tP=n(z6e,"A",{href:!0});var DZr=s(tP);hro=r(DZr,"YosoConfig"),DZr.forEach(t),pro=r(z6e," (YOSO model)"),z6e.forEach(t),L.forEach(t),uro=i(tt),T(jg.$$.fragment,tt),tt.forEach(t),_ro=i(rt),Dg=n(rt,"DIV",{class:!0});var iVe=s(Dg);T(LL.$$.fragment,iVe),bro=i(iVe),lne=n(iVe,"P",{});var GZr=s(lne);vro=r(GZr,"Register a new configuration for this class."),GZr.forEach(t),iVe.forEach(t),rt.forEach(t),dGe=i(f),$i=n(f,"H2",{class:!0});var dVe=s($i);Gg=n(dVe,"A",{id:!0,class:!0,href:!0});var OZr=s(Gg);ine=n(OZr,"SPAN",{});var VZr=s(ine);T(yL.$$.fragment,VZr),VZr.forEach(t),OZr.forEach(t),Fro=i(dVe),dne=n(dVe,"SPAN",{});var XZr=s(dne);Tro=r(XZr,"AutoTokenizer"),XZr.forEach(t),dVe.forEach(t),cGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(xL.$$.fragment,zs),Mro=i(zs),$L=n(zs,"P",{});var cVe=s($L);Ero=r(cVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aP=n(cVe,"A",{href:!0});var zZr=s(aP);Cro=r(zZr,"AutoTokenizer.from_pretrained()"),zZr.forEach(t),wro=r(cVe," class method."),cVe.forEach(t),Aro=i(zs),kL=n(zs,"P",{});var fVe=s(kL);Lro=r(fVe,"This class cannot be instantiated directly using "),cne=n(fVe,"CODE",{});var WZr=s(cne);yro=r(WZr,"__init__()"),WZr.forEach(t),xro=r(fVe," (throws an error)."),fVe.forEach(t),$ro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(SL.$$.fragment,Ws),kro=i(Ws),fne=n(Ws,"P",{});var QZr=s(fne);Sro=r(QZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QZr.forEach(t),Rro=i(Ws),$a=n(Ws,"P",{});var FA=s($a);Pro=r(FA,"The tokenizer class to instantiate is selected based on the "),mne=n(FA,"CODE",{});var HZr=s(mne);Bro=r(HZr,"model_type"),HZr.forEach(t),Iro=r(FA,` property of the config object (either
passed as an argument or loaded from `),gne=n(FA,"CODE",{});var UZr=s(gne);Nro=r(UZr,"pretrained_model_name_or_path"),UZr.forEach(t),qro=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hne=n(FA,"CODE",{});var JZr=s(hne);jro=r(JZr,"pretrained_model_name_or_path"),JZr.forEach(t),Dro=r(FA,":"),FA.forEach(t),Gro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var q$=s(Nn);pne=n(q$,"STRONG",{});var YZr=s(pne);Oro=r(YZr,"albert"),YZr.forEach(t),Vro=r(q$," \u2014 "),nP=n(q$,"A",{href:!0});var KZr=s(nP);Xro=r(KZr,"AlbertTokenizer"),KZr.forEach(t),zro=r(q$," or "),sP=n(q$,"A",{href:!0});var ZZr=s(sP);Wro=r(ZZr,"AlbertTokenizerFast"),ZZr.forEach(t),Qro=r(q$," (ALBERT model)"),q$.forEach(t),Hro=i(S),qn=n(S,"LI",{});var j$=s(qn);une=n(j$,"STRONG",{});var eet=s(une);Uro=r(eet,"bart"),eet.forEach(t),Jro=r(j$," \u2014 "),lP=n(j$,"A",{href:!0});var oet=s(lP);Yro=r(oet,"BartTokenizer"),oet.forEach(t),Kro=r(j$," or "),iP=n(j$,"A",{href:!0});var ret=s(iP);Zro=r(ret,"BartTokenizerFast"),ret.forEach(t),eto=r(j$," (BART model)"),j$.forEach(t),oto=i(S),jn=n(S,"LI",{});var D$=s(jn);_ne=n(D$,"STRONG",{});var tet=s(_ne);rto=r(tet,"barthez"),tet.forEach(t),tto=r(D$," \u2014 "),dP=n(D$,"A",{href:!0});var aet=s(dP);ato=r(aet,"BarthezTokenizer"),aet.forEach(t),nto=r(D$," or "),cP=n(D$,"A",{href:!0});var net=s(cP);sto=r(net,"BarthezTokenizerFast"),net.forEach(t),lto=r(D$," (BARThez model)"),D$.forEach(t),ito=i(S),Og=n(S,"LI",{});var W6e=s(Og);bne=n(W6e,"STRONG",{});var set=s(bne);dto=r(set,"bartpho"),set.forEach(t),cto=r(W6e," \u2014 "),fP=n(W6e,"A",{href:!0});var iet=s(fP);fto=r(iet,"BartphoTokenizer"),iet.forEach(t),mto=r(W6e," (BARTpho model)"),W6e.forEach(t),gto=i(S),Dn=n(S,"LI",{});var G$=s(Dn);vne=n(G$,"STRONG",{});var det=s(vne);hto=r(det,"bert"),det.forEach(t),pto=r(G$," \u2014 "),mP=n(G$,"A",{href:!0});var cet=s(mP);uto=r(cet,"BertTokenizer"),cet.forEach(t),_to=r(G$," or "),gP=n(G$,"A",{href:!0});var fet=s(gP);bto=r(fet,"BertTokenizerFast"),fet.forEach(t),vto=r(G$," (BERT model)"),G$.forEach(t),Fto=i(S),Vg=n(S,"LI",{});var Q6e=s(Vg);Fne=n(Q6e,"STRONG",{});var met=s(Fne);Tto=r(met,"bert-generation"),met.forEach(t),Mto=r(Q6e," \u2014 "),hP=n(Q6e,"A",{href:!0});var get=s(hP);Eto=r(get,"BertGenerationTokenizer"),get.forEach(t),Cto=r(Q6e," (Bert Generation model)"),Q6e.forEach(t),wto=i(S),Xg=n(S,"LI",{});var H6e=s(Xg);Tne=n(H6e,"STRONG",{});var het=s(Tne);Ato=r(het,"bert-japanese"),het.forEach(t),Lto=r(H6e," \u2014 "),pP=n(H6e,"A",{href:!0});var pet=s(pP);yto=r(pet,"BertJapaneseTokenizer"),pet.forEach(t),xto=r(H6e," (BertJapanese model)"),H6e.forEach(t),$to=i(S),zg=n(S,"LI",{});var U6e=s(zg);Mne=n(U6e,"STRONG",{});var uet=s(Mne);kto=r(uet,"bertweet"),uet.forEach(t),Sto=r(U6e," \u2014 "),uP=n(U6e,"A",{href:!0});var _et=s(uP);Rto=r(_et,"BertweetTokenizer"),_et.forEach(t),Pto=r(U6e," (BERTweet model)"),U6e.forEach(t),Bto=i(S),Gn=n(S,"LI",{});var O$=s(Gn);Ene=n(O$,"STRONG",{});var bet=s(Ene);Ito=r(bet,"big_bird"),bet.forEach(t),Nto=r(O$," \u2014 "),_P=n(O$,"A",{href:!0});var vet=s(_P);qto=r(vet,"BigBirdTokenizer"),vet.forEach(t),jto=r(O$," or "),bP=n(O$,"A",{href:!0});var Fet=s(bP);Dto=r(Fet,"BigBirdTokenizerFast"),Fet.forEach(t),Gto=r(O$," (BigBird model)"),O$.forEach(t),Oto=i(S),On=n(S,"LI",{});var V$=s(On);Cne=n(V$,"STRONG",{});var Tet=s(Cne);Vto=r(Tet,"bigbird_pegasus"),Tet.forEach(t),Xto=r(V$," \u2014 "),vP=n(V$,"A",{href:!0});var Met=s(vP);zto=r(Met,"PegasusTokenizer"),Met.forEach(t),Wto=r(V$," or "),FP=n(V$,"A",{href:!0});var Eet=s(FP);Qto=r(Eet,"PegasusTokenizerFast"),Eet.forEach(t),Hto=r(V$," (BigBird-Pegasus model)"),V$.forEach(t),Uto=i(S),Vn=n(S,"LI",{});var X$=s(Vn);wne=n(X$,"STRONG",{});var Cet=s(wne);Jto=r(Cet,"blenderbot"),Cet.forEach(t),Yto=r(X$," \u2014 "),TP=n(X$,"A",{href:!0});var wet=s(TP);Kto=r(wet,"BlenderbotTokenizer"),wet.forEach(t),Zto=r(X$," or "),MP=n(X$,"A",{href:!0});var Aet=s(MP);eao=r(Aet,"BlenderbotTokenizerFast"),Aet.forEach(t),oao=r(X$," (Blenderbot model)"),X$.forEach(t),rao=i(S),Wg=n(S,"LI",{});var J6e=s(Wg);Ane=n(J6e,"STRONG",{});var Let=s(Ane);tao=r(Let,"blenderbot-small"),Let.forEach(t),aao=r(J6e," \u2014 "),EP=n(J6e,"A",{href:!0});var yet=s(EP);nao=r(yet,"BlenderbotSmallTokenizer"),yet.forEach(t),sao=r(J6e," (BlenderbotSmall model)"),J6e.forEach(t),lao=i(S),Qg=n(S,"LI",{});var Y6e=s(Qg);Lne=n(Y6e,"STRONG",{});var xet=s(Lne);iao=r(xet,"bloom"),xet.forEach(t),dao=r(Y6e," \u2014 "),CP=n(Y6e,"A",{href:!0});var $et=s(CP);cao=r($et,"BloomTokenizerFast"),$et.forEach(t),fao=r(Y6e," (BLOOM model)"),Y6e.forEach(t),mao=i(S),Hg=n(S,"LI",{});var K6e=s(Hg);yne=n(K6e,"STRONG",{});var ket=s(yne);gao=r(ket,"byt5"),ket.forEach(t),hao=r(K6e," \u2014 "),wP=n(K6e,"A",{href:!0});var Set=s(wP);pao=r(Set,"ByT5Tokenizer"),Set.forEach(t),uao=r(K6e," (ByT5 model)"),K6e.forEach(t),_ao=i(S),Xn=n(S,"LI",{});var z$=s(Xn);xne=n(z$,"STRONG",{});var Ret=s(xne);bao=r(Ret,"camembert"),Ret.forEach(t),vao=r(z$," \u2014 "),AP=n(z$,"A",{href:!0});var Pet=s(AP);Fao=r(Pet,"CamembertTokenizer"),Pet.forEach(t),Tao=r(z$," or "),LP=n(z$,"A",{href:!0});var Bet=s(LP);Mao=r(Bet,"CamembertTokenizerFast"),Bet.forEach(t),Eao=r(z$," (CamemBERT model)"),z$.forEach(t),Cao=i(S),Ug=n(S,"LI",{});var Z6e=s(Ug);$ne=n(Z6e,"STRONG",{});var Iet=s($ne);wao=r(Iet,"canine"),Iet.forEach(t),Aao=r(Z6e," \u2014 "),yP=n(Z6e,"A",{href:!0});var Net=s(yP);Lao=r(Net,"CanineTokenizer"),Net.forEach(t),yao=r(Z6e," (CANINE model)"),Z6e.forEach(t),xao=i(S),zn=n(S,"LI",{});var W$=s(zn);kne=n(W$,"STRONG",{});var qet=s(kne);$ao=r(qet,"clip"),qet.forEach(t),kao=r(W$," \u2014 "),xP=n(W$,"A",{href:!0});var jet=s(xP);Sao=r(jet,"CLIPTokenizer"),jet.forEach(t),Rao=r(W$," or "),$P=n(W$,"A",{href:!0});var Det=s($P);Pao=r(Det,"CLIPTokenizerFast"),Det.forEach(t),Bao=r(W$," (CLIP model)"),W$.forEach(t),Iao=i(S),Wn=n(S,"LI",{});var Q$=s(Wn);Sne=n(Q$,"STRONG",{});var Get=s(Sne);Nao=r(Get,"convbert"),Get.forEach(t),qao=r(Q$," \u2014 "),kP=n(Q$,"A",{href:!0});var Oet=s(kP);jao=r(Oet,"ConvBertTokenizer"),Oet.forEach(t),Dao=r(Q$," or "),SP=n(Q$,"A",{href:!0});var Vet=s(SP);Gao=r(Vet,"ConvBertTokenizerFast"),Vet.forEach(t),Oao=r(Q$," (ConvBERT model)"),Q$.forEach(t),Vao=i(S),Qn=n(S,"LI",{});var H$=s(Qn);Rne=n(H$,"STRONG",{});var Xet=s(Rne);Xao=r(Xet,"cpm"),Xet.forEach(t),zao=r(H$," \u2014 "),RP=n(H$,"A",{href:!0});var zet=s(RP);Wao=r(zet,"CpmTokenizer"),zet.forEach(t),Qao=r(H$," or "),PP=n(H$,"A",{href:!0});var Wet=s(PP);Hao=r(Wet,"CpmTokenizerFast"),Wet.forEach(t),Uao=r(H$," (CPM model)"),H$.forEach(t),Jao=i(S),Jg=n(S,"LI",{});var eLe=s(Jg);Pne=n(eLe,"STRONG",{});var Qet=s(Pne);Yao=r(Qet,"ctrl"),Qet.forEach(t),Kao=r(eLe," \u2014 "),BP=n(eLe,"A",{href:!0});var Het=s(BP);Zao=r(Het,"CTRLTokenizer"),Het.forEach(t),eno=r(eLe," (CTRL model)"),eLe.forEach(t),ono=i(S),Hn=n(S,"LI",{});var U$=s(Hn);Bne=n(U$,"STRONG",{});var Uet=s(Bne);rno=r(Uet,"data2vec-text"),Uet.forEach(t),tno=r(U$," \u2014 "),IP=n(U$,"A",{href:!0});var Jet=s(IP);ano=r(Jet,"RobertaTokenizer"),Jet.forEach(t),nno=r(U$," or "),NP=n(U$,"A",{href:!0});var Yet=s(NP);sno=r(Yet,"RobertaTokenizerFast"),Yet.forEach(t),lno=r(U$," (Data2VecText model)"),U$.forEach(t),ino=i(S),Un=n(S,"LI",{});var J$=s(Un);Ine=n(J$,"STRONG",{});var Ket=s(Ine);dno=r(Ket,"deberta"),Ket.forEach(t),cno=r(J$," \u2014 "),qP=n(J$,"A",{href:!0});var Zet=s(qP);fno=r(Zet,"DebertaTokenizer"),Zet.forEach(t),mno=r(J$," or "),jP=n(J$,"A",{href:!0});var eot=s(jP);gno=r(eot,"DebertaTokenizerFast"),eot.forEach(t),hno=r(J$," (DeBERTa model)"),J$.forEach(t),pno=i(S),Jn=n(S,"LI",{});var Y$=s(Jn);Nne=n(Y$,"STRONG",{});var oot=s(Nne);uno=r(oot,"deberta-v2"),oot.forEach(t),_no=r(Y$," \u2014 "),DP=n(Y$,"A",{href:!0});var rot=s(DP);bno=r(rot,"DebertaV2Tokenizer"),rot.forEach(t),vno=r(Y$," or "),GP=n(Y$,"A",{href:!0});var tot=s(GP);Fno=r(tot,"DebertaV2TokenizerFast"),tot.forEach(t),Tno=r(Y$," (DeBERTa-v2 model)"),Y$.forEach(t),Mno=i(S),Yn=n(S,"LI",{});var K$=s(Yn);qne=n(K$,"STRONG",{});var aot=s(qne);Eno=r(aot,"distilbert"),aot.forEach(t),Cno=r(K$," \u2014 "),OP=n(K$,"A",{href:!0});var not=s(OP);wno=r(not,"DistilBertTokenizer"),not.forEach(t),Ano=r(K$," or "),VP=n(K$,"A",{href:!0});var sot=s(VP);Lno=r(sot,"DistilBertTokenizerFast"),sot.forEach(t),yno=r(K$," (DistilBERT model)"),K$.forEach(t),xno=i(S),Kn=n(S,"LI",{});var Z$=s(Kn);jne=n(Z$,"STRONG",{});var lot=s(jne);$no=r(lot,"dpr"),lot.forEach(t),kno=r(Z$," \u2014 "),XP=n(Z$,"A",{href:!0});var iot=s(XP);Sno=r(iot,"DPRQuestionEncoderTokenizer"),iot.forEach(t),Rno=r(Z$," or "),zP=n(Z$,"A",{href:!0});var dot=s(zP);Pno=r(dot,"DPRQuestionEncoderTokenizerFast"),dot.forEach(t),Bno=r(Z$," (DPR model)"),Z$.forEach(t),Ino=i(S),Zn=n(S,"LI",{});var ek=s(Zn);Dne=n(ek,"STRONG",{});var cot=s(Dne);Nno=r(cot,"electra"),cot.forEach(t),qno=r(ek," \u2014 "),WP=n(ek,"A",{href:!0});var fot=s(WP);jno=r(fot,"ElectraTokenizer"),fot.forEach(t),Dno=r(ek," or "),QP=n(ek,"A",{href:!0});var mot=s(QP);Gno=r(mot,"ElectraTokenizerFast"),mot.forEach(t),Ono=r(ek," (ELECTRA model)"),ek.forEach(t),Vno=i(S),Yg=n(S,"LI",{});var oLe=s(Yg);Gne=n(oLe,"STRONG",{});var got=s(Gne);Xno=r(got,"flaubert"),got.forEach(t),zno=r(oLe," \u2014 "),HP=n(oLe,"A",{href:!0});var hot=s(HP);Wno=r(hot,"FlaubertTokenizer"),hot.forEach(t),Qno=r(oLe," (FlauBERT model)"),oLe.forEach(t),Hno=i(S),es=n(S,"LI",{});var ok=s(es);One=n(ok,"STRONG",{});var pot=s(One);Uno=r(pot,"fnet"),pot.forEach(t),Jno=r(ok," \u2014 "),UP=n(ok,"A",{href:!0});var uot=s(UP);Yno=r(uot,"FNetTokenizer"),uot.forEach(t),Kno=r(ok," or "),JP=n(ok,"A",{href:!0});var _ot=s(JP);Zno=r(_ot,"FNetTokenizerFast"),_ot.forEach(t),eso=r(ok," (FNet model)"),ok.forEach(t),oso=i(S),Kg=n(S,"LI",{});var rLe=s(Kg);Vne=n(rLe,"STRONG",{});var bot=s(Vne);rso=r(bot,"fsmt"),bot.forEach(t),tso=r(rLe," \u2014 "),YP=n(rLe,"A",{href:!0});var vot=s(YP);aso=r(vot,"FSMTTokenizer"),vot.forEach(t),nso=r(rLe," (FairSeq Machine-Translation model)"),rLe.forEach(t),sso=i(S),os=n(S,"LI",{});var rk=s(os);Xne=n(rk,"STRONG",{});var Fot=s(Xne);lso=r(Fot,"funnel"),Fot.forEach(t),iso=r(rk," \u2014 "),KP=n(rk,"A",{href:!0});var Tot=s(KP);dso=r(Tot,"FunnelTokenizer"),Tot.forEach(t),cso=r(rk," or "),ZP=n(rk,"A",{href:!0});var Mot=s(ZP);fso=r(Mot,"FunnelTokenizerFast"),Mot.forEach(t),mso=r(rk," (Funnel Transformer model)"),rk.forEach(t),gso=i(S),rs=n(S,"LI",{});var tk=s(rs);zne=n(tk,"STRONG",{});var Eot=s(zne);hso=r(Eot,"gpt2"),Eot.forEach(t),pso=r(tk," \u2014 "),eB=n(tk,"A",{href:!0});var Cot=s(eB);uso=r(Cot,"GPT2Tokenizer"),Cot.forEach(t),_so=r(tk," or "),oB=n(tk,"A",{href:!0});var wot=s(oB);bso=r(wot,"GPT2TokenizerFast"),wot.forEach(t),vso=r(tk," (OpenAI GPT-2 model)"),tk.forEach(t),Fso=i(S),ts=n(S,"LI",{});var ak=s(ts);Wne=n(ak,"STRONG",{});var Aot=s(Wne);Tso=r(Aot,"gpt_neo"),Aot.forEach(t),Mso=r(ak," \u2014 "),rB=n(ak,"A",{href:!0});var Lot=s(rB);Eso=r(Lot,"GPT2Tokenizer"),Lot.forEach(t),Cso=r(ak," or "),tB=n(ak,"A",{href:!0});var yot=s(tB);wso=r(yot,"GPT2TokenizerFast"),yot.forEach(t),Aso=r(ak," (GPT Neo model)"),ak.forEach(t),Lso=i(S),Zg=n(S,"LI",{});var tLe=s(Zg);Qne=n(tLe,"STRONG",{});var xot=s(Qne);yso=r(xot,"gpt_neox"),xot.forEach(t),xso=r(tLe," \u2014 "),aB=n(tLe,"A",{href:!0});var $ot=s(aB);$so=r($ot,"GPTNeoXTokenizerFast"),$ot.forEach(t),kso=r(tLe," (GPT NeoX model)"),tLe.forEach(t),Sso=i(S),as=n(S,"LI",{});var nk=s(as);Hne=n(nk,"STRONG",{});var kot=s(Hne);Rso=r(kot,"gptj"),kot.forEach(t),Pso=r(nk," \u2014 "),nB=n(nk,"A",{href:!0});var Sot=s(nB);Bso=r(Sot,"GPT2Tokenizer"),Sot.forEach(t),Iso=r(nk," or "),sB=n(nk,"A",{href:!0});var Rot=s(sB);Nso=r(Rot,"GPT2TokenizerFast"),Rot.forEach(t),qso=r(nk," (GPT-J model)"),nk.forEach(t),jso=i(S),ns=n(S,"LI",{});var sk=s(ns);Une=n(sk,"STRONG",{});var Pot=s(Une);Dso=r(Pot,"herbert"),Pot.forEach(t),Gso=r(sk," \u2014 "),lB=n(sk,"A",{href:!0});var Bot=s(lB);Oso=r(Bot,"HerbertTokenizer"),Bot.forEach(t),Vso=r(sk," or "),iB=n(sk,"A",{href:!0});var Iot=s(iB);Xso=r(Iot,"HerbertTokenizerFast"),Iot.forEach(t),zso=r(sk," (HerBERT model)"),sk.forEach(t),Wso=i(S),eh=n(S,"LI",{});var aLe=s(eh);Jne=n(aLe,"STRONG",{});var Not=s(Jne);Qso=r(Not,"hubert"),Not.forEach(t),Hso=r(aLe," \u2014 "),dB=n(aLe,"A",{href:!0});var qot=s(dB);Uso=r(qot,"Wav2Vec2CTCTokenizer"),qot.forEach(t),Jso=r(aLe," (Hubert model)"),aLe.forEach(t),Yso=i(S),ss=n(S,"LI",{});var lk=s(ss);Yne=n(lk,"STRONG",{});var jot=s(Yne);Kso=r(jot,"ibert"),jot.forEach(t),Zso=r(lk," \u2014 "),cB=n(lk,"A",{href:!0});var Dot=s(cB);elo=r(Dot,"RobertaTokenizer"),Dot.forEach(t),olo=r(lk," or "),fB=n(lk,"A",{href:!0});var Got=s(fB);rlo=r(Got,"RobertaTokenizerFast"),Got.forEach(t),tlo=r(lk," (I-BERT model)"),lk.forEach(t),alo=i(S),ls=n(S,"LI",{});var ik=s(ls);Kne=n(ik,"STRONG",{});var Oot=s(Kne);nlo=r(Oot,"layoutlm"),Oot.forEach(t),slo=r(ik," \u2014 "),mB=n(ik,"A",{href:!0});var Vot=s(mB);llo=r(Vot,"LayoutLMTokenizer"),Vot.forEach(t),ilo=r(ik," or "),gB=n(ik,"A",{href:!0});var Xot=s(gB);dlo=r(Xot,"LayoutLMTokenizerFast"),Xot.forEach(t),clo=r(ik," (LayoutLM model)"),ik.forEach(t),flo=i(S),is=n(S,"LI",{});var dk=s(is);Zne=n(dk,"STRONG",{});var zot=s(Zne);mlo=r(zot,"layoutlmv2"),zot.forEach(t),glo=r(dk," \u2014 "),hB=n(dk,"A",{href:!0});var Wot=s(hB);hlo=r(Wot,"LayoutLMv2Tokenizer"),Wot.forEach(t),plo=r(dk," or "),pB=n(dk,"A",{href:!0});var Qot=s(pB);ulo=r(Qot,"LayoutLMv2TokenizerFast"),Qot.forEach(t),_lo=r(dk," (LayoutLMv2 model)"),dk.forEach(t),blo=i(S),ds=n(S,"LI",{});var ck=s(ds);ese=n(ck,"STRONG",{});var Hot=s(ese);vlo=r(Hot,"layoutlmv3"),Hot.forEach(t),Flo=r(ck," \u2014 "),uB=n(ck,"A",{href:!0});var Uot=s(uB);Tlo=r(Uot,"LayoutLMv3Tokenizer"),Uot.forEach(t),Mlo=r(ck," or "),_B=n(ck,"A",{href:!0});var Jot=s(_B);Elo=r(Jot,"LayoutLMv3TokenizerFast"),Jot.forEach(t),Clo=r(ck," (LayoutLMv3 model)"),ck.forEach(t),wlo=i(S),cs=n(S,"LI",{});var fk=s(cs);ose=n(fk,"STRONG",{});var Yot=s(ose);Alo=r(Yot,"layoutxlm"),Yot.forEach(t),Llo=r(fk," \u2014 "),bB=n(fk,"A",{href:!0});var Kot=s(bB);ylo=r(Kot,"LayoutXLMTokenizer"),Kot.forEach(t),xlo=r(fk," or "),vB=n(fk,"A",{href:!0});var Zot=s(vB);$lo=r(Zot,"LayoutXLMTokenizerFast"),Zot.forEach(t),klo=r(fk," (LayoutXLM model)"),fk.forEach(t),Slo=i(S),fs=n(S,"LI",{});var mk=s(fs);rse=n(mk,"STRONG",{});var ert=s(rse);Rlo=r(ert,"led"),ert.forEach(t),Plo=r(mk," \u2014 "),FB=n(mk,"A",{href:!0});var ort=s(FB);Blo=r(ort,"LEDTokenizer"),ort.forEach(t),Ilo=r(mk," or "),TB=n(mk,"A",{href:!0});var rrt=s(TB);Nlo=r(rrt,"LEDTokenizerFast"),rrt.forEach(t),qlo=r(mk," (LED model)"),mk.forEach(t),jlo=i(S),ms=n(S,"LI",{});var gk=s(ms);tse=n(gk,"STRONG",{});var trt=s(tse);Dlo=r(trt,"longformer"),trt.forEach(t),Glo=r(gk," \u2014 "),MB=n(gk,"A",{href:!0});var art=s(MB);Olo=r(art,"LongformerTokenizer"),art.forEach(t),Vlo=r(gk," or "),EB=n(gk,"A",{href:!0});var nrt=s(EB);Xlo=r(nrt,"LongformerTokenizerFast"),nrt.forEach(t),zlo=r(gk," (Longformer model)"),gk.forEach(t),Wlo=i(S),gs=n(S,"LI",{});var hk=s(gs);ase=n(hk,"STRONG",{});var srt=s(ase);Qlo=r(srt,"longt5"),srt.forEach(t),Hlo=r(hk," \u2014 "),CB=n(hk,"A",{href:!0});var lrt=s(CB);Ulo=r(lrt,"T5Tokenizer"),lrt.forEach(t),Jlo=r(hk," or "),wB=n(hk,"A",{href:!0});var irt=s(wB);Ylo=r(irt,"T5TokenizerFast"),irt.forEach(t),Klo=r(hk," (LongT5 model)"),hk.forEach(t),Zlo=i(S),oh=n(S,"LI",{});var nLe=s(oh);nse=n(nLe,"STRONG",{});var drt=s(nse);eio=r(drt,"luke"),drt.forEach(t),oio=r(nLe," \u2014 "),AB=n(nLe,"A",{href:!0});var crt=s(AB);rio=r(crt,"LukeTokenizer"),crt.forEach(t),tio=r(nLe," (LUKE model)"),nLe.forEach(t),aio=i(S),hs=n(S,"LI",{});var pk=s(hs);sse=n(pk,"STRONG",{});var frt=s(sse);nio=r(frt,"lxmert"),frt.forEach(t),sio=r(pk," \u2014 "),LB=n(pk,"A",{href:!0});var mrt=s(LB);lio=r(mrt,"LxmertTokenizer"),mrt.forEach(t),iio=r(pk," or "),yB=n(pk,"A",{href:!0});var grt=s(yB);dio=r(grt,"LxmertTokenizerFast"),grt.forEach(t),cio=r(pk," (LXMERT model)"),pk.forEach(t),fio=i(S),rh=n(S,"LI",{});var sLe=s(rh);lse=n(sLe,"STRONG",{});var hrt=s(lse);mio=r(hrt,"m2m_100"),hrt.forEach(t),gio=r(sLe," \u2014 "),xB=n(sLe,"A",{href:!0});var prt=s(xB);hio=r(prt,"M2M100Tokenizer"),prt.forEach(t),pio=r(sLe," (M2M100 model)"),sLe.forEach(t),uio=i(S),th=n(S,"LI",{});var lLe=s(th);ise=n(lLe,"STRONG",{});var urt=s(ise);_io=r(urt,"marian"),urt.forEach(t),bio=r(lLe," \u2014 "),$B=n(lLe,"A",{href:!0});var _rt=s($B);vio=r(_rt,"MarianTokenizer"),_rt.forEach(t),Fio=r(lLe," (Marian model)"),lLe.forEach(t),Tio=i(S),ps=n(S,"LI",{});var uk=s(ps);dse=n(uk,"STRONG",{});var brt=s(dse);Mio=r(brt,"mbart"),brt.forEach(t),Eio=r(uk," \u2014 "),kB=n(uk,"A",{href:!0});var vrt=s(kB);Cio=r(vrt,"MBartTokenizer"),vrt.forEach(t),wio=r(uk," or "),SB=n(uk,"A",{href:!0});var Frt=s(SB);Aio=r(Frt,"MBartTokenizerFast"),Frt.forEach(t),Lio=r(uk," (mBART model)"),uk.forEach(t),yio=i(S),us=n(S,"LI",{});var _k=s(us);cse=n(_k,"STRONG",{});var Trt=s(cse);xio=r(Trt,"mbart50"),Trt.forEach(t),$io=r(_k," \u2014 "),RB=n(_k,"A",{href:!0});var Mrt=s(RB);kio=r(Mrt,"MBart50Tokenizer"),Mrt.forEach(t),Sio=r(_k," or "),PB=n(_k,"A",{href:!0});var Ert=s(PB);Rio=r(Ert,"MBart50TokenizerFast"),Ert.forEach(t),Pio=r(_k," (mBART-50 model)"),_k.forEach(t),Bio=i(S),_s=n(S,"LI",{});var bk=s(_s);fse=n(bk,"STRONG",{});var Crt=s(fse);Iio=r(Crt,"megatron-bert"),Crt.forEach(t),Nio=r(bk," \u2014 "),BB=n(bk,"A",{href:!0});var wrt=s(BB);qio=r(wrt,"BertTokenizer"),wrt.forEach(t),jio=r(bk," or "),IB=n(bk,"A",{href:!0});var Art=s(IB);Dio=r(Art,"BertTokenizerFast"),Art.forEach(t),Gio=r(bk," (Megatron-BERT model)"),bk.forEach(t),Oio=i(S),ah=n(S,"LI",{});var iLe=s(ah);mse=n(iLe,"STRONG",{});var Lrt=s(mse);Vio=r(Lrt,"mluke"),Lrt.forEach(t),Xio=r(iLe," \u2014 "),NB=n(iLe,"A",{href:!0});var yrt=s(NB);zio=r(yrt,"MLukeTokenizer"),yrt.forEach(t),Wio=r(iLe," (mLUKE model)"),iLe.forEach(t),Qio=i(S),bs=n(S,"LI",{});var vk=s(bs);gse=n(vk,"STRONG",{});var xrt=s(gse);Hio=r(xrt,"mobilebert"),xrt.forEach(t),Uio=r(vk," \u2014 "),qB=n(vk,"A",{href:!0});var $rt=s(qB);Jio=r($rt,"MobileBertTokenizer"),$rt.forEach(t),Yio=r(vk," or "),jB=n(vk,"A",{href:!0});var krt=s(jB);Kio=r(krt,"MobileBertTokenizerFast"),krt.forEach(t),Zio=r(vk," (MobileBERT model)"),vk.forEach(t),edo=i(S),vs=n(S,"LI",{});var Fk=s(vs);hse=n(Fk,"STRONG",{});var Srt=s(hse);odo=r(Srt,"mpnet"),Srt.forEach(t),rdo=r(Fk," \u2014 "),DB=n(Fk,"A",{href:!0});var Rrt=s(DB);tdo=r(Rrt,"MPNetTokenizer"),Rrt.forEach(t),ado=r(Fk," or "),GB=n(Fk,"A",{href:!0});var Prt=s(GB);ndo=r(Prt,"MPNetTokenizerFast"),Prt.forEach(t),sdo=r(Fk," (MPNet model)"),Fk.forEach(t),ldo=i(S),Fs=n(S,"LI",{});var Tk=s(Fs);pse=n(Tk,"STRONG",{});var Brt=s(pse);ido=r(Brt,"mt5"),Brt.forEach(t),ddo=r(Tk," \u2014 "),OB=n(Tk,"A",{href:!0});var Irt=s(OB);cdo=r(Irt,"MT5Tokenizer"),Irt.forEach(t),fdo=r(Tk," or "),VB=n(Tk,"A",{href:!0});var Nrt=s(VB);mdo=r(Nrt,"MT5TokenizerFast"),Nrt.forEach(t),gdo=r(Tk," (MT5 model)"),Tk.forEach(t),hdo=i(S),Ts=n(S,"LI",{});var Mk=s(Ts);use=n(Mk,"STRONG",{});var qrt=s(use);pdo=r(qrt,"nystromformer"),qrt.forEach(t),udo=r(Mk," \u2014 "),XB=n(Mk,"A",{href:!0});var jrt=s(XB);_do=r(jrt,"AlbertTokenizer"),jrt.forEach(t),bdo=r(Mk," or "),zB=n(Mk,"A",{href:!0});var Drt=s(zB);vdo=r(Drt,"AlbertTokenizerFast"),Drt.forEach(t),Fdo=r(Mk," (Nystr\xF6mformer model)"),Mk.forEach(t),Tdo=i(S),Ms=n(S,"LI",{});var Ek=s(Ms);_se=n(Ek,"STRONG",{});var Grt=s(_se);Mdo=r(Grt,"openai-gpt"),Grt.forEach(t),Edo=r(Ek," \u2014 "),WB=n(Ek,"A",{href:!0});var Ort=s(WB);Cdo=r(Ort,"OpenAIGPTTokenizer"),Ort.forEach(t),wdo=r(Ek," or "),QB=n(Ek,"A",{href:!0});var Vrt=s(QB);Ado=r(Vrt,"OpenAIGPTTokenizerFast"),Vrt.forEach(t),Ldo=r(Ek," (OpenAI GPT model)"),Ek.forEach(t),ydo=i(S),nh=n(S,"LI",{});var dLe=s(nh);bse=n(dLe,"STRONG",{});var Xrt=s(bse);xdo=r(Xrt,"opt"),Xrt.forEach(t),$do=r(dLe," \u2014 "),HB=n(dLe,"A",{href:!0});var zrt=s(HB);kdo=r(zrt,"GPT2Tokenizer"),zrt.forEach(t),Sdo=r(dLe," (OPT model)"),dLe.forEach(t),Rdo=i(S),Es=n(S,"LI",{});var Ck=s(Es);vse=n(Ck,"STRONG",{});var Wrt=s(vse);Pdo=r(Wrt,"pegasus"),Wrt.forEach(t),Bdo=r(Ck," \u2014 "),UB=n(Ck,"A",{href:!0});var Qrt=s(UB);Ido=r(Qrt,"PegasusTokenizer"),Qrt.forEach(t),Ndo=r(Ck," or "),JB=n(Ck,"A",{href:!0});var Hrt=s(JB);qdo=r(Hrt,"PegasusTokenizerFast"),Hrt.forEach(t),jdo=r(Ck," (Pegasus model)"),Ck.forEach(t),Ddo=i(S),sh=n(S,"LI",{});var cLe=s(sh);Fse=n(cLe,"STRONG",{});var Urt=s(Fse);Gdo=r(Urt,"perceiver"),Urt.forEach(t),Odo=r(cLe," \u2014 "),YB=n(cLe,"A",{href:!0});var Jrt=s(YB);Vdo=r(Jrt,"PerceiverTokenizer"),Jrt.forEach(t),Xdo=r(cLe," (Perceiver model)"),cLe.forEach(t),zdo=i(S),lh=n(S,"LI",{});var fLe=s(lh);Tse=n(fLe,"STRONG",{});var Yrt=s(Tse);Wdo=r(Yrt,"phobert"),Yrt.forEach(t),Qdo=r(fLe," \u2014 "),KB=n(fLe,"A",{href:!0});var Krt=s(KB);Hdo=r(Krt,"PhobertTokenizer"),Krt.forEach(t),Udo=r(fLe," (PhoBERT model)"),fLe.forEach(t),Jdo=i(S),ih=n(S,"LI",{});var mLe=s(ih);Mse=n(mLe,"STRONG",{});var Zrt=s(Mse);Ydo=r(Zrt,"plbart"),Zrt.forEach(t),Kdo=r(mLe," \u2014 "),ZB=n(mLe,"A",{href:!0});var ett=s(ZB);Zdo=r(ett,"PLBartTokenizer"),ett.forEach(t),eco=r(mLe," (PLBart model)"),mLe.forEach(t),oco=i(S),dh=n(S,"LI",{});var gLe=s(dh);Ese=n(gLe,"STRONG",{});var ott=s(Ese);rco=r(ott,"prophetnet"),ott.forEach(t),tco=r(gLe," \u2014 "),eI=n(gLe,"A",{href:!0});var rtt=s(eI);aco=r(rtt,"ProphetNetTokenizer"),rtt.forEach(t),nco=r(gLe," (ProphetNet model)"),gLe.forEach(t),sco=i(S),Cs=n(S,"LI",{});var wk=s(Cs);Cse=n(wk,"STRONG",{});var ttt=s(Cse);lco=r(ttt,"qdqbert"),ttt.forEach(t),ico=r(wk," \u2014 "),oI=n(wk,"A",{href:!0});var att=s(oI);dco=r(att,"BertTokenizer"),att.forEach(t),cco=r(wk," or "),rI=n(wk,"A",{href:!0});var ntt=s(rI);fco=r(ntt,"BertTokenizerFast"),ntt.forEach(t),mco=r(wk," (QDQBert model)"),wk.forEach(t),gco=i(S),ch=n(S,"LI",{});var hLe=s(ch);wse=n(hLe,"STRONG",{});var stt=s(wse);hco=r(stt,"rag"),stt.forEach(t),pco=r(hLe," \u2014 "),tI=n(hLe,"A",{href:!0});var ltt=s(tI);uco=r(ltt,"RagTokenizer"),ltt.forEach(t),_co=r(hLe," (RAG model)"),hLe.forEach(t),bco=i(S),ws=n(S,"LI",{});var Ak=s(ws);Ase=n(Ak,"STRONG",{});var itt=s(Ase);vco=r(itt,"realm"),itt.forEach(t),Fco=r(Ak," \u2014 "),aI=n(Ak,"A",{href:!0});var dtt=s(aI);Tco=r(dtt,"RealmTokenizer"),dtt.forEach(t),Mco=r(Ak," or "),nI=n(Ak,"A",{href:!0});var ctt=s(nI);Eco=r(ctt,"RealmTokenizerFast"),ctt.forEach(t),Cco=r(Ak," (REALM model)"),Ak.forEach(t),wco=i(S),As=n(S,"LI",{});var Lk=s(As);Lse=n(Lk,"STRONG",{});var ftt=s(Lse);Aco=r(ftt,"reformer"),ftt.forEach(t),Lco=r(Lk," \u2014 "),sI=n(Lk,"A",{href:!0});var mtt=s(sI);yco=r(mtt,"ReformerTokenizer"),mtt.forEach(t),xco=r(Lk," or "),lI=n(Lk,"A",{href:!0});var gtt=s(lI);$co=r(gtt,"ReformerTokenizerFast"),gtt.forEach(t),kco=r(Lk," (Reformer model)"),Lk.forEach(t),Sco=i(S),Ls=n(S,"LI",{});var yk=s(Ls);yse=n(yk,"STRONG",{});var htt=s(yse);Rco=r(htt,"rembert"),htt.forEach(t),Pco=r(yk," \u2014 "),iI=n(yk,"A",{href:!0});var ptt=s(iI);Bco=r(ptt,"RemBertTokenizer"),ptt.forEach(t),Ico=r(yk," or "),dI=n(yk,"A",{href:!0});var utt=s(dI);Nco=r(utt,"RemBertTokenizerFast"),utt.forEach(t),qco=r(yk," (RemBERT model)"),yk.forEach(t),jco=i(S),ys=n(S,"LI",{});var xk=s(ys);xse=n(xk,"STRONG",{});var _tt=s(xse);Dco=r(_tt,"retribert"),_tt.forEach(t),Gco=r(xk," \u2014 "),cI=n(xk,"A",{href:!0});var btt=s(cI);Oco=r(btt,"RetriBertTokenizer"),btt.forEach(t),Vco=r(xk," or "),fI=n(xk,"A",{href:!0});var vtt=s(fI);Xco=r(vtt,"RetriBertTokenizerFast"),vtt.forEach(t),zco=r(xk," (RetriBERT model)"),xk.forEach(t),Wco=i(S),xs=n(S,"LI",{});var $k=s(xs);$se=n($k,"STRONG",{});var Ftt=s($se);Qco=r(Ftt,"roberta"),Ftt.forEach(t),Hco=r($k," \u2014 "),mI=n($k,"A",{href:!0});var Ttt=s(mI);Uco=r(Ttt,"RobertaTokenizer"),Ttt.forEach(t),Jco=r($k," or "),gI=n($k,"A",{href:!0});var Mtt=s(gI);Yco=r(Mtt,"RobertaTokenizerFast"),Mtt.forEach(t),Kco=r($k," (RoBERTa model)"),$k.forEach(t),Zco=i(S),$s=n(S,"LI",{});var kk=s($s);kse=n(kk,"STRONG",{});var Ett=s(kse);efo=r(Ett,"roformer"),Ett.forEach(t),ofo=r(kk," \u2014 "),hI=n(kk,"A",{href:!0});var Ctt=s(hI);rfo=r(Ctt,"RoFormerTokenizer"),Ctt.forEach(t),tfo=r(kk," or "),pI=n(kk,"A",{href:!0});var wtt=s(pI);afo=r(wtt,"RoFormerTokenizerFast"),wtt.forEach(t),nfo=r(kk," (RoFormer model)"),kk.forEach(t),sfo=i(S),fh=n(S,"LI",{});var pLe=s(fh);Sse=n(pLe,"STRONG",{});var Att=s(Sse);lfo=r(Att,"speech_to_text"),Att.forEach(t),ifo=r(pLe," \u2014 "),uI=n(pLe,"A",{href:!0});var Ltt=s(uI);dfo=r(Ltt,"Speech2TextTokenizer"),Ltt.forEach(t),cfo=r(pLe," (Speech2Text model)"),pLe.forEach(t),ffo=i(S),mh=n(S,"LI",{});var uLe=s(mh);Rse=n(uLe,"STRONG",{});var ytt=s(Rse);mfo=r(ytt,"speech_to_text_2"),ytt.forEach(t),gfo=r(uLe," \u2014 "),_I=n(uLe,"A",{href:!0});var xtt=s(_I);hfo=r(xtt,"Speech2Text2Tokenizer"),xtt.forEach(t),pfo=r(uLe," (Speech2Text2 model)"),uLe.forEach(t),ufo=i(S),ks=n(S,"LI",{});var Sk=s(ks);Pse=n(Sk,"STRONG",{});var $tt=s(Pse);_fo=r($tt,"splinter"),$tt.forEach(t),bfo=r(Sk," \u2014 "),bI=n(Sk,"A",{href:!0});var ktt=s(bI);vfo=r(ktt,"SplinterTokenizer"),ktt.forEach(t),Ffo=r(Sk," or "),vI=n(Sk,"A",{href:!0});var Stt=s(vI);Tfo=r(Stt,"SplinterTokenizerFast"),Stt.forEach(t),Mfo=r(Sk," (Splinter model)"),Sk.forEach(t),Efo=i(S),Ss=n(S,"LI",{});var Rk=s(Ss);Bse=n(Rk,"STRONG",{});var Rtt=s(Bse);Cfo=r(Rtt,"squeezebert"),Rtt.forEach(t),wfo=r(Rk," \u2014 "),FI=n(Rk,"A",{href:!0});var Ptt=s(FI);Afo=r(Ptt,"SqueezeBertTokenizer"),Ptt.forEach(t),Lfo=r(Rk," or "),TI=n(Rk,"A",{href:!0});var Btt=s(TI);yfo=r(Btt,"SqueezeBertTokenizerFast"),Btt.forEach(t),xfo=r(Rk," (SqueezeBERT model)"),Rk.forEach(t),$fo=i(S),Rs=n(S,"LI",{});var Pk=s(Rs);Ise=n(Pk,"STRONG",{});var Itt=s(Ise);kfo=r(Itt,"t5"),Itt.forEach(t),Sfo=r(Pk," \u2014 "),MI=n(Pk,"A",{href:!0});var Ntt=s(MI);Rfo=r(Ntt,"T5Tokenizer"),Ntt.forEach(t),Pfo=r(Pk," or "),EI=n(Pk,"A",{href:!0});var qtt=s(EI);Bfo=r(qtt,"T5TokenizerFast"),qtt.forEach(t),Ifo=r(Pk," (T5 model)"),Pk.forEach(t),Nfo=i(S),gh=n(S,"LI",{});var _Le=s(gh);Nse=n(_Le,"STRONG",{});var jtt=s(Nse);qfo=r(jtt,"tapas"),jtt.forEach(t),jfo=r(_Le," \u2014 "),CI=n(_Le,"A",{href:!0});var Dtt=s(CI);Dfo=r(Dtt,"TapasTokenizer"),Dtt.forEach(t),Gfo=r(_Le," (TAPAS model)"),_Le.forEach(t),Ofo=i(S),hh=n(S,"LI",{});var bLe=s(hh);qse=n(bLe,"STRONG",{});var Gtt=s(qse);Vfo=r(Gtt,"tapex"),Gtt.forEach(t),Xfo=r(bLe," \u2014 "),wI=n(bLe,"A",{href:!0});var Ott=s(wI);zfo=r(Ott,"TapexTokenizer"),Ott.forEach(t),Wfo=r(bLe," (TAPEX model)"),bLe.forEach(t),Qfo=i(S),ph=n(S,"LI",{});var vLe=s(ph);jse=n(vLe,"STRONG",{});var Vtt=s(jse);Hfo=r(Vtt,"transfo-xl"),Vtt.forEach(t),Ufo=r(vLe," \u2014 "),AI=n(vLe,"A",{href:!0});var Xtt=s(AI);Jfo=r(Xtt,"TransfoXLTokenizer"),Xtt.forEach(t),Yfo=r(vLe," (Transformer-XL model)"),vLe.forEach(t),Kfo=i(S),Ps=n(S,"LI",{});var Bk=s(Ps);Dse=n(Bk,"STRONG",{});var ztt=s(Dse);Zfo=r(ztt,"vilt"),ztt.forEach(t),emo=r(Bk," \u2014 "),LI=n(Bk,"A",{href:!0});var Wtt=s(LI);omo=r(Wtt,"BertTokenizer"),Wtt.forEach(t),rmo=r(Bk," or "),yI=n(Bk,"A",{href:!0});var Qtt=s(yI);tmo=r(Qtt,"BertTokenizerFast"),Qtt.forEach(t),amo=r(Bk," (ViLT model)"),Bk.forEach(t),nmo=i(S),Bs=n(S,"LI",{});var Ik=s(Bs);Gse=n(Ik,"STRONG",{});var Htt=s(Gse);smo=r(Htt,"visual_bert"),Htt.forEach(t),lmo=r(Ik," \u2014 "),xI=n(Ik,"A",{href:!0});var Utt=s(xI);imo=r(Utt,"BertTokenizer"),Utt.forEach(t),dmo=r(Ik," or "),$I=n(Ik,"A",{href:!0});var Jtt=s($I);cmo=r(Jtt,"BertTokenizerFast"),Jtt.forEach(t),fmo=r(Ik," (VisualBERT model)"),Ik.forEach(t),mmo=i(S),uh=n(S,"LI",{});var FLe=s(uh);Ose=n(FLe,"STRONG",{});var Ytt=s(Ose);gmo=r(Ytt,"wav2vec2"),Ytt.forEach(t),hmo=r(FLe," \u2014 "),kI=n(FLe,"A",{href:!0});var Ktt=s(kI);pmo=r(Ktt,"Wav2Vec2CTCTokenizer"),Ktt.forEach(t),umo=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),_mo=i(S),_h=n(S,"LI",{});var TLe=s(_h);Vse=n(TLe,"STRONG",{});var Ztt=s(Vse);bmo=r(Ztt,"wav2vec2-conformer"),Ztt.forEach(t),vmo=r(TLe," \u2014 "),SI=n(TLe,"A",{href:!0});var eat=s(SI);Fmo=r(eat,"Wav2Vec2CTCTokenizer"),eat.forEach(t),Tmo=r(TLe," (Wav2Vec2-Conformer model)"),TLe.forEach(t),Mmo=i(S),bh=n(S,"LI",{});var MLe=s(bh);Xse=n(MLe,"STRONG",{});var oat=s(Xse);Emo=r(oat,"wav2vec2_phoneme"),oat.forEach(t),Cmo=r(MLe," \u2014 "),RI=n(MLe,"A",{href:!0});var rat=s(RI);wmo=r(rat,"Wav2Vec2PhonemeCTCTokenizer"),rat.forEach(t),Amo=r(MLe," (Wav2Vec2Phoneme model)"),MLe.forEach(t),Lmo=i(S),Is=n(S,"LI",{});var Nk=s(Is);zse=n(Nk,"STRONG",{});var tat=s(zse);ymo=r(tat,"xglm"),tat.forEach(t),xmo=r(Nk," \u2014 "),PI=n(Nk,"A",{href:!0});var aat=s(PI);$mo=r(aat,"XGLMTokenizer"),aat.forEach(t),kmo=r(Nk," or "),BI=n(Nk,"A",{href:!0});var nat=s(BI);Smo=r(nat,"XGLMTokenizerFast"),nat.forEach(t),Rmo=r(Nk," (XGLM model)"),Nk.forEach(t),Pmo=i(S),vh=n(S,"LI",{});var ELe=s(vh);Wse=n(ELe,"STRONG",{});var sat=s(Wse);Bmo=r(sat,"xlm"),sat.forEach(t),Imo=r(ELe," \u2014 "),II=n(ELe,"A",{href:!0});var lat=s(II);Nmo=r(lat,"XLMTokenizer"),lat.forEach(t),qmo=r(ELe," (XLM model)"),ELe.forEach(t),jmo=i(S),Fh=n(S,"LI",{});var CLe=s(Fh);Qse=n(CLe,"STRONG",{});var iat=s(Qse);Dmo=r(iat,"xlm-prophetnet"),iat.forEach(t),Gmo=r(CLe," \u2014 "),NI=n(CLe,"A",{href:!0});var dat=s(NI);Omo=r(dat,"XLMProphetNetTokenizer"),dat.forEach(t),Vmo=r(CLe," (XLM-ProphetNet model)"),CLe.forEach(t),Xmo=i(S),Ns=n(S,"LI",{});var qk=s(Ns);Hse=n(qk,"STRONG",{});var cat=s(Hse);zmo=r(cat,"xlm-roberta"),cat.forEach(t),Wmo=r(qk," \u2014 "),qI=n(qk,"A",{href:!0});var fat=s(qI);Qmo=r(fat,"XLMRobertaTokenizer"),fat.forEach(t),Hmo=r(qk," or "),jI=n(qk,"A",{href:!0});var mat=s(jI);Umo=r(mat,"XLMRobertaTokenizerFast"),mat.forEach(t),Jmo=r(qk," (XLM-RoBERTa model)"),qk.forEach(t),Ymo=i(S),qs=n(S,"LI",{});var jk=s(qs);Use=n(jk,"STRONG",{});var gat=s(Use);Kmo=r(gat,"xlm-roberta-xl"),gat.forEach(t),Zmo=r(jk," \u2014 "),DI=n(jk,"A",{href:!0});var hat=s(DI);ego=r(hat,"RobertaTokenizer"),hat.forEach(t),ogo=r(jk," or "),GI=n(jk,"A",{href:!0});var pat=s(GI);rgo=r(pat,"RobertaTokenizerFast"),pat.forEach(t),tgo=r(jk," (XLM-RoBERTa-XL model)"),jk.forEach(t),ago=i(S),js=n(S,"LI",{});var Dk=s(js);Jse=n(Dk,"STRONG",{});var uat=s(Jse);ngo=r(uat,"xlnet"),uat.forEach(t),sgo=r(Dk," \u2014 "),OI=n(Dk,"A",{href:!0});var _at=s(OI);lgo=r(_at,"XLNetTokenizer"),_at.forEach(t),igo=r(Dk," or "),VI=n(Dk,"A",{href:!0});var bat=s(VI);dgo=r(bat,"XLNetTokenizerFast"),bat.forEach(t),cgo=r(Dk," (XLNet model)"),Dk.forEach(t),fgo=i(S),Ds=n(S,"LI",{});var Gk=s(Ds);Yse=n(Gk,"STRONG",{});var vat=s(Yse);mgo=r(vat,"yoso"),vat.forEach(t),ggo=r(Gk," \u2014 "),XI=n(Gk,"A",{href:!0});var Fat=s(XI);hgo=r(Fat,"AlbertTokenizer"),Fat.forEach(t),pgo=r(Gk," or "),zI=n(Gk,"A",{href:!0});var Tat=s(zI);ugo=r(Tat,"AlbertTokenizerFast"),Tat.forEach(t),_go=r(Gk," (YOSO model)"),Gk.forEach(t),S.forEach(t),bgo=i(Ws),T(Th.$$.fragment,Ws),Ws.forEach(t),vgo=i(zs),Mh=n(zs,"DIV",{class:!0});var mVe=s(Mh);T(RL.$$.fragment,mVe),Fgo=i(mVe),Kse=n(mVe,"P",{});var Mat=s(Kse);Tgo=r(Mat,"Register a new tokenizer in this mapping."),Mat.forEach(t),mVe.forEach(t),zs.forEach(t),fGe=i(f),ki=n(f,"H2",{class:!0});var gVe=s(ki);Eh=n(gVe,"A",{id:!0,class:!0,href:!0});var Eat=s(Eh);Zse=n(Eat,"SPAN",{});var Cat=s(Zse);T(PL.$$.fragment,Cat),Cat.forEach(t),Eat.forEach(t),Mgo=i(gVe),ele=n(gVe,"SPAN",{});var wat=s(ele);Ego=r(wat,"AutoFeatureExtractor"),wat.forEach(t),gVe.forEach(t),mGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(BL.$$.fragment,Qs),Cgo=i(Qs),IL=n(Qs,"P",{});var hVe=s(IL);wgo=r(hVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WI=n(hVe,"A",{href:!0});var Aat=s(WI);Ago=r(Aat,"AutoFeatureExtractor.from_pretrained()"),Aat.forEach(t),Lgo=r(hVe," class method."),hVe.forEach(t),ygo=i(Qs),NL=n(Qs,"P",{});var pVe=s(NL);xgo=r(pVe,"This class cannot be instantiated directly using "),ole=n(pVe,"CODE",{});var Lat=s(ole);$go=r(Lat,"__init__()"),Lat.forEach(t),kgo=r(pVe," (throws an error)."),pVe.forEach(t),Sgo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(qL.$$.fragment,ra),Rgo=i(ra),rle=n(ra,"P",{});var yat=s(rle);Pgo=r(yat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yat.forEach(t),Bgo=i(ra),ka=n(ra,"P",{});var TA=s(ka);Igo=r(TA,"The feature extractor class to instantiate is selected based on the "),tle=n(TA,"CODE",{});var xat=s(tle);Ngo=r(xat,"model_type"),xat.forEach(t),qgo=r(TA,` property of the config object
(either passed as an argument or loaded from `),ale=n(TA,"CODE",{});var $at=s(ale);jgo=r($at,"pretrained_model_name_or_path"),$at.forEach(t),Dgo=r(TA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nle=n(TA,"CODE",{});var kat=s(nle);Ggo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),Ogo=r(TA,":"),TA.forEach(t),Vgo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ch=n(K,"LI",{});var wLe=s(Ch);sle=n(wLe,"STRONG",{});var Sat=s(sle);Xgo=r(Sat,"beit"),Sat.forEach(t),zgo=r(wLe," \u2014 "),QI=n(wLe,"A",{href:!0});var Rat=s(QI);Wgo=r(Rat,"BeitFeatureExtractor"),Rat.forEach(t),Qgo=r(wLe," (BEiT model)"),wLe.forEach(t),Hgo=i(K),wh=n(K,"LI",{});var ALe=s(wh);lle=n(ALe,"STRONG",{});var Pat=s(lle);Ugo=r(Pat,"clip"),Pat.forEach(t),Jgo=r(ALe," \u2014 "),HI=n(ALe,"A",{href:!0});var Bat=s(HI);Ygo=r(Bat,"CLIPFeatureExtractor"),Bat.forEach(t),Kgo=r(ALe," (CLIP model)"),ALe.forEach(t),Zgo=i(K),Ah=n(K,"LI",{});var LLe=s(Ah);ile=n(LLe,"STRONG",{});var Iat=s(ile);eho=r(Iat,"convnext"),Iat.forEach(t),oho=r(LLe," \u2014 "),UI=n(LLe,"A",{href:!0});var Nat=s(UI);rho=r(Nat,"ConvNextFeatureExtractor"),Nat.forEach(t),tho=r(LLe," (ConvNeXT model)"),LLe.forEach(t),aho=i(K),Lh=n(K,"LI",{});var yLe=s(Lh);dle=n(yLe,"STRONG",{});var qat=s(dle);nho=r(qat,"cvt"),qat.forEach(t),sho=r(yLe," \u2014 "),JI=n(yLe,"A",{href:!0});var jat=s(JI);lho=r(jat,"ConvNextFeatureExtractor"),jat.forEach(t),iho=r(yLe," (CvT model)"),yLe.forEach(t),dho=i(K),yh=n(K,"LI",{});var xLe=s(yh);cle=n(xLe,"STRONG",{});var Dat=s(cle);cho=r(Dat,"data2vec-audio"),Dat.forEach(t),fho=r(xLe," \u2014 "),YI=n(xLe,"A",{href:!0});var Gat=s(YI);mho=r(Gat,"Wav2Vec2FeatureExtractor"),Gat.forEach(t),gho=r(xLe," (Data2VecAudio model)"),xLe.forEach(t),hho=i(K),xh=n(K,"LI",{});var $Le=s(xh);fle=n($Le,"STRONG",{});var Oat=s(fle);pho=r(Oat,"data2vec-vision"),Oat.forEach(t),uho=r($Le," \u2014 "),KI=n($Le,"A",{href:!0});var Vat=s(KI);_ho=r(Vat,"BeitFeatureExtractor"),Vat.forEach(t),bho=r($Le," (Data2VecVision model)"),$Le.forEach(t),vho=i(K),$h=n(K,"LI",{});var kLe=s($h);mle=n(kLe,"STRONG",{});var Xat=s(mle);Fho=r(Xat,"deit"),Xat.forEach(t),Tho=r(kLe," \u2014 "),ZI=n(kLe,"A",{href:!0});var zat=s(ZI);Mho=r(zat,"DeiTFeatureExtractor"),zat.forEach(t),Eho=r(kLe," (DeiT model)"),kLe.forEach(t),Cho=i(K),kh=n(K,"LI",{});var SLe=s(kh);gle=n(SLe,"STRONG",{});var Wat=s(gle);who=r(Wat,"detr"),Wat.forEach(t),Aho=r(SLe," \u2014 "),eN=n(SLe,"A",{href:!0});var Qat=s(eN);Lho=r(Qat,"DetrFeatureExtractor"),Qat.forEach(t),yho=r(SLe," (DETR model)"),SLe.forEach(t),xho=i(K),Sh=n(K,"LI",{});var RLe=s(Sh);hle=n(RLe,"STRONG",{});var Hat=s(hle);$ho=r(Hat,"dpt"),Hat.forEach(t),kho=r(RLe," \u2014 "),oN=n(RLe,"A",{href:!0});var Uat=s(oN);Sho=r(Uat,"DPTFeatureExtractor"),Uat.forEach(t),Rho=r(RLe," (DPT model)"),RLe.forEach(t),Pho=i(K),Rh=n(K,"LI",{});var PLe=s(Rh);ple=n(PLe,"STRONG",{});var Jat=s(ple);Bho=r(Jat,"flava"),Jat.forEach(t),Iho=r(PLe," \u2014 "),rN=n(PLe,"A",{href:!0});var Yat=s(rN);Nho=r(Yat,"FlavaFeatureExtractor"),Yat.forEach(t),qho=r(PLe," (FLAVA model)"),PLe.forEach(t),jho=i(K),Ph=n(K,"LI",{});var BLe=s(Ph);ule=n(BLe,"STRONG",{});var Kat=s(ule);Dho=r(Kat,"glpn"),Kat.forEach(t),Gho=r(BLe," \u2014 "),tN=n(BLe,"A",{href:!0});var Zat=s(tN);Oho=r(Zat,"GLPNFeatureExtractor"),Zat.forEach(t),Vho=r(BLe," (GLPN model)"),BLe.forEach(t),Xho=i(K),Bh=n(K,"LI",{});var ILe=s(Bh);_le=n(ILe,"STRONG",{});var ent=s(_le);zho=r(ent,"hubert"),ent.forEach(t),Who=r(ILe," \u2014 "),aN=n(ILe,"A",{href:!0});var ont=s(aN);Qho=r(ont,"Wav2Vec2FeatureExtractor"),ont.forEach(t),Hho=r(ILe," (Hubert model)"),ILe.forEach(t),Uho=i(K),Ih=n(K,"LI",{});var NLe=s(Ih);ble=n(NLe,"STRONG",{});var rnt=s(ble);Jho=r(rnt,"imagegpt"),rnt.forEach(t),Yho=r(NLe," \u2014 "),nN=n(NLe,"A",{href:!0});var tnt=s(nN);Kho=r(tnt,"ImageGPTFeatureExtractor"),tnt.forEach(t),Zho=r(NLe," (ImageGPT model)"),NLe.forEach(t),epo=i(K),Nh=n(K,"LI",{});var qLe=s(Nh);vle=n(qLe,"STRONG",{});var ant=s(vle);opo=r(ant,"layoutlmv2"),ant.forEach(t),rpo=r(qLe," \u2014 "),sN=n(qLe,"A",{href:!0});var nnt=s(sN);tpo=r(nnt,"LayoutLMv2FeatureExtractor"),nnt.forEach(t),apo=r(qLe," (LayoutLMv2 model)"),qLe.forEach(t),npo=i(K),qh=n(K,"LI",{});var jLe=s(qh);Fle=n(jLe,"STRONG",{});var snt=s(Fle);spo=r(snt,"layoutlmv3"),snt.forEach(t),lpo=r(jLe," \u2014 "),lN=n(jLe,"A",{href:!0});var lnt=s(lN);ipo=r(lnt,"LayoutLMv3FeatureExtractor"),lnt.forEach(t),dpo=r(jLe," (LayoutLMv3 model)"),jLe.forEach(t),cpo=i(K),jh=n(K,"LI",{});var DLe=s(jh);Tle=n(DLe,"STRONG",{});var int=s(Tle);fpo=r(int,"levit"),int.forEach(t),mpo=r(DLe," \u2014 "),iN=n(DLe,"A",{href:!0});var dnt=s(iN);gpo=r(dnt,"LevitFeatureExtractor"),dnt.forEach(t),hpo=r(DLe," (LeViT model)"),DLe.forEach(t),ppo=i(K),Dh=n(K,"LI",{});var GLe=s(Dh);Mle=n(GLe,"STRONG",{});var cnt=s(Mle);upo=r(cnt,"maskformer"),cnt.forEach(t),_po=r(GLe," \u2014 "),dN=n(GLe,"A",{href:!0});var fnt=s(dN);bpo=r(fnt,"MaskFormerFeatureExtractor"),fnt.forEach(t),vpo=r(GLe," (MaskFormer model)"),GLe.forEach(t),Fpo=i(K),Gh=n(K,"LI",{});var OLe=s(Gh);Ele=n(OLe,"STRONG",{});var mnt=s(Ele);Tpo=r(mnt,"mctct"),mnt.forEach(t),Mpo=r(OLe," \u2014 "),cN=n(OLe,"A",{href:!0});var gnt=s(cN);Epo=r(gnt,"MCTCTFeatureExtractor"),gnt.forEach(t),Cpo=r(OLe," (M-CTC-T model)"),OLe.forEach(t),wpo=i(K),Oh=n(K,"LI",{});var VLe=s(Oh);Cle=n(VLe,"STRONG",{});var hnt=s(Cle);Apo=r(hnt,"perceiver"),hnt.forEach(t),Lpo=r(VLe," \u2014 "),fN=n(VLe,"A",{href:!0});var pnt=s(fN);ypo=r(pnt,"PerceiverFeatureExtractor"),pnt.forEach(t),xpo=r(VLe," (Perceiver model)"),VLe.forEach(t),$po=i(K),Vh=n(K,"LI",{});var XLe=s(Vh);wle=n(XLe,"STRONG",{});var unt=s(wle);kpo=r(unt,"poolformer"),unt.forEach(t),Spo=r(XLe," \u2014 "),mN=n(XLe,"A",{href:!0});var _nt=s(mN);Rpo=r(_nt,"PoolFormerFeatureExtractor"),_nt.forEach(t),Ppo=r(XLe," (PoolFormer model)"),XLe.forEach(t),Bpo=i(K),Xh=n(K,"LI",{});var zLe=s(Xh);Ale=n(zLe,"STRONG",{});var bnt=s(Ale);Ipo=r(bnt,"regnet"),bnt.forEach(t),Npo=r(zLe," \u2014 "),gN=n(zLe,"A",{href:!0});var vnt=s(gN);qpo=r(vnt,"ConvNextFeatureExtractor"),vnt.forEach(t),jpo=r(zLe," (RegNet model)"),zLe.forEach(t),Dpo=i(K),zh=n(K,"LI",{});var WLe=s(zh);Lle=n(WLe,"STRONG",{});var Fnt=s(Lle);Gpo=r(Fnt,"resnet"),Fnt.forEach(t),Opo=r(WLe," \u2014 "),hN=n(WLe,"A",{href:!0});var Tnt=s(hN);Vpo=r(Tnt,"ConvNextFeatureExtractor"),Tnt.forEach(t),Xpo=r(WLe," (ResNet model)"),WLe.forEach(t),zpo=i(K),Wh=n(K,"LI",{});var QLe=s(Wh);yle=n(QLe,"STRONG",{});var Mnt=s(yle);Wpo=r(Mnt,"segformer"),Mnt.forEach(t),Qpo=r(QLe," \u2014 "),pN=n(QLe,"A",{href:!0});var Ent=s(pN);Hpo=r(Ent,"SegformerFeatureExtractor"),Ent.forEach(t),Upo=r(QLe," (SegFormer model)"),QLe.forEach(t),Jpo=i(K),Qh=n(K,"LI",{});var HLe=s(Qh);xle=n(HLe,"STRONG",{});var Cnt=s(xle);Ypo=r(Cnt,"speech_to_text"),Cnt.forEach(t),Kpo=r(HLe," \u2014 "),uN=n(HLe,"A",{href:!0});var wnt=s(uN);Zpo=r(wnt,"Speech2TextFeatureExtractor"),wnt.forEach(t),euo=r(HLe," (Speech2Text model)"),HLe.forEach(t),ouo=i(K),Hh=n(K,"LI",{});var ULe=s(Hh);$le=n(ULe,"STRONG",{});var Ant=s($le);ruo=r(Ant,"swin"),Ant.forEach(t),tuo=r(ULe," \u2014 "),_N=n(ULe,"A",{href:!0});var Lnt=s(_N);auo=r(Lnt,"ViTFeatureExtractor"),Lnt.forEach(t),nuo=r(ULe," (Swin Transformer model)"),ULe.forEach(t),suo=i(K),Uh=n(K,"LI",{});var JLe=s(Uh);kle=n(JLe,"STRONG",{});var ynt=s(kle);luo=r(ynt,"van"),ynt.forEach(t),iuo=r(JLe," \u2014 "),bN=n(JLe,"A",{href:!0});var xnt=s(bN);duo=r(xnt,"ConvNextFeatureExtractor"),xnt.forEach(t),cuo=r(JLe," (VAN model)"),JLe.forEach(t),fuo=i(K),Jh=n(K,"LI",{});var YLe=s(Jh);Sle=n(YLe,"STRONG",{});var $nt=s(Sle);muo=r($nt,"vilt"),$nt.forEach(t),guo=r(YLe," \u2014 "),vN=n(YLe,"A",{href:!0});var knt=s(vN);huo=r(knt,"ViltFeatureExtractor"),knt.forEach(t),puo=r(YLe," (ViLT model)"),YLe.forEach(t),uuo=i(K),Yh=n(K,"LI",{});var KLe=s(Yh);Rle=n(KLe,"STRONG",{});var Snt=s(Rle);_uo=r(Snt,"vit"),Snt.forEach(t),buo=r(KLe," \u2014 "),FN=n(KLe,"A",{href:!0});var Rnt=s(FN);vuo=r(Rnt,"ViTFeatureExtractor"),Rnt.forEach(t),Fuo=r(KLe," (ViT model)"),KLe.forEach(t),Tuo=i(K),Kh=n(K,"LI",{});var ZLe=s(Kh);Ple=n(ZLe,"STRONG",{});var Pnt=s(Ple);Muo=r(Pnt,"vit_mae"),Pnt.forEach(t),Euo=r(ZLe," \u2014 "),TN=n(ZLe,"A",{href:!0});var Bnt=s(TN);Cuo=r(Bnt,"ViTFeatureExtractor"),Bnt.forEach(t),wuo=r(ZLe," (ViTMAE model)"),ZLe.forEach(t),Auo=i(K),Zh=n(K,"LI",{});var eye=s(Zh);Ble=n(eye,"STRONG",{});var Int=s(Ble);Luo=r(Int,"wav2vec2"),Int.forEach(t),yuo=r(eye," \u2014 "),MN=n(eye,"A",{href:!0});var Nnt=s(MN);xuo=r(Nnt,"Wav2Vec2FeatureExtractor"),Nnt.forEach(t),$uo=r(eye," (Wav2Vec2 model)"),eye.forEach(t),kuo=i(K),ep=n(K,"LI",{});var oye=s(ep);Ile=n(oye,"STRONG",{});var qnt=s(Ile);Suo=r(qnt,"wav2vec2-conformer"),qnt.forEach(t),Ruo=r(oye," \u2014 "),EN=n(oye,"A",{href:!0});var jnt=s(EN);Puo=r(jnt,"Wav2Vec2FeatureExtractor"),jnt.forEach(t),Buo=r(oye," (Wav2Vec2-Conformer model)"),oye.forEach(t),Iuo=i(K),op=n(K,"LI",{});var rye=s(op);Nle=n(rye,"STRONG",{});var Dnt=s(Nle);Nuo=r(Dnt,"yolos"),Dnt.forEach(t),quo=r(rye," \u2014 "),CN=n(rye,"A",{href:!0});var Gnt=s(CN);juo=r(Gnt,"YolosFeatureExtractor"),Gnt.forEach(t),Duo=r(rye," (YOLOS model)"),rye.forEach(t),K.forEach(t),Guo=i(ra),T(rp.$$.fragment,ra),Ouo=i(ra),T(tp.$$.fragment,ra),ra.forEach(t),Vuo=i(Qs),ap=n(Qs,"DIV",{class:!0});var uVe=s(ap);T(jL.$$.fragment,uVe),Xuo=i(uVe),qle=n(uVe,"P",{});var Ont=s(qle);zuo=r(Ont,"Register a new feature extractor for this class."),Ont.forEach(t),uVe.forEach(t),Qs.forEach(t),gGe=i(f),Si=n(f,"H2",{class:!0});var _Ve=s(Si);np=n(_Ve,"A",{id:!0,class:!0,href:!0});var Vnt=s(np);jle=n(Vnt,"SPAN",{});var Xnt=s(jle);T(DL.$$.fragment,Xnt),Xnt.forEach(t),Vnt.forEach(t),Wuo=i(_Ve),Dle=n(_Ve,"SPAN",{});var znt=s(Dle);Quo=r(znt,"AutoProcessor"),znt.forEach(t),_Ve.forEach(t),hGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(GL.$$.fragment,Hs),Huo=i(Hs),OL=n(Hs,"P",{});var bVe=s(OL);Uuo=r(bVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wN=n(bVe,"A",{href:!0});var Wnt=s(wN);Juo=r(Wnt,"AutoProcessor.from_pretrained()"),Wnt.forEach(t),Yuo=r(bVe," class method."),bVe.forEach(t),Kuo=i(Hs),VL=n(Hs,"P",{});var vVe=s(VL);Zuo=r(vVe,"This class cannot be instantiated directly using "),Gle=n(vVe,"CODE",{});var Qnt=s(Gle);e_o=r(Qnt,"__init__()"),Qnt.forEach(t),o_o=r(vVe," (throws an error)."),vVe.forEach(t),r_o=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(XL.$$.fragment,ta),t_o=i(ta),Ole=n(ta,"P",{});var Hnt=s(Ole);a_o=r(Hnt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Hnt.forEach(t),n_o=i(ta),Ri=n(ta,"P",{});var Kee=s(Ri);s_o=r(Kee,"The processor class to instantiate is selected based on the "),Vle=n(Kee,"CODE",{});var Unt=s(Vle);l_o=r(Unt,"model_type"),Unt.forEach(t),i_o=r(Kee,` property of the config object (either
passed as an argument or loaded from `),Xle=n(Kee,"CODE",{});var Jnt=s(Xle);d_o=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),c_o=r(Kee," if possible):"),Kee.forEach(t),f_o=i(ta),he=n(ta,"UL",{});var _e=s(he);sp=n(_e,"LI",{});var tye=s(sp);zle=n(tye,"STRONG",{});var Ynt=s(zle);m_o=r(Ynt,"clip"),Ynt.forEach(t),g_o=r(tye," \u2014 "),AN=n(tye,"A",{href:!0});var Knt=s(AN);h_o=r(Knt,"CLIPProcessor"),Knt.forEach(t),p_o=r(tye," (CLIP model)"),tye.forEach(t),u_o=i(_e),lp=n(_e,"LI",{});var aye=s(lp);Wle=n(aye,"STRONG",{});var Znt=s(Wle);__o=r(Znt,"flava"),Znt.forEach(t),b_o=r(aye," \u2014 "),Qle=n(aye,"CODE",{});var est=s(Qle);v_o=r(est,"FLAVAProcessor"),est.forEach(t),F_o=r(aye," (FLAVA model)"),aye.forEach(t),T_o=i(_e),ip=n(_e,"LI",{});var nye=s(ip);Hle=n(nye,"STRONG",{});var ost=s(Hle);M_o=r(ost,"layoutlmv2"),ost.forEach(t),E_o=r(nye," \u2014 "),LN=n(nye,"A",{href:!0});var rst=s(LN);C_o=r(rst,"LayoutLMv2Processor"),rst.forEach(t),w_o=r(nye," (LayoutLMv2 model)"),nye.forEach(t),A_o=i(_e),dp=n(_e,"LI",{});var sye=s(dp);Ule=n(sye,"STRONG",{});var tst=s(Ule);L_o=r(tst,"layoutlmv3"),tst.forEach(t),y_o=r(sye," \u2014 "),yN=n(sye,"A",{href:!0});var ast=s(yN);x_o=r(ast,"LayoutLMv3Processor"),ast.forEach(t),$_o=r(sye," (LayoutLMv3 model)"),sye.forEach(t),k_o=i(_e),cp=n(_e,"LI",{});var lye=s(cp);Jle=n(lye,"STRONG",{});var nst=s(Jle);S_o=r(nst,"layoutxlm"),nst.forEach(t),R_o=r(lye," \u2014 "),xN=n(lye,"A",{href:!0});var sst=s(xN);P_o=r(sst,"LayoutXLMProcessor"),sst.forEach(t),B_o=r(lye," (LayoutXLM model)"),lye.forEach(t),I_o=i(_e),fp=n(_e,"LI",{});var iye=s(fp);Yle=n(iye,"STRONG",{});var lst=s(Yle);N_o=r(lst,"sew"),lst.forEach(t),q_o=r(iye," \u2014 "),$N=n(iye,"A",{href:!0});var ist=s($N);j_o=r(ist,"Wav2Vec2Processor"),ist.forEach(t),D_o=r(iye," (SEW model)"),iye.forEach(t),G_o=i(_e),mp=n(_e,"LI",{});var dye=s(mp);Kle=n(dye,"STRONG",{});var dst=s(Kle);O_o=r(dst,"sew-d"),dst.forEach(t),V_o=r(dye," \u2014 "),kN=n(dye,"A",{href:!0});var cst=s(kN);X_o=r(cst,"Wav2Vec2Processor"),cst.forEach(t),z_o=r(dye," (SEW-D model)"),dye.forEach(t),W_o=i(_e),gp=n(_e,"LI",{});var cye=s(gp);Zle=n(cye,"STRONG",{});var fst=s(Zle);Q_o=r(fst,"speech_to_text"),fst.forEach(t),H_o=r(cye," \u2014 "),SN=n(cye,"A",{href:!0});var mst=s(SN);U_o=r(mst,"Speech2TextProcessor"),mst.forEach(t),J_o=r(cye," (Speech2Text model)"),cye.forEach(t),Y_o=i(_e),hp=n(_e,"LI",{});var fye=s(hp);eie=n(fye,"STRONG",{});var gst=s(eie);K_o=r(gst,"speech_to_text_2"),gst.forEach(t),Z_o=r(fye," \u2014 "),RN=n(fye,"A",{href:!0});var hst=s(RN);e7o=r(hst,"Speech2Text2Processor"),hst.forEach(t),o7o=r(fye," (Speech2Text2 model)"),fye.forEach(t),r7o=i(_e),pp=n(_e,"LI",{});var mye=s(pp);oie=n(mye,"STRONG",{});var pst=s(oie);t7o=r(pst,"trocr"),pst.forEach(t),a7o=r(mye," \u2014 "),PN=n(mye,"A",{href:!0});var ust=s(PN);n7o=r(ust,"TrOCRProcessor"),ust.forEach(t),s7o=r(mye," (TrOCR model)"),mye.forEach(t),l7o=i(_e),up=n(_e,"LI",{});var gye=s(up);rie=n(gye,"STRONG",{});var _st=s(rie);i7o=r(_st,"unispeech"),_st.forEach(t),d7o=r(gye," \u2014 "),BN=n(gye,"A",{href:!0});var bst=s(BN);c7o=r(bst,"Wav2Vec2Processor"),bst.forEach(t),f7o=r(gye," (UniSpeech model)"),gye.forEach(t),m7o=i(_e),_p=n(_e,"LI",{});var hye=s(_p);tie=n(hye,"STRONG",{});var vst=s(tie);g7o=r(vst,"unispeech-sat"),vst.forEach(t),h7o=r(hye," \u2014 "),IN=n(hye,"A",{href:!0});var Fst=s(IN);p7o=r(Fst,"Wav2Vec2Processor"),Fst.forEach(t),u7o=r(hye," (UniSpeechSat model)"),hye.forEach(t),_7o=i(_e),bp=n(_e,"LI",{});var pye=s(bp);aie=n(pye,"STRONG",{});var Tst=s(aie);b7o=r(Tst,"vilt"),Tst.forEach(t),v7o=r(pye," \u2014 "),NN=n(pye,"A",{href:!0});var Mst=s(NN);F7o=r(Mst,"ViltProcessor"),Mst.forEach(t),T7o=r(pye," (ViLT model)"),pye.forEach(t),M7o=i(_e),vp=n(_e,"LI",{});var uye=s(vp);nie=n(uye,"STRONG",{});var Est=s(nie);E7o=r(Est,"vision-text-dual-encoder"),Est.forEach(t),C7o=r(uye," \u2014 "),qN=n(uye,"A",{href:!0});var Cst=s(qN);w7o=r(Cst,"VisionTextDualEncoderProcessor"),Cst.forEach(t),A7o=r(uye," (VisionTextDualEncoder model)"),uye.forEach(t),L7o=i(_e),Fp=n(_e,"LI",{});var _ye=s(Fp);sie=n(_ye,"STRONG",{});var wst=s(sie);y7o=r(wst,"wav2vec2"),wst.forEach(t),x7o=r(_ye," \u2014 "),jN=n(_ye,"A",{href:!0});var Ast=s(jN);$7o=r(Ast,"Wav2Vec2Processor"),Ast.forEach(t),k7o=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),S7o=i(_e),Tp=n(_e,"LI",{});var bye=s(Tp);lie=n(bye,"STRONG",{});var Lst=s(lie);R7o=r(Lst,"wav2vec2-conformer"),Lst.forEach(t),P7o=r(bye," \u2014 "),DN=n(bye,"A",{href:!0});var yst=s(DN);B7o=r(yst,"Wav2Vec2Processor"),yst.forEach(t),I7o=r(bye," (Wav2Vec2-Conformer model)"),bye.forEach(t),N7o=i(_e),Mp=n(_e,"LI",{});var vye=s(Mp);iie=n(vye,"STRONG",{});var xst=s(iie);q7o=r(xst,"wavlm"),xst.forEach(t),j7o=r(vye," \u2014 "),GN=n(vye,"A",{href:!0});var $st=s(GN);D7o=r($st,"Wav2Vec2Processor"),$st.forEach(t),G7o=r(vye," (WavLM model)"),vye.forEach(t),_e.forEach(t),O7o=i(ta),T(Ep.$$.fragment,ta),V7o=i(ta),T(Cp.$$.fragment,ta),ta.forEach(t),X7o=i(Hs),wp=n(Hs,"DIV",{class:!0});var FVe=s(wp);T(zL.$$.fragment,FVe),z7o=i(FVe),die=n(FVe,"P",{});var kst=s(die);W7o=r(kst,"Register a new processor for this class."),kst.forEach(t),FVe.forEach(t),Hs.forEach(t),pGe=i(f),Pi=n(f,"H2",{class:!0});var TVe=s(Pi);Ap=n(TVe,"A",{id:!0,class:!0,href:!0});var Sst=s(Ap);cie=n(Sst,"SPAN",{});var Rst=s(cie);T(WL.$$.fragment,Rst),Rst.forEach(t),Sst.forEach(t),Q7o=i(TVe),fie=n(TVe,"SPAN",{});var Pst=s(fie);H7o=r(Pst,"AutoModel"),Pst.forEach(t),TVe.forEach(t),uGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(QL.$$.fragment,Us),U7o=i(Us),Bi=n(Us,"P",{});var Zee=s(Bi);J7o=r(Zee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ON=n(Zee,"A",{href:!0});var Bst=s(ON);Y7o=r(Bst,"from_pretrained()"),Bst.forEach(t),K7o=r(Zee," class method or the "),VN=n(Zee,"A",{href:!0});var Ist=s(VN);Z7o=r(Ist,"from_config()"),Ist.forEach(t),e1o=r(Zee,` class
method.`),Zee.forEach(t),o1o=i(Us),HL=n(Us,"P",{});var MVe=s(HL);r1o=r(MVe,"This class cannot be instantiated directly using "),mie=n(MVe,"CODE",{});var Nst=s(mie);t1o=r(Nst,"__init__()"),Nst.forEach(t),a1o=r(MVe," (throws an error)."),MVe.forEach(t),n1o=i(Us),nt=n(Us,"DIV",{class:!0});var MA=s(nt);T(UL.$$.fragment,MA),s1o=i(MA),gie=n(MA,"P",{});var qst=s(gie);l1o=r(qst,"Instantiates one of the base model classes of the library from a configuration."),qst.forEach(t),i1o=i(MA),Ii=n(MA,"P",{});var eoe=s(Ii);d1o=r(eoe,`Note:
Loading a model from its configuration file does `),hie=n(eoe,"STRONG",{});var jst=s(hie);c1o=r(jst,"not"),jst.forEach(t),f1o=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(eoe,"A",{href:!0});var Dst=s(XN);m1o=r(Dst,"from_pretrained()"),Dst.forEach(t),g1o=r(eoe," to load the model weights."),eoe.forEach(t),h1o=i(MA),T(Lp.$$.fragment,MA),MA.forEach(t),p1o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(JL.$$.fragment,aa),u1o=i(aa),pie=n(aa,"P",{});var Gst=s(pie);_1o=r(Gst,"Instantiate one of the base model classes of the library from a pretrained model."),Gst.forEach(t),b1o=i(aa),Sa=n(aa,"P",{});var EA=s(Sa);v1o=r(EA,"The model class to instantiate is selected based on the "),uie=n(EA,"CODE",{});var Ost=s(uie);F1o=r(Ost,"model_type"),Ost.forEach(t),T1o=r(EA,` property of the config object (either
passed as an argument or loaded from `),_ie=n(EA,"CODE",{});var Vst=s(_ie);M1o=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),E1o=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(EA,"CODE",{});var Xst=s(bie);C1o=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),w1o=r(EA,":"),EA.forEach(t),A1o=i(aa),x=n(aa,"UL",{});var $=s(x);yp=n($,"LI",{});var Fye=s(yp);vie=n(Fye,"STRONG",{});var zst=s(vie);L1o=r(zst,"albert"),zst.forEach(t),y1o=r(Fye," \u2014 "),zN=n(Fye,"A",{href:!0});var Wst=s(zN);x1o=r(Wst,"AlbertModel"),Wst.forEach(t),$1o=r(Fye," (ALBERT model)"),Fye.forEach(t),k1o=i($),xp=n($,"LI",{});var Tye=s(xp);Fie=n(Tye,"STRONG",{});var Qst=s(Fie);S1o=r(Qst,"bart"),Qst.forEach(t),R1o=r(Tye," \u2014 "),WN=n(Tye,"A",{href:!0});var Hst=s(WN);P1o=r(Hst,"BartModel"),Hst.forEach(t),B1o=r(Tye," (BART model)"),Tye.forEach(t),I1o=i($),$p=n($,"LI",{});var Mye=s($p);Tie=n(Mye,"STRONG",{});var Ust=s(Tie);N1o=r(Ust,"beit"),Ust.forEach(t),q1o=r(Mye," \u2014 "),QN=n(Mye,"A",{href:!0});var Jst=s(QN);j1o=r(Jst,"BeitModel"),Jst.forEach(t),D1o=r(Mye," (BEiT model)"),Mye.forEach(t),G1o=i($),kp=n($,"LI",{});var Eye=s(kp);Mie=n(Eye,"STRONG",{});var Yst=s(Mie);O1o=r(Yst,"bert"),Yst.forEach(t),V1o=r(Eye," \u2014 "),HN=n(Eye,"A",{href:!0});var Kst=s(HN);X1o=r(Kst,"BertModel"),Kst.forEach(t),z1o=r(Eye," (BERT model)"),Eye.forEach(t),W1o=i($),Sp=n($,"LI",{});var Cye=s(Sp);Eie=n(Cye,"STRONG",{});var Zst=s(Eie);Q1o=r(Zst,"bert-generation"),Zst.forEach(t),H1o=r(Cye," \u2014 "),UN=n(Cye,"A",{href:!0});var elt=s(UN);U1o=r(elt,"BertGenerationEncoder"),elt.forEach(t),J1o=r(Cye," (Bert Generation model)"),Cye.forEach(t),Y1o=i($),Rp=n($,"LI",{});var wye=s(Rp);Cie=n(wye,"STRONG",{});var olt=s(Cie);K1o=r(olt,"big_bird"),olt.forEach(t),Z1o=r(wye," \u2014 "),JN=n(wye,"A",{href:!0});var rlt=s(JN);e2o=r(rlt,"BigBirdModel"),rlt.forEach(t),o2o=r(wye," (BigBird model)"),wye.forEach(t),r2o=i($),Pp=n($,"LI",{});var Aye=s(Pp);wie=n(Aye,"STRONG",{});var tlt=s(wie);t2o=r(tlt,"bigbird_pegasus"),tlt.forEach(t),a2o=r(Aye," \u2014 "),YN=n(Aye,"A",{href:!0});var alt=s(YN);n2o=r(alt,"BigBirdPegasusModel"),alt.forEach(t),s2o=r(Aye," (BigBird-Pegasus model)"),Aye.forEach(t),l2o=i($),Bp=n($,"LI",{});var Lye=s(Bp);Aie=n(Lye,"STRONG",{});var nlt=s(Aie);i2o=r(nlt,"blenderbot"),nlt.forEach(t),d2o=r(Lye," \u2014 "),KN=n(Lye,"A",{href:!0});var slt=s(KN);c2o=r(slt,"BlenderbotModel"),slt.forEach(t),f2o=r(Lye," (Blenderbot model)"),Lye.forEach(t),m2o=i($),Ip=n($,"LI",{});var yye=s(Ip);Lie=n(yye,"STRONG",{});var llt=s(Lie);g2o=r(llt,"blenderbot-small"),llt.forEach(t),h2o=r(yye," \u2014 "),ZN=n(yye,"A",{href:!0});var ilt=s(ZN);p2o=r(ilt,"BlenderbotSmallModel"),ilt.forEach(t),u2o=r(yye," (BlenderbotSmall model)"),yye.forEach(t),_2o=i($),Np=n($,"LI",{});var xye=s(Np);yie=n(xye,"STRONG",{});var dlt=s(yie);b2o=r(dlt,"bloom"),dlt.forEach(t),v2o=r(xye," \u2014 "),eq=n(xye,"A",{href:!0});var clt=s(eq);F2o=r(clt,"BloomModel"),clt.forEach(t),T2o=r(xye," (BLOOM model)"),xye.forEach(t),M2o=i($),qp=n($,"LI",{});var $ye=s(qp);xie=n($ye,"STRONG",{});var flt=s(xie);E2o=r(flt,"camembert"),flt.forEach(t),C2o=r($ye," \u2014 "),oq=n($ye,"A",{href:!0});var mlt=s(oq);w2o=r(mlt,"CamembertModel"),mlt.forEach(t),A2o=r($ye," (CamemBERT model)"),$ye.forEach(t),L2o=i($),jp=n($,"LI",{});var kye=s(jp);$ie=n(kye,"STRONG",{});var glt=s($ie);y2o=r(glt,"canine"),glt.forEach(t),x2o=r(kye," \u2014 "),rq=n(kye,"A",{href:!0});var hlt=s(rq);$2o=r(hlt,"CanineModel"),hlt.forEach(t),k2o=r(kye," (CANINE model)"),kye.forEach(t),S2o=i($),Dp=n($,"LI",{});var Sye=s(Dp);kie=n(Sye,"STRONG",{});var plt=s(kie);R2o=r(plt,"clip"),plt.forEach(t),P2o=r(Sye," \u2014 "),tq=n(Sye,"A",{href:!0});var ult=s(tq);B2o=r(ult,"CLIPModel"),ult.forEach(t),I2o=r(Sye," (CLIP model)"),Sye.forEach(t),N2o=i($),Gp=n($,"LI",{});var Rye=s(Gp);Sie=n(Rye,"STRONG",{});var _lt=s(Sie);q2o=r(_lt,"convbert"),_lt.forEach(t),j2o=r(Rye," \u2014 "),aq=n(Rye,"A",{href:!0});var blt=s(aq);D2o=r(blt,"ConvBertModel"),blt.forEach(t),G2o=r(Rye," (ConvBERT model)"),Rye.forEach(t),O2o=i($),Op=n($,"LI",{});var Pye=s(Op);Rie=n(Pye,"STRONG",{});var vlt=s(Rie);V2o=r(vlt,"convnext"),vlt.forEach(t),X2o=r(Pye," \u2014 "),nq=n(Pye,"A",{href:!0});var Flt=s(nq);z2o=r(Flt,"ConvNextModel"),Flt.forEach(t),W2o=r(Pye," (ConvNeXT model)"),Pye.forEach(t),Q2o=i($),Vp=n($,"LI",{});var Bye=s(Vp);Pie=n(Bye,"STRONG",{});var Tlt=s(Pie);H2o=r(Tlt,"ctrl"),Tlt.forEach(t),U2o=r(Bye," \u2014 "),sq=n(Bye,"A",{href:!0});var Mlt=s(sq);J2o=r(Mlt,"CTRLModel"),Mlt.forEach(t),Y2o=r(Bye," (CTRL model)"),Bye.forEach(t),K2o=i($),Xp=n($,"LI",{});var Iye=s(Xp);Bie=n(Iye,"STRONG",{});var Elt=s(Bie);Z2o=r(Elt,"cvt"),Elt.forEach(t),ebo=r(Iye," \u2014 "),lq=n(Iye,"A",{href:!0});var Clt=s(lq);obo=r(Clt,"CvtModel"),Clt.forEach(t),rbo=r(Iye," (CvT model)"),Iye.forEach(t),tbo=i($),zp=n($,"LI",{});var Nye=s(zp);Iie=n(Nye,"STRONG",{});var wlt=s(Iie);abo=r(wlt,"data2vec-audio"),wlt.forEach(t),nbo=r(Nye," \u2014 "),iq=n(Nye,"A",{href:!0});var Alt=s(iq);sbo=r(Alt,"Data2VecAudioModel"),Alt.forEach(t),lbo=r(Nye," (Data2VecAudio model)"),Nye.forEach(t),ibo=i($),Wp=n($,"LI",{});var qye=s(Wp);Nie=n(qye,"STRONG",{});var Llt=s(Nie);dbo=r(Llt,"data2vec-text"),Llt.forEach(t),cbo=r(qye," \u2014 "),dq=n(qye,"A",{href:!0});var ylt=s(dq);fbo=r(ylt,"Data2VecTextModel"),ylt.forEach(t),mbo=r(qye," (Data2VecText model)"),qye.forEach(t),gbo=i($),Qp=n($,"LI",{});var jye=s(Qp);qie=n(jye,"STRONG",{});var xlt=s(qie);hbo=r(xlt,"data2vec-vision"),xlt.forEach(t),pbo=r(jye," \u2014 "),cq=n(jye,"A",{href:!0});var $lt=s(cq);ubo=r($lt,"Data2VecVisionModel"),$lt.forEach(t),_bo=r(jye," (Data2VecVision model)"),jye.forEach(t),bbo=i($),Hp=n($,"LI",{});var Dye=s(Hp);jie=n(Dye,"STRONG",{});var klt=s(jie);vbo=r(klt,"deberta"),klt.forEach(t),Fbo=r(Dye," \u2014 "),fq=n(Dye,"A",{href:!0});var Slt=s(fq);Tbo=r(Slt,"DebertaModel"),Slt.forEach(t),Mbo=r(Dye," (DeBERTa model)"),Dye.forEach(t),Ebo=i($),Up=n($,"LI",{});var Gye=s(Up);Die=n(Gye,"STRONG",{});var Rlt=s(Die);Cbo=r(Rlt,"deberta-v2"),Rlt.forEach(t),wbo=r(Gye," \u2014 "),mq=n(Gye,"A",{href:!0});var Plt=s(mq);Abo=r(Plt,"DebertaV2Model"),Plt.forEach(t),Lbo=r(Gye," (DeBERTa-v2 model)"),Gye.forEach(t),ybo=i($),Jp=n($,"LI",{});var Oye=s(Jp);Gie=n(Oye,"STRONG",{});var Blt=s(Gie);xbo=r(Blt,"decision_transformer"),Blt.forEach(t),$bo=r(Oye," \u2014 "),gq=n(Oye,"A",{href:!0});var Ilt=s(gq);kbo=r(Ilt,"DecisionTransformerModel"),Ilt.forEach(t),Sbo=r(Oye," (Decision Transformer model)"),Oye.forEach(t),Rbo=i($),Yp=n($,"LI",{});var Vye=s(Yp);Oie=n(Vye,"STRONG",{});var Nlt=s(Oie);Pbo=r(Nlt,"deit"),Nlt.forEach(t),Bbo=r(Vye," \u2014 "),hq=n(Vye,"A",{href:!0});var qlt=s(hq);Ibo=r(qlt,"DeiTModel"),qlt.forEach(t),Nbo=r(Vye," (DeiT model)"),Vye.forEach(t),qbo=i($),Kp=n($,"LI",{});var Xye=s(Kp);Vie=n(Xye,"STRONG",{});var jlt=s(Vie);jbo=r(jlt,"detr"),jlt.forEach(t),Dbo=r(Xye," \u2014 "),pq=n(Xye,"A",{href:!0});var Dlt=s(pq);Gbo=r(Dlt,"DetrModel"),Dlt.forEach(t),Obo=r(Xye," (DETR model)"),Xye.forEach(t),Vbo=i($),Zp=n($,"LI",{});var zye=s(Zp);Xie=n(zye,"STRONG",{});var Glt=s(Xie);Xbo=r(Glt,"distilbert"),Glt.forEach(t),zbo=r(zye," \u2014 "),uq=n(zye,"A",{href:!0});var Olt=s(uq);Wbo=r(Olt,"DistilBertModel"),Olt.forEach(t),Qbo=r(zye," (DistilBERT model)"),zye.forEach(t),Hbo=i($),eu=n($,"LI",{});var Wye=s(eu);zie=n(Wye,"STRONG",{});var Vlt=s(zie);Ubo=r(Vlt,"dpr"),Vlt.forEach(t),Jbo=r(Wye," \u2014 "),_q=n(Wye,"A",{href:!0});var Xlt=s(_q);Ybo=r(Xlt,"DPRQuestionEncoder"),Xlt.forEach(t),Kbo=r(Wye," (DPR model)"),Wye.forEach(t),Zbo=i($),ou=n($,"LI",{});var Qye=s(ou);Wie=n(Qye,"STRONG",{});var zlt=s(Wie);evo=r(zlt,"dpt"),zlt.forEach(t),ovo=r(Qye," \u2014 "),bq=n(Qye,"A",{href:!0});var Wlt=s(bq);rvo=r(Wlt,"DPTModel"),Wlt.forEach(t),tvo=r(Qye," (DPT model)"),Qye.forEach(t),avo=i($),ru=n($,"LI",{});var Hye=s(ru);Qie=n(Hye,"STRONG",{});var Qlt=s(Qie);nvo=r(Qlt,"electra"),Qlt.forEach(t),svo=r(Hye," \u2014 "),vq=n(Hye,"A",{href:!0});var Hlt=s(vq);lvo=r(Hlt,"ElectraModel"),Hlt.forEach(t),ivo=r(Hye," (ELECTRA model)"),Hye.forEach(t),dvo=i($),tu=n($,"LI",{});var Uye=s(tu);Hie=n(Uye,"STRONG",{});var Ult=s(Hie);cvo=r(Ult,"flaubert"),Ult.forEach(t),fvo=r(Uye," \u2014 "),Fq=n(Uye,"A",{href:!0});var Jlt=s(Fq);mvo=r(Jlt,"FlaubertModel"),Jlt.forEach(t),gvo=r(Uye," (FlauBERT model)"),Uye.forEach(t),hvo=i($),au=n($,"LI",{});var Jye=s(au);Uie=n(Jye,"STRONG",{});var Ylt=s(Uie);pvo=r(Ylt,"flava"),Ylt.forEach(t),uvo=r(Jye," \u2014 "),Tq=n(Jye,"A",{href:!0});var Klt=s(Tq);_vo=r(Klt,"FlavaModel"),Klt.forEach(t),bvo=r(Jye," (FLAVA model)"),Jye.forEach(t),vvo=i($),nu=n($,"LI",{});var Yye=s(nu);Jie=n(Yye,"STRONG",{});var Zlt=s(Jie);Fvo=r(Zlt,"fnet"),Zlt.forEach(t),Tvo=r(Yye," \u2014 "),Mq=n(Yye,"A",{href:!0});var eit=s(Mq);Mvo=r(eit,"FNetModel"),eit.forEach(t),Evo=r(Yye," (FNet model)"),Yye.forEach(t),Cvo=i($),su=n($,"LI",{});var Kye=s(su);Yie=n(Kye,"STRONG",{});var oit=s(Yie);wvo=r(oit,"fsmt"),oit.forEach(t),Avo=r(Kye," \u2014 "),Eq=n(Kye,"A",{href:!0});var rit=s(Eq);Lvo=r(rit,"FSMTModel"),rit.forEach(t),yvo=r(Kye," (FairSeq Machine-Translation model)"),Kye.forEach(t),xvo=i($),Gs=n($,"LI",{});var Ok=s(Gs);Kie=n(Ok,"STRONG",{});var tit=s(Kie);$vo=r(tit,"funnel"),tit.forEach(t),kvo=r(Ok," \u2014 "),Cq=n(Ok,"A",{href:!0});var ait=s(Cq);Svo=r(ait,"FunnelModel"),ait.forEach(t),Rvo=r(Ok," or "),wq=n(Ok,"A",{href:!0});var nit=s(wq);Pvo=r(nit,"FunnelBaseModel"),nit.forEach(t),Bvo=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),Ivo=i($),lu=n($,"LI",{});var Zye=s(lu);Zie=n(Zye,"STRONG",{});var sit=s(Zie);Nvo=r(sit,"glpn"),sit.forEach(t),qvo=r(Zye," \u2014 "),Aq=n(Zye,"A",{href:!0});var lit=s(Aq);jvo=r(lit,"GLPNModel"),lit.forEach(t),Dvo=r(Zye," (GLPN model)"),Zye.forEach(t),Gvo=i($),iu=n($,"LI",{});var e8e=s(iu);ede=n(e8e,"STRONG",{});var iit=s(ede);Ovo=r(iit,"gpt2"),iit.forEach(t),Vvo=r(e8e," \u2014 "),Lq=n(e8e,"A",{href:!0});var dit=s(Lq);Xvo=r(dit,"GPT2Model"),dit.forEach(t),zvo=r(e8e," (OpenAI GPT-2 model)"),e8e.forEach(t),Wvo=i($),du=n($,"LI",{});var o8e=s(du);ode=n(o8e,"STRONG",{});var cit=s(ode);Qvo=r(cit,"gpt_neo"),cit.forEach(t),Hvo=r(o8e," \u2014 "),yq=n(o8e,"A",{href:!0});var fit=s(yq);Uvo=r(fit,"GPTNeoModel"),fit.forEach(t),Jvo=r(o8e," (GPT Neo model)"),o8e.forEach(t),Yvo=i($),cu=n($,"LI",{});var r8e=s(cu);rde=n(r8e,"STRONG",{});var mit=s(rde);Kvo=r(mit,"gpt_neox"),mit.forEach(t),Zvo=r(r8e," \u2014 "),xq=n(r8e,"A",{href:!0});var git=s(xq);e0o=r(git,"GPTNeoXModel"),git.forEach(t),o0o=r(r8e," (GPT NeoX model)"),r8e.forEach(t),r0o=i($),fu=n($,"LI",{});var t8e=s(fu);tde=n(t8e,"STRONG",{});var hit=s(tde);t0o=r(hit,"gptj"),hit.forEach(t),a0o=r(t8e," \u2014 "),$q=n(t8e,"A",{href:!0});var pit=s($q);n0o=r(pit,"GPTJModel"),pit.forEach(t),s0o=r(t8e," (GPT-J model)"),t8e.forEach(t),l0o=i($),mu=n($,"LI",{});var a8e=s(mu);ade=n(a8e,"STRONG",{});var uit=s(ade);i0o=r(uit,"hubert"),uit.forEach(t),d0o=r(a8e," \u2014 "),kq=n(a8e,"A",{href:!0});var _it=s(kq);c0o=r(_it,"HubertModel"),_it.forEach(t),f0o=r(a8e," (Hubert model)"),a8e.forEach(t),m0o=i($),gu=n($,"LI",{});var n8e=s(gu);nde=n(n8e,"STRONG",{});var bit=s(nde);g0o=r(bit,"ibert"),bit.forEach(t),h0o=r(n8e," \u2014 "),Sq=n(n8e,"A",{href:!0});var vit=s(Sq);p0o=r(vit,"IBertModel"),vit.forEach(t),u0o=r(n8e," (I-BERT model)"),n8e.forEach(t),_0o=i($),hu=n($,"LI",{});var s8e=s(hu);sde=n(s8e,"STRONG",{});var Fit=s(sde);b0o=r(Fit,"imagegpt"),Fit.forEach(t),v0o=r(s8e," \u2014 "),Rq=n(s8e,"A",{href:!0});var Tit=s(Rq);F0o=r(Tit,"ImageGPTModel"),Tit.forEach(t),T0o=r(s8e," (ImageGPT model)"),s8e.forEach(t),M0o=i($),pu=n($,"LI",{});var l8e=s(pu);lde=n(l8e,"STRONG",{});var Mit=s(lde);E0o=r(Mit,"layoutlm"),Mit.forEach(t),C0o=r(l8e," \u2014 "),Pq=n(l8e,"A",{href:!0});var Eit=s(Pq);w0o=r(Eit,"LayoutLMModel"),Eit.forEach(t),A0o=r(l8e," (LayoutLM model)"),l8e.forEach(t),L0o=i($),uu=n($,"LI",{});var i8e=s(uu);ide=n(i8e,"STRONG",{});var Cit=s(ide);y0o=r(Cit,"layoutlmv2"),Cit.forEach(t),x0o=r(i8e," \u2014 "),Bq=n(i8e,"A",{href:!0});var wit=s(Bq);$0o=r(wit,"LayoutLMv2Model"),wit.forEach(t),k0o=r(i8e," (LayoutLMv2 model)"),i8e.forEach(t),S0o=i($),_u=n($,"LI",{});var d8e=s(_u);dde=n(d8e,"STRONG",{});var Ait=s(dde);R0o=r(Ait,"layoutlmv3"),Ait.forEach(t),P0o=r(d8e," \u2014 "),Iq=n(d8e,"A",{href:!0});var Lit=s(Iq);B0o=r(Lit,"LayoutLMv3Model"),Lit.forEach(t),I0o=r(d8e," (LayoutLMv3 model)"),d8e.forEach(t),N0o=i($),bu=n($,"LI",{});var c8e=s(bu);cde=n(c8e,"STRONG",{});var yit=s(cde);q0o=r(yit,"led"),yit.forEach(t),j0o=r(c8e," \u2014 "),Nq=n(c8e,"A",{href:!0});var xit=s(Nq);D0o=r(xit,"LEDModel"),xit.forEach(t),G0o=r(c8e," (LED model)"),c8e.forEach(t),O0o=i($),vu=n($,"LI",{});var f8e=s(vu);fde=n(f8e,"STRONG",{});var $it=s(fde);V0o=r($it,"levit"),$it.forEach(t),X0o=r(f8e," \u2014 "),qq=n(f8e,"A",{href:!0});var kit=s(qq);z0o=r(kit,"LevitModel"),kit.forEach(t),W0o=r(f8e," (LeViT model)"),f8e.forEach(t),Q0o=i($),Fu=n($,"LI",{});var m8e=s(Fu);mde=n(m8e,"STRONG",{});var Sit=s(mde);H0o=r(Sit,"longformer"),Sit.forEach(t),U0o=r(m8e," \u2014 "),jq=n(m8e,"A",{href:!0});var Rit=s(jq);J0o=r(Rit,"LongformerModel"),Rit.forEach(t),Y0o=r(m8e," (Longformer model)"),m8e.forEach(t),K0o=i($),Tu=n($,"LI",{});var g8e=s(Tu);gde=n(g8e,"STRONG",{});var Pit=s(gde);Z0o=r(Pit,"longt5"),Pit.forEach(t),eFo=r(g8e," \u2014 "),Dq=n(g8e,"A",{href:!0});var Bit=s(Dq);oFo=r(Bit,"LongT5Model"),Bit.forEach(t),rFo=r(g8e," (LongT5 model)"),g8e.forEach(t),tFo=i($),Mu=n($,"LI",{});var h8e=s(Mu);hde=n(h8e,"STRONG",{});var Iit=s(hde);aFo=r(Iit,"luke"),Iit.forEach(t),nFo=r(h8e," \u2014 "),Gq=n(h8e,"A",{href:!0});var Nit=s(Gq);sFo=r(Nit,"LukeModel"),Nit.forEach(t),lFo=r(h8e," (LUKE model)"),h8e.forEach(t),iFo=i($),Eu=n($,"LI",{});var p8e=s(Eu);pde=n(p8e,"STRONG",{});var qit=s(pde);dFo=r(qit,"lxmert"),qit.forEach(t),cFo=r(p8e," \u2014 "),Oq=n(p8e,"A",{href:!0});var jit=s(Oq);fFo=r(jit,"LxmertModel"),jit.forEach(t),mFo=r(p8e," (LXMERT model)"),p8e.forEach(t),gFo=i($),Cu=n($,"LI",{});var u8e=s(Cu);ude=n(u8e,"STRONG",{});var Dit=s(ude);hFo=r(Dit,"m2m_100"),Dit.forEach(t),pFo=r(u8e," \u2014 "),Vq=n(u8e,"A",{href:!0});var Git=s(Vq);uFo=r(Git,"M2M100Model"),Git.forEach(t),_Fo=r(u8e," (M2M100 model)"),u8e.forEach(t),bFo=i($),wu=n($,"LI",{});var _8e=s(wu);_de=n(_8e,"STRONG",{});var Oit=s(_de);vFo=r(Oit,"marian"),Oit.forEach(t),FFo=r(_8e," \u2014 "),Xq=n(_8e,"A",{href:!0});var Vit=s(Xq);TFo=r(Vit,"MarianModel"),Vit.forEach(t),MFo=r(_8e," (Marian model)"),_8e.forEach(t),EFo=i($),Au=n($,"LI",{});var b8e=s(Au);bde=n(b8e,"STRONG",{});var Xit=s(bde);CFo=r(Xit,"maskformer"),Xit.forEach(t),wFo=r(b8e," \u2014 "),zq=n(b8e,"A",{href:!0});var zit=s(zq);AFo=r(zit,"MaskFormerModel"),zit.forEach(t),LFo=r(b8e," (MaskFormer model)"),b8e.forEach(t),yFo=i($),Lu=n($,"LI",{});var v8e=s(Lu);vde=n(v8e,"STRONG",{});var Wit=s(vde);xFo=r(Wit,"mbart"),Wit.forEach(t),$Fo=r(v8e," \u2014 "),Wq=n(v8e,"A",{href:!0});var Qit=s(Wq);kFo=r(Qit,"MBartModel"),Qit.forEach(t),SFo=r(v8e," (mBART model)"),v8e.forEach(t),RFo=i($),yu=n($,"LI",{});var F8e=s(yu);Fde=n(F8e,"STRONG",{});var Hit=s(Fde);PFo=r(Hit,"mctct"),Hit.forEach(t),BFo=r(F8e," \u2014 "),Qq=n(F8e,"A",{href:!0});var Uit=s(Qq);IFo=r(Uit,"MCTCTModel"),Uit.forEach(t),NFo=r(F8e," (M-CTC-T model)"),F8e.forEach(t),qFo=i($),xu=n($,"LI",{});var T8e=s(xu);Tde=n(T8e,"STRONG",{});var Jit=s(Tde);jFo=r(Jit,"megatron-bert"),Jit.forEach(t),DFo=r(T8e," \u2014 "),Hq=n(T8e,"A",{href:!0});var Yit=s(Hq);GFo=r(Yit,"MegatronBertModel"),Yit.forEach(t),OFo=r(T8e," (Megatron-BERT model)"),T8e.forEach(t),VFo=i($),$u=n($,"LI",{});var M8e=s($u);Mde=n(M8e,"STRONG",{});var Kit=s(Mde);XFo=r(Kit,"mobilebert"),Kit.forEach(t),zFo=r(M8e," \u2014 "),Uq=n(M8e,"A",{href:!0});var Zit=s(Uq);WFo=r(Zit,"MobileBertModel"),Zit.forEach(t),QFo=r(M8e," (MobileBERT model)"),M8e.forEach(t),HFo=i($),ku=n($,"LI",{});var E8e=s(ku);Ede=n(E8e,"STRONG",{});var edt=s(Ede);UFo=r(edt,"mpnet"),edt.forEach(t),JFo=r(E8e," \u2014 "),Jq=n(E8e,"A",{href:!0});var odt=s(Jq);YFo=r(odt,"MPNetModel"),odt.forEach(t),KFo=r(E8e," (MPNet model)"),E8e.forEach(t),ZFo=i($),Su=n($,"LI",{});var C8e=s(Su);Cde=n(C8e,"STRONG",{});var rdt=s(Cde);eTo=r(rdt,"mt5"),rdt.forEach(t),oTo=r(C8e," \u2014 "),Yq=n(C8e,"A",{href:!0});var tdt=s(Yq);rTo=r(tdt,"MT5Model"),tdt.forEach(t),tTo=r(C8e," (MT5 model)"),C8e.forEach(t),aTo=i($),Ru=n($,"LI",{});var w8e=s(Ru);wde=n(w8e,"STRONG",{});var adt=s(wde);nTo=r(adt,"nystromformer"),adt.forEach(t),sTo=r(w8e," \u2014 "),Kq=n(w8e,"A",{href:!0});var ndt=s(Kq);lTo=r(ndt,"NystromformerModel"),ndt.forEach(t),iTo=r(w8e," (Nystr\xF6mformer model)"),w8e.forEach(t),dTo=i($),Pu=n($,"LI",{});var A8e=s(Pu);Ade=n(A8e,"STRONG",{});var sdt=s(Ade);cTo=r(sdt,"openai-gpt"),sdt.forEach(t),fTo=r(A8e," \u2014 "),Zq=n(A8e,"A",{href:!0});var ldt=s(Zq);mTo=r(ldt,"OpenAIGPTModel"),ldt.forEach(t),gTo=r(A8e," (OpenAI GPT model)"),A8e.forEach(t),hTo=i($),Bu=n($,"LI",{});var L8e=s(Bu);Lde=n(L8e,"STRONG",{});var idt=s(Lde);pTo=r(idt,"opt"),idt.forEach(t),uTo=r(L8e," \u2014 "),ej=n(L8e,"A",{href:!0});var ddt=s(ej);_To=r(ddt,"OPTModel"),ddt.forEach(t),bTo=r(L8e," (OPT model)"),L8e.forEach(t),vTo=i($),Iu=n($,"LI",{});var y8e=s(Iu);yde=n(y8e,"STRONG",{});var cdt=s(yde);FTo=r(cdt,"pegasus"),cdt.forEach(t),TTo=r(y8e," \u2014 "),oj=n(y8e,"A",{href:!0});var fdt=s(oj);MTo=r(fdt,"PegasusModel"),fdt.forEach(t),ETo=r(y8e," (Pegasus model)"),y8e.forEach(t),CTo=i($),Nu=n($,"LI",{});var x8e=s(Nu);xde=n(x8e,"STRONG",{});var mdt=s(xde);wTo=r(mdt,"perceiver"),mdt.forEach(t),ATo=r(x8e," \u2014 "),rj=n(x8e,"A",{href:!0});var gdt=s(rj);LTo=r(gdt,"PerceiverModel"),gdt.forEach(t),yTo=r(x8e," (Perceiver model)"),x8e.forEach(t),xTo=i($),qu=n($,"LI",{});var $8e=s(qu);$de=n($8e,"STRONG",{});var hdt=s($de);$To=r(hdt,"plbart"),hdt.forEach(t),kTo=r($8e," \u2014 "),tj=n($8e,"A",{href:!0});var pdt=s(tj);STo=r(pdt,"PLBartModel"),pdt.forEach(t),RTo=r($8e," (PLBart model)"),$8e.forEach(t),PTo=i($),ju=n($,"LI",{});var k8e=s(ju);kde=n(k8e,"STRONG",{});var udt=s(kde);BTo=r(udt,"poolformer"),udt.forEach(t),ITo=r(k8e," \u2014 "),aj=n(k8e,"A",{href:!0});var _dt=s(aj);NTo=r(_dt,"PoolFormerModel"),_dt.forEach(t),qTo=r(k8e," (PoolFormer model)"),k8e.forEach(t),jTo=i($),Du=n($,"LI",{});var S8e=s(Du);Sde=n(S8e,"STRONG",{});var bdt=s(Sde);DTo=r(bdt,"prophetnet"),bdt.forEach(t),GTo=r(S8e," \u2014 "),nj=n(S8e,"A",{href:!0});var vdt=s(nj);OTo=r(vdt,"ProphetNetModel"),vdt.forEach(t),VTo=r(S8e," (ProphetNet model)"),S8e.forEach(t),XTo=i($),Gu=n($,"LI",{});var R8e=s(Gu);Rde=n(R8e,"STRONG",{});var Fdt=s(Rde);zTo=r(Fdt,"qdqbert"),Fdt.forEach(t),WTo=r(R8e," \u2014 "),sj=n(R8e,"A",{href:!0});var Tdt=s(sj);QTo=r(Tdt,"QDQBertModel"),Tdt.forEach(t),HTo=r(R8e," (QDQBert model)"),R8e.forEach(t),UTo=i($),Ou=n($,"LI",{});var P8e=s(Ou);Pde=n(P8e,"STRONG",{});var Mdt=s(Pde);JTo=r(Mdt,"reformer"),Mdt.forEach(t),YTo=r(P8e," \u2014 "),lj=n(P8e,"A",{href:!0});var Edt=s(lj);KTo=r(Edt,"ReformerModel"),Edt.forEach(t),ZTo=r(P8e," (Reformer model)"),P8e.forEach(t),eMo=i($),Vu=n($,"LI",{});var B8e=s(Vu);Bde=n(B8e,"STRONG",{});var Cdt=s(Bde);oMo=r(Cdt,"regnet"),Cdt.forEach(t),rMo=r(B8e," \u2014 "),ij=n(B8e,"A",{href:!0});var wdt=s(ij);tMo=r(wdt,"RegNetModel"),wdt.forEach(t),aMo=r(B8e," (RegNet model)"),B8e.forEach(t),nMo=i($),Xu=n($,"LI",{});var I8e=s(Xu);Ide=n(I8e,"STRONG",{});var Adt=s(Ide);sMo=r(Adt,"rembert"),Adt.forEach(t),lMo=r(I8e," \u2014 "),dj=n(I8e,"A",{href:!0});var Ldt=s(dj);iMo=r(Ldt,"RemBertModel"),Ldt.forEach(t),dMo=r(I8e," (RemBERT model)"),I8e.forEach(t),cMo=i($),zu=n($,"LI",{});var N8e=s(zu);Nde=n(N8e,"STRONG",{});var ydt=s(Nde);fMo=r(ydt,"resnet"),ydt.forEach(t),mMo=r(N8e," \u2014 "),cj=n(N8e,"A",{href:!0});var xdt=s(cj);gMo=r(xdt,"ResNetModel"),xdt.forEach(t),hMo=r(N8e," (ResNet model)"),N8e.forEach(t),pMo=i($),Wu=n($,"LI",{});var q8e=s(Wu);qde=n(q8e,"STRONG",{});var $dt=s(qde);uMo=r($dt,"retribert"),$dt.forEach(t),_Mo=r(q8e," \u2014 "),fj=n(q8e,"A",{href:!0});var kdt=s(fj);bMo=r(kdt,"RetriBertModel"),kdt.forEach(t),vMo=r(q8e," (RetriBERT model)"),q8e.forEach(t),FMo=i($),Qu=n($,"LI",{});var j8e=s(Qu);jde=n(j8e,"STRONG",{});var Sdt=s(jde);TMo=r(Sdt,"roberta"),Sdt.forEach(t),MMo=r(j8e," \u2014 "),mj=n(j8e,"A",{href:!0});var Rdt=s(mj);EMo=r(Rdt,"RobertaModel"),Rdt.forEach(t),CMo=r(j8e," (RoBERTa model)"),j8e.forEach(t),wMo=i($),Hu=n($,"LI",{});var D8e=s(Hu);Dde=n(D8e,"STRONG",{});var Pdt=s(Dde);AMo=r(Pdt,"roformer"),Pdt.forEach(t),LMo=r(D8e," \u2014 "),gj=n(D8e,"A",{href:!0});var Bdt=s(gj);yMo=r(Bdt,"RoFormerModel"),Bdt.forEach(t),xMo=r(D8e," (RoFormer model)"),D8e.forEach(t),$Mo=i($),Uu=n($,"LI",{});var G8e=s(Uu);Gde=n(G8e,"STRONG",{});var Idt=s(Gde);kMo=r(Idt,"segformer"),Idt.forEach(t),SMo=r(G8e," \u2014 "),hj=n(G8e,"A",{href:!0});var Ndt=s(hj);RMo=r(Ndt,"SegformerModel"),Ndt.forEach(t),PMo=r(G8e," (SegFormer model)"),G8e.forEach(t),BMo=i($),Ju=n($,"LI",{});var O8e=s(Ju);Ode=n(O8e,"STRONG",{});var qdt=s(Ode);IMo=r(qdt,"sew"),qdt.forEach(t),NMo=r(O8e," \u2014 "),pj=n(O8e,"A",{href:!0});var jdt=s(pj);qMo=r(jdt,"SEWModel"),jdt.forEach(t),jMo=r(O8e," (SEW model)"),O8e.forEach(t),DMo=i($),Yu=n($,"LI",{});var V8e=s(Yu);Vde=n(V8e,"STRONG",{});var Ddt=s(Vde);GMo=r(Ddt,"sew-d"),Ddt.forEach(t),OMo=r(V8e," \u2014 "),uj=n(V8e,"A",{href:!0});var Gdt=s(uj);VMo=r(Gdt,"SEWDModel"),Gdt.forEach(t),XMo=r(V8e," (SEW-D model)"),V8e.forEach(t),zMo=i($),Ku=n($,"LI",{});var X8e=s(Ku);Xde=n(X8e,"STRONG",{});var Odt=s(Xde);WMo=r(Odt,"speech_to_text"),Odt.forEach(t),QMo=r(X8e," \u2014 "),_j=n(X8e,"A",{href:!0});var Vdt=s(_j);HMo=r(Vdt,"Speech2TextModel"),Vdt.forEach(t),UMo=r(X8e," (Speech2Text model)"),X8e.forEach(t),JMo=i($),Zu=n($,"LI",{});var z8e=s(Zu);zde=n(z8e,"STRONG",{});var Xdt=s(zde);YMo=r(Xdt,"splinter"),Xdt.forEach(t),KMo=r(z8e," \u2014 "),bj=n(z8e,"A",{href:!0});var zdt=s(bj);ZMo=r(zdt,"SplinterModel"),zdt.forEach(t),e4o=r(z8e," (Splinter model)"),z8e.forEach(t),o4o=i($),e_=n($,"LI",{});var W8e=s(e_);Wde=n(W8e,"STRONG",{});var Wdt=s(Wde);r4o=r(Wdt,"squeezebert"),Wdt.forEach(t),t4o=r(W8e," \u2014 "),vj=n(W8e,"A",{href:!0});var Qdt=s(vj);a4o=r(Qdt,"SqueezeBertModel"),Qdt.forEach(t),n4o=r(W8e," (SqueezeBERT model)"),W8e.forEach(t),s4o=i($),o_=n($,"LI",{});var Q8e=s(o_);Qde=n(Q8e,"STRONG",{});var Hdt=s(Qde);l4o=r(Hdt,"swin"),Hdt.forEach(t),i4o=r(Q8e," \u2014 "),Fj=n(Q8e,"A",{href:!0});var Udt=s(Fj);d4o=r(Udt,"SwinModel"),Udt.forEach(t),c4o=r(Q8e," (Swin Transformer model)"),Q8e.forEach(t),f4o=i($),r_=n($,"LI",{});var H8e=s(r_);Hde=n(H8e,"STRONG",{});var Jdt=s(Hde);m4o=r(Jdt,"t5"),Jdt.forEach(t),g4o=r(H8e," \u2014 "),Tj=n(H8e,"A",{href:!0});var Ydt=s(Tj);h4o=r(Ydt,"T5Model"),Ydt.forEach(t),p4o=r(H8e," (T5 model)"),H8e.forEach(t),u4o=i($),t_=n($,"LI",{});var U8e=s(t_);Ude=n(U8e,"STRONG",{});var Kdt=s(Ude);_4o=r(Kdt,"tapas"),Kdt.forEach(t),b4o=r(U8e," \u2014 "),Mj=n(U8e,"A",{href:!0});var Zdt=s(Mj);v4o=r(Zdt,"TapasModel"),Zdt.forEach(t),F4o=r(U8e," (TAPAS model)"),U8e.forEach(t),T4o=i($),a_=n($,"LI",{});var J8e=s(a_);Jde=n(J8e,"STRONG",{});var ect=s(Jde);M4o=r(ect,"trajectory_transformer"),ect.forEach(t),E4o=r(J8e," \u2014 "),Ej=n(J8e,"A",{href:!0});var oct=s(Ej);C4o=r(oct,"TrajectoryTransformerModel"),oct.forEach(t),w4o=r(J8e," (Trajectory Transformer model)"),J8e.forEach(t),A4o=i($),n_=n($,"LI",{});var Y8e=s(n_);Yde=n(Y8e,"STRONG",{});var rct=s(Yde);L4o=r(rct,"transfo-xl"),rct.forEach(t),y4o=r(Y8e," \u2014 "),Cj=n(Y8e,"A",{href:!0});var tct=s(Cj);x4o=r(tct,"TransfoXLModel"),tct.forEach(t),$4o=r(Y8e," (Transformer-XL model)"),Y8e.forEach(t),k4o=i($),s_=n($,"LI",{});var K8e=s(s_);Kde=n(K8e,"STRONG",{});var act=s(Kde);S4o=r(act,"unispeech"),act.forEach(t),R4o=r(K8e," \u2014 "),wj=n(K8e,"A",{href:!0});var nct=s(wj);P4o=r(nct,"UniSpeechModel"),nct.forEach(t),B4o=r(K8e," (UniSpeech model)"),K8e.forEach(t),I4o=i($),l_=n($,"LI",{});var Z8e=s(l_);Zde=n(Z8e,"STRONG",{});var sct=s(Zde);N4o=r(sct,"unispeech-sat"),sct.forEach(t),q4o=r(Z8e," \u2014 "),Aj=n(Z8e,"A",{href:!0});var lct=s(Aj);j4o=r(lct,"UniSpeechSatModel"),lct.forEach(t),D4o=r(Z8e," (UniSpeechSat model)"),Z8e.forEach(t),G4o=i($),i_=n($,"LI",{});var e9e=s(i_);ece=n(e9e,"STRONG",{});var ict=s(ece);O4o=r(ict,"van"),ict.forEach(t),V4o=r(e9e," \u2014 "),Lj=n(e9e,"A",{href:!0});var dct=s(Lj);X4o=r(dct,"VanModel"),dct.forEach(t),z4o=r(e9e," (VAN model)"),e9e.forEach(t),W4o=i($),d_=n($,"LI",{});var o9e=s(d_);oce=n(o9e,"STRONG",{});var cct=s(oce);Q4o=r(cct,"vilt"),cct.forEach(t),H4o=r(o9e," \u2014 "),yj=n(o9e,"A",{href:!0});var fct=s(yj);U4o=r(fct,"ViltModel"),fct.forEach(t),J4o=r(o9e," (ViLT model)"),o9e.forEach(t),Y4o=i($),c_=n($,"LI",{});var r9e=s(c_);rce=n(r9e,"STRONG",{});var mct=s(rce);K4o=r(mct,"vision-text-dual-encoder"),mct.forEach(t),Z4o=r(r9e," \u2014 "),xj=n(r9e,"A",{href:!0});var gct=s(xj);eEo=r(gct,"VisionTextDualEncoderModel"),gct.forEach(t),oEo=r(r9e," (VisionTextDualEncoder model)"),r9e.forEach(t),rEo=i($),f_=n($,"LI",{});var t9e=s(f_);tce=n(t9e,"STRONG",{});var hct=s(tce);tEo=r(hct,"visual_bert"),hct.forEach(t),aEo=r(t9e," \u2014 "),$j=n(t9e,"A",{href:!0});var pct=s($j);nEo=r(pct,"VisualBertModel"),pct.forEach(t),sEo=r(t9e," (VisualBERT model)"),t9e.forEach(t),lEo=i($),m_=n($,"LI",{});var a9e=s(m_);ace=n(a9e,"STRONG",{});var uct=s(ace);iEo=r(uct,"vit"),uct.forEach(t),dEo=r(a9e," \u2014 "),kj=n(a9e,"A",{href:!0});var _ct=s(kj);cEo=r(_ct,"ViTModel"),_ct.forEach(t),fEo=r(a9e," (ViT model)"),a9e.forEach(t),mEo=i($),g_=n($,"LI",{});var n9e=s(g_);nce=n(n9e,"STRONG",{});var bct=s(nce);gEo=r(bct,"vit_mae"),bct.forEach(t),hEo=r(n9e," \u2014 "),Sj=n(n9e,"A",{href:!0});var vct=s(Sj);pEo=r(vct,"ViTMAEModel"),vct.forEach(t),uEo=r(n9e," (ViTMAE model)"),n9e.forEach(t),_Eo=i($),h_=n($,"LI",{});var s9e=s(h_);sce=n(s9e,"STRONG",{});var Fct=s(sce);bEo=r(Fct,"wav2vec2"),Fct.forEach(t),vEo=r(s9e," \u2014 "),Rj=n(s9e,"A",{href:!0});var Tct=s(Rj);FEo=r(Tct,"Wav2Vec2Model"),Tct.forEach(t),TEo=r(s9e," (Wav2Vec2 model)"),s9e.forEach(t),MEo=i($),p_=n($,"LI",{});var l9e=s(p_);lce=n(l9e,"STRONG",{});var Mct=s(lce);EEo=r(Mct,"wav2vec2-conformer"),Mct.forEach(t),CEo=r(l9e," \u2014 "),Pj=n(l9e,"A",{href:!0});var Ect=s(Pj);wEo=r(Ect,"Wav2Vec2ConformerModel"),Ect.forEach(t),AEo=r(l9e," (Wav2Vec2-Conformer model)"),l9e.forEach(t),LEo=i($),u_=n($,"LI",{});var i9e=s(u_);ice=n(i9e,"STRONG",{});var Cct=s(ice);yEo=r(Cct,"wavlm"),Cct.forEach(t),xEo=r(i9e," \u2014 "),Bj=n(i9e,"A",{href:!0});var wct=s(Bj);$Eo=r(wct,"WavLMModel"),wct.forEach(t),kEo=r(i9e," (WavLM model)"),i9e.forEach(t),SEo=i($),__=n($,"LI",{});var d9e=s(__);dce=n(d9e,"STRONG",{});var Act=s(dce);REo=r(Act,"xglm"),Act.forEach(t),PEo=r(d9e," \u2014 "),Ij=n(d9e,"A",{href:!0});var Lct=s(Ij);BEo=r(Lct,"XGLMModel"),Lct.forEach(t),IEo=r(d9e," (XGLM model)"),d9e.forEach(t),NEo=i($),b_=n($,"LI",{});var c9e=s(b_);cce=n(c9e,"STRONG",{});var yct=s(cce);qEo=r(yct,"xlm"),yct.forEach(t),jEo=r(c9e," \u2014 "),Nj=n(c9e,"A",{href:!0});var xct=s(Nj);DEo=r(xct,"XLMModel"),xct.forEach(t),GEo=r(c9e," (XLM model)"),c9e.forEach(t),OEo=i($),v_=n($,"LI",{});var f9e=s(v_);fce=n(f9e,"STRONG",{});var $ct=s(fce);VEo=r($ct,"xlm-prophetnet"),$ct.forEach(t),XEo=r(f9e," \u2014 "),qj=n(f9e,"A",{href:!0});var kct=s(qj);zEo=r(kct,"XLMProphetNetModel"),kct.forEach(t),WEo=r(f9e," (XLM-ProphetNet model)"),f9e.forEach(t),QEo=i($),F_=n($,"LI",{});var m9e=s(F_);mce=n(m9e,"STRONG",{});var Sct=s(mce);HEo=r(Sct,"xlm-roberta"),Sct.forEach(t),UEo=r(m9e," \u2014 "),jj=n(m9e,"A",{href:!0});var Rct=s(jj);JEo=r(Rct,"XLMRobertaModel"),Rct.forEach(t),YEo=r(m9e," (XLM-RoBERTa model)"),m9e.forEach(t),KEo=i($),T_=n($,"LI",{});var g9e=s(T_);gce=n(g9e,"STRONG",{});var Pct=s(gce);ZEo=r(Pct,"xlm-roberta-xl"),Pct.forEach(t),eCo=r(g9e," \u2014 "),Dj=n(g9e,"A",{href:!0});var Bct=s(Dj);oCo=r(Bct,"XLMRobertaXLModel"),Bct.forEach(t),rCo=r(g9e," (XLM-RoBERTa-XL model)"),g9e.forEach(t),tCo=i($),M_=n($,"LI",{});var h9e=s(M_);hce=n(h9e,"STRONG",{});var Ict=s(hce);aCo=r(Ict,"xlnet"),Ict.forEach(t),nCo=r(h9e," \u2014 "),Gj=n(h9e,"A",{href:!0});var Nct=s(Gj);sCo=r(Nct,"XLNetModel"),Nct.forEach(t),lCo=r(h9e," (XLNet model)"),h9e.forEach(t),iCo=i($),E_=n($,"LI",{});var p9e=s(E_);pce=n(p9e,"STRONG",{});var qct=s(pce);dCo=r(qct,"yolos"),qct.forEach(t),cCo=r(p9e," \u2014 "),Oj=n(p9e,"A",{href:!0});var jct=s(Oj);fCo=r(jct,"YolosModel"),jct.forEach(t),mCo=r(p9e," (YOLOS model)"),p9e.forEach(t),gCo=i($),C_=n($,"LI",{});var u9e=s(C_);uce=n(u9e,"STRONG",{});var Dct=s(uce);hCo=r(Dct,"yoso"),Dct.forEach(t),pCo=r(u9e," \u2014 "),Vj=n(u9e,"A",{href:!0});var Gct=s(Vj);uCo=r(Gct,"YosoModel"),Gct.forEach(t),_Co=r(u9e," (YOSO model)"),u9e.forEach(t),$.forEach(t),bCo=i(aa),w_=n(aa,"P",{});var _9e=s(w_);vCo=r(_9e,"The model is set in evaluation mode by default using "),_ce=n(_9e,"CODE",{});var Oct=s(_ce);FCo=r(Oct,"model.eval()"),Oct.forEach(t),TCo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=n(_9e,"CODE",{});var Vct=s(bce);MCo=r(Vct,"model.train()"),Vct.forEach(t),_9e.forEach(t),ECo=i(aa),T(A_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),_Ge=i(f),Ni=n(f,"H2",{class:!0});var EVe=s(Ni);L_=n(EVe,"A",{id:!0,class:!0,href:!0});var Xct=s(L_);vce=n(Xct,"SPAN",{});var zct=s(vce);T(YL.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),CCo=i(EVe),Fce=n(EVe,"SPAN",{});var Wct=s(Fce);wCo=r(Wct,"AutoModelForPreTraining"),Wct.forEach(t),EVe.forEach(t),bGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(KL.$$.fragment,Js),ACo=i(Js),qi=n(Js,"P",{});var ooe=s(qi);LCo=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xj=n(ooe,"A",{href:!0});var Qct=s(Xj);yCo=r(Qct,"from_pretrained()"),Qct.forEach(t),xCo=r(ooe," class method or the "),zj=n(ooe,"A",{href:!0});var Hct=s(zj);$Co=r(Hct,"from_config()"),Hct.forEach(t),kCo=r(ooe,` class
method.`),ooe.forEach(t),SCo=i(Js),ZL=n(Js,"P",{});var CVe=s(ZL);RCo=r(CVe,"This class cannot be instantiated directly using "),Tce=n(CVe,"CODE",{});var Uct=s(Tce);PCo=r(Uct,"__init__()"),Uct.forEach(t),BCo=r(CVe," (throws an error)."),CVe.forEach(t),ICo=i(Js),st=n(Js,"DIV",{class:!0});var CA=s(st);T(ey.$$.fragment,CA),NCo=i(CA),Mce=n(CA,"P",{});var Jct=s(Mce);qCo=r(Jct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jct.forEach(t),jCo=i(CA),ji=n(CA,"P",{});var roe=s(ji);DCo=r(roe,`Note:
Loading a model from its configuration file does `),Ece=n(roe,"STRONG",{});var Yct=s(Ece);GCo=r(Yct,"not"),Yct.forEach(t),OCo=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=n(roe,"A",{href:!0});var Kct=s(Wj);VCo=r(Kct,"from_pretrained()"),Kct.forEach(t),XCo=r(roe," to load the model weights."),roe.forEach(t),zCo=i(CA),T(y_.$$.fragment,CA),CA.forEach(t),WCo=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(oy.$$.fragment,na),QCo=i(na),Cce=n(na,"P",{});var Zct=s(Cce);HCo=r(Zct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zct.forEach(t),UCo=i(na),Ra=n(na,"P",{});var wA=s(Ra);JCo=r(wA,"The model class to instantiate is selected based on the "),wce=n(wA,"CODE",{});var eft=s(wce);YCo=r(eft,"model_type"),eft.forEach(t),KCo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Ace=n(wA,"CODE",{});var oft=s(Ace);ZCo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),e5o=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(wA,"CODE",{});var rft=s(Lce);o5o=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),r5o=r(wA,":"),wA.forEach(t),t5o=i(na),G=n(na,"UL",{});var O=s(G);x_=n(O,"LI",{});var b9e=s(x_);yce=n(b9e,"STRONG",{});var tft=s(yce);a5o=r(tft,"albert"),tft.forEach(t),n5o=r(b9e," \u2014 "),Qj=n(b9e,"A",{href:!0});var aft=s(Qj);s5o=r(aft,"AlbertForPreTraining"),aft.forEach(t),l5o=r(b9e," (ALBERT model)"),b9e.forEach(t),i5o=i(O),$_=n(O,"LI",{});var v9e=s($_);xce=n(v9e,"STRONG",{});var nft=s(xce);d5o=r(nft,"bart"),nft.forEach(t),c5o=r(v9e," \u2014 "),Hj=n(v9e,"A",{href:!0});var sft=s(Hj);f5o=r(sft,"BartForConditionalGeneration"),sft.forEach(t),m5o=r(v9e," (BART model)"),v9e.forEach(t),g5o=i(O),k_=n(O,"LI",{});var F9e=s(k_);$ce=n(F9e,"STRONG",{});var lft=s($ce);h5o=r(lft,"bert"),lft.forEach(t),p5o=r(F9e," \u2014 "),Uj=n(F9e,"A",{href:!0});var ift=s(Uj);u5o=r(ift,"BertForPreTraining"),ift.forEach(t),_5o=r(F9e," (BERT model)"),F9e.forEach(t),b5o=i(O),S_=n(O,"LI",{});var T9e=s(S_);kce=n(T9e,"STRONG",{});var dft=s(kce);v5o=r(dft,"big_bird"),dft.forEach(t),F5o=r(T9e," \u2014 "),Jj=n(T9e,"A",{href:!0});var cft=s(Jj);T5o=r(cft,"BigBirdForPreTraining"),cft.forEach(t),M5o=r(T9e," (BigBird model)"),T9e.forEach(t),E5o=i(O),R_=n(O,"LI",{});var M9e=s(R_);Sce=n(M9e,"STRONG",{});var fft=s(Sce);C5o=r(fft,"bloom"),fft.forEach(t),w5o=r(M9e," \u2014 "),Yj=n(M9e,"A",{href:!0});var mft=s(Yj);A5o=r(mft,"BloomForCausalLM"),mft.forEach(t),L5o=r(M9e," (BLOOM model)"),M9e.forEach(t),y5o=i(O),P_=n(O,"LI",{});var E9e=s(P_);Rce=n(E9e,"STRONG",{});var gft=s(Rce);x5o=r(gft,"camembert"),gft.forEach(t),$5o=r(E9e," \u2014 "),Kj=n(E9e,"A",{href:!0});var hft=s(Kj);k5o=r(hft,"CamembertForMaskedLM"),hft.forEach(t),S5o=r(E9e," (CamemBERT model)"),E9e.forEach(t),R5o=i(O),B_=n(O,"LI",{});var C9e=s(B_);Pce=n(C9e,"STRONG",{});var pft=s(Pce);P5o=r(pft,"ctrl"),pft.forEach(t),B5o=r(C9e," \u2014 "),Zj=n(C9e,"A",{href:!0});var uft=s(Zj);I5o=r(uft,"CTRLLMHeadModel"),uft.forEach(t),N5o=r(C9e," (CTRL model)"),C9e.forEach(t),q5o=i(O),I_=n(O,"LI",{});var w9e=s(I_);Bce=n(w9e,"STRONG",{});var _ft=s(Bce);j5o=r(_ft,"data2vec-text"),_ft.forEach(t),D5o=r(w9e," \u2014 "),eD=n(w9e,"A",{href:!0});var bft=s(eD);G5o=r(bft,"Data2VecTextForMaskedLM"),bft.forEach(t),O5o=r(w9e," (Data2VecText model)"),w9e.forEach(t),V5o=i(O),N_=n(O,"LI",{});var A9e=s(N_);Ice=n(A9e,"STRONG",{});var vft=s(Ice);X5o=r(vft,"deberta"),vft.forEach(t),z5o=r(A9e," \u2014 "),oD=n(A9e,"A",{href:!0});var Fft=s(oD);W5o=r(Fft,"DebertaForMaskedLM"),Fft.forEach(t),Q5o=r(A9e," (DeBERTa model)"),A9e.forEach(t),H5o=i(O),q_=n(O,"LI",{});var L9e=s(q_);Nce=n(L9e,"STRONG",{});var Tft=s(Nce);U5o=r(Tft,"deberta-v2"),Tft.forEach(t),J5o=r(L9e," \u2014 "),rD=n(L9e,"A",{href:!0});var Mft=s(rD);Y5o=r(Mft,"DebertaV2ForMaskedLM"),Mft.forEach(t),K5o=r(L9e," (DeBERTa-v2 model)"),L9e.forEach(t),Z5o=i(O),j_=n(O,"LI",{});var y9e=s(j_);qce=n(y9e,"STRONG",{});var Eft=s(qce);e3o=r(Eft,"distilbert"),Eft.forEach(t),o3o=r(y9e," \u2014 "),tD=n(y9e,"A",{href:!0});var Cft=s(tD);r3o=r(Cft,"DistilBertForMaskedLM"),Cft.forEach(t),t3o=r(y9e," (DistilBERT model)"),y9e.forEach(t),a3o=i(O),D_=n(O,"LI",{});var x9e=s(D_);jce=n(x9e,"STRONG",{});var wft=s(jce);n3o=r(wft,"electra"),wft.forEach(t),s3o=r(x9e," \u2014 "),aD=n(x9e,"A",{href:!0});var Aft=s(aD);l3o=r(Aft,"ElectraForPreTraining"),Aft.forEach(t),i3o=r(x9e," (ELECTRA model)"),x9e.forEach(t),d3o=i(O),G_=n(O,"LI",{});var $9e=s(G_);Dce=n($9e,"STRONG",{});var Lft=s(Dce);c3o=r(Lft,"flaubert"),Lft.forEach(t),f3o=r($9e," \u2014 "),nD=n($9e,"A",{href:!0});var yft=s(nD);m3o=r(yft,"FlaubertWithLMHeadModel"),yft.forEach(t),g3o=r($9e," (FlauBERT model)"),$9e.forEach(t),h3o=i(O),O_=n(O,"LI",{});var k9e=s(O_);Gce=n(k9e,"STRONG",{});var xft=s(Gce);p3o=r(xft,"flava"),xft.forEach(t),u3o=r(k9e," \u2014 "),sD=n(k9e,"A",{href:!0});var $ft=s(sD);_3o=r($ft,"FlavaForPreTraining"),$ft.forEach(t),b3o=r(k9e," (FLAVA model)"),k9e.forEach(t),v3o=i(O),V_=n(O,"LI",{});var S9e=s(V_);Oce=n(S9e,"STRONG",{});var kft=s(Oce);F3o=r(kft,"fnet"),kft.forEach(t),T3o=r(S9e," \u2014 "),lD=n(S9e,"A",{href:!0});var Sft=s(lD);M3o=r(Sft,"FNetForPreTraining"),Sft.forEach(t),E3o=r(S9e," (FNet model)"),S9e.forEach(t),C3o=i(O),X_=n(O,"LI",{});var R9e=s(X_);Vce=n(R9e,"STRONG",{});var Rft=s(Vce);w3o=r(Rft,"fsmt"),Rft.forEach(t),A3o=r(R9e," \u2014 "),iD=n(R9e,"A",{href:!0});var Pft=s(iD);L3o=r(Pft,"FSMTForConditionalGeneration"),Pft.forEach(t),y3o=r(R9e," (FairSeq Machine-Translation model)"),R9e.forEach(t),x3o=i(O),z_=n(O,"LI",{});var P9e=s(z_);Xce=n(P9e,"STRONG",{});var Bft=s(Xce);$3o=r(Bft,"funnel"),Bft.forEach(t),k3o=r(P9e," \u2014 "),dD=n(P9e,"A",{href:!0});var Ift=s(dD);S3o=r(Ift,"FunnelForPreTraining"),Ift.forEach(t),R3o=r(P9e," (Funnel Transformer model)"),P9e.forEach(t),P3o=i(O),W_=n(O,"LI",{});var B9e=s(W_);zce=n(B9e,"STRONG",{});var Nft=s(zce);B3o=r(Nft,"gpt2"),Nft.forEach(t),I3o=r(B9e," \u2014 "),cD=n(B9e,"A",{href:!0});var qft=s(cD);N3o=r(qft,"GPT2LMHeadModel"),qft.forEach(t),q3o=r(B9e," (OpenAI GPT-2 model)"),B9e.forEach(t),j3o=i(O),Q_=n(O,"LI",{});var I9e=s(Q_);Wce=n(I9e,"STRONG",{});var jft=s(Wce);D3o=r(jft,"ibert"),jft.forEach(t),G3o=r(I9e," \u2014 "),fD=n(I9e,"A",{href:!0});var Dft=s(fD);O3o=r(Dft,"IBertForMaskedLM"),Dft.forEach(t),V3o=r(I9e," (I-BERT model)"),I9e.forEach(t),X3o=i(O),H_=n(O,"LI",{});var N9e=s(H_);Qce=n(N9e,"STRONG",{});var Gft=s(Qce);z3o=r(Gft,"layoutlm"),Gft.forEach(t),W3o=r(N9e," \u2014 "),mD=n(N9e,"A",{href:!0});var Oft=s(mD);Q3o=r(Oft,"LayoutLMForMaskedLM"),Oft.forEach(t),H3o=r(N9e," (LayoutLM model)"),N9e.forEach(t),U3o=i(O),U_=n(O,"LI",{});var q9e=s(U_);Hce=n(q9e,"STRONG",{});var Vft=s(Hce);J3o=r(Vft,"longformer"),Vft.forEach(t),Y3o=r(q9e," \u2014 "),gD=n(q9e,"A",{href:!0});var Xft=s(gD);K3o=r(Xft,"LongformerForMaskedLM"),Xft.forEach(t),Z3o=r(q9e," (Longformer model)"),q9e.forEach(t),ewo=i(O),J_=n(O,"LI",{});var j9e=s(J_);Uce=n(j9e,"STRONG",{});var zft=s(Uce);owo=r(zft,"lxmert"),zft.forEach(t),rwo=r(j9e," \u2014 "),hD=n(j9e,"A",{href:!0});var Wft=s(hD);two=r(Wft,"LxmertForPreTraining"),Wft.forEach(t),awo=r(j9e," (LXMERT model)"),j9e.forEach(t),nwo=i(O),Y_=n(O,"LI",{});var D9e=s(Y_);Jce=n(D9e,"STRONG",{});var Qft=s(Jce);swo=r(Qft,"megatron-bert"),Qft.forEach(t),lwo=r(D9e," \u2014 "),pD=n(D9e,"A",{href:!0});var Hft=s(pD);iwo=r(Hft,"MegatronBertForPreTraining"),Hft.forEach(t),dwo=r(D9e," (Megatron-BERT model)"),D9e.forEach(t),cwo=i(O),K_=n(O,"LI",{});var G9e=s(K_);Yce=n(G9e,"STRONG",{});var Uft=s(Yce);fwo=r(Uft,"mobilebert"),Uft.forEach(t),mwo=r(G9e," \u2014 "),uD=n(G9e,"A",{href:!0});var Jft=s(uD);gwo=r(Jft,"MobileBertForPreTraining"),Jft.forEach(t),hwo=r(G9e," (MobileBERT model)"),G9e.forEach(t),pwo=i(O),Z_=n(O,"LI",{});var O9e=s(Z_);Kce=n(O9e,"STRONG",{});var Yft=s(Kce);uwo=r(Yft,"mpnet"),Yft.forEach(t),_wo=r(O9e," \u2014 "),_D=n(O9e,"A",{href:!0});var Kft=s(_D);bwo=r(Kft,"MPNetForMaskedLM"),Kft.forEach(t),vwo=r(O9e," (MPNet model)"),O9e.forEach(t),Fwo=i(O),e7=n(O,"LI",{});var V9e=s(e7);Zce=n(V9e,"STRONG",{});var Zft=s(Zce);Two=r(Zft,"openai-gpt"),Zft.forEach(t),Mwo=r(V9e," \u2014 "),bD=n(V9e,"A",{href:!0});var emt=s(bD);Ewo=r(emt,"OpenAIGPTLMHeadModel"),emt.forEach(t),Cwo=r(V9e," (OpenAI GPT model)"),V9e.forEach(t),wwo=i(O),o7=n(O,"LI",{});var X9e=s(o7);efe=n(X9e,"STRONG",{});var omt=s(efe);Awo=r(omt,"retribert"),omt.forEach(t),Lwo=r(X9e," \u2014 "),vD=n(X9e,"A",{href:!0});var rmt=s(vD);ywo=r(rmt,"RetriBertModel"),rmt.forEach(t),xwo=r(X9e," (RetriBERT model)"),X9e.forEach(t),$wo=i(O),r7=n(O,"LI",{});var z9e=s(r7);ofe=n(z9e,"STRONG",{});var tmt=s(ofe);kwo=r(tmt,"roberta"),tmt.forEach(t),Swo=r(z9e," \u2014 "),FD=n(z9e,"A",{href:!0});var amt=s(FD);Rwo=r(amt,"RobertaForMaskedLM"),amt.forEach(t),Pwo=r(z9e," (RoBERTa model)"),z9e.forEach(t),Bwo=i(O),t7=n(O,"LI",{});var W9e=s(t7);rfe=n(W9e,"STRONG",{});var nmt=s(rfe);Iwo=r(nmt,"splinter"),nmt.forEach(t),Nwo=r(W9e," \u2014 "),TD=n(W9e,"A",{href:!0});var smt=s(TD);qwo=r(smt,"SplinterForPreTraining"),smt.forEach(t),jwo=r(W9e," (Splinter model)"),W9e.forEach(t),Dwo=i(O),a7=n(O,"LI",{});var Q9e=s(a7);tfe=n(Q9e,"STRONG",{});var lmt=s(tfe);Gwo=r(lmt,"squeezebert"),lmt.forEach(t),Owo=r(Q9e," \u2014 "),MD=n(Q9e,"A",{href:!0});var imt=s(MD);Vwo=r(imt,"SqueezeBertForMaskedLM"),imt.forEach(t),Xwo=r(Q9e," (SqueezeBERT model)"),Q9e.forEach(t),zwo=i(O),n7=n(O,"LI",{});var H9e=s(n7);afe=n(H9e,"STRONG",{});var dmt=s(afe);Wwo=r(dmt,"t5"),dmt.forEach(t),Qwo=r(H9e," \u2014 "),ED=n(H9e,"A",{href:!0});var cmt=s(ED);Hwo=r(cmt,"T5ForConditionalGeneration"),cmt.forEach(t),Uwo=r(H9e," (T5 model)"),H9e.forEach(t),Jwo=i(O),s7=n(O,"LI",{});var U9e=s(s7);nfe=n(U9e,"STRONG",{});var fmt=s(nfe);Ywo=r(fmt,"tapas"),fmt.forEach(t),Kwo=r(U9e," \u2014 "),CD=n(U9e,"A",{href:!0});var mmt=s(CD);Zwo=r(mmt,"TapasForMaskedLM"),mmt.forEach(t),eAo=r(U9e," (TAPAS model)"),U9e.forEach(t),oAo=i(O),l7=n(O,"LI",{});var J9e=s(l7);sfe=n(J9e,"STRONG",{});var gmt=s(sfe);rAo=r(gmt,"transfo-xl"),gmt.forEach(t),tAo=r(J9e," \u2014 "),wD=n(J9e,"A",{href:!0});var hmt=s(wD);aAo=r(hmt,"TransfoXLLMHeadModel"),hmt.forEach(t),nAo=r(J9e," (Transformer-XL model)"),J9e.forEach(t),sAo=i(O),i7=n(O,"LI",{});var Y9e=s(i7);lfe=n(Y9e,"STRONG",{});var pmt=s(lfe);lAo=r(pmt,"unispeech"),pmt.forEach(t),iAo=r(Y9e," \u2014 "),AD=n(Y9e,"A",{href:!0});var umt=s(AD);dAo=r(umt,"UniSpeechForPreTraining"),umt.forEach(t),cAo=r(Y9e," (UniSpeech model)"),Y9e.forEach(t),fAo=i(O),d7=n(O,"LI",{});var K9e=s(d7);ife=n(K9e,"STRONG",{});var _mt=s(ife);mAo=r(_mt,"unispeech-sat"),_mt.forEach(t),gAo=r(K9e," \u2014 "),LD=n(K9e,"A",{href:!0});var bmt=s(LD);hAo=r(bmt,"UniSpeechSatForPreTraining"),bmt.forEach(t),pAo=r(K9e," (UniSpeechSat model)"),K9e.forEach(t),uAo=i(O),c7=n(O,"LI",{});var Z9e=s(c7);dfe=n(Z9e,"STRONG",{});var vmt=s(dfe);_Ao=r(vmt,"visual_bert"),vmt.forEach(t),bAo=r(Z9e," \u2014 "),yD=n(Z9e,"A",{href:!0});var Fmt=s(yD);vAo=r(Fmt,"VisualBertForPreTraining"),Fmt.forEach(t),FAo=r(Z9e," (VisualBERT model)"),Z9e.forEach(t),TAo=i(O),f7=n(O,"LI",{});var exe=s(f7);cfe=n(exe,"STRONG",{});var Tmt=s(cfe);MAo=r(Tmt,"vit_mae"),Tmt.forEach(t),EAo=r(exe," \u2014 "),xD=n(exe,"A",{href:!0});var Mmt=s(xD);CAo=r(Mmt,"ViTMAEForPreTraining"),Mmt.forEach(t),wAo=r(exe," (ViTMAE model)"),exe.forEach(t),AAo=i(O),m7=n(O,"LI",{});var oxe=s(m7);ffe=n(oxe,"STRONG",{});var Emt=s(ffe);LAo=r(Emt,"wav2vec2"),Emt.forEach(t),yAo=r(oxe," \u2014 "),$D=n(oxe,"A",{href:!0});var Cmt=s($D);xAo=r(Cmt,"Wav2Vec2ForPreTraining"),Cmt.forEach(t),$Ao=r(oxe," (Wav2Vec2 model)"),oxe.forEach(t),kAo=i(O),g7=n(O,"LI",{});var rxe=s(g7);mfe=n(rxe,"STRONG",{});var wmt=s(mfe);SAo=r(wmt,"wav2vec2-conformer"),wmt.forEach(t),RAo=r(rxe," \u2014 "),kD=n(rxe,"A",{href:!0});var Amt=s(kD);PAo=r(Amt,"Wav2Vec2ConformerForPreTraining"),Amt.forEach(t),BAo=r(rxe," (Wav2Vec2-Conformer model)"),rxe.forEach(t),IAo=i(O),h7=n(O,"LI",{});var txe=s(h7);gfe=n(txe,"STRONG",{});var Lmt=s(gfe);NAo=r(Lmt,"xlm"),Lmt.forEach(t),qAo=r(txe," \u2014 "),SD=n(txe,"A",{href:!0});var ymt=s(SD);jAo=r(ymt,"XLMWithLMHeadModel"),ymt.forEach(t),DAo=r(txe," (XLM model)"),txe.forEach(t),GAo=i(O),p7=n(O,"LI",{});var axe=s(p7);hfe=n(axe,"STRONG",{});var xmt=s(hfe);OAo=r(xmt,"xlm-roberta"),xmt.forEach(t),VAo=r(axe," \u2014 "),RD=n(axe,"A",{href:!0});var $mt=s(RD);XAo=r($mt,"XLMRobertaForMaskedLM"),$mt.forEach(t),zAo=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),WAo=i(O),u7=n(O,"LI",{});var nxe=s(u7);pfe=n(nxe,"STRONG",{});var kmt=s(pfe);QAo=r(kmt,"xlm-roberta-xl"),kmt.forEach(t),HAo=r(nxe," \u2014 "),PD=n(nxe,"A",{href:!0});var Smt=s(PD);UAo=r(Smt,"XLMRobertaXLForMaskedLM"),Smt.forEach(t),JAo=r(nxe," (XLM-RoBERTa-XL model)"),nxe.forEach(t),YAo=i(O),_7=n(O,"LI",{});var sxe=s(_7);ufe=n(sxe,"STRONG",{});var Rmt=s(ufe);KAo=r(Rmt,"xlnet"),Rmt.forEach(t),ZAo=r(sxe," \u2014 "),BD=n(sxe,"A",{href:!0});var Pmt=s(BD);e6o=r(Pmt,"XLNetLMHeadModel"),Pmt.forEach(t),o6o=r(sxe," (XLNet model)"),sxe.forEach(t),O.forEach(t),r6o=i(na),b7=n(na,"P",{});var lxe=s(b7);t6o=r(lxe,"The model is set in evaluation mode by default using "),_fe=n(lxe,"CODE",{});var Bmt=s(_fe);a6o=r(Bmt,"model.eval()"),Bmt.forEach(t),n6o=r(lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bfe=n(lxe,"CODE",{});var Imt=s(bfe);s6o=r(Imt,"model.train()"),Imt.forEach(t),lxe.forEach(t),l6o=i(na),T(v7.$$.fragment,na),na.forEach(t),Js.forEach(t),vGe=i(f),Di=n(f,"H2",{class:!0});var wVe=s(Di);F7=n(wVe,"A",{id:!0,class:!0,href:!0});var Nmt=s(F7);vfe=n(Nmt,"SPAN",{});var qmt=s(vfe);T(ry.$$.fragment,qmt),qmt.forEach(t),Nmt.forEach(t),i6o=i(wVe),Ffe=n(wVe,"SPAN",{});var jmt=s(Ffe);d6o=r(jmt,"AutoModelForCausalLM"),jmt.forEach(t),wVe.forEach(t),FGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(ty.$$.fragment,Ys),c6o=i(Ys),Gi=n(Ys,"P",{});var toe=s(Gi);f6o=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ID=n(toe,"A",{href:!0});var Dmt=s(ID);m6o=r(Dmt,"from_pretrained()"),Dmt.forEach(t),g6o=r(toe," class method or the "),ND=n(toe,"A",{href:!0});var Gmt=s(ND);h6o=r(Gmt,"from_config()"),Gmt.forEach(t),p6o=r(toe,` class
method.`),toe.forEach(t),u6o=i(Ys),ay=n(Ys,"P",{});var AVe=s(ay);_6o=r(AVe,"This class cannot be instantiated directly using "),Tfe=n(AVe,"CODE",{});var Omt=s(Tfe);b6o=r(Omt,"__init__()"),Omt.forEach(t),v6o=r(AVe," (throws an error)."),AVe.forEach(t),F6o=i(Ys),lt=n(Ys,"DIV",{class:!0});var AA=s(lt);T(ny.$$.fragment,AA),T6o=i(AA),Mfe=n(AA,"P",{});var Vmt=s(Mfe);M6o=r(Vmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vmt.forEach(t),E6o=i(AA),Oi=n(AA,"P",{});var aoe=s(Oi);C6o=r(aoe,`Note:
Loading a model from its configuration file does `),Efe=n(aoe,"STRONG",{});var Xmt=s(Efe);w6o=r(Xmt,"not"),Xmt.forEach(t),A6o=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(aoe,"A",{href:!0});var zmt=s(qD);L6o=r(zmt,"from_pretrained()"),zmt.forEach(t),y6o=r(aoe," to load the model weights."),aoe.forEach(t),x6o=i(AA),T(T7.$$.fragment,AA),AA.forEach(t),$6o=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(sy.$$.fragment,sa),k6o=i(sa),Cfe=n(sa,"P",{});var Wmt=s(Cfe);S6o=r(Wmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wmt.forEach(t),R6o=i(sa),Pa=n(sa,"P",{});var LA=s(Pa);P6o=r(LA,"The model class to instantiate is selected based on the "),wfe=n(LA,"CODE",{});var Qmt=s(wfe);B6o=r(Qmt,"model_type"),Qmt.forEach(t),I6o=r(LA,` property of the config object (either
passed as an argument or loaded from `),Afe=n(LA,"CODE",{});var Hmt=s(Afe);N6o=r(Hmt,"pretrained_model_name_or_path"),Hmt.forEach(t),q6o=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(LA,"CODE",{});var Umt=s(Lfe);j6o=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),D6o=r(LA,":"),LA.forEach(t),G6o=i(sa),z=n(sa,"UL",{});var W=s(z);M7=n(W,"LI",{});var ixe=s(M7);yfe=n(ixe,"STRONG",{});var Jmt=s(yfe);O6o=r(Jmt,"bart"),Jmt.forEach(t),V6o=r(ixe," \u2014 "),jD=n(ixe,"A",{href:!0});var Ymt=s(jD);X6o=r(Ymt,"BartForCausalLM"),Ymt.forEach(t),z6o=r(ixe," (BART model)"),ixe.forEach(t),W6o=i(W),E7=n(W,"LI",{});var dxe=s(E7);xfe=n(dxe,"STRONG",{});var Kmt=s(xfe);Q6o=r(Kmt,"bert"),Kmt.forEach(t),H6o=r(dxe," \u2014 "),DD=n(dxe,"A",{href:!0});var Zmt=s(DD);U6o=r(Zmt,"BertLMHeadModel"),Zmt.forEach(t),J6o=r(dxe," (BERT model)"),dxe.forEach(t),Y6o=i(W),C7=n(W,"LI",{});var cxe=s(C7);$fe=n(cxe,"STRONG",{});var egt=s($fe);K6o=r(egt,"bert-generation"),egt.forEach(t),Z6o=r(cxe," \u2014 "),GD=n(cxe,"A",{href:!0});var ogt=s(GD);eLo=r(ogt,"BertGenerationDecoder"),ogt.forEach(t),oLo=r(cxe," (Bert Generation model)"),cxe.forEach(t),rLo=i(W),w7=n(W,"LI",{});var fxe=s(w7);kfe=n(fxe,"STRONG",{});var rgt=s(kfe);tLo=r(rgt,"big_bird"),rgt.forEach(t),aLo=r(fxe," \u2014 "),OD=n(fxe,"A",{href:!0});var tgt=s(OD);nLo=r(tgt,"BigBirdForCausalLM"),tgt.forEach(t),sLo=r(fxe," (BigBird model)"),fxe.forEach(t),lLo=i(W),A7=n(W,"LI",{});var mxe=s(A7);Sfe=n(mxe,"STRONG",{});var agt=s(Sfe);iLo=r(agt,"bigbird_pegasus"),agt.forEach(t),dLo=r(mxe," \u2014 "),VD=n(mxe,"A",{href:!0});var ngt=s(VD);cLo=r(ngt,"BigBirdPegasusForCausalLM"),ngt.forEach(t),fLo=r(mxe," (BigBird-Pegasus model)"),mxe.forEach(t),mLo=i(W),L7=n(W,"LI",{});var gxe=s(L7);Rfe=n(gxe,"STRONG",{});var sgt=s(Rfe);gLo=r(sgt,"blenderbot"),sgt.forEach(t),hLo=r(gxe," \u2014 "),XD=n(gxe,"A",{href:!0});var lgt=s(XD);pLo=r(lgt,"BlenderbotForCausalLM"),lgt.forEach(t),uLo=r(gxe," (Blenderbot model)"),gxe.forEach(t),_Lo=i(W),y7=n(W,"LI",{});var hxe=s(y7);Pfe=n(hxe,"STRONG",{});var igt=s(Pfe);bLo=r(igt,"blenderbot-small"),igt.forEach(t),vLo=r(hxe," \u2014 "),zD=n(hxe,"A",{href:!0});var dgt=s(zD);FLo=r(dgt,"BlenderbotSmallForCausalLM"),dgt.forEach(t),TLo=r(hxe," (BlenderbotSmall model)"),hxe.forEach(t),MLo=i(W),x7=n(W,"LI",{});var pxe=s(x7);Bfe=n(pxe,"STRONG",{});var cgt=s(Bfe);ELo=r(cgt,"bloom"),cgt.forEach(t),CLo=r(pxe," \u2014 "),WD=n(pxe,"A",{href:!0});var fgt=s(WD);wLo=r(fgt,"BloomForCausalLM"),fgt.forEach(t),ALo=r(pxe," (BLOOM model)"),pxe.forEach(t),LLo=i(W),$7=n(W,"LI",{});var uxe=s($7);Ife=n(uxe,"STRONG",{});var mgt=s(Ife);yLo=r(mgt,"camembert"),mgt.forEach(t),xLo=r(uxe," \u2014 "),QD=n(uxe,"A",{href:!0});var ggt=s(QD);$Lo=r(ggt,"CamembertForCausalLM"),ggt.forEach(t),kLo=r(uxe," (CamemBERT model)"),uxe.forEach(t),SLo=i(W),k7=n(W,"LI",{});var _xe=s(k7);Nfe=n(_xe,"STRONG",{});var hgt=s(Nfe);RLo=r(hgt,"ctrl"),hgt.forEach(t),PLo=r(_xe," \u2014 "),HD=n(_xe,"A",{href:!0});var pgt=s(HD);BLo=r(pgt,"CTRLLMHeadModel"),pgt.forEach(t),ILo=r(_xe," (CTRL model)"),_xe.forEach(t),NLo=i(W),S7=n(W,"LI",{});var bxe=s(S7);qfe=n(bxe,"STRONG",{});var ugt=s(qfe);qLo=r(ugt,"data2vec-text"),ugt.forEach(t),jLo=r(bxe," \u2014 "),UD=n(bxe,"A",{href:!0});var _gt=s(UD);DLo=r(_gt,"Data2VecTextForCausalLM"),_gt.forEach(t),GLo=r(bxe," (Data2VecText model)"),bxe.forEach(t),OLo=i(W),R7=n(W,"LI",{});var vxe=s(R7);jfe=n(vxe,"STRONG",{});var bgt=s(jfe);VLo=r(bgt,"electra"),bgt.forEach(t),XLo=r(vxe," \u2014 "),JD=n(vxe,"A",{href:!0});var vgt=s(JD);zLo=r(vgt,"ElectraForCausalLM"),vgt.forEach(t),WLo=r(vxe," (ELECTRA model)"),vxe.forEach(t),QLo=i(W),P7=n(W,"LI",{});var Fxe=s(P7);Dfe=n(Fxe,"STRONG",{});var Fgt=s(Dfe);HLo=r(Fgt,"gpt2"),Fgt.forEach(t),ULo=r(Fxe," \u2014 "),YD=n(Fxe,"A",{href:!0});var Tgt=s(YD);JLo=r(Tgt,"GPT2LMHeadModel"),Tgt.forEach(t),YLo=r(Fxe," (OpenAI GPT-2 model)"),Fxe.forEach(t),KLo=i(W),B7=n(W,"LI",{});var Txe=s(B7);Gfe=n(Txe,"STRONG",{});var Mgt=s(Gfe);ZLo=r(Mgt,"gpt_neo"),Mgt.forEach(t),eyo=r(Txe," \u2014 "),KD=n(Txe,"A",{href:!0});var Egt=s(KD);oyo=r(Egt,"GPTNeoForCausalLM"),Egt.forEach(t),ryo=r(Txe," (GPT Neo model)"),Txe.forEach(t),tyo=i(W),I7=n(W,"LI",{});var Mxe=s(I7);Ofe=n(Mxe,"STRONG",{});var Cgt=s(Ofe);ayo=r(Cgt,"gpt_neox"),Cgt.forEach(t),nyo=r(Mxe," \u2014 "),ZD=n(Mxe,"A",{href:!0});var wgt=s(ZD);syo=r(wgt,"GPTNeoXForCausalLM"),wgt.forEach(t),lyo=r(Mxe," (GPT NeoX model)"),Mxe.forEach(t),iyo=i(W),N7=n(W,"LI",{});var Exe=s(N7);Vfe=n(Exe,"STRONG",{});var Agt=s(Vfe);dyo=r(Agt,"gptj"),Agt.forEach(t),cyo=r(Exe," \u2014 "),eG=n(Exe,"A",{href:!0});var Lgt=s(eG);fyo=r(Lgt,"GPTJForCausalLM"),Lgt.forEach(t),myo=r(Exe," (GPT-J model)"),Exe.forEach(t),gyo=i(W),q7=n(W,"LI",{});var Cxe=s(q7);Xfe=n(Cxe,"STRONG",{});var ygt=s(Xfe);hyo=r(ygt,"marian"),ygt.forEach(t),pyo=r(Cxe," \u2014 "),oG=n(Cxe,"A",{href:!0});var xgt=s(oG);uyo=r(xgt,"MarianForCausalLM"),xgt.forEach(t),_yo=r(Cxe," (Marian model)"),Cxe.forEach(t),byo=i(W),j7=n(W,"LI",{});var wxe=s(j7);zfe=n(wxe,"STRONG",{});var $gt=s(zfe);vyo=r($gt,"mbart"),$gt.forEach(t),Fyo=r(wxe," \u2014 "),rG=n(wxe,"A",{href:!0});var kgt=s(rG);Tyo=r(kgt,"MBartForCausalLM"),kgt.forEach(t),Myo=r(wxe," (mBART model)"),wxe.forEach(t),Eyo=i(W),D7=n(W,"LI",{});var Axe=s(D7);Wfe=n(Axe,"STRONG",{});var Sgt=s(Wfe);Cyo=r(Sgt,"megatron-bert"),Sgt.forEach(t),wyo=r(Axe," \u2014 "),tG=n(Axe,"A",{href:!0});var Rgt=s(tG);Ayo=r(Rgt,"MegatronBertForCausalLM"),Rgt.forEach(t),Lyo=r(Axe," (Megatron-BERT model)"),Axe.forEach(t),yyo=i(W),G7=n(W,"LI",{});var Lxe=s(G7);Qfe=n(Lxe,"STRONG",{});var Pgt=s(Qfe);xyo=r(Pgt,"openai-gpt"),Pgt.forEach(t),$yo=r(Lxe," \u2014 "),aG=n(Lxe,"A",{href:!0});var Bgt=s(aG);kyo=r(Bgt,"OpenAIGPTLMHeadModel"),Bgt.forEach(t),Syo=r(Lxe," (OpenAI GPT model)"),Lxe.forEach(t),Ryo=i(W),O7=n(W,"LI",{});var yxe=s(O7);Hfe=n(yxe,"STRONG",{});var Igt=s(Hfe);Pyo=r(Igt,"opt"),Igt.forEach(t),Byo=r(yxe," \u2014 "),nG=n(yxe,"A",{href:!0});var Ngt=s(nG);Iyo=r(Ngt,"OPTForCausalLM"),Ngt.forEach(t),Nyo=r(yxe," (OPT model)"),yxe.forEach(t),qyo=i(W),V7=n(W,"LI",{});var xxe=s(V7);Ufe=n(xxe,"STRONG",{});var qgt=s(Ufe);jyo=r(qgt,"pegasus"),qgt.forEach(t),Dyo=r(xxe," \u2014 "),sG=n(xxe,"A",{href:!0});var jgt=s(sG);Gyo=r(jgt,"PegasusForCausalLM"),jgt.forEach(t),Oyo=r(xxe," (Pegasus model)"),xxe.forEach(t),Vyo=i(W),X7=n(W,"LI",{});var $xe=s(X7);Jfe=n($xe,"STRONG",{});var Dgt=s(Jfe);Xyo=r(Dgt,"plbart"),Dgt.forEach(t),zyo=r($xe," \u2014 "),lG=n($xe,"A",{href:!0});var Ggt=s(lG);Wyo=r(Ggt,"PLBartForCausalLM"),Ggt.forEach(t),Qyo=r($xe," (PLBart model)"),$xe.forEach(t),Hyo=i(W),z7=n(W,"LI",{});var kxe=s(z7);Yfe=n(kxe,"STRONG",{});var Ogt=s(Yfe);Uyo=r(Ogt,"prophetnet"),Ogt.forEach(t),Jyo=r(kxe," \u2014 "),iG=n(kxe,"A",{href:!0});var Vgt=s(iG);Yyo=r(Vgt,"ProphetNetForCausalLM"),Vgt.forEach(t),Kyo=r(kxe," (ProphetNet model)"),kxe.forEach(t),Zyo=i(W),W7=n(W,"LI",{});var Sxe=s(W7);Kfe=n(Sxe,"STRONG",{});var Xgt=s(Kfe);e8o=r(Xgt,"qdqbert"),Xgt.forEach(t),o8o=r(Sxe," \u2014 "),dG=n(Sxe,"A",{href:!0});var zgt=s(dG);r8o=r(zgt,"QDQBertLMHeadModel"),zgt.forEach(t),t8o=r(Sxe," (QDQBert model)"),Sxe.forEach(t),a8o=i(W),Q7=n(W,"LI",{});var Rxe=s(Q7);Zfe=n(Rxe,"STRONG",{});var Wgt=s(Zfe);n8o=r(Wgt,"reformer"),Wgt.forEach(t),s8o=r(Rxe," \u2014 "),cG=n(Rxe,"A",{href:!0});var Qgt=s(cG);l8o=r(Qgt,"ReformerModelWithLMHead"),Qgt.forEach(t),i8o=r(Rxe," (Reformer model)"),Rxe.forEach(t),d8o=i(W),H7=n(W,"LI",{});var Pxe=s(H7);eme=n(Pxe,"STRONG",{});var Hgt=s(eme);c8o=r(Hgt,"rembert"),Hgt.forEach(t),f8o=r(Pxe," \u2014 "),fG=n(Pxe,"A",{href:!0});var Ugt=s(fG);m8o=r(Ugt,"RemBertForCausalLM"),Ugt.forEach(t),g8o=r(Pxe," (RemBERT model)"),Pxe.forEach(t),h8o=i(W),U7=n(W,"LI",{});var Bxe=s(U7);ome=n(Bxe,"STRONG",{});var Jgt=s(ome);p8o=r(Jgt,"roberta"),Jgt.forEach(t),u8o=r(Bxe," \u2014 "),mG=n(Bxe,"A",{href:!0});var Ygt=s(mG);_8o=r(Ygt,"RobertaForCausalLM"),Ygt.forEach(t),b8o=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),v8o=i(W),J7=n(W,"LI",{});var Ixe=s(J7);rme=n(Ixe,"STRONG",{});var Kgt=s(rme);F8o=r(Kgt,"roformer"),Kgt.forEach(t),T8o=r(Ixe," \u2014 "),gG=n(Ixe,"A",{href:!0});var Zgt=s(gG);M8o=r(Zgt,"RoFormerForCausalLM"),Zgt.forEach(t),E8o=r(Ixe," (RoFormer model)"),Ixe.forEach(t),C8o=i(W),Y7=n(W,"LI",{});var Nxe=s(Y7);tme=n(Nxe,"STRONG",{});var eht=s(tme);w8o=r(eht,"speech_to_text_2"),eht.forEach(t),A8o=r(Nxe," \u2014 "),hG=n(Nxe,"A",{href:!0});var oht=s(hG);L8o=r(oht,"Speech2Text2ForCausalLM"),oht.forEach(t),y8o=r(Nxe," (Speech2Text2 model)"),Nxe.forEach(t),x8o=i(W),K7=n(W,"LI",{});var qxe=s(K7);ame=n(qxe,"STRONG",{});var rht=s(ame);$8o=r(rht,"transfo-xl"),rht.forEach(t),k8o=r(qxe," \u2014 "),pG=n(qxe,"A",{href:!0});var tht=s(pG);S8o=r(tht,"TransfoXLLMHeadModel"),tht.forEach(t),R8o=r(qxe," (Transformer-XL model)"),qxe.forEach(t),P8o=i(W),Z7=n(W,"LI",{});var jxe=s(Z7);nme=n(jxe,"STRONG",{});var aht=s(nme);B8o=r(aht,"trocr"),aht.forEach(t),I8o=r(jxe," \u2014 "),uG=n(jxe,"A",{href:!0});var nht=s(uG);N8o=r(nht,"TrOCRForCausalLM"),nht.forEach(t),q8o=r(jxe," (TrOCR model)"),jxe.forEach(t),j8o=i(W),e1=n(W,"LI",{});var Dxe=s(e1);sme=n(Dxe,"STRONG",{});var sht=s(sme);D8o=r(sht,"xglm"),sht.forEach(t),G8o=r(Dxe," \u2014 "),_G=n(Dxe,"A",{href:!0});var lht=s(_G);O8o=r(lht,"XGLMForCausalLM"),lht.forEach(t),V8o=r(Dxe," (XGLM model)"),Dxe.forEach(t),X8o=i(W),o1=n(W,"LI",{});var Gxe=s(o1);lme=n(Gxe,"STRONG",{});var iht=s(lme);z8o=r(iht,"xlm"),iht.forEach(t),W8o=r(Gxe," \u2014 "),bG=n(Gxe,"A",{href:!0});var dht=s(bG);Q8o=r(dht,"XLMWithLMHeadModel"),dht.forEach(t),H8o=r(Gxe," (XLM model)"),Gxe.forEach(t),U8o=i(W),r1=n(W,"LI",{});var Oxe=s(r1);ime=n(Oxe,"STRONG",{});var cht=s(ime);J8o=r(cht,"xlm-prophetnet"),cht.forEach(t),Y8o=r(Oxe," \u2014 "),vG=n(Oxe,"A",{href:!0});var fht=s(vG);K8o=r(fht,"XLMProphetNetForCausalLM"),fht.forEach(t),Z8o=r(Oxe," (XLM-ProphetNet model)"),Oxe.forEach(t),e9o=i(W),t1=n(W,"LI",{});var Vxe=s(t1);dme=n(Vxe,"STRONG",{});var mht=s(dme);o9o=r(mht,"xlm-roberta"),mht.forEach(t),r9o=r(Vxe," \u2014 "),FG=n(Vxe,"A",{href:!0});var ght=s(FG);t9o=r(ght,"XLMRobertaForCausalLM"),ght.forEach(t),a9o=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),n9o=i(W),a1=n(W,"LI",{});var Xxe=s(a1);cme=n(Xxe,"STRONG",{});var hht=s(cme);s9o=r(hht,"xlm-roberta-xl"),hht.forEach(t),l9o=r(Xxe," \u2014 "),TG=n(Xxe,"A",{href:!0});var pht=s(TG);i9o=r(pht,"XLMRobertaXLForCausalLM"),pht.forEach(t),d9o=r(Xxe," (XLM-RoBERTa-XL model)"),Xxe.forEach(t),c9o=i(W),n1=n(W,"LI",{});var zxe=s(n1);fme=n(zxe,"STRONG",{});var uht=s(fme);f9o=r(uht,"xlnet"),uht.forEach(t),m9o=r(zxe," \u2014 "),MG=n(zxe,"A",{href:!0});var _ht=s(MG);g9o=r(_ht,"XLNetLMHeadModel"),_ht.forEach(t),h9o=r(zxe," (XLNet model)"),zxe.forEach(t),W.forEach(t),p9o=i(sa),s1=n(sa,"P",{});var Wxe=s(s1);u9o=r(Wxe,"The model is set in evaluation mode by default using "),mme=n(Wxe,"CODE",{});var bht=s(mme);_9o=r(bht,"model.eval()"),bht.forEach(t),b9o=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(Wxe,"CODE",{});var vht=s(gme);v9o=r(vht,"model.train()"),vht.forEach(t),Wxe.forEach(t),F9o=i(sa),T(l1.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),TGe=i(f),Vi=n(f,"H2",{class:!0});var LVe=s(Vi);i1=n(LVe,"A",{id:!0,class:!0,href:!0});var Fht=s(i1);hme=n(Fht,"SPAN",{});var Tht=s(hme);T(ly.$$.fragment,Tht),Tht.forEach(t),Fht.forEach(t),T9o=i(LVe),pme=n(LVe,"SPAN",{});var Mht=s(pme);M9o=r(Mht,"AutoModelForMaskedLM"),Mht.forEach(t),LVe.forEach(t),MGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(iy.$$.fragment,Ks),E9o=i(Ks),Xi=n(Ks,"P",{});var noe=s(Xi);C9o=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EG=n(noe,"A",{href:!0});var Eht=s(EG);w9o=r(Eht,"from_pretrained()"),Eht.forEach(t),A9o=r(noe," class method or the "),CG=n(noe,"A",{href:!0});var Cht=s(CG);L9o=r(Cht,"from_config()"),Cht.forEach(t),y9o=r(noe,` class
method.`),noe.forEach(t),x9o=i(Ks),dy=n(Ks,"P",{});var yVe=s(dy);$9o=r(yVe,"This class cannot be instantiated directly using "),ume=n(yVe,"CODE",{});var wht=s(ume);k9o=r(wht,"__init__()"),wht.forEach(t),S9o=r(yVe," (throws an error)."),yVe.forEach(t),R9o=i(Ks),it=n(Ks,"DIV",{class:!0});var yA=s(it);T(cy.$$.fragment,yA),P9o=i(yA),_me=n(yA,"P",{});var Aht=s(_me);B9o=r(Aht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Aht.forEach(t),I9o=i(yA),zi=n(yA,"P",{});var soe=s(zi);N9o=r(soe,`Note:
Loading a model from its configuration file does `),bme=n(soe,"STRONG",{});var Lht=s(bme);q9o=r(Lht,"not"),Lht.forEach(t),j9o=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(soe,"A",{href:!0});var yht=s(wG);D9o=r(yht,"from_pretrained()"),yht.forEach(t),G9o=r(soe," to load the model weights."),soe.forEach(t),O9o=i(yA),T(d1.$$.fragment,yA),yA.forEach(t),V9o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(fy.$$.fragment,la),X9o=i(la),vme=n(la,"P",{});var xht=s(vme);z9o=r(xht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xht.forEach(t),W9o=i(la),Ba=n(la,"P",{});var xA=s(Ba);Q9o=r(xA,"The model class to instantiate is selected based on the "),Fme=n(xA,"CODE",{});var $ht=s(Fme);H9o=r($ht,"model_type"),$ht.forEach(t),U9o=r(xA,` property of the config object (either
passed as an argument or loaded from `),Tme=n(xA,"CODE",{});var kht=s(Tme);J9o=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),Y9o=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(xA,"CODE",{});var Sht=s(Mme);K9o=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),Z9o=r(xA,":"),xA.forEach(t),exo=i(la),Q=n(la,"UL",{});var U=s(Q);c1=n(U,"LI",{});var Qxe=s(c1);Eme=n(Qxe,"STRONG",{});var Rht=s(Eme);oxo=r(Rht,"albert"),Rht.forEach(t),rxo=r(Qxe," \u2014 "),AG=n(Qxe,"A",{href:!0});var Pht=s(AG);txo=r(Pht,"AlbertForMaskedLM"),Pht.forEach(t),axo=r(Qxe," (ALBERT model)"),Qxe.forEach(t),nxo=i(U),f1=n(U,"LI",{});var Hxe=s(f1);Cme=n(Hxe,"STRONG",{});var Bht=s(Cme);sxo=r(Bht,"bart"),Bht.forEach(t),lxo=r(Hxe," \u2014 "),LG=n(Hxe,"A",{href:!0});var Iht=s(LG);ixo=r(Iht,"BartForConditionalGeneration"),Iht.forEach(t),dxo=r(Hxe," (BART model)"),Hxe.forEach(t),cxo=i(U),m1=n(U,"LI",{});var Uxe=s(m1);wme=n(Uxe,"STRONG",{});var Nht=s(wme);fxo=r(Nht,"bert"),Nht.forEach(t),mxo=r(Uxe," \u2014 "),yG=n(Uxe,"A",{href:!0});var qht=s(yG);gxo=r(qht,"BertForMaskedLM"),qht.forEach(t),hxo=r(Uxe," (BERT model)"),Uxe.forEach(t),pxo=i(U),g1=n(U,"LI",{});var Jxe=s(g1);Ame=n(Jxe,"STRONG",{});var jht=s(Ame);uxo=r(jht,"big_bird"),jht.forEach(t),_xo=r(Jxe," \u2014 "),xG=n(Jxe,"A",{href:!0});var Dht=s(xG);bxo=r(Dht,"BigBirdForMaskedLM"),Dht.forEach(t),vxo=r(Jxe," (BigBird model)"),Jxe.forEach(t),Fxo=i(U),h1=n(U,"LI",{});var Yxe=s(h1);Lme=n(Yxe,"STRONG",{});var Ght=s(Lme);Txo=r(Ght,"camembert"),Ght.forEach(t),Mxo=r(Yxe," \u2014 "),$G=n(Yxe,"A",{href:!0});var Oht=s($G);Exo=r(Oht,"CamembertForMaskedLM"),Oht.forEach(t),Cxo=r(Yxe," (CamemBERT model)"),Yxe.forEach(t),wxo=i(U),p1=n(U,"LI",{});var Kxe=s(p1);yme=n(Kxe,"STRONG",{});var Vht=s(yme);Axo=r(Vht,"convbert"),Vht.forEach(t),Lxo=r(Kxe," \u2014 "),kG=n(Kxe,"A",{href:!0});var Xht=s(kG);yxo=r(Xht,"ConvBertForMaskedLM"),Xht.forEach(t),xxo=r(Kxe," (ConvBERT model)"),Kxe.forEach(t),$xo=i(U),u1=n(U,"LI",{});var Zxe=s(u1);xme=n(Zxe,"STRONG",{});var zht=s(xme);kxo=r(zht,"data2vec-text"),zht.forEach(t),Sxo=r(Zxe," \u2014 "),SG=n(Zxe,"A",{href:!0});var Wht=s(SG);Rxo=r(Wht,"Data2VecTextForMaskedLM"),Wht.forEach(t),Pxo=r(Zxe," (Data2VecText model)"),Zxe.forEach(t),Bxo=i(U),_1=n(U,"LI",{});var e$e=s(_1);$me=n(e$e,"STRONG",{});var Qht=s($me);Ixo=r(Qht,"deberta"),Qht.forEach(t),Nxo=r(e$e," \u2014 "),RG=n(e$e,"A",{href:!0});var Hht=s(RG);qxo=r(Hht,"DebertaForMaskedLM"),Hht.forEach(t),jxo=r(e$e," (DeBERTa model)"),e$e.forEach(t),Dxo=i(U),b1=n(U,"LI",{});var o$e=s(b1);kme=n(o$e,"STRONG",{});var Uht=s(kme);Gxo=r(Uht,"deberta-v2"),Uht.forEach(t),Oxo=r(o$e," \u2014 "),PG=n(o$e,"A",{href:!0});var Jht=s(PG);Vxo=r(Jht,"DebertaV2ForMaskedLM"),Jht.forEach(t),Xxo=r(o$e," (DeBERTa-v2 model)"),o$e.forEach(t),zxo=i(U),v1=n(U,"LI",{});var r$e=s(v1);Sme=n(r$e,"STRONG",{});var Yht=s(Sme);Wxo=r(Yht,"distilbert"),Yht.forEach(t),Qxo=r(r$e," \u2014 "),BG=n(r$e,"A",{href:!0});var Kht=s(BG);Hxo=r(Kht,"DistilBertForMaskedLM"),Kht.forEach(t),Uxo=r(r$e," (DistilBERT model)"),r$e.forEach(t),Jxo=i(U),F1=n(U,"LI",{});var t$e=s(F1);Rme=n(t$e,"STRONG",{});var Zht=s(Rme);Yxo=r(Zht,"electra"),Zht.forEach(t),Kxo=r(t$e," \u2014 "),IG=n(t$e,"A",{href:!0});var ept=s(IG);Zxo=r(ept,"ElectraForMaskedLM"),ept.forEach(t),e$o=r(t$e," (ELECTRA model)"),t$e.forEach(t),o$o=i(U),T1=n(U,"LI",{});var a$e=s(T1);Pme=n(a$e,"STRONG",{});var opt=s(Pme);r$o=r(opt,"flaubert"),opt.forEach(t),t$o=r(a$e," \u2014 "),NG=n(a$e,"A",{href:!0});var rpt=s(NG);a$o=r(rpt,"FlaubertWithLMHeadModel"),rpt.forEach(t),n$o=r(a$e," (FlauBERT model)"),a$e.forEach(t),s$o=i(U),M1=n(U,"LI",{});var n$e=s(M1);Bme=n(n$e,"STRONG",{});var tpt=s(Bme);l$o=r(tpt,"fnet"),tpt.forEach(t),i$o=r(n$e," \u2014 "),qG=n(n$e,"A",{href:!0});var apt=s(qG);d$o=r(apt,"FNetForMaskedLM"),apt.forEach(t),c$o=r(n$e," (FNet model)"),n$e.forEach(t),f$o=i(U),E1=n(U,"LI",{});var s$e=s(E1);Ime=n(s$e,"STRONG",{});var npt=s(Ime);m$o=r(npt,"funnel"),npt.forEach(t),g$o=r(s$e," \u2014 "),jG=n(s$e,"A",{href:!0});var spt=s(jG);h$o=r(spt,"FunnelForMaskedLM"),spt.forEach(t),p$o=r(s$e," (Funnel Transformer model)"),s$e.forEach(t),u$o=i(U),C1=n(U,"LI",{});var l$e=s(C1);Nme=n(l$e,"STRONG",{});var lpt=s(Nme);_$o=r(lpt,"ibert"),lpt.forEach(t),b$o=r(l$e," \u2014 "),DG=n(l$e,"A",{href:!0});var ipt=s(DG);v$o=r(ipt,"IBertForMaskedLM"),ipt.forEach(t),F$o=r(l$e," (I-BERT model)"),l$e.forEach(t),T$o=i(U),w1=n(U,"LI",{});var i$e=s(w1);qme=n(i$e,"STRONG",{});var dpt=s(qme);M$o=r(dpt,"layoutlm"),dpt.forEach(t),E$o=r(i$e," \u2014 "),GG=n(i$e,"A",{href:!0});var cpt=s(GG);C$o=r(cpt,"LayoutLMForMaskedLM"),cpt.forEach(t),w$o=r(i$e," (LayoutLM model)"),i$e.forEach(t),A$o=i(U),A1=n(U,"LI",{});var d$e=s(A1);jme=n(d$e,"STRONG",{});var fpt=s(jme);L$o=r(fpt,"longformer"),fpt.forEach(t),y$o=r(d$e," \u2014 "),OG=n(d$e,"A",{href:!0});var mpt=s(OG);x$o=r(mpt,"LongformerForMaskedLM"),mpt.forEach(t),$$o=r(d$e," (Longformer model)"),d$e.forEach(t),k$o=i(U),L1=n(U,"LI",{});var c$e=s(L1);Dme=n(c$e,"STRONG",{});var gpt=s(Dme);S$o=r(gpt,"luke"),gpt.forEach(t),R$o=r(c$e," \u2014 "),VG=n(c$e,"A",{href:!0});var hpt=s(VG);P$o=r(hpt,"LukeForMaskedLM"),hpt.forEach(t),B$o=r(c$e," (LUKE model)"),c$e.forEach(t),I$o=i(U),y1=n(U,"LI",{});var f$e=s(y1);Gme=n(f$e,"STRONG",{});var ppt=s(Gme);N$o=r(ppt,"mbart"),ppt.forEach(t),q$o=r(f$e," \u2014 "),XG=n(f$e,"A",{href:!0});var upt=s(XG);j$o=r(upt,"MBartForConditionalGeneration"),upt.forEach(t),D$o=r(f$e," (mBART model)"),f$e.forEach(t),G$o=i(U),x1=n(U,"LI",{});var m$e=s(x1);Ome=n(m$e,"STRONG",{});var _pt=s(Ome);O$o=r(_pt,"megatron-bert"),_pt.forEach(t),V$o=r(m$e," \u2014 "),zG=n(m$e,"A",{href:!0});var bpt=s(zG);X$o=r(bpt,"MegatronBertForMaskedLM"),bpt.forEach(t),z$o=r(m$e," (Megatron-BERT model)"),m$e.forEach(t),W$o=i(U),$1=n(U,"LI",{});var g$e=s($1);Vme=n(g$e,"STRONG",{});var vpt=s(Vme);Q$o=r(vpt,"mobilebert"),vpt.forEach(t),H$o=r(g$e," \u2014 "),WG=n(g$e,"A",{href:!0});var Fpt=s(WG);U$o=r(Fpt,"MobileBertForMaskedLM"),Fpt.forEach(t),J$o=r(g$e," (MobileBERT model)"),g$e.forEach(t),Y$o=i(U),k1=n(U,"LI",{});var h$e=s(k1);Xme=n(h$e,"STRONG",{});var Tpt=s(Xme);K$o=r(Tpt,"mpnet"),Tpt.forEach(t),Z$o=r(h$e," \u2014 "),QG=n(h$e,"A",{href:!0});var Mpt=s(QG);eko=r(Mpt,"MPNetForMaskedLM"),Mpt.forEach(t),oko=r(h$e," (MPNet model)"),h$e.forEach(t),rko=i(U),S1=n(U,"LI",{});var p$e=s(S1);zme=n(p$e,"STRONG",{});var Ept=s(zme);tko=r(Ept,"nystromformer"),Ept.forEach(t),ako=r(p$e," \u2014 "),HG=n(p$e,"A",{href:!0});var Cpt=s(HG);nko=r(Cpt,"NystromformerForMaskedLM"),Cpt.forEach(t),sko=r(p$e," (Nystr\xF6mformer model)"),p$e.forEach(t),lko=i(U),R1=n(U,"LI",{});var u$e=s(R1);Wme=n(u$e,"STRONG",{});var wpt=s(Wme);iko=r(wpt,"perceiver"),wpt.forEach(t),dko=r(u$e," \u2014 "),UG=n(u$e,"A",{href:!0});var Apt=s(UG);cko=r(Apt,"PerceiverForMaskedLM"),Apt.forEach(t),fko=r(u$e," (Perceiver model)"),u$e.forEach(t),mko=i(U),P1=n(U,"LI",{});var _$e=s(P1);Qme=n(_$e,"STRONG",{});var Lpt=s(Qme);gko=r(Lpt,"qdqbert"),Lpt.forEach(t),hko=r(_$e," \u2014 "),JG=n(_$e,"A",{href:!0});var ypt=s(JG);pko=r(ypt,"QDQBertForMaskedLM"),ypt.forEach(t),uko=r(_$e," (QDQBert model)"),_$e.forEach(t),_ko=i(U),B1=n(U,"LI",{});var b$e=s(B1);Hme=n(b$e,"STRONG",{});var xpt=s(Hme);bko=r(xpt,"reformer"),xpt.forEach(t),vko=r(b$e," \u2014 "),YG=n(b$e,"A",{href:!0});var $pt=s(YG);Fko=r($pt,"ReformerForMaskedLM"),$pt.forEach(t),Tko=r(b$e," (Reformer model)"),b$e.forEach(t),Mko=i(U),I1=n(U,"LI",{});var v$e=s(I1);Ume=n(v$e,"STRONG",{});var kpt=s(Ume);Eko=r(kpt,"rembert"),kpt.forEach(t),Cko=r(v$e," \u2014 "),KG=n(v$e,"A",{href:!0});var Spt=s(KG);wko=r(Spt,"RemBertForMaskedLM"),Spt.forEach(t),Ako=r(v$e," (RemBERT model)"),v$e.forEach(t),Lko=i(U),N1=n(U,"LI",{});var F$e=s(N1);Jme=n(F$e,"STRONG",{});var Rpt=s(Jme);yko=r(Rpt,"roberta"),Rpt.forEach(t),xko=r(F$e," \u2014 "),ZG=n(F$e,"A",{href:!0});var Ppt=s(ZG);$ko=r(Ppt,"RobertaForMaskedLM"),Ppt.forEach(t),kko=r(F$e," (RoBERTa model)"),F$e.forEach(t),Sko=i(U),q1=n(U,"LI",{});var T$e=s(q1);Yme=n(T$e,"STRONG",{});var Bpt=s(Yme);Rko=r(Bpt,"roformer"),Bpt.forEach(t),Pko=r(T$e," \u2014 "),eO=n(T$e,"A",{href:!0});var Ipt=s(eO);Bko=r(Ipt,"RoFormerForMaskedLM"),Ipt.forEach(t),Iko=r(T$e," (RoFormer model)"),T$e.forEach(t),Nko=i(U),j1=n(U,"LI",{});var M$e=s(j1);Kme=n(M$e,"STRONG",{});var Npt=s(Kme);qko=r(Npt,"squeezebert"),Npt.forEach(t),jko=r(M$e," \u2014 "),oO=n(M$e,"A",{href:!0});var qpt=s(oO);Dko=r(qpt,"SqueezeBertForMaskedLM"),qpt.forEach(t),Gko=r(M$e," (SqueezeBERT model)"),M$e.forEach(t),Oko=i(U),D1=n(U,"LI",{});var E$e=s(D1);Zme=n(E$e,"STRONG",{});var jpt=s(Zme);Vko=r(jpt,"tapas"),jpt.forEach(t),Xko=r(E$e," \u2014 "),rO=n(E$e,"A",{href:!0});var Dpt=s(rO);zko=r(Dpt,"TapasForMaskedLM"),Dpt.forEach(t),Wko=r(E$e," (TAPAS model)"),E$e.forEach(t),Qko=i(U),G1=n(U,"LI",{});var C$e=s(G1);ege=n(C$e,"STRONG",{});var Gpt=s(ege);Hko=r(Gpt,"wav2vec2"),Gpt.forEach(t),Uko=r(C$e," \u2014 "),oge=n(C$e,"CODE",{});var Opt=s(oge);Jko=r(Opt,"Wav2Vec2ForMaskedLM"),Opt.forEach(t),Yko=r(C$e," (Wav2Vec2 model)"),C$e.forEach(t),Kko=i(U),O1=n(U,"LI",{});var w$e=s(O1);rge=n(w$e,"STRONG",{});var Vpt=s(rge);Zko=r(Vpt,"xlm"),Vpt.forEach(t),eSo=r(w$e," \u2014 "),tO=n(w$e,"A",{href:!0});var Xpt=s(tO);oSo=r(Xpt,"XLMWithLMHeadModel"),Xpt.forEach(t),rSo=r(w$e," (XLM model)"),w$e.forEach(t),tSo=i(U),V1=n(U,"LI",{});var A$e=s(V1);tge=n(A$e,"STRONG",{});var zpt=s(tge);aSo=r(zpt,"xlm-roberta"),zpt.forEach(t),nSo=r(A$e," \u2014 "),aO=n(A$e,"A",{href:!0});var Wpt=s(aO);sSo=r(Wpt,"XLMRobertaForMaskedLM"),Wpt.forEach(t),lSo=r(A$e," (XLM-RoBERTa model)"),A$e.forEach(t),iSo=i(U),X1=n(U,"LI",{});var L$e=s(X1);age=n(L$e,"STRONG",{});var Qpt=s(age);dSo=r(Qpt,"xlm-roberta-xl"),Qpt.forEach(t),cSo=r(L$e," \u2014 "),nO=n(L$e,"A",{href:!0});var Hpt=s(nO);fSo=r(Hpt,"XLMRobertaXLForMaskedLM"),Hpt.forEach(t),mSo=r(L$e," (XLM-RoBERTa-XL model)"),L$e.forEach(t),gSo=i(U),z1=n(U,"LI",{});var y$e=s(z1);nge=n(y$e,"STRONG",{});var Upt=s(nge);hSo=r(Upt,"yoso"),Upt.forEach(t),pSo=r(y$e," \u2014 "),sO=n(y$e,"A",{href:!0});var Jpt=s(sO);uSo=r(Jpt,"YosoForMaskedLM"),Jpt.forEach(t),_So=r(y$e," (YOSO model)"),y$e.forEach(t),U.forEach(t),bSo=i(la),W1=n(la,"P",{});var x$e=s(W1);vSo=r(x$e,"The model is set in evaluation mode by default using "),sge=n(x$e,"CODE",{});var Ypt=s(sge);FSo=r(Ypt,"model.eval()"),Ypt.forEach(t),TSo=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n(x$e,"CODE",{});var Kpt=s(lge);MSo=r(Kpt,"model.train()"),Kpt.forEach(t),x$e.forEach(t),ESo=i(la),T(Q1.$$.fragment,la),la.forEach(t),Ks.forEach(t),EGe=i(f),Wi=n(f,"H2",{class:!0});var xVe=s(Wi);H1=n(xVe,"A",{id:!0,class:!0,href:!0});var Zpt=s(H1);ige=n(Zpt,"SPAN",{});var eut=s(ige);T(my.$$.fragment,eut),eut.forEach(t),Zpt.forEach(t),CSo=i(xVe),dge=n(xVe,"SPAN",{});var out=s(dge);wSo=r(out,"AutoModelForSeq2SeqLM"),out.forEach(t),xVe.forEach(t),CGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(gy.$$.fragment,Zs),ASo=i(Zs),Qi=n(Zs,"P",{});var loe=s(Qi);LSo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lO=n(loe,"A",{href:!0});var rut=s(lO);ySo=r(rut,"from_pretrained()"),rut.forEach(t),xSo=r(loe," class method or the "),iO=n(loe,"A",{href:!0});var tut=s(iO);$So=r(tut,"from_config()"),tut.forEach(t),kSo=r(loe,` class
method.`),loe.forEach(t),SSo=i(Zs),hy=n(Zs,"P",{});var $Ve=s(hy);RSo=r($Ve,"This class cannot be instantiated directly using "),cge=n($Ve,"CODE",{});var aut=s(cge);PSo=r(aut,"__init__()"),aut.forEach(t),BSo=r($Ve," (throws an error)."),$Ve.forEach(t),ISo=i(Zs),dt=n(Zs,"DIV",{class:!0});var $A=s(dt);T(py.$$.fragment,$A),NSo=i($A),fge=n($A,"P",{});var nut=s(fge);qSo=r(nut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nut.forEach(t),jSo=i($A),Hi=n($A,"P",{});var ioe=s(Hi);DSo=r(ioe,`Note:
Loading a model from its configuration file does `),mge=n(ioe,"STRONG",{});var sut=s(mge);GSo=r(sut,"not"),sut.forEach(t),OSo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=n(ioe,"A",{href:!0});var lut=s(dO);VSo=r(lut,"from_pretrained()"),lut.forEach(t),XSo=r(ioe," to load the model weights."),ioe.forEach(t),zSo=i($A),T(U1.$$.fragment,$A),$A.forEach(t),WSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(uy.$$.fragment,ia),QSo=i(ia),gge=n(ia,"P",{});var iut=s(gge);HSo=r(iut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iut.forEach(t),USo=i(ia),Ia=n(ia,"P",{});var kA=s(Ia);JSo=r(kA,"The model class to instantiate is selected based on the "),hge=n(kA,"CODE",{});var dut=s(hge);YSo=r(dut,"model_type"),dut.forEach(t),KSo=r(kA,` property of the config object (either
passed as an argument or loaded from `),pge=n(kA,"CODE",{});var cut=s(pge);ZSo=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),eRo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(kA,"CODE",{});var fut=s(uge);oRo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),rRo=r(kA,":"),kA.forEach(t),tRo=i(ia),pe=n(ia,"UL",{});var be=s(pe);J1=n(be,"LI",{});var $$e=s(J1);_ge=n($$e,"STRONG",{});var mut=s(_ge);aRo=r(mut,"bart"),mut.forEach(t),nRo=r($$e," \u2014 "),cO=n($$e,"A",{href:!0});var gut=s(cO);sRo=r(gut,"BartForConditionalGeneration"),gut.forEach(t),lRo=r($$e," (BART model)"),$$e.forEach(t),iRo=i(be),Y1=n(be,"LI",{});var k$e=s(Y1);bge=n(k$e,"STRONG",{});var hut=s(bge);dRo=r(hut,"bigbird_pegasus"),hut.forEach(t),cRo=r(k$e," \u2014 "),fO=n(k$e,"A",{href:!0});var put=s(fO);fRo=r(put,"BigBirdPegasusForConditionalGeneration"),put.forEach(t),mRo=r(k$e," (BigBird-Pegasus model)"),k$e.forEach(t),gRo=i(be),K1=n(be,"LI",{});var S$e=s(K1);vge=n(S$e,"STRONG",{});var uut=s(vge);hRo=r(uut,"blenderbot"),uut.forEach(t),pRo=r(S$e," \u2014 "),mO=n(S$e,"A",{href:!0});var _ut=s(mO);uRo=r(_ut,"BlenderbotForConditionalGeneration"),_ut.forEach(t),_Ro=r(S$e," (Blenderbot model)"),S$e.forEach(t),bRo=i(be),Z1=n(be,"LI",{});var R$e=s(Z1);Fge=n(R$e,"STRONG",{});var but=s(Fge);vRo=r(but,"blenderbot-small"),but.forEach(t),FRo=r(R$e," \u2014 "),gO=n(R$e,"A",{href:!0});var vut=s(gO);TRo=r(vut,"BlenderbotSmallForConditionalGeneration"),vut.forEach(t),MRo=r(R$e," (BlenderbotSmall model)"),R$e.forEach(t),ERo=i(be),e2=n(be,"LI",{});var P$e=s(e2);Tge=n(P$e,"STRONG",{});var Fut=s(Tge);CRo=r(Fut,"encoder-decoder"),Fut.forEach(t),wRo=r(P$e," \u2014 "),hO=n(P$e,"A",{href:!0});var Tut=s(hO);ARo=r(Tut,"EncoderDecoderModel"),Tut.forEach(t),LRo=r(P$e," (Encoder decoder model)"),P$e.forEach(t),yRo=i(be),o2=n(be,"LI",{});var B$e=s(o2);Mge=n(B$e,"STRONG",{});var Mut=s(Mge);xRo=r(Mut,"fsmt"),Mut.forEach(t),$Ro=r(B$e," \u2014 "),pO=n(B$e,"A",{href:!0});var Eut=s(pO);kRo=r(Eut,"FSMTForConditionalGeneration"),Eut.forEach(t),SRo=r(B$e," (FairSeq Machine-Translation model)"),B$e.forEach(t),RRo=i(be),r2=n(be,"LI",{});var I$e=s(r2);Ege=n(I$e,"STRONG",{});var Cut=s(Ege);PRo=r(Cut,"led"),Cut.forEach(t),BRo=r(I$e," \u2014 "),uO=n(I$e,"A",{href:!0});var wut=s(uO);IRo=r(wut,"LEDForConditionalGeneration"),wut.forEach(t),NRo=r(I$e," (LED model)"),I$e.forEach(t),qRo=i(be),t2=n(be,"LI",{});var N$e=s(t2);Cge=n(N$e,"STRONG",{});var Aut=s(Cge);jRo=r(Aut,"longt5"),Aut.forEach(t),DRo=r(N$e," \u2014 "),_O=n(N$e,"A",{href:!0});var Lut=s(_O);GRo=r(Lut,"LongT5ForConditionalGeneration"),Lut.forEach(t),ORo=r(N$e," (LongT5 model)"),N$e.forEach(t),VRo=i(be),a2=n(be,"LI",{});var q$e=s(a2);wge=n(q$e,"STRONG",{});var yut=s(wge);XRo=r(yut,"m2m_100"),yut.forEach(t),zRo=r(q$e," \u2014 "),bO=n(q$e,"A",{href:!0});var xut=s(bO);WRo=r(xut,"M2M100ForConditionalGeneration"),xut.forEach(t),QRo=r(q$e," (M2M100 model)"),q$e.forEach(t),HRo=i(be),n2=n(be,"LI",{});var j$e=s(n2);Age=n(j$e,"STRONG",{});var $ut=s(Age);URo=r($ut,"marian"),$ut.forEach(t),JRo=r(j$e," \u2014 "),vO=n(j$e,"A",{href:!0});var kut=s(vO);YRo=r(kut,"MarianMTModel"),kut.forEach(t),KRo=r(j$e," (Marian model)"),j$e.forEach(t),ZRo=i(be),s2=n(be,"LI",{});var D$e=s(s2);Lge=n(D$e,"STRONG",{});var Sut=s(Lge);ePo=r(Sut,"mbart"),Sut.forEach(t),oPo=r(D$e," \u2014 "),FO=n(D$e,"A",{href:!0});var Rut=s(FO);rPo=r(Rut,"MBartForConditionalGeneration"),Rut.forEach(t),tPo=r(D$e," (mBART model)"),D$e.forEach(t),aPo=i(be),l2=n(be,"LI",{});var G$e=s(l2);yge=n(G$e,"STRONG",{});var Put=s(yge);nPo=r(Put,"mt5"),Put.forEach(t),sPo=r(G$e," \u2014 "),TO=n(G$e,"A",{href:!0});var But=s(TO);lPo=r(But,"MT5ForConditionalGeneration"),But.forEach(t),iPo=r(G$e," (MT5 model)"),G$e.forEach(t),dPo=i(be),i2=n(be,"LI",{});var O$e=s(i2);xge=n(O$e,"STRONG",{});var Iut=s(xge);cPo=r(Iut,"pegasus"),Iut.forEach(t),fPo=r(O$e," \u2014 "),MO=n(O$e,"A",{href:!0});var Nut=s(MO);mPo=r(Nut,"PegasusForConditionalGeneration"),Nut.forEach(t),gPo=r(O$e," (Pegasus model)"),O$e.forEach(t),hPo=i(be),d2=n(be,"LI",{});var V$e=s(d2);$ge=n(V$e,"STRONG",{});var qut=s($ge);pPo=r(qut,"plbart"),qut.forEach(t),uPo=r(V$e," \u2014 "),EO=n(V$e,"A",{href:!0});var jut=s(EO);_Po=r(jut,"PLBartForConditionalGeneration"),jut.forEach(t),bPo=r(V$e," (PLBart model)"),V$e.forEach(t),vPo=i(be),c2=n(be,"LI",{});var X$e=s(c2);kge=n(X$e,"STRONG",{});var Dut=s(kge);FPo=r(Dut,"prophetnet"),Dut.forEach(t),TPo=r(X$e," \u2014 "),CO=n(X$e,"A",{href:!0});var Gut=s(CO);MPo=r(Gut,"ProphetNetForConditionalGeneration"),Gut.forEach(t),EPo=r(X$e," (ProphetNet model)"),X$e.forEach(t),CPo=i(be),f2=n(be,"LI",{});var z$e=s(f2);Sge=n(z$e,"STRONG",{});var Out=s(Sge);wPo=r(Out,"t5"),Out.forEach(t),APo=r(z$e," \u2014 "),wO=n(z$e,"A",{href:!0});var Vut=s(wO);LPo=r(Vut,"T5ForConditionalGeneration"),Vut.forEach(t),yPo=r(z$e," (T5 model)"),z$e.forEach(t),xPo=i(be),m2=n(be,"LI",{});var W$e=s(m2);Rge=n(W$e,"STRONG",{});var Xut=s(Rge);$Po=r(Xut,"xlm-prophetnet"),Xut.forEach(t),kPo=r(W$e," \u2014 "),AO=n(W$e,"A",{href:!0});var zut=s(AO);SPo=r(zut,"XLMProphetNetForConditionalGeneration"),zut.forEach(t),RPo=r(W$e," (XLM-ProphetNet model)"),W$e.forEach(t),be.forEach(t),PPo=i(ia),g2=n(ia,"P",{});var Q$e=s(g2);BPo=r(Q$e,"The model is set in evaluation mode by default using "),Pge=n(Q$e,"CODE",{});var Wut=s(Pge);IPo=r(Wut,"model.eval()"),Wut.forEach(t),NPo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(Q$e,"CODE",{});var Qut=s(Bge);qPo=r(Qut,"model.train()"),Qut.forEach(t),Q$e.forEach(t),jPo=i(ia),T(h2.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),wGe=i(f),Ui=n(f,"H2",{class:!0});var kVe=s(Ui);p2=n(kVe,"A",{id:!0,class:!0,href:!0});var Hut=s(p2);Ige=n(Hut,"SPAN",{});var Uut=s(Ige);T(_y.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),DPo=i(kVe),Nge=n(kVe,"SPAN",{});var Jut=s(Nge);GPo=r(Jut,"AutoModelForSequenceClassification"),Jut.forEach(t),kVe.forEach(t),AGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(by.$$.fragment,el),OPo=i(el),Ji=n(el,"P",{});var doe=s(Ji);VPo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LO=n(doe,"A",{href:!0});var Yut=s(LO);XPo=r(Yut,"from_pretrained()"),Yut.forEach(t),zPo=r(doe," class method or the "),yO=n(doe,"A",{href:!0});var Kut=s(yO);WPo=r(Kut,"from_config()"),Kut.forEach(t),QPo=r(doe,` class
method.`),doe.forEach(t),HPo=i(el),vy=n(el,"P",{});var SVe=s(vy);UPo=r(SVe,"This class cannot be instantiated directly using "),qge=n(SVe,"CODE",{});var Zut=s(qge);JPo=r(Zut,"__init__()"),Zut.forEach(t),YPo=r(SVe," (throws an error)."),SVe.forEach(t),KPo=i(el),ct=n(el,"DIV",{class:!0});var SA=s(ct);T(Fy.$$.fragment,SA),ZPo=i(SA),jge=n(SA,"P",{});var e_t=s(jge);eBo=r(e_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e_t.forEach(t),oBo=i(SA),Yi=n(SA,"P",{});var coe=s(Yi);rBo=r(coe,`Note:
Loading a model from its configuration file does `),Dge=n(coe,"STRONG",{});var o_t=s(Dge);tBo=r(o_t,"not"),o_t.forEach(t),aBo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(coe,"A",{href:!0});var r_t=s(xO);nBo=r(r_t,"from_pretrained()"),r_t.forEach(t),sBo=r(coe," to load the model weights."),coe.forEach(t),lBo=i(SA),T(u2.$$.fragment,SA),SA.forEach(t),iBo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(Ty.$$.fragment,da),dBo=i(da),Gge=n(da,"P",{});var t_t=s(Gge);cBo=r(t_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t_t.forEach(t),fBo=i(da),Na=n(da,"P",{});var RA=s(Na);mBo=r(RA,"The model class to instantiate is selected based on the "),Oge=n(RA,"CODE",{});var a_t=s(Oge);gBo=r(a_t,"model_type"),a_t.forEach(t),hBo=r(RA,` property of the config object (either
passed as an argument or loaded from `),Vge=n(RA,"CODE",{});var n_t=s(Vge);pBo=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),uBo=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(RA,"CODE",{});var s_t=s(Xge);_Bo=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),bBo=r(RA,":"),RA.forEach(t),vBo=i(da),N=n(da,"UL",{});var j=s(N);_2=n(j,"LI",{});var H$e=s(_2);zge=n(H$e,"STRONG",{});var l_t=s(zge);FBo=r(l_t,"albert"),l_t.forEach(t),TBo=r(H$e," \u2014 "),$O=n(H$e,"A",{href:!0});var i_t=s($O);MBo=r(i_t,"AlbertForSequenceClassification"),i_t.forEach(t),EBo=r(H$e," (ALBERT model)"),H$e.forEach(t),CBo=i(j),b2=n(j,"LI",{});var U$e=s(b2);Wge=n(U$e,"STRONG",{});var d_t=s(Wge);wBo=r(d_t,"bart"),d_t.forEach(t),ABo=r(U$e," \u2014 "),kO=n(U$e,"A",{href:!0});var c_t=s(kO);LBo=r(c_t,"BartForSequenceClassification"),c_t.forEach(t),yBo=r(U$e," (BART model)"),U$e.forEach(t),xBo=i(j),v2=n(j,"LI",{});var J$e=s(v2);Qge=n(J$e,"STRONG",{});var f_t=s(Qge);$Bo=r(f_t,"bert"),f_t.forEach(t),kBo=r(J$e," \u2014 "),SO=n(J$e,"A",{href:!0});var m_t=s(SO);SBo=r(m_t,"BertForSequenceClassification"),m_t.forEach(t),RBo=r(J$e," (BERT model)"),J$e.forEach(t),PBo=i(j),F2=n(j,"LI",{});var Y$e=s(F2);Hge=n(Y$e,"STRONG",{});var g_t=s(Hge);BBo=r(g_t,"big_bird"),g_t.forEach(t),IBo=r(Y$e," \u2014 "),RO=n(Y$e,"A",{href:!0});var h_t=s(RO);NBo=r(h_t,"BigBirdForSequenceClassification"),h_t.forEach(t),qBo=r(Y$e," (BigBird model)"),Y$e.forEach(t),jBo=i(j),T2=n(j,"LI",{});var K$e=s(T2);Uge=n(K$e,"STRONG",{});var p_t=s(Uge);DBo=r(p_t,"bigbird_pegasus"),p_t.forEach(t),GBo=r(K$e," \u2014 "),PO=n(K$e,"A",{href:!0});var u_t=s(PO);OBo=r(u_t,"BigBirdPegasusForSequenceClassification"),u_t.forEach(t),VBo=r(K$e," (BigBird-Pegasus model)"),K$e.forEach(t),XBo=i(j),M2=n(j,"LI",{});var Z$e=s(M2);Jge=n(Z$e,"STRONG",{});var __t=s(Jge);zBo=r(__t,"bloom"),__t.forEach(t),WBo=r(Z$e," \u2014 "),BO=n(Z$e,"A",{href:!0});var b_t=s(BO);QBo=r(b_t,"BloomForSequenceClassification"),b_t.forEach(t),HBo=r(Z$e," (BLOOM model)"),Z$e.forEach(t),UBo=i(j),E2=n(j,"LI",{});var eke=s(E2);Yge=n(eke,"STRONG",{});var v_t=s(Yge);JBo=r(v_t,"camembert"),v_t.forEach(t),YBo=r(eke," \u2014 "),IO=n(eke,"A",{href:!0});var F_t=s(IO);KBo=r(F_t,"CamembertForSequenceClassification"),F_t.forEach(t),ZBo=r(eke," (CamemBERT model)"),eke.forEach(t),eIo=i(j),C2=n(j,"LI",{});var oke=s(C2);Kge=n(oke,"STRONG",{});var T_t=s(Kge);oIo=r(T_t,"canine"),T_t.forEach(t),rIo=r(oke," \u2014 "),NO=n(oke,"A",{href:!0});var M_t=s(NO);tIo=r(M_t,"CanineForSequenceClassification"),M_t.forEach(t),aIo=r(oke," (CANINE model)"),oke.forEach(t),nIo=i(j),w2=n(j,"LI",{});var rke=s(w2);Zge=n(rke,"STRONG",{});var E_t=s(Zge);sIo=r(E_t,"convbert"),E_t.forEach(t),lIo=r(rke," \u2014 "),qO=n(rke,"A",{href:!0});var C_t=s(qO);iIo=r(C_t,"ConvBertForSequenceClassification"),C_t.forEach(t),dIo=r(rke," (ConvBERT model)"),rke.forEach(t),cIo=i(j),A2=n(j,"LI",{});var tke=s(A2);ehe=n(tke,"STRONG",{});var w_t=s(ehe);fIo=r(w_t,"ctrl"),w_t.forEach(t),mIo=r(tke," \u2014 "),jO=n(tke,"A",{href:!0});var A_t=s(jO);gIo=r(A_t,"CTRLForSequenceClassification"),A_t.forEach(t),hIo=r(tke," (CTRL model)"),tke.forEach(t),pIo=i(j),L2=n(j,"LI",{});var ake=s(L2);ohe=n(ake,"STRONG",{});var L_t=s(ohe);uIo=r(L_t,"data2vec-text"),L_t.forEach(t),_Io=r(ake," \u2014 "),DO=n(ake,"A",{href:!0});var y_t=s(DO);bIo=r(y_t,"Data2VecTextForSequenceClassification"),y_t.forEach(t),vIo=r(ake," (Data2VecText model)"),ake.forEach(t),FIo=i(j),y2=n(j,"LI",{});var nke=s(y2);rhe=n(nke,"STRONG",{});var x_t=s(rhe);TIo=r(x_t,"deberta"),x_t.forEach(t),MIo=r(nke," \u2014 "),GO=n(nke,"A",{href:!0});var $_t=s(GO);EIo=r($_t,"DebertaForSequenceClassification"),$_t.forEach(t),CIo=r(nke," (DeBERTa model)"),nke.forEach(t),wIo=i(j),x2=n(j,"LI",{});var ske=s(x2);the=n(ske,"STRONG",{});var k_t=s(the);AIo=r(k_t,"deberta-v2"),k_t.forEach(t),LIo=r(ske," \u2014 "),OO=n(ske,"A",{href:!0});var S_t=s(OO);yIo=r(S_t,"DebertaV2ForSequenceClassification"),S_t.forEach(t),xIo=r(ske," (DeBERTa-v2 model)"),ske.forEach(t),$Io=i(j),$2=n(j,"LI",{});var lke=s($2);ahe=n(lke,"STRONG",{});var R_t=s(ahe);kIo=r(R_t,"distilbert"),R_t.forEach(t),SIo=r(lke," \u2014 "),VO=n(lke,"A",{href:!0});var P_t=s(VO);RIo=r(P_t,"DistilBertForSequenceClassification"),P_t.forEach(t),PIo=r(lke," (DistilBERT model)"),lke.forEach(t),BIo=i(j),k2=n(j,"LI",{});var ike=s(k2);nhe=n(ike,"STRONG",{});var B_t=s(nhe);IIo=r(B_t,"electra"),B_t.forEach(t),NIo=r(ike," \u2014 "),XO=n(ike,"A",{href:!0});var I_t=s(XO);qIo=r(I_t,"ElectraForSequenceClassification"),I_t.forEach(t),jIo=r(ike," (ELECTRA model)"),ike.forEach(t),DIo=i(j),S2=n(j,"LI",{});var dke=s(S2);she=n(dke,"STRONG",{});var N_t=s(she);GIo=r(N_t,"flaubert"),N_t.forEach(t),OIo=r(dke," \u2014 "),zO=n(dke,"A",{href:!0});var q_t=s(zO);VIo=r(q_t,"FlaubertForSequenceClassification"),q_t.forEach(t),XIo=r(dke," (FlauBERT model)"),dke.forEach(t),zIo=i(j),R2=n(j,"LI",{});var cke=s(R2);lhe=n(cke,"STRONG",{});var j_t=s(lhe);WIo=r(j_t,"fnet"),j_t.forEach(t),QIo=r(cke," \u2014 "),WO=n(cke,"A",{href:!0});var D_t=s(WO);HIo=r(D_t,"FNetForSequenceClassification"),D_t.forEach(t),UIo=r(cke," (FNet model)"),cke.forEach(t),JIo=i(j),P2=n(j,"LI",{});var fke=s(P2);ihe=n(fke,"STRONG",{});var G_t=s(ihe);YIo=r(G_t,"funnel"),G_t.forEach(t),KIo=r(fke," \u2014 "),QO=n(fke,"A",{href:!0});var O_t=s(QO);ZIo=r(O_t,"FunnelForSequenceClassification"),O_t.forEach(t),eNo=r(fke," (Funnel Transformer model)"),fke.forEach(t),oNo=i(j),B2=n(j,"LI",{});var mke=s(B2);dhe=n(mke,"STRONG",{});var V_t=s(dhe);rNo=r(V_t,"gpt2"),V_t.forEach(t),tNo=r(mke," \u2014 "),HO=n(mke,"A",{href:!0});var X_t=s(HO);aNo=r(X_t,"GPT2ForSequenceClassification"),X_t.forEach(t),nNo=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),sNo=i(j),I2=n(j,"LI",{});var gke=s(I2);che=n(gke,"STRONG",{});var z_t=s(che);lNo=r(z_t,"gpt_neo"),z_t.forEach(t),iNo=r(gke," \u2014 "),UO=n(gke,"A",{href:!0});var W_t=s(UO);dNo=r(W_t,"GPTNeoForSequenceClassification"),W_t.forEach(t),cNo=r(gke," (GPT Neo model)"),gke.forEach(t),fNo=i(j),N2=n(j,"LI",{});var hke=s(N2);fhe=n(hke,"STRONG",{});var Q_t=s(fhe);mNo=r(Q_t,"gptj"),Q_t.forEach(t),gNo=r(hke," \u2014 "),JO=n(hke,"A",{href:!0});var H_t=s(JO);hNo=r(H_t,"GPTJForSequenceClassification"),H_t.forEach(t),pNo=r(hke," (GPT-J model)"),hke.forEach(t),uNo=i(j),q2=n(j,"LI",{});var pke=s(q2);mhe=n(pke,"STRONG",{});var U_t=s(mhe);_No=r(U_t,"ibert"),U_t.forEach(t),bNo=r(pke," \u2014 "),YO=n(pke,"A",{href:!0});var J_t=s(YO);vNo=r(J_t,"IBertForSequenceClassification"),J_t.forEach(t),FNo=r(pke," (I-BERT model)"),pke.forEach(t),TNo=i(j),j2=n(j,"LI",{});var uke=s(j2);ghe=n(uke,"STRONG",{});var Y_t=s(ghe);MNo=r(Y_t,"layoutlm"),Y_t.forEach(t),ENo=r(uke," \u2014 "),KO=n(uke,"A",{href:!0});var K_t=s(KO);CNo=r(K_t,"LayoutLMForSequenceClassification"),K_t.forEach(t),wNo=r(uke," (LayoutLM model)"),uke.forEach(t),ANo=i(j),D2=n(j,"LI",{});var _ke=s(D2);hhe=n(_ke,"STRONG",{});var Z_t=s(hhe);LNo=r(Z_t,"layoutlmv2"),Z_t.forEach(t),yNo=r(_ke," \u2014 "),ZO=n(_ke,"A",{href:!0});var e7t=s(ZO);xNo=r(e7t,"LayoutLMv2ForSequenceClassification"),e7t.forEach(t),$No=r(_ke," (LayoutLMv2 model)"),_ke.forEach(t),kNo=i(j),G2=n(j,"LI",{});var bke=s(G2);phe=n(bke,"STRONG",{});var o7t=s(phe);SNo=r(o7t,"layoutlmv3"),o7t.forEach(t),RNo=r(bke," \u2014 "),eV=n(bke,"A",{href:!0});var r7t=s(eV);PNo=r(r7t,"LayoutLMv3ForSequenceClassification"),r7t.forEach(t),BNo=r(bke," (LayoutLMv3 model)"),bke.forEach(t),INo=i(j),O2=n(j,"LI",{});var vke=s(O2);uhe=n(vke,"STRONG",{});var t7t=s(uhe);NNo=r(t7t,"led"),t7t.forEach(t),qNo=r(vke," \u2014 "),oV=n(vke,"A",{href:!0});var a7t=s(oV);jNo=r(a7t,"LEDForSequenceClassification"),a7t.forEach(t),DNo=r(vke," (LED model)"),vke.forEach(t),GNo=i(j),V2=n(j,"LI",{});var Fke=s(V2);_he=n(Fke,"STRONG",{});var n7t=s(_he);ONo=r(n7t,"longformer"),n7t.forEach(t),VNo=r(Fke," \u2014 "),rV=n(Fke,"A",{href:!0});var s7t=s(rV);XNo=r(s7t,"LongformerForSequenceClassification"),s7t.forEach(t),zNo=r(Fke," (Longformer model)"),Fke.forEach(t),WNo=i(j),X2=n(j,"LI",{});var Tke=s(X2);bhe=n(Tke,"STRONG",{});var l7t=s(bhe);QNo=r(l7t,"mbart"),l7t.forEach(t),HNo=r(Tke," \u2014 "),tV=n(Tke,"A",{href:!0});var i7t=s(tV);UNo=r(i7t,"MBartForSequenceClassification"),i7t.forEach(t),JNo=r(Tke," (mBART model)"),Tke.forEach(t),YNo=i(j),z2=n(j,"LI",{});var Mke=s(z2);vhe=n(Mke,"STRONG",{});var d7t=s(vhe);KNo=r(d7t,"megatron-bert"),d7t.forEach(t),ZNo=r(Mke," \u2014 "),aV=n(Mke,"A",{href:!0});var c7t=s(aV);eqo=r(c7t,"MegatronBertForSequenceClassification"),c7t.forEach(t),oqo=r(Mke," (Megatron-BERT model)"),Mke.forEach(t),rqo=i(j),W2=n(j,"LI",{});var Eke=s(W2);Fhe=n(Eke,"STRONG",{});var f7t=s(Fhe);tqo=r(f7t,"mobilebert"),f7t.forEach(t),aqo=r(Eke," \u2014 "),nV=n(Eke,"A",{href:!0});var m7t=s(nV);nqo=r(m7t,"MobileBertForSequenceClassification"),m7t.forEach(t),sqo=r(Eke," (MobileBERT model)"),Eke.forEach(t),lqo=i(j),Q2=n(j,"LI",{});var Cke=s(Q2);The=n(Cke,"STRONG",{});var g7t=s(The);iqo=r(g7t,"mpnet"),g7t.forEach(t),dqo=r(Cke," \u2014 "),sV=n(Cke,"A",{href:!0});var h7t=s(sV);cqo=r(h7t,"MPNetForSequenceClassification"),h7t.forEach(t),fqo=r(Cke," (MPNet model)"),Cke.forEach(t),mqo=i(j),H2=n(j,"LI",{});var wke=s(H2);Mhe=n(wke,"STRONG",{});var p7t=s(Mhe);gqo=r(p7t,"nystromformer"),p7t.forEach(t),hqo=r(wke," \u2014 "),lV=n(wke,"A",{href:!0});var u7t=s(lV);pqo=r(u7t,"NystromformerForSequenceClassification"),u7t.forEach(t),uqo=r(wke," (Nystr\xF6mformer model)"),wke.forEach(t),_qo=i(j),U2=n(j,"LI",{});var Ake=s(U2);Ehe=n(Ake,"STRONG",{});var _7t=s(Ehe);bqo=r(_7t,"openai-gpt"),_7t.forEach(t),vqo=r(Ake," \u2014 "),iV=n(Ake,"A",{href:!0});var b7t=s(iV);Fqo=r(b7t,"OpenAIGPTForSequenceClassification"),b7t.forEach(t),Tqo=r(Ake," (OpenAI GPT model)"),Ake.forEach(t),Mqo=i(j),J2=n(j,"LI",{});var Lke=s(J2);Che=n(Lke,"STRONG",{});var v7t=s(Che);Eqo=r(v7t,"perceiver"),v7t.forEach(t),Cqo=r(Lke," \u2014 "),dV=n(Lke,"A",{href:!0});var F7t=s(dV);wqo=r(F7t,"PerceiverForSequenceClassification"),F7t.forEach(t),Aqo=r(Lke," (Perceiver model)"),Lke.forEach(t),Lqo=i(j),Y2=n(j,"LI",{});var yke=s(Y2);whe=n(yke,"STRONG",{});var T7t=s(whe);yqo=r(T7t,"plbart"),T7t.forEach(t),xqo=r(yke," \u2014 "),cV=n(yke,"A",{href:!0});var M7t=s(cV);$qo=r(M7t,"PLBartForSequenceClassification"),M7t.forEach(t),kqo=r(yke," (PLBart model)"),yke.forEach(t),Sqo=i(j),K2=n(j,"LI",{});var xke=s(K2);Ahe=n(xke,"STRONG",{});var E7t=s(Ahe);Rqo=r(E7t,"qdqbert"),E7t.forEach(t),Pqo=r(xke," \u2014 "),fV=n(xke,"A",{href:!0});var C7t=s(fV);Bqo=r(C7t,"QDQBertForSequenceClassification"),C7t.forEach(t),Iqo=r(xke," (QDQBert model)"),xke.forEach(t),Nqo=i(j),Z2=n(j,"LI",{});var $ke=s(Z2);Lhe=n($ke,"STRONG",{});var w7t=s(Lhe);qqo=r(w7t,"reformer"),w7t.forEach(t),jqo=r($ke," \u2014 "),mV=n($ke,"A",{href:!0});var A7t=s(mV);Dqo=r(A7t,"ReformerForSequenceClassification"),A7t.forEach(t),Gqo=r($ke," (Reformer model)"),$ke.forEach(t),Oqo=i(j),eb=n(j,"LI",{});var kke=s(eb);yhe=n(kke,"STRONG",{});var L7t=s(yhe);Vqo=r(L7t,"rembert"),L7t.forEach(t),Xqo=r(kke," \u2014 "),gV=n(kke,"A",{href:!0});var y7t=s(gV);zqo=r(y7t,"RemBertForSequenceClassification"),y7t.forEach(t),Wqo=r(kke," (RemBERT model)"),kke.forEach(t),Qqo=i(j),ob=n(j,"LI",{});var Ske=s(ob);xhe=n(Ske,"STRONG",{});var x7t=s(xhe);Hqo=r(x7t,"roberta"),x7t.forEach(t),Uqo=r(Ske," \u2014 "),hV=n(Ske,"A",{href:!0});var $7t=s(hV);Jqo=r($7t,"RobertaForSequenceClassification"),$7t.forEach(t),Yqo=r(Ske," (RoBERTa model)"),Ske.forEach(t),Kqo=i(j),rb=n(j,"LI",{});var Rke=s(rb);$he=n(Rke,"STRONG",{});var k7t=s($he);Zqo=r(k7t,"roformer"),k7t.forEach(t),ejo=r(Rke," \u2014 "),pV=n(Rke,"A",{href:!0});var S7t=s(pV);ojo=r(S7t,"RoFormerForSequenceClassification"),S7t.forEach(t),rjo=r(Rke," (RoFormer model)"),Rke.forEach(t),tjo=i(j),tb=n(j,"LI",{});var Pke=s(tb);khe=n(Pke,"STRONG",{});var R7t=s(khe);ajo=r(R7t,"squeezebert"),R7t.forEach(t),njo=r(Pke," \u2014 "),uV=n(Pke,"A",{href:!0});var P7t=s(uV);sjo=r(P7t,"SqueezeBertForSequenceClassification"),P7t.forEach(t),ljo=r(Pke," (SqueezeBERT model)"),Pke.forEach(t),ijo=i(j),ab=n(j,"LI",{});var Bke=s(ab);She=n(Bke,"STRONG",{});var B7t=s(She);djo=r(B7t,"tapas"),B7t.forEach(t),cjo=r(Bke," \u2014 "),_V=n(Bke,"A",{href:!0});var I7t=s(_V);fjo=r(I7t,"TapasForSequenceClassification"),I7t.forEach(t),mjo=r(Bke," (TAPAS model)"),Bke.forEach(t),gjo=i(j),nb=n(j,"LI",{});var Ike=s(nb);Rhe=n(Ike,"STRONG",{});var N7t=s(Rhe);hjo=r(N7t,"transfo-xl"),N7t.forEach(t),pjo=r(Ike," \u2014 "),bV=n(Ike,"A",{href:!0});var q7t=s(bV);ujo=r(q7t,"TransfoXLForSequenceClassification"),q7t.forEach(t),_jo=r(Ike," (Transformer-XL model)"),Ike.forEach(t),bjo=i(j),sb=n(j,"LI",{});var Nke=s(sb);Phe=n(Nke,"STRONG",{});var j7t=s(Phe);vjo=r(j7t,"xlm"),j7t.forEach(t),Fjo=r(Nke," \u2014 "),vV=n(Nke,"A",{href:!0});var D7t=s(vV);Tjo=r(D7t,"XLMForSequenceClassification"),D7t.forEach(t),Mjo=r(Nke," (XLM model)"),Nke.forEach(t),Ejo=i(j),lb=n(j,"LI",{});var qke=s(lb);Bhe=n(qke,"STRONG",{});var G7t=s(Bhe);Cjo=r(G7t,"xlm-roberta"),G7t.forEach(t),wjo=r(qke," \u2014 "),FV=n(qke,"A",{href:!0});var O7t=s(FV);Ajo=r(O7t,"XLMRobertaForSequenceClassification"),O7t.forEach(t),Ljo=r(qke," (XLM-RoBERTa model)"),qke.forEach(t),yjo=i(j),ib=n(j,"LI",{});var jke=s(ib);Ihe=n(jke,"STRONG",{});var V7t=s(Ihe);xjo=r(V7t,"xlm-roberta-xl"),V7t.forEach(t),$jo=r(jke," \u2014 "),TV=n(jke,"A",{href:!0});var X7t=s(TV);kjo=r(X7t,"XLMRobertaXLForSequenceClassification"),X7t.forEach(t),Sjo=r(jke," (XLM-RoBERTa-XL model)"),jke.forEach(t),Rjo=i(j),db=n(j,"LI",{});var Dke=s(db);Nhe=n(Dke,"STRONG",{});var z7t=s(Nhe);Pjo=r(z7t,"xlnet"),z7t.forEach(t),Bjo=r(Dke," \u2014 "),MV=n(Dke,"A",{href:!0});var W7t=s(MV);Ijo=r(W7t,"XLNetForSequenceClassification"),W7t.forEach(t),Njo=r(Dke," (XLNet model)"),Dke.forEach(t),qjo=i(j),cb=n(j,"LI",{});var Gke=s(cb);qhe=n(Gke,"STRONG",{});var Q7t=s(qhe);jjo=r(Q7t,"yoso"),Q7t.forEach(t),Djo=r(Gke," \u2014 "),EV=n(Gke,"A",{href:!0});var H7t=s(EV);Gjo=r(H7t,"YosoForSequenceClassification"),H7t.forEach(t),Ojo=r(Gke," (YOSO model)"),Gke.forEach(t),j.forEach(t),Vjo=i(da),fb=n(da,"P",{});var Oke=s(fb);Xjo=r(Oke,"The model is set in evaluation mode by default using "),jhe=n(Oke,"CODE",{});var U7t=s(jhe);zjo=r(U7t,"model.eval()"),U7t.forEach(t),Wjo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(Oke,"CODE",{});var J7t=s(Dhe);Qjo=r(J7t,"model.train()"),J7t.forEach(t),Oke.forEach(t),Hjo=i(da),T(mb.$$.fragment,da),da.forEach(t),el.forEach(t),LGe=i(f),Ki=n(f,"H2",{class:!0});var RVe=s(Ki);gb=n(RVe,"A",{id:!0,class:!0,href:!0});var Y7t=s(gb);Ghe=n(Y7t,"SPAN",{});var K7t=s(Ghe);T(My.$$.fragment,K7t),K7t.forEach(t),Y7t.forEach(t),Ujo=i(RVe),Ohe=n(RVe,"SPAN",{});var Z7t=s(Ohe);Jjo=r(Z7t,"AutoModelForMultipleChoice"),Z7t.forEach(t),RVe.forEach(t),yGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(Ey.$$.fragment,ol),Yjo=i(ol),Zi=n(ol,"P",{});var foe=s(Zi);Kjo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CV=n(foe,"A",{href:!0});var e1t=s(CV);Zjo=r(e1t,"from_pretrained()"),e1t.forEach(t),eDo=r(foe," class method or the "),wV=n(foe,"A",{href:!0});var o1t=s(wV);oDo=r(o1t,"from_config()"),o1t.forEach(t),rDo=r(foe,` class
method.`),foe.forEach(t),tDo=i(ol),Cy=n(ol,"P",{});var PVe=s(Cy);aDo=r(PVe,"This class cannot be instantiated directly using "),Vhe=n(PVe,"CODE",{});var r1t=s(Vhe);nDo=r(r1t,"__init__()"),r1t.forEach(t),sDo=r(PVe," (throws an error)."),PVe.forEach(t),lDo=i(ol),ft=n(ol,"DIV",{class:!0});var PA=s(ft);T(wy.$$.fragment,PA),iDo=i(PA),Xhe=n(PA,"P",{});var t1t=s(Xhe);dDo=r(t1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t1t.forEach(t),cDo=i(PA),ed=n(PA,"P",{});var moe=s(ed);fDo=r(moe,`Note:
Loading a model from its configuration file does `),zhe=n(moe,"STRONG",{});var a1t=s(zhe);mDo=r(a1t,"not"),a1t.forEach(t),gDo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(moe,"A",{href:!0});var n1t=s(AV);hDo=r(n1t,"from_pretrained()"),n1t.forEach(t),pDo=r(moe," to load the model weights."),moe.forEach(t),uDo=i(PA),T(hb.$$.fragment,PA),PA.forEach(t),_Do=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(Ay.$$.fragment,ca),bDo=i(ca),Whe=n(ca,"P",{});var s1t=s(Whe);vDo=r(s1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),s1t.forEach(t),FDo=i(ca),qa=n(ca,"P",{});var BA=s(qa);TDo=r(BA,"The model class to instantiate is selected based on the "),Qhe=n(BA,"CODE",{});var l1t=s(Qhe);MDo=r(l1t,"model_type"),l1t.forEach(t),EDo=r(BA,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(BA,"CODE",{});var i1t=s(Hhe);CDo=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),wDo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(BA,"CODE",{});var d1t=s(Uhe);ADo=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),LDo=r(BA,":"),BA.forEach(t),yDo=i(ca),Z=n(ca,"UL",{});var oe=s(Z);pb=n(oe,"LI",{});var Vke=s(pb);Jhe=n(Vke,"STRONG",{});var c1t=s(Jhe);xDo=r(c1t,"albert"),c1t.forEach(t),$Do=r(Vke," \u2014 "),LV=n(Vke,"A",{href:!0});var f1t=s(LV);kDo=r(f1t,"AlbertForMultipleChoice"),f1t.forEach(t),SDo=r(Vke," (ALBERT model)"),Vke.forEach(t),RDo=i(oe),ub=n(oe,"LI",{});var Xke=s(ub);Yhe=n(Xke,"STRONG",{});var m1t=s(Yhe);PDo=r(m1t,"bert"),m1t.forEach(t),BDo=r(Xke," \u2014 "),yV=n(Xke,"A",{href:!0});var g1t=s(yV);IDo=r(g1t,"BertForMultipleChoice"),g1t.forEach(t),NDo=r(Xke," (BERT model)"),Xke.forEach(t),qDo=i(oe),_b=n(oe,"LI",{});var zke=s(_b);Khe=n(zke,"STRONG",{});var h1t=s(Khe);jDo=r(h1t,"big_bird"),h1t.forEach(t),DDo=r(zke," \u2014 "),xV=n(zke,"A",{href:!0});var p1t=s(xV);GDo=r(p1t,"BigBirdForMultipleChoice"),p1t.forEach(t),ODo=r(zke," (BigBird model)"),zke.forEach(t),VDo=i(oe),bb=n(oe,"LI",{});var Wke=s(bb);Zhe=n(Wke,"STRONG",{});var u1t=s(Zhe);XDo=r(u1t,"camembert"),u1t.forEach(t),zDo=r(Wke," \u2014 "),$V=n(Wke,"A",{href:!0});var _1t=s($V);WDo=r(_1t,"CamembertForMultipleChoice"),_1t.forEach(t),QDo=r(Wke," (CamemBERT model)"),Wke.forEach(t),HDo=i(oe),vb=n(oe,"LI",{});var Qke=s(vb);epe=n(Qke,"STRONG",{});var b1t=s(epe);UDo=r(b1t,"canine"),b1t.forEach(t),JDo=r(Qke," \u2014 "),kV=n(Qke,"A",{href:!0});var v1t=s(kV);YDo=r(v1t,"CanineForMultipleChoice"),v1t.forEach(t),KDo=r(Qke," (CANINE model)"),Qke.forEach(t),ZDo=i(oe),Fb=n(oe,"LI",{});var Hke=s(Fb);ope=n(Hke,"STRONG",{});var F1t=s(ope);eGo=r(F1t,"convbert"),F1t.forEach(t),oGo=r(Hke," \u2014 "),SV=n(Hke,"A",{href:!0});var T1t=s(SV);rGo=r(T1t,"ConvBertForMultipleChoice"),T1t.forEach(t),tGo=r(Hke," (ConvBERT model)"),Hke.forEach(t),aGo=i(oe),Tb=n(oe,"LI",{});var Uke=s(Tb);rpe=n(Uke,"STRONG",{});var M1t=s(rpe);nGo=r(M1t,"data2vec-text"),M1t.forEach(t),sGo=r(Uke," \u2014 "),RV=n(Uke,"A",{href:!0});var E1t=s(RV);lGo=r(E1t,"Data2VecTextForMultipleChoice"),E1t.forEach(t),iGo=r(Uke," (Data2VecText model)"),Uke.forEach(t),dGo=i(oe),Mb=n(oe,"LI",{});var Jke=s(Mb);tpe=n(Jke,"STRONG",{});var C1t=s(tpe);cGo=r(C1t,"deberta-v2"),C1t.forEach(t),fGo=r(Jke," \u2014 "),PV=n(Jke,"A",{href:!0});var w1t=s(PV);mGo=r(w1t,"DebertaV2ForMultipleChoice"),w1t.forEach(t),gGo=r(Jke," (DeBERTa-v2 model)"),Jke.forEach(t),hGo=i(oe),Eb=n(oe,"LI",{});var Yke=s(Eb);ape=n(Yke,"STRONG",{});var A1t=s(ape);pGo=r(A1t,"distilbert"),A1t.forEach(t),uGo=r(Yke," \u2014 "),BV=n(Yke,"A",{href:!0});var L1t=s(BV);_Go=r(L1t,"DistilBertForMultipleChoice"),L1t.forEach(t),bGo=r(Yke," (DistilBERT model)"),Yke.forEach(t),vGo=i(oe),Cb=n(oe,"LI",{});var Kke=s(Cb);npe=n(Kke,"STRONG",{});var y1t=s(npe);FGo=r(y1t,"electra"),y1t.forEach(t),TGo=r(Kke," \u2014 "),IV=n(Kke,"A",{href:!0});var x1t=s(IV);MGo=r(x1t,"ElectraForMultipleChoice"),x1t.forEach(t),EGo=r(Kke," (ELECTRA model)"),Kke.forEach(t),CGo=i(oe),wb=n(oe,"LI",{});var Zke=s(wb);spe=n(Zke,"STRONG",{});var $1t=s(spe);wGo=r($1t,"flaubert"),$1t.forEach(t),AGo=r(Zke," \u2014 "),NV=n(Zke,"A",{href:!0});var k1t=s(NV);LGo=r(k1t,"FlaubertForMultipleChoice"),k1t.forEach(t),yGo=r(Zke," (FlauBERT model)"),Zke.forEach(t),xGo=i(oe),Ab=n(oe,"LI",{});var eSe=s(Ab);lpe=n(eSe,"STRONG",{});var S1t=s(lpe);$Go=r(S1t,"fnet"),S1t.forEach(t),kGo=r(eSe," \u2014 "),qV=n(eSe,"A",{href:!0});var R1t=s(qV);SGo=r(R1t,"FNetForMultipleChoice"),R1t.forEach(t),RGo=r(eSe," (FNet model)"),eSe.forEach(t),PGo=i(oe),Lb=n(oe,"LI",{});var oSe=s(Lb);ipe=n(oSe,"STRONG",{});var P1t=s(ipe);BGo=r(P1t,"funnel"),P1t.forEach(t),IGo=r(oSe," \u2014 "),jV=n(oSe,"A",{href:!0});var B1t=s(jV);NGo=r(B1t,"FunnelForMultipleChoice"),B1t.forEach(t),qGo=r(oSe," (Funnel Transformer model)"),oSe.forEach(t),jGo=i(oe),yb=n(oe,"LI",{});var rSe=s(yb);dpe=n(rSe,"STRONG",{});var I1t=s(dpe);DGo=r(I1t,"ibert"),I1t.forEach(t),GGo=r(rSe," \u2014 "),DV=n(rSe,"A",{href:!0});var N1t=s(DV);OGo=r(N1t,"IBertForMultipleChoice"),N1t.forEach(t),VGo=r(rSe," (I-BERT model)"),rSe.forEach(t),XGo=i(oe),xb=n(oe,"LI",{});var tSe=s(xb);cpe=n(tSe,"STRONG",{});var q1t=s(cpe);zGo=r(q1t,"longformer"),q1t.forEach(t),WGo=r(tSe," \u2014 "),GV=n(tSe,"A",{href:!0});var j1t=s(GV);QGo=r(j1t,"LongformerForMultipleChoice"),j1t.forEach(t),HGo=r(tSe," (Longformer model)"),tSe.forEach(t),UGo=i(oe),$b=n(oe,"LI",{});var aSe=s($b);fpe=n(aSe,"STRONG",{});var D1t=s(fpe);JGo=r(D1t,"megatron-bert"),D1t.forEach(t),YGo=r(aSe," \u2014 "),OV=n(aSe,"A",{href:!0});var G1t=s(OV);KGo=r(G1t,"MegatronBertForMultipleChoice"),G1t.forEach(t),ZGo=r(aSe," (Megatron-BERT model)"),aSe.forEach(t),eOo=i(oe),kb=n(oe,"LI",{});var nSe=s(kb);mpe=n(nSe,"STRONG",{});var O1t=s(mpe);oOo=r(O1t,"mobilebert"),O1t.forEach(t),rOo=r(nSe," \u2014 "),VV=n(nSe,"A",{href:!0});var V1t=s(VV);tOo=r(V1t,"MobileBertForMultipleChoice"),V1t.forEach(t),aOo=r(nSe," (MobileBERT model)"),nSe.forEach(t),nOo=i(oe),Sb=n(oe,"LI",{});var sSe=s(Sb);gpe=n(sSe,"STRONG",{});var X1t=s(gpe);sOo=r(X1t,"mpnet"),X1t.forEach(t),lOo=r(sSe," \u2014 "),XV=n(sSe,"A",{href:!0});var z1t=s(XV);iOo=r(z1t,"MPNetForMultipleChoice"),z1t.forEach(t),dOo=r(sSe," (MPNet model)"),sSe.forEach(t),cOo=i(oe),Rb=n(oe,"LI",{});var lSe=s(Rb);hpe=n(lSe,"STRONG",{});var W1t=s(hpe);fOo=r(W1t,"nystromformer"),W1t.forEach(t),mOo=r(lSe," \u2014 "),zV=n(lSe,"A",{href:!0});var Q1t=s(zV);gOo=r(Q1t,"NystromformerForMultipleChoice"),Q1t.forEach(t),hOo=r(lSe," (Nystr\xF6mformer model)"),lSe.forEach(t),pOo=i(oe),Pb=n(oe,"LI",{});var iSe=s(Pb);ppe=n(iSe,"STRONG",{});var H1t=s(ppe);uOo=r(H1t,"qdqbert"),H1t.forEach(t),_Oo=r(iSe," \u2014 "),WV=n(iSe,"A",{href:!0});var U1t=s(WV);bOo=r(U1t,"QDQBertForMultipleChoice"),U1t.forEach(t),vOo=r(iSe," (QDQBert model)"),iSe.forEach(t),FOo=i(oe),Bb=n(oe,"LI",{});var dSe=s(Bb);upe=n(dSe,"STRONG",{});var J1t=s(upe);TOo=r(J1t,"rembert"),J1t.forEach(t),MOo=r(dSe," \u2014 "),QV=n(dSe,"A",{href:!0});var Y1t=s(QV);EOo=r(Y1t,"RemBertForMultipleChoice"),Y1t.forEach(t),COo=r(dSe," (RemBERT model)"),dSe.forEach(t),wOo=i(oe),Ib=n(oe,"LI",{});var cSe=s(Ib);_pe=n(cSe,"STRONG",{});var K1t=s(_pe);AOo=r(K1t,"roberta"),K1t.forEach(t),LOo=r(cSe," \u2014 "),HV=n(cSe,"A",{href:!0});var Z1t=s(HV);yOo=r(Z1t,"RobertaForMultipleChoice"),Z1t.forEach(t),xOo=r(cSe," (RoBERTa model)"),cSe.forEach(t),$Oo=i(oe),Nb=n(oe,"LI",{});var fSe=s(Nb);bpe=n(fSe,"STRONG",{});var e2t=s(bpe);kOo=r(e2t,"roformer"),e2t.forEach(t),SOo=r(fSe," \u2014 "),UV=n(fSe,"A",{href:!0});var o2t=s(UV);ROo=r(o2t,"RoFormerForMultipleChoice"),o2t.forEach(t),POo=r(fSe," (RoFormer model)"),fSe.forEach(t),BOo=i(oe),qb=n(oe,"LI",{});var mSe=s(qb);vpe=n(mSe,"STRONG",{});var r2t=s(vpe);IOo=r(r2t,"squeezebert"),r2t.forEach(t),NOo=r(mSe," \u2014 "),JV=n(mSe,"A",{href:!0});var t2t=s(JV);qOo=r(t2t,"SqueezeBertForMultipleChoice"),t2t.forEach(t),jOo=r(mSe," (SqueezeBERT model)"),mSe.forEach(t),DOo=i(oe),jb=n(oe,"LI",{});var gSe=s(jb);Fpe=n(gSe,"STRONG",{});var a2t=s(Fpe);GOo=r(a2t,"xlm"),a2t.forEach(t),OOo=r(gSe," \u2014 "),YV=n(gSe,"A",{href:!0});var n2t=s(YV);VOo=r(n2t,"XLMForMultipleChoice"),n2t.forEach(t),XOo=r(gSe," (XLM model)"),gSe.forEach(t),zOo=i(oe),Db=n(oe,"LI",{});var hSe=s(Db);Tpe=n(hSe,"STRONG",{});var s2t=s(Tpe);WOo=r(s2t,"xlm-roberta"),s2t.forEach(t),QOo=r(hSe," \u2014 "),KV=n(hSe,"A",{href:!0});var l2t=s(KV);HOo=r(l2t,"XLMRobertaForMultipleChoice"),l2t.forEach(t),UOo=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),JOo=i(oe),Gb=n(oe,"LI",{});var pSe=s(Gb);Mpe=n(pSe,"STRONG",{});var i2t=s(Mpe);YOo=r(i2t,"xlm-roberta-xl"),i2t.forEach(t),KOo=r(pSe," \u2014 "),ZV=n(pSe,"A",{href:!0});var d2t=s(ZV);ZOo=r(d2t,"XLMRobertaXLForMultipleChoice"),d2t.forEach(t),eVo=r(pSe," (XLM-RoBERTa-XL model)"),pSe.forEach(t),oVo=i(oe),Ob=n(oe,"LI",{});var uSe=s(Ob);Epe=n(uSe,"STRONG",{});var c2t=s(Epe);rVo=r(c2t,"xlnet"),c2t.forEach(t),tVo=r(uSe," \u2014 "),eX=n(uSe,"A",{href:!0});var f2t=s(eX);aVo=r(f2t,"XLNetForMultipleChoice"),f2t.forEach(t),nVo=r(uSe," (XLNet model)"),uSe.forEach(t),sVo=i(oe),Vb=n(oe,"LI",{});var _Se=s(Vb);Cpe=n(_Se,"STRONG",{});var m2t=s(Cpe);lVo=r(m2t,"yoso"),m2t.forEach(t),iVo=r(_Se," \u2014 "),oX=n(_Se,"A",{href:!0});var g2t=s(oX);dVo=r(g2t,"YosoForMultipleChoice"),g2t.forEach(t),cVo=r(_Se," (YOSO model)"),_Se.forEach(t),oe.forEach(t),fVo=i(ca),Xb=n(ca,"P",{});var bSe=s(Xb);mVo=r(bSe,"The model is set in evaluation mode by default using "),wpe=n(bSe,"CODE",{});var h2t=s(wpe);gVo=r(h2t,"model.eval()"),h2t.forEach(t),hVo=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(bSe,"CODE",{});var p2t=s(Ape);pVo=r(p2t,"model.train()"),p2t.forEach(t),bSe.forEach(t),uVo=i(ca),T(zb.$$.fragment,ca),ca.forEach(t),ol.forEach(t),xGe=i(f),od=n(f,"H2",{class:!0});var BVe=s(od);Wb=n(BVe,"A",{id:!0,class:!0,href:!0});var u2t=s(Wb);Lpe=n(u2t,"SPAN",{});var _2t=s(Lpe);T(Ly.$$.fragment,_2t),_2t.forEach(t),u2t.forEach(t),_Vo=i(BVe),ype=n(BVe,"SPAN",{});var b2t=s(ype);bVo=r(b2t,"AutoModelForNextSentencePrediction"),b2t.forEach(t),BVe.forEach(t),$Ge=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(yy.$$.fragment,rl),vVo=i(rl),rd=n(rl,"P",{});var goe=s(rd);FVo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rX=n(goe,"A",{href:!0});var v2t=s(rX);TVo=r(v2t,"from_pretrained()"),v2t.forEach(t),MVo=r(goe," class method or the "),tX=n(goe,"A",{href:!0});var F2t=s(tX);EVo=r(F2t,"from_config()"),F2t.forEach(t),CVo=r(goe,` class
method.`),goe.forEach(t),wVo=i(rl),xy=n(rl,"P",{});var IVe=s(xy);AVo=r(IVe,"This class cannot be instantiated directly using "),xpe=n(IVe,"CODE",{});var T2t=s(xpe);LVo=r(T2t,"__init__()"),T2t.forEach(t),yVo=r(IVe," (throws an error)."),IVe.forEach(t),xVo=i(rl),mt=n(rl,"DIV",{class:!0});var IA=s(mt);T($y.$$.fragment,IA),$Vo=i(IA),$pe=n(IA,"P",{});var M2t=s($pe);kVo=r(M2t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M2t.forEach(t),SVo=i(IA),td=n(IA,"P",{});var hoe=s(td);RVo=r(hoe,`Note:
Loading a model from its configuration file does `),kpe=n(hoe,"STRONG",{});var E2t=s(kpe);PVo=r(E2t,"not"),E2t.forEach(t),BVo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(hoe,"A",{href:!0});var C2t=s(aX);IVo=r(C2t,"from_pretrained()"),C2t.forEach(t),NVo=r(hoe," to load the model weights."),hoe.forEach(t),qVo=i(IA),T(Qb.$$.fragment,IA),IA.forEach(t),jVo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T(ky.$$.fragment,fa),DVo=i(fa),Spe=n(fa,"P",{});var w2t=s(Spe);GVo=r(w2t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w2t.forEach(t),OVo=i(fa),ja=n(fa,"P",{});var NA=s(ja);VVo=r(NA,"The model class to instantiate is selected based on the "),Rpe=n(NA,"CODE",{});var A2t=s(Rpe);XVo=r(A2t,"model_type"),A2t.forEach(t),zVo=r(NA,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(NA,"CODE",{});var L2t=s(Ppe);WVo=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),QVo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(NA,"CODE",{});var y2t=s(Bpe);HVo=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),UVo=r(NA,":"),NA.forEach(t),JVo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);Hb=n(tl,"LI",{});var vSe=s(Hb);Ipe=n(vSe,"STRONG",{});var x2t=s(Ipe);YVo=r(x2t,"bert"),x2t.forEach(t),KVo=r(vSe," \u2014 "),nX=n(vSe,"A",{href:!0});var $2t=s(nX);ZVo=r($2t,"BertForNextSentencePrediction"),$2t.forEach(t),eXo=r(vSe," (BERT model)"),vSe.forEach(t),oXo=i(tl),Ub=n(tl,"LI",{});var FSe=s(Ub);Npe=n(FSe,"STRONG",{});var k2t=s(Npe);rXo=r(k2t,"fnet"),k2t.forEach(t),tXo=r(FSe," \u2014 "),sX=n(FSe,"A",{href:!0});var S2t=s(sX);aXo=r(S2t,"FNetForNextSentencePrediction"),S2t.forEach(t),nXo=r(FSe," (FNet model)"),FSe.forEach(t),sXo=i(tl),Jb=n(tl,"LI",{});var TSe=s(Jb);qpe=n(TSe,"STRONG",{});var R2t=s(qpe);lXo=r(R2t,"megatron-bert"),R2t.forEach(t),iXo=r(TSe," \u2014 "),lX=n(TSe,"A",{href:!0});var P2t=s(lX);dXo=r(P2t,"MegatronBertForNextSentencePrediction"),P2t.forEach(t),cXo=r(TSe," (Megatron-BERT model)"),TSe.forEach(t),fXo=i(tl),Yb=n(tl,"LI",{});var MSe=s(Yb);jpe=n(MSe,"STRONG",{});var B2t=s(jpe);mXo=r(B2t,"mobilebert"),B2t.forEach(t),gXo=r(MSe," \u2014 "),iX=n(MSe,"A",{href:!0});var I2t=s(iX);hXo=r(I2t,"MobileBertForNextSentencePrediction"),I2t.forEach(t),pXo=r(MSe," (MobileBERT model)"),MSe.forEach(t),uXo=i(tl),Kb=n(tl,"LI",{});var ESe=s(Kb);Dpe=n(ESe,"STRONG",{});var N2t=s(Dpe);_Xo=r(N2t,"qdqbert"),N2t.forEach(t),bXo=r(ESe," \u2014 "),dX=n(ESe,"A",{href:!0});var q2t=s(dX);vXo=r(q2t,"QDQBertForNextSentencePrediction"),q2t.forEach(t),FXo=r(ESe," (QDQBert model)"),ESe.forEach(t),tl.forEach(t),TXo=i(fa),Zb=n(fa,"P",{});var CSe=s(Zb);MXo=r(CSe,"The model is set in evaluation mode by default using "),Gpe=n(CSe,"CODE",{});var j2t=s(Gpe);EXo=r(j2t,"model.eval()"),j2t.forEach(t),CXo=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(CSe,"CODE",{});var D2t=s(Ope);wXo=r(D2t,"model.train()"),D2t.forEach(t),CSe.forEach(t),AXo=i(fa),T(ev.$$.fragment,fa),fa.forEach(t),rl.forEach(t),kGe=i(f),ad=n(f,"H2",{class:!0});var NVe=s(ad);ov=n(NVe,"A",{id:!0,class:!0,href:!0});var G2t=s(ov);Vpe=n(G2t,"SPAN",{});var O2t=s(Vpe);T(Sy.$$.fragment,O2t),O2t.forEach(t),G2t.forEach(t),LXo=i(NVe),Xpe=n(NVe,"SPAN",{});var V2t=s(Xpe);yXo=r(V2t,"AutoModelForTokenClassification"),V2t.forEach(t),NVe.forEach(t),SGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(Ry.$$.fragment,al),xXo=i(al),nd=n(al,"P",{});var poe=s(nd);$Xo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cX=n(poe,"A",{href:!0});var X2t=s(cX);kXo=r(X2t,"from_pretrained()"),X2t.forEach(t),SXo=r(poe," class method or the "),fX=n(poe,"A",{href:!0});var z2t=s(fX);RXo=r(z2t,"from_config()"),z2t.forEach(t),PXo=r(poe,` class
method.`),poe.forEach(t),BXo=i(al),Py=n(al,"P",{});var qVe=s(Py);IXo=r(qVe,"This class cannot be instantiated directly using "),zpe=n(qVe,"CODE",{});var W2t=s(zpe);NXo=r(W2t,"__init__()"),W2t.forEach(t),qXo=r(qVe," (throws an error)."),qVe.forEach(t),jXo=i(al),gt=n(al,"DIV",{class:!0});var qA=s(gt);T(By.$$.fragment,qA),DXo=i(qA),Wpe=n(qA,"P",{});var Q2t=s(Wpe);GXo=r(Q2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q2t.forEach(t),OXo=i(qA),sd=n(qA,"P",{});var uoe=s(sd);VXo=r(uoe,`Note:
Loading a model from its configuration file does `),Qpe=n(uoe,"STRONG",{});var H2t=s(Qpe);XXo=r(H2t,"not"),H2t.forEach(t),zXo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(uoe,"A",{href:!0});var U2t=s(mX);WXo=r(U2t,"from_pretrained()"),U2t.forEach(t),QXo=r(uoe," to load the model weights."),uoe.forEach(t),HXo=i(qA),T(rv.$$.fragment,qA),qA.forEach(t),UXo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(Iy.$$.fragment,ma),JXo=i(ma),Hpe=n(ma,"P",{});var J2t=s(Hpe);YXo=r(J2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J2t.forEach(t),KXo=i(ma),Da=n(ma,"P",{});var jA=s(Da);ZXo=r(jA,"The model class to instantiate is selected based on the "),Upe=n(jA,"CODE",{});var Y2t=s(Upe);ezo=r(Y2t,"model_type"),Y2t.forEach(t),ozo=r(jA,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(jA,"CODE",{});var K2t=s(Jpe);rzo=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),tzo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(jA,"CODE",{});var Z2t=s(Ype);azo=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),nzo=r(jA,":"),jA.forEach(t),szo=i(ma),H=n(ma,"UL",{});var J=s(H);tv=n(J,"LI",{});var wSe=s(tv);Kpe=n(wSe,"STRONG",{});var ebt=s(Kpe);lzo=r(ebt,"albert"),ebt.forEach(t),izo=r(wSe," \u2014 "),gX=n(wSe,"A",{href:!0});var obt=s(gX);dzo=r(obt,"AlbertForTokenClassification"),obt.forEach(t),czo=r(wSe," (ALBERT model)"),wSe.forEach(t),fzo=i(J),av=n(J,"LI",{});var ASe=s(av);Zpe=n(ASe,"STRONG",{});var rbt=s(Zpe);mzo=r(rbt,"bert"),rbt.forEach(t),gzo=r(ASe," \u2014 "),hX=n(ASe,"A",{href:!0});var tbt=s(hX);hzo=r(tbt,"BertForTokenClassification"),tbt.forEach(t),pzo=r(ASe," (BERT model)"),ASe.forEach(t),uzo=i(J),nv=n(J,"LI",{});var LSe=s(nv);eue=n(LSe,"STRONG",{});var abt=s(eue);_zo=r(abt,"big_bird"),abt.forEach(t),bzo=r(LSe," \u2014 "),pX=n(LSe,"A",{href:!0});var nbt=s(pX);vzo=r(nbt,"BigBirdForTokenClassification"),nbt.forEach(t),Fzo=r(LSe," (BigBird model)"),LSe.forEach(t),Tzo=i(J),sv=n(J,"LI",{});var ySe=s(sv);oue=n(ySe,"STRONG",{});var sbt=s(oue);Mzo=r(sbt,"bloom"),sbt.forEach(t),Ezo=r(ySe," \u2014 "),uX=n(ySe,"A",{href:!0});var lbt=s(uX);Czo=r(lbt,"BloomForTokenClassification"),lbt.forEach(t),wzo=r(ySe," (BLOOM model)"),ySe.forEach(t),Azo=i(J),lv=n(J,"LI",{});var xSe=s(lv);rue=n(xSe,"STRONG",{});var ibt=s(rue);Lzo=r(ibt,"camembert"),ibt.forEach(t),yzo=r(xSe," \u2014 "),_X=n(xSe,"A",{href:!0});var dbt=s(_X);xzo=r(dbt,"CamembertForTokenClassification"),dbt.forEach(t),$zo=r(xSe," (CamemBERT model)"),xSe.forEach(t),kzo=i(J),iv=n(J,"LI",{});var $Se=s(iv);tue=n($Se,"STRONG",{});var cbt=s(tue);Szo=r(cbt,"canine"),cbt.forEach(t),Rzo=r($Se," \u2014 "),bX=n($Se,"A",{href:!0});var fbt=s(bX);Pzo=r(fbt,"CanineForTokenClassification"),fbt.forEach(t),Bzo=r($Se," (CANINE model)"),$Se.forEach(t),Izo=i(J),dv=n(J,"LI",{});var kSe=s(dv);aue=n(kSe,"STRONG",{});var mbt=s(aue);Nzo=r(mbt,"convbert"),mbt.forEach(t),qzo=r(kSe," \u2014 "),vX=n(kSe,"A",{href:!0});var gbt=s(vX);jzo=r(gbt,"ConvBertForTokenClassification"),gbt.forEach(t),Dzo=r(kSe," (ConvBERT model)"),kSe.forEach(t),Gzo=i(J),cv=n(J,"LI",{});var SSe=s(cv);nue=n(SSe,"STRONG",{});var hbt=s(nue);Ozo=r(hbt,"data2vec-text"),hbt.forEach(t),Vzo=r(SSe," \u2014 "),FX=n(SSe,"A",{href:!0});var pbt=s(FX);Xzo=r(pbt,"Data2VecTextForTokenClassification"),pbt.forEach(t),zzo=r(SSe," (Data2VecText model)"),SSe.forEach(t),Wzo=i(J),fv=n(J,"LI",{});var RSe=s(fv);sue=n(RSe,"STRONG",{});var ubt=s(sue);Qzo=r(ubt,"deberta"),ubt.forEach(t),Hzo=r(RSe," \u2014 "),TX=n(RSe,"A",{href:!0});var _bt=s(TX);Uzo=r(_bt,"DebertaForTokenClassification"),_bt.forEach(t),Jzo=r(RSe," (DeBERTa model)"),RSe.forEach(t),Yzo=i(J),mv=n(J,"LI",{});var PSe=s(mv);lue=n(PSe,"STRONG",{});var bbt=s(lue);Kzo=r(bbt,"deberta-v2"),bbt.forEach(t),Zzo=r(PSe," \u2014 "),MX=n(PSe,"A",{href:!0});var vbt=s(MX);eWo=r(vbt,"DebertaV2ForTokenClassification"),vbt.forEach(t),oWo=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),rWo=i(J),gv=n(J,"LI",{});var BSe=s(gv);iue=n(BSe,"STRONG",{});var Fbt=s(iue);tWo=r(Fbt,"distilbert"),Fbt.forEach(t),aWo=r(BSe," \u2014 "),EX=n(BSe,"A",{href:!0});var Tbt=s(EX);nWo=r(Tbt,"DistilBertForTokenClassification"),Tbt.forEach(t),sWo=r(BSe," (DistilBERT model)"),BSe.forEach(t),lWo=i(J),hv=n(J,"LI",{});var ISe=s(hv);due=n(ISe,"STRONG",{});var Mbt=s(due);iWo=r(Mbt,"electra"),Mbt.forEach(t),dWo=r(ISe," \u2014 "),CX=n(ISe,"A",{href:!0});var Ebt=s(CX);cWo=r(Ebt,"ElectraForTokenClassification"),Ebt.forEach(t),fWo=r(ISe," (ELECTRA model)"),ISe.forEach(t),mWo=i(J),pv=n(J,"LI",{});var NSe=s(pv);cue=n(NSe,"STRONG",{});var Cbt=s(cue);gWo=r(Cbt,"flaubert"),Cbt.forEach(t),hWo=r(NSe," \u2014 "),wX=n(NSe,"A",{href:!0});var wbt=s(wX);pWo=r(wbt,"FlaubertForTokenClassification"),wbt.forEach(t),uWo=r(NSe," (FlauBERT model)"),NSe.forEach(t),_Wo=i(J),uv=n(J,"LI",{});var qSe=s(uv);fue=n(qSe,"STRONG",{});var Abt=s(fue);bWo=r(Abt,"fnet"),Abt.forEach(t),vWo=r(qSe," \u2014 "),AX=n(qSe,"A",{href:!0});var Lbt=s(AX);FWo=r(Lbt,"FNetForTokenClassification"),Lbt.forEach(t),TWo=r(qSe," (FNet model)"),qSe.forEach(t),MWo=i(J),_v=n(J,"LI",{});var jSe=s(_v);mue=n(jSe,"STRONG",{});var ybt=s(mue);EWo=r(ybt,"funnel"),ybt.forEach(t),CWo=r(jSe," \u2014 "),LX=n(jSe,"A",{href:!0});var xbt=s(LX);wWo=r(xbt,"FunnelForTokenClassification"),xbt.forEach(t),AWo=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),LWo=i(J),bv=n(J,"LI",{});var DSe=s(bv);gue=n(DSe,"STRONG",{});var $bt=s(gue);yWo=r($bt,"gpt2"),$bt.forEach(t),xWo=r(DSe," \u2014 "),yX=n(DSe,"A",{href:!0});var kbt=s(yX);$Wo=r(kbt,"GPT2ForTokenClassification"),kbt.forEach(t),kWo=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),SWo=i(J),vv=n(J,"LI",{});var GSe=s(vv);hue=n(GSe,"STRONG",{});var Sbt=s(hue);RWo=r(Sbt,"ibert"),Sbt.forEach(t),PWo=r(GSe," \u2014 "),xX=n(GSe,"A",{href:!0});var Rbt=s(xX);BWo=r(Rbt,"IBertForTokenClassification"),Rbt.forEach(t),IWo=r(GSe," (I-BERT model)"),GSe.forEach(t),NWo=i(J),Fv=n(J,"LI",{});var OSe=s(Fv);pue=n(OSe,"STRONG",{});var Pbt=s(pue);qWo=r(Pbt,"layoutlm"),Pbt.forEach(t),jWo=r(OSe," \u2014 "),$X=n(OSe,"A",{href:!0});var Bbt=s($X);DWo=r(Bbt,"LayoutLMForTokenClassification"),Bbt.forEach(t),GWo=r(OSe," (LayoutLM model)"),OSe.forEach(t),OWo=i(J),Tv=n(J,"LI",{});var VSe=s(Tv);uue=n(VSe,"STRONG",{});var Ibt=s(uue);VWo=r(Ibt,"layoutlmv2"),Ibt.forEach(t),XWo=r(VSe," \u2014 "),kX=n(VSe,"A",{href:!0});var Nbt=s(kX);zWo=r(Nbt,"LayoutLMv2ForTokenClassification"),Nbt.forEach(t),WWo=r(VSe," (LayoutLMv2 model)"),VSe.forEach(t),QWo=i(J),Mv=n(J,"LI",{});var XSe=s(Mv);_ue=n(XSe,"STRONG",{});var qbt=s(_ue);HWo=r(qbt,"layoutlmv3"),qbt.forEach(t),UWo=r(XSe," \u2014 "),SX=n(XSe,"A",{href:!0});var jbt=s(SX);JWo=r(jbt,"LayoutLMv3ForTokenClassification"),jbt.forEach(t),YWo=r(XSe," (LayoutLMv3 model)"),XSe.forEach(t),KWo=i(J),Ev=n(J,"LI",{});var zSe=s(Ev);bue=n(zSe,"STRONG",{});var Dbt=s(bue);ZWo=r(Dbt,"longformer"),Dbt.forEach(t),eQo=r(zSe," \u2014 "),RX=n(zSe,"A",{href:!0});var Gbt=s(RX);oQo=r(Gbt,"LongformerForTokenClassification"),Gbt.forEach(t),rQo=r(zSe," (Longformer model)"),zSe.forEach(t),tQo=i(J),Cv=n(J,"LI",{});var WSe=s(Cv);vue=n(WSe,"STRONG",{});var Obt=s(vue);aQo=r(Obt,"megatron-bert"),Obt.forEach(t),nQo=r(WSe," \u2014 "),PX=n(WSe,"A",{href:!0});var Vbt=s(PX);sQo=r(Vbt,"MegatronBertForTokenClassification"),Vbt.forEach(t),lQo=r(WSe," (Megatron-BERT model)"),WSe.forEach(t),iQo=i(J),wv=n(J,"LI",{});var QSe=s(wv);Fue=n(QSe,"STRONG",{});var Xbt=s(Fue);dQo=r(Xbt,"mobilebert"),Xbt.forEach(t),cQo=r(QSe," \u2014 "),BX=n(QSe,"A",{href:!0});var zbt=s(BX);fQo=r(zbt,"MobileBertForTokenClassification"),zbt.forEach(t),mQo=r(QSe," (MobileBERT model)"),QSe.forEach(t),gQo=i(J),Av=n(J,"LI",{});var HSe=s(Av);Tue=n(HSe,"STRONG",{});var Wbt=s(Tue);hQo=r(Wbt,"mpnet"),Wbt.forEach(t),pQo=r(HSe," \u2014 "),IX=n(HSe,"A",{href:!0});var Qbt=s(IX);uQo=r(Qbt,"MPNetForTokenClassification"),Qbt.forEach(t),_Qo=r(HSe," (MPNet model)"),HSe.forEach(t),bQo=i(J),Lv=n(J,"LI",{});var USe=s(Lv);Mue=n(USe,"STRONG",{});var Hbt=s(Mue);vQo=r(Hbt,"nystromformer"),Hbt.forEach(t),FQo=r(USe," \u2014 "),NX=n(USe,"A",{href:!0});var Ubt=s(NX);TQo=r(Ubt,"NystromformerForTokenClassification"),Ubt.forEach(t),MQo=r(USe," (Nystr\xF6mformer model)"),USe.forEach(t),EQo=i(J),yv=n(J,"LI",{});var JSe=s(yv);Eue=n(JSe,"STRONG",{});var Jbt=s(Eue);CQo=r(Jbt,"qdqbert"),Jbt.forEach(t),wQo=r(JSe," \u2014 "),qX=n(JSe,"A",{href:!0});var Ybt=s(qX);AQo=r(Ybt,"QDQBertForTokenClassification"),Ybt.forEach(t),LQo=r(JSe," (QDQBert model)"),JSe.forEach(t),yQo=i(J),xv=n(J,"LI",{});var YSe=s(xv);Cue=n(YSe,"STRONG",{});var Kbt=s(Cue);xQo=r(Kbt,"rembert"),Kbt.forEach(t),$Qo=r(YSe," \u2014 "),jX=n(YSe,"A",{href:!0});var Zbt=s(jX);kQo=r(Zbt,"RemBertForTokenClassification"),Zbt.forEach(t),SQo=r(YSe," (RemBERT model)"),YSe.forEach(t),RQo=i(J),$v=n(J,"LI",{});var KSe=s($v);wue=n(KSe,"STRONG",{});var evt=s(wue);PQo=r(evt,"roberta"),evt.forEach(t),BQo=r(KSe," \u2014 "),DX=n(KSe,"A",{href:!0});var ovt=s(DX);IQo=r(ovt,"RobertaForTokenClassification"),ovt.forEach(t),NQo=r(KSe," (RoBERTa model)"),KSe.forEach(t),qQo=i(J),kv=n(J,"LI",{});var ZSe=s(kv);Aue=n(ZSe,"STRONG",{});var rvt=s(Aue);jQo=r(rvt,"roformer"),rvt.forEach(t),DQo=r(ZSe," \u2014 "),GX=n(ZSe,"A",{href:!0});var tvt=s(GX);GQo=r(tvt,"RoFormerForTokenClassification"),tvt.forEach(t),OQo=r(ZSe," (RoFormer model)"),ZSe.forEach(t),VQo=i(J),Sv=n(J,"LI",{});var eRe=s(Sv);Lue=n(eRe,"STRONG",{});var avt=s(Lue);XQo=r(avt,"squeezebert"),avt.forEach(t),zQo=r(eRe," \u2014 "),OX=n(eRe,"A",{href:!0});var nvt=s(OX);WQo=r(nvt,"SqueezeBertForTokenClassification"),nvt.forEach(t),QQo=r(eRe," (SqueezeBERT model)"),eRe.forEach(t),HQo=i(J),Rv=n(J,"LI",{});var oRe=s(Rv);yue=n(oRe,"STRONG",{});var svt=s(yue);UQo=r(svt,"xlm"),svt.forEach(t),JQo=r(oRe," \u2014 "),VX=n(oRe,"A",{href:!0});var lvt=s(VX);YQo=r(lvt,"XLMForTokenClassification"),lvt.forEach(t),KQo=r(oRe," (XLM model)"),oRe.forEach(t),ZQo=i(J),Pv=n(J,"LI",{});var rRe=s(Pv);xue=n(rRe,"STRONG",{});var ivt=s(xue);eHo=r(ivt,"xlm-roberta"),ivt.forEach(t),oHo=r(rRe," \u2014 "),XX=n(rRe,"A",{href:!0});var dvt=s(XX);rHo=r(dvt,"XLMRobertaForTokenClassification"),dvt.forEach(t),tHo=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),aHo=i(J),Bv=n(J,"LI",{});var tRe=s(Bv);$ue=n(tRe,"STRONG",{});var cvt=s($ue);nHo=r(cvt,"xlm-roberta-xl"),cvt.forEach(t),sHo=r(tRe," \u2014 "),zX=n(tRe,"A",{href:!0});var fvt=s(zX);lHo=r(fvt,"XLMRobertaXLForTokenClassification"),fvt.forEach(t),iHo=r(tRe," (XLM-RoBERTa-XL model)"),tRe.forEach(t),dHo=i(J),Iv=n(J,"LI",{});var aRe=s(Iv);kue=n(aRe,"STRONG",{});var mvt=s(kue);cHo=r(mvt,"xlnet"),mvt.forEach(t),fHo=r(aRe," \u2014 "),WX=n(aRe,"A",{href:!0});var gvt=s(WX);mHo=r(gvt,"XLNetForTokenClassification"),gvt.forEach(t),gHo=r(aRe," (XLNet model)"),aRe.forEach(t),hHo=i(J),Nv=n(J,"LI",{});var nRe=s(Nv);Sue=n(nRe,"STRONG",{});var hvt=s(Sue);pHo=r(hvt,"yoso"),hvt.forEach(t),uHo=r(nRe," \u2014 "),QX=n(nRe,"A",{href:!0});var pvt=s(QX);_Ho=r(pvt,"YosoForTokenClassification"),pvt.forEach(t),bHo=r(nRe," (YOSO model)"),nRe.forEach(t),J.forEach(t),vHo=i(ma),qv=n(ma,"P",{});var sRe=s(qv);FHo=r(sRe,"The model is set in evaluation mode by default using "),Rue=n(sRe,"CODE",{});var uvt=s(Rue);THo=r(uvt,"model.eval()"),uvt.forEach(t),MHo=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(sRe,"CODE",{});var _vt=s(Pue);EHo=r(_vt,"model.train()"),_vt.forEach(t),sRe.forEach(t),CHo=i(ma),T(jv.$$.fragment,ma),ma.forEach(t),al.forEach(t),RGe=i(f),ld=n(f,"H2",{class:!0});var jVe=s(ld);Dv=n(jVe,"A",{id:!0,class:!0,href:!0});var bvt=s(Dv);Bue=n(bvt,"SPAN",{});var vvt=s(Bue);T(Ny.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),wHo=i(jVe),Iue=n(jVe,"SPAN",{});var Fvt=s(Iue);AHo=r(Fvt,"AutoModelForQuestionAnswering"),Fvt.forEach(t),jVe.forEach(t),PGe=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(qy.$$.fragment,nl),LHo=i(nl),id=n(nl,"P",{});var _oe=s(id);yHo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HX=n(_oe,"A",{href:!0});var Tvt=s(HX);xHo=r(Tvt,"from_pretrained()"),Tvt.forEach(t),$Ho=r(_oe," class method or the "),UX=n(_oe,"A",{href:!0});var Mvt=s(UX);kHo=r(Mvt,"from_config()"),Mvt.forEach(t),SHo=r(_oe,` class
method.`),_oe.forEach(t),RHo=i(nl),jy=n(nl,"P",{});var DVe=s(jy);PHo=r(DVe,"This class cannot be instantiated directly using "),Nue=n(DVe,"CODE",{});var Evt=s(Nue);BHo=r(Evt,"__init__()"),Evt.forEach(t),IHo=r(DVe," (throws an error)."),DVe.forEach(t),NHo=i(nl),ht=n(nl,"DIV",{class:!0});var DA=s(ht);T(Dy.$$.fragment,DA),qHo=i(DA),que=n(DA,"P",{});var Cvt=s(que);jHo=r(Cvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cvt.forEach(t),DHo=i(DA),dd=n(DA,"P",{});var boe=s(dd);GHo=r(boe,`Note:
Loading a model from its configuration file does `),jue=n(boe,"STRONG",{});var wvt=s(jue);OHo=r(wvt,"not"),wvt.forEach(t),VHo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(boe,"A",{href:!0});var Avt=s(JX);XHo=r(Avt,"from_pretrained()"),Avt.forEach(t),zHo=r(boe," to load the model weights."),boe.forEach(t),WHo=i(DA),T(Gv.$$.fragment,DA),DA.forEach(t),QHo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(Gy.$$.fragment,ga),HHo=i(ga),Due=n(ga,"P",{});var Lvt=s(Due);UHo=r(Lvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lvt.forEach(t),JHo=i(ga),Ga=n(ga,"P",{});var GA=s(Ga);YHo=r(GA,"The model class to instantiate is selected based on the "),Gue=n(GA,"CODE",{});var yvt=s(Gue);KHo=r(yvt,"model_type"),yvt.forEach(t),ZHo=r(GA,` property of the config object (either
passed as an argument or loaded from `),Oue=n(GA,"CODE",{});var xvt=s(Oue);eUo=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),oUo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(GA,"CODE",{});var $vt=s(Vue);rUo=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),tUo=r(GA,":"),GA.forEach(t),aUo=i(ga),V=n(ga,"UL",{});var X=s(V);Ov=n(X,"LI",{});var lRe=s(Ov);Xue=n(lRe,"STRONG",{});var kvt=s(Xue);nUo=r(kvt,"albert"),kvt.forEach(t),sUo=r(lRe," \u2014 "),YX=n(lRe,"A",{href:!0});var Svt=s(YX);lUo=r(Svt,"AlbertForQuestionAnswering"),Svt.forEach(t),iUo=r(lRe," (ALBERT model)"),lRe.forEach(t),dUo=i(X),Vv=n(X,"LI",{});var iRe=s(Vv);zue=n(iRe,"STRONG",{});var Rvt=s(zue);cUo=r(Rvt,"bart"),Rvt.forEach(t),fUo=r(iRe," \u2014 "),KX=n(iRe,"A",{href:!0});var Pvt=s(KX);mUo=r(Pvt,"BartForQuestionAnswering"),Pvt.forEach(t),gUo=r(iRe," (BART model)"),iRe.forEach(t),hUo=i(X),Xv=n(X,"LI",{});var dRe=s(Xv);Wue=n(dRe,"STRONG",{});var Bvt=s(Wue);pUo=r(Bvt,"bert"),Bvt.forEach(t),uUo=r(dRe," \u2014 "),ZX=n(dRe,"A",{href:!0});var Ivt=s(ZX);_Uo=r(Ivt,"BertForQuestionAnswering"),Ivt.forEach(t),bUo=r(dRe," (BERT model)"),dRe.forEach(t),vUo=i(X),zv=n(X,"LI",{});var cRe=s(zv);Que=n(cRe,"STRONG",{});var Nvt=s(Que);FUo=r(Nvt,"big_bird"),Nvt.forEach(t),TUo=r(cRe," \u2014 "),ez=n(cRe,"A",{href:!0});var qvt=s(ez);MUo=r(qvt,"BigBirdForQuestionAnswering"),qvt.forEach(t),EUo=r(cRe," (BigBird model)"),cRe.forEach(t),CUo=i(X),Wv=n(X,"LI",{});var fRe=s(Wv);Hue=n(fRe,"STRONG",{});var jvt=s(Hue);wUo=r(jvt,"bigbird_pegasus"),jvt.forEach(t),AUo=r(fRe," \u2014 "),oz=n(fRe,"A",{href:!0});var Dvt=s(oz);LUo=r(Dvt,"BigBirdPegasusForQuestionAnswering"),Dvt.forEach(t),yUo=r(fRe," (BigBird-Pegasus model)"),fRe.forEach(t),xUo=i(X),Qv=n(X,"LI",{});var mRe=s(Qv);Uue=n(mRe,"STRONG",{});var Gvt=s(Uue);$Uo=r(Gvt,"camembert"),Gvt.forEach(t),kUo=r(mRe," \u2014 "),rz=n(mRe,"A",{href:!0});var Ovt=s(rz);SUo=r(Ovt,"CamembertForQuestionAnswering"),Ovt.forEach(t),RUo=r(mRe," (CamemBERT model)"),mRe.forEach(t),PUo=i(X),Hv=n(X,"LI",{});var gRe=s(Hv);Jue=n(gRe,"STRONG",{});var Vvt=s(Jue);BUo=r(Vvt,"canine"),Vvt.forEach(t),IUo=r(gRe," \u2014 "),tz=n(gRe,"A",{href:!0});var Xvt=s(tz);NUo=r(Xvt,"CanineForQuestionAnswering"),Xvt.forEach(t),qUo=r(gRe," (CANINE model)"),gRe.forEach(t),jUo=i(X),Uv=n(X,"LI",{});var hRe=s(Uv);Yue=n(hRe,"STRONG",{});var zvt=s(Yue);DUo=r(zvt,"convbert"),zvt.forEach(t),GUo=r(hRe," \u2014 "),az=n(hRe,"A",{href:!0});var Wvt=s(az);OUo=r(Wvt,"ConvBertForQuestionAnswering"),Wvt.forEach(t),VUo=r(hRe," (ConvBERT model)"),hRe.forEach(t),XUo=i(X),Jv=n(X,"LI",{});var pRe=s(Jv);Kue=n(pRe,"STRONG",{});var Qvt=s(Kue);zUo=r(Qvt,"data2vec-text"),Qvt.forEach(t),WUo=r(pRe," \u2014 "),nz=n(pRe,"A",{href:!0});var Hvt=s(nz);QUo=r(Hvt,"Data2VecTextForQuestionAnswering"),Hvt.forEach(t),HUo=r(pRe," (Data2VecText model)"),pRe.forEach(t),UUo=i(X),Yv=n(X,"LI",{});var uRe=s(Yv);Zue=n(uRe,"STRONG",{});var Uvt=s(Zue);JUo=r(Uvt,"deberta"),Uvt.forEach(t),YUo=r(uRe," \u2014 "),sz=n(uRe,"A",{href:!0});var Jvt=s(sz);KUo=r(Jvt,"DebertaForQuestionAnswering"),Jvt.forEach(t),ZUo=r(uRe," (DeBERTa model)"),uRe.forEach(t),eJo=i(X),Kv=n(X,"LI",{});var _Re=s(Kv);e_e=n(_Re,"STRONG",{});var Yvt=s(e_e);oJo=r(Yvt,"deberta-v2"),Yvt.forEach(t),rJo=r(_Re," \u2014 "),lz=n(_Re,"A",{href:!0});var Kvt=s(lz);tJo=r(Kvt,"DebertaV2ForQuestionAnswering"),Kvt.forEach(t),aJo=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),nJo=i(X),Zv=n(X,"LI",{});var bRe=s(Zv);o_e=n(bRe,"STRONG",{});var Zvt=s(o_e);sJo=r(Zvt,"distilbert"),Zvt.forEach(t),lJo=r(bRe," \u2014 "),iz=n(bRe,"A",{href:!0});var e0t=s(iz);iJo=r(e0t,"DistilBertForQuestionAnswering"),e0t.forEach(t),dJo=r(bRe," (DistilBERT model)"),bRe.forEach(t),cJo=i(X),e0=n(X,"LI",{});var vRe=s(e0);r_e=n(vRe,"STRONG",{});var o0t=s(r_e);fJo=r(o0t,"electra"),o0t.forEach(t),mJo=r(vRe," \u2014 "),dz=n(vRe,"A",{href:!0});var r0t=s(dz);gJo=r(r0t,"ElectraForQuestionAnswering"),r0t.forEach(t),hJo=r(vRe," (ELECTRA model)"),vRe.forEach(t),pJo=i(X),o0=n(X,"LI",{});var FRe=s(o0);t_e=n(FRe,"STRONG",{});var t0t=s(t_e);uJo=r(t0t,"flaubert"),t0t.forEach(t),_Jo=r(FRe," \u2014 "),cz=n(FRe,"A",{href:!0});var a0t=s(cz);bJo=r(a0t,"FlaubertForQuestionAnsweringSimple"),a0t.forEach(t),vJo=r(FRe," (FlauBERT model)"),FRe.forEach(t),FJo=i(X),r0=n(X,"LI",{});var TRe=s(r0);a_e=n(TRe,"STRONG",{});var n0t=s(a_e);TJo=r(n0t,"fnet"),n0t.forEach(t),MJo=r(TRe," \u2014 "),fz=n(TRe,"A",{href:!0});var s0t=s(fz);EJo=r(s0t,"FNetForQuestionAnswering"),s0t.forEach(t),CJo=r(TRe," (FNet model)"),TRe.forEach(t),wJo=i(X),t0=n(X,"LI",{});var MRe=s(t0);n_e=n(MRe,"STRONG",{});var l0t=s(n_e);AJo=r(l0t,"funnel"),l0t.forEach(t),LJo=r(MRe," \u2014 "),mz=n(MRe,"A",{href:!0});var i0t=s(mz);yJo=r(i0t,"FunnelForQuestionAnswering"),i0t.forEach(t),xJo=r(MRe," (Funnel Transformer model)"),MRe.forEach(t),$Jo=i(X),a0=n(X,"LI",{});var ERe=s(a0);s_e=n(ERe,"STRONG",{});var d0t=s(s_e);kJo=r(d0t,"gptj"),d0t.forEach(t),SJo=r(ERe," \u2014 "),gz=n(ERe,"A",{href:!0});var c0t=s(gz);RJo=r(c0t,"GPTJForQuestionAnswering"),c0t.forEach(t),PJo=r(ERe," (GPT-J model)"),ERe.forEach(t),BJo=i(X),n0=n(X,"LI",{});var CRe=s(n0);l_e=n(CRe,"STRONG",{});var f0t=s(l_e);IJo=r(f0t,"ibert"),f0t.forEach(t),NJo=r(CRe," \u2014 "),hz=n(CRe,"A",{href:!0});var m0t=s(hz);qJo=r(m0t,"IBertForQuestionAnswering"),m0t.forEach(t),jJo=r(CRe," (I-BERT model)"),CRe.forEach(t),DJo=i(X),s0=n(X,"LI",{});var wRe=s(s0);i_e=n(wRe,"STRONG",{});var g0t=s(i_e);GJo=r(g0t,"layoutlmv2"),g0t.forEach(t),OJo=r(wRe," \u2014 "),pz=n(wRe,"A",{href:!0});var h0t=s(pz);VJo=r(h0t,"LayoutLMv2ForQuestionAnswering"),h0t.forEach(t),XJo=r(wRe," (LayoutLMv2 model)"),wRe.forEach(t),zJo=i(X),l0=n(X,"LI",{});var ARe=s(l0);d_e=n(ARe,"STRONG",{});var p0t=s(d_e);WJo=r(p0t,"layoutlmv3"),p0t.forEach(t),QJo=r(ARe," \u2014 "),uz=n(ARe,"A",{href:!0});var u0t=s(uz);HJo=r(u0t,"LayoutLMv3ForQuestionAnswering"),u0t.forEach(t),UJo=r(ARe," (LayoutLMv3 model)"),ARe.forEach(t),JJo=i(X),i0=n(X,"LI",{});var LRe=s(i0);c_e=n(LRe,"STRONG",{});var _0t=s(c_e);YJo=r(_0t,"led"),_0t.forEach(t),KJo=r(LRe," \u2014 "),_z=n(LRe,"A",{href:!0});var b0t=s(_z);ZJo=r(b0t,"LEDForQuestionAnswering"),b0t.forEach(t),eYo=r(LRe," (LED model)"),LRe.forEach(t),oYo=i(X),d0=n(X,"LI",{});var yRe=s(d0);f_e=n(yRe,"STRONG",{});var v0t=s(f_e);rYo=r(v0t,"longformer"),v0t.forEach(t),tYo=r(yRe," \u2014 "),bz=n(yRe,"A",{href:!0});var F0t=s(bz);aYo=r(F0t,"LongformerForQuestionAnswering"),F0t.forEach(t),nYo=r(yRe," (Longformer model)"),yRe.forEach(t),sYo=i(X),c0=n(X,"LI",{});var xRe=s(c0);m_e=n(xRe,"STRONG",{});var T0t=s(m_e);lYo=r(T0t,"lxmert"),T0t.forEach(t),iYo=r(xRe," \u2014 "),vz=n(xRe,"A",{href:!0});var M0t=s(vz);dYo=r(M0t,"LxmertForQuestionAnswering"),M0t.forEach(t),cYo=r(xRe," (LXMERT model)"),xRe.forEach(t),fYo=i(X),f0=n(X,"LI",{});var $Re=s(f0);g_e=n($Re,"STRONG",{});var E0t=s(g_e);mYo=r(E0t,"mbart"),E0t.forEach(t),gYo=r($Re," \u2014 "),Fz=n($Re,"A",{href:!0});var C0t=s(Fz);hYo=r(C0t,"MBartForQuestionAnswering"),C0t.forEach(t),pYo=r($Re," (mBART model)"),$Re.forEach(t),uYo=i(X),m0=n(X,"LI",{});var kRe=s(m0);h_e=n(kRe,"STRONG",{});var w0t=s(h_e);_Yo=r(w0t,"megatron-bert"),w0t.forEach(t),bYo=r(kRe," \u2014 "),Tz=n(kRe,"A",{href:!0});var A0t=s(Tz);vYo=r(A0t,"MegatronBertForQuestionAnswering"),A0t.forEach(t),FYo=r(kRe," (Megatron-BERT model)"),kRe.forEach(t),TYo=i(X),g0=n(X,"LI",{});var SRe=s(g0);p_e=n(SRe,"STRONG",{});var L0t=s(p_e);MYo=r(L0t,"mobilebert"),L0t.forEach(t),EYo=r(SRe," \u2014 "),Mz=n(SRe,"A",{href:!0});var y0t=s(Mz);CYo=r(y0t,"MobileBertForQuestionAnswering"),y0t.forEach(t),wYo=r(SRe," (MobileBERT model)"),SRe.forEach(t),AYo=i(X),h0=n(X,"LI",{});var RRe=s(h0);u_e=n(RRe,"STRONG",{});var x0t=s(u_e);LYo=r(x0t,"mpnet"),x0t.forEach(t),yYo=r(RRe," \u2014 "),Ez=n(RRe,"A",{href:!0});var $0t=s(Ez);xYo=r($0t,"MPNetForQuestionAnswering"),$0t.forEach(t),$Yo=r(RRe," (MPNet model)"),RRe.forEach(t),kYo=i(X),p0=n(X,"LI",{});var PRe=s(p0);__e=n(PRe,"STRONG",{});var k0t=s(__e);SYo=r(k0t,"nystromformer"),k0t.forEach(t),RYo=r(PRe," \u2014 "),Cz=n(PRe,"A",{href:!0});var S0t=s(Cz);PYo=r(S0t,"NystromformerForQuestionAnswering"),S0t.forEach(t),BYo=r(PRe," (Nystr\xF6mformer model)"),PRe.forEach(t),IYo=i(X),u0=n(X,"LI",{});var BRe=s(u0);b_e=n(BRe,"STRONG",{});var R0t=s(b_e);NYo=r(R0t,"qdqbert"),R0t.forEach(t),qYo=r(BRe," \u2014 "),wz=n(BRe,"A",{href:!0});var P0t=s(wz);jYo=r(P0t,"QDQBertForQuestionAnswering"),P0t.forEach(t),DYo=r(BRe," (QDQBert model)"),BRe.forEach(t),GYo=i(X),_0=n(X,"LI",{});var IRe=s(_0);v_e=n(IRe,"STRONG",{});var B0t=s(v_e);OYo=r(B0t,"reformer"),B0t.forEach(t),VYo=r(IRe," \u2014 "),Az=n(IRe,"A",{href:!0});var I0t=s(Az);XYo=r(I0t,"ReformerForQuestionAnswering"),I0t.forEach(t),zYo=r(IRe," (Reformer model)"),IRe.forEach(t),WYo=i(X),b0=n(X,"LI",{});var NRe=s(b0);F_e=n(NRe,"STRONG",{});var N0t=s(F_e);QYo=r(N0t,"rembert"),N0t.forEach(t),HYo=r(NRe," \u2014 "),Lz=n(NRe,"A",{href:!0});var q0t=s(Lz);UYo=r(q0t,"RemBertForQuestionAnswering"),q0t.forEach(t),JYo=r(NRe," (RemBERT model)"),NRe.forEach(t),YYo=i(X),v0=n(X,"LI",{});var qRe=s(v0);T_e=n(qRe,"STRONG",{});var j0t=s(T_e);KYo=r(j0t,"roberta"),j0t.forEach(t),ZYo=r(qRe," \u2014 "),yz=n(qRe,"A",{href:!0});var D0t=s(yz);eKo=r(D0t,"RobertaForQuestionAnswering"),D0t.forEach(t),oKo=r(qRe," (RoBERTa model)"),qRe.forEach(t),rKo=i(X),F0=n(X,"LI",{});var jRe=s(F0);M_e=n(jRe,"STRONG",{});var G0t=s(M_e);tKo=r(G0t,"roformer"),G0t.forEach(t),aKo=r(jRe," \u2014 "),xz=n(jRe,"A",{href:!0});var O0t=s(xz);nKo=r(O0t,"RoFormerForQuestionAnswering"),O0t.forEach(t),sKo=r(jRe," (RoFormer model)"),jRe.forEach(t),lKo=i(X),T0=n(X,"LI",{});var DRe=s(T0);E_e=n(DRe,"STRONG",{});var V0t=s(E_e);iKo=r(V0t,"splinter"),V0t.forEach(t),dKo=r(DRe," \u2014 "),$z=n(DRe,"A",{href:!0});var X0t=s($z);cKo=r(X0t,"SplinterForQuestionAnswering"),X0t.forEach(t),fKo=r(DRe," (Splinter model)"),DRe.forEach(t),mKo=i(X),M0=n(X,"LI",{});var GRe=s(M0);C_e=n(GRe,"STRONG",{});var z0t=s(C_e);gKo=r(z0t,"squeezebert"),z0t.forEach(t),hKo=r(GRe," \u2014 "),kz=n(GRe,"A",{href:!0});var W0t=s(kz);pKo=r(W0t,"SqueezeBertForQuestionAnswering"),W0t.forEach(t),uKo=r(GRe," (SqueezeBERT model)"),GRe.forEach(t),_Ko=i(X),E0=n(X,"LI",{});var ORe=s(E0);w_e=n(ORe,"STRONG",{});var Q0t=s(w_e);bKo=r(Q0t,"xlm"),Q0t.forEach(t),vKo=r(ORe," \u2014 "),Sz=n(ORe,"A",{href:!0});var H0t=s(Sz);FKo=r(H0t,"XLMForQuestionAnsweringSimple"),H0t.forEach(t),TKo=r(ORe," (XLM model)"),ORe.forEach(t),MKo=i(X),C0=n(X,"LI",{});var VRe=s(C0);A_e=n(VRe,"STRONG",{});var U0t=s(A_e);EKo=r(U0t,"xlm-roberta"),U0t.forEach(t),CKo=r(VRe," \u2014 "),Rz=n(VRe,"A",{href:!0});var J0t=s(Rz);wKo=r(J0t,"XLMRobertaForQuestionAnswering"),J0t.forEach(t),AKo=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),LKo=i(X),w0=n(X,"LI",{});var XRe=s(w0);L_e=n(XRe,"STRONG",{});var Y0t=s(L_e);yKo=r(Y0t,"xlm-roberta-xl"),Y0t.forEach(t),xKo=r(XRe," \u2014 "),Pz=n(XRe,"A",{href:!0});var K0t=s(Pz);$Ko=r(K0t,"XLMRobertaXLForQuestionAnswering"),K0t.forEach(t),kKo=r(XRe," (XLM-RoBERTa-XL model)"),XRe.forEach(t),SKo=i(X),A0=n(X,"LI",{});var zRe=s(A0);y_e=n(zRe,"STRONG",{});var Z0t=s(y_e);RKo=r(Z0t,"xlnet"),Z0t.forEach(t),PKo=r(zRe," \u2014 "),Bz=n(zRe,"A",{href:!0});var eFt=s(Bz);BKo=r(eFt,"XLNetForQuestionAnsweringSimple"),eFt.forEach(t),IKo=r(zRe," (XLNet model)"),zRe.forEach(t),NKo=i(X),L0=n(X,"LI",{});var WRe=s(L0);x_e=n(WRe,"STRONG",{});var oFt=s(x_e);qKo=r(oFt,"yoso"),oFt.forEach(t),jKo=r(WRe," \u2014 "),Iz=n(WRe,"A",{href:!0});var rFt=s(Iz);DKo=r(rFt,"YosoForQuestionAnswering"),rFt.forEach(t),GKo=r(WRe," (YOSO model)"),WRe.forEach(t),X.forEach(t),OKo=i(ga),y0=n(ga,"P",{});var QRe=s(y0);VKo=r(QRe,"The model is set in evaluation mode by default using "),$_e=n(QRe,"CODE",{});var tFt=s($_e);XKo=r(tFt,"model.eval()"),tFt.forEach(t),zKo=r(QRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(QRe,"CODE",{});var aFt=s(k_e);WKo=r(aFt,"model.train()"),aFt.forEach(t),QRe.forEach(t),QKo=i(ga),T(x0.$$.fragment,ga),ga.forEach(t),nl.forEach(t),BGe=i(f),cd=n(f,"H2",{class:!0});var GVe=s(cd);$0=n(GVe,"A",{id:!0,class:!0,href:!0});var nFt=s($0);S_e=n(nFt,"SPAN",{});var sFt=s(S_e);T(Oy.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),HKo=i(GVe),R_e=n(GVe,"SPAN",{});var lFt=s(R_e);UKo=r(lFt,"AutoModelForTableQuestionAnswering"),lFt.forEach(t),GVe.forEach(t),IGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(Vy.$$.fragment,sl),JKo=i(sl),fd=n(sl,"P",{});var voe=s(fd);YKo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nz=n(voe,"A",{href:!0});var iFt=s(Nz);KKo=r(iFt,"from_pretrained()"),iFt.forEach(t),ZKo=r(voe," class method or the "),qz=n(voe,"A",{href:!0});var dFt=s(qz);eZo=r(dFt,"from_config()"),dFt.forEach(t),oZo=r(voe,` class
method.`),voe.forEach(t),rZo=i(sl),Xy=n(sl,"P",{});var OVe=s(Xy);tZo=r(OVe,"This class cannot be instantiated directly using "),P_e=n(OVe,"CODE",{});var cFt=s(P_e);aZo=r(cFt,"__init__()"),cFt.forEach(t),nZo=r(OVe," (throws an error)."),OVe.forEach(t),sZo=i(sl),pt=n(sl,"DIV",{class:!0});var OA=s(pt);T(zy.$$.fragment,OA),lZo=i(OA),B_e=n(OA,"P",{});var fFt=s(B_e);iZo=r(fFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fFt.forEach(t),dZo=i(OA),md=n(OA,"P",{});var Foe=s(md);cZo=r(Foe,`Note:
Loading a model from its configuration file does `),I_e=n(Foe,"STRONG",{});var mFt=s(I_e);fZo=r(mFt,"not"),mFt.forEach(t),mZo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(Foe,"A",{href:!0});var gFt=s(jz);gZo=r(gFt,"from_pretrained()"),gFt.forEach(t),hZo=r(Foe," to load the model weights."),Foe.forEach(t),pZo=i(OA),T(k0.$$.fragment,OA),OA.forEach(t),uZo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(Wy.$$.fragment,ha),_Zo=i(ha),N_e=n(ha,"P",{});var hFt=s(N_e);bZo=r(hFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hFt.forEach(t),vZo=i(ha),Oa=n(ha,"P",{});var VA=s(Oa);FZo=r(VA,"The model class to instantiate is selected based on the "),q_e=n(VA,"CODE",{});var pFt=s(q_e);TZo=r(pFt,"model_type"),pFt.forEach(t),MZo=r(VA,` property of the config object (either
passed as an argument or loaded from `),j_e=n(VA,"CODE",{});var uFt=s(j_e);EZo=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),CZo=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(VA,"CODE",{});var _Ft=s(D_e);wZo=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),AZo=r(VA,":"),VA.forEach(t),LZo=i(ha),G_e=n(ha,"UL",{});var bFt=s(G_e);S0=n(bFt,"LI",{});var HRe=s(S0);O_e=n(HRe,"STRONG",{});var vFt=s(O_e);yZo=r(vFt,"tapas"),vFt.forEach(t),xZo=r(HRe," \u2014 "),Dz=n(HRe,"A",{href:!0});var FFt=s(Dz);$Zo=r(FFt,"TapasForQuestionAnswering"),FFt.forEach(t),kZo=r(HRe," (TAPAS model)"),HRe.forEach(t),bFt.forEach(t),SZo=i(ha),R0=n(ha,"P",{});var URe=s(R0);RZo=r(URe,"The model is set in evaluation mode by default using "),V_e=n(URe,"CODE",{});var TFt=s(V_e);PZo=r(TFt,"model.eval()"),TFt.forEach(t),BZo=r(URe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(URe,"CODE",{});var MFt=s(X_e);IZo=r(MFt,"model.train()"),MFt.forEach(t),URe.forEach(t),NZo=i(ha),T(P0.$$.fragment,ha),ha.forEach(t),sl.forEach(t),NGe=i(f),gd=n(f,"H2",{class:!0});var VVe=s(gd);B0=n(VVe,"A",{id:!0,class:!0,href:!0});var EFt=s(B0);z_e=n(EFt,"SPAN",{});var CFt=s(z_e);T(Qy.$$.fragment,CFt),CFt.forEach(t),EFt.forEach(t),qZo=i(VVe),W_e=n(VVe,"SPAN",{});var wFt=s(W_e);jZo=r(wFt,"AutoModelForImageClassification"),wFt.forEach(t),VVe.forEach(t),qGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(Hy.$$.fragment,ll),DZo=i(ll),hd=n(ll,"P",{});var Toe=s(hd);GZo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gz=n(Toe,"A",{href:!0});var AFt=s(Gz);OZo=r(AFt,"from_pretrained()"),AFt.forEach(t),VZo=r(Toe," class method or the "),Oz=n(Toe,"A",{href:!0});var LFt=s(Oz);XZo=r(LFt,"from_config()"),LFt.forEach(t),zZo=r(Toe,` class
method.`),Toe.forEach(t),WZo=i(ll),Uy=n(ll,"P",{});var XVe=s(Uy);QZo=r(XVe,"This class cannot be instantiated directly using "),Q_e=n(XVe,"CODE",{});var yFt=s(Q_e);HZo=r(yFt,"__init__()"),yFt.forEach(t),UZo=r(XVe," (throws an error)."),XVe.forEach(t),JZo=i(ll),ut=n(ll,"DIV",{class:!0});var XA=s(ut);T(Jy.$$.fragment,XA),YZo=i(XA),H_e=n(XA,"P",{});var xFt=s(H_e);KZo=r(xFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xFt.forEach(t),ZZo=i(XA),pd=n(XA,"P",{});var Moe=s(pd);eer=r(Moe,`Note:
Loading a model from its configuration file does `),U_e=n(Moe,"STRONG",{});var $Ft=s(U_e);oer=r($Ft,"not"),$Ft.forEach(t),rer=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(Moe,"A",{href:!0});var kFt=s(Vz);ter=r(kFt,"from_pretrained()"),kFt.forEach(t),aer=r(Moe," to load the model weights."),Moe.forEach(t),ner=i(XA),T(I0.$$.fragment,XA),XA.forEach(t),ser=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(Yy.$$.fragment,pa),ler=i(pa),J_e=n(pa,"P",{});var SFt=s(J_e);ier=r(SFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SFt.forEach(t),der=i(pa),Va=n(pa,"P",{});var zA=s(Va);cer=r(zA,"The model class to instantiate is selected based on the "),Y_e=n(zA,"CODE",{});var RFt=s(Y_e);fer=r(RFt,"model_type"),RFt.forEach(t),mer=r(zA,` property of the config object (either
passed as an argument or loaded from `),K_e=n(zA,"CODE",{});var PFt=s(K_e);ger=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),her=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(zA,"CODE",{});var BFt=s(Z_e);per=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),uer=r(zA,":"),zA.forEach(t),_er=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);N0=n(Te,"LI",{});var JRe=s(N0);e7e=n(JRe,"STRONG",{});var IFt=s(e7e);ber=r(IFt,"beit"),IFt.forEach(t),ver=r(JRe," \u2014 "),Xz=n(JRe,"A",{href:!0});var NFt=s(Xz);Fer=r(NFt,"BeitForImageClassification"),NFt.forEach(t),Ter=r(JRe," (BEiT model)"),JRe.forEach(t),Mer=i(Te),q0=n(Te,"LI",{});var YRe=s(q0);o7e=n(YRe,"STRONG",{});var qFt=s(o7e);Eer=r(qFt,"convnext"),qFt.forEach(t),Cer=r(YRe," \u2014 "),zz=n(YRe,"A",{href:!0});var jFt=s(zz);wer=r(jFt,"ConvNextForImageClassification"),jFt.forEach(t),Aer=r(YRe," (ConvNeXT model)"),YRe.forEach(t),Ler=i(Te),j0=n(Te,"LI",{});var KRe=s(j0);r7e=n(KRe,"STRONG",{});var DFt=s(r7e);yer=r(DFt,"cvt"),DFt.forEach(t),xer=r(KRe," \u2014 "),Wz=n(KRe,"A",{href:!0});var GFt=s(Wz);$er=r(GFt,"CvtForImageClassification"),GFt.forEach(t),ker=r(KRe," (CvT model)"),KRe.forEach(t),Ser=i(Te),D0=n(Te,"LI",{});var ZRe=s(D0);t7e=n(ZRe,"STRONG",{});var OFt=s(t7e);Rer=r(OFt,"data2vec-vision"),OFt.forEach(t),Per=r(ZRe," \u2014 "),Qz=n(ZRe,"A",{href:!0});var VFt=s(Qz);Ber=r(VFt,"Data2VecVisionForImageClassification"),VFt.forEach(t),Ier=r(ZRe," (Data2VecVision model)"),ZRe.forEach(t),Ner=i(Te),Os=n(Te,"LI",{});var Vk=s(Os);a7e=n(Vk,"STRONG",{});var XFt=s(a7e);qer=r(XFt,"deit"),XFt.forEach(t),jer=r(Vk," \u2014 "),Hz=n(Vk,"A",{href:!0});var zFt=s(Hz);Der=r(zFt,"DeiTForImageClassification"),zFt.forEach(t),Ger=r(Vk," or "),Uz=n(Vk,"A",{href:!0});var WFt=s(Uz);Oer=r(WFt,"DeiTForImageClassificationWithTeacher"),WFt.forEach(t),Ver=r(Vk," (DeiT model)"),Vk.forEach(t),Xer=i(Te),G0=n(Te,"LI",{});var ePe=s(G0);n7e=n(ePe,"STRONG",{});var QFt=s(n7e);zer=r(QFt,"imagegpt"),QFt.forEach(t),Wer=r(ePe," \u2014 "),Jz=n(ePe,"A",{href:!0});var HFt=s(Jz);Qer=r(HFt,"ImageGPTForImageClassification"),HFt.forEach(t),Her=r(ePe," (ImageGPT model)"),ePe.forEach(t),Uer=i(Te),Vs=n(Te,"LI",{});var Xk=s(Vs);s7e=n(Xk,"STRONG",{});var UFt=s(s7e);Jer=r(UFt,"levit"),UFt.forEach(t),Yer=r(Xk," \u2014 "),Yz=n(Xk,"A",{href:!0});var JFt=s(Yz);Ker=r(JFt,"LevitForImageClassification"),JFt.forEach(t),Zer=r(Xk," or "),Kz=n(Xk,"A",{href:!0});var YFt=s(Kz);eor=r(YFt,"LevitForImageClassificationWithTeacher"),YFt.forEach(t),oor=r(Xk," (LeViT model)"),Xk.forEach(t),ror=i(Te),_t=n(Te,"LI",{});var Af=s(_t);l7e=n(Af,"STRONG",{});var KFt=s(l7e);tor=r(KFt,"perceiver"),KFt.forEach(t),aor=r(Af," \u2014 "),Zz=n(Af,"A",{href:!0});var ZFt=s(Zz);nor=r(ZFt,"PerceiverForImageClassificationLearned"),ZFt.forEach(t),sor=r(Af," or "),eW=n(Af,"A",{href:!0});var eTt=s(eW);lor=r(eTt,"PerceiverForImageClassificationFourier"),eTt.forEach(t),ior=r(Af," or "),oW=n(Af,"A",{href:!0});var oTt=s(oW);dor=r(oTt,"PerceiverForImageClassificationConvProcessing"),oTt.forEach(t),cor=r(Af," (Perceiver model)"),Af.forEach(t),mor=i(Te),O0=n(Te,"LI",{});var oPe=s(O0);i7e=n(oPe,"STRONG",{});var rTt=s(i7e);gor=r(rTt,"poolformer"),rTt.forEach(t),hor=r(oPe," \u2014 "),rW=n(oPe,"A",{href:!0});var tTt=s(rW);por=r(tTt,"PoolFormerForImageClassification"),tTt.forEach(t),uor=r(oPe," (PoolFormer model)"),oPe.forEach(t),_or=i(Te),V0=n(Te,"LI",{});var rPe=s(V0);d7e=n(rPe,"STRONG",{});var aTt=s(d7e);bor=r(aTt,"regnet"),aTt.forEach(t),vor=r(rPe," \u2014 "),tW=n(rPe,"A",{href:!0});var nTt=s(tW);For=r(nTt,"RegNetForImageClassification"),nTt.forEach(t),Tor=r(rPe," (RegNet model)"),rPe.forEach(t),Mor=i(Te),X0=n(Te,"LI",{});var tPe=s(X0);c7e=n(tPe,"STRONG",{});var sTt=s(c7e);Eor=r(sTt,"resnet"),sTt.forEach(t),Cor=r(tPe," \u2014 "),aW=n(tPe,"A",{href:!0});var lTt=s(aW);wor=r(lTt,"ResNetForImageClassification"),lTt.forEach(t),Aor=r(tPe," (ResNet model)"),tPe.forEach(t),Lor=i(Te),z0=n(Te,"LI",{});var aPe=s(z0);f7e=n(aPe,"STRONG",{});var iTt=s(f7e);yor=r(iTt,"segformer"),iTt.forEach(t),xor=r(aPe," \u2014 "),nW=n(aPe,"A",{href:!0});var dTt=s(nW);$or=r(dTt,"SegformerForImageClassification"),dTt.forEach(t),kor=r(aPe," (SegFormer model)"),aPe.forEach(t),Sor=i(Te),W0=n(Te,"LI",{});var nPe=s(W0);m7e=n(nPe,"STRONG",{});var cTt=s(m7e);Ror=r(cTt,"swin"),cTt.forEach(t),Por=r(nPe," \u2014 "),sW=n(nPe,"A",{href:!0});var fTt=s(sW);Bor=r(fTt,"SwinForImageClassification"),fTt.forEach(t),Ior=r(nPe," (Swin Transformer model)"),nPe.forEach(t),Nor=i(Te),Q0=n(Te,"LI",{});var sPe=s(Q0);g7e=n(sPe,"STRONG",{});var mTt=s(g7e);qor=r(mTt,"van"),mTt.forEach(t),jor=r(sPe," \u2014 "),lW=n(sPe,"A",{href:!0});var gTt=s(lW);Dor=r(gTt,"VanForImageClassification"),gTt.forEach(t),Gor=r(sPe," (VAN model)"),sPe.forEach(t),Oor=i(Te),H0=n(Te,"LI",{});var lPe=s(H0);h7e=n(lPe,"STRONG",{});var hTt=s(h7e);Vor=r(hTt,"vit"),hTt.forEach(t),Xor=r(lPe," \u2014 "),iW=n(lPe,"A",{href:!0});var pTt=s(iW);zor=r(pTt,"ViTForImageClassification"),pTt.forEach(t),Wor=r(lPe," (ViT model)"),lPe.forEach(t),Te.forEach(t),Qor=i(pa),U0=n(pa,"P",{});var iPe=s(U0);Hor=r(iPe,"The model is set in evaluation mode by default using "),p7e=n(iPe,"CODE",{});var uTt=s(p7e);Uor=r(uTt,"model.eval()"),uTt.forEach(t),Jor=r(iPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=n(iPe,"CODE",{});var _Tt=s(u7e);Yor=r(_Tt,"model.train()"),_Tt.forEach(t),iPe.forEach(t),Kor=i(pa),T(J0.$$.fragment,pa),pa.forEach(t),ll.forEach(t),jGe=i(f),ud=n(f,"H2",{class:!0});var zVe=s(ud);Y0=n(zVe,"A",{id:!0,class:!0,href:!0});var bTt=s(Y0);_7e=n(bTt,"SPAN",{});var vTt=s(_7e);T(Ky.$$.fragment,vTt),vTt.forEach(t),bTt.forEach(t),Zor=i(zVe),b7e=n(zVe,"SPAN",{});var FTt=s(b7e);err=r(FTt,"AutoModelForVision2Seq"),FTt.forEach(t),zVe.forEach(t),DGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(Zy.$$.fragment,il),orr=i(il),_d=n(il,"P",{});var Eoe=s(_d);rrr=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dW=n(Eoe,"A",{href:!0});var TTt=s(dW);trr=r(TTt,"from_pretrained()"),TTt.forEach(t),arr=r(Eoe," class method or the "),cW=n(Eoe,"A",{href:!0});var MTt=s(cW);nrr=r(MTt,"from_config()"),MTt.forEach(t),srr=r(Eoe,` class
method.`),Eoe.forEach(t),lrr=i(il),e8=n(il,"P",{});var WVe=s(e8);irr=r(WVe,"This class cannot be instantiated directly using "),v7e=n(WVe,"CODE",{});var ETt=s(v7e);drr=r(ETt,"__init__()"),ETt.forEach(t),crr=r(WVe," (throws an error)."),WVe.forEach(t),frr=i(il),bt=n(il,"DIV",{class:!0});var WA=s(bt);T(o8.$$.fragment,WA),mrr=i(WA),F7e=n(WA,"P",{});var CTt=s(F7e);grr=r(CTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CTt.forEach(t),hrr=i(WA),bd=n(WA,"P",{});var Coe=s(bd);prr=r(Coe,`Note:
Loading a model from its configuration file does `),T7e=n(Coe,"STRONG",{});var wTt=s(T7e);urr=r(wTt,"not"),wTt.forEach(t),_rr=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(Coe,"A",{href:!0});var ATt=s(fW);brr=r(ATt,"from_pretrained()"),ATt.forEach(t),vrr=r(Coe," to load the model weights."),Coe.forEach(t),Frr=i(WA),T(K0.$$.fragment,WA),WA.forEach(t),Trr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(r8.$$.fragment,ua),Mrr=i(ua),M7e=n(ua,"P",{});var LTt=s(M7e);Err=r(LTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LTt.forEach(t),Crr=i(ua),Xa=n(ua,"P",{});var QA=s(Xa);wrr=r(QA,"The model class to instantiate is selected based on the "),E7e=n(QA,"CODE",{});var yTt=s(E7e);Arr=r(yTt,"model_type"),yTt.forEach(t),Lrr=r(QA,` property of the config object (either
passed as an argument or loaded from `),C7e=n(QA,"CODE",{});var xTt=s(C7e);yrr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),xrr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(QA,"CODE",{});var $Tt=s(w7e);$rr=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),krr=r(QA,":"),QA.forEach(t),Srr=i(ua),A7e=n(ua,"UL",{});var kTt=s(A7e);Z0=n(kTt,"LI",{});var dPe=s(Z0);L7e=n(dPe,"STRONG",{});var STt=s(L7e);Rrr=r(STt,"vision-encoder-decoder"),STt.forEach(t),Prr=r(dPe," \u2014 "),mW=n(dPe,"A",{href:!0});var RTt=s(mW);Brr=r(RTt,"VisionEncoderDecoderModel"),RTt.forEach(t),Irr=r(dPe," (Vision Encoder decoder model)"),dPe.forEach(t),kTt.forEach(t),Nrr=i(ua),eF=n(ua,"P",{});var cPe=s(eF);qrr=r(cPe,"The model is set in evaluation mode by default using "),y7e=n(cPe,"CODE",{});var PTt=s(y7e);jrr=r(PTt,"model.eval()"),PTt.forEach(t),Drr=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x7e=n(cPe,"CODE",{});var BTt=s(x7e);Grr=r(BTt,"model.train()"),BTt.forEach(t),cPe.forEach(t),Orr=i(ua),T(oF.$$.fragment,ua),ua.forEach(t),il.forEach(t),GGe=i(f),vd=n(f,"H2",{class:!0});var QVe=s(vd);rF=n(QVe,"A",{id:!0,class:!0,href:!0});var ITt=s(rF);$7e=n(ITt,"SPAN",{});var NTt=s($7e);T(t8.$$.fragment,NTt),NTt.forEach(t),ITt.forEach(t),Vrr=i(QVe),k7e=n(QVe,"SPAN",{});var qTt=s(k7e);Xrr=r(qTt,"AutoModelForVisualQuestionAnswering"),qTt.forEach(t),QVe.forEach(t),OGe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(a8.$$.fragment,dl),zrr=i(dl),Fd=n(dl,"P",{});var woe=s(Fd);Wrr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),gW=n(woe,"A",{href:!0});var jTt=s(gW);Qrr=r(jTt,"from_pretrained()"),jTt.forEach(t),Hrr=r(woe," class method or the "),hW=n(woe,"A",{href:!0});var DTt=s(hW);Urr=r(DTt,"from_config()"),DTt.forEach(t),Jrr=r(woe,` class
method.`),woe.forEach(t),Yrr=i(dl),n8=n(dl,"P",{});var HVe=s(n8);Krr=r(HVe,"This class cannot be instantiated directly using "),S7e=n(HVe,"CODE",{});var GTt=s(S7e);Zrr=r(GTt,"__init__()"),GTt.forEach(t),etr=r(HVe," (throws an error)."),HVe.forEach(t),otr=i(dl),vt=n(dl,"DIV",{class:!0});var HA=s(vt);T(s8.$$.fragment,HA),rtr=i(HA),R7e=n(HA,"P",{});var OTt=s(R7e);ttr=r(OTt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),OTt.forEach(t),atr=i(HA),Td=n(HA,"P",{});var Aoe=s(Td);ntr=r(Aoe,`Note:
Loading a model from its configuration file does `),P7e=n(Aoe,"STRONG",{});var VTt=s(P7e);str=r(VTt,"not"),VTt.forEach(t),ltr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Aoe,"A",{href:!0});var XTt=s(pW);itr=r(XTt,"from_pretrained()"),XTt.forEach(t),dtr=r(Aoe," to load the model weights."),Aoe.forEach(t),ctr=i(HA),T(tF.$$.fragment,HA),HA.forEach(t),ftr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(l8.$$.fragment,_a),mtr=i(_a),B7e=n(_a,"P",{});var zTt=s(B7e);gtr=r(zTt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),zTt.forEach(t),htr=i(_a),za=n(_a,"P",{});var UA=s(za);ptr=r(UA,"The model class to instantiate is selected based on the "),I7e=n(UA,"CODE",{});var WTt=s(I7e);utr=r(WTt,"model_type"),WTt.forEach(t),_tr=r(UA,` property of the config object (either
passed as an argument or loaded from `),N7e=n(UA,"CODE",{});var QTt=s(N7e);btr=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),vtr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(UA,"CODE",{});var HTt=s(q7e);Ftr=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),Ttr=r(UA,":"),UA.forEach(t),Mtr=i(_a),j7e=n(_a,"UL",{});var UTt=s(j7e);aF=n(UTt,"LI",{});var fPe=s(aF);D7e=n(fPe,"STRONG",{});var JTt=s(D7e);Etr=r(JTt,"vilt"),JTt.forEach(t),Ctr=r(fPe," \u2014 "),uW=n(fPe,"A",{href:!0});var YTt=s(uW);wtr=r(YTt,"ViltForQuestionAnswering"),YTt.forEach(t),Atr=r(fPe," (ViLT model)"),fPe.forEach(t),UTt.forEach(t),Ltr=i(_a),nF=n(_a,"P",{});var mPe=s(nF);ytr=r(mPe,"The model is set in evaluation mode by default using "),G7e=n(mPe,"CODE",{});var KTt=s(G7e);xtr=r(KTt,"model.eval()"),KTt.forEach(t),$tr=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O7e=n(mPe,"CODE",{});var ZTt=s(O7e);ktr=r(ZTt,"model.train()"),ZTt.forEach(t),mPe.forEach(t),Str=i(_a),T(sF.$$.fragment,_a),_a.forEach(t),dl.forEach(t),VGe=i(f),Md=n(f,"H2",{class:!0});var UVe=s(Md);lF=n(UVe,"A",{id:!0,class:!0,href:!0});var eMt=s(lF);V7e=n(eMt,"SPAN",{});var oMt=s(V7e);T(i8.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),Rtr=i(UVe),X7e=n(UVe,"SPAN",{});var rMt=s(X7e);Ptr=r(rMt,"AutoModelForAudioClassification"),rMt.forEach(t),UVe.forEach(t),XGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(d8.$$.fragment,cl),Btr=i(cl),Ed=n(cl,"P",{});var Loe=s(Ed);Itr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_W=n(Loe,"A",{href:!0});var tMt=s(_W);Ntr=r(tMt,"from_pretrained()"),tMt.forEach(t),qtr=r(Loe," class method or the "),bW=n(Loe,"A",{href:!0});var aMt=s(bW);jtr=r(aMt,"from_config()"),aMt.forEach(t),Dtr=r(Loe,` class
method.`),Loe.forEach(t),Gtr=i(cl),c8=n(cl,"P",{});var JVe=s(c8);Otr=r(JVe,"This class cannot be instantiated directly using "),z7e=n(JVe,"CODE",{});var nMt=s(z7e);Vtr=r(nMt,"__init__()"),nMt.forEach(t),Xtr=r(JVe," (throws an error)."),JVe.forEach(t),ztr=i(cl),Ft=n(cl,"DIV",{class:!0});var JA=s(Ft);T(f8.$$.fragment,JA),Wtr=i(JA),W7e=n(JA,"P",{});var sMt=s(W7e);Qtr=r(sMt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sMt.forEach(t),Htr=i(JA),Cd=n(JA,"P",{});var yoe=s(Cd);Utr=r(yoe,`Note:
Loading a model from its configuration file does `),Q7e=n(yoe,"STRONG",{});var lMt=s(Q7e);Jtr=r(lMt,"not"),lMt.forEach(t),Ytr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(yoe,"A",{href:!0});var iMt=s(vW);Ktr=r(iMt,"from_pretrained()"),iMt.forEach(t),Ztr=r(yoe," to load the model weights."),yoe.forEach(t),ear=i(JA),T(iF.$$.fragment,JA),JA.forEach(t),oar=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(m8.$$.fragment,ba),rar=i(ba),H7e=n(ba,"P",{});var dMt=s(H7e);tar=r(dMt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dMt.forEach(t),aar=i(ba),Wa=n(ba,"P",{});var YA=s(Wa);nar=r(YA,"The model class to instantiate is selected based on the "),U7e=n(YA,"CODE",{});var cMt=s(U7e);sar=r(cMt,"model_type"),cMt.forEach(t),lar=r(YA,` property of the config object (either
passed as an argument or loaded from `),J7e=n(YA,"CODE",{});var fMt=s(J7e);iar=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),dar=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(YA,"CODE",{});var mMt=s(Y7e);car=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),far=r(YA,":"),YA.forEach(t),mar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);dF=n(ze,"LI",{});var gPe=s(dF);K7e=n(gPe,"STRONG",{});var gMt=s(K7e);gar=r(gMt,"data2vec-audio"),gMt.forEach(t),har=r(gPe," \u2014 "),FW=n(gPe,"A",{href:!0});var hMt=s(FW);par=r(hMt,"Data2VecAudioForSequenceClassification"),hMt.forEach(t),uar=r(gPe," (Data2VecAudio model)"),gPe.forEach(t),_ar=i(ze),cF=n(ze,"LI",{});var hPe=s(cF);Z7e=n(hPe,"STRONG",{});var pMt=s(Z7e);bar=r(pMt,"hubert"),pMt.forEach(t),Far=r(hPe," \u2014 "),TW=n(hPe,"A",{href:!0});var uMt=s(TW);Tar=r(uMt,"HubertForSequenceClassification"),uMt.forEach(t),Mar=r(hPe," (Hubert model)"),hPe.forEach(t),Ear=i(ze),fF=n(ze,"LI",{});var pPe=s(fF);e1e=n(pPe,"STRONG",{});var _Mt=s(e1e);Car=r(_Mt,"sew"),_Mt.forEach(t),war=r(pPe," \u2014 "),MW=n(pPe,"A",{href:!0});var bMt=s(MW);Aar=r(bMt,"SEWForSequenceClassification"),bMt.forEach(t),Lar=r(pPe," (SEW model)"),pPe.forEach(t),yar=i(ze),mF=n(ze,"LI",{});var uPe=s(mF);o1e=n(uPe,"STRONG",{});var vMt=s(o1e);xar=r(vMt,"sew-d"),vMt.forEach(t),$ar=r(uPe," \u2014 "),EW=n(uPe,"A",{href:!0});var FMt=s(EW);kar=r(FMt,"SEWDForSequenceClassification"),FMt.forEach(t),Sar=r(uPe," (SEW-D model)"),uPe.forEach(t),Rar=i(ze),gF=n(ze,"LI",{});var _Pe=s(gF);r1e=n(_Pe,"STRONG",{});var TMt=s(r1e);Par=r(TMt,"unispeech"),TMt.forEach(t),Bar=r(_Pe," \u2014 "),CW=n(_Pe,"A",{href:!0});var MMt=s(CW);Iar=r(MMt,"UniSpeechForSequenceClassification"),MMt.forEach(t),Nar=r(_Pe," (UniSpeech model)"),_Pe.forEach(t),qar=i(ze),hF=n(ze,"LI",{});var bPe=s(hF);t1e=n(bPe,"STRONG",{});var EMt=s(t1e);jar=r(EMt,"unispeech-sat"),EMt.forEach(t),Dar=r(bPe," \u2014 "),wW=n(bPe,"A",{href:!0});var CMt=s(wW);Gar=r(CMt,"UniSpeechSatForSequenceClassification"),CMt.forEach(t),Oar=r(bPe," (UniSpeechSat model)"),bPe.forEach(t),Var=i(ze),pF=n(ze,"LI",{});var vPe=s(pF);a1e=n(vPe,"STRONG",{});var wMt=s(a1e);Xar=r(wMt,"wav2vec2"),wMt.forEach(t),zar=r(vPe," \u2014 "),AW=n(vPe,"A",{href:!0});var AMt=s(AW);War=r(AMt,"Wav2Vec2ForSequenceClassification"),AMt.forEach(t),Qar=r(vPe," (Wav2Vec2 model)"),vPe.forEach(t),Har=i(ze),uF=n(ze,"LI",{});var FPe=s(uF);n1e=n(FPe,"STRONG",{});var LMt=s(n1e);Uar=r(LMt,"wav2vec2-conformer"),LMt.forEach(t),Jar=r(FPe," \u2014 "),LW=n(FPe,"A",{href:!0});var yMt=s(LW);Yar=r(yMt,"Wav2Vec2ConformerForSequenceClassification"),yMt.forEach(t),Kar=r(FPe," (Wav2Vec2-Conformer model)"),FPe.forEach(t),Zar=i(ze),_F=n(ze,"LI",{});var TPe=s(_F);s1e=n(TPe,"STRONG",{});var xMt=s(s1e);enr=r(xMt,"wavlm"),xMt.forEach(t),onr=r(TPe," \u2014 "),yW=n(TPe,"A",{href:!0});var $Mt=s(yW);rnr=r($Mt,"WavLMForSequenceClassification"),$Mt.forEach(t),tnr=r(TPe," (WavLM model)"),TPe.forEach(t),ze.forEach(t),anr=i(ba),bF=n(ba,"P",{});var MPe=s(bF);nnr=r(MPe,"The model is set in evaluation mode by default using "),l1e=n(MPe,"CODE",{});var kMt=s(l1e);snr=r(kMt,"model.eval()"),kMt.forEach(t),lnr=r(MPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(MPe,"CODE",{});var SMt=s(i1e);inr=r(SMt,"model.train()"),SMt.forEach(t),MPe.forEach(t),dnr=i(ba),T(vF.$$.fragment,ba),ba.forEach(t),cl.forEach(t),zGe=i(f),wd=n(f,"H2",{class:!0});var YVe=s(wd);FF=n(YVe,"A",{id:!0,class:!0,href:!0});var RMt=s(FF);d1e=n(RMt,"SPAN",{});var PMt=s(d1e);T(g8.$$.fragment,PMt),PMt.forEach(t),RMt.forEach(t),cnr=i(YVe),c1e=n(YVe,"SPAN",{});var BMt=s(c1e);fnr=r(BMt,"AutoModelForAudioFrameClassification"),BMt.forEach(t),YVe.forEach(t),WGe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(h8.$$.fragment,fl),mnr=i(fl),Ad=n(fl,"P",{});var xoe=s(Ad);gnr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xW=n(xoe,"A",{href:!0});var IMt=s(xW);hnr=r(IMt,"from_pretrained()"),IMt.forEach(t),pnr=r(xoe," class method or the "),$W=n(xoe,"A",{href:!0});var NMt=s($W);unr=r(NMt,"from_config()"),NMt.forEach(t),_nr=r(xoe,` class
method.`),xoe.forEach(t),bnr=i(fl),p8=n(fl,"P",{});var KVe=s(p8);vnr=r(KVe,"This class cannot be instantiated directly using "),f1e=n(KVe,"CODE",{});var qMt=s(f1e);Fnr=r(qMt,"__init__()"),qMt.forEach(t),Tnr=r(KVe," (throws an error)."),KVe.forEach(t),Mnr=i(fl),Tt=n(fl,"DIV",{class:!0});var KA=s(Tt);T(u8.$$.fragment,KA),Enr=i(KA),m1e=n(KA,"P",{});var jMt=s(m1e);Cnr=r(jMt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jMt.forEach(t),wnr=i(KA),Ld=n(KA,"P",{});var $oe=s(Ld);Anr=r($oe,`Note:
Loading a model from its configuration file does `),g1e=n($oe,"STRONG",{});var DMt=s(g1e);Lnr=r(DMt,"not"),DMt.forEach(t),ynr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n($oe,"A",{href:!0});var GMt=s(kW);xnr=r(GMt,"from_pretrained()"),GMt.forEach(t),$nr=r($oe," to load the model weights."),$oe.forEach(t),knr=i(KA),T(TF.$$.fragment,KA),KA.forEach(t),Snr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(_8.$$.fragment,va),Rnr=i(va),h1e=n(va,"P",{});var OMt=s(h1e);Pnr=r(OMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OMt.forEach(t),Bnr=i(va),Qa=n(va,"P",{});var ZA=s(Qa);Inr=r(ZA,"The model class to instantiate is selected based on the "),p1e=n(ZA,"CODE",{});var VMt=s(p1e);Nnr=r(VMt,"model_type"),VMt.forEach(t),qnr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),u1e=n(ZA,"CODE",{});var XMt=s(u1e);jnr=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),Dnr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(ZA,"CODE",{});var zMt=s(_1e);Gnr=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),Onr=r(ZA,":"),ZA.forEach(t),Vnr=i(va),et=n(va,"UL",{});var ml=s(et);MF=n(ml,"LI",{});var EPe=s(MF);b1e=n(EPe,"STRONG",{});var WMt=s(b1e);Xnr=r(WMt,"data2vec-audio"),WMt.forEach(t),znr=r(EPe," \u2014 "),SW=n(EPe,"A",{href:!0});var QMt=s(SW);Wnr=r(QMt,"Data2VecAudioForAudioFrameClassification"),QMt.forEach(t),Qnr=r(EPe," (Data2VecAudio model)"),EPe.forEach(t),Hnr=i(ml),EF=n(ml,"LI",{});var CPe=s(EF);v1e=n(CPe,"STRONG",{});var HMt=s(v1e);Unr=r(HMt,"unispeech-sat"),HMt.forEach(t),Jnr=r(CPe," \u2014 "),RW=n(CPe,"A",{href:!0});var UMt=s(RW);Ynr=r(UMt,"UniSpeechSatForAudioFrameClassification"),UMt.forEach(t),Knr=r(CPe," (UniSpeechSat model)"),CPe.forEach(t),Znr=i(ml),CF=n(ml,"LI",{});var wPe=s(CF);F1e=n(wPe,"STRONG",{});var JMt=s(F1e);esr=r(JMt,"wav2vec2"),JMt.forEach(t),osr=r(wPe," \u2014 "),PW=n(wPe,"A",{href:!0});var YMt=s(PW);rsr=r(YMt,"Wav2Vec2ForAudioFrameClassification"),YMt.forEach(t),tsr=r(wPe," (Wav2Vec2 model)"),wPe.forEach(t),asr=i(ml),wF=n(ml,"LI",{});var APe=s(wF);T1e=n(APe,"STRONG",{});var KMt=s(T1e);nsr=r(KMt,"wav2vec2-conformer"),KMt.forEach(t),ssr=r(APe," \u2014 "),BW=n(APe,"A",{href:!0});var ZMt=s(BW);lsr=r(ZMt,"Wav2Vec2ConformerForAudioFrameClassification"),ZMt.forEach(t),isr=r(APe," (Wav2Vec2-Conformer model)"),APe.forEach(t),dsr=i(ml),AF=n(ml,"LI",{});var LPe=s(AF);M1e=n(LPe,"STRONG",{});var e4t=s(M1e);csr=r(e4t,"wavlm"),e4t.forEach(t),fsr=r(LPe," \u2014 "),IW=n(LPe,"A",{href:!0});var o4t=s(IW);msr=r(o4t,"WavLMForAudioFrameClassification"),o4t.forEach(t),gsr=r(LPe," (WavLM model)"),LPe.forEach(t),ml.forEach(t),hsr=i(va),LF=n(va,"P",{});var yPe=s(LF);psr=r(yPe,"The model is set in evaluation mode by default using "),E1e=n(yPe,"CODE",{});var r4t=s(E1e);usr=r(r4t,"model.eval()"),r4t.forEach(t),_sr=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(yPe,"CODE",{});var t4t=s(C1e);bsr=r(t4t,"model.train()"),t4t.forEach(t),yPe.forEach(t),vsr=i(va),T(yF.$$.fragment,va),va.forEach(t),fl.forEach(t),QGe=i(f),yd=n(f,"H2",{class:!0});var ZVe=s(yd);xF=n(ZVe,"A",{id:!0,class:!0,href:!0});var a4t=s(xF);w1e=n(a4t,"SPAN",{});var n4t=s(w1e);T(b8.$$.fragment,n4t),n4t.forEach(t),a4t.forEach(t),Fsr=i(ZVe),A1e=n(ZVe,"SPAN",{});var s4t=s(A1e);Tsr=r(s4t,"AutoModelForCTC"),s4t.forEach(t),ZVe.forEach(t),HGe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(v8.$$.fragment,gl),Msr=i(gl),xd=n(gl,"P",{});var koe=s(xd);Esr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NW=n(koe,"A",{href:!0});var l4t=s(NW);Csr=r(l4t,"from_pretrained()"),l4t.forEach(t),wsr=r(koe," class method or the "),qW=n(koe,"A",{href:!0});var i4t=s(qW);Asr=r(i4t,"from_config()"),i4t.forEach(t),Lsr=r(koe,` class
method.`),koe.forEach(t),ysr=i(gl),F8=n(gl,"P",{});var eXe=s(F8);xsr=r(eXe,"This class cannot be instantiated directly using "),L1e=n(eXe,"CODE",{});var d4t=s(L1e);$sr=r(d4t,"__init__()"),d4t.forEach(t),ksr=r(eXe," (throws an error)."),eXe.forEach(t),Ssr=i(gl),Mt=n(gl,"DIV",{class:!0});var e6=s(Mt);T(T8.$$.fragment,e6),Rsr=i(e6),y1e=n(e6,"P",{});var c4t=s(y1e);Psr=r(c4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),c4t.forEach(t),Bsr=i(e6),$d=n(e6,"P",{});var Soe=s($d);Isr=r(Soe,`Note:
Loading a model from its configuration file does `),x1e=n(Soe,"STRONG",{});var f4t=s(x1e);Nsr=r(f4t,"not"),f4t.forEach(t),qsr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Soe,"A",{href:!0});var m4t=s(jW);jsr=r(m4t,"from_pretrained()"),m4t.forEach(t),Dsr=r(Soe," to load the model weights."),Soe.forEach(t),Gsr=i(e6),T($F.$$.fragment,e6),e6.forEach(t),Osr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(M8.$$.fragment,Fa),Vsr=i(Fa),$1e=n(Fa,"P",{});var g4t=s($1e);Xsr=r(g4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),g4t.forEach(t),zsr=i(Fa),Ha=n(Fa,"P",{});var o6=s(Ha);Wsr=r(o6,"The model class to instantiate is selected based on the "),k1e=n(o6,"CODE",{});var h4t=s(k1e);Qsr=r(h4t,"model_type"),h4t.forEach(t),Hsr=r(o6,` property of the config object (either
passed as an argument or loaded from `),S1e=n(o6,"CODE",{});var p4t=s(S1e);Usr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),Jsr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(o6,"CODE",{});var u4t=s(R1e);Ysr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),Ksr=r(o6,":"),o6.forEach(t),Zsr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);kF=n(Be,"LI",{});var xPe=s(kF);P1e=n(xPe,"STRONG",{});var _4t=s(P1e);elr=r(_4t,"data2vec-audio"),_4t.forEach(t),olr=r(xPe," \u2014 "),DW=n(xPe,"A",{href:!0});var b4t=s(DW);rlr=r(b4t,"Data2VecAudioForCTC"),b4t.forEach(t),tlr=r(xPe," (Data2VecAudio model)"),xPe.forEach(t),alr=i(Be),SF=n(Be,"LI",{});var $Pe=s(SF);B1e=n($Pe,"STRONG",{});var v4t=s(B1e);nlr=r(v4t,"hubert"),v4t.forEach(t),slr=r($Pe," \u2014 "),GW=n($Pe,"A",{href:!0});var F4t=s(GW);llr=r(F4t,"HubertForCTC"),F4t.forEach(t),ilr=r($Pe," (Hubert model)"),$Pe.forEach(t),dlr=i(Be),RF=n(Be,"LI",{});var kPe=s(RF);I1e=n(kPe,"STRONG",{});var T4t=s(I1e);clr=r(T4t,"mctct"),T4t.forEach(t),flr=r(kPe," \u2014 "),OW=n(kPe,"A",{href:!0});var M4t=s(OW);mlr=r(M4t,"MCTCTForCTC"),M4t.forEach(t),glr=r(kPe," (M-CTC-T model)"),kPe.forEach(t),hlr=i(Be),PF=n(Be,"LI",{});var SPe=s(PF);N1e=n(SPe,"STRONG",{});var E4t=s(N1e);plr=r(E4t,"sew"),E4t.forEach(t),ulr=r(SPe," \u2014 "),VW=n(SPe,"A",{href:!0});var C4t=s(VW);_lr=r(C4t,"SEWForCTC"),C4t.forEach(t),blr=r(SPe," (SEW model)"),SPe.forEach(t),vlr=i(Be),BF=n(Be,"LI",{});var RPe=s(BF);q1e=n(RPe,"STRONG",{});var w4t=s(q1e);Flr=r(w4t,"sew-d"),w4t.forEach(t),Tlr=r(RPe," \u2014 "),XW=n(RPe,"A",{href:!0});var A4t=s(XW);Mlr=r(A4t,"SEWDForCTC"),A4t.forEach(t),Elr=r(RPe," (SEW-D model)"),RPe.forEach(t),Clr=i(Be),IF=n(Be,"LI",{});var PPe=s(IF);j1e=n(PPe,"STRONG",{});var L4t=s(j1e);wlr=r(L4t,"unispeech"),L4t.forEach(t),Alr=r(PPe," \u2014 "),zW=n(PPe,"A",{href:!0});var y4t=s(zW);Llr=r(y4t,"UniSpeechForCTC"),y4t.forEach(t),ylr=r(PPe," (UniSpeech model)"),PPe.forEach(t),xlr=i(Be),NF=n(Be,"LI",{});var BPe=s(NF);D1e=n(BPe,"STRONG",{});var x4t=s(D1e);$lr=r(x4t,"unispeech-sat"),x4t.forEach(t),klr=r(BPe," \u2014 "),WW=n(BPe,"A",{href:!0});var $4t=s(WW);Slr=r($4t,"UniSpeechSatForCTC"),$4t.forEach(t),Rlr=r(BPe," (UniSpeechSat model)"),BPe.forEach(t),Plr=i(Be),qF=n(Be,"LI",{});var IPe=s(qF);G1e=n(IPe,"STRONG",{});var k4t=s(G1e);Blr=r(k4t,"wav2vec2"),k4t.forEach(t),Ilr=r(IPe," \u2014 "),QW=n(IPe,"A",{href:!0});var S4t=s(QW);Nlr=r(S4t,"Wav2Vec2ForCTC"),S4t.forEach(t),qlr=r(IPe," (Wav2Vec2 model)"),IPe.forEach(t),jlr=i(Be),jF=n(Be,"LI",{});var NPe=s(jF);O1e=n(NPe,"STRONG",{});var R4t=s(O1e);Dlr=r(R4t,"wav2vec2-conformer"),R4t.forEach(t),Glr=r(NPe," \u2014 "),HW=n(NPe,"A",{href:!0});var P4t=s(HW);Olr=r(P4t,"Wav2Vec2ConformerForCTC"),P4t.forEach(t),Vlr=r(NPe," (Wav2Vec2-Conformer model)"),NPe.forEach(t),Xlr=i(Be),DF=n(Be,"LI",{});var qPe=s(DF);V1e=n(qPe,"STRONG",{});var B4t=s(V1e);zlr=r(B4t,"wavlm"),B4t.forEach(t),Wlr=r(qPe," \u2014 "),UW=n(qPe,"A",{href:!0});var I4t=s(UW);Qlr=r(I4t,"WavLMForCTC"),I4t.forEach(t),Hlr=r(qPe," (WavLM model)"),qPe.forEach(t),Be.forEach(t),Ulr=i(Fa),GF=n(Fa,"P",{});var jPe=s(GF);Jlr=r(jPe,"The model is set in evaluation mode by default using "),X1e=n(jPe,"CODE",{});var N4t=s(X1e);Ylr=r(N4t,"model.eval()"),N4t.forEach(t),Klr=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(jPe,"CODE",{});var q4t=s(z1e);Zlr=r(q4t,"model.train()"),q4t.forEach(t),jPe.forEach(t),eir=i(Fa),T(OF.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),UGe=i(f),kd=n(f,"H2",{class:!0});var oXe=s(kd);VF=n(oXe,"A",{id:!0,class:!0,href:!0});var j4t=s(VF);W1e=n(j4t,"SPAN",{});var D4t=s(W1e);T(E8.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),oir=i(oXe),Q1e=n(oXe,"SPAN",{});var G4t=s(Q1e);rir=r(G4t,"AutoModelForSpeechSeq2Seq"),G4t.forEach(t),oXe.forEach(t),JGe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(C8.$$.fragment,hl),tir=i(hl),Sd=n(hl,"P",{});var Roe=s(Sd);air=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JW=n(Roe,"A",{href:!0});var O4t=s(JW);nir=r(O4t,"from_pretrained()"),O4t.forEach(t),sir=r(Roe," class method or the "),YW=n(Roe,"A",{href:!0});var V4t=s(YW);lir=r(V4t,"from_config()"),V4t.forEach(t),iir=r(Roe,` class
method.`),Roe.forEach(t),dir=i(hl),w8=n(hl,"P",{});var rXe=s(w8);cir=r(rXe,"This class cannot be instantiated directly using "),H1e=n(rXe,"CODE",{});var X4t=s(H1e);fir=r(X4t,"__init__()"),X4t.forEach(t),mir=r(rXe," (throws an error)."),rXe.forEach(t),gir=i(hl),Et=n(hl,"DIV",{class:!0});var r6=s(Et);T(A8.$$.fragment,r6),hir=i(r6),U1e=n(r6,"P",{});var z4t=s(U1e);pir=r(z4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z4t.forEach(t),uir=i(r6),Rd=n(r6,"P",{});var Poe=s(Rd);_ir=r(Poe,`Note:
Loading a model from its configuration file does `),J1e=n(Poe,"STRONG",{});var W4t=s(J1e);bir=r(W4t,"not"),W4t.forEach(t),vir=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(Poe,"A",{href:!0});var Q4t=s(KW);Fir=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Tir=r(Poe," to load the model weights."),Poe.forEach(t),Mir=i(r6),T(XF.$$.fragment,r6),r6.forEach(t),Eir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(L8.$$.fragment,Ta),Cir=i(Ta),Y1e=n(Ta,"P",{});var H4t=s(Y1e);wir=r(H4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),H4t.forEach(t),Air=i(Ta),Ua=n(Ta,"P",{});var t6=s(Ua);Lir=r(t6,"The model class to instantiate is selected based on the "),K1e=n(t6,"CODE",{});var U4t=s(K1e);yir=r(U4t,"model_type"),U4t.forEach(t),xir=r(t6,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(t6,"CODE",{});var J4t=s(Z1e);$ir=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),kir=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(t6,"CODE",{});var Y4t=s(e2e);Sir=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),Rir=r(t6,":"),t6.forEach(t),Pir=i(Ta),y8=n(Ta,"UL",{});var tXe=s(y8);zF=n(tXe,"LI",{});var DPe=s(zF);o2e=n(DPe,"STRONG",{});var K4t=s(o2e);Bir=r(K4t,"speech-encoder-decoder"),K4t.forEach(t),Iir=r(DPe," \u2014 "),ZW=n(DPe,"A",{href:!0});var Z4t=s(ZW);Nir=r(Z4t,"SpeechEncoderDecoderModel"),Z4t.forEach(t),qir=r(DPe," (Speech Encoder decoder model)"),DPe.forEach(t),jir=i(tXe),WF=n(tXe,"LI",{});var GPe=s(WF);r2e=n(GPe,"STRONG",{});var eEt=s(r2e);Dir=r(eEt,"speech_to_text"),eEt.forEach(t),Gir=r(GPe," \u2014 "),eQ=n(GPe,"A",{href:!0});var oEt=s(eQ);Oir=r(oEt,"Speech2TextForConditionalGeneration"),oEt.forEach(t),Vir=r(GPe," (Speech2Text model)"),GPe.forEach(t),tXe.forEach(t),Xir=i(Ta),QF=n(Ta,"P",{});var OPe=s(QF);zir=r(OPe,"The model is set in evaluation mode by default using "),t2e=n(OPe,"CODE",{});var rEt=s(t2e);Wir=r(rEt,"model.eval()"),rEt.forEach(t),Qir=r(OPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(OPe,"CODE",{});var tEt=s(a2e);Hir=r(tEt,"model.train()"),tEt.forEach(t),OPe.forEach(t),Uir=i(Ta),T(HF.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),YGe=i(f),Pd=n(f,"H2",{class:!0});var aXe=s(Pd);UF=n(aXe,"A",{id:!0,class:!0,href:!0});var aEt=s(UF);n2e=n(aEt,"SPAN",{});var nEt=s(n2e);T(x8.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),Jir=i(aXe),s2e=n(aXe,"SPAN",{});var sEt=s(s2e);Yir=r(sEt,"AutoModelForAudioXVector"),sEt.forEach(t),aXe.forEach(t),KGe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T($8.$$.fragment,pl),Kir=i(pl),Bd=n(pl,"P",{});var Boe=s(Bd);Zir=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oQ=n(Boe,"A",{href:!0});var lEt=s(oQ);edr=r(lEt,"from_pretrained()"),lEt.forEach(t),odr=r(Boe," class method or the "),rQ=n(Boe,"A",{href:!0});var iEt=s(rQ);rdr=r(iEt,"from_config()"),iEt.forEach(t),tdr=r(Boe,` class
method.`),Boe.forEach(t),adr=i(pl),k8=n(pl,"P",{});var nXe=s(k8);ndr=r(nXe,"This class cannot be instantiated directly using "),l2e=n(nXe,"CODE",{});var dEt=s(l2e);sdr=r(dEt,"__init__()"),dEt.forEach(t),ldr=r(nXe," (throws an error)."),nXe.forEach(t),idr=i(pl),Ct=n(pl,"DIV",{class:!0});var a6=s(Ct);T(S8.$$.fragment,a6),ddr=i(a6),i2e=n(a6,"P",{});var cEt=s(i2e);cdr=r(cEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cEt.forEach(t),fdr=i(a6),Id=n(a6,"P",{});var Ioe=s(Id);mdr=r(Ioe,`Note:
Loading a model from its configuration file does `),d2e=n(Ioe,"STRONG",{});var fEt=s(d2e);gdr=r(fEt,"not"),fEt.forEach(t),hdr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(Ioe,"A",{href:!0});var mEt=s(tQ);pdr=r(mEt,"from_pretrained()"),mEt.forEach(t),udr=r(Ioe," to load the model weights."),Ioe.forEach(t),_dr=i(a6),T(JF.$$.fragment,a6),a6.forEach(t),bdr=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T(R8.$$.fragment,Ma),vdr=i(Ma),c2e=n(Ma,"P",{});var gEt=s(c2e);Fdr=r(gEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gEt.forEach(t),Tdr=i(Ma),Ja=n(Ma,"P",{});var n6=s(Ja);Mdr=r(n6,"The model class to instantiate is selected based on the "),f2e=n(n6,"CODE",{});var hEt=s(f2e);Edr=r(hEt,"model_type"),hEt.forEach(t),Cdr=r(n6,` property of the config object (either
passed as an argument or loaded from `),m2e=n(n6,"CODE",{});var pEt=s(m2e);wdr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),Adr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(n6,"CODE",{});var uEt=s(g2e);Ldr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),ydr=r(n6,":"),n6.forEach(t),xdr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);YF=n(ul,"LI",{});var VPe=s(YF);h2e=n(VPe,"STRONG",{});var _Et=s(h2e);$dr=r(_Et,"data2vec-audio"),_Et.forEach(t),kdr=r(VPe," \u2014 "),aQ=n(VPe,"A",{href:!0});var bEt=s(aQ);Sdr=r(bEt,"Data2VecAudioForXVector"),bEt.forEach(t),Rdr=r(VPe," (Data2VecAudio model)"),VPe.forEach(t),Pdr=i(ul),KF=n(ul,"LI",{});var XPe=s(KF);p2e=n(XPe,"STRONG",{});var vEt=s(p2e);Bdr=r(vEt,"unispeech-sat"),vEt.forEach(t),Idr=r(XPe," \u2014 "),nQ=n(XPe,"A",{href:!0});var FEt=s(nQ);Ndr=r(FEt,"UniSpeechSatForXVector"),FEt.forEach(t),qdr=r(XPe," (UniSpeechSat model)"),XPe.forEach(t),jdr=i(ul),ZF=n(ul,"LI",{});var zPe=s(ZF);u2e=n(zPe,"STRONG",{});var TEt=s(u2e);Ddr=r(TEt,"wav2vec2"),TEt.forEach(t),Gdr=r(zPe," \u2014 "),sQ=n(zPe,"A",{href:!0});var MEt=s(sQ);Odr=r(MEt,"Wav2Vec2ForXVector"),MEt.forEach(t),Vdr=r(zPe," (Wav2Vec2 model)"),zPe.forEach(t),Xdr=i(ul),eT=n(ul,"LI",{});var WPe=s(eT);_2e=n(WPe,"STRONG",{});var EEt=s(_2e);zdr=r(EEt,"wav2vec2-conformer"),EEt.forEach(t),Wdr=r(WPe," \u2014 "),lQ=n(WPe,"A",{href:!0});var CEt=s(lQ);Qdr=r(CEt,"Wav2Vec2ConformerForXVector"),CEt.forEach(t),Hdr=r(WPe," (Wav2Vec2-Conformer model)"),WPe.forEach(t),Udr=i(ul),oT=n(ul,"LI",{});var QPe=s(oT);b2e=n(QPe,"STRONG",{});var wEt=s(b2e);Jdr=r(wEt,"wavlm"),wEt.forEach(t),Ydr=r(QPe," \u2014 "),iQ=n(QPe,"A",{href:!0});var AEt=s(iQ);Kdr=r(AEt,"WavLMForXVector"),AEt.forEach(t),Zdr=r(QPe," (WavLM model)"),QPe.forEach(t),ul.forEach(t),ecr=i(Ma),rT=n(Ma,"P",{});var HPe=s(rT);ocr=r(HPe,"The model is set in evaluation mode by default using "),v2e=n(HPe,"CODE",{});var LEt=s(v2e);rcr=r(LEt,"model.eval()"),LEt.forEach(t),tcr=r(HPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(HPe,"CODE",{});var yEt=s(F2e);acr=r(yEt,"model.train()"),yEt.forEach(t),HPe.forEach(t),ncr=i(Ma),T(tT.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),ZGe=i(f),Nd=n(f,"H2",{class:!0});var sXe=s(Nd);aT=n(sXe,"A",{id:!0,class:!0,href:!0});var xEt=s(aT);T2e=n(xEt,"SPAN",{});var $Et=s(T2e);T(P8.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),scr=i(sXe),M2e=n(sXe,"SPAN",{});var kEt=s(M2e);lcr=r(kEt,"AutoModelForMaskedImageModeling"),kEt.forEach(t),sXe.forEach(t),eOe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(B8.$$.fragment,_l),icr=i(_l),qd=n(_l,"P",{});var Noe=s(qd);dcr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dQ=n(Noe,"A",{href:!0});var SEt=s(dQ);ccr=r(SEt,"from_pretrained()"),SEt.forEach(t),fcr=r(Noe," class method or the "),cQ=n(Noe,"A",{href:!0});var REt=s(cQ);mcr=r(REt,"from_config()"),REt.forEach(t),gcr=r(Noe,` class
method.`),Noe.forEach(t),hcr=i(_l),I8=n(_l,"P",{});var lXe=s(I8);pcr=r(lXe,"This class cannot be instantiated directly using "),E2e=n(lXe,"CODE",{});var PEt=s(E2e);ucr=r(PEt,"__init__()"),PEt.forEach(t),_cr=r(lXe," (throws an error)."),lXe.forEach(t),bcr=i(_l),wt=n(_l,"DIV",{class:!0});var s6=s(wt);T(N8.$$.fragment,s6),vcr=i(s6),C2e=n(s6,"P",{});var BEt=s(C2e);Fcr=r(BEt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),BEt.forEach(t),Tcr=i(s6),jd=n(s6,"P",{});var qoe=s(jd);Mcr=r(qoe,`Note:
Loading a model from its configuration file does `),w2e=n(qoe,"STRONG",{});var IEt=s(w2e);Ecr=r(IEt,"not"),IEt.forEach(t),Ccr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(qoe,"A",{href:!0});var NEt=s(fQ);wcr=r(NEt,"from_pretrained()"),NEt.forEach(t),Acr=r(qoe," to load the model weights."),qoe.forEach(t),Lcr=i(s6),T(nT.$$.fragment,s6),s6.forEach(t),ycr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(q8.$$.fragment,Ea),xcr=i(Ea),A2e=n(Ea,"P",{});var qEt=s(A2e);$cr=r(qEt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qEt.forEach(t),kcr=i(Ea),Ya=n(Ea,"P",{});var l6=s(Ya);Scr=r(l6,"The model class to instantiate is selected based on the "),L2e=n(l6,"CODE",{});var jEt=s(L2e);Rcr=r(jEt,"model_type"),jEt.forEach(t),Pcr=r(l6,` property of the config object (either
passed as an argument or loaded from `),y2e=n(l6,"CODE",{});var DEt=s(y2e);Bcr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),Icr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(l6,"CODE",{});var GEt=s(x2e);Ncr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),qcr=r(l6,":"),l6.forEach(t),jcr=i(Ea),Dd=n(Ea,"UL",{});var joe=s(Dd);sT=n(joe,"LI",{});var UPe=s(sT);$2e=n(UPe,"STRONG",{});var OEt=s($2e);Dcr=r(OEt,"deit"),OEt.forEach(t),Gcr=r(UPe," \u2014 "),mQ=n(UPe,"A",{href:!0});var VEt=s(mQ);Ocr=r(VEt,"DeiTForMaskedImageModeling"),VEt.forEach(t),Vcr=r(UPe," (DeiT model)"),UPe.forEach(t),Xcr=i(joe),lT=n(joe,"LI",{});var JPe=s(lT);k2e=n(JPe,"STRONG",{});var XEt=s(k2e);zcr=r(XEt,"swin"),XEt.forEach(t),Wcr=r(JPe," \u2014 "),gQ=n(JPe,"A",{href:!0});var zEt=s(gQ);Qcr=r(zEt,"SwinForMaskedImageModeling"),zEt.forEach(t),Hcr=r(JPe," (Swin Transformer model)"),JPe.forEach(t),Ucr=i(joe),iT=n(joe,"LI",{});var YPe=s(iT);S2e=n(YPe,"STRONG",{});var WEt=s(S2e);Jcr=r(WEt,"vit"),WEt.forEach(t),Ycr=r(YPe," \u2014 "),hQ=n(YPe,"A",{href:!0});var QEt=s(hQ);Kcr=r(QEt,"ViTForMaskedImageModeling"),QEt.forEach(t),Zcr=r(YPe," (ViT model)"),YPe.forEach(t),joe.forEach(t),efr=i(Ea),dT=n(Ea,"P",{});var KPe=s(dT);ofr=r(KPe,"The model is set in evaluation mode by default using "),R2e=n(KPe,"CODE",{});var HEt=s(R2e);rfr=r(HEt,"model.eval()"),HEt.forEach(t),tfr=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(KPe,"CODE",{});var UEt=s(P2e);afr=r(UEt,"model.train()"),UEt.forEach(t),KPe.forEach(t),nfr=i(Ea),T(cT.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),oOe=i(f),Gd=n(f,"H2",{class:!0});var iXe=s(Gd);fT=n(iXe,"A",{id:!0,class:!0,href:!0});var JEt=s(fT);B2e=n(JEt,"SPAN",{});var YEt=s(B2e);T(j8.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),sfr=i(iXe),I2e=n(iXe,"SPAN",{});var KEt=s(I2e);lfr=r(KEt,"AutoModelForObjectDetection"),KEt.forEach(t),iXe.forEach(t),rOe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(D8.$$.fragment,bl),ifr=i(bl),Od=n(bl,"P",{});var Doe=s(Od);dfr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pQ=n(Doe,"A",{href:!0});var ZEt=s(pQ);cfr=r(ZEt,"from_pretrained()"),ZEt.forEach(t),ffr=r(Doe," class method or the "),uQ=n(Doe,"A",{href:!0});var eCt=s(uQ);mfr=r(eCt,"from_config()"),eCt.forEach(t),gfr=r(Doe,` class
method.`),Doe.forEach(t),hfr=i(bl),G8=n(bl,"P",{});var dXe=s(G8);pfr=r(dXe,"This class cannot be instantiated directly using "),N2e=n(dXe,"CODE",{});var oCt=s(N2e);ufr=r(oCt,"__init__()"),oCt.forEach(t),_fr=r(dXe," (throws an error)."),dXe.forEach(t),bfr=i(bl),At=n(bl,"DIV",{class:!0});var i6=s(At);T(O8.$$.fragment,i6),vfr=i(i6),q2e=n(i6,"P",{});var rCt=s(q2e);Ffr=r(rCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rCt.forEach(t),Tfr=i(i6),Vd=n(i6,"P",{});var Goe=s(Vd);Mfr=r(Goe,`Note:
Loading a model from its configuration file does `),j2e=n(Goe,"STRONG",{});var tCt=s(j2e);Efr=r(tCt,"not"),tCt.forEach(t),Cfr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(Goe,"A",{href:!0});var aCt=s(_Q);wfr=r(aCt,"from_pretrained()"),aCt.forEach(t),Afr=r(Goe," to load the model weights."),Goe.forEach(t),Lfr=i(i6),T(mT.$$.fragment,i6),i6.forEach(t),yfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(V8.$$.fragment,Ca),xfr=i(Ca),D2e=n(Ca,"P",{});var nCt=s(D2e);$fr=r(nCt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nCt.forEach(t),kfr=i(Ca),Ka=n(Ca,"P",{});var d6=s(Ka);Sfr=r(d6,"The model class to instantiate is selected based on the "),G2e=n(d6,"CODE",{});var sCt=s(G2e);Rfr=r(sCt,"model_type"),sCt.forEach(t),Pfr=r(d6,` property of the config object (either
passed as an argument or loaded from `),O2e=n(d6,"CODE",{});var lCt=s(O2e);Bfr=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),Ifr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(d6,"CODE",{});var iCt=s(V2e);Nfr=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),qfr=r(d6,":"),d6.forEach(t),jfr=i(Ca),X8=n(Ca,"UL",{});var cXe=s(X8);gT=n(cXe,"LI",{});var ZPe=s(gT);X2e=n(ZPe,"STRONG",{});var dCt=s(X2e);Dfr=r(dCt,"detr"),dCt.forEach(t),Gfr=r(ZPe," \u2014 "),bQ=n(ZPe,"A",{href:!0});var cCt=s(bQ);Ofr=r(cCt,"DetrForObjectDetection"),cCt.forEach(t),Vfr=r(ZPe," (DETR model)"),ZPe.forEach(t),Xfr=i(cXe),hT=n(cXe,"LI",{});var eBe=s(hT);z2e=n(eBe,"STRONG",{});var fCt=s(z2e);zfr=r(fCt,"yolos"),fCt.forEach(t),Wfr=r(eBe," \u2014 "),vQ=n(eBe,"A",{href:!0});var mCt=s(vQ);Qfr=r(mCt,"YolosForObjectDetection"),mCt.forEach(t),Hfr=r(eBe," (YOLOS model)"),eBe.forEach(t),cXe.forEach(t),Ufr=i(Ca),pT=n(Ca,"P",{});var oBe=s(pT);Jfr=r(oBe,"The model is set in evaluation mode by default using "),W2e=n(oBe,"CODE",{});var gCt=s(W2e);Yfr=r(gCt,"model.eval()"),gCt.forEach(t),Kfr=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=n(oBe,"CODE",{});var hCt=s(Q2e);Zfr=r(hCt,"model.train()"),hCt.forEach(t),oBe.forEach(t),emr=i(Ca),T(uT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),tOe=i(f),Xd=n(f,"H2",{class:!0});var fXe=s(Xd);_T=n(fXe,"A",{id:!0,class:!0,href:!0});var pCt=s(_T);H2e=n(pCt,"SPAN",{});var uCt=s(H2e);T(z8.$$.fragment,uCt),uCt.forEach(t),pCt.forEach(t),omr=i(fXe),U2e=n(fXe,"SPAN",{});var _Ct=s(U2e);rmr=r(_Ct,"AutoModelForImageSegmentation"),_Ct.forEach(t),fXe.forEach(t),aOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(W8.$$.fragment,vl),tmr=i(vl),zd=n(vl,"P",{});var Ooe=s(zd);amr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FQ=n(Ooe,"A",{href:!0});var bCt=s(FQ);nmr=r(bCt,"from_pretrained()"),bCt.forEach(t),smr=r(Ooe," class method or the "),TQ=n(Ooe,"A",{href:!0});var vCt=s(TQ);lmr=r(vCt,"from_config()"),vCt.forEach(t),imr=r(Ooe,` class
method.`),Ooe.forEach(t),dmr=i(vl),Q8=n(vl,"P",{});var mXe=s(Q8);cmr=r(mXe,"This class cannot be instantiated directly using "),J2e=n(mXe,"CODE",{});var FCt=s(J2e);fmr=r(FCt,"__init__()"),FCt.forEach(t),mmr=r(mXe," (throws an error)."),mXe.forEach(t),gmr=i(vl),Lt=n(vl,"DIV",{class:!0});var c6=s(Lt);T(H8.$$.fragment,c6),hmr=i(c6),Y2e=n(c6,"P",{});var TCt=s(Y2e);pmr=r(TCt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),TCt.forEach(t),umr=i(c6),Wd=n(c6,"P",{});var Voe=s(Wd);_mr=r(Voe,`Note:
Loading a model from its configuration file does `),K2e=n(Voe,"STRONG",{});var MCt=s(K2e);bmr=r(MCt,"not"),MCt.forEach(t),vmr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(Voe,"A",{href:!0});var ECt=s(MQ);Fmr=r(ECt,"from_pretrained()"),ECt.forEach(t),Tmr=r(Voe," to load the model weights."),Voe.forEach(t),Mmr=i(c6),T(bT.$$.fragment,c6),c6.forEach(t),Emr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(U8.$$.fragment,wa),Cmr=i(wa),Z2e=n(wa,"P",{});var CCt=s(Z2e);wmr=r(CCt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CCt.forEach(t),Amr=i(wa),Za=n(wa,"P",{});var f6=s(Za);Lmr=r(f6,"The model class to instantiate is selected based on the "),ebe=n(f6,"CODE",{});var wCt=s(ebe);ymr=r(wCt,"model_type"),wCt.forEach(t),xmr=r(f6,` property of the config object (either
passed as an argument or loaded from `),obe=n(f6,"CODE",{});var ACt=s(obe);$mr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),kmr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(f6,"CODE",{});var LCt=s(rbe);Smr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),Rmr=r(f6,":"),f6.forEach(t),Pmr=i(wa),tbe=n(wa,"UL",{});var yCt=s(tbe);vT=n(yCt,"LI",{});var rBe=s(vT);abe=n(rBe,"STRONG",{});var xCt=s(abe);Bmr=r(xCt,"detr"),xCt.forEach(t),Imr=r(rBe," \u2014 "),EQ=n(rBe,"A",{href:!0});var $Ct=s(EQ);Nmr=r($Ct,"DetrForSegmentation"),$Ct.forEach(t),qmr=r(rBe," (DETR model)"),rBe.forEach(t),yCt.forEach(t),jmr=i(wa),FT=n(wa,"P",{});var tBe=s(FT);Dmr=r(tBe,"The model is set in evaluation mode by default using "),nbe=n(tBe,"CODE",{});var kCt=s(nbe);Gmr=r(kCt,"model.eval()"),kCt.forEach(t),Omr=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(tBe,"CODE",{});var SCt=s(sbe);Vmr=r(SCt,"model.train()"),SCt.forEach(t),tBe.forEach(t),Xmr=i(wa),T(TT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),nOe=i(f),Qd=n(f,"H2",{class:!0});var gXe=s(Qd);MT=n(gXe,"A",{id:!0,class:!0,href:!0});var RCt=s(MT);lbe=n(RCt,"SPAN",{});var PCt=s(lbe);T(J8.$$.fragment,PCt),PCt.forEach(t),RCt.forEach(t),zmr=i(gXe),ibe=n(gXe,"SPAN",{});var BCt=s(ibe);Wmr=r(BCt,"AutoModelForSemanticSegmentation"),BCt.forEach(t),gXe.forEach(t),sOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(Y8.$$.fragment,Fl),Qmr=i(Fl),Hd=n(Fl,"P",{});var Xoe=s(Hd);Hmr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CQ=n(Xoe,"A",{href:!0});var ICt=s(CQ);Umr=r(ICt,"from_pretrained()"),ICt.forEach(t),Jmr=r(Xoe," class method or the "),wQ=n(Xoe,"A",{href:!0});var NCt=s(wQ);Ymr=r(NCt,"from_config()"),NCt.forEach(t),Kmr=r(Xoe,` class
method.`),Xoe.forEach(t),Zmr=i(Fl),K8=n(Fl,"P",{});var hXe=s(K8);egr=r(hXe,"This class cannot be instantiated directly using "),dbe=n(hXe,"CODE",{});var qCt=s(dbe);ogr=r(qCt,"__init__()"),qCt.forEach(t),rgr=r(hXe," (throws an error)."),hXe.forEach(t),tgr=i(Fl),yt=n(Fl,"DIV",{class:!0});var m6=s(yt);T(Z8.$$.fragment,m6),agr=i(m6),cbe=n(m6,"P",{});var jCt=s(cbe);ngr=r(jCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jCt.forEach(t),sgr=i(m6),Ud=n(m6,"P",{});var zoe=s(Ud);lgr=r(zoe,`Note:
Loading a model from its configuration file does `),fbe=n(zoe,"STRONG",{});var DCt=s(fbe);igr=r(DCt,"not"),DCt.forEach(t),dgr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(zoe,"A",{href:!0});var GCt=s(AQ);cgr=r(GCt,"from_pretrained()"),GCt.forEach(t),fgr=r(zoe," to load the model weights."),zoe.forEach(t),mgr=i(m6),T(ET.$$.fragment,m6),m6.forEach(t),ggr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(e9.$$.fragment,Aa),hgr=i(Aa),mbe=n(Aa,"P",{});var OCt=s(mbe);pgr=r(OCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),OCt.forEach(t),ugr=i(Aa),en=n(Aa,"P",{});var g6=s(en);_gr=r(g6,"The model class to instantiate is selected based on the "),gbe=n(g6,"CODE",{});var VCt=s(gbe);bgr=r(VCt,"model_type"),VCt.forEach(t),vgr=r(g6,` property of the config object (either
passed as an argument or loaded from `),hbe=n(g6,"CODE",{});var XCt=s(hbe);Fgr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),Tgr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(g6,"CODE",{});var zCt=s(pbe);Mgr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),Egr=r(g6,":"),g6.forEach(t),Cgr=i(Aa),on=n(Aa,"UL",{});var h6=s(on);CT=n(h6,"LI",{});var aBe=s(CT);ube=n(aBe,"STRONG",{});var WCt=s(ube);wgr=r(WCt,"beit"),WCt.forEach(t),Agr=r(aBe," \u2014 "),LQ=n(aBe,"A",{href:!0});var QCt=s(LQ);Lgr=r(QCt,"BeitForSemanticSegmentation"),QCt.forEach(t),ygr=r(aBe," (BEiT model)"),aBe.forEach(t),xgr=i(h6),wT=n(h6,"LI",{});var nBe=s(wT);_be=n(nBe,"STRONG",{});var HCt=s(_be);$gr=r(HCt,"data2vec-vision"),HCt.forEach(t),kgr=r(nBe," \u2014 "),yQ=n(nBe,"A",{href:!0});var UCt=s(yQ);Sgr=r(UCt,"Data2VecVisionForSemanticSegmentation"),UCt.forEach(t),Rgr=r(nBe," (Data2VecVision model)"),nBe.forEach(t),Pgr=i(h6),AT=n(h6,"LI",{});var sBe=s(AT);bbe=n(sBe,"STRONG",{});var JCt=s(bbe);Bgr=r(JCt,"dpt"),JCt.forEach(t),Igr=r(sBe," \u2014 "),xQ=n(sBe,"A",{href:!0});var YCt=s(xQ);Ngr=r(YCt,"DPTForSemanticSegmentation"),YCt.forEach(t),qgr=r(sBe," (DPT model)"),sBe.forEach(t),jgr=i(h6),LT=n(h6,"LI",{});var lBe=s(LT);vbe=n(lBe,"STRONG",{});var KCt=s(vbe);Dgr=r(KCt,"segformer"),KCt.forEach(t),Ggr=r(lBe," \u2014 "),$Q=n(lBe,"A",{href:!0});var ZCt=s($Q);Ogr=r(ZCt,"SegformerForSemanticSegmentation"),ZCt.forEach(t),Vgr=r(lBe," (SegFormer model)"),lBe.forEach(t),h6.forEach(t),Xgr=i(Aa),yT=n(Aa,"P",{});var iBe=s(yT);zgr=r(iBe,"The model is set in evaluation mode by default using "),Fbe=n(iBe,"CODE",{});var e5t=s(Fbe);Wgr=r(e5t,"model.eval()"),e5t.forEach(t),Qgr=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=n(iBe,"CODE",{});var o5t=s(Tbe);Hgr=r(o5t,"model.train()"),o5t.forEach(t),iBe.forEach(t),Ugr=i(Aa),T(xT.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),lOe=i(f),Jd=n(f,"H2",{class:!0});var pXe=s(Jd);$T=n(pXe,"A",{id:!0,class:!0,href:!0});var r5t=s($T);Mbe=n(r5t,"SPAN",{});var t5t=s(Mbe);T(o9.$$.fragment,t5t),t5t.forEach(t),r5t.forEach(t),Jgr=i(pXe),Ebe=n(pXe,"SPAN",{});var a5t=s(Ebe);Ygr=r(a5t,"AutoModelForInstanceSegmentation"),a5t.forEach(t),pXe.forEach(t),iOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(r9.$$.fragment,Tl),Kgr=i(Tl),Yd=n(Tl,"P",{});var Woe=s(Yd);Zgr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kQ=n(Woe,"A",{href:!0});var n5t=s(kQ);ehr=r(n5t,"from_pretrained()"),n5t.forEach(t),ohr=r(Woe," class method or the "),SQ=n(Woe,"A",{href:!0});var s5t=s(SQ);rhr=r(s5t,"from_config()"),s5t.forEach(t),thr=r(Woe,` class
method.`),Woe.forEach(t),ahr=i(Tl),t9=n(Tl,"P",{});var uXe=s(t9);nhr=r(uXe,"This class cannot be instantiated directly using "),Cbe=n(uXe,"CODE",{});var l5t=s(Cbe);shr=r(l5t,"__init__()"),l5t.forEach(t),lhr=r(uXe," (throws an error)."),uXe.forEach(t),ihr=i(Tl),xt=n(Tl,"DIV",{class:!0});var p6=s(xt);T(a9.$$.fragment,p6),dhr=i(p6),wbe=n(p6,"P",{});var i5t=s(wbe);chr=r(i5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),i5t.forEach(t),fhr=i(p6),Kd=n(p6,"P",{});var Qoe=s(Kd);mhr=r(Qoe,`Note:
Loading a model from its configuration file does `),Abe=n(Qoe,"STRONG",{});var d5t=s(Abe);ghr=r(d5t,"not"),d5t.forEach(t),hhr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(Qoe,"A",{href:!0});var c5t=s(RQ);phr=r(c5t,"from_pretrained()"),c5t.forEach(t),uhr=r(Qoe," to load the model weights."),Qoe.forEach(t),_hr=i(p6),T(kT.$$.fragment,p6),p6.forEach(t),bhr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(n9.$$.fragment,La),vhr=i(La),Lbe=n(La,"P",{});var f5t=s(Lbe);Fhr=r(f5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),f5t.forEach(t),Thr=i(La),rn=n(La,"P",{});var u6=s(rn);Mhr=r(u6,"The model class to instantiate is selected based on the "),ybe=n(u6,"CODE",{});var m5t=s(ybe);Ehr=r(m5t,"model_type"),m5t.forEach(t),Chr=r(u6,` property of the config object (either
passed as an argument or loaded from `),xbe=n(u6,"CODE",{});var g5t=s(xbe);whr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),Ahr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(u6,"CODE",{});var h5t=s($be);Lhr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),yhr=r(u6,":"),u6.forEach(t),xhr=i(La),kbe=n(La,"UL",{});var p5t=s(kbe);ST=n(p5t,"LI",{});var dBe=s(ST);Sbe=n(dBe,"STRONG",{});var u5t=s(Sbe);$hr=r(u5t,"maskformer"),u5t.forEach(t),khr=r(dBe," \u2014 "),PQ=n(dBe,"A",{href:!0});var _5t=s(PQ);Shr=r(_5t,"MaskFormerForInstanceSegmentation"),_5t.forEach(t),Rhr=r(dBe," (MaskFormer model)"),dBe.forEach(t),p5t.forEach(t),Phr=i(La),RT=n(La,"P",{});var cBe=s(RT);Bhr=r(cBe,"The model is set in evaluation mode by default using "),Rbe=n(cBe,"CODE",{});var b5t=s(Rbe);Ihr=r(b5t,"model.eval()"),b5t.forEach(t),Nhr=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=n(cBe,"CODE",{});var v5t=s(Pbe);qhr=r(v5t,"model.train()"),v5t.forEach(t),cBe.forEach(t),jhr=i(La),T(PT.$$.fragment,La),La.forEach(t),Tl.forEach(t),dOe=i(f),Zd=n(f,"H2",{class:!0});var _Xe=s(Zd);BT=n(_Xe,"A",{id:!0,class:!0,href:!0});var F5t=s(BT);Bbe=n(F5t,"SPAN",{});var T5t=s(Bbe);T(s9.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),Dhr=i(_Xe),Ibe=n(_Xe,"SPAN",{});var M5t=s(Ibe);Ghr=r(M5t,"TFAutoModel"),M5t.forEach(t),_Xe.forEach(t),cOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(l9.$$.fragment,Ml),Ohr=i(Ml),ec=n(Ml,"P",{});var Hoe=s(ec);Vhr=r(Hoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=n(Hoe,"A",{href:!0});var E5t=s(BQ);Xhr=r(E5t,"from_pretrained()"),E5t.forEach(t),zhr=r(Hoe," class method or the "),IQ=n(Hoe,"A",{href:!0});var C5t=s(IQ);Whr=r(C5t,"from_config()"),C5t.forEach(t),Qhr=r(Hoe,` class
method.`),Hoe.forEach(t),Hhr=i(Ml),i9=n(Ml,"P",{});var bXe=s(i9);Uhr=r(bXe,"This class cannot be instantiated directly using "),Nbe=n(bXe,"CODE",{});var w5t=s(Nbe);Jhr=r(w5t,"__init__()"),w5t.forEach(t),Yhr=r(bXe," (throws an error)."),bXe.forEach(t),Khr=i(Ml),$t=n(Ml,"DIV",{class:!0});var _6=s($t);T(d9.$$.fragment,_6),Zhr=i(_6),qbe=n(_6,"P",{});var A5t=s(qbe);epr=r(A5t,"Instantiates one of the base model classes of the library from a configuration."),A5t.forEach(t),opr=i(_6),oc=n(_6,"P",{});var Uoe=s(oc);rpr=r(Uoe,`Note:
Loading a model from its configuration file does `),jbe=n(Uoe,"STRONG",{});var L5t=s(jbe);tpr=r(L5t,"not"),L5t.forEach(t),apr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(Uoe,"A",{href:!0});var y5t=s(NQ);npr=r(y5t,"from_pretrained()"),y5t.forEach(t),spr=r(Uoe," to load the model weights."),Uoe.forEach(t),lpr=i(_6),T(IT.$$.fragment,_6),_6.forEach(t),ipr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(c9.$$.fragment,El),dpr=i(El),Dbe=n(El,"P",{});var x5t=s(Dbe);cpr=r(x5t,"Instantiate one of the base model classes of the library from a pretrained model."),x5t.forEach(t),fpr=i(El),tn=n(El,"P",{});var b6=s(tn);mpr=r(b6,"The model class to instantiate is selected based on the "),Gbe=n(b6,"CODE",{});var $5t=s(Gbe);gpr=r($5t,"model_type"),$5t.forEach(t),hpr=r(b6,` property of the config object (either
passed as an argument or loaded from `),Obe=n(b6,"CODE",{});var k5t=s(Obe);ppr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),upr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(b6,"CODE",{});var S5t=s(Vbe);_pr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),bpr=r(b6,":"),b6.forEach(t),vpr=i(El),q=n(El,"UL",{});var D=s(q);NT=n(D,"LI",{});var fBe=s(NT);Xbe=n(fBe,"STRONG",{});var R5t=s(Xbe);Fpr=r(R5t,"albert"),R5t.forEach(t),Tpr=r(fBe," \u2014 "),qQ=n(fBe,"A",{href:!0});var P5t=s(qQ);Mpr=r(P5t,"TFAlbertModel"),P5t.forEach(t),Epr=r(fBe," (ALBERT model)"),fBe.forEach(t),Cpr=i(D),qT=n(D,"LI",{});var mBe=s(qT);zbe=n(mBe,"STRONG",{});var B5t=s(zbe);wpr=r(B5t,"bart"),B5t.forEach(t),Apr=r(mBe," \u2014 "),jQ=n(mBe,"A",{href:!0});var I5t=s(jQ);Lpr=r(I5t,"TFBartModel"),I5t.forEach(t),ypr=r(mBe," (BART model)"),mBe.forEach(t),xpr=i(D),jT=n(D,"LI",{});var gBe=s(jT);Wbe=n(gBe,"STRONG",{});var N5t=s(Wbe);$pr=r(N5t,"bert"),N5t.forEach(t),kpr=r(gBe," \u2014 "),DQ=n(gBe,"A",{href:!0});var q5t=s(DQ);Spr=r(q5t,"TFBertModel"),q5t.forEach(t),Rpr=r(gBe," (BERT model)"),gBe.forEach(t),Ppr=i(D),DT=n(D,"LI",{});var hBe=s(DT);Qbe=n(hBe,"STRONG",{});var j5t=s(Qbe);Bpr=r(j5t,"blenderbot"),j5t.forEach(t),Ipr=r(hBe," \u2014 "),GQ=n(hBe,"A",{href:!0});var D5t=s(GQ);Npr=r(D5t,"TFBlenderbotModel"),D5t.forEach(t),qpr=r(hBe," (Blenderbot model)"),hBe.forEach(t),jpr=i(D),GT=n(D,"LI",{});var pBe=s(GT);Hbe=n(pBe,"STRONG",{});var G5t=s(Hbe);Dpr=r(G5t,"blenderbot-small"),G5t.forEach(t),Gpr=r(pBe," \u2014 "),OQ=n(pBe,"A",{href:!0});var O5t=s(OQ);Opr=r(O5t,"TFBlenderbotSmallModel"),O5t.forEach(t),Vpr=r(pBe," (BlenderbotSmall model)"),pBe.forEach(t),Xpr=i(D),OT=n(D,"LI",{});var uBe=s(OT);Ube=n(uBe,"STRONG",{});var V5t=s(Ube);zpr=r(V5t,"camembert"),V5t.forEach(t),Wpr=r(uBe," \u2014 "),VQ=n(uBe,"A",{href:!0});var X5t=s(VQ);Qpr=r(X5t,"TFCamembertModel"),X5t.forEach(t),Hpr=r(uBe," (CamemBERT model)"),uBe.forEach(t),Upr=i(D),VT=n(D,"LI",{});var _Be=s(VT);Jbe=n(_Be,"STRONG",{});var z5t=s(Jbe);Jpr=r(z5t,"clip"),z5t.forEach(t),Ypr=r(_Be," \u2014 "),XQ=n(_Be,"A",{href:!0});var W5t=s(XQ);Kpr=r(W5t,"TFCLIPModel"),W5t.forEach(t),Zpr=r(_Be," (CLIP model)"),_Be.forEach(t),eur=i(D),XT=n(D,"LI",{});var bBe=s(XT);Ybe=n(bBe,"STRONG",{});var Q5t=s(Ybe);our=r(Q5t,"convbert"),Q5t.forEach(t),rur=r(bBe," \u2014 "),zQ=n(bBe,"A",{href:!0});var H5t=s(zQ);tur=r(H5t,"TFConvBertModel"),H5t.forEach(t),aur=r(bBe," (ConvBERT model)"),bBe.forEach(t),nur=i(D),zT=n(D,"LI",{});var vBe=s(zT);Kbe=n(vBe,"STRONG",{});var U5t=s(Kbe);sur=r(U5t,"convnext"),U5t.forEach(t),lur=r(vBe," \u2014 "),WQ=n(vBe,"A",{href:!0});var J5t=s(WQ);iur=r(J5t,"TFConvNextModel"),J5t.forEach(t),dur=r(vBe," (ConvNeXT model)"),vBe.forEach(t),cur=i(D),WT=n(D,"LI",{});var FBe=s(WT);Zbe=n(FBe,"STRONG",{});var Y5t=s(Zbe);fur=r(Y5t,"ctrl"),Y5t.forEach(t),mur=r(FBe," \u2014 "),QQ=n(FBe,"A",{href:!0});var K5t=s(QQ);gur=r(K5t,"TFCTRLModel"),K5t.forEach(t),hur=r(FBe," (CTRL model)"),FBe.forEach(t),pur=i(D),QT=n(D,"LI",{});var TBe=s(QT);eve=n(TBe,"STRONG",{});var Z5t=s(eve);uur=r(Z5t,"data2vec-vision"),Z5t.forEach(t),_ur=r(TBe," \u2014 "),HQ=n(TBe,"A",{href:!0});var e3t=s(HQ);bur=r(e3t,"TFData2VecVisionModel"),e3t.forEach(t),vur=r(TBe," (Data2VecVision model)"),TBe.forEach(t),Fur=i(D),HT=n(D,"LI",{});var MBe=s(HT);ove=n(MBe,"STRONG",{});var o3t=s(ove);Tur=r(o3t,"deberta"),o3t.forEach(t),Mur=r(MBe," \u2014 "),UQ=n(MBe,"A",{href:!0});var r3t=s(UQ);Eur=r(r3t,"TFDebertaModel"),r3t.forEach(t),Cur=r(MBe," (DeBERTa model)"),MBe.forEach(t),wur=i(D),UT=n(D,"LI",{});var EBe=s(UT);rve=n(EBe,"STRONG",{});var t3t=s(rve);Aur=r(t3t,"deberta-v2"),t3t.forEach(t),Lur=r(EBe," \u2014 "),JQ=n(EBe,"A",{href:!0});var a3t=s(JQ);yur=r(a3t,"TFDebertaV2Model"),a3t.forEach(t),xur=r(EBe," (DeBERTa-v2 model)"),EBe.forEach(t),$ur=i(D),JT=n(D,"LI",{});var CBe=s(JT);tve=n(CBe,"STRONG",{});var n3t=s(tve);kur=r(n3t,"distilbert"),n3t.forEach(t),Sur=r(CBe," \u2014 "),YQ=n(CBe,"A",{href:!0});var s3t=s(YQ);Rur=r(s3t,"TFDistilBertModel"),s3t.forEach(t),Pur=r(CBe," (DistilBERT model)"),CBe.forEach(t),Bur=i(D),YT=n(D,"LI",{});var wBe=s(YT);ave=n(wBe,"STRONG",{});var l3t=s(ave);Iur=r(l3t,"dpr"),l3t.forEach(t),Nur=r(wBe," \u2014 "),KQ=n(wBe,"A",{href:!0});var i3t=s(KQ);qur=r(i3t,"TFDPRQuestionEncoder"),i3t.forEach(t),jur=r(wBe," (DPR model)"),wBe.forEach(t),Dur=i(D),KT=n(D,"LI",{});var ABe=s(KT);nve=n(ABe,"STRONG",{});var d3t=s(nve);Gur=r(d3t,"electra"),d3t.forEach(t),Our=r(ABe," \u2014 "),ZQ=n(ABe,"A",{href:!0});var c3t=s(ZQ);Vur=r(c3t,"TFElectraModel"),c3t.forEach(t),Xur=r(ABe," (ELECTRA model)"),ABe.forEach(t),zur=i(D),ZT=n(D,"LI",{});var LBe=s(ZT);sve=n(LBe,"STRONG",{});var f3t=s(sve);Wur=r(f3t,"flaubert"),f3t.forEach(t),Qur=r(LBe," \u2014 "),eH=n(LBe,"A",{href:!0});var m3t=s(eH);Hur=r(m3t,"TFFlaubertModel"),m3t.forEach(t),Uur=r(LBe," (FlauBERT model)"),LBe.forEach(t),Jur=i(D),Xs=n(D,"LI",{});var zk=s(Xs);lve=n(zk,"STRONG",{});var g3t=s(lve);Yur=r(g3t,"funnel"),g3t.forEach(t),Kur=r(zk," \u2014 "),oH=n(zk,"A",{href:!0});var h3t=s(oH);Zur=r(h3t,"TFFunnelModel"),h3t.forEach(t),e_r=r(zk," or "),rH=n(zk,"A",{href:!0});var p3t=s(rH);o_r=r(p3t,"TFFunnelBaseModel"),p3t.forEach(t),r_r=r(zk," (Funnel Transformer model)"),zk.forEach(t),t_r=i(D),eM=n(D,"LI",{});var yBe=s(eM);ive=n(yBe,"STRONG",{});var u3t=s(ive);a_r=r(u3t,"gpt2"),u3t.forEach(t),n_r=r(yBe," \u2014 "),tH=n(yBe,"A",{href:!0});var _3t=s(tH);s_r=r(_3t,"TFGPT2Model"),_3t.forEach(t),l_r=r(yBe," (OpenAI GPT-2 model)"),yBe.forEach(t),i_r=i(D),oM=n(D,"LI",{});var xBe=s(oM);dve=n(xBe,"STRONG",{});var b3t=s(dve);d_r=r(b3t,"gptj"),b3t.forEach(t),c_r=r(xBe," \u2014 "),aH=n(xBe,"A",{href:!0});var v3t=s(aH);f_r=r(v3t,"TFGPTJModel"),v3t.forEach(t),m_r=r(xBe," (GPT-J model)"),xBe.forEach(t),g_r=i(D),rM=n(D,"LI",{});var $Be=s(rM);cve=n($Be,"STRONG",{});var F3t=s(cve);h_r=r(F3t,"hubert"),F3t.forEach(t),p_r=r($Be," \u2014 "),nH=n($Be,"A",{href:!0});var T3t=s(nH);u_r=r(T3t,"TFHubertModel"),T3t.forEach(t),__r=r($Be," (Hubert model)"),$Be.forEach(t),b_r=i(D),tM=n(D,"LI",{});var kBe=s(tM);fve=n(kBe,"STRONG",{});var M3t=s(fve);v_r=r(M3t,"layoutlm"),M3t.forEach(t),F_r=r(kBe," \u2014 "),sH=n(kBe,"A",{href:!0});var E3t=s(sH);T_r=r(E3t,"TFLayoutLMModel"),E3t.forEach(t),M_r=r(kBe," (LayoutLM model)"),kBe.forEach(t),E_r=i(D),aM=n(D,"LI",{});var SBe=s(aM);mve=n(SBe,"STRONG",{});var C3t=s(mve);C_r=r(C3t,"led"),C3t.forEach(t),w_r=r(SBe," \u2014 "),lH=n(SBe,"A",{href:!0});var w3t=s(lH);A_r=r(w3t,"TFLEDModel"),w3t.forEach(t),L_r=r(SBe," (LED model)"),SBe.forEach(t),y_r=i(D),nM=n(D,"LI",{});var RBe=s(nM);gve=n(RBe,"STRONG",{});var A3t=s(gve);x_r=r(A3t,"longformer"),A3t.forEach(t),$_r=r(RBe," \u2014 "),iH=n(RBe,"A",{href:!0});var L3t=s(iH);k_r=r(L3t,"TFLongformerModel"),L3t.forEach(t),S_r=r(RBe," (Longformer model)"),RBe.forEach(t),R_r=i(D),sM=n(D,"LI",{});var PBe=s(sM);hve=n(PBe,"STRONG",{});var y3t=s(hve);P_r=r(y3t,"lxmert"),y3t.forEach(t),B_r=r(PBe," \u2014 "),dH=n(PBe,"A",{href:!0});var x3t=s(dH);I_r=r(x3t,"TFLxmertModel"),x3t.forEach(t),N_r=r(PBe," (LXMERT model)"),PBe.forEach(t),q_r=i(D),lM=n(D,"LI",{});var BBe=s(lM);pve=n(BBe,"STRONG",{});var $3t=s(pve);j_r=r($3t,"marian"),$3t.forEach(t),D_r=r(BBe," \u2014 "),cH=n(BBe,"A",{href:!0});var k3t=s(cH);G_r=r(k3t,"TFMarianModel"),k3t.forEach(t),O_r=r(BBe," (Marian model)"),BBe.forEach(t),V_r=i(D),iM=n(D,"LI",{});var IBe=s(iM);uve=n(IBe,"STRONG",{});var S3t=s(uve);X_r=r(S3t,"mbart"),S3t.forEach(t),z_r=r(IBe," \u2014 "),fH=n(IBe,"A",{href:!0});var R3t=s(fH);W_r=r(R3t,"TFMBartModel"),R3t.forEach(t),Q_r=r(IBe," (mBART model)"),IBe.forEach(t),H_r=i(D),dM=n(D,"LI",{});var NBe=s(dM);_ve=n(NBe,"STRONG",{});var P3t=s(_ve);U_r=r(P3t,"mobilebert"),P3t.forEach(t),J_r=r(NBe," \u2014 "),mH=n(NBe,"A",{href:!0});var B3t=s(mH);Y_r=r(B3t,"TFMobileBertModel"),B3t.forEach(t),K_r=r(NBe," (MobileBERT model)"),NBe.forEach(t),Z_r=i(D),cM=n(D,"LI",{});var qBe=s(cM);bve=n(qBe,"STRONG",{});var I3t=s(bve);e7r=r(I3t,"mpnet"),I3t.forEach(t),o7r=r(qBe," \u2014 "),gH=n(qBe,"A",{href:!0});var N3t=s(gH);r7r=r(N3t,"TFMPNetModel"),N3t.forEach(t),t7r=r(qBe," (MPNet model)"),qBe.forEach(t),a7r=i(D),fM=n(D,"LI",{});var jBe=s(fM);vve=n(jBe,"STRONG",{});var q3t=s(vve);n7r=r(q3t,"mt5"),q3t.forEach(t),s7r=r(jBe," \u2014 "),hH=n(jBe,"A",{href:!0});var j3t=s(hH);l7r=r(j3t,"TFMT5Model"),j3t.forEach(t),i7r=r(jBe," (MT5 model)"),jBe.forEach(t),d7r=i(D),mM=n(D,"LI",{});var DBe=s(mM);Fve=n(DBe,"STRONG",{});var D3t=s(Fve);c7r=r(D3t,"openai-gpt"),D3t.forEach(t),f7r=r(DBe," \u2014 "),pH=n(DBe,"A",{href:!0});var G3t=s(pH);m7r=r(G3t,"TFOpenAIGPTModel"),G3t.forEach(t),g7r=r(DBe," (OpenAI GPT model)"),DBe.forEach(t),h7r=i(D),gM=n(D,"LI",{});var GBe=s(gM);Tve=n(GBe,"STRONG",{});var O3t=s(Tve);p7r=r(O3t,"opt"),O3t.forEach(t),u7r=r(GBe," \u2014 "),uH=n(GBe,"A",{href:!0});var V3t=s(uH);_7r=r(V3t,"TFOPTModel"),V3t.forEach(t),b7r=r(GBe," (OPT model)"),GBe.forEach(t),v7r=i(D),hM=n(D,"LI",{});var OBe=s(hM);Mve=n(OBe,"STRONG",{});var X3t=s(Mve);F7r=r(X3t,"pegasus"),X3t.forEach(t),T7r=r(OBe," \u2014 "),_H=n(OBe,"A",{href:!0});var z3t=s(_H);M7r=r(z3t,"TFPegasusModel"),z3t.forEach(t),E7r=r(OBe," (Pegasus model)"),OBe.forEach(t),C7r=i(D),pM=n(D,"LI",{});var VBe=s(pM);Eve=n(VBe,"STRONG",{});var W3t=s(Eve);w7r=r(W3t,"rembert"),W3t.forEach(t),A7r=r(VBe," \u2014 "),bH=n(VBe,"A",{href:!0});var Q3t=s(bH);L7r=r(Q3t,"TFRemBertModel"),Q3t.forEach(t),y7r=r(VBe," (RemBERT model)"),VBe.forEach(t),x7r=i(D),uM=n(D,"LI",{});var XBe=s(uM);Cve=n(XBe,"STRONG",{});var H3t=s(Cve);$7r=r(H3t,"roberta"),H3t.forEach(t),k7r=r(XBe," \u2014 "),vH=n(XBe,"A",{href:!0});var U3t=s(vH);S7r=r(U3t,"TFRobertaModel"),U3t.forEach(t),R7r=r(XBe," (RoBERTa model)"),XBe.forEach(t),P7r=i(D),_M=n(D,"LI",{});var zBe=s(_M);wve=n(zBe,"STRONG",{});var J3t=s(wve);B7r=r(J3t,"roformer"),J3t.forEach(t),I7r=r(zBe," \u2014 "),FH=n(zBe,"A",{href:!0});var Y3t=s(FH);N7r=r(Y3t,"TFRoFormerModel"),Y3t.forEach(t),q7r=r(zBe," (RoFormer model)"),zBe.forEach(t),j7r=i(D),bM=n(D,"LI",{});var WBe=s(bM);Ave=n(WBe,"STRONG",{});var K3t=s(Ave);D7r=r(K3t,"speech_to_text"),K3t.forEach(t),G7r=r(WBe," \u2014 "),TH=n(WBe,"A",{href:!0});var Z3t=s(TH);O7r=r(Z3t,"TFSpeech2TextModel"),Z3t.forEach(t),V7r=r(WBe," (Speech2Text model)"),WBe.forEach(t),X7r=i(D),vM=n(D,"LI",{});var QBe=s(vM);Lve=n(QBe,"STRONG",{});var ewt=s(Lve);z7r=r(ewt,"swin"),ewt.forEach(t),W7r=r(QBe," \u2014 "),MH=n(QBe,"A",{href:!0});var owt=s(MH);Q7r=r(owt,"TFSwinModel"),owt.forEach(t),H7r=r(QBe," (Swin Transformer model)"),QBe.forEach(t),U7r=i(D),FM=n(D,"LI",{});var HBe=s(FM);yve=n(HBe,"STRONG",{});var rwt=s(yve);J7r=r(rwt,"t5"),rwt.forEach(t),Y7r=r(HBe," \u2014 "),EH=n(HBe,"A",{href:!0});var twt=s(EH);K7r=r(twt,"TFT5Model"),twt.forEach(t),Z7r=r(HBe," (T5 model)"),HBe.forEach(t),e1r=i(D),TM=n(D,"LI",{});var UBe=s(TM);xve=n(UBe,"STRONG",{});var awt=s(xve);o1r=r(awt,"tapas"),awt.forEach(t),r1r=r(UBe," \u2014 "),CH=n(UBe,"A",{href:!0});var nwt=s(CH);t1r=r(nwt,"TFTapasModel"),nwt.forEach(t),a1r=r(UBe," (TAPAS model)"),UBe.forEach(t),n1r=i(D),MM=n(D,"LI",{});var JBe=s(MM);$ve=n(JBe,"STRONG",{});var swt=s($ve);s1r=r(swt,"transfo-xl"),swt.forEach(t),l1r=r(JBe," \u2014 "),wH=n(JBe,"A",{href:!0});var lwt=s(wH);i1r=r(lwt,"TFTransfoXLModel"),lwt.forEach(t),d1r=r(JBe," (Transformer-XL model)"),JBe.forEach(t),c1r=i(D),EM=n(D,"LI",{});var YBe=s(EM);kve=n(YBe,"STRONG",{});var iwt=s(kve);f1r=r(iwt,"vit"),iwt.forEach(t),m1r=r(YBe," \u2014 "),AH=n(YBe,"A",{href:!0});var dwt=s(AH);g1r=r(dwt,"TFViTModel"),dwt.forEach(t),h1r=r(YBe," (ViT model)"),YBe.forEach(t),p1r=i(D),CM=n(D,"LI",{});var KBe=s(CM);Sve=n(KBe,"STRONG",{});var cwt=s(Sve);u1r=r(cwt,"vit_mae"),cwt.forEach(t),_1r=r(KBe," \u2014 "),LH=n(KBe,"A",{href:!0});var fwt=s(LH);b1r=r(fwt,"TFViTMAEModel"),fwt.forEach(t),v1r=r(KBe," (ViTMAE model)"),KBe.forEach(t),F1r=i(D),wM=n(D,"LI",{});var ZBe=s(wM);Rve=n(ZBe,"STRONG",{});var mwt=s(Rve);T1r=r(mwt,"wav2vec2"),mwt.forEach(t),M1r=r(ZBe," \u2014 "),yH=n(ZBe,"A",{href:!0});var gwt=s(yH);E1r=r(gwt,"TFWav2Vec2Model"),gwt.forEach(t),C1r=r(ZBe," (Wav2Vec2 model)"),ZBe.forEach(t),w1r=i(D),AM=n(D,"LI",{});var eIe=s(AM);Pve=n(eIe,"STRONG",{});var hwt=s(Pve);A1r=r(hwt,"xlm"),hwt.forEach(t),L1r=r(eIe," \u2014 "),xH=n(eIe,"A",{href:!0});var pwt=s(xH);y1r=r(pwt,"TFXLMModel"),pwt.forEach(t),x1r=r(eIe," (XLM model)"),eIe.forEach(t),$1r=i(D),LM=n(D,"LI",{});var oIe=s(LM);Bve=n(oIe,"STRONG",{});var uwt=s(Bve);k1r=r(uwt,"xlm-roberta"),uwt.forEach(t),S1r=r(oIe," \u2014 "),$H=n(oIe,"A",{href:!0});var _wt=s($H);R1r=r(_wt,"TFXLMRobertaModel"),_wt.forEach(t),P1r=r(oIe," (XLM-RoBERTa model)"),oIe.forEach(t),B1r=i(D),yM=n(D,"LI",{});var rIe=s(yM);Ive=n(rIe,"STRONG",{});var bwt=s(Ive);I1r=r(bwt,"xlnet"),bwt.forEach(t),N1r=r(rIe," \u2014 "),kH=n(rIe,"A",{href:!0});var vwt=s(kH);q1r=r(vwt,"TFXLNetModel"),vwt.forEach(t),j1r=r(rIe," (XLNet model)"),rIe.forEach(t),D.forEach(t),D1r=i(El),T(xM.$$.fragment,El),El.forEach(t),Ml.forEach(t),fOe=i(f),rc=n(f,"H2",{class:!0});var vXe=s(rc);$M=n(vXe,"A",{id:!0,class:!0,href:!0});var Fwt=s($M);Nve=n(Fwt,"SPAN",{});var Twt=s(Nve);T(f9.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),G1r=i(vXe),qve=n(vXe,"SPAN",{});var Mwt=s(qve);O1r=r(Mwt,"TFAutoModelForPreTraining"),Mwt.forEach(t),vXe.forEach(t),mOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(m9.$$.fragment,Cl),V1r=i(Cl),tc=n(Cl,"P",{});var Joe=s(tc);X1r=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SH=n(Joe,"A",{href:!0});var Ewt=s(SH);z1r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),W1r=r(Joe," class method or the "),RH=n(Joe,"A",{href:!0});var Cwt=s(RH);Q1r=r(Cwt,"from_config()"),Cwt.forEach(t),H1r=r(Joe,` class
method.`),Joe.forEach(t),U1r=i(Cl),g9=n(Cl,"P",{});var FXe=s(g9);J1r=r(FXe,"This class cannot be instantiated directly using "),jve=n(FXe,"CODE",{});var wwt=s(jve);Y1r=r(wwt,"__init__()"),wwt.forEach(t),K1r=r(FXe," (throws an error)."),FXe.forEach(t),Z1r=i(Cl),kt=n(Cl,"DIV",{class:!0});var v6=s(kt);T(h9.$$.fragment,v6),e2r=i(v6),Dve=n(v6,"P",{});var Awt=s(Dve);o2r=r(Awt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Awt.forEach(t),r2r=i(v6),ac=n(v6,"P",{});var Yoe=s(ac);t2r=r(Yoe,`Note:
Loading a model from its configuration file does `),Gve=n(Yoe,"STRONG",{});var Lwt=s(Gve);a2r=r(Lwt,"not"),Lwt.forEach(t),n2r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(Yoe,"A",{href:!0});var ywt=s(PH);s2r=r(ywt,"from_pretrained()"),ywt.forEach(t),l2r=r(Yoe," to load the model weights."),Yoe.forEach(t),i2r=i(v6),T(kM.$$.fragment,v6),v6.forEach(t),d2r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(p9.$$.fragment,wl),c2r=i(wl),Ove=n(wl,"P",{});var xwt=s(Ove);f2r=r(xwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xwt.forEach(t),m2r=i(wl),an=n(wl,"P",{});var F6=s(an);g2r=r(F6,"The model class to instantiate is selected based on the "),Vve=n(F6,"CODE",{});var $wt=s(Vve);h2r=r($wt,"model_type"),$wt.forEach(t),p2r=r(F6,` property of the config object (either
passed as an argument or loaded from `),Xve=n(F6,"CODE",{});var kwt=s(Xve);u2r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),_2r=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(F6,"CODE",{});var Swt=s(zve);b2r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),v2r=r(F6,":"),F6.forEach(t),F2r=i(wl),se=n(wl,"UL",{});var le=s(se);SM=n(le,"LI",{});var tIe=s(SM);Wve=n(tIe,"STRONG",{});var Rwt=s(Wve);T2r=r(Rwt,"albert"),Rwt.forEach(t),M2r=r(tIe," \u2014 "),BH=n(tIe,"A",{href:!0});var Pwt=s(BH);E2r=r(Pwt,"TFAlbertForPreTraining"),Pwt.forEach(t),C2r=r(tIe," (ALBERT model)"),tIe.forEach(t),w2r=i(le),RM=n(le,"LI",{});var aIe=s(RM);Qve=n(aIe,"STRONG",{});var Bwt=s(Qve);A2r=r(Bwt,"bart"),Bwt.forEach(t),L2r=r(aIe," \u2014 "),IH=n(aIe,"A",{href:!0});var Iwt=s(IH);y2r=r(Iwt,"TFBartForConditionalGeneration"),Iwt.forEach(t),x2r=r(aIe," (BART model)"),aIe.forEach(t),$2r=i(le),PM=n(le,"LI",{});var nIe=s(PM);Hve=n(nIe,"STRONG",{});var Nwt=s(Hve);k2r=r(Nwt,"bert"),Nwt.forEach(t),S2r=r(nIe," \u2014 "),NH=n(nIe,"A",{href:!0});var qwt=s(NH);R2r=r(qwt,"TFBertForPreTraining"),qwt.forEach(t),P2r=r(nIe," (BERT model)"),nIe.forEach(t),B2r=i(le),BM=n(le,"LI",{});var sIe=s(BM);Uve=n(sIe,"STRONG",{});var jwt=s(Uve);I2r=r(jwt,"camembert"),jwt.forEach(t),N2r=r(sIe," \u2014 "),qH=n(sIe,"A",{href:!0});var Dwt=s(qH);q2r=r(Dwt,"TFCamembertForMaskedLM"),Dwt.forEach(t),j2r=r(sIe," (CamemBERT model)"),sIe.forEach(t),D2r=i(le),IM=n(le,"LI",{});var lIe=s(IM);Jve=n(lIe,"STRONG",{});var Gwt=s(Jve);G2r=r(Gwt,"ctrl"),Gwt.forEach(t),O2r=r(lIe," \u2014 "),jH=n(lIe,"A",{href:!0});var Owt=s(jH);V2r=r(Owt,"TFCTRLLMHeadModel"),Owt.forEach(t),X2r=r(lIe," (CTRL model)"),lIe.forEach(t),z2r=i(le),NM=n(le,"LI",{});var iIe=s(NM);Yve=n(iIe,"STRONG",{});var Vwt=s(Yve);W2r=r(Vwt,"distilbert"),Vwt.forEach(t),Q2r=r(iIe," \u2014 "),DH=n(iIe,"A",{href:!0});var Xwt=s(DH);H2r=r(Xwt,"TFDistilBertForMaskedLM"),Xwt.forEach(t),U2r=r(iIe," (DistilBERT model)"),iIe.forEach(t),J2r=i(le),qM=n(le,"LI",{});var dIe=s(qM);Kve=n(dIe,"STRONG",{});var zwt=s(Kve);Y2r=r(zwt,"electra"),zwt.forEach(t),K2r=r(dIe," \u2014 "),GH=n(dIe,"A",{href:!0});var Wwt=s(GH);Z2r=r(Wwt,"TFElectraForPreTraining"),Wwt.forEach(t),ebr=r(dIe," (ELECTRA model)"),dIe.forEach(t),obr=i(le),jM=n(le,"LI",{});var cIe=s(jM);Zve=n(cIe,"STRONG",{});var Qwt=s(Zve);rbr=r(Qwt,"flaubert"),Qwt.forEach(t),tbr=r(cIe," \u2014 "),OH=n(cIe,"A",{href:!0});var Hwt=s(OH);abr=r(Hwt,"TFFlaubertWithLMHeadModel"),Hwt.forEach(t),nbr=r(cIe," (FlauBERT model)"),cIe.forEach(t),sbr=i(le),DM=n(le,"LI",{});var fIe=s(DM);e0e=n(fIe,"STRONG",{});var Uwt=s(e0e);lbr=r(Uwt,"funnel"),Uwt.forEach(t),ibr=r(fIe," \u2014 "),VH=n(fIe,"A",{href:!0});var Jwt=s(VH);dbr=r(Jwt,"TFFunnelForPreTraining"),Jwt.forEach(t),cbr=r(fIe," (Funnel Transformer model)"),fIe.forEach(t),fbr=i(le),GM=n(le,"LI",{});var mIe=s(GM);o0e=n(mIe,"STRONG",{});var Ywt=s(o0e);mbr=r(Ywt,"gpt2"),Ywt.forEach(t),gbr=r(mIe," \u2014 "),XH=n(mIe,"A",{href:!0});var Kwt=s(XH);hbr=r(Kwt,"TFGPT2LMHeadModel"),Kwt.forEach(t),pbr=r(mIe," (OpenAI GPT-2 model)"),mIe.forEach(t),ubr=i(le),OM=n(le,"LI",{});var gIe=s(OM);r0e=n(gIe,"STRONG",{});var Zwt=s(r0e);_br=r(Zwt,"layoutlm"),Zwt.forEach(t),bbr=r(gIe," \u2014 "),zH=n(gIe,"A",{href:!0});var eAt=s(zH);vbr=r(eAt,"TFLayoutLMForMaskedLM"),eAt.forEach(t),Fbr=r(gIe," (LayoutLM model)"),gIe.forEach(t),Tbr=i(le),VM=n(le,"LI",{});var hIe=s(VM);t0e=n(hIe,"STRONG",{});var oAt=s(t0e);Mbr=r(oAt,"lxmert"),oAt.forEach(t),Ebr=r(hIe," \u2014 "),WH=n(hIe,"A",{href:!0});var rAt=s(WH);Cbr=r(rAt,"TFLxmertForPreTraining"),rAt.forEach(t),wbr=r(hIe," (LXMERT model)"),hIe.forEach(t),Abr=i(le),XM=n(le,"LI",{});var pIe=s(XM);a0e=n(pIe,"STRONG",{});var tAt=s(a0e);Lbr=r(tAt,"mobilebert"),tAt.forEach(t),ybr=r(pIe," \u2014 "),QH=n(pIe,"A",{href:!0});var aAt=s(QH);xbr=r(aAt,"TFMobileBertForPreTraining"),aAt.forEach(t),$br=r(pIe," (MobileBERT model)"),pIe.forEach(t),kbr=i(le),zM=n(le,"LI",{});var uIe=s(zM);n0e=n(uIe,"STRONG",{});var nAt=s(n0e);Sbr=r(nAt,"mpnet"),nAt.forEach(t),Rbr=r(uIe," \u2014 "),HH=n(uIe,"A",{href:!0});var sAt=s(HH);Pbr=r(sAt,"TFMPNetForMaskedLM"),sAt.forEach(t),Bbr=r(uIe," (MPNet model)"),uIe.forEach(t),Ibr=i(le),WM=n(le,"LI",{});var _Ie=s(WM);s0e=n(_Ie,"STRONG",{});var lAt=s(s0e);Nbr=r(lAt,"openai-gpt"),lAt.forEach(t),qbr=r(_Ie," \u2014 "),UH=n(_Ie,"A",{href:!0});var iAt=s(UH);jbr=r(iAt,"TFOpenAIGPTLMHeadModel"),iAt.forEach(t),Dbr=r(_Ie," (OpenAI GPT model)"),_Ie.forEach(t),Gbr=i(le),QM=n(le,"LI",{});var bIe=s(QM);l0e=n(bIe,"STRONG",{});var dAt=s(l0e);Obr=r(dAt,"roberta"),dAt.forEach(t),Vbr=r(bIe," \u2014 "),JH=n(bIe,"A",{href:!0});var cAt=s(JH);Xbr=r(cAt,"TFRobertaForMaskedLM"),cAt.forEach(t),zbr=r(bIe," (RoBERTa model)"),bIe.forEach(t),Wbr=i(le),HM=n(le,"LI",{});var vIe=s(HM);i0e=n(vIe,"STRONG",{});var fAt=s(i0e);Qbr=r(fAt,"t5"),fAt.forEach(t),Hbr=r(vIe," \u2014 "),YH=n(vIe,"A",{href:!0});var mAt=s(YH);Ubr=r(mAt,"TFT5ForConditionalGeneration"),mAt.forEach(t),Jbr=r(vIe," (T5 model)"),vIe.forEach(t),Ybr=i(le),UM=n(le,"LI",{});var FIe=s(UM);d0e=n(FIe,"STRONG",{});var gAt=s(d0e);Kbr=r(gAt,"tapas"),gAt.forEach(t),Zbr=r(FIe," \u2014 "),KH=n(FIe,"A",{href:!0});var hAt=s(KH);evr=r(hAt,"TFTapasForMaskedLM"),hAt.forEach(t),ovr=r(FIe," (TAPAS model)"),FIe.forEach(t),rvr=i(le),JM=n(le,"LI",{});var TIe=s(JM);c0e=n(TIe,"STRONG",{});var pAt=s(c0e);tvr=r(pAt,"transfo-xl"),pAt.forEach(t),avr=r(TIe," \u2014 "),ZH=n(TIe,"A",{href:!0});var uAt=s(ZH);nvr=r(uAt,"TFTransfoXLLMHeadModel"),uAt.forEach(t),svr=r(TIe," (Transformer-XL model)"),TIe.forEach(t),lvr=i(le),YM=n(le,"LI",{});var MIe=s(YM);f0e=n(MIe,"STRONG",{});var _At=s(f0e);ivr=r(_At,"vit_mae"),_At.forEach(t),dvr=r(MIe," \u2014 "),eU=n(MIe,"A",{href:!0});var bAt=s(eU);cvr=r(bAt,"TFViTMAEForPreTraining"),bAt.forEach(t),fvr=r(MIe," (ViTMAE model)"),MIe.forEach(t),mvr=i(le),KM=n(le,"LI",{});var EIe=s(KM);m0e=n(EIe,"STRONG",{});var vAt=s(m0e);gvr=r(vAt,"xlm"),vAt.forEach(t),hvr=r(EIe," \u2014 "),oU=n(EIe,"A",{href:!0});var FAt=s(oU);pvr=r(FAt,"TFXLMWithLMHeadModel"),FAt.forEach(t),uvr=r(EIe," (XLM model)"),EIe.forEach(t),_vr=i(le),ZM=n(le,"LI",{});var CIe=s(ZM);g0e=n(CIe,"STRONG",{});var TAt=s(g0e);bvr=r(TAt,"xlm-roberta"),TAt.forEach(t),vvr=r(CIe," \u2014 "),rU=n(CIe,"A",{href:!0});var MAt=s(rU);Fvr=r(MAt,"TFXLMRobertaForMaskedLM"),MAt.forEach(t),Tvr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),Mvr=i(le),e4=n(le,"LI",{});var wIe=s(e4);h0e=n(wIe,"STRONG",{});var EAt=s(h0e);Evr=r(EAt,"xlnet"),EAt.forEach(t),Cvr=r(wIe," \u2014 "),tU=n(wIe,"A",{href:!0});var CAt=s(tU);wvr=r(CAt,"TFXLNetLMHeadModel"),CAt.forEach(t),Avr=r(wIe," (XLNet model)"),wIe.forEach(t),le.forEach(t),Lvr=i(wl),T(o4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),gOe=i(f),nc=n(f,"H2",{class:!0});var TXe=s(nc);r4=n(TXe,"A",{id:!0,class:!0,href:!0});var wAt=s(r4);p0e=n(wAt,"SPAN",{});var AAt=s(p0e);T(u9.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),yvr=i(TXe),u0e=n(TXe,"SPAN",{});var LAt=s(u0e);xvr=r(LAt,"TFAutoModelForCausalLM"),LAt.forEach(t),TXe.forEach(t),hOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(_9.$$.fragment,Al),$vr=i(Al),sc=n(Al,"P",{});var Koe=s(sc);kvr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aU=n(Koe,"A",{href:!0});var yAt=s(aU);Svr=r(yAt,"from_pretrained()"),yAt.forEach(t),Rvr=r(Koe," class method or the "),nU=n(Koe,"A",{href:!0});var xAt=s(nU);Pvr=r(xAt,"from_config()"),xAt.forEach(t),Bvr=r(Koe,` class
method.`),Koe.forEach(t),Ivr=i(Al),b9=n(Al,"P",{});var MXe=s(b9);Nvr=r(MXe,"This class cannot be instantiated directly using "),_0e=n(MXe,"CODE",{});var $At=s(_0e);qvr=r($At,"__init__()"),$At.forEach(t),jvr=r(MXe," (throws an error)."),MXe.forEach(t),Dvr=i(Al),St=n(Al,"DIV",{class:!0});var T6=s(St);T(v9.$$.fragment,T6),Gvr=i(T6),b0e=n(T6,"P",{});var kAt=s(b0e);Ovr=r(kAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kAt.forEach(t),Vvr=i(T6),lc=n(T6,"P",{});var Zoe=s(lc);Xvr=r(Zoe,`Note:
Loading a model from its configuration file does `),v0e=n(Zoe,"STRONG",{});var SAt=s(v0e);zvr=r(SAt,"not"),SAt.forEach(t),Wvr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Zoe,"A",{href:!0});var RAt=s(sU);Qvr=r(RAt,"from_pretrained()"),RAt.forEach(t),Hvr=r(Zoe," to load the model weights."),Zoe.forEach(t),Uvr=i(T6),T(t4.$$.fragment,T6),T6.forEach(t),Jvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(F9.$$.fragment,Ll),Yvr=i(Ll),F0e=n(Ll,"P",{});var PAt=s(F0e);Kvr=r(PAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PAt.forEach(t),Zvr=i(Ll),nn=n(Ll,"P",{});var M6=s(nn);e0r=r(M6,"The model class to instantiate is selected based on the "),T0e=n(M6,"CODE",{});var BAt=s(T0e);o0r=r(BAt,"model_type"),BAt.forEach(t),r0r=r(M6,` property of the config object (either
passed as an argument or loaded from `),M0e=n(M6,"CODE",{});var IAt=s(M0e);t0r=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),a0r=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=n(M6,"CODE",{});var NAt=s(E0e);n0r=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),s0r=r(M6,":"),M6.forEach(t),l0r=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);a4=n(Ce,"LI",{});var AIe=s(a4);C0e=n(AIe,"STRONG",{});var qAt=s(C0e);i0r=r(qAt,"bert"),qAt.forEach(t),d0r=r(AIe," \u2014 "),lU=n(AIe,"A",{href:!0});var jAt=s(lU);c0r=r(jAt,"TFBertLMHeadModel"),jAt.forEach(t),f0r=r(AIe," (BERT model)"),AIe.forEach(t),m0r=i(Ce),n4=n(Ce,"LI",{});var LIe=s(n4);w0e=n(LIe,"STRONG",{});var DAt=s(w0e);g0r=r(DAt,"camembert"),DAt.forEach(t),h0r=r(LIe," \u2014 "),iU=n(LIe,"A",{href:!0});var GAt=s(iU);p0r=r(GAt,"TFCamembertForCausalLM"),GAt.forEach(t),u0r=r(LIe," (CamemBERT model)"),LIe.forEach(t),_0r=i(Ce),s4=n(Ce,"LI",{});var yIe=s(s4);A0e=n(yIe,"STRONG",{});var OAt=s(A0e);b0r=r(OAt,"ctrl"),OAt.forEach(t),v0r=r(yIe," \u2014 "),dU=n(yIe,"A",{href:!0});var VAt=s(dU);F0r=r(VAt,"TFCTRLLMHeadModel"),VAt.forEach(t),T0r=r(yIe," (CTRL model)"),yIe.forEach(t),M0r=i(Ce),l4=n(Ce,"LI",{});var xIe=s(l4);L0e=n(xIe,"STRONG",{});var XAt=s(L0e);E0r=r(XAt,"gpt2"),XAt.forEach(t),C0r=r(xIe," \u2014 "),cU=n(xIe,"A",{href:!0});var zAt=s(cU);w0r=r(zAt,"TFGPT2LMHeadModel"),zAt.forEach(t),A0r=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),L0r=i(Ce),i4=n(Ce,"LI",{});var $Ie=s(i4);y0e=n($Ie,"STRONG",{});var WAt=s(y0e);y0r=r(WAt,"gptj"),WAt.forEach(t),x0r=r($Ie," \u2014 "),fU=n($Ie,"A",{href:!0});var QAt=s(fU);$0r=r(QAt,"TFGPTJForCausalLM"),QAt.forEach(t),k0r=r($Ie," (GPT-J model)"),$Ie.forEach(t),S0r=i(Ce),d4=n(Ce,"LI",{});var kIe=s(d4);x0e=n(kIe,"STRONG",{});var HAt=s(x0e);R0r=r(HAt,"openai-gpt"),HAt.forEach(t),P0r=r(kIe," \u2014 "),mU=n(kIe,"A",{href:!0});var UAt=s(mU);B0r=r(UAt,"TFOpenAIGPTLMHeadModel"),UAt.forEach(t),I0r=r(kIe," (OpenAI GPT model)"),kIe.forEach(t),N0r=i(Ce),c4=n(Ce,"LI",{});var SIe=s(c4);$0e=n(SIe,"STRONG",{});var JAt=s($0e);q0r=r(JAt,"opt"),JAt.forEach(t),j0r=r(SIe," \u2014 "),gU=n(SIe,"A",{href:!0});var YAt=s(gU);D0r=r(YAt,"TFOPTForCausalLM"),YAt.forEach(t),G0r=r(SIe," (OPT model)"),SIe.forEach(t),O0r=i(Ce),f4=n(Ce,"LI",{});var RIe=s(f4);k0e=n(RIe,"STRONG",{});var KAt=s(k0e);V0r=r(KAt,"rembert"),KAt.forEach(t),X0r=r(RIe," \u2014 "),hU=n(RIe,"A",{href:!0});var ZAt=s(hU);z0r=r(ZAt,"TFRemBertForCausalLM"),ZAt.forEach(t),W0r=r(RIe," (RemBERT model)"),RIe.forEach(t),Q0r=i(Ce),m4=n(Ce,"LI",{});var PIe=s(m4);S0e=n(PIe,"STRONG",{});var e6t=s(S0e);H0r=r(e6t,"roberta"),e6t.forEach(t),U0r=r(PIe," \u2014 "),pU=n(PIe,"A",{href:!0});var o6t=s(pU);J0r=r(o6t,"TFRobertaForCausalLM"),o6t.forEach(t),Y0r=r(PIe," (RoBERTa model)"),PIe.forEach(t),K0r=i(Ce),g4=n(Ce,"LI",{});var BIe=s(g4);R0e=n(BIe,"STRONG",{});var r6t=s(R0e);Z0r=r(r6t,"roformer"),r6t.forEach(t),eFr=r(BIe," \u2014 "),uU=n(BIe,"A",{href:!0});var t6t=s(uU);oFr=r(t6t,"TFRoFormerForCausalLM"),t6t.forEach(t),rFr=r(BIe," (RoFormer model)"),BIe.forEach(t),tFr=i(Ce),h4=n(Ce,"LI",{});var IIe=s(h4);P0e=n(IIe,"STRONG",{});var a6t=s(P0e);aFr=r(a6t,"transfo-xl"),a6t.forEach(t),nFr=r(IIe," \u2014 "),_U=n(IIe,"A",{href:!0});var n6t=s(_U);sFr=r(n6t,"TFTransfoXLLMHeadModel"),n6t.forEach(t),lFr=r(IIe," (Transformer-XL model)"),IIe.forEach(t),iFr=i(Ce),p4=n(Ce,"LI",{});var NIe=s(p4);B0e=n(NIe,"STRONG",{});var s6t=s(B0e);dFr=r(s6t,"xlm"),s6t.forEach(t),cFr=r(NIe," \u2014 "),bU=n(NIe,"A",{href:!0});var l6t=s(bU);fFr=r(l6t,"TFXLMWithLMHeadModel"),l6t.forEach(t),mFr=r(NIe," (XLM model)"),NIe.forEach(t),gFr=i(Ce),u4=n(Ce,"LI",{});var qIe=s(u4);I0e=n(qIe,"STRONG",{});var i6t=s(I0e);hFr=r(i6t,"xlnet"),i6t.forEach(t),pFr=r(qIe," \u2014 "),vU=n(qIe,"A",{href:!0});var d6t=s(vU);uFr=r(d6t,"TFXLNetLMHeadModel"),d6t.forEach(t),_Fr=r(qIe," (XLNet model)"),qIe.forEach(t),Ce.forEach(t),bFr=i(Ll),T(_4.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),pOe=i(f),ic=n(f,"H2",{class:!0});var EXe=s(ic);b4=n(EXe,"A",{id:!0,class:!0,href:!0});var c6t=s(b4);N0e=n(c6t,"SPAN",{});var f6t=s(N0e);T(T9.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),vFr=i(EXe),q0e=n(EXe,"SPAN",{});var m6t=s(q0e);FFr=r(m6t,"TFAutoModelForImageClassification"),m6t.forEach(t),EXe.forEach(t),uOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(M9.$$.fragment,yl),TFr=i(yl),dc=n(yl,"P",{});var ere=s(dc);MFr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FU=n(ere,"A",{href:!0});var g6t=s(FU);EFr=r(g6t,"from_pretrained()"),g6t.forEach(t),CFr=r(ere," class method or the "),TU=n(ere,"A",{href:!0});var h6t=s(TU);wFr=r(h6t,"from_config()"),h6t.forEach(t),AFr=r(ere,` class
method.`),ere.forEach(t),LFr=i(yl),E9=n(yl,"P",{});var CXe=s(E9);yFr=r(CXe,"This class cannot be instantiated directly using "),j0e=n(CXe,"CODE",{});var p6t=s(j0e);xFr=r(p6t,"__init__()"),p6t.forEach(t),$Fr=r(CXe," (throws an error)."),CXe.forEach(t),kFr=i(yl),Rt=n(yl,"DIV",{class:!0});var E6=s(Rt);T(C9.$$.fragment,E6),SFr=i(E6),D0e=n(E6,"P",{});var u6t=s(D0e);RFr=r(u6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),u6t.forEach(t),PFr=i(E6),cc=n(E6,"P",{});var ore=s(cc);BFr=r(ore,`Note:
Loading a model from its configuration file does `),G0e=n(ore,"STRONG",{});var _6t=s(G0e);IFr=r(_6t,"not"),_6t.forEach(t),NFr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(ore,"A",{href:!0});var b6t=s(MU);qFr=r(b6t,"from_pretrained()"),b6t.forEach(t),jFr=r(ore," to load the model weights."),ore.forEach(t),DFr=i(E6),T(v4.$$.fragment,E6),E6.forEach(t),GFr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(w9.$$.fragment,xl),OFr=i(xl),O0e=n(xl,"P",{});var v6t=s(O0e);VFr=r(v6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v6t.forEach(t),XFr=i(xl),sn=n(xl,"P",{});var C6=s(sn);zFr=r(C6,"The model class to instantiate is selected based on the "),V0e=n(C6,"CODE",{});var F6t=s(V0e);WFr=r(F6t,"model_type"),F6t.forEach(t),QFr=r(C6,` property of the config object (either
passed as an argument or loaded from `),X0e=n(C6,"CODE",{});var T6t=s(X0e);HFr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),UFr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=n(C6,"CODE",{});var M6t=s(z0e);JFr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),YFr=r(C6,":"),C6.forEach(t),KFr=i(xl),ln=n(xl,"UL",{});var w6=s(ln);F4=n(w6,"LI",{});var jIe=s(F4);W0e=n(jIe,"STRONG",{});var E6t=s(W0e);ZFr=r(E6t,"convnext"),E6t.forEach(t),eTr=r(jIe," \u2014 "),EU=n(jIe,"A",{href:!0});var C6t=s(EU);oTr=r(C6t,"TFConvNextForImageClassification"),C6t.forEach(t),rTr=r(jIe," (ConvNeXT model)"),jIe.forEach(t),tTr=i(w6),T4=n(w6,"LI",{});var DIe=s(T4);Q0e=n(DIe,"STRONG",{});var w6t=s(Q0e);aTr=r(w6t,"data2vec-vision"),w6t.forEach(t),nTr=r(DIe," \u2014 "),CU=n(DIe,"A",{href:!0});var A6t=s(CU);sTr=r(A6t,"TFData2VecVisionForImageClassification"),A6t.forEach(t),lTr=r(DIe," (Data2VecVision model)"),DIe.forEach(t),iTr=i(w6),M4=n(w6,"LI",{});var GIe=s(M4);H0e=n(GIe,"STRONG",{});var L6t=s(H0e);dTr=r(L6t,"swin"),L6t.forEach(t),cTr=r(GIe," \u2014 "),wU=n(GIe,"A",{href:!0});var y6t=s(wU);fTr=r(y6t,"TFSwinForImageClassification"),y6t.forEach(t),mTr=r(GIe," (Swin Transformer model)"),GIe.forEach(t),gTr=i(w6),E4=n(w6,"LI",{});var OIe=s(E4);U0e=n(OIe,"STRONG",{});var x6t=s(U0e);hTr=r(x6t,"vit"),x6t.forEach(t),pTr=r(OIe," \u2014 "),AU=n(OIe,"A",{href:!0});var $6t=s(AU);uTr=r($6t,"TFViTForImageClassification"),$6t.forEach(t),_Tr=r(OIe," (ViT model)"),OIe.forEach(t),w6.forEach(t),bTr=i(xl),T(C4.$$.fragment,xl),xl.forEach(t),yl.forEach(t),_Oe=i(f),fc=n(f,"H2",{class:!0});var wXe=s(fc);w4=n(wXe,"A",{id:!0,class:!0,href:!0});var k6t=s(w4);J0e=n(k6t,"SPAN",{});var S6t=s(J0e);T(A9.$$.fragment,S6t),S6t.forEach(t),k6t.forEach(t),vTr=i(wXe),Y0e=n(wXe,"SPAN",{});var R6t=s(Y0e);FTr=r(R6t,"TFAutoModelForMaskedLM"),R6t.forEach(t),wXe.forEach(t),bOe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(L9.$$.fragment,$l),TTr=i($l),mc=n($l,"P",{});var rre=s(mc);MTr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LU=n(rre,"A",{href:!0});var P6t=s(LU);ETr=r(P6t,"from_pretrained()"),P6t.forEach(t),CTr=r(rre," class method or the "),yU=n(rre,"A",{href:!0});var B6t=s(yU);wTr=r(B6t,"from_config()"),B6t.forEach(t),ATr=r(rre,` class
method.`),rre.forEach(t),LTr=i($l),y9=n($l,"P",{});var AXe=s(y9);yTr=r(AXe,"This class cannot be instantiated directly using "),K0e=n(AXe,"CODE",{});var I6t=s(K0e);xTr=r(I6t,"__init__()"),I6t.forEach(t),$Tr=r(AXe," (throws an error)."),AXe.forEach(t),kTr=i($l),Pt=n($l,"DIV",{class:!0});var A6=s(Pt);T(x9.$$.fragment,A6),STr=i(A6),Z0e=n(A6,"P",{});var N6t=s(Z0e);RTr=r(N6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N6t.forEach(t),PTr=i(A6),gc=n(A6,"P",{});var tre=s(gc);BTr=r(tre,`Note:
Loading a model from its configuration file does `),eFe=n(tre,"STRONG",{});var q6t=s(eFe);ITr=r(q6t,"not"),q6t.forEach(t),NTr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(tre,"A",{href:!0});var j6t=s(xU);qTr=r(j6t,"from_pretrained()"),j6t.forEach(t),jTr=r(tre," to load the model weights."),tre.forEach(t),DTr=i(A6),T(A4.$$.fragment,A6),A6.forEach(t),GTr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T($9.$$.fragment,kl),OTr=i(kl),oFe=n(kl,"P",{});var D6t=s(oFe);VTr=r(D6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D6t.forEach(t),XTr=i(kl),dn=n(kl,"P",{});var L6=s(dn);zTr=r(L6,"The model class to instantiate is selected based on the "),rFe=n(L6,"CODE",{});var G6t=s(rFe);WTr=r(G6t,"model_type"),G6t.forEach(t),QTr=r(L6,` property of the config object (either
passed as an argument or loaded from `),tFe=n(L6,"CODE",{});var O6t=s(tFe);HTr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),UTr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(L6,"CODE",{});var V6t=s(aFe);JTr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),YTr=r(L6,":"),L6.forEach(t),KTr=i(kl),ie=n(kl,"UL",{});var fe=s(ie);L4=n(fe,"LI",{});var VIe=s(L4);nFe=n(VIe,"STRONG",{});var X6t=s(nFe);ZTr=r(X6t,"albert"),X6t.forEach(t),eMr=r(VIe," \u2014 "),$U=n(VIe,"A",{href:!0});var z6t=s($U);oMr=r(z6t,"TFAlbertForMaskedLM"),z6t.forEach(t),rMr=r(VIe," (ALBERT model)"),VIe.forEach(t),tMr=i(fe),y4=n(fe,"LI",{});var XIe=s(y4);sFe=n(XIe,"STRONG",{});var W6t=s(sFe);aMr=r(W6t,"bert"),W6t.forEach(t),nMr=r(XIe," \u2014 "),kU=n(XIe,"A",{href:!0});var Q6t=s(kU);sMr=r(Q6t,"TFBertForMaskedLM"),Q6t.forEach(t),lMr=r(XIe," (BERT model)"),XIe.forEach(t),iMr=i(fe),x4=n(fe,"LI",{});var zIe=s(x4);lFe=n(zIe,"STRONG",{});var H6t=s(lFe);dMr=r(H6t,"camembert"),H6t.forEach(t),cMr=r(zIe," \u2014 "),SU=n(zIe,"A",{href:!0});var U6t=s(SU);fMr=r(U6t,"TFCamembertForMaskedLM"),U6t.forEach(t),mMr=r(zIe," (CamemBERT model)"),zIe.forEach(t),gMr=i(fe),$4=n(fe,"LI",{});var WIe=s($4);iFe=n(WIe,"STRONG",{});var J6t=s(iFe);hMr=r(J6t,"convbert"),J6t.forEach(t),pMr=r(WIe," \u2014 "),RU=n(WIe,"A",{href:!0});var Y6t=s(RU);uMr=r(Y6t,"TFConvBertForMaskedLM"),Y6t.forEach(t),_Mr=r(WIe," (ConvBERT model)"),WIe.forEach(t),bMr=i(fe),k4=n(fe,"LI",{});var QIe=s(k4);dFe=n(QIe,"STRONG",{});var K6t=s(dFe);vMr=r(K6t,"deberta"),K6t.forEach(t),FMr=r(QIe," \u2014 "),PU=n(QIe,"A",{href:!0});var Z6t=s(PU);TMr=r(Z6t,"TFDebertaForMaskedLM"),Z6t.forEach(t),MMr=r(QIe," (DeBERTa model)"),QIe.forEach(t),EMr=i(fe),S4=n(fe,"LI",{});var HIe=s(S4);cFe=n(HIe,"STRONG",{});var eLt=s(cFe);CMr=r(eLt,"deberta-v2"),eLt.forEach(t),wMr=r(HIe," \u2014 "),BU=n(HIe,"A",{href:!0});var oLt=s(BU);AMr=r(oLt,"TFDebertaV2ForMaskedLM"),oLt.forEach(t),LMr=r(HIe," (DeBERTa-v2 model)"),HIe.forEach(t),yMr=i(fe),R4=n(fe,"LI",{});var UIe=s(R4);fFe=n(UIe,"STRONG",{});var rLt=s(fFe);xMr=r(rLt,"distilbert"),rLt.forEach(t),$Mr=r(UIe," \u2014 "),IU=n(UIe,"A",{href:!0});var tLt=s(IU);kMr=r(tLt,"TFDistilBertForMaskedLM"),tLt.forEach(t),SMr=r(UIe," (DistilBERT model)"),UIe.forEach(t),RMr=i(fe),P4=n(fe,"LI",{});var JIe=s(P4);mFe=n(JIe,"STRONG",{});var aLt=s(mFe);PMr=r(aLt,"electra"),aLt.forEach(t),BMr=r(JIe," \u2014 "),NU=n(JIe,"A",{href:!0});var nLt=s(NU);IMr=r(nLt,"TFElectraForMaskedLM"),nLt.forEach(t),NMr=r(JIe," (ELECTRA model)"),JIe.forEach(t),qMr=i(fe),B4=n(fe,"LI",{});var YIe=s(B4);gFe=n(YIe,"STRONG",{});var sLt=s(gFe);jMr=r(sLt,"flaubert"),sLt.forEach(t),DMr=r(YIe," \u2014 "),qU=n(YIe,"A",{href:!0});var lLt=s(qU);GMr=r(lLt,"TFFlaubertWithLMHeadModel"),lLt.forEach(t),OMr=r(YIe," (FlauBERT model)"),YIe.forEach(t),VMr=i(fe),I4=n(fe,"LI",{});var KIe=s(I4);hFe=n(KIe,"STRONG",{});var iLt=s(hFe);XMr=r(iLt,"funnel"),iLt.forEach(t),zMr=r(KIe," \u2014 "),jU=n(KIe,"A",{href:!0});var dLt=s(jU);WMr=r(dLt,"TFFunnelForMaskedLM"),dLt.forEach(t),QMr=r(KIe," (Funnel Transformer model)"),KIe.forEach(t),HMr=i(fe),N4=n(fe,"LI",{});var ZIe=s(N4);pFe=n(ZIe,"STRONG",{});var cLt=s(pFe);UMr=r(cLt,"layoutlm"),cLt.forEach(t),JMr=r(ZIe," \u2014 "),DU=n(ZIe,"A",{href:!0});var fLt=s(DU);YMr=r(fLt,"TFLayoutLMForMaskedLM"),fLt.forEach(t),KMr=r(ZIe," (LayoutLM model)"),ZIe.forEach(t),ZMr=i(fe),q4=n(fe,"LI",{});var eNe=s(q4);uFe=n(eNe,"STRONG",{});var mLt=s(uFe);e4r=r(mLt,"longformer"),mLt.forEach(t),o4r=r(eNe," \u2014 "),GU=n(eNe,"A",{href:!0});var gLt=s(GU);r4r=r(gLt,"TFLongformerForMaskedLM"),gLt.forEach(t),t4r=r(eNe," (Longformer model)"),eNe.forEach(t),a4r=i(fe),j4=n(fe,"LI",{});var oNe=s(j4);_Fe=n(oNe,"STRONG",{});var hLt=s(_Fe);n4r=r(hLt,"mobilebert"),hLt.forEach(t),s4r=r(oNe," \u2014 "),OU=n(oNe,"A",{href:!0});var pLt=s(OU);l4r=r(pLt,"TFMobileBertForMaskedLM"),pLt.forEach(t),i4r=r(oNe," (MobileBERT model)"),oNe.forEach(t),d4r=i(fe),D4=n(fe,"LI",{});var rNe=s(D4);bFe=n(rNe,"STRONG",{});var uLt=s(bFe);c4r=r(uLt,"mpnet"),uLt.forEach(t),f4r=r(rNe," \u2014 "),VU=n(rNe,"A",{href:!0});var _Lt=s(VU);m4r=r(_Lt,"TFMPNetForMaskedLM"),_Lt.forEach(t),g4r=r(rNe," (MPNet model)"),rNe.forEach(t),h4r=i(fe),G4=n(fe,"LI",{});var tNe=s(G4);vFe=n(tNe,"STRONG",{});var bLt=s(vFe);p4r=r(bLt,"rembert"),bLt.forEach(t),u4r=r(tNe," \u2014 "),XU=n(tNe,"A",{href:!0});var vLt=s(XU);_4r=r(vLt,"TFRemBertForMaskedLM"),vLt.forEach(t),b4r=r(tNe," (RemBERT model)"),tNe.forEach(t),v4r=i(fe),O4=n(fe,"LI",{});var aNe=s(O4);FFe=n(aNe,"STRONG",{});var FLt=s(FFe);F4r=r(FLt,"roberta"),FLt.forEach(t),T4r=r(aNe," \u2014 "),zU=n(aNe,"A",{href:!0});var TLt=s(zU);M4r=r(TLt,"TFRobertaForMaskedLM"),TLt.forEach(t),E4r=r(aNe," (RoBERTa model)"),aNe.forEach(t),C4r=i(fe),V4=n(fe,"LI",{});var nNe=s(V4);TFe=n(nNe,"STRONG",{});var MLt=s(TFe);w4r=r(MLt,"roformer"),MLt.forEach(t),A4r=r(nNe," \u2014 "),WU=n(nNe,"A",{href:!0});var ELt=s(WU);L4r=r(ELt,"TFRoFormerForMaskedLM"),ELt.forEach(t),y4r=r(nNe," (RoFormer model)"),nNe.forEach(t),x4r=i(fe),X4=n(fe,"LI",{});var sNe=s(X4);MFe=n(sNe,"STRONG",{});var CLt=s(MFe);$4r=r(CLt,"tapas"),CLt.forEach(t),k4r=r(sNe," \u2014 "),QU=n(sNe,"A",{href:!0});var wLt=s(QU);S4r=r(wLt,"TFTapasForMaskedLM"),wLt.forEach(t),R4r=r(sNe," (TAPAS model)"),sNe.forEach(t),P4r=i(fe),z4=n(fe,"LI",{});var lNe=s(z4);EFe=n(lNe,"STRONG",{});var ALt=s(EFe);B4r=r(ALt,"xlm"),ALt.forEach(t),I4r=r(lNe," \u2014 "),HU=n(lNe,"A",{href:!0});var LLt=s(HU);N4r=r(LLt,"TFXLMWithLMHeadModel"),LLt.forEach(t),q4r=r(lNe," (XLM model)"),lNe.forEach(t),j4r=i(fe),W4=n(fe,"LI",{});var iNe=s(W4);CFe=n(iNe,"STRONG",{});var yLt=s(CFe);D4r=r(yLt,"xlm-roberta"),yLt.forEach(t),G4r=r(iNe," \u2014 "),UU=n(iNe,"A",{href:!0});var xLt=s(UU);O4r=r(xLt,"TFXLMRobertaForMaskedLM"),xLt.forEach(t),V4r=r(iNe," (XLM-RoBERTa model)"),iNe.forEach(t),fe.forEach(t),X4r=i(kl),T(Q4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),vOe=i(f),hc=n(f,"H2",{class:!0});var LXe=s(hc);H4=n(LXe,"A",{id:!0,class:!0,href:!0});var $Lt=s(H4);wFe=n($Lt,"SPAN",{});var kLt=s(wFe);T(k9.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),z4r=i(LXe),AFe=n(LXe,"SPAN",{});var SLt=s(AFe);W4r=r(SLt,"TFAutoModelForSeq2SeqLM"),SLt.forEach(t),LXe.forEach(t),FOe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(S9.$$.fragment,Sl),Q4r=i(Sl),pc=n(Sl,"P",{});var are=s(pc);H4r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JU=n(are,"A",{href:!0});var RLt=s(JU);U4r=r(RLt,"from_pretrained()"),RLt.forEach(t),J4r=r(are," class method or the "),YU=n(are,"A",{href:!0});var PLt=s(YU);Y4r=r(PLt,"from_config()"),PLt.forEach(t),K4r=r(are,` class
method.`),are.forEach(t),Z4r=i(Sl),R9=n(Sl,"P",{});var yXe=s(R9);eEr=r(yXe,"This class cannot be instantiated directly using "),LFe=n(yXe,"CODE",{});var BLt=s(LFe);oEr=r(BLt,"__init__()"),BLt.forEach(t),rEr=r(yXe," (throws an error)."),yXe.forEach(t),tEr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var y6=s(Bt);T(P9.$$.fragment,y6),aEr=i(y6),yFe=n(y6,"P",{});var ILt=s(yFe);nEr=r(ILt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ILt.forEach(t),sEr=i(y6),uc=n(y6,"P",{});var nre=s(uc);lEr=r(nre,`Note:
Loading a model from its configuration file does `),xFe=n(nre,"STRONG",{});var NLt=s(xFe);iEr=r(NLt,"not"),NLt.forEach(t),dEr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(nre,"A",{href:!0});var qLt=s(KU);cEr=r(qLt,"from_pretrained()"),qLt.forEach(t),fEr=r(nre," to load the model weights."),nre.forEach(t),mEr=i(y6),T(U4.$$.fragment,y6),y6.forEach(t),gEr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(B9.$$.fragment,Rl),hEr=i(Rl),$Fe=n(Rl,"P",{});var jLt=s($Fe);pEr=r(jLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jLt.forEach(t),uEr=i(Rl),cn=n(Rl,"P",{});var x6=s(cn);_Er=r(x6,"The model class to instantiate is selected based on the "),kFe=n(x6,"CODE",{});var DLt=s(kFe);bEr=r(DLt,"model_type"),DLt.forEach(t),vEr=r(x6,` property of the config object (either
passed as an argument or loaded from `),SFe=n(x6,"CODE",{});var GLt=s(SFe);FEr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),TEr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(x6,"CODE",{});var OLt=s(RFe);MEr=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),EEr=r(x6,":"),x6.forEach(t),CEr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);J4=n(Ie,"LI",{});var dNe=s(J4);PFe=n(dNe,"STRONG",{});var VLt=s(PFe);wEr=r(VLt,"bart"),VLt.forEach(t),AEr=r(dNe," \u2014 "),ZU=n(dNe,"A",{href:!0});var XLt=s(ZU);LEr=r(XLt,"TFBartForConditionalGeneration"),XLt.forEach(t),yEr=r(dNe," (BART model)"),dNe.forEach(t),xEr=i(Ie),Y4=n(Ie,"LI",{});var cNe=s(Y4);BFe=n(cNe,"STRONG",{});var zLt=s(BFe);$Er=r(zLt,"blenderbot"),zLt.forEach(t),kEr=r(cNe," \u2014 "),eJ=n(cNe,"A",{href:!0});var WLt=s(eJ);SEr=r(WLt,"TFBlenderbotForConditionalGeneration"),WLt.forEach(t),REr=r(cNe," (Blenderbot model)"),cNe.forEach(t),PEr=i(Ie),K4=n(Ie,"LI",{});var fNe=s(K4);IFe=n(fNe,"STRONG",{});var QLt=s(IFe);BEr=r(QLt,"blenderbot-small"),QLt.forEach(t),IEr=r(fNe," \u2014 "),oJ=n(fNe,"A",{href:!0});var HLt=s(oJ);NEr=r(HLt,"TFBlenderbotSmallForConditionalGeneration"),HLt.forEach(t),qEr=r(fNe," (BlenderbotSmall model)"),fNe.forEach(t),jEr=i(Ie),Z4=n(Ie,"LI",{});var mNe=s(Z4);NFe=n(mNe,"STRONG",{});var ULt=s(NFe);DEr=r(ULt,"encoder-decoder"),ULt.forEach(t),GEr=r(mNe," \u2014 "),rJ=n(mNe,"A",{href:!0});var JLt=s(rJ);OEr=r(JLt,"TFEncoderDecoderModel"),JLt.forEach(t),VEr=r(mNe," (Encoder decoder model)"),mNe.forEach(t),XEr=i(Ie),eE=n(Ie,"LI",{});var gNe=s(eE);qFe=n(gNe,"STRONG",{});var YLt=s(qFe);zEr=r(YLt,"led"),YLt.forEach(t),WEr=r(gNe," \u2014 "),tJ=n(gNe,"A",{href:!0});var KLt=s(tJ);QEr=r(KLt,"TFLEDForConditionalGeneration"),KLt.forEach(t),HEr=r(gNe," (LED model)"),gNe.forEach(t),UEr=i(Ie),oE=n(Ie,"LI",{});var hNe=s(oE);jFe=n(hNe,"STRONG",{});var ZLt=s(jFe);JEr=r(ZLt,"marian"),ZLt.forEach(t),YEr=r(hNe," \u2014 "),aJ=n(hNe,"A",{href:!0});var eyt=s(aJ);KEr=r(eyt,"TFMarianMTModel"),eyt.forEach(t),ZEr=r(hNe," (Marian model)"),hNe.forEach(t),eCr=i(Ie),rE=n(Ie,"LI",{});var pNe=s(rE);DFe=n(pNe,"STRONG",{});var oyt=s(DFe);oCr=r(oyt,"mbart"),oyt.forEach(t),rCr=r(pNe," \u2014 "),nJ=n(pNe,"A",{href:!0});var ryt=s(nJ);tCr=r(ryt,"TFMBartForConditionalGeneration"),ryt.forEach(t),aCr=r(pNe," (mBART model)"),pNe.forEach(t),nCr=i(Ie),tE=n(Ie,"LI",{});var uNe=s(tE);GFe=n(uNe,"STRONG",{});var tyt=s(GFe);sCr=r(tyt,"mt5"),tyt.forEach(t),lCr=r(uNe," \u2014 "),sJ=n(uNe,"A",{href:!0});var ayt=s(sJ);iCr=r(ayt,"TFMT5ForConditionalGeneration"),ayt.forEach(t),dCr=r(uNe," (MT5 model)"),uNe.forEach(t),cCr=i(Ie),aE=n(Ie,"LI",{});var _Ne=s(aE);OFe=n(_Ne,"STRONG",{});var nyt=s(OFe);fCr=r(nyt,"pegasus"),nyt.forEach(t),mCr=r(_Ne," \u2014 "),lJ=n(_Ne,"A",{href:!0});var syt=s(lJ);gCr=r(syt,"TFPegasusForConditionalGeneration"),syt.forEach(t),hCr=r(_Ne," (Pegasus model)"),_Ne.forEach(t),pCr=i(Ie),nE=n(Ie,"LI",{});var bNe=s(nE);VFe=n(bNe,"STRONG",{});var lyt=s(VFe);uCr=r(lyt,"t5"),lyt.forEach(t),_Cr=r(bNe," \u2014 "),iJ=n(bNe,"A",{href:!0});var iyt=s(iJ);bCr=r(iyt,"TFT5ForConditionalGeneration"),iyt.forEach(t),vCr=r(bNe," (T5 model)"),bNe.forEach(t),Ie.forEach(t),FCr=i(Rl),T(sE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),TOe=i(f),_c=n(f,"H2",{class:!0});var xXe=s(_c);lE=n(xXe,"A",{id:!0,class:!0,href:!0});var dyt=s(lE);XFe=n(dyt,"SPAN",{});var cyt=s(XFe);T(I9.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),TCr=i(xXe),zFe=n(xXe,"SPAN",{});var fyt=s(zFe);MCr=r(fyt,"TFAutoModelForSequenceClassification"),fyt.forEach(t),xXe.forEach(t),MOe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(N9.$$.fragment,Pl),ECr=i(Pl),bc=n(Pl,"P",{});var sre=s(bc);CCr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dJ=n(sre,"A",{href:!0});var myt=s(dJ);wCr=r(myt,"from_pretrained()"),myt.forEach(t),ACr=r(sre," class method or the "),cJ=n(sre,"A",{href:!0});var gyt=s(cJ);LCr=r(gyt,"from_config()"),gyt.forEach(t),yCr=r(sre,` class
method.`),sre.forEach(t),xCr=i(Pl),q9=n(Pl,"P",{});var $Xe=s(q9);$Cr=r($Xe,"This class cannot be instantiated directly using "),WFe=n($Xe,"CODE",{});var hyt=s(WFe);kCr=r(hyt,"__init__()"),hyt.forEach(t),SCr=r($Xe," (throws an error)."),$Xe.forEach(t),RCr=i(Pl),It=n(Pl,"DIV",{class:!0});var $6=s(It);T(j9.$$.fragment,$6),PCr=i($6),QFe=n($6,"P",{});var pyt=s(QFe);BCr=r(pyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pyt.forEach(t),ICr=i($6),vc=n($6,"P",{});var lre=s(vc);NCr=r(lre,`Note:
Loading a model from its configuration file does `),HFe=n(lre,"STRONG",{});var uyt=s(HFe);qCr=r(uyt,"not"),uyt.forEach(t),jCr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(lre,"A",{href:!0});var _yt=s(fJ);DCr=r(_yt,"from_pretrained()"),_yt.forEach(t),GCr=r(lre," to load the model weights."),lre.forEach(t),OCr=i($6),T(iE.$$.fragment,$6),$6.forEach(t),VCr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(D9.$$.fragment,Bl),XCr=i(Bl),UFe=n(Bl,"P",{});var byt=s(UFe);zCr=r(byt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),byt.forEach(t),WCr=i(Bl),fn=n(Bl,"P",{});var k6=s(fn);QCr=r(k6,"The model class to instantiate is selected based on the "),JFe=n(k6,"CODE",{});var vyt=s(JFe);HCr=r(vyt,"model_type"),vyt.forEach(t),UCr=r(k6,` property of the config object (either
passed as an argument or loaded from `),YFe=n(k6,"CODE",{});var Fyt=s(YFe);JCr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),YCr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(k6,"CODE",{});var Tyt=s(KFe);KCr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),ZCr=r(k6,":"),k6.forEach(t),e5r=i(Bl),ae=n(Bl,"UL",{});var ne=s(ae);dE=n(ne,"LI",{});var vNe=s(dE);ZFe=n(vNe,"STRONG",{});var Myt=s(ZFe);o5r=r(Myt,"albert"),Myt.forEach(t),r5r=r(vNe," \u2014 "),mJ=n(vNe,"A",{href:!0});var Eyt=s(mJ);t5r=r(Eyt,"TFAlbertForSequenceClassification"),Eyt.forEach(t),a5r=r(vNe," (ALBERT model)"),vNe.forEach(t),n5r=i(ne),cE=n(ne,"LI",{});var FNe=s(cE);eTe=n(FNe,"STRONG",{});var Cyt=s(eTe);s5r=r(Cyt,"bert"),Cyt.forEach(t),l5r=r(FNe," \u2014 "),gJ=n(FNe,"A",{href:!0});var wyt=s(gJ);i5r=r(wyt,"TFBertForSequenceClassification"),wyt.forEach(t),d5r=r(FNe," (BERT model)"),FNe.forEach(t),c5r=i(ne),fE=n(ne,"LI",{});var TNe=s(fE);oTe=n(TNe,"STRONG",{});var Ayt=s(oTe);f5r=r(Ayt,"camembert"),Ayt.forEach(t),m5r=r(TNe," \u2014 "),hJ=n(TNe,"A",{href:!0});var Lyt=s(hJ);g5r=r(Lyt,"TFCamembertForSequenceClassification"),Lyt.forEach(t),h5r=r(TNe," (CamemBERT model)"),TNe.forEach(t),p5r=i(ne),mE=n(ne,"LI",{});var MNe=s(mE);rTe=n(MNe,"STRONG",{});var yyt=s(rTe);u5r=r(yyt,"convbert"),yyt.forEach(t),_5r=r(MNe," \u2014 "),pJ=n(MNe,"A",{href:!0});var xyt=s(pJ);b5r=r(xyt,"TFConvBertForSequenceClassification"),xyt.forEach(t),v5r=r(MNe," (ConvBERT model)"),MNe.forEach(t),F5r=i(ne),gE=n(ne,"LI",{});var ENe=s(gE);tTe=n(ENe,"STRONG",{});var $yt=s(tTe);T5r=r($yt,"ctrl"),$yt.forEach(t),M5r=r(ENe," \u2014 "),uJ=n(ENe,"A",{href:!0});var kyt=s(uJ);E5r=r(kyt,"TFCTRLForSequenceClassification"),kyt.forEach(t),C5r=r(ENe," (CTRL model)"),ENe.forEach(t),w5r=i(ne),hE=n(ne,"LI",{});var CNe=s(hE);aTe=n(CNe,"STRONG",{});var Syt=s(aTe);A5r=r(Syt,"deberta"),Syt.forEach(t),L5r=r(CNe," \u2014 "),_J=n(CNe,"A",{href:!0});var Ryt=s(_J);y5r=r(Ryt,"TFDebertaForSequenceClassification"),Ryt.forEach(t),x5r=r(CNe," (DeBERTa model)"),CNe.forEach(t),$5r=i(ne),pE=n(ne,"LI",{});var wNe=s(pE);nTe=n(wNe,"STRONG",{});var Pyt=s(nTe);k5r=r(Pyt,"deberta-v2"),Pyt.forEach(t),S5r=r(wNe," \u2014 "),bJ=n(wNe,"A",{href:!0});var Byt=s(bJ);R5r=r(Byt,"TFDebertaV2ForSequenceClassification"),Byt.forEach(t),P5r=r(wNe," (DeBERTa-v2 model)"),wNe.forEach(t),B5r=i(ne),uE=n(ne,"LI",{});var ANe=s(uE);sTe=n(ANe,"STRONG",{});var Iyt=s(sTe);I5r=r(Iyt,"distilbert"),Iyt.forEach(t),N5r=r(ANe," \u2014 "),vJ=n(ANe,"A",{href:!0});var Nyt=s(vJ);q5r=r(Nyt,"TFDistilBertForSequenceClassification"),Nyt.forEach(t),j5r=r(ANe," (DistilBERT model)"),ANe.forEach(t),D5r=i(ne),_E=n(ne,"LI",{});var LNe=s(_E);lTe=n(LNe,"STRONG",{});var qyt=s(lTe);G5r=r(qyt,"electra"),qyt.forEach(t),O5r=r(LNe," \u2014 "),FJ=n(LNe,"A",{href:!0});var jyt=s(FJ);V5r=r(jyt,"TFElectraForSequenceClassification"),jyt.forEach(t),X5r=r(LNe," (ELECTRA model)"),LNe.forEach(t),z5r=i(ne),bE=n(ne,"LI",{});var yNe=s(bE);iTe=n(yNe,"STRONG",{});var Dyt=s(iTe);W5r=r(Dyt,"flaubert"),Dyt.forEach(t),Q5r=r(yNe," \u2014 "),TJ=n(yNe,"A",{href:!0});var Gyt=s(TJ);H5r=r(Gyt,"TFFlaubertForSequenceClassification"),Gyt.forEach(t),U5r=r(yNe," (FlauBERT model)"),yNe.forEach(t),J5r=i(ne),vE=n(ne,"LI",{});var xNe=s(vE);dTe=n(xNe,"STRONG",{});var Oyt=s(dTe);Y5r=r(Oyt,"funnel"),Oyt.forEach(t),K5r=r(xNe," \u2014 "),MJ=n(xNe,"A",{href:!0});var Vyt=s(MJ);Z5r=r(Vyt,"TFFunnelForSequenceClassification"),Vyt.forEach(t),e3r=r(xNe," (Funnel Transformer model)"),xNe.forEach(t),o3r=i(ne),FE=n(ne,"LI",{});var $Ne=s(FE);cTe=n($Ne,"STRONG",{});var Xyt=s(cTe);r3r=r(Xyt,"gpt2"),Xyt.forEach(t),t3r=r($Ne," \u2014 "),EJ=n($Ne,"A",{href:!0});var zyt=s(EJ);a3r=r(zyt,"TFGPT2ForSequenceClassification"),zyt.forEach(t),n3r=r($Ne," (OpenAI GPT-2 model)"),$Ne.forEach(t),s3r=i(ne),TE=n(ne,"LI",{});var kNe=s(TE);fTe=n(kNe,"STRONG",{});var Wyt=s(fTe);l3r=r(Wyt,"gptj"),Wyt.forEach(t),i3r=r(kNe," \u2014 "),CJ=n(kNe,"A",{href:!0});var Qyt=s(CJ);d3r=r(Qyt,"TFGPTJForSequenceClassification"),Qyt.forEach(t),c3r=r(kNe," (GPT-J model)"),kNe.forEach(t),f3r=i(ne),ME=n(ne,"LI",{});var SNe=s(ME);mTe=n(SNe,"STRONG",{});var Hyt=s(mTe);m3r=r(Hyt,"layoutlm"),Hyt.forEach(t),g3r=r(SNe," \u2014 "),wJ=n(SNe,"A",{href:!0});var Uyt=s(wJ);h3r=r(Uyt,"TFLayoutLMForSequenceClassification"),Uyt.forEach(t),p3r=r(SNe," (LayoutLM model)"),SNe.forEach(t),u3r=i(ne),EE=n(ne,"LI",{});var RNe=s(EE);gTe=n(RNe,"STRONG",{});var Jyt=s(gTe);_3r=r(Jyt,"longformer"),Jyt.forEach(t),b3r=r(RNe," \u2014 "),AJ=n(RNe,"A",{href:!0});var Yyt=s(AJ);v3r=r(Yyt,"TFLongformerForSequenceClassification"),Yyt.forEach(t),F3r=r(RNe," (Longformer model)"),RNe.forEach(t),T3r=i(ne),CE=n(ne,"LI",{});var PNe=s(CE);hTe=n(PNe,"STRONG",{});var Kyt=s(hTe);M3r=r(Kyt,"mobilebert"),Kyt.forEach(t),E3r=r(PNe," \u2014 "),LJ=n(PNe,"A",{href:!0});var Zyt=s(LJ);C3r=r(Zyt,"TFMobileBertForSequenceClassification"),Zyt.forEach(t),w3r=r(PNe," (MobileBERT model)"),PNe.forEach(t),A3r=i(ne),wE=n(ne,"LI",{});var BNe=s(wE);pTe=n(BNe,"STRONG",{});var e8t=s(pTe);L3r=r(e8t,"mpnet"),e8t.forEach(t),y3r=r(BNe," \u2014 "),yJ=n(BNe,"A",{href:!0});var o8t=s(yJ);x3r=r(o8t,"TFMPNetForSequenceClassification"),o8t.forEach(t),$3r=r(BNe," (MPNet model)"),BNe.forEach(t),k3r=i(ne),AE=n(ne,"LI",{});var INe=s(AE);uTe=n(INe,"STRONG",{});var r8t=s(uTe);S3r=r(r8t,"openai-gpt"),r8t.forEach(t),R3r=r(INe," \u2014 "),xJ=n(INe,"A",{href:!0});var t8t=s(xJ);P3r=r(t8t,"TFOpenAIGPTForSequenceClassification"),t8t.forEach(t),B3r=r(INe," (OpenAI GPT model)"),INe.forEach(t),I3r=i(ne),LE=n(ne,"LI",{});var NNe=s(LE);_Te=n(NNe,"STRONG",{});var a8t=s(_Te);N3r=r(a8t,"rembert"),a8t.forEach(t),q3r=r(NNe," \u2014 "),$J=n(NNe,"A",{href:!0});var n8t=s($J);j3r=r(n8t,"TFRemBertForSequenceClassification"),n8t.forEach(t),D3r=r(NNe," (RemBERT model)"),NNe.forEach(t),G3r=i(ne),yE=n(ne,"LI",{});var qNe=s(yE);bTe=n(qNe,"STRONG",{});var s8t=s(bTe);O3r=r(s8t,"roberta"),s8t.forEach(t),V3r=r(qNe," \u2014 "),kJ=n(qNe,"A",{href:!0});var l8t=s(kJ);X3r=r(l8t,"TFRobertaForSequenceClassification"),l8t.forEach(t),z3r=r(qNe," (RoBERTa model)"),qNe.forEach(t),W3r=i(ne),xE=n(ne,"LI",{});var jNe=s(xE);vTe=n(jNe,"STRONG",{});var i8t=s(vTe);Q3r=r(i8t,"roformer"),i8t.forEach(t),H3r=r(jNe," \u2014 "),SJ=n(jNe,"A",{href:!0});var d8t=s(SJ);U3r=r(d8t,"TFRoFormerForSequenceClassification"),d8t.forEach(t),J3r=r(jNe," (RoFormer model)"),jNe.forEach(t),Y3r=i(ne),$E=n(ne,"LI",{});var DNe=s($E);FTe=n(DNe,"STRONG",{});var c8t=s(FTe);K3r=r(c8t,"tapas"),c8t.forEach(t),Z3r=r(DNe," \u2014 "),RJ=n(DNe,"A",{href:!0});var f8t=s(RJ);ewr=r(f8t,"TFTapasForSequenceClassification"),f8t.forEach(t),owr=r(DNe," (TAPAS model)"),DNe.forEach(t),rwr=i(ne),kE=n(ne,"LI",{});var GNe=s(kE);TTe=n(GNe,"STRONG",{});var m8t=s(TTe);twr=r(m8t,"transfo-xl"),m8t.forEach(t),awr=r(GNe," \u2014 "),PJ=n(GNe,"A",{href:!0});var g8t=s(PJ);nwr=r(g8t,"TFTransfoXLForSequenceClassification"),g8t.forEach(t),swr=r(GNe," (Transformer-XL model)"),GNe.forEach(t),lwr=i(ne),SE=n(ne,"LI",{});var ONe=s(SE);MTe=n(ONe,"STRONG",{});var h8t=s(MTe);iwr=r(h8t,"xlm"),h8t.forEach(t),dwr=r(ONe," \u2014 "),BJ=n(ONe,"A",{href:!0});var p8t=s(BJ);cwr=r(p8t,"TFXLMForSequenceClassification"),p8t.forEach(t),fwr=r(ONe," (XLM model)"),ONe.forEach(t),mwr=i(ne),RE=n(ne,"LI",{});var VNe=s(RE);ETe=n(VNe,"STRONG",{});var u8t=s(ETe);gwr=r(u8t,"xlm-roberta"),u8t.forEach(t),hwr=r(VNe," \u2014 "),IJ=n(VNe,"A",{href:!0});var _8t=s(IJ);pwr=r(_8t,"TFXLMRobertaForSequenceClassification"),_8t.forEach(t),uwr=r(VNe," (XLM-RoBERTa model)"),VNe.forEach(t),_wr=i(ne),PE=n(ne,"LI",{});var XNe=s(PE);CTe=n(XNe,"STRONG",{});var b8t=s(CTe);bwr=r(b8t,"xlnet"),b8t.forEach(t),vwr=r(XNe," \u2014 "),NJ=n(XNe,"A",{href:!0});var v8t=s(NJ);Fwr=r(v8t,"TFXLNetForSequenceClassification"),v8t.forEach(t),Twr=r(XNe," (XLNet model)"),XNe.forEach(t),ne.forEach(t),Mwr=i(Bl),T(BE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),EOe=i(f),Fc=n(f,"H2",{class:!0});var kXe=s(Fc);IE=n(kXe,"A",{id:!0,class:!0,href:!0});var F8t=s(IE);wTe=n(F8t,"SPAN",{});var T8t=s(wTe);T(G9.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),Ewr=i(kXe),ATe=n(kXe,"SPAN",{});var M8t=s(ATe);Cwr=r(M8t,"TFAutoModelForMultipleChoice"),M8t.forEach(t),kXe.forEach(t),COe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(O9.$$.fragment,Il),wwr=i(Il),Tc=n(Il,"P",{});var ire=s(Tc);Awr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qJ=n(ire,"A",{href:!0});var E8t=s(qJ);Lwr=r(E8t,"from_pretrained()"),E8t.forEach(t),ywr=r(ire," class method or the "),jJ=n(ire,"A",{href:!0});var C8t=s(jJ);xwr=r(C8t,"from_config()"),C8t.forEach(t),$wr=r(ire,` class
method.`),ire.forEach(t),kwr=i(Il),V9=n(Il,"P",{});var SXe=s(V9);Swr=r(SXe,"This class cannot be instantiated directly using "),LTe=n(SXe,"CODE",{});var w8t=s(LTe);Rwr=r(w8t,"__init__()"),w8t.forEach(t),Pwr=r(SXe," (throws an error)."),SXe.forEach(t),Bwr=i(Il),Nt=n(Il,"DIV",{class:!0});var S6=s(Nt);T(X9.$$.fragment,S6),Iwr=i(S6),yTe=n(S6,"P",{});var A8t=s(yTe);Nwr=r(A8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A8t.forEach(t),qwr=i(S6),Mc=n(S6,"P",{});var dre=s(Mc);jwr=r(dre,`Note:
Loading a model from its configuration file does `),xTe=n(dre,"STRONG",{});var L8t=s(xTe);Dwr=r(L8t,"not"),L8t.forEach(t),Gwr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(dre,"A",{href:!0});var y8t=s(DJ);Owr=r(y8t,"from_pretrained()"),y8t.forEach(t),Vwr=r(dre," to load the model weights."),dre.forEach(t),Xwr=i(S6),T(NE.$$.fragment,S6),S6.forEach(t),zwr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(z9.$$.fragment,Nl),Wwr=i(Nl),$Te=n(Nl,"P",{});var x8t=s($Te);Qwr=r(x8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x8t.forEach(t),Hwr=i(Nl),mn=n(Nl,"P",{});var R6=s(mn);Uwr=r(R6,"The model class to instantiate is selected based on the "),kTe=n(R6,"CODE",{});var $8t=s(kTe);Jwr=r($8t,"model_type"),$8t.forEach(t),Ywr=r(R6,` property of the config object (either
passed as an argument or loaded from `),STe=n(R6,"CODE",{});var k8t=s(STe);Kwr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),Zwr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(R6,"CODE",{});var S8t=s(RTe);eAr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),oAr=r(R6,":"),R6.forEach(t),rAr=i(Nl),ue=n(Nl,"UL",{});var ve=s(ue);qE=n(ve,"LI",{});var zNe=s(qE);PTe=n(zNe,"STRONG",{});var R8t=s(PTe);tAr=r(R8t,"albert"),R8t.forEach(t),aAr=r(zNe," \u2014 "),GJ=n(zNe,"A",{href:!0});var P8t=s(GJ);nAr=r(P8t,"TFAlbertForMultipleChoice"),P8t.forEach(t),sAr=r(zNe," (ALBERT model)"),zNe.forEach(t),lAr=i(ve),jE=n(ve,"LI",{});var WNe=s(jE);BTe=n(WNe,"STRONG",{});var B8t=s(BTe);iAr=r(B8t,"bert"),B8t.forEach(t),dAr=r(WNe," \u2014 "),OJ=n(WNe,"A",{href:!0});var I8t=s(OJ);cAr=r(I8t,"TFBertForMultipleChoice"),I8t.forEach(t),fAr=r(WNe," (BERT model)"),WNe.forEach(t),mAr=i(ve),DE=n(ve,"LI",{});var QNe=s(DE);ITe=n(QNe,"STRONG",{});var N8t=s(ITe);gAr=r(N8t,"camembert"),N8t.forEach(t),hAr=r(QNe," \u2014 "),VJ=n(QNe,"A",{href:!0});var q8t=s(VJ);pAr=r(q8t,"TFCamembertForMultipleChoice"),q8t.forEach(t),uAr=r(QNe," (CamemBERT model)"),QNe.forEach(t),_Ar=i(ve),GE=n(ve,"LI",{});var HNe=s(GE);NTe=n(HNe,"STRONG",{});var j8t=s(NTe);bAr=r(j8t,"convbert"),j8t.forEach(t),vAr=r(HNe," \u2014 "),XJ=n(HNe,"A",{href:!0});var D8t=s(XJ);FAr=r(D8t,"TFConvBertForMultipleChoice"),D8t.forEach(t),TAr=r(HNe," (ConvBERT model)"),HNe.forEach(t),MAr=i(ve),OE=n(ve,"LI",{});var UNe=s(OE);qTe=n(UNe,"STRONG",{});var G8t=s(qTe);EAr=r(G8t,"distilbert"),G8t.forEach(t),CAr=r(UNe," \u2014 "),zJ=n(UNe,"A",{href:!0});var O8t=s(zJ);wAr=r(O8t,"TFDistilBertForMultipleChoice"),O8t.forEach(t),AAr=r(UNe," (DistilBERT model)"),UNe.forEach(t),LAr=i(ve),VE=n(ve,"LI",{});var JNe=s(VE);jTe=n(JNe,"STRONG",{});var V8t=s(jTe);yAr=r(V8t,"electra"),V8t.forEach(t),xAr=r(JNe," \u2014 "),WJ=n(JNe,"A",{href:!0});var X8t=s(WJ);$Ar=r(X8t,"TFElectraForMultipleChoice"),X8t.forEach(t),kAr=r(JNe," (ELECTRA model)"),JNe.forEach(t),SAr=i(ve),XE=n(ve,"LI",{});var YNe=s(XE);DTe=n(YNe,"STRONG",{});var z8t=s(DTe);RAr=r(z8t,"flaubert"),z8t.forEach(t),PAr=r(YNe," \u2014 "),QJ=n(YNe,"A",{href:!0});var W8t=s(QJ);BAr=r(W8t,"TFFlaubertForMultipleChoice"),W8t.forEach(t),IAr=r(YNe," (FlauBERT model)"),YNe.forEach(t),NAr=i(ve),zE=n(ve,"LI",{});var KNe=s(zE);GTe=n(KNe,"STRONG",{});var Q8t=s(GTe);qAr=r(Q8t,"funnel"),Q8t.forEach(t),jAr=r(KNe," \u2014 "),HJ=n(KNe,"A",{href:!0});var H8t=s(HJ);DAr=r(H8t,"TFFunnelForMultipleChoice"),H8t.forEach(t),GAr=r(KNe," (Funnel Transformer model)"),KNe.forEach(t),OAr=i(ve),WE=n(ve,"LI",{});var ZNe=s(WE);OTe=n(ZNe,"STRONG",{});var U8t=s(OTe);VAr=r(U8t,"longformer"),U8t.forEach(t),XAr=r(ZNe," \u2014 "),UJ=n(ZNe,"A",{href:!0});var J8t=s(UJ);zAr=r(J8t,"TFLongformerForMultipleChoice"),J8t.forEach(t),WAr=r(ZNe," (Longformer model)"),ZNe.forEach(t),QAr=i(ve),QE=n(ve,"LI",{});var eqe=s(QE);VTe=n(eqe,"STRONG",{});var Y8t=s(VTe);HAr=r(Y8t,"mobilebert"),Y8t.forEach(t),UAr=r(eqe," \u2014 "),JJ=n(eqe,"A",{href:!0});var K8t=s(JJ);JAr=r(K8t,"TFMobileBertForMultipleChoice"),K8t.forEach(t),YAr=r(eqe," (MobileBERT model)"),eqe.forEach(t),KAr=i(ve),HE=n(ve,"LI",{});var oqe=s(HE);XTe=n(oqe,"STRONG",{});var Z8t=s(XTe);ZAr=r(Z8t,"mpnet"),Z8t.forEach(t),e6r=r(oqe," \u2014 "),YJ=n(oqe,"A",{href:!0});var e9t=s(YJ);o6r=r(e9t,"TFMPNetForMultipleChoice"),e9t.forEach(t),r6r=r(oqe," (MPNet model)"),oqe.forEach(t),t6r=i(ve),UE=n(ve,"LI",{});var rqe=s(UE);zTe=n(rqe,"STRONG",{});var o9t=s(zTe);a6r=r(o9t,"rembert"),o9t.forEach(t),n6r=r(rqe," \u2014 "),KJ=n(rqe,"A",{href:!0});var r9t=s(KJ);s6r=r(r9t,"TFRemBertForMultipleChoice"),r9t.forEach(t),l6r=r(rqe," (RemBERT model)"),rqe.forEach(t),i6r=i(ve),JE=n(ve,"LI",{});var tqe=s(JE);WTe=n(tqe,"STRONG",{});var t9t=s(WTe);d6r=r(t9t,"roberta"),t9t.forEach(t),c6r=r(tqe," \u2014 "),ZJ=n(tqe,"A",{href:!0});var a9t=s(ZJ);f6r=r(a9t,"TFRobertaForMultipleChoice"),a9t.forEach(t),m6r=r(tqe," (RoBERTa model)"),tqe.forEach(t),g6r=i(ve),YE=n(ve,"LI",{});var aqe=s(YE);QTe=n(aqe,"STRONG",{});var n9t=s(QTe);h6r=r(n9t,"roformer"),n9t.forEach(t),p6r=r(aqe," \u2014 "),eY=n(aqe,"A",{href:!0});var s9t=s(eY);u6r=r(s9t,"TFRoFormerForMultipleChoice"),s9t.forEach(t),_6r=r(aqe," (RoFormer model)"),aqe.forEach(t),b6r=i(ve),KE=n(ve,"LI",{});var nqe=s(KE);HTe=n(nqe,"STRONG",{});var l9t=s(HTe);v6r=r(l9t,"xlm"),l9t.forEach(t),F6r=r(nqe," \u2014 "),oY=n(nqe,"A",{href:!0});var i9t=s(oY);T6r=r(i9t,"TFXLMForMultipleChoice"),i9t.forEach(t),M6r=r(nqe," (XLM model)"),nqe.forEach(t),E6r=i(ve),ZE=n(ve,"LI",{});var sqe=s(ZE);UTe=n(sqe,"STRONG",{});var d9t=s(UTe);C6r=r(d9t,"xlm-roberta"),d9t.forEach(t),w6r=r(sqe," \u2014 "),rY=n(sqe,"A",{href:!0});var c9t=s(rY);A6r=r(c9t,"TFXLMRobertaForMultipleChoice"),c9t.forEach(t),L6r=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),y6r=i(ve),eC=n(ve,"LI",{});var lqe=s(eC);JTe=n(lqe,"STRONG",{});var f9t=s(JTe);x6r=r(f9t,"xlnet"),f9t.forEach(t),$6r=r(lqe," \u2014 "),tY=n(lqe,"A",{href:!0});var m9t=s(tY);k6r=r(m9t,"TFXLNetForMultipleChoice"),m9t.forEach(t),S6r=r(lqe," (XLNet model)"),lqe.forEach(t),ve.forEach(t),R6r=i(Nl),T(oC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),wOe=i(f),Ec=n(f,"H2",{class:!0});var RXe=s(Ec);rC=n(RXe,"A",{id:!0,class:!0,href:!0});var g9t=s(rC);YTe=n(g9t,"SPAN",{});var h9t=s(YTe);T(W9.$$.fragment,h9t),h9t.forEach(t),g9t.forEach(t),P6r=i(RXe),KTe=n(RXe,"SPAN",{});var p9t=s(KTe);B6r=r(p9t,"TFAutoModelForNextSentencePrediction"),p9t.forEach(t),RXe.forEach(t),AOe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(Q9.$$.fragment,ql),I6r=i(ql),Cc=n(ql,"P",{});var cre=s(Cc);N6r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aY=n(cre,"A",{href:!0});var u9t=s(aY);q6r=r(u9t,"from_pretrained()"),u9t.forEach(t),j6r=r(cre," class method or the "),nY=n(cre,"A",{href:!0});var _9t=s(nY);D6r=r(_9t,"from_config()"),_9t.forEach(t),G6r=r(cre,` class
method.`),cre.forEach(t),O6r=i(ql),H9=n(ql,"P",{});var PXe=s(H9);V6r=r(PXe,"This class cannot be instantiated directly using "),ZTe=n(PXe,"CODE",{});var b9t=s(ZTe);X6r=r(b9t,"__init__()"),b9t.forEach(t),z6r=r(PXe," (throws an error)."),PXe.forEach(t),W6r=i(ql),qt=n(ql,"DIV",{class:!0});var P6=s(qt);T(U9.$$.fragment,P6),Q6r=i(P6),eMe=n(P6,"P",{});var v9t=s(eMe);H6r=r(v9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),v9t.forEach(t),U6r=i(P6),wc=n(P6,"P",{});var fre=s(wc);J6r=r(fre,`Note:
Loading a model from its configuration file does `),oMe=n(fre,"STRONG",{});var F9t=s(oMe);Y6r=r(F9t,"not"),F9t.forEach(t),K6r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(fre,"A",{href:!0});var T9t=s(sY);Z6r=r(T9t,"from_pretrained()"),T9t.forEach(t),eLr=r(fre," to load the model weights."),fre.forEach(t),oLr=i(P6),T(tC.$$.fragment,P6),P6.forEach(t),rLr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(J9.$$.fragment,jl),tLr=i(jl),rMe=n(jl,"P",{});var M9t=s(rMe);aLr=r(M9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M9t.forEach(t),nLr=i(jl),gn=n(jl,"P",{});var B6=s(gn);sLr=r(B6,"The model class to instantiate is selected based on the "),tMe=n(B6,"CODE",{});var E9t=s(tMe);lLr=r(E9t,"model_type"),E9t.forEach(t),iLr=r(B6,` property of the config object (either
passed as an argument or loaded from `),aMe=n(B6,"CODE",{});var C9t=s(aMe);dLr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),cLr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(B6,"CODE",{});var w9t=s(nMe);fLr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),mLr=r(B6,":"),B6.forEach(t),gLr=i(jl),Y9=n(jl,"UL",{});var BXe=s(Y9);aC=n(BXe,"LI",{});var iqe=s(aC);sMe=n(iqe,"STRONG",{});var A9t=s(sMe);hLr=r(A9t,"bert"),A9t.forEach(t),pLr=r(iqe," \u2014 "),lY=n(iqe,"A",{href:!0});var L9t=s(lY);uLr=r(L9t,"TFBertForNextSentencePrediction"),L9t.forEach(t),_Lr=r(iqe," (BERT model)"),iqe.forEach(t),bLr=i(BXe),nC=n(BXe,"LI",{});var dqe=s(nC);lMe=n(dqe,"STRONG",{});var y9t=s(lMe);vLr=r(y9t,"mobilebert"),y9t.forEach(t),FLr=r(dqe," \u2014 "),iY=n(dqe,"A",{href:!0});var x9t=s(iY);TLr=r(x9t,"TFMobileBertForNextSentencePrediction"),x9t.forEach(t),MLr=r(dqe," (MobileBERT model)"),dqe.forEach(t),BXe.forEach(t),ELr=i(jl),T(sC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),LOe=i(f),Ac=n(f,"H2",{class:!0});var IXe=s(Ac);lC=n(IXe,"A",{id:!0,class:!0,href:!0});var $9t=s(lC);iMe=n($9t,"SPAN",{});var k9t=s(iMe);T(K9.$$.fragment,k9t),k9t.forEach(t),$9t.forEach(t),CLr=i(IXe),dMe=n(IXe,"SPAN",{});var S9t=s(dMe);wLr=r(S9t,"TFAutoModelForTableQuestionAnswering"),S9t.forEach(t),IXe.forEach(t),yOe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(Z9.$$.fragment,Dl),ALr=i(Dl),Lc=n(Dl,"P",{});var mre=s(Lc);LLr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dY=n(mre,"A",{href:!0});var R9t=s(dY);yLr=r(R9t,"from_pretrained()"),R9t.forEach(t),xLr=r(mre," class method or the "),cY=n(mre,"A",{href:!0});var P9t=s(cY);$Lr=r(P9t,"from_config()"),P9t.forEach(t),kLr=r(mre,` class
method.`),mre.forEach(t),SLr=i(Dl),ex=n(Dl,"P",{});var NXe=s(ex);RLr=r(NXe,"This class cannot be instantiated directly using "),cMe=n(NXe,"CODE",{});var B9t=s(cMe);PLr=r(B9t,"__init__()"),B9t.forEach(t),BLr=r(NXe," (throws an error)."),NXe.forEach(t),ILr=i(Dl),jt=n(Dl,"DIV",{class:!0});var I6=s(jt);T(ox.$$.fragment,I6),NLr=i(I6),fMe=n(I6,"P",{});var I9t=s(fMe);qLr=r(I9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),I9t.forEach(t),jLr=i(I6),yc=n(I6,"P",{});var gre=s(yc);DLr=r(gre,`Note:
Loading a model from its configuration file does `),mMe=n(gre,"STRONG",{});var N9t=s(mMe);GLr=r(N9t,"not"),N9t.forEach(t),OLr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(gre,"A",{href:!0});var q9t=s(fY);VLr=r(q9t,"from_pretrained()"),q9t.forEach(t),XLr=r(gre," to load the model weights."),gre.forEach(t),zLr=i(I6),T(iC.$$.fragment,I6),I6.forEach(t),WLr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(rx.$$.fragment,Gl),QLr=i(Gl),gMe=n(Gl,"P",{});var j9t=s(gMe);HLr=r(j9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),j9t.forEach(t),ULr=i(Gl),hn=n(Gl,"P",{});var N6=s(hn);JLr=r(N6,"The model class to instantiate is selected based on the "),hMe=n(N6,"CODE",{});var D9t=s(hMe);YLr=r(D9t,"model_type"),D9t.forEach(t),KLr=r(N6,` property of the config object (either
passed as an argument or loaded from `),pMe=n(N6,"CODE",{});var G9t=s(pMe);ZLr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),eyr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(N6,"CODE",{});var O9t=s(uMe);oyr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),ryr=r(N6,":"),N6.forEach(t),tyr=i(Gl),_Me=n(Gl,"UL",{});var V9t=s(_Me);dC=n(V9t,"LI",{});var cqe=s(dC);bMe=n(cqe,"STRONG",{});var X9t=s(bMe);ayr=r(X9t,"tapas"),X9t.forEach(t),nyr=r(cqe," \u2014 "),mY=n(cqe,"A",{href:!0});var z9t=s(mY);syr=r(z9t,"TFTapasForQuestionAnswering"),z9t.forEach(t),lyr=r(cqe," (TAPAS model)"),cqe.forEach(t),V9t.forEach(t),iyr=i(Gl),T(cC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),xOe=i(f),xc=n(f,"H2",{class:!0});var qXe=s(xc);fC=n(qXe,"A",{id:!0,class:!0,href:!0});var W9t=s(fC);vMe=n(W9t,"SPAN",{});var Q9t=s(vMe);T(tx.$$.fragment,Q9t),Q9t.forEach(t),W9t.forEach(t),dyr=i(qXe),FMe=n(qXe,"SPAN",{});var H9t=s(FMe);cyr=r(H9t,"TFAutoModelForTokenClassification"),H9t.forEach(t),qXe.forEach(t),$Oe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(ax.$$.fragment,Ol),fyr=i(Ol),$c=n(Ol,"P",{});var hre=s($c);myr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gY=n(hre,"A",{href:!0});var U9t=s(gY);gyr=r(U9t,"from_pretrained()"),U9t.forEach(t),hyr=r(hre," class method or the "),hY=n(hre,"A",{href:!0});var J9t=s(hY);pyr=r(J9t,"from_config()"),J9t.forEach(t),uyr=r(hre,` class
method.`),hre.forEach(t),_yr=i(Ol),nx=n(Ol,"P",{});var jXe=s(nx);byr=r(jXe,"This class cannot be instantiated directly using "),TMe=n(jXe,"CODE",{});var Y9t=s(TMe);vyr=r(Y9t,"__init__()"),Y9t.forEach(t),Fyr=r(jXe," (throws an error)."),jXe.forEach(t),Tyr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var q6=s(Dt);T(sx.$$.fragment,q6),Myr=i(q6),MMe=n(q6,"P",{});var K9t=s(MMe);Eyr=r(K9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),K9t.forEach(t),Cyr=i(q6),kc=n(q6,"P",{});var pre=s(kc);wyr=r(pre,`Note:
Loading a model from its configuration file does `),EMe=n(pre,"STRONG",{});var Z9t=s(EMe);Ayr=r(Z9t,"not"),Z9t.forEach(t),Lyr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(pre,"A",{href:!0});var ext=s(pY);yyr=r(ext,"from_pretrained()"),ext.forEach(t),xyr=r(pre," to load the model weights."),pre.forEach(t),$yr=i(q6),T(mC.$$.fragment,q6),q6.forEach(t),kyr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(lx.$$.fragment,Vl),Syr=i(Vl),CMe=n(Vl,"P",{});var oxt=s(CMe);Ryr=r(oxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oxt.forEach(t),Pyr=i(Vl),pn=n(Vl,"P",{});var j6=s(pn);Byr=r(j6,"The model class to instantiate is selected based on the "),wMe=n(j6,"CODE",{});var rxt=s(wMe);Iyr=r(rxt,"model_type"),rxt.forEach(t),Nyr=r(j6,` property of the config object (either
passed as an argument or loaded from `),AMe=n(j6,"CODE",{});var txt=s(AMe);qyr=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),jyr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(j6,"CODE",{});var axt=s(LMe);Dyr=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),Gyr=r(j6,":"),j6.forEach(t),Oyr=i(Vl),de=n(Vl,"UL",{});var me=s(de);gC=n(me,"LI",{});var fqe=s(gC);yMe=n(fqe,"STRONG",{});var nxt=s(yMe);Vyr=r(nxt,"albert"),nxt.forEach(t),Xyr=r(fqe," \u2014 "),uY=n(fqe,"A",{href:!0});var sxt=s(uY);zyr=r(sxt,"TFAlbertForTokenClassification"),sxt.forEach(t),Wyr=r(fqe," (ALBERT model)"),fqe.forEach(t),Qyr=i(me),hC=n(me,"LI",{});var mqe=s(hC);xMe=n(mqe,"STRONG",{});var lxt=s(xMe);Hyr=r(lxt,"bert"),lxt.forEach(t),Uyr=r(mqe," \u2014 "),_Y=n(mqe,"A",{href:!0});var ixt=s(_Y);Jyr=r(ixt,"TFBertForTokenClassification"),ixt.forEach(t),Yyr=r(mqe," (BERT model)"),mqe.forEach(t),Kyr=i(me),pC=n(me,"LI",{});var gqe=s(pC);$Me=n(gqe,"STRONG",{});var dxt=s($Me);Zyr=r(dxt,"camembert"),dxt.forEach(t),e8r=r(gqe," \u2014 "),bY=n(gqe,"A",{href:!0});var cxt=s(bY);o8r=r(cxt,"TFCamembertForTokenClassification"),cxt.forEach(t),r8r=r(gqe," (CamemBERT model)"),gqe.forEach(t),t8r=i(me),uC=n(me,"LI",{});var hqe=s(uC);kMe=n(hqe,"STRONG",{});var fxt=s(kMe);a8r=r(fxt,"convbert"),fxt.forEach(t),n8r=r(hqe," \u2014 "),vY=n(hqe,"A",{href:!0});var mxt=s(vY);s8r=r(mxt,"TFConvBertForTokenClassification"),mxt.forEach(t),l8r=r(hqe," (ConvBERT model)"),hqe.forEach(t),i8r=i(me),_C=n(me,"LI",{});var pqe=s(_C);SMe=n(pqe,"STRONG",{});var gxt=s(SMe);d8r=r(gxt,"deberta"),gxt.forEach(t),c8r=r(pqe," \u2014 "),FY=n(pqe,"A",{href:!0});var hxt=s(FY);f8r=r(hxt,"TFDebertaForTokenClassification"),hxt.forEach(t),m8r=r(pqe," (DeBERTa model)"),pqe.forEach(t),g8r=i(me),bC=n(me,"LI",{});var uqe=s(bC);RMe=n(uqe,"STRONG",{});var pxt=s(RMe);h8r=r(pxt,"deberta-v2"),pxt.forEach(t),p8r=r(uqe," \u2014 "),TY=n(uqe,"A",{href:!0});var uxt=s(TY);u8r=r(uxt,"TFDebertaV2ForTokenClassification"),uxt.forEach(t),_8r=r(uqe," (DeBERTa-v2 model)"),uqe.forEach(t),b8r=i(me),vC=n(me,"LI",{});var _qe=s(vC);PMe=n(_qe,"STRONG",{});var _xt=s(PMe);v8r=r(_xt,"distilbert"),_xt.forEach(t),F8r=r(_qe," \u2014 "),MY=n(_qe,"A",{href:!0});var bxt=s(MY);T8r=r(bxt,"TFDistilBertForTokenClassification"),bxt.forEach(t),M8r=r(_qe," (DistilBERT model)"),_qe.forEach(t),E8r=i(me),FC=n(me,"LI",{});var bqe=s(FC);BMe=n(bqe,"STRONG",{});var vxt=s(BMe);C8r=r(vxt,"electra"),vxt.forEach(t),w8r=r(bqe," \u2014 "),EY=n(bqe,"A",{href:!0});var Fxt=s(EY);A8r=r(Fxt,"TFElectraForTokenClassification"),Fxt.forEach(t),L8r=r(bqe," (ELECTRA model)"),bqe.forEach(t),y8r=i(me),TC=n(me,"LI",{});var vqe=s(TC);IMe=n(vqe,"STRONG",{});var Txt=s(IMe);x8r=r(Txt,"flaubert"),Txt.forEach(t),$8r=r(vqe," \u2014 "),CY=n(vqe,"A",{href:!0});var Mxt=s(CY);k8r=r(Mxt,"TFFlaubertForTokenClassification"),Mxt.forEach(t),S8r=r(vqe," (FlauBERT model)"),vqe.forEach(t),R8r=i(me),MC=n(me,"LI",{});var Fqe=s(MC);NMe=n(Fqe,"STRONG",{});var Ext=s(NMe);P8r=r(Ext,"funnel"),Ext.forEach(t),B8r=r(Fqe," \u2014 "),wY=n(Fqe,"A",{href:!0});var Cxt=s(wY);I8r=r(Cxt,"TFFunnelForTokenClassification"),Cxt.forEach(t),N8r=r(Fqe," (Funnel Transformer model)"),Fqe.forEach(t),q8r=i(me),EC=n(me,"LI",{});var Tqe=s(EC);qMe=n(Tqe,"STRONG",{});var wxt=s(qMe);j8r=r(wxt,"layoutlm"),wxt.forEach(t),D8r=r(Tqe," \u2014 "),AY=n(Tqe,"A",{href:!0});var Axt=s(AY);G8r=r(Axt,"TFLayoutLMForTokenClassification"),Axt.forEach(t),O8r=r(Tqe," (LayoutLM model)"),Tqe.forEach(t),V8r=i(me),CC=n(me,"LI",{});var Mqe=s(CC);jMe=n(Mqe,"STRONG",{});var Lxt=s(jMe);X8r=r(Lxt,"longformer"),Lxt.forEach(t),z8r=r(Mqe," \u2014 "),LY=n(Mqe,"A",{href:!0});var yxt=s(LY);W8r=r(yxt,"TFLongformerForTokenClassification"),yxt.forEach(t),Q8r=r(Mqe," (Longformer model)"),Mqe.forEach(t),H8r=i(me),wC=n(me,"LI",{});var Eqe=s(wC);DMe=n(Eqe,"STRONG",{});var xxt=s(DMe);U8r=r(xxt,"mobilebert"),xxt.forEach(t),J8r=r(Eqe," \u2014 "),yY=n(Eqe,"A",{href:!0});var $xt=s(yY);Y8r=r($xt,"TFMobileBertForTokenClassification"),$xt.forEach(t),K8r=r(Eqe," (MobileBERT model)"),Eqe.forEach(t),Z8r=i(me),AC=n(me,"LI",{});var Cqe=s(AC);GMe=n(Cqe,"STRONG",{});var kxt=s(GMe);e9r=r(kxt,"mpnet"),kxt.forEach(t),o9r=r(Cqe," \u2014 "),xY=n(Cqe,"A",{href:!0});var Sxt=s(xY);r9r=r(Sxt,"TFMPNetForTokenClassification"),Sxt.forEach(t),t9r=r(Cqe," (MPNet model)"),Cqe.forEach(t),a9r=i(me),LC=n(me,"LI",{});var wqe=s(LC);OMe=n(wqe,"STRONG",{});var Rxt=s(OMe);n9r=r(Rxt,"rembert"),Rxt.forEach(t),s9r=r(wqe," \u2014 "),$Y=n(wqe,"A",{href:!0});var Pxt=s($Y);l9r=r(Pxt,"TFRemBertForTokenClassification"),Pxt.forEach(t),i9r=r(wqe," (RemBERT model)"),wqe.forEach(t),d9r=i(me),yC=n(me,"LI",{});var Aqe=s(yC);VMe=n(Aqe,"STRONG",{});var Bxt=s(VMe);c9r=r(Bxt,"roberta"),Bxt.forEach(t),f9r=r(Aqe," \u2014 "),kY=n(Aqe,"A",{href:!0});var Ixt=s(kY);m9r=r(Ixt,"TFRobertaForTokenClassification"),Ixt.forEach(t),g9r=r(Aqe," (RoBERTa model)"),Aqe.forEach(t),h9r=i(me),xC=n(me,"LI",{});var Lqe=s(xC);XMe=n(Lqe,"STRONG",{});var Nxt=s(XMe);p9r=r(Nxt,"roformer"),Nxt.forEach(t),u9r=r(Lqe," \u2014 "),SY=n(Lqe,"A",{href:!0});var qxt=s(SY);_9r=r(qxt,"TFRoFormerForTokenClassification"),qxt.forEach(t),b9r=r(Lqe," (RoFormer model)"),Lqe.forEach(t),v9r=i(me),$C=n(me,"LI",{});var yqe=s($C);zMe=n(yqe,"STRONG",{});var jxt=s(zMe);F9r=r(jxt,"xlm"),jxt.forEach(t),T9r=r(yqe," \u2014 "),RY=n(yqe,"A",{href:!0});var Dxt=s(RY);M9r=r(Dxt,"TFXLMForTokenClassification"),Dxt.forEach(t),E9r=r(yqe," (XLM model)"),yqe.forEach(t),C9r=i(me),kC=n(me,"LI",{});var xqe=s(kC);WMe=n(xqe,"STRONG",{});var Gxt=s(WMe);w9r=r(Gxt,"xlm-roberta"),Gxt.forEach(t),A9r=r(xqe," \u2014 "),PY=n(xqe,"A",{href:!0});var Oxt=s(PY);L9r=r(Oxt,"TFXLMRobertaForTokenClassification"),Oxt.forEach(t),y9r=r(xqe," (XLM-RoBERTa model)"),xqe.forEach(t),x9r=i(me),SC=n(me,"LI",{});var $qe=s(SC);QMe=n($qe,"STRONG",{});var Vxt=s(QMe);$9r=r(Vxt,"xlnet"),Vxt.forEach(t),k9r=r($qe," \u2014 "),BY=n($qe,"A",{href:!0});var Xxt=s(BY);S9r=r(Xxt,"TFXLNetForTokenClassification"),Xxt.forEach(t),R9r=r($qe," (XLNet model)"),$qe.forEach(t),me.forEach(t),P9r=i(Vl),T(RC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),kOe=i(f),Sc=n(f,"H2",{class:!0});var DXe=s(Sc);PC=n(DXe,"A",{id:!0,class:!0,href:!0});var zxt=s(PC);HMe=n(zxt,"SPAN",{});var Wxt=s(HMe);T(ix.$$.fragment,Wxt),Wxt.forEach(t),zxt.forEach(t),B9r=i(DXe),UMe=n(DXe,"SPAN",{});var Qxt=s(UMe);I9r=r(Qxt,"TFAutoModelForQuestionAnswering"),Qxt.forEach(t),DXe.forEach(t),SOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(dx.$$.fragment,Xl),N9r=i(Xl),Rc=n(Xl,"P",{});var ure=s(Rc);q9r=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=n(ure,"A",{href:!0});var Hxt=s(IY);j9r=r(Hxt,"from_pretrained()"),Hxt.forEach(t),D9r=r(ure," class method or the "),NY=n(ure,"A",{href:!0});var Uxt=s(NY);G9r=r(Uxt,"from_config()"),Uxt.forEach(t),O9r=r(ure,` class
method.`),ure.forEach(t),V9r=i(Xl),cx=n(Xl,"P",{});var GXe=s(cx);X9r=r(GXe,"This class cannot be instantiated directly using "),JMe=n(GXe,"CODE",{});var Jxt=s(JMe);z9r=r(Jxt,"__init__()"),Jxt.forEach(t),W9r=r(GXe," (throws an error)."),GXe.forEach(t),Q9r=i(Xl),Gt=n(Xl,"DIV",{class:!0});var D6=s(Gt);T(fx.$$.fragment,D6),H9r=i(D6),YMe=n(D6,"P",{});var Yxt=s(YMe);U9r=r(Yxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yxt.forEach(t),J9r=i(D6),Pc=n(D6,"P",{});var _re=s(Pc);Y9r=r(_re,`Note:
Loading a model from its configuration file does `),KMe=n(_re,"STRONG",{});var Kxt=s(KMe);K9r=r(Kxt,"not"),Kxt.forEach(t),Z9r=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(_re,"A",{href:!0});var Zxt=s(qY);exr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),oxr=r(_re," to load the model weights."),_re.forEach(t),rxr=i(D6),T(BC.$$.fragment,D6),D6.forEach(t),txr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(mx.$$.fragment,zl),axr=i(zl),ZMe=n(zl,"P",{});var e$t=s(ZMe);nxr=r(e$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),e$t.forEach(t),sxr=i(zl),un=n(zl,"P",{});var G6=s(un);lxr=r(G6,"The model class to instantiate is selected based on the "),e4e=n(G6,"CODE",{});var o$t=s(e4e);ixr=r(o$t,"model_type"),o$t.forEach(t),dxr=r(G6,` property of the config object (either
passed as an argument or loaded from `),o4e=n(G6,"CODE",{});var r$t=s(o4e);cxr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),fxr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(G6,"CODE",{});var t$t=s(r4e);mxr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),gxr=r(G6,":"),G6.forEach(t),hxr=i(zl),ce=n(zl,"UL",{});var ge=s(ce);IC=n(ge,"LI",{});var kqe=s(IC);t4e=n(kqe,"STRONG",{});var a$t=s(t4e);pxr=r(a$t,"albert"),a$t.forEach(t),uxr=r(kqe," \u2014 "),jY=n(kqe,"A",{href:!0});var n$t=s(jY);_xr=r(n$t,"TFAlbertForQuestionAnswering"),n$t.forEach(t),bxr=r(kqe," (ALBERT model)"),kqe.forEach(t),vxr=i(ge),NC=n(ge,"LI",{});var Sqe=s(NC);a4e=n(Sqe,"STRONG",{});var s$t=s(a4e);Fxr=r(s$t,"bert"),s$t.forEach(t),Txr=r(Sqe," \u2014 "),DY=n(Sqe,"A",{href:!0});var l$t=s(DY);Mxr=r(l$t,"TFBertForQuestionAnswering"),l$t.forEach(t),Exr=r(Sqe," (BERT model)"),Sqe.forEach(t),Cxr=i(ge),qC=n(ge,"LI",{});var Rqe=s(qC);n4e=n(Rqe,"STRONG",{});var i$t=s(n4e);wxr=r(i$t,"camembert"),i$t.forEach(t),Axr=r(Rqe," \u2014 "),GY=n(Rqe,"A",{href:!0});var d$t=s(GY);Lxr=r(d$t,"TFCamembertForQuestionAnswering"),d$t.forEach(t),yxr=r(Rqe," (CamemBERT model)"),Rqe.forEach(t),xxr=i(ge),jC=n(ge,"LI",{});var Pqe=s(jC);s4e=n(Pqe,"STRONG",{});var c$t=s(s4e);$xr=r(c$t,"convbert"),c$t.forEach(t),kxr=r(Pqe," \u2014 "),OY=n(Pqe,"A",{href:!0});var f$t=s(OY);Sxr=r(f$t,"TFConvBertForQuestionAnswering"),f$t.forEach(t),Rxr=r(Pqe," (ConvBERT model)"),Pqe.forEach(t),Pxr=i(ge),DC=n(ge,"LI",{});var Bqe=s(DC);l4e=n(Bqe,"STRONG",{});var m$t=s(l4e);Bxr=r(m$t,"deberta"),m$t.forEach(t),Ixr=r(Bqe," \u2014 "),VY=n(Bqe,"A",{href:!0});var g$t=s(VY);Nxr=r(g$t,"TFDebertaForQuestionAnswering"),g$t.forEach(t),qxr=r(Bqe," (DeBERTa model)"),Bqe.forEach(t),jxr=i(ge),GC=n(ge,"LI",{});var Iqe=s(GC);i4e=n(Iqe,"STRONG",{});var h$t=s(i4e);Dxr=r(h$t,"deberta-v2"),h$t.forEach(t),Gxr=r(Iqe," \u2014 "),XY=n(Iqe,"A",{href:!0});var p$t=s(XY);Oxr=r(p$t,"TFDebertaV2ForQuestionAnswering"),p$t.forEach(t),Vxr=r(Iqe," (DeBERTa-v2 model)"),Iqe.forEach(t),Xxr=i(ge),OC=n(ge,"LI",{});var Nqe=s(OC);d4e=n(Nqe,"STRONG",{});var u$t=s(d4e);zxr=r(u$t,"distilbert"),u$t.forEach(t),Wxr=r(Nqe," \u2014 "),zY=n(Nqe,"A",{href:!0});var _$t=s(zY);Qxr=r(_$t,"TFDistilBertForQuestionAnswering"),_$t.forEach(t),Hxr=r(Nqe," (DistilBERT model)"),Nqe.forEach(t),Uxr=i(ge),VC=n(ge,"LI",{});var qqe=s(VC);c4e=n(qqe,"STRONG",{});var b$t=s(c4e);Jxr=r(b$t,"electra"),b$t.forEach(t),Yxr=r(qqe," \u2014 "),WY=n(qqe,"A",{href:!0});var v$t=s(WY);Kxr=r(v$t,"TFElectraForQuestionAnswering"),v$t.forEach(t),Zxr=r(qqe," (ELECTRA model)"),qqe.forEach(t),e$r=i(ge),XC=n(ge,"LI",{});var jqe=s(XC);f4e=n(jqe,"STRONG",{});var F$t=s(f4e);o$r=r(F$t,"flaubert"),F$t.forEach(t),r$r=r(jqe," \u2014 "),QY=n(jqe,"A",{href:!0});var T$t=s(QY);t$r=r(T$t,"TFFlaubertForQuestionAnsweringSimple"),T$t.forEach(t),a$r=r(jqe," (FlauBERT model)"),jqe.forEach(t),n$r=i(ge),zC=n(ge,"LI",{});var Dqe=s(zC);m4e=n(Dqe,"STRONG",{});var M$t=s(m4e);s$r=r(M$t,"funnel"),M$t.forEach(t),l$r=r(Dqe," \u2014 "),HY=n(Dqe,"A",{href:!0});var E$t=s(HY);i$r=r(E$t,"TFFunnelForQuestionAnswering"),E$t.forEach(t),d$r=r(Dqe," (Funnel Transformer model)"),Dqe.forEach(t),c$r=i(ge),WC=n(ge,"LI",{});var Gqe=s(WC);g4e=n(Gqe,"STRONG",{});var C$t=s(g4e);f$r=r(C$t,"gptj"),C$t.forEach(t),m$r=r(Gqe," \u2014 "),UY=n(Gqe,"A",{href:!0});var w$t=s(UY);g$r=r(w$t,"TFGPTJForQuestionAnswering"),w$t.forEach(t),h$r=r(Gqe," (GPT-J model)"),Gqe.forEach(t),p$r=i(ge),QC=n(ge,"LI",{});var Oqe=s(QC);h4e=n(Oqe,"STRONG",{});var A$t=s(h4e);u$r=r(A$t,"longformer"),A$t.forEach(t),_$r=r(Oqe," \u2014 "),JY=n(Oqe,"A",{href:!0});var L$t=s(JY);b$r=r(L$t,"TFLongformerForQuestionAnswering"),L$t.forEach(t),v$r=r(Oqe," (Longformer model)"),Oqe.forEach(t),F$r=i(ge),HC=n(ge,"LI",{});var Vqe=s(HC);p4e=n(Vqe,"STRONG",{});var y$t=s(p4e);T$r=r(y$t,"mobilebert"),y$t.forEach(t),M$r=r(Vqe," \u2014 "),YY=n(Vqe,"A",{href:!0});var x$t=s(YY);E$r=r(x$t,"TFMobileBertForQuestionAnswering"),x$t.forEach(t),C$r=r(Vqe," (MobileBERT model)"),Vqe.forEach(t),w$r=i(ge),UC=n(ge,"LI",{});var Xqe=s(UC);u4e=n(Xqe,"STRONG",{});var $$t=s(u4e);A$r=r($$t,"mpnet"),$$t.forEach(t),L$r=r(Xqe," \u2014 "),KY=n(Xqe,"A",{href:!0});var k$t=s(KY);y$r=r(k$t,"TFMPNetForQuestionAnswering"),k$t.forEach(t),x$r=r(Xqe," (MPNet model)"),Xqe.forEach(t),$$r=i(ge),JC=n(ge,"LI",{});var zqe=s(JC);_4e=n(zqe,"STRONG",{});var S$t=s(_4e);k$r=r(S$t,"rembert"),S$t.forEach(t),S$r=r(zqe," \u2014 "),ZY=n(zqe,"A",{href:!0});var R$t=s(ZY);R$r=r(R$t,"TFRemBertForQuestionAnswering"),R$t.forEach(t),P$r=r(zqe," (RemBERT model)"),zqe.forEach(t),B$r=i(ge),YC=n(ge,"LI",{});var Wqe=s(YC);b4e=n(Wqe,"STRONG",{});var P$t=s(b4e);I$r=r(P$t,"roberta"),P$t.forEach(t),N$r=r(Wqe," \u2014 "),eK=n(Wqe,"A",{href:!0});var B$t=s(eK);q$r=r(B$t,"TFRobertaForQuestionAnswering"),B$t.forEach(t),j$r=r(Wqe," (RoBERTa model)"),Wqe.forEach(t),D$r=i(ge),KC=n(ge,"LI",{});var Qqe=s(KC);v4e=n(Qqe,"STRONG",{});var I$t=s(v4e);G$r=r(I$t,"roformer"),I$t.forEach(t),O$r=r(Qqe," \u2014 "),oK=n(Qqe,"A",{href:!0});var N$t=s(oK);V$r=r(N$t,"TFRoFormerForQuestionAnswering"),N$t.forEach(t),X$r=r(Qqe," (RoFormer model)"),Qqe.forEach(t),z$r=i(ge),ZC=n(ge,"LI",{});var Hqe=s(ZC);F4e=n(Hqe,"STRONG",{});var q$t=s(F4e);W$r=r(q$t,"xlm"),q$t.forEach(t),Q$r=r(Hqe," \u2014 "),rK=n(Hqe,"A",{href:!0});var j$t=s(rK);H$r=r(j$t,"TFXLMForQuestionAnsweringSimple"),j$t.forEach(t),U$r=r(Hqe," (XLM model)"),Hqe.forEach(t),J$r=i(ge),e5=n(ge,"LI",{});var Uqe=s(e5);T4e=n(Uqe,"STRONG",{});var D$t=s(T4e);Y$r=r(D$t,"xlm-roberta"),D$t.forEach(t),K$r=r(Uqe," \u2014 "),tK=n(Uqe,"A",{href:!0});var G$t=s(tK);Z$r=r(G$t,"TFXLMRobertaForQuestionAnswering"),G$t.forEach(t),ekr=r(Uqe," (XLM-RoBERTa model)"),Uqe.forEach(t),okr=i(ge),o5=n(ge,"LI",{});var Jqe=s(o5);M4e=n(Jqe,"STRONG",{});var O$t=s(M4e);rkr=r(O$t,"xlnet"),O$t.forEach(t),tkr=r(Jqe," \u2014 "),aK=n(Jqe,"A",{href:!0});var V$t=s(aK);akr=r(V$t,"TFXLNetForQuestionAnsweringSimple"),V$t.forEach(t),nkr=r(Jqe," (XLNet model)"),Jqe.forEach(t),ge.forEach(t),skr=i(zl),T(r5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ROe=i(f),Bc=n(f,"H2",{class:!0});var OXe=s(Bc);t5=n(OXe,"A",{id:!0,class:!0,href:!0});var X$t=s(t5);E4e=n(X$t,"SPAN",{});var z$t=s(E4e);T(gx.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),lkr=i(OXe),C4e=n(OXe,"SPAN",{});var W$t=s(C4e);ikr=r(W$t,"TFAutoModelForVision2Seq"),W$t.forEach(t),OXe.forEach(t),POe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(hx.$$.fragment,Wl),dkr=i(Wl),Ic=n(Wl,"P",{});var bre=s(Ic);ckr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nK=n(bre,"A",{href:!0});var Q$t=s(nK);fkr=r(Q$t,"from_pretrained()"),Q$t.forEach(t),mkr=r(bre," class method or the "),sK=n(bre,"A",{href:!0});var H$t=s(sK);gkr=r(H$t,"from_config()"),H$t.forEach(t),hkr=r(bre,` class
method.`),bre.forEach(t),pkr=i(Wl),px=n(Wl,"P",{});var VXe=s(px);ukr=r(VXe,"This class cannot be instantiated directly using "),w4e=n(VXe,"CODE",{});var U$t=s(w4e);_kr=r(U$t,"__init__()"),U$t.forEach(t),bkr=r(VXe," (throws an error)."),VXe.forEach(t),vkr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var O6=s(Ot);T(ux.$$.fragment,O6),Fkr=i(O6),A4e=n(O6,"P",{});var J$t=s(A4e);Tkr=r(J$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J$t.forEach(t),Mkr=i(O6),Nc=n(O6,"P",{});var vre=s(Nc);Ekr=r(vre,`Note:
Loading a model from its configuration file does `),L4e=n(vre,"STRONG",{});var Y$t=s(L4e);Ckr=r(Y$t,"not"),Y$t.forEach(t),wkr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(vre,"A",{href:!0});var K$t=s(lK);Akr=r(K$t,"from_pretrained()"),K$t.forEach(t),Lkr=r(vre," to load the model weights."),vre.forEach(t),ykr=i(O6),T(a5.$$.fragment,O6),O6.forEach(t),xkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(_x.$$.fragment,Ql),$kr=i(Ql),y4e=n(Ql,"P",{});var Z$t=s(y4e);kkr=r(Z$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z$t.forEach(t),Skr=i(Ql),_n=n(Ql,"P",{});var V6=s(_n);Rkr=r(V6,"The model class to instantiate is selected based on the "),x4e=n(V6,"CODE",{});var ekt=s(x4e);Pkr=r(ekt,"model_type"),ekt.forEach(t),Bkr=r(V6,` property of the config object (either
passed as an argument or loaded from `),$4e=n(V6,"CODE",{});var okt=s($4e);Ikr=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),Nkr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(V6,"CODE",{});var rkt=s(k4e);qkr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),jkr=r(V6,":"),V6.forEach(t),Dkr=i(Ql),S4e=n(Ql,"UL",{});var tkt=s(S4e);n5=n(tkt,"LI",{});var Yqe=s(n5);R4e=n(Yqe,"STRONG",{});var akt=s(R4e);Gkr=r(akt,"vision-encoder-decoder"),akt.forEach(t),Okr=r(Yqe," \u2014 "),iK=n(Yqe,"A",{href:!0});var nkt=s(iK);Vkr=r(nkt,"TFVisionEncoderDecoderModel"),nkt.forEach(t),Xkr=r(Yqe," (Vision Encoder decoder model)"),Yqe.forEach(t),tkt.forEach(t),zkr=i(Ql),T(s5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),BOe=i(f),qc=n(f,"H2",{class:!0});var XXe=s(qc);l5=n(XXe,"A",{id:!0,class:!0,href:!0});var skt=s(l5);P4e=n(skt,"SPAN",{});var lkt=s(P4e);T(bx.$$.fragment,lkt),lkt.forEach(t),skt.forEach(t),Wkr=i(XXe),B4e=n(XXe,"SPAN",{});var ikt=s(B4e);Qkr=r(ikt,"TFAutoModelForSpeechSeq2Seq"),ikt.forEach(t),XXe.forEach(t),IOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(vx.$$.fragment,Hl),Hkr=i(Hl),jc=n(Hl,"P",{});var Fre=s(jc);Ukr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dK=n(Fre,"A",{href:!0});var dkt=s(dK);Jkr=r(dkt,"from_pretrained()"),dkt.forEach(t),Ykr=r(Fre," class method or the "),cK=n(Fre,"A",{href:!0});var ckt=s(cK);Kkr=r(ckt,"from_config()"),ckt.forEach(t),Zkr=r(Fre,` class
method.`),Fre.forEach(t),eSr=i(Hl),Fx=n(Hl,"P",{});var zXe=s(Fx);oSr=r(zXe,"This class cannot be instantiated directly using "),I4e=n(zXe,"CODE",{});var fkt=s(I4e);rSr=r(fkt,"__init__()"),fkt.forEach(t),tSr=r(zXe," (throws an error)."),zXe.forEach(t),aSr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var X6=s(Vt);T(Tx.$$.fragment,X6),nSr=i(X6),N4e=n(X6,"P",{});var mkt=s(N4e);sSr=r(mkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mkt.forEach(t),lSr=i(X6),Dc=n(X6,"P",{});var Tre=s(Dc);iSr=r(Tre,`Note:
Loading a model from its configuration file does `),q4e=n(Tre,"STRONG",{});var gkt=s(q4e);dSr=r(gkt,"not"),gkt.forEach(t),cSr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(Tre,"A",{href:!0});var hkt=s(fK);fSr=r(hkt,"from_pretrained()"),hkt.forEach(t),mSr=r(Tre," to load the model weights."),Tre.forEach(t),gSr=i(X6),T(i5.$$.fragment,X6),X6.forEach(t),hSr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Mx.$$.fragment,Ul),pSr=i(Ul),j4e=n(Ul,"P",{});var pkt=s(j4e);uSr=r(pkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pkt.forEach(t),_Sr=i(Ul),bn=n(Ul,"P",{});var z6=s(bn);bSr=r(z6,"The model class to instantiate is selected based on the "),D4e=n(z6,"CODE",{});var ukt=s(D4e);vSr=r(ukt,"model_type"),ukt.forEach(t),FSr=r(z6,` property of the config object (either
passed as an argument or loaded from `),G4e=n(z6,"CODE",{});var _kt=s(G4e);TSr=r(_kt,"pretrained_model_name_or_path"),_kt.forEach(t),MSr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(z6,"CODE",{});var bkt=s(O4e);ESr=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),CSr=r(z6,":"),z6.forEach(t),wSr=i(Ul),V4e=n(Ul,"UL",{});var vkt=s(V4e);d5=n(vkt,"LI",{});var Kqe=s(d5);X4e=n(Kqe,"STRONG",{});var Fkt=s(X4e);ASr=r(Fkt,"speech_to_text"),Fkt.forEach(t),LSr=r(Kqe," \u2014 "),mK=n(Kqe,"A",{href:!0});var Tkt=s(mK);ySr=r(Tkt,"TFSpeech2TextForConditionalGeneration"),Tkt.forEach(t),xSr=r(Kqe," (Speech2Text model)"),Kqe.forEach(t),vkt.forEach(t),$Sr=i(Ul),T(c5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),NOe=i(f),Gc=n(f,"H2",{class:!0});var WXe=s(Gc);f5=n(WXe,"A",{id:!0,class:!0,href:!0});var Mkt=s(f5);z4e=n(Mkt,"SPAN",{});var Ekt=s(z4e);T(Ex.$$.fragment,Ekt),Ekt.forEach(t),Mkt.forEach(t),kSr=i(WXe),W4e=n(WXe,"SPAN",{});var Ckt=s(W4e);SSr=r(Ckt,"FlaxAutoModel"),Ckt.forEach(t),WXe.forEach(t),qOe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Cx.$$.fragment,Jl),RSr=i(Jl),Oc=n(Jl,"P",{});var Mre=s(Oc);PSr=r(Mre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gK=n(Mre,"A",{href:!0});var wkt=s(gK);BSr=r(wkt,"from_pretrained()"),wkt.forEach(t),ISr=r(Mre," class method or the "),hK=n(Mre,"A",{href:!0});var Akt=s(hK);NSr=r(Akt,"from_config()"),Akt.forEach(t),qSr=r(Mre,` class
method.`),Mre.forEach(t),jSr=i(Jl),wx=n(Jl,"P",{});var QXe=s(wx);DSr=r(QXe,"This class cannot be instantiated directly using "),Q4e=n(QXe,"CODE",{});var Lkt=s(Q4e);GSr=r(Lkt,"__init__()"),Lkt.forEach(t),OSr=r(QXe," (throws an error)."),QXe.forEach(t),VSr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var W6=s(Xt);T(Ax.$$.fragment,W6),XSr=i(W6),H4e=n(W6,"P",{});var ykt=s(H4e);zSr=r(ykt,"Instantiates one of the base model classes of the library from a configuration."),ykt.forEach(t),WSr=i(W6),Vc=n(W6,"P",{});var Ere=s(Vc);QSr=r(Ere,`Note:
Loading a model from its configuration file does `),U4e=n(Ere,"STRONG",{});var xkt=s(U4e);HSr=r(xkt,"not"),xkt.forEach(t),USr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(Ere,"A",{href:!0});var $kt=s(pK);JSr=r($kt,"from_pretrained()"),$kt.forEach(t),YSr=r(Ere," to load the model weights."),Ere.forEach(t),KSr=i(W6),T(m5.$$.fragment,W6),W6.forEach(t),ZSr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Lx.$$.fragment,Yl),eRr=i(Yl),J4e=n(Yl,"P",{});var kkt=s(J4e);oRr=r(kkt,"Instantiate one of the base model classes of the library from a pretrained model."),kkt.forEach(t),rRr=i(Yl),vn=n(Yl,"P",{});var Q6=s(vn);tRr=r(Q6,"The model class to instantiate is selected based on the "),Y4e=n(Q6,"CODE",{});var Skt=s(Y4e);aRr=r(Skt,"model_type"),Skt.forEach(t),nRr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),K4e=n(Q6,"CODE",{});var Rkt=s(K4e);sRr=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),lRr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(Q6,"CODE",{});var Pkt=s(Z4e);iRr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),dRr=r(Q6,":"),Q6.forEach(t),cRr=i(Yl),ee=n(Yl,"UL",{});var re=s(ee);g5=n(re,"LI",{});var Zqe=s(g5);eEe=n(Zqe,"STRONG",{});var Bkt=s(eEe);fRr=r(Bkt,"albert"),Bkt.forEach(t),mRr=r(Zqe," \u2014 "),uK=n(Zqe,"A",{href:!0});var Ikt=s(uK);gRr=r(Ikt,"FlaxAlbertModel"),Ikt.forEach(t),hRr=r(Zqe," (ALBERT model)"),Zqe.forEach(t),pRr=i(re),h5=n(re,"LI",{});var eje=s(h5);oEe=n(eje,"STRONG",{});var Nkt=s(oEe);uRr=r(Nkt,"bart"),Nkt.forEach(t),_Rr=r(eje," \u2014 "),_K=n(eje,"A",{href:!0});var qkt=s(_K);bRr=r(qkt,"FlaxBartModel"),qkt.forEach(t),vRr=r(eje," (BART model)"),eje.forEach(t),FRr=i(re),p5=n(re,"LI",{});var oje=s(p5);rEe=n(oje,"STRONG",{});var jkt=s(rEe);TRr=r(jkt,"beit"),jkt.forEach(t),MRr=r(oje," \u2014 "),bK=n(oje,"A",{href:!0});var Dkt=s(bK);ERr=r(Dkt,"FlaxBeitModel"),Dkt.forEach(t),CRr=r(oje," (BEiT model)"),oje.forEach(t),wRr=i(re),u5=n(re,"LI",{});var rje=s(u5);tEe=n(rje,"STRONG",{});var Gkt=s(tEe);ARr=r(Gkt,"bert"),Gkt.forEach(t),LRr=r(rje," \u2014 "),vK=n(rje,"A",{href:!0});var Okt=s(vK);yRr=r(Okt,"FlaxBertModel"),Okt.forEach(t),xRr=r(rje," (BERT model)"),rje.forEach(t),$Rr=i(re),_5=n(re,"LI",{});var tje=s(_5);aEe=n(tje,"STRONG",{});var Vkt=s(aEe);kRr=r(Vkt,"big_bird"),Vkt.forEach(t),SRr=r(tje," \u2014 "),FK=n(tje,"A",{href:!0});var Xkt=s(FK);RRr=r(Xkt,"FlaxBigBirdModel"),Xkt.forEach(t),PRr=r(tje," (BigBird model)"),tje.forEach(t),BRr=i(re),b5=n(re,"LI",{});var aje=s(b5);nEe=n(aje,"STRONG",{});var zkt=s(nEe);IRr=r(zkt,"blenderbot"),zkt.forEach(t),NRr=r(aje," \u2014 "),TK=n(aje,"A",{href:!0});var Wkt=s(TK);qRr=r(Wkt,"FlaxBlenderbotModel"),Wkt.forEach(t),jRr=r(aje," (Blenderbot model)"),aje.forEach(t),DRr=i(re),v5=n(re,"LI",{});var nje=s(v5);sEe=n(nje,"STRONG",{});var Qkt=s(sEe);GRr=r(Qkt,"blenderbot-small"),Qkt.forEach(t),ORr=r(nje," \u2014 "),MK=n(nje,"A",{href:!0});var Hkt=s(MK);VRr=r(Hkt,"FlaxBlenderbotSmallModel"),Hkt.forEach(t),XRr=r(nje," (BlenderbotSmall model)"),nje.forEach(t),zRr=i(re),F5=n(re,"LI",{});var sje=s(F5);lEe=n(sje,"STRONG",{});var Ukt=s(lEe);WRr=r(Ukt,"clip"),Ukt.forEach(t),QRr=r(sje," \u2014 "),EK=n(sje,"A",{href:!0});var Jkt=s(EK);HRr=r(Jkt,"FlaxCLIPModel"),Jkt.forEach(t),URr=r(sje," (CLIP model)"),sje.forEach(t),JRr=i(re),T5=n(re,"LI",{});var lje=s(T5);iEe=n(lje,"STRONG",{});var Ykt=s(iEe);YRr=r(Ykt,"distilbert"),Ykt.forEach(t),KRr=r(lje," \u2014 "),CK=n(lje,"A",{href:!0});var Kkt=s(CK);ZRr=r(Kkt,"FlaxDistilBertModel"),Kkt.forEach(t),ePr=r(lje," (DistilBERT model)"),lje.forEach(t),oPr=i(re),M5=n(re,"LI",{});var ije=s(M5);dEe=n(ije,"STRONG",{});var Zkt=s(dEe);rPr=r(Zkt,"dpt"),Zkt.forEach(t),tPr=r(ije," \u2014 "),wK=n(ije,"A",{href:!0});var eSt=s(wK);aPr=r(eSt,"FlaxDPTModel"),eSt.forEach(t),nPr=r(ije," (DPT model)"),ije.forEach(t),sPr=i(re),E5=n(re,"LI",{});var dje=s(E5);cEe=n(dje,"STRONG",{});var oSt=s(cEe);lPr=r(oSt,"electra"),oSt.forEach(t),iPr=r(dje," \u2014 "),AK=n(dje,"A",{href:!0});var rSt=s(AK);dPr=r(rSt,"FlaxElectraModel"),rSt.forEach(t),cPr=r(dje," (ELECTRA model)"),dje.forEach(t),fPr=i(re),C5=n(re,"LI",{});var cje=s(C5);fEe=n(cje,"STRONG",{});var tSt=s(fEe);mPr=r(tSt,"gpt2"),tSt.forEach(t),gPr=r(cje," \u2014 "),LK=n(cje,"A",{href:!0});var aSt=s(LK);hPr=r(aSt,"FlaxGPT2Model"),aSt.forEach(t),pPr=r(cje," (OpenAI GPT-2 model)"),cje.forEach(t),uPr=i(re),w5=n(re,"LI",{});var fje=s(w5);mEe=n(fje,"STRONG",{});var nSt=s(mEe);_Pr=r(nSt,"gpt_neo"),nSt.forEach(t),bPr=r(fje," \u2014 "),yK=n(fje,"A",{href:!0});var sSt=s(yK);vPr=r(sSt,"FlaxGPTNeoModel"),sSt.forEach(t),FPr=r(fje," (GPT Neo model)"),fje.forEach(t),TPr=i(re),A5=n(re,"LI",{});var mje=s(A5);gEe=n(mje,"STRONG",{});var lSt=s(gEe);MPr=r(lSt,"gptj"),lSt.forEach(t),EPr=r(mje," \u2014 "),xK=n(mje,"A",{href:!0});var iSt=s(xK);CPr=r(iSt,"FlaxGPTJModel"),iSt.forEach(t),wPr=r(mje," (GPT-J model)"),mje.forEach(t),APr=i(re),L5=n(re,"LI",{});var gje=s(L5);hEe=n(gje,"STRONG",{});var dSt=s(hEe);LPr=r(dSt,"longt5"),dSt.forEach(t),yPr=r(gje," \u2014 "),$K=n(gje,"A",{href:!0});var cSt=s($K);xPr=r(cSt,"FlaxLongT5Model"),cSt.forEach(t),$Pr=r(gje," (LongT5 model)"),gje.forEach(t),kPr=i(re),y5=n(re,"LI",{});var hje=s(y5);pEe=n(hje,"STRONG",{});var fSt=s(pEe);SPr=r(fSt,"marian"),fSt.forEach(t),RPr=r(hje," \u2014 "),kK=n(hje,"A",{href:!0});var mSt=s(kK);PPr=r(mSt,"FlaxMarianModel"),mSt.forEach(t),BPr=r(hje," (Marian model)"),hje.forEach(t),IPr=i(re),x5=n(re,"LI",{});var pje=s(x5);uEe=n(pje,"STRONG",{});var gSt=s(uEe);NPr=r(gSt,"mbart"),gSt.forEach(t),qPr=r(pje," \u2014 "),SK=n(pje,"A",{href:!0});var hSt=s(SK);jPr=r(hSt,"FlaxMBartModel"),hSt.forEach(t),DPr=r(pje," (mBART model)"),pje.forEach(t),GPr=i(re),$5=n(re,"LI",{});var uje=s($5);_Ee=n(uje,"STRONG",{});var pSt=s(_Ee);OPr=r(pSt,"mt5"),pSt.forEach(t),VPr=r(uje," \u2014 "),RK=n(uje,"A",{href:!0});var uSt=s(RK);XPr=r(uSt,"FlaxMT5Model"),uSt.forEach(t),zPr=r(uje," (MT5 model)"),uje.forEach(t),WPr=i(re),k5=n(re,"LI",{});var _je=s(k5);bEe=n(_je,"STRONG",{});var _St=s(bEe);QPr=r(_St,"opt"),_St.forEach(t),HPr=r(_je," \u2014 "),PK=n(_je,"A",{href:!0});var bSt=s(PK);UPr=r(bSt,"FlaxOPTModel"),bSt.forEach(t),JPr=r(_je," (OPT model)"),_je.forEach(t),YPr=i(re),S5=n(re,"LI",{});var bje=s(S5);vEe=n(bje,"STRONG",{});var vSt=s(vEe);KPr=r(vSt,"pegasus"),vSt.forEach(t),ZPr=r(bje," \u2014 "),BK=n(bje,"A",{href:!0});var FSt=s(BK);eBr=r(FSt,"FlaxPegasusModel"),FSt.forEach(t),oBr=r(bje," (Pegasus model)"),bje.forEach(t),rBr=i(re),R5=n(re,"LI",{});var vje=s(R5);FEe=n(vje,"STRONG",{});var TSt=s(FEe);tBr=r(TSt,"roberta"),TSt.forEach(t),aBr=r(vje," \u2014 "),IK=n(vje,"A",{href:!0});var MSt=s(IK);nBr=r(MSt,"FlaxRobertaModel"),MSt.forEach(t),sBr=r(vje," (RoBERTa model)"),vje.forEach(t),lBr=i(re),P5=n(re,"LI",{});var Fje=s(P5);TEe=n(Fje,"STRONG",{});var ESt=s(TEe);iBr=r(ESt,"roformer"),ESt.forEach(t),dBr=r(Fje," \u2014 "),NK=n(Fje,"A",{href:!0});var CSt=s(NK);cBr=r(CSt,"FlaxRoFormerModel"),CSt.forEach(t),fBr=r(Fje," (RoFormer model)"),Fje.forEach(t),mBr=i(re),B5=n(re,"LI",{});var Tje=s(B5);MEe=n(Tje,"STRONG",{});var wSt=s(MEe);gBr=r(wSt,"t5"),wSt.forEach(t),hBr=r(Tje," \u2014 "),qK=n(Tje,"A",{href:!0});var ASt=s(qK);pBr=r(ASt,"FlaxT5Model"),ASt.forEach(t),uBr=r(Tje," (T5 model)"),Tje.forEach(t),_Br=i(re),I5=n(re,"LI",{});var Mje=s(I5);EEe=n(Mje,"STRONG",{});var LSt=s(EEe);bBr=r(LSt,"vision-text-dual-encoder"),LSt.forEach(t),vBr=r(Mje," \u2014 "),jK=n(Mje,"A",{href:!0});var ySt=s(jK);FBr=r(ySt,"FlaxVisionTextDualEncoderModel"),ySt.forEach(t),TBr=r(Mje," (VisionTextDualEncoder model)"),Mje.forEach(t),MBr=i(re),N5=n(re,"LI",{});var Eje=s(N5);CEe=n(Eje,"STRONG",{});var xSt=s(CEe);EBr=r(xSt,"vit"),xSt.forEach(t),CBr=r(Eje," \u2014 "),DK=n(Eje,"A",{href:!0});var $St=s(DK);wBr=r($St,"FlaxViTModel"),$St.forEach(t),ABr=r(Eje," (ViT model)"),Eje.forEach(t),LBr=i(re),q5=n(re,"LI",{});var Cje=s(q5);wEe=n(Cje,"STRONG",{});var kSt=s(wEe);yBr=r(kSt,"wav2vec2"),kSt.forEach(t),xBr=r(Cje," \u2014 "),GK=n(Cje,"A",{href:!0});var SSt=s(GK);$Br=r(SSt,"FlaxWav2Vec2Model"),SSt.forEach(t),kBr=r(Cje," (Wav2Vec2 model)"),Cje.forEach(t),SBr=i(re),j5=n(re,"LI",{});var wje=s(j5);AEe=n(wje,"STRONG",{});var RSt=s(AEe);RBr=r(RSt,"xglm"),RSt.forEach(t),PBr=r(wje," \u2014 "),OK=n(wje,"A",{href:!0});var PSt=s(OK);BBr=r(PSt,"FlaxXGLMModel"),PSt.forEach(t),IBr=r(wje," (XGLM model)"),wje.forEach(t),NBr=i(re),D5=n(re,"LI",{});var Aje=s(D5);LEe=n(Aje,"STRONG",{});var BSt=s(LEe);qBr=r(BSt,"xlm-roberta"),BSt.forEach(t),jBr=r(Aje," \u2014 "),VK=n(Aje,"A",{href:!0});var ISt=s(VK);DBr=r(ISt,"FlaxXLMRobertaModel"),ISt.forEach(t),GBr=r(Aje," (XLM-RoBERTa model)"),Aje.forEach(t),re.forEach(t),OBr=i(Yl),T(G5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),jOe=i(f),Xc=n(f,"H2",{class:!0});var HXe=s(Xc);O5=n(HXe,"A",{id:!0,class:!0,href:!0});var NSt=s(O5);yEe=n(NSt,"SPAN",{});var qSt=s(yEe);T(yx.$$.fragment,qSt),qSt.forEach(t),NSt.forEach(t),VBr=i(HXe),xEe=n(HXe,"SPAN",{});var jSt=s(xEe);XBr=r(jSt,"FlaxAutoModelForCausalLM"),jSt.forEach(t),HXe.forEach(t),DOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(xx.$$.fragment,Kl),zBr=i(Kl),zc=n(Kl,"P",{});var Cre=s(zc);WBr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XK=n(Cre,"A",{href:!0});var DSt=s(XK);QBr=r(DSt,"from_pretrained()"),DSt.forEach(t),HBr=r(Cre," class method or the "),zK=n(Cre,"A",{href:!0});var GSt=s(zK);UBr=r(GSt,"from_config()"),GSt.forEach(t),JBr=r(Cre,` class
method.`),Cre.forEach(t),YBr=i(Kl),$x=n(Kl,"P",{});var UXe=s($x);KBr=r(UXe,"This class cannot be instantiated directly using "),$Ee=n(UXe,"CODE",{});var OSt=s($Ee);ZBr=r(OSt,"__init__()"),OSt.forEach(t),eIr=r(UXe," (throws an error)."),UXe.forEach(t),oIr=i(Kl),zt=n(Kl,"DIV",{class:!0});var H6=s(zt);T(kx.$$.fragment,H6),rIr=i(H6),kEe=n(H6,"P",{});var VSt=s(kEe);tIr=r(VSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VSt.forEach(t),aIr=i(H6),Wc=n(H6,"P",{});var wre=s(Wc);nIr=r(wre,`Note:
Loading a model from its configuration file does `),SEe=n(wre,"STRONG",{});var XSt=s(SEe);sIr=r(XSt,"not"),XSt.forEach(t),lIr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(wre,"A",{href:!0});var zSt=s(WK);iIr=r(zSt,"from_pretrained()"),zSt.forEach(t),dIr=r(wre," to load the model weights."),wre.forEach(t),cIr=i(H6),T(V5.$$.fragment,H6),H6.forEach(t),fIr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Sx.$$.fragment,Zl),mIr=i(Zl),REe=n(Zl,"P",{});var WSt=s(REe);gIr=r(WSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WSt.forEach(t),hIr=i(Zl),Fn=n(Zl,"P",{});var U6=s(Fn);pIr=r(U6,"The model class to instantiate is selected based on the "),PEe=n(U6,"CODE",{});var QSt=s(PEe);uIr=r(QSt,"model_type"),QSt.forEach(t),_Ir=r(U6,` property of the config object (either
passed as an argument or loaded from `),BEe=n(U6,"CODE",{});var HSt=s(BEe);bIr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),vIr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(U6,"CODE",{});var USt=s(IEe);FIr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),TIr=r(U6,":"),U6.forEach(t),MIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);X5=n(Ne,"LI",{});var Lje=s(X5);NEe=n(Lje,"STRONG",{});var JSt=s(NEe);EIr=r(JSt,"bart"),JSt.forEach(t),CIr=r(Lje," \u2014 "),QK=n(Lje,"A",{href:!0});var YSt=s(QK);wIr=r(YSt,"FlaxBartForCausalLM"),YSt.forEach(t),AIr=r(Lje," (BART model)"),Lje.forEach(t),LIr=i(Ne),z5=n(Ne,"LI",{});var yje=s(z5);qEe=n(yje,"STRONG",{});var KSt=s(qEe);yIr=r(KSt,"bert"),KSt.forEach(t),xIr=r(yje," \u2014 "),HK=n(yje,"A",{href:!0});var ZSt=s(HK);$Ir=r(ZSt,"FlaxBertForCausalLM"),ZSt.forEach(t),kIr=r(yje," (BERT model)"),yje.forEach(t),SIr=i(Ne),W5=n(Ne,"LI",{});var xje=s(W5);jEe=n(xje,"STRONG",{});var eRt=s(jEe);RIr=r(eRt,"big_bird"),eRt.forEach(t),PIr=r(xje," \u2014 "),UK=n(xje,"A",{href:!0});var oRt=s(UK);BIr=r(oRt,"FlaxBigBirdForCausalLM"),oRt.forEach(t),IIr=r(xje," (BigBird model)"),xje.forEach(t),NIr=i(Ne),Q5=n(Ne,"LI",{});var $je=s(Q5);DEe=n($je,"STRONG",{});var rRt=s(DEe);qIr=r(rRt,"electra"),rRt.forEach(t),jIr=r($je," \u2014 "),JK=n($je,"A",{href:!0});var tRt=s(JK);DIr=r(tRt,"FlaxElectraForCausalLM"),tRt.forEach(t),GIr=r($je," (ELECTRA model)"),$je.forEach(t),OIr=i(Ne),H5=n(Ne,"LI",{});var kje=s(H5);GEe=n(kje,"STRONG",{});var aRt=s(GEe);VIr=r(aRt,"gpt2"),aRt.forEach(t),XIr=r(kje," \u2014 "),YK=n(kje,"A",{href:!0});var nRt=s(YK);zIr=r(nRt,"FlaxGPT2LMHeadModel"),nRt.forEach(t),WIr=r(kje," (OpenAI GPT-2 model)"),kje.forEach(t),QIr=i(Ne),U5=n(Ne,"LI",{});var Sje=s(U5);OEe=n(Sje,"STRONG",{});var sRt=s(OEe);HIr=r(sRt,"gpt_neo"),sRt.forEach(t),UIr=r(Sje," \u2014 "),KK=n(Sje,"A",{href:!0});var lRt=s(KK);JIr=r(lRt,"FlaxGPTNeoForCausalLM"),lRt.forEach(t),YIr=r(Sje," (GPT Neo model)"),Sje.forEach(t),KIr=i(Ne),J5=n(Ne,"LI",{});var Rje=s(J5);VEe=n(Rje,"STRONG",{});var iRt=s(VEe);ZIr=r(iRt,"gptj"),iRt.forEach(t),eNr=r(Rje," \u2014 "),ZK=n(Rje,"A",{href:!0});var dRt=s(ZK);oNr=r(dRt,"FlaxGPTJForCausalLM"),dRt.forEach(t),rNr=r(Rje," (GPT-J model)"),Rje.forEach(t),tNr=i(Ne),Y5=n(Ne,"LI",{});var Pje=s(Y5);XEe=n(Pje,"STRONG",{});var cRt=s(XEe);aNr=r(cRt,"opt"),cRt.forEach(t),nNr=r(Pje," \u2014 "),eZ=n(Pje,"A",{href:!0});var fRt=s(eZ);sNr=r(fRt,"FlaxOPTForCausalLM"),fRt.forEach(t),lNr=r(Pje," (OPT model)"),Pje.forEach(t),iNr=i(Ne),K5=n(Ne,"LI",{});var Bje=s(K5);zEe=n(Bje,"STRONG",{});var mRt=s(zEe);dNr=r(mRt,"roberta"),mRt.forEach(t),cNr=r(Bje," \u2014 "),oZ=n(Bje,"A",{href:!0});var gRt=s(oZ);fNr=r(gRt,"FlaxRobertaForCausalLM"),gRt.forEach(t),mNr=r(Bje," (RoBERTa model)"),Bje.forEach(t),gNr=i(Ne),Z5=n(Ne,"LI",{});var Ije=s(Z5);WEe=n(Ije,"STRONG",{});var hRt=s(WEe);hNr=r(hRt,"xglm"),hRt.forEach(t),pNr=r(Ije," \u2014 "),rZ=n(Ije,"A",{href:!0});var pRt=s(rZ);uNr=r(pRt,"FlaxXGLMForCausalLM"),pRt.forEach(t),_Nr=r(Ije," (XGLM model)"),Ije.forEach(t),Ne.forEach(t),bNr=i(Zl),T(e3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),GOe=i(f),Qc=n(f,"H2",{class:!0});var JXe=s(Qc);o3=n(JXe,"A",{id:!0,class:!0,href:!0});var uRt=s(o3);QEe=n(uRt,"SPAN",{});var _Rt=s(QEe);T(Rx.$$.fragment,_Rt),_Rt.forEach(t),uRt.forEach(t),vNr=i(JXe),HEe=n(JXe,"SPAN",{});var bRt=s(HEe);FNr=r(bRt,"FlaxAutoModelForPreTraining"),bRt.forEach(t),JXe.forEach(t),OOe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Px.$$.fragment,ei),TNr=i(ei),Hc=n(ei,"P",{});var Are=s(Hc);MNr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tZ=n(Are,"A",{href:!0});var vRt=s(tZ);ENr=r(vRt,"from_pretrained()"),vRt.forEach(t),CNr=r(Are," class method or the "),aZ=n(Are,"A",{href:!0});var FRt=s(aZ);wNr=r(FRt,"from_config()"),FRt.forEach(t),ANr=r(Are,` class
method.`),Are.forEach(t),LNr=i(ei),Bx=n(ei,"P",{});var YXe=s(Bx);yNr=r(YXe,"This class cannot be instantiated directly using "),UEe=n(YXe,"CODE",{});var TRt=s(UEe);xNr=r(TRt,"__init__()"),TRt.forEach(t),$Nr=r(YXe," (throws an error)."),YXe.forEach(t),kNr=i(ei),Wt=n(ei,"DIV",{class:!0});var J6=s(Wt);T(Ix.$$.fragment,J6),SNr=i(J6),JEe=n(J6,"P",{});var MRt=s(JEe);RNr=r(MRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MRt.forEach(t),PNr=i(J6),Uc=n(J6,"P",{});var Lre=s(Uc);BNr=r(Lre,`Note:
Loading a model from its configuration file does `),YEe=n(Lre,"STRONG",{});var ERt=s(YEe);INr=r(ERt,"not"),ERt.forEach(t),NNr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(Lre,"A",{href:!0});var CRt=s(nZ);qNr=r(CRt,"from_pretrained()"),CRt.forEach(t),jNr=r(Lre," to load the model weights."),Lre.forEach(t),DNr=i(J6),T(r3.$$.fragment,J6),J6.forEach(t),GNr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Nx.$$.fragment,oi),ONr=i(oi),KEe=n(oi,"P",{});var wRt=s(KEe);VNr=r(wRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wRt.forEach(t),XNr=i(oi),Tn=n(oi,"P",{});var Y6=s(Tn);zNr=r(Y6,"The model class to instantiate is selected based on the "),ZEe=n(Y6,"CODE",{});var ARt=s(ZEe);WNr=r(ARt,"model_type"),ARt.forEach(t),QNr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),eCe=n(Y6,"CODE",{});var LRt=s(eCe);HNr=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),UNr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n(Y6,"CODE",{});var yRt=s(oCe);JNr=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),YNr=r(Y6,":"),Y6.forEach(t),KNr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);t3=n(we,"LI",{});var Nje=s(t3);rCe=n(Nje,"STRONG",{});var xRt=s(rCe);ZNr=r(xRt,"albert"),xRt.forEach(t),eqr=r(Nje," \u2014 "),sZ=n(Nje,"A",{href:!0});var $Rt=s(sZ);oqr=r($Rt,"FlaxAlbertForPreTraining"),$Rt.forEach(t),rqr=r(Nje," (ALBERT model)"),Nje.forEach(t),tqr=i(we),a3=n(we,"LI",{});var qje=s(a3);tCe=n(qje,"STRONG",{});var kRt=s(tCe);aqr=r(kRt,"bart"),kRt.forEach(t),nqr=r(qje," \u2014 "),lZ=n(qje,"A",{href:!0});var SRt=s(lZ);sqr=r(SRt,"FlaxBartForConditionalGeneration"),SRt.forEach(t),lqr=r(qje," (BART model)"),qje.forEach(t),iqr=i(we),n3=n(we,"LI",{});var jje=s(n3);aCe=n(jje,"STRONG",{});var RRt=s(aCe);dqr=r(RRt,"bert"),RRt.forEach(t),cqr=r(jje," \u2014 "),iZ=n(jje,"A",{href:!0});var PRt=s(iZ);fqr=r(PRt,"FlaxBertForPreTraining"),PRt.forEach(t),mqr=r(jje," (BERT model)"),jje.forEach(t),gqr=i(we),s3=n(we,"LI",{});var Dje=s(s3);nCe=n(Dje,"STRONG",{});var BRt=s(nCe);hqr=r(BRt,"big_bird"),BRt.forEach(t),pqr=r(Dje," \u2014 "),dZ=n(Dje,"A",{href:!0});var IRt=s(dZ);uqr=r(IRt,"FlaxBigBirdForPreTraining"),IRt.forEach(t),_qr=r(Dje," (BigBird model)"),Dje.forEach(t),bqr=i(we),l3=n(we,"LI",{});var Gje=s(l3);sCe=n(Gje,"STRONG",{});var NRt=s(sCe);vqr=r(NRt,"electra"),NRt.forEach(t),Fqr=r(Gje," \u2014 "),cZ=n(Gje,"A",{href:!0});var qRt=s(cZ);Tqr=r(qRt,"FlaxElectraForPreTraining"),qRt.forEach(t),Mqr=r(Gje," (ELECTRA model)"),Gje.forEach(t),Eqr=i(we),i3=n(we,"LI",{});var Oje=s(i3);lCe=n(Oje,"STRONG",{});var jRt=s(lCe);Cqr=r(jRt,"longt5"),jRt.forEach(t),wqr=r(Oje," \u2014 "),fZ=n(Oje,"A",{href:!0});var DRt=s(fZ);Aqr=r(DRt,"FlaxLongT5ForConditionalGeneration"),DRt.forEach(t),Lqr=r(Oje," (LongT5 model)"),Oje.forEach(t),yqr=i(we),d3=n(we,"LI",{});var Vje=s(d3);iCe=n(Vje,"STRONG",{});var GRt=s(iCe);xqr=r(GRt,"mbart"),GRt.forEach(t),$qr=r(Vje," \u2014 "),mZ=n(Vje,"A",{href:!0});var ORt=s(mZ);kqr=r(ORt,"FlaxMBartForConditionalGeneration"),ORt.forEach(t),Sqr=r(Vje," (mBART model)"),Vje.forEach(t),Rqr=i(we),c3=n(we,"LI",{});var Xje=s(c3);dCe=n(Xje,"STRONG",{});var VRt=s(dCe);Pqr=r(VRt,"mt5"),VRt.forEach(t),Bqr=r(Xje," \u2014 "),gZ=n(Xje,"A",{href:!0});var XRt=s(gZ);Iqr=r(XRt,"FlaxMT5ForConditionalGeneration"),XRt.forEach(t),Nqr=r(Xje," (MT5 model)"),Xje.forEach(t),qqr=i(we),f3=n(we,"LI",{});var zje=s(f3);cCe=n(zje,"STRONG",{});var zRt=s(cCe);jqr=r(zRt,"roberta"),zRt.forEach(t),Dqr=r(zje," \u2014 "),hZ=n(zje,"A",{href:!0});var WRt=s(hZ);Gqr=r(WRt,"FlaxRobertaForMaskedLM"),WRt.forEach(t),Oqr=r(zje," (RoBERTa model)"),zje.forEach(t),Vqr=i(we),m3=n(we,"LI",{});var Wje=s(m3);fCe=n(Wje,"STRONG",{});var QRt=s(fCe);Xqr=r(QRt,"roformer"),QRt.forEach(t),zqr=r(Wje," \u2014 "),pZ=n(Wje,"A",{href:!0});var HRt=s(pZ);Wqr=r(HRt,"FlaxRoFormerForMaskedLM"),HRt.forEach(t),Qqr=r(Wje," (RoFormer model)"),Wje.forEach(t),Hqr=i(we),g3=n(we,"LI",{});var Qje=s(g3);mCe=n(Qje,"STRONG",{});var URt=s(mCe);Uqr=r(URt,"t5"),URt.forEach(t),Jqr=r(Qje," \u2014 "),uZ=n(Qje,"A",{href:!0});var JRt=s(uZ);Yqr=r(JRt,"FlaxT5ForConditionalGeneration"),JRt.forEach(t),Kqr=r(Qje," (T5 model)"),Qje.forEach(t),Zqr=i(we),h3=n(we,"LI",{});var Hje=s(h3);gCe=n(Hje,"STRONG",{});var YRt=s(gCe);ejr=r(YRt,"wav2vec2"),YRt.forEach(t),ojr=r(Hje," \u2014 "),_Z=n(Hje,"A",{href:!0});var KRt=s(_Z);rjr=r(KRt,"FlaxWav2Vec2ForPreTraining"),KRt.forEach(t),tjr=r(Hje," (Wav2Vec2 model)"),Hje.forEach(t),ajr=i(we),p3=n(we,"LI",{});var Uje=s(p3);hCe=n(Uje,"STRONG",{});var ZRt=s(hCe);njr=r(ZRt,"xlm-roberta"),ZRt.forEach(t),sjr=r(Uje," \u2014 "),bZ=n(Uje,"A",{href:!0});var ePt=s(bZ);ljr=r(ePt,"FlaxXLMRobertaForMaskedLM"),ePt.forEach(t),ijr=r(Uje," (XLM-RoBERTa model)"),Uje.forEach(t),we.forEach(t),djr=i(oi),T(u3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),VOe=i(f),Jc=n(f,"H2",{class:!0});var KXe=s(Jc);_3=n(KXe,"A",{id:!0,class:!0,href:!0});var oPt=s(_3);pCe=n(oPt,"SPAN",{});var rPt=s(pCe);T(qx.$$.fragment,rPt),rPt.forEach(t),oPt.forEach(t),cjr=i(KXe),uCe=n(KXe,"SPAN",{});var tPt=s(uCe);fjr=r(tPt,"FlaxAutoModelForMaskedLM"),tPt.forEach(t),KXe.forEach(t),XOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(jx.$$.fragment,ri),mjr=i(ri),Yc=n(ri,"P",{});var yre=s(Yc);gjr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vZ=n(yre,"A",{href:!0});var aPt=s(vZ);hjr=r(aPt,"from_pretrained()"),aPt.forEach(t),pjr=r(yre," class method or the "),FZ=n(yre,"A",{href:!0});var nPt=s(FZ);ujr=r(nPt,"from_config()"),nPt.forEach(t),_jr=r(yre,` class
method.`),yre.forEach(t),bjr=i(ri),Dx=n(ri,"P",{});var ZXe=s(Dx);vjr=r(ZXe,"This class cannot be instantiated directly using "),_Ce=n(ZXe,"CODE",{});var sPt=s(_Ce);Fjr=r(sPt,"__init__()"),sPt.forEach(t),Tjr=r(ZXe," (throws an error)."),ZXe.forEach(t),Mjr=i(ri),Qt=n(ri,"DIV",{class:!0});var K6=s(Qt);T(Gx.$$.fragment,K6),Ejr=i(K6),bCe=n(K6,"P",{});var lPt=s(bCe);Cjr=r(lPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lPt.forEach(t),wjr=i(K6),Kc=n(K6,"P",{});var xre=s(Kc);Ajr=r(xre,`Note:
Loading a model from its configuration file does `),vCe=n(xre,"STRONG",{});var iPt=s(vCe);Ljr=r(iPt,"not"),iPt.forEach(t),yjr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(xre,"A",{href:!0});var dPt=s(TZ);xjr=r(dPt,"from_pretrained()"),dPt.forEach(t),$jr=r(xre," to load the model weights."),xre.forEach(t),kjr=i(K6),T(b3.$$.fragment,K6),K6.forEach(t),Sjr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Ox.$$.fragment,ti),Rjr=i(ti),FCe=n(ti,"P",{});var cPt=s(FCe);Pjr=r(cPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPt.forEach(t),Bjr=i(ti),Mn=n(ti,"P",{});var Z6=s(Mn);Ijr=r(Z6,"The model class to instantiate is selected based on the "),TCe=n(Z6,"CODE",{});var fPt=s(TCe);Njr=r(fPt,"model_type"),fPt.forEach(t),qjr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),MCe=n(Z6,"CODE",{});var mPt=s(MCe);jjr=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),Djr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(Z6,"CODE",{});var gPt=s(ECe);Gjr=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),Ojr=r(Z6,":"),Z6.forEach(t),Vjr=i(ti),$e=n(ti,"UL",{});var qe=s($e);v3=n(qe,"LI",{});var Jje=s(v3);CCe=n(Jje,"STRONG",{});var hPt=s(CCe);Xjr=r(hPt,"albert"),hPt.forEach(t),zjr=r(Jje," \u2014 "),MZ=n(Jje,"A",{href:!0});var pPt=s(MZ);Wjr=r(pPt,"FlaxAlbertForMaskedLM"),pPt.forEach(t),Qjr=r(Jje," (ALBERT model)"),Jje.forEach(t),Hjr=i(qe),F3=n(qe,"LI",{});var Yje=s(F3);wCe=n(Yje,"STRONG",{});var uPt=s(wCe);Ujr=r(uPt,"bart"),uPt.forEach(t),Jjr=r(Yje," \u2014 "),EZ=n(Yje,"A",{href:!0});var _Pt=s(EZ);Yjr=r(_Pt,"FlaxBartForConditionalGeneration"),_Pt.forEach(t),Kjr=r(Yje," (BART model)"),Yje.forEach(t),Zjr=i(qe),T3=n(qe,"LI",{});var Kje=s(T3);ACe=n(Kje,"STRONG",{});var bPt=s(ACe);eDr=r(bPt,"bert"),bPt.forEach(t),oDr=r(Kje," \u2014 "),CZ=n(Kje,"A",{href:!0});var vPt=s(CZ);rDr=r(vPt,"FlaxBertForMaskedLM"),vPt.forEach(t),tDr=r(Kje," (BERT model)"),Kje.forEach(t),aDr=i(qe),M3=n(qe,"LI",{});var Zje=s(M3);LCe=n(Zje,"STRONG",{});var FPt=s(LCe);nDr=r(FPt,"big_bird"),FPt.forEach(t),sDr=r(Zje," \u2014 "),wZ=n(Zje,"A",{href:!0});var TPt=s(wZ);lDr=r(TPt,"FlaxBigBirdForMaskedLM"),TPt.forEach(t),iDr=r(Zje," (BigBird model)"),Zje.forEach(t),dDr=i(qe),E3=n(qe,"LI",{});var eDe=s(E3);yCe=n(eDe,"STRONG",{});var MPt=s(yCe);cDr=r(MPt,"distilbert"),MPt.forEach(t),fDr=r(eDe," \u2014 "),AZ=n(eDe,"A",{href:!0});var EPt=s(AZ);mDr=r(EPt,"FlaxDistilBertForMaskedLM"),EPt.forEach(t),gDr=r(eDe," (DistilBERT model)"),eDe.forEach(t),hDr=i(qe),C3=n(qe,"LI",{});var oDe=s(C3);xCe=n(oDe,"STRONG",{});var CPt=s(xCe);pDr=r(CPt,"electra"),CPt.forEach(t),uDr=r(oDe," \u2014 "),LZ=n(oDe,"A",{href:!0});var wPt=s(LZ);_Dr=r(wPt,"FlaxElectraForMaskedLM"),wPt.forEach(t),bDr=r(oDe," (ELECTRA model)"),oDe.forEach(t),vDr=i(qe),w3=n(qe,"LI",{});var rDe=s(w3);$Ce=n(rDe,"STRONG",{});var APt=s($Ce);FDr=r(APt,"mbart"),APt.forEach(t),TDr=r(rDe," \u2014 "),yZ=n(rDe,"A",{href:!0});var LPt=s(yZ);MDr=r(LPt,"FlaxMBartForConditionalGeneration"),LPt.forEach(t),EDr=r(rDe," (mBART model)"),rDe.forEach(t),CDr=i(qe),A3=n(qe,"LI",{});var tDe=s(A3);kCe=n(tDe,"STRONG",{});var yPt=s(kCe);wDr=r(yPt,"roberta"),yPt.forEach(t),ADr=r(tDe," \u2014 "),xZ=n(tDe,"A",{href:!0});var xPt=s(xZ);LDr=r(xPt,"FlaxRobertaForMaskedLM"),xPt.forEach(t),yDr=r(tDe," (RoBERTa model)"),tDe.forEach(t),xDr=i(qe),L3=n(qe,"LI",{});var aDe=s(L3);SCe=n(aDe,"STRONG",{});var $Pt=s(SCe);$Dr=r($Pt,"roformer"),$Pt.forEach(t),kDr=r(aDe," \u2014 "),$Z=n(aDe,"A",{href:!0});var kPt=s($Z);SDr=r(kPt,"FlaxRoFormerForMaskedLM"),kPt.forEach(t),RDr=r(aDe," (RoFormer model)"),aDe.forEach(t),PDr=i(qe),y3=n(qe,"LI",{});var nDe=s(y3);RCe=n(nDe,"STRONG",{});var SPt=s(RCe);BDr=r(SPt,"xlm-roberta"),SPt.forEach(t),IDr=r(nDe," \u2014 "),kZ=n(nDe,"A",{href:!0});var RPt=s(kZ);NDr=r(RPt,"FlaxXLMRobertaForMaskedLM"),RPt.forEach(t),qDr=r(nDe," (XLM-RoBERTa model)"),nDe.forEach(t),qe.forEach(t),jDr=i(ti),T(x3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),zOe=i(f),Zc=n(f,"H2",{class:!0});var eze=s(Zc);$3=n(eze,"A",{id:!0,class:!0,href:!0});var PPt=s($3);PCe=n(PPt,"SPAN",{});var BPt=s(PCe);T(Vx.$$.fragment,BPt),BPt.forEach(t),PPt.forEach(t),DDr=i(eze),BCe=n(eze,"SPAN",{});var IPt=s(BCe);GDr=r(IPt,"FlaxAutoModelForSeq2SeqLM"),IPt.forEach(t),eze.forEach(t),WOe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Xx.$$.fragment,ai),ODr=i(ai),ef=n(ai,"P",{});var $re=s(ef);VDr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SZ=n($re,"A",{href:!0});var NPt=s(SZ);XDr=r(NPt,"from_pretrained()"),NPt.forEach(t),zDr=r($re," class method or the "),RZ=n($re,"A",{href:!0});var qPt=s(RZ);WDr=r(qPt,"from_config()"),qPt.forEach(t),QDr=r($re,` class
method.`),$re.forEach(t),HDr=i(ai),zx=n(ai,"P",{});var oze=s(zx);UDr=r(oze,"This class cannot be instantiated directly using "),ICe=n(oze,"CODE",{});var jPt=s(ICe);JDr=r(jPt,"__init__()"),jPt.forEach(t),YDr=r(oze," (throws an error)."),oze.forEach(t),KDr=i(ai),Ht=n(ai,"DIV",{class:!0});var eL=s(Ht);T(Wx.$$.fragment,eL),ZDr=i(eL),NCe=n(eL,"P",{});var DPt=s(NCe);eGr=r(DPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DPt.forEach(t),oGr=i(eL),of=n(eL,"P",{});var kre=s(of);rGr=r(kre,`Note:
Loading a model from its configuration file does `),qCe=n(kre,"STRONG",{});var GPt=s(qCe);tGr=r(GPt,"not"),GPt.forEach(t),aGr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(kre,"A",{href:!0});var OPt=s(PZ);nGr=r(OPt,"from_pretrained()"),OPt.forEach(t),sGr=r(kre," to load the model weights."),kre.forEach(t),lGr=i(eL),T(k3.$$.fragment,eL),eL.forEach(t),iGr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Qx.$$.fragment,ni),dGr=i(ni),jCe=n(ni,"P",{});var VPt=s(jCe);cGr=r(VPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VPt.forEach(t),fGr=i(ni),En=n(ni,"P",{});var oL=s(En);mGr=r(oL,"The model class to instantiate is selected based on the "),DCe=n(oL,"CODE",{});var XPt=s(DCe);gGr=r(XPt,"model_type"),XPt.forEach(t),hGr=r(oL,` property of the config object (either
passed as an argument or loaded from `),GCe=n(oL,"CODE",{});var zPt=s(GCe);pGr=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),uGr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(oL,"CODE",{});var WPt=s(OCe);_Gr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),bGr=r(oL,":"),oL.forEach(t),vGr=i(ni),ke=n(ni,"UL",{});var je=s(ke);S3=n(je,"LI",{});var sDe=s(S3);VCe=n(sDe,"STRONG",{});var QPt=s(VCe);FGr=r(QPt,"bart"),QPt.forEach(t),TGr=r(sDe," \u2014 "),BZ=n(sDe,"A",{href:!0});var HPt=s(BZ);MGr=r(HPt,"FlaxBartForConditionalGeneration"),HPt.forEach(t),EGr=r(sDe," (BART model)"),sDe.forEach(t),CGr=i(je),R3=n(je,"LI",{});var lDe=s(R3);XCe=n(lDe,"STRONG",{});var UPt=s(XCe);wGr=r(UPt,"blenderbot"),UPt.forEach(t),AGr=r(lDe," \u2014 "),IZ=n(lDe,"A",{href:!0});var JPt=s(IZ);LGr=r(JPt,"FlaxBlenderbotForConditionalGeneration"),JPt.forEach(t),yGr=r(lDe," (Blenderbot model)"),lDe.forEach(t),xGr=i(je),P3=n(je,"LI",{});var iDe=s(P3);zCe=n(iDe,"STRONG",{});var YPt=s(zCe);$Gr=r(YPt,"blenderbot-small"),YPt.forEach(t),kGr=r(iDe," \u2014 "),NZ=n(iDe,"A",{href:!0});var KPt=s(NZ);SGr=r(KPt,"FlaxBlenderbotSmallForConditionalGeneration"),KPt.forEach(t),RGr=r(iDe," (BlenderbotSmall model)"),iDe.forEach(t),PGr=i(je),B3=n(je,"LI",{});var dDe=s(B3);WCe=n(dDe,"STRONG",{});var ZPt=s(WCe);BGr=r(ZPt,"encoder-decoder"),ZPt.forEach(t),IGr=r(dDe," \u2014 "),qZ=n(dDe,"A",{href:!0});var eBt=s(qZ);NGr=r(eBt,"FlaxEncoderDecoderModel"),eBt.forEach(t),qGr=r(dDe," (Encoder decoder model)"),dDe.forEach(t),jGr=i(je),I3=n(je,"LI",{});var cDe=s(I3);QCe=n(cDe,"STRONG",{});var oBt=s(QCe);DGr=r(oBt,"longt5"),oBt.forEach(t),GGr=r(cDe," \u2014 "),jZ=n(cDe,"A",{href:!0});var rBt=s(jZ);OGr=r(rBt,"FlaxLongT5ForConditionalGeneration"),rBt.forEach(t),VGr=r(cDe," (LongT5 model)"),cDe.forEach(t),XGr=i(je),N3=n(je,"LI",{});var fDe=s(N3);HCe=n(fDe,"STRONG",{});var tBt=s(HCe);zGr=r(tBt,"marian"),tBt.forEach(t),WGr=r(fDe," \u2014 "),DZ=n(fDe,"A",{href:!0});var aBt=s(DZ);QGr=r(aBt,"FlaxMarianMTModel"),aBt.forEach(t),HGr=r(fDe," (Marian model)"),fDe.forEach(t),UGr=i(je),q3=n(je,"LI",{});var mDe=s(q3);UCe=n(mDe,"STRONG",{});var nBt=s(UCe);JGr=r(nBt,"mbart"),nBt.forEach(t),YGr=r(mDe," \u2014 "),GZ=n(mDe,"A",{href:!0});var sBt=s(GZ);KGr=r(sBt,"FlaxMBartForConditionalGeneration"),sBt.forEach(t),ZGr=r(mDe," (mBART model)"),mDe.forEach(t),eOr=i(je),j3=n(je,"LI",{});var gDe=s(j3);JCe=n(gDe,"STRONG",{});var lBt=s(JCe);oOr=r(lBt,"mt5"),lBt.forEach(t),rOr=r(gDe," \u2014 "),OZ=n(gDe,"A",{href:!0});var iBt=s(OZ);tOr=r(iBt,"FlaxMT5ForConditionalGeneration"),iBt.forEach(t),aOr=r(gDe," (MT5 model)"),gDe.forEach(t),nOr=i(je),D3=n(je,"LI",{});var hDe=s(D3);YCe=n(hDe,"STRONG",{});var dBt=s(YCe);sOr=r(dBt,"pegasus"),dBt.forEach(t),lOr=r(hDe," \u2014 "),VZ=n(hDe,"A",{href:!0});var cBt=s(VZ);iOr=r(cBt,"FlaxPegasusForConditionalGeneration"),cBt.forEach(t),dOr=r(hDe," (Pegasus model)"),hDe.forEach(t),cOr=i(je),G3=n(je,"LI",{});var pDe=s(G3);KCe=n(pDe,"STRONG",{});var fBt=s(KCe);fOr=r(fBt,"t5"),fBt.forEach(t),mOr=r(pDe," \u2014 "),XZ=n(pDe,"A",{href:!0});var mBt=s(XZ);gOr=r(mBt,"FlaxT5ForConditionalGeneration"),mBt.forEach(t),hOr=r(pDe," (T5 model)"),pDe.forEach(t),je.forEach(t),pOr=i(ni),T(O3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),QOe=i(f),rf=n(f,"H2",{class:!0});var rze=s(rf);V3=n(rze,"A",{id:!0,class:!0,href:!0});var gBt=s(V3);ZCe=n(gBt,"SPAN",{});var hBt=s(ZCe);T(Hx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),uOr=i(rze),e5e=n(rze,"SPAN",{});var pBt=s(e5e);_Or=r(pBt,"FlaxAutoModelForSequenceClassification"),pBt.forEach(t),rze.forEach(t),HOe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Ux.$$.fragment,si),bOr=i(si),tf=n(si,"P",{});var Sre=s(tf);vOr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zZ=n(Sre,"A",{href:!0});var uBt=s(zZ);FOr=r(uBt,"from_pretrained()"),uBt.forEach(t),TOr=r(Sre," class method or the "),WZ=n(Sre,"A",{href:!0});var _Bt=s(WZ);MOr=r(_Bt,"from_config()"),_Bt.forEach(t),EOr=r(Sre,` class
method.`),Sre.forEach(t),COr=i(si),Jx=n(si,"P",{});var tze=s(Jx);wOr=r(tze,"This class cannot be instantiated directly using "),o5e=n(tze,"CODE",{});var bBt=s(o5e);AOr=r(bBt,"__init__()"),bBt.forEach(t),LOr=r(tze," (throws an error)."),tze.forEach(t),yOr=i(si),Ut=n(si,"DIV",{class:!0});var rL=s(Ut);T(Yx.$$.fragment,rL),xOr=i(rL),r5e=n(rL,"P",{});var vBt=s(r5e);$Or=r(vBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vBt.forEach(t),kOr=i(rL),af=n(rL,"P",{});var Rre=s(af);SOr=r(Rre,`Note:
Loading a model from its configuration file does `),t5e=n(Rre,"STRONG",{});var FBt=s(t5e);ROr=r(FBt,"not"),FBt.forEach(t),POr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(Rre,"A",{href:!0});var TBt=s(QZ);BOr=r(TBt,"from_pretrained()"),TBt.forEach(t),IOr=r(Rre," to load the model weights."),Rre.forEach(t),NOr=i(rL),T(X3.$$.fragment,rL),rL.forEach(t),qOr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Kx.$$.fragment,li),jOr=i(li),a5e=n(li,"P",{});var MBt=s(a5e);DOr=r(MBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MBt.forEach(t),GOr=i(li),Cn=n(li,"P",{});var tL=s(Cn);OOr=r(tL,"The model class to instantiate is selected based on the "),n5e=n(tL,"CODE",{});var EBt=s(n5e);VOr=r(EBt,"model_type"),EBt.forEach(t),XOr=r(tL,` property of the config object (either
passed as an argument or loaded from `),s5e=n(tL,"CODE",{});var CBt=s(s5e);zOr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),WOr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(tL,"CODE",{});var wBt=s(l5e);QOr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),HOr=r(tL,":"),tL.forEach(t),UOr=i(li),Se=n(li,"UL",{});var De=s(Se);z3=n(De,"LI",{});var uDe=s(z3);i5e=n(uDe,"STRONG",{});var ABt=s(i5e);JOr=r(ABt,"albert"),ABt.forEach(t),YOr=r(uDe," \u2014 "),HZ=n(uDe,"A",{href:!0});var LBt=s(HZ);KOr=r(LBt,"FlaxAlbertForSequenceClassification"),LBt.forEach(t),ZOr=r(uDe," (ALBERT model)"),uDe.forEach(t),eVr=i(De),W3=n(De,"LI",{});var _De=s(W3);d5e=n(_De,"STRONG",{});var yBt=s(d5e);oVr=r(yBt,"bart"),yBt.forEach(t),rVr=r(_De," \u2014 "),UZ=n(_De,"A",{href:!0});var xBt=s(UZ);tVr=r(xBt,"FlaxBartForSequenceClassification"),xBt.forEach(t),aVr=r(_De," (BART model)"),_De.forEach(t),nVr=i(De),Q3=n(De,"LI",{});var bDe=s(Q3);c5e=n(bDe,"STRONG",{});var $Bt=s(c5e);sVr=r($Bt,"bert"),$Bt.forEach(t),lVr=r(bDe," \u2014 "),JZ=n(bDe,"A",{href:!0});var kBt=s(JZ);iVr=r(kBt,"FlaxBertForSequenceClassification"),kBt.forEach(t),dVr=r(bDe," (BERT model)"),bDe.forEach(t),cVr=i(De),H3=n(De,"LI",{});var vDe=s(H3);f5e=n(vDe,"STRONG",{});var SBt=s(f5e);fVr=r(SBt,"big_bird"),SBt.forEach(t),mVr=r(vDe," \u2014 "),YZ=n(vDe,"A",{href:!0});var RBt=s(YZ);gVr=r(RBt,"FlaxBigBirdForSequenceClassification"),RBt.forEach(t),hVr=r(vDe," (BigBird model)"),vDe.forEach(t),pVr=i(De),U3=n(De,"LI",{});var FDe=s(U3);m5e=n(FDe,"STRONG",{});var PBt=s(m5e);uVr=r(PBt,"distilbert"),PBt.forEach(t),_Vr=r(FDe," \u2014 "),KZ=n(FDe,"A",{href:!0});var BBt=s(KZ);bVr=r(BBt,"FlaxDistilBertForSequenceClassification"),BBt.forEach(t),vVr=r(FDe," (DistilBERT model)"),FDe.forEach(t),FVr=i(De),J3=n(De,"LI",{});var TDe=s(J3);g5e=n(TDe,"STRONG",{});var IBt=s(g5e);TVr=r(IBt,"electra"),IBt.forEach(t),MVr=r(TDe," \u2014 "),ZZ=n(TDe,"A",{href:!0});var NBt=s(ZZ);EVr=r(NBt,"FlaxElectraForSequenceClassification"),NBt.forEach(t),CVr=r(TDe," (ELECTRA model)"),TDe.forEach(t),wVr=i(De),Y3=n(De,"LI",{});var MDe=s(Y3);h5e=n(MDe,"STRONG",{});var qBt=s(h5e);AVr=r(qBt,"mbart"),qBt.forEach(t),LVr=r(MDe," \u2014 "),eee=n(MDe,"A",{href:!0});var jBt=s(eee);yVr=r(jBt,"FlaxMBartForSequenceClassification"),jBt.forEach(t),xVr=r(MDe," (mBART model)"),MDe.forEach(t),$Vr=i(De),K3=n(De,"LI",{});var EDe=s(K3);p5e=n(EDe,"STRONG",{});var DBt=s(p5e);kVr=r(DBt,"roberta"),DBt.forEach(t),SVr=r(EDe," \u2014 "),oee=n(EDe,"A",{href:!0});var GBt=s(oee);RVr=r(GBt,"FlaxRobertaForSequenceClassification"),GBt.forEach(t),PVr=r(EDe," (RoBERTa model)"),EDe.forEach(t),BVr=i(De),Z3=n(De,"LI",{});var CDe=s(Z3);u5e=n(CDe,"STRONG",{});var OBt=s(u5e);IVr=r(OBt,"roformer"),OBt.forEach(t),NVr=r(CDe," \u2014 "),ree=n(CDe,"A",{href:!0});var VBt=s(ree);qVr=r(VBt,"FlaxRoFormerForSequenceClassification"),VBt.forEach(t),jVr=r(CDe," (RoFormer model)"),CDe.forEach(t),DVr=i(De),ew=n(De,"LI",{});var wDe=s(ew);_5e=n(wDe,"STRONG",{});var XBt=s(_5e);GVr=r(XBt,"xlm-roberta"),XBt.forEach(t),OVr=r(wDe," \u2014 "),tee=n(wDe,"A",{href:!0});var zBt=s(tee);VVr=r(zBt,"FlaxXLMRobertaForSequenceClassification"),zBt.forEach(t),XVr=r(wDe," (XLM-RoBERTa model)"),wDe.forEach(t),De.forEach(t),zVr=i(li),T(ow.$$.fragment,li),li.forEach(t),si.forEach(t),UOe=i(f),nf=n(f,"H2",{class:!0});var aze=s(nf);rw=n(aze,"A",{id:!0,class:!0,href:!0});var WBt=s(rw);b5e=n(WBt,"SPAN",{});var QBt=s(b5e);T(Zx.$$.fragment,QBt),QBt.forEach(t),WBt.forEach(t),WVr=i(aze),v5e=n(aze,"SPAN",{});var HBt=s(v5e);QVr=r(HBt,"FlaxAutoModelForQuestionAnswering"),HBt.forEach(t),aze.forEach(t),JOe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(e$.$$.fragment,ii),HVr=i(ii),sf=n(ii,"P",{});var Pre=s(sf);UVr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aee=n(Pre,"A",{href:!0});var UBt=s(aee);JVr=r(UBt,"from_pretrained()"),UBt.forEach(t),YVr=r(Pre," class method or the "),nee=n(Pre,"A",{href:!0});var JBt=s(nee);KVr=r(JBt,"from_config()"),JBt.forEach(t),ZVr=r(Pre,` class
method.`),Pre.forEach(t),eXr=i(ii),o$=n(ii,"P",{});var nze=s(o$);oXr=r(nze,"This class cannot be instantiated directly using "),F5e=n(nze,"CODE",{});var YBt=s(F5e);rXr=r(YBt,"__init__()"),YBt.forEach(t),tXr=r(nze," (throws an error)."),nze.forEach(t),aXr=i(ii),Jt=n(ii,"DIV",{class:!0});var aL=s(Jt);T(r$.$$.fragment,aL),nXr=i(aL),T5e=n(aL,"P",{});var KBt=s(T5e);sXr=r(KBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KBt.forEach(t),lXr=i(aL),lf=n(aL,"P",{});var Bre=s(lf);iXr=r(Bre,`Note:
Loading a model from its configuration file does `),M5e=n(Bre,"STRONG",{});var ZBt=s(M5e);dXr=r(ZBt,"not"),ZBt.forEach(t),cXr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(Bre,"A",{href:!0});var eIt=s(see);fXr=r(eIt,"from_pretrained()"),eIt.forEach(t),mXr=r(Bre," to load the model weights."),Bre.forEach(t),gXr=i(aL),T(tw.$$.fragment,aL),aL.forEach(t),hXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(t$.$$.fragment,di),pXr=i(di),E5e=n(di,"P",{});var oIt=s(E5e);uXr=r(oIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oIt.forEach(t),_Xr=i(di),wn=n(di,"P",{});var nL=s(wn);bXr=r(nL,"The model class to instantiate is selected based on the "),C5e=n(nL,"CODE",{});var rIt=s(C5e);vXr=r(rIt,"model_type"),rIt.forEach(t),FXr=r(nL,` property of the config object (either
passed as an argument or loaded from `),w5e=n(nL,"CODE",{});var tIt=s(w5e);TXr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),MXr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(nL,"CODE",{});var aIt=s(A5e);EXr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),CXr=r(nL,":"),nL.forEach(t),wXr=i(di),Re=n(di,"UL",{});var Ge=s(Re);aw=n(Ge,"LI",{});var ADe=s(aw);L5e=n(ADe,"STRONG",{});var nIt=s(L5e);AXr=r(nIt,"albert"),nIt.forEach(t),LXr=r(ADe," \u2014 "),lee=n(ADe,"A",{href:!0});var sIt=s(lee);yXr=r(sIt,"FlaxAlbertForQuestionAnswering"),sIt.forEach(t),xXr=r(ADe," (ALBERT model)"),ADe.forEach(t),$Xr=i(Ge),nw=n(Ge,"LI",{});var LDe=s(nw);y5e=n(LDe,"STRONG",{});var lIt=s(y5e);kXr=r(lIt,"bart"),lIt.forEach(t),SXr=r(LDe," \u2014 "),iee=n(LDe,"A",{href:!0});var iIt=s(iee);RXr=r(iIt,"FlaxBartForQuestionAnswering"),iIt.forEach(t),PXr=r(LDe," (BART model)"),LDe.forEach(t),BXr=i(Ge),sw=n(Ge,"LI",{});var yDe=s(sw);x5e=n(yDe,"STRONG",{});var dIt=s(x5e);IXr=r(dIt,"bert"),dIt.forEach(t),NXr=r(yDe," \u2014 "),dee=n(yDe,"A",{href:!0});var cIt=s(dee);qXr=r(cIt,"FlaxBertForQuestionAnswering"),cIt.forEach(t),jXr=r(yDe," (BERT model)"),yDe.forEach(t),DXr=i(Ge),lw=n(Ge,"LI",{});var xDe=s(lw);$5e=n(xDe,"STRONG",{});var fIt=s($5e);GXr=r(fIt,"big_bird"),fIt.forEach(t),OXr=r(xDe," \u2014 "),cee=n(xDe,"A",{href:!0});var mIt=s(cee);VXr=r(mIt,"FlaxBigBirdForQuestionAnswering"),mIt.forEach(t),XXr=r(xDe," (BigBird model)"),xDe.forEach(t),zXr=i(Ge),iw=n(Ge,"LI",{});var $De=s(iw);k5e=n($De,"STRONG",{});var gIt=s(k5e);WXr=r(gIt,"distilbert"),gIt.forEach(t),QXr=r($De," \u2014 "),fee=n($De,"A",{href:!0});var hIt=s(fee);HXr=r(hIt,"FlaxDistilBertForQuestionAnswering"),hIt.forEach(t),UXr=r($De," (DistilBERT model)"),$De.forEach(t),JXr=i(Ge),dw=n(Ge,"LI",{});var kDe=s(dw);S5e=n(kDe,"STRONG",{});var pIt=s(S5e);YXr=r(pIt,"electra"),pIt.forEach(t),KXr=r(kDe," \u2014 "),mee=n(kDe,"A",{href:!0});var uIt=s(mee);ZXr=r(uIt,"FlaxElectraForQuestionAnswering"),uIt.forEach(t),ezr=r(kDe," (ELECTRA model)"),kDe.forEach(t),ozr=i(Ge),cw=n(Ge,"LI",{});var SDe=s(cw);R5e=n(SDe,"STRONG",{});var _It=s(R5e);rzr=r(_It,"mbart"),_It.forEach(t),tzr=r(SDe," \u2014 "),gee=n(SDe,"A",{href:!0});var bIt=s(gee);azr=r(bIt,"FlaxMBartForQuestionAnswering"),bIt.forEach(t),nzr=r(SDe," (mBART model)"),SDe.forEach(t),szr=i(Ge),fw=n(Ge,"LI",{});var RDe=s(fw);P5e=n(RDe,"STRONG",{});var vIt=s(P5e);lzr=r(vIt,"roberta"),vIt.forEach(t),izr=r(RDe," \u2014 "),hee=n(RDe,"A",{href:!0});var FIt=s(hee);dzr=r(FIt,"FlaxRobertaForQuestionAnswering"),FIt.forEach(t),czr=r(RDe," (RoBERTa model)"),RDe.forEach(t),fzr=i(Ge),mw=n(Ge,"LI",{});var PDe=s(mw);B5e=n(PDe,"STRONG",{});var TIt=s(B5e);mzr=r(TIt,"roformer"),TIt.forEach(t),gzr=r(PDe," \u2014 "),pee=n(PDe,"A",{href:!0});var MIt=s(pee);hzr=r(MIt,"FlaxRoFormerForQuestionAnswering"),MIt.forEach(t),pzr=r(PDe," (RoFormer model)"),PDe.forEach(t),uzr=i(Ge),gw=n(Ge,"LI",{});var BDe=s(gw);I5e=n(BDe,"STRONG",{});var EIt=s(I5e);_zr=r(EIt,"xlm-roberta"),EIt.forEach(t),bzr=r(BDe," \u2014 "),uee=n(BDe,"A",{href:!0});var CIt=s(uee);vzr=r(CIt,"FlaxXLMRobertaForQuestionAnswering"),CIt.forEach(t),Fzr=r(BDe," (XLM-RoBERTa model)"),BDe.forEach(t),Ge.forEach(t),Tzr=i(di),T(hw.$$.fragment,di),di.forEach(t),ii.forEach(t),YOe=i(f),df=n(f,"H2",{class:!0});var sze=s(df);pw=n(sze,"A",{id:!0,class:!0,href:!0});var wIt=s(pw);N5e=n(wIt,"SPAN",{});var AIt=s(N5e);T(a$.$$.fragment,AIt),AIt.forEach(t),wIt.forEach(t),Mzr=i(sze),q5e=n(sze,"SPAN",{});var LIt=s(q5e);Ezr=r(LIt,"FlaxAutoModelForTokenClassification"),LIt.forEach(t),sze.forEach(t),KOe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(n$.$$.fragment,ci),Czr=i(ci),cf=n(ci,"P",{});var Ire=s(cf);wzr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_ee=n(Ire,"A",{href:!0});var yIt=s(_ee);Azr=r(yIt,"from_pretrained()"),yIt.forEach(t),Lzr=r(Ire," class method or the "),bee=n(Ire,"A",{href:!0});var xIt=s(bee);yzr=r(xIt,"from_config()"),xIt.forEach(t),xzr=r(Ire,` class
method.`),Ire.forEach(t),$zr=i(ci),s$=n(ci,"P",{});var lze=s(s$);kzr=r(lze,"This class cannot be instantiated directly using "),j5e=n(lze,"CODE",{});var $It=s(j5e);Szr=r($It,"__init__()"),$It.forEach(t),Rzr=r(lze," (throws an error)."),lze.forEach(t),Pzr=i(ci),Yt=n(ci,"DIV",{class:!0});var sL=s(Yt);T(l$.$$.fragment,sL),Bzr=i(sL),D5e=n(sL,"P",{});var kIt=s(D5e);Izr=r(kIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kIt.forEach(t),Nzr=i(sL),ff=n(sL,"P",{});var Nre=s(ff);qzr=r(Nre,`Note:
Loading a model from its configuration file does `),G5e=n(Nre,"STRONG",{});var SIt=s(G5e);jzr=r(SIt,"not"),SIt.forEach(t),Dzr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=n(Nre,"A",{href:!0});var RIt=s(vee);Gzr=r(RIt,"from_pretrained()"),RIt.forEach(t),Ozr=r(Nre," to load the model weights."),Nre.forEach(t),Vzr=i(sL),T(uw.$$.fragment,sL),sL.forEach(t),Xzr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(i$.$$.fragment,fi),zzr=i(fi),O5e=n(fi,"P",{});var PIt=s(O5e);Wzr=r(PIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PIt.forEach(t),Qzr=i(fi),An=n(fi,"P",{});var lL=s(An);Hzr=r(lL,"The model class to instantiate is selected based on the "),V5e=n(lL,"CODE",{});var BIt=s(V5e);Uzr=r(BIt,"model_type"),BIt.forEach(t),Jzr=r(lL,` property of the config object (either
passed as an argument or loaded from `),X5e=n(lL,"CODE",{});var IIt=s(X5e);Yzr=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),Kzr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(lL,"CODE",{});var NIt=s(z5e);Zzr=r(NIt,"pretrained_model_name_or_path"),NIt.forEach(t),eWr=r(lL,":"),lL.forEach(t),oWr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);_w=n(To,"LI",{});var IDe=s(_w);W5e=n(IDe,"STRONG",{});var qIt=s(W5e);rWr=r(qIt,"albert"),qIt.forEach(t),tWr=r(IDe," \u2014 "),Fee=n(IDe,"A",{href:!0});var jIt=s(Fee);aWr=r(jIt,"FlaxAlbertForTokenClassification"),jIt.forEach(t),nWr=r(IDe," (ALBERT model)"),IDe.forEach(t),sWr=i(To),bw=n(To,"LI",{});var NDe=s(bw);Q5e=n(NDe,"STRONG",{});var DIt=s(Q5e);lWr=r(DIt,"bert"),DIt.forEach(t),iWr=r(NDe," \u2014 "),Tee=n(NDe,"A",{href:!0});var GIt=s(Tee);dWr=r(GIt,"FlaxBertForTokenClassification"),GIt.forEach(t),cWr=r(NDe," (BERT model)"),NDe.forEach(t),fWr=i(To),vw=n(To,"LI",{});var qDe=s(vw);H5e=n(qDe,"STRONG",{});var OIt=s(H5e);mWr=r(OIt,"big_bird"),OIt.forEach(t),gWr=r(qDe," \u2014 "),Mee=n(qDe,"A",{href:!0});var VIt=s(Mee);hWr=r(VIt,"FlaxBigBirdForTokenClassification"),VIt.forEach(t),pWr=r(qDe," (BigBird model)"),qDe.forEach(t),uWr=i(To),Fw=n(To,"LI",{});var jDe=s(Fw);U5e=n(jDe,"STRONG",{});var XIt=s(U5e);_Wr=r(XIt,"distilbert"),XIt.forEach(t),bWr=r(jDe," \u2014 "),Eee=n(jDe,"A",{href:!0});var zIt=s(Eee);vWr=r(zIt,"FlaxDistilBertForTokenClassification"),zIt.forEach(t),FWr=r(jDe," (DistilBERT model)"),jDe.forEach(t),TWr=i(To),Tw=n(To,"LI",{});var DDe=s(Tw);J5e=n(DDe,"STRONG",{});var WIt=s(J5e);MWr=r(WIt,"electra"),WIt.forEach(t),EWr=r(DDe," \u2014 "),Cee=n(DDe,"A",{href:!0});var QIt=s(Cee);CWr=r(QIt,"FlaxElectraForTokenClassification"),QIt.forEach(t),wWr=r(DDe," (ELECTRA model)"),DDe.forEach(t),AWr=i(To),Mw=n(To,"LI",{});var GDe=s(Mw);Y5e=n(GDe,"STRONG",{});var HIt=s(Y5e);LWr=r(HIt,"roberta"),HIt.forEach(t),yWr=r(GDe," \u2014 "),wee=n(GDe,"A",{href:!0});var UIt=s(wee);xWr=r(UIt,"FlaxRobertaForTokenClassification"),UIt.forEach(t),$Wr=r(GDe," (RoBERTa model)"),GDe.forEach(t),kWr=i(To),Ew=n(To,"LI",{});var ODe=s(Ew);K5e=n(ODe,"STRONG",{});var JIt=s(K5e);SWr=r(JIt,"roformer"),JIt.forEach(t),RWr=r(ODe," \u2014 "),Aee=n(ODe,"A",{href:!0});var YIt=s(Aee);PWr=r(YIt,"FlaxRoFormerForTokenClassification"),YIt.forEach(t),BWr=r(ODe," (RoFormer model)"),ODe.forEach(t),IWr=i(To),Cw=n(To,"LI",{});var VDe=s(Cw);Z5e=n(VDe,"STRONG",{});var KIt=s(Z5e);NWr=r(KIt,"xlm-roberta"),KIt.forEach(t),qWr=r(VDe," \u2014 "),Lee=n(VDe,"A",{href:!0});var ZIt=s(Lee);jWr=r(ZIt,"FlaxXLMRobertaForTokenClassification"),ZIt.forEach(t),DWr=r(VDe," (XLM-RoBERTa model)"),VDe.forEach(t),To.forEach(t),GWr=i(fi),T(ww.$$.fragment,fi),fi.forEach(t),ci.forEach(t),ZOe=i(f),mf=n(f,"H2",{class:!0});var ize=s(mf);Aw=n(ize,"A",{id:!0,class:!0,href:!0});var eNt=s(Aw);e3e=n(eNt,"SPAN",{});var oNt=s(e3e);T(d$.$$.fragment,oNt),oNt.forEach(t),eNt.forEach(t),OWr=i(ize),o3e=n(ize,"SPAN",{});var rNt=s(o3e);VWr=r(rNt,"FlaxAutoModelForMultipleChoice"),rNt.forEach(t),ize.forEach(t),eVe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(c$.$$.fragment,mi),XWr=i(mi),gf=n(mi,"P",{});var qre=s(gf);zWr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yee=n(qre,"A",{href:!0});var tNt=s(yee);WWr=r(tNt,"from_pretrained()"),tNt.forEach(t),QWr=r(qre," class method or the "),xee=n(qre,"A",{href:!0});var aNt=s(xee);HWr=r(aNt,"from_config()"),aNt.forEach(t),UWr=r(qre,` class
method.`),qre.forEach(t),JWr=i(mi),f$=n(mi,"P",{});var dze=s(f$);YWr=r(dze,"This class cannot be instantiated directly using "),r3e=n(dze,"CODE",{});var nNt=s(r3e);KWr=r(nNt,"__init__()"),nNt.forEach(t),ZWr=r(dze," (throws an error)."),dze.forEach(t),eQr=i(mi),Kt=n(mi,"DIV",{class:!0});var iL=s(Kt);T(m$.$$.fragment,iL),oQr=i(iL),t3e=n(iL,"P",{});var sNt=s(t3e);rQr=r(sNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sNt.forEach(t),tQr=i(iL),hf=n(iL,"P",{});var jre=s(hf);aQr=r(jre,`Note:
Loading a model from its configuration file does `),a3e=n(jre,"STRONG",{});var lNt=s(a3e);nQr=r(lNt,"not"),lNt.forEach(t),sQr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(jre,"A",{href:!0});var iNt=s($ee);lQr=r(iNt,"from_pretrained()"),iNt.forEach(t),iQr=r(jre," to load the model weights."),jre.forEach(t),dQr=i(iL),T(Lw.$$.fragment,iL),iL.forEach(t),cQr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(g$.$$.fragment,gi),fQr=i(gi),n3e=n(gi,"P",{});var dNt=s(n3e);mQr=r(dNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dNt.forEach(t),gQr=i(gi),Ln=n(gi,"P",{});var dL=s(Ln);hQr=r(dL,"The model class to instantiate is selected based on the "),s3e=n(dL,"CODE",{});var cNt=s(s3e);pQr=r(cNt,"model_type"),cNt.forEach(t),uQr=r(dL,` property of the config object (either
passed as an argument or loaded from `),l3e=n(dL,"CODE",{});var fNt=s(l3e);_Qr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),bQr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(dL,"CODE",{});var mNt=s(i3e);vQr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),FQr=r(dL,":"),dL.forEach(t),TQr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);yw=n(Mo,"LI",{});var XDe=s(yw);d3e=n(XDe,"STRONG",{});var gNt=s(d3e);MQr=r(gNt,"albert"),gNt.forEach(t),EQr=r(XDe," \u2014 "),kee=n(XDe,"A",{href:!0});var hNt=s(kee);CQr=r(hNt,"FlaxAlbertForMultipleChoice"),hNt.forEach(t),wQr=r(XDe," (ALBERT model)"),XDe.forEach(t),AQr=i(Mo),xw=n(Mo,"LI",{});var zDe=s(xw);c3e=n(zDe,"STRONG",{});var pNt=s(c3e);LQr=r(pNt,"bert"),pNt.forEach(t),yQr=r(zDe," \u2014 "),See=n(zDe,"A",{href:!0});var uNt=s(See);xQr=r(uNt,"FlaxBertForMultipleChoice"),uNt.forEach(t),$Qr=r(zDe," (BERT model)"),zDe.forEach(t),kQr=i(Mo),$w=n(Mo,"LI",{});var WDe=s($w);f3e=n(WDe,"STRONG",{});var _Nt=s(f3e);SQr=r(_Nt,"big_bird"),_Nt.forEach(t),RQr=r(WDe," \u2014 "),Ree=n(WDe,"A",{href:!0});var bNt=s(Ree);PQr=r(bNt,"FlaxBigBirdForMultipleChoice"),bNt.forEach(t),BQr=r(WDe," (BigBird model)"),WDe.forEach(t),IQr=i(Mo),kw=n(Mo,"LI",{});var QDe=s(kw);m3e=n(QDe,"STRONG",{});var vNt=s(m3e);NQr=r(vNt,"distilbert"),vNt.forEach(t),qQr=r(QDe," \u2014 "),Pee=n(QDe,"A",{href:!0});var FNt=s(Pee);jQr=r(FNt,"FlaxDistilBertForMultipleChoice"),FNt.forEach(t),DQr=r(QDe," (DistilBERT model)"),QDe.forEach(t),GQr=i(Mo),Sw=n(Mo,"LI",{});var HDe=s(Sw);g3e=n(HDe,"STRONG",{});var TNt=s(g3e);OQr=r(TNt,"electra"),TNt.forEach(t),VQr=r(HDe," \u2014 "),Bee=n(HDe,"A",{href:!0});var MNt=s(Bee);XQr=r(MNt,"FlaxElectraForMultipleChoice"),MNt.forEach(t),zQr=r(HDe," (ELECTRA model)"),HDe.forEach(t),WQr=i(Mo),Rw=n(Mo,"LI",{});var UDe=s(Rw);h3e=n(UDe,"STRONG",{});var ENt=s(h3e);QQr=r(ENt,"roberta"),ENt.forEach(t),HQr=r(UDe," \u2014 "),Iee=n(UDe,"A",{href:!0});var CNt=s(Iee);UQr=r(CNt,"FlaxRobertaForMultipleChoice"),CNt.forEach(t),JQr=r(UDe," (RoBERTa model)"),UDe.forEach(t),YQr=i(Mo),Pw=n(Mo,"LI",{});var JDe=s(Pw);p3e=n(JDe,"STRONG",{});var wNt=s(p3e);KQr=r(wNt,"roformer"),wNt.forEach(t),ZQr=r(JDe," \u2014 "),Nee=n(JDe,"A",{href:!0});var ANt=s(Nee);eHr=r(ANt,"FlaxRoFormerForMultipleChoice"),ANt.forEach(t),oHr=r(JDe," (RoFormer model)"),JDe.forEach(t),rHr=i(Mo),Bw=n(Mo,"LI",{});var YDe=s(Bw);u3e=n(YDe,"STRONG",{});var LNt=s(u3e);tHr=r(LNt,"xlm-roberta"),LNt.forEach(t),aHr=r(YDe," \u2014 "),qee=n(YDe,"A",{href:!0});var yNt=s(qee);nHr=r(yNt,"FlaxXLMRobertaForMultipleChoice"),yNt.forEach(t),sHr=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),Mo.forEach(t),lHr=i(gi),T(Iw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),oVe=i(f),pf=n(f,"H2",{class:!0});var cze=s(pf);Nw=n(cze,"A",{id:!0,class:!0,href:!0});var xNt=s(Nw);_3e=n(xNt,"SPAN",{});var $Nt=s(_3e);T(h$.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),iHr=i(cze),b3e=n(cze,"SPAN",{});var kNt=s(b3e);dHr=r(kNt,"FlaxAutoModelForNextSentencePrediction"),kNt.forEach(t),cze.forEach(t),rVe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(p$.$$.fragment,hi),cHr=i(hi),uf=n(hi,"P",{});var Dre=s(uf);fHr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jee=n(Dre,"A",{href:!0});var SNt=s(jee);mHr=r(SNt,"from_pretrained()"),SNt.forEach(t),gHr=r(Dre," class method or the "),Dee=n(Dre,"A",{href:!0});var RNt=s(Dee);hHr=r(RNt,"from_config()"),RNt.forEach(t),pHr=r(Dre,` class
method.`),Dre.forEach(t),uHr=i(hi),u$=n(hi,"P",{});var fze=s(u$);_Hr=r(fze,"This class cannot be instantiated directly using "),v3e=n(fze,"CODE",{});var PNt=s(v3e);bHr=r(PNt,"__init__()"),PNt.forEach(t),vHr=r(fze," (throws an error)."),fze.forEach(t),FHr=i(hi),Zt=n(hi,"DIV",{class:!0});var cL=s(Zt);T(_$.$$.fragment,cL),THr=i(cL),F3e=n(cL,"P",{});var BNt=s(F3e);MHr=r(BNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BNt.forEach(t),EHr=i(cL),_f=n(cL,"P",{});var Gre=s(_f);CHr=r(Gre,`Note:
Loading a model from its configuration file does `),T3e=n(Gre,"STRONG",{});var INt=s(T3e);wHr=r(INt,"not"),INt.forEach(t),AHr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=n(Gre,"A",{href:!0});var NNt=s(Gee);LHr=r(NNt,"from_pretrained()"),NNt.forEach(t),yHr=r(Gre," to load the model weights."),Gre.forEach(t),xHr=i(cL),T(qw.$$.fragment,cL),cL.forEach(t),$Hr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(b$.$$.fragment,pi),kHr=i(pi),M3e=n(pi,"P",{});var qNt=s(M3e);SHr=r(qNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qNt.forEach(t),RHr=i(pi),yn=n(pi,"P",{});var fL=s(yn);PHr=r(fL,"The model class to instantiate is selected based on the "),E3e=n(fL,"CODE",{});var jNt=s(E3e);BHr=r(jNt,"model_type"),jNt.forEach(t),IHr=r(fL,` property of the config object (either
passed as an argument or loaded from `),C3e=n(fL,"CODE",{});var DNt=s(C3e);NHr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),qHr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(fL,"CODE",{});var GNt=s(w3e);jHr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),DHr=r(fL,":"),fL.forEach(t),GHr=i(pi),A3e=n(pi,"UL",{});var ONt=s(A3e);jw=n(ONt,"LI",{});var KDe=s(jw);L3e=n(KDe,"STRONG",{});var VNt=s(L3e);OHr=r(VNt,"bert"),VNt.forEach(t),VHr=r(KDe," \u2014 "),Oee=n(KDe,"A",{href:!0});var XNt=s(Oee);XHr=r(XNt,"FlaxBertForNextSentencePrediction"),XNt.forEach(t),zHr=r(KDe," (BERT model)"),KDe.forEach(t),ONt.forEach(t),WHr=i(pi),T(Dw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),tVe=i(f),bf=n(f,"H2",{class:!0});var mze=s(bf);Gw=n(mze,"A",{id:!0,class:!0,href:!0});var zNt=s(Gw);y3e=n(zNt,"SPAN",{});var WNt=s(y3e);T(v$.$$.fragment,WNt),WNt.forEach(t),zNt.forEach(t),QHr=i(mze),x3e=n(mze,"SPAN",{});var QNt=s(x3e);HHr=r(QNt,"FlaxAutoModelForImageClassification"),QNt.forEach(t),mze.forEach(t),aVe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(F$.$$.fragment,ui),UHr=i(ui),vf=n(ui,"P",{});var Ore=s(vf);JHr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vee=n(Ore,"A",{href:!0});var HNt=s(Vee);YHr=r(HNt,"from_pretrained()"),HNt.forEach(t),KHr=r(Ore," class method or the "),Xee=n(Ore,"A",{href:!0});var UNt=s(Xee);ZHr=r(UNt,"from_config()"),UNt.forEach(t),eUr=r(Ore,` class
method.`),Ore.forEach(t),oUr=i(ui),T$=n(ui,"P",{});var gze=s(T$);rUr=r(gze,"This class cannot be instantiated directly using "),$3e=n(gze,"CODE",{});var JNt=s($3e);tUr=r(JNt,"__init__()"),JNt.forEach(t),aUr=r(gze," (throws an error)."),gze.forEach(t),nUr=i(ui),ea=n(ui,"DIV",{class:!0});var mL=s(ea);T(M$.$$.fragment,mL),sUr=i(mL),k3e=n(mL,"P",{});var YNt=s(k3e);lUr=r(YNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YNt.forEach(t),iUr=i(mL),Ff=n(mL,"P",{});var Vre=s(Ff);dUr=r(Vre,`Note:
Loading a model from its configuration file does `),S3e=n(Vre,"STRONG",{});var KNt=s(S3e);cUr=r(KNt,"not"),KNt.forEach(t),fUr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(Vre,"A",{href:!0});var ZNt=s(zee);mUr=r(ZNt,"from_pretrained()"),ZNt.forEach(t),gUr=r(Vre," to load the model weights."),Vre.forEach(t),hUr=i(mL),T(Ow.$$.fragment,mL),mL.forEach(t),pUr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(E$.$$.fragment,_i),uUr=i(_i),R3e=n(_i,"P",{});var eqt=s(R3e);_Ur=r(eqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eqt.forEach(t),bUr=i(_i),xn=n(_i,"P",{});var gL=s(xn);vUr=r(gL,"The model class to instantiate is selected based on the "),P3e=n(gL,"CODE",{});var oqt=s(P3e);FUr=r(oqt,"model_type"),oqt.forEach(t),TUr=r(gL,` property of the config object (either
passed as an argument or loaded from `),B3e=n(gL,"CODE",{});var rqt=s(B3e);MUr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),EUr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(gL,"CODE",{});var tqt=s(I3e);CUr=r(tqt,"pretrained_model_name_or_path"),tqt.forEach(t),wUr=r(gL,":"),gL.forEach(t),AUr=i(_i),C$=n(_i,"UL",{});var hze=s(C$);Vw=n(hze,"LI",{});var ZDe=s(Vw);N3e=n(ZDe,"STRONG",{});var aqt=s(N3e);LUr=r(aqt,"beit"),aqt.forEach(t),yUr=r(ZDe," \u2014 "),Wee=n(ZDe,"A",{href:!0});var nqt=s(Wee);xUr=r(nqt,"FlaxBeitForImageClassification"),nqt.forEach(t),$Ur=r(ZDe," (BEiT model)"),ZDe.forEach(t),kUr=i(hze),Xw=n(hze,"LI",{});var eGe=s(Xw);q3e=n(eGe,"STRONG",{});var sqt=s(q3e);SUr=r(sqt,"vit"),sqt.forEach(t),RUr=r(eGe," \u2014 "),Qee=n(eGe,"A",{href:!0});var lqt=s(Qee);PUr=r(lqt,"FlaxViTForImageClassification"),lqt.forEach(t),BUr=r(eGe," (ViT model)"),eGe.forEach(t),hze.forEach(t),IUr=i(_i),T(zw.$$.fragment,_i),_i.forEach(t),ui.forEach(t),nVe=i(f),Tf=n(f,"H2",{class:!0});var pze=s(Tf);Ww=n(pze,"A",{id:!0,class:!0,href:!0});var iqt=s(Ww);j3e=n(iqt,"SPAN",{});var dqt=s(j3e);T(w$.$$.fragment,dqt),dqt.forEach(t),iqt.forEach(t),NUr=i(pze),D3e=n(pze,"SPAN",{});var cqt=s(D3e);qUr=r(cqt,"FlaxAutoModelForVision2Seq"),cqt.forEach(t),pze.forEach(t),sVe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(A$.$$.fragment,bi),jUr=i(bi),Mf=n(bi,"P",{});var Xre=s(Mf);DUr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hee=n(Xre,"A",{href:!0});var fqt=s(Hee);GUr=r(fqt,"from_pretrained()"),fqt.forEach(t),OUr=r(Xre," class method or the "),Uee=n(Xre,"A",{href:!0});var mqt=s(Uee);VUr=r(mqt,"from_config()"),mqt.forEach(t),XUr=r(Xre,` class
method.`),Xre.forEach(t),zUr=i(bi),L$=n(bi,"P",{});var uze=s(L$);WUr=r(uze,"This class cannot be instantiated directly using "),G3e=n(uze,"CODE",{});var gqt=s(G3e);QUr=r(gqt,"__init__()"),gqt.forEach(t),HUr=r(uze," (throws an error)."),uze.forEach(t),UUr=i(bi),oa=n(bi,"DIV",{class:!0});var hL=s(oa);T(y$.$$.fragment,hL),JUr=i(hL),O3e=n(hL,"P",{});var hqt=s(O3e);YUr=r(hqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hqt.forEach(t),KUr=i(hL),Ef=n(hL,"P",{});var zre=s(Ef);ZUr=r(zre,`Note:
Loading a model from its configuration file does `),V3e=n(zre,"STRONG",{});var pqt=s(V3e);eJr=r(pqt,"not"),pqt.forEach(t),oJr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=n(zre,"A",{href:!0});var uqt=s(Jee);rJr=r(uqt,"from_pretrained()"),uqt.forEach(t),tJr=r(zre," to load the model weights."),zre.forEach(t),aJr=i(hL),T(Qw.$$.fragment,hL),hL.forEach(t),nJr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(x$.$$.fragment,vi),sJr=i(vi),X3e=n(vi,"P",{});var _qt=s(X3e);lJr=r(_qt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_qt.forEach(t),iJr=i(vi),$n=n(vi,"P",{});var pL=s($n);dJr=r(pL,"The model class to instantiate is selected based on the "),z3e=n(pL,"CODE",{});var bqt=s(z3e);cJr=r(bqt,"model_type"),bqt.forEach(t),fJr=r(pL,` property of the config object (either
passed as an argument or loaded from `),W3e=n(pL,"CODE",{});var vqt=s(W3e);mJr=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),gJr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(pL,"CODE",{});var Fqt=s(Q3e);hJr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),pJr=r(pL,":"),pL.forEach(t),uJr=i(vi),H3e=n(vi,"UL",{});var Tqt=s(H3e);Hw=n(Tqt,"LI",{});var oGe=s(Hw);U3e=n(oGe,"STRONG",{});var Mqt=s(U3e);_Jr=r(Mqt,"vision-encoder-decoder"),Mqt.forEach(t),bJr=r(oGe," \u2014 "),Yee=n(oGe,"A",{href:!0});var Eqt=s(Yee);vJr=r(Eqt,"FlaxVisionEncoderDecoderModel"),Eqt.forEach(t),FJr=r(oGe," (Vision Encoder decoder model)"),oGe.forEach(t),Tqt.forEach(t),TJr=i(vi),T(Uw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(xDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Kk,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Zk,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertConfig"),c(eS,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartConfig"),c(oS,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitConfig"),c(rS,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertConfig"),c(tS,"href","/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(aS,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdConfig"),c(nS,"href","/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(sS,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(lS,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(iS,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomConfig"),c(dS,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertConfig"),c(cS,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineConfig"),c(fS,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPConfig"),c(mS,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertConfig"),c(gS,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextConfig"),c(hS,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLConfig"),c(pS,"href","/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtConfig"),c(uS,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(_S,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(bS,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(vS,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaConfig"),c(FS,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(TS,"href","/docs/transformers/pr_17770/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(MS,"href","/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTConfig"),c(ES,"href","/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrConfig"),c(CS,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertConfig"),c(wS,"href","/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRConfig"),c(AS,"href","/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTConfig"),c(LS,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraConfig"),c(yS,"href","/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(xS,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertConfig"),c($S,"href","/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaConfig"),c(kS,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetConfig"),c(SS,"href","/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTConfig"),c(RS,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelConfig"),c(PS,"href","/docs/transformers/pr_17770/en/model_doc/glpn#transformers.GLPNConfig"),c(BS,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Config"),c(IS,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(NS,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qS,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJConfig"),c(jS,"href","/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertConfig"),c(DS,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertConfig"),c(GS,"href","/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(OS,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(VS,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(XS,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(zS,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDConfig"),c(WS,"href","/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitConfig"),c(QS,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerConfig"),c(HS,"href","/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Config"),c(US,"href","/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeConfig"),c(JS,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertConfig"),c(YS,"href","/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100Config"),c(KS,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianConfig"),c(ZS,"href","/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(eR,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartConfig"),c(oR,"href","/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTConfig"),c(rR,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(tR,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(aR,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetConfig"),c(nR,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Config"),c(sR,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(lR,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(iR,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTConfig"),c(dR,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusConfig"),c(cR,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fR,"href","/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartConfig"),c(mR,"href","/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(gR,"href","/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(hR,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pR,"href","/docs/transformers/pr_17770/en/model_doc/rag#transformers.RagConfig"),c(uR,"href","/docs/transformers/pr_17770/en/model_doc/realm#transformers.RealmConfig"),c(_R,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerConfig"),c(bR,"href","/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetConfig"),c(vR,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertConfig"),c(FR,"href","/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetConfig"),c(TR,"href","/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertConfig"),c(MR,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaConfig"),c(ER,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerConfig"),c(CR,"href","/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerConfig"),c(wR,"href","/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWConfig"),c(AR,"href","/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDConfig"),c(LR,"href","/docs/transformers/pr_17770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(yR,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(xR,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c($R,"href","/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterConfig"),c(kR,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(SR,"href","/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinConfig"),c(RR,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Config"),c(PR,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasConfig"),c(BR,"href","/docs/transformers/pr_17770/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(IR,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NR,"href","/docs/transformers/pr_17770/en/model_doc/trocr#transformers.TrOCRConfig"),c(qR,"href","/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(jR,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(DR,"href","/docs/transformers/pr_17770/en/model_doc/van#transformers.VanConfig"),c(GR,"href","/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltConfig"),c(OR,"href","/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(VR,"href","/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(XR,"href","/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zR,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTConfig"),c(WR,"href","/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QR,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(HR,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(UR,"href","/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMConfig"),c(JR,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMConfig"),c(YR,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMConfig"),c(KR,"href","/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZR,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eP,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oP,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetConfig"),c(rP,"href","/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosConfig"),c(tP,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(aP,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nP,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertTokenizer"),c(sP,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lP,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartTokenizer"),c(iP,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartTokenizerFast"),c(dP,"href","/docs/transformers/pr_17770/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cP,"href","/docs/transformers/pr_17770/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fP,"href","/docs/transformers/pr_17770/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mP,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizer"),c(gP,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pP,"href","/docs/transformers/pr_17770/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uP,"href","/docs/transformers/pr_17770/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(_P,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bP,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vP,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FP,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TP,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MP,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(EP,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CP,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(wP,"href","/docs/transformers/pr_17770/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(AP,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LP,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineTokenizer"),c(xP,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPTokenizer"),c($P,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kP,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(SP,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17770/en/model_doc/cpm#transformers.CpmTokenizer"),c(PP,"href","/docs/transformers/pr_17770/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BP,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(IP,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NP,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qP,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaTokenizer"),c(jP,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(DP,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(GP,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(OP,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(VP,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zP,"href","/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WP,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraTokenizer"),c(QP,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(HP,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(UP,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetTokenizer"),c(JP,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(YP,"href","/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(KP,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ZP,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(eB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aB,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(nB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lB,"href","/docs/transformers/pr_17770/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iB,"href","/docs/transformers/pr_17770/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cB,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gB,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hB,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pB,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(uB,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(_B,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(bB,"href","/docs/transformers/pr_17770/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vB,"href","/docs/transformers/pr_17770/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FB,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDTokenizer"),c(TB,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDTokenizerFast"),c(MB,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EB,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CB,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.T5Tokenizer"),c(wB,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.T5TokenizerFast"),c(AB,"href","/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeTokenizer"),c(LB,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yB,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c($B,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianTokenizer"),c(kB,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartTokenizer"),c(SB,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(RB,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(PB,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(BB,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizer"),c(IB,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17770/en/model_doc/mluke#transformers.MLukeTokenizer"),c(qB,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(jB,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(DB,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(GB,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(OB,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.T5Tokenizer"),c(VB,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.T5TokenizerFast"),c(XB,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertTokenizer"),c(zB,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(WB,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(QB,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(HB,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UB,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(JB,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(YB,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(KB,"href","/docs/transformers/pr_17770/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ZB,"href","/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartTokenizer"),c(eI,"href","/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(oI,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizer"),c(rI,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizerFast"),c(tI,"href","/docs/transformers/pr_17770/en/model_doc/rag#transformers.RagTokenizer"),c(aI,"href","/docs/transformers/pr_17770/en/model_doc/realm#transformers.RealmTokenizer"),c(nI,"href","/docs/transformers/pr_17770/en/model_doc/realm#transformers.RealmTokenizerFast"),c(sI,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerTokenizer"),c(lI,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(iI,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertTokenizer"),c(dI,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(cI,"href","/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(fI,"href","/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(mI,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gI,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hI,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(pI,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(uI,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(_I,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(bI,"href","/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterTokenizer"),c(vI,"href","/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(FI,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(TI,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.T5Tokenizer"),c(EI,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.T5TokenizerFast"),c(CI,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasTokenizer"),c(wI,"href","/docs/transformers/pr_17770/en/model_doc/tapex#transformers.TapexTokenizer"),c(AI,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(LI,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizer"),c(yI,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizerFast"),c(xI,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizer"),c($I,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertTokenizerFast"),c(kI,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SI,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RI,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PI,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMTokenizer"),c(BI,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(II,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMTokenizer"),c(NI,"href","/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(qI,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(jI,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(DI,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GI,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OI,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(VI,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(XI,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertTokenizer"),c(zI,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoFeatureExtractor"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(WI,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QI,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KI,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17770/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nN,"href","/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lN,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(iN,"href","/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CN,"href","/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoProcessor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(wN,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(AN,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPProcessor"),c(LN,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yN,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(xN,"href","/docs/transformers/pr_17770/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($N,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SN,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(RN,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(PN,"href","/docs/transformers/pr_17770/en/model_doc/trocr#transformers.TrOCRProcessor"),c(BN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltProcessor"),c(qN,"href","/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(jN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GN,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"id","transformers.AutoModel"),c(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ap,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(ON,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertModel"),c(WN,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartModel"),c(QN,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitModel"),c(HN,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertModel"),c(UN,"href","/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(JN,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdModel"),c(YN,"href","/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(KN,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(ZN,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(eq,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomModel"),c(oq,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertModel"),c(rq,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineModel"),c(tq,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.CLIPModel"),c(aq,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertModel"),c(nq,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextModel"),c(sq,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLModel"),c(lq,"href","/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtModel"),c(iq,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(dq,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(cq,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(fq,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaModel"),c(mq,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(gq,"href","/docs/transformers/pr_17770/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(hq,"href","/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTModel"),c(pq,"href","/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrModel"),c(uq,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertModel"),c(_q,"href","/docs/transformers/pr_17770/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(bq,"href","/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTModel"),c(vq,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraModel"),c(Fq,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertModel"),c(Tq,"href","/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaModel"),c(Mq,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetModel"),c(Eq,"href","/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTModel"),c(Cq,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelModel"),c(wq,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Aq,"href","/docs/transformers/pr_17770/en/model_doc/glpn#transformers.GLPNModel"),c(Lq,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2Model"),c(yq,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(xq,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c($q,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJModel"),c(kq,"href","/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertModel"),c(Sq,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertModel"),c(Rq,"href","/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Pq,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Bq,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Iq,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Nq,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDModel"),c(qq,"href","/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitModel"),c(jq,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerModel"),c(Dq,"href","/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5Model"),c(Gq,"href","/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeModel"),c(Oq,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertModel"),c(Vq,"href","/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100Model"),c(Xq,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianModel"),c(zq,"href","/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Wq,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartModel"),c(Qq,"href","/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTModel"),c(Hq,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Uq,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Jq,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetModel"),c(Yq,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5Model"),c(Kq,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Zq,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ej,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTModel"),c(oj,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusModel"),c(rj,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverModel"),c(tj,"href","/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartModel"),c(aj,"href","/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerModel"),c(nj,"href","/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(sj,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertModel"),c(lj,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerModel"),c(ij,"href","/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetModel"),c(dj,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertModel"),c(cj,"href","/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetModel"),c(fj,"href","/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertModel"),c(mj,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaModel"),c(gj,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerModel"),c(hj,"href","/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerModel"),c(pj,"href","/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWModel"),c(uj,"href","/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDModel"),c(_j,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(bj,"href","/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterModel"),c(vj,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Fj,"href","/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinModel"),c(Tj,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5Model"),c(Mj,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasModel"),c(Ej,"href","/docs/transformers/pr_17770/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Cj,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(wj,"href","/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Aj,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Lj,"href","/docs/transformers/pr_17770/en/model_doc/van#transformers.VanModel"),c(yj,"href","/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltModel"),c(xj,"href","/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($j,"href","/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertModel"),c(kj,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTModel"),c(Sj,"href","/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Rj,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Pj,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Bj,"href","/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMModel"),c(Ij,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMModel"),c(Nj,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMModel"),c(qj,"href","/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(jj,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Dj,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Gj,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetModel"),c(Oj,"href","/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosModel"),c(Vj,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L_,"id","transformers.AutoModelForPreTraining"),c(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Xj,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zj,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wj,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qj,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Hj,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForPreTraining"),c(Jj,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Yj,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Kj,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eD,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oD,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rD,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tD,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nD,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sD,"href","/docs/transformers/pr_17770/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lD,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iD,"href","/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cD,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fD,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gD,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hD,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pD,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uD,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_D,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bD,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vD,"href","/docs/transformers/pr_17770/en/model_doc/retribert#transformers.RetriBertModel"),c(FD,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(TD,"href","/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(MD,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(wD,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(AD,"href","/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(LD,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(yD,"href","/docs/transformers/pr_17770/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(xD,"href","/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c($D,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(kD,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(SD,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RD,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(PD,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(BD,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.AutoModelForCausalLM"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(ID,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForCausalLM"),c(DD,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertLMHeadModel"),c(GD,"href","/docs/transformers/pr_17770/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(OD,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(VD,"href","/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(XD,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(zD,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(WD,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForCausalLM"),c(QD,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HD,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UD,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JD,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YD,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KD,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZD,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(eG,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(oG,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianForCausalLM"),c(rG,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForCausalLM"),c(tG,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(aG,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nG,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.OPTForCausalLM"),c(sG,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(lG,"href","/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(iG,"href","/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(dG,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(cG,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(fG,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(mG,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(gG,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(hG,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(pG,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uG,"href","/docs/transformers/pr_17770/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(_G,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(bG,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vG,"href","/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(FG,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(TG,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(MG,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForMaskedLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(EG,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CG,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wG,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AG,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(LG,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForMaskedLM"),c(xG,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c($G,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(SG,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(RG,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(PG,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(BG,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(NG,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qG,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(jG,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(DG,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(OG,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(VG,"href","/docs/transformers/pr_17770/en/model_doc/luke#transformers.LukeForMaskedLM"),c(XG,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(QG,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(HG,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(UG,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(JG,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(YG,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(KG,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(eO,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(oO,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(tO,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aO,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(nO,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(sO,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H1,"id","transformers.AutoModelForSeq2SeqLM"),c(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(lO,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iO,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dO,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cO,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(mO,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(hO,"href","/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(pO,"href","/docs/transformers/pr_17770/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17770/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17770/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.MarianMTModel"),c(FO,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17770/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17770/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForSequenceClassification"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(LO,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xO,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($O,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17770/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(CV,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForMultipleChoice"),c(xV,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c($V,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForNextSentencePrediction"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(rX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(sX,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(lX,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(iX,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(dX,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTokenClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(cX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(hX,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForTokenClassification"),c(pX,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(uX,"href","/docs/transformers/pr_17770/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(_X,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(bX,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForTokenClassification"),c(vX,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(FX,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(TX,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(MX,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(EX,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(CX,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(wX,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(AX,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(LX,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(yX,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(xX,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForTokenClassification"),c($X,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(kX,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(SX,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(RX,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(PX,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(BX,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(IX,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(NX,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(qX,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(DX,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(GX,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(OX,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(VX,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(XX,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(zX,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(WX,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(QX,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForQuestionAnswering"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(HX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17770/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17770/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(fz,"href","/docs/transformers/pr_17770/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17770/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17770/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17770/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17770/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17770/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17770/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17770/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17770/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Rz,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Iz,"href","/docs/transformers/pr_17770/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.AutoModelForTableQuestionAnswering"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.AutoModelForImageClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitForImageClassification"),c(zz,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Wz,"href","/docs/transformers/pr_17770/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Qz,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Hz,"href","/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Uz,"href","/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Jz,"href","/docs/transformers/pr_17770/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Yz,"href","/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitForImageClassification"),c(Kz,"href","/docs/transformers/pr_17770/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Zz,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(eW,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(oW,"href","/docs/transformers/pr_17770/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(rW,"href","/docs/transformers/pr_17770/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(tW,"href","/docs/transformers/pr_17770/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(aW,"href","/docs/transformers/pr_17770/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(nW,"href","/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(sW,"href","/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinForImageClassification"),c(lW,"href","/docs/transformers/pr_17770/en/model_doc/van#transformers.VanForImageClassification"),c(iW,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.AutoModelForVision2Seq"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(dW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17770/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForAudioClassification"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(_W,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForAudioFrameClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(xW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(RW,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(PW,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(BW,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(IW,"href","/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForCTC"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(GW,"href","/docs/transformers/pr_17770/en/model_doc/hubert#transformers.HubertForCTC"),c(OW,"href","/docs/transformers/pr_17770/en/model_doc/mctct#transformers.MCTCTForCTC"),c(VW,"href","/docs/transformers/pr_17770/en/model_doc/sew#transformers.SEWForCTC"),c(XW,"href","/docs/transformers/pr_17770/en/model_doc/sew-d#transformers.SEWDForCTC"),c(zW,"href","/docs/transformers/pr_17770/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(WW,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(QW,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(HW,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(UW,"href","/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(JW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17770/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(eQ,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForAudioXVector"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(nQ,"href","/docs/transformers/pr_17770/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(sQ,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(lQ,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(iQ,"href","/docs/transformers/pr_17770/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForMaskedImageModeling"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17770/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(gQ,"href","/docs/transformers/pr_17770/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(hQ,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForObjectDetection"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrForObjectDetection"),c(vQ,"href","/docs/transformers/pr_17770/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForImageSegmentation"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17770/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForSemanticSegmentation"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(CQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(yQ,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xQ,"href","/docs/transformers/pr_17770/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($Q,"href","/docs/transformers/pr_17770/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForInstanceSegmentation"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17770/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.TFAutoModel"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertModel"),c(jQ,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.TFBartModel"),c(DQ,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertModel"),c(GQ,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(OQ,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(VQ,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertModel"),c(XQ,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.TFCLIPModel"),c(zQ,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertModel"),c(WQ,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.TFConvNextModel"),c(QQ,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLModel"),c(HQ,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(UQ,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaModel"),c(JQ,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(YQ,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(KQ,"href","/docs/transformers/pr_17770/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(ZQ,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraModel"),c(eH,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(oH,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelModel"),c(rH,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(tH,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2Model"),c(aH,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJModel"),c(nH,"href","/docs/transformers/pr_17770/en/model_doc/hubert#transformers.TFHubertModel"),c(sH,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(lH,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.TFLEDModel"),c(iH,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerModel"),c(dH,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.TFLxmertModel"),c(cH,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.TFMarianModel"),c(fH,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.TFMBartModel"),c(mH,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(gH,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetModel"),c(hH,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.TFMT5Model"),c(pH,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(uH,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.TFOPTModel"),c(_H,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.TFPegasusModel"),c(bH,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertModel"),c(vH,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaModel"),c(FH,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerModel"),c(TH,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(MH,"href","/docs/transformers/pr_17770/en/model_doc/swin#transformers.TFSwinModel"),c(EH,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.TFT5Model"),c(CH,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasModel"),c(wH,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(AH,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.TFViTModel"),c(LH,"href","/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(yH,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(xH,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMModel"),c($H,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kH,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForPreTraining"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(SH,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(IH,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForPreTraining"),c(qH,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(DH,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(OH,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VH,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(XH,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zH,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(WH,"href","/docs/transformers/pr_17770/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(QH,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(HH,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(UH,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JH,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(YH,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eU,"href","/docs/transformers/pr_17770/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(oU,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rU,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(tU,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForCausalLM"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(aU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(iU,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(dU,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cU,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fU,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(mU,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gU,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(hU,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(pU,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(uU,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(_U,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bU,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vU,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForImageClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(FU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_17770/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(CU,"href","/docs/transformers/pr_17770/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(wU,"href","/docs/transformers/pr_17770/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(AU,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForMaskedLM"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(kU,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(SU,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(RU,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(PU,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(BU,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(IU,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NU,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(qU,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jU,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(DU,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GU,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(OU,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(VU,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XU,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(zU,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WU,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(QU,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HU,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UU,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(JU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(tJ,"href","/docs/transformers/pr_17770/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.TFMarianMTModel"),c(nJ,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForSequenceClassification"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17770/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17770/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c($J,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17770/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForMultipleChoice"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(VJ,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(XJ,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(aY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(iY,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(dY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17770/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForTokenClassification"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(bY,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(vY,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(FY,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(TY,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(MY,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(CY,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(wY,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(AY,"href","/docs/transformers/pr_17770/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(LY,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(yY,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c($Y,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(kY,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(SY,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(RY,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(PY,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForQuestionAnswering"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17770/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17770/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17770/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17770/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17770/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(HY,"href","/docs/transformers/pr_17770/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17770/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17770/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17770/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17770/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17770/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(tK,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17770/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForVision2Seq"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17770/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.FlaxAutoModel"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(gK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertModel"),c(_K,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartModel"),c(bK,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.FlaxBeitModel"),c(vK,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertModel"),c(FK,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(TK,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(MK,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(EK,"href","/docs/transformers/pr_17770/en/model_doc/clip#transformers.FlaxCLIPModel"),c(CK,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(wK,"href","/docs/transformers/pr_17770/en/model_doc/dpt#transformers.FlaxDPTModel"),c(AK,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraModel"),c(LK,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(yK,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(xK,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.FlaxGPTJModel"),c($K,"href","/docs/transformers/pr_17770/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(kK,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.FlaxMarianModel"),c(SK,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartModel"),c(RK,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.FlaxMT5Model"),c(PK,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.FlaxOPTModel"),c(BK,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(IK,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NK,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(qK,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.FlaxT5Model"),c(jK,"href","/docs/transformers/pr_17770/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(DK,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.FlaxViTModel"),c(GK,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(OK,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(VK,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForCausalLM"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(HK,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(UK,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(JK,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(YK,"href","/docs/transformers/pr_17770/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(KK,"href","/docs/transformers/pr_17770/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(ZK,"href","/docs/transformers/pr_17770/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(eZ,"href","/docs/transformers/pr_17770/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(oZ,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(rZ,"href","/docs/transformers/pr_17770/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModelForPreTraining"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(lZ,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iZ,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(dZ,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(cZ,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(fZ,"href","/docs/transformers/pr_17770/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(gZ,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(pZ,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(uZ,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(_Z,"href","/docs/transformers/pr_17770/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(bZ,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForMaskedLM"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(vZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CZ,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(AZ,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xZ,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($Z,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IZ,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(NZ,"href","/docs/transformers/pr_17770/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17770/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(jZ,"href","/docs/transformers/pr_17770/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17770/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(GZ,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17770/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_17770/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17770/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(zZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UZ,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JZ,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(ree,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(aee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(iee,"href","/docs/transformers/pr_17770/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dee,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17770/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForTokenClassification"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(_ee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fee,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Tee,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Mee,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Eee,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Cee,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wee,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Aee,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Lee,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(yee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kee,"href","/docs/transformers/pr_17770/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(See,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_17770/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_17770/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_17770/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17770/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_17770/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17770/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(jee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oee,"href","/docs/transformers/pr_17770/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForImageClassification"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(Vee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17770/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Qee,"href","/docs/transformers/pr_17770/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForVision2Seq"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Hee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jee,"href","/docs/transformers/pr_17770/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yee,"href","/docs/transformers/pr_17770/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,_),b(f,at,_),e(at,Ti),e(at,Mi),e(Mi,uL),e(at,yf),b(f,Oe,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,_L),e(We,Rn),e(We,Pn),e(Pn,bL),e(We,Ci),e(We,Bn),e(Bn,vL),e(We,wi),b(f,xf,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Wk),e(Ae,Ai),e(Ai,Qk),e(Ae,Hk),b(f,Co,_),b(f,xa,_),e(xa,Uk),e(xa,$f),e($f,Jk),e(xa,_ze),b(f,rGe,_),b(f,Li,_),e(Li,kf),e(kf,Wre),M(FL,Wre,null),e(Li,bze),e(Li,Qre),e(Qre,vze),b(f,tGe,_),b(f,In,_),e(In,Fze),e(In,Hre),e(Hre,Tze),e(In,Mze),e(In,Ure),e(Ure,Eze),e(In,Cze),b(f,aGe,_),M(TL,f,_),b(f,nGe,_),b(f,Yk,_),e(Yk,wze),b(f,sGe,_),M(Sf,f,_),b(f,lGe,_),b(f,yi,_),e(yi,Rf),e(Rf,Jre),M(ML,Jre,null),e(yi,Aze),e(yi,Yre),e(Yre,Lze),b(f,iGe,_),b(f,wo,_),M(EL,wo,null),e(wo,yze),e(wo,CL),e(CL,xze),e(CL,Kk),e(Kk,$ze),e(CL,kze),e(wo,Sze),e(wo,wL),e(wL,Rze),e(wL,Kre),e(Kre,Pze),e(wL,Bze),e(wo,Ize),e(wo,wr),M(AL,wr,null),e(wr,Nze),e(wr,Zre),e(Zre,qze),e(wr,jze),e(wr,xi),e(xi,Dze),e(xi,ete),e(ete,Gze),e(xi,Oze),e(xi,ote),e(ote,Vze),e(xi,Xze),e(wr,zze),e(wr,A),e(A,Pf),e(Pf,rte),e(rte,Wze),e(Pf,Qze),e(Pf,Zk),e(Zk,Hze),e(Pf,Uze),e(A,Jze),e(A,Bf),e(Bf,tte),e(tte,Yze),e(Bf,Kze),e(Bf,eS),e(eS,Zze),e(Bf,eWe),e(A,oWe),e(A,If),e(If,ate),e(ate,rWe),e(If,tWe),e(If,oS),e(oS,aWe),e(If,nWe),e(A,sWe),e(A,Nf),e(Nf,nte),e(nte,lWe),e(Nf,iWe),e(Nf,rS),e(rS,dWe),e(Nf,cWe),e(A,fWe),e(A,qf),e(qf,ste),e(ste,mWe),e(qf,gWe),e(qf,tS),e(tS,hWe),e(qf,pWe),e(A,uWe),e(A,jf),e(jf,lte),e(lte,_We),e(jf,bWe),e(jf,aS),e(aS,vWe),e(jf,FWe),e(A,TWe),e(A,Df),e(Df,ite),e(ite,MWe),e(Df,EWe),e(Df,nS),e(nS,CWe),e(Df,wWe),e(A,AWe),e(A,Gf),e(Gf,dte),e(dte,LWe),e(Gf,yWe),e(Gf,sS),e(sS,xWe),e(Gf,$We),e(A,kWe),e(A,Of),e(Of,cte),e(cte,SWe),e(Of,RWe),e(Of,lS),e(lS,PWe),e(Of,BWe),e(A,IWe),e(A,Vf),e(Vf,fte),e(fte,NWe),e(Vf,qWe),e(Vf,iS),e(iS,jWe),e(Vf,DWe),e(A,GWe),e(A,Xf),e(Xf,mte),e(mte,OWe),e(Xf,VWe),e(Xf,dS),e(dS,XWe),e(Xf,zWe),e(A,WWe),e(A,zf),e(zf,gte),e(gte,QWe),e(zf,HWe),e(zf,cS),e(cS,UWe),e(zf,JWe),e(A,YWe),e(A,Wf),e(Wf,hte),e(hte,KWe),e(Wf,ZWe),e(Wf,fS),e(fS,eQe),e(Wf,oQe),e(A,rQe),e(A,Qf),e(Qf,pte),e(pte,tQe),e(Qf,aQe),e(Qf,mS),e(mS,nQe),e(Qf,sQe),e(A,lQe),e(A,Hf),e(Hf,ute),e(ute,iQe),e(Hf,dQe),e(Hf,gS),e(gS,cQe),e(Hf,fQe),e(A,mQe),e(A,Uf),e(Uf,_te),e(_te,gQe),e(Uf,hQe),e(Uf,hS),e(hS,pQe),e(Uf,uQe),e(A,_Qe),e(A,Jf),e(Jf,bte),e(bte,bQe),e(Jf,vQe),e(Jf,pS),e(pS,FQe),e(Jf,TQe),e(A,MQe),e(A,Yf),e(Yf,vte),e(vte,EQe),e(Yf,CQe),e(Yf,uS),e(uS,wQe),e(Yf,AQe),e(A,LQe),e(A,Kf),e(Kf,Fte),e(Fte,yQe),e(Kf,xQe),e(Kf,_S),e(_S,$Qe),e(Kf,kQe),e(A,SQe),e(A,Zf),e(Zf,Tte),e(Tte,RQe),e(Zf,PQe),e(Zf,bS),e(bS,BQe),e(Zf,IQe),e(A,NQe),e(A,em),e(em,Mte),e(Mte,qQe),e(em,jQe),e(em,vS),e(vS,DQe),e(em,GQe),e(A,OQe),e(A,om),e(om,Ete),e(Ete,VQe),e(om,XQe),e(om,FS),e(FS,zQe),e(om,WQe),e(A,QQe),e(A,rm),e(rm,Cte),e(Cte,HQe),e(rm,UQe),e(rm,TS),e(TS,JQe),e(rm,YQe),e(A,KQe),e(A,tm),e(tm,wte),e(wte,ZQe),e(tm,eHe),e(tm,MS),e(MS,oHe),e(tm,rHe),e(A,tHe),e(A,am),e(am,Ate),e(Ate,aHe),e(am,nHe),e(am,ES),e(ES,sHe),e(am,lHe),e(A,iHe),e(A,nm),e(nm,Lte),e(Lte,dHe),e(nm,cHe),e(nm,CS),e(CS,fHe),e(nm,mHe),e(A,gHe),e(A,sm),e(sm,yte),e(yte,hHe),e(sm,pHe),e(sm,wS),e(wS,uHe),e(sm,_He),e(A,bHe),e(A,lm),e(lm,xte),e(xte,vHe),e(lm,FHe),e(lm,AS),e(AS,THe),e(lm,MHe),e(A,EHe),e(A,im),e(im,$te),e($te,CHe),e(im,wHe),e(im,LS),e(LS,AHe),e(im,LHe),e(A,yHe),e(A,dm),e(dm,kte),e(kte,xHe),e(dm,$He),e(dm,yS),e(yS,kHe),e(dm,SHe),e(A,RHe),e(A,cm),e(cm,Ste),e(Ste,PHe),e(cm,BHe),e(cm,xS),e(xS,IHe),e(cm,NHe),e(A,qHe),e(A,fm),e(fm,Rte),e(Rte,jHe),e(fm,DHe),e(fm,$S),e($S,GHe),e(fm,OHe),e(A,VHe),e(A,mm),e(mm,Pte),e(Pte,XHe),e(mm,zHe),e(mm,kS),e(kS,WHe),e(mm,QHe),e(A,HHe),e(A,gm),e(gm,Bte),e(Bte,UHe),e(gm,JHe),e(gm,SS),e(SS,YHe),e(gm,KHe),e(A,ZHe),e(A,hm),e(hm,Ite),e(Ite,eUe),e(hm,oUe),e(hm,RS),e(RS,rUe),e(hm,tUe),e(A,aUe),e(A,pm),e(pm,Nte),e(Nte,nUe),e(pm,sUe),e(pm,PS),e(PS,lUe),e(pm,iUe),e(A,dUe),e(A,um),e(um,qte),e(qte,cUe),e(um,fUe),e(um,BS),e(BS,mUe),e(um,gUe),e(A,hUe),e(A,_m),e(_m,jte),e(jte,pUe),e(_m,uUe),e(_m,IS),e(IS,_Ue),e(_m,bUe),e(A,vUe),e(A,bm),e(bm,Dte),e(Dte,FUe),e(bm,TUe),e(bm,NS),e(NS,MUe),e(bm,EUe),e(A,CUe),e(A,vm),e(vm,Gte),e(Gte,wUe),e(vm,AUe),e(vm,qS),e(qS,LUe),e(vm,yUe),e(A,xUe),e(A,Fm),e(Fm,Ote),e(Ote,$Ue),e(Fm,kUe),e(Fm,jS),e(jS,SUe),e(Fm,RUe),e(A,PUe),e(A,Tm),e(Tm,Vte),e(Vte,BUe),e(Tm,IUe),e(Tm,DS),e(DS,NUe),e(Tm,qUe),e(A,jUe),e(A,Mm),e(Mm,Xte),e(Xte,DUe),e(Mm,GUe),e(Mm,GS),e(GS,OUe),e(Mm,VUe),e(A,XUe),e(A,Em),e(Em,zte),e(zte,zUe),e(Em,WUe),e(Em,OS),e(OS,QUe),e(Em,HUe),e(A,UUe),e(A,Cm),e(Cm,Wte),e(Wte,JUe),e(Cm,YUe),e(Cm,VS),e(VS,KUe),e(Cm,ZUe),e(A,eJe),e(A,wm),e(wm,Qte),e(Qte,oJe),e(wm,rJe),e(wm,XS),e(XS,tJe),e(wm,aJe),e(A,nJe),e(A,Am),e(Am,Hte),e(Hte,sJe),e(Am,lJe),e(Am,zS),e(zS,iJe),e(Am,dJe),e(A,cJe),e(A,Lm),e(Lm,Ute),e(Ute,fJe),e(Lm,mJe),e(Lm,WS),e(WS,gJe),e(Lm,hJe),e(A,pJe),e(A,ym),e(ym,Jte),e(Jte,uJe),e(ym,_Je),e(ym,QS),e(QS,bJe),e(ym,vJe),e(A,FJe),e(A,xm),e(xm,Yte),e(Yte,TJe),e(xm,MJe),e(xm,HS),e(HS,EJe),e(xm,CJe),e(A,wJe),e(A,$m),e($m,Kte),e(Kte,AJe),e($m,LJe),e($m,US),e(US,yJe),e($m,xJe),e(A,$Je),e(A,km),e(km,Zte),e(Zte,kJe),e(km,SJe),e(km,JS),e(JS,RJe),e(km,PJe),e(A,BJe),e(A,Sm),e(Sm,eae),e(eae,IJe),e(Sm,NJe),e(Sm,YS),e(YS,qJe),e(Sm,jJe),e(A,DJe),e(A,Rm),e(Rm,oae),e(oae,GJe),e(Rm,OJe),e(Rm,KS),e(KS,VJe),e(Rm,XJe),e(A,zJe),e(A,Pm),e(Pm,rae),e(rae,WJe),e(Pm,QJe),e(Pm,ZS),e(ZS,HJe),e(Pm,UJe),e(A,JJe),e(A,Bm),e(Bm,tae),e(tae,YJe),e(Bm,KJe),e(Bm,eR),e(eR,ZJe),e(Bm,eYe),e(A,oYe),e(A,Im),e(Im,aae),e(aae,rYe),e(Im,tYe),e(Im,oR),e(oR,aYe),e(Im,nYe),e(A,sYe),e(A,Nm),e(Nm,nae),e(nae,lYe),e(Nm,iYe),e(Nm,rR),e(rR,dYe),e(Nm,cYe),e(A,fYe),e(A,qm),e(qm,sae),e(sae,mYe),e(qm,gYe),e(qm,tR),e(tR,hYe),e(qm,pYe),e(A,uYe),e(A,jm),e(jm,lae),e(lae,_Ye),e(jm,bYe),e(jm,aR),e(aR,vYe),e(jm,FYe),e(A,TYe),e(A,Dm),e(Dm,iae),e(iae,MYe),e(Dm,EYe),e(Dm,nR),e(nR,CYe),e(Dm,wYe),e(A,AYe),e(A,Gm),e(Gm,dae),e(dae,LYe),e(Gm,yYe),e(Gm,sR),e(sR,xYe),e(Gm,$Ye),e(A,kYe),e(A,Om),e(Om,cae),e(cae,SYe),e(Om,RYe),e(Om,lR),e(lR,PYe),e(Om,BYe),e(A,IYe),e(A,Vm),e(Vm,fae),e(fae,NYe),e(Vm,qYe),e(Vm,iR),e(iR,jYe),e(Vm,DYe),e(A,GYe),e(A,Xm),e(Xm,mae),e(mae,OYe),e(Xm,VYe),e(Xm,dR),e(dR,XYe),e(Xm,zYe),e(A,WYe),e(A,zm),e(zm,gae),e(gae,QYe),e(zm,HYe),e(zm,cR),e(cR,UYe),e(zm,JYe),e(A,YYe),e(A,Wm),e(Wm,hae),e(hae,KYe),e(Wm,ZYe),e(Wm,fR),e(fR,eKe),e(Wm,oKe),e(A,rKe),e(A,Qm),e(Qm,pae),e(pae,tKe),e(Qm,aKe),e(Qm,mR),e(mR,nKe),e(Qm,sKe),e(A,lKe),e(A,Hm),e(Hm,uae),e(uae,iKe),e(Hm,dKe),e(Hm,gR),e(gR,cKe),e(Hm,fKe),e(A,mKe),e(A,Um),e(Um,_ae),e(_ae,gKe),e(Um,hKe),e(Um,hR),e(hR,pKe),e(Um,uKe),e(A,_Ke),e(A,Jm),e(Jm,bae),e(bae,bKe),e(Jm,vKe),e(Jm,pR),e(pR,FKe),e(Jm,TKe),e(A,MKe),e(A,Ym),e(Ym,vae),e(vae,EKe),e(Ym,CKe),e(Ym,uR),e(uR,wKe),e(Ym,AKe),e(A,LKe),e(A,Km),e(Km,Fae),e(Fae,yKe),e(Km,xKe),e(Km,_R),e(_R,$Ke),e(Km,kKe),e(A,SKe),e(A,Zm),e(Zm,Tae),e(Tae,RKe),e(Zm,PKe),e(Zm,bR),e(bR,BKe),e(Zm,IKe),e(A,NKe),e(A,eg),e(eg,Mae),e(Mae,qKe),e(eg,jKe),e(eg,vR),e(vR,DKe),e(eg,GKe),e(A,OKe),e(A,og),e(og,Eae),e(Eae,VKe),e(og,XKe),e(og,FR),e(FR,zKe),e(og,WKe),e(A,QKe),e(A,rg),e(rg,Cae),e(Cae,HKe),e(rg,UKe),e(rg,TR),e(TR,JKe),e(rg,YKe),e(A,KKe),e(A,tg),e(tg,wae),e(wae,ZKe),e(tg,eZe),e(tg,MR),e(MR,oZe),e(tg,rZe),e(A,tZe),e(A,ag),e(ag,Aae),e(Aae,aZe),e(ag,nZe),e(ag,ER),e(ER,sZe),e(ag,lZe),e(A,iZe),e(A,ng),e(ng,Lae),e(Lae,dZe),e(ng,cZe),e(ng,CR),e(CR,fZe),e(ng,mZe),e(A,gZe),e(A,sg),e(sg,yae),e(yae,hZe),e(sg,pZe),e(sg,wR),e(wR,uZe),e(sg,_Ze),e(A,bZe),e(A,lg),e(lg,xae),e(xae,vZe),e(lg,FZe),e(lg,AR),e(AR,TZe),e(lg,MZe),e(A,EZe),e(A,ig),e(ig,$ae),e($ae,CZe),e(ig,wZe),e(ig,LR),e(LR,AZe),e(ig,LZe),e(A,yZe),e(A,dg),e(dg,kae),e(kae,xZe),e(dg,$Ze),e(dg,yR),e(yR,kZe),e(dg,SZe),e(A,RZe),e(A,cg),e(cg,Sae),e(Sae,PZe),e(cg,BZe),e(cg,xR),e(xR,IZe),e(cg,NZe),e(A,qZe),e(A,fg),e(fg,Rae),e(Rae,jZe),e(fg,DZe),e(fg,$R),e($R,GZe),e(fg,OZe),e(A,VZe),e(A,mg),e(mg,Pae),e(Pae,XZe),e(mg,zZe),e(mg,kR),e(kR,WZe),e(mg,QZe),e(A,HZe),e(A,gg),e(gg,Bae),e(Bae,UZe),e(gg,JZe),e(gg,SR),e(SR,YZe),e(gg,KZe),e(A,ZZe),e(A,hg),e(hg,Iae),e(Iae,eeo),e(hg,oeo),e(hg,RR),e(RR,reo),e(hg,teo),e(A,aeo),e(A,pg),e(pg,Nae),e(Nae,neo),e(pg,seo),e(pg,PR),e(PR,leo),e(pg,ieo),e(A,deo),e(A,ug),e(ug,qae),e(qae,ceo),e(ug,feo),e(ug,BR),e(BR,meo),e(ug,geo),e(A,heo),e(A,_g),e(_g,jae),e(jae,peo),e(_g,ueo),e(_g,IR),e(IR,_eo),e(_g,beo),e(A,veo),e(A,bg),e(bg,Dae),e(Dae,Feo),e(bg,Teo),e(bg,NR),e(NR,Meo),e(bg,Eeo),e(A,Ceo),e(A,vg),e(vg,Gae),e(Gae,weo),e(vg,Aeo),e(vg,qR),e(qR,Leo),e(vg,yeo),e(A,xeo),e(A,Fg),e(Fg,Oae),e(Oae,$eo),e(Fg,keo),e(Fg,jR),e(jR,Seo),e(Fg,Reo),e(A,Peo),e(A,Tg),e(Tg,Vae),e(Vae,Beo),e(Tg,Ieo),e(Tg,DR),e(DR,Neo),e(Tg,qeo),e(A,jeo),e(A,Mg),e(Mg,Xae),e(Xae,Deo),e(Mg,Geo),e(Mg,GR),e(GR,Oeo),e(Mg,Veo),e(A,Xeo),e(A,Eg),e(Eg,zae),e(zae,zeo),e(Eg,Weo),e(Eg,OR),e(OR,Qeo),e(Eg,Heo),e(A,Ueo),e(A,Cg),e(Cg,Wae),e(Wae,Jeo),e(Cg,Yeo),e(Cg,VR),e(VR,Keo),e(Cg,Zeo),e(A,eoo),e(A,wg),e(wg,Qae),e(Qae,ooo),e(wg,roo),e(wg,XR),e(XR,too),e(wg,aoo),e(A,noo),e(A,Ag),e(Ag,Hae),e(Hae,soo),e(Ag,loo),e(Ag,zR),e(zR,ioo),e(Ag,doo),e(A,coo),e(A,Lg),e(Lg,Uae),e(Uae,foo),e(Lg,moo),e(Lg,WR),e(WR,goo),e(Lg,hoo),e(A,poo),e(A,yg),e(yg,Jae),e(Jae,uoo),e(yg,_oo),e(yg,QR),e(QR,boo),e(yg,voo),e(A,Foo),e(A,xg),e(xg,Yae),e(Yae,Too),e(xg,Moo),e(xg,HR),e(HR,Eoo),e(xg,Coo),e(A,woo),e(A,$g),e($g,Kae),e(Kae,Aoo),e($g,Loo),e($g,UR),e(UR,yoo),e($g,xoo),e(A,$oo),e(A,kg),e(kg,Zae),e(Zae,koo),e(kg,Soo),e(kg,JR),e(JR,Roo),e(kg,Poo),e(A,Boo),e(A,Sg),e(Sg,ene),e(ene,Ioo),e(Sg,Noo),e(Sg,YR),e(YR,qoo),e(Sg,joo),e(A,Doo),e(A,Rg),e(Rg,one),e(one,Goo),e(Rg,Ooo),e(Rg,KR),e(KR,Voo),e(Rg,Xoo),e(A,zoo),e(A,Pg),e(Pg,rne),e(rne,Woo),e(Pg,Qoo),e(Pg,ZR),e(ZR,Hoo),e(Pg,Uoo),e(A,Joo),e(A,Bg),e(Bg,tne),e(tne,Yoo),e(Bg,Koo),e(Bg,eP),e(eP,Zoo),e(Bg,ero),e(A,oro),e(A,Ig),e(Ig,ane),e(ane,rro),e(Ig,tro),e(Ig,oP),e(oP,aro),e(Ig,nro),e(A,sro),e(A,Ng),e(Ng,nne),e(nne,lro),e(Ng,iro),e(Ng,rP),e(rP,dro),e(Ng,cro),e(A,fro),e(A,qg),e(qg,sne),e(sne,mro),e(qg,gro),e(qg,tP),e(tP,hro),e(qg,pro),e(wr,uro),M(jg,wr,null),e(wo,_ro),e(wo,Dg),M(LL,Dg,null),e(Dg,bro),e(Dg,lne),e(lne,vro),b(f,dGe,_),b(f,$i,_),e($i,Gg),e(Gg,ine),M(yL,ine,null),e($i,Fro),e($i,dne),e(dne,Tro),b(f,cGe,_),b(f,Ao,_),M(xL,Ao,null),e(Ao,Mro),e(Ao,$L),e($L,Ero),e($L,aP),e(aP,Cro),e($L,wro),e(Ao,Aro),e(Ao,kL),e(kL,Lro),e(kL,cne),e(cne,yro),e(kL,xro),e(Ao,$ro),e(Ao,Ar),M(SL,Ar,null),e(Ar,kro),e(Ar,fne),e(fne,Sro),e(Ar,Rro),e(Ar,$a),e($a,Pro),e($a,mne),e(mne,Bro),e($a,Iro),e($a,gne),e(gne,Nro),e($a,qro),e($a,hne),e(hne,jro),e($a,Dro),e(Ar,Gro),e(Ar,k),e(k,Nn),e(Nn,pne),e(pne,Oro),e(Nn,Vro),e(Nn,nP),e(nP,Xro),e(Nn,zro),e(Nn,sP),e(sP,Wro),e(Nn,Qro),e(k,Hro),e(k,qn),e(qn,une),e(une,Uro),e(qn,Jro),e(qn,lP),e(lP,Yro),e(qn,Kro),e(qn,iP),e(iP,Zro),e(qn,eto),e(k,oto),e(k,jn),e(jn,_ne),e(_ne,rto),e(jn,tto),e(jn,dP),e(dP,ato),e(jn,nto),e(jn,cP),e(cP,sto),e(jn,lto),e(k,ito),e(k,Og),e(Og,bne),e(bne,dto),e(Og,cto),e(Og,fP),e(fP,fto),e(Og,mto),e(k,gto),e(k,Dn),e(Dn,vne),e(vne,hto),e(Dn,pto),e(Dn,mP),e(mP,uto),e(Dn,_to),e(Dn,gP),e(gP,bto),e(Dn,vto),e(k,Fto),e(k,Vg),e(Vg,Fne),e(Fne,Tto),e(Vg,Mto),e(Vg,hP),e(hP,Eto),e(Vg,Cto),e(k,wto),e(k,Xg),e(Xg,Tne),e(Tne,Ato),e(Xg,Lto),e(Xg,pP),e(pP,yto),e(Xg,xto),e(k,$to),e(k,zg),e(zg,Mne),e(Mne,kto),e(zg,Sto),e(zg,uP),e(uP,Rto),e(zg,Pto),e(k,Bto),e(k,Gn),e(Gn,Ene),e(Ene,Ito),e(Gn,Nto),e(Gn,_P),e(_P,qto),e(Gn,jto),e(Gn,bP),e(bP,Dto),e(Gn,Gto),e(k,Oto),e(k,On),e(On,Cne),e(Cne,Vto),e(On,Xto),e(On,vP),e(vP,zto),e(On,Wto),e(On,FP),e(FP,Qto),e(On,Hto),e(k,Uto),e(k,Vn),e(Vn,wne),e(wne,Jto),e(Vn,Yto),e(Vn,TP),e(TP,Kto),e(Vn,Zto),e(Vn,MP),e(MP,eao),e(Vn,oao),e(k,rao),e(k,Wg),e(Wg,Ane),e(Ane,tao),e(Wg,aao),e(Wg,EP),e(EP,nao),e(Wg,sao),e(k,lao),e(k,Qg),e(Qg,Lne),e(Lne,iao),e(Qg,dao),e(Qg,CP),e(CP,cao),e(Qg,fao),e(k,mao),e(k,Hg),e(Hg,yne),e(yne,gao),e(Hg,hao),e(Hg,wP),e(wP,pao),e(Hg,uao),e(k,_ao),e(k,Xn),e(Xn,xne),e(xne,bao),e(Xn,vao),e(Xn,AP),e(AP,Fao),e(Xn,Tao),e(Xn,LP),e(LP,Mao),e(Xn,Eao),e(k,Cao),e(k,Ug),e(Ug,$ne),e($ne,wao),e(Ug,Aao),e(Ug,yP),e(yP,Lao),e(Ug,yao),e(k,xao),e(k,zn),e(zn,kne),e(kne,$ao),e(zn,kao),e(zn,xP),e(xP,Sao),e(zn,Rao),e(zn,$P),e($P,Pao),e(zn,Bao),e(k,Iao),e(k,Wn),e(Wn,Sne),e(Sne,Nao),e(Wn,qao),e(Wn,kP),e(kP,jao),e(Wn,Dao),e(Wn,SP),e(SP,Gao),e(Wn,Oao),e(k,Vao),e(k,Qn),e(Qn,Rne),e(Rne,Xao),e(Qn,zao),e(Qn,RP),e(RP,Wao),e(Qn,Qao),e(Qn,PP),e(PP,Hao),e(Qn,Uao),e(k,Jao),e(k,Jg),e(Jg,Pne),e(Pne,Yao),e(Jg,Kao),e(Jg,BP),e(BP,Zao),e(Jg,eno),e(k,ono),e(k,Hn),e(Hn,Bne),e(Bne,rno),e(Hn,tno),e(Hn,IP),e(IP,ano),e(Hn,nno),e(Hn,NP),e(NP,sno),e(Hn,lno),e(k,ino),e(k,Un),e(Un,Ine),e(Ine,dno),e(Un,cno),e(Un,qP),e(qP,fno),e(Un,mno),e(Un,jP),e(jP,gno),e(Un,hno),e(k,pno),e(k,Jn),e(Jn,Nne),e(Nne,uno),e(Jn,_no),e(Jn,DP),e(DP,bno),e(Jn,vno),e(Jn,GP),e(GP,Fno),e(Jn,Tno),e(k,Mno),e(k,Yn),e(Yn,qne),e(qne,Eno),e(Yn,Cno),e(Yn,OP),e(OP,wno),e(Yn,Ano),e(Yn,VP),e(VP,Lno),e(Yn,yno),e(k,xno),e(k,Kn),e(Kn,jne),e(jne,$no),e(Kn,kno),e(Kn,XP),e(XP,Sno),e(Kn,Rno),e(Kn,zP),e(zP,Pno),e(Kn,Bno),e(k,Ino),e(k,Zn),e(Zn,Dne),e(Dne,Nno),e(Zn,qno),e(Zn,WP),e(WP,jno),e(Zn,Dno),e(Zn,QP),e(QP,Gno),e(Zn,Ono),e(k,Vno),e(k,Yg),e(Yg,Gne),e(Gne,Xno),e(Yg,zno),e(Yg,HP),e(HP,Wno),e(Yg,Qno),e(k,Hno),e(k,es),e(es,One),e(One,Uno),e(es,Jno),e(es,UP),e(UP,Yno),e(es,Kno),e(es,JP),e(JP,Zno),e(es,eso),e(k,oso),e(k,Kg),e(Kg,Vne),e(Vne,rso),e(Kg,tso),e(Kg,YP),e(YP,aso),e(Kg,nso),e(k,sso),e(k,os),e(os,Xne),e(Xne,lso),e(os,iso),e(os,KP),e(KP,dso),e(os,cso),e(os,ZP),e(ZP,fso),e(os,mso),e(k,gso),e(k,rs),e(rs,zne),e(zne,hso),e(rs,pso),e(rs,eB),e(eB,uso),e(rs,_so),e(rs,oB),e(oB,bso),e(rs,vso),e(k,Fso),e(k,ts),e(ts,Wne),e(Wne,Tso),e(ts,Mso),e(ts,rB),e(rB,Eso),e(ts,Cso),e(ts,tB),e(tB,wso),e(ts,Aso),e(k,Lso),e(k,Zg),e(Zg,Qne),e(Qne,yso),e(Zg,xso),e(Zg,aB),e(aB,$so),e(Zg,kso),e(k,Sso),e(k,as),e(as,Hne),e(Hne,Rso),e(as,Pso),e(as,nB),e(nB,Bso),e(as,Iso),e(as,sB),e(sB,Nso),e(as,qso),e(k,jso),e(k,ns),e(ns,Une),e(Une,Dso),e(ns,Gso),e(ns,lB),e(lB,Oso),e(ns,Vso),e(ns,iB),e(iB,Xso),e(ns,zso),e(k,Wso),e(k,eh),e(eh,Jne),e(Jne,Qso),e(eh,Hso),e(eh,dB),e(dB,Uso),e(eh,Jso),e(k,Yso),e(k,ss),e(ss,Yne),e(Yne,Kso),e(ss,Zso),e(ss,cB),e(cB,elo),e(ss,olo),e(ss,fB),e(fB,rlo),e(ss,tlo),e(k,alo),e(k,ls),e(ls,Kne),e(Kne,nlo),e(ls,slo),e(ls,mB),e(mB,llo),e(ls,ilo),e(ls,gB),e(gB,dlo),e(ls,clo),e(k,flo),e(k,is),e(is,Zne),e(Zne,mlo),e(is,glo),e(is,hB),e(hB,hlo),e(is,plo),e(is,pB),e(pB,ulo),e(is,_lo),e(k,blo),e(k,ds),e(ds,ese),e(ese,vlo),e(ds,Flo),e(ds,uB),e(uB,Tlo),e(ds,Mlo),e(ds,_B),e(_B,Elo),e(ds,Clo),e(k,wlo),e(k,cs),e(cs,ose),e(ose,Alo),e(cs,Llo),e(cs,bB),e(bB,ylo),e(cs,xlo),e(cs,vB),e(vB,$lo),e(cs,klo),e(k,Slo),e(k,fs),e(fs,rse),e(rse,Rlo),e(fs,Plo),e(fs,FB),e(FB,Blo),e(fs,Ilo),e(fs,TB),e(TB,Nlo),e(fs,qlo),e(k,jlo),e(k,ms),e(ms,tse),e(tse,Dlo),e(ms,Glo),e(ms,MB),e(MB,Olo),e(ms,Vlo),e(ms,EB),e(EB,Xlo),e(ms,zlo),e(k,Wlo),e(k,gs),e(gs,ase),e(ase,Qlo),e(gs,Hlo),e(gs,CB),e(CB,Ulo),e(gs,Jlo),e(gs,wB),e(wB,Ylo),e(gs,Klo),e(k,Zlo),e(k,oh),e(oh,nse),e(nse,eio),e(oh,oio),e(oh,AB),e(AB,rio),e(oh,tio),e(k,aio),e(k,hs),e(hs,sse),e(sse,nio),e(hs,sio),e(hs,LB),e(LB,lio),e(hs,iio),e(hs,yB),e(yB,dio),e(hs,cio),e(k,fio),e(k,rh),e(rh,lse),e(lse,mio),e(rh,gio),e(rh,xB),e(xB,hio),e(rh,pio),e(k,uio),e(k,th),e(th,ise),e(ise,_io),e(th,bio),e(th,$B),e($B,vio),e(th,Fio),e(k,Tio),e(k,ps),e(ps,dse),e(dse,Mio),e(ps,Eio),e(ps,kB),e(kB,Cio),e(ps,wio),e(ps,SB),e(SB,Aio),e(ps,Lio),e(k,yio),e(k,us),e(us,cse),e(cse,xio),e(us,$io),e(us,RB),e(RB,kio),e(us,Sio),e(us,PB),e(PB,Rio),e(us,Pio),e(k,Bio),e(k,_s),e(_s,fse),e(fse,Iio),e(_s,Nio),e(_s,BB),e(BB,qio),e(_s,jio),e(_s,IB),e(IB,Dio),e(_s,Gio),e(k,Oio),e(k,ah),e(ah,mse),e(mse,Vio),e(ah,Xio),e(ah,NB),e(NB,zio),e(ah,Wio),e(k,Qio),e(k,bs),e(bs,gse),e(gse,Hio),e(bs,Uio),e(bs,qB),e(qB,Jio),e(bs,Yio),e(bs,jB),e(jB,Kio),e(bs,Zio),e(k,edo),e(k,vs),e(vs,hse),e(hse,odo),e(vs,rdo),e(vs,DB),e(DB,tdo),e(vs,ado),e(vs,GB),e(GB,ndo),e(vs,sdo),e(k,ldo),e(k,Fs),e(Fs,pse),e(pse,ido),e(Fs,ddo),e(Fs,OB),e(OB,cdo),e(Fs,fdo),e(Fs,VB),e(VB,mdo),e(Fs,gdo),e(k,hdo),e(k,Ts),e(Ts,use),e(use,pdo),e(Ts,udo),e(Ts,XB),e(XB,_do),e(Ts,bdo),e(Ts,zB),e(zB,vdo),e(Ts,Fdo),e(k,Tdo),e(k,Ms),e(Ms,_se),e(_se,Mdo),e(Ms,Edo),e(Ms,WB),e(WB,Cdo),e(Ms,wdo),e(Ms,QB),e(QB,Ado),e(Ms,Ldo),e(k,ydo),e(k,nh),e(nh,bse),e(bse,xdo),e(nh,$do),e(nh,HB),e(HB,kdo),e(nh,Sdo),e(k,Rdo),e(k,Es),e(Es,vse),e(vse,Pdo),e(Es,Bdo),e(Es,UB),e(UB,Ido),e(Es,Ndo),e(Es,JB),e(JB,qdo),e(Es,jdo),e(k,Ddo),e(k,sh),e(sh,Fse),e(Fse,Gdo),e(sh,Odo),e(sh,YB),e(YB,Vdo),e(sh,Xdo),e(k,zdo),e(k,lh),e(lh,Tse),e(Tse,Wdo),e(lh,Qdo),e(lh,KB),e(KB,Hdo),e(lh,Udo),e(k,Jdo),e(k,ih),e(ih,Mse),e(Mse,Ydo),e(ih,Kdo),e(ih,ZB),e(ZB,Zdo),e(ih,eco),e(k,oco),e(k,dh),e(dh,Ese),e(Ese,rco),e(dh,tco),e(dh,eI),e(eI,aco),e(dh,nco),e(k,sco),e(k,Cs),e(Cs,Cse),e(Cse,lco),e(Cs,ico),e(Cs,oI),e(oI,dco),e(Cs,cco),e(Cs,rI),e(rI,fco),e(Cs,mco),e(k,gco),e(k,ch),e(ch,wse),e(wse,hco),e(ch,pco),e(ch,tI),e(tI,uco),e(ch,_co),e(k,bco),e(k,ws),e(ws,Ase),e(Ase,vco),e(ws,Fco),e(ws,aI),e(aI,Tco),e(ws,Mco),e(ws,nI),e(nI,Eco),e(ws,Cco),e(k,wco),e(k,As),e(As,Lse),e(Lse,Aco),e(As,Lco),e(As,sI),e(sI,yco),e(As,xco),e(As,lI),e(lI,$co),e(As,kco),e(k,Sco),e(k,Ls),e(Ls,yse),e(yse,Rco),e(Ls,Pco),e(Ls,iI),e(iI,Bco),e(Ls,Ico),e(Ls,dI),e(dI,Nco),e(Ls,qco),e(k,jco),e(k,ys),e(ys,xse),e(xse,Dco),e(ys,Gco),e(ys,cI),e(cI,Oco),e(ys,Vco),e(ys,fI),e(fI,Xco),e(ys,zco),e(k,Wco),e(k,xs),e(xs,$se),e($se,Qco),e(xs,Hco),e(xs,mI),e(mI,Uco),e(xs,Jco),e(xs,gI),e(gI,Yco),e(xs,Kco),e(k,Zco),e(k,$s),e($s,kse),e(kse,efo),e($s,ofo),e($s,hI),e(hI,rfo),e($s,tfo),e($s,pI),e(pI,afo),e($s,nfo),e(k,sfo),e(k,fh),e(fh,Sse),e(Sse,lfo),e(fh,ifo),e(fh,uI),e(uI,dfo),e(fh,cfo),e(k,ffo),e(k,mh),e(mh,Rse),e(Rse,mfo),e(mh,gfo),e(mh,_I),e(_I,hfo),e(mh,pfo),e(k,ufo),e(k,ks),e(ks,Pse),e(Pse,_fo),e(ks,bfo),e(ks,bI),e(bI,vfo),e(ks,Ffo),e(ks,vI),e(vI,Tfo),e(ks,Mfo),e(k,Efo),e(k,Ss),e(Ss,Bse),e(Bse,Cfo),e(Ss,wfo),e(Ss,FI),e(FI,Afo),e(Ss,Lfo),e(Ss,TI),e(TI,yfo),e(Ss,xfo),e(k,$fo),e(k,Rs),e(Rs,Ise),e(Ise,kfo),e(Rs,Sfo),e(Rs,MI),e(MI,Rfo),e(Rs,Pfo),e(Rs,EI),e(EI,Bfo),e(Rs,Ifo),e(k,Nfo),e(k,gh),e(gh,Nse),e(Nse,qfo),e(gh,jfo),e(gh,CI),e(CI,Dfo),e(gh,Gfo),e(k,Ofo),e(k,hh),e(hh,qse),e(qse,Vfo),e(hh,Xfo),e(hh,wI),e(wI,zfo),e(hh,Wfo),e(k,Qfo),e(k,ph),e(ph,jse),e(jse,Hfo),e(ph,Ufo),e(ph,AI),e(AI,Jfo),e(ph,Yfo),e(k,Kfo),e(k,Ps),e(Ps,Dse),e(Dse,Zfo),e(Ps,emo),e(Ps,LI),e(LI,omo),e(Ps,rmo),e(Ps,yI),e(yI,tmo),e(Ps,amo),e(k,nmo),e(k,Bs),e(Bs,Gse),e(Gse,smo),e(Bs,lmo),e(Bs,xI),e(xI,imo),e(Bs,dmo),e(Bs,$I),e($I,cmo),e(Bs,fmo),e(k,mmo),e(k,uh),e(uh,Ose),e(Ose,gmo),e(uh,hmo),e(uh,kI),e(kI,pmo),e(uh,umo),e(k,_mo),e(k,_h),e(_h,Vse),e(Vse,bmo),e(_h,vmo),e(_h,SI),e(SI,Fmo),e(_h,Tmo),e(k,Mmo),e(k,bh),e(bh,Xse),e(Xse,Emo),e(bh,Cmo),e(bh,RI),e(RI,wmo),e(bh,Amo),e(k,Lmo),e(k,Is),e(Is,zse),e(zse,ymo),e(Is,xmo),e(Is,PI),e(PI,$mo),e(Is,kmo),e(Is,BI),e(BI,Smo),e(Is,Rmo),e(k,Pmo),e(k,vh),e(vh,Wse),e(Wse,Bmo),e(vh,Imo),e(vh,II),e(II,Nmo),e(vh,qmo),e(k,jmo),e(k,Fh),e(Fh,Qse),e(Qse,Dmo),e(Fh,Gmo),e(Fh,NI),e(NI,Omo),e(Fh,Vmo),e(k,Xmo),e(k,Ns),e(Ns,Hse),e(Hse,zmo),e(Ns,Wmo),e(Ns,qI),e(qI,Qmo),e(Ns,Hmo),e(Ns,jI),e(jI,Umo),e(Ns,Jmo),e(k,Ymo),e(k,qs),e(qs,Use),e(Use,Kmo),e(qs,Zmo),e(qs,DI),e(DI,ego),e(qs,ogo),e(qs,GI),e(GI,rgo),e(qs,tgo),e(k,ago),e(k,js),e(js,Jse),e(Jse,ngo),e(js,sgo),e(js,OI),e(OI,lgo),e(js,igo),e(js,VI),e(VI,dgo),e(js,cgo),e(k,fgo),e(k,Ds),e(Ds,Yse),e(Yse,mgo),e(Ds,ggo),e(Ds,XI),e(XI,hgo),e(Ds,pgo),e(Ds,zI),e(zI,ugo),e(Ds,_go),e(Ar,bgo),M(Th,Ar,null),e(Ao,vgo),e(Ao,Mh),M(RL,Mh,null),e(Mh,Fgo),e(Mh,Kse),e(Kse,Tgo),b(f,fGe,_),b(f,ki,_),e(ki,Eh),e(Eh,Zse),M(PL,Zse,null),e(ki,Mgo),e(ki,ele),e(ele,Ego),b(f,mGe,_),b(f,Lo,_),M(BL,Lo,null),e(Lo,Cgo),e(Lo,IL),e(IL,wgo),e(IL,WI),e(WI,Ago),e(IL,Lgo),e(Lo,ygo),e(Lo,NL),e(NL,xgo),e(NL,ole),e(ole,$go),e(NL,kgo),e(Lo,Sgo),e(Lo,He),M(qL,He,null),e(He,Rgo),e(He,rle),e(rle,Pgo),e(He,Bgo),e(He,ka),e(ka,Igo),e(ka,tle),e(tle,Ngo),e(ka,qgo),e(ka,ale),e(ale,jgo),e(ka,Dgo),e(ka,nle),e(nle,Ggo),e(ka,Ogo),e(He,Vgo),e(He,Y),e(Y,Ch),e(Ch,sle),e(sle,Xgo),e(Ch,zgo),e(Ch,QI),e(QI,Wgo),e(Ch,Qgo),e(Y,Hgo),e(Y,wh),e(wh,lle),e(lle,Ugo),e(wh,Jgo),e(wh,HI),e(HI,Ygo),e(wh,Kgo),e(Y,Zgo),e(Y,Ah),e(Ah,ile),e(ile,eho),e(Ah,oho),e(Ah,UI),e(UI,rho),e(Ah,tho),e(Y,aho),e(Y,Lh),e(Lh,dle),e(dle,nho),e(Lh,sho),e(Lh,JI),e(JI,lho),e(Lh,iho),e(Y,dho),e(Y,yh),e(yh,cle),e(cle,cho),e(yh,fho),e(yh,YI),e(YI,mho),e(yh,gho),e(Y,hho),e(Y,xh),e(xh,fle),e(fle,pho),e(xh,uho),e(xh,KI),e(KI,_ho),e(xh,bho),e(Y,vho),e(Y,$h),e($h,mle),e(mle,Fho),e($h,Tho),e($h,ZI),e(ZI,Mho),e($h,Eho),e(Y,Cho),e(Y,kh),e(kh,gle),e(gle,who),e(kh,Aho),e(kh,eN),e(eN,Lho),e(kh,yho),e(Y,xho),e(Y,Sh),e(Sh,hle),e(hle,$ho),e(Sh,kho),e(Sh,oN),e(oN,Sho),e(Sh,Rho),e(Y,Pho),e(Y,Rh),e(Rh,ple),e(ple,Bho),e(Rh,Iho),e(Rh,rN),e(rN,Nho),e(Rh,qho),e(Y,jho),e(Y,Ph),e(Ph,ule),e(ule,Dho),e(Ph,Gho),e(Ph,tN),e(tN,Oho),e(Ph,Vho),e(Y,Xho),e(Y,Bh),e(Bh,_le),e(_le,zho),e(Bh,Who),e(Bh,aN),e(aN,Qho),e(Bh,Hho),e(Y,Uho),e(Y,Ih),e(Ih,ble),e(ble,Jho),e(Ih,Yho),e(Ih,nN),e(nN,Kho),e(Ih,Zho),e(Y,epo),e(Y,Nh),e(Nh,vle),e(vle,opo),e(Nh,rpo),e(Nh,sN),e(sN,tpo),e(Nh,apo),e(Y,npo),e(Y,qh),e(qh,Fle),e(Fle,spo),e(qh,lpo),e(qh,lN),e(lN,ipo),e(qh,dpo),e(Y,cpo),e(Y,jh),e(jh,Tle),e(Tle,fpo),e(jh,mpo),e(jh,iN),e(iN,gpo),e(jh,hpo),e(Y,ppo),e(Y,Dh),e(Dh,Mle),e(Mle,upo),e(Dh,_po),e(Dh,dN),e(dN,bpo),e(Dh,vpo),e(Y,Fpo),e(Y,Gh),e(Gh,Ele),e(Ele,Tpo),e(Gh,Mpo),e(Gh,cN),e(cN,Epo),e(Gh,Cpo),e(Y,wpo),e(Y,Oh),e(Oh,Cle),e(Cle,Apo),e(Oh,Lpo),e(Oh,fN),e(fN,ypo),e(Oh,xpo),e(Y,$po),e(Y,Vh),e(Vh,wle),e(wle,kpo),e(Vh,Spo),e(Vh,mN),e(mN,Rpo),e(Vh,Ppo),e(Y,Bpo),e(Y,Xh),e(Xh,Ale),e(Ale,Ipo),e(Xh,Npo),e(Xh,gN),e(gN,qpo),e(Xh,jpo),e(Y,Dpo),e(Y,zh),e(zh,Lle),e(Lle,Gpo),e(zh,Opo),e(zh,hN),e(hN,Vpo),e(zh,Xpo),e(Y,zpo),e(Y,Wh),e(Wh,yle),e(yle,Wpo),e(Wh,Qpo),e(Wh,pN),e(pN,Hpo),e(Wh,Upo),e(Y,Jpo),e(Y,Qh),e(Qh,xle),e(xle,Ypo),e(Qh,Kpo),e(Qh,uN),e(uN,Zpo),e(Qh,euo),e(Y,ouo),e(Y,Hh),e(Hh,$le),e($le,ruo),e(Hh,tuo),e(Hh,_N),e(_N,auo),e(Hh,nuo),e(Y,suo),e(Y,Uh),e(Uh,kle),e(kle,luo),e(Uh,iuo),e(Uh,bN),e(bN,duo),e(Uh,cuo),e(Y,fuo),e(Y,Jh),e(Jh,Sle),e(Sle,muo),e(Jh,guo),e(Jh,vN),e(vN,huo),e(Jh,puo),e(Y,uuo),e(Y,Yh),e(Yh,Rle),e(Rle,_uo),e(Yh,buo),e(Yh,FN),e(FN,vuo),e(Yh,Fuo),e(Y,Tuo),e(Y,Kh),e(Kh,Ple),e(Ple,Muo),e(Kh,Euo),e(Kh,TN),e(TN,Cuo),e(Kh,wuo),e(Y,Auo),e(Y,Zh),e(Zh,Ble),e(Ble,Luo),e(Zh,yuo),e(Zh,MN),e(MN,xuo),e(Zh,$uo),e(Y,kuo),e(Y,ep),e(ep,Ile),e(Ile,Suo),e(ep,Ruo),e(ep,EN),e(EN,Puo),e(ep,Buo),e(Y,Iuo),e(Y,op),e(op,Nle),e(Nle,Nuo),e(op,quo),e(op,CN),e(CN,juo),e(op,Duo),e(He,Guo),M(rp,He,null),e(He,Ouo),M(tp,He,null),e(Lo,Vuo),e(Lo,ap),M(jL,ap,null),e(ap,Xuo),e(ap,qle),e(qle,zuo),b(f,gGe,_),b(f,Si,_),e(Si,np),e(np,jle),M(DL,jle,null),e(Si,Wuo),e(Si,Dle),e(Dle,Quo),b(f,hGe,_),b(f,yo,_),M(GL,yo,null),e(yo,Huo),e(yo,OL),e(OL,Uuo),e(OL,wN),e(wN,Juo),e(OL,Yuo),e(yo,Kuo),e(yo,VL),e(VL,Zuo),e(VL,Gle),e(Gle,e_o),e(VL,o_o),e(yo,r_o),e(yo,Ue),M(XL,Ue,null),e(Ue,t_o),e(Ue,Ole),e(Ole,a_o),e(Ue,n_o),e(Ue,Ri),e(Ri,s_o),e(Ri,Vle),e(Vle,l_o),e(Ri,i_o),e(Ri,Xle),e(Xle,d_o),e(Ri,c_o),e(Ue,f_o),e(Ue,he),e(he,sp),e(sp,zle),e(zle,m_o),e(sp,g_o),e(sp,AN),e(AN,h_o),e(sp,p_o),e(he,u_o),e(he,lp),e(lp,Wle),e(Wle,__o),e(lp,b_o),e(lp,Qle),e(Qle,v_o),e(lp,F_o),e(he,T_o),e(he,ip),e(ip,Hle),e(Hle,M_o),e(ip,E_o),e(ip,LN),e(LN,C_o),e(ip,w_o),e(he,A_o),e(he,dp),e(dp,Ule),e(Ule,L_o),e(dp,y_o),e(dp,yN),e(yN,x_o),e(dp,$_o),e(he,k_o),e(he,cp),e(cp,Jle),e(Jle,S_o),e(cp,R_o),e(cp,xN),e(xN,P_o),e(cp,B_o),e(he,I_o),e(he,fp),e(fp,Yle),e(Yle,N_o),e(fp,q_o),e(fp,$N),e($N,j_o),e(fp,D_o),e(he,G_o),e(he,mp),e(mp,Kle),e(Kle,O_o),e(mp,V_o),e(mp,kN),e(kN,X_o),e(mp,z_o),e(he,W_o),e(he,gp),e(gp,Zle),e(Zle,Q_o),e(gp,H_o),e(gp,SN),e(SN,U_o),e(gp,J_o),e(he,Y_o),e(he,hp),e(hp,eie),e(eie,K_o),e(hp,Z_o),e(hp,RN),e(RN,e7o),e(hp,o7o),e(he,r7o),e(he,pp),e(pp,oie),e(oie,t7o),e(pp,a7o),e(pp,PN),e(PN,n7o),e(pp,s7o),e(he,l7o),e(he,up),e(up,rie),e(rie,i7o),e(up,d7o),e(up,BN),e(BN,c7o),e(up,f7o),e(he,m7o),e(he,_p),e(_p,tie),e(tie,g7o),e(_p,h7o),e(_p,IN),e(IN,p7o),e(_p,u7o),e(he,_7o),e(he,bp),e(bp,aie),e(aie,b7o),e(bp,v7o),e(bp,NN),e(NN,F7o),e(bp,T7o),e(he,M7o),e(he,vp),e(vp,nie),e(nie,E7o),e(vp,C7o),e(vp,qN),e(qN,w7o),e(vp,A7o),e(he,L7o),e(he,Fp),e(Fp,sie),e(sie,y7o),e(Fp,x7o),e(Fp,jN),e(jN,$7o),e(Fp,k7o),e(he,S7o),e(he,Tp),e(Tp,lie),e(lie,R7o),e(Tp,P7o),e(Tp,DN),e(DN,B7o),e(Tp,I7o),e(he,N7o),e(he,Mp),e(Mp,iie),e(iie,q7o),e(Mp,j7o),e(Mp,GN),e(GN,D7o),e(Mp,G7o),e(Ue,O7o),M(Ep,Ue,null),e(Ue,V7o),M(Cp,Ue,null),e(yo,X7o),e(yo,wp),M(zL,wp,null),e(wp,z7o),e(wp,die),e(die,W7o),b(f,pGe,_),b(f,Pi,_),e(Pi,Ap),e(Ap,cie),M(WL,cie,null),e(Pi,Q7o),e(Pi,fie),e(fie,H7o),b(f,uGe,_),b(f,xo,_),M(QL,xo,null),e(xo,U7o),e(xo,Bi),e(Bi,J7o),e(Bi,ON),e(ON,Y7o),e(Bi,K7o),e(Bi,VN),e(VN,Z7o),e(Bi,e1o),e(xo,o1o),e(xo,HL),e(HL,r1o),e(HL,mie),e(mie,t1o),e(HL,a1o),e(xo,n1o),e(xo,nt),M(UL,nt,null),e(nt,s1o),e(nt,gie),e(gie,l1o),e(nt,i1o),e(nt,Ii),e(Ii,d1o),e(Ii,hie),e(hie,c1o),e(Ii,f1o),e(Ii,XN),e(XN,m1o),e(Ii,g1o),e(nt,h1o),M(Lp,nt,null),e(xo,p1o),e(xo,Je),M(JL,Je,null),e(Je,u1o),e(Je,pie),e(pie,_1o),e(Je,b1o),e(Je,Sa),e(Sa,v1o),e(Sa,uie),e(uie,F1o),e(Sa,T1o),e(Sa,_ie),e(_ie,M1o),e(Sa,E1o),e(Sa,bie),e(bie,C1o),e(Sa,w1o),e(Je,A1o),e(Je,x),e(x,yp),e(yp,vie),e(vie,L1o),e(yp,y1o),e(yp,zN),e(zN,x1o),e(yp,$1o),e(x,k1o),e(x,xp),e(xp,Fie),e(Fie,S1o),e(xp,R1o),e(xp,WN),e(WN,P1o),e(xp,B1o),e(x,I1o),e(x,$p),e($p,Tie),e(Tie,N1o),e($p,q1o),e($p,QN),e(QN,j1o),e($p,D1o),e(x,G1o),e(x,kp),e(kp,Mie),e(Mie,O1o),e(kp,V1o),e(kp,HN),e(HN,X1o),e(kp,z1o),e(x,W1o),e(x,Sp),e(Sp,Eie),e(Eie,Q1o),e(Sp,H1o),e(Sp,UN),e(UN,U1o),e(Sp,J1o),e(x,Y1o),e(x,Rp),e(Rp,Cie),e(Cie,K1o),e(Rp,Z1o),e(Rp,JN),e(JN,e2o),e(Rp,o2o),e(x,r2o),e(x,Pp),e(Pp,wie),e(wie,t2o),e(Pp,a2o),e(Pp,YN),e(YN,n2o),e(Pp,s2o),e(x,l2o),e(x,Bp),e(Bp,Aie),e(Aie,i2o),e(Bp,d2o),e(Bp,KN),e(KN,c2o),e(Bp,f2o),e(x,m2o),e(x,Ip),e(Ip,Lie),e(Lie,g2o),e(Ip,h2o),e(Ip,ZN),e(ZN,p2o),e(Ip,u2o),e(x,_2o),e(x,Np),e(Np,yie),e(yie,b2o),e(Np,v2o),e(Np,eq),e(eq,F2o),e(Np,T2o),e(x,M2o),e(x,qp),e(qp,xie),e(xie,E2o),e(qp,C2o),e(qp,oq),e(oq,w2o),e(qp,A2o),e(x,L2o),e(x,jp),e(jp,$ie),e($ie,y2o),e(jp,x2o),e(jp,rq),e(rq,$2o),e(jp,k2o),e(x,S2o),e(x,Dp),e(Dp,kie),e(kie,R2o),e(Dp,P2o),e(Dp,tq),e(tq,B2o),e(Dp,I2o),e(x,N2o),e(x,Gp),e(Gp,Sie),e(Sie,q2o),e(Gp,j2o),e(Gp,aq),e(aq,D2o),e(Gp,G2o),e(x,O2o),e(x,Op),e(Op,Rie),e(Rie,V2o),e(Op,X2o),e(Op,nq),e(nq,z2o),e(Op,W2o),e(x,Q2o),e(x,Vp),e(Vp,Pie),e(Pie,H2o),e(Vp,U2o),e(Vp,sq),e(sq,J2o),e(Vp,Y2o),e(x,K2o),e(x,Xp),e(Xp,Bie),e(Bie,Z2o),e(Xp,ebo),e(Xp,lq),e(lq,obo),e(Xp,rbo),e(x,tbo),e(x,zp),e(zp,Iie),e(Iie,abo),e(zp,nbo),e(zp,iq),e(iq,sbo),e(zp,lbo),e(x,ibo),e(x,Wp),e(Wp,Nie),e(Nie,dbo),e(Wp,cbo),e(Wp,dq),e(dq,fbo),e(Wp,mbo),e(x,gbo),e(x,Qp),e(Qp,qie),e(qie,hbo),e(Qp,pbo),e(Qp,cq),e(cq,ubo),e(Qp,_bo),e(x,bbo),e(x,Hp),e(Hp,jie),e(jie,vbo),e(Hp,Fbo),e(Hp,fq),e(fq,Tbo),e(Hp,Mbo),e(x,Ebo),e(x,Up),e(Up,Die),e(Die,Cbo),e(Up,wbo),e(Up,mq),e(mq,Abo),e(Up,Lbo),e(x,ybo),e(x,Jp),e(Jp,Gie),e(Gie,xbo),e(Jp,$bo),e(Jp,gq),e(gq,kbo),e(Jp,Sbo),e(x,Rbo),e(x,Yp),e(Yp,Oie),e(Oie,Pbo),e(Yp,Bbo),e(Yp,hq),e(hq,Ibo),e(Yp,Nbo),e(x,qbo),e(x,Kp),e(Kp,Vie),e(Vie,jbo),e(Kp,Dbo),e(Kp,pq),e(pq,Gbo),e(Kp,Obo),e(x,Vbo),e(x,Zp),e(Zp,Xie),e(Xie,Xbo),e(Zp,zbo),e(Zp,uq),e(uq,Wbo),e(Zp,Qbo),e(x,Hbo),e(x,eu),e(eu,zie),e(zie,Ubo),e(eu,Jbo),e(eu,_q),e(_q,Ybo),e(eu,Kbo),e(x,Zbo),e(x,ou),e(ou,Wie),e(Wie,evo),e(ou,ovo),e(ou,bq),e(bq,rvo),e(ou,tvo),e(x,avo),e(x,ru),e(ru,Qie),e(Qie,nvo),e(ru,svo),e(ru,vq),e(vq,lvo),e(ru,ivo),e(x,dvo),e(x,tu),e(tu,Hie),e(Hie,cvo),e(tu,fvo),e(tu,Fq),e(Fq,mvo),e(tu,gvo),e(x,hvo),e(x,au),e(au,Uie),e(Uie,pvo),e(au,uvo),e(au,Tq),e(Tq,_vo),e(au,bvo),e(x,vvo),e(x,nu),e(nu,Jie),e(Jie,Fvo),e(nu,Tvo),e(nu,Mq),e(Mq,Mvo),e(nu,Evo),e(x,Cvo),e(x,su),e(su,Yie),e(Yie,wvo),e(su,Avo),e(su,Eq),e(Eq,Lvo),e(su,yvo),e(x,xvo),e(x,Gs),e(Gs,Kie),e(Kie,$vo),e(Gs,kvo),e(Gs,Cq),e(Cq,Svo),e(Gs,Rvo),e(Gs,wq),e(wq,Pvo),e(Gs,Bvo),e(x,Ivo),e(x,lu),e(lu,Zie),e(Zie,Nvo),e(lu,qvo),e(lu,Aq),e(Aq,jvo),e(lu,Dvo),e(x,Gvo),e(x,iu),e(iu,ede),e(ede,Ovo),e(iu,Vvo),e(iu,Lq),e(Lq,Xvo),e(iu,zvo),e(x,Wvo),e(x,du),e(du,ode),e(ode,Qvo),e(du,Hvo),e(du,yq),e(yq,Uvo),e(du,Jvo),e(x,Yvo),e(x,cu),e(cu,rde),e(rde,Kvo),e(cu,Zvo),e(cu,xq),e(xq,e0o),e(cu,o0o),e(x,r0o),e(x,fu),e(fu,tde),e(tde,t0o),e(fu,a0o),e(fu,$q),e($q,n0o),e(fu,s0o),e(x,l0o),e(x,mu),e(mu,ade),e(ade,i0o),e(mu,d0o),e(mu,kq),e(kq,c0o),e(mu,f0o),e(x,m0o),e(x,gu),e(gu,nde),e(nde,g0o),e(gu,h0o),e(gu,Sq),e(Sq,p0o),e(gu,u0o),e(x,_0o),e(x,hu),e(hu,sde),e(sde,b0o),e(hu,v0o),e(hu,Rq),e(Rq,F0o),e(hu,T0o),e(x,M0o),e(x,pu),e(pu,lde),e(lde,E0o),e(pu,C0o),e(pu,Pq),e(Pq,w0o),e(pu,A0o),e(x,L0o),e(x,uu),e(uu,ide),e(ide,y0o),e(uu,x0o),e(uu,Bq),e(Bq,$0o),e(uu,k0o),e(x,S0o),e(x,_u),e(_u,dde),e(dde,R0o),e(_u,P0o),e(_u,Iq),e(Iq,B0o),e(_u,I0o),e(x,N0o),e(x,bu),e(bu,cde),e(cde,q0o),e(bu,j0o),e(bu,Nq),e(Nq,D0o),e(bu,G0o),e(x,O0o),e(x,vu),e(vu,fde),e(fde,V0o),e(vu,X0o),e(vu,qq),e(qq,z0o),e(vu,W0o),e(x,Q0o),e(x,Fu),e(Fu,mde),e(mde,H0o),e(Fu,U0o),e(Fu,jq),e(jq,J0o),e(Fu,Y0o),e(x,K0o),e(x,Tu),e(Tu,gde),e(gde,Z0o),e(Tu,eFo),e(Tu,Dq),e(Dq,oFo),e(Tu,rFo),e(x,tFo),e(x,Mu),e(Mu,hde),e(hde,aFo),e(Mu,nFo),e(Mu,Gq),e(Gq,sFo),e(Mu,lFo),e(x,iFo),e(x,Eu),e(Eu,pde),e(pde,dFo),e(Eu,cFo),e(Eu,Oq),e(Oq,fFo),e(Eu,mFo),e(x,gFo),e(x,Cu),e(Cu,ude),e(ude,hFo),e(Cu,pFo),e(Cu,Vq),e(Vq,uFo),e(Cu,_Fo),e(x,bFo),e(x,wu),e(wu,_de),e(_de,vFo),e(wu,FFo),e(wu,Xq),e(Xq,TFo),e(wu,MFo),e(x,EFo),e(x,Au),e(Au,bde),e(bde,CFo),e(Au,wFo),e(Au,zq),e(zq,AFo),e(Au,LFo),e(x,yFo),e(x,Lu),e(Lu,vde),e(vde,xFo),e(Lu,$Fo),e(Lu,Wq),e(Wq,kFo),e(Lu,SFo),e(x,RFo),e(x,yu),e(yu,Fde),e(Fde,PFo),e(yu,BFo),e(yu,Qq),e(Qq,IFo),e(yu,NFo),e(x,qFo),e(x,xu),e(xu,Tde),e(Tde,jFo),e(xu,DFo),e(xu,Hq),e(Hq,GFo),e(xu,OFo),e(x,VFo),e(x,$u),e($u,Mde),e(Mde,XFo),e($u,zFo),e($u,Uq),e(Uq,WFo),e($u,QFo),e(x,HFo),e(x,ku),e(ku,Ede),e(Ede,UFo),e(ku,JFo),e(ku,Jq),e(Jq,YFo),e(ku,KFo),e(x,ZFo),e(x,Su),e(Su,Cde),e(Cde,eTo),e(Su,oTo),e(Su,Yq),e(Yq,rTo),e(Su,tTo),e(x,aTo),e(x,Ru),e(Ru,wde),e(wde,nTo),e(Ru,sTo),e(Ru,Kq),e(Kq,lTo),e(Ru,iTo),e(x,dTo),e(x,Pu),e(Pu,Ade),e(Ade,cTo),e(Pu,fTo),e(Pu,Zq),e(Zq,mTo),e(Pu,gTo),e(x,hTo),e(x,Bu),e(Bu,Lde),e(Lde,pTo),e(Bu,uTo),e(Bu,ej),e(ej,_To),e(Bu,bTo),e(x,vTo),e(x,Iu),e(Iu,yde),e(yde,FTo),e(Iu,TTo),e(Iu,oj),e(oj,MTo),e(Iu,ETo),e(x,CTo),e(x,Nu),e(Nu,xde),e(xde,wTo),e(Nu,ATo),e(Nu,rj),e(rj,LTo),e(Nu,yTo),e(x,xTo),e(x,qu),e(qu,$de),e($de,$To),e(qu,kTo),e(qu,tj),e(tj,STo),e(qu,RTo),e(x,PTo),e(x,ju),e(ju,kde),e(kde,BTo),e(ju,ITo),e(ju,aj),e(aj,NTo),e(ju,qTo),e(x,jTo),e(x,Du),e(Du,Sde),e(Sde,DTo),e(Du,GTo),e(Du,nj),e(nj,OTo),e(Du,VTo),e(x,XTo),e(x,Gu),e(Gu,Rde),e(Rde,zTo),e(Gu,WTo),e(Gu,sj),e(sj,QTo),e(Gu,HTo),e(x,UTo),e(x,Ou),e(Ou,Pde),e(Pde,JTo),e(Ou,YTo),e(Ou,lj),e(lj,KTo),e(Ou,ZTo),e(x,eMo),e(x,Vu),e(Vu,Bde),e(Bde,oMo),e(Vu,rMo),e(Vu,ij),e(ij,tMo),e(Vu,aMo),e(x,nMo),e(x,Xu),e(Xu,Ide),e(Ide,sMo),e(Xu,lMo),e(Xu,dj),e(dj,iMo),e(Xu,dMo),e(x,cMo),e(x,zu),e(zu,Nde),e(Nde,fMo),e(zu,mMo),e(zu,cj),e(cj,gMo),e(zu,hMo),e(x,pMo),e(x,Wu),e(Wu,qde),e(qde,uMo),e(Wu,_Mo),e(Wu,fj),e(fj,bMo),e(Wu,vMo),e(x,FMo),e(x,Qu),e(Qu,jde),e(jde,TMo),e(Qu,MMo),e(Qu,mj),e(mj,EMo),e(Qu,CMo),e(x,wMo),e(x,Hu),e(Hu,Dde),e(Dde,AMo),e(Hu,LMo),e(Hu,gj),e(gj,yMo),e(Hu,xMo),e(x,$Mo),e(x,Uu),e(Uu,Gde),e(Gde,kMo),e(Uu,SMo),e(Uu,hj),e(hj,RMo),e(Uu,PMo),e(x,BMo),e(x,Ju),e(Ju,Ode),e(Ode,IMo),e(Ju,NMo),e(Ju,pj),e(pj,qMo),e(Ju,jMo),e(x,DMo),e(x,Yu),e(Yu,Vde),e(Vde,GMo),e(Yu,OMo),e(Yu,uj),e(uj,VMo),e(Yu,XMo),e(x,zMo),e(x,Ku),e(Ku,Xde),e(Xde,WMo),e(Ku,QMo),e(Ku,_j),e(_j,HMo),e(Ku,UMo),e(x,JMo),e(x,Zu),e(Zu,zde),e(zde,YMo),e(Zu,KMo),e(Zu,bj),e(bj,ZMo),e(Zu,e4o),e(x,o4o),e(x,e_),e(e_,Wde),e(Wde,r4o),e(e_,t4o),e(e_,vj),e(vj,a4o),e(e_,n4o),e(x,s4o),e(x,o_),e(o_,Qde),e(Qde,l4o),e(o_,i4o),e(o_,Fj),e(Fj,d4o),e(o_,c4o),e(x,f4o),e(x,r_),e(r_,Hde),e(Hde,m4o),e(r_,g4o),e(r_,Tj),e(Tj,h4o),e(r_,p4o),e(x,u4o),e(x,t_),e(t_,Ude),e(Ude,_4o),e(t_,b4o),e(t_,Mj),e(Mj,v4o),e(t_,F4o),e(x,T4o),e(x,a_),e(a_,Jde),e(Jde,M4o),e(a_,E4o),e(a_,Ej),e(Ej,C4o),e(a_,w4o),e(x,A4o),e(x,n_),e(n_,Yde),e(Yde,L4o),e(n_,y4o),e(n_,Cj),e(Cj,x4o),e(n_,$4o),e(x,k4o),e(x,s_),e(s_,Kde),e(Kde,S4o),e(s_,R4o),e(s_,wj),e(wj,P4o),e(s_,B4o),e(x,I4o),e(x,l_),e(l_,Zde),e(Zde,N4o),e(l_,q4o),e(l_,Aj),e(Aj,j4o),e(l_,D4o),e(x,G4o),e(x,i_),e(i_,ece),e(ece,O4o),e(i_,V4o),e(i_,Lj),e(Lj,X4o),e(i_,z4o),e(x,W4o),e(x,d_),e(d_,oce),e(oce,Q4o),e(d_,H4o),e(d_,yj),e(yj,U4o),e(d_,J4o),e(x,Y4o),e(x,c_),e(c_,rce),e(rce,K4o),e(c_,Z4o),e(c_,xj),e(xj,eEo),e(c_,oEo),e(x,rEo),e(x,f_),e(f_,tce),e(tce,tEo),e(f_,aEo),e(f_,$j),e($j,nEo),e(f_,sEo),e(x,lEo),e(x,m_),e(m_,ace),e(ace,iEo),e(m_,dEo),e(m_,kj),e(kj,cEo),e(m_,fEo),e(x,mEo),e(x,g_),e(g_,nce),e(nce,gEo),e(g_,hEo),e(g_,Sj),e(Sj,pEo),e(g_,uEo),e(x,_Eo),e(x,h_),e(h_,sce),e(sce,bEo),e(h_,vEo),e(h_,Rj),e(Rj,FEo),e(h_,TEo),e(x,MEo),e(x,p_),e(p_,lce),e(lce,EEo),e(p_,CEo),e(p_,Pj),e(Pj,wEo),e(p_,AEo),e(x,LEo),e(x,u_),e(u_,ice),e(ice,yEo),e(u_,xEo),e(u_,Bj),e(Bj,$Eo),e(u_,kEo),e(x,SEo),e(x,__),e(__,dce),e(dce,REo),e(__,PEo),e(__,Ij),e(Ij,BEo),e(__,IEo),e(x,NEo),e(x,b_),e(b_,cce),e(cce,qEo),e(b_,jEo),e(b_,Nj),e(Nj,DEo),e(b_,GEo),e(x,OEo),e(x,v_),e(v_,fce),e(fce,VEo),e(v_,XEo),e(v_,qj),e(qj,zEo),e(v_,WEo),e(x,QEo),e(x,F_),e(F_,mce),e(mce,HEo),e(F_,UEo),e(F_,jj),e(jj,JEo),e(F_,YEo),e(x,KEo),e(x,T_),e(T_,gce),e(gce,ZEo),e(T_,eCo),e(T_,Dj),e(Dj,oCo),e(T_,rCo),e(x,tCo),e(x,M_),e(M_,hce),e(hce,aCo),e(M_,nCo),e(M_,Gj),e(Gj,sCo),e(M_,lCo),e(x,iCo),e(x,E_),e(E_,pce),e(pce,dCo),e(E_,cCo),e(E_,Oj),e(Oj,fCo),e(E_,mCo),e(x,gCo),e(x,C_),e(C_,uce),e(uce,hCo),e(C_,pCo),e(C_,Vj),e(Vj,uCo),e(C_,_Co),e(Je,bCo),e(Je,w_),e(w_,vCo),e(w_,_ce),e(_ce,FCo),e(w_,TCo),e(w_,bce),e(bce,MCo),e(Je,ECo),M(A_,Je,null),b(f,_Ge,_),b(f,Ni,_),e(Ni,L_),e(L_,vce),M(YL,vce,null),e(Ni,CCo),e(Ni,Fce),e(Fce,wCo),b(f,bGe,_),b(f,$o,_),M(KL,$o,null),e($o,ACo),e($o,qi),e(qi,LCo),e(qi,Xj),e(Xj,yCo),e(qi,xCo),e(qi,zj),e(zj,$Co),e(qi,kCo),e($o,SCo),e($o,ZL),e(ZL,RCo),e(ZL,Tce),e(Tce,PCo),e(ZL,BCo),e($o,ICo),e($o,st),M(ey,st,null),e(st,NCo),e(st,Mce),e(Mce,qCo),e(st,jCo),e(st,ji),e(ji,DCo),e(ji,Ece),e(Ece,GCo),e(ji,OCo),e(ji,Wj),e(Wj,VCo),e(ji,XCo),e(st,zCo),M(y_,st,null),e($o,WCo),e($o,Ye),M(oy,Ye,null),e(Ye,QCo),e(Ye,Cce),e(Cce,HCo),e(Ye,UCo),e(Ye,Ra),e(Ra,JCo),e(Ra,wce),e(wce,YCo),e(Ra,KCo),e(Ra,Ace),e(Ace,ZCo),e(Ra,e5o),e(Ra,Lce),e(Lce,o5o),e(Ra,r5o),e(Ye,t5o),e(Ye,G),e(G,x_),e(x_,yce),e(yce,a5o),e(x_,n5o),e(x_,Qj),e(Qj,s5o),e(x_,l5o),e(G,i5o),e(G,$_),e($_,xce),e(xce,d5o),e($_,c5o),e($_,Hj),e(Hj,f5o),e($_,m5o),e(G,g5o),e(G,k_),e(k_,$ce),e($ce,h5o),e(k_,p5o),e(k_,Uj),e(Uj,u5o),e(k_,_5o),e(G,b5o),e(G,S_),e(S_,kce),e(kce,v5o),e(S_,F5o),e(S_,Jj),e(Jj,T5o),e(S_,M5o),e(G,E5o),e(G,R_),e(R_,Sce),e(Sce,C5o),e(R_,w5o),e(R_,Yj),e(Yj,A5o),e(R_,L5o),e(G,y5o),e(G,P_),e(P_,Rce),e(Rce,x5o),e(P_,$5o),e(P_,Kj),e(Kj,k5o),e(P_,S5o),e(G,R5o),e(G,B_),e(B_,Pce),e(Pce,P5o),e(B_,B5o),e(B_,Zj),e(Zj,I5o),e(B_,N5o),e(G,q5o),e(G,I_),e(I_,Bce),e(Bce,j5o),e(I_,D5o),e(I_,eD),e(eD,G5o),e(I_,O5o),e(G,V5o),e(G,N_),e(N_,Ice),e(Ice,X5o),e(N_,z5o),e(N_,oD),e(oD,W5o),e(N_,Q5o),e(G,H5o),e(G,q_),e(q_,Nce),e(Nce,U5o),e(q_,J5o),e(q_,rD),e(rD,Y5o),e(q_,K5o),e(G,Z5o),e(G,j_),e(j_,qce),e(qce,e3o),e(j_,o3o),e(j_,tD),e(tD,r3o),e(j_,t3o),e(G,a3o),e(G,D_),e(D_,jce),e(jce,n3o),e(D_,s3o),e(D_,aD),e(aD,l3o),e(D_,i3o),e(G,d3o),e(G,G_),e(G_,Dce),e(Dce,c3o),e(G_,f3o),e(G_,nD),e(nD,m3o),e(G_,g3o),e(G,h3o),e(G,O_),e(O_,Gce),e(Gce,p3o),e(O_,u3o),e(O_,sD),e(sD,_3o),e(O_,b3o),e(G,v3o),e(G,V_),e(V_,Oce),e(Oce,F3o),e(V_,T3o),e(V_,lD),e(lD,M3o),e(V_,E3o),e(G,C3o),e(G,X_),e(X_,Vce),e(Vce,w3o),e(X_,A3o),e(X_,iD),e(iD,L3o),e(X_,y3o),e(G,x3o),e(G,z_),e(z_,Xce),e(Xce,$3o),e(z_,k3o),e(z_,dD),e(dD,S3o),e(z_,R3o),e(G,P3o),e(G,W_),e(W_,zce),e(zce,B3o),e(W_,I3o),e(W_,cD),e(cD,N3o),e(W_,q3o),e(G,j3o),e(G,Q_),e(Q_,Wce),e(Wce,D3o),e(Q_,G3o),e(Q_,fD),e(fD,O3o),e(Q_,V3o),e(G,X3o),e(G,H_),e(H_,Qce),e(Qce,z3o),e(H_,W3o),e(H_,mD),e(mD,Q3o),e(H_,H3o),e(G,U3o),e(G,U_),e(U_,Hce),e(Hce,J3o),e(U_,Y3o),e(U_,gD),e(gD,K3o),e(U_,Z3o),e(G,ewo),e(G,J_),e(J_,Uce),e(Uce,owo),e(J_,rwo),e(J_,hD),e(hD,two),e(J_,awo),e(G,nwo),e(G,Y_),e(Y_,Jce),e(Jce,swo),e(Y_,lwo),e(Y_,pD),e(pD,iwo),e(Y_,dwo),e(G,cwo),e(G,K_),e(K_,Yce),e(Yce,fwo),e(K_,mwo),e(K_,uD),e(uD,gwo),e(K_,hwo),e(G,pwo),e(G,Z_),e(Z_,Kce),e(Kce,uwo),e(Z_,_wo),e(Z_,_D),e(_D,bwo),e(Z_,vwo),e(G,Fwo),e(G,e7),e(e7,Zce),e(Zce,Two),e(e7,Mwo),e(e7,bD),e(bD,Ewo),e(e7,Cwo),e(G,wwo),e(G,o7),e(o7,efe),e(efe,Awo),e(o7,Lwo),e(o7,vD),e(vD,ywo),e(o7,xwo),e(G,$wo),e(G,r7),e(r7,ofe),e(ofe,kwo),e(r7,Swo),e(r7,FD),e(FD,Rwo),e(r7,Pwo),e(G,Bwo),e(G,t7),e(t7,rfe),e(rfe,Iwo),e(t7,Nwo),e(t7,TD),e(TD,qwo),e(t7,jwo),e(G,Dwo),e(G,a7),e(a7,tfe),e(tfe,Gwo),e(a7,Owo),e(a7,MD),e(MD,Vwo),e(a7,Xwo),e(G,zwo),e(G,n7),e(n7,afe),e(afe,Wwo),e(n7,Qwo),e(n7,ED),e(ED,Hwo),e(n7,Uwo),e(G,Jwo),e(G,s7),e(s7,nfe),e(nfe,Ywo),e(s7,Kwo),e(s7,CD),e(CD,Zwo),e(s7,eAo),e(G,oAo),e(G,l7),e(l7,sfe),e(sfe,rAo),e(l7,tAo),e(l7,wD),e(wD,aAo),e(l7,nAo),e(G,sAo),e(G,i7),e(i7,lfe),e(lfe,lAo),e(i7,iAo),e(i7,AD),e(AD,dAo),e(i7,cAo),e(G,fAo),e(G,d7),e(d7,ife),e(ife,mAo),e(d7,gAo),e(d7,LD),e(LD,hAo),e(d7,pAo),e(G,uAo),e(G,c7),e(c7,dfe),e(dfe,_Ao),e(c7,bAo),e(c7,yD),e(yD,vAo),e(c7,FAo),e(G,TAo),e(G,f7),e(f7,cfe),e(cfe,MAo),e(f7,EAo),e(f7,xD),e(xD,CAo),e(f7,wAo),e(G,AAo),e(G,m7),e(m7,ffe),e(ffe,LAo),e(m7,yAo),e(m7,$D),e($D,xAo),e(m7,$Ao),e(G,kAo),e(G,g7),e(g7,mfe),e(mfe,SAo),e(g7,RAo),e(g7,kD),e(kD,PAo),e(g7,BAo),e(G,IAo),e(G,h7),e(h7,gfe),e(gfe,NAo),e(h7,qAo),e(h7,SD),e(SD,jAo),e(h7,DAo),e(G,GAo),e(G,p7),e(p7,hfe),e(hfe,OAo),e(p7,VAo),e(p7,RD),e(RD,XAo),e(p7,zAo),e(G,WAo),e(G,u7),e(u7,pfe),e(pfe,QAo),e(u7,HAo),e(u7,PD),e(PD,UAo),e(u7,JAo),e(G,YAo),e(G,_7),e(_7,ufe),e(ufe,KAo),e(_7,ZAo),e(_7,BD),e(BD,e6o),e(_7,o6o),e(Ye,r6o),e(Ye,b7),e(b7,t6o),e(b7,_fe),e(_fe,a6o),e(b7,n6o),e(b7,bfe),e(bfe,s6o),e(Ye,l6o),M(v7,Ye,null),b(f,vGe,_),b(f,Di,_),e(Di,F7),e(F7,vfe),M(ry,vfe,null),e(Di,i6o),e(Di,Ffe),e(Ffe,d6o),b(f,FGe,_),b(f,ko,_),M(ty,ko,null),e(ko,c6o),e(ko,Gi),e(Gi,f6o),e(Gi,ID),e(ID,m6o),e(Gi,g6o),e(Gi,ND),e(ND,h6o),e(Gi,p6o),e(ko,u6o),e(ko,ay),e(ay,_6o),e(ay,Tfe),e(Tfe,b6o),e(ay,v6o),e(ko,F6o),e(ko,lt),M(ny,lt,null),e(lt,T6o),e(lt,Mfe),e(Mfe,M6o),e(lt,E6o),e(lt,Oi),e(Oi,C6o),e(Oi,Efe),e(Efe,w6o),e(Oi,A6o),e(Oi,qD),e(qD,L6o),e(Oi,y6o),e(lt,x6o),M(T7,lt,null),e(ko,$6o),e(ko,Ke),M(sy,Ke,null),e(Ke,k6o),e(Ke,Cfe),e(Cfe,S6o),e(Ke,R6o),e(Ke,Pa),e(Pa,P6o),e(Pa,wfe),e(wfe,B6o),e(Pa,I6o),e(Pa,Afe),e(Afe,N6o),e(Pa,q6o),e(Pa,Lfe),e(Lfe,j6o),e(Pa,D6o),e(Ke,G6o),e(Ke,z),e(z,M7),e(M7,yfe),e(yfe,O6o),e(M7,V6o),e(M7,jD),e(jD,X6o),e(M7,z6o),e(z,W6o),e(z,E7),e(E7,xfe),e(xfe,Q6o),e(E7,H6o),e(E7,DD),e(DD,U6o),e(E7,J6o),e(z,Y6o),e(z,C7),e(C7,$fe),e($fe,K6o),e(C7,Z6o),e(C7,GD),e(GD,eLo),e(C7,oLo),e(z,rLo),e(z,w7),e(w7,kfe),e(kfe,tLo),e(w7,aLo),e(w7,OD),e(OD,nLo),e(w7,sLo),e(z,lLo),e(z,A7),e(A7,Sfe),e(Sfe,iLo),e(A7,dLo),e(A7,VD),e(VD,cLo),e(A7,fLo),e(z,mLo),e(z,L7),e(L7,Rfe),e(Rfe,gLo),e(L7,hLo),e(L7,XD),e(XD,pLo),e(L7,uLo),e(z,_Lo),e(z,y7),e(y7,Pfe),e(Pfe,bLo),e(y7,vLo),e(y7,zD),e(zD,FLo),e(y7,TLo),e(z,MLo),e(z,x7),e(x7,Bfe),e(Bfe,ELo),e(x7,CLo),e(x7,WD),e(WD,wLo),e(x7,ALo),e(z,LLo),e(z,$7),e($7,Ife),e(Ife,yLo),e($7,xLo),e($7,QD),e(QD,$Lo),e($7,kLo),e(z,SLo),e(z,k7),e(k7,Nfe),e(Nfe,RLo),e(k7,PLo),e(k7,HD),e(HD,BLo),e(k7,ILo),e(z,NLo),e(z,S7),e(S7,qfe),e(qfe,qLo),e(S7,jLo),e(S7,UD),e(UD,DLo),e(S7,GLo),e(z,OLo),e(z,R7),e(R7,jfe),e(jfe,VLo),e(R7,XLo),e(R7,JD),e(JD,zLo),e(R7,WLo),e(z,QLo),e(z,P7),e(P7,Dfe),e(Dfe,HLo),e(P7,ULo),e(P7,YD),e(YD,JLo),e(P7,YLo),e(z,KLo),e(z,B7),e(B7,Gfe),e(Gfe,ZLo),e(B7,eyo),e(B7,KD),e(KD,oyo),e(B7,ryo),e(z,tyo),e(z,I7),e(I7,Ofe),e(Ofe,ayo),e(I7,nyo),e(I7,ZD),e(ZD,syo),e(I7,lyo),e(z,iyo),e(z,N7),e(N7,Vfe),e(Vfe,dyo),e(N7,cyo),e(N7,eG),e(eG,fyo),e(N7,myo),e(z,gyo),e(z,q7),e(q7,Xfe),e(Xfe,hyo),e(q7,pyo),e(q7,oG),e(oG,uyo),e(q7,_yo),e(z,byo),e(z,j7),e(j7,zfe),e(zfe,vyo),e(j7,Fyo),e(j7,rG),e(rG,Tyo),e(j7,Myo),e(z,Eyo),e(z,D7),e(D7,Wfe),e(Wfe,Cyo),e(D7,wyo),e(D7,tG),e(tG,Ayo),e(D7,Lyo),e(z,yyo),e(z,G7),e(G7,Qfe),e(Qfe,xyo),e(G7,$yo),e(G7,aG),e(aG,kyo),e(G7,Syo),e(z,Ryo),e(z,O7),e(O7,Hfe),e(Hfe,Pyo),e(O7,Byo),e(O7,nG),e(nG,Iyo),e(O7,Nyo),e(z,qyo),e(z,V7),e(V7,Ufe),e(Ufe,jyo),e(V7,Dyo),e(V7,sG),e(sG,Gyo),e(V7,Oyo),e(z,Vyo),e(z,X7),e(X7,Jfe),e(Jfe,Xyo),e(X7,zyo),e(X7,lG),e(lG,Wyo),e(X7,Qyo),e(z,Hyo),e(z,z7),e(z7,Yfe),e(Yfe,Uyo),e(z7,Jyo),e(z7,iG),e(iG,Yyo),e(z7,Kyo),e(z,Zyo),e(z,W7),e(W7,Kfe),e(Kfe,e8o),e(W7,o8o),e(W7,dG),e(dG,r8o),e(W7,t8o),e(z,a8o),e(z,Q7),e(Q7,Zfe),e(Zfe,n8o),e(Q7,s8o),e(Q7,cG),e(cG,l8o),e(Q7,i8o),e(z,d8o),e(z,H7),e(H7,eme),e(eme,c8o),e(H7,f8o),e(H7,fG),e(fG,m8o),e(H7,g8o),e(z,h8o),e(z,U7),e(U7,ome),e(ome,p8o),e(U7,u8o),e(U7,mG),e(mG,_8o),e(U7,b8o),e(z,v8o),e(z,J7),e(J7,rme),e(rme,F8o),e(J7,T8o),e(J7,gG),e(gG,M8o),e(J7,E8o),e(z,C8o),e(z,Y7),e(Y7,tme),e(tme,w8o),e(Y7,A8o),e(Y7,hG),e(hG,L8o),e(Y7,y8o),e(z,x8o),e(z,K7),e(K7,ame),e(ame,$8o),e(K7,k8o),e(K7,pG),e(pG,S8o),e(K7,R8o),e(z,P8o),e(z,Z7),e(Z7,nme),e(nme,B8o),e(Z7,I8o),e(Z7,uG),e(uG,N8o),e(Z7,q8o),e(z,j8o),e(z,e1),e(e1,sme),e(sme,D8o),e(e1,G8o),e(e1,_G),e(_G,O8o),e(e1,V8o),e(z,X8o),e(z,o1),e(o1,lme),e(lme,z8o),e(o1,W8o),e(o1,bG),e(bG,Q8o),e(o1,H8o),e(z,U8o),e(z,r1),e(r1,ime),e(ime,J8o),e(r1,Y8o),e(r1,vG),e(vG,K8o),e(r1,Z8o),e(z,e9o),e(z,t1),e(t1,dme),e(dme,o9o),e(t1,r9o),e(t1,FG),e(FG,t9o),e(t1,a9o),e(z,n9o),e(z,a1),e(a1,cme),e(cme,s9o),e(a1,l9o),e(a1,TG),e(TG,i9o),e(a1,d9o),e(z,c9o),e(z,n1),e(n1,fme),e(fme,f9o),e(n1,m9o),e(n1,MG),e(MG,g9o),e(n1,h9o),e(Ke,p9o),e(Ke,s1),e(s1,u9o),e(s1,mme),e(mme,_9o),e(s1,b9o),e(s1,gme),e(gme,v9o),e(Ke,F9o),M(l1,Ke,null),b(f,TGe,_),b(f,Vi,_),e(Vi,i1),e(i1,hme),M(ly,hme,null),e(Vi,T9o),e(Vi,pme),e(pme,M9o),b(f,MGe,_),b(f,So,_),M(iy,So,null),e(So,E9o),e(So,Xi),e(Xi,C9o),e(Xi,EG),e(EG,w9o),e(Xi,A9o),e(Xi,CG),e(CG,L9o),e(Xi,y9o),e(So,x9o),e(So,dy),e(dy,$9o),e(dy,ume),e(ume,k9o),e(dy,S9o),e(So,R9o),e(So,it),M(cy,it,null),e(it,P9o),e(it,_me),e(_me,B9o),e(it,I9o),e(it,zi),e(zi,N9o),e(zi,bme),e(bme,q9o),e(zi,j9o),e(zi,wG),e(wG,D9o),e(zi,G9o),e(it,O9o),M(d1,it,null),e(So,V9o),e(So,Ze),M(fy,Ze,null),e(Ze,X9o),e(Ze,vme),e(vme,z9o),e(Ze,W9o),e(Ze,Ba),e(Ba,Q9o),e(Ba,Fme),e(Fme,H9o),e(Ba,U9o),e(Ba,Tme),e(Tme,J9o),e(Ba,Y9o),e(Ba,Mme),e(Mme,K9o),e(Ba,Z9o),e(Ze,exo),e(Ze,Q),e(Q,c1),e(c1,Eme),e(Eme,oxo),e(c1,rxo),e(c1,AG),e(AG,txo),e(c1,axo),e(Q,nxo),e(Q,f1),e(f1,Cme),e(Cme,sxo),e(f1,lxo),e(f1,LG),e(LG,ixo),e(f1,dxo),e(Q,cxo),e(Q,m1),e(m1,wme),e(wme,fxo),e(m1,mxo),e(m1,yG),e(yG,gxo),e(m1,hxo),e(Q,pxo),e(Q,g1),e(g1,Ame),e(Ame,uxo),e(g1,_xo),e(g1,xG),e(xG,bxo),e(g1,vxo),e(Q,Fxo),e(Q,h1),e(h1,Lme),e(Lme,Txo),e(h1,Mxo),e(h1,$G),e($G,Exo),e(h1,Cxo),e(Q,wxo),e(Q,p1),e(p1,yme),e(yme,Axo),e(p1,Lxo),e(p1,kG),e(kG,yxo),e(p1,xxo),e(Q,$xo),e(Q,u1),e(u1,xme),e(xme,kxo),e(u1,Sxo),e(u1,SG),e(SG,Rxo),e(u1,Pxo),e(Q,Bxo),e(Q,_1),e(_1,$me),e($me,Ixo),e(_1,Nxo),e(_1,RG),e(RG,qxo),e(_1,jxo),e(Q,Dxo),e(Q,b1),e(b1,kme),e(kme,Gxo),e(b1,Oxo),e(b1,PG),e(PG,Vxo),e(b1,Xxo),e(Q,zxo),e(Q,v1),e(v1,Sme),e(Sme,Wxo),e(v1,Qxo),e(v1,BG),e(BG,Hxo),e(v1,Uxo),e(Q,Jxo),e(Q,F1),e(F1,Rme),e(Rme,Yxo),e(F1,Kxo),e(F1,IG),e(IG,Zxo),e(F1,e$o),e(Q,o$o),e(Q,T1),e(T1,Pme),e(Pme,r$o),e(T1,t$o),e(T1,NG),e(NG,a$o),e(T1,n$o),e(Q,s$o),e(Q,M1),e(M1,Bme),e(Bme,l$o),e(M1,i$o),e(M1,qG),e(qG,d$o),e(M1,c$o),e(Q,f$o),e(Q,E1),e(E1,Ime),e(Ime,m$o),e(E1,g$o),e(E1,jG),e(jG,h$o),e(E1,p$o),e(Q,u$o),e(Q,C1),e(C1,Nme),e(Nme,_$o),e(C1,b$o),e(C1,DG),e(DG,v$o),e(C1,F$o),e(Q,T$o),e(Q,w1),e(w1,qme),e(qme,M$o),e(w1,E$o),e(w1,GG),e(GG,C$o),e(w1,w$o),e(Q,A$o),e(Q,A1),e(A1,jme),e(jme,L$o),e(A1,y$o),e(A1,OG),e(OG,x$o),e(A1,$$o),e(Q,k$o),e(Q,L1),e(L1,Dme),e(Dme,S$o),e(L1,R$o),e(L1,VG),e(VG,P$o),e(L1,B$o),e(Q,I$o),e(Q,y1),e(y1,Gme),e(Gme,N$o),e(y1,q$o),e(y1,XG),e(XG,j$o),e(y1,D$o),e(Q,G$o),e(Q,x1),e(x1,Ome),e(Ome,O$o),e(x1,V$o),e(x1,zG),e(zG,X$o),e(x1,z$o),e(Q,W$o),e(Q,$1),e($1,Vme),e(Vme,Q$o),e($1,H$o),e($1,WG),e(WG,U$o),e($1,J$o),e(Q,Y$o),e(Q,k1),e(k1,Xme),e(Xme,K$o),e(k1,Z$o),e(k1,QG),e(QG,eko),e(k1,oko),e(Q,rko),e(Q,S1),e(S1,zme),e(zme,tko),e(S1,ako),e(S1,HG),e(HG,nko),e(S1,sko),e(Q,lko),e(Q,R1),e(R1,Wme),e(Wme,iko),e(R1,dko),e(R1,UG),e(UG,cko),e(R1,fko),e(Q,mko),e(Q,P1),e(P1,Qme),e(Qme,gko),e(P1,hko),e(P1,JG),e(JG,pko),e(P1,uko),e(Q,_ko),e(Q,B1),e(B1,Hme),e(Hme,bko),e(B1,vko),e(B1,YG),e(YG,Fko),e(B1,Tko),e(Q,Mko),e(Q,I1),e(I1,Ume),e(Ume,Eko),e(I1,Cko),e(I1,KG),e(KG,wko),e(I1,Ako),e(Q,Lko),e(Q,N1),e(N1,Jme),e(Jme,yko),e(N1,xko),e(N1,ZG),e(ZG,$ko),e(N1,kko),e(Q,Sko),e(Q,q1),e(q1,Yme),e(Yme,Rko),e(q1,Pko),e(q1,eO),e(eO,Bko),e(q1,Iko),e(Q,Nko),e(Q,j1),e(j1,Kme),e(Kme,qko),e(j1,jko),e(j1,oO),e(oO,Dko),e(j1,Gko),e(Q,Oko),e(Q,D1),e(D1,Zme),e(Zme,Vko),e(D1,Xko),e(D1,rO),e(rO,zko),e(D1,Wko),e(Q,Qko),e(Q,G1),e(G1,ege),e(ege,Hko),e(G1,Uko),e(G1,oge),e(oge,Jko),e(G1,Yko),e(Q,Kko),e(Q,O1),e(O1,rge),e(rge,Zko),e(O1,eSo),e(O1,tO),e(tO,oSo),e(O1,rSo),e(Q,tSo),e(Q,V1),e(V1,tge),e(tge,aSo),e(V1,nSo),e(V1,aO),e(aO,sSo),e(V1,lSo),e(Q,iSo),e(Q,X1),e(X1,age),e(age,dSo),e(X1,cSo),e(X1,nO),e(nO,fSo),e(X1,mSo),e(Q,gSo),e(Q,z1),e(z1,nge),e(nge,hSo),e(z1,pSo),e(z1,sO),e(sO,uSo),e(z1,_So),e(Ze,bSo),e(Ze,W1),e(W1,vSo),e(W1,sge),e(sge,FSo),e(W1,TSo),e(W1,lge),e(lge,MSo),e(Ze,ESo),M(Q1,Ze,null),b(f,EGe,_),b(f,Wi,_),e(Wi,H1),e(H1,ige),M(my,ige,null),e(Wi,CSo),e(Wi,dge),e(dge,wSo),b(f,CGe,_),b(f,Ro,_),M(gy,Ro,null),e(Ro,ASo),e(Ro,Qi),e(Qi,LSo),e(Qi,lO),e(lO,ySo),e(Qi,xSo),e(Qi,iO),e(iO,$So),e(Qi,kSo),e(Ro,SSo),e(Ro,hy),e(hy,RSo),e(hy,cge),e(cge,PSo),e(hy,BSo),e(Ro,ISo),e(Ro,dt),M(py,dt,null),e(dt,NSo),e(dt,fge),e(fge,qSo),e(dt,jSo),e(dt,Hi),e(Hi,DSo),e(Hi,mge),e(mge,GSo),e(Hi,OSo),e(Hi,dO),e(dO,VSo),e(Hi,XSo),e(dt,zSo),M(U1,dt,null),e(Ro,WSo),e(Ro,eo),M(uy,eo,null),e(eo,QSo),e(eo,gge),e(gge,HSo),e(eo,USo),e(eo,Ia),e(Ia,JSo),e(Ia,hge),e(hge,YSo),e(Ia,KSo),e(Ia,pge),e(pge,ZSo),e(Ia,eRo),e(Ia,uge),e(uge,oRo),e(Ia,rRo),e(eo,tRo),e(eo,pe),e(pe,J1),e(J1,_ge),e(_ge,aRo),e(J1,nRo),e(J1,cO),e(cO,sRo),e(J1,lRo),e(pe,iRo),e(pe,Y1),e(Y1,bge),e(bge,dRo),e(Y1,cRo),e(Y1,fO),e(fO,fRo),e(Y1,mRo),e(pe,gRo),e(pe,K1),e(K1,vge),e(vge,hRo),e(K1,pRo),e(K1,mO),e(mO,uRo),e(K1,_Ro),e(pe,bRo),e(pe,Z1),e(Z1,Fge),e(Fge,vRo),e(Z1,FRo),e(Z1,gO),e(gO,TRo),e(Z1,MRo),e(pe,ERo),e(pe,e2),e(e2,Tge),e(Tge,CRo),e(e2,wRo),e(e2,hO),e(hO,ARo),e(e2,LRo),e(pe,yRo),e(pe,o2),e(o2,Mge),e(Mge,xRo),e(o2,$Ro),e(o2,pO),e(pO,kRo),e(o2,SRo),e(pe,RRo),e(pe,r2),e(r2,Ege),e(Ege,PRo),e(r2,BRo),e(r2,uO),e(uO,IRo),e(r2,NRo),e(pe,qRo),e(pe,t2),e(t2,Cge),e(Cge,jRo),e(t2,DRo),e(t2,_O),e(_O,GRo),e(t2,ORo),e(pe,VRo),e(pe,a2),e(a2,wge),e(wge,XRo),e(a2,zRo),e(a2,bO),e(bO,WRo),e(a2,QRo),e(pe,HRo),e(pe,n2),e(n2,Age),e(Age,URo),e(n2,JRo),e(n2,vO),e(vO,YRo),e(n2,KRo),e(pe,ZRo),e(pe,s2),e(s2,Lge),e(Lge,ePo),e(s2,oPo),e(s2,FO),e(FO,rPo),e(s2,tPo),e(pe,aPo),e(pe,l2),e(l2,yge),e(yge,nPo),e(l2,sPo),e(l2,TO),e(TO,lPo),e(l2,iPo),e(pe,dPo),e(pe,i2),e(i2,xge),e(xge,cPo),e(i2,fPo),e(i2,MO),e(MO,mPo),e(i2,gPo),e(pe,hPo),e(pe,d2),e(d2,$ge),e($ge,pPo),e(d2,uPo),e(d2,EO),e(EO,_Po),e(d2,bPo),e(pe,vPo),e(pe,c2),e(c2,kge),e(kge,FPo),e(c2,TPo),e(c2,CO),e(CO,MPo),e(c2,EPo),e(pe,CPo),e(pe,f2),e(f2,Sge),e(Sge,wPo),e(f2,APo),e(f2,wO),e(wO,LPo),e(f2,yPo),e(pe,xPo),e(pe,m2),e(m2,Rge),e(Rge,$Po),e(m2,kPo),e(m2,AO),e(AO,SPo),e(m2,RPo),e(eo,PPo),e(eo,g2),e(g2,BPo),e(g2,Pge),e(Pge,IPo),e(g2,NPo),e(g2,Bge),e(Bge,qPo),e(eo,jPo),M(h2,eo,null),b(f,wGe,_),b(f,Ui,_),e(Ui,p2),e(p2,Ige),M(_y,Ige,null),e(Ui,DPo),e(Ui,Nge),e(Nge,GPo),b(f,AGe,_),b(f,Po,_),M(by,Po,null),e(Po,OPo),e(Po,Ji),e(Ji,VPo),e(Ji,LO),e(LO,XPo),e(Ji,zPo),e(Ji,yO),e(yO,WPo),e(Ji,QPo),e(Po,HPo),e(Po,vy),e(vy,UPo),e(vy,qge),e(qge,JPo),e(vy,YPo),e(Po,KPo),e(Po,ct),M(Fy,ct,null),e(ct,ZPo),e(ct,jge),e(jge,eBo),e(ct,oBo),e(ct,Yi),e(Yi,rBo),e(Yi,Dge),e(Dge,tBo),e(Yi,aBo),e(Yi,xO),e(xO,nBo),e(Yi,sBo),e(ct,lBo),M(u2,ct,null),e(Po,iBo),e(Po,oo),M(Ty,oo,null),e(oo,dBo),e(oo,Gge),e(Gge,cBo),e(oo,fBo),e(oo,Na),e(Na,mBo),e(Na,Oge),e(Oge,gBo),e(Na,hBo),e(Na,Vge),e(Vge,pBo),e(Na,uBo),e(Na,Xge),e(Xge,_Bo),e(Na,bBo),e(oo,vBo),e(oo,N),e(N,_2),e(_2,zge),e(zge,FBo),e(_2,TBo),e(_2,$O),e($O,MBo),e(_2,EBo),e(N,CBo),e(N,b2),e(b2,Wge),e(Wge,wBo),e(b2,ABo),e(b2,kO),e(kO,LBo),e(b2,yBo),e(N,xBo),e(N,v2),e(v2,Qge),e(Qge,$Bo),e(v2,kBo),e(v2,SO),e(SO,SBo),e(v2,RBo),e(N,PBo),e(N,F2),e(F2,Hge),e(Hge,BBo),e(F2,IBo),e(F2,RO),e(RO,NBo),e(F2,qBo),e(N,jBo),e(N,T2),e(T2,Uge),e(Uge,DBo),e(T2,GBo),e(T2,PO),e(PO,OBo),e(T2,VBo),e(N,XBo),e(N,M2),e(M2,Jge),e(Jge,zBo),e(M2,WBo),e(M2,BO),e(BO,QBo),e(M2,HBo),e(N,UBo),e(N,E2),e(E2,Yge),e(Yge,JBo),e(E2,YBo),e(E2,IO),e(IO,KBo),e(E2,ZBo),e(N,eIo),e(N,C2),e(C2,Kge),e(Kge,oIo),e(C2,rIo),e(C2,NO),e(NO,tIo),e(C2,aIo),e(N,nIo),e(N,w2),e(w2,Zge),e(Zge,sIo),e(w2,lIo),e(w2,qO),e(qO,iIo),e(w2,dIo),e(N,cIo),e(N,A2),e(A2,ehe),e(ehe,fIo),e(A2,mIo),e(A2,jO),e(jO,gIo),e(A2,hIo),e(N,pIo),e(N,L2),e(L2,ohe),e(ohe,uIo),e(L2,_Io),e(L2,DO),e(DO,bIo),e(L2,vIo),e(N,FIo),e(N,y2),e(y2,rhe),e(rhe,TIo),e(y2,MIo),e(y2,GO),e(GO,EIo),e(y2,CIo),e(N,wIo),e(N,x2),e(x2,the),e(the,AIo),e(x2,LIo),e(x2,OO),e(OO,yIo),e(x2,xIo),e(N,$Io),e(N,$2),e($2,ahe),e(ahe,kIo),e($2,SIo),e($2,VO),e(VO,RIo),e($2,PIo),e(N,BIo),e(N,k2),e(k2,nhe),e(nhe,IIo),e(k2,NIo),e(k2,XO),e(XO,qIo),e(k2,jIo),e(N,DIo),e(N,S2),e(S2,she),e(she,GIo),e(S2,OIo),e(S2,zO),e(zO,VIo),e(S2,XIo),e(N,zIo),e(N,R2),e(R2,lhe),e(lhe,WIo),e(R2,QIo),e(R2,WO),e(WO,HIo),e(R2,UIo),e(N,JIo),e(N,P2),e(P2,ihe),e(ihe,YIo),e(P2,KIo),e(P2,QO),e(QO,ZIo),e(P2,eNo),e(N,oNo),e(N,B2),e(B2,dhe),e(dhe,rNo),e(B2,tNo),e(B2,HO),e(HO,aNo),e(B2,nNo),e(N,sNo),e(N,I2),e(I2,che),e(che,lNo),e(I2,iNo),e(I2,UO),e(UO,dNo),e(I2,cNo),e(N,fNo),e(N,N2),e(N2,fhe),e(fhe,mNo),e(N2,gNo),e(N2,JO),e(JO,hNo),e(N2,pNo),e(N,uNo),e(N,q2),e(q2,mhe),e(mhe,_No),e(q2,bNo),e(q2,YO),e(YO,vNo),e(q2,FNo),e(N,TNo),e(N,j2),e(j2,ghe),e(ghe,MNo),e(j2,ENo),e(j2,KO),e(KO,CNo),e(j2,wNo),e(N,ANo),e(N,D2),e(D2,hhe),e(hhe,LNo),e(D2,yNo),e(D2,ZO),e(ZO,xNo),e(D2,$No),e(N,kNo),e(N,G2),e(G2,phe),e(phe,SNo),e(G2,RNo),e(G2,eV),e(eV,PNo),e(G2,BNo),e(N,INo),e(N,O2),e(O2,uhe),e(uhe,NNo),e(O2,qNo),e(O2,oV),e(oV,jNo),e(O2,DNo),e(N,GNo),e(N,V2),e(V2,_he),e(_he,ONo),e(V2,VNo),e(V2,rV),e(rV,XNo),e(V2,zNo),e(N,WNo),e(N,X2),e(X2,bhe),e(bhe,QNo),e(X2,HNo),e(X2,tV),e(tV,UNo),e(X2,JNo),e(N,YNo),e(N,z2),e(z2,vhe),e(vhe,KNo),e(z2,ZNo),e(z2,aV),e(aV,eqo),e(z2,oqo),e(N,rqo),e(N,W2),e(W2,Fhe),e(Fhe,tqo),e(W2,aqo),e(W2,nV),e(nV,nqo),e(W2,sqo),e(N,lqo),e(N,Q2),e(Q2,The),e(The,iqo),e(Q2,dqo),e(Q2,sV),e(sV,cqo),e(Q2,fqo),e(N,mqo),e(N,H2),e(H2,Mhe),e(Mhe,gqo),e(H2,hqo),e(H2,lV),e(lV,pqo),e(H2,uqo),e(N,_qo),e(N,U2),e(U2,Ehe),e(Ehe,bqo),e(U2,vqo),e(U2,iV),e(iV,Fqo),e(U2,Tqo),e(N,Mqo),e(N,J2),e(J2,Che),e(Che,Eqo),e(J2,Cqo),e(J2,dV),e(dV,wqo),e(J2,Aqo),e(N,Lqo),e(N,Y2),e(Y2,whe),e(whe,yqo),e(Y2,xqo),e(Y2,cV),e(cV,$qo),e(Y2,kqo),e(N,Sqo),e(N,K2),e(K2,Ahe),e(Ahe,Rqo),e(K2,Pqo),e(K2,fV),e(fV,Bqo),e(K2,Iqo),e(N,Nqo),e(N,Z2),e(Z2,Lhe),e(Lhe,qqo),e(Z2,jqo),e(Z2,mV),e(mV,Dqo),e(Z2,Gqo),e(N,Oqo),e(N,eb),e(eb,yhe),e(yhe,Vqo),e(eb,Xqo),e(eb,gV),e(gV,zqo),e(eb,Wqo),e(N,Qqo),e(N,ob),e(ob,xhe),e(xhe,Hqo),e(ob,Uqo),e(ob,hV),e(hV,Jqo),e(ob,Yqo),e(N,Kqo),e(N,rb),e(rb,$he),e($he,Zqo),e(rb,ejo),e(rb,pV),e(pV,ojo),e(rb,rjo),e(N,tjo),e(N,tb),e(tb,khe),e(khe,ajo),e(tb,njo),e(tb,uV),e(uV,sjo),e(tb,ljo),e(N,ijo),e(N,ab),e(ab,She),e(She,djo),e(ab,cjo),e(ab,_V),e(_V,fjo),e(ab,mjo),e(N,gjo),e(N,nb),e(nb,Rhe),e(Rhe,hjo),e(nb,pjo),e(nb,bV),e(bV,ujo),e(nb,_jo),e(N,bjo),e(N,sb),e(sb,Phe),e(Phe,vjo),e(sb,Fjo),e(sb,vV),e(vV,Tjo),e(sb,Mjo),e(N,Ejo),e(N,lb),e(lb,Bhe),e(Bhe,Cjo),e(lb,wjo),e(lb,FV),e(FV,Ajo),e(lb,Ljo),e(N,yjo),e(N,ib),e(ib,Ihe),e(Ihe,xjo),e(ib,$jo),e(ib,TV),e(TV,kjo),e(ib,Sjo),e(N,Rjo),e(N,db),e(db,Nhe),e(Nhe,Pjo),e(db,Bjo),e(db,MV),e(MV,Ijo),e(db,Njo),e(N,qjo),e(N,cb),e(cb,qhe),e(qhe,jjo),e(cb,Djo),e(cb,EV),e(EV,Gjo),e(cb,Ojo),e(oo,Vjo),e(oo,fb),e(fb,Xjo),e(fb,jhe),e(jhe,zjo),e(fb,Wjo),e(fb,Dhe),e(Dhe,Qjo),e(oo,Hjo),M(mb,oo,null),b(f,LGe,_),b(f,Ki,_),e(Ki,gb),e(gb,Ghe),M(My,Ghe,null),e(Ki,Ujo),e(Ki,Ohe),e(Ohe,Jjo),b(f,yGe,_),b(f,Bo,_),M(Ey,Bo,null),e(Bo,Yjo),e(Bo,Zi),e(Zi,Kjo),e(Zi,CV),e(CV,Zjo),e(Zi,eDo),e(Zi,wV),e(wV,oDo),e(Zi,rDo),e(Bo,tDo),e(Bo,Cy),e(Cy,aDo),e(Cy,Vhe),e(Vhe,nDo),e(Cy,sDo),e(Bo,lDo),e(Bo,ft),M(wy,ft,null),e(ft,iDo),e(ft,Xhe),e(Xhe,dDo),e(ft,cDo),e(ft,ed),e(ed,fDo),e(ed,zhe),e(zhe,mDo),e(ed,gDo),e(ed,AV),e(AV,hDo),e(ed,pDo),e(ft,uDo),M(hb,ft,null),e(Bo,_Do),e(Bo,ro),M(Ay,ro,null),e(ro,bDo),e(ro,Whe),e(Whe,vDo),e(ro,FDo),e(ro,qa),e(qa,TDo),e(qa,Qhe),e(Qhe,MDo),e(qa,EDo),e(qa,Hhe),e(Hhe,CDo),e(qa,wDo),e(qa,Uhe),e(Uhe,ADo),e(qa,LDo),e(ro,yDo),e(ro,Z),e(Z,pb),e(pb,Jhe),e(Jhe,xDo),e(pb,$Do),e(pb,LV),e(LV,kDo),e(pb,SDo),e(Z,RDo),e(Z,ub),e(ub,Yhe),e(Yhe,PDo),e(ub,BDo),e(ub,yV),e(yV,IDo),e(ub,NDo),e(Z,qDo),e(Z,_b),e(_b,Khe),e(Khe,jDo),e(_b,DDo),e(_b,xV),e(xV,GDo),e(_b,ODo),e(Z,VDo),e(Z,bb),e(bb,Zhe),e(Zhe,XDo),e(bb,zDo),e(bb,$V),e($V,WDo),e(bb,QDo),e(Z,HDo),e(Z,vb),e(vb,epe),e(epe,UDo),e(vb,JDo),e(vb,kV),e(kV,YDo),e(vb,KDo),e(Z,ZDo),e(Z,Fb),e(Fb,ope),e(ope,eGo),e(Fb,oGo),e(Fb,SV),e(SV,rGo),e(Fb,tGo),e(Z,aGo),e(Z,Tb),e(Tb,rpe),e(rpe,nGo),e(Tb,sGo),e(Tb,RV),e(RV,lGo),e(Tb,iGo),e(Z,dGo),e(Z,Mb),e(Mb,tpe),e(tpe,cGo),e(Mb,fGo),e(Mb,PV),e(PV,mGo),e(Mb,gGo),e(Z,hGo),e(Z,Eb),e(Eb,ape),e(ape,pGo),e(Eb,uGo),e(Eb,BV),e(BV,_Go),e(Eb,bGo),e(Z,vGo),e(Z,Cb),e(Cb,npe),e(npe,FGo),e(Cb,TGo),e(Cb,IV),e(IV,MGo),e(Cb,EGo),e(Z,CGo),e(Z,wb),e(wb,spe),e(spe,wGo),e(wb,AGo),e(wb,NV),e(NV,LGo),e(wb,yGo),e(Z,xGo),e(Z,Ab),e(Ab,lpe),e(lpe,$Go),e(Ab,kGo),e(Ab,qV),e(qV,SGo),e(Ab,RGo),e(Z,PGo),e(Z,Lb),e(Lb,ipe),e(ipe,BGo),e(Lb,IGo),e(Lb,jV),e(jV,NGo),e(Lb,qGo),e(Z,jGo),e(Z,yb),e(yb,dpe),e(dpe,DGo),e(yb,GGo),e(yb,DV),e(DV,OGo),e(yb,VGo),e(Z,XGo),e(Z,xb),e(xb,cpe),e(cpe,zGo),e(xb,WGo),e(xb,GV),e(GV,QGo),e(xb,HGo),e(Z,UGo),e(Z,$b),e($b,fpe),e(fpe,JGo),e($b,YGo),e($b,OV),e(OV,KGo),e($b,ZGo),e(Z,eOo),e(Z,kb),e(kb,mpe),e(mpe,oOo),e(kb,rOo),e(kb,VV),e(VV,tOo),e(kb,aOo),e(Z,nOo),e(Z,Sb),e(Sb,gpe),e(gpe,sOo),e(Sb,lOo),e(Sb,XV),e(XV,iOo),e(Sb,dOo),e(Z,cOo),e(Z,Rb),e(Rb,hpe),e(hpe,fOo),e(Rb,mOo),e(Rb,zV),e(zV,gOo),e(Rb,hOo),e(Z,pOo),e(Z,Pb),e(Pb,ppe),e(ppe,uOo),e(Pb,_Oo),e(Pb,WV),e(WV,bOo),e(Pb,vOo),e(Z,FOo),e(Z,Bb),e(Bb,upe),e(upe,TOo),e(Bb,MOo),e(Bb,QV),e(QV,EOo),e(Bb,COo),e(Z,wOo),e(Z,Ib),e(Ib,_pe),e(_pe,AOo),e(Ib,LOo),e(Ib,HV),e(HV,yOo),e(Ib,xOo),e(Z,$Oo),e(Z,Nb),e(Nb,bpe),e(bpe,kOo),e(Nb,SOo),e(Nb,UV),e(UV,ROo),e(Nb,POo),e(Z,BOo),e(Z,qb),e(qb,vpe),e(vpe,IOo),e(qb,NOo),e(qb,JV),e(JV,qOo),e(qb,jOo),e(Z,DOo),e(Z,jb),e(jb,Fpe),e(Fpe,GOo),e(jb,OOo),e(jb,YV),e(YV,VOo),e(jb,XOo),e(Z,zOo),e(Z,Db),e(Db,Tpe),e(Tpe,WOo),e(Db,QOo),e(Db,KV),e(KV,HOo),e(Db,UOo),e(Z,JOo),e(Z,Gb),e(Gb,Mpe),e(Mpe,YOo),e(Gb,KOo),e(Gb,ZV),e(ZV,ZOo),e(Gb,eVo),e(Z,oVo),e(Z,Ob),e(Ob,Epe),e(Epe,rVo),e(Ob,tVo),e(Ob,eX),e(eX,aVo),e(Ob,nVo),e(Z,sVo),e(Z,Vb),e(Vb,Cpe),e(Cpe,lVo),e(Vb,iVo),e(Vb,oX),e(oX,dVo),e(Vb,cVo),e(ro,fVo),e(ro,Xb),e(Xb,mVo),e(Xb,wpe),e(wpe,gVo),e(Xb,hVo),e(Xb,Ape),e(Ape,pVo),e(ro,uVo),M(zb,ro,null),b(f,xGe,_),b(f,od,_),e(od,Wb),e(Wb,Lpe),M(Ly,Lpe,null),e(od,_Vo),e(od,ype),e(ype,bVo),b(f,$Ge,_),b(f,Io,_),M(yy,Io,null),e(Io,vVo),e(Io,rd),e(rd,FVo),e(rd,rX),e(rX,TVo),e(rd,MVo),e(rd,tX),e(tX,EVo),e(rd,CVo),e(Io,wVo),e(Io,xy),e(xy,AVo),e(xy,xpe),e(xpe,LVo),e(xy,yVo),e(Io,xVo),e(Io,mt),M($y,mt,null),e(mt,$Vo),e(mt,$pe),e($pe,kVo),e(mt,SVo),e(mt,td),e(td,RVo),e(td,kpe),e(kpe,PVo),e(td,BVo),e(td,aX),e(aX,IVo),e(td,NVo),e(mt,qVo),M(Qb,mt,null),e(Io,jVo),e(Io,to),M(ky,to,null),e(to,DVo),e(to,Spe),e(Spe,GVo),e(to,OVo),e(to,ja),e(ja,VVo),e(ja,Rpe),e(Rpe,XVo),e(ja,zVo),e(ja,Ppe),e(Ppe,WVo),e(ja,QVo),e(ja,Bpe),e(Bpe,HVo),e(ja,UVo),e(to,JVo),e(to,Zr),e(Zr,Hb),e(Hb,Ipe),e(Ipe,YVo),e(Hb,KVo),e(Hb,nX),e(nX,ZVo),e(Hb,eXo),e(Zr,oXo),e(Zr,Ub),e(Ub,Npe),e(Npe,rXo),e(Ub,tXo),e(Ub,sX),e(sX,aXo),e(Ub,nXo),e(Zr,sXo),e(Zr,Jb),e(Jb,qpe),e(qpe,lXo),e(Jb,iXo),e(Jb,lX),e(lX,dXo),e(Jb,cXo),e(Zr,fXo),e(Zr,Yb),e(Yb,jpe),e(jpe,mXo),e(Yb,gXo),e(Yb,iX),e(iX,hXo),e(Yb,pXo),e(Zr,uXo),e(Zr,Kb),e(Kb,Dpe),e(Dpe,_Xo),e(Kb,bXo),e(Kb,dX),e(dX,vXo),e(Kb,FXo),e(to,TXo),e(to,Zb),e(Zb,MXo),e(Zb,Gpe),e(Gpe,EXo),e(Zb,CXo),e(Zb,Ope),e(Ope,wXo),e(to,AXo),M(ev,to,null),b(f,kGe,_),b(f,ad,_),e(ad,ov),e(ov,Vpe),M(Sy,Vpe,null),e(ad,LXo),e(ad,Xpe),e(Xpe,yXo),b(f,SGe,_),b(f,No,_),M(Ry,No,null),e(No,xXo),e(No,nd),e(nd,$Xo),e(nd,cX),e(cX,kXo),e(nd,SXo),e(nd,fX),e(fX,RXo),e(nd,PXo),e(No,BXo),e(No,Py),e(Py,IXo),e(Py,zpe),e(zpe,NXo),e(Py,qXo),e(No,jXo),e(No,gt),M(By,gt,null),e(gt,DXo),e(gt,Wpe),e(Wpe,GXo),e(gt,OXo),e(gt,sd),e(sd,VXo),e(sd,Qpe),e(Qpe,XXo),e(sd,zXo),e(sd,mX),e(mX,WXo),e(sd,QXo),e(gt,HXo),M(rv,gt,null),e(No,UXo),e(No,ao),M(Iy,ao,null),e(ao,JXo),e(ao,Hpe),e(Hpe,YXo),e(ao,KXo),e(ao,Da),e(Da,ZXo),e(Da,Upe),e(Upe,ezo),e(Da,ozo),e(Da,Jpe),e(Jpe,rzo),e(Da,tzo),e(Da,Ype),e(Ype,azo),e(Da,nzo),e(ao,szo),e(ao,H),e(H,tv),e(tv,Kpe),e(Kpe,lzo),e(tv,izo),e(tv,gX),e(gX,dzo),e(tv,czo),e(H,fzo),e(H,av),e(av,Zpe),e(Zpe,mzo),e(av,gzo),e(av,hX),e(hX,hzo),e(av,pzo),e(H,uzo),e(H,nv),e(nv,eue),e(eue,_zo),e(nv,bzo),e(nv,pX),e(pX,vzo),e(nv,Fzo),e(H,Tzo),e(H,sv),e(sv,oue),e(oue,Mzo),e(sv,Ezo),e(sv,uX),e(uX,Czo),e(sv,wzo),e(H,Azo),e(H,lv),e(lv,rue),e(rue,Lzo),e(lv,yzo),e(lv,_X),e(_X,xzo),e(lv,$zo),e(H,kzo),e(H,iv),e(iv,tue),e(tue,Szo),e(iv,Rzo),e(iv,bX),e(bX,Pzo),e(iv,Bzo),e(H,Izo),e(H,dv),e(dv,aue),e(aue,Nzo),e(dv,qzo),e(dv,vX),e(vX,jzo),e(dv,Dzo),e(H,Gzo),e(H,cv),e(cv,nue),e(nue,Ozo),e(cv,Vzo),e(cv,FX),e(FX,Xzo),e(cv,zzo),e(H,Wzo),e(H,fv),e(fv,sue),e(sue,Qzo),e(fv,Hzo),e(fv,TX),e(TX,Uzo),e(fv,Jzo),e(H,Yzo),e(H,mv),e(mv,lue),e(lue,Kzo),e(mv,Zzo),e(mv,MX),e(MX,eWo),e(mv,oWo),e(H,rWo),e(H,gv),e(gv,iue),e(iue,tWo),e(gv,aWo),e(gv,EX),e(EX,nWo),e(gv,sWo),e(H,lWo),e(H,hv),e(hv,due),e(due,iWo),e(hv,dWo),e(hv,CX),e(CX,cWo),e(hv,fWo),e(H,mWo),e(H,pv),e(pv,cue),e(cue,gWo),e(pv,hWo),e(pv,wX),e(wX,pWo),e(pv,uWo),e(H,_Wo),e(H,uv),e(uv,fue),e(fue,bWo),e(uv,vWo),e(uv,AX),e(AX,FWo),e(uv,TWo),e(H,MWo),e(H,_v),e(_v,mue),e(mue,EWo),e(_v,CWo),e(_v,LX),e(LX,wWo),e(_v,AWo),e(H,LWo),e(H,bv),e(bv,gue),e(gue,yWo),e(bv,xWo),e(bv,yX),e(yX,$Wo),e(bv,kWo),e(H,SWo),e(H,vv),e(vv,hue),e(hue,RWo),e(vv,PWo),e(vv,xX),e(xX,BWo),e(vv,IWo),e(H,NWo),e(H,Fv),e(Fv,pue),e(pue,qWo),e(Fv,jWo),e(Fv,$X),e($X,DWo),e(Fv,GWo),e(H,OWo),e(H,Tv),e(Tv,uue),e(uue,VWo),e(Tv,XWo),e(Tv,kX),e(kX,zWo),e(Tv,WWo),e(H,QWo),e(H,Mv),e(Mv,_ue),e(_ue,HWo),e(Mv,UWo),e(Mv,SX),e(SX,JWo),e(Mv,YWo),e(H,KWo),e(H,Ev),e(Ev,bue),e(bue,ZWo),e(Ev,eQo),e(Ev,RX),e(RX,oQo),e(Ev,rQo),e(H,tQo),e(H,Cv),e(Cv,vue),e(vue,aQo),e(Cv,nQo),e(Cv,PX),e(PX,sQo),e(Cv,lQo),e(H,iQo),e(H,wv),e(wv,Fue),e(Fue,dQo),e(wv,cQo),e(wv,BX),e(BX,fQo),e(wv,mQo),e(H,gQo),e(H,Av),e(Av,Tue),e(Tue,hQo),e(Av,pQo),e(Av,IX),e(IX,uQo),e(Av,_Qo),e(H,bQo),e(H,Lv),e(Lv,Mue),e(Mue,vQo),e(Lv,FQo),e(Lv,NX),e(NX,TQo),e(Lv,MQo),e(H,EQo),e(H,yv),e(yv,Eue),e(Eue,CQo),e(yv,wQo),e(yv,qX),e(qX,AQo),e(yv,LQo),e(H,yQo),e(H,xv),e(xv,Cue),e(Cue,xQo),e(xv,$Qo),e(xv,jX),e(jX,kQo),e(xv,SQo),e(H,RQo),e(H,$v),e($v,wue),e(wue,PQo),e($v,BQo),e($v,DX),e(DX,IQo),e($v,NQo),e(H,qQo),e(H,kv),e(kv,Aue),e(Aue,jQo),e(kv,DQo),e(kv,GX),e(GX,GQo),e(kv,OQo),e(H,VQo),e(H,Sv),e(Sv,Lue),e(Lue,XQo),e(Sv,zQo),e(Sv,OX),e(OX,WQo),e(Sv,QQo),e(H,HQo),e(H,Rv),e(Rv,yue),e(yue,UQo),e(Rv,JQo),e(Rv,VX),e(VX,YQo),e(Rv,KQo),e(H,ZQo),e(H,Pv),e(Pv,xue),e(xue,eHo),e(Pv,oHo),e(Pv,XX),e(XX,rHo),e(Pv,tHo),e(H,aHo),e(H,Bv),e(Bv,$ue),e($ue,nHo),e(Bv,sHo),e(Bv,zX),e(zX,lHo),e(Bv,iHo),e(H,dHo),e(H,Iv),e(Iv,kue),e(kue,cHo),e(Iv,fHo),e(Iv,WX),e(WX,mHo),e(Iv,gHo),e(H,hHo),e(H,Nv),e(Nv,Sue),e(Sue,pHo),e(Nv,uHo),e(Nv,QX),e(QX,_Ho),e(Nv,bHo),e(ao,vHo),e(ao,qv),e(qv,FHo),e(qv,Rue),e(Rue,THo),e(qv,MHo),e(qv,Pue),e(Pue,EHo),e(ao,CHo),M(jv,ao,null),b(f,RGe,_),b(f,ld,_),e(ld,Dv),e(Dv,Bue),M(Ny,Bue,null),e(ld,wHo),e(ld,Iue),e(Iue,AHo),b(f,PGe,_),b(f,qo,_),M(qy,qo,null),e(qo,LHo),e(qo,id),e(id,yHo),e(id,HX),e(HX,xHo),e(id,$Ho),e(id,UX),e(UX,kHo),e(id,SHo),e(qo,RHo),e(qo,jy),e(jy,PHo),e(jy,Nue),e(Nue,BHo),e(jy,IHo),e(qo,NHo),e(qo,ht),M(Dy,ht,null),e(ht,qHo),e(ht,que),e(que,jHo),e(ht,DHo),e(ht,dd),e(dd,GHo),e(dd,jue),e(jue,OHo),e(dd,VHo),e(dd,JX),e(JX,XHo),e(dd,zHo),e(ht,WHo),M(Gv,ht,null),e(qo,QHo),e(qo,no),M(Gy,no,null),e(no,HHo),e(no,Due),e(Due,UHo),e(no,JHo),e(no,Ga),e(Ga,YHo),e(Ga,Gue),e(Gue,KHo),e(Ga,ZHo),e(Ga,Oue),e(Oue,eUo),e(Ga,oUo),e(Ga,Vue),e(Vue,rUo),e(Ga,tUo),e(no,aUo),e(no,V),e(V,Ov),e(Ov,Xue),e(Xue,nUo),e(Ov,sUo),e(Ov,YX),e(YX,lUo),e(Ov,iUo),e(V,dUo),e(V,Vv),e(Vv,zue),e(zue,cUo),e(Vv,fUo),e(Vv,KX),e(KX,mUo),e(Vv,gUo),e(V,hUo),e(V,Xv),e(Xv,Wue),e(Wue,pUo),e(Xv,uUo),e(Xv,ZX),e(ZX,_Uo),e(Xv,bUo),e(V,vUo),e(V,zv),e(zv,Que),e(Que,FUo),e(zv,TUo),e(zv,ez),e(ez,MUo),e(zv,EUo),e(V,CUo),e(V,Wv),e(Wv,Hue),e(Hue,wUo),e(Wv,AUo),e(Wv,oz),e(oz,LUo),e(Wv,yUo),e(V,xUo),e(V,Qv),e(Qv,Uue),e(Uue,$Uo),e(Qv,kUo),e(Qv,rz),e(rz,SUo),e(Qv,RUo),e(V,PUo),e(V,Hv),e(Hv,Jue),e(Jue,BUo),e(Hv,IUo),e(Hv,tz),e(tz,NUo),e(Hv,qUo),e(V,jUo),e(V,Uv),e(Uv,Yue),e(Yue,DUo),e(Uv,GUo),e(Uv,az),e(az,OUo),e(Uv,VUo),e(V,XUo),e(V,Jv),e(Jv,Kue),e(Kue,zUo),e(Jv,WUo),e(Jv,nz),e(nz,QUo),e(Jv,HUo),e(V,UUo),e(V,Yv),e(Yv,Zue),e(Zue,JUo),e(Yv,YUo),e(Yv,sz),e(sz,KUo),e(Yv,ZUo),e(V,eJo),e(V,Kv),e(Kv,e_e),e(e_e,oJo),e(Kv,rJo),e(Kv,lz),e(lz,tJo),e(Kv,aJo),e(V,nJo),e(V,Zv),e(Zv,o_e),e(o_e,sJo),e(Zv,lJo),e(Zv,iz),e(iz,iJo),e(Zv,dJo),e(V,cJo),e(V,e0),e(e0,r_e),e(r_e,fJo),e(e0,mJo),e(e0,dz),e(dz,gJo),e(e0,hJo),e(V,pJo),e(V,o0),e(o0,t_e),e(t_e,uJo),e(o0,_Jo),e(o0,cz),e(cz,bJo),e(o0,vJo),e(V,FJo),e(V,r0),e(r0,a_e),e(a_e,TJo),e(r0,MJo),e(r0,fz),e(fz,EJo),e(r0,CJo),e(V,wJo),e(V,t0),e(t0,n_e),e(n_e,AJo),e(t0,LJo),e(t0,mz),e(mz,yJo),e(t0,xJo),e(V,$Jo),e(V,a0),e(a0,s_e),e(s_e,kJo),e(a0,SJo),e(a0,gz),e(gz,RJo),e(a0,PJo),e(V,BJo),e(V,n0),e(n0,l_e),e(l_e,IJo),e(n0,NJo),e(n0,hz),e(hz,qJo),e(n0,jJo),e(V,DJo),e(V,s0),e(s0,i_e),e(i_e,GJo),e(s0,OJo),e(s0,pz),e(pz,VJo),e(s0,XJo),e(V,zJo),e(V,l0),e(l0,d_e),e(d_e,WJo),e(l0,QJo),e(l0,uz),e(uz,HJo),e(l0,UJo),e(V,JJo),e(V,i0),e(i0,c_e),e(c_e,YJo),e(i0,KJo),e(i0,_z),e(_z,ZJo),e(i0,eYo),e(V,oYo),e(V,d0),e(d0,f_e),e(f_e,rYo),e(d0,tYo),e(d0,bz),e(bz,aYo),e(d0,nYo),e(V,sYo),e(V,c0),e(c0,m_e),e(m_e,lYo),e(c0,iYo),e(c0,vz),e(vz,dYo),e(c0,cYo),e(V,fYo),e(V,f0),e(f0,g_e),e(g_e,mYo),e(f0,gYo),e(f0,Fz),e(Fz,hYo),e(f0,pYo),e(V,uYo),e(V,m0),e(m0,h_e),e(h_e,_Yo),e(m0,bYo),e(m0,Tz),e(Tz,vYo),e(m0,FYo),e(V,TYo),e(V,g0),e(g0,p_e),e(p_e,MYo),e(g0,EYo),e(g0,Mz),e(Mz,CYo),e(g0,wYo),e(V,AYo),e(V,h0),e(h0,u_e),e(u_e,LYo),e(h0,yYo),e(h0,Ez),e(Ez,xYo),e(h0,$Yo),e(V,kYo),e(V,p0),e(p0,__e),e(__e,SYo),e(p0,RYo),e(p0,Cz),e(Cz,PYo),e(p0,BYo),e(V,IYo),e(V,u0),e(u0,b_e),e(b_e,NYo),e(u0,qYo),e(u0,wz),e(wz,jYo),e(u0,DYo),e(V,GYo),e(V,_0),e(_0,v_e),e(v_e,OYo),e(_0,VYo),e(_0,Az),e(Az,XYo),e(_0,zYo),e(V,WYo),e(V,b0),e(b0,F_e),e(F_e,QYo),e(b0,HYo),e(b0,Lz),e(Lz,UYo),e(b0,JYo),e(V,YYo),e(V,v0),e(v0,T_e),e(T_e,KYo),e(v0,ZYo),e(v0,yz),e(yz,eKo),e(v0,oKo),e(V,rKo),e(V,F0),e(F0,M_e),e(M_e,tKo),e(F0,aKo),e(F0,xz),e(xz,nKo),e(F0,sKo),e(V,lKo),e(V,T0),e(T0,E_e),e(E_e,iKo),e(T0,dKo),e(T0,$z),e($z,cKo),e(T0,fKo),e(V,mKo),e(V,M0),e(M0,C_e),e(C_e,gKo),e(M0,hKo),e(M0,kz),e(kz,pKo),e(M0,uKo),e(V,_Ko),e(V,E0),e(E0,w_e),e(w_e,bKo),e(E0,vKo),e(E0,Sz),e(Sz,FKo),e(E0,TKo),e(V,MKo),e(V,C0),e(C0,A_e),e(A_e,EKo),e(C0,CKo),e(C0,Rz),e(Rz,wKo),e(C0,AKo),e(V,LKo),e(V,w0),e(w0,L_e),e(L_e,yKo),e(w0,xKo),e(w0,Pz),e(Pz,$Ko),e(w0,kKo),e(V,SKo),e(V,A0),e(A0,y_e),e(y_e,RKo),e(A0,PKo),e(A0,Bz),e(Bz,BKo),e(A0,IKo),e(V,NKo),e(V,L0),e(L0,x_e),e(x_e,qKo),e(L0,jKo),e(L0,Iz),e(Iz,DKo),e(L0,GKo),e(no,OKo),e(no,y0),e(y0,VKo),e(y0,$_e),e($_e,XKo),e(y0,zKo),e(y0,k_e),e(k_e,WKo),e(no,QKo),M(x0,no,null),b(f,BGe,_),b(f,cd,_),e(cd,$0),e($0,S_e),M(Oy,S_e,null),e(cd,HKo),e(cd,R_e),e(R_e,UKo),b(f,IGe,_),b(f,jo,_),M(Vy,jo,null),e(jo,JKo),e(jo,fd),e(fd,YKo),e(fd,Nz),e(Nz,KKo),e(fd,ZKo),e(fd,qz),e(qz,eZo),e(fd,oZo),e(jo,rZo),e(jo,Xy),e(Xy,tZo),e(Xy,P_e),e(P_e,aZo),e(Xy,nZo),e(jo,sZo),e(jo,pt),M(zy,pt,null),e(pt,lZo),e(pt,B_e),e(B_e,iZo),e(pt,dZo),e(pt,md),e(md,cZo),e(md,I_e),e(I_e,fZo),e(md,mZo),e(md,jz),e(jz,gZo),e(md,hZo),e(pt,pZo),M(k0,pt,null),e(jo,uZo),e(jo,so),M(Wy,so,null),e(so,_Zo),e(so,N_e),e(N_e,bZo),e(so,vZo),e(so,Oa),e(Oa,FZo),e(Oa,q_e),e(q_e,TZo),e(Oa,MZo),e(Oa,j_e),e(j_e,EZo),e(Oa,CZo),e(Oa,D_e),e(D_e,wZo),e(Oa,AZo),e(so,LZo),e(so,G_e),e(G_e,S0),e(S0,O_e),e(O_e,yZo),e(S0,xZo),e(S0,Dz),e(Dz,$Zo),e(S0,kZo),e(so,SZo),e(so,R0),e(R0,RZo),e(R0,V_e),e(V_e,PZo),e(R0,BZo),e(R0,X_e),e(X_e,IZo),e(so,NZo),M(P0,so,null),b(f,NGe,_),b(f,gd,_),e(gd,B0),e(B0,z_e),M(Qy,z_e,null),e(gd,qZo),e(gd,W_e),e(W_e,jZo),b(f,qGe,_),b(f,Do,_),M(Hy,Do,null),e(Do,DZo),e(Do,hd),e(hd,GZo),e(hd,Gz),e(Gz,OZo),e(hd,VZo),e(hd,Oz),e(Oz,XZo),e(hd,zZo),e(Do,WZo),e(Do,Uy),e(Uy,QZo),e(Uy,Q_e),e(Q_e,HZo),e(Uy,UZo),e(Do,JZo),e(Do,ut),M(Jy,ut,null),e(ut,YZo),e(ut,H_e),e(H_e,KZo),e(ut,ZZo),e(ut,pd),e(pd,eer),e(pd,U_e),e(U_e,oer),e(pd,rer),e(pd,Vz),e(Vz,ter),e(pd,aer),e(ut,ner),M(I0,ut,null),e(Do,ser),e(Do,lo),M(Yy,lo,null),e(lo,ler),e(lo,J_e),e(J_e,ier),e(lo,der),e(lo,Va),e(Va,cer),e(Va,Y_e),e(Y_e,fer),e(Va,mer),e(Va,K_e),e(K_e,ger),e(Va,her),e(Va,Z_e),e(Z_e,per),e(Va,uer),e(lo,_er),e(lo,Fe),e(Fe,N0),e(N0,e7e),e(e7e,ber),e(N0,ver),e(N0,Xz),e(Xz,Fer),e(N0,Ter),e(Fe,Mer),e(Fe,q0),e(q0,o7e),e(o7e,Eer),e(q0,Cer),e(q0,zz),e(zz,wer),e(q0,Aer),e(Fe,Ler),e(Fe,j0),e(j0,r7e),e(r7e,yer),e(j0,xer),e(j0,Wz),e(Wz,$er),e(j0,ker),e(Fe,Ser),e(Fe,D0),e(D0,t7e),e(t7e,Rer),e(D0,Per),e(D0,Qz),e(Qz,Ber),e(D0,Ier),e(Fe,Ner),e(Fe,Os),e(Os,a7e),e(a7e,qer),e(Os,jer),e(Os,Hz),e(Hz,Der),e(Os,Ger),e(Os,Uz),e(Uz,Oer),e(Os,Ver),e(Fe,Xer),e(Fe,G0),e(G0,n7e),e(n7e,zer),e(G0,Wer),e(G0,Jz),e(Jz,Qer),e(G0,Her),e(Fe,Uer),e(Fe,Vs),e(Vs,s7e),e(s7e,Jer),e(Vs,Yer),e(Vs,Yz),e(Yz,Ker),e(Vs,Zer),e(Vs,Kz),e(Kz,eor),e(Vs,oor),e(Fe,ror),e(Fe,_t),e(_t,l7e),e(l7e,tor),e(_t,aor),e(_t,Zz),e(Zz,nor),e(_t,sor),e(_t,eW),e(eW,lor),e(_t,ior),e(_t,oW),e(oW,dor),e(_t,cor),e(Fe,mor),e(Fe,O0),e(O0,i7e),e(i7e,gor),e(O0,hor),e(O0,rW),e(rW,por),e(O0,uor),e(Fe,_or),e(Fe,V0),e(V0,d7e),e(d7e,bor),e(V0,vor),e(V0,tW),e(tW,For),e(V0,Tor),e(Fe,Mor),e(Fe,X0),e(X0,c7e),e(c7e,Eor),e(X0,Cor),e(X0,aW),e(aW,wor),e(X0,Aor),e(Fe,Lor),e(Fe,z0),e(z0,f7e),e(f7e,yor),e(z0,xor),e(z0,nW),e(nW,$or),e(z0,kor),e(Fe,Sor),e(Fe,W0),e(W0,m7e),e(m7e,Ror),e(W0,Por),e(W0,sW),e(sW,Bor),e(W0,Ior),e(Fe,Nor),e(Fe,Q0),e(Q0,g7e),e(g7e,qor),e(Q0,jor),e(Q0,lW),e(lW,Dor),e(Q0,Gor),e(Fe,Oor),e(Fe,H0),e(H0,h7e),e(h7e,Vor),e(H0,Xor),e(H0,iW),e(iW,zor),e(H0,Wor),e(lo,Qor),e(lo,U0),e(U0,Hor),e(U0,p7e),e(p7e,Uor),e(U0,Jor),e(U0,u7e),e(u7e,Yor),e(lo,Kor),M(J0,lo,null),b(f,jGe,_),b(f,ud,_),e(ud,Y0),e(Y0,_7e),M(Ky,_7e,null),e(ud,Zor),e(ud,b7e),e(b7e,err),b(f,DGe,_),b(f,Go,_),M(Zy,Go,null),e(Go,orr),e(Go,_d),e(_d,rrr),e(_d,dW),e(dW,trr),e(_d,arr),e(_d,cW),e(cW,nrr),e(_d,srr),e(Go,lrr),e(Go,e8),e(e8,irr),e(e8,v7e),e(v7e,drr),e(e8,crr),e(Go,frr),e(Go,bt),M(o8,bt,null),e(bt,mrr),e(bt,F7e),e(F7e,grr),e(bt,hrr),e(bt,bd),e(bd,prr),e(bd,T7e),e(T7e,urr),e(bd,_rr),e(bd,fW),e(fW,brr),e(bd,vrr),e(bt,Frr),M(K0,bt,null),e(Go,Trr),e(Go,io),M(r8,io,null),e(io,Mrr),e(io,M7e),e(M7e,Err),e(io,Crr),e(io,Xa),e(Xa,wrr),e(Xa,E7e),e(E7e,Arr),e(Xa,Lrr),e(Xa,C7e),e(C7e,yrr),e(Xa,xrr),e(Xa,w7e),e(w7e,$rr),e(Xa,krr),e(io,Srr),e(io,A7e),e(A7e,Z0),e(Z0,L7e),e(L7e,Rrr),e(Z0,Prr),e(Z0,mW),e(mW,Brr),e(Z0,Irr),e(io,Nrr),e(io,eF),e(eF,qrr),e(eF,y7e),e(y7e,jrr),e(eF,Drr),e(eF,x7e),e(x7e,Grr),e(io,Orr),M(oF,io,null),b(f,GGe,_),b(f,vd,_),e(vd,rF),e(rF,$7e),M(t8,$7e,null),e(vd,Vrr),e(vd,k7e),e(k7e,Xrr),b(f,OGe,_),b(f,Oo,_),M(a8,Oo,null),e(Oo,zrr),e(Oo,Fd),e(Fd,Wrr),e(Fd,gW),e(gW,Qrr),e(Fd,Hrr),e(Fd,hW),e(hW,Urr),e(Fd,Jrr),e(Oo,Yrr),e(Oo,n8),e(n8,Krr),e(n8,S7e),e(S7e,Zrr),e(n8,etr),e(Oo,otr),e(Oo,vt),M(s8,vt,null),e(vt,rtr),e(vt,R7e),e(R7e,ttr),e(vt,atr),e(vt,Td),e(Td,ntr),e(Td,P7e),e(P7e,str),e(Td,ltr),e(Td,pW),e(pW,itr),e(Td,dtr),e(vt,ctr),M(tF,vt,null),e(Oo,ftr),e(Oo,co),M(l8,co,null),e(co,mtr),e(co,B7e),e(B7e,gtr),e(co,htr),e(co,za),e(za,ptr),e(za,I7e),e(I7e,utr),e(za,_tr),e(za,N7e),e(N7e,btr),e(za,vtr),e(za,q7e),e(q7e,Ftr),e(za,Ttr),e(co,Mtr),e(co,j7e),e(j7e,aF),e(aF,D7e),e(D7e,Etr),e(aF,Ctr),e(aF,uW),e(uW,wtr),e(aF,Atr),e(co,Ltr),e(co,nF),e(nF,ytr),e(nF,G7e),e(G7e,xtr),e(nF,$tr),e(nF,O7e),e(O7e,ktr),e(co,Str),M(sF,co,null),b(f,VGe,_),b(f,Md,_),e(Md,lF),e(lF,V7e),M(i8,V7e,null),e(Md,Rtr),e(Md,X7e),e(X7e,Ptr),b(f,XGe,_),b(f,Vo,_),M(d8,Vo,null),e(Vo,Btr),e(Vo,Ed),e(Ed,Itr),e(Ed,_W),e(_W,Ntr),e(Ed,qtr),e(Ed,bW),e(bW,jtr),e(Ed,Dtr),e(Vo,Gtr),e(Vo,c8),e(c8,Otr),e(c8,z7e),e(z7e,Vtr),e(c8,Xtr),e(Vo,ztr),e(Vo,Ft),M(f8,Ft,null),e(Ft,Wtr),e(Ft,W7e),e(W7e,Qtr),e(Ft,Htr),e(Ft,Cd),e(Cd,Utr),e(Cd,Q7e),e(Q7e,Jtr),e(Cd,Ytr),e(Cd,vW),e(vW,Ktr),e(Cd,Ztr),e(Ft,ear),M(iF,Ft,null),e(Vo,oar),e(Vo,fo),M(m8,fo,null),e(fo,rar),e(fo,H7e),e(H7e,tar),e(fo,aar),e(fo,Wa),e(Wa,nar),e(Wa,U7e),e(U7e,sar),e(Wa,lar),e(Wa,J7e),e(J7e,iar),e(Wa,dar),e(Wa,Y7e),e(Y7e,car),e(Wa,far),e(fo,mar),e(fo,Pe),e(Pe,dF),e(dF,K7e),e(K7e,gar),e(dF,har),e(dF,FW),e(FW,par),e(dF,uar),e(Pe,_ar),e(Pe,cF),e(cF,Z7e),e(Z7e,bar),e(cF,Far),e(cF,TW),e(TW,Tar),e(cF,Mar),e(Pe,Ear),e(Pe,fF),e(fF,e1e),e(e1e,Car),e(fF,war),e(fF,MW),e(MW,Aar),e(fF,Lar),e(Pe,yar),e(Pe,mF),e(mF,o1e),e(o1e,xar),e(mF,$ar),e(mF,EW),e(EW,kar),e(mF,Sar),e(Pe,Rar),e(Pe,gF),e(gF,r1e),e(r1e,Par),e(gF,Bar),e(gF,CW),e(CW,Iar),e(gF,Nar),e(Pe,qar),e(Pe,hF),e(hF,t1e),e(t1e,jar),e(hF,Dar),e(hF,wW),e(wW,Gar),e(hF,Oar),e(Pe,Var),e(Pe,pF),e(pF,a1e),e(a1e,Xar),e(pF,zar),e(pF,AW),e(AW,War),e(pF,Qar),e(Pe,Har),e(Pe,uF),e(uF,n1e),e(n1e,Uar),e(uF,Jar),e(uF,LW),e(LW,Yar),e(uF,Kar),e(Pe,Zar),e(Pe,_F),e(_F,s1e),e(s1e,enr),e(_F,onr),e(_F,yW),e(yW,rnr),e(_F,tnr),e(fo,anr),e(fo,bF),e(bF,nnr),e(bF,l1e),e(l1e,snr),e(bF,lnr),e(bF,i1e),e(i1e,inr),e(fo,dnr),M(vF,fo,null),b(f,zGe,_),b(f,wd,_),e(wd,FF),e(FF,d1e),M(g8,d1e,null),e(wd,cnr),e(wd,c1e),e(c1e,fnr),b(f,WGe,_),b(f,Xo,_),M(h8,Xo,null),e(Xo,mnr),e(Xo,Ad),e(Ad,gnr),e(Ad,xW),e(xW,hnr),e(Ad,pnr),e(Ad,$W),e($W,unr),e(Ad,_nr),e(Xo,bnr),e(Xo,p8),e(p8,vnr),e(p8,f1e),e(f1e,Fnr),e(p8,Tnr),e(Xo,Mnr),e(Xo,Tt),M(u8,Tt,null),e(Tt,Enr),e(Tt,m1e),e(m1e,Cnr),e(Tt,wnr),e(Tt,Ld),e(Ld,Anr),e(Ld,g1e),e(g1e,Lnr),e(Ld,ynr),e(Ld,kW),e(kW,xnr),e(Ld,$nr),e(Tt,knr),M(TF,Tt,null),e(Xo,Snr),e(Xo,mo),M(_8,mo,null),e(mo,Rnr),e(mo,h1e),e(h1e,Pnr),e(mo,Bnr),e(mo,Qa),e(Qa,Inr),e(Qa,p1e),e(p1e,Nnr),e(Qa,qnr),e(Qa,u1e),e(u1e,jnr),e(Qa,Dnr),e(Qa,_1e),e(_1e,Gnr),e(Qa,Onr),e(mo,Vnr),e(mo,et),e(et,MF),e(MF,b1e),e(b1e,Xnr),e(MF,znr),e(MF,SW),e(SW,Wnr),e(MF,Qnr),e(et,Hnr),e(et,EF),e(EF,v1e),e(v1e,Unr),e(EF,Jnr),e(EF,RW),e(RW,Ynr),e(EF,Knr),e(et,Znr),e(et,CF),e(CF,F1e),e(F1e,esr),e(CF,osr),e(CF,PW),e(PW,rsr),e(CF,tsr),e(et,asr),e(et,wF),e(wF,T1e),e(T1e,nsr),e(wF,ssr),e(wF,BW),e(BW,lsr),e(wF,isr),e(et,dsr),e(et,AF),e(AF,M1e),e(M1e,csr),e(AF,fsr),e(AF,IW),e(IW,msr),e(AF,gsr),e(mo,hsr),e(mo,LF),e(LF,psr),e(LF,E1e),e(E1e,usr),e(LF,_sr),e(LF,C1e),e(C1e,bsr),e(mo,vsr),M(yF,mo,null),b(f,QGe,_),b(f,yd,_),e(yd,xF),e(xF,w1e),M(b8,w1e,null),e(yd,Fsr),e(yd,A1e),e(A1e,Tsr),b(f,HGe,_),b(f,zo,_),M(v8,zo,null),e(zo,Msr),e(zo,xd),e(xd,Esr),e(xd,NW),e(NW,Csr),e(xd,wsr),e(xd,qW),e(qW,Asr),e(xd,Lsr),e(zo,ysr),e(zo,F8),e(F8,xsr),e(F8,L1e),e(L1e,$sr),e(F8,ksr),e(zo,Ssr),e(zo,Mt),M(T8,Mt,null),e(Mt,Rsr),e(Mt,y1e),e(y1e,Psr),e(Mt,Bsr),e(Mt,$d),e($d,Isr),e($d,x1e),e(x1e,Nsr),e($d,qsr),e($d,jW),e(jW,jsr),e($d,Dsr),e(Mt,Gsr),M($F,Mt,null),e(zo,Osr),e(zo,go),M(M8,go,null),e(go,Vsr),e(go,$1e),e($1e,Xsr),e(go,zsr),e(go,Ha),e(Ha,Wsr),e(Ha,k1e),e(k1e,Qsr),e(Ha,Hsr),e(Ha,S1e),e(S1e,Usr),e(Ha,Jsr),e(Ha,R1e),e(R1e,Ysr),e(Ha,Ksr),e(go,Zsr),e(go,Le),e(Le,kF),e(kF,P1e),e(P1e,elr),e(kF,olr),e(kF,DW),e(DW,rlr),e(kF,tlr),e(Le,alr),e(Le,SF),e(SF,B1e),e(B1e,nlr),e(SF,slr),e(SF,GW),e(GW,llr),e(SF,ilr),e(Le,dlr),e(Le,RF),e(RF,I1e),e(I1e,clr),e(RF,flr),e(RF,OW),e(OW,mlr),e(RF,glr),e(Le,hlr),e(Le,PF),e(PF,N1e),e(N1e,plr),e(PF,ulr),e(PF,VW),e(VW,_lr),e(PF,blr),e(Le,vlr),e(Le,BF),e(BF,q1e),e(q1e,Flr),e(BF,Tlr),e(BF,XW),e(XW,Mlr),e(BF,Elr),e(Le,Clr),e(Le,IF),e(IF,j1e),e(j1e,wlr),e(IF,Alr),e(IF,zW),e(zW,Llr),e(IF,ylr),e(Le,xlr),e(Le,NF),e(NF,D1e),e(D1e,$lr),e(NF,klr),e(NF,WW),e(WW,Slr),e(NF,Rlr),e(Le,Plr),e(Le,qF),e(qF,G1e),e(G1e,Blr),e(qF,Ilr),e(qF,QW),e(QW,Nlr),e(qF,qlr),e(Le,jlr),e(Le,jF),e(jF,O1e),e(O1e,Dlr),e(jF,Glr),e(jF,HW),e(HW,Olr),e(jF,Vlr),e(Le,Xlr),e(Le,DF),e(DF,V1e),e(V1e,zlr),e(DF,Wlr),e(DF,UW),e(UW,Qlr),e(DF,Hlr),e(go,Ulr),e(go,GF),e(GF,Jlr),e(GF,X1e),e(X1e,Ylr),e(GF,Klr),e(GF,z1e),e(z1e,Zlr),e(go,eir),M(OF,go,null),b(f,UGe,_),b(f,kd,_),e(kd,VF),e(VF,W1e),M(E8,W1e,null),e(kd,oir),e(kd,Q1e),e(Q1e,rir),b(f,JGe,_),b(f,Wo,_),M(C8,Wo,null),e(Wo,tir),e(Wo,Sd),e(Sd,air),e(Sd,JW),e(JW,nir),e(Sd,sir),e(Sd,YW),e(YW,lir),e(Sd,iir),e(Wo,dir),e(Wo,w8),e(w8,cir),e(w8,H1e),e(H1e,fir),e(w8,mir),e(Wo,gir),e(Wo,Et),M(A8,Et,null),e(Et,hir),e(Et,U1e),e(U1e,pir),e(Et,uir),e(Et,Rd),e(Rd,_ir),e(Rd,J1e),e(J1e,bir),e(Rd,vir),e(Rd,KW),e(KW,Fir),e(Rd,Tir),e(Et,Mir),M(XF,Et,null),e(Wo,Eir),e(Wo,ho),M(L8,ho,null),e(ho,Cir),e(ho,Y1e),e(Y1e,wir),e(ho,Air),e(ho,Ua),e(Ua,Lir),e(Ua,K1e),e(K1e,yir),e(Ua,xir),e(Ua,Z1e),e(Z1e,$ir),e(Ua,kir),e(Ua,e2e),e(e2e,Sir),e(Ua,Rir),e(ho,Pir),e(ho,y8),e(y8,zF),e(zF,o2e),e(o2e,Bir),e(zF,Iir),e(zF,ZW),e(ZW,Nir),e(zF,qir),e(y8,jir),e(y8,WF),e(WF,r2e),e(r2e,Dir),e(WF,Gir),e(WF,eQ),e(eQ,Oir),e(WF,Vir),e(ho,Xir),e(ho,QF),e(QF,zir),e(QF,t2e),e(t2e,Wir),e(QF,Qir),e(QF,a2e),e(a2e,Hir),e(ho,Uir),M(HF,ho,null),b(f,YGe,_),b(f,Pd,_),e(Pd,UF),e(UF,n2e),M(x8,n2e,null),e(Pd,Jir),e(Pd,s2e),e(s2e,Yir),b(f,KGe,_),b(f,Qo,_),M($8,Qo,null),e(Qo,Kir),e(Qo,Bd),e(Bd,Zir),e(Bd,oQ),e(oQ,edr),e(Bd,odr),e(Bd,rQ),e(rQ,rdr),e(Bd,tdr),e(Qo,adr),e(Qo,k8),e(k8,ndr),e(k8,l2e),e(l2e,sdr),e(k8,ldr),e(Qo,idr),e(Qo,Ct),M(S8,Ct,null),e(Ct,ddr),e(Ct,i2e),e(i2e,cdr),e(Ct,fdr),e(Ct,Id),e(Id,mdr),e(Id,d2e),e(d2e,gdr),e(Id,hdr),e(Id,tQ),e(tQ,pdr),e(Id,udr),e(Ct,_dr),M(JF,Ct,null),e(Qo,bdr),e(Qo,po),M(R8,po,null),e(po,vdr),e(po,c2e),e(c2e,Fdr),e(po,Tdr),e(po,Ja),e(Ja,Mdr),e(Ja,f2e),e(f2e,Edr),e(Ja,Cdr),e(Ja,m2e),e(m2e,wdr),e(Ja,Adr),e(Ja,g2e),e(g2e,Ldr),e(Ja,ydr),e(po,xdr),e(po,ot),e(ot,YF),e(YF,h2e),e(h2e,$dr),e(YF,kdr),e(YF,aQ),e(aQ,Sdr),e(YF,Rdr),e(ot,Pdr),e(ot,KF),e(KF,p2e),e(p2e,Bdr),e(KF,Idr),e(KF,nQ),e(nQ,Ndr),e(KF,qdr),e(ot,jdr),e(ot,ZF),e(ZF,u2e),e(u2e,Ddr),e(ZF,Gdr),e(ZF,sQ),e(sQ,Odr),e(ZF,Vdr),e(ot,Xdr),e(ot,eT),e(eT,_2e),e(_2e,zdr),e(eT,Wdr),e(eT,lQ),e(lQ,Qdr),e(eT,Hdr),e(ot,Udr),e(ot,oT),e(oT,b2e),e(b2e,Jdr),e(oT,Ydr),e(oT,iQ),e(iQ,Kdr),e(oT,Zdr),e(po,ecr),e(po,rT),e(rT,ocr),e(rT,v2e),e(v2e,rcr),e(rT,tcr),e(rT,F2e),e(F2e,acr),e(po,ncr),M(tT,po,null),b(f,ZGe,_),b(f,Nd,_),e(Nd,aT),e(aT,T2e),M(P8,T2e,null),e(Nd,scr),e(Nd,M2e),e(M2e,lcr),b(f,eOe,_),b(f,Ho,_),M(B8,Ho,null),e(Ho,icr),e(Ho,qd),e(qd,dcr),e(qd,dQ),e(dQ,ccr),e(qd,fcr),e(qd,cQ),e(cQ,mcr),e(qd,gcr),e(Ho,hcr),e(Ho,I8),e(I8,pcr),e(I8,E2e),e(E2e,ucr),e(I8,_cr),e(Ho,bcr),e(Ho,wt),M(N8,wt,null),e(wt,vcr),e(wt,C2e),e(C2e,Fcr),e(wt,Tcr),e(wt,jd),e(jd,Mcr),e(jd,w2e),e(w2e,Ecr),e(jd,Ccr),e(jd,fQ),e(fQ,wcr),e(jd,Acr),e(wt,Lcr),M(nT,wt,null),e(Ho,ycr),e(Ho,uo),M(q8,uo,null),e(uo,xcr),e(uo,A2e),e(A2e,$cr),e(uo,kcr),e(uo,Ya),e(Ya,Scr),e(Ya,L2e),e(L2e,Rcr),e(Ya,Pcr),e(Ya,y2e),e(y2e,Bcr),e(Ya,Icr),e(Ya,x2e),e(x2e,Ncr),e(Ya,qcr),e(uo,jcr),e(uo,Dd),e(Dd,sT),e(sT,$2e),e($2e,Dcr),e(sT,Gcr),e(sT,mQ),e(mQ,Ocr),e(sT,Vcr),e(Dd,Xcr),e(Dd,lT),e(lT,k2e),e(k2e,zcr),e(lT,Wcr),e(lT,gQ),e(gQ,Qcr),e(lT,Hcr),e(Dd,Ucr),e(Dd,iT),e(iT,S2e),e(S2e,Jcr),e(iT,Ycr),e(iT,hQ),e(hQ,Kcr),e(iT,Zcr),e(uo,efr),e(uo,dT),e(dT,ofr),e(dT,R2e),e(R2e,rfr),e(dT,tfr),e(dT,P2e),e(P2e,afr),e(uo,nfr),M(cT,uo,null),b(f,oOe,_),b(f,Gd,_),e(Gd,fT),e(fT,B2e),M(j8,B2e,null),e(Gd,sfr),e(Gd,I2e),e(I2e,lfr),b(f,rOe,_),b(f,Uo,_),M(D8,Uo,null),e(Uo,ifr),e(Uo,Od),e(Od,dfr),e(Od,pQ),e(pQ,cfr),e(Od,ffr),e(Od,uQ),e(uQ,mfr),e(Od,gfr),e(Uo,hfr),e(Uo,G8),e(G8,pfr),e(G8,N2e),e(N2e,ufr),e(G8,_fr),e(Uo,bfr),e(Uo,At),M(O8,At,null),e(At,vfr),e(At,q2e),e(q2e,Ffr),e(At,Tfr),e(At,Vd),e(Vd,Mfr),e(Vd,j2e),e(j2e,Efr),e(Vd,Cfr),e(Vd,_Q),e(_Q,wfr),e(Vd,Afr),e(At,Lfr),M(mT,At,null),e(Uo,yfr),e(Uo,_o),M(V8,_o,null),e(_o,xfr),e(_o,D2e),e(D2e,$fr),e(_o,kfr),e(_o,Ka),e(Ka,Sfr),e(Ka,G2e),e(G2e,Rfr),e(Ka,Pfr),e(Ka,O2e),e(O2e,Bfr),e(Ka,Ifr),e(Ka,V2e),e(V2e,Nfr),e(Ka,qfr),e(_o,jfr),e(_o,X8),e(X8,gT),e(gT,X2e),e(X2e,Dfr),e(gT,Gfr),e(gT,bQ),e(bQ,Ofr),e(gT,Vfr),e(X8,Xfr),e(X8,hT),e(hT,z2e),e(z2e,zfr),e(hT,Wfr),e(hT,vQ),e(vQ,Qfr),e(hT,Hfr),e(_o,Ufr),e(_o,pT),e(pT,Jfr),e(pT,W2e),e(W2e,Yfr),e(pT,Kfr),e(pT,Q2e),e(Q2e,Zfr),e(_o,emr),M(uT,_o,null),b(f,tOe,_),b(f,Xd,_),e(Xd,_T),e(_T,H2e),M(z8,H2e,null),e(Xd,omr),e(Xd,U2e),e(U2e,rmr),b(f,aOe,_),b(f,Jo,_),M(W8,Jo,null),e(Jo,tmr),e(Jo,zd),e(zd,amr),e(zd,FQ),e(FQ,nmr),e(zd,smr),e(zd,TQ),e(TQ,lmr),e(zd,imr),e(Jo,dmr),e(Jo,Q8),e(Q8,cmr),e(Q8,J2e),e(J2e,fmr),e(Q8,mmr),e(Jo,gmr),e(Jo,Lt),M(H8,Lt,null),e(Lt,hmr),e(Lt,Y2e),e(Y2e,pmr),e(Lt,umr),e(Lt,Wd),e(Wd,_mr),e(Wd,K2e),e(K2e,bmr),e(Wd,vmr),e(Wd,MQ),e(MQ,Fmr),e(Wd,Tmr),e(Lt,Mmr),M(bT,Lt,null),e(Jo,Emr),e(Jo,bo),M(U8,bo,null),e(bo,Cmr),e(bo,Z2e),e(Z2e,wmr),e(bo,Amr),e(bo,Za),e(Za,Lmr),e(Za,ebe),e(ebe,ymr),e(Za,xmr),e(Za,obe),e(obe,$mr),e(Za,kmr),e(Za,rbe),e(rbe,Smr),e(Za,Rmr),e(bo,Pmr),e(bo,tbe),e(tbe,vT),e(vT,abe),e(abe,Bmr),e(vT,Imr),e(vT,EQ),e(EQ,Nmr),e(vT,qmr),e(bo,jmr),e(bo,FT),e(FT,Dmr),e(FT,nbe),e(nbe,Gmr),e(FT,Omr),e(FT,sbe),e(sbe,Vmr),e(bo,Xmr),M(TT,bo,null),b(f,nOe,_),b(f,Qd,_),e(Qd,MT),e(MT,lbe),M(J8,lbe,null),e(Qd,zmr),e(Qd,ibe),e(ibe,Wmr),b(f,sOe,_),b(f,Yo,_),M(Y8,Yo,null),e(Yo,Qmr),e(Yo,Hd),e(Hd,Hmr),e(Hd,CQ),e(CQ,Umr),e(Hd,Jmr),e(Hd,wQ),e(wQ,Ymr),e(Hd,Kmr),e(Yo,Zmr),e(Yo,K8),e(K8,egr),e(K8,dbe),e(dbe,ogr),e(K8,rgr),e(Yo,tgr),e(Yo,yt),M(Z8,yt,null),e(yt,agr),e(yt,cbe),e(cbe,ngr),e(yt,sgr),e(yt,Ud),e(Ud,lgr),e(Ud,fbe),e(fbe,igr),e(Ud,dgr),e(Ud,AQ),e(AQ,cgr),e(Ud,fgr),e(yt,mgr),M(ET,yt,null),e(Yo,ggr),e(Yo,vo),M(e9,vo,null),e(vo,hgr),e(vo,mbe),e(mbe,pgr),e(vo,ugr),e(vo,en),e(en,_gr),e(en,gbe),e(gbe,bgr),e(en,vgr),e(en,hbe),e(hbe,Fgr),e(en,Tgr),e(en,pbe),e(pbe,Mgr),e(en,Egr),e(vo,Cgr),e(vo,on),e(on,CT),e(CT,ube),e(ube,wgr),e(CT,Agr),e(CT,LQ),e(LQ,Lgr),e(CT,ygr),e(on,xgr),e(on,wT),e(wT,_be),e(_be,$gr),e(wT,kgr),e(wT,yQ),e(yQ,Sgr),e(wT,Rgr),e(on,Pgr),e(on,AT),e(AT,bbe),e(bbe,Bgr),e(AT,Igr),e(AT,xQ),e(xQ,Ngr),e(AT,qgr),e(on,jgr),e(on,LT),e(LT,vbe),e(vbe,Dgr),e(LT,Ggr),e(LT,$Q),e($Q,Ogr),e(LT,Vgr),e(vo,Xgr),e(vo,yT),e(yT,zgr),e(yT,Fbe),e(Fbe,Wgr),e(yT,Qgr),e(yT,Tbe),e(Tbe,Hgr),e(vo,Ugr),M(xT,vo,null),b(f,lOe,_),b(f,Jd,_),e(Jd,$T),e($T,Mbe),M(o9,Mbe,null),e(Jd,Jgr),e(Jd,Ebe),e(Ebe,Ygr),b(f,iOe,_),b(f,Ko,_),M(r9,Ko,null),e(Ko,Kgr),e(Ko,Yd),e(Yd,Zgr),e(Yd,kQ),e(kQ,ehr),e(Yd,ohr),e(Yd,SQ),e(SQ,rhr),e(Yd,thr),e(Ko,ahr),e(Ko,t9),e(t9,nhr),e(t9,Cbe),e(Cbe,shr),e(t9,lhr),e(Ko,ihr),e(Ko,xt),M(a9,xt,null),e(xt,dhr),e(xt,wbe),e(wbe,chr),e(xt,fhr),e(xt,Kd),e(Kd,mhr),e(Kd,Abe),e(Abe,ghr),e(Kd,hhr),e(Kd,RQ),e(RQ,phr),e(Kd,uhr),e(xt,_hr),M(kT,xt,null),e(Ko,bhr),e(Ko,Fo),M(n9,Fo,null),e(Fo,vhr),e(Fo,Lbe),e(Lbe,Fhr),e(Fo,Thr),e(Fo,rn),e(rn,Mhr),e(rn,ybe),e(ybe,Ehr),e(rn,Chr),e(rn,xbe),e(xbe,whr),e(rn,Ahr),e(rn,$be),e($be,Lhr),e(rn,yhr),e(Fo,xhr),e(Fo,kbe),e(kbe,ST),e(ST,Sbe),e(Sbe,$hr),e(ST,khr),e(ST,PQ),e(PQ,Shr),e(ST,Rhr),e(Fo,Phr),e(Fo,RT),e(RT,Bhr),e(RT,Rbe),e(Rbe,Ihr),e(RT,Nhr),e(RT,Pbe),e(Pbe,qhr),e(Fo,jhr),M(PT,Fo,null),b(f,dOe,_),b(f,Zd,_),e(Zd,BT),e(BT,Bbe),M(s9,Bbe,null),e(Zd,Dhr),e(Zd,Ibe),e(Ibe,Ghr),b(f,cOe,_),b(f,Zo,_),M(l9,Zo,null),e(Zo,Ohr),e(Zo,ec),e(ec,Vhr),e(ec,BQ),e(BQ,Xhr),e(ec,zhr),e(ec,IQ),e(IQ,Whr),e(ec,Qhr),e(Zo,Hhr),e(Zo,i9),e(i9,Uhr),e(i9,Nbe),e(Nbe,Jhr),e(i9,Yhr),e(Zo,Khr),e(Zo,$t),M(d9,$t,null),e($t,Zhr),e($t,qbe),e(qbe,epr),e($t,opr),e($t,oc),e(oc,rpr),e(oc,jbe),e(jbe,tpr),e(oc,apr),e(oc,NQ),e(NQ,npr),e(oc,spr),e($t,lpr),M(IT,$t,null),e(Zo,ipr),e(Zo,Lr),M(c9,Lr,null),e(Lr,dpr),e(Lr,Dbe),e(Dbe,cpr),e(Lr,fpr),e(Lr,tn),e(tn,mpr),e(tn,Gbe),e(Gbe,gpr),e(tn,hpr),e(tn,Obe),e(Obe,ppr),e(tn,upr),e(tn,Vbe),e(Vbe,_pr),e(tn,bpr),e(Lr,vpr),e(Lr,q),e(q,NT),e(NT,Xbe),e(Xbe,Fpr),e(NT,Tpr),e(NT,qQ),e(qQ,Mpr),e(NT,Epr),e(q,Cpr),e(q,qT),e(qT,zbe),e(zbe,wpr),e(qT,Apr),e(qT,jQ),e(jQ,Lpr),e(qT,ypr),e(q,xpr),e(q,jT),e(jT,Wbe),e(Wbe,$pr),e(jT,kpr),e(jT,DQ),e(DQ,Spr),e(jT,Rpr),e(q,Ppr),e(q,DT),e(DT,Qbe),e(Qbe,Bpr),e(DT,Ipr),e(DT,GQ),e(GQ,Npr),e(DT,qpr),e(q,jpr),e(q,GT),e(GT,Hbe),e(Hbe,Dpr),e(GT,Gpr),e(GT,OQ),e(OQ,Opr),e(GT,Vpr),e(q,Xpr),e(q,OT),e(OT,Ube),e(Ube,zpr),e(OT,Wpr),e(OT,VQ),e(VQ,Qpr),e(OT,Hpr),e(q,Upr),e(q,VT),e(VT,Jbe),e(Jbe,Jpr),e(VT,Ypr),e(VT,XQ),e(XQ,Kpr),e(VT,Zpr),e(q,eur),e(q,XT),e(XT,Ybe),e(Ybe,our),e(XT,rur),e(XT,zQ),e(zQ,tur),e(XT,aur),e(q,nur),e(q,zT),e(zT,Kbe),e(Kbe,sur),e(zT,lur),e(zT,WQ),e(WQ,iur),e(zT,dur),e(q,cur),e(q,WT),e(WT,Zbe),e(Zbe,fur),e(WT,mur),e(WT,QQ),e(QQ,gur),e(WT,hur),e(q,pur),e(q,QT),e(QT,eve),e(eve,uur),e(QT,_ur),e(QT,HQ),e(HQ,bur),e(QT,vur),e(q,Fur),e(q,HT),e(HT,ove),e(ove,Tur),e(HT,Mur),e(HT,UQ),e(UQ,Eur),e(HT,Cur),e(q,wur),e(q,UT),e(UT,rve),e(rve,Aur),e(UT,Lur),e(UT,JQ),e(JQ,yur),e(UT,xur),e(q,$ur),e(q,JT),e(JT,tve),e(tve,kur),e(JT,Sur),e(JT,YQ),e(YQ,Rur),e(JT,Pur),e(q,Bur),e(q,YT),e(YT,ave),e(ave,Iur),e(YT,Nur),e(YT,KQ),e(KQ,qur),e(YT,jur),e(q,Dur),e(q,KT),e(KT,nve),e(nve,Gur),e(KT,Our),e(KT,ZQ),e(ZQ,Vur),e(KT,Xur),e(q,zur),e(q,ZT),e(ZT,sve),e(sve,Wur),e(ZT,Qur),e(ZT,eH),e(eH,Hur),e(ZT,Uur),e(q,Jur),e(q,Xs),e(Xs,lve),e(lve,Yur),e(Xs,Kur),e(Xs,oH),e(oH,Zur),e(Xs,e_r),e(Xs,rH),e(rH,o_r),e(Xs,r_r),e(q,t_r),e(q,eM),e(eM,ive),e(ive,a_r),e(eM,n_r),e(eM,tH),e(tH,s_r),e(eM,l_r),e(q,i_r),e(q,oM),e(oM,dve),e(dve,d_r),e(oM,c_r),e(oM,aH),e(aH,f_r),e(oM,m_r),e(q,g_r),e(q,rM),e(rM,cve),e(cve,h_r),e(rM,p_r),e(rM,nH),e(nH,u_r),e(rM,__r),e(q,b_r),e(q,tM),e(tM,fve),e(fve,v_r),e(tM,F_r),e(tM,sH),e(sH,T_r),e(tM,M_r),e(q,E_r),e(q,aM),e(aM,mve),e(mve,C_r),e(aM,w_r),e(aM,lH),e(lH,A_r),e(aM,L_r),e(q,y_r),e(q,nM),e(nM,gve),e(gve,x_r),e(nM,$_r),e(nM,iH),e(iH,k_r),e(nM,S_r),e(q,R_r),e(q,sM),e(sM,hve),e(hve,P_r),e(sM,B_r),e(sM,dH),e(dH,I_r),e(sM,N_r),e(q,q_r),e(q,lM),e(lM,pve),e(pve,j_r),e(lM,D_r),e(lM,cH),e(cH,G_r),e(lM,O_r),e(q,V_r),e(q,iM),e(iM,uve),e(uve,X_r),e(iM,z_r),e(iM,fH),e(fH,W_r),e(iM,Q_r),e(q,H_r),e(q,dM),e(dM,_ve),e(_ve,U_r),e(dM,J_r),e(dM,mH),e(mH,Y_r),e(dM,K_r),e(q,Z_r),e(q,cM),e(cM,bve),e(bve,e7r),e(cM,o7r),e(cM,gH),e(gH,r7r),e(cM,t7r),e(q,a7r),e(q,fM),e(fM,vve),e(vve,n7r),e(fM,s7r),e(fM,hH),e(hH,l7r),e(fM,i7r),e(q,d7r),e(q,mM),e(mM,Fve),e(Fve,c7r),e(mM,f7r),e(mM,pH),e(pH,m7r),e(mM,g7r),e(q,h7r),e(q,gM),e(gM,Tve),e(Tve,p7r),e(gM,u7r),e(gM,uH),e(uH,_7r),e(gM,b7r),e(q,v7r),e(q,hM),e(hM,Mve),e(Mve,F7r),e(hM,T7r),e(hM,_H),e(_H,M7r),e(hM,E7r),e(q,C7r),e(q,pM),e(pM,Eve),e(Eve,w7r),e(pM,A7r),e(pM,bH),e(bH,L7r),e(pM,y7r),e(q,x7r),e(q,uM),e(uM,Cve),e(Cve,$7r),e(uM,k7r),e(uM,vH),e(vH,S7r),e(uM,R7r),e(q,P7r),e(q,_M),e(_M,wve),e(wve,B7r),e(_M,I7r),e(_M,FH),e(FH,N7r),e(_M,q7r),e(q,j7r),e(q,bM),e(bM,Ave),e(Ave,D7r),e(bM,G7r),e(bM,TH),e(TH,O7r),e(bM,V7r),e(q,X7r),e(q,vM),e(vM,Lve),e(Lve,z7r),e(vM,W7r),e(vM,MH),e(MH,Q7r),e(vM,H7r),e(q,U7r),e(q,FM),e(FM,yve),e(yve,J7r),e(FM,Y7r),e(FM,EH),e(EH,K7r),e(FM,Z7r),e(q,e1r),e(q,TM),e(TM,xve),e(xve,o1r),e(TM,r1r),e(TM,CH),e(CH,t1r),e(TM,a1r),e(q,n1r),e(q,MM),e(MM,$ve),e($ve,s1r),e(MM,l1r),e(MM,wH),e(wH,i1r),e(MM,d1r),e(q,c1r),e(q,EM),e(EM,kve),e(kve,f1r),e(EM,m1r),e(EM,AH),e(AH,g1r),e(EM,h1r),e(q,p1r),e(q,CM),e(CM,Sve),e(Sve,u1r),e(CM,_1r),e(CM,LH),e(LH,b1r),e(CM,v1r),e(q,F1r),e(q,wM),e(wM,Rve),e(Rve,T1r),e(wM,M1r),e(wM,yH),e(yH,E1r),e(wM,C1r),e(q,w1r),e(q,AM),e(AM,Pve),e(Pve,A1r),e(AM,L1r),e(AM,xH),e(xH,y1r),e(AM,x1r),e(q,$1r),e(q,LM),e(LM,Bve),e(Bve,k1r),e(LM,S1r),e(LM,$H),e($H,R1r),e(LM,P1r),e(q,B1r),e(q,yM),e(yM,Ive),e(Ive,I1r),e(yM,N1r),e(yM,kH),e(kH,q1r),e(yM,j1r),e(Lr,D1r),M(xM,Lr,null),b(f,fOe,_),b(f,rc,_),e(rc,$M),e($M,Nve),M(f9,Nve,null),e(rc,G1r),e(rc,qve),e(qve,O1r),b(f,mOe,_),b(f,er,_),M(m9,er,null),e(er,V1r),e(er,tc),e(tc,X1r),e(tc,SH),e(SH,z1r),e(tc,W1r),e(tc,RH),e(RH,Q1r),e(tc,H1r),e(er,U1r),e(er,g9),e(g9,J1r),e(g9,jve),e(jve,Y1r),e(g9,K1r),e(er,Z1r),e(er,kt),M(h9,kt,null),e(kt,e2r),e(kt,Dve),e(Dve,o2r),e(kt,r2r),e(kt,ac),e(ac,t2r),e(ac,Gve),e(Gve,a2r),e(ac,n2r),e(ac,PH),e(PH,s2r),e(ac,l2r),e(kt,i2r),M(kM,kt,null),e(er,d2r),e(er,yr),M(p9,yr,null),e(yr,c2r),e(yr,Ove),e(Ove,f2r),e(yr,m2r),e(yr,an),e(an,g2r),e(an,Vve),e(Vve,h2r),e(an,p2r),e(an,Xve),e(Xve,u2r),e(an,_2r),e(an,zve),e(zve,b2r),e(an,v2r),e(yr,F2r),e(yr,se),e(se,SM),e(SM,Wve),e(Wve,T2r),e(SM,M2r),e(SM,BH),e(BH,E2r),e(SM,C2r),e(se,w2r),e(se,RM),e(RM,Qve),e(Qve,A2r),e(RM,L2r),e(RM,IH),e(IH,y2r),e(RM,x2r),e(se,$2r),e(se,PM),e(PM,Hve),e(Hve,k2r),e(PM,S2r),e(PM,NH),e(NH,R2r),e(PM,P2r),e(se,B2r),e(se,BM),e(BM,Uve),e(Uve,I2r),e(BM,N2r),e(BM,qH),e(qH,q2r),e(BM,j2r),e(se,D2r),e(se,IM),e(IM,Jve),e(Jve,G2r),e(IM,O2r),e(IM,jH),e(jH,V2r),e(IM,X2r),e(se,z2r),e(se,NM),e(NM,Yve),e(Yve,W2r),e(NM,Q2r),e(NM,DH),e(DH,H2r),e(NM,U2r),e(se,J2r),e(se,qM),e(qM,Kve),e(Kve,Y2r),e(qM,K2r),e(qM,GH),e(GH,Z2r),e(qM,ebr),e(se,obr),e(se,jM),e(jM,Zve),e(Zve,rbr),e(jM,tbr),e(jM,OH),e(OH,abr),e(jM,nbr),e(se,sbr),e(se,DM),e(DM,e0e),e(e0e,lbr),e(DM,ibr),e(DM,VH),e(VH,dbr),e(DM,cbr),e(se,fbr),e(se,GM),e(GM,o0e),e(o0e,mbr),e(GM,gbr),e(GM,XH),e(XH,hbr),e(GM,pbr),e(se,ubr),e(se,OM),e(OM,r0e),e(r0e,_br),e(OM,bbr),e(OM,zH),e(zH,vbr),e(OM,Fbr),e(se,Tbr),e(se,VM),e(VM,t0e),e(t0e,Mbr),e(VM,Ebr),e(VM,WH),e(WH,Cbr),e(VM,wbr),e(se,Abr),e(se,XM),e(XM,a0e),e(a0e,Lbr),e(XM,ybr),e(XM,QH),e(QH,xbr),e(XM,$br),e(se,kbr),e(se,zM),e(zM,n0e),e(n0e,Sbr),e(zM,Rbr),e(zM,HH),e(HH,Pbr),e(zM,Bbr),e(se,Ibr),e(se,WM),e(WM,s0e),e(s0e,Nbr),e(WM,qbr),e(WM,UH),e(UH,jbr),e(WM,Dbr),e(se,Gbr),e(se,QM),e(QM,l0e),e(l0e,Obr),e(QM,Vbr),e(QM,JH),e(JH,Xbr),e(QM,zbr),e(se,Wbr),e(se,HM),e(HM,i0e),e(i0e,Qbr),e(HM,Hbr),e(HM,YH),e(YH,Ubr),e(HM,Jbr),e(se,Ybr),e(se,UM),e(UM,d0e),e(d0e,Kbr),e(UM,Zbr),e(UM,KH),e(KH,evr),e(UM,ovr),e(se,rvr),e(se,JM),e(JM,c0e),e(c0e,tvr),e(JM,avr),e(JM,ZH),e(ZH,nvr),e(JM,svr),e(se,lvr),e(se,YM),e(YM,f0e),e(f0e,ivr),e(YM,dvr),e(YM,eU),e(eU,cvr),e(YM,fvr),e(se,mvr),e(se,KM),e(KM,m0e),e(m0e,gvr),e(KM,hvr),e(KM,oU),e(oU,pvr),e(KM,uvr),e(se,_vr),e(se,ZM),e(ZM,g0e),e(g0e,bvr),e(ZM,vvr),e(ZM,rU),e(rU,Fvr),e(ZM,Tvr),e(se,Mvr),e(se,e4),e(e4,h0e),e(h0e,Evr),e(e4,Cvr),e(e4,tU),e(tU,wvr),e(e4,Avr),e(yr,Lvr),M(o4,yr,null),b(f,gOe,_),b(f,nc,_),e(nc,r4),e(r4,p0e),M(u9,p0e,null),e(nc,yvr),e(nc,u0e),e(u0e,xvr),b(f,hOe,_),b(f,or,_),M(_9,or,null),e(or,$vr),e(or,sc),e(sc,kvr),e(sc,aU),e(aU,Svr),e(sc,Rvr),e(sc,nU),e(nU,Pvr),e(sc,Bvr),e(or,Ivr),e(or,b9),e(b9,Nvr),e(b9,_0e),e(_0e,qvr),e(b9,jvr),e(or,Dvr),e(or,St),M(v9,St,null),e(St,Gvr),e(St,b0e),e(b0e,Ovr),e(St,Vvr),e(St,lc),e(lc,Xvr),e(lc,v0e),e(v0e,zvr),e(lc,Wvr),e(lc,sU),e(sU,Qvr),e(lc,Hvr),e(St,Uvr),M(t4,St,null),e(or,Jvr),e(or,xr),M(F9,xr,null),e(xr,Yvr),e(xr,F0e),e(F0e,Kvr),e(xr,Zvr),e(xr,nn),e(nn,e0r),e(nn,T0e),e(T0e,o0r),e(nn,r0r),e(nn,M0e),e(M0e,t0r),e(nn,a0r),e(nn,E0e),e(E0e,n0r),e(nn,s0r),e(xr,l0r),e(xr,Me),e(Me,a4),e(a4,C0e),e(C0e,i0r),e(a4,d0r),e(a4,lU),e(lU,c0r),e(a4,f0r),e(Me,m0r),e(Me,n4),e(n4,w0e),e(w0e,g0r),e(n4,h0r),e(n4,iU),e(iU,p0r),e(n4,u0r),e(Me,_0r),e(Me,s4),e(s4,A0e),e(A0e,b0r),e(s4,v0r),e(s4,dU),e(dU,F0r),e(s4,T0r),e(Me,M0r),e(Me,l4),e(l4,L0e),e(L0e,E0r),e(l4,C0r),e(l4,cU),e(cU,w0r),e(l4,A0r),e(Me,L0r),e(Me,i4),e(i4,y0e),e(y0e,y0r),e(i4,x0r),e(i4,fU),e(fU,$0r),e(i4,k0r),e(Me,S0r),e(Me,d4),e(d4,x0e),e(x0e,R0r),e(d4,P0r),e(d4,mU),e(mU,B0r),e(d4,I0r),e(Me,N0r),e(Me,c4),e(c4,$0e),e($0e,q0r),e(c4,j0r),e(c4,gU),e(gU,D0r),e(c4,G0r),e(Me,O0r),e(Me,f4),e(f4,k0e),e(k0e,V0r),e(f4,X0r),e(f4,hU),e(hU,z0r),e(f4,W0r),e(Me,Q0r),e(Me,m4),e(m4,S0e),e(S0e,H0r),e(m4,U0r),e(m4,pU),e(pU,J0r),e(m4,Y0r),e(Me,K0r),e(Me,g4),e(g4,R0e),e(R0e,Z0r),e(g4,eFr),e(g4,uU),e(uU,oFr),e(g4,rFr),e(Me,tFr),e(Me,h4),e(h4,P0e),e(P0e,aFr),e(h4,nFr),e(h4,_U),e(_U,sFr),e(h4,lFr),e(Me,iFr),e(Me,p4),e(p4,B0e),e(B0e,dFr),e(p4,cFr),e(p4,bU),e(bU,fFr),e(p4,mFr),e(Me,gFr),e(Me,u4),e(u4,I0e),e(I0e,hFr),e(u4,pFr),e(u4,vU),e(vU,uFr),e(u4,_Fr),e(xr,bFr),M(_4,xr,null),b(f,pOe,_),b(f,ic,_),e(ic,b4),e(b4,N0e),M(T9,N0e,null),e(ic,vFr),e(ic,q0e),e(q0e,FFr),b(f,uOe,_),b(f,rr,_),M(M9,rr,null),e(rr,TFr),e(rr,dc),e(dc,MFr),e(dc,FU),e(FU,EFr),e(dc,CFr),e(dc,TU),e(TU,wFr),e(dc,AFr),e(rr,LFr),e(rr,E9),e(E9,yFr),e(E9,j0e),e(j0e,xFr),e(E9,$Fr),e(rr,kFr),e(rr,Rt),M(C9,Rt,null),e(Rt,SFr),e(Rt,D0e),e(D0e,RFr),e(Rt,PFr),e(Rt,cc),e(cc,BFr),e(cc,G0e),e(G0e,IFr),e(cc,NFr),e(cc,MU),e(MU,qFr),e(cc,jFr),e(Rt,DFr),M(v4,Rt,null),e(rr,GFr),e(rr,$r),M(w9,$r,null),e($r,OFr),e($r,O0e),e(O0e,VFr),e($r,XFr),e($r,sn),e(sn,zFr),e(sn,V0e),e(V0e,WFr),e(sn,QFr),e(sn,X0e),e(X0e,HFr),e(sn,UFr),e(sn,z0e),e(z0e,JFr),e(sn,YFr),e($r,KFr),e($r,ln),e(ln,F4),e(F4,W0e),e(W0e,ZFr),e(F4,eTr),e(F4,EU),e(EU,oTr),e(F4,rTr),e(ln,tTr),e(ln,T4),e(T4,Q0e),e(Q0e,aTr),e(T4,nTr),e(T4,CU),e(CU,sTr),e(T4,lTr),e(ln,iTr),e(ln,M4),e(M4,H0e),e(H0e,dTr),e(M4,cTr),e(M4,wU),e(wU,fTr),e(M4,mTr),e(ln,gTr),e(ln,E4),e(E4,U0e),e(U0e,hTr),e(E4,pTr),e(E4,AU),e(AU,uTr),e(E4,_Tr),e($r,bTr),M(C4,$r,null),b(f,_Oe,_),b(f,fc,_),e(fc,w4),e(w4,J0e),M(A9,J0e,null),e(fc,vTr),e(fc,Y0e),e(Y0e,FTr),b(f,bOe,_),b(f,tr,_),M(L9,tr,null),e(tr,TTr),e(tr,mc),e(mc,MTr),e(mc,LU),e(LU,ETr),e(mc,CTr),e(mc,yU),e(yU,wTr),e(mc,ATr),e(tr,LTr),e(tr,y9),e(y9,yTr),e(y9,K0e),e(K0e,xTr),e(y9,$Tr),e(tr,kTr),e(tr,Pt),M(x9,Pt,null),e(Pt,STr),e(Pt,Z0e),e(Z0e,RTr),e(Pt,PTr),e(Pt,gc),e(gc,BTr),e(gc,eFe),e(eFe,ITr),e(gc,NTr),e(gc,xU),e(xU,qTr),e(gc,jTr),e(Pt,DTr),M(A4,Pt,null),e(tr,GTr),e(tr,kr),M($9,kr,null),e(kr,OTr),e(kr,oFe),e(oFe,VTr),e(kr,XTr),e(kr,dn),e(dn,zTr),e(dn,rFe),e(rFe,WTr),e(dn,QTr),e(dn,tFe),e(tFe,HTr),e(dn,UTr),e(dn,aFe),e(aFe,JTr),e(dn,YTr),e(kr,KTr),e(kr,ie),e(ie,L4),e(L4,nFe),e(nFe,ZTr),e(L4,eMr),e(L4,$U),e($U,oMr),e(L4,rMr),e(ie,tMr),e(ie,y4),e(y4,sFe),e(sFe,aMr),e(y4,nMr),e(y4,kU),e(kU,sMr),e(y4,lMr),e(ie,iMr),e(ie,x4),e(x4,lFe),e(lFe,dMr),e(x4,cMr),e(x4,SU),e(SU,fMr),e(x4,mMr),e(ie,gMr),e(ie,$4),e($4,iFe),e(iFe,hMr),e($4,pMr),e($4,RU),e(RU,uMr),e($4,_Mr),e(ie,bMr),e(ie,k4),e(k4,dFe),e(dFe,vMr),e(k4,FMr),e(k4,PU),e(PU,TMr),e(k4,MMr),e(ie,EMr),e(ie,S4),e(S4,cFe),e(cFe,CMr),e(S4,wMr),e(S4,BU),e(BU,AMr),e(S4,LMr),e(ie,yMr),e(ie,R4),e(R4,fFe),e(fFe,xMr),e(R4,$Mr),e(R4,IU),e(IU,kMr),e(R4,SMr),e(ie,RMr),e(ie,P4),e(P4,mFe),e(mFe,PMr),e(P4,BMr),e(P4,NU),e(NU,IMr),e(P4,NMr),e(ie,qMr),e(ie,B4),e(B4,gFe),e(gFe,jMr),e(B4,DMr),e(B4,qU),e(qU,GMr),e(B4,OMr),e(ie,VMr),e(ie,I4),e(I4,hFe),e(hFe,XMr),e(I4,zMr),e(I4,jU),e(jU,WMr),e(I4,QMr),e(ie,HMr),e(ie,N4),e(N4,pFe),e(pFe,UMr),e(N4,JMr),e(N4,DU),e(DU,YMr),e(N4,KMr),e(ie,ZMr),e(ie,q4),e(q4,uFe),e(uFe,e4r),e(q4,o4r),e(q4,GU),e(GU,r4r),e(q4,t4r),e(ie,a4r),e(ie,j4),e(j4,_Fe),e(_Fe,n4r),e(j4,s4r),e(j4,OU),e(OU,l4r),e(j4,i4r),e(ie,d4r),e(ie,D4),e(D4,bFe),e(bFe,c4r),e(D4,f4r),e(D4,VU),e(VU,m4r),e(D4,g4r),e(ie,h4r),e(ie,G4),e(G4,vFe),e(vFe,p4r),e(G4,u4r),e(G4,XU),e(XU,_4r),e(G4,b4r),e(ie,v4r),e(ie,O4),e(O4,FFe),e(FFe,F4r),e(O4,T4r),e(O4,zU),e(zU,M4r),e(O4,E4r),e(ie,C4r),e(ie,V4),e(V4,TFe),e(TFe,w4r),e(V4,A4r),e(V4,WU),e(WU,L4r),e(V4,y4r),e(ie,x4r),e(ie,X4),e(X4,MFe),e(MFe,$4r),e(X4,k4r),e(X4,QU),e(QU,S4r),e(X4,R4r),e(ie,P4r),e(ie,z4),e(z4,EFe),e(EFe,B4r),e(z4,I4r),e(z4,HU),e(HU,N4r),e(z4,q4r),e(ie,j4r),e(ie,W4),e(W4,CFe),e(CFe,D4r),e(W4,G4r),e(W4,UU),e(UU,O4r),e(W4,V4r),e(kr,X4r),M(Q4,kr,null),b(f,vOe,_),b(f,hc,_),e(hc,H4),e(H4,wFe),M(k9,wFe,null),e(hc,z4r),e(hc,AFe),e(AFe,W4r),b(f,FOe,_),b(f,ar,_),M(S9,ar,null),e(ar,Q4r),e(ar,pc),e(pc,H4r),e(pc,JU),e(JU,U4r),e(pc,J4r),e(pc,YU),e(YU,Y4r),e(pc,K4r),e(ar,Z4r),e(ar,R9),e(R9,eEr),e(R9,LFe),e(LFe,oEr),e(R9,rEr),e(ar,tEr),e(ar,Bt),M(P9,Bt,null),e(Bt,aEr),e(Bt,yFe),e(yFe,nEr),e(Bt,sEr),e(Bt,uc),e(uc,lEr),e(uc,xFe),e(xFe,iEr),e(uc,dEr),e(uc,KU),e(KU,cEr),e(uc,fEr),e(Bt,mEr),M(U4,Bt,null),e(ar,gEr),e(ar,Sr),M(B9,Sr,null),e(Sr,hEr),e(Sr,$Fe),e($Fe,pEr),e(Sr,uEr),e(Sr,cn),e(cn,_Er),e(cn,kFe),e(kFe,bEr),e(cn,vEr),e(cn,SFe),e(SFe,FEr),e(cn,TEr),e(cn,RFe),e(RFe,MEr),e(cn,EEr),e(Sr,CEr),e(Sr,ye),e(ye,J4),e(J4,PFe),e(PFe,wEr),e(J4,AEr),e(J4,ZU),e(ZU,LEr),e(J4,yEr),e(ye,xEr),e(ye,Y4),e(Y4,BFe),e(BFe,$Er),e(Y4,kEr),e(Y4,eJ),e(eJ,SEr),e(Y4,REr),e(ye,PEr),e(ye,K4),e(K4,IFe),e(IFe,BEr),e(K4,IEr),e(K4,oJ),e(oJ,NEr),e(K4,qEr),e(ye,jEr),e(ye,Z4),e(Z4,NFe),e(NFe,DEr),e(Z4,GEr),e(Z4,rJ),e(rJ,OEr),e(Z4,VEr),e(ye,XEr),e(ye,eE),e(eE,qFe),e(qFe,zEr),e(eE,WEr),e(eE,tJ),e(tJ,QEr),e(eE,HEr),e(ye,UEr),e(ye,oE),e(oE,jFe),e(jFe,JEr),e(oE,YEr),e(oE,aJ),e(aJ,KEr),e(oE,ZEr),e(ye,eCr),e(ye,rE),e(rE,DFe),e(DFe,oCr),e(rE,rCr),e(rE,nJ),e(nJ,tCr),e(rE,aCr),e(ye,nCr),e(ye,tE),e(tE,GFe),e(GFe,sCr),e(tE,lCr),e(tE,sJ),e(sJ,iCr),e(tE,dCr),e(ye,cCr),e(ye,aE),e(aE,OFe),e(OFe,fCr),e(aE,mCr),e(aE,lJ),e(lJ,gCr),e(aE,hCr),e(ye,pCr),e(ye,nE),e(nE,VFe),e(VFe,uCr),e(nE,_Cr),e(nE,iJ),e(iJ,bCr),e(nE,vCr),e(Sr,FCr),M(sE,Sr,null),b(f,TOe,_),b(f,_c,_),e(_c,lE),e(lE,XFe),M(I9,XFe,null),e(_c,TCr),e(_c,zFe),e(zFe,MCr),b(f,MOe,_),b(f,nr,_),M(N9,nr,null),e(nr,ECr),e(nr,bc),e(bc,CCr),e(bc,dJ),e(dJ,wCr),e(bc,ACr),e(bc,cJ),e(cJ,LCr),e(bc,yCr),e(nr,xCr),e(nr,q9),e(q9,$Cr),e(q9,WFe),e(WFe,kCr),e(q9,SCr),e(nr,RCr),e(nr,It),M(j9,It,null),e(It,PCr),e(It,QFe),e(QFe,BCr),e(It,ICr),e(It,vc),e(vc,NCr),e(vc,HFe),e(HFe,qCr),e(vc,jCr),e(vc,fJ),e(fJ,DCr),e(vc,GCr),e(It,OCr),M(iE,It,null),e(nr,VCr),e(nr,Rr),M(D9,Rr,null),e(Rr,XCr),e(Rr,UFe),e(UFe,zCr),e(Rr,WCr),e(Rr,fn),e(fn,QCr),e(fn,JFe),e(JFe,HCr),e(fn,UCr),e(fn,YFe),e(YFe,JCr),e(fn,YCr),e(fn,KFe),e(KFe,KCr),e(fn,ZCr),e(Rr,e5r),e(Rr,ae),e(ae,dE),e(dE,ZFe),e(ZFe,o5r),e(dE,r5r),e(dE,mJ),e(mJ,t5r),e(dE,a5r),e(ae,n5r),e(ae,cE),e(cE,eTe),e(eTe,s5r),e(cE,l5r),e(cE,gJ),e(gJ,i5r),e(cE,d5r),e(ae,c5r),e(ae,fE),e(fE,oTe),e(oTe,f5r),e(fE,m5r),e(fE,hJ),e(hJ,g5r),e(fE,h5r),e(ae,p5r),e(ae,mE),e(mE,rTe),e(rTe,u5r),e(mE,_5r),e(mE,pJ),e(pJ,b5r),e(mE,v5r),e(ae,F5r),e(ae,gE),e(gE,tTe),e(tTe,T5r),e(gE,M5r),e(gE,uJ),e(uJ,E5r),e(gE,C5r),e(ae,w5r),e(ae,hE),e(hE,aTe),e(aTe,A5r),e(hE,L5r),e(hE,_J),e(_J,y5r),e(hE,x5r),e(ae,$5r),e(ae,pE),e(pE,nTe),e(nTe,k5r),e(pE,S5r),e(pE,bJ),e(bJ,R5r),e(pE,P5r),e(ae,B5r),e(ae,uE),e(uE,sTe),e(sTe,I5r),e(uE,N5r),e(uE,vJ),e(vJ,q5r),e(uE,j5r),e(ae,D5r),e(ae,_E),e(_E,lTe),e(lTe,G5r),e(_E,O5r),e(_E,FJ),e(FJ,V5r),e(_E,X5r),e(ae,z5r),e(ae,bE),e(bE,iTe),e(iTe,W5r),e(bE,Q5r),e(bE,TJ),e(TJ,H5r),e(bE,U5r),e(ae,J5r),e(ae,vE),e(vE,dTe),e(dTe,Y5r),e(vE,K5r),e(vE,MJ),e(MJ,Z5r),e(vE,e3r),e(ae,o3r),e(ae,FE),e(FE,cTe),e(cTe,r3r),e(FE,t3r),e(FE,EJ),e(EJ,a3r),e(FE,n3r),e(ae,s3r),e(ae,TE),e(TE,fTe),e(fTe,l3r),e(TE,i3r),e(TE,CJ),e(CJ,d3r),e(TE,c3r),e(ae,f3r),e(ae,ME),e(ME,mTe),e(mTe,m3r),e(ME,g3r),e(ME,wJ),e(wJ,h3r),e(ME,p3r),e(ae,u3r),e(ae,EE),e(EE,gTe),e(gTe,_3r),e(EE,b3r),e(EE,AJ),e(AJ,v3r),e(EE,F3r),e(ae,T3r),e(ae,CE),e(CE,hTe),e(hTe,M3r),e(CE,E3r),e(CE,LJ),e(LJ,C3r),e(CE,w3r),e(ae,A3r),e(ae,wE),e(wE,pTe),e(pTe,L3r),e(wE,y3r),e(wE,yJ),e(yJ,x3r),e(wE,$3r),e(ae,k3r),e(ae,AE),e(AE,uTe),e(uTe,S3r),e(AE,R3r),e(AE,xJ),e(xJ,P3r),e(AE,B3r),e(ae,I3r),e(ae,LE),e(LE,_Te),e(_Te,N3r),e(LE,q3r),e(LE,$J),e($J,j3r),e(LE,D3r),e(ae,G3r),e(ae,yE),e(yE,bTe),e(bTe,O3r),e(yE,V3r),e(yE,kJ),e(kJ,X3r),e(yE,z3r),e(ae,W3r),e(ae,xE),e(xE,vTe),e(vTe,Q3r),e(xE,H3r),e(xE,SJ),e(SJ,U3r),e(xE,J3r),e(ae,Y3r),e(ae,$E),e($E,FTe),e(FTe,K3r),e($E,Z3r),e($E,RJ),e(RJ,ewr),e($E,owr),e(ae,rwr),e(ae,kE),e(kE,TTe),e(TTe,twr),e(kE,awr),e(kE,PJ),e(PJ,nwr),e(kE,swr),e(ae,lwr),e(ae,SE),e(SE,MTe),e(MTe,iwr),e(SE,dwr),e(SE,BJ),e(BJ,cwr),e(SE,fwr),e(ae,mwr),e(ae,RE),e(RE,ETe),e(ETe,gwr),e(RE,hwr),e(RE,IJ),e(IJ,pwr),e(RE,uwr),e(ae,_wr),e(ae,PE),e(PE,CTe),e(CTe,bwr),e(PE,vwr),e(PE,NJ),e(NJ,Fwr),e(PE,Twr),e(Rr,Mwr),M(BE,Rr,null),b(f,EOe,_),b(f,Fc,_),e(Fc,IE),e(IE,wTe),M(G9,wTe,null),e(Fc,Ewr),e(Fc,ATe),e(ATe,Cwr),b(f,COe,_),b(f,sr,_),M(O9,sr,null),e(sr,wwr),e(sr,Tc),e(Tc,Awr),e(Tc,qJ),e(qJ,Lwr),e(Tc,ywr),e(Tc,jJ),e(jJ,xwr),e(Tc,$wr),e(sr,kwr),e(sr,V9),e(V9,Swr),e(V9,LTe),e(LTe,Rwr),e(V9,Pwr),e(sr,Bwr),e(sr,Nt),M(X9,Nt,null),e(Nt,Iwr),e(Nt,yTe),e(yTe,Nwr),e(Nt,qwr),e(Nt,Mc),e(Mc,jwr),e(Mc,xTe),e(xTe,Dwr),e(Mc,Gwr),e(Mc,DJ),e(DJ,Owr),e(Mc,Vwr),e(Nt,Xwr),M(NE,Nt,null),e(sr,zwr),e(sr,Pr),M(z9,Pr,null),e(Pr,Wwr),e(Pr,$Te),e($Te,Qwr),e(Pr,Hwr),e(Pr,mn),e(mn,Uwr),e(mn,kTe),e(kTe,Jwr),e(mn,Ywr),e(mn,STe),e(STe,Kwr),e(mn,Zwr),e(mn,RTe),e(RTe,eAr),e(mn,oAr),e(Pr,rAr),e(Pr,ue),e(ue,qE),e(qE,PTe),e(PTe,tAr),e(qE,aAr),e(qE,GJ),e(GJ,nAr),e(qE,sAr),e(ue,lAr),e(ue,jE),e(jE,BTe),e(BTe,iAr),e(jE,dAr),e(jE,OJ),e(OJ,cAr),e(jE,fAr),e(ue,mAr),e(ue,DE),e(DE,ITe),e(ITe,gAr),e(DE,hAr),e(DE,VJ),e(VJ,pAr),e(DE,uAr),e(ue,_Ar),e(ue,GE),e(GE,NTe),e(NTe,bAr),e(GE,vAr),e(GE,XJ),e(XJ,FAr),e(GE,TAr),e(ue,MAr),e(ue,OE),e(OE,qTe),e(qTe,EAr),e(OE,CAr),e(OE,zJ),e(zJ,wAr),e(OE,AAr),e(ue,LAr),e(ue,VE),e(VE,jTe),e(jTe,yAr),e(VE,xAr),e(VE,WJ),e(WJ,$Ar),e(VE,kAr),e(ue,SAr),e(ue,XE),e(XE,DTe),e(DTe,RAr),e(XE,PAr),e(XE,QJ),e(QJ,BAr),e(XE,IAr),e(ue,NAr),e(ue,zE),e(zE,GTe),e(GTe,qAr),e(zE,jAr),e(zE,HJ),e(HJ,DAr),e(zE,GAr),e(ue,OAr),e(ue,WE),e(WE,OTe),e(OTe,VAr),e(WE,XAr),e(WE,UJ),e(UJ,zAr),e(WE,WAr),e(ue,QAr),e(ue,QE),e(QE,VTe),e(VTe,HAr),e(QE,UAr),e(QE,JJ),e(JJ,JAr),e(QE,YAr),e(ue,KAr),e(ue,HE),e(HE,XTe),e(XTe,ZAr),e(HE,e6r),e(HE,YJ),e(YJ,o6r),e(HE,r6r),e(ue,t6r),e(ue,UE),e(UE,zTe),e(zTe,a6r),e(UE,n6r),e(UE,KJ),e(KJ,s6r),e(UE,l6r),e(ue,i6r),e(ue,JE),e(JE,WTe),e(WTe,d6r),e(JE,c6r),e(JE,ZJ),e(ZJ,f6r),e(JE,m6r),e(ue,g6r),e(ue,YE),e(YE,QTe),e(QTe,h6r),e(YE,p6r),e(YE,eY),e(eY,u6r),e(YE,_6r),e(ue,b6r),e(ue,KE),e(KE,HTe),e(HTe,v6r),e(KE,F6r),e(KE,oY),e(oY,T6r),e(KE,M6r),e(ue,E6r),e(ue,ZE),e(ZE,UTe),e(UTe,C6r),e(ZE,w6r),e(ZE,rY),e(rY,A6r),e(ZE,L6r),e(ue,y6r),e(ue,eC),e(eC,JTe),e(JTe,x6r),e(eC,$6r),e(eC,tY),e(tY,k6r),e(eC,S6r),e(Pr,R6r),M(oC,Pr,null),b(f,wOe,_),b(f,Ec,_),e(Ec,rC),e(rC,YTe),M(W9,YTe,null),e(Ec,P6r),e(Ec,KTe),e(KTe,B6r),b(f,AOe,_),b(f,lr,_),M(Q9,lr,null),e(lr,I6r),e(lr,Cc),e(Cc,N6r),e(Cc,aY),e(aY,q6r),e(Cc,j6r),e(Cc,nY),e(nY,D6r),e(Cc,G6r),e(lr,O6r),e(lr,H9),e(H9,V6r),e(H9,ZTe),e(ZTe,X6r),e(H9,z6r),e(lr,W6r),e(lr,qt),M(U9,qt,null),e(qt,Q6r),e(qt,eMe),e(eMe,H6r),e(qt,U6r),e(qt,wc),e(wc,J6r),e(wc,oMe),e(oMe,Y6r),e(wc,K6r),e(wc,sY),e(sY,Z6r),e(wc,eLr),e(qt,oLr),M(tC,qt,null),e(lr,rLr),e(lr,Br),M(J9,Br,null),e(Br,tLr),e(Br,rMe),e(rMe,aLr),e(Br,nLr),e(Br,gn),e(gn,sLr),e(gn,tMe),e(tMe,lLr),e(gn,iLr),e(gn,aMe),e(aMe,dLr),e(gn,cLr),e(gn,nMe),e(nMe,fLr),e(gn,mLr),e(Br,gLr),e(Br,Y9),e(Y9,aC),e(aC,sMe),e(sMe,hLr),e(aC,pLr),e(aC,lY),e(lY,uLr),e(aC,_Lr),e(Y9,bLr),e(Y9,nC),e(nC,lMe),e(lMe,vLr),e(nC,FLr),e(nC,iY),e(iY,TLr),e(nC,MLr),e(Br,ELr),M(sC,Br,null),b(f,LOe,_),b(f,Ac,_),e(Ac,lC),e(lC,iMe),M(K9,iMe,null),e(Ac,CLr),e(Ac,dMe),e(dMe,wLr),b(f,yOe,_),b(f,ir,_),M(Z9,ir,null),e(ir,ALr),e(ir,Lc),e(Lc,LLr),e(Lc,dY),e(dY,yLr),e(Lc,xLr),e(Lc,cY),e(cY,$Lr),e(Lc,kLr),e(ir,SLr),e(ir,ex),e(ex,RLr),e(ex,cMe),e(cMe,PLr),e(ex,BLr),e(ir,ILr),e(ir,jt),M(ox,jt,null),e(jt,NLr),e(jt,fMe),e(fMe,qLr),e(jt,jLr),e(jt,yc),e(yc,DLr),e(yc,mMe),e(mMe,GLr),e(yc,OLr),e(yc,fY),e(fY,VLr),e(yc,XLr),e(jt,zLr),M(iC,jt,null),e(ir,WLr),e(ir,Ir),M(rx,Ir,null),e(Ir,QLr),e(Ir,gMe),e(gMe,HLr),e(Ir,ULr),e(Ir,hn),e(hn,JLr),e(hn,hMe),e(hMe,YLr),e(hn,KLr),e(hn,pMe),e(pMe,ZLr),e(hn,eyr),e(hn,uMe),e(uMe,oyr),e(hn,ryr),e(Ir,tyr),e(Ir,_Me),e(_Me,dC),e(dC,bMe),e(bMe,ayr),e(dC,nyr),e(dC,mY),e(mY,syr),e(dC,lyr),e(Ir,iyr),M(cC,Ir,null),b(f,xOe,_),b(f,xc,_),e(xc,fC),e(fC,vMe),M(tx,vMe,null),e(xc,dyr),e(xc,FMe),e(FMe,cyr),b(f,$Oe,_),b(f,dr,_),M(ax,dr,null),e(dr,fyr),e(dr,$c),e($c,myr),e($c,gY),e(gY,gyr),e($c,hyr),e($c,hY),e(hY,pyr),e($c,uyr),e(dr,_yr),e(dr,nx),e(nx,byr),e(nx,TMe),e(TMe,vyr),e(nx,Fyr),e(dr,Tyr),e(dr,Dt),M(sx,Dt,null),e(Dt,Myr),e(Dt,MMe),e(MMe,Eyr),e(Dt,Cyr),e(Dt,kc),e(kc,wyr),e(kc,EMe),e(EMe,Ayr),e(kc,Lyr),e(kc,pY),e(pY,yyr),e(kc,xyr),e(Dt,$yr),M(mC,Dt,null),e(dr,kyr),e(dr,Nr),M(lx,Nr,null),e(Nr,Syr),e(Nr,CMe),e(CMe,Ryr),e(Nr,Pyr),e(Nr,pn),e(pn,Byr),e(pn,wMe),e(wMe,Iyr),e(pn,Nyr),e(pn,AMe),e(AMe,qyr),e(pn,jyr),e(pn,LMe),e(LMe,Dyr),e(pn,Gyr),e(Nr,Oyr),e(Nr,de),e(de,gC),e(gC,yMe),e(yMe,Vyr),e(gC,Xyr),e(gC,uY),e(uY,zyr),e(gC,Wyr),e(de,Qyr),e(de,hC),e(hC,xMe),e(xMe,Hyr),e(hC,Uyr),e(hC,_Y),e(_Y,Jyr),e(hC,Yyr),e(de,Kyr),e(de,pC),e(pC,$Me),e($Me,Zyr),e(pC,e8r),e(pC,bY),e(bY,o8r),e(pC,r8r),e(de,t8r),e(de,uC),e(uC,kMe),e(kMe,a8r),e(uC,n8r),e(uC,vY),e(vY,s8r),e(uC,l8r),e(de,i8r),e(de,_C),e(_C,SMe),e(SMe,d8r),e(_C,c8r),e(_C,FY),e(FY,f8r),e(_C,m8r),e(de,g8r),e(de,bC),e(bC,RMe),e(RMe,h8r),e(bC,p8r),e(bC,TY),e(TY,u8r),e(bC,_8r),e(de,b8r),e(de,vC),e(vC,PMe),e(PMe,v8r),e(vC,F8r),e(vC,MY),e(MY,T8r),e(vC,M8r),e(de,E8r),e(de,FC),e(FC,BMe),e(BMe,C8r),e(FC,w8r),e(FC,EY),e(EY,A8r),e(FC,L8r),e(de,y8r),e(de,TC),e(TC,IMe),e(IMe,x8r),e(TC,$8r),e(TC,CY),e(CY,k8r),e(TC,S8r),e(de,R8r),e(de,MC),e(MC,NMe),e(NMe,P8r),e(MC,B8r),e(MC,wY),e(wY,I8r),e(MC,N8r),e(de,q8r),e(de,EC),e(EC,qMe),e(qMe,j8r),e(EC,D8r),e(EC,AY),e(AY,G8r),e(EC,O8r),e(de,V8r),e(de,CC),e(CC,jMe),e(jMe,X8r),e(CC,z8r),e(CC,LY),e(LY,W8r),e(CC,Q8r),e(de,H8r),e(de,wC),e(wC,DMe),e(DMe,U8r),e(wC,J8r),e(wC,yY),e(yY,Y8r),e(wC,K8r),e(de,Z8r),e(de,AC),e(AC,GMe),e(GMe,e9r),e(AC,o9r),e(AC,xY),e(xY,r9r),e(AC,t9r),e(de,a9r),e(de,LC),e(LC,OMe),e(OMe,n9r),e(LC,s9r),e(LC,$Y),e($Y,l9r),e(LC,i9r),e(de,d9r),e(de,yC),e(yC,VMe),e(VMe,c9r),e(yC,f9r),e(yC,kY),e(kY,m9r),e(yC,g9r),e(de,h9r),e(de,xC),e(xC,XMe),e(XMe,p9r),e(xC,u9r),e(xC,SY),e(SY,_9r),e(xC,b9r),e(de,v9r),e(de,$C),e($C,zMe),e(zMe,F9r),e($C,T9r),e($C,RY),e(RY,M9r),e($C,E9r),e(de,C9r),e(de,kC),e(kC,WMe),e(WMe,w9r),e(kC,A9r),e(kC,PY),e(PY,L9r),e(kC,y9r),e(de,x9r),e(de,SC),e(SC,QMe),e(QMe,$9r),e(SC,k9r),e(SC,BY),e(BY,S9r),e(SC,R9r),e(Nr,P9r),M(RC,Nr,null),b(f,kOe,_),b(f,Sc,_),e(Sc,PC),e(PC,HMe),M(ix,HMe,null),e(Sc,B9r),e(Sc,UMe),e(UMe,I9r),b(f,SOe,_),b(f,cr,_),M(dx,cr,null),e(cr,N9r),e(cr,Rc),e(Rc,q9r),e(Rc,IY),e(IY,j9r),e(Rc,D9r),e(Rc,NY),e(NY,G9r),e(Rc,O9r),e(cr,V9r),e(cr,cx),e(cx,X9r),e(cx,JMe),e(JMe,z9r),e(cx,W9r),e(cr,Q9r),e(cr,Gt),M(fx,Gt,null),e(Gt,H9r),e(Gt,YMe),e(YMe,U9r),e(Gt,J9r),e(Gt,Pc),e(Pc,Y9r),e(Pc,KMe),e(KMe,K9r),e(Pc,Z9r),e(Pc,qY),e(qY,exr),e(Pc,oxr),e(Gt,rxr),M(BC,Gt,null),e(cr,txr),e(cr,qr),M(mx,qr,null),e(qr,axr),e(qr,ZMe),e(ZMe,nxr),e(qr,sxr),e(qr,un),e(un,lxr),e(un,e4e),e(e4e,ixr),e(un,dxr),e(un,o4e),e(o4e,cxr),e(un,fxr),e(un,r4e),e(r4e,mxr),e(un,gxr),e(qr,hxr),e(qr,ce),e(ce,IC),e(IC,t4e),e(t4e,pxr),e(IC,uxr),e(IC,jY),e(jY,_xr),e(IC,bxr),e(ce,vxr),e(ce,NC),e(NC,a4e),e(a4e,Fxr),e(NC,Txr),e(NC,DY),e(DY,Mxr),e(NC,Exr),e(ce,Cxr),e(ce,qC),e(qC,n4e),e(n4e,wxr),e(qC,Axr),e(qC,GY),e(GY,Lxr),e(qC,yxr),e(ce,xxr),e(ce,jC),e(jC,s4e),e(s4e,$xr),e(jC,kxr),e(jC,OY),e(OY,Sxr),e(jC,Rxr),e(ce,Pxr),e(ce,DC),e(DC,l4e),e(l4e,Bxr),e(DC,Ixr),e(DC,VY),e(VY,Nxr),e(DC,qxr),e(ce,jxr),e(ce,GC),e(GC,i4e),e(i4e,Dxr),e(GC,Gxr),e(GC,XY),e(XY,Oxr),e(GC,Vxr),e(ce,Xxr),e(ce,OC),e(OC,d4e),e(d4e,zxr),e(OC,Wxr),e(OC,zY),e(zY,Qxr),e(OC,Hxr),e(ce,Uxr),e(ce,VC),e(VC,c4e),e(c4e,Jxr),e(VC,Yxr),e(VC,WY),e(WY,Kxr),e(VC,Zxr),e(ce,e$r),e(ce,XC),e(XC,f4e),e(f4e,o$r),e(XC,r$r),e(XC,QY),e(QY,t$r),e(XC,a$r),e(ce,n$r),e(ce,zC),e(zC,m4e),e(m4e,s$r),e(zC,l$r),e(zC,HY),e(HY,i$r),e(zC,d$r),e(ce,c$r),e(ce,WC),e(WC,g4e),e(g4e,f$r),e(WC,m$r),e(WC,UY),e(UY,g$r),e(WC,h$r),e(ce,p$r),e(ce,QC),e(QC,h4e),e(h4e,u$r),e(QC,_$r),e(QC,JY),e(JY,b$r),e(QC,v$r),e(ce,F$r),e(ce,HC),e(HC,p4e),e(p4e,T$r),e(HC,M$r),e(HC,YY),e(YY,E$r),e(HC,C$r),e(ce,w$r),e(ce,UC),e(UC,u4e),e(u4e,A$r),e(UC,L$r),e(UC,KY),e(KY,y$r),e(UC,x$r),e(ce,$$r),e(ce,JC),e(JC,_4e),e(_4e,k$r),e(JC,S$r),e(JC,ZY),e(ZY,R$r),e(JC,P$r),e(ce,B$r),e(ce,YC),e(YC,b4e),e(b4e,I$r),e(YC,N$r),e(YC,eK),e(eK,q$r),e(YC,j$r),e(ce,D$r),e(ce,KC),e(KC,v4e),e(v4e,G$r),e(KC,O$r),e(KC,oK),e(oK,V$r),e(KC,X$r),e(ce,z$r),e(ce,ZC),e(ZC,F4e),e(F4e,W$r),e(ZC,Q$r),e(ZC,rK),e(rK,H$r),e(ZC,U$r),e(ce,J$r),e(ce,e5),e(e5,T4e),e(T4e,Y$r),e(e5,K$r),e(e5,tK),e(tK,Z$r),e(e5,ekr),e(ce,okr),e(ce,o5),e(o5,M4e),e(M4e,rkr),e(o5,tkr),e(o5,aK),e(aK,akr),e(o5,nkr),e(qr,skr),M(r5,qr,null),b(f,ROe,_),b(f,Bc,_),e(Bc,t5),e(t5,E4e),M(gx,E4e,null),e(Bc,lkr),e(Bc,C4e),e(C4e,ikr),b(f,POe,_),b(f,fr,_),M(hx,fr,null),e(fr,dkr),e(fr,Ic),e(Ic,ckr),e(Ic,nK),e(nK,fkr),e(Ic,mkr),e(Ic,sK),e(sK,gkr),e(Ic,hkr),e(fr,pkr),e(fr,px),e(px,ukr),e(px,w4e),e(w4e,_kr),e(px,bkr),e(fr,vkr),e(fr,Ot),M(ux,Ot,null),e(Ot,Fkr),e(Ot,A4e),e(A4e,Tkr),e(Ot,Mkr),e(Ot,Nc),e(Nc,Ekr),e(Nc,L4e),e(L4e,Ckr),e(Nc,wkr),e(Nc,lK),e(lK,Akr),e(Nc,Lkr),e(Ot,ykr),M(a5,Ot,null),e(fr,xkr),e(fr,jr),M(_x,jr,null),e(jr,$kr),e(jr,y4e),e(y4e,kkr),e(jr,Skr),e(jr,_n),e(_n,Rkr),e(_n,x4e),e(x4e,Pkr),e(_n,Bkr),e(_n,$4e),e($4e,Ikr),e(_n,Nkr),e(_n,k4e),e(k4e,qkr),e(_n,jkr),e(jr,Dkr),e(jr,S4e),e(S4e,n5),e(n5,R4e),e(R4e,Gkr),e(n5,Okr),e(n5,iK),e(iK,Vkr),e(n5,Xkr),e(jr,zkr),M(s5,jr,null),b(f,BOe,_),b(f,qc,_),e(qc,l5),e(l5,P4e),M(bx,P4e,null),e(qc,Wkr),e(qc,B4e),e(B4e,Qkr),b(f,IOe,_),b(f,mr,_),M(vx,mr,null),e(mr,Hkr),e(mr,jc),e(jc,Ukr),e(jc,dK),e(dK,Jkr),e(jc,Ykr),e(jc,cK),e(cK,Kkr),e(jc,Zkr),e(mr,eSr),e(mr,Fx),e(Fx,oSr),e(Fx,I4e),e(I4e,rSr),e(Fx,tSr),e(mr,aSr),e(mr,Vt),M(Tx,Vt,null),e(Vt,nSr),e(Vt,N4e),e(N4e,sSr),e(Vt,lSr),e(Vt,Dc),e(Dc,iSr),e(Dc,q4e),e(q4e,dSr),e(Dc,cSr),e(Dc,fK),e(fK,fSr),e(Dc,mSr),e(Vt,gSr),M(i5,Vt,null),e(mr,hSr),e(mr,Dr),M(Mx,Dr,null),e(Dr,pSr),e(Dr,j4e),e(j4e,uSr),e(Dr,_Sr),e(Dr,bn),e(bn,bSr),e(bn,D4e),e(D4e,vSr),e(bn,FSr),e(bn,G4e),e(G4e,TSr),e(bn,MSr),e(bn,O4e),e(O4e,ESr),e(bn,CSr),e(Dr,wSr),e(Dr,V4e),e(V4e,d5),e(d5,X4e),e(X4e,ASr),e(d5,LSr),e(d5,mK),e(mK,ySr),e(d5,xSr),e(Dr,$Sr),M(c5,Dr,null),b(f,NOe,_),b(f,Gc,_),e(Gc,f5),e(f5,z4e),M(Ex,z4e,null),e(Gc,kSr),e(Gc,W4e),e(W4e,SSr),b(f,qOe,_),b(f,gr,_),M(Cx,gr,null),e(gr,RSr),e(gr,Oc),e(Oc,PSr),e(Oc,gK),e(gK,BSr),e(Oc,ISr),e(Oc,hK),e(hK,NSr),e(Oc,qSr),e(gr,jSr),e(gr,wx),e(wx,DSr),e(wx,Q4e),e(Q4e,GSr),e(wx,OSr),e(gr,VSr),e(gr,Xt),M(Ax,Xt,null),e(Xt,XSr),e(Xt,H4e),e(H4e,zSr),e(Xt,WSr),e(Xt,Vc),e(Vc,QSr),e(Vc,U4e),e(U4e,HSr),e(Vc,USr),e(Vc,pK),e(pK,JSr),e(Vc,YSr),e(Xt,KSr),M(m5,Xt,null),e(gr,ZSr),e(gr,Gr),M(Lx,Gr,null),e(Gr,eRr),e(Gr,J4e),e(J4e,oRr),e(Gr,rRr),e(Gr,vn),e(vn,tRr),e(vn,Y4e),e(Y4e,aRr),e(vn,nRr),e(vn,K4e),e(K4e,sRr),e(vn,lRr),e(vn,Z4e),e(Z4e,iRr),e(vn,dRr),e(Gr,cRr),e(Gr,ee),e(ee,g5),e(g5,eEe),e(eEe,fRr),e(g5,mRr),e(g5,uK),e(uK,gRr),e(g5,hRr),e(ee,pRr),e(ee,h5),e(h5,oEe),e(oEe,uRr),e(h5,_Rr),e(h5,_K),e(_K,bRr),e(h5,vRr),e(ee,FRr),e(ee,p5),e(p5,rEe),e(rEe,TRr),e(p5,MRr),e(p5,bK),e(bK,ERr),e(p5,CRr),e(ee,wRr),e(ee,u5),e(u5,tEe),e(tEe,ARr),e(u5,LRr),e(u5,vK),e(vK,yRr),e(u5,xRr),e(ee,$Rr),e(ee,_5),e(_5,aEe),e(aEe,kRr),e(_5,SRr),e(_5,FK),e(FK,RRr),e(_5,PRr),e(ee,BRr),e(ee,b5),e(b5,nEe),e(nEe,IRr),e(b5,NRr),e(b5,TK),e(TK,qRr),e(b5,jRr),e(ee,DRr),e(ee,v5),e(v5,sEe),e(sEe,GRr),e(v5,ORr),e(v5,MK),e(MK,VRr),e(v5,XRr),e(ee,zRr),e(ee,F5),e(F5,lEe),e(lEe,WRr),e(F5,QRr),e(F5,EK),e(EK,HRr),e(F5,URr),e(ee,JRr),e(ee,T5),e(T5,iEe),e(iEe,YRr),e(T5,KRr),e(T5,CK),e(CK,ZRr),e(T5,ePr),e(ee,oPr),e(ee,M5),e(M5,dEe),e(dEe,rPr),e(M5,tPr),e(M5,wK),e(wK,aPr),e(M5,nPr),e(ee,sPr),e(ee,E5),e(E5,cEe),e(cEe,lPr),e(E5,iPr),e(E5,AK),e(AK,dPr),e(E5,cPr),e(ee,fPr),e(ee,C5),e(C5,fEe),e(fEe,mPr),e(C5,gPr),e(C5,LK),e(LK,hPr),e(C5,pPr),e(ee,uPr),e(ee,w5),e(w5,mEe),e(mEe,_Pr),e(w5,bPr),e(w5,yK),e(yK,vPr),e(w5,FPr),e(ee,TPr),e(ee,A5),e(A5,gEe),e(gEe,MPr),e(A5,EPr),e(A5,xK),e(xK,CPr),e(A5,wPr),e(ee,APr),e(ee,L5),e(L5,hEe),e(hEe,LPr),e(L5,yPr),e(L5,$K),e($K,xPr),e(L5,$Pr),e(ee,kPr),e(ee,y5),e(y5,pEe),e(pEe,SPr),e(y5,RPr),e(y5,kK),e(kK,PPr),e(y5,BPr),e(ee,IPr),e(ee,x5),e(x5,uEe),e(uEe,NPr),e(x5,qPr),e(x5,SK),e(SK,jPr),e(x5,DPr),e(ee,GPr),e(ee,$5),e($5,_Ee),e(_Ee,OPr),e($5,VPr),e($5,RK),e(RK,XPr),e($5,zPr),e(ee,WPr),e(ee,k5),e(k5,bEe),e(bEe,QPr),e(k5,HPr),e(k5,PK),e(PK,UPr),e(k5,JPr),e(ee,YPr),e(ee,S5),e(S5,vEe),e(vEe,KPr),e(S5,ZPr),e(S5,BK),e(BK,eBr),e(S5,oBr),e(ee,rBr),e(ee,R5),e(R5,FEe),e(FEe,tBr),e(R5,aBr),e(R5,IK),e(IK,nBr),e(R5,sBr),e(ee,lBr),e(ee,P5),e(P5,TEe),e(TEe,iBr),e(P5,dBr),e(P5,NK),e(NK,cBr),e(P5,fBr),e(ee,mBr),e(ee,B5),e(B5,MEe),e(MEe,gBr),e(B5,hBr),e(B5,qK),e(qK,pBr),e(B5,uBr),e(ee,_Br),e(ee,I5),e(I5,EEe),e(EEe,bBr),e(I5,vBr),e(I5,jK),e(jK,FBr),e(I5,TBr),e(ee,MBr),e(ee,N5),e(N5,CEe),e(CEe,EBr),e(N5,CBr),e(N5,DK),e(DK,wBr),e(N5,ABr),e(ee,LBr),e(ee,q5),e(q5,wEe),e(wEe,yBr),e(q5,xBr),e(q5,GK),e(GK,$Br),e(q5,kBr),e(ee,SBr),e(ee,j5),e(j5,AEe),e(AEe,RBr),e(j5,PBr),e(j5,OK),e(OK,BBr),e(j5,IBr),e(ee,NBr),e(ee,D5),e(D5,LEe),e(LEe,qBr),e(D5,jBr),e(D5,VK),e(VK,DBr),e(D5,GBr),e(Gr,OBr),M(G5,Gr,null),b(f,jOe,_),b(f,Xc,_),e(Xc,O5),e(O5,yEe),M(yx,yEe,null),e(Xc,VBr),e(Xc,xEe),e(xEe,XBr),b(f,DOe,_),b(f,hr,_),M(xx,hr,null),e(hr,zBr),e(hr,zc),e(zc,WBr),e(zc,XK),e(XK,QBr),e(zc,HBr),e(zc,zK),e(zK,UBr),e(zc,JBr),e(hr,YBr),e(hr,$x),e($x,KBr),e($x,$Ee),e($Ee,ZBr),e($x,eIr),e(hr,oIr),e(hr,zt),M(kx,zt,null),e(zt,rIr),e(zt,kEe),e(kEe,tIr),e(zt,aIr),e(zt,Wc),e(Wc,nIr),e(Wc,SEe),e(SEe,sIr),e(Wc,lIr),e(Wc,WK),e(WK,iIr),e(Wc,dIr),e(zt,cIr),M(V5,zt,null),e(hr,fIr),e(hr,Or),M(Sx,Or,null),e(Or,mIr),e(Or,REe),e(REe,gIr),e(Or,hIr),e(Or,Fn),e(Fn,pIr),e(Fn,PEe),e(PEe,uIr),e(Fn,_Ir),e(Fn,BEe),e(BEe,bIr),e(Fn,vIr),e(Fn,IEe),e(IEe,FIr),e(Fn,TIr),e(Or,MIr),e(Or,xe),e(xe,X5),e(X5,NEe),e(NEe,EIr),e(X5,CIr),e(X5,QK),e(QK,wIr),e(X5,AIr),e(xe,LIr),e(xe,z5),e(z5,qEe),e(qEe,yIr),e(z5,xIr),e(z5,HK),e(HK,$Ir),e(z5,kIr),e(xe,SIr),e(xe,W5),e(W5,jEe),e(jEe,RIr),e(W5,PIr),e(W5,UK),e(UK,BIr),e(W5,IIr),e(xe,NIr),e(xe,Q5),e(Q5,DEe),e(DEe,qIr),e(Q5,jIr),e(Q5,JK),e(JK,DIr),e(Q5,GIr),e(xe,OIr),e(xe,H5),e(H5,GEe),e(GEe,VIr),e(H5,XIr),e(H5,YK),e(YK,zIr),e(H5,WIr),e(xe,QIr),e(xe,U5),e(U5,OEe),e(OEe,HIr),e(U5,UIr),e(U5,KK),e(KK,JIr),e(U5,YIr),e(xe,KIr),e(xe,J5),e(J5,VEe),e(VEe,ZIr),e(J5,eNr),e(J5,ZK),e(ZK,oNr),e(J5,rNr),e(xe,tNr),e(xe,Y5),e(Y5,XEe),e(XEe,aNr),e(Y5,nNr),e(Y5,eZ),e(eZ,sNr),e(Y5,lNr),e(xe,iNr),e(xe,K5),e(K5,zEe),e(zEe,dNr),e(K5,cNr),e(K5,oZ),e(oZ,fNr),e(K5,mNr),e(xe,gNr),e(xe,Z5),e(Z5,WEe),e(WEe,hNr),e(Z5,pNr),e(Z5,rZ),e(rZ,uNr),e(Z5,_Nr),e(Or,bNr),M(e3,Or,null),b(f,GOe,_),b(f,Qc,_),e(Qc,o3),e(o3,QEe),M(Rx,QEe,null),e(Qc,vNr),e(Qc,HEe),e(HEe,FNr),b(f,OOe,_),b(f,pr,_),M(Px,pr,null),e(pr,TNr),e(pr,Hc),e(Hc,MNr),e(Hc,tZ),e(tZ,ENr),e(Hc,CNr),e(Hc,aZ),e(aZ,wNr),e(Hc,ANr),e(pr,LNr),e(pr,Bx),e(Bx,yNr),e(Bx,UEe),e(UEe,xNr),e(Bx,$Nr),e(pr,kNr),e(pr,Wt),M(Ix,Wt,null),e(Wt,SNr),e(Wt,JEe),e(JEe,RNr),e(Wt,PNr),e(Wt,Uc),e(Uc,BNr),e(Uc,YEe),e(YEe,INr),e(Uc,NNr),e(Uc,nZ),e(nZ,qNr),e(Uc,jNr),e(Wt,DNr),M(r3,Wt,null),e(pr,GNr),e(pr,Vr),M(Nx,Vr,null),e(Vr,ONr),e(Vr,KEe),e(KEe,VNr),e(Vr,XNr),e(Vr,Tn),e(Tn,zNr),e(Tn,ZEe),e(ZEe,WNr),e(Tn,QNr),e(Tn,eCe),e(eCe,HNr),e(Tn,UNr),e(Tn,oCe),e(oCe,JNr),e(Tn,YNr),e(Vr,KNr),e(Vr,Ee),e(Ee,t3),e(t3,rCe),e(rCe,ZNr),e(t3,eqr),e(t3,sZ),e(sZ,oqr),e(t3,rqr),e(Ee,tqr),e(Ee,a3),e(a3,tCe),e(tCe,aqr),e(a3,nqr),e(a3,lZ),e(lZ,sqr),e(a3,lqr),e(Ee,iqr),e(Ee,n3),e(n3,aCe),e(aCe,dqr),e(n3,cqr),e(n3,iZ),e(iZ,fqr),e(n3,mqr),e(Ee,gqr),e(Ee,s3),e(s3,nCe),e(nCe,hqr),e(s3,pqr),e(s3,dZ),e(dZ,uqr),e(s3,_qr),e(Ee,bqr),e(Ee,l3),e(l3,sCe),e(sCe,vqr),e(l3,Fqr),e(l3,cZ),e(cZ,Tqr),e(l3,Mqr),e(Ee,Eqr),e(Ee,i3),e(i3,lCe),e(lCe,Cqr),e(i3,wqr),e(i3,fZ),e(fZ,Aqr),e(i3,Lqr),e(Ee,yqr),e(Ee,d3),e(d3,iCe),e(iCe,xqr),e(d3,$qr),e(d3,mZ),e(mZ,kqr),e(d3,Sqr),e(Ee,Rqr),e(Ee,c3),e(c3,dCe),e(dCe,Pqr),e(c3,Bqr),e(c3,gZ),e(gZ,Iqr),e(c3,Nqr),e(Ee,qqr),e(Ee,f3),e(f3,cCe),e(cCe,jqr),e(f3,Dqr),e(f3,hZ),e(hZ,Gqr),e(f3,Oqr),e(Ee,Vqr),e(Ee,m3),e(m3,fCe),e(fCe,Xqr),e(m3,zqr),e(m3,pZ),e(pZ,Wqr),e(m3,Qqr),e(Ee,Hqr),e(Ee,g3),e(g3,mCe),e(mCe,Uqr),e(g3,Jqr),e(g3,uZ),e(uZ,Yqr),e(g3,Kqr),e(Ee,Zqr),e(Ee,h3),e(h3,gCe),e(gCe,ejr),e(h3,ojr),e(h3,_Z),e(_Z,rjr),e(h3,tjr),e(Ee,ajr),e(Ee,p3),e(p3,hCe),e(hCe,njr),e(p3,sjr),e(p3,bZ),e(bZ,ljr),e(p3,ijr),e(Vr,djr),M(u3,Vr,null),b(f,VOe,_),b(f,Jc,_),e(Jc,_3),e(_3,pCe),M(qx,pCe,null),e(Jc,cjr),e(Jc,uCe),e(uCe,fjr),b(f,XOe,_),b(f,ur,_),M(jx,ur,null),e(ur,mjr),e(ur,Yc),e(Yc,gjr),e(Yc,vZ),e(vZ,hjr),e(Yc,pjr),e(Yc,FZ),e(FZ,ujr),e(Yc,_jr),e(ur,bjr),e(ur,Dx),e(Dx,vjr),e(Dx,_Ce),e(_Ce,Fjr),e(Dx,Tjr),e(ur,Mjr),e(ur,Qt),M(Gx,Qt,null),e(Qt,Ejr),e(Qt,bCe),e(bCe,Cjr),e(Qt,wjr),e(Qt,Kc),e(Kc,Ajr),e(Kc,vCe),e(vCe,Ljr),e(Kc,yjr),e(Kc,TZ),e(TZ,xjr),e(Kc,$jr),e(Qt,kjr),M(b3,Qt,null),e(ur,Sjr),e(ur,Xr),M(Ox,Xr,null),e(Xr,Rjr),e(Xr,FCe),e(FCe,Pjr),e(Xr,Bjr),e(Xr,Mn),e(Mn,Ijr),e(Mn,TCe),e(TCe,Njr),e(Mn,qjr),e(Mn,MCe),e(MCe,jjr),e(Mn,Djr),e(Mn,ECe),e(ECe,Gjr),e(Mn,Ojr),e(Xr,Vjr),e(Xr,$e),e($e,v3),e(v3,CCe),e(CCe,Xjr),e(v3,zjr),e(v3,MZ),e(MZ,Wjr),e(v3,Qjr),e($e,Hjr),e($e,F3),e(F3,wCe),e(wCe,Ujr),e(F3,Jjr),e(F3,EZ),e(EZ,Yjr),e(F3,Kjr),e($e,Zjr),e($e,T3),e(T3,ACe),e(ACe,eDr),e(T3,oDr),e(T3,CZ),e(CZ,rDr),e(T3,tDr),e($e,aDr),e($e,M3),e(M3,LCe),e(LCe,nDr),e(M3,sDr),e(M3,wZ),e(wZ,lDr),e(M3,iDr),e($e,dDr),e($e,E3),e(E3,yCe),e(yCe,cDr),e(E3,fDr),e(E3,AZ),e(AZ,mDr),e(E3,gDr),e($e,hDr),e($e,C3),e(C3,xCe),e(xCe,pDr),e(C3,uDr),e(C3,LZ),e(LZ,_Dr),e(C3,bDr),e($e,vDr),e($e,w3),e(w3,$Ce),e($Ce,FDr),e(w3,TDr),e(w3,yZ),e(yZ,MDr),e(w3,EDr),e($e,CDr),e($e,A3),e(A3,kCe),e(kCe,wDr),e(A3,ADr),e(A3,xZ),e(xZ,LDr),e(A3,yDr),e($e,xDr),e($e,L3),e(L3,SCe),e(SCe,$Dr),e(L3,kDr),e(L3,$Z),e($Z,SDr),e(L3,RDr),e($e,PDr),e($e,y3),e(y3,RCe),e(RCe,BDr),e(y3,IDr),e(y3,kZ),e(kZ,NDr),e(y3,qDr),e(Xr,jDr),M(x3,Xr,null),b(f,zOe,_),b(f,Zc,_),e(Zc,$3),e($3,PCe),M(Vx,PCe,null),e(Zc,DDr),e(Zc,BCe),e(BCe,GDr),b(f,WOe,_),b(f,_r,_),M(Xx,_r,null),e(_r,ODr),e(_r,ef),e(ef,VDr),e(ef,SZ),e(SZ,XDr),e(ef,zDr),e(ef,RZ),e(RZ,WDr),e(ef,QDr),e(_r,HDr),e(_r,zx),e(zx,UDr),e(zx,ICe),e(ICe,JDr),e(zx,YDr),e(_r,KDr),e(_r,Ht),M(Wx,Ht,null),e(Ht,ZDr),e(Ht,NCe),e(NCe,eGr),e(Ht,oGr),e(Ht,of),e(of,rGr),e(of,qCe),e(qCe,tGr),e(of,aGr),e(of,PZ),e(PZ,nGr),e(of,sGr),e(Ht,lGr),M(k3,Ht,null),e(_r,iGr),e(_r,zr),M(Qx,zr,null),e(zr,dGr),e(zr,jCe),e(jCe,cGr),e(zr,fGr),e(zr,En),e(En,mGr),e(En,DCe),e(DCe,gGr),e(En,hGr),e(En,GCe),e(GCe,pGr),e(En,uGr),e(En,OCe),e(OCe,_Gr),e(En,bGr),e(zr,vGr),e(zr,ke),e(ke,S3),e(S3,VCe),e(VCe,FGr),e(S3,TGr),e(S3,BZ),e(BZ,MGr),e(S3,EGr),e(ke,CGr),e(ke,R3),e(R3,XCe),e(XCe,wGr),e(R3,AGr),e(R3,IZ),e(IZ,LGr),e(R3,yGr),e(ke,xGr),e(ke,P3),e(P3,zCe),e(zCe,$Gr),e(P3,kGr),e(P3,NZ),e(NZ,SGr),e(P3,RGr),e(ke,PGr),e(ke,B3),e(B3,WCe),e(WCe,BGr),e(B3,IGr),e(B3,qZ),e(qZ,NGr),e(B3,qGr),e(ke,jGr),e(ke,I3),e(I3,QCe),e(QCe,DGr),e(I3,GGr),e(I3,jZ),e(jZ,OGr),e(I3,VGr),e(ke,XGr),e(ke,N3),e(N3,HCe),e(HCe,zGr),e(N3,WGr),e(N3,DZ),e(DZ,QGr),e(N3,HGr),e(ke,UGr),e(ke,q3),e(q3,UCe),e(UCe,JGr),e(q3,YGr),e(q3,GZ),e(GZ,KGr),e(q3,ZGr),e(ke,eOr),e(ke,j3),e(j3,JCe),e(JCe,oOr),e(j3,rOr),e(j3,OZ),e(OZ,tOr),e(j3,aOr),e(ke,nOr),e(ke,D3),e(D3,YCe),e(YCe,sOr),e(D3,lOr),e(D3,VZ),e(VZ,iOr),e(D3,dOr),e(ke,cOr),e(ke,G3),e(G3,KCe),e(KCe,fOr),e(G3,mOr),e(G3,XZ),e(XZ,gOr),e(G3,hOr),e(zr,pOr),M(O3,zr,null),b(f,QOe,_),b(f,rf,_),e(rf,V3),e(V3,ZCe),M(Hx,ZCe,null),e(rf,uOr),e(rf,e5e),e(e5e,_Or),b(f,HOe,_),b(f,br,_),M(Ux,br,null),e(br,bOr),e(br,tf),e(tf,vOr),e(tf,zZ),e(zZ,FOr),e(tf,TOr),e(tf,WZ),e(WZ,MOr),e(tf,EOr),e(br,COr),e(br,Jx),e(Jx,wOr),e(Jx,o5e),e(o5e,AOr),e(Jx,LOr),e(br,yOr),e(br,Ut),M(Yx,Ut,null),e(Ut,xOr),e(Ut,r5e),e(r5e,$Or),e(Ut,kOr),e(Ut,af),e(af,SOr),e(af,t5e),e(t5e,ROr),e(af,POr),e(af,QZ),e(QZ,BOr),e(af,IOr),e(Ut,NOr),M(X3,Ut,null),e(br,qOr),e(br,Wr),M(Kx,Wr,null),e(Wr,jOr),e(Wr,a5e),e(a5e,DOr),e(Wr,GOr),e(Wr,Cn),e(Cn,OOr),e(Cn,n5e),e(n5e,VOr),e(Cn,XOr),e(Cn,s5e),e(s5e,zOr),e(Cn,WOr),e(Cn,l5e),e(l5e,QOr),e(Cn,HOr),e(Wr,UOr),e(Wr,Se),e(Se,z3),e(z3,i5e),e(i5e,JOr),e(z3,YOr),e(z3,HZ),e(HZ,KOr),e(z3,ZOr),e(Se,eVr),e(Se,W3),e(W3,d5e),e(d5e,oVr),e(W3,rVr),e(W3,UZ),e(UZ,tVr),e(W3,aVr),e(Se,nVr),e(Se,Q3),e(Q3,c5e),e(c5e,sVr),e(Q3,lVr),e(Q3,JZ),e(JZ,iVr),e(Q3,dVr),e(Se,cVr),e(Se,H3),e(H3,f5e),e(f5e,fVr),e(H3,mVr),e(H3,YZ),e(YZ,gVr),e(H3,hVr),e(Se,pVr),e(Se,U3),e(U3,m5e),e(m5e,uVr),e(U3,_Vr),e(U3,KZ),e(KZ,bVr),e(U3,vVr),e(Se,FVr),e(Se,J3),e(J3,g5e),e(g5e,TVr),e(J3,MVr),e(J3,ZZ),e(ZZ,EVr),e(J3,CVr),e(Se,wVr),e(Se,Y3),e(Y3,h5e),e(h5e,AVr),e(Y3,LVr),e(Y3,eee),e(eee,yVr),e(Y3,xVr),e(Se,$Vr),e(Se,K3),e(K3,p5e),e(p5e,kVr),e(K3,SVr),e(K3,oee),e(oee,RVr),e(K3,PVr),e(Se,BVr),e(Se,Z3),e(Z3,u5e),e(u5e,IVr),e(Z3,NVr),e(Z3,ree),e(ree,qVr),e(Z3,jVr),e(Se,DVr),e(Se,ew),e(ew,_5e),e(_5e,GVr),e(ew,OVr),e(ew,tee),e(tee,VVr),e(ew,XVr),e(Wr,zVr),M(ow,Wr,null),b(f,UOe,_),b(f,nf,_),e(nf,rw),e(rw,b5e),M(Zx,b5e,null),e(nf,WVr),e(nf,v5e),e(v5e,QVr),b(f,JOe,_),b(f,vr,_),M(e$,vr,null),e(vr,HVr),e(vr,sf),e(sf,UVr),e(sf,aee),e(aee,JVr),e(sf,YVr),e(sf,nee),e(nee,KVr),e(sf,ZVr),e(vr,eXr),e(vr,o$),e(o$,oXr),e(o$,F5e),e(F5e,rXr),e(o$,tXr),e(vr,aXr),e(vr,Jt),M(r$,Jt,null),e(Jt,nXr),e(Jt,T5e),e(T5e,sXr),e(Jt,lXr),e(Jt,lf),e(lf,iXr),e(lf,M5e),e(M5e,dXr),e(lf,cXr),e(lf,see),e(see,fXr),e(lf,mXr),e(Jt,gXr),M(tw,Jt,null),e(vr,hXr),e(vr,Qr),M(t$,Qr,null),e(Qr,pXr),e(Qr,E5e),e(E5e,uXr),e(Qr,_Xr),e(Qr,wn),e(wn,bXr),e(wn,C5e),e(C5e,vXr),e(wn,FXr),e(wn,w5e),e(w5e,TXr),e(wn,MXr),e(wn,A5e),e(A5e,EXr),e(wn,CXr),e(Qr,wXr),e(Qr,Re),e(Re,aw),e(aw,L5e),e(L5e,AXr),e(aw,LXr),e(aw,lee),e(lee,yXr),e(aw,xXr),e(Re,$Xr),e(Re,nw),e(nw,y5e),e(y5e,kXr),e(nw,SXr),e(nw,iee),e(iee,RXr),e(nw,PXr),e(Re,BXr),e(Re,sw),e(sw,x5e),e(x5e,IXr),e(sw,NXr),e(sw,dee),e(dee,qXr),e(sw,jXr),e(Re,DXr),e(Re,lw),e(lw,$5e),e($5e,GXr),e(lw,OXr),e(lw,cee),e(cee,VXr),e(lw,XXr),e(Re,zXr),e(Re,iw),e(iw,k5e),e(k5e,WXr),e(iw,QXr),e(iw,fee),e(fee,HXr),e(iw,UXr),e(Re,JXr),e(Re,dw),e(dw,S5e),e(S5e,YXr),e(dw,KXr),e(dw,mee),e(mee,ZXr),e(dw,ezr),e(Re,ozr),e(Re,cw),e(cw,R5e),e(R5e,rzr),e(cw,tzr),e(cw,gee),e(gee,azr),e(cw,nzr),e(Re,szr),e(Re,fw),e(fw,P5e),e(P5e,lzr),e(fw,izr),e(fw,hee),e(hee,dzr),e(fw,czr),e(Re,fzr),e(Re,mw),e(mw,B5e),e(B5e,mzr),e(mw,gzr),e(mw,pee),e(pee,hzr),e(mw,pzr),e(Re,uzr),e(Re,gw),e(gw,I5e),e(I5e,_zr),e(gw,bzr),e(gw,uee),e(uee,vzr),e(gw,Fzr),e(Qr,Tzr),M(hw,Qr,null),b(f,YOe,_),b(f,df,_),e(df,pw),e(pw,N5e),M(a$,N5e,null),e(df,Mzr),e(df,q5e),e(q5e,Ezr),b(f,KOe,_),b(f,Fr,_),M(n$,Fr,null),e(Fr,Czr),e(Fr,cf),e(cf,wzr),e(cf,_ee),e(_ee,Azr),e(cf,Lzr),e(cf,bee),e(bee,yzr),e(cf,xzr),e(Fr,$zr),e(Fr,s$),e(s$,kzr),e(s$,j5e),e(j5e,Szr),e(s$,Rzr),e(Fr,Pzr),e(Fr,Yt),M(l$,Yt,null),e(Yt,Bzr),e(Yt,D5e),e(D5e,Izr),e(Yt,Nzr),e(Yt,ff),e(ff,qzr),e(ff,G5e),e(G5e,jzr),e(ff,Dzr),e(ff,vee),e(vee,Gzr),e(ff,Ozr),e(Yt,Vzr),M(uw,Yt,null),e(Fr,Xzr),e(Fr,Hr),M(i$,Hr,null),e(Hr,zzr),e(Hr,O5e),e(O5e,Wzr),e(Hr,Qzr),e(Hr,An),e(An,Hzr),e(An,V5e),e(V5e,Uzr),e(An,Jzr),e(An,X5e),e(X5e,Yzr),e(An,Kzr),e(An,z5e),e(z5e,Zzr),e(An,eWr),e(Hr,oWr),e(Hr,Ve),e(Ve,_w),e(_w,W5e),e(W5e,rWr),e(_w,tWr),e(_w,Fee),e(Fee,aWr),e(_w,nWr),e(Ve,sWr),e(Ve,bw),e(bw,Q5e),e(Q5e,lWr),e(bw,iWr),e(bw,Tee),e(Tee,dWr),e(bw,cWr),e(Ve,fWr),e(Ve,vw),e(vw,H5e),e(H5e,mWr),e(vw,gWr),e(vw,Mee),e(Mee,hWr),e(vw,pWr),e(Ve,uWr),e(Ve,Fw),e(Fw,U5e),e(U5e,_Wr),e(Fw,bWr),e(Fw,Eee),e(Eee,vWr),e(Fw,FWr),e(Ve,TWr),e(Ve,Tw),e(Tw,J5e),e(J5e,MWr),e(Tw,EWr),e(Tw,Cee),e(Cee,CWr),e(Tw,wWr),e(Ve,AWr),e(Ve,Mw),e(Mw,Y5e),e(Y5e,LWr),e(Mw,yWr),e(Mw,wee),e(wee,xWr),e(Mw,$Wr),e(Ve,kWr),e(Ve,Ew),e(Ew,K5e),e(K5e,SWr),e(Ew,RWr),e(Ew,Aee),e(Aee,PWr),e(Ew,BWr),e(Ve,IWr),e(Ve,Cw),e(Cw,Z5e),e(Z5e,NWr),e(Cw,qWr),e(Cw,Lee),e(Lee,jWr),e(Cw,DWr),e(Hr,GWr),M(ww,Hr,null),b(f,ZOe,_),b(f,mf,_),e(mf,Aw),e(Aw,e3e),M(d$,e3e,null),e(mf,OWr),e(mf,o3e),e(o3e,VWr),b(f,eVe,_),b(f,Tr,_),M(c$,Tr,null),e(Tr,XWr),e(Tr,gf),e(gf,zWr),e(gf,yee),e(yee,WWr),e(gf,QWr),e(gf,xee),e(xee,HWr),e(gf,UWr),e(Tr,JWr),e(Tr,f$),e(f$,YWr),e(f$,r3e),e(r3e,KWr),e(f$,ZWr),e(Tr,eQr),e(Tr,Kt),M(m$,Kt,null),e(Kt,oQr),e(Kt,t3e),e(t3e,rQr),e(Kt,tQr),e(Kt,hf),e(hf,aQr),e(hf,a3e),e(a3e,nQr),e(hf,sQr),e(hf,$ee),e($ee,lQr),e(hf,iQr),e(Kt,dQr),M(Lw,Kt,null),e(Tr,cQr),e(Tr,Ur),M(g$,Ur,null),e(Ur,fQr),e(Ur,n3e),e(n3e,mQr),e(Ur,gQr),e(Ur,Ln),e(Ln,hQr),e(Ln,s3e),e(s3e,pQr),e(Ln,uQr),e(Ln,l3e),e(l3e,_Qr),e(Ln,bQr),e(Ln,i3e),e(i3e,vQr),e(Ln,FQr),e(Ur,TQr),e(Ur,Xe),e(Xe,yw),e(yw,d3e),e(d3e,MQr),e(yw,EQr),e(yw,kee),e(kee,CQr),e(yw,wQr),e(Xe,AQr),e(Xe,xw),e(xw,c3e),e(c3e,LQr),e(xw,yQr),e(xw,See),e(See,xQr),e(xw,$Qr),e(Xe,kQr),e(Xe,$w),e($w,f3e),e(f3e,SQr),e($w,RQr),e($w,Ree),e(Ree,PQr),e($w,BQr),e(Xe,IQr),e(Xe,kw),e(kw,m3e),e(m3e,NQr),e(kw,qQr),e(kw,Pee),e(Pee,jQr),e(kw,DQr),e(Xe,GQr),e(Xe,Sw),e(Sw,g3e),e(g3e,OQr),e(Sw,VQr),e(Sw,Bee),e(Bee,XQr),e(Sw,zQr),e(Xe,WQr),e(Xe,Rw),e(Rw,h3e),e(h3e,QQr),e(Rw,HQr),e(Rw,Iee),e(Iee,UQr),e(Rw,JQr),e(Xe,YQr),e(Xe,Pw),e(Pw,p3e),e(p3e,KQr),e(Pw,ZQr),e(Pw,Nee),e(Nee,eHr),e(Pw,oHr),e(Xe,rHr),e(Xe,Bw),e(Bw,u3e),e(u3e,tHr),e(Bw,aHr),e(Bw,qee),e(qee,nHr),e(Bw,sHr),e(Ur,lHr),M(Iw,Ur,null),b(f,oVe,_),b(f,pf,_),e(pf,Nw),e(Nw,_3e),M(h$,_3e,null),e(pf,iHr),e(pf,b3e),e(b3e,dHr),b(f,rVe,_),b(f,Mr,_),M(p$,Mr,null),e(Mr,cHr),e(Mr,uf),e(uf,fHr),e(uf,jee),e(jee,mHr),e(uf,gHr),e(uf,Dee),e(Dee,hHr),e(uf,pHr),e(Mr,uHr),e(Mr,u$),e(u$,_Hr),e(u$,v3e),e(v3e,bHr),e(u$,vHr),e(Mr,FHr),e(Mr,Zt),M(_$,Zt,null),e(Zt,THr),e(Zt,F3e),e(F3e,MHr),e(Zt,EHr),e(Zt,_f),e(_f,CHr),e(_f,T3e),e(T3e,wHr),e(_f,AHr),e(_f,Gee),e(Gee,LHr),e(_f,yHr),e(Zt,xHr),M(qw,Zt,null),e(Mr,$Hr),e(Mr,Jr),M(b$,Jr,null),e(Jr,kHr),e(Jr,M3e),e(M3e,SHr),e(Jr,RHr),e(Jr,yn),e(yn,PHr),e(yn,E3e),e(E3e,BHr),e(yn,IHr),e(yn,C3e),e(C3e,NHr),e(yn,qHr),e(yn,w3e),e(w3e,jHr),e(yn,DHr),e(Jr,GHr),e(Jr,A3e),e(A3e,jw),e(jw,L3e),e(L3e,OHr),e(jw,VHr),e(jw,Oee),e(Oee,XHr),e(jw,zHr),e(Jr,WHr),M(Dw,Jr,null),b(f,tVe,_),b(f,bf,_),e(bf,Gw),e(Gw,y3e),M(v$,y3e,null),e(bf,QHr),e(bf,x3e),e(x3e,HHr),b(f,aVe,_),b(f,Er,_),M(F$,Er,null),e(Er,UHr),e(Er,vf),e(vf,JHr),e(vf,Vee),e(Vee,YHr),e(vf,KHr),e(vf,Xee),e(Xee,ZHr),e(vf,eUr),e(Er,oUr),e(Er,T$),e(T$,rUr),e(T$,$3e),e($3e,tUr),e(T$,aUr),e(Er,nUr),e(Er,ea),M(M$,ea,null),e(ea,sUr),e(ea,k3e),e(k3e,lUr),e(ea,iUr),e(ea,Ff),e(Ff,dUr),e(Ff,S3e),e(S3e,cUr),e(Ff,fUr),e(Ff,zee),e(zee,mUr),e(Ff,gUr),e(ea,hUr),M(Ow,ea,null),e(Er,pUr),e(Er,Yr),M(E$,Yr,null),e(Yr,uUr),e(Yr,R3e),e(R3e,_Ur),e(Yr,bUr),e(Yr,xn),e(xn,vUr),e(xn,P3e),e(P3e,FUr),e(xn,TUr),e(xn,B3e),e(B3e,MUr),e(xn,EUr),e(xn,I3e),e(I3e,CUr),e(xn,wUr),e(Yr,AUr),e(Yr,C$),e(C$,Vw),e(Vw,N3e),e(N3e,LUr),e(Vw,yUr),e(Vw,Wee),e(Wee,xUr),e(Vw,$Ur),e(C$,kUr),e(C$,Xw),e(Xw,q3e),e(q3e,SUr),e(Xw,RUr),e(Xw,Qee),e(Qee,PUr),e(Xw,BUr),e(Yr,IUr),M(zw,Yr,null),b(f,nVe,_),b(f,Tf,_),e(Tf,Ww),e(Ww,j3e),M(w$,j3e,null),e(Tf,NUr),e(Tf,D3e),e(D3e,qUr),b(f,sVe,_),b(f,Cr,_),M(A$,Cr,null),e(Cr,jUr),e(Cr,Mf),e(Mf,DUr),e(Mf,Hee),e(Hee,GUr),e(Mf,OUr),e(Mf,Uee),e(Uee,VUr),e(Mf,XUr),e(Cr,zUr),e(Cr,L$),e(L$,WUr),e(L$,G3e),e(G3e,QUr),e(L$,HUr),e(Cr,UUr),e(Cr,oa),M(y$,oa,null),e(oa,JUr),e(oa,O3e),e(O3e,YUr),e(oa,KUr),e(oa,Ef),e(Ef,ZUr),e(Ef,V3e),e(V3e,eJr),e(Ef,oJr),e(Ef,Jee),e(Jee,rJr),e(Ef,tJr),e(oa,aJr),M(Qw,oa,null),e(Cr,nJr),e(Cr,Kr),M(x$,Kr,null),e(Kr,sJr),e(Kr,X3e),e(X3e,lJr),e(Kr,iJr),e(Kr,$n),e($n,dJr),e($n,z3e),e(z3e,cJr),e($n,fJr),e($n,W3e),e(W3e,mJr),e($n,gJr),e($n,Q3e),e(Q3e,hJr),e($n,pJr),e(Kr,uJr),e(Kr,H3e),e(H3e,Hw),e(Hw,U3e),e(U3e,_Jr),e(Hw,bJr),e(Hw,Yee),e(Yee,vJr),e(Hw,FJr),e(Kr,TJr),M(Uw,Kr,null),lVe=!0},p(f,[_]){const $$={};_&2&&($$.$$scope={dirty:_,ctx:f}),Sf.$set($$);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:f}),jg.$set(J3e);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:f}),Th.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:f}),rp.$set(K3e);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),tp.$set(k$);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:f}),Ep.$set(Z3e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Cp.$set(kn);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),Lp.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),A_.$set(owe);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),y_.$set(rwe);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),v7.$set(S$);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),T7.$set(twe);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),l1.$set(R$);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),d1.$set(awe);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),Q1.$set(P$);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),U1.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),h2.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),u2.$set(lwe);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),mb.$set(Cf);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),hb.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),zb.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),Qb.$set(cwe);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),ev.$set(B$);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),rv.$set(fwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),jv.$set(mwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:f}),Gv.$set(gwe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),x0.$set(rt);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),k0.$set(I$);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:f}),P0.$set(hwe);const N$={};_&2&&(N$.$$scope={dirty:_,ctx:f}),I0.$set(N$);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:f}),J0.$set(pwe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),K0.$set(tt);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:f}),oF.$set(uwe);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),tF.$set(wf);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:f}),sF.$set(_we);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:f}),iF.$set(bwe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),vF.$set(L);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),TF.$set(Jw);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:f}),yF.$set(vwe);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:f}),$F.$set(Fwe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),OF.$set(Yw);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:f}),XF.$set(Twe);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:f}),HF.$set(Mwe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),JF.$set(Kw);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:f}),tT.$set(Ewe);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:f}),nT.$set(Cwe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),cT.$set(Zw);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:f}),mT.$set(wwe);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:f}),uT.$set(Awe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),bT.$set(eA);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:f}),TT.$set(Lwe);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:f}),ET.$set(ywe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),xT.$set(oA);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:f}),kT.$set(xwe);const $we={};_&2&&($we.$$scope={dirty:_,ctx:f}),PT.$set($we);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),IT.$set(rA);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:f}),xM.$set(kwe);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:f}),kM.$set(Swe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),o4.$set(tA);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:f}),t4.$set(Rwe);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:f}),_4.$set(Pwe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),v4.$set(aA);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:f}),C4.$set(Bwe);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:f}),A4.$set(Iwe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),Q4.$set(nA);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:f}),U4.$set(Nwe);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:f}),sE.$set(qwe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),iE.$set(sA);const jwe={};_&2&&(jwe.$$scope={dirty:_,ctx:f}),BE.$set(jwe);const Dwe={};_&2&&(Dwe.$$scope={dirty:_,ctx:f}),NE.$set(Dwe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),oC.$set(lA);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:f}),tC.$set(Gwe);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:f}),sC.$set(Owe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),iC.$set(iA);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:f}),cC.$set(Vwe);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:f}),mC.$set(Xwe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:f}),RC.$set(dA);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:f}),BC.$set(zwe);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:f}),r5.$set(Wwe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:f}),a5.$set(cA);const Qwe={};_&2&&(Qwe.$$scope={dirty:_,ctx:f}),s5.$set(Qwe);const Hwe={};_&2&&(Hwe.$$scope={dirty:_,ctx:f}),i5.$set(Hwe);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:f}),c5.$set(fA);const Uwe={};_&2&&(Uwe.$$scope={dirty:_,ctx:f}),m5.$set(Uwe);const Jwe={};_&2&&(Jwe.$$scope={dirty:_,ctx:f}),G5.$set(Jwe);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:f}),V5.$set(mA);const Ywe={};_&2&&(Ywe.$$scope={dirty:_,ctx:f}),e3.$set(Ywe);const Kwe={};_&2&&(Kwe.$$scope={dirty:_,ctx:f}),r3.$set(Kwe);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:f}),u3.$set(gA);const Zwe={};_&2&&(Zwe.$$scope={dirty:_,ctx:f}),b3.$set(Zwe);const eAe={};_&2&&(eAe.$$scope={dirty:_,ctx:f}),x3.$set(eAe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:f}),k3.$set(hA);const oAe={};_&2&&(oAe.$$scope={dirty:_,ctx:f}),O3.$set(oAe);const rAe={};_&2&&(rAe.$$scope={dirty:_,ctx:f}),X3.$set(rAe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:f}),ow.$set(pA);const tAe={};_&2&&(tAe.$$scope={dirty:_,ctx:f}),tw.$set(tAe);const aAe={};_&2&&(aAe.$$scope={dirty:_,ctx:f}),hw.$set(aAe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:f}),uw.$set(uA);const nAe={};_&2&&(nAe.$$scope={dirty:_,ctx:f}),ww.$set(nAe);const sAe={};_&2&&(sAe.$$scope={dirty:_,ctx:f}),Lw.$set(sAe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:f}),Iw.$set(_A);const lAe={};_&2&&(lAe.$$scope={dirty:_,ctx:f}),qw.$set(lAe);const iAe={};_&2&&(iAe.$$scope={dirty:_,ctx:f}),Dw.$set(iAe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:f}),Ow.$set(bA);const dAe={};_&2&&(dAe.$$scope={dirty:_,ctx:f}),zw.$set(dAe);const cAe={};_&2&&(cAe.$$scope={dirty:_,ctx:f}),Qw.$set(cAe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:f}),Uw.$set(vA)},i(f){lVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(Sf.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(AL.$$.fragment,f),E(jg.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(SL.$$.fragment,f),E(Th.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(rp.$$.fragment,f),E(tp.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(XL.$$.fragment,f),E(Ep.$$.fragment,f),E(Cp.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(Lp.$$.fragment,f),E(JL.$$.fragment,f),E(A_.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(y_.$$.fragment,f),E(oy.$$.fragment,f),E(v7.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(T7.$$.fragment,f),E(sy.$$.fragment,f),E(l1.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(d1.$$.fragment,f),E(fy.$$.fragment,f),E(Q1.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(U1.$$.fragment,f),E(uy.$$.fragment,f),E(h2.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(u2.$$.fragment,f),E(Ty.$$.fragment,f),E(mb.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(hb.$$.fragment,f),E(Ay.$$.fragment,f),E(zb.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(Qb.$$.fragment,f),E(ky.$$.fragment,f),E(ev.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(rv.$$.fragment,f),E(Iy.$$.fragment,f),E(jv.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(Gv.$$.fragment,f),E(Gy.$$.fragment,f),E(x0.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(k0.$$.fragment,f),E(Wy.$$.fragment,f),E(P0.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(I0.$$.fragment,f),E(Yy.$$.fragment,f),E(J0.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(K0.$$.fragment,f),E(r8.$$.fragment,f),E(oF.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(tF.$$.fragment,f),E(l8.$$.fragment,f),E(sF.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(iF.$$.fragment,f),E(m8.$$.fragment,f),E(vF.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(TF.$$.fragment,f),E(_8.$$.fragment,f),E(yF.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E($F.$$.fragment,f),E(M8.$$.fragment,f),E(OF.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(XF.$$.fragment,f),E(L8.$$.fragment,f),E(HF.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(JF.$$.fragment,f),E(R8.$$.fragment,f),E(tT.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(nT.$$.fragment,f),E(q8.$$.fragment,f),E(cT.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(mT.$$.fragment,f),E(V8.$$.fragment,f),E(uT.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(bT.$$.fragment,f),E(U8.$$.fragment,f),E(TT.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(ET.$$.fragment,f),E(e9.$$.fragment,f),E(xT.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(kT.$$.fragment,f),E(n9.$$.fragment,f),E(PT.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(IT.$$.fragment,f),E(c9.$$.fragment,f),E(xM.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(kM.$$.fragment,f),E(p9.$$.fragment,f),E(o4.$$.fragment,f),E(u9.$$.fragment,f),E(_9.$$.fragment,f),E(v9.$$.fragment,f),E(t4.$$.fragment,f),E(F9.$$.fragment,f),E(_4.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(v4.$$.fragment,f),E(w9.$$.fragment,f),E(C4.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(A4.$$.fragment,f),E($9.$$.fragment,f),E(Q4.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(U4.$$.fragment,f),E(B9.$$.fragment,f),E(sE.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(iE.$$.fragment,f),E(D9.$$.fragment,f),E(BE.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(NE.$$.fragment,f),E(z9.$$.fragment,f),E(oC.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(tC.$$.fragment,f),E(J9.$$.fragment,f),E(sC.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(iC.$$.fragment,f),E(rx.$$.fragment,f),E(cC.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(mC.$$.fragment,f),E(lx.$$.fragment,f),E(RC.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(BC.$$.fragment,f),E(mx.$$.fragment,f),E(r5.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(a5.$$.fragment,f),E(_x.$$.fragment,f),E(s5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(i5.$$.fragment,f),E(Mx.$$.fragment,f),E(c5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(m5.$$.fragment,f),E(Lx.$$.fragment,f),E(G5.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(V5.$$.fragment,f),E(Sx.$$.fragment,f),E(e3.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(r3.$$.fragment,f),E(Nx.$$.fragment,f),E(u3.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(b3.$$.fragment,f),E(Ox.$$.fragment,f),E(x3.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(k3.$$.fragment,f),E(Qx.$$.fragment,f),E(O3.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(X3.$$.fragment,f),E(Kx.$$.fragment,f),E(ow.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(tw.$$.fragment,f),E(t$.$$.fragment,f),E(hw.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(uw.$$.fragment,f),E(i$.$$.fragment,f),E(ww.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(Lw.$$.fragment,f),E(g$.$$.fragment,f),E(Iw.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(qw.$$.fragment,f),E(b$.$$.fragment,f),E(Dw.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(Ow.$$.fragment,f),E(E$.$$.fragment,f),E(zw.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(Qw.$$.fragment,f),E(x$.$$.fragment,f),E(Uw.$$.fragment,f),lVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(Sf.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(AL.$$.fragment,f),C(jg.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(SL.$$.fragment,f),C(Th.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(rp.$$.fragment,f),C(tp.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(XL.$$.fragment,f),C(Ep.$$.fragment,f),C(Cp.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(Lp.$$.fragment,f),C(JL.$$.fragment,f),C(A_.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(y_.$$.fragment,f),C(oy.$$.fragment,f),C(v7.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(T7.$$.fragment,f),C(sy.$$.fragment,f),C(l1.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(d1.$$.fragment,f),C(fy.$$.fragment,f),C(Q1.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(U1.$$.fragment,f),C(uy.$$.fragment,f),C(h2.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(u2.$$.fragment,f),C(Ty.$$.fragment,f),C(mb.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(hb.$$.fragment,f),C(Ay.$$.fragment,f),C(zb.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(Qb.$$.fragment,f),C(ky.$$.fragment,f),C(ev.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(rv.$$.fragment,f),C(Iy.$$.fragment,f),C(jv.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(Gv.$$.fragment,f),C(Gy.$$.fragment,f),C(x0.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(k0.$$.fragment,f),C(Wy.$$.fragment,f),C(P0.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(I0.$$.fragment,f),C(Yy.$$.fragment,f),C(J0.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(K0.$$.fragment,f),C(r8.$$.fragment,f),C(oF.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(tF.$$.fragment,f),C(l8.$$.fragment,f),C(sF.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(iF.$$.fragment,f),C(m8.$$.fragment,f),C(vF.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(TF.$$.fragment,f),C(_8.$$.fragment,f),C(yF.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C($F.$$.fragment,f),C(M8.$$.fragment,f),C(OF.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(XF.$$.fragment,f),C(L8.$$.fragment,f),C(HF.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(JF.$$.fragment,f),C(R8.$$.fragment,f),C(tT.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(nT.$$.fragment,f),C(q8.$$.fragment,f),C(cT.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(mT.$$.fragment,f),C(V8.$$.fragment,f),C(uT.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(bT.$$.fragment,f),C(U8.$$.fragment,f),C(TT.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(ET.$$.fragment,f),C(e9.$$.fragment,f),C(xT.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(kT.$$.fragment,f),C(n9.$$.fragment,f),C(PT.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(IT.$$.fragment,f),C(c9.$$.fragment,f),C(xM.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(kM.$$.fragment,f),C(p9.$$.fragment,f),C(o4.$$.fragment,f),C(u9.$$.fragment,f),C(_9.$$.fragment,f),C(v9.$$.fragment,f),C(t4.$$.fragment,f),C(F9.$$.fragment,f),C(_4.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(v4.$$.fragment,f),C(w9.$$.fragment,f),C(C4.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(A4.$$.fragment,f),C($9.$$.fragment,f),C(Q4.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(U4.$$.fragment,f),C(B9.$$.fragment,f),C(sE.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(iE.$$.fragment,f),C(D9.$$.fragment,f),C(BE.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(NE.$$.fragment,f),C(z9.$$.fragment,f),C(oC.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(tC.$$.fragment,f),C(J9.$$.fragment,f),C(sC.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(iC.$$.fragment,f),C(rx.$$.fragment,f),C(cC.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(mC.$$.fragment,f),C(lx.$$.fragment,f),C(RC.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(BC.$$.fragment,f),C(mx.$$.fragment,f),C(r5.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(a5.$$.fragment,f),C(_x.$$.fragment,f),C(s5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(i5.$$.fragment,f),C(Mx.$$.fragment,f),C(c5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(m5.$$.fragment,f),C(Lx.$$.fragment,f),C(G5.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(V5.$$.fragment,f),C(Sx.$$.fragment,f),C(e3.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(r3.$$.fragment,f),C(Nx.$$.fragment,f),C(u3.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(b3.$$.fragment,f),C(Ox.$$.fragment,f),C(x3.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(k3.$$.fragment,f),C(Qx.$$.fragment,f),C(O3.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(X3.$$.fragment,f),C(Kx.$$.fragment,f),C(ow.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(tw.$$.fragment,f),C(t$.$$.fragment,f),C(hw.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(uw.$$.fragment,f),C(i$.$$.fragment,f),C(ww.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(Lw.$$.fragment,f),C(g$.$$.fragment,f),C(Iw.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(qw.$$.fragment,f),C(b$.$$.fragment,f),C(Dw.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(Ow.$$.fragment,f),C(E$.$$.fragment,f),C(zw.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(Qw.$$.fragment,f),C(x$.$$.fragment,f),C(Uw.$$.fragment,f),lVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(rGe),f&&t(Li),w(FL),f&&t(tGe),f&&t(In),f&&t(aGe),w(TL,f),f&&t(nGe),f&&t(Yk),f&&t(sGe),w(Sf,f),f&&t(lGe),f&&t(yi),w(ML),f&&t(iGe),f&&t(wo),w(EL),w(AL),w(jg),w(LL),f&&t(dGe),f&&t($i),w(yL),f&&t(cGe),f&&t(Ao),w(xL),w(SL),w(Th),w(RL),f&&t(fGe),f&&t(ki),w(PL),f&&t(mGe),f&&t(Lo),w(BL),w(qL),w(rp),w(tp),w(jL),f&&t(gGe),f&&t(Si),w(DL),f&&t(hGe),f&&t(yo),w(GL),w(XL),w(Ep),w(Cp),w(zL),f&&t(pGe),f&&t(Pi),w(WL),f&&t(uGe),f&&t(xo),w(QL),w(UL),w(Lp),w(JL),w(A_),f&&t(_Ge),f&&t(Ni),w(YL),f&&t(bGe),f&&t($o),w(KL),w(ey),w(y_),w(oy),w(v7),f&&t(vGe),f&&t(Di),w(ry),f&&t(FGe),f&&t(ko),w(ty),w(ny),w(T7),w(sy),w(l1),f&&t(TGe),f&&t(Vi),w(ly),f&&t(MGe),f&&t(So),w(iy),w(cy),w(d1),w(fy),w(Q1),f&&t(EGe),f&&t(Wi),w(my),f&&t(CGe),f&&t(Ro),w(gy),w(py),w(U1),w(uy),w(h2),f&&t(wGe),f&&t(Ui),w(_y),f&&t(AGe),f&&t(Po),w(by),w(Fy),w(u2),w(Ty),w(mb),f&&t(LGe),f&&t(Ki),w(My),f&&t(yGe),f&&t(Bo),w(Ey),w(wy),w(hb),w(Ay),w(zb),f&&t(xGe),f&&t(od),w(Ly),f&&t($Ge),f&&t(Io),w(yy),w($y),w(Qb),w(ky),w(ev),f&&t(kGe),f&&t(ad),w(Sy),f&&t(SGe),f&&t(No),w(Ry),w(By),w(rv),w(Iy),w(jv),f&&t(RGe),f&&t(ld),w(Ny),f&&t(PGe),f&&t(qo),w(qy),w(Dy),w(Gv),w(Gy),w(x0),f&&t(BGe),f&&t(cd),w(Oy),f&&t(IGe),f&&t(jo),w(Vy),w(zy),w(k0),w(Wy),w(P0),f&&t(NGe),f&&t(gd),w(Qy),f&&t(qGe),f&&t(Do),w(Hy),w(Jy),w(I0),w(Yy),w(J0),f&&t(jGe),f&&t(ud),w(Ky),f&&t(DGe),f&&t(Go),w(Zy),w(o8),w(K0),w(r8),w(oF),f&&t(GGe),f&&t(vd),w(t8),f&&t(OGe),f&&t(Oo),w(a8),w(s8),w(tF),w(l8),w(sF),f&&t(VGe),f&&t(Md),w(i8),f&&t(XGe),f&&t(Vo),w(d8),w(f8),w(iF),w(m8),w(vF),f&&t(zGe),f&&t(wd),w(g8),f&&t(WGe),f&&t(Xo),w(h8),w(u8),w(TF),w(_8),w(yF),f&&t(QGe),f&&t(yd),w(b8),f&&t(HGe),f&&t(zo),w(v8),w(T8),w($F),w(M8),w(OF),f&&t(UGe),f&&t(kd),w(E8),f&&t(JGe),f&&t(Wo),w(C8),w(A8),w(XF),w(L8),w(HF),f&&t(YGe),f&&t(Pd),w(x8),f&&t(KGe),f&&t(Qo),w($8),w(S8),w(JF),w(R8),w(tT),f&&t(ZGe),f&&t(Nd),w(P8),f&&t(eOe),f&&t(Ho),w(B8),w(N8),w(nT),w(q8),w(cT),f&&t(oOe),f&&t(Gd),w(j8),f&&t(rOe),f&&t(Uo),w(D8),w(O8),w(mT),w(V8),w(uT),f&&t(tOe),f&&t(Xd),w(z8),f&&t(aOe),f&&t(Jo),w(W8),w(H8),w(bT),w(U8),w(TT),f&&t(nOe),f&&t(Qd),w(J8),f&&t(sOe),f&&t(Yo),w(Y8),w(Z8),w(ET),w(e9),w(xT),f&&t(lOe),f&&t(Jd),w(o9),f&&t(iOe),f&&t(Ko),w(r9),w(a9),w(kT),w(n9),w(PT),f&&t(dOe),f&&t(Zd),w(s9),f&&t(cOe),f&&t(Zo),w(l9),w(d9),w(IT),w(c9),w(xM),f&&t(fOe),f&&t(rc),w(f9),f&&t(mOe),f&&t(er),w(m9),w(h9),w(kM),w(p9),w(o4),f&&t(gOe),f&&t(nc),w(u9),f&&t(hOe),f&&t(or),w(_9),w(v9),w(t4),w(F9),w(_4),f&&t(pOe),f&&t(ic),w(T9),f&&t(uOe),f&&t(rr),w(M9),w(C9),w(v4),w(w9),w(C4),f&&t(_Oe),f&&t(fc),w(A9),f&&t(bOe),f&&t(tr),w(L9),w(x9),w(A4),w($9),w(Q4),f&&t(vOe),f&&t(hc),w(k9),f&&t(FOe),f&&t(ar),w(S9),w(P9),w(U4),w(B9),w(sE),f&&t(TOe),f&&t(_c),w(I9),f&&t(MOe),f&&t(nr),w(N9),w(j9),w(iE),w(D9),w(BE),f&&t(EOe),f&&t(Fc),w(G9),f&&t(COe),f&&t(sr),w(O9),w(X9),w(NE),w(z9),w(oC),f&&t(wOe),f&&t(Ec),w(W9),f&&t(AOe),f&&t(lr),w(Q9),w(U9),w(tC),w(J9),w(sC),f&&t(LOe),f&&t(Ac),w(K9),f&&t(yOe),f&&t(ir),w(Z9),w(ox),w(iC),w(rx),w(cC),f&&t(xOe),f&&t(xc),w(tx),f&&t($Oe),f&&t(dr),w(ax),w(sx),w(mC),w(lx),w(RC),f&&t(kOe),f&&t(Sc),w(ix),f&&t(SOe),f&&t(cr),w(dx),w(fx),w(BC),w(mx),w(r5),f&&t(ROe),f&&t(Bc),w(gx),f&&t(POe),f&&t(fr),w(hx),w(ux),w(a5),w(_x),w(s5),f&&t(BOe),f&&t(qc),w(bx),f&&t(IOe),f&&t(mr),w(vx),w(Tx),w(i5),w(Mx),w(c5),f&&t(NOe),f&&t(Gc),w(Ex),f&&t(qOe),f&&t(gr),w(Cx),w(Ax),w(m5),w(Lx),w(G5),f&&t(jOe),f&&t(Xc),w(yx),f&&t(DOe),f&&t(hr),w(xx),w(kx),w(V5),w(Sx),w(e3),f&&t(GOe),f&&t(Qc),w(Rx),f&&t(OOe),f&&t(pr),w(Px),w(Ix),w(r3),w(Nx),w(u3),f&&t(VOe),f&&t(Jc),w(qx),f&&t(XOe),f&&t(ur),w(jx),w(Gx),w(b3),w(Ox),w(x3),f&&t(zOe),f&&t(Zc),w(Vx),f&&t(WOe),f&&t(_r),w(Xx),w(Wx),w(k3),w(Qx),w(O3),f&&t(QOe),f&&t(rf),w(Hx),f&&t(HOe),f&&t(br),w(Ux),w(Yx),w(X3),w(Kx),w(ow),f&&t(UOe),f&&t(nf),w(Zx),f&&t(JOe),f&&t(vr),w(e$),w(r$),w(tw),w(t$),w(hw),f&&t(YOe),f&&t(df),w(a$),f&&t(KOe),f&&t(Fr),w(n$),w(l$),w(uw),w(i$),w(ww),f&&t(ZOe),f&&t(mf),w(d$),f&&t(eVe),f&&t(Tr),w(c$),w(m$),w(Lw),w(g$),w(Iw),f&&t(oVe),f&&t(pf),w(h$),f&&t(rVe),f&&t(Mr),w(p$),w(_$),w(qw),w(b$),w(Dw),f&&t(tVe),f&&t(bf),w(v$),f&&t(aVe),f&&t(Er),w(F$),w(M$),w(Ow),w(E$),w(zw),f&&t(nVe),f&&t(Tf),w(w$),f&&t(sVe),f&&t(Cr),w(A$),w(y$),w(Qw),w(x$),w(Uw)}}}const xDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $Dt(y){return yqt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class NDt extends Cqt{constructor(g){super();wqt(this,g,$Dt,yDt,Aqt,{})}}export{NDt as default,xDt as metadata};
